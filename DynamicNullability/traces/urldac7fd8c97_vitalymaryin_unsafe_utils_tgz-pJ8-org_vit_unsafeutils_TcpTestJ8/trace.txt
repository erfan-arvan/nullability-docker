Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 4 times.  Unmatched entries are ignored!
Unterminated calls:
  org.vit.unsafeutils.TcpTest.main(java.lang.String[]) : 1 invocation
  org.vit.unsafeutils.serializer.UnsafeSerializer.init(java.lang.String) : 1 invocation
  org.reflections.Reflections.Reflections(java.lang.String, org.reflections.scanners.Scanner[]) : 1 invocation
  org.reflections.Reflections$1.(java.lang.String, org.reflections.scanners.Scanner[]) : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
ch.qos.logback.classic.BasicConfigurator:::CLASS
ch.qos.logback.classic.BasicConfigurator.hiddenSingleton has only one value
===========================================================================
ch.qos.logback.classic.BasicConfigurator:::OBJECT
this has only one value
===========================================================================
ch.qos.logback.classic.BasicConfigurator.BasicConfigurator():::EXIT
===========================================================================
ch.qos.logback.classic.BasicConfigurator.configure(ch.qos.logback.classic.LoggerContext):::ENTER
lc has only one value
ch.qos.logback.classic.LoggerContext.ROOT_NAME has only one value
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == "root"
lc.root has only one value
ch.qos.logback.classic.Logger.FQCN has only one value
ch.qos.logback.classic.Logger.FQCN.toString == "ch.qos.logback.classic.Logger"
ch.qos.logback.classic.Logger.instanceCount == 1
lc.root.name has only one value
lc.root.name.toString == "root"
lc.root.level has only one value
lc.root.effectiveLevelInt == 10000
lc.root.parent == null
lc.root.childrenList == null
lc.root.aai == null
lc.root.additive == true
lc.root.loggerContext has only one value
lc.root.loggerRemoteView has only one value
lc.size == 1
lc.noAppenderWarning == 0
lc.contextListenerList has only one value
lc.contextListenerList[] == []
lc.contextListenerList[].getClass().getName() == []
lc.contextListenerList.getClass().getName() == java.util.ArrayList.class
lc.loggerCache has only one value
lc.loggerContextRemoteView has only one value
lc.loggerContextRemoteView.name has only one value
lc.loggerContextRemoteView.name.toString == "default"
lc.loggerContextRemoteView.propertyMap has only one value
lc.loggerContextRemoteView.propertyMap.getClass().getName() == java.util.HashMap.class
lc.cfai == null
lc.started == false
lc.name has only one value
lc.name.toString == "default"
lc.sm has only one value
lc.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
lc.propertyMap has only one value
lc.propertyMap.getClass().getName() == java.util.HashMap.class
lc.objectMap has only one value
lc.objectMap.getClass().getName() == java.util.HashMap.class
===========================================================================
ch.qos.logback.classic.BasicConfigurator.configure(ch.qos.logback.classic.LoggerContext):::EXIT
ch.qos.logback.classic.BasicConfigurator.hiddenSingleton == orig(ch.qos.logback.classic.BasicConfigurator.hiddenSingleton)
ch.qos.logback.classic.LoggerContext.ROOT_NAME == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME)
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString)
lc.root == orig(lc.root)
ch.qos.logback.classic.Logger.FQCN == orig(ch.qos.logback.classic.Logger.FQCN)
ch.qos.logback.classic.Logger.FQCN.toString == orig(ch.qos.logback.classic.Logger.FQCN.toString)
ch.qos.logback.classic.Logger.instanceCount == orig(ch.qos.logback.classic.Logger.instanceCount)
lc.root.name == orig(lc.root.name)
lc.root.name.toString == orig(lc.root.name.toString)
lc.root.level == orig(lc.root.level)
lc.root.effectiveLevelInt == orig(lc.root.effectiveLevelInt)
lc.root.parent == orig(lc.root.parent)
lc.root.childrenList == orig(lc.root.childrenList)
lc.root.additive == orig(lc.root.additive)
lc.root.loggerContext == orig(lc.root.loggerContext)
lc.root.loggerRemoteView == orig(lc.root.loggerRemoteView)
lc.size == orig(lc.size)
lc.noAppenderWarning == orig(lc.noAppenderWarning)
lc.contextListenerList == orig(lc.contextListenerList)
lc.contextListenerList[] == orig(lc.contextListenerList[])
lc.contextListenerList.getClass().getName() == orig(lc.contextListenerList.getClass().getName())
lc.loggerCache == orig(lc.loggerCache)
lc.loggerContextRemoteView == orig(lc.loggerContextRemoteView)
lc.loggerContextRemoteView.name == orig(lc.loggerContextRemoteView.name)
lc.loggerContextRemoteView.name.toString == orig(lc.loggerContextRemoteView.name.toString)
lc.loggerContextRemoteView.propertyMap == orig(lc.loggerContextRemoteView.propertyMap)
lc.loggerContextRemoteView.propertyMap.getClass().getName() == orig(lc.loggerContextRemoteView.propertyMap.getClass().getName())
lc.cfai == orig(lc.cfai)
lc.started == orig(lc.started)
lc.name == orig(lc.name)
lc.name.toString == orig(lc.name.toString)
lc.sm == orig(lc.sm)
lc.sm.getClass().getName() == orig(lc.sm.getClass().getName())
lc.propertyMap == orig(lc.propertyMap)
lc.propertyMap.getClass().getName() == orig(lc.propertyMap.getClass().getName())
lc.objectMap == orig(lc.objectMap)
lc.objectMap.getClass().getName() == orig(lc.objectMap.getClass().getName())
ch.qos.logback.classic.LoggerContext.ROOT_NAME has only one value
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == "root"
lc.root has only one value
ch.qos.logback.classic.Logger.FQCN has only one value
ch.qos.logback.classic.Logger.FQCN.toString == "ch.qos.logback.classic.Logger"
ch.qos.logback.classic.Logger.instanceCount == 1
lc.root.name has only one value
lc.root.name.toString == "root"
lc.root.level has only one value
lc.root.effectiveLevelInt == 10000
lc.root.parent == null
lc.root.childrenList == null
lc.root.aai has only one value
lc.root.additive == true
lc.root.loggerContext has only one value
lc.root.loggerRemoteView has only one value
lc.size == 1
lc.noAppenderWarning == 0
lc.contextListenerList has only one value
lc.contextListenerList[] == []
lc.contextListenerList[].getClass().getName() == []
lc.contextListenerList.getClass().getName() == java.util.ArrayList.class
lc.loggerCache has only one value
lc.loggerContextRemoteView has only one value
lc.loggerContextRemoteView.name has only one value
lc.loggerContextRemoteView.name.toString == "default"
lc.loggerContextRemoteView.propertyMap has only one value
lc.loggerContextRemoteView.propertyMap.getClass().getName() == java.util.HashMap.class
lc.cfai == null
lc.started == false
lc.name has only one value
lc.name.toString == "default"
lc.sm has only one value
lc.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
lc.propertyMap has only one value
lc.propertyMap.getClass().getName() == java.util.HashMap.class
lc.objectMap has only one value
lc.objectMap.getClass().getName() == java.util.HashMap.class
===========================================================================
ch.qos.logback.classic.Level:::CLASS
===========================================================================
ch.qos.logback.classic.Level:::OBJECT
===========================================================================
ch.qos.logback.classic.Level.Level(int, java.lang.String):::ENTER
===========================================================================
ch.qos.logback.classic.Level.Level(int, java.lang.String):::EXIT
levelStr.toString == orig(levelStr.toString)
===========================================================================
ch.qos.logback.classic.Logger:::CLASS
ch.qos.logback.classic.Logger.FQCN has only one value
ch.qos.logback.classic.Logger.FQCN != null
ch.qos.logback.classic.Logger.FQCN.toString == "ch.qos.logback.classic.Logger"
===========================================================================
ch.qos.logback.classic.Logger:::OBJECT
this.name != null
ch.qos.logback.classic.Level.OFF_INTEGER has only one value
ch.qos.logback.classic.Level.OFF_INTEGER != null
ch.qos.logback.classic.Level.ERROR_INTEGER has only one value
ch.qos.logback.classic.Level.ERROR_INTEGER != null
ch.qos.logback.classic.Level.WARN_INTEGER has only one value
ch.qos.logback.classic.Level.WARN_INTEGER != null
ch.qos.logback.classic.Level.INFO_INTEGER has only one value
ch.qos.logback.classic.Level.INFO_INTEGER != null
ch.qos.logback.classic.Level.DEBUG_INTEGER has only one value
ch.qos.logback.classic.Level.DEBUG_INTEGER != null
ch.qos.logback.classic.Level.TRACE_INTEGER has only one value
ch.qos.logback.classic.Level.TRACE_INTEGER != null
ch.qos.logback.classic.Level.ALL_INTEGER has only one value
ch.qos.logback.classic.Level.ALL_INTEGER != null
ch.qos.logback.classic.Level.OFF has only one value
ch.qos.logback.classic.Level.OFF != null
ch.qos.logback.classic.Level.ERROR has only one value
ch.qos.logback.classic.Level.ERROR != null
ch.qos.logback.classic.Level.WARN has only one value
ch.qos.logback.classic.Level.WARN != null
ch.qos.logback.classic.Level.INFO has only one value
ch.qos.logback.classic.Level.INFO != null
ch.qos.logback.classic.Level.DEBUG has only one value
ch.qos.logback.classic.Level.DEBUG != null
ch.qos.logback.classic.Level.TRACE has only one value
ch.qos.logback.classic.Level.TRACE != null
ch.qos.logback.classic.Level.ALL has only one value
ch.qos.logback.classic.Level.ALL != null
ch.qos.logback.classic.Level.OFF.levelInt == 2147483647
ch.qos.logback.classic.Level.OFF.levelStr has only one value
ch.qos.logback.classic.Level.OFF.levelStr != null
ch.qos.logback.classic.Level.OFF.levelStr.toString == "OFF"
ch.qos.logback.classic.Level.ERROR.levelInt == 40000
ch.qos.logback.classic.Level.ERROR.levelStr has only one value
ch.qos.logback.classic.Level.ERROR.levelStr != null
ch.qos.logback.classic.Level.ERROR.levelStr.toString == "ERROR"
ch.qos.logback.classic.Level.WARN.levelInt == 30000
ch.qos.logback.classic.Level.WARN.levelStr has only one value
ch.qos.logback.classic.Level.WARN.levelStr != null
ch.qos.logback.classic.Level.WARN.levelStr.toString == "WARN"
ch.qos.logback.classic.Level.INFO.levelInt == 20000
ch.qos.logback.classic.Level.INFO.levelStr has only one value
ch.qos.logback.classic.Level.INFO.levelStr != null
ch.qos.logback.classic.Level.INFO.levelStr.toString == "INFO"
ch.qos.logback.classic.Level.DEBUG.levelInt == 10000
ch.qos.logback.classic.Level.DEBUG.levelStr has only one value
ch.qos.logback.classic.Level.DEBUG.levelStr != null
ch.qos.logback.classic.Level.DEBUG.levelStr.toString == "DEBUG"
ch.qos.logback.classic.Level.TRACE.levelInt == 5000
ch.qos.logback.classic.Level.TRACE.levelStr has only one value
ch.qos.logback.classic.Level.TRACE.levelStr != null
ch.qos.logback.classic.Level.TRACE.levelStr.toString == "TRACE"
ch.qos.logback.classic.Level.ALL.levelInt == -2147483648
ch.qos.logback.classic.Level.ALL.levelStr has only one value
ch.qos.logback.classic.Level.ALL.levelStr != null
ch.qos.logback.classic.Level.ALL.levelStr.toString == "ALL"
this.level.levelInt == 10000
this.level.levelStr has only one value
this.level.levelStr.toString == "DEBUG"
this.effectiveLevelInt one of { 0, 10000 }
this.parent.name != null
this.parent.name.toString one of { "org", "org.reflections", "root" }
this.parent.level.levelInt == 10000
this.parent.level.levelStr has only one value
this.parent.level.levelStr.toString == "DEBUG"
this.parent.effectiveLevelInt == 10000
this.parent.parent.name.toString one of { "org", "root" }
this.parent.parent.effectiveLevelInt == 10000
this.parent.parent.childrenList[].getClass().getName() == [ch.qos.logback.classic.Logger]
this.parent.parent.childrenList[].getClass().getName() elements == ch.qos.logback.classic.Logger.class
this.parent.parent.childrenList.getClass().getName() == java.util.ArrayList.class
this.parent.parent.additive == true
this.parent.parent.loggerContext has only one value
this.parent.childrenList != null
this.parent.childrenList[] elements != null
this.parent.childrenList[].getClass().getName() elements == ch.qos.logback.classic.Logger.class
this.parent.childrenList[].getClass().getName() one of { [], [ch.qos.logback.classic.Logger] }
this.parent.childrenList.getClass().getName() == java.util.ArrayList.class
this.parent.aai.appenderList has only one value
this.parent.aai.appenderList[] contains no nulls and has only one value, of length 1
this.parent.aai.appenderList[] elements has only one value
this.parent.aai.appenderList[].getClass().getName() == [ch.qos.logback.core.ConsoleAppender]
this.parent.aai.appenderList[].getClass().getName() elements == ch.qos.logback.core.ConsoleAppender.class
this.parent.aai.appenderList.getClass().getName() == java.util.ArrayList.class
this.parent.additive == true
this.parent.loggerContext has only one value
this.parent.loggerContext != null
ch.qos.logback.classic.LoggerContext.ROOT_NAME has only one value
ch.qos.logback.classic.LoggerContext.ROOT_NAME != null
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == "root"
this.parent.loggerContext.root has only one value
this.parent.loggerContext.root != null
this.parent.loggerContext.size one of { 1, 2, 3 }
this.parent.loggerContext.noAppenderWarning == 0
this.parent.loggerContext.contextListenerList has only one value
this.parent.loggerContext.contextListenerList != null
this.parent.loggerContext.contextListenerList[] == []
this.parent.loggerContext.contextListenerList[].getClass().getName() == []
this.parent.loggerContext.contextListenerList.getClass().getName() == java.util.ArrayList.class
this.parent.loggerContext.loggerCache has only one value
this.parent.loggerContext.loggerCache != null
this.parent.loggerContext.loggerContextRemoteView has only one value
this.parent.loggerContext.loggerContextRemoteView != null
this.parent.loggerContext.cfai == null
this.parent.loggerContext.started == false
this.parent.loggerContext.name has only one value
this.parent.loggerContext.name != null
this.parent.loggerContext.name.toString == "default"
this.parent.loggerContext.sm has only one value
this.parent.loggerContext.sm != null
this.parent.loggerContext.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
this.parent.loggerContext.propertyMap has only one value
this.parent.loggerContext.propertyMap != null
this.parent.loggerContext.propertyMap.getClass().getName() == java.util.HashMap.class
this.parent.loggerContext.objectMap has only one value
this.parent.loggerContext.objectMap != null
this.parent.loggerContext.objectMap.getClass().getName() == java.util.HashMap.class
this.parent.loggerRemoteView != null
this.parent.loggerRemoteView.loggerContextView has only one value
this.parent.loggerRemoteView.loggerContextView != null
this.parent.loggerRemoteView.name != null
this.parent.loggerRemoteView.name.toString one of { "org", "org.reflections", "root" }
ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled == false
this.childrenList[].getClass().getName() == [ch.qos.logback.classic.Logger]
this.childrenList[].getClass().getName() elements == ch.qos.logback.classic.Logger.class
this.childrenList.getClass().getName() == java.util.ArrayList.class
this.aai.appenderList has only one value
this.aai.appenderList[] contains no nulls and has only one value, of length 1
this.aai.appenderList[] elements has only one value
this.aai.appenderList[].getClass().getName() == [ch.qos.logback.core.ConsoleAppender]
this.aai.appenderList[].getClass().getName() elements == ch.qos.logback.core.ConsoleAppender.class
this.aai.appenderList.getClass().getName() == java.util.ArrayList.class
this.additive == true
this.loggerContext has only one value
this.loggerContext != null
this.loggerContext.root.name has only one value
this.loggerContext.root.name != null
this.loggerContext.root.name.toString == "root"
this.loggerContext.root.effectiveLevelInt one of { 0, 10000 }
this.loggerContext.root.parent == null
this.loggerContext.root.childrenList[] elements has only one value
this.loggerContext.root.childrenList[] elements != null
this.loggerContext.root.childrenList[].getClass().getName() elements == ch.qos.logback.classic.Logger.class
this.loggerContext.root.childrenList[].getClass().getName() one of { [], [ch.qos.logback.classic.Logger] }
this.loggerContext.root.childrenList.getClass().getName() == java.util.ArrayList.class
this.loggerContext.root.additive == true
this.loggerContext.root.loggerContext has only one value
this.loggerContext.root.loggerContext != null
this.loggerContext.root.loggerRemoteView != null
this.loggerContext.size >= 0
this.loggerContext.noAppenderWarning == 0
this.loggerContext.contextListenerList has only one value
this.loggerContext.contextListenerList != null
this.loggerContext.contextListenerList[] == []
this.loggerContext.contextListenerList[].getClass().getName() == []
this.loggerContext.contextListenerList.getClass().getName() == java.util.ArrayList.class
this.loggerContext.loggerCache has only one value
this.loggerContext.loggerCache != null
this.loggerContext.loggerContextRemoteView != null
this.loggerContext.loggerContextRemoteView.name.toString == "default"
this.loggerContext.loggerContextRemoteView.propertyMap != null
this.loggerContext.loggerContextRemoteView.propertyMap.getClass().getName() == java.util.HashMap.class
this.loggerContext.cfai == null
this.loggerContext.started == false
this.loggerContext.name.toString == "default"
this.loggerContext.sm has only one value
this.loggerContext.sm != null
this.loggerContext.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
this.loggerContext.propertyMap has only one value
this.loggerContext.propertyMap != null
this.loggerContext.propertyMap.getClass().getName() == java.util.HashMap.class
this.loggerContext.objectMap has only one value
this.loggerContext.objectMap != null
this.loggerContext.objectMap.getClass().getName() == java.util.HashMap.class
this.loggerRemoteView.loggerContextView != null
this.loggerRemoteView.loggerContextView.name.toString == "default"
this.loggerRemoteView.loggerContextView.propertyMap != null
this.loggerRemoteView.loggerContextView.propertyMap.getClass().getName() == java.util.HashMap.class
this.loggerRemoteView.name != null
size(this.parent.parent.childrenList[]) == 1
size(this.parent.childrenList[]) one of { 0, 1 }
size(this.parent.aai.appenderList[]) == 1
size(this.childrenList[]) == 1
size(this.aai.appenderList[]) == 1
size(this.loggerContext.root.childrenList[]) one of { 0, 1 }
===========================================================================
ch.qos.logback.classic.Logger.Logger(java.lang.String, ch.qos.logback.classic.Logger, ch.qos.logback.classic.LoggerContext):::ENTER
ch.qos.logback.classic.Logger.FQCN has only one value
ch.qos.logback.classic.Logger.FQCN.toString == "ch.qos.logback.classic.Logger"
parent.name.toString one of { "org", "org.reflections", "root" }
ch.qos.logback.classic.Level.OFF_INTEGER has only one value
ch.qos.logback.classic.Level.ERROR_INTEGER has only one value
ch.qos.logback.classic.Level.WARN_INTEGER has only one value
ch.qos.logback.classic.Level.INFO_INTEGER has only one value
ch.qos.logback.classic.Level.DEBUG_INTEGER has only one value
ch.qos.logback.classic.Level.TRACE_INTEGER has only one value
ch.qos.logback.classic.Level.ALL_INTEGER has only one value
ch.qos.logback.classic.Level.OFF has only one value
ch.qos.logback.classic.Level.ERROR has only one value
ch.qos.logback.classic.Level.WARN has only one value
ch.qos.logback.classic.Level.INFO has only one value
ch.qos.logback.classic.Level.DEBUG has only one value
ch.qos.logback.classic.Level.TRACE has only one value
ch.qos.logback.classic.Level.ALL has only one value
parent.level.levelInt == 10000
parent.level.levelStr has only one value
parent.level.levelStr.toString == "DEBUG"
parent.effectiveLevelInt == 10000
parent.parent.name.toString one of { "org", "root" }
parent.parent.effectiveLevelInt == 10000
parent.parent.childrenList[].getClass().getName() == [ch.qos.logback.classic.Logger]
parent.parent.childrenList[].getClass().getName() elements == ch.qos.logback.classic.Logger.class
parent.parent.childrenList.getClass().getName() == java.util.ArrayList.class
parent.parent.additive == true
parent.parent.loggerContext has only one value
parent.childrenList[] == []
parent.childrenList[].getClass().getName() == []
parent.childrenList.getClass().getName() == java.util.ArrayList.class
parent.aai.appenderList has only one value
parent.aai.appenderList[] contains no nulls and has only one value, of length 1
parent.aai.appenderList[] elements has only one value
parent.aai.appenderList[].getClass().getName() == [ch.qos.logback.core.ConsoleAppender]
parent.aai.appenderList[].getClass().getName() elements == ch.qos.logback.core.ConsoleAppender.class
parent.aai.appenderList.getClass().getName() == java.util.ArrayList.class
parent.additive == true
parent.loggerContext has only one value
ch.qos.logback.classic.LoggerContext.ROOT_NAME has only one value
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == "root"
parent.loggerContext.root has only one value
parent.loggerContext.size one of { 1, 2, 3 }
parent.loggerContext.noAppenderWarning == 0
parent.loggerContext.contextListenerList has only one value
parent.loggerContext.contextListenerList[] == []
parent.loggerContext.contextListenerList[].getClass().getName() == []
parent.loggerContext.contextListenerList.getClass().getName() == java.util.ArrayList.class
parent.loggerContext.loggerCache has only one value
parent.loggerContext.loggerContextRemoteView has only one value
parent.loggerContext.cfai == null
parent.loggerContext.started == false
parent.loggerContext.name has only one value
parent.loggerContext.name.toString == "default"
parent.loggerContext.sm has only one value
parent.loggerContext.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
parent.loggerContext.propertyMap has only one value
parent.loggerContext.propertyMap.getClass().getName() == java.util.HashMap.class
parent.loggerContext.objectMap has only one value
parent.loggerContext.objectMap.getClass().getName() == java.util.HashMap.class
parent.loggerRemoteView.loggerContextView has only one value
parent.loggerRemoteView.name.toString one of { "org", "org.reflections", "root" }
ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled == false
loggerContext has only one value
loggerContext.root.name has only one value
loggerContext.root.name.toString == "root"
loggerContext.root.level has only one value
loggerContext.root.effectiveLevelInt == 10000
loggerContext.root.parent == null
loggerContext.root.childrenList has only one value
loggerContext.root.childrenList[] elements has only one value
loggerContext.root.childrenList[].getClass().getName() elements == ch.qos.logback.classic.Logger.class
loggerContext.root.childrenList[].getClass().getName() one of { [], [ch.qos.logback.classic.Logger] }
loggerContext.root.childrenList.getClass().getName() == java.util.ArrayList.class
loggerContext.root.aai has only one value
loggerContext.root.additive == true
loggerContext.root.loggerContext has only one value
loggerContext.root.loggerRemoteView has only one value
loggerContext.noAppenderWarning == 0
loggerContext.contextListenerList has only one value
loggerContext.contextListenerList[] == []
loggerContext.contextListenerList[].getClass().getName() == []
loggerContext.contextListenerList.getClass().getName() == java.util.ArrayList.class
loggerContext.loggerCache has only one value
loggerContext.loggerContextRemoteView.name.toString == "default"
loggerContext.loggerContextRemoteView.propertyMap.getClass().getName() == java.util.HashMap.class
loggerContext.cfai == null
loggerContext.started == false
loggerContext.name.toString == "default"
loggerContext.sm has only one value
loggerContext.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
loggerContext.propertyMap has only one value
loggerContext.propertyMap.getClass().getName() == java.util.HashMap.class
loggerContext.objectMap has only one value
loggerContext.objectMap.getClass().getName() == java.util.HashMap.class
size(parent.parent.childrenList[]) == 1
size(parent.aai.appenderList[]) == 1
size(loggerContext.root.childrenList[]) one of { 0, 1 }
===========================================================================
ch.qos.logback.classic.Logger.Logger(java.lang.String, ch.qos.logback.classic.Logger, ch.qos.logback.classic.LoggerContext):::EXIT
ch.qos.logback.classic.Logger.FQCN == orig(ch.qos.logback.classic.Logger.FQCN)
ch.qos.logback.classic.Logger.FQCN.toString == orig(ch.qos.logback.classic.Logger.FQCN.toString)
ch.qos.logback.classic.Level.OFF_INTEGER == orig(ch.qos.logback.classic.Level.OFF_INTEGER)
ch.qos.logback.classic.Level.ERROR_INTEGER == orig(ch.qos.logback.classic.Level.ERROR_INTEGER)
ch.qos.logback.classic.Level.WARN_INTEGER == orig(ch.qos.logback.classic.Level.WARN_INTEGER)
ch.qos.logback.classic.Level.INFO_INTEGER == orig(ch.qos.logback.classic.Level.INFO_INTEGER)
ch.qos.logback.classic.Level.DEBUG_INTEGER == orig(ch.qos.logback.classic.Level.DEBUG_INTEGER)
ch.qos.logback.classic.Level.TRACE_INTEGER == orig(ch.qos.logback.classic.Level.TRACE_INTEGER)
ch.qos.logback.classic.Level.ALL_INTEGER == orig(ch.qos.logback.classic.Level.ALL_INTEGER)
ch.qos.logback.classic.Level.OFF == orig(ch.qos.logback.classic.Level.OFF)
ch.qos.logback.classic.Level.ERROR == orig(ch.qos.logback.classic.Level.ERROR)
ch.qos.logback.classic.Level.WARN == orig(ch.qos.logback.classic.Level.WARN)
ch.qos.logback.classic.Level.INFO == orig(ch.qos.logback.classic.Level.INFO)
ch.qos.logback.classic.Level.DEBUG == orig(ch.qos.logback.classic.Level.DEBUG)
ch.qos.logback.classic.Level.TRACE == orig(ch.qos.logback.classic.Level.TRACE)
ch.qos.logback.classic.Level.ALL == orig(ch.qos.logback.classic.Level.ALL)
ch.qos.logback.classic.LoggerContext.ROOT_NAME == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME)
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString)
ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled == orig(ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled)
name.toString == orig(name.toString)
parent.name == orig(parent.name)
parent.name.toString == orig(parent.name.toString)
parent.level == orig(parent.level)
parent.level.levelInt == orig(parent.level.levelInt)
parent.level.levelStr == orig(parent.level.levelStr)
parent.level.levelStr.toString == orig(parent.level.levelStr.toString)
parent.effectiveLevelInt == orig(parent.effectiveLevelInt)
parent.parent == orig(parent.parent)
parent.parent.name == orig(parent.parent.name)
parent.parent.name.toString == orig(parent.parent.name.toString)
parent.parent.level == orig(parent.parent.level)
parent.parent.effectiveLevelInt == orig(parent.parent.effectiveLevelInt)
parent.parent.parent == orig(parent.parent.parent)
parent.parent.childrenList == orig(parent.parent.childrenList)
parent.parent.childrenList[] == orig(parent.parent.childrenList[])
parent.parent.childrenList.getClass().getName() == orig(parent.parent.childrenList.getClass().getName())
parent.parent.aai == orig(parent.parent.aai)
parent.parent.additive == orig(parent.parent.additive)
parent.parent.loggerContext == orig(parent.parent.loggerContext)
parent.parent.loggerRemoteView == orig(parent.parent.loggerRemoteView)
parent.childrenList == orig(parent.childrenList)
parent.childrenList[] == orig(parent.childrenList[])
parent.childrenList.getClass().getName() == orig(parent.childrenList.getClass().getName())
parent.aai == orig(parent.aai)
parent.aai.appenderList == orig(parent.aai.appenderList)
parent.aai.appenderList[] == orig(parent.aai.appenderList[])
parent.aai.appenderList.getClass().getName() == orig(parent.aai.appenderList.getClass().getName())
parent.additive == orig(parent.additive)
parent.loggerContext == orig(parent.loggerContext)
parent.loggerContext.root == orig(parent.loggerContext.root)
parent.loggerContext.size == orig(parent.loggerContext.size)
parent.loggerContext.noAppenderWarning == orig(parent.loggerContext.noAppenderWarning)
parent.loggerContext.contextListenerList == orig(parent.loggerContext.contextListenerList)
parent.loggerContext.contextListenerList[] == orig(parent.loggerContext.contextListenerList[])
parent.loggerContext.contextListenerList.getClass().getName() == orig(parent.loggerContext.contextListenerList.getClass().getName())
parent.loggerContext.loggerCache == orig(parent.loggerContext.loggerCache)
parent.loggerContext.loggerContextRemoteView == orig(parent.loggerContext.loggerContextRemoteView)
parent.loggerContext.cfai == orig(parent.loggerContext.cfai)
parent.loggerContext.started == orig(parent.loggerContext.started)
parent.loggerContext.name == orig(parent.loggerContext.name)
parent.loggerContext.name.toString == orig(parent.loggerContext.name.toString)
parent.loggerContext.sm == orig(parent.loggerContext.sm)
parent.loggerContext.sm.getClass().getName() == orig(parent.loggerContext.sm.getClass().getName())
parent.loggerContext.propertyMap == orig(parent.loggerContext.propertyMap)
parent.loggerContext.propertyMap.getClass().getName() == orig(parent.loggerContext.propertyMap.getClass().getName())
parent.loggerContext.objectMap == orig(parent.loggerContext.objectMap)
parent.loggerContext.objectMap.getClass().getName() == orig(parent.loggerContext.objectMap.getClass().getName())
parent.loggerRemoteView == orig(parent.loggerRemoteView)
parent.loggerRemoteView.loggerContextView == orig(parent.loggerRemoteView.loggerContextView)
parent.loggerRemoteView.name == orig(parent.loggerRemoteView.name)
parent.loggerRemoteView.name.toString == orig(parent.loggerRemoteView.name.toString)
loggerContext.root == orig(loggerContext.root)
loggerContext.root.name == orig(loggerContext.root.name)
loggerContext.root.name.toString == orig(loggerContext.root.name.toString)
loggerContext.root.level == orig(loggerContext.root.level)
loggerContext.root.effectiveLevelInt == orig(loggerContext.root.effectiveLevelInt)
loggerContext.root.parent == orig(loggerContext.root.parent)
loggerContext.root.childrenList == orig(loggerContext.root.childrenList)
loggerContext.root.childrenList[] == orig(loggerContext.root.childrenList[])
loggerContext.root.childrenList.getClass().getName() == orig(loggerContext.root.childrenList.getClass().getName())
loggerContext.root.aai == orig(loggerContext.root.aai)
loggerContext.root.additive == orig(loggerContext.root.additive)
loggerContext.root.loggerContext == orig(loggerContext.root.loggerContext)
loggerContext.root.loggerRemoteView == orig(loggerContext.root.loggerRemoteView)
loggerContext.size == orig(loggerContext.size)
loggerContext.noAppenderWarning == orig(loggerContext.noAppenderWarning)
loggerContext.contextListenerList == orig(loggerContext.contextListenerList)
loggerContext.contextListenerList[] == orig(loggerContext.contextListenerList[])
loggerContext.contextListenerList.getClass().getName() == orig(loggerContext.contextListenerList.getClass().getName())
loggerContext.loggerCache == orig(loggerContext.loggerCache)
loggerContext.loggerContextRemoteView == orig(loggerContext.loggerContextRemoteView)
loggerContext.loggerContextRemoteView.name == orig(loggerContext.loggerContextRemoteView.name)
loggerContext.loggerContextRemoteView.name.toString == orig(loggerContext.loggerContextRemoteView.name.toString)
loggerContext.loggerContextRemoteView.propertyMap == orig(loggerContext.loggerContextRemoteView.propertyMap)
loggerContext.loggerContextRemoteView.propertyMap.getClass().getName() == orig(loggerContext.loggerContextRemoteView.propertyMap.getClass().getName())
loggerContext.cfai == orig(loggerContext.cfai)
loggerContext.started == orig(loggerContext.started)
loggerContext.name == orig(loggerContext.name)
loggerContext.name.toString == orig(loggerContext.name.toString)
loggerContext.sm == orig(loggerContext.sm)
loggerContext.sm.getClass().getName() == orig(loggerContext.sm.getClass().getName())
loggerContext.propertyMap == orig(loggerContext.propertyMap)
loggerContext.propertyMap.getClass().getName() == orig(loggerContext.propertyMap.getClass().getName())
loggerContext.objectMap == orig(loggerContext.objectMap)
loggerContext.objectMap.getClass().getName() == orig(loggerContext.objectMap.getClass().getName())
this.level == null
this.effectiveLevelInt == 0
this.parent.childrenList[] == []
this.parent.childrenList[].getClass().getName() == []
this.childrenList == null
this.aai == null
this.loggerContext.root.level has only one value
this.loggerContext.root.effectiveLevelInt == 10000
this.loggerContext.root.childrenList has only one value
this.loggerContext.root.aai has only one value
this.loggerContext.root.loggerRemoteView has only one value
parent.name.toString one of { "org", "org.reflections", "root" }
parent.level.levelInt == 10000
parent.level.levelStr has only one value
parent.level.levelStr.toString == "DEBUG"
parent.effectiveLevelInt == 10000
parent.parent.name.toString one of { "org", "root" }
parent.parent.effectiveLevelInt == 10000
parent.parent.childrenList[].getClass().getName() == [ch.qos.logback.classic.Logger]
parent.parent.childrenList[].getClass().getName() elements == ch.qos.logback.classic.Logger.class
parent.parent.childrenList.getClass().getName() == java.util.ArrayList.class
parent.parent.additive == true
parent.parent.loggerContext has only one value
parent.childrenList[] == []
parent.childrenList[].getClass().getName() == []
parent.childrenList.getClass().getName() == java.util.ArrayList.class
parent.aai.appenderList has only one value
parent.aai.appenderList[] contains no nulls and has only one value, of length 1
parent.aai.appenderList[] elements has only one value
parent.aai.appenderList[].getClass().getName() == [ch.qos.logback.core.ConsoleAppender]
parent.aai.appenderList[].getClass().getName() elements == ch.qos.logback.core.ConsoleAppender.class
parent.aai.appenderList.getClass().getName() == java.util.ArrayList.class
parent.additive == true
parent.loggerContext has only one value
parent.loggerContext.root has only one value
parent.loggerContext.size one of { 1, 2, 3 }
parent.loggerContext.noAppenderWarning == 0
parent.loggerContext.contextListenerList has only one value
parent.loggerContext.contextListenerList[] == []
parent.loggerContext.contextListenerList[].getClass().getName() == []
parent.loggerContext.contextListenerList.getClass().getName() == java.util.ArrayList.class
parent.loggerContext.loggerCache has only one value
parent.loggerContext.loggerContextRemoteView has only one value
parent.loggerContext.cfai == null
parent.loggerContext.started == false
parent.loggerContext.name has only one value
parent.loggerContext.name.toString == "default"
parent.loggerContext.sm has only one value
parent.loggerContext.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
parent.loggerContext.propertyMap has only one value
parent.loggerContext.propertyMap.getClass().getName() == java.util.HashMap.class
parent.loggerContext.objectMap has only one value
parent.loggerContext.objectMap.getClass().getName() == java.util.HashMap.class
parent.loggerRemoteView.loggerContextView has only one value
parent.loggerRemoteView.name.toString one of { "org", "org.reflections", "root" }
loggerContext.root.name has only one value
loggerContext.root.name.toString == "root"
loggerContext.root.level has only one value
loggerContext.root.effectiveLevelInt == 10000
loggerContext.root.parent == null
loggerContext.root.childrenList has only one value
loggerContext.root.childrenList[] elements has only one value
loggerContext.root.childrenList[].getClass().getName() elements == ch.qos.logback.classic.Logger.class
loggerContext.root.childrenList[].getClass().getName() one of { [], [ch.qos.logback.classic.Logger] }
loggerContext.root.childrenList.getClass().getName() == java.util.ArrayList.class
loggerContext.root.aai has only one value
loggerContext.root.additive == true
loggerContext.root.loggerContext has only one value
loggerContext.root.loggerRemoteView has only one value
loggerContext.noAppenderWarning == 0
loggerContext.contextListenerList has only one value
loggerContext.contextListenerList[] == []
loggerContext.contextListenerList[].getClass().getName() == []
loggerContext.contextListenerList.getClass().getName() == java.util.ArrayList.class
loggerContext.loggerCache has only one value
loggerContext.loggerContextRemoteView.name.toString == "default"
loggerContext.loggerContextRemoteView.propertyMap.getClass().getName() == java.util.HashMap.class
loggerContext.cfai == null
loggerContext.started == false
loggerContext.name.toString == "default"
loggerContext.sm has only one value
loggerContext.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
loggerContext.propertyMap has only one value
loggerContext.propertyMap.getClass().getName() == java.util.HashMap.class
loggerContext.objectMap has only one value
loggerContext.objectMap.getClass().getName() == java.util.HashMap.class
size(parent.parent.childrenList[]) == 1
size(parent.aai.appenderList[]) == 1
size(loggerContext.root.childrenList[]) one of { 0, 1 }
ch.qos.logback.classic.Logger.instanceCount - orig(ch.qos.logback.classic.Logger.instanceCount) - 1 == 0
===========================================================================
ch.qos.logback.classic.Logger.addAppender(ch.qos.logback.core.Appender):::ENTER
this has only one value
ch.qos.logback.classic.Logger.instanceCount == 1
this.name has only one value
this.name.toString == "root"
this.level has only one value
this.effectiveLevelInt == 10000
this.parent == null
this.childrenList == null
this.aai == null
this.loggerContext.root has only one value
this.loggerContext.root.level has only one value
this.loggerContext.root.effectiveLevelInt == 10000
this.loggerContext.root.childrenList == null
this.loggerContext.root.aai == null
this.loggerContext.root.loggerRemoteView has only one value
this.loggerContext.size == 1
this.loggerContext.loggerContextRemoteView has only one value
this.loggerContext.loggerContextRemoteView.name has only one value
this.loggerContext.loggerContextRemoteView.propertyMap has only one value
this.loggerContext.name has only one value
this.loggerRemoteView has only one value
this.loggerRemoteView.loggerContextView has only one value
this.loggerRemoteView.loggerContextView.name has only one value
this.loggerRemoteView.loggerContextView.propertyMap has only one value
this.loggerRemoteView.name has only one value
this.loggerRemoteView.name.toString == "root"
newAppender has only one value
newAppender.getClass().getName() == ch.qos.logback.core.ConsoleAppender.class
===========================================================================
ch.qos.logback.classic.Logger.addAppender(ch.qos.logback.core.Appender):::EXIT
ch.qos.logback.classic.Logger.FQCN == orig(ch.qos.logback.classic.Logger.FQCN)
ch.qos.logback.classic.Logger.FQCN.toString == orig(ch.qos.logback.classic.Logger.FQCN.toString)
ch.qos.logback.classic.Logger.instanceCount == orig(ch.qos.logback.classic.Logger.instanceCount)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.level == orig(this.level)
ch.qos.logback.classic.Level.OFF_INTEGER == orig(ch.qos.logback.classic.Level.OFF_INTEGER)
ch.qos.logback.classic.Level.ERROR_INTEGER == orig(ch.qos.logback.classic.Level.ERROR_INTEGER)
ch.qos.logback.classic.Level.WARN_INTEGER == orig(ch.qos.logback.classic.Level.WARN_INTEGER)
ch.qos.logback.classic.Level.INFO_INTEGER == orig(ch.qos.logback.classic.Level.INFO_INTEGER)
ch.qos.logback.classic.Level.DEBUG_INTEGER == orig(ch.qos.logback.classic.Level.DEBUG_INTEGER)
ch.qos.logback.classic.Level.TRACE_INTEGER == orig(ch.qos.logback.classic.Level.TRACE_INTEGER)
ch.qos.logback.classic.Level.ALL_INTEGER == orig(ch.qos.logback.classic.Level.ALL_INTEGER)
ch.qos.logback.classic.Level.OFF == orig(ch.qos.logback.classic.Level.OFF)
ch.qos.logback.classic.Level.ERROR == orig(ch.qos.logback.classic.Level.ERROR)
ch.qos.logback.classic.Level.WARN == orig(ch.qos.logback.classic.Level.WARN)
ch.qos.logback.classic.Level.INFO == orig(ch.qos.logback.classic.Level.INFO)
ch.qos.logback.classic.Level.DEBUG == orig(ch.qos.logback.classic.Level.DEBUG)
ch.qos.logback.classic.Level.TRACE == orig(ch.qos.logback.classic.Level.TRACE)
ch.qos.logback.classic.Level.ALL == orig(ch.qos.logback.classic.Level.ALL)
ch.qos.logback.classic.Level.OFF.levelInt == orig(ch.qos.logback.classic.Level.OFF.levelInt)
ch.qos.logback.classic.Level.OFF.levelStr == orig(ch.qos.logback.classic.Level.OFF.levelStr)
ch.qos.logback.classic.Level.OFF.levelStr.toString == orig(ch.qos.logback.classic.Level.OFF.levelStr.toString)
ch.qos.logback.classic.Level.ERROR.levelInt == orig(ch.qos.logback.classic.Level.ERROR.levelInt)
ch.qos.logback.classic.Level.ERROR.levelStr == orig(ch.qos.logback.classic.Level.ERROR.levelStr)
ch.qos.logback.classic.Level.ERROR.levelStr.toString == orig(ch.qos.logback.classic.Level.ERROR.levelStr.toString)
ch.qos.logback.classic.Level.WARN.levelInt == orig(ch.qos.logback.classic.Level.WARN.levelInt)
ch.qos.logback.classic.Level.WARN.levelStr == orig(ch.qos.logback.classic.Level.WARN.levelStr)
ch.qos.logback.classic.Level.WARN.levelStr.toString == orig(ch.qos.logback.classic.Level.WARN.levelStr.toString)
ch.qos.logback.classic.Level.INFO.levelInt == orig(ch.qos.logback.classic.Level.INFO.levelInt)
ch.qos.logback.classic.Level.INFO.levelStr == orig(ch.qos.logback.classic.Level.INFO.levelStr)
ch.qos.logback.classic.Level.INFO.levelStr.toString == orig(ch.qos.logback.classic.Level.INFO.levelStr.toString)
ch.qos.logback.classic.Level.DEBUG.levelInt == orig(ch.qos.logback.classic.Level.DEBUG.levelInt)
ch.qos.logback.classic.Level.DEBUG.levelStr == orig(ch.qos.logback.classic.Level.DEBUG.levelStr)
ch.qos.logback.classic.Level.DEBUG.levelStr.toString == orig(ch.qos.logback.classic.Level.DEBUG.levelStr.toString)
ch.qos.logback.classic.Level.TRACE.levelInt == orig(ch.qos.logback.classic.Level.TRACE.levelInt)
ch.qos.logback.classic.Level.TRACE.levelStr == orig(ch.qos.logback.classic.Level.TRACE.levelStr)
ch.qos.logback.classic.Level.TRACE.levelStr.toString == orig(ch.qos.logback.classic.Level.TRACE.levelStr.toString)
ch.qos.logback.classic.Level.ALL.levelInt == orig(ch.qos.logback.classic.Level.ALL.levelInt)
ch.qos.logback.classic.Level.ALL.levelStr == orig(ch.qos.logback.classic.Level.ALL.levelStr)
ch.qos.logback.classic.Level.ALL.levelStr.toString == orig(ch.qos.logback.classic.Level.ALL.levelStr.toString)
this.level.levelInt == orig(this.level.levelInt)
this.level.levelStr == orig(this.level.levelStr)
this.level.levelStr.toString == orig(this.level.levelStr.toString)
this.effectiveLevelInt == orig(this.effectiveLevelInt)
this.parent == orig(this.parent)
ch.qos.logback.classic.LoggerContext.ROOT_NAME == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME)
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString)
ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled == orig(ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled)
this.childrenList == orig(this.childrenList)
this.additive == orig(this.additive)
this.loggerContext == orig(this.loggerContext)
this.loggerContext.root == orig(this.loggerContext.root)
this.loggerContext.root.name == orig(this.loggerContext.root.name)
this.loggerContext.root.name.toString == orig(this.loggerContext.root.name.toString)
this.loggerContext.root.level == orig(this.loggerContext.root.level)
this.loggerContext.root.effectiveLevelInt == orig(this.loggerContext.root.effectiveLevelInt)
this.loggerContext.root.parent == orig(this.loggerContext.root.parent)
this.loggerContext.root.childrenList == orig(this.loggerContext.root.childrenList)
this.loggerContext.root.additive == orig(this.loggerContext.root.additive)
this.loggerContext.root.loggerContext == orig(this.loggerContext.root.loggerContext)
this.loggerContext.root.loggerRemoteView == orig(this.loggerContext.root.loggerRemoteView)
this.loggerContext.size == orig(this.loggerContext.size)
this.loggerContext.noAppenderWarning == orig(this.loggerContext.noAppenderWarning)
this.loggerContext.contextListenerList == orig(this.loggerContext.contextListenerList)
this.loggerContext.contextListenerList[] == orig(this.loggerContext.contextListenerList[])
this.loggerContext.contextListenerList.getClass().getName() == orig(this.loggerContext.contextListenerList.getClass().getName())
this.loggerContext.loggerCache == orig(this.loggerContext.loggerCache)
this.loggerContext.loggerContextRemoteView == orig(this.loggerContext.loggerContextRemoteView)
this.loggerContext.loggerContextRemoteView.name == orig(this.loggerContext.loggerContextRemoteView.name)
this.loggerContext.loggerContextRemoteView.name.toString == orig(this.loggerContext.loggerContextRemoteView.name.toString)
this.loggerContext.loggerContextRemoteView.propertyMap == orig(this.loggerContext.loggerContextRemoteView.propertyMap)
this.loggerContext.loggerContextRemoteView.propertyMap.getClass().getName() == orig(this.loggerContext.loggerContextRemoteView.propertyMap.getClass().getName())
this.loggerContext.cfai == orig(this.loggerContext.cfai)
this.loggerContext.started == orig(this.loggerContext.started)
this.loggerContext.name == orig(this.loggerContext.name)
this.loggerContext.name.toString == orig(this.loggerContext.name.toString)
this.loggerContext.sm == orig(this.loggerContext.sm)
this.loggerContext.sm.getClass().getName() == orig(this.loggerContext.sm.getClass().getName())
this.loggerContext.propertyMap == orig(this.loggerContext.propertyMap)
this.loggerContext.propertyMap.getClass().getName() == orig(this.loggerContext.propertyMap.getClass().getName())
this.loggerContext.objectMap == orig(this.loggerContext.objectMap)
this.loggerContext.objectMap.getClass().getName() == orig(this.loggerContext.objectMap.getClass().getName())
this.loggerRemoteView == orig(this.loggerRemoteView)
this.loggerRemoteView.loggerContextView == orig(this.loggerRemoteView.loggerContextView)
this.loggerRemoteView.loggerContextView.name == orig(this.loggerRemoteView.loggerContextView.name)
this.loggerRemoteView.loggerContextView.name.toString == orig(this.loggerRemoteView.loggerContextView.name.toString)
this.loggerRemoteView.loggerContextView.propertyMap == orig(this.loggerRemoteView.loggerContextView.propertyMap)
this.loggerRemoteView.loggerContextView.propertyMap.getClass().getName() == orig(this.loggerRemoteView.loggerContextView.propertyMap.getClass().getName())
this.loggerRemoteView.name == orig(this.loggerRemoteView.name)
this.loggerRemoteView.name.toString == orig(this.loggerRemoteView.name.toString)
ch.qos.logback.classic.Logger.instanceCount == 1
this.name has only one value
this.name.toString == "root"
this.level has only one value
this.effectiveLevelInt == 10000
this.parent == null
this.childrenList == null
this.aai has only one value
this.loggerContext.root has only one value
this.loggerContext.root.level has only one value
this.loggerContext.root.effectiveLevelInt == 10000
this.loggerContext.root.childrenList == null
this.loggerContext.root.aai has only one value
this.loggerContext.root.loggerRemoteView has only one value
this.loggerContext.size == 1
this.loggerContext.loggerContextRemoteView has only one value
this.loggerContext.loggerContextRemoteView.name has only one value
this.loggerContext.loggerContextRemoteView.propertyMap has only one value
this.loggerContext.name has only one value
this.loggerRemoteView has only one value
this.loggerRemoteView.loggerContextView has only one value
this.loggerRemoteView.loggerContextView.name has only one value
this.loggerRemoteView.loggerContextView.propertyMap has only one value
this.loggerRemoteView.name has only one value
this.loggerRemoteView.name.toString == "root"
===========================================================================
ch.qos.logback.classic.Logger.buildRemoteView():::ENTER
this.parent.childrenList[] == []
this.parent.childrenList[].getClass().getName() == []
this.childrenList == null
this.aai == null
this.loggerContext.root.level has only one value
this.loggerContext.root.effectiveLevelInt == 10000
this.loggerRemoteView.loggerContextView has only one value
this.loggerRemoteView.loggerContextView.name == null
this.loggerRemoteView.loggerContextView.propertyMap has only one value
this.loggerRemoteView.name has only one value
this.loggerRemoteView.name.toString == "root"
===========================================================================
ch.qos.logback.classic.Logger.buildRemoteView():::EXIT
ch.qos.logback.classic.Logger.FQCN == orig(ch.qos.logback.classic.Logger.FQCN)
ch.qos.logback.classic.Logger.FQCN.toString == orig(ch.qos.logback.classic.Logger.FQCN.toString)
ch.qos.logback.classic.Logger.instanceCount == orig(ch.qos.logback.classic.Logger.instanceCount)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.level == orig(this.level)
ch.qos.logback.classic.Level.OFF_INTEGER == orig(ch.qos.logback.classic.Level.OFF_INTEGER)
ch.qos.logback.classic.Level.ERROR_INTEGER == orig(ch.qos.logback.classic.Level.ERROR_INTEGER)
ch.qos.logback.classic.Level.WARN_INTEGER == orig(ch.qos.logback.classic.Level.WARN_INTEGER)
ch.qos.logback.classic.Level.INFO_INTEGER == orig(ch.qos.logback.classic.Level.INFO_INTEGER)
ch.qos.logback.classic.Level.DEBUG_INTEGER == orig(ch.qos.logback.classic.Level.DEBUG_INTEGER)
ch.qos.logback.classic.Level.TRACE_INTEGER == orig(ch.qos.logback.classic.Level.TRACE_INTEGER)
ch.qos.logback.classic.Level.ALL_INTEGER == orig(ch.qos.logback.classic.Level.ALL_INTEGER)
ch.qos.logback.classic.Level.OFF == orig(ch.qos.logback.classic.Level.OFF)
ch.qos.logback.classic.Level.ERROR == orig(ch.qos.logback.classic.Level.ERROR)
ch.qos.logback.classic.Level.WARN == orig(ch.qos.logback.classic.Level.WARN)
ch.qos.logback.classic.Level.INFO == orig(ch.qos.logback.classic.Level.INFO)
ch.qos.logback.classic.Level.DEBUG == orig(ch.qos.logback.classic.Level.DEBUG)
ch.qos.logback.classic.Level.TRACE == orig(ch.qos.logback.classic.Level.TRACE)
ch.qos.logback.classic.Level.ALL == orig(ch.qos.logback.classic.Level.ALL)
ch.qos.logback.classic.Level.OFF.levelInt == orig(ch.qos.logback.classic.Level.OFF.levelInt)
ch.qos.logback.classic.Level.OFF.levelStr == orig(ch.qos.logback.classic.Level.OFF.levelStr)
ch.qos.logback.classic.Level.OFF.levelStr.toString == orig(ch.qos.logback.classic.Level.OFF.levelStr.toString)
ch.qos.logback.classic.Level.ERROR.levelInt == orig(ch.qos.logback.classic.Level.ERROR.levelInt)
ch.qos.logback.classic.Level.ERROR.levelStr == orig(ch.qos.logback.classic.Level.ERROR.levelStr)
ch.qos.logback.classic.Level.ERROR.levelStr.toString == orig(ch.qos.logback.classic.Level.ERROR.levelStr.toString)
ch.qos.logback.classic.Level.WARN.levelInt == orig(ch.qos.logback.classic.Level.WARN.levelInt)
ch.qos.logback.classic.Level.WARN.levelStr == orig(ch.qos.logback.classic.Level.WARN.levelStr)
ch.qos.logback.classic.Level.WARN.levelStr.toString == orig(ch.qos.logback.classic.Level.WARN.levelStr.toString)
ch.qos.logback.classic.Level.INFO.levelInt == orig(ch.qos.logback.classic.Level.INFO.levelInt)
ch.qos.logback.classic.Level.INFO.levelStr == orig(ch.qos.logback.classic.Level.INFO.levelStr)
ch.qos.logback.classic.Level.INFO.levelStr.toString == orig(ch.qos.logback.classic.Level.INFO.levelStr.toString)
ch.qos.logback.classic.Level.DEBUG.levelInt == orig(ch.qos.logback.classic.Level.DEBUG.levelInt)
ch.qos.logback.classic.Level.DEBUG.levelStr == orig(ch.qos.logback.classic.Level.DEBUG.levelStr)
ch.qos.logback.classic.Level.DEBUG.levelStr.toString == orig(ch.qos.logback.classic.Level.DEBUG.levelStr.toString)
ch.qos.logback.classic.Level.TRACE.levelInt == orig(ch.qos.logback.classic.Level.TRACE.levelInt)
ch.qos.logback.classic.Level.TRACE.levelStr == orig(ch.qos.logback.classic.Level.TRACE.levelStr)
ch.qos.logback.classic.Level.TRACE.levelStr.toString == orig(ch.qos.logback.classic.Level.TRACE.levelStr.toString)
ch.qos.logback.classic.Level.ALL.levelInt == orig(ch.qos.logback.classic.Level.ALL.levelInt)
ch.qos.logback.classic.Level.ALL.levelStr == orig(ch.qos.logback.classic.Level.ALL.levelStr)
ch.qos.logback.classic.Level.ALL.levelStr.toString == orig(ch.qos.logback.classic.Level.ALL.levelStr.toString)
this.level.levelInt == orig(this.level.levelInt)
this.level.levelStr == orig(this.level.levelStr)
this.level.levelStr.toString == orig(this.level.levelStr.toString)
this.effectiveLevelInt == orig(this.effectiveLevelInt)
this.parent == orig(this.parent)
this.parent.name == orig(this.parent.name)
this.parent.name.toString == orig(this.parent.name.toString)
this.parent.level == orig(this.parent.level)
this.parent.level.levelInt == orig(this.parent.level.levelInt)
this.parent.level.levelStr == orig(this.parent.level.levelStr)
this.parent.level.levelStr.toString == orig(this.parent.level.levelStr.toString)
this.parent.effectiveLevelInt == orig(this.parent.effectiveLevelInt)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.name == orig(this.parent.parent.name)
this.parent.parent.name.toString == orig(this.parent.parent.name.toString)
this.parent.parent.level == orig(this.parent.parent.level)
this.parent.parent.effectiveLevelInt == orig(this.parent.parent.effectiveLevelInt)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.childrenList == orig(this.parent.parent.childrenList)
this.parent.parent.childrenList[] == orig(this.parent.parent.childrenList[])
this.parent.parent.childrenList.getClass().getName() == orig(this.parent.parent.childrenList.getClass().getName())
this.parent.parent.aai == orig(this.parent.parent.aai)
this.parent.parent.additive == orig(this.parent.parent.additive)
this.parent.parent.loggerContext == orig(this.parent.parent.loggerContext)
this.parent.parent.loggerRemoteView == orig(this.parent.parent.loggerRemoteView)
this.parent.childrenList == orig(this.parent.childrenList)
this.parent.childrenList[] == orig(this.parent.childrenList[])
this.parent.childrenList.getClass().getName() == orig(this.parent.childrenList.getClass().getName())
this.parent.aai == orig(this.parent.aai)
this.parent.aai.appenderList == orig(this.parent.aai.appenderList)
this.parent.aai.appenderList[] == orig(this.parent.aai.appenderList[])
this.parent.aai.appenderList.getClass().getName() == orig(this.parent.aai.appenderList.getClass().getName())
this.parent.additive == orig(this.parent.additive)
this.parent.loggerContext == orig(this.parent.loggerContext)
ch.qos.logback.classic.LoggerContext.ROOT_NAME == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME)
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString)
this.parent.loggerContext.root == orig(this.parent.loggerContext.root)
this.parent.loggerContext.size == orig(this.parent.loggerContext.size)
this.parent.loggerContext.noAppenderWarning == orig(this.parent.loggerContext.noAppenderWarning)
this.parent.loggerContext.contextListenerList == orig(this.parent.loggerContext.contextListenerList)
this.parent.loggerContext.contextListenerList[] == orig(this.parent.loggerContext.contextListenerList[])
this.parent.loggerContext.contextListenerList.getClass().getName() == orig(this.parent.loggerContext.contextListenerList.getClass().getName())
this.parent.loggerContext.loggerCache == orig(this.parent.loggerContext.loggerCache)
this.parent.loggerContext.loggerContextRemoteView == orig(this.parent.loggerContext.loggerContextRemoteView)
this.parent.loggerContext.cfai == orig(this.parent.loggerContext.cfai)
this.parent.loggerContext.started == orig(this.parent.loggerContext.started)
this.parent.loggerContext.name == orig(this.parent.loggerContext.name)
this.parent.loggerContext.name.toString == orig(this.parent.loggerContext.name.toString)
this.parent.loggerContext.sm == orig(this.parent.loggerContext.sm)
this.parent.loggerContext.sm.getClass().getName() == orig(this.parent.loggerContext.sm.getClass().getName())
this.parent.loggerContext.propertyMap == orig(this.parent.loggerContext.propertyMap)
this.parent.loggerContext.propertyMap.getClass().getName() == orig(this.parent.loggerContext.propertyMap.getClass().getName())
this.parent.loggerContext.objectMap == orig(this.parent.loggerContext.objectMap)
this.parent.loggerContext.objectMap.getClass().getName() == orig(this.parent.loggerContext.objectMap.getClass().getName())
this.parent.loggerRemoteView == orig(this.parent.loggerRemoteView)
this.parent.loggerRemoteView.loggerContextView == orig(this.parent.loggerRemoteView.loggerContextView)
this.parent.loggerRemoteView.name == orig(this.parent.loggerRemoteView.name)
this.parent.loggerRemoteView.name.toString == orig(this.parent.loggerRemoteView.name.toString)
ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled == orig(ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled)
this.childrenList == orig(this.childrenList)
this.aai == orig(this.aai)
this.additive == orig(this.additive)
this.loggerContext == orig(this.loggerContext)
this.loggerContext.root == orig(this.loggerContext.root)
this.loggerContext.root.name == orig(this.loggerContext.root.name)
this.loggerContext.root.name.toString == orig(this.loggerContext.root.name.toString)
this.loggerContext.root.level == orig(this.loggerContext.root.level)
this.loggerContext.root.effectiveLevelInt == orig(this.loggerContext.root.effectiveLevelInt)
this.loggerContext.root.parent == orig(this.loggerContext.root.parent)
this.loggerContext.root.childrenList == orig(this.loggerContext.root.childrenList)
this.loggerContext.root.childrenList[] == orig(this.loggerContext.root.childrenList[])
this.loggerContext.root.childrenList.getClass().getName() == orig(this.loggerContext.root.childrenList.getClass().getName())
this.loggerContext.root.aai == orig(this.loggerContext.root.aai)
this.loggerContext.root.additive == orig(this.loggerContext.root.additive)
this.loggerContext.root.loggerContext == orig(this.loggerContext.root.loggerContext)
this.loggerContext.size == orig(this.loggerContext.size)
this.loggerContext.noAppenderWarning == orig(this.loggerContext.noAppenderWarning)
this.loggerContext.contextListenerList == orig(this.loggerContext.contextListenerList)
this.loggerContext.contextListenerList[] == orig(this.loggerContext.contextListenerList[])
this.loggerContext.contextListenerList.getClass().getName() == orig(this.loggerContext.contextListenerList.getClass().getName())
this.loggerContext.loggerCache == orig(this.loggerContext.loggerCache)
this.loggerContext.loggerContextRemoteView == orig(this.loggerContext.loggerContextRemoteView)
this.loggerContext.loggerContextRemoteView.name == orig(this.loggerContext.loggerContextRemoteView.name)
this.loggerContext.loggerContextRemoteView.name.toString == orig(this.loggerContext.loggerContextRemoteView.name.toString)
this.loggerContext.loggerContextRemoteView.propertyMap == orig(this.loggerContext.loggerContextRemoteView.propertyMap)
this.loggerContext.loggerContextRemoteView.propertyMap.getClass().getName() == orig(this.loggerContext.loggerContextRemoteView.propertyMap.getClass().getName())
this.loggerContext.cfai == orig(this.loggerContext.cfai)
this.loggerContext.started == orig(this.loggerContext.started)
this.loggerContext.name == orig(this.loggerContext.name)
this.loggerContext.name.toString == orig(this.loggerContext.name.toString)
this.loggerContext.sm == orig(this.loggerContext.sm)
this.loggerContext.sm.getClass().getName() == orig(this.loggerContext.sm.getClass().getName())
this.loggerContext.propertyMap == orig(this.loggerContext.propertyMap)
this.loggerContext.propertyMap.getClass().getName() == orig(this.loggerContext.propertyMap.getClass().getName())
this.loggerContext.objectMap == orig(this.loggerContext.objectMap)
this.loggerContext.objectMap.getClass().getName() == orig(this.loggerContext.objectMap.getClass().getName())
this.loggerRemoteView.loggerContextView.propertyMap.getClass().getName() == orig(this.loggerRemoteView.loggerContextView.propertyMap.getClass().getName())
this.loggerRemoteView.name == orig(this.loggerRemoteView.name)
this.loggerRemoteView.name.toString == orig(this.loggerRemoteView.name.toString)
this.parent.childrenList[] == []
this.parent.childrenList[].getClass().getName() == []
this.childrenList == null
this.aai == null
this.loggerContext.root.level has only one value
this.loggerContext.root.effectiveLevelInt == 10000
this.loggerContext.root.loggerRemoteView has only one value
===========================================================================
ch.qos.logback.classic.Logger.createChildByName(java.lang.String):::ENTER
ch.qos.logback.classic.Logger.instanceCount one of { 1, 2, 3 }
this.name.toString one of { "org", "org.reflections", "root" }
this.effectiveLevelInt == 10000
this.parent.name.toString one of { "org", "root" }
this.parent.parent.name has only one value
this.parent.parent.name.toString == "root"
this.parent.parent.level has only one value
this.parent.parent.parent == null
this.parent.parent.childrenList has only one value
this.parent.parent.childrenList[] contains no nulls and has only one value, of length 1
this.parent.parent.childrenList[] elements has only one value
this.parent.parent.aai has only one value
this.parent.parent.loggerRemoteView has only one value
this.parent.childrenList[].getClass().getName() == [ch.qos.logback.classic.Logger]
this.parent.loggerContext.size one of { 2, 3 }
this.parent.loggerRemoteView.name.toString one of { "org", "root" }
this.childrenList == null
this.loggerContext.root has only one value
this.loggerContext.root.level has only one value
this.loggerContext.root.effectiveLevelInt == 10000
this.loggerContext.root.childrenList[] contains no nulls and has only one value, of length 1
this.loggerContext.root.childrenList[].getClass().getName() == [ch.qos.logback.classic.Logger]
this.loggerContext.root.aai has only one value
this.loggerContext.root.loggerRemoteView has only one value
this.loggerContext.size one of { 1, 2, 3 }
this.loggerContext.loggerContextRemoteView has only one value
this.loggerContext.loggerContextRemoteView.name has only one value
this.loggerContext.loggerContextRemoteView.propertyMap has only one value
this.loggerContext.name has only one value
this.loggerRemoteView.loggerContextView has only one value
this.loggerRemoteView.loggerContextView.name has only one value
this.loggerRemoteView.loggerContextView.propertyMap has only one value
this.loggerRemoteView.name.toString one of { "org", "org.reflections", "root" }
childName.toString one of { "org", "org.reflections", "org.reflections.Reflections" }
size(this.parent.childrenList[]) == 1
size(this.loggerContext.root.childrenList[]) == 1
===========================================================================
ch.qos.logback.classic.Logger.createChildByName(java.lang.String):::EXIT
ch.qos.logback.classic.Logger.FQCN == orig(ch.qos.logback.classic.Logger.FQCN)
ch.qos.logback.classic.Logger.FQCN.toString == orig(ch.qos.logback.classic.Logger.FQCN.toString)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.level == orig(this.level)
ch.qos.logback.classic.Level.OFF_INTEGER == orig(ch.qos.logback.classic.Level.OFF_INTEGER)
ch.qos.logback.classic.Level.ERROR_INTEGER == orig(ch.qos.logback.classic.Level.ERROR_INTEGER)
ch.qos.logback.classic.Level.WARN_INTEGER == orig(ch.qos.logback.classic.Level.WARN_INTEGER)
ch.qos.logback.classic.Level.INFO_INTEGER == orig(ch.qos.logback.classic.Level.INFO_INTEGER)
ch.qos.logback.classic.Level.DEBUG_INTEGER == orig(ch.qos.logback.classic.Level.DEBUG_INTEGER)
ch.qos.logback.classic.Level.TRACE_INTEGER == orig(ch.qos.logback.classic.Level.TRACE_INTEGER)
ch.qos.logback.classic.Level.ALL_INTEGER == orig(ch.qos.logback.classic.Level.ALL_INTEGER)
ch.qos.logback.classic.Level.OFF == orig(ch.qos.logback.classic.Level.OFF)
ch.qos.logback.classic.Level.ERROR == orig(ch.qos.logback.classic.Level.ERROR)
ch.qos.logback.classic.Level.WARN == orig(ch.qos.logback.classic.Level.WARN)
ch.qos.logback.classic.Level.INFO == orig(ch.qos.logback.classic.Level.INFO)
ch.qos.logback.classic.Level.DEBUG == orig(ch.qos.logback.classic.Level.DEBUG)
ch.qos.logback.classic.Level.TRACE == orig(ch.qos.logback.classic.Level.TRACE)
ch.qos.logback.classic.Level.ALL == orig(ch.qos.logback.classic.Level.ALL)
ch.qos.logback.classic.Level.OFF.levelInt == orig(ch.qos.logback.classic.Level.OFF.levelInt)
ch.qos.logback.classic.Level.OFF.levelStr == orig(ch.qos.logback.classic.Level.OFF.levelStr)
ch.qos.logback.classic.Level.OFF.levelStr.toString == orig(ch.qos.logback.classic.Level.OFF.levelStr.toString)
ch.qos.logback.classic.Level.ERROR.levelInt == orig(ch.qos.logback.classic.Level.ERROR.levelInt)
ch.qos.logback.classic.Level.ERROR.levelStr == orig(ch.qos.logback.classic.Level.ERROR.levelStr)
ch.qos.logback.classic.Level.ERROR.levelStr.toString == orig(ch.qos.logback.classic.Level.ERROR.levelStr.toString)
ch.qos.logback.classic.Level.WARN.levelInt == orig(ch.qos.logback.classic.Level.WARN.levelInt)
ch.qos.logback.classic.Level.WARN.levelStr == orig(ch.qos.logback.classic.Level.WARN.levelStr)
ch.qos.logback.classic.Level.WARN.levelStr.toString == orig(ch.qos.logback.classic.Level.WARN.levelStr.toString)
ch.qos.logback.classic.Level.INFO.levelInt == orig(ch.qos.logback.classic.Level.INFO.levelInt)
ch.qos.logback.classic.Level.INFO.levelStr == orig(ch.qos.logback.classic.Level.INFO.levelStr)
ch.qos.logback.classic.Level.INFO.levelStr.toString == orig(ch.qos.logback.classic.Level.INFO.levelStr.toString)
ch.qos.logback.classic.Level.DEBUG.levelInt == orig(ch.qos.logback.classic.Level.DEBUG.levelInt)
ch.qos.logback.classic.Level.DEBUG.levelStr == orig(ch.qos.logback.classic.Level.DEBUG.levelStr)
ch.qos.logback.classic.Level.DEBUG.levelStr.toString == orig(ch.qos.logback.classic.Level.DEBUG.levelStr.toString)
ch.qos.logback.classic.Level.TRACE.levelInt == orig(ch.qos.logback.classic.Level.TRACE.levelInt)
ch.qos.logback.classic.Level.TRACE.levelStr == orig(ch.qos.logback.classic.Level.TRACE.levelStr)
ch.qos.logback.classic.Level.TRACE.levelStr.toString == orig(ch.qos.logback.classic.Level.TRACE.levelStr.toString)
ch.qos.logback.classic.Level.ALL.levelInt == orig(ch.qos.logback.classic.Level.ALL.levelInt)
ch.qos.logback.classic.Level.ALL.levelStr == orig(ch.qos.logback.classic.Level.ALL.levelStr)
ch.qos.logback.classic.Level.ALL.levelStr.toString == orig(ch.qos.logback.classic.Level.ALL.levelStr.toString)
this.level.levelInt == orig(this.level.levelInt)
this.level.levelStr == orig(this.level.levelStr)
this.level.levelStr.toString == orig(this.level.levelStr.toString)
this.effectiveLevelInt == orig(this.effectiveLevelInt)
this.parent == orig(this.parent)
this.parent.name == orig(this.parent.name)
this.parent.name.toString == orig(this.parent.name.toString)
this.parent.level == orig(this.parent.level)
this.parent.level.levelInt == orig(this.parent.level.levelInt)
this.parent.level.levelStr == orig(this.parent.level.levelStr)
this.parent.level.levelStr.toString == orig(this.parent.level.levelStr.toString)
this.parent.effectiveLevelInt == orig(this.parent.effectiveLevelInt)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.name == orig(this.parent.parent.name)
this.parent.parent.name.toString == orig(this.parent.parent.name.toString)
this.parent.parent.level == orig(this.parent.parent.level)
this.parent.parent.effectiveLevelInt == orig(this.parent.parent.effectiveLevelInt)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.childrenList == orig(this.parent.parent.childrenList)
this.parent.parent.childrenList[] == orig(this.parent.parent.childrenList[])
this.parent.parent.childrenList.getClass().getName() == orig(this.parent.parent.childrenList.getClass().getName())
this.parent.parent.aai == orig(this.parent.parent.aai)
this.parent.parent.additive == orig(this.parent.parent.additive)
this.parent.parent.loggerContext == orig(this.parent.parent.loggerContext)
this.parent.parent.loggerRemoteView == orig(this.parent.parent.loggerRemoteView)
this.parent.childrenList == orig(this.parent.childrenList)
this.parent.childrenList[] == orig(this.parent.childrenList[])
this.parent.childrenList.getClass().getName() == orig(this.parent.childrenList.getClass().getName())
this.parent.aai == orig(this.parent.aai)
this.parent.aai.appenderList == orig(this.parent.aai.appenderList)
this.parent.aai.appenderList[] == orig(this.parent.aai.appenderList[])
this.parent.aai.appenderList.getClass().getName() == orig(this.parent.aai.appenderList.getClass().getName())
this.parent.additive == orig(this.parent.additive)
this.parent.loggerContext == orig(this.parent.loggerContext)
ch.qos.logback.classic.LoggerContext.ROOT_NAME == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME)
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString)
this.parent.loggerContext.root == orig(this.parent.loggerContext.root)
this.parent.loggerContext.size == orig(this.parent.loggerContext.size)
this.parent.loggerContext.noAppenderWarning == orig(this.parent.loggerContext.noAppenderWarning)
this.parent.loggerContext.contextListenerList == orig(this.parent.loggerContext.contextListenerList)
this.parent.loggerContext.contextListenerList[] == orig(this.parent.loggerContext.contextListenerList[])
this.parent.loggerContext.contextListenerList.getClass().getName() == orig(this.parent.loggerContext.contextListenerList.getClass().getName())
this.parent.loggerContext.loggerCache == orig(this.parent.loggerContext.loggerCache)
this.parent.loggerContext.loggerContextRemoteView == orig(this.parent.loggerContext.loggerContextRemoteView)
this.parent.loggerContext.cfai == orig(this.parent.loggerContext.cfai)
this.parent.loggerContext.started == orig(this.parent.loggerContext.started)
this.parent.loggerContext.name == orig(this.parent.loggerContext.name)
this.parent.loggerContext.name.toString == orig(this.parent.loggerContext.name.toString)
this.parent.loggerContext.sm == orig(this.parent.loggerContext.sm)
this.parent.loggerContext.sm.getClass().getName() == orig(this.parent.loggerContext.sm.getClass().getName())
this.parent.loggerContext.propertyMap == orig(this.parent.loggerContext.propertyMap)
this.parent.loggerContext.propertyMap.getClass().getName() == orig(this.parent.loggerContext.propertyMap.getClass().getName())
this.parent.loggerContext.objectMap == orig(this.parent.loggerContext.objectMap)
this.parent.loggerContext.objectMap.getClass().getName() == orig(this.parent.loggerContext.objectMap.getClass().getName())
this.parent.loggerRemoteView == orig(this.parent.loggerRemoteView)
this.parent.loggerRemoteView.loggerContextView == orig(this.parent.loggerRemoteView.loggerContextView)
this.parent.loggerRemoteView.name == orig(this.parent.loggerRemoteView.name)
this.parent.loggerRemoteView.name.toString == orig(this.parent.loggerRemoteView.name.toString)
ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled == orig(ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled)
this.aai == orig(this.aai)
this.aai.appenderList == orig(this.aai.appenderList)
this.aai.appenderList[] == orig(this.aai.appenderList[])
this.aai.appenderList.getClass().getName() == orig(this.aai.appenderList.getClass().getName())
this.additive == orig(this.additive)
this.loggerContext == orig(this.loggerContext)
this.loggerContext.root == orig(this.loggerContext.root)
this.loggerContext.root.name == orig(this.loggerContext.root.name)
this.loggerContext.root.name.toString == orig(this.loggerContext.root.name.toString)
this.loggerContext.root.level == orig(this.loggerContext.root.level)
this.loggerContext.root.effectiveLevelInt == orig(this.loggerContext.root.effectiveLevelInt)
this.loggerContext.root.parent == orig(this.loggerContext.root.parent)
this.loggerContext.root.childrenList[].getClass().getName() == orig(this.loggerContext.root.childrenList[].getClass().getName())
this.loggerContext.root.childrenList.getClass().getName() == orig(this.loggerContext.root.childrenList.getClass().getName())
this.loggerContext.root.aai == orig(this.loggerContext.root.aai)
this.loggerContext.root.additive == orig(this.loggerContext.root.additive)
this.loggerContext.root.loggerContext == orig(this.loggerContext.root.loggerContext)
this.loggerContext.root.loggerRemoteView == orig(this.loggerContext.root.loggerRemoteView)
this.loggerContext.size == orig(this.loggerContext.size)
this.loggerContext.noAppenderWarning == orig(this.loggerContext.noAppenderWarning)
this.loggerContext.contextListenerList == orig(this.loggerContext.contextListenerList)
this.loggerContext.contextListenerList[] == orig(this.loggerContext.contextListenerList[])
this.loggerContext.contextListenerList.getClass().getName() == orig(this.loggerContext.contextListenerList.getClass().getName())
this.loggerContext.loggerCache == orig(this.loggerContext.loggerCache)
this.loggerContext.loggerContextRemoteView == orig(this.loggerContext.loggerContextRemoteView)
this.loggerContext.loggerContextRemoteView.name == orig(this.loggerContext.loggerContextRemoteView.name)
this.loggerContext.loggerContextRemoteView.name.toString == orig(this.loggerContext.loggerContextRemoteView.name.toString)
this.loggerContext.loggerContextRemoteView.propertyMap == orig(this.loggerContext.loggerContextRemoteView.propertyMap)
this.loggerContext.loggerContextRemoteView.propertyMap.getClass().getName() == orig(this.loggerContext.loggerContextRemoteView.propertyMap.getClass().getName())
this.loggerContext.cfai == orig(this.loggerContext.cfai)
this.loggerContext.started == orig(this.loggerContext.started)
this.loggerContext.name == orig(this.loggerContext.name)
this.loggerContext.name.toString == orig(this.loggerContext.name.toString)
this.loggerContext.sm == orig(this.loggerContext.sm)
this.loggerContext.sm.getClass().getName() == orig(this.loggerContext.sm.getClass().getName())
this.loggerContext.propertyMap == orig(this.loggerContext.propertyMap)
this.loggerContext.propertyMap.getClass().getName() == orig(this.loggerContext.propertyMap.getClass().getName())
this.loggerContext.objectMap == orig(this.loggerContext.objectMap)
this.loggerContext.objectMap.getClass().getName() == orig(this.loggerContext.objectMap.getClass().getName())
this.loggerRemoteView == orig(this.loggerRemoteView)
this.loggerRemoteView.loggerContextView == orig(this.loggerRemoteView.loggerContextView)
this.loggerRemoteView.loggerContextView.name == orig(this.loggerRemoteView.loggerContextView.name)
this.loggerRemoteView.loggerContextView.name.toString == orig(this.loggerRemoteView.loggerContextView.name.toString)
this.loggerRemoteView.loggerContextView.propertyMap == orig(this.loggerRemoteView.loggerContextView.propertyMap)
this.loggerRemoteView.loggerContextView.propertyMap.getClass().getName() == orig(this.loggerRemoteView.loggerContextView.propertyMap.getClass().getName())
this.loggerRemoteView.name == orig(this.loggerRemoteView.name)
this.loggerRemoteView.name.toString == orig(this.loggerRemoteView.name.toString)
childName.toString == orig(childName.toString)
ch.qos.logback.classic.Logger.instanceCount one of { 2, 3, 4 }
this.name.toString one of { "org", "org.reflections", "root" }
this.effectiveLevelInt == 10000
this.parent.name.toString one of { "org", "root" }
this.parent.parent.name has only one value
this.parent.parent.name.toString == "root"
this.parent.parent.level has only one value
this.parent.parent.parent == null
this.parent.parent.childrenList has only one value
this.parent.parent.childrenList[] contains no nulls and has only one value, of length 1
this.parent.parent.childrenList[] elements has only one value
this.parent.parent.aai has only one value
this.parent.parent.loggerRemoteView has only one value
this.parent.childrenList[].getClass().getName() == [ch.qos.logback.classic.Logger]
this.parent.loggerContext.size one of { 2, 3 }
this.parent.loggerRemoteView.name.toString one of { "org", "root" }
this.loggerContext.root has only one value
this.loggerContext.root.level has only one value
this.loggerContext.root.effectiveLevelInt == 10000
this.loggerContext.root.childrenList has only one value
this.loggerContext.root.childrenList[] contains no nulls and has only one value, of length 1
this.loggerContext.root.childrenList[].getClass().getName() == [ch.qos.logback.classic.Logger]
this.loggerContext.root.aai has only one value
this.loggerContext.root.loggerRemoteView has only one value
this.loggerContext.size one of { 1, 2, 3 }
this.loggerContext.loggerContextRemoteView has only one value
this.loggerContext.loggerContextRemoteView.name has only one value
this.loggerContext.loggerContextRemoteView.propertyMap has only one value
this.loggerContext.name has only one value
this.loggerRemoteView.loggerContextView has only one value
this.loggerRemoteView.loggerContextView.name has only one value
this.loggerRemoteView.loggerContextView.propertyMap has only one value
this.loggerRemoteView.name.toString one of { "org", "org.reflections", "root" }
childName.toString one of { "org", "org.reflections", "org.reflections.Reflections" }
return.name.toString one of { "org", "org.reflections", "org.reflections.Reflections" }
return.level == null
return.effectiveLevelInt == 10000
return.parent.name.toString one of { "org", "org.reflections", "root" }
return.parent.effectiveLevelInt == 10000
return.parent.childrenList[].getClass().getName() == [ch.qos.logback.classic.Logger]
return.parent.childrenList[].getClass().getName() elements == ch.qos.logback.classic.Logger.class
return.parent.childrenList.getClass().getName() == java.util.ArrayList.class
return.parent.additive == true
return.parent.loggerContext has only one value
return.childrenList == null
return.aai == null
return.additive == true
return.loggerContext has only one value
return.loggerContext.root has only one value
return.loggerContext.size one of { 1, 2, 3 }
return.loggerContext.noAppenderWarning == 0
return.loggerContext.contextListenerList has only one value
return.loggerContext.contextListenerList[] == []
return.loggerContext.contextListenerList[].getClass().getName() == []
return.loggerContext.contextListenerList.getClass().getName() == java.util.ArrayList.class
return.loggerContext.loggerCache has only one value
return.loggerContext.loggerContextRemoteView has only one value
return.loggerContext.cfai == null
return.loggerContext.started == false
return.loggerContext.name has only one value
return.loggerContext.name.toString == "default"
return.loggerContext.sm has only one value
return.loggerContext.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
return.loggerContext.propertyMap has only one value
return.loggerContext.propertyMap.getClass().getName() == java.util.HashMap.class
return.loggerContext.objectMap has only one value
return.loggerContext.objectMap.getClass().getName() == java.util.HashMap.class
return.loggerRemoteView.loggerContextView has only one value
return.loggerRemoteView.name.toString one of { "org", "org.reflections", "org.reflections.Reflections" }
size(this.parent.childrenList[]) == 1
size(this.loggerContext.root.childrenList[]) == 1
size(return.parent.childrenList[]) == 1
this.loggerContext.root.childrenList[] == orig(this.loggerContext.root.childrenList[]) (elementwise)
this.loggerContext.root.childrenList[] is the reverse of orig(this.loggerContext.root.childrenList[])
this.loggerContext.root.childrenList[].getClass().getName() == orig(this.loggerContext.root.childrenList[].getClass().getName()) (elementwise)
===========================================================================
ch.qos.logback.classic.Logger.getChildByName(java.lang.String):::ENTER
ch.qos.logback.classic.Logger.instanceCount one of { 1, 2, 3 }
this.name.toString one of { "org", "org.reflections", "root" }
this.effectiveLevelInt == 10000
this.parent.name.toString one of { "org", "root" }
this.parent.parent.name has only one value
this.parent.parent.name.toString == "root"
this.parent.parent.level has only one value
this.parent.parent.parent == null
this.parent.parent.childrenList has only one value
this.parent.parent.childrenList[] contains no nulls and has only one value, of length 1
this.parent.parent.childrenList[] elements has only one value
this.parent.parent.aai has only one value
this.parent.parent.loggerRemoteView has only one value
this.parent.childrenList[].getClass().getName() == [ch.qos.logback.classic.Logger]
this.parent.loggerContext.size one of { 2, 3 }
this.parent.loggerRemoteView.name.toString one of { "org", "root" }
this.childrenList == null
this.loggerContext.root has only one value
this.loggerContext.root.level has only one value
this.loggerContext.root.effectiveLevelInt == 10000
this.loggerContext.root.childrenList[] contains no nulls and has only one value, of length 1
this.loggerContext.root.childrenList[].getClass().getName() == [ch.qos.logback.classic.Logger]
this.loggerContext.root.aai has only one value
this.loggerContext.root.loggerRemoteView has only one value
this.loggerContext.size one of { 1, 2, 3 }
this.loggerContext.loggerContextRemoteView has only one value
this.loggerContext.loggerContextRemoteView.name has only one value
this.loggerContext.loggerContextRemoteView.propertyMap has only one value
this.loggerContext.name has only one value
this.loggerRemoteView.loggerContextView has only one value
this.loggerRemoteView.loggerContextView.name has only one value
this.loggerRemoteView.loggerContextView.propertyMap has only one value
this.loggerRemoteView.name.toString one of { "org", "org.reflections", "root" }
childName.toString one of { "org", "org.reflections", "org.reflections.Reflections" }
size(this.parent.childrenList[]) == 1
size(this.loggerContext.root.childrenList[]) == 1
===========================================================================
ch.qos.logback.classic.Logger.getChildByName(java.lang.String):::EXIT151
===========================================================================
ch.qos.logback.classic.Logger.getChildByName(java.lang.String):::EXIT
ch.qos.logback.classic.Logger.FQCN == orig(ch.qos.logback.classic.Logger.FQCN)
ch.qos.logback.classic.Logger.FQCN.toString == orig(ch.qos.logback.classic.Logger.FQCN.toString)
ch.qos.logback.classic.Logger.instanceCount == orig(ch.qos.logback.classic.Logger.instanceCount)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.level == orig(this.level)
ch.qos.logback.classic.Level.OFF_INTEGER == orig(ch.qos.logback.classic.Level.OFF_INTEGER)
ch.qos.logback.classic.Level.ERROR_INTEGER == orig(ch.qos.logback.classic.Level.ERROR_INTEGER)
ch.qos.logback.classic.Level.WARN_INTEGER == orig(ch.qos.logback.classic.Level.WARN_INTEGER)
ch.qos.logback.classic.Level.INFO_INTEGER == orig(ch.qos.logback.classic.Level.INFO_INTEGER)
ch.qos.logback.classic.Level.DEBUG_INTEGER == orig(ch.qos.logback.classic.Level.DEBUG_INTEGER)
ch.qos.logback.classic.Level.TRACE_INTEGER == orig(ch.qos.logback.classic.Level.TRACE_INTEGER)
ch.qos.logback.classic.Level.ALL_INTEGER == orig(ch.qos.logback.classic.Level.ALL_INTEGER)
ch.qos.logback.classic.Level.OFF == orig(ch.qos.logback.classic.Level.OFF)
ch.qos.logback.classic.Level.ERROR == orig(ch.qos.logback.classic.Level.ERROR)
ch.qos.logback.classic.Level.WARN == orig(ch.qos.logback.classic.Level.WARN)
ch.qos.logback.classic.Level.INFO == orig(ch.qos.logback.classic.Level.INFO)
ch.qos.logback.classic.Level.DEBUG == orig(ch.qos.logback.classic.Level.DEBUG)
ch.qos.logback.classic.Level.TRACE == orig(ch.qos.logback.classic.Level.TRACE)
ch.qos.logback.classic.Level.ALL == orig(ch.qos.logback.classic.Level.ALL)
ch.qos.logback.classic.Level.OFF.levelInt == orig(ch.qos.logback.classic.Level.OFF.levelInt)
ch.qos.logback.classic.Level.OFF.levelStr == orig(ch.qos.logback.classic.Level.OFF.levelStr)
ch.qos.logback.classic.Level.OFF.levelStr.toString == orig(ch.qos.logback.classic.Level.OFF.levelStr.toString)
ch.qos.logback.classic.Level.ERROR.levelInt == orig(ch.qos.logback.classic.Level.ERROR.levelInt)
ch.qos.logback.classic.Level.ERROR.levelStr == orig(ch.qos.logback.classic.Level.ERROR.levelStr)
ch.qos.logback.classic.Level.ERROR.levelStr.toString == orig(ch.qos.logback.classic.Level.ERROR.levelStr.toString)
ch.qos.logback.classic.Level.WARN.levelInt == orig(ch.qos.logback.classic.Level.WARN.levelInt)
ch.qos.logback.classic.Level.WARN.levelStr == orig(ch.qos.logback.classic.Level.WARN.levelStr)
ch.qos.logback.classic.Level.WARN.levelStr.toString == orig(ch.qos.logback.classic.Level.WARN.levelStr.toString)
ch.qos.logback.classic.Level.INFO.levelInt == orig(ch.qos.logback.classic.Level.INFO.levelInt)
ch.qos.logback.classic.Level.INFO.levelStr == orig(ch.qos.logback.classic.Level.INFO.levelStr)
ch.qos.logback.classic.Level.INFO.levelStr.toString == orig(ch.qos.logback.classic.Level.INFO.levelStr.toString)
ch.qos.logback.classic.Level.DEBUG.levelInt == orig(ch.qos.logback.classic.Level.DEBUG.levelInt)
ch.qos.logback.classic.Level.DEBUG.levelStr == orig(ch.qos.logback.classic.Level.DEBUG.levelStr)
ch.qos.logback.classic.Level.DEBUG.levelStr.toString == orig(ch.qos.logback.classic.Level.DEBUG.levelStr.toString)
ch.qos.logback.classic.Level.TRACE.levelInt == orig(ch.qos.logback.classic.Level.TRACE.levelInt)
ch.qos.logback.classic.Level.TRACE.levelStr == orig(ch.qos.logback.classic.Level.TRACE.levelStr)
ch.qos.logback.classic.Level.TRACE.levelStr.toString == orig(ch.qos.logback.classic.Level.TRACE.levelStr.toString)
ch.qos.logback.classic.Level.ALL.levelInt == orig(ch.qos.logback.classic.Level.ALL.levelInt)
ch.qos.logback.classic.Level.ALL.levelStr == orig(ch.qos.logback.classic.Level.ALL.levelStr)
ch.qos.logback.classic.Level.ALL.levelStr.toString == orig(ch.qos.logback.classic.Level.ALL.levelStr.toString)
this.level.levelInt == orig(this.level.levelInt)
this.level.levelStr == orig(this.level.levelStr)
this.level.levelStr.toString == orig(this.level.levelStr.toString)
this.effectiveLevelInt == orig(this.effectiveLevelInt)
this.parent == orig(this.parent)
this.parent.name == orig(this.parent.name)
this.parent.name.toString == orig(this.parent.name.toString)
this.parent.level == orig(this.parent.level)
this.parent.level.levelInt == orig(this.parent.level.levelInt)
this.parent.level.levelStr == orig(this.parent.level.levelStr)
this.parent.level.levelStr.toString == orig(this.parent.level.levelStr.toString)
this.parent.effectiveLevelInt == orig(this.parent.effectiveLevelInt)
this.parent.parent == orig(this.parent.parent)
this.parent.parent.name == orig(this.parent.parent.name)
this.parent.parent.name.toString == orig(this.parent.parent.name.toString)
this.parent.parent.level == orig(this.parent.parent.level)
this.parent.parent.effectiveLevelInt == orig(this.parent.parent.effectiveLevelInt)
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.childrenList == orig(this.parent.parent.childrenList)
this.parent.parent.childrenList[] == orig(this.parent.parent.childrenList[])
this.parent.parent.childrenList.getClass().getName() == orig(this.parent.parent.childrenList.getClass().getName())
this.parent.parent.aai == orig(this.parent.parent.aai)
this.parent.parent.additive == orig(this.parent.parent.additive)
this.parent.parent.loggerContext == orig(this.parent.parent.loggerContext)
this.parent.parent.loggerRemoteView == orig(this.parent.parent.loggerRemoteView)
this.parent.childrenList == orig(this.parent.childrenList)
this.parent.childrenList[] == orig(this.parent.childrenList[])
this.parent.childrenList.getClass().getName() == orig(this.parent.childrenList.getClass().getName())
this.parent.aai == orig(this.parent.aai)
this.parent.aai.appenderList == orig(this.parent.aai.appenderList)
this.parent.aai.appenderList[] == orig(this.parent.aai.appenderList[])
this.parent.aai.appenderList.getClass().getName() == orig(this.parent.aai.appenderList.getClass().getName())
this.parent.additive == orig(this.parent.additive)
this.parent.loggerContext == orig(this.parent.loggerContext)
ch.qos.logback.classic.LoggerContext.ROOT_NAME == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME)
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString)
this.parent.loggerContext.root == orig(this.parent.loggerContext.root)
this.parent.loggerContext.size == orig(this.parent.loggerContext.size)
this.parent.loggerContext.noAppenderWarning == orig(this.parent.loggerContext.noAppenderWarning)
this.parent.loggerContext.contextListenerList == orig(this.parent.loggerContext.contextListenerList)
this.parent.loggerContext.contextListenerList[] == orig(this.parent.loggerContext.contextListenerList[])
this.parent.loggerContext.contextListenerList.getClass().getName() == orig(this.parent.loggerContext.contextListenerList.getClass().getName())
this.parent.loggerContext.loggerCache == orig(this.parent.loggerContext.loggerCache)
this.parent.loggerContext.loggerContextRemoteView == orig(this.parent.loggerContext.loggerContextRemoteView)
this.parent.loggerContext.cfai == orig(this.parent.loggerContext.cfai)
this.parent.loggerContext.started == orig(this.parent.loggerContext.started)
this.parent.loggerContext.name == orig(this.parent.loggerContext.name)
this.parent.loggerContext.name.toString == orig(this.parent.loggerContext.name.toString)
this.parent.loggerContext.sm == orig(this.parent.loggerContext.sm)
this.parent.loggerContext.sm.getClass().getName() == orig(this.parent.loggerContext.sm.getClass().getName())
this.parent.loggerContext.propertyMap == orig(this.parent.loggerContext.propertyMap)
this.parent.loggerContext.propertyMap.getClass().getName() == orig(this.parent.loggerContext.propertyMap.getClass().getName())
this.parent.loggerContext.objectMap == orig(this.parent.loggerContext.objectMap)
this.parent.loggerContext.objectMap.getClass().getName() == orig(this.parent.loggerContext.objectMap.getClass().getName())
this.parent.loggerRemoteView == orig(this.parent.loggerRemoteView)
this.parent.loggerRemoteView.loggerContextView == orig(this.parent.loggerRemoteView.loggerContextView)
this.parent.loggerRemoteView.name == orig(this.parent.loggerRemoteView.name)
this.parent.loggerRemoteView.name.toString == orig(this.parent.loggerRemoteView.name.toString)
ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled == orig(ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled)
this.childrenList == orig(this.childrenList)
this.aai == orig(this.aai)
this.aai.appenderList == orig(this.aai.appenderList)
this.aai.appenderList[] == orig(this.aai.appenderList[])
this.aai.appenderList.getClass().getName() == orig(this.aai.appenderList.getClass().getName())
this.additive == orig(this.additive)
this.loggerContext == orig(this.loggerContext)
this.loggerContext.root == orig(this.loggerContext.root)
this.loggerContext.root.name == orig(this.loggerContext.root.name)
this.loggerContext.root.name.toString == orig(this.loggerContext.root.name.toString)
this.loggerContext.root.level == orig(this.loggerContext.root.level)
this.loggerContext.root.effectiveLevelInt == orig(this.loggerContext.root.effectiveLevelInt)
this.loggerContext.root.parent == orig(this.loggerContext.root.parent)
this.loggerContext.root.childrenList == orig(this.loggerContext.root.childrenList)
this.loggerContext.root.childrenList[] == orig(this.loggerContext.root.childrenList[])
this.loggerContext.root.childrenList.getClass().getName() == orig(this.loggerContext.root.childrenList.getClass().getName())
this.loggerContext.root.aai == orig(this.loggerContext.root.aai)
this.loggerContext.root.additive == orig(this.loggerContext.root.additive)
this.loggerContext.root.loggerContext == orig(this.loggerContext.root.loggerContext)
this.loggerContext.root.loggerRemoteView == orig(this.loggerContext.root.loggerRemoteView)
this.loggerContext.size == orig(this.loggerContext.size)
this.loggerContext.noAppenderWarning == orig(this.loggerContext.noAppenderWarning)
this.loggerContext.contextListenerList == orig(this.loggerContext.contextListenerList)
this.loggerContext.contextListenerList[] == orig(this.loggerContext.contextListenerList[])
this.loggerContext.contextListenerList.getClass().getName() == orig(this.loggerContext.contextListenerList.getClass().getName())
this.loggerContext.loggerCache == orig(this.loggerContext.loggerCache)
this.loggerContext.loggerContextRemoteView == orig(this.loggerContext.loggerContextRemoteView)
this.loggerContext.loggerContextRemoteView.name == orig(this.loggerContext.loggerContextRemoteView.name)
this.loggerContext.loggerContextRemoteView.name.toString == orig(this.loggerContext.loggerContextRemoteView.name.toString)
this.loggerContext.loggerContextRemoteView.propertyMap == orig(this.loggerContext.loggerContextRemoteView.propertyMap)
this.loggerContext.loggerContextRemoteView.propertyMap.getClass().getName() == orig(this.loggerContext.loggerContextRemoteView.propertyMap.getClass().getName())
this.loggerContext.cfai == orig(this.loggerContext.cfai)
this.loggerContext.started == orig(this.loggerContext.started)
this.loggerContext.name == orig(this.loggerContext.name)
this.loggerContext.name.toString == orig(this.loggerContext.name.toString)
this.loggerContext.sm == orig(this.loggerContext.sm)
this.loggerContext.sm.getClass().getName() == orig(this.loggerContext.sm.getClass().getName())
this.loggerContext.propertyMap == orig(this.loggerContext.propertyMap)
this.loggerContext.propertyMap.getClass().getName() == orig(this.loggerContext.propertyMap.getClass().getName())
this.loggerContext.objectMap == orig(this.loggerContext.objectMap)
this.loggerContext.objectMap.getClass().getName() == orig(this.loggerContext.objectMap.getClass().getName())
this.loggerRemoteView == orig(this.loggerRemoteView)
this.loggerRemoteView.loggerContextView == orig(this.loggerRemoteView.loggerContextView)
this.loggerRemoteView.loggerContextView.name == orig(this.loggerRemoteView.loggerContextView.name)
this.loggerRemoteView.loggerContextView.name.toString == orig(this.loggerRemoteView.loggerContextView.name.toString)
this.loggerRemoteView.loggerContextView.propertyMap == orig(this.loggerRemoteView.loggerContextView.propertyMap)
this.loggerRemoteView.loggerContextView.propertyMap.getClass().getName() == orig(this.loggerRemoteView.loggerContextView.propertyMap.getClass().getName())
this.loggerRemoteView.name == orig(this.loggerRemoteView.name)
this.loggerRemoteView.name.toString == orig(this.loggerRemoteView.name.toString)
childName.toString == orig(childName.toString)
ch.qos.logback.classic.Logger.instanceCount one of { 1, 2, 3 }
this.name.toString one of { "org", "org.reflections", "root" }
this.effectiveLevelInt == 10000
this.parent.name.toString one of { "org", "root" }
this.parent.parent.name has only one value
this.parent.parent.name.toString == "root"
this.parent.parent.level has only one value
this.parent.parent.parent == null
this.parent.parent.childrenList has only one value
this.parent.parent.childrenList[] contains no nulls and has only one value, of length 1
this.parent.parent.childrenList[] elements has only one value
this.parent.parent.aai has only one value
this.parent.parent.loggerRemoteView has only one value
this.parent.childrenList[].getClass().getName() == [ch.qos.logback.classic.Logger]
this.parent.loggerContext.size one of { 2, 3 }
this.parent.loggerRemoteView.name.toString one of { "org", "root" }
this.childrenList == null
this.loggerContext.root has only one value
this.loggerContext.root.level has only one value
this.loggerContext.root.effectiveLevelInt == 10000
this.loggerContext.root.childrenList[] contains no nulls and has only one value, of length 1
this.loggerContext.root.childrenList[].getClass().getName() == [ch.qos.logback.classic.Logger]
this.loggerContext.root.aai has only one value
this.loggerContext.root.loggerRemoteView has only one value
this.loggerContext.size one of { 1, 2, 3 }
this.loggerContext.loggerContextRemoteView has only one value
this.loggerContext.loggerContextRemoteView.name has only one value
this.loggerContext.loggerContextRemoteView.propertyMap has only one value
this.loggerContext.name has only one value
this.loggerRemoteView.loggerContextView has only one value
this.loggerRemoteView.loggerContextView.name has only one value
this.loggerRemoteView.loggerContextView.propertyMap has only one value
this.loggerRemoteView.name.toString one of { "org", "org.reflections", "root" }
childName.toString one of { "org", "org.reflections", "org.reflections.Reflections" }
return == null
size(this.parent.childrenList[]) == 1
size(this.loggerContext.root.childrenList[]) == 1
===========================================================================
ch.qos.logback.classic.Logger.setLevel(ch.qos.logback.classic.Level):::ENTER
this has only one value
ch.qos.logback.classic.Logger.instanceCount == 1
this.name has only one value
this.name.toString == "root"
this.level == null
this.effectiveLevelInt == 0
this.parent == null
this.childrenList == null
this.aai == null
this.loggerContext.root has only one value
this.loggerContext.root.level == null
this.loggerContext.root.effectiveLevelInt == 0
this.loggerContext.root.childrenList == null
this.loggerContext.root.aai == null
this.loggerContext.root.loggerRemoteView has only one value
this.loggerContext.size == 0
this.loggerContext.loggerContextRemoteView has only one value
this.loggerContext.loggerContextRemoteView.name == null
this.loggerContext.loggerContextRemoteView.propertyMap has only one value
this.loggerContext.name == null
this.loggerRemoteView has only one value
this.loggerRemoteView.loggerContextView has only one value
this.loggerRemoteView.loggerContextView.name == null
this.loggerRemoteView.loggerContextView.propertyMap has only one value
this.loggerRemoteView.name has only one value
this.loggerRemoteView.name.toString == "root"
newLevel has only one value
newLevel.levelInt == 10000
newLevel.levelStr has only one value
newLevel.levelStr.toString == "DEBUG"
===========================================================================
ch.qos.logback.classic.Logger.setLevel(ch.qos.logback.classic.Level):::EXIT182
===========================================================================
ch.qos.logback.classic.Logger.setLevel(ch.qos.logback.classic.Level):::EXIT
ch.qos.logback.classic.Logger.FQCN == orig(ch.qos.logback.classic.Logger.FQCN)
ch.qos.logback.classic.Logger.FQCN.toString == orig(ch.qos.logback.classic.Logger.FQCN.toString)
ch.qos.logback.classic.Logger.instanceCount == orig(ch.qos.logback.classic.Logger.instanceCount)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
ch.qos.logback.classic.Level.OFF_INTEGER == orig(ch.qos.logback.classic.Level.OFF_INTEGER)
ch.qos.logback.classic.Level.ERROR_INTEGER == orig(ch.qos.logback.classic.Level.ERROR_INTEGER)
ch.qos.logback.classic.Level.WARN_INTEGER == orig(ch.qos.logback.classic.Level.WARN_INTEGER)
ch.qos.logback.classic.Level.INFO_INTEGER == orig(ch.qos.logback.classic.Level.INFO_INTEGER)
ch.qos.logback.classic.Level.DEBUG_INTEGER == orig(ch.qos.logback.classic.Level.DEBUG_INTEGER)
ch.qos.logback.classic.Level.TRACE_INTEGER == orig(ch.qos.logback.classic.Level.TRACE_INTEGER)
ch.qos.logback.classic.Level.ALL_INTEGER == orig(ch.qos.logback.classic.Level.ALL_INTEGER)
ch.qos.logback.classic.Level.OFF == orig(ch.qos.logback.classic.Level.OFF)
ch.qos.logback.classic.Level.ERROR == orig(ch.qos.logback.classic.Level.ERROR)
ch.qos.logback.classic.Level.WARN == orig(ch.qos.logback.classic.Level.WARN)
ch.qos.logback.classic.Level.INFO == orig(ch.qos.logback.classic.Level.INFO)
ch.qos.logback.classic.Level.DEBUG == orig(ch.qos.logback.classic.Level.DEBUG)
ch.qos.logback.classic.Level.TRACE == orig(ch.qos.logback.classic.Level.TRACE)
ch.qos.logback.classic.Level.ALL == orig(ch.qos.logback.classic.Level.ALL)
ch.qos.logback.classic.Level.OFF.levelInt == orig(ch.qos.logback.classic.Level.OFF.levelInt)
ch.qos.logback.classic.Level.OFF.levelStr == orig(ch.qos.logback.classic.Level.OFF.levelStr)
ch.qos.logback.classic.Level.OFF.levelStr.toString == orig(ch.qos.logback.classic.Level.OFF.levelStr.toString)
ch.qos.logback.classic.Level.ERROR.levelInt == orig(ch.qos.logback.classic.Level.ERROR.levelInt)
ch.qos.logback.classic.Level.ERROR.levelStr == orig(ch.qos.logback.classic.Level.ERROR.levelStr)
ch.qos.logback.classic.Level.ERROR.levelStr.toString == orig(ch.qos.logback.classic.Level.ERROR.levelStr.toString)
ch.qos.logback.classic.Level.WARN.levelInt == orig(ch.qos.logback.classic.Level.WARN.levelInt)
ch.qos.logback.classic.Level.WARN.levelStr == orig(ch.qos.logback.classic.Level.WARN.levelStr)
ch.qos.logback.classic.Level.WARN.levelStr.toString == orig(ch.qos.logback.classic.Level.WARN.levelStr.toString)
ch.qos.logback.classic.Level.INFO.levelInt == orig(ch.qos.logback.classic.Level.INFO.levelInt)
ch.qos.logback.classic.Level.INFO.levelStr == orig(ch.qos.logback.classic.Level.INFO.levelStr)
ch.qos.logback.classic.Level.INFO.levelStr.toString == orig(ch.qos.logback.classic.Level.INFO.levelStr.toString)
ch.qos.logback.classic.Level.DEBUG.levelInt == orig(ch.qos.logback.classic.Level.DEBUG.levelInt)
ch.qos.logback.classic.Level.DEBUG.levelStr == orig(ch.qos.logback.classic.Level.DEBUG.levelStr)
ch.qos.logback.classic.Level.DEBUG.levelStr.toString == orig(ch.qos.logback.classic.Level.DEBUG.levelStr.toString)
ch.qos.logback.classic.Level.TRACE.levelInt == orig(ch.qos.logback.classic.Level.TRACE.levelInt)
ch.qos.logback.classic.Level.TRACE.levelStr == orig(ch.qos.logback.classic.Level.TRACE.levelStr)
ch.qos.logback.classic.Level.TRACE.levelStr.toString == orig(ch.qos.logback.classic.Level.TRACE.levelStr.toString)
ch.qos.logback.classic.Level.ALL.levelInt == orig(ch.qos.logback.classic.Level.ALL.levelInt)
ch.qos.logback.classic.Level.ALL.levelStr == orig(ch.qos.logback.classic.Level.ALL.levelStr)
ch.qos.logback.classic.Level.ALL.levelStr.toString == orig(ch.qos.logback.classic.Level.ALL.levelStr.toString)
this.parent == orig(this.parent)
ch.qos.logback.classic.LoggerContext.ROOT_NAME == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME)
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString)
ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled == orig(ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled)
this.childrenList == orig(this.childrenList)
this.aai == orig(this.aai)
this.additive == orig(this.additive)
this.loggerContext == orig(this.loggerContext)
this.loggerContext.root == orig(this.loggerContext.root)
this.loggerContext.root.name == orig(this.loggerContext.root.name)
this.loggerContext.root.name.toString == orig(this.loggerContext.root.name.toString)
this.loggerContext.root.parent == orig(this.loggerContext.root.parent)
this.loggerContext.root.childrenList == orig(this.loggerContext.root.childrenList)
this.loggerContext.root.aai == orig(this.loggerContext.root.aai)
this.loggerContext.root.additive == orig(this.loggerContext.root.additive)
this.loggerContext.root.loggerContext == orig(this.loggerContext.root.loggerContext)
this.loggerContext.root.loggerRemoteView == orig(this.loggerContext.root.loggerRemoteView)
this.loggerContext.size == orig(this.loggerContext.size)
this.loggerContext.noAppenderWarning == orig(this.loggerContext.noAppenderWarning)
this.loggerContext.contextListenerList == orig(this.loggerContext.contextListenerList)
this.loggerContext.contextListenerList[] == orig(this.loggerContext.contextListenerList[])
this.loggerContext.contextListenerList.getClass().getName() == orig(this.loggerContext.contextListenerList.getClass().getName())
this.loggerContext.loggerCache == orig(this.loggerContext.loggerCache)
this.loggerContext.loggerContextRemoteView == orig(this.loggerContext.loggerContextRemoteView)
this.loggerContext.loggerContextRemoteView.name == orig(this.loggerContext.loggerContextRemoteView.name)
this.loggerContext.loggerContextRemoteView.propertyMap == orig(this.loggerContext.loggerContextRemoteView.propertyMap)
this.loggerContext.loggerContextRemoteView.propertyMap.getClass().getName() == orig(this.loggerContext.loggerContextRemoteView.propertyMap.getClass().getName())
this.loggerContext.cfai == orig(this.loggerContext.cfai)
this.loggerContext.started == orig(this.loggerContext.started)
this.loggerContext.name == orig(this.loggerContext.name)
this.loggerContext.sm == orig(this.loggerContext.sm)
this.loggerContext.sm.getClass().getName() == orig(this.loggerContext.sm.getClass().getName())
this.loggerContext.propertyMap == orig(this.loggerContext.propertyMap)
this.loggerContext.propertyMap.getClass().getName() == orig(this.loggerContext.propertyMap.getClass().getName())
this.loggerContext.objectMap == orig(this.loggerContext.objectMap)
this.loggerContext.objectMap.getClass().getName() == orig(this.loggerContext.objectMap.getClass().getName())
this.loggerRemoteView == orig(this.loggerRemoteView)
this.loggerRemoteView.loggerContextView == orig(this.loggerRemoteView.loggerContextView)
this.loggerRemoteView.loggerContextView.name == orig(this.loggerRemoteView.loggerContextView.name)
this.loggerRemoteView.loggerContextView.propertyMap == orig(this.loggerRemoteView.loggerContextView.propertyMap)
this.loggerRemoteView.loggerContextView.propertyMap.getClass().getName() == orig(this.loggerRemoteView.loggerContextView.propertyMap.getClass().getName())
this.loggerRemoteView.name == orig(this.loggerRemoteView.name)
this.loggerRemoteView.name.toString == orig(this.loggerRemoteView.name.toString)
newLevel.levelInt == orig(newLevel.levelInt)
newLevel.levelStr == orig(newLevel.levelStr)
newLevel.levelStr.toString == orig(newLevel.levelStr.toString)
ch.qos.logback.classic.Logger.instanceCount == 1
this.name has only one value
this.name.toString == "root"
this.level has only one value
this.effectiveLevelInt == 10000
this.parent == null
this.childrenList == null
this.aai == null
this.loggerContext.root has only one value
this.loggerContext.root.level has only one value
this.loggerContext.root.effectiveLevelInt == 10000
this.loggerContext.root.childrenList == null
this.loggerContext.root.aai == null
this.loggerContext.root.loggerRemoteView has only one value
this.loggerContext.size == 0
this.loggerContext.loggerContextRemoteView has only one value
this.loggerContext.loggerContextRemoteView.name == null
this.loggerContext.loggerContextRemoteView.propertyMap has only one value
this.loggerContext.name == null
this.loggerRemoteView has only one value
this.loggerRemoteView.loggerContextView has only one value
this.loggerRemoteView.loggerContextView.name == null
this.loggerRemoteView.loggerContextView.propertyMap has only one value
this.loggerRemoteView.name has only one value
this.loggerRemoteView.name.toString == "root"
newLevel.levelInt == 10000
newLevel.levelStr has only one value
newLevel.levelStr.toString == "DEBUG"
===========================================================================
ch.qos.logback.classic.LoggerContext:::CLASS
ch.qos.logback.classic.LoggerContext.ROOT_NAME has only one value
ch.qos.logback.classic.LoggerContext.ROOT_NAME != null
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == "root"
===========================================================================
ch.qos.logback.classic.LoggerContext:::OBJECT
this has only one value
ch.qos.logback.classic.Logger.FQCN has only one value
ch.qos.logback.classic.Logger.FQCN != null
ch.qos.logback.classic.Logger.FQCN.toString == "ch.qos.logback.classic.Logger"
ch.qos.logback.classic.Logger.instanceCount >= 0
this.root.name has only one value
this.root.name != null
this.root.name.toString == "root"
this.root.level has only one value
this.root.level != null
ch.qos.logback.classic.Level.OFF_INTEGER has only one value
ch.qos.logback.classic.Level.OFF_INTEGER != null
ch.qos.logback.classic.Level.ERROR_INTEGER has only one value
ch.qos.logback.classic.Level.ERROR_INTEGER != null
ch.qos.logback.classic.Level.WARN_INTEGER has only one value
ch.qos.logback.classic.Level.WARN_INTEGER != null
ch.qos.logback.classic.Level.INFO_INTEGER has only one value
ch.qos.logback.classic.Level.INFO_INTEGER != null
ch.qos.logback.classic.Level.DEBUG_INTEGER has only one value
ch.qos.logback.classic.Level.DEBUG_INTEGER != null
ch.qos.logback.classic.Level.TRACE_INTEGER has only one value
ch.qos.logback.classic.Level.TRACE_INTEGER != null
ch.qos.logback.classic.Level.ALL_INTEGER has only one value
ch.qos.logback.classic.Level.ALL_INTEGER != null
ch.qos.logback.classic.Level.OFF has only one value
ch.qos.logback.classic.Level.OFF != null
ch.qos.logback.classic.Level.ERROR has only one value
ch.qos.logback.classic.Level.ERROR != null
ch.qos.logback.classic.Level.WARN has only one value
ch.qos.logback.classic.Level.WARN != null
ch.qos.logback.classic.Level.INFO has only one value
ch.qos.logback.classic.Level.INFO != null
ch.qos.logback.classic.Level.DEBUG has only one value
ch.qos.logback.classic.Level.DEBUG != null
ch.qos.logback.classic.Level.TRACE has only one value
ch.qos.logback.classic.Level.TRACE != null
ch.qos.logback.classic.Level.ALL has only one value
ch.qos.logback.classic.Level.ALL != null
this.root.level.levelInt == 10000
this.root.level.levelStr has only one value
this.root.level.levelStr != null
this.root.level.levelStr.toString == "DEBUG"
this.root.effectiveLevelInt == 10000
this.root.parent == null
this.root.childrenList[] elements has only one value
this.root.childrenList[] elements != null
this.root.childrenList[].getClass().getName() elements == ch.qos.logback.classic.Logger.class
this.root.childrenList[].getClass().getName() one of { [], [ch.qos.logback.classic.Logger] }
this.root.childrenList.getClass().getName() == java.util.ArrayList.class
this.root.aai.appenderList has only one value
this.root.aai.appenderList != null
this.root.aai.appenderList[] contains no nulls and has only one value, of length 1
this.root.aai.appenderList[] elements has only one value
this.root.aai.appenderList[] elements != null
this.root.aai.appenderList[].getClass().getName() == [ch.qos.logback.core.ConsoleAppender]
this.root.aai.appenderList[].getClass().getName() elements == ch.qos.logback.core.ConsoleAppender.class
this.root.aai.appenderList.getClass().getName() == java.util.ArrayList.class
this.root.additive == true
this.root.loggerContext has only one value
this.root.loggerContext != null
this.root.loggerContext.root has only one value
this.root.loggerContext.root != null
this.root.loggerContext.size >= 1
this.root.loggerContext.noAppenderWarning == 0
this.root.loggerContext.contextListenerList has only one value
this.root.loggerContext.contextListenerList != null
this.root.loggerContext.contextListenerList[] == []
this.root.loggerContext.contextListenerList[].getClass().getName() == []
this.root.loggerContext.contextListenerList.getClass().getName() == java.util.ArrayList.class
this.root.loggerContext.loggerCache has only one value
this.root.loggerContext.loggerCache != null
this.root.loggerContext.loggerContextRemoteView != null
this.root.loggerContext.cfai == null
this.root.loggerContext.started == false
this.root.loggerContext.name.toString == "default"
this.root.loggerContext.sm has only one value
this.root.loggerContext.sm != null
this.root.loggerContext.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
this.root.loggerContext.propertyMap has only one value
this.root.loggerContext.propertyMap != null
this.root.loggerContext.propertyMap.getClass().getName() == java.util.HashMap.class
this.root.loggerContext.objectMap has only one value
this.root.loggerContext.objectMap != null
this.root.loggerContext.objectMap.getClass().getName() == java.util.HashMap.class
this.root.loggerRemoteView != null
this.root.loggerRemoteView.loggerContextView != null
this.root.loggerRemoteView.name has only one value
this.root.loggerRemoteView.name != null
this.root.loggerRemoteView.name.toString == "root"
ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled == false
this.size >= 0
this.noAppenderWarning == 0
this.contextListenerList has only one value
this.contextListenerList != null
this.contextListenerList[] == []
this.contextListenerList[].getClass().getName() == []
this.contextListenerList.getClass().getName() == java.util.ArrayList.class
this.loggerCache has only one value
this.loggerCache != null
this.loggerContextRemoteView != null
this.loggerContextRemoteView.name.toString == "default"
this.loggerContextRemoteView.propertyMap != null
this.loggerContextRemoteView.propertyMap.getClass().getName() == java.util.HashMap.class
this.cfai == null
this.started == false
this.name.toString == "default"
this.sm has only one value
this.sm != null
this.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
this.propertyMap has only one value
this.propertyMap != null
this.propertyMap.getClass().getName() == java.util.HashMap.class
this.objectMap has only one value
this.objectMap != null
this.objectMap.getClass().getName() == java.util.HashMap.class
size(this.root.childrenList[]) one of { 0, 1 }
size(this.root.aai.appenderList[]) == 1
===========================================================================
ch.qos.logback.classic.LoggerContext.LoggerContext():::EXIT
this.root has only one value
ch.qos.logback.classic.Logger.instanceCount == 1
this.root.childrenList == null
this.root.aai == null
this.root.loggerContext.size == 1
this.root.loggerContext.loggerContextRemoteView has only one value
this.root.loggerContext.name == null
this.root.loggerRemoteView has only one value
this.root.loggerRemoteView.loggerContextView has only one value
this.size == 1
this.loggerContextRemoteView has only one value
this.loggerContextRemoteView.name == null
this.loggerContextRemoteView.propertyMap has only one value
this.name == null
===========================================================================
ch.qos.logback.classic.LoggerContext.getLogger(java.lang.String):::ENTER
this.root has only one value
ch.qos.logback.classic.Logger.instanceCount == 1
this.root.childrenList == null
this.root.loggerContext.size == 1
this.root.loggerContext.loggerContextRemoteView has only one value
this.root.loggerContext.name has only one value
this.root.loggerRemoteView has only one value
this.root.loggerRemoteView.loggerContextView has only one value
this.size == 1
this.loggerContextRemoteView has only one value
this.loggerContextRemoteView.name has only one value
this.loggerContextRemoteView.propertyMap has only one value
this.name has only one value
name.toString one of { "org.reflections.Reflections", "root" }
===========================================================================
ch.qos.logback.classic.LoggerContext.getLogger(java.lang.String):::EXIT109
ch.qos.logback.classic.Logger.instanceCount == orig(ch.qos.logback.classic.Logger.instanceCount)
this.root.childrenList == orig(this.root.childrenList)
this.root.loggerContext.size == orig(this.root.loggerContext.size)
this.size == orig(this.size)
ch.qos.logback.classic.Logger.instanceCount == 1
this.root.childrenList == null
this.root.aai == null
this.root.loggerContext.size == 1
this.size == 1
name.toString == "root"
return has only one value
return.name has only one value
return.name.toString == "root"
return.level has only one value
return.parent == null
return.loggerContext.size == 1
return.loggerRemoteView has only one value
return.loggerRemoteView.name has only one value
return.loggerRemoteView.name.toString == "root"
orig(name) has only one value
===========================================================================
ch.qos.logback.classic.LoggerContext.getLogger(java.lang.String):::EXIT145
ch.qos.logback.classic.Logger.instanceCount == 4
this.root.childrenList has only one value
this.root.aai has only one value
this.root.loggerContext.size == 4
this.size == 4
name.toString == "org.reflections.Reflections"
return has only one value
return.name has only one value
return.name.toString == "org.reflections.Reflections"
return.level == null
return.parent has only one value
return.loggerContext.size == 4
return.loggerRemoteView has only one value
return.loggerRemoteView.name has only one value
return.loggerRemoteView.name.toString == "org.reflections.Reflections"
orig(name) has only one value
===========================================================================
ch.qos.logback.classic.LoggerContext.getLogger(java.lang.String):::EXIT
ch.qos.logback.classic.LoggerContext.ROOT_NAME == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME)
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString)
this.root == orig(this.root)
ch.qos.logback.classic.Logger.FQCN == orig(ch.qos.logback.classic.Logger.FQCN)
ch.qos.logback.classic.Logger.FQCN.toString == orig(ch.qos.logback.classic.Logger.FQCN.toString)
this.root.name == orig(this.root.name)
this.root.name.toString == orig(this.root.name.toString)
this.root.level == orig(this.root.level)
ch.qos.logback.classic.Level.OFF_INTEGER == orig(ch.qos.logback.classic.Level.OFF_INTEGER)
ch.qos.logback.classic.Level.ERROR_INTEGER == orig(ch.qos.logback.classic.Level.ERROR_INTEGER)
ch.qos.logback.classic.Level.WARN_INTEGER == orig(ch.qos.logback.classic.Level.WARN_INTEGER)
ch.qos.logback.classic.Level.INFO_INTEGER == orig(ch.qos.logback.classic.Level.INFO_INTEGER)
ch.qos.logback.classic.Level.DEBUG_INTEGER == orig(ch.qos.logback.classic.Level.DEBUG_INTEGER)
ch.qos.logback.classic.Level.TRACE_INTEGER == orig(ch.qos.logback.classic.Level.TRACE_INTEGER)
ch.qos.logback.classic.Level.ALL_INTEGER == orig(ch.qos.logback.classic.Level.ALL_INTEGER)
ch.qos.logback.classic.Level.OFF == orig(ch.qos.logback.classic.Level.OFF)
ch.qos.logback.classic.Level.ERROR == orig(ch.qos.logback.classic.Level.ERROR)
ch.qos.logback.classic.Level.WARN == orig(ch.qos.logback.classic.Level.WARN)
ch.qos.logback.classic.Level.INFO == orig(ch.qos.logback.classic.Level.INFO)
ch.qos.logback.classic.Level.DEBUG == orig(ch.qos.logback.classic.Level.DEBUG)
ch.qos.logback.classic.Level.TRACE == orig(ch.qos.logback.classic.Level.TRACE)
ch.qos.logback.classic.Level.ALL == orig(ch.qos.logback.classic.Level.ALL)
this.root.level.levelInt == orig(this.root.level.levelInt)
this.root.level.levelStr == orig(this.root.level.levelStr)
this.root.level.levelStr.toString == orig(this.root.level.levelStr.toString)
this.root.effectiveLevelInt == orig(this.root.effectiveLevelInt)
this.root.parent == orig(this.root.parent)
this.root.aai == orig(this.root.aai)
this.root.aai.appenderList == orig(this.root.aai.appenderList)
this.root.aai.appenderList[] == orig(this.root.aai.appenderList[])
this.root.aai.appenderList.getClass().getName() == orig(this.root.aai.appenderList.getClass().getName())
this.root.additive == orig(this.root.additive)
this.root.loggerContext == orig(this.root.loggerContext)
this.root.loggerContext.root == orig(this.root.loggerContext.root)
this.root.loggerContext.noAppenderWarning == orig(this.root.loggerContext.noAppenderWarning)
this.root.loggerContext.contextListenerList == orig(this.root.loggerContext.contextListenerList)
this.root.loggerContext.contextListenerList[] == orig(this.root.loggerContext.contextListenerList[])
this.root.loggerContext.contextListenerList.getClass().getName() == orig(this.root.loggerContext.contextListenerList.getClass().getName())
this.root.loggerContext.loggerCache == orig(this.root.loggerContext.loggerCache)
this.root.loggerContext.loggerContextRemoteView == orig(this.root.loggerContext.loggerContextRemoteView)
this.root.loggerContext.cfai == orig(this.root.loggerContext.cfai)
this.root.loggerContext.started == orig(this.root.loggerContext.started)
this.root.loggerContext.name == orig(this.root.loggerContext.name)
this.root.loggerContext.name.toString == orig(this.root.loggerContext.name.toString)
this.root.loggerContext.sm == orig(this.root.loggerContext.sm)
this.root.loggerContext.sm.getClass().getName() == orig(this.root.loggerContext.sm.getClass().getName())
this.root.loggerContext.propertyMap == orig(this.root.loggerContext.propertyMap)
this.root.loggerContext.propertyMap.getClass().getName() == orig(this.root.loggerContext.propertyMap.getClass().getName())
this.root.loggerContext.objectMap == orig(this.root.loggerContext.objectMap)
this.root.loggerContext.objectMap.getClass().getName() == orig(this.root.loggerContext.objectMap.getClass().getName())
this.root.loggerRemoteView == orig(this.root.loggerRemoteView)
this.root.loggerRemoteView.loggerContextView == orig(this.root.loggerRemoteView.loggerContextView)
this.root.loggerRemoteView.name == orig(this.root.loggerRemoteView.name)
this.root.loggerRemoteView.name.toString == orig(this.root.loggerRemoteView.name.toString)
ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled == orig(ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled)
this.noAppenderWarning == orig(this.noAppenderWarning)
this.contextListenerList == orig(this.contextListenerList)
this.contextListenerList[] == orig(this.contextListenerList[])
this.contextListenerList.getClass().getName() == orig(this.contextListenerList.getClass().getName())
this.loggerCache == orig(this.loggerCache)
this.loggerContextRemoteView == orig(this.loggerContextRemoteView)
this.loggerContextRemoteView.name == orig(this.loggerContextRemoteView.name)
this.loggerContextRemoteView.name.toString == orig(this.loggerContextRemoteView.name.toString)
this.loggerContextRemoteView.propertyMap == orig(this.loggerContextRemoteView.propertyMap)
this.loggerContextRemoteView.propertyMap.getClass().getName() == orig(this.loggerContextRemoteView.propertyMap.getClass().getName())
this.cfai == orig(this.cfai)
this.started == orig(this.started)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.sm == orig(this.sm)
this.sm.getClass().getName() == orig(this.sm.getClass().getName())
this.propertyMap == orig(this.propertyMap)
this.propertyMap.getClass().getName() == orig(this.propertyMap.getClass().getName())
this.objectMap == orig(this.objectMap)
this.objectMap.getClass().getName() == orig(this.objectMap.getClass().getName())
name.toString == orig(name.toString)
this.root has only one value
ch.qos.logback.classic.Logger.instanceCount one of { 1, 4 }
this.root.childrenList[] contains no nulls and has only one value, of length 1
this.root.childrenList[].getClass().getName() == [ch.qos.logback.classic.Logger]
this.root.loggerContext.size one of { 1, 4 }
this.root.loggerContext.loggerContextRemoteView has only one value
this.root.loggerContext.name has only one value
this.root.loggerRemoteView has only one value
this.root.loggerRemoteView.loggerContextView has only one value
this.size one of { 1, 4 }
this.loggerContextRemoteView has only one value
this.loggerContextRemoteView.name has only one value
this.loggerContextRemoteView.propertyMap has only one value
this.name has only one value
name.toString one of { "org.reflections.Reflections", "root" }
return.name.toString one of { "org.reflections.Reflections", "root" }
return.level.levelInt == 10000
return.level.levelStr has only one value
return.level.levelStr.toString == "DEBUG"
return.effectiveLevelInt == 10000
return.parent.name has only one value
return.parent.name.toString == "org.reflections"
return.parent.level == null
return.parent.effectiveLevelInt == 10000
return.parent.parent has only one value
return.parent.childrenList has only one value
return.parent.childrenList[] contains no nulls and has only one value, of length 1
return.parent.childrenList[] elements has only one value
return.parent.childrenList[].getClass().getName() == [ch.qos.logback.classic.Logger]
return.parent.childrenList[].getClass().getName() elements == ch.qos.logback.classic.Logger.class
return.parent.childrenList.getClass().getName() == java.util.ArrayList.class
return.parent.aai == null
return.parent.additive == true
return.parent.loggerContext has only one value
return.parent.loggerRemoteView has only one value
return.childrenList == null
return.aai == null
return.additive == true
return.loggerContext has only one value
return.loggerContext.root has only one value
return.loggerContext.size one of { 1, 4 }
return.loggerContext.noAppenderWarning == 0
return.loggerContext.contextListenerList has only one value
return.loggerContext.contextListenerList[] == []
return.loggerContext.contextListenerList[].getClass().getName() == []
return.loggerContext.contextListenerList.getClass().getName() == java.util.ArrayList.class
return.loggerContext.loggerCache has only one value
return.loggerContext.loggerContextRemoteView has only one value
return.loggerContext.cfai == null
return.loggerContext.started == false
return.loggerContext.name has only one value
return.loggerContext.name.toString == "default"
return.loggerContext.sm has only one value
return.loggerContext.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
return.loggerContext.propertyMap has only one value
return.loggerContext.propertyMap.getClass().getName() == java.util.HashMap.class
return.loggerContext.objectMap has only one value
return.loggerContext.objectMap.getClass().getName() == java.util.HashMap.class
return.loggerRemoteView.loggerContextView has only one value
return.loggerRemoteView.name.toString one of { "org.reflections.Reflections", "root" }
size(this.root.childrenList[]) == 1
size(return.parent.childrenList[]) == 1
===========================================================================
ch.qos.logback.classic.LoggerContext.getLoggerContextRemoteView():::ENTER
this.root.loggerContext.size one of { 1, 2, 3 }
this.root.loggerContext.loggerContextRemoteView has only one value
this.root.loggerContext.name has only one value
===========================================================================
ch.qos.logback.classic.LoggerContext.getLoggerContextRemoteView():::EXIT
ch.qos.logback.classic.LoggerContext.ROOT_NAME == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME)
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString)
this.root == orig(this.root)
ch.qos.logback.classic.Logger.FQCN == orig(ch.qos.logback.classic.Logger.FQCN)
ch.qos.logback.classic.Logger.FQCN.toString == orig(ch.qos.logback.classic.Logger.FQCN.toString)
ch.qos.logback.classic.Logger.instanceCount == orig(ch.qos.logback.classic.Logger.instanceCount)
this.root.name == orig(this.root.name)
this.root.name.toString == orig(this.root.name.toString)
this.root.level == orig(this.root.level)
ch.qos.logback.classic.Level.OFF_INTEGER == orig(ch.qos.logback.classic.Level.OFF_INTEGER)
ch.qos.logback.classic.Level.ERROR_INTEGER == orig(ch.qos.logback.classic.Level.ERROR_INTEGER)
ch.qos.logback.classic.Level.WARN_INTEGER == orig(ch.qos.logback.classic.Level.WARN_INTEGER)
ch.qos.logback.classic.Level.INFO_INTEGER == orig(ch.qos.logback.classic.Level.INFO_INTEGER)
ch.qos.logback.classic.Level.DEBUG_INTEGER == orig(ch.qos.logback.classic.Level.DEBUG_INTEGER)
ch.qos.logback.classic.Level.TRACE_INTEGER == orig(ch.qos.logback.classic.Level.TRACE_INTEGER)
ch.qos.logback.classic.Level.ALL_INTEGER == orig(ch.qos.logback.classic.Level.ALL_INTEGER)
ch.qos.logback.classic.Level.OFF == orig(ch.qos.logback.classic.Level.OFF)
ch.qos.logback.classic.Level.ERROR == orig(ch.qos.logback.classic.Level.ERROR)
ch.qos.logback.classic.Level.WARN == orig(ch.qos.logback.classic.Level.WARN)
ch.qos.logback.classic.Level.INFO == orig(ch.qos.logback.classic.Level.INFO)
ch.qos.logback.classic.Level.DEBUG == orig(ch.qos.logback.classic.Level.DEBUG)
ch.qos.logback.classic.Level.TRACE == orig(ch.qos.logback.classic.Level.TRACE)
ch.qos.logback.classic.Level.ALL == orig(ch.qos.logback.classic.Level.ALL)
this.root.level.levelInt == orig(this.root.level.levelInt)
this.root.level.levelStr == orig(this.root.level.levelStr)
this.root.level.levelStr.toString == orig(this.root.level.levelStr.toString)
this.root.effectiveLevelInt == orig(this.root.effectiveLevelInt)
this.root.parent == orig(this.root.parent)
this.root.childrenList == orig(this.root.childrenList)
this.root.childrenList[] == orig(this.root.childrenList[])
this.root.childrenList.getClass().getName() == orig(this.root.childrenList.getClass().getName())
this.root.aai == orig(this.root.aai)
this.root.aai.appenderList == orig(this.root.aai.appenderList)
this.root.aai.appenderList[] == orig(this.root.aai.appenderList[])
this.root.aai.appenderList.getClass().getName() == orig(this.root.aai.appenderList.getClass().getName())
this.root.additive == orig(this.root.additive)
this.root.loggerContext == orig(this.root.loggerContext)
this.root.loggerContext.root == orig(this.root.loggerContext.root)
this.root.loggerContext.size == orig(this.root.loggerContext.size)
this.root.loggerContext.noAppenderWarning == orig(this.root.loggerContext.noAppenderWarning)
this.root.loggerContext.contextListenerList == orig(this.root.loggerContext.contextListenerList)
this.root.loggerContext.contextListenerList[] == orig(this.root.loggerContext.contextListenerList[])
this.root.loggerContext.contextListenerList.getClass().getName() == orig(this.root.loggerContext.contextListenerList.getClass().getName())
this.root.loggerContext.loggerCache == orig(this.root.loggerContext.loggerCache)
this.root.loggerContext.loggerContextRemoteView == orig(this.root.loggerContext.loggerContextRemoteView)
this.root.loggerContext.cfai == orig(this.root.loggerContext.cfai)
this.root.loggerContext.started == orig(this.root.loggerContext.started)
this.root.loggerContext.name == orig(this.root.loggerContext.name)
this.root.loggerContext.name.toString == orig(this.root.loggerContext.name.toString)
this.root.loggerContext.sm == orig(this.root.loggerContext.sm)
this.root.loggerContext.sm.getClass().getName() == orig(this.root.loggerContext.sm.getClass().getName())
this.root.loggerContext.propertyMap == orig(this.root.loggerContext.propertyMap)
this.root.loggerContext.propertyMap.getClass().getName() == orig(this.root.loggerContext.propertyMap.getClass().getName())
this.root.loggerContext.objectMap == orig(this.root.loggerContext.objectMap)
this.root.loggerContext.objectMap.getClass().getName() == orig(this.root.loggerContext.objectMap.getClass().getName())
this.root.loggerRemoteView == orig(this.root.loggerRemoteView)
this.root.loggerRemoteView.loggerContextView == orig(this.root.loggerRemoteView.loggerContextView)
this.root.loggerRemoteView.name == orig(this.root.loggerRemoteView.name)
this.root.loggerRemoteView.name.toString == orig(this.root.loggerRemoteView.name.toString)
ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled == orig(ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled)
this.size == orig(this.size)
this.noAppenderWarning == orig(this.noAppenderWarning)
this.contextListenerList == orig(this.contextListenerList)
this.contextListenerList[] == orig(this.contextListenerList[])
this.contextListenerList.getClass().getName() == orig(this.contextListenerList.getClass().getName())
this.loggerCache == orig(this.loggerCache)
this.loggerContextRemoteView == orig(this.loggerContextRemoteView)
this.loggerContextRemoteView.name == orig(this.loggerContextRemoteView.name)
this.loggerContextRemoteView.name.toString == orig(this.loggerContextRemoteView.name.toString)
this.loggerContextRemoteView.propertyMap == orig(this.loggerContextRemoteView.propertyMap)
this.loggerContextRemoteView.propertyMap.getClass().getName() == orig(this.loggerContextRemoteView.propertyMap.getClass().getName())
this.cfai == orig(this.cfai)
this.started == orig(this.started)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.sm == orig(this.sm)
this.sm.getClass().getName() == orig(this.sm.getClass().getName())
this.propertyMap == orig(this.propertyMap)
this.propertyMap.getClass().getName() == orig(this.propertyMap.getClass().getName())
this.objectMap == orig(this.objectMap)
this.objectMap.getClass().getName() == orig(this.objectMap.getClass().getName())
this.root.loggerContext.size one of { 1, 2, 3 }
this.root.loggerContext.loggerContextRemoteView has only one value
this.root.loggerContext.name has only one value
return.name.toString == "default"
return.propertyMap.getClass().getName() == java.util.HashMap.class
===========================================================================
ch.qos.logback.classic.LoggerContext.incSize():::ENTER
this.root has only one value
ch.qos.logback.classic.Logger.instanceCount one of { 2, 3, 4 }
this.root.childrenList has only one value
this.root.childrenList[] contains no nulls and has only one value, of length 1
this.root.childrenList[].getClass().getName() == [ch.qos.logback.classic.Logger]
this.root.aai has only one value
this.root.loggerContext.size one of { 1, 2, 3 }
this.root.loggerContext.loggerContextRemoteView has only one value
this.root.loggerContext.name has only one value
this.root.loggerRemoteView has only one value
this.root.loggerRemoteView.loggerContextView has only one value
this.size one of { 1, 2, 3 }
this.loggerContextRemoteView has only one value
this.loggerContextRemoteView.name has only one value
this.loggerContextRemoteView.propertyMap has only one value
this.name has only one value
size(this.root.childrenList[]) == 1
===========================================================================
ch.qos.logback.classic.LoggerContext.incSize():::EXIT
ch.qos.logback.classic.LoggerContext.ROOT_NAME == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME)
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString)
this.root == orig(this.root)
ch.qos.logback.classic.Logger.FQCN == orig(ch.qos.logback.classic.Logger.FQCN)
ch.qos.logback.classic.Logger.FQCN.toString == orig(ch.qos.logback.classic.Logger.FQCN.toString)
ch.qos.logback.classic.Logger.instanceCount == orig(ch.qos.logback.classic.Logger.instanceCount)
this.root.name == orig(this.root.name)
this.root.name.toString == orig(this.root.name.toString)
this.root.level == orig(this.root.level)
ch.qos.logback.classic.Level.OFF_INTEGER == orig(ch.qos.logback.classic.Level.OFF_INTEGER)
ch.qos.logback.classic.Level.ERROR_INTEGER == orig(ch.qos.logback.classic.Level.ERROR_INTEGER)
ch.qos.logback.classic.Level.WARN_INTEGER == orig(ch.qos.logback.classic.Level.WARN_INTEGER)
ch.qos.logback.classic.Level.INFO_INTEGER == orig(ch.qos.logback.classic.Level.INFO_INTEGER)
ch.qos.logback.classic.Level.DEBUG_INTEGER == orig(ch.qos.logback.classic.Level.DEBUG_INTEGER)
ch.qos.logback.classic.Level.TRACE_INTEGER == orig(ch.qos.logback.classic.Level.TRACE_INTEGER)
ch.qos.logback.classic.Level.ALL_INTEGER == orig(ch.qos.logback.classic.Level.ALL_INTEGER)
ch.qos.logback.classic.Level.OFF == orig(ch.qos.logback.classic.Level.OFF)
ch.qos.logback.classic.Level.ERROR == orig(ch.qos.logback.classic.Level.ERROR)
ch.qos.logback.classic.Level.WARN == orig(ch.qos.logback.classic.Level.WARN)
ch.qos.logback.classic.Level.INFO == orig(ch.qos.logback.classic.Level.INFO)
ch.qos.logback.classic.Level.DEBUG == orig(ch.qos.logback.classic.Level.DEBUG)
ch.qos.logback.classic.Level.TRACE == orig(ch.qos.logback.classic.Level.TRACE)
ch.qos.logback.classic.Level.ALL == orig(ch.qos.logback.classic.Level.ALL)
this.root.level.levelInt == orig(this.root.level.levelInt)
this.root.level.levelStr == orig(this.root.level.levelStr)
this.root.level.levelStr.toString == orig(this.root.level.levelStr.toString)
this.root.effectiveLevelInt == orig(this.root.effectiveLevelInt)
this.root.parent == orig(this.root.parent)
this.root.childrenList == orig(this.root.childrenList)
this.root.childrenList[] == orig(this.root.childrenList[])
this.root.childrenList.getClass().getName() == orig(this.root.childrenList.getClass().getName())
this.root.aai == orig(this.root.aai)
this.root.aai.appenderList == orig(this.root.aai.appenderList)
this.root.aai.appenderList[] == orig(this.root.aai.appenderList[])
this.root.aai.appenderList.getClass().getName() == orig(this.root.aai.appenderList.getClass().getName())
this.root.additive == orig(this.root.additive)
this.root.loggerContext == orig(this.root.loggerContext)
this.root.loggerContext.root == orig(this.root.loggerContext.root)
this.root.loggerContext.noAppenderWarning == orig(this.root.loggerContext.noAppenderWarning)
this.root.loggerContext.contextListenerList == orig(this.root.loggerContext.contextListenerList)
this.root.loggerContext.contextListenerList[] == orig(this.root.loggerContext.contextListenerList[])
this.root.loggerContext.contextListenerList.getClass().getName() == orig(this.root.loggerContext.contextListenerList.getClass().getName())
this.root.loggerContext.loggerCache == orig(this.root.loggerContext.loggerCache)
this.root.loggerContext.loggerContextRemoteView == orig(this.root.loggerContext.loggerContextRemoteView)
this.root.loggerContext.cfai == orig(this.root.loggerContext.cfai)
this.root.loggerContext.started == orig(this.root.loggerContext.started)
this.root.loggerContext.name == orig(this.root.loggerContext.name)
this.root.loggerContext.name.toString == orig(this.root.loggerContext.name.toString)
this.root.loggerContext.sm == orig(this.root.loggerContext.sm)
this.root.loggerContext.sm.getClass().getName() == orig(this.root.loggerContext.sm.getClass().getName())
this.root.loggerContext.propertyMap == orig(this.root.loggerContext.propertyMap)
this.root.loggerContext.propertyMap.getClass().getName() == orig(this.root.loggerContext.propertyMap.getClass().getName())
this.root.loggerContext.objectMap == orig(this.root.loggerContext.objectMap)
this.root.loggerContext.objectMap.getClass().getName() == orig(this.root.loggerContext.objectMap.getClass().getName())
this.root.loggerRemoteView == orig(this.root.loggerRemoteView)
this.root.loggerRemoteView.loggerContextView == orig(this.root.loggerRemoteView.loggerContextView)
this.root.loggerRemoteView.name == orig(this.root.loggerRemoteView.name)
this.root.loggerRemoteView.name.toString == orig(this.root.loggerRemoteView.name.toString)
ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled == orig(ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled)
this.noAppenderWarning == orig(this.noAppenderWarning)
this.contextListenerList == orig(this.contextListenerList)
this.contextListenerList[] == orig(this.contextListenerList[])
this.contextListenerList.getClass().getName() == orig(this.contextListenerList.getClass().getName())
this.loggerCache == orig(this.loggerCache)
this.loggerContextRemoteView == orig(this.loggerContextRemoteView)
this.loggerContextRemoteView.name == orig(this.loggerContextRemoteView.name)
this.loggerContextRemoteView.name.toString == orig(this.loggerContextRemoteView.name.toString)
this.loggerContextRemoteView.propertyMap == orig(this.loggerContextRemoteView.propertyMap)
this.loggerContextRemoteView.propertyMap.getClass().getName() == orig(this.loggerContextRemoteView.propertyMap.getClass().getName())
this.cfai == orig(this.cfai)
this.started == orig(this.started)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.sm == orig(this.sm)
this.sm.getClass().getName() == orig(this.sm.getClass().getName())
this.propertyMap == orig(this.propertyMap)
this.propertyMap.getClass().getName() == orig(this.propertyMap.getClass().getName())
this.objectMap == orig(this.objectMap)
this.objectMap.getClass().getName() == orig(this.objectMap.getClass().getName())
this.root has only one value
ch.qos.logback.classic.Logger.instanceCount one of { 2, 3, 4 }
this.root.childrenList has only one value
this.root.childrenList[] contains no nulls and has only one value, of length 1
this.root.childrenList[].getClass().getName() == [ch.qos.logback.classic.Logger]
this.root.aai has only one value
this.root.loggerContext.size one of { 2, 3, 4 }
this.root.loggerContext.loggerContextRemoteView has only one value
this.root.loggerContext.name has only one value
this.root.loggerRemoteView has only one value
this.root.loggerRemoteView.loggerContextView has only one value
this.size one of { 2, 3, 4 }
this.loggerContextRemoteView has only one value
this.loggerContextRemoteView.name has only one value
this.loggerContextRemoteView.propertyMap has only one value
this.name has only one value
size(this.root.childrenList[]) == 1
===========================================================================
ch.qos.logback.classic.LoggerContext.setName(java.lang.String):::ENTER
this.root has only one value
ch.qos.logback.classic.Logger.instanceCount == 1
this.root.childrenList == null
this.root.aai == null
this.root.loggerContext.size == 1
this.root.loggerContext.loggerContextRemoteView has only one value
this.root.loggerContext.name == null
this.root.loggerRemoteView has only one value
this.root.loggerRemoteView.loggerContextView has only one value
this.size == 1
this.loggerContextRemoteView has only one value
this.loggerContextRemoteView.name == null
this.loggerContextRemoteView.propertyMap has only one value
this.name == null
name has only one value
name.toString == "default"
===========================================================================
ch.qos.logback.classic.LoggerContext.setName(java.lang.String):::EXIT
ch.qos.logback.classic.LoggerContext.ROOT_NAME == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME)
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString)
this.root == orig(this.root)
ch.qos.logback.classic.Logger.FQCN == orig(ch.qos.logback.classic.Logger.FQCN)
ch.qos.logback.classic.Logger.FQCN.toString == orig(ch.qos.logback.classic.Logger.FQCN.toString)
ch.qos.logback.classic.Logger.instanceCount == orig(ch.qos.logback.classic.Logger.instanceCount)
this.root.name == orig(this.root.name)
this.root.name.toString == orig(this.root.name.toString)
this.root.level == orig(this.root.level)
ch.qos.logback.classic.Level.OFF_INTEGER == orig(ch.qos.logback.classic.Level.OFF_INTEGER)
ch.qos.logback.classic.Level.ERROR_INTEGER == orig(ch.qos.logback.classic.Level.ERROR_INTEGER)
ch.qos.logback.classic.Level.WARN_INTEGER == orig(ch.qos.logback.classic.Level.WARN_INTEGER)
ch.qos.logback.classic.Level.INFO_INTEGER == orig(ch.qos.logback.classic.Level.INFO_INTEGER)
ch.qos.logback.classic.Level.DEBUG_INTEGER == orig(ch.qos.logback.classic.Level.DEBUG_INTEGER)
ch.qos.logback.classic.Level.TRACE_INTEGER == orig(ch.qos.logback.classic.Level.TRACE_INTEGER)
ch.qos.logback.classic.Level.ALL_INTEGER == orig(ch.qos.logback.classic.Level.ALL_INTEGER)
ch.qos.logback.classic.Level.OFF == orig(ch.qos.logback.classic.Level.OFF)
ch.qos.logback.classic.Level.ERROR == orig(ch.qos.logback.classic.Level.ERROR)
ch.qos.logback.classic.Level.WARN == orig(ch.qos.logback.classic.Level.WARN)
ch.qos.logback.classic.Level.INFO == orig(ch.qos.logback.classic.Level.INFO)
ch.qos.logback.classic.Level.DEBUG == orig(ch.qos.logback.classic.Level.DEBUG)
ch.qos.logback.classic.Level.TRACE == orig(ch.qos.logback.classic.Level.TRACE)
ch.qos.logback.classic.Level.ALL == orig(ch.qos.logback.classic.Level.ALL)
this.root.level.levelInt == orig(this.root.level.levelInt)
this.root.level.levelStr == orig(this.root.level.levelStr)
this.root.level.levelStr.toString == orig(this.root.level.levelStr.toString)
this.root.effectiveLevelInt == orig(this.root.effectiveLevelInt)
this.root.parent == orig(this.root.parent)
this.root.childrenList == orig(this.root.childrenList)
this.root.aai == orig(this.root.aai)
this.root.additive == orig(this.root.additive)
this.root.loggerContext == orig(this.root.loggerContext)
this.root.loggerContext.root == orig(this.root.loggerContext.root)
this.root.loggerContext.size == orig(this.root.loggerContext.size)
this.root.loggerContext.noAppenderWarning == orig(this.root.loggerContext.noAppenderWarning)
this.root.loggerContext.contextListenerList == orig(this.root.loggerContext.contextListenerList)
this.root.loggerContext.contextListenerList[] == orig(this.root.loggerContext.contextListenerList[])
this.root.loggerContext.contextListenerList.getClass().getName() == orig(this.root.loggerContext.contextListenerList.getClass().getName())
this.root.loggerContext.loggerCache == orig(this.root.loggerContext.loggerCache)
this.root.loggerContext.cfai == orig(this.root.loggerContext.cfai)
this.root.loggerContext.started == orig(this.root.loggerContext.started)
this.root.loggerContext.sm == orig(this.root.loggerContext.sm)
this.root.loggerContext.sm.getClass().getName() == orig(this.root.loggerContext.sm.getClass().getName())
this.root.loggerContext.propertyMap == orig(this.root.loggerContext.propertyMap)
this.root.loggerContext.propertyMap.getClass().getName() == orig(this.root.loggerContext.propertyMap.getClass().getName())
this.root.loggerContext.objectMap == orig(this.root.loggerContext.objectMap)
this.root.loggerContext.objectMap.getClass().getName() == orig(this.root.loggerContext.objectMap.getClass().getName())
this.root.loggerRemoteView.name == orig(this.root.loggerRemoteView.name)
this.root.loggerRemoteView.name.toString == orig(this.root.loggerRemoteView.name.toString)
ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled == orig(ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled)
this.size == orig(this.size)
this.noAppenderWarning == orig(this.noAppenderWarning)
this.contextListenerList == orig(this.contextListenerList)
this.contextListenerList[] == orig(this.contextListenerList[])
this.contextListenerList.getClass().getName() == orig(this.contextListenerList.getClass().getName())
this.loggerCache == orig(this.loggerCache)
this.loggerContextRemoteView.propertyMap.getClass().getName() == orig(this.loggerContextRemoteView.propertyMap.getClass().getName())
this.cfai == orig(this.cfai)
this.started == orig(this.started)
this.sm == orig(this.sm)
this.sm.getClass().getName() == orig(this.sm.getClass().getName())
this.propertyMap == orig(this.propertyMap)
this.propertyMap.getClass().getName() == orig(this.propertyMap.getClass().getName())
this.objectMap == orig(this.objectMap)
this.objectMap.getClass().getName() == orig(this.objectMap.getClass().getName())
name.toString == orig(name.toString)
this.root has only one value
ch.qos.logback.classic.Logger.instanceCount == 1
this.root.childrenList == null
this.root.aai == null
this.root.loggerContext.size == 1
this.root.loggerContext.loggerContextRemoteView has only one value
this.root.loggerContext.name has only one value
this.root.loggerRemoteView has only one value
this.root.loggerRemoteView.loggerContextView has only one value
this.size == 1
this.loggerContextRemoteView has only one value
this.loggerContextRemoteView.name has only one value
this.loggerContextRemoteView.propertyMap has only one value
this.name has only one value
name.toString == "default"
===========================================================================
ch.qos.logback.classic.LoggerContext.syncRemoteView():::ENTER
this.root has only one value
ch.qos.logback.classic.Logger.instanceCount == 1
this.root.childrenList == null
this.root.aai == null
this.root.loggerContext.size == 1
this.root.loggerContext.loggerContextRemoteView has only one value
this.root.loggerContext.name has only one value
this.root.loggerRemoteView has only one value
this.root.loggerRemoteView.loggerContextView has only one value
this.size == 1
this.loggerContextRemoteView has only one value
this.loggerContextRemoteView.name == null
this.loggerContextRemoteView.propertyMap has only one value
this.name has only one value
===========================================================================
ch.qos.logback.classic.LoggerContext.syncRemoteView():::EXIT
ch.qos.logback.classic.LoggerContext.ROOT_NAME == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME)
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString)
this.root == orig(this.root)
ch.qos.logback.classic.Logger.FQCN == orig(ch.qos.logback.classic.Logger.FQCN)
ch.qos.logback.classic.Logger.FQCN.toString == orig(ch.qos.logback.classic.Logger.FQCN.toString)
ch.qos.logback.classic.Logger.instanceCount == orig(ch.qos.logback.classic.Logger.instanceCount)
this.root.name == orig(this.root.name)
this.root.name.toString == orig(this.root.name.toString)
this.root.level == orig(this.root.level)
ch.qos.logback.classic.Level.OFF_INTEGER == orig(ch.qos.logback.classic.Level.OFF_INTEGER)
ch.qos.logback.classic.Level.ERROR_INTEGER == orig(ch.qos.logback.classic.Level.ERROR_INTEGER)
ch.qos.logback.classic.Level.WARN_INTEGER == orig(ch.qos.logback.classic.Level.WARN_INTEGER)
ch.qos.logback.classic.Level.INFO_INTEGER == orig(ch.qos.logback.classic.Level.INFO_INTEGER)
ch.qos.logback.classic.Level.DEBUG_INTEGER == orig(ch.qos.logback.classic.Level.DEBUG_INTEGER)
ch.qos.logback.classic.Level.TRACE_INTEGER == orig(ch.qos.logback.classic.Level.TRACE_INTEGER)
ch.qos.logback.classic.Level.ALL_INTEGER == orig(ch.qos.logback.classic.Level.ALL_INTEGER)
ch.qos.logback.classic.Level.OFF == orig(ch.qos.logback.classic.Level.OFF)
ch.qos.logback.classic.Level.ERROR == orig(ch.qos.logback.classic.Level.ERROR)
ch.qos.logback.classic.Level.WARN == orig(ch.qos.logback.classic.Level.WARN)
ch.qos.logback.classic.Level.INFO == orig(ch.qos.logback.classic.Level.INFO)
ch.qos.logback.classic.Level.DEBUG == orig(ch.qos.logback.classic.Level.DEBUG)
ch.qos.logback.classic.Level.TRACE == orig(ch.qos.logback.classic.Level.TRACE)
ch.qos.logback.classic.Level.ALL == orig(ch.qos.logback.classic.Level.ALL)
this.root.level.levelInt == orig(this.root.level.levelInt)
this.root.level.levelStr == orig(this.root.level.levelStr)
this.root.level.levelStr.toString == orig(this.root.level.levelStr.toString)
this.root.effectiveLevelInt == orig(this.root.effectiveLevelInt)
this.root.parent == orig(this.root.parent)
this.root.childrenList == orig(this.root.childrenList)
this.root.aai == orig(this.root.aai)
this.root.additive == orig(this.root.additive)
this.root.loggerContext == orig(this.root.loggerContext)
this.root.loggerContext.root == orig(this.root.loggerContext.root)
this.root.loggerContext.size == orig(this.root.loggerContext.size)
this.root.loggerContext.noAppenderWarning == orig(this.root.loggerContext.noAppenderWarning)
this.root.loggerContext.contextListenerList == orig(this.root.loggerContext.contextListenerList)
this.root.loggerContext.contextListenerList[] == orig(this.root.loggerContext.contextListenerList[])
this.root.loggerContext.contextListenerList.getClass().getName() == orig(this.root.loggerContext.contextListenerList.getClass().getName())
this.root.loggerContext.loggerCache == orig(this.root.loggerContext.loggerCache)
this.root.loggerContext.cfai == orig(this.root.loggerContext.cfai)
this.root.loggerContext.started == orig(this.root.loggerContext.started)
this.root.loggerContext.name == orig(this.root.loggerContext.name)
this.root.loggerContext.name.toString == orig(this.root.loggerContext.name.toString)
this.root.loggerContext.sm == orig(this.root.loggerContext.sm)
this.root.loggerContext.sm.getClass().getName() == orig(this.root.loggerContext.sm.getClass().getName())
this.root.loggerContext.propertyMap == orig(this.root.loggerContext.propertyMap)
this.root.loggerContext.propertyMap.getClass().getName() == orig(this.root.loggerContext.propertyMap.getClass().getName())
this.root.loggerContext.objectMap == orig(this.root.loggerContext.objectMap)
this.root.loggerContext.objectMap.getClass().getName() == orig(this.root.loggerContext.objectMap.getClass().getName())
this.root.loggerRemoteView.name == orig(this.root.loggerRemoteView.name)
this.root.loggerRemoteView.name.toString == orig(this.root.loggerRemoteView.name.toString)
ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled == orig(ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled)
this.size == orig(this.size)
this.noAppenderWarning == orig(this.noAppenderWarning)
this.contextListenerList == orig(this.contextListenerList)
this.contextListenerList[] == orig(this.contextListenerList[])
this.contextListenerList.getClass().getName() == orig(this.contextListenerList.getClass().getName())
this.loggerCache == orig(this.loggerCache)
this.loggerContextRemoteView.propertyMap.getClass().getName() == orig(this.loggerContextRemoteView.propertyMap.getClass().getName())
this.cfai == orig(this.cfai)
this.started == orig(this.started)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.sm == orig(this.sm)
this.sm.getClass().getName() == orig(this.sm.getClass().getName())
this.propertyMap == orig(this.propertyMap)
this.propertyMap.getClass().getName() == orig(this.propertyMap.getClass().getName())
this.objectMap == orig(this.objectMap)
this.objectMap.getClass().getName() == orig(this.objectMap.getClass().getName())
this.root has only one value
ch.qos.logback.classic.Logger.instanceCount == 1
this.root.childrenList == null
this.root.aai == null
this.root.loggerContext.size == 1
this.root.loggerContext.loggerContextRemoteView has only one value
this.root.loggerContext.name has only one value
this.root.loggerRemoteView has only one value
this.root.loggerRemoteView.loggerContextView has only one value
this.size == 1
this.loggerContextRemoteView has only one value
this.loggerContextRemoteView.name has only one value
this.loggerContextRemoteView.propertyMap has only one value
this.name has only one value
===========================================================================
ch.qos.logback.classic.PatternLayout:::CLASS
ch.qos.logback.classic.PatternLayout.defaultConverterMap has only one value
ch.qos.logback.classic.PatternLayout.defaultConverterMap.getClass().getName() == java.util.HashMap.class
===========================================================================
ch.qos.logback.classic.PatternLayout:::OBJECT
this has only one value
this.head.getClass().getName() == ch.qos.logback.classic.pattern.DateConverter.class
this.head.next has only one value
this.head.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
this.head.next.next has only one value
this.head.next.next.getClass().getName() == ch.qos.logback.classic.pattern.ThreadConverter.class
this.pattern.toString == "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
this.instanceConverterMap has only one value
this.instanceConverterMap.getClass().getName() == java.util.HashMap.class
this.started == false
this.fileHeader == null
this.fileFooter == null
this.presentationHeader == null
this.presentationFooter == null
this.noContextWarning == 0
this.context.getClass().getName() == ch.qos.logback.classic.LoggerContext.class
===========================================================================
ch.qos.logback.classic.PatternLayout.PatternLayout():::EXIT
this.head == null
this.pattern == null
this.context == null
===========================================================================
ch.qos.logback.classic.PatternLayout.chainHandlesThrowable(ch.qos.logback.core.pattern.Converter):::ENTER
head has only one value
head.getClass().getName() == ch.qos.logback.classic.pattern.DateConverter.class
head.next has only one value
head.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
head.next.next has only one value
head.next.next.getClass().getName() == ch.qos.logback.classic.pattern.ThreadConverter.class
===========================================================================
ch.qos.logback.classic.PatternLayout.chainHandlesThrowable(ch.qos.logback.core.pattern.Converter):::EXIT160
===========================================================================
ch.qos.logback.classic.PatternLayout.chainHandlesThrowable(ch.qos.logback.core.pattern.Converter):::EXIT160;condition="not(return == true)"
===========================================================================
ch.qos.logback.classic.PatternLayout.chainHandlesThrowable(ch.qos.logback.core.pattern.Converter):::EXIT
ch.qos.logback.classic.PatternLayout.defaultConverterMap == orig(ch.qos.logback.classic.PatternLayout.defaultConverterMap)
ch.qos.logback.classic.PatternLayout.defaultConverterMap.getClass().getName() == orig(ch.qos.logback.classic.PatternLayout.defaultConverterMap.getClass().getName())
head.next == orig(head.next)
head.next.getClass().getName() == orig(head.next.getClass().getName())
head.next.next == orig(head.next.next)
head.next.next.getClass().getName() == orig(head.next.next.getClass().getName())
head.next has only one value
head.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
head.next.next has only one value
head.next.next.getClass().getName() == ch.qos.logback.classic.pattern.ThreadConverter.class
return == false
===========================================================================
ch.qos.logback.classic.PatternLayout.chainHandlesThrowable(ch.qos.logback.core.pattern.Converter):::EXIT;condition="not(return == true)"
===========================================================================
ch.qos.logback.classic.PatternLayout.getDefaultConverterMap():::ENTER
this.head == null
this.pattern has only one value
this.context has only one value
===========================================================================
ch.qos.logback.classic.PatternLayout.getDefaultConverterMap():::EXIT
ch.qos.logback.classic.PatternLayout.defaultConverterMap == orig(ch.qos.logback.classic.PatternLayout.defaultConverterMap)
ch.qos.logback.classic.PatternLayout.defaultConverterMap.getClass().getName() == orig(ch.qos.logback.classic.PatternLayout.defaultConverterMap.getClass().getName())
this.head == orig(this.head)
this.pattern == orig(this.pattern)
this.pattern.toString == orig(this.pattern.toString)
this.instanceConverterMap == orig(this.instanceConverterMap)
this.instanceConverterMap.getClass().getName() == orig(this.instanceConverterMap.getClass().getName())
this.started == orig(this.started)
this.fileHeader == orig(this.fileHeader)
this.fileFooter == orig(this.fileFooter)
this.presentationHeader == orig(this.presentationHeader)
this.presentationFooter == orig(this.presentationFooter)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.head == null
this.pattern has only one value
this.context has only one value
return has only one value
return.getClass().getName() == java.util.HashMap.class
===========================================================================
ch.qos.logback.classic.PatternLayout.postCompileProcessing(ch.qos.logback.core.pattern.Converter):::ENTER
this.head has only one value
this.pattern has only one value
this.context has only one value
head has only one value
head.getClass().getName() == ch.qos.logback.classic.pattern.DateConverter.class
head.next has only one value
head.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
head.next.next has only one value
head.next.next.getClass().getName() == ch.qos.logback.classic.pattern.ThreadConverter.class
===========================================================================
ch.qos.logback.classic.PatternLayout.postCompileProcessing(ch.qos.logback.core.pattern.Converter):::EXIT
ch.qos.logback.classic.PatternLayout.defaultConverterMap == orig(ch.qos.logback.classic.PatternLayout.defaultConverterMap)
ch.qos.logback.classic.PatternLayout.defaultConverterMap.getClass().getName() == orig(ch.qos.logback.classic.PatternLayout.defaultConverterMap.getClass().getName())
this.head == orig(this.head)
this.head.getClass().getName() == orig(this.head.getClass().getName())
this.head.next == orig(this.head.next)
this.head.next.getClass().getName() == orig(this.head.next.getClass().getName())
this.head.next.next == orig(this.head.next.next)
this.head.next.next.getClass().getName() == orig(this.head.next.next.getClass().getName())
this.pattern == orig(this.pattern)
this.pattern.toString == orig(this.pattern.toString)
this.instanceConverterMap == orig(this.instanceConverterMap)
this.instanceConverterMap.getClass().getName() == orig(this.instanceConverterMap.getClass().getName())
this.started == orig(this.started)
this.fileHeader == orig(this.fileHeader)
this.fileFooter == orig(this.fileFooter)
this.presentationHeader == orig(this.presentationHeader)
this.presentationFooter == orig(this.presentationFooter)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
head.next == orig(head.next)
head.next.getClass().getName() == orig(head.next.getClass().getName())
head.next.next == orig(head.next.next)
head.next.next.getClass().getName() == orig(head.next.next.getClass().getName())
this.head has only one value
this.pattern has only one value
this.context has only one value
head.next has only one value
head.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
head.next.next has only one value
head.next.next.getClass().getName() == ch.qos.logback.classic.pattern.ThreadConverter.class
===========================================================================
ch.qos.logback.classic.pattern.ClassNameAbbreviator:::CLASS
===========================================================================
ch.qos.logback.classic.pattern.ClassNameAbbreviator:::OBJECT
this has only one value
this.targetLength == 36
this.buf has only one value
===========================================================================
ch.qos.logback.classic.pattern.ClassNameAbbreviator.ClassNameAbbreviator(int):::ENTER
targetLength == 36
===========================================================================
ch.qos.logback.classic.pattern.ClassNameAbbreviator.ClassNameAbbreviator(int):::EXIT
===========================================================================
ch.qos.logback.classic.pattern.ClassicConverter:::CLASS
ch.qos.logback.core.pattern.FormattingConverter.SPACES has only one value
ch.qos.logback.core.pattern.FormattingConverter.SPACES != null
ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName() == java.lang.String[].class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] contains no nulls and has only one value, of length 6
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] elements != null
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() elements == java.lang.String.class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].toString == [ ,   ,     ,         ,                 ,                                 ]
size(ch.qos.logback.core.pattern.FormattingConverter.SPACES[]) == 6
===========================================================================
ch.qos.logback.classic.pattern.ClassicConverter:::OBJECT
this.lcab != null
this.lcab.noContextWarning == 0
this.lcab.context.getClass().getName() == ch.qos.logback.classic.LoggerContext.class
this.optionList[].getClass().getName() == [java.lang.String]
this.optionList[].getClass().getName() elements == java.lang.String.class
this.optionList.getClass().getName() == java.util.ArrayList.class
this.started == false
this.formattingInfo.min == 5
this.formattingInfo.max == 2147483647
this.formattingInfo.leftPad == false
this.formattingInfo.leftTruncate == true
size(this.optionList[]) == 1
===========================================================================
ch.qos.logback.classic.pattern.ClassicConverter.ClassicConverter():::EXIT
this.lcab.context == null
this.optionList == null
this.formattingInfo == null
this.next == null
===========================================================================
ch.qos.logback.classic.pattern.ClassicConverter.setContext(ch.qos.logback.core.Context):::ENTER
this.lcab.context == null
context has only one value
context.getClass().getName() == ch.qos.logback.classic.LoggerContext.class
===========================================================================
ch.qos.logback.classic.pattern.ClassicConverter.setContext(ch.qos.logback.core.Context):::EXIT
this.lcab == orig(this.lcab)
this.lcab.noContextWarning == orig(this.lcab.noContextWarning)
this.optionList == orig(this.optionList)
this.optionList[] == orig(this.optionList[])
this.optionList.getClass().getName() == orig(this.optionList.getClass().getName())
this.started == orig(this.started)
this.formattingInfo == orig(this.formattingInfo)
this.formattingInfo.min == orig(this.formattingInfo.min)
this.formattingInfo.max == orig(this.formattingInfo.max)
this.formattingInfo.leftPad == orig(this.formattingInfo.leftPad)
this.formattingInfo.leftTruncate == orig(this.formattingInfo.leftTruncate)
ch.qos.logback.core.pattern.FormattingConverter.SPACES == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES)
ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName() == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName())
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES[])
this.next == orig(this.next)
this.next.getClass().getName() == orig(this.next.getClass().getName())
this.next.next == orig(this.next.next)
this.next.next.getClass().getName() == orig(this.next.next.getClass().getName())
this.next.next.next == orig(this.next.next.next)
this.next.next.next.getClass().getName() == orig(this.next.next.next.getClass().getName())
this.lcab.context has only one value
===========================================================================
ch.qos.logback.classic.pattern.DateConverter:::CLASS
ch.qos.logback.core.pattern.FormattingConverter.SPACES has only one value
ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName() == java.lang.String[].class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] contains no nulls and has only one value, of length 6
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() elements == java.lang.String.class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].toString == [ ,   ,     ,         ,                 ,                                 ]
size(ch.qos.logback.core.pattern.FormattingConverter.SPACES[]) == 6
===========================================================================
ch.qos.logback.classic.pattern.DateConverter:::OBJECT
this has only one value
this.lastTimestamp == -1
this.timesmapStr == null
this.lcab has only one value
this.lcab.noContextWarning == 0
this.lcab.context.getClass().getName() == ch.qos.logback.classic.LoggerContext.class
this.optionList[] contains no nulls and has only one value, of length 1
this.optionList[] elements has only one value
this.optionList[].getClass().getName() == [java.lang.String]
this.optionList[].getClass().getName() elements == java.lang.String.class
this.optionList.getClass().getName() == java.util.ArrayList.class
this.started == false
this.formattingInfo == null
this.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
this.next.next has only one value
this.next.next.getClass().getName() == ch.qos.logback.classic.pattern.ThreadConverter.class
this.next.next.next has only one value
this.next.next.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
size(this.optionList[]) == 1
===========================================================================
ch.qos.logback.classic.pattern.DateConverter.DateConverter():::EXIT
this.simpleFormat == null
this.lcab.context == null
this.optionList == null
this.next == null
===========================================================================
ch.qos.logback.classic.pattern.DateConverter.start():::ENTER
this.simpleFormat == null
this.lcab.context has only one value
this.optionList has only one value
this.next has only one value
===========================================================================
ch.qos.logback.classic.pattern.DateConverter.start():::EXIT
this.lastTimestamp == orig(this.lastTimestamp)
this.timesmapStr == orig(this.timesmapStr)
this.lcab == orig(this.lcab)
this.lcab.noContextWarning == orig(this.lcab.noContextWarning)
this.lcab.context == orig(this.lcab.context)
this.lcab.context.getClass().getName() == orig(this.lcab.context.getClass().getName())
this.optionList == orig(this.optionList)
this.optionList[] == orig(this.optionList[])
this.optionList.getClass().getName() == orig(this.optionList.getClass().getName())
this.started == orig(this.started)
this.formattingInfo == orig(this.formattingInfo)
ch.qos.logback.core.pattern.FormattingConverter.SPACES == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES)
ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName() == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName())
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES[])
this.next == orig(this.next)
this.next.getClass().getName() == orig(this.next.getClass().getName())
this.next.next == orig(this.next.next)
this.next.next.getClass().getName() == orig(this.next.next.getClass().getName())
this.next.next.next == orig(this.next.next.next)
this.next.next.next.getClass().getName() == orig(this.next.next.next.getClass().getName())
this.simpleFormat has only one value
this.lcab.context has only one value
this.optionList has only one value
this.next has only one value
===========================================================================
ch.qos.logback.classic.pattern.LevelConverter:::CLASS
ch.qos.logback.core.pattern.FormattingConverter.SPACES has only one value
ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName() == java.lang.String[].class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] contains no nulls and has only one value, of length 6
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() elements == java.lang.String.class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].toString == [ ,   ,     ,         ,                 ,                                 ]
size(ch.qos.logback.core.pattern.FormattingConverter.SPACES[]) == 6
===========================================================================
ch.qos.logback.classic.pattern.LevelConverter:::OBJECT
this has only one value
this.lcab has only one value
this.lcab.noContextWarning == 0
this.lcab.context == null
this.optionList == null
this.started == false
this.formattingInfo == null
this.next == null
===========================================================================
ch.qos.logback.classic.pattern.LevelConverter.LevelConverter():::EXIT
===========================================================================
ch.qos.logback.classic.pattern.LineSeparatorConverter:::CLASS
ch.qos.logback.core.pattern.FormattingConverter.SPACES has only one value
ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName() == java.lang.String[].class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] contains no nulls and has only one value, of length 6
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() elements == java.lang.String.class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].toString == [ ,   ,     ,         ,                 ,                                 ]
size(ch.qos.logback.core.pattern.FormattingConverter.SPACES[]) == 6
===========================================================================
ch.qos.logback.classic.pattern.LineSeparatorConverter:::OBJECT
this has only one value
this.lcab has only one value
this.lcab.noContextWarning == 0
this.lcab.context == null
this.optionList == null
this.started == false
this.formattingInfo == null
this.next == null
===========================================================================
ch.qos.logback.classic.pattern.LineSeparatorConverter.LineSeparatorConverter():::EXIT
===========================================================================
ch.qos.logback.classic.pattern.LoggerConverter:::CLASS
ch.qos.logback.core.pattern.FormattingConverter.SPACES has only one value
ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName() == java.lang.String[].class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] contains no nulls and has only one value, of length 6
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() elements == java.lang.String.class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].toString == [ ,   ,     ,         ,                 ,                                 ]
size(ch.qos.logback.core.pattern.FormattingConverter.SPACES[]) == 6
===========================================================================
ch.qos.logback.classic.pattern.LoggerConverter:::OBJECT
this has only one value
this.abbreviator == null
this.lcab has only one value
this.lcab.noContextWarning == 0
this.lcab.context == null
this.optionList == null
this.started == false
this.formattingInfo == null
this.next == null
===========================================================================
ch.qos.logback.classic.pattern.LoggerConverter.LoggerConverter():::EXIT
===========================================================================
ch.qos.logback.classic.pattern.MessageConverter:::CLASS
ch.qos.logback.core.pattern.FormattingConverter.SPACES has only one value
ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName() == java.lang.String[].class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] contains no nulls and has only one value, of length 6
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() elements == java.lang.String.class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].toString == [ ,   ,     ,         ,                 ,                                 ]
size(ch.qos.logback.core.pattern.FormattingConverter.SPACES[]) == 6
===========================================================================
ch.qos.logback.classic.pattern.MessageConverter:::OBJECT
this has only one value
this.lcab has only one value
this.lcab.noContextWarning == 0
this.lcab.context == null
this.optionList == null
this.started == false
this.formattingInfo == null
this.next == null
===========================================================================
ch.qos.logback.classic.pattern.MessageConverter.MessageConverter():::EXIT
===========================================================================
ch.qos.logback.classic.pattern.NamedConverter:::CLASS
ch.qos.logback.core.pattern.FormattingConverter.SPACES has only one value
ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName() == java.lang.String[].class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] contains no nulls and has only one value, of length 6
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() elements == java.lang.String.class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].toString == [ ,   ,     ,         ,                 ,                                 ]
size(ch.qos.logback.core.pattern.FormattingConverter.SPACES[]) == 6
===========================================================================
ch.qos.logback.classic.pattern.NamedConverter:::OBJECT
this has only one value
this.getClass().getName() == ch.qos.logback.classic.pattern.LoggerConverter.class
this.abbreviator.getClass().getName() == ch.qos.logback.classic.pattern.ClassNameAbbreviator.class
this.lcab has only one value
this.lcab.noContextWarning == 0
this.lcab.context.getClass().getName() == ch.qos.logback.classic.LoggerContext.class
this.optionList[] contains no nulls and has only one value, of length 1
this.optionList[] elements has only one value
this.optionList[].getClass().getName() == [java.lang.String]
this.optionList[].getClass().getName() elements == java.lang.String.class
this.optionList.getClass().getName() == java.util.ArrayList.class
this.started == false
this.formattingInfo == null
this.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
this.next.next has only one value
this.next.next.getClass().getName() == ch.qos.logback.classic.pattern.MessageConverter.class
this.next.next.next has only one value
this.next.next.next.getClass().getName() == ch.qos.logback.classic.pattern.LineSeparatorConverter.class
size(this.optionList[]) == 1
===========================================================================
ch.qos.logback.classic.pattern.NamedConverter.NamedConverter():::EXIT
this.abbreviator == null
this.lcab.context == null
this.optionList == null
this.next == null
===========================================================================
ch.qos.logback.classic.pattern.NamedConverter.start():::ENTER
this.abbreviator == null
this.lcab.context has only one value
this.optionList has only one value
this.next has only one value
===========================================================================
ch.qos.logback.classic.pattern.NamedConverter.start():::EXIT
this.lcab == orig(this.lcab)
this.lcab.noContextWarning == orig(this.lcab.noContextWarning)
this.lcab.context == orig(this.lcab.context)
this.lcab.context.getClass().getName() == orig(this.lcab.context.getClass().getName())
this.optionList == orig(this.optionList)
this.optionList[] == orig(this.optionList[])
this.optionList.getClass().getName() == orig(this.optionList.getClass().getName())
this.started == orig(this.started)
this.formattingInfo == orig(this.formattingInfo)
ch.qos.logback.core.pattern.FormattingConverter.SPACES == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES)
ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName() == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName())
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES[])
this.next == orig(this.next)
this.next.getClass().getName() == orig(this.next.getClass().getName())
this.next.next == orig(this.next.next)
this.next.next.getClass().getName() == orig(this.next.next.getClass().getName())
this.next.next.next == orig(this.next.next.next)
this.next.next.next.getClass().getName() == orig(this.next.next.next.getClass().getName())
this.abbreviator has only one value
this.lcab.context has only one value
this.optionList has only one value
this.next has only one value
===========================================================================
ch.qos.logback.classic.pattern.ThreadConverter:::CLASS
ch.qos.logback.core.pattern.FormattingConverter.SPACES has only one value
ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName() == java.lang.String[].class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] contains no nulls and has only one value, of length 6
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() elements == java.lang.String.class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].toString == [ ,   ,     ,         ,                 ,                                 ]
size(ch.qos.logback.core.pattern.FormattingConverter.SPACES[]) == 6
===========================================================================
ch.qos.logback.classic.pattern.ThreadConverter:::OBJECT
this has only one value
this.lcab has only one value
this.lcab.noContextWarning == 0
this.lcab.context == null
this.optionList == null
this.started == false
this.formattingInfo == null
this.next == null
===========================================================================
ch.qos.logback.classic.pattern.ThreadConverter.ThreadConverter():::EXIT
===========================================================================
ch.qos.logback.classic.pattern.ThrowableHandlingConverter:::CLASS
ch.qos.logback.core.pattern.FormattingConverter.SPACES has only one value
ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName() == java.lang.String[].class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] contains no nulls and has only one value, of length 6
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() elements == java.lang.String.class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].toString == [ ,   ,     ,         ,                 ,                                 ]
size(ch.qos.logback.core.pattern.FormattingConverter.SPACES[]) == 6
===========================================================================
ch.qos.logback.classic.pattern.ThrowableHandlingConverter:::OBJECT
this has only one value
this.getClass().getName() == ch.qos.logback.classic.pattern.ThrowableInformationConverter.class
this.lcab has only one value
this.lcab.noContextWarning == 0
this.lcab.context == null
this.optionList == null
this.started == false
this.formattingInfo == null
this.next == null
===========================================================================
ch.qos.logback.classic.pattern.ThrowableHandlingConverter.ThrowableHandlingConverter():::EXIT
===========================================================================
ch.qos.logback.classic.pattern.ThrowableInformationConverter:::CLASS
ch.qos.logback.core.pattern.FormattingConverter.SPACES has only one value
ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName() == java.lang.String[].class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] contains no nulls and has only one value, of length 6
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() elements == java.lang.String.class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].toString == [ ,   ,     ,         ,                 ,                                 ]
size(ch.qos.logback.core.pattern.FormattingConverter.SPACES[]) == 6
===========================================================================
ch.qos.logback.classic.pattern.ThrowableInformationConverter:::OBJECT
this has only one value
this.lengthOption one of { 0, 2147483647 }
this.evaluatorList == null
this.MAX_ERROR_COUNT == 4
this.errorCount == 0
this.lcab has only one value
this.lcab.noContextWarning == 0
this.lcab.context.getClass().getName() == ch.qos.logback.classic.LoggerContext.class
this.optionList == null
this.formattingInfo == null
this.next == null
===========================================================================
ch.qos.logback.classic.pattern.ThrowableInformationConverter.ThrowableInformationConverter():::EXIT
this.lengthOption == 0
this.lcab.context == null
this.started == false
===========================================================================
ch.qos.logback.classic.pattern.ThrowableInformationConverter.start():::ENTER
this.lengthOption == 0
this.lcab.context has only one value
this.started == false
===========================================================================
ch.qos.logback.classic.pattern.ThrowableInformationConverter.start():::EXIT
this.evaluatorList == orig(this.evaluatorList)
this.MAX_ERROR_COUNT == orig(this.MAX_ERROR_COUNT)
this.errorCount == orig(this.errorCount)
this.lcab == orig(this.lcab)
this.lcab.noContextWarning == orig(this.lcab.noContextWarning)
this.lcab.context == orig(this.lcab.context)
this.lcab.context.getClass().getName() == orig(this.lcab.context.getClass().getName())
this.optionList == orig(this.optionList)
this.formattingInfo == orig(this.formattingInfo)
ch.qos.logback.core.pattern.FormattingConverter.SPACES == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES)
ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName() == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName())
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES[])
this.next == orig(this.next)
this.lengthOption == 2147483647
this.lcab.context has only one value
this.started == true
===========================================================================
ch.qos.logback.classic.selector.DefaultContextSelector:::OBJECT
this has only one value
this.context has only one value
ch.qos.logback.classic.LoggerContext.ROOT_NAME has only one value
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == "root"
this.context.root has only one value
ch.qos.logback.classic.Logger.FQCN has only one value
ch.qos.logback.classic.Logger.FQCN.toString == "ch.qos.logback.classic.Logger"
ch.qos.logback.classic.Logger.instanceCount == 1
this.context.root.name has only one value
this.context.root.name.toString == "root"
this.context.root.level has only one value
this.context.root.effectiveLevelInt == 10000
this.context.root.parent == null
this.context.root.childrenList == null
this.context.root.aai has only one value
this.context.root.additive == true
this.context.root.loggerContext has only one value
this.context.root.loggerRemoteView has only one value
this.context.size == 1
this.context.noAppenderWarning == 0
this.context.contextListenerList has only one value
this.context.contextListenerList[] == []
this.context.contextListenerList[].getClass().getName() == []
this.context.contextListenerList.getClass().getName() == java.util.ArrayList.class
this.context.loggerCache has only one value
this.context.loggerContextRemoteView has only one value
this.context.loggerContextRemoteView.name has only one value
this.context.loggerContextRemoteView.name.toString == "default"
this.context.loggerContextRemoteView.propertyMap has only one value
this.context.loggerContextRemoteView.propertyMap.getClass().getName() == java.util.HashMap.class
this.context.cfai == null
this.context.started == false
this.context.name has only one value
this.context.name.toString == "default"
this.context.sm has only one value
this.context.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
this.context.propertyMap has only one value
this.context.propertyMap.getClass().getName() == java.util.HashMap.class
this.context.objectMap has only one value
this.context.objectMap.getClass().getName() == java.util.HashMap.class
===========================================================================
ch.qos.logback.classic.selector.DefaultContextSelector.DefaultContextSelector(ch.qos.logback.classic.LoggerContext):::ENTER
context has only one value
ch.qos.logback.classic.LoggerContext.ROOT_NAME has only one value
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == "root"
context.root has only one value
ch.qos.logback.classic.Logger.FQCN has only one value
ch.qos.logback.classic.Logger.FQCN.toString == "ch.qos.logback.classic.Logger"
ch.qos.logback.classic.Logger.instanceCount == 1
context.root.name has only one value
context.root.name.toString == "root"
context.root.level has only one value
context.root.effectiveLevelInt == 10000
context.root.parent == null
context.root.childrenList == null
context.root.aai has only one value
context.root.additive == true
context.root.loggerContext has only one value
context.root.loggerRemoteView has only one value
context.size == 1
context.noAppenderWarning == 0
context.contextListenerList has only one value
context.contextListenerList[] == []
context.contextListenerList[].getClass().getName() == []
context.contextListenerList.getClass().getName() == java.util.ArrayList.class
context.loggerCache has only one value
context.loggerContextRemoteView has only one value
context.loggerContextRemoteView.name has only one value
context.loggerContextRemoteView.name.toString == "default"
context.loggerContextRemoteView.propertyMap has only one value
context.loggerContextRemoteView.propertyMap.getClass().getName() == java.util.HashMap.class
context.cfai == null
context.started == false
context.name has only one value
context.name.toString == "default"
context.sm has only one value
context.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
context.propertyMap has only one value
context.propertyMap.getClass().getName() == java.util.HashMap.class
context.objectMap has only one value
context.objectMap.getClass().getName() == java.util.HashMap.class
===========================================================================
ch.qos.logback.classic.selector.DefaultContextSelector.DefaultContextSelector(ch.qos.logback.classic.LoggerContext):::EXIT
ch.qos.logback.classic.LoggerContext.ROOT_NAME == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME)
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString)
ch.qos.logback.classic.Logger.FQCN == orig(ch.qos.logback.classic.Logger.FQCN)
ch.qos.logback.classic.Logger.FQCN.toString == orig(ch.qos.logback.classic.Logger.FQCN.toString)
ch.qos.logback.classic.Logger.instanceCount == orig(ch.qos.logback.classic.Logger.instanceCount)
context.root == orig(context.root)
context.root.name == orig(context.root.name)
context.root.name.toString == orig(context.root.name.toString)
context.root.level == orig(context.root.level)
context.root.effectiveLevelInt == orig(context.root.effectiveLevelInt)
context.root.parent == orig(context.root.parent)
context.root.childrenList == orig(context.root.childrenList)
context.root.aai == orig(context.root.aai)
context.root.additive == orig(context.root.additive)
context.root.loggerContext == orig(context.root.loggerContext)
context.root.loggerRemoteView == orig(context.root.loggerRemoteView)
context.size == orig(context.size)
context.noAppenderWarning == orig(context.noAppenderWarning)
context.contextListenerList == orig(context.contextListenerList)
context.contextListenerList[] == orig(context.contextListenerList[])
context.contextListenerList.getClass().getName() == orig(context.contextListenerList.getClass().getName())
context.loggerCache == orig(context.loggerCache)
context.loggerContextRemoteView == orig(context.loggerContextRemoteView)
context.loggerContextRemoteView.name == orig(context.loggerContextRemoteView.name)
context.loggerContextRemoteView.name.toString == orig(context.loggerContextRemoteView.name.toString)
context.loggerContextRemoteView.propertyMap == orig(context.loggerContextRemoteView.propertyMap)
context.loggerContextRemoteView.propertyMap.getClass().getName() == orig(context.loggerContextRemoteView.propertyMap.getClass().getName())
context.cfai == orig(context.cfai)
context.started == orig(context.started)
context.name == orig(context.name)
context.name.toString == orig(context.name.toString)
context.sm == orig(context.sm)
context.sm.getClass().getName() == orig(context.sm.getClass().getName())
context.propertyMap == orig(context.propertyMap)
context.propertyMap.getClass().getName() == orig(context.propertyMap.getClass().getName())
context.objectMap == orig(context.objectMap)
context.objectMap.getClass().getName() == orig(context.objectMap.getClass().getName())
context.root has only one value
context.root.name has only one value
context.root.name.toString == "root"
context.root.level has only one value
context.root.effectiveLevelInt == 10000
context.root.parent == null
context.root.childrenList == null
context.root.aai has only one value
context.root.additive == true
context.root.loggerContext has only one value
context.root.loggerRemoteView has only one value
context.size == 1
context.noAppenderWarning == 0
context.contextListenerList has only one value
context.contextListenerList[] == []
context.contextListenerList[].getClass().getName() == []
context.contextListenerList.getClass().getName() == java.util.ArrayList.class
context.loggerCache has only one value
context.loggerContextRemoteView has only one value
context.loggerContextRemoteView.name has only one value
context.loggerContextRemoteView.name.toString == "default"
context.loggerContextRemoteView.propertyMap has only one value
context.loggerContextRemoteView.propertyMap.getClass().getName() == java.util.HashMap.class
context.cfai == null
context.started == false
context.name has only one value
context.name.toString == "default"
context.sm has only one value
context.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
context.propertyMap has only one value
context.propertyMap.getClass().getName() == java.util.HashMap.class
context.objectMap has only one value
context.objectMap.getClass().getName() == java.util.HashMap.class
===========================================================================
ch.qos.logback.classic.selector.DefaultContextSelector.getDefaultLoggerContext():::ENTER
===========================================================================
ch.qos.logback.classic.selector.DefaultContextSelector.getDefaultLoggerContext():::EXIT
this.context == orig(this.context)
ch.qos.logback.classic.LoggerContext.ROOT_NAME == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME)
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString)
this.context.root == orig(this.context.root)
ch.qos.logback.classic.Logger.FQCN == orig(ch.qos.logback.classic.Logger.FQCN)
ch.qos.logback.classic.Logger.FQCN.toString == orig(ch.qos.logback.classic.Logger.FQCN.toString)
ch.qos.logback.classic.Logger.instanceCount == orig(ch.qos.logback.classic.Logger.instanceCount)
this.context.root.name == orig(this.context.root.name)
this.context.root.name.toString == orig(this.context.root.name.toString)
this.context.root.level == orig(this.context.root.level)
this.context.root.effectiveLevelInt == orig(this.context.root.effectiveLevelInt)
this.context.root.parent == orig(this.context.root.parent)
this.context.root.childrenList == orig(this.context.root.childrenList)
this.context.root.aai == orig(this.context.root.aai)
this.context.root.additive == orig(this.context.root.additive)
this.context.root.loggerContext == orig(this.context.root.loggerContext)
this.context.root.loggerRemoteView == orig(this.context.root.loggerRemoteView)
this.context.size == orig(this.context.size)
this.context.noAppenderWarning == orig(this.context.noAppenderWarning)
this.context.contextListenerList == orig(this.context.contextListenerList)
this.context.contextListenerList[] == orig(this.context.contextListenerList[])
this.context.contextListenerList.getClass().getName() == orig(this.context.contextListenerList.getClass().getName())
this.context.loggerCache == orig(this.context.loggerCache)
this.context.loggerContextRemoteView == orig(this.context.loggerContextRemoteView)
this.context.loggerContextRemoteView.name == orig(this.context.loggerContextRemoteView.name)
this.context.loggerContextRemoteView.name.toString == orig(this.context.loggerContextRemoteView.name.toString)
this.context.loggerContextRemoteView.propertyMap == orig(this.context.loggerContextRemoteView.propertyMap)
this.context.loggerContextRemoteView.propertyMap.getClass().getName() == orig(this.context.loggerContextRemoteView.propertyMap.getClass().getName())
this.context.cfai == orig(this.context.cfai)
this.context.started == orig(this.context.started)
this.context.name == orig(this.context.name)
this.context.name.toString == orig(this.context.name.toString)
this.context.sm == orig(this.context.sm)
this.context.sm.getClass().getName() == orig(this.context.sm.getClass().getName())
this.context.propertyMap == orig(this.context.propertyMap)
this.context.propertyMap.getClass().getName() == orig(this.context.propertyMap.getClass().getName())
this.context.objectMap == orig(this.context.objectMap)
this.context.objectMap.getClass().getName() == orig(this.context.objectMap.getClass().getName())
return has only one value
return.root has only one value
return.root.name has only one value
return.root.name.toString == "root"
return.root.level has only one value
return.root.effectiveLevelInt == 10000
return.root.parent == null
return.root.childrenList == null
return.root.aai has only one value
return.root.additive == true
return.root.loggerContext has only one value
return.root.loggerRemoteView has only one value
return.size == 1
return.noAppenderWarning == 0
return.contextListenerList has only one value
return.contextListenerList[] == []
return.contextListenerList[].getClass().getName() == []
return.contextListenerList.getClass().getName() == java.util.ArrayList.class
return.loggerCache has only one value
return.loggerContextRemoteView has only one value
return.loggerContextRemoteView.name has only one value
return.loggerContextRemoteView.name.toString == "default"
return.loggerContextRemoteView.propertyMap has only one value
return.loggerContextRemoteView.propertyMap.getClass().getName() == java.util.HashMap.class
return.cfai == null
return.started == false
return.name has only one value
return.name.toString == "default"
return.sm has only one value
return.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
return.propertyMap has only one value
return.propertyMap.getClass().getName() == java.util.HashMap.class
return.objectMap has only one value
return.objectMap.getClass().getName() == java.util.HashMap.class
===========================================================================
ch.qos.logback.classic.selector.DefaultContextSelector.getLoggerContext():::ENTER
===========================================================================
ch.qos.logback.classic.selector.DefaultContextSelector.getLoggerContext():::EXIT
this.context == orig(this.context)
ch.qos.logback.classic.LoggerContext.ROOT_NAME == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME)
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString)
this.context.root == orig(this.context.root)
ch.qos.logback.classic.Logger.FQCN == orig(ch.qos.logback.classic.Logger.FQCN)
ch.qos.logback.classic.Logger.FQCN.toString == orig(ch.qos.logback.classic.Logger.FQCN.toString)
ch.qos.logback.classic.Logger.instanceCount == orig(ch.qos.logback.classic.Logger.instanceCount)
this.context.root.name == orig(this.context.root.name)
this.context.root.name.toString == orig(this.context.root.name.toString)
this.context.root.level == orig(this.context.root.level)
this.context.root.effectiveLevelInt == orig(this.context.root.effectiveLevelInt)
this.context.root.parent == orig(this.context.root.parent)
this.context.root.childrenList == orig(this.context.root.childrenList)
this.context.root.aai == orig(this.context.root.aai)
this.context.root.additive == orig(this.context.root.additive)
this.context.root.loggerContext == orig(this.context.root.loggerContext)
this.context.root.loggerRemoteView == orig(this.context.root.loggerRemoteView)
this.context.size == orig(this.context.size)
this.context.noAppenderWarning == orig(this.context.noAppenderWarning)
this.context.contextListenerList == orig(this.context.contextListenerList)
this.context.contextListenerList[] == orig(this.context.contextListenerList[])
this.context.contextListenerList.getClass().getName() == orig(this.context.contextListenerList.getClass().getName())
this.context.loggerCache == orig(this.context.loggerCache)
this.context.loggerContextRemoteView == orig(this.context.loggerContextRemoteView)
this.context.loggerContextRemoteView.name == orig(this.context.loggerContextRemoteView.name)
this.context.loggerContextRemoteView.name.toString == orig(this.context.loggerContextRemoteView.name.toString)
this.context.loggerContextRemoteView.propertyMap == orig(this.context.loggerContextRemoteView.propertyMap)
this.context.loggerContextRemoteView.propertyMap.getClass().getName() == orig(this.context.loggerContextRemoteView.propertyMap.getClass().getName())
this.context.cfai == orig(this.context.cfai)
this.context.started == orig(this.context.started)
this.context.name == orig(this.context.name)
this.context.name.toString == orig(this.context.name.toString)
this.context.sm == orig(this.context.sm)
this.context.sm.getClass().getName() == orig(this.context.sm.getClass().getName())
this.context.propertyMap == orig(this.context.propertyMap)
this.context.propertyMap.getClass().getName() == orig(this.context.propertyMap.getClass().getName())
this.context.objectMap == orig(this.context.objectMap)
this.context.objectMap.getClass().getName() == orig(this.context.objectMap.getClass().getName())
return has only one value
return.root has only one value
return.root.name has only one value
return.root.name.toString == "root"
return.root.level has only one value
return.root.effectiveLevelInt == 10000
return.root.parent == null
return.root.childrenList == null
return.root.aai has only one value
return.root.additive == true
return.root.loggerContext has only one value
return.root.loggerRemoteView has only one value
return.size == 1
return.noAppenderWarning == 0
return.contextListenerList has only one value
return.contextListenerList[] == []
return.contextListenerList[].getClass().getName() == []
return.contextListenerList.getClass().getName() == java.util.ArrayList.class
return.loggerCache has only one value
return.loggerContextRemoteView has only one value
return.loggerContextRemoteView.name has only one value
return.loggerContextRemoteView.name.toString == "default"
return.loggerContextRemoteView.propertyMap has only one value
return.loggerContextRemoteView.propertyMap.getClass().getName() == java.util.HashMap.class
return.cfai == null
return.started == false
return.name has only one value
return.name.toString == "default"
return.sm has only one value
return.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
return.propertyMap has only one value
return.propertyMap.getClass().getName() == java.util.HashMap.class
return.objectMap has only one value
return.objectMap.getClass().getName() == java.util.HashMap.class
===========================================================================
ch.qos.logback.classic.spi.LoggerContextAwareBase:::OBJECT
this.noContextWarning == 0
this.context.getClass().getName() == ch.qos.logback.classic.LoggerContext.class
===========================================================================
ch.qos.logback.classic.spi.LoggerContextAwareBase.LoggerContextAwareBase():::EXIT
this.context == null
===========================================================================
ch.qos.logback.classic.spi.LoggerContextAwareBase.setContext(ch.qos.logback.core.Context):::ENTER
this.context == null
context has only one value
context.getClass().getName() == ch.qos.logback.classic.LoggerContext.class
===========================================================================
ch.qos.logback.classic.spi.LoggerContextAwareBase.setContext(ch.qos.logback.core.Context):::EXIT
this.noContextWarning == orig(this.noContextWarning)
this.context has only one value
===========================================================================
ch.qos.logback.classic.spi.LoggerContextRemoteView:::CLASS
===========================================================================
ch.qos.logback.classic.spi.LoggerContextRemoteView:::OBJECT
this.name.toString == "default"
this.propertyMap.getClass().getName() == java.util.HashMap.class
===========================================================================
ch.qos.logback.classic.spi.LoggerContextRemoteView.LoggerContextRemoteView(ch.qos.logback.classic.LoggerContext):::ENTER
lc has only one value
ch.qos.logback.classic.LoggerContext.ROOT_NAME has only one value
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == "root"
ch.qos.logback.classic.Logger.FQCN has only one value
ch.qos.logback.classic.Logger.FQCN.toString == "ch.qos.logback.classic.Logger"
ch.qos.logback.classic.Logger.instanceCount == 1
lc.root.name has only one value
lc.root.name.toString == "root"
lc.root.level has only one value
lc.root.effectiveLevelInt == 10000
lc.root.parent == null
lc.root.childrenList == null
lc.root.aai == null
lc.root.additive == true
lc.root.loggerContext has only one value
lc.root.loggerRemoteView has only one value
lc.size one of { 0, 1 }
lc.noAppenderWarning == 0
lc.contextListenerList has only one value
lc.contextListenerList[] == []
lc.contextListenerList[].getClass().getName() == []
lc.contextListenerList.getClass().getName() == java.util.ArrayList.class
lc.loggerCache has only one value
lc.loggerContextRemoteView.name == null
lc.loggerContextRemoteView.propertyMap has only one value
lc.loggerContextRemoteView.propertyMap.getClass().getName() == java.util.HashMap.class
lc.cfai == null
lc.started == false
lc.name.toString == "default"
lc.sm has only one value
lc.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
lc.propertyMap has only one value
lc.propertyMap.getClass().getName() == java.util.HashMap.class
lc.objectMap has only one value
lc.objectMap.getClass().getName() == java.util.HashMap.class
===========================================================================
ch.qos.logback.classic.spi.LoggerContextRemoteView.LoggerContextRemoteView(ch.qos.logback.classic.LoggerContext):::EXIT
ch.qos.logback.classic.LoggerContext.ROOT_NAME == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME)
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString)
lc.root == orig(lc.root)
ch.qos.logback.classic.Logger.FQCN == orig(ch.qos.logback.classic.Logger.FQCN)
ch.qos.logback.classic.Logger.FQCN.toString == orig(ch.qos.logback.classic.Logger.FQCN.toString)
ch.qos.logback.classic.Logger.instanceCount == orig(ch.qos.logback.classic.Logger.instanceCount)
lc.root.name == orig(lc.root.name)
lc.root.name.toString == orig(lc.root.name.toString)
lc.root.level == orig(lc.root.level)
lc.root.effectiveLevelInt == orig(lc.root.effectiveLevelInt)
lc.root.parent == orig(lc.root.parent)
lc.root.childrenList == orig(lc.root.childrenList)
lc.root.aai == orig(lc.root.aai)
lc.root.additive == orig(lc.root.additive)
lc.root.loggerContext == orig(lc.root.loggerContext)
lc.root.loggerRemoteView == orig(lc.root.loggerRemoteView)
lc.size == orig(lc.size)
lc.noAppenderWarning == orig(lc.noAppenderWarning)
lc.contextListenerList == orig(lc.contextListenerList)
lc.contextListenerList[] == orig(lc.contextListenerList[])
lc.contextListenerList.getClass().getName() == orig(lc.contextListenerList.getClass().getName())
lc.loggerCache == orig(lc.loggerCache)
lc.loggerContextRemoteView == orig(lc.loggerContextRemoteView)
lc.loggerContextRemoteView.name == orig(lc.loggerContextRemoteView.name)
lc.loggerContextRemoteView.propertyMap == orig(lc.loggerContextRemoteView.propertyMap)
lc.loggerContextRemoteView.propertyMap.getClass().getName() == orig(lc.loggerContextRemoteView.propertyMap.getClass().getName())
lc.cfai == orig(lc.cfai)
lc.started == orig(lc.started)
lc.name == orig(lc.name)
lc.name.toString == orig(lc.name.toString)
lc.sm == orig(lc.sm)
lc.sm.getClass().getName() == orig(lc.sm.getClass().getName())
lc.propertyMap == orig(lc.propertyMap)
lc.propertyMap.getClass().getName() == orig(lc.propertyMap.getClass().getName())
lc.objectMap == orig(lc.objectMap)
lc.objectMap.getClass().getName() == orig(lc.objectMap.getClass().getName())
ch.qos.logback.classic.LoggerContext.ROOT_NAME has only one value
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == "root"
ch.qos.logback.classic.Logger.FQCN has only one value
ch.qos.logback.classic.Logger.FQCN.toString == "ch.qos.logback.classic.Logger"
ch.qos.logback.classic.Logger.instanceCount == 1
lc.root.name has only one value
lc.root.name.toString == "root"
lc.root.level has only one value
lc.root.effectiveLevelInt == 10000
lc.root.parent == null
lc.root.childrenList == null
lc.root.aai == null
lc.root.additive == true
lc.root.loggerContext has only one value
lc.root.loggerRemoteView has only one value
lc.size one of { 0, 1 }
lc.noAppenderWarning == 0
lc.contextListenerList has only one value
lc.contextListenerList[] == []
lc.contextListenerList[].getClass().getName() == []
lc.contextListenerList.getClass().getName() == java.util.ArrayList.class
lc.loggerCache has only one value
lc.loggerContextRemoteView.name == null
lc.loggerContextRemoteView.propertyMap has only one value
lc.loggerContextRemoteView.propertyMap.getClass().getName() == java.util.HashMap.class
lc.cfai == null
lc.started == false
lc.name.toString == "default"
lc.sm has only one value
lc.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
lc.propertyMap has only one value
lc.propertyMap.getClass().getName() == java.util.HashMap.class
lc.objectMap has only one value
lc.objectMap.getClass().getName() == java.util.HashMap.class
===========================================================================
ch.qos.logback.classic.spi.LoggerRemoteView:::CLASS
ch.qos.logback.classic.spi.LoggerRemoteView.$assertionsDisabled == false
===========================================================================
ch.qos.logback.classic.spi.LoggerRemoteView:::OBJECT
this.loggerContextView.name.toString == "default"
this.loggerContextView.propertyMap.getClass().getName() == java.util.HashMap.class
===========================================================================
ch.qos.logback.classic.spi.LoggerRemoteView.LoggerRemoteView(java.lang.String, ch.qos.logback.classic.LoggerContext):::ENTER
lc has only one value
ch.qos.logback.classic.LoggerContext.ROOT_NAME has only one value
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == "root"
ch.qos.logback.classic.Logger.FQCN has only one value
ch.qos.logback.classic.Logger.FQCN.toString == "ch.qos.logback.classic.Logger"
lc.root.name has only one value
lc.root.name.toString == "root"
lc.root.level has only one value
lc.root.effectiveLevelInt == 10000
lc.root.parent == null
lc.root.childrenList[] elements has only one value
lc.root.childrenList[].getClass().getName() elements == ch.qos.logback.classic.Logger.class
lc.root.childrenList[].getClass().getName() one of { [], [ch.qos.logback.classic.Logger] }
lc.root.childrenList.getClass().getName() == java.util.ArrayList.class
lc.root.additive == true
lc.root.loggerContext has only one value
lc.noAppenderWarning == 0
lc.contextListenerList has only one value
lc.contextListenerList[] == []
lc.contextListenerList[].getClass().getName() == []
lc.contextListenerList.getClass().getName() == java.util.ArrayList.class
lc.loggerCache has only one value
lc.loggerContextRemoteView.name.toString == "default"
lc.loggerContextRemoteView.propertyMap.getClass().getName() == java.util.HashMap.class
lc.cfai == null
lc.started == false
lc.name.toString == "default"
lc.sm has only one value
lc.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
lc.propertyMap has only one value
lc.propertyMap.getClass().getName() == java.util.HashMap.class
lc.objectMap has only one value
lc.objectMap.getClass().getName() == java.util.HashMap.class
size(lc.root.childrenList[]) one of { 0, 1 }
===========================================================================
ch.qos.logback.classic.spi.LoggerRemoteView.LoggerRemoteView(java.lang.String, ch.qos.logback.classic.LoggerContext):::EXIT
name.toString == orig(name.toString)
ch.qos.logback.classic.LoggerContext.ROOT_NAME == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME)
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString)
lc.root == orig(lc.root)
ch.qos.logback.classic.Logger.FQCN == orig(ch.qos.logback.classic.Logger.FQCN)
ch.qos.logback.classic.Logger.FQCN.toString == orig(ch.qos.logback.classic.Logger.FQCN.toString)
ch.qos.logback.classic.Logger.instanceCount == orig(ch.qos.logback.classic.Logger.instanceCount)
lc.root.name == orig(lc.root.name)
lc.root.name.toString == orig(lc.root.name.toString)
lc.root.level == orig(lc.root.level)
lc.root.effectiveLevelInt == orig(lc.root.effectiveLevelInt)
lc.root.parent == orig(lc.root.parent)
lc.root.childrenList == orig(lc.root.childrenList)
lc.root.childrenList[] == orig(lc.root.childrenList[])
lc.root.childrenList.getClass().getName() == orig(lc.root.childrenList.getClass().getName())
lc.root.aai == orig(lc.root.aai)
lc.root.additive == orig(lc.root.additive)
lc.root.loggerContext == orig(lc.root.loggerContext)
lc.root.loggerRemoteView == orig(lc.root.loggerRemoteView)
lc.size == orig(lc.size)
lc.noAppenderWarning == orig(lc.noAppenderWarning)
lc.contextListenerList == orig(lc.contextListenerList)
lc.contextListenerList[] == orig(lc.contextListenerList[])
lc.contextListenerList.getClass().getName() == orig(lc.contextListenerList.getClass().getName())
lc.loggerCache == orig(lc.loggerCache)
lc.loggerContextRemoteView == orig(lc.loggerContextRemoteView)
lc.loggerContextRemoteView.name == orig(lc.loggerContextRemoteView.name)
lc.loggerContextRemoteView.name.toString == orig(lc.loggerContextRemoteView.name.toString)
lc.loggerContextRemoteView.propertyMap == orig(lc.loggerContextRemoteView.propertyMap)
lc.loggerContextRemoteView.propertyMap.getClass().getName() == orig(lc.loggerContextRemoteView.propertyMap.getClass().getName())
lc.cfai == orig(lc.cfai)
lc.started == orig(lc.started)
lc.name == orig(lc.name)
lc.name.toString == orig(lc.name.toString)
lc.sm == orig(lc.sm)
lc.sm.getClass().getName() == orig(lc.sm.getClass().getName())
lc.propertyMap == orig(lc.propertyMap)
lc.propertyMap.getClass().getName() == orig(lc.propertyMap.getClass().getName())
lc.objectMap == orig(lc.objectMap)
lc.objectMap.getClass().getName() == orig(lc.objectMap.getClass().getName())
ch.qos.logback.classic.LoggerContext.ROOT_NAME has only one value
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == "root"
ch.qos.logback.classic.Logger.FQCN has only one value
ch.qos.logback.classic.Logger.FQCN.toString == "ch.qos.logback.classic.Logger"
lc.root.name has only one value
lc.root.name.toString == "root"
lc.root.level has only one value
lc.root.effectiveLevelInt == 10000
lc.root.parent == null
lc.root.childrenList[] elements has only one value
lc.root.childrenList[].getClass().getName() elements == ch.qos.logback.classic.Logger.class
lc.root.childrenList[].getClass().getName() one of { [], [ch.qos.logback.classic.Logger] }
lc.root.childrenList.getClass().getName() == java.util.ArrayList.class
lc.root.additive == true
lc.root.loggerContext has only one value
lc.noAppenderWarning == 0
lc.contextListenerList has only one value
lc.contextListenerList[] == []
lc.contextListenerList[].getClass().getName() == []
lc.contextListenerList.getClass().getName() == java.util.ArrayList.class
lc.loggerCache has only one value
lc.loggerContextRemoteView.name.toString == "default"
lc.loggerContextRemoteView.propertyMap.getClass().getName() == java.util.HashMap.class
lc.cfai == null
lc.started == false
lc.name.toString == "default"
lc.sm has only one value
lc.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
lc.propertyMap has only one value
lc.propertyMap.getClass().getName() == java.util.HashMap.class
lc.objectMap has only one value
lc.objectMap.getClass().getName() == java.util.HashMap.class
size(lc.root.childrenList[]) one of { 0, 1 }
===========================================================================
ch.qos.logback.classic.util.ContextInitializer:::CLASS
ch.qos.logback.classic.util.ContextInitializer.AUTOCONFIG_FILE has only one value
ch.qos.logback.classic.util.ContextInitializer.AUTOCONFIG_FILE.toString == "logback.xml"
ch.qos.logback.classic.util.ContextInitializer.TEST_AUTOCONFIG_FILE has only one value
ch.qos.logback.classic.util.ContextInitializer.TEST_AUTOCONFIG_FILE.toString == "logback-test.xml"
===========================================================================
ch.qos.logback.classic.util.ContextInitializer.autoConfig(ch.qos.logback.classic.LoggerContext):::ENTER
loggerContext has only one value
ch.qos.logback.classic.LoggerContext.ROOT_NAME has only one value
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == "root"
loggerContext.root has only one value
ch.qos.logback.classic.Logger.FQCN has only one value
ch.qos.logback.classic.Logger.FQCN.toString == "ch.qos.logback.classic.Logger"
ch.qos.logback.classic.Logger.instanceCount == 1
loggerContext.root.name has only one value
loggerContext.root.name.toString == "root"
loggerContext.root.level has only one value
loggerContext.root.effectiveLevelInt == 10000
loggerContext.root.parent == null
loggerContext.root.childrenList == null
loggerContext.root.aai == null
loggerContext.root.additive == true
loggerContext.root.loggerContext has only one value
loggerContext.root.loggerRemoteView has only one value
loggerContext.size == 1
loggerContext.noAppenderWarning == 0
loggerContext.contextListenerList has only one value
loggerContext.contextListenerList[] == []
loggerContext.contextListenerList[].getClass().getName() == []
loggerContext.contextListenerList.getClass().getName() == java.util.ArrayList.class
loggerContext.loggerCache has only one value
loggerContext.loggerContextRemoteView has only one value
loggerContext.loggerContextRemoteView.name has only one value
loggerContext.loggerContextRemoteView.name.toString == "default"
loggerContext.loggerContextRemoteView.propertyMap has only one value
loggerContext.loggerContextRemoteView.propertyMap.getClass().getName() == java.util.HashMap.class
loggerContext.cfai == null
loggerContext.started == false
loggerContext.name has only one value
loggerContext.name.toString == "default"
loggerContext.sm has only one value
loggerContext.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
loggerContext.propertyMap has only one value
loggerContext.propertyMap.getClass().getName() == java.util.HashMap.class
loggerContext.objectMap has only one value
loggerContext.objectMap.getClass().getName() == java.util.HashMap.class
===========================================================================
ch.qos.logback.classic.util.ContextInitializer.autoConfig(ch.qos.logback.classic.LoggerContext):::EXIT
ch.qos.logback.classic.util.ContextInitializer.AUTOCONFIG_FILE == orig(ch.qos.logback.classic.util.ContextInitializer.AUTOCONFIG_FILE)
ch.qos.logback.classic.util.ContextInitializer.AUTOCONFIG_FILE.toString == orig(ch.qos.logback.classic.util.ContextInitializer.AUTOCONFIG_FILE.toString)
ch.qos.logback.classic.util.ContextInitializer.TEST_AUTOCONFIG_FILE == orig(ch.qos.logback.classic.util.ContextInitializer.TEST_AUTOCONFIG_FILE)
ch.qos.logback.classic.util.ContextInitializer.TEST_AUTOCONFIG_FILE.toString == orig(ch.qos.logback.classic.util.ContextInitializer.TEST_AUTOCONFIG_FILE.toString)
ch.qos.logback.classic.LoggerContext.ROOT_NAME == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME)
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString)
loggerContext.root == orig(loggerContext.root)
ch.qos.logback.classic.Logger.FQCN == orig(ch.qos.logback.classic.Logger.FQCN)
ch.qos.logback.classic.Logger.FQCN.toString == orig(ch.qos.logback.classic.Logger.FQCN.toString)
ch.qos.logback.classic.Logger.instanceCount == orig(ch.qos.logback.classic.Logger.instanceCount)
loggerContext.root.name == orig(loggerContext.root.name)
loggerContext.root.name.toString == orig(loggerContext.root.name.toString)
loggerContext.root.level == orig(loggerContext.root.level)
loggerContext.root.effectiveLevelInt == orig(loggerContext.root.effectiveLevelInt)
loggerContext.root.parent == orig(loggerContext.root.parent)
loggerContext.root.childrenList == orig(loggerContext.root.childrenList)
loggerContext.root.additive == orig(loggerContext.root.additive)
loggerContext.root.loggerContext == orig(loggerContext.root.loggerContext)
loggerContext.root.loggerRemoteView == orig(loggerContext.root.loggerRemoteView)
loggerContext.size == orig(loggerContext.size)
loggerContext.noAppenderWarning == orig(loggerContext.noAppenderWarning)
loggerContext.contextListenerList == orig(loggerContext.contextListenerList)
loggerContext.contextListenerList[] == orig(loggerContext.contextListenerList[])
loggerContext.contextListenerList.getClass().getName() == orig(loggerContext.contextListenerList.getClass().getName())
loggerContext.loggerCache == orig(loggerContext.loggerCache)
loggerContext.loggerContextRemoteView == orig(loggerContext.loggerContextRemoteView)
loggerContext.loggerContextRemoteView.name == orig(loggerContext.loggerContextRemoteView.name)
loggerContext.loggerContextRemoteView.name.toString == orig(loggerContext.loggerContextRemoteView.name.toString)
loggerContext.loggerContextRemoteView.propertyMap == orig(loggerContext.loggerContextRemoteView.propertyMap)
loggerContext.loggerContextRemoteView.propertyMap.getClass().getName() == orig(loggerContext.loggerContextRemoteView.propertyMap.getClass().getName())
loggerContext.cfai == orig(loggerContext.cfai)
loggerContext.started == orig(loggerContext.started)
loggerContext.name == orig(loggerContext.name)
loggerContext.name.toString == orig(loggerContext.name.toString)
loggerContext.sm == orig(loggerContext.sm)
loggerContext.sm.getClass().getName() == orig(loggerContext.sm.getClass().getName())
loggerContext.propertyMap == orig(loggerContext.propertyMap)
loggerContext.propertyMap.getClass().getName() == orig(loggerContext.propertyMap.getClass().getName())
loggerContext.objectMap == orig(loggerContext.objectMap)
loggerContext.objectMap.getClass().getName() == orig(loggerContext.objectMap.getClass().getName())
ch.qos.logback.classic.LoggerContext.ROOT_NAME has only one value
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == "root"
loggerContext.root has only one value
ch.qos.logback.classic.Logger.FQCN has only one value
ch.qos.logback.classic.Logger.FQCN.toString == "ch.qos.logback.classic.Logger"
ch.qos.logback.classic.Logger.instanceCount == 1
loggerContext.root.name has only one value
loggerContext.root.name.toString == "root"
loggerContext.root.level has only one value
loggerContext.root.effectiveLevelInt == 10000
loggerContext.root.parent == null
loggerContext.root.childrenList == null
loggerContext.root.aai has only one value
loggerContext.root.additive == true
loggerContext.root.loggerContext has only one value
loggerContext.root.loggerRemoteView has only one value
loggerContext.size == 1
loggerContext.noAppenderWarning == 0
loggerContext.contextListenerList has only one value
loggerContext.contextListenerList[] == []
loggerContext.contextListenerList[].getClass().getName() == []
loggerContext.contextListenerList.getClass().getName() == java.util.ArrayList.class
loggerContext.loggerCache has only one value
loggerContext.loggerContextRemoteView has only one value
loggerContext.loggerContextRemoteView.name has only one value
loggerContext.loggerContextRemoteView.name.toString == "default"
loggerContext.loggerContextRemoteView.propertyMap has only one value
loggerContext.loggerContextRemoteView.propertyMap.getClass().getName() == java.util.HashMap.class
loggerContext.cfai == null
loggerContext.started == false
loggerContext.name has only one value
loggerContext.name.toString == "default"
loggerContext.sm has only one value
loggerContext.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
loggerContext.propertyMap has only one value
loggerContext.propertyMap.getClass().getName() == java.util.HashMap.class
loggerContext.objectMap has only one value
loggerContext.objectMap.getClass().getName() == java.util.HashMap.class
===========================================================================
ch.qos.logback.classic.util.ContextInitializer.autoConfig(ch.qos.logback.classic.LoggerContext, java.lang.ClassLoader):::ENTER
loggerContext has only one value
ch.qos.logback.classic.LoggerContext.ROOT_NAME has only one value
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == "root"
loggerContext.root has only one value
ch.qos.logback.classic.Logger.FQCN has only one value
ch.qos.logback.classic.Logger.FQCN.toString == "ch.qos.logback.classic.Logger"
ch.qos.logback.classic.Logger.instanceCount == 1
loggerContext.root.name has only one value
loggerContext.root.name.toString == "root"
loggerContext.root.level has only one value
loggerContext.root.effectiveLevelInt == 10000
loggerContext.root.parent == null
loggerContext.root.childrenList == null
loggerContext.root.aai == null
loggerContext.root.additive == true
loggerContext.root.loggerContext has only one value
loggerContext.root.loggerRemoteView has only one value
loggerContext.size == 1
loggerContext.noAppenderWarning == 0
loggerContext.contextListenerList has only one value
loggerContext.contextListenerList[] == []
loggerContext.contextListenerList[].getClass().getName() == []
loggerContext.contextListenerList.getClass().getName() == java.util.ArrayList.class
loggerContext.loggerCache has only one value
loggerContext.loggerContextRemoteView has only one value
loggerContext.loggerContextRemoteView.name has only one value
loggerContext.loggerContextRemoteView.name.toString == "default"
loggerContext.loggerContextRemoteView.propertyMap has only one value
loggerContext.loggerContextRemoteView.propertyMap.getClass().getName() == java.util.HashMap.class
loggerContext.cfai == null
loggerContext.started == false
loggerContext.name has only one value
loggerContext.name.toString == "default"
loggerContext.sm has only one value
loggerContext.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
loggerContext.propertyMap has only one value
loggerContext.propertyMap.getClass().getName() == java.util.HashMap.class
loggerContext.objectMap has only one value
loggerContext.objectMap.getClass().getName() == java.util.HashMap.class
classLoader has only one value
classLoader.getClass().getName() == jdk.internal.loader.ClassLoaders$AppClassLoader.class
===========================================================================
ch.qos.logback.classic.util.ContextInitializer.autoConfig(ch.qos.logback.classic.LoggerContext, java.lang.ClassLoader):::EXIT
ch.qos.logback.classic.util.ContextInitializer.AUTOCONFIG_FILE == orig(ch.qos.logback.classic.util.ContextInitializer.AUTOCONFIG_FILE)
ch.qos.logback.classic.util.ContextInitializer.AUTOCONFIG_FILE.toString == orig(ch.qos.logback.classic.util.ContextInitializer.AUTOCONFIG_FILE.toString)
ch.qos.logback.classic.util.ContextInitializer.TEST_AUTOCONFIG_FILE == orig(ch.qos.logback.classic.util.ContextInitializer.TEST_AUTOCONFIG_FILE)
ch.qos.logback.classic.util.ContextInitializer.TEST_AUTOCONFIG_FILE.toString == orig(ch.qos.logback.classic.util.ContextInitializer.TEST_AUTOCONFIG_FILE.toString)
ch.qos.logback.classic.LoggerContext.ROOT_NAME == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME)
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == orig(ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString)
loggerContext.root == orig(loggerContext.root)
ch.qos.logback.classic.Logger.FQCN == orig(ch.qos.logback.classic.Logger.FQCN)
ch.qos.logback.classic.Logger.FQCN.toString == orig(ch.qos.logback.classic.Logger.FQCN.toString)
ch.qos.logback.classic.Logger.instanceCount == orig(ch.qos.logback.classic.Logger.instanceCount)
loggerContext.root.name == orig(loggerContext.root.name)
loggerContext.root.name.toString == orig(loggerContext.root.name.toString)
loggerContext.root.level == orig(loggerContext.root.level)
loggerContext.root.effectiveLevelInt == orig(loggerContext.root.effectiveLevelInt)
loggerContext.root.parent == orig(loggerContext.root.parent)
loggerContext.root.childrenList == orig(loggerContext.root.childrenList)
loggerContext.root.additive == orig(loggerContext.root.additive)
loggerContext.root.loggerContext == orig(loggerContext.root.loggerContext)
loggerContext.root.loggerRemoteView == orig(loggerContext.root.loggerRemoteView)
loggerContext.size == orig(loggerContext.size)
loggerContext.noAppenderWarning == orig(loggerContext.noAppenderWarning)
loggerContext.contextListenerList == orig(loggerContext.contextListenerList)
loggerContext.contextListenerList[] == orig(loggerContext.contextListenerList[])
loggerContext.contextListenerList.getClass().getName() == orig(loggerContext.contextListenerList.getClass().getName())
loggerContext.loggerCache == orig(loggerContext.loggerCache)
loggerContext.loggerContextRemoteView == orig(loggerContext.loggerContextRemoteView)
loggerContext.loggerContextRemoteView.name == orig(loggerContext.loggerContextRemoteView.name)
loggerContext.loggerContextRemoteView.name.toString == orig(loggerContext.loggerContextRemoteView.name.toString)
loggerContext.loggerContextRemoteView.propertyMap == orig(loggerContext.loggerContextRemoteView.propertyMap)
loggerContext.loggerContextRemoteView.propertyMap.getClass().getName() == orig(loggerContext.loggerContextRemoteView.propertyMap.getClass().getName())
loggerContext.cfai == orig(loggerContext.cfai)
loggerContext.started == orig(loggerContext.started)
loggerContext.name == orig(loggerContext.name)
loggerContext.name.toString == orig(loggerContext.name.toString)
loggerContext.sm == orig(loggerContext.sm)
loggerContext.sm.getClass().getName() == orig(loggerContext.sm.getClass().getName())
loggerContext.propertyMap == orig(loggerContext.propertyMap)
loggerContext.propertyMap.getClass().getName() == orig(loggerContext.propertyMap.getClass().getName())
loggerContext.objectMap == orig(loggerContext.objectMap)
loggerContext.objectMap.getClass().getName() == orig(loggerContext.objectMap.getClass().getName())
ch.qos.logback.classic.LoggerContext.ROOT_NAME has only one value
ch.qos.logback.classic.LoggerContext.ROOT_NAME.toString == "root"
loggerContext.root has only one value
ch.qos.logback.classic.Logger.FQCN has only one value
ch.qos.logback.classic.Logger.FQCN.toString == "ch.qos.logback.classic.Logger"
ch.qos.logback.classic.Logger.instanceCount == 1
loggerContext.root.name has only one value
loggerContext.root.name.toString == "root"
loggerContext.root.level has only one value
loggerContext.root.effectiveLevelInt == 10000
loggerContext.root.parent == null
loggerContext.root.childrenList == null
loggerContext.root.aai has only one value
loggerContext.root.additive == true
loggerContext.root.loggerContext has only one value
loggerContext.root.loggerRemoteView has only one value
loggerContext.size == 1
loggerContext.noAppenderWarning == 0
loggerContext.contextListenerList has only one value
loggerContext.contextListenerList[] == []
loggerContext.contextListenerList[].getClass().getName() == []
loggerContext.contextListenerList.getClass().getName() == java.util.ArrayList.class
loggerContext.loggerCache has only one value
loggerContext.loggerContextRemoteView has only one value
loggerContext.loggerContextRemoteView.name has only one value
loggerContext.loggerContextRemoteView.name.toString == "default"
loggerContext.loggerContextRemoteView.propertyMap has only one value
loggerContext.loggerContextRemoteView.propertyMap.getClass().getName() == java.util.HashMap.class
loggerContext.cfai == null
loggerContext.started == false
loggerContext.name has only one value
loggerContext.name.toString == "default"
loggerContext.sm has only one value
loggerContext.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
loggerContext.propertyMap has only one value
loggerContext.propertyMap.getClass().getName() == java.util.HashMap.class
loggerContext.objectMap has only one value
loggerContext.objectMap.getClass().getName() == java.util.HashMap.class
===========================================================================
ch.qos.logback.core.AppenderBase:::CLASS
===========================================================================
ch.qos.logback.core.AppenderBase:::OBJECT
this has only one value
this.getClass().getName() == ch.qos.logback.core.ConsoleAppender.class
this.guard == false
this.name.toString == "console"
this.fai has only one value
this.fai.headFilter == null
this.fai.tailFilter == null
this.statusRepeatCount == 0
this.exceptionCount == 0
this.noContextWarning == 0
this.context.getClass().getName() == ch.qos.logback.classic.LoggerContext.class
===========================================================================
ch.qos.logback.core.AppenderBase.AppenderBase():::EXIT
this.started == false
this.name == null
this.context == null
===========================================================================
ch.qos.logback.core.AppenderBase.setName(java.lang.String):::ENTER
this.started == false
this.name == null
this.context has only one value
name has only one value
name.toString == "console"
===========================================================================
ch.qos.logback.core.AppenderBase.setName(java.lang.String):::EXIT
this.started == orig(this.started)
this.guard == orig(this.guard)
this.fai == orig(this.fai)
this.fai.headFilter == orig(this.fai.headFilter)
this.fai.tailFilter == orig(this.fai.tailFilter)
this.statusRepeatCount == orig(this.statusRepeatCount)
this.exceptionCount == orig(this.exceptionCount)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
name.toString == orig(name.toString)
this.started == false
this.name has only one value
this.context has only one value
name.toString == "console"
===========================================================================
ch.qos.logback.core.AppenderBase.start():::ENTER
this.started == false
this.name has only one value
this.context has only one value
===========================================================================
ch.qos.logback.core.AppenderBase.start():::EXIT
this.guard == orig(this.guard)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.fai == orig(this.fai)
this.fai.headFilter == orig(this.fai.headFilter)
this.fai.tailFilter == orig(this.fai.tailFilter)
this.statusRepeatCount == orig(this.statusRepeatCount)
this.exceptionCount == orig(this.exceptionCount)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.started == true
this.name has only one value
this.context has only one value
===========================================================================
ch.qos.logback.core.BasicStatusManager:::CLASS
===========================================================================
ch.qos.logback.core.BasicStatusManager:::OBJECT
this has only one value
this.count one of { 0, 1 }
this.statusList has only one value
this.statusList[] elements has only one value
this.statusList[].getClass().getName() elements == ch.qos.logback.core.status.InfoStatus.class
this.statusList[].getClass().getName() one of { [], [ch.qos.logback.core.status.InfoStatus] }
this.statusList.getClass().getName() == java.util.ArrayList.class
this.level == 0
size(this.statusList[]) one of { 0, 1 }
===========================================================================
ch.qos.logback.core.BasicStatusManager.BasicStatusManager():::EXIT
this.count == 0
this.statusList[] == []
this.statusList[].getClass().getName() == []
===========================================================================
ch.qos.logback.core.BasicStatusManager.add(ch.qos.logback.core.status.Status):::ENTER
this.count == 0
this.statusList[] == []
this.statusList[].getClass().getName() == []
newStatus has only one value
newStatus.getClass().getName() == ch.qos.logback.core.status.InfoStatus.class
===========================================================================
ch.qos.logback.core.BasicStatusManager.add(ch.qos.logback.core.status.Status):::EXIT41
===========================================================================
ch.qos.logback.core.BasicStatusManager.add(ch.qos.logback.core.status.Status):::EXIT
this.statusList == orig(this.statusList)
this.statusList.getClass().getName() == orig(this.statusList.getClass().getName())
this.level == orig(this.level)
size(this.statusList[])-1 == orig(size(this.statusList[]))
this.count == 1
this.statusList[] contains no nulls and has only one value, of length 1
this.statusList[].getClass().getName() == [ch.qos.logback.core.status.InfoStatus]
size(this.statusList[]) == 1
===========================================================================
ch.qos.logback.core.ConsoleAppender:::CLASS
ch.qos.logback.core.ConsoleAppender.SYSTEM_OUT has only one value
ch.qos.logback.core.ConsoleAppender.SYSTEM_OUT.toString == "System.out"
ch.qos.logback.core.ConsoleAppender.SYSTEM_ERR has only one value
ch.qos.logback.core.ConsoleAppender.SYSTEM_ERR.toString == "System.err"
===========================================================================
ch.qos.logback.core.ConsoleAppender:::OBJECT
this has only one value
this.target has only one value
this.target.toString == "System.out"
this.immediateFlush == true
this.encoding == null
this.writer.getClass().getName() == java.io.OutputStreamWriter.class
this.layout.getClass().getName() == ch.qos.logback.classic.PatternLayout.class
this.guard == false
this.name.toString == "console"
this.fai has only one value
this.fai.headFilter == null
this.fai.tailFilter == null
this.statusRepeatCount == 0
this.exceptionCount == 0
this.noContextWarning == 0
this.context.getClass().getName() == ch.qos.logback.classic.LoggerContext.class
===========================================================================
ch.qos.logback.core.ConsoleAppender.ConsoleAppender():::EXIT
this.writer == null
this.layout == null
this.started == false
this.name == null
this.context == null
===========================================================================
ch.qos.logback.core.ConsoleAppender.closeWriter():::ENTER
this.writer == null
this.layout has only one value
this.started == false
this.name has only one value
this.context has only one value
===========================================================================
ch.qos.logback.core.ConsoleAppender.closeWriter():::EXIT
ch.qos.logback.core.ConsoleAppender.SYSTEM_OUT == orig(ch.qos.logback.core.ConsoleAppender.SYSTEM_OUT)
ch.qos.logback.core.ConsoleAppender.SYSTEM_OUT.toString == orig(ch.qos.logback.core.ConsoleAppender.SYSTEM_OUT.toString)
ch.qos.logback.core.ConsoleAppender.SYSTEM_ERR == orig(ch.qos.logback.core.ConsoleAppender.SYSTEM_ERR)
ch.qos.logback.core.ConsoleAppender.SYSTEM_ERR.toString == orig(ch.qos.logback.core.ConsoleAppender.SYSTEM_ERR.toString)
this.target == orig(this.target)
this.target.toString == orig(this.target.toString)
this.immediateFlush == orig(this.immediateFlush)
this.encoding == orig(this.encoding)
this.writer == orig(this.writer)
this.layout == orig(this.layout)
this.layout.getClass().getName() == orig(this.layout.getClass().getName())
this.started == orig(this.started)
this.guard == orig(this.guard)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.fai == orig(this.fai)
this.fai.headFilter == orig(this.fai.headFilter)
this.fai.tailFilter == orig(this.fai.tailFilter)
this.statusRepeatCount == orig(this.statusRepeatCount)
this.exceptionCount == orig(this.exceptionCount)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.writer == null
this.layout has only one value
this.started == false
this.name has only one value
this.context has only one value
===========================================================================
ch.qos.logback.core.ConsoleAppender.start():::ENTER
this.writer == null
this.layout has only one value
this.started == false
this.name has only one value
this.context has only one value
===========================================================================
ch.qos.logback.core.ConsoleAppender.start():::EXIT
ch.qos.logback.core.ConsoleAppender.SYSTEM_OUT == orig(ch.qos.logback.core.ConsoleAppender.SYSTEM_OUT)
ch.qos.logback.core.ConsoleAppender.SYSTEM_OUT.toString == orig(ch.qos.logback.core.ConsoleAppender.SYSTEM_OUT.toString)
ch.qos.logback.core.ConsoleAppender.SYSTEM_ERR == orig(ch.qos.logback.core.ConsoleAppender.SYSTEM_ERR)
ch.qos.logback.core.ConsoleAppender.SYSTEM_ERR.toString == orig(ch.qos.logback.core.ConsoleAppender.SYSTEM_ERR.toString)
this.target == orig(this.target)
this.target.toString == orig(this.target.toString)
this.immediateFlush == orig(this.immediateFlush)
this.encoding == orig(this.encoding)
this.layout == orig(this.layout)
this.layout.getClass().getName() == orig(this.layout.getClass().getName())
this.guard == orig(this.guard)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.fai == orig(this.fai)
this.fai.headFilter == orig(this.fai.headFilter)
this.fai.tailFilter == orig(this.fai.tailFilter)
this.statusRepeatCount == orig(this.statusRepeatCount)
this.exceptionCount == orig(this.exceptionCount)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.writer has only one value
this.layout has only one value
this.started == true
this.name has only one value
this.context has only one value
===========================================================================
ch.qos.logback.core.ContextBase:::OBJECT
this has only one value
this.name.toString == "default"
this.sm has only one value
this.sm != null
this.sm.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
this.propertyMap has only one value
this.propertyMap != null
this.propertyMap.getClass().getName() == java.util.HashMap.class
this.objectMap has only one value
this.objectMap != null
this.objectMap.getClass().getName() == java.util.HashMap.class
===========================================================================
ch.qos.logback.core.ContextBase.ContextBase():::EXIT
this.name == null
===========================================================================
ch.qos.logback.core.ContextBase.getCopyOfPropertyMap():::ENTER
===========================================================================
ch.qos.logback.core.ContextBase.getCopyOfPropertyMap():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.sm == orig(this.sm)
this.sm.getClass().getName() == orig(this.sm.getClass().getName())
this.propertyMap == orig(this.propertyMap)
this.propertyMap.getClass().getName() == orig(this.propertyMap.getClass().getName())
this.objectMap == orig(this.objectMap)
this.objectMap.getClass().getName() == orig(this.objectMap.getClass().getName())
return.getClass().getName() == java.util.HashMap.class
===========================================================================
ch.qos.logback.core.ContextBase.getName():::ENTER
===========================================================================
ch.qos.logback.core.ContextBase.getName():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.sm == orig(this.sm)
this.sm.getClass().getName() == orig(this.sm.getClass().getName())
this.propertyMap == orig(this.propertyMap)
this.propertyMap.getClass().getName() == orig(this.propertyMap.getClass().getName())
this.objectMap == orig(this.objectMap)
this.objectMap.getClass().getName() == orig(this.objectMap.getClass().getName())
return.toString == "default"
===========================================================================
ch.qos.logback.core.ContextBase.getObject(java.lang.String):::ENTER
this.name has only one value
key has only one value
key.toString == "PATTERN_RULE_REGISTRY"
===========================================================================
ch.qos.logback.core.ContextBase.getObject(java.lang.String):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.sm == orig(this.sm)
this.sm.getClass().getName() == orig(this.sm.getClass().getName())
this.propertyMap == orig(this.propertyMap)
this.propertyMap.getClass().getName() == orig(this.propertyMap.getClass().getName())
this.objectMap == orig(this.objectMap)
this.objectMap.getClass().getName() == orig(this.objectMap.getClass().getName())
key.toString == orig(key.toString)
this.name has only one value
key.toString == "PATTERN_RULE_REGISTRY"
return == null
===========================================================================
ch.qos.logback.core.ContextBase.getStatusManager():::ENTER
this.name has only one value
===========================================================================
ch.qos.logback.core.ContextBase.getStatusManager():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.sm == orig(this.sm)
this.sm.getClass().getName() == orig(this.sm.getClass().getName())
this.propertyMap == orig(this.propertyMap)
this.propertyMap.getClass().getName() == orig(this.propertyMap.getClass().getName())
this.objectMap == orig(this.objectMap)
this.objectMap.getClass().getName() == orig(this.objectMap.getClass().getName())
this.name has only one value
return has only one value
return.getClass().getName() == ch.qos.logback.core.BasicStatusManager.class
===========================================================================
ch.qos.logback.core.ContextBase.putObject(java.lang.String, java.lang.Object):::ENTER
this.name == null
key has only one value
key.toString == "EVALUATOR_MAP"
value has only one value
value.getClass().getName() == java.util.HashMap.class
===========================================================================
ch.qos.logback.core.ContextBase.putObject(java.lang.String, java.lang.Object):::EXIT
this.name == orig(this.name)
this.sm == orig(this.sm)
this.sm.getClass().getName() == orig(this.sm.getClass().getName())
this.propertyMap == orig(this.propertyMap)
this.propertyMap.getClass().getName() == orig(this.propertyMap.getClass().getName())
this.objectMap == orig(this.objectMap)
this.objectMap.getClass().getName() == orig(this.objectMap.getClass().getName())
key.toString == orig(key.toString)
this.name == null
key.toString == "EVALUATOR_MAP"
===========================================================================
ch.qos.logback.core.ContextBase.setName(java.lang.String):::ENTER
this.name == null
name has only one value
name.toString == "default"
===========================================================================
ch.qos.logback.core.ContextBase.setName(java.lang.String):::EXIT
this.sm == orig(this.sm)
this.sm.getClass().getName() == orig(this.sm.getClass().getName())
this.propertyMap == orig(this.propertyMap)
this.propertyMap.getClass().getName() == orig(this.propertyMap.getClass().getName())
this.objectMap == orig(this.objectMap)
this.objectMap.getClass().getName() == orig(this.objectMap.getClass().getName())
name.toString == orig(name.toString)
this.name has only one value
name.toString == "default"
===========================================================================
ch.qos.logback.core.LayoutBase:::OBJECT
this has only one value
this.getClass().getName() == ch.qos.logback.classic.PatternLayout.class
this.fileHeader == null
this.fileFooter == null
this.presentationHeader == null
this.presentationFooter == null
this.noContextWarning == 0
this.context.getClass().getName() == ch.qos.logback.classic.LoggerContext.class
===========================================================================
ch.qos.logback.core.LayoutBase.LayoutBase():::EXIT
this.started == false
this.context == null
===========================================================================
ch.qos.logback.core.LayoutBase.getContext():::ENTER
this.started == false
this.context has only one value
===========================================================================
ch.qos.logback.core.LayoutBase.getContext():::EXIT
this.started == orig(this.started)
this.fileHeader == orig(this.fileHeader)
this.fileFooter == orig(this.fileFooter)
this.presentationHeader == orig(this.presentationHeader)
this.presentationFooter == orig(this.presentationFooter)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.started == false
this.context has only one value
return has only one value
return.getClass().getName() == ch.qos.logback.classic.LoggerContext.class
===========================================================================
ch.qos.logback.core.LayoutBase.getFileFooter():::ENTER
this.started == true
this.context has only one value
===========================================================================
ch.qos.logback.core.LayoutBase.getFileFooter():::EXIT
this.started == orig(this.started)
this.fileHeader == orig(this.fileHeader)
this.fileFooter == orig(this.fileFooter)
this.presentationHeader == orig(this.presentationHeader)
this.presentationFooter == orig(this.presentationFooter)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.started == true
this.context has only one value
return == null
===========================================================================
ch.qos.logback.core.LayoutBase.getFileHeader():::ENTER
this.started == true
this.context has only one value
===========================================================================
ch.qos.logback.core.LayoutBase.getFileHeader():::EXIT
this.started == orig(this.started)
this.fileHeader == orig(this.fileHeader)
this.fileFooter == orig(this.fileFooter)
this.presentationHeader == orig(this.presentationHeader)
this.presentationFooter == orig(this.presentationFooter)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.started == true
this.context has only one value
return == null
===========================================================================
ch.qos.logback.core.LayoutBase.setContext(ch.qos.logback.core.Context):::ENTER
this.started == false
this.context == null
context has only one value
context.getClass().getName() == ch.qos.logback.classic.LoggerContext.class
===========================================================================
ch.qos.logback.core.LayoutBase.setContext(ch.qos.logback.core.Context):::EXIT
this.started == orig(this.started)
this.fileHeader == orig(this.fileHeader)
this.fileFooter == orig(this.fileFooter)
this.presentationHeader == orig(this.presentationHeader)
this.presentationFooter == orig(this.presentationFooter)
this.noContextWarning == orig(this.noContextWarning)
this.started == false
this.context has only one value
===========================================================================
ch.qos.logback.core.LayoutBase.start():::ENTER
this.started == false
this.context has only one value
===========================================================================
ch.qos.logback.core.LayoutBase.start():::EXIT
this.fileHeader == orig(this.fileHeader)
this.fileFooter == orig(this.fileFooter)
this.presentationHeader == orig(this.presentationHeader)
this.presentationFooter == orig(this.presentationFooter)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.started == true
this.context has only one value
===========================================================================
ch.qos.logback.core.WriterAppender:::CLASS
===========================================================================
ch.qos.logback.core.WriterAppender:::OBJECT
this has only one value
this.immediateFlush == true
this.encoding == null
this.writer.getClass().getName() == java.io.OutputStreamWriter.class
this.layout.getClass().getName() == ch.qos.logback.classic.PatternLayout.class
this.guard == false
this.name.toString == "console"
this.fai has only one value
this.fai != null
this.fai.headFilter == null
this.fai.tailFilter == null
this.statusRepeatCount == 0
this.exceptionCount == 0
this.noContextWarning == 0
this.context.getClass().getName() == ch.qos.logback.classic.LoggerContext.class
===========================================================================
ch.qos.logback.core.WriterAppender.WriterAppender():::EXIT
this.writer == null
this.layout == null
this.started == false
this.name == null
this.context == null
===========================================================================
ch.qos.logback.core.WriterAppender.createWriter(java.io.OutputStream):::ENTER
this.writer == null
this.layout has only one value
this.started == false
this.name has only one value
this.context has only one value
os has only one value
os.getClass().getName() == java.io.PrintStream.class
===========================================================================
ch.qos.logback.core.WriterAppender.createWriter(java.io.OutputStream):::EXIT
this.immediateFlush == orig(this.immediateFlush)
this.encoding == orig(this.encoding)
this.writer == orig(this.writer)
this.layout == orig(this.layout)
this.layout.getClass().getName() == orig(this.layout.getClass().getName())
this.started == orig(this.started)
this.guard == orig(this.guard)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.fai == orig(this.fai)
this.fai.headFilter == orig(this.fai.headFilter)
this.fai.tailFilter == orig(this.fai.tailFilter)
this.statusRepeatCount == orig(this.statusRepeatCount)
this.exceptionCount == orig(this.exceptionCount)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.writer == null
this.layout has only one value
this.started == false
this.name has only one value
this.context has only one value
return has only one value
===========================================================================
ch.qos.logback.core.WriterAppender.getEncoding():::ENTER
this.writer == null
this.layout has only one value
this.started == false
this.name has only one value
this.context has only one value
===========================================================================
ch.qos.logback.core.WriterAppender.getEncoding():::EXIT
this.immediateFlush == orig(this.immediateFlush)
this.encoding == orig(this.encoding)
this.writer == orig(this.writer)
this.layout == orig(this.layout)
this.layout.getClass().getName() == orig(this.layout.getClass().getName())
this.started == orig(this.started)
this.guard == orig(this.guard)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.fai == orig(this.fai)
this.fai.headFilter == orig(this.fai.headFilter)
this.fai.tailFilter == orig(this.fai.tailFilter)
this.statusRepeatCount == orig(this.statusRepeatCount)
this.exceptionCount == orig(this.exceptionCount)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.writer == null
this.layout has only one value
this.started == false
this.name has only one value
this.context has only one value
return == null
===========================================================================
ch.qos.logback.core.WriterAppender.setLayout(ch.qos.logback.core.Layout):::ENTER
this.writer == null
this.layout == null
this.started == false
this.name has only one value
this.context has only one value
layout has only one value
layout.getClass().getName() == ch.qos.logback.classic.PatternLayout.class
===========================================================================
ch.qos.logback.core.WriterAppender.setLayout(ch.qos.logback.core.Layout):::EXIT
this.immediateFlush == orig(this.immediateFlush)
this.encoding == orig(this.encoding)
this.writer == orig(this.writer)
this.started == orig(this.started)
this.guard == orig(this.guard)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.fai == orig(this.fai)
this.fai.headFilter == orig(this.fai.headFilter)
this.fai.tailFilter == orig(this.fai.tailFilter)
this.statusRepeatCount == orig(this.statusRepeatCount)
this.exceptionCount == orig(this.exceptionCount)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.writer == null
this.layout has only one value
this.started == false
this.name has only one value
this.context has only one value
===========================================================================
ch.qos.logback.core.WriterAppender.setWriter(java.io.Writer):::ENTER
this.writer == null
this.layout has only one value
this.started == false
this.name has only one value
this.context has only one value
writer has only one value
writer.getClass().getName() == java.io.OutputStreamWriter.class
===========================================================================
ch.qos.logback.core.WriterAppender.setWriter(java.io.Writer):::EXIT
this.immediateFlush == orig(this.immediateFlush)
this.encoding == orig(this.encoding)
this.layout == orig(this.layout)
this.layout.getClass().getName() == orig(this.layout.getClass().getName())
this.started == orig(this.started)
this.guard == orig(this.guard)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.fai == orig(this.fai)
this.fai.headFilter == orig(this.fai.headFilter)
this.fai.tailFilter == orig(this.fai.tailFilter)
this.statusRepeatCount == orig(this.statusRepeatCount)
this.exceptionCount == orig(this.exceptionCount)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.writer has only one value
this.layout has only one value
this.started == false
this.name has only one value
this.context has only one value
===========================================================================
ch.qos.logback.core.WriterAppender.start():::ENTER
this.writer has only one value
this.layout has only one value
this.started == false
this.name has only one value
this.context has only one value
===========================================================================
ch.qos.logback.core.WriterAppender.start():::EXIT
this.immediateFlush == orig(this.immediateFlush)
this.encoding == orig(this.encoding)
this.writer == orig(this.writer)
this.writer.getClass().getName() == orig(this.writer.getClass().getName())
this.layout == orig(this.layout)
this.layout.getClass().getName() == orig(this.layout.getClass().getName())
this.guard == orig(this.guard)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.fai == orig(this.fai)
this.fai.headFilter == orig(this.fai.headFilter)
this.fai.tailFilter == orig(this.fai.tailFilter)
this.statusRepeatCount == orig(this.statusRepeatCount)
this.exceptionCount == orig(this.exceptionCount)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.writer has only one value
this.layout has only one value
this.started == true
this.name has only one value
this.context has only one value
===========================================================================
ch.qos.logback.core.WriterAppender.writeFooter():::ENTER
this.writer == null
this.layout has only one value
this.started == false
this.name has only one value
this.context has only one value
===========================================================================
ch.qos.logback.core.WriterAppender.writeFooter():::EXIT
this.immediateFlush == orig(this.immediateFlush)
this.encoding == orig(this.encoding)
this.writer == orig(this.writer)
this.layout == orig(this.layout)
this.layout.getClass().getName() == orig(this.layout.getClass().getName())
this.started == orig(this.started)
this.guard == orig(this.guard)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.fai == orig(this.fai)
this.fai.headFilter == orig(this.fai.headFilter)
this.fai.tailFilter == orig(this.fai.tailFilter)
this.statusRepeatCount == orig(this.statusRepeatCount)
this.exceptionCount == orig(this.exceptionCount)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.writer == null
this.layout has only one value
this.started == false
this.name has only one value
this.context has only one value
===========================================================================
ch.qos.logback.core.WriterAppender.writeHeader():::ENTER
this.writer has only one value
this.layout has only one value
this.started == false
this.name has only one value
this.context has only one value
===========================================================================
ch.qos.logback.core.WriterAppender.writeHeader():::EXIT
this.immediateFlush == orig(this.immediateFlush)
this.encoding == orig(this.encoding)
this.writer == orig(this.writer)
this.writer.getClass().getName() == orig(this.writer.getClass().getName())
this.layout == orig(this.layout)
this.layout.getClass().getName() == orig(this.layout.getClass().getName())
this.started == orig(this.started)
this.guard == orig(this.guard)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.fai == orig(this.fai)
this.fai.headFilter == orig(this.fai.headFilter)
this.fai.tailFilter == orig(this.fai.tailFilter)
this.statusRepeatCount == orig(this.statusRepeatCount)
this.exceptionCount == orig(this.exceptionCount)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.writer has only one value
this.layout has only one value
this.started == false
this.name has only one value
this.context has only one value
===========================================================================
ch.qos.logback.core.pattern.Converter:::OBJECT
===========================================================================
ch.qos.logback.core.pattern.Converter.Converter():::EXIT
this.next == null
===========================================================================
ch.qos.logback.core.pattern.Converter.getNext():::ENTER
===========================================================================
ch.qos.logback.core.pattern.Converter.getNext():::EXIT
this.next == orig(this.next)
this.next.getClass().getName() == orig(this.next.getClass().getName())
this.next.next == orig(this.next.next)
this.next.next.getClass().getName() == orig(this.next.next.getClass().getName())
this.next.next.next == orig(this.next.next.next)
this.next.next.next.getClass().getName() == orig(this.next.next.next.getClass().getName())
===========================================================================
ch.qos.logback.core.pattern.Converter.setNext(ch.qos.logback.core.pattern.Converter):::ENTER
this.next == null
next.next == null
===========================================================================
ch.qos.logback.core.pattern.Converter.setNext(ch.qos.logback.core.pattern.Converter):::EXIT
next.next == orig(next.next)
this.next.next == null
next.next == null
===========================================================================
ch.qos.logback.core.pattern.ConverterUtil.startConverters(ch.qos.logback.core.pattern.Converter):::ENTER
head has only one value
head.getClass().getName() == ch.qos.logback.classic.pattern.DateConverter.class
head.next has only one value
head.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
head.next.next has only one value
head.next.next.getClass().getName() == ch.qos.logback.classic.pattern.ThreadConverter.class
===========================================================================
ch.qos.logback.core.pattern.ConverterUtil.startConverters(ch.qos.logback.core.pattern.Converter):::EXIT
head.next == orig(head.next)
head.next.getClass().getName() == orig(head.next.getClass().getName())
head.next.next == orig(head.next.next)
head.next.next.getClass().getName() == orig(head.next.next.getClass().getName())
head.next has only one value
head.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
head.next.next has only one value
head.next.next.getClass().getName() == ch.qos.logback.classic.pattern.ThreadConverter.class
===========================================================================
ch.qos.logback.core.pattern.DynamicConverter:::CLASS
ch.qos.logback.core.pattern.FormattingConverter.SPACES has only one value
ch.qos.logback.core.pattern.FormattingConverter.SPACES != null
ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName() == java.lang.String[].class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] contains no nulls and has only one value, of length 6
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] elements != null
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() elements == java.lang.String.class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].toString == [ ,   ,     ,         ,                 ,                                 ]
size(ch.qos.logback.core.pattern.FormattingConverter.SPACES[]) == 6
===========================================================================
ch.qos.logback.core.pattern.DynamicConverter:::OBJECT
this.optionList[].getClass().getName() == [java.lang.String]
this.optionList[].getClass().getName() elements == java.lang.String.class
this.optionList.getClass().getName() == java.util.ArrayList.class
this.formattingInfo.min == 5
this.formattingInfo.max == 2147483647
this.formattingInfo.leftPad == false
this.formattingInfo.leftTruncate == true
size(this.optionList[]) == 1
===========================================================================
ch.qos.logback.core.pattern.DynamicConverter.DynamicConverter():::EXIT
this.optionList == null
this.started == false
this.formattingInfo == null
this.next == null
===========================================================================
ch.qos.logback.core.pattern.DynamicConverter.getFirstOption():::ENTER
this.started == false
this.formattingInfo == null
this.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
===========================================================================
ch.qos.logback.core.pattern.DynamicConverter.getFirstOption():::EXIT46
this.optionList == null
this.next == null
return == null
orig(this) has only one value
orig(this.getClass().getName()) == ch.qos.logback.classic.pattern.ThrowableInformationConverter.class
===========================================================================
ch.qos.logback.core.pattern.DynamicConverter.getFirstOption():::EXIT48
===========================================================================
ch.qos.logback.core.pattern.DynamicConverter.getFirstOption():::EXIT
this.optionList == orig(this.optionList)
this.optionList[] == orig(this.optionList[])
this.optionList.getClass().getName() == orig(this.optionList.getClass().getName())
this.started == orig(this.started)
this.formattingInfo == orig(this.formattingInfo)
ch.qos.logback.core.pattern.FormattingConverter.SPACES == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES)
ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName() == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName())
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES[])
this.next == orig(this.next)
this.next.getClass().getName() == orig(this.next.getClass().getName())
this.next.next == orig(this.next.next)
this.next.next.getClass().getName() == orig(this.next.next.getClass().getName())
this.next.next.next == orig(this.next.next.next)
this.next.next.next.getClass().getName() == orig(this.next.next.next.getClass().getName())
(this.optionList == null)  <==>  (return == null)
(this.optionList == null)  <==>  (this.next == null)
(this.optionList == null)  ==>  (orig(this) has only one value)
(this.optionList == null)  ==>  (orig(this.getClass().getName()) == ch.qos.logback.classic.pattern.ThrowableInformationConverter.class)
this.started == false
this.formattingInfo == null
this.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
return.toString one of { "36", "HH:mm:ss.SSS" }
===========================================================================
ch.qos.logback.core.pattern.DynamicConverter.getOptionList():::ENTER
this.optionList[] contains no nulls and has only one value, of length 1
this.optionList[] elements has only one value
this.started == false
this.formattingInfo == null
this.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
this.next.next has only one value
this.next.next.getClass().getName() == ch.qos.logback.classic.pattern.ThreadConverter.class
this.next.next.next has only one value
this.next.next.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
===========================================================================
ch.qos.logback.core.pattern.DynamicConverter.getOptionList():::EXIT
this.optionList == orig(this.optionList)
this.optionList[] == orig(this.optionList[])
this.optionList.getClass().getName() == orig(this.optionList.getClass().getName())
this.started == orig(this.started)
this.formattingInfo == orig(this.formattingInfo)
ch.qos.logback.core.pattern.FormattingConverter.SPACES == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES)
ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName() == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName())
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES[])
this.next == orig(this.next)
this.next.getClass().getName() == orig(this.next.getClass().getName())
this.next.next == orig(this.next.next)
this.next.next.getClass().getName() == orig(this.next.next.getClass().getName())
this.next.next.next == orig(this.next.next.next)
this.next.next.next.getClass().getName() == orig(this.next.next.next.getClass().getName())
this.optionList[] contains no nulls and has only one value, of length 1
this.optionList[] elements has only one value
this.started == false
this.formattingInfo == null
this.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
this.next.next has only one value
this.next.next.getClass().getName() == ch.qos.logback.classic.pattern.ThreadConverter.class
this.next.next.next has only one value
this.next.next.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [java.lang.String]
return[].getClass().getName() elements == java.lang.String.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
===========================================================================
ch.qos.logback.core.pattern.DynamicConverter.setOptionList(java.util.List):::ENTER
this.optionList == null
this.started == false
this.next == null
optionList[].getClass().getName() == [java.lang.String]
optionList[].getClass().getName() elements == java.lang.String.class
optionList.getClass().getName() == java.util.ArrayList.class
size(optionList[]) == 1
===========================================================================
ch.qos.logback.core.pattern.DynamicConverter.setOptionList(java.util.List):::EXIT
this.started == orig(this.started)
this.formattingInfo == orig(this.formattingInfo)
this.formattingInfo.min == orig(this.formattingInfo.min)
this.formattingInfo.max == orig(this.formattingInfo.max)
this.formattingInfo.leftPad == orig(this.formattingInfo.leftPad)
this.formattingInfo.leftTruncate == orig(this.formattingInfo.leftTruncate)
ch.qos.logback.core.pattern.FormattingConverter.SPACES == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES)
ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName() == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName())
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES[])
this.next == orig(this.next)
optionList[] == orig(optionList[])
this.started == false
this.next == null
optionList[].getClass().getName() == [java.lang.String]
optionList[].getClass().getName() elements == java.lang.String.class
===========================================================================
ch.qos.logback.core.pattern.DynamicConverter.start():::ENTER
this.optionList == null
this.started == false
this.next.next.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
===========================================================================
ch.qos.logback.core.pattern.DynamicConverter.start():::EXIT
this.optionList == orig(this.optionList)
this.formattingInfo == orig(this.formattingInfo)
this.formattingInfo.min == orig(this.formattingInfo.min)
this.formattingInfo.max == orig(this.formattingInfo.max)
this.formattingInfo.leftPad == orig(this.formattingInfo.leftPad)
this.formattingInfo.leftTruncate == orig(this.formattingInfo.leftTruncate)
ch.qos.logback.core.pattern.FormattingConverter.SPACES == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES)
ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName() == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName())
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES[])
this.next == orig(this.next)
this.next.getClass().getName() == orig(this.next.getClass().getName())
this.next.next == orig(this.next.next)
this.next.next.getClass().getName() == orig(this.next.next.getClass().getName())
this.next.next.next == orig(this.next.next.next)
this.next.next.next.getClass().getName() == orig(this.next.next.next.getClass().getName())
this.optionList == null
this.started == true
this.next.next.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
===========================================================================
ch.qos.logback.core.pattern.FormatInfo:::OBJECT
this has only one value
this.min == -2147483648
this.max == 2147483647
this.leftPad == true
this.leftTruncate == true
===========================================================================
ch.qos.logback.core.pattern.FormatInfo.FormatInfo():::EXIT
===========================================================================
ch.qos.logback.core.pattern.FormatInfo.valueOf(java.lang.String):::ENTER
str has only one value
str.toString == "-5"
===========================================================================
ch.qos.logback.core.pattern.FormatInfo.valueOf(java.lang.String):::EXIT
str.toString == orig(str.toString)
str.toString == "-5"
return has only one value
return.min == 5
return.max == 2147483647
return.leftPad == false
return.leftTruncate == true
===========================================================================
ch.qos.logback.core.pattern.FormattingConverter:::CLASS
ch.qos.logback.core.pattern.FormattingConverter.SPACES has only one value
ch.qos.logback.core.pattern.FormattingConverter.SPACES != null
ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName() == java.lang.String[].class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] contains no nulls and has only one value, of length 6
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] elements != null
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() elements == java.lang.String.class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].toString == [ ,   ,     ,         ,                 ,                                 ]
size(ch.qos.logback.core.pattern.FormattingConverter.SPACES[]) == 6
===========================================================================
ch.qos.logback.core.pattern.FormattingConverter:::OBJECT
this.formattingInfo.min == 5
this.formattingInfo.max == 2147483647
this.formattingInfo.leftPad == false
this.formattingInfo.leftTruncate == true
this.next == null
===========================================================================
ch.qos.logback.core.pattern.FormattingConverter.FormattingConverter():::EXIT
this.formattingInfo == null
===========================================================================
ch.qos.logback.core.pattern.FormattingConverter.setFormattingInfo(ch.qos.logback.core.pattern.FormatInfo):::ENTER
this.formattingInfo == null
formattingInfo.min == 5
formattingInfo.max == 2147483647
formattingInfo.leftPad == false
formattingInfo.leftTruncate == true
===========================================================================
ch.qos.logback.core.pattern.FormattingConverter.setFormattingInfo(ch.qos.logback.core.pattern.FormatInfo):::EXIT
ch.qos.logback.core.pattern.FormattingConverter.SPACES == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES)
ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName() == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName())
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] == orig(ch.qos.logback.core.pattern.FormattingConverter.SPACES[])
this.next == orig(this.next)
formattingInfo.min == orig(formattingInfo.min)
formattingInfo.max == orig(formattingInfo.max)
formattingInfo.leftPad == orig(formattingInfo.leftPad)
formattingInfo.leftTruncate == orig(formattingInfo.leftTruncate)
formattingInfo.min == 5
formattingInfo.max == 2147483647
formattingInfo.leftPad == false
formattingInfo.leftTruncate == true
===========================================================================
ch.qos.logback.core.pattern.LiteralConverter:::OBJECT
this.next == null
===========================================================================
ch.qos.logback.core.pattern.LiteralConverter.LiteralConverter(java.lang.String):::ENTER
===========================================================================
ch.qos.logback.core.pattern.LiteralConverter.LiteralConverter(java.lang.String):::EXIT
literal.toString == orig(literal.toString)
===========================================================================
ch.qos.logback.core.pattern.PatternLayoutBase:::OBJECT
this has only one value
this.getClass().getName() == ch.qos.logback.classic.PatternLayout.class
this.head.getClass().getName() == ch.qos.logback.classic.pattern.DateConverter.class
this.head.next has only one value
this.head.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
this.head.next.next has only one value
this.head.next.next.getClass().getName() == ch.qos.logback.classic.pattern.ThreadConverter.class
this.pattern.toString == "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
this.instanceConverterMap has only one value
this.instanceConverterMap.getClass().getName() == java.util.HashMap.class
this.fileHeader == null
this.fileFooter == null
this.presentationHeader == null
this.presentationFooter == null
this.noContextWarning == 0
this.context.getClass().getName() == ch.qos.logback.classic.LoggerContext.class
===========================================================================
ch.qos.logback.core.pattern.PatternLayoutBase.PatternLayoutBase():::EXIT
this.head == null
this.pattern == null
this.started == false
this.context == null
===========================================================================
ch.qos.logback.core.pattern.PatternLayoutBase.findTail(ch.qos.logback.core.pattern.Converter):::ENTER
this.head has only one value
this.pattern has only one value
this.started == false
this.context has only one value
head has only one value
head.getClass().getName() == ch.qos.logback.classic.pattern.DateConverter.class
head.next has only one value
head.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
head.next.next has only one value
head.next.next.getClass().getName() == ch.qos.logback.classic.pattern.ThreadConverter.class
===========================================================================
ch.qos.logback.core.pattern.PatternLayoutBase.findTail(ch.qos.logback.core.pattern.Converter):::EXIT
this.head == orig(this.head)
this.head.getClass().getName() == orig(this.head.getClass().getName())
this.head.next == orig(this.head.next)
this.head.next.getClass().getName() == orig(this.head.next.getClass().getName())
this.head.next.next == orig(this.head.next.next)
this.head.next.next.getClass().getName() == orig(this.head.next.next.getClass().getName())
this.pattern == orig(this.pattern)
this.pattern.toString == orig(this.pattern.toString)
this.instanceConverterMap == orig(this.instanceConverterMap)
this.instanceConverterMap.getClass().getName() == orig(this.instanceConverterMap.getClass().getName())
this.started == orig(this.started)
this.fileHeader == orig(this.fileHeader)
this.fileFooter == orig(this.fileFooter)
this.presentationHeader == orig(this.presentationHeader)
this.presentationFooter == orig(this.presentationFooter)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
head.next == orig(head.next)
head.next.getClass().getName() == orig(head.next.getClass().getName())
head.next.next == orig(head.next.next)
head.next.next.getClass().getName() == orig(head.next.next.getClass().getName())
this.head has only one value
this.pattern has only one value
this.started == false
this.context has only one value
head.next has only one value
head.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
head.next.next has only one value
head.next.next.getClass().getName() == ch.qos.logback.classic.pattern.ThreadConverter.class
return has only one value
return.getClass().getName() == ch.qos.logback.classic.pattern.LineSeparatorConverter.class
return.next == null
===========================================================================
ch.qos.logback.core.pattern.PatternLayoutBase.getEffectiveConverterMap():::ENTER
this.head == null
this.pattern has only one value
this.started == false
this.context has only one value
===========================================================================
ch.qos.logback.core.pattern.PatternLayoutBase.getEffectiveConverterMap():::EXIT
this.head == orig(this.head)
this.pattern == orig(this.pattern)
this.pattern.toString == orig(this.pattern.toString)
this.instanceConverterMap == orig(this.instanceConverterMap)
this.instanceConverterMap.getClass().getName() == orig(this.instanceConverterMap.getClass().getName())
this.started == orig(this.started)
this.fileHeader == orig(this.fileHeader)
this.fileFooter == orig(this.fileFooter)
this.presentationHeader == orig(this.presentationHeader)
this.presentationFooter == orig(this.presentationFooter)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.head == null
this.pattern has only one value
this.started == false
this.context has only one value
return has only one value
return.getClass().getName() == java.util.HashMap.class
===========================================================================
ch.qos.logback.core.pattern.PatternLayoutBase.setContextForConverters(ch.qos.logback.core.pattern.Converter):::ENTER
this.head has only one value
this.pattern has only one value
this.started == false
this.context has only one value
head has only one value
head.getClass().getName() == ch.qos.logback.classic.pattern.DateConverter.class
head.next has only one value
head.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
head.next.next has only one value
head.next.next.getClass().getName() == ch.qos.logback.classic.pattern.ThreadConverter.class
===========================================================================
ch.qos.logback.core.pattern.PatternLayoutBase.setContextForConverters(ch.qos.logback.core.pattern.Converter):::EXIT
this.head == orig(this.head)
this.head.getClass().getName() == orig(this.head.getClass().getName())
this.head.next == orig(this.head.next)
this.head.next.getClass().getName() == orig(this.head.next.getClass().getName())
this.head.next.next == orig(this.head.next.next)
this.head.next.next.getClass().getName() == orig(this.head.next.next.getClass().getName())
this.pattern == orig(this.pattern)
this.pattern.toString == orig(this.pattern.toString)
this.instanceConverterMap == orig(this.instanceConverterMap)
this.instanceConverterMap.getClass().getName() == orig(this.instanceConverterMap.getClass().getName())
this.started == orig(this.started)
this.fileHeader == orig(this.fileHeader)
this.fileFooter == orig(this.fileFooter)
this.presentationHeader == orig(this.presentationHeader)
this.presentationFooter == orig(this.presentationFooter)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
head.next == orig(head.next)
head.next.getClass().getName() == orig(head.next.getClass().getName())
head.next.next == orig(head.next.next)
head.next.next.getClass().getName() == orig(head.next.next.getClass().getName())
this.head has only one value
this.pattern has only one value
this.started == false
this.context has only one value
head.next has only one value
head.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
head.next.next has only one value
head.next.next.getClass().getName() == ch.qos.logback.classic.pattern.ThreadConverter.class
===========================================================================
ch.qos.logback.core.pattern.PatternLayoutBase.setPattern(java.lang.String):::ENTER
this.head == null
this.pattern == null
this.started == false
this.context has only one value
pattern has only one value
pattern.toString == "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
===========================================================================
ch.qos.logback.core.pattern.PatternLayoutBase.setPattern(java.lang.String):::EXIT
this.head == orig(this.head)
this.instanceConverterMap == orig(this.instanceConverterMap)
this.instanceConverterMap.getClass().getName() == orig(this.instanceConverterMap.getClass().getName())
this.started == orig(this.started)
this.fileHeader == orig(this.fileHeader)
this.fileFooter == orig(this.fileFooter)
this.presentationHeader == orig(this.presentationHeader)
this.presentationFooter == orig(this.presentationFooter)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
pattern.toString == orig(pattern.toString)
this.head == null
this.pattern has only one value
this.started == false
this.context has only one value
pattern.toString == "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
===========================================================================
ch.qos.logback.core.pattern.PatternLayoutBase.start():::ENTER
this.head == null
this.pattern has only one value
this.started == false
this.context has only one value
===========================================================================
ch.qos.logback.core.pattern.PatternLayoutBase.start():::EXIT
this.pattern == orig(this.pattern)
this.pattern.toString == orig(this.pattern.toString)
this.instanceConverterMap == orig(this.instanceConverterMap)
this.instanceConverterMap.getClass().getName() == orig(this.instanceConverterMap.getClass().getName())
this.fileHeader == orig(this.fileHeader)
this.fileFooter == orig(this.fileFooter)
this.presentationHeader == orig(this.presentationHeader)
this.presentationFooter == orig(this.presentationFooter)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.head has only one value
this.pattern has only one value
this.started == true
this.context has only one value
===========================================================================
ch.qos.logback.core.pattern.parser.Compiler:::OBJECT
this has only one value
this.head.getClass().getName() == ch.qos.logback.classic.pattern.DateConverter.class
this.head.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
this.head.next.next.getClass().getName() == ch.qos.logback.classic.pattern.ThreadConverter.class
this.tail.next == null
this.top has only one value
this.top != null
this.top.type == 1
this.top.value has only one value
this.top.value != null
this.top.value.getClass().getName() == java.lang.String.class
this.top.next has only one value
this.top.next != null
this.top.next.type == 0
this.top.next.value has only one value
this.top.next.value != null
this.top.next.value.getClass().getName() == java.lang.String.class
this.top.next.next has only one value
this.top.next.next != null
this.converterMap has only one value
this.converterMap != null
this.converterMap.getClass().getName() == java.util.HashMap.class
this.noContextWarning == 0
this.context.getClass().getName() == ch.qos.logback.classic.LoggerContext.class
===========================================================================
ch.qos.logback.core.pattern.parser.Compiler.Compiler(ch.qos.logback.core.pattern.parser.Node, java.util.Map):::ENTER
top has only one value
top.type == 1
top.value has only one value
top.value.getClass().getName() == java.lang.String.class
top.next has only one value
top.next.type == 0
top.next.value has only one value
top.next.value.getClass().getName() == java.lang.String.class
top.next.next has only one value
converterMap has only one value
converterMap.getClass().getName() == java.util.HashMap.class
===========================================================================
ch.qos.logback.core.pattern.parser.Compiler.Compiler(ch.qos.logback.core.pattern.parser.Node, java.util.Map):::EXIT
top.type == orig(top.type)
top.value == orig(top.value)
top.value.getClass().getName() == orig(top.value.getClass().getName())
top.next == orig(top.next)
top.next.type == orig(top.next.type)
top.next.value == orig(top.next.value)
top.next.value.getClass().getName() == orig(top.next.value.getClass().getName())
top.next.next == orig(top.next.next)
this.head == null
this.tail == null
this.context == null
top.type == 1
top.value has only one value
top.value.getClass().getName() == java.lang.String.class
top.next has only one value
top.next.type == 0
top.next.value has only one value
top.next.value.getClass().getName() == java.lang.String.class
top.next.next has only one value
===========================================================================
ch.qos.logback.core.pattern.parser.Compiler.addToList(ch.qos.logback.core.pattern.Converter):::ENTER
this.context has only one value
c.next == null
===========================================================================
ch.qos.logback.core.pattern.parser.Compiler.addToList(ch.qos.logback.core.pattern.Converter):::EXIT
this.head.getClass().getName() == orig(this.head.getClass().getName())
this.head.next.getClass().getName() == orig(this.head.next.getClass().getName())
this.head.next.next.getClass().getName() == orig(this.head.next.next.getClass().getName())
this.tail.next == orig(this.tail.next)
this.top == orig(this.top)
this.top.type == orig(this.top.type)
this.top.value == orig(this.top.value)
this.top.value.getClass().getName() == orig(this.top.value.getClass().getName())
this.top.next == orig(this.top.next)
this.top.next.type == orig(this.top.next.type)
this.top.next.value == orig(this.top.next.value)
this.top.next.value.getClass().getName() == orig(this.top.next.value.getClass().getName())
this.top.next.next == orig(this.top.next.next)
this.converterMap == orig(this.converterMap)
this.converterMap.getClass().getName() == orig(this.converterMap.getClass().getName())
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
c.next == orig(c.next)
this.head has only one value
this.context has only one value
c.next == null
this.tail.getClass().getName() != orig(this.tail.getClass().getName())
===========================================================================
ch.qos.logback.core.pattern.parser.Compiler.compile():::ENTER
this.head == null
this.tail == null
this.context has only one value
===========================================================================
ch.qos.logback.core.pattern.parser.Compiler.compile():::EXIT
this.top == orig(this.top)
this.top.type == orig(this.top.type)
this.top.value == orig(this.top.value)
this.top.value.getClass().getName() == orig(this.top.value.getClass().getName())
this.top.next == orig(this.top.next)
this.top.next.type == orig(this.top.next.type)
this.top.next.value == orig(this.top.next.value)
this.top.next.value.getClass().getName() == orig(this.top.next.value.getClass().getName())
this.top.next.next == orig(this.top.next.next)
this.converterMap == orig(this.converterMap)
this.converterMap.getClass().getName() == orig(this.converterMap.getClass().getName())
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.head has only one value
this.head.next has only one value
this.head.next.next has only one value
this.tail has only one value
this.tail.getClass().getName() == ch.qos.logback.classic.pattern.LineSeparatorConverter.class
this.context has only one value
return has only one value
return.getClass().getName() == ch.qos.logback.classic.pattern.DateConverter.class
return.next has only one value
return.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
return.next.next has only one value
return.next.next.getClass().getName() == ch.qos.logback.classic.pattern.ThreadConverter.class
===========================================================================
ch.qos.logback.core.pattern.parser.Compiler.createConverter(ch.qos.logback.core.pattern.parser.KeywordNode):::ENTER
this.head.next has only one value
this.context has only one value
kn.optionList[].getClass().getName() == [java.lang.String]
kn.optionList[].getClass().getName() elements == java.lang.String.class
kn.optionList.getClass().getName() == java.util.ArrayList.class
kn.formatInfo.min == 5
kn.formatInfo.max == 2147483647
kn.formatInfo.leftPad == false
kn.formatInfo.leftTruncate == true
kn.type == 1
kn.value.getClass().getName() == java.lang.String.class
kn.next.type one of { 0, 1 }
kn.next.value.getClass().getName() == java.lang.String.class
size(kn.optionList[]) == 1
===========================================================================
ch.qos.logback.core.pattern.parser.Compiler.createConverter(ch.qos.logback.core.pattern.parser.KeywordNode):::EXIT96
===========================================================================
ch.qos.logback.core.pattern.parser.Compiler.createConverter(ch.qos.logback.core.pattern.parser.KeywordNode):::EXIT
this.head == orig(this.head)
this.head.getClass().getName() == orig(this.head.getClass().getName())
this.head.next == orig(this.head.next)
this.head.next.getClass().getName() == orig(this.head.next.getClass().getName())
this.head.next.next == orig(this.head.next.next)
this.head.next.next.getClass().getName() == orig(this.head.next.next.getClass().getName())
this.tail == orig(this.tail)
this.tail.getClass().getName() == orig(this.tail.getClass().getName())
this.tail.next == orig(this.tail.next)
this.top == orig(this.top)
this.top.type == orig(this.top.type)
this.top.value == orig(this.top.value)
this.top.value.getClass().getName() == orig(this.top.value.getClass().getName())
this.top.next == orig(this.top.next)
this.top.next.type == orig(this.top.next.type)
this.top.next.value == orig(this.top.next.value)
this.top.next.value.getClass().getName() == orig(this.top.next.value.getClass().getName())
this.top.next.next == orig(this.top.next.next)
this.converterMap == orig(this.converterMap)
this.converterMap.getClass().getName() == orig(this.converterMap.getClass().getName())
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
kn.optionList == orig(kn.optionList)
kn.optionList[] == orig(kn.optionList[])
kn.optionList.getClass().getName() == orig(kn.optionList.getClass().getName())
kn.formatInfo == orig(kn.formatInfo)
kn.formatInfo.min == orig(kn.formatInfo.min)
kn.formatInfo.max == orig(kn.formatInfo.max)
kn.formatInfo.leftPad == orig(kn.formatInfo.leftPad)
kn.formatInfo.leftTruncate == orig(kn.formatInfo.leftTruncate)
kn.type == orig(kn.type)
kn.value == orig(kn.value)
kn.value.getClass().getName() == orig(kn.value.getClass().getName())
kn.next == orig(kn.next)
kn.next.type == orig(kn.next.type)
kn.next.value == orig(kn.next.value)
kn.next.value.getClass().getName() == orig(kn.next.value.getClass().getName())
kn.next.next == orig(kn.next.next)
this.head.next has only one value
this.context has only one value
kn.optionList[].getClass().getName() == [java.lang.String]
kn.optionList[].getClass().getName() elements == java.lang.String.class
kn.optionList.getClass().getName() == java.util.ArrayList.class
kn.formatInfo.min == 5
kn.formatInfo.max == 2147483647
kn.formatInfo.leftPad == false
kn.formatInfo.leftTruncate == true
kn.type == 1
kn.value.getClass().getName() == java.lang.String.class
kn.next.type one of { 0, 1 }
kn.next.value.getClass().getName() == java.lang.String.class
return.optionList == null
return.started == false
return.formattingInfo == null
ch.qos.logback.core.pattern.FormattingConverter.SPACES has only one value
ch.qos.logback.core.pattern.FormattingConverter.SPACES.getClass().getName() == java.lang.String[].class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[] contains no nulls and has only one value, of length 6
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].getClass().getName() elements == java.lang.String.class
ch.qos.logback.core.pattern.FormattingConverter.SPACES[].toString == [ ,   ,     ,         ,                 ,                                 ]
return.next == null
size(kn.optionList[]) == 1
size(ch.qos.logback.core.pattern.FormattingConverter.SPACES[]) == 6
===========================================================================
ch.qos.logback.core.pattern.parser.FormattingNode:::CLASS
===========================================================================
ch.qos.logback.core.pattern.parser.FormattingNode:::OBJECT
this.formatInfo.min == 5
this.formatInfo.max == 2147483647
this.formatInfo.leftPad == false
this.formatInfo.leftTruncate == true
this.type == 1
this.value != null
this.value.getClass().getName() == java.lang.String.class
this.next.type one of { 0, 1 }
this.next.value.getClass().getName() == java.lang.String.class
this.next.next.type == 1
this.next.next.value.getClass().getName() == java.lang.String.class
===========================================================================
ch.qos.logback.core.pattern.parser.FormattingNode.FormattingNode(int, java.lang.Object):::ENTER
type == 1
value.getClass().getName() == java.lang.String.class
===========================================================================
ch.qos.logback.core.pattern.parser.FormattingNode.FormattingNode(int, java.lang.Object):::EXIT
this.formatInfo == null
this.next == null
===========================================================================
ch.qos.logback.core.pattern.parser.FormattingNode.getFormatInfo():::ENTER
===========================================================================
ch.qos.logback.core.pattern.parser.FormattingNode.getFormatInfo():::EXIT
this.formatInfo == orig(this.formatInfo)
this.formatInfo.min == orig(this.formatInfo.min)
this.formatInfo.max == orig(this.formatInfo.max)
this.formatInfo.leftPad == orig(this.formatInfo.leftPad)
this.formatInfo.leftTruncate == orig(this.formatInfo.leftTruncate)
this.type == orig(this.type)
this.value == orig(this.value)
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.next == orig(this.next)
this.next.type == orig(this.next.type)
this.next.value == orig(this.next.value)
this.next.value.getClass().getName() == orig(this.next.value.getClass().getName())
this.next.next == orig(this.next.next)
this.next.next.type == orig(this.next.next.type)
this.next.next.value == orig(this.next.next.value)
this.next.next.value.getClass().getName() == orig(this.next.next.value.getClass().getName())
this.next.next.next == orig(this.next.next.next)
return.min == 5
return.max == 2147483647
return.leftPad == false
return.leftTruncate == true
===========================================================================
ch.qos.logback.core.pattern.parser.FormattingNode.setFormatInfo(ch.qos.logback.core.pattern.FormatInfo):::ENTER
this has only one value
this.formatInfo == null
this.value has only one value
this.next == null
formatInfo has only one value
formatInfo.min == 5
formatInfo.max == 2147483647
formatInfo.leftPad == false
formatInfo.leftTruncate == true
===========================================================================
ch.qos.logback.core.pattern.parser.FormattingNode.setFormatInfo(ch.qos.logback.core.pattern.FormatInfo):::EXIT
this.type == orig(this.type)
this.value == orig(this.value)
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.next == orig(this.next)
formatInfo.min == orig(formatInfo.min)
formatInfo.max == orig(formatInfo.max)
formatInfo.leftPad == orig(formatInfo.leftPad)
formatInfo.leftTruncate == orig(formatInfo.leftTruncate)
this.formatInfo has only one value
this.value has only one value
this.next == null
formatInfo.min == 5
formatInfo.max == 2147483647
formatInfo.leftPad == false
formatInfo.leftTruncate == true
===========================================================================
ch.qos.logback.core.pattern.parser.KeywordNode:::CLASS
===========================================================================
ch.qos.logback.core.pattern.parser.KeywordNode:::OBJECT
this.optionList[].getClass().getName() == [java.lang.String]
this.optionList[].getClass().getName() elements == java.lang.String.class
this.optionList.getClass().getName() == java.util.ArrayList.class
this.formatInfo.min == 5
this.formatInfo.max == 2147483647
this.formatInfo.leftPad == false
this.formatInfo.leftTruncate == true
this.type == 1
this.value != null
this.value.getClass().getName() == java.lang.String.class
this.next.type one of { 0, 1 }
this.next.value.getClass().getName() == java.lang.String.class
this.next.next.type == 1
this.next.next.value.getClass().getName() == java.lang.String.class
size(this.optionList[]) == 1
===========================================================================
ch.qos.logback.core.pattern.parser.KeywordNode.KeywordNode(java.lang.Object):::ENTER
value.getClass().getName() == java.lang.String.class
===========================================================================
ch.qos.logback.core.pattern.parser.KeywordNode.KeywordNode(java.lang.Object):::EXIT
this.optionList == null
this.formatInfo == null
this.next == null
===========================================================================
ch.qos.logback.core.pattern.parser.KeywordNode.getOptions():::ENTER
===========================================================================
ch.qos.logback.core.pattern.parser.KeywordNode.getOptions():::EXIT
this.optionList == orig(this.optionList)
this.optionList[] == orig(this.optionList[])
this.optionList.getClass().getName() == orig(this.optionList.getClass().getName())
this.formatInfo == orig(this.formatInfo)
this.formatInfo.min == orig(this.formatInfo.min)
this.formatInfo.max == orig(this.formatInfo.max)
this.formatInfo.leftPad == orig(this.formatInfo.leftPad)
this.formatInfo.leftTruncate == orig(this.formatInfo.leftTruncate)
this.type == orig(this.type)
this.value == orig(this.value)
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.next == orig(this.next)
this.next.type == orig(this.next.type)
this.next.value == orig(this.next.value)
this.next.value.getClass().getName() == orig(this.next.value.getClass().getName())
this.next.next == orig(this.next.next)
this.next.next.type == orig(this.next.next.type)
this.next.next.value == orig(this.next.next.value)
this.next.next.value.getClass().getName() == orig(this.next.next.value.getClass().getName())
this.next.next.next == orig(this.next.next.next)
return[].getClass().getName() == [java.lang.String]
return[].getClass().getName() elements == java.lang.String.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
===========================================================================
ch.qos.logback.core.pattern.parser.KeywordNode.setOptions(java.util.List):::ENTER
this.optionList == null
this.formatInfo == null
this.next == null
optionList[].getClass().getName() == [java.lang.String]
optionList[].getClass().getName() elements == java.lang.String.class
optionList.getClass().getName() == java.util.ArrayList.class
size(optionList[]) == 1
===========================================================================
ch.qos.logback.core.pattern.parser.KeywordNode.setOptions(java.util.List):::EXIT
this.formatInfo == orig(this.formatInfo)
this.type == orig(this.type)
this.value == orig(this.value)
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.next == orig(this.next)
optionList[] == orig(optionList[])
this.formatInfo == null
this.next == null
optionList[].getClass().getName() == [java.lang.String]
optionList[].getClass().getName() elements == java.lang.String.class
===========================================================================
ch.qos.logback.core.pattern.parser.Node:::CLASS
===========================================================================
ch.qos.logback.core.pattern.parser.Node:::OBJECT
this.type one of { 0, 1 }
this.value != null
this.value.getClass().getName() == java.lang.String.class
this.next.type one of { 0, 1 }
this.next.value != null
this.next.value.getClass().getName() == java.lang.String.class
this.next.next.type one of { 0, 1 }
this.next.next.value != null
this.next.next.value.getClass().getName() == java.lang.String.class
===========================================================================
ch.qos.logback.core.pattern.parser.Node.Node(int, java.lang.Object):::ENTER
type one of { 0, 1 }
value.getClass().getName() == java.lang.String.class
===========================================================================
ch.qos.logback.core.pattern.parser.Node.Node(int, java.lang.Object):::EXIT
this.next == null
===========================================================================
ch.qos.logback.core.pattern.parser.Node.getValue():::ENTER
===========================================================================
ch.qos.logback.core.pattern.parser.Node.getValue():::EXIT
this.type == orig(this.type)
this.value == orig(this.value)
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.next == orig(this.next)
this.next.type == orig(this.next.type)
this.next.value == orig(this.next.value)
this.next.value.getClass().getName() == orig(this.next.value.getClass().getName())
this.next.next == orig(this.next.next)
this.next.next.type == orig(this.next.next.type)
this.next.next.value == orig(this.next.next.value)
this.next.next.value.getClass().getName() == orig(this.next.next.value.getClass().getName())
this.next.next.next == orig(this.next.next.next)
return.getClass().getName() == java.lang.String.class
===========================================================================
ch.qos.logback.core.pattern.parser.Node.setNext(ch.qos.logback.core.pattern.parser.Node):::ENTER
this.next == null
next.type one of { 0, 1 }
next.value.getClass().getName() == java.lang.String.class
next.next.type one of { 0, 1 }
next.next.value.getClass().getName() == java.lang.String.class
===========================================================================
ch.qos.logback.core.pattern.parser.Node.setNext(ch.qos.logback.core.pattern.parser.Node):::EXIT
this.type == orig(this.type)
this.value == orig(this.value)
this.value.getClass().getName() == orig(this.value.getClass().getName())
next.type == orig(next.type)
next.value == orig(next.value)
next.value.getClass().getName() == orig(next.value.getClass().getName())
next.next == orig(next.next)
next.next.type == orig(next.next.type)
next.next.value == orig(next.next.value)
next.next.value.getClass().getName() == orig(next.next.value.getClass().getName())
next.next.next == orig(next.next.next)
next.type one of { 0, 1 }
next.value.getClass().getName() == java.lang.String.class
next.next.type one of { 0, 1 }
next.next.value.getClass().getName() == java.lang.String.class
===========================================================================
ch.qos.logback.core.pattern.parser.OptionTokenizer:::CLASS
===========================================================================
ch.qos.logback.core.pattern.parser.OptionTokenizer:::OBJECT
this.pattern.toString one of { "36", "HH:mm:ss.SSS" }
this.patternLength one of { 2, 12 }
this.quoteChar == 0
this.pointer one of { 0, 2, 12 }
this.state one of { 0, 1 }
===========================================================================
ch.qos.logback.core.pattern.parser.OptionTokenizer.OptionTokenizer(java.lang.String):::ENTER
pattern.toString one of { "36", "HH:mm:ss.SSS" }
===========================================================================
ch.qos.logback.core.pattern.parser.OptionTokenizer.OptionTokenizer(java.lang.String):::EXIT
pattern.toString == orig(pattern.toString)
this.pointer == 0
this.state == 0
pattern.toString one of { "36", "HH:mm:ss.SSS" }
===========================================================================
ch.qos.logback.core.pattern.parser.OptionTokenizer.tokenize():::ENTER
this.pointer == 0
this.state == 0
===========================================================================
ch.qos.logback.core.pattern.parser.OptionTokenizer.tokenize():::EXIT
this.pattern == orig(this.pattern)
this.pattern.toString == orig(this.pattern.toString)
this.patternLength == orig(this.patternLength)
this.quoteChar == orig(this.quoteChar)
this.pointer one of { 2, 12 }
this.state == 1
return[].getClass().getName() == [java.lang.String]
return[].getClass().getName() elements == java.lang.String.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
===========================================================================
ch.qos.logback.core.pattern.parser.Parser:::OBJECT
this has only one value
this.tokenList has only one value
this.tokenList != null
this.tokenList[] contains no nulls and has only one value, of length 19
this.tokenList[] elements != null
this.tokenList[].getClass().getName() == [ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token]
this.tokenList[].getClass().getName() elements == ch.qos.logback.core.pattern.parser.Token.class
this.tokenList.getClass().getName() == java.util.ArrayList.class
this.pointer >= 0
this.noContextWarning == 0
this.context.getClass().getName() == ch.qos.logback.classic.LoggerContext.class
size(this.tokenList[]) == 19
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.C():::ENTER
this.context has only one value
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.C():::EXIT119
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.C():::EXIT
this.tokenList == orig(this.tokenList)
this.tokenList[] == orig(this.tokenList[])
this.tokenList.getClass().getName() == orig(this.tokenList.getClass().getName())
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.context has only one value
return.formatInfo == null
return.type == 1
return.value.getClass().getName() == java.lang.String.class
return.next == null
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.E():::ENTER
this.context has only one value
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.E():::EXIT60
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.E():::EXIT
this.tokenList == orig(this.tokenList)
this.tokenList[] == orig(this.tokenList[])
this.tokenList.getClass().getName() == orig(this.tokenList.getClass().getName())
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.pointer == 19
this.context has only one value
return.type one of { 0, 1 }
return.value.getClass().getName() == java.lang.String.class
return.next.type one of { 0, 1 }
return.next.value.getClass().getName() == java.lang.String.class
this.pointer > orig(this.pointer)
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.Eopt():::ENTER
this.context has only one value
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.Eopt():::EXIT105
this.pointer == orig(this.pointer)
return == null
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.Eopt():::EXIT107
this.pointer > orig(this.pointer)
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.Eopt():::EXIT
this.tokenList == orig(this.tokenList)
this.tokenList[] == orig(this.tokenList[])
this.tokenList.getClass().getName() == orig(this.tokenList.getClass().getName())
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
(return == null)  <==>  (orig(this.pointer) == 19)
(return == null)  <==>  (this.pointer == orig(this.pointer))
this.pointer == 19
this.context has only one value
return.type one of { 0, 1 }
return.value.getClass().getName() == java.lang.String.class
return.next.type one of { 0, 1 }
return.next.value.getClass().getName() == java.lang.String.class
this.pointer >= orig(this.pointer)
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.Parser(java.lang.String):::ENTER
pattern has only one value
pattern.toString == "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.Parser(java.lang.String):::EXIT
pattern.toString == orig(pattern.toString)
this.pointer == 0
this.context == null
pattern.toString == "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.SINGLE():::ENTER
this.context has only one value
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.SINGLE():::EXIT
this.tokenList == orig(this.tokenList)
this.tokenList[] == orig(this.tokenList[])
this.tokenList.getClass().getName() == orig(this.tokenList.getClass().getName())
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.context has only one value
return.formatInfo == null
return.type == 1
return.value.getClass().getName() == java.lang.String.class
return.next == null
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.T():::ENTER
this.context has only one value
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.T():::EXIT75
return.type == 0
this.pointer - orig(this.pointer) - 1 == 0
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.T():::EXIT91
return.type == 1
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.T():::EXIT
this.tokenList == orig(this.tokenList)
this.tokenList[] == orig(this.tokenList[])
this.tokenList.getClass().getName() == orig(this.tokenList.getClass().getName())
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.context has only one value
return.type one of { 0, 1 }
return.value.getClass().getName() == java.lang.String.class
return.next == null
this.pointer > orig(this.pointer)
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.advanceTokenPointer():::ENTER
this.context has only one value
this.context != null
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.advanceTokenPointer():::EXIT
this.tokenList == orig(this.tokenList)
this.tokenList[] == orig(this.tokenList[])
this.tokenList.getClass().getName() == orig(this.tokenList.getClass().getName())
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.context has only one value
this.context != null
this.pointer - orig(this.pointer) - 1 == 0
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.compile(ch.qos.logback.core.pattern.parser.Node, java.util.Map):::ENTER
this.pointer == 19
this.context has only one value
top has only one value
top.type == 1
top.value has only one value
top.value.getClass().getName() == java.lang.String.class
top.next has only one value
top.next.type == 0
top.next.value has only one value
top.next.value.getClass().getName() == java.lang.String.class
top.next.next has only one value
converterMap has only one value
converterMap.getClass().getName() == java.util.HashMap.class
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.compile(ch.qos.logback.core.pattern.parser.Node, java.util.Map):::EXIT
this.tokenList == orig(this.tokenList)
this.tokenList[] == orig(this.tokenList[])
this.tokenList.getClass().getName() == orig(this.tokenList.getClass().getName())
this.pointer == orig(this.pointer)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
top.type == orig(top.type)
top.value == orig(top.value)
top.value.getClass().getName() == orig(top.value.getClass().getName())
top.next == orig(top.next)
top.next.type == orig(top.next.type)
top.next.value == orig(top.next.value)
top.next.value.getClass().getName() == orig(top.next.value.getClass().getName())
top.next.next == orig(top.next.next)
this.pointer == 19
this.context has only one value
top.type == 1
top.value has only one value
top.value.getClass().getName() == java.lang.String.class
top.next has only one value
top.next.type == 0
top.next.value has only one value
top.next.value.getClass().getName() == java.lang.String.class
top.next.next has only one value
return has only one value
return.getClass().getName() == ch.qos.logback.classic.pattern.DateConverter.class
return.next has only one value
return.next.getClass().getName() == ch.qos.logback.core.pattern.LiteralConverter.class
return.next.next has only one value
return.next.next.getClass().getName() == ch.qos.logback.classic.pattern.ThreadConverter.class
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.expectNotNull(ch.qos.logback.core.pattern.parser.Token, java.lang.String):::ENTER
this.context has only one value
this.context != null
t != null
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN has only one value
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN != null
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN has only one value
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN != null
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN has only one value
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN != null
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN has only one value
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN != null
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.type == 2147483647
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value has only one value
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value != null
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value.getClass().getName() == java.lang.String.class
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN.type == 41
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN.value == null
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN.type == 40
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN.value == null
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN.type == 37
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN.value == null
t.type one of { 1002, 1004 }
t.value != null
t.value.getClass().getName() == java.lang.String.class
expected != null
expected.toString one of { "a FORMAT_MODIFIER, KEYWORD or LEFT_PARENTHESIS", "a LEFT_PARENTHESIS or KEYWORD" }
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.expectNotNull(ch.qos.logback.core.pattern.parser.Token, java.lang.String):::EXIT
this.tokenList == orig(this.tokenList)
this.tokenList[] == orig(this.tokenList[])
this.tokenList.getClass().getName() == orig(this.tokenList.getClass().getName())
this.pointer == orig(this.pointer)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN == orig(ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN)
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN == orig(ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN)
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN == orig(ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN)
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN == orig(ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN)
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.type == orig(ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.type)
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value == orig(ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value)
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value.getClass().getName() == orig(ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value.getClass().getName())
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN.type == orig(ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN.type)
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN.value == orig(ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN.value)
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN.type == orig(ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN.type)
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN.value == orig(ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN.value)
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN.type == orig(ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN.type)
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN.value == orig(ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN.value)
t.type == orig(t.type)
t.value == orig(t.value)
t.value.getClass().getName() == orig(t.value.getClass().getName())
expected.toString == orig(expected.toString)
this.context has only one value
this.context != null
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN has only one value
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN != null
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN has only one value
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN != null
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN has only one value
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN != null
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN has only one value
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN != null
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.type == 2147483647
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value has only one value
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value != null
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value.getClass().getName() == java.lang.String.class
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN.type == 41
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN.value == null
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN.type == 40
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN.value == null
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN.type == 37
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN.value == null
t.type one of { 1002, 1004 }
t.value != null
t.value.getClass().getName() == java.lang.String.class
expected.toString one of { "a FORMAT_MODIFIER, KEYWORD or LEFT_PARENTHESIS", "a LEFT_PARENTHESIS or KEYWORD" }
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.getCurentToken():::ENTER
this.context has only one value
this.context != null
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.getCurentToken():::EXIT172
return != null
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.getCurentToken():::EXIT174
this.pointer == 19
return == null
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.getCurentToken():::EXIT
this.tokenList == orig(this.tokenList)
this.tokenList[] == orig(this.tokenList[])
this.tokenList.getClass().getName() == orig(this.tokenList.getClass().getName())
this.pointer == orig(this.pointer)
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
(return != null)  ==>  (return.value.getClass().getName() == java.lang.String.class)
(this.pointer == 19)  <==>  (return == null)
this.context has only one value
this.context != null
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN has only one value
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN != null
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN has only one value
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN != null
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN has only one value
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN != null
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN has only one value
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN != null
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.type == 2147483647
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value has only one value
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value != null
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value.getClass().getName() == java.lang.String.class
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN.type == 41
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN.value == null
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN.type == 40
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN.value == null
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN.type == 37
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN.value == null
return.value.getClass().getName() == java.lang.String.class
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.getNextToken():::ENTER
this.context has only one value
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.getNextToken():::EXIT165
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.getNextToken():::EXIT
this.tokenList == orig(this.tokenList)
this.tokenList[] == orig(this.tokenList[])
this.tokenList.getClass().getName() == orig(this.tokenList.getClass().getName())
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.context has only one value
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN has only one value
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN has only one value
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN has only one value
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN has only one value
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.type == 2147483647
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value has only one value
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value.getClass().getName() == java.lang.String.class
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN.type == 41
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN.value == null
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN.type == 40
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN.value == null
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN.type == 37
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN.value == null
return.type == 1004
return.value.getClass().getName() == java.lang.String.class
this.pointer - orig(this.pointer) - 1 == 0
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.parse():::ENTER
this.pointer == 0
this.context has only one value
===========================================================================
ch.qos.logback.core.pattern.parser.Parser.parse():::EXIT
this.tokenList == orig(this.tokenList)
this.tokenList[] == orig(this.tokenList[])
this.tokenList.getClass().getName() == orig(this.tokenList.getClass().getName())
this.noContextWarning == orig(this.noContextWarning)
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
this.pointer == 19
this.context has only one value
return has only one value
return.type == 1
return.value has only one value
return.value.getClass().getName() == java.lang.String.class
return.next has only one value
return.next.type == 0
return.next.value has only one value
return.next.value.getClass().getName() == java.lang.String.class
return.next.next has only one value
===========================================================================
ch.qos.logback.core.pattern.parser.Token:::CLASS
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN has only one value
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN != null
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN has only one value
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN != null
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN has only one value
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN != null
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN has only one value
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN != null
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.type == 2147483647
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value has only one value
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value != null
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value.getClass().getName() == java.lang.String.class
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN.type == 41
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN.value == null
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN.type == 40
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN.value == null
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN.type == 37
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN.value == null
===========================================================================
ch.qos.logback.core.pattern.parser.Token:::OBJECT
this.value.getClass().getName() == java.lang.String.class
===========================================================================
ch.qos.logback.core.pattern.parser.Token.Token(int):::ENTER
type one of { 37, 40, 41 }
===========================================================================
ch.qos.logback.core.pattern.parser.Token.Token(int):::EXIT
this.type one of { 37, 40, 41 }
this.value == null
===========================================================================
ch.qos.logback.core.pattern.parser.Token.Token(int, java.lang.Object):::ENTER
value.getClass().getName() == java.lang.String.class
===========================================================================
ch.qos.logback.core.pattern.parser.Token.Token(int, java.lang.Object):::EXIT
===========================================================================
ch.qos.logback.core.pattern.parser.Token.getType():::ENTER
===========================================================================
ch.qos.logback.core.pattern.parser.Token.getType():::EXIT
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN == orig(ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN)
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN == orig(ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN)
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN == orig(ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN)
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN == orig(ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN)
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.type == orig(ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.type)
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value == orig(ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value)
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value.getClass().getName() == orig(ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value.getClass().getName())
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN.type == orig(ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN.type)
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN.value == orig(ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN.value)
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN.type == orig(ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN.type)
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN.value == orig(ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN.value)
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN.type == orig(ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN.type)
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN.value == orig(ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN.value)
this.type == orig(this.type)
this.value == orig(this.value)
this.value.getClass().getName() == orig(this.value.getClass().getName())
===========================================================================
ch.qos.logback.core.pattern.parser.Token.getValue():::ENTER
this.value != null
===========================================================================
ch.qos.logback.core.pattern.parser.Token.getValue():::EXIT
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN == orig(ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN)
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN == orig(ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN)
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN == orig(ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN)
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN == orig(ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN)
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.type == orig(ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.type)
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value == orig(ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value)
ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value.getClass().getName() == orig(ch.qos.logback.core.pattern.parser.Token.EOF_TOKEN.value.getClass().getName())
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN.type == orig(ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN.type)
ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN.value == orig(ch.qos.logback.core.pattern.parser.Token.RIGHT_PARENTHESIS_TOKEN.value)
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN.type == orig(ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN.type)
ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN.value == orig(ch.qos.logback.core.pattern.parser.Token.LEFT_PARENTHESIS_TOKEN.value)
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN.type == orig(ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN.type)
ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN.value == orig(ch.qos.logback.core.pattern.parser.Token.PERCENT_TOKEN.value)
this.type == orig(this.type)
this.value == orig(this.value)
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.value != null
return != null
return.getClass().getName() == java.lang.String.class
===========================================================================
ch.qos.logback.core.pattern.parser.TokenStream:::CLASS
===========================================================================
ch.qos.logback.core.pattern.parser.TokenStream:::OBJECT
this has only one value
this.pattern has only one value
this.pattern != null
this.pattern.toString == "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
this.patternLength == 56
this.state >= 0
this.pointer >= 0
===========================================================================
ch.qos.logback.core.pattern.parser.TokenStream.TokenStream(java.lang.String):::ENTER
pattern has only one value
pattern.toString == "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
===========================================================================
ch.qos.logback.core.pattern.parser.TokenStream.TokenStream(java.lang.String):::EXIT
pattern.toString == orig(pattern.toString)
this.state == 0
this.pointer == 0
pattern.toString == "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
===========================================================================
ch.qos.logback.core.pattern.parser.TokenStream.addValuedToken(int, java.lang.StringBuffer, java.util.List):::ENTER
buf has only one value
buf != null
tokenList has only one value
tokenList != null
tokenList[] elements != null
tokenList[].getClass().getName() elements == ch.qos.logback.core.pattern.parser.Token.class
tokenList.getClass().getName() == java.util.ArrayList.class
===========================================================================
ch.qos.logback.core.pattern.parser.TokenStream.addValuedToken(int, java.lang.StringBuffer, java.util.List):::EXIT
this.pattern == orig(this.pattern)
this.pattern.toString == orig(this.pattern.toString)
this.patternLength == orig(this.patternLength)
this.state == orig(this.state)
this.pointer == orig(this.pointer)
tokenList[] elements != null
tokenList[].getClass().getName() elements == ch.qos.logback.core.pattern.parser.Token.class
size(tokenList[])-1 <= orig(size(tokenList[]))
size(tokenList[])-1 >= orig(size(tokenList[]))-1
===========================================================================
ch.qos.logback.core.pattern.parser.TokenStream.tokenize():::ENTER
this.state == 0
this.pointer == 0
===========================================================================
ch.qos.logback.core.pattern.parser.TokenStream.tokenize():::EXIT
this.pattern == orig(this.pattern)
this.pattern.toString == orig(this.pattern.toString)
this.patternLength == orig(this.patternLength)
this.state == 2
this.pointer == 56
return has only one value
return[] contains no nulls and has only one value, of length 19
return[].getClass().getName() == [ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token, ch.qos.logback.core.pattern.parser.Token]
return[].getClass().getName() elements == ch.qos.logback.core.pattern.parser.Token.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 19
===========================================================================
ch.qos.logback.core.spi.AppenderAttachableImpl:::OBJECT
this has only one value
this.appenderList has only one value
this.appenderList[] elements has only one value
this.appenderList[].getClass().getName() elements == ch.qos.logback.core.ConsoleAppender.class
this.appenderList[].getClass().getName() one of { [], [ch.qos.logback.core.ConsoleAppender] }
this.appenderList.getClass().getName() == java.util.ArrayList.class
size(this.appenderList[]) one of { 0, 1 }
===========================================================================
ch.qos.logback.core.spi.AppenderAttachableImpl.AppenderAttachableImpl():::EXIT
this.appenderList[] == []
this.appenderList[].getClass().getName() == []
===========================================================================
ch.qos.logback.core.spi.AppenderAttachableImpl.addAppender(ch.qos.logback.core.Appender):::ENTER
this.appenderList[] == []
this.appenderList[].getClass().getName() == []
newAppender has only one value
newAppender.getClass().getName() == ch.qos.logback.core.ConsoleAppender.class
===========================================================================
ch.qos.logback.core.spi.AppenderAttachableImpl.addAppender(ch.qos.logback.core.Appender):::EXIT
this.appenderList == orig(this.appenderList)
this.appenderList.getClass().getName() == orig(this.appenderList.getClass().getName())
size(this.appenderList[])-1 == orig(size(this.appenderList[]))
this.appenderList[] contains no nulls and has only one value, of length 1
this.appenderList[].getClass().getName() == [ch.qos.logback.core.ConsoleAppender]
size(this.appenderList[]) == 1
===========================================================================
ch.qos.logback.core.spi.ContextAwareBase:::OBJECT
this.noContextWarning == 0
this.context.getClass().getName() == ch.qos.logback.classic.LoggerContext.class
===========================================================================
ch.qos.logback.core.spi.ContextAwareBase.ContextAwareBase():::EXIT
this.context == null
===========================================================================
ch.qos.logback.core.spi.ContextAwareBase.setContext(ch.qos.logback.core.Context):::ENTER
this.context == null
context has only one value
context.getClass().getName() == ch.qos.logback.classic.LoggerContext.class
===========================================================================
ch.qos.logback.core.spi.ContextAwareBase.setContext(ch.qos.logback.core.Context):::EXIT
this.noContextWarning == orig(this.noContextWarning)
this.context has only one value
===========================================================================
ch.qos.logback.core.spi.FilterAttachableImpl:::OBJECT
this has only one value
this.headFilter == null
this.tailFilter == null
===========================================================================
ch.qos.logback.core.spi.FilterAttachableImpl.FilterAttachableImpl():::EXIT
===========================================================================
ch.qos.logback.core.status.InfoStatus:::CLASS
ch.qos.logback.core.status.StatusBase.EMPTY_LIST has only one value
ch.qos.logback.core.status.StatusBase.EMPTY_LIST[] == []
ch.qos.logback.core.status.StatusBase.EMPTY_LIST[].getClass().getName() == []
ch.qos.logback.core.status.StatusBase.EMPTY_LIST.getClass().getName() == java.util.ArrayList.class
===========================================================================
ch.qos.logback.core.status.InfoStatus:::OBJECT
this has only one value
this.level == 0
this.message has only one value
this.message.toString == "Setting up default configuration."
this.origin has only one value
this.origin.getClass().getName() == ch.qos.logback.classic.BasicConfigurator.class
this.childrenList == null
this.throwable == null
this.date == 1743927750312L
===========================================================================
ch.qos.logback.core.status.InfoStatus.InfoStatus(java.lang.String, java.lang.Object):::ENTER
msg has only one value
msg.toString == "Setting up default configuration."
origin has only one value
origin.getClass().getName() == ch.qos.logback.classic.BasicConfigurator.class
===========================================================================
ch.qos.logback.core.status.InfoStatus.InfoStatus(java.lang.String, java.lang.Object):::EXIT
msg.toString == orig(msg.toString)
msg.toString == "Setting up default configuration."
===========================================================================
ch.qos.logback.core.status.StatusBase:::CLASS
ch.qos.logback.core.status.StatusBase.EMPTY_LIST has only one value
ch.qos.logback.core.status.StatusBase.EMPTY_LIST[] == []
ch.qos.logback.core.status.StatusBase.EMPTY_LIST[].getClass().getName() == []
ch.qos.logback.core.status.StatusBase.EMPTY_LIST.getClass().getName() == java.util.ArrayList.class
===========================================================================
ch.qos.logback.core.status.StatusBase:::OBJECT
this has only one value
this.getClass().getName() == ch.qos.logback.core.status.InfoStatus.class
this.level == 0
this.message has only one value
this.message.toString == "Setting up default configuration."
this.origin has only one value
this.origin.getClass().getName() == ch.qos.logback.classic.BasicConfigurator.class
this.childrenList == null
this.throwable == null
this.date == 1743927750312L
===========================================================================
ch.qos.logback.core.status.StatusBase.StatusBase(int, java.lang.String, java.lang.Object):::ENTER
level == 0
msg has only one value
msg.toString == "Setting up default configuration."
origin has only one value
origin.getClass().getName() == ch.qos.logback.classic.BasicConfigurator.class
===========================================================================
ch.qos.logback.core.status.StatusBase.StatusBase(int, java.lang.String, java.lang.Object):::EXIT
msg.toString == orig(msg.toString)
msg.toString == "Setting up default configuration."
===========================================================================
ch.qos.logback.core.status.StatusBase.StatusBase(int, java.lang.String, java.lang.Object, java.lang.Throwable):::ENTER
level == 0
msg has only one value
msg.toString == "Setting up default configuration."
origin has only one value
origin.getClass().getName() == ch.qos.logback.classic.BasicConfigurator.class
t == null
===========================================================================
ch.qos.logback.core.status.StatusBase.StatusBase(int, java.lang.String, java.lang.Object, java.lang.Throwable):::EXIT
msg.toString == orig(msg.toString)
msg.toString == "Setting up default configuration."
===========================================================================
ch.qos.logback.core.status.StatusBase.getLevel():::ENTER
===========================================================================
ch.qos.logback.core.status.StatusBase.getLevel():::EXIT
ch.qos.logback.core.status.StatusBase.EMPTY_LIST == orig(ch.qos.logback.core.status.StatusBase.EMPTY_LIST)
ch.qos.logback.core.status.StatusBase.EMPTY_LIST[] == orig(ch.qos.logback.core.status.StatusBase.EMPTY_LIST[])
ch.qos.logback.core.status.StatusBase.EMPTY_LIST.getClass().getName() == orig(ch.qos.logback.core.status.StatusBase.EMPTY_LIST.getClass().getName())
this.level == orig(this.level)
this.message == orig(this.message)
this.message.toString == orig(this.message.toString)
this.origin == orig(this.origin)
this.origin.getClass().getName() == orig(this.origin.getClass().getName())
this.childrenList == orig(this.childrenList)
this.throwable == orig(this.throwable)
this.date == orig(this.date)
return == 0
===========================================================================
ch.qos.logback.core.util.Loader.getResource(java.lang.String, java.lang.ClassLoader):::ENTER
resource.toString one of { "logback-test.xml", "logback.xml" }
classLoader has only one value
classLoader.getClass().getName() == jdk.internal.loader.ClassLoaders$AppClassLoader.class
===========================================================================
ch.qos.logback.core.util.Loader.getResource(java.lang.String, java.lang.ClassLoader):::EXIT64
===========================================================================
ch.qos.logback.core.util.Loader.getResource(java.lang.String, java.lang.ClassLoader):::EXIT
resource.toString == orig(resource.toString)
resource.toString one of { "logback-test.xml", "logback.xml" }
return == null
===========================================================================
ch.qos.logback.core.util.Loader.getTCL():::EXIT
return has only one value
return.getClass().getName() == jdk.internal.loader.ClassLoaders$AppClassLoader.class
===========================================================================
ch.qos.logback.core.util.OptionHelper:::CLASS
ch.qos.logback.core.util.OptionHelper.DELIM_START has only one value
ch.qos.logback.core.util.OptionHelper.DELIM_START != null
ch.qos.logback.core.util.OptionHelper.DELIM_START.toString == "${"
ch.qos.logback.core.util.OptionHelper._IS_UNDEFINED has only one value
ch.qos.logback.core.util.OptionHelper._IS_UNDEFINED != null
ch.qos.logback.core.util.OptionHelper._IS_UNDEFINED.toString == "_IS_UNDEFINED"
===========================================================================
ch.qos.logback.core.util.OptionHelper.getSystemProperty(java.lang.String, java.lang.String):::ENTER
key.toString one of { "logback.ContextSelector", "logback.ignoreTCL" }
def == null
===========================================================================
ch.qos.logback.core.util.OptionHelper.getSystemProperty(java.lang.String, java.lang.String):::EXIT212
===========================================================================
ch.qos.logback.core.util.OptionHelper.getSystemProperty(java.lang.String, java.lang.String):::EXIT
ch.qos.logback.core.util.OptionHelper.DELIM_START == orig(ch.qos.logback.core.util.OptionHelper.DELIM_START)
ch.qos.logback.core.util.OptionHelper.DELIM_START.toString == orig(ch.qos.logback.core.util.OptionHelper.DELIM_START.toString)
ch.qos.logback.core.util.OptionHelper._IS_UNDEFINED == orig(ch.qos.logback.core.util.OptionHelper._IS_UNDEFINED)
ch.qos.logback.core.util.OptionHelper._IS_UNDEFINED.toString == orig(ch.qos.logback.core.util.OptionHelper._IS_UNDEFINED.toString)
key.toString == orig(key.toString)
key.toString one of { "logback.ContextSelector", "logback.ignoreTCL" }
return == null
===========================================================================
ch.qos.logback.core.util.OptionHelper.instantiateByClassName(java.lang.String, java.lang.Class, ch.qos.logback.core.Context):::ENTER
superClass has only one value
context has only one value
context.getClass().getName() == ch.qos.logback.classic.LoggerContext.class
===========================================================================
ch.qos.logback.core.util.OptionHelper.instantiateByClassName(java.lang.String, java.lang.Class, ch.qos.logback.core.Context):::EXIT
ch.qos.logback.core.util.OptionHelper.DELIM_START == orig(ch.qos.logback.core.util.OptionHelper.DELIM_START)
ch.qos.logback.core.util.OptionHelper.DELIM_START.toString == orig(ch.qos.logback.core.util.OptionHelper.DELIM_START.toString)
ch.qos.logback.core.util.OptionHelper._IS_UNDEFINED == orig(ch.qos.logback.core.util.OptionHelper._IS_UNDEFINED)
ch.qos.logback.core.util.OptionHelper._IS_UNDEFINED.toString == orig(ch.qos.logback.core.util.OptionHelper._IS_UNDEFINED.toString)
className.toString == orig(className.toString)
===========================================================================
ch.qos.logback.core.util.OptionHelper.instantiateByClassName(java.lang.String, java.lang.Class, java.lang.ClassLoader):::ENTER
superClass has only one value
classLoader has only one value
classLoader.getClass().getName() == jdk.internal.loader.ClassLoaders$AppClassLoader.class
===========================================================================
ch.qos.logback.core.util.OptionHelper.instantiateByClassName(java.lang.String, java.lang.Class, java.lang.ClassLoader):::EXIT
ch.qos.logback.core.util.OptionHelper.DELIM_START == orig(ch.qos.logback.core.util.OptionHelper.DELIM_START)
ch.qos.logback.core.util.OptionHelper.DELIM_START.toString == orig(ch.qos.logback.core.util.OptionHelper.DELIM_START.toString)
ch.qos.logback.core.util.OptionHelper._IS_UNDEFINED == orig(ch.qos.logback.core.util.OptionHelper._IS_UNDEFINED)
ch.qos.logback.core.util.OptionHelper._IS_UNDEFINED.toString == orig(ch.qos.logback.core.util.OptionHelper._IS_UNDEFINED.toString)
className.toString == orig(className.toString)
===========================================================================
com.google.common.base.Joiner$MapJoiner:::OBJECT
this has only one value
this.joiner has only one value
this.joiner.separator has only one value
this.joiner.separator.toString == ", "
this.keyValueSeparator has only one value
this.keyValueSeparator.toString == "="
===========================================================================
com.google.common.base.Joiner$MapJoiner.MapJoiner(com.google.common.base.Joiner, java.lang.String):::ENTER
com.google.common.base.Joiner.this has only one value
com.google.common.base.Joiner.this.separator has only one value
com.google.common.base.Joiner.this.separator.toString == ", "
keyValueSeparator has only one value
keyValueSeparator.toString == "="
===========================================================================
com.google.common.base.Joiner$MapJoiner.MapJoiner(com.google.common.base.Joiner, java.lang.String):::EXIT
com.google.common.base.Joiner.this.separator == orig(com.google.common.base.Joiner.this.separator)
com.google.common.base.Joiner.this.separator.toString == orig(com.google.common.base.Joiner.this.separator.toString)
keyValueSeparator.toString == orig(keyValueSeparator.toString)
com.google.common.base.Joiner.this.separator has only one value
com.google.common.base.Joiner.this.separator.toString == ", "
keyValueSeparator.toString == "="
===========================================================================
com.google.common.base.Joiner:::OBJECT
this.separator.toString one of { ",", ", " }
===========================================================================
com.google.common.base.Joiner.Joiner(java.lang.String):::ENTER
separator.toString one of { ",", ", " }
===========================================================================
com.google.common.base.Joiner.Joiner(java.lang.String):::EXIT
separator.toString == orig(separator.toString)
separator.toString one of { ",", ", " }
===========================================================================
com.google.common.base.Joiner.on(java.lang.String):::ENTER
separator.toString one of { ",", ", " }
===========================================================================
com.google.common.base.Joiner.on(java.lang.String):::EXIT
separator.toString == orig(separator.toString)
separator.toString one of { ",", ", " }
return.separator.toString one of { ",", ", " }
===========================================================================
com.google.common.base.Joiner.withKeyValueSeparator(java.lang.String):::ENTER
this has only one value
this.separator has only one value
this.separator.toString == ", "
keyValueSeparator has only one value
keyValueSeparator.toString == "="
===========================================================================
com.google.common.base.Joiner.withKeyValueSeparator(java.lang.String):::EXIT
this.separator == orig(this.separator)
this.separator.toString == orig(this.separator.toString)
keyValueSeparator.toString == orig(keyValueSeparator.toString)
this.separator has only one value
this.separator.toString == ", "
keyValueSeparator.toString == "="
return has only one value
return.joiner has only one value
return.joiner.separator has only one value
return.joiner.separator.toString == ", "
return.keyValueSeparator has only one value
return.keyValueSeparator.toString == "="
===========================================================================
com.google.common.base.Preconditions.checkArgument(boolean):::ENTER
expression == true
===========================================================================
com.google.common.base.Preconditions.checkArgument(boolean):::EXIT
===========================================================================
com.google.common.base.Preconditions.checkNotNull(java.lang.Object):::ENTER
reference.getClass().getName() == java.lang.String.class
===========================================================================
com.google.common.base.Preconditions.checkNotNull(java.lang.Object):::EXIT
return.getClass().getName() == java.lang.String.class
===========================================================================
com.google.common.base.Predicates$AlwaysTruePredicate:::OBJECT
this has only one value
===========================================================================
com.google.common.base.Predicates$AlwaysTruePredicate.AlwaysTruePredicate(java.lang.String, int):::ENTER
$hidden$1 has only one value
$hidden$1.toString == "INSTANCE"
$hidden$2 == 0
===========================================================================
com.google.common.base.Predicates$AlwaysTruePredicate.AlwaysTruePredicate(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString == "INSTANCE"
===========================================================================
com.google.common.base.Predicates:::CLASS
com.google.common.base.Predicates.commaJoiner has only one value
com.google.common.base.Predicates.commaJoiner.separator has only one value
com.google.common.base.Predicates.commaJoiner.separator.toString == ","
===========================================================================
com.google.common.base.Predicates.alwaysTrue():::ENTER
===========================================================================
com.google.common.base.Predicates.alwaysTrue():::EXIT
com.google.common.base.Predicates.commaJoiner == orig(com.google.common.base.Predicates.commaJoiner)
com.google.common.base.Predicates.commaJoiner.separator == orig(com.google.common.base.Predicates.commaJoiner.separator)
com.google.common.base.Predicates.commaJoiner.separator.toString == orig(com.google.common.base.Predicates.commaJoiner.separator.toString)
return has only one value
return.getClass().getName() == com.google.common.base.Predicates$AlwaysTruePredicate.class
===========================================================================
com.google.common.collect.Lists.newArrayList():::EXIT
return has only one value
return[] == []
return[].getClass().getName() == []
===========================================================================
com.google.common.collect.Maps:::CLASS
com.google.common.collect.Maps.standardJoiner has only one value
com.google.common.collect.Maps.standardJoiner.joiner has only one value
com.google.common.collect.Maps.standardJoiner.joiner.separator has only one value
com.google.common.collect.Maps.standardJoiner.joiner.separator.toString == ", "
com.google.common.collect.Maps.standardJoiner.keyValueSeparator has only one value
com.google.common.collect.Maps.standardJoiner.keyValueSeparator.toString == "="
===========================================================================
com.google.common.collect.Maps.capacity(int):::ENTER
expectedSize == 2
===========================================================================
com.google.common.collect.Maps.capacity(int):::EXIT
com.google.common.collect.Maps.standardJoiner == orig(com.google.common.collect.Maps.standardJoiner)
com.google.common.collect.Maps.standardJoiner.joiner == orig(com.google.common.collect.Maps.standardJoiner.joiner)
com.google.common.collect.Maps.standardJoiner.joiner.separator == orig(com.google.common.collect.Maps.standardJoiner.joiner.separator)
com.google.common.collect.Maps.standardJoiner.joiner.separator.toString == orig(com.google.common.collect.Maps.standardJoiner.joiner.separator.toString)
com.google.common.collect.Maps.standardJoiner.keyValueSeparator == orig(com.google.common.collect.Maps.standardJoiner.keyValueSeparator)
com.google.common.collect.Maps.standardJoiner.keyValueSeparator.toString == orig(com.google.common.collect.Maps.standardJoiner.keyValueSeparator.toString)
return == 16
===========================================================================
com.google.common.collect.Sets.newHashSet(java.lang.Object[]):::ENTER
elements has only one value
elements.getClass().getName() == org.reflections.scanners.Scanner[].class
elements[] contains no nulls and has only one value, of length 2
size(elements[]) == 2
===========================================================================
com.google.common.collect.Sets.newHashSet(java.lang.Object[]):::EXIT
elements[] == orig(elements[])
elements[] contains no nulls and has only one value, of length 2
return has only one value
===========================================================================
gnu.trove.impl.HashFunctions:::CLASS
gnu.trove.impl.HashFunctions.$assertionsDisabled == false
===========================================================================
gnu.trove.impl.HashFunctions.fastCeil(float):::ENTER
v == 20.0
===========================================================================
gnu.trove.impl.HashFunctions.fastCeil(float):::EXIT
gnu.trove.impl.HashFunctions.$assertionsDisabled == orig(gnu.trove.impl.HashFunctions.$assertionsDisabled)
return == 20
===========================================================================
gnu.trove.impl.PrimeFinder:::CLASS
gnu.trove.impl.PrimeFinder.primeCapacities has only one value
gnu.trove.impl.PrimeFinder.primeCapacities[] == [3, 5, 7, 11, 17, 23, 31, 37, 43, 47, 67, 79, 89, 97, 137, 163, 179, 197, 277, 311, 331, 359, 379, 397, 433, 557, 599, 631, 673, 719, 761, 797, 877, 953, 1039, 1117, 1201, 1277, 1361, 1439, 1523, 1597, 1759, 1907, 2081, 2237, 2411, 2557, 2729, 2879, 3049, 3203, 3527, 3821, 4177, 4481, 4831, 5119, 5471, 5779, 6101, 6421, 7057, 7643, 8363, 8963, 9677, 10243, 10949, 11579, 12203, 12853, 14143, 15287, 16729, 17929, 19373, 20507, 21911, 23159, 24407, 25717, 28289, 30577, 33461, 35863, 38747, 41017, 43853, 46327, 48817, 51437, 56591, 61169, 66923, 71741, 77509, 82037, 87719, 92657, 97649, 102877, 113189, 122347, 133853, 143483, 155027, 164089, 175447, 185323, 195311, 205759, 226379, 244703, 267713, 286973, 310081, 328213, 350899, 370661, 390647, 411527, 452759, 489407, 535481, 573953, 620171, 656429, 701819, 741337, 781301, 823117, 905551, 978821, 1070981, 1147921, 1240361, 1312867, 1403641, 1482707, 1562611, 1646237, 1811107, 1957651, 2141977, 2295859, 2480729, 2625761, 2807303, 2965421, 3125257, 3292489, 3622219, 3915341, 4283963, 4591721, 4961459, 5251529, 5614657, 5930887, 6250537, 6584983, 7244441, 7830701, 8567929, 9183457, 9922933, 10503061, 11229331, 11861791, 12501169, 13169977, 14488931, 15661423, 17135863, 18366923, 19845871, 21006137, 22458671, 23723597, 25002389, 26339969, 28977863, 31322867, 34271747, 36733847, 39691759, 42012281, 44917381, 47447201, 50004791, 52679969, 57955739, 62645741, 68543509, 73467739, 79383533, 84024581, 89834777, 94894427, 100009607, 105359939, 115911563, 125291483, 137087021, 146935499, 158767069, 168049163, 179669557, 189788857, 200019221, 210719881, 231823147, 250582987, 274174111, 293871013, 317534141, 336098327, 359339171, 379577741, 400038451, 421439783, 463646329, 501165979, 548348231, 587742049, 635068283, 672196673, 718678369, 759155483, 800076929, 842879579, 927292699, 1002331963, 1096696463, 1175484103, 1270136683, 1344393353, 1437356741, 1518310967, 1600153859, 1685759167, 1854585413, 2004663929, 2147483647]
size(gnu.trove.impl.PrimeFinder.primeCapacities[]) == 245
===========================================================================
gnu.trove.impl.PrimeFinder.nextPrime(int):::ENTER
desiredCapacity == 20
===========================================================================
gnu.trove.impl.PrimeFinder.nextPrime(int):::EXIT
gnu.trove.impl.PrimeFinder.primeCapacities == orig(gnu.trove.impl.PrimeFinder.primeCapacities)
gnu.trove.impl.PrimeFinder.primeCapacities[] == orig(gnu.trove.impl.PrimeFinder.primeCapacities[])
return == 23
===========================================================================
gnu.trove.impl.hash.THash:::CLASS
===========================================================================
gnu.trove.impl.hash.THash:::OBJECT
this has only one value
this.getClass().getName() == gnu.trove.map.hash.TIntObjectHashMap.class
this._size == 0
this._free one of { 0, 23 }
this._loadFactor == 0.5
this._maxSize one of { 0, 11 }
this._autoCompactRemovesRemaining one of { 0, 10 }
this._autoCompactionFactor == 0.5
this._autoCompactTemporaryDisable == false
===========================================================================
gnu.trove.impl.hash.THash.THash():::EXIT
this._free == 23
this._maxSize == 11
this._autoCompactRemovesRemaining == 10
===========================================================================
gnu.trove.impl.hash.THash.THash(int, float):::ENTER
initialCapacity == 10
loadFactor == 0.5
===========================================================================
gnu.trove.impl.hash.THash.THash(int, float):::EXIT
this._free == 23
this._maxSize == 11
this._autoCompactRemovesRemaining == 10
===========================================================================
gnu.trove.impl.hash.THash.computeMaxSize(int):::ENTER
this._free == 0
this._maxSize == 0
this._autoCompactRemovesRemaining == 0
capacity == 23
===========================================================================
gnu.trove.impl.hash.THash.computeMaxSize(int):::EXIT
this._size == orig(this._size)
this._loadFactor == orig(this._loadFactor)
this._autoCompactRemovesRemaining == orig(this._autoCompactRemovesRemaining)
this._autoCompactionFactor == orig(this._autoCompactionFactor)
this._autoCompactTemporaryDisable == orig(this._autoCompactTemporaryDisable)
this._free == 23
this._maxSize == 11
this._autoCompactRemovesRemaining == 0
===========================================================================
gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(int):::ENTER
this._free == 23
this._maxSize == 11
this._autoCompactRemovesRemaining == 0
size == 20
===========================================================================
gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(int):::EXIT
this._size == orig(this._size)
this._free == orig(this._free)
this._loadFactor == orig(this._loadFactor)
this._maxSize == orig(this._maxSize)
this._autoCompactionFactor == orig(this._autoCompactionFactor)
this._autoCompactTemporaryDisable == orig(this._autoCompactTemporaryDisable)
this._free == 23
this._maxSize == 11
this._autoCompactRemovesRemaining == 10
===========================================================================
gnu.trove.impl.hash.THash.setUp(int):::ENTER
this._free == 0
this._maxSize == 0
this._autoCompactRemovesRemaining == 0
initialCapacity == 20
===========================================================================
gnu.trove.impl.hash.THash.setUp(int):::EXIT
this._size == orig(this._size)
this._loadFactor == orig(this._loadFactor)
this._autoCompactionFactor == orig(this._autoCompactionFactor)
this._autoCompactTemporaryDisable == orig(this._autoCompactTemporaryDisable)
this._free == 23
this._maxSize == 11
this._autoCompactRemovesRemaining == 10
return == 23
===========================================================================
gnu.trove.impl.hash.TIntHash:::CLASS
===========================================================================
gnu.trove.impl.hash.TIntHash:::OBJECT
this has only one value
this.getClass().getName() == gnu.trove.map.hash.TIntObjectHashMap.class
this._set[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this._set[] elements == 0
this.no_entry_value == 0
this.consumeFreeSlot == false
this._states[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this._states[] elements == 0
this._size == 0
this._free one of { 0, 23 }
this._loadFactor == 0.5
this._maxSize one of { 0, 11 }
this._autoCompactRemovesRemaining one of { 0, 10 }
this._autoCompactionFactor == 0.5
this._autoCompactTemporaryDisable == false
size(this._set[]) == 23
size(this._states[]) == 23
===========================================================================
gnu.trove.impl.hash.TIntHash.TIntHash():::EXIT
this._set has only one value
this._states has only one value
this._free == 23
this._maxSize == 11
this._autoCompactRemovesRemaining == 10
===========================================================================
gnu.trove.impl.hash.TIntHash.setUp(int):::ENTER
this._set == null
this._states == null
this._free == 0
this._maxSize == 0
this._autoCompactRemovesRemaining == 0
initialCapacity == 20
===========================================================================
gnu.trove.impl.hash.TIntHash.setUp(int):::EXIT
this.no_entry_value == orig(this.no_entry_value)
this.consumeFreeSlot == orig(this.consumeFreeSlot)
this._size == orig(this._size)
this._loadFactor == orig(this._loadFactor)
this._autoCompactionFactor == orig(this._autoCompactionFactor)
this._autoCompactTemporaryDisable == orig(this._autoCompactTemporaryDisable)
this._set has only one value
this._states has only one value
this._free == 23
this._maxSize == 11
this._autoCompactRemovesRemaining == 10
return == 23
===========================================================================
gnu.trove.impl.hash.TPrimitiveHash:::CLASS
===========================================================================
gnu.trove.impl.hash.TPrimitiveHash:::OBJECT
this has only one value
this.getClass().getName() == gnu.trove.map.hash.TIntObjectHashMap.class
this._states[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this._states[] elements == 0
this._size == 0
this._free one of { 0, 23 }
this._loadFactor == 0.5
this._maxSize one of { 0, 11 }
this._autoCompactRemovesRemaining one of { 0, 10 }
this._autoCompactionFactor == 0.5
this._autoCompactTemporaryDisable == false
size(this._states[]) == 23
===========================================================================
gnu.trove.impl.hash.TPrimitiveHash.TPrimitiveHash():::EXIT
this._states has only one value
this._free == 23
this._maxSize == 11
this._autoCompactRemovesRemaining == 10
===========================================================================
gnu.trove.impl.hash.TPrimitiveHash.setUp(int):::ENTER
this._states == null
this._free == 0
this._maxSize == 0
this._autoCompactRemovesRemaining == 0
initialCapacity == 20
===========================================================================
gnu.trove.impl.hash.TPrimitiveHash.setUp(int):::EXIT
this._size == orig(this._size)
this._loadFactor == orig(this._loadFactor)
this._autoCompactionFactor == orig(this._autoCompactionFactor)
this._autoCompactTemporaryDisable == orig(this._autoCompactTemporaryDisable)
this._states has only one value
this._free == 23
this._maxSize == 11
this._autoCompactRemovesRemaining == 10
return == 23
===========================================================================
gnu.trove.map.hash.TIntObjectHashMap$1:::OBJECT
this has only one value
gnu.trove.map.hash.TIntObjectHashMap.this has only one value
gnu.trove.map.hash.TIntObjectHashMap.this.PUT_ALL_PROC == null
gnu.trove.map.hash.TIntObjectHashMap.this._values has only one value
gnu.trove.map.hash.TIntObjectHashMap.this._values.getClass().getName() == java.lang.Object[].class
gnu.trove.map.hash.TIntObjectHashMap.this._values[] contains only nulls and has only one value, of length 23
gnu.trove.map.hash.TIntObjectHashMap.this._values[] elements == null
gnu.trove.map.hash.TIntObjectHashMap.this._values[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
gnu.trove.map.hash.TIntObjectHashMap.this._values[].getClass().getName() elements == null
gnu.trove.map.hash.TIntObjectHashMap.this.no_entry_key == 0
gnu.trove.map.hash.TIntObjectHashMap.this._set has only one value
gnu.trove.map.hash.TIntObjectHashMap.this._set[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
gnu.trove.map.hash.TIntObjectHashMap.this._set[] elements == 0
gnu.trove.map.hash.TIntObjectHashMap.this.no_entry_value == 0
gnu.trove.map.hash.TIntObjectHashMap.this.consumeFreeSlot == false
gnu.trove.map.hash.TIntObjectHashMap.this._states has only one value
gnu.trove.map.hash.TIntObjectHashMap.this._states[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
gnu.trove.map.hash.TIntObjectHashMap.this._states[] elements == 0
gnu.trove.map.hash.TIntObjectHashMap.this._size == 0
gnu.trove.map.hash.TIntObjectHashMap.this._free == 23
gnu.trove.map.hash.TIntObjectHashMap.this._loadFactor == 0.5
gnu.trove.map.hash.TIntObjectHashMap.this._maxSize == 11
gnu.trove.map.hash.TIntObjectHashMap.this._autoCompactRemovesRemaining == 10
gnu.trove.map.hash.TIntObjectHashMap.this._autoCompactionFactor == 0.5
gnu.trove.map.hash.TIntObjectHashMap.this._autoCompactTemporaryDisable == false
size(gnu.trove.map.hash.TIntObjectHashMap.this._values[]) == 23
size(gnu.trove.map.hash.TIntObjectHashMap.this._set[]) == 23
size(gnu.trove.map.hash.TIntObjectHashMap.this._states[]) == 23
===========================================================================
gnu.trove.map.hash.TIntObjectHashMap$1.(gnu.trove.map.hash.TIntObjectHashMap):::ENTER
gnu.trove.map.hash.TIntObjectHashMap.this has only one value
gnu.trove.map.hash.TIntObjectHashMap.this.PUT_ALL_PROC == null
gnu.trove.map.hash.TIntObjectHashMap.this._values has only one value
gnu.trove.map.hash.TIntObjectHashMap.this._values.getClass().getName() == java.lang.Object[].class
gnu.trove.map.hash.TIntObjectHashMap.this._values[] contains only nulls and has only one value, of length 23
gnu.trove.map.hash.TIntObjectHashMap.this._values[] elements == null
gnu.trove.map.hash.TIntObjectHashMap.this._values[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
gnu.trove.map.hash.TIntObjectHashMap.this._values[].getClass().getName() elements == null
gnu.trove.map.hash.TIntObjectHashMap.this.no_entry_key == 0
gnu.trove.map.hash.TIntObjectHashMap.this._set has only one value
gnu.trove.map.hash.TIntObjectHashMap.this._set[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
gnu.trove.map.hash.TIntObjectHashMap.this._set[] elements == 0
gnu.trove.map.hash.TIntObjectHashMap.this.no_entry_value == 0
gnu.trove.map.hash.TIntObjectHashMap.this.consumeFreeSlot == false
gnu.trove.map.hash.TIntObjectHashMap.this._states has only one value
gnu.trove.map.hash.TIntObjectHashMap.this._states[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
gnu.trove.map.hash.TIntObjectHashMap.this._states[] elements == 0
gnu.trove.map.hash.TIntObjectHashMap.this._size == 0
gnu.trove.map.hash.TIntObjectHashMap.this._free == 23
gnu.trove.map.hash.TIntObjectHashMap.this._loadFactor == 0.5
gnu.trove.map.hash.TIntObjectHashMap.this._maxSize == 11
gnu.trove.map.hash.TIntObjectHashMap.this._autoCompactRemovesRemaining == 10
gnu.trove.map.hash.TIntObjectHashMap.this._autoCompactionFactor == 0.5
gnu.trove.map.hash.TIntObjectHashMap.this._autoCompactTemporaryDisable == false
size(gnu.trove.map.hash.TIntObjectHashMap.this._values[]) == 23
size(gnu.trove.map.hash.TIntObjectHashMap.this._set[]) == 23
size(gnu.trove.map.hash.TIntObjectHashMap.this._states[]) == 23
===========================================================================
gnu.trove.map.hash.TIntObjectHashMap$1.(gnu.trove.map.hash.TIntObjectHashMap):::EXIT
gnu.trove.map.hash.TIntObjectHashMap.this == orig(gnu.trove.map.hash.TIntObjectHashMap.this)
gnu.trove.map.hash.TIntObjectHashMap.this.PUT_ALL_PROC == orig(gnu.trove.map.hash.TIntObjectHashMap.this.PUT_ALL_PROC)
gnu.trove.map.hash.TIntObjectHashMap.this._values == orig(gnu.trove.map.hash.TIntObjectHashMap.this._values)
gnu.trove.map.hash.TIntObjectHashMap.this._values.getClass().getName() == orig(gnu.trove.map.hash.TIntObjectHashMap.this._values.getClass().getName())
gnu.trove.map.hash.TIntObjectHashMap.this._values[] == orig(gnu.trove.map.hash.TIntObjectHashMap.this._values[])
gnu.trove.map.hash.TIntObjectHashMap.this.no_entry_key == orig(gnu.trove.map.hash.TIntObjectHashMap.this.no_entry_key)
gnu.trove.map.hash.TIntObjectHashMap.this._set == orig(gnu.trove.map.hash.TIntObjectHashMap.this._set)
gnu.trove.map.hash.TIntObjectHashMap.this._set[] == orig(gnu.trove.map.hash.TIntObjectHashMap.this._set[])
gnu.trove.map.hash.TIntObjectHashMap.this.no_entry_value == orig(gnu.trove.map.hash.TIntObjectHashMap.this.no_entry_value)
gnu.trove.map.hash.TIntObjectHashMap.this.consumeFreeSlot == orig(gnu.trove.map.hash.TIntObjectHashMap.this.consumeFreeSlot)
gnu.trove.map.hash.TIntObjectHashMap.this._states == orig(gnu.trove.map.hash.TIntObjectHashMap.this._states)
gnu.trove.map.hash.TIntObjectHashMap.this._states[] == orig(gnu.trove.map.hash.TIntObjectHashMap.this._states[])
gnu.trove.map.hash.TIntObjectHashMap.this._size == orig(gnu.trove.map.hash.TIntObjectHashMap.this._size)
gnu.trove.map.hash.TIntObjectHashMap.this._free == orig(gnu.trove.map.hash.TIntObjectHashMap.this._free)
gnu.trove.map.hash.TIntObjectHashMap.this._loadFactor == orig(gnu.trove.map.hash.TIntObjectHashMap.this._loadFactor)
gnu.trove.map.hash.TIntObjectHashMap.this._maxSize == orig(gnu.trove.map.hash.TIntObjectHashMap.this._maxSize)
gnu.trove.map.hash.TIntObjectHashMap.this._autoCompactRemovesRemaining == orig(gnu.trove.map.hash.TIntObjectHashMap.this._autoCompactRemovesRemaining)
gnu.trove.map.hash.TIntObjectHashMap.this._autoCompactionFactor == orig(gnu.trove.map.hash.TIntObjectHashMap.this._autoCompactionFactor)
gnu.trove.map.hash.TIntObjectHashMap.this._autoCompactTemporaryDisable == orig(gnu.trove.map.hash.TIntObjectHashMap.this._autoCompactTemporaryDisable)
===========================================================================
gnu.trove.map.hash.TIntObjectHashMap:::CLASS
===========================================================================
gnu.trove.map.hash.TIntObjectHashMap:::OBJECT
this has only one value
this.PUT_ALL_PROC.getClass().getName() == gnu.trove.map.hash.TIntObjectHashMap$1.class
this._values.getClass().getName() == java.lang.Object[].class
this._values[] contains only nulls and has only one value, of length 23
this._values[] elements == null
this._values[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this._values[].getClass().getName() elements == null
this.no_entry_key == 0
this._set[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this._set[] elements == 0
this.no_entry_value == 0
this.consumeFreeSlot == false
this._states[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this._states[] elements == 0
this._size == 0
this._free one of { 0, 23 }
this._loadFactor == 0.5
this._maxSize one of { 0, 11 }
this._autoCompactRemovesRemaining one of { 0, 10 }
this._autoCompactionFactor == 0.5
this._autoCompactTemporaryDisable == false
size(this._values[]) == 23
size(this._set[]) == 23
size(this._states[]) == 23
===========================================================================
gnu.trove.map.hash.TIntObjectHashMap.TIntObjectHashMap():::EXIT
this.PUT_ALL_PROC has only one value
this._values has only one value
this._set has only one value
this._states has only one value
this._free == 23
this._maxSize == 11
this._autoCompactRemovesRemaining == 10
===========================================================================
gnu.trove.map.hash.TIntObjectHashMap.setUp(int):::ENTER
this.PUT_ALL_PROC == null
this._values == null
this._set == null
this._states == null
this._free == 0
this._maxSize == 0
this._autoCompactRemovesRemaining == 0
initialCapacity == 20
===========================================================================
gnu.trove.map.hash.TIntObjectHashMap.setUp(int):::EXIT
this.PUT_ALL_PROC == orig(this.PUT_ALL_PROC)
this.no_entry_key == orig(this.no_entry_key)
this.no_entry_value == orig(this.no_entry_value)
this.consumeFreeSlot == orig(this.consumeFreeSlot)
this._size == orig(this._size)
this._loadFactor == orig(this._loadFactor)
this._autoCompactionFactor == orig(this._autoCompactionFactor)
this._autoCompactTemporaryDisable == orig(this._autoCompactTemporaryDisable)
this.PUT_ALL_PROC == null
this._values has only one value
this._set has only one value
this._states has only one value
this._free == 23
this._maxSize == 11
this._autoCompactRemovesRemaining == 10
return == 23
===========================================================================
org.apache.log4j.AppenderSkeleton:::OBJECT
this has only one value
this.getClass().getName() == org.apache.log4j.ConsoleAppender.class
this.layout.getClass().getName() == org.apache.log4j.PatternLayout.class
org.apache.log4j.Layout.LINE_SEP has only one value
org.apache.log4j.Layout.LINE_SEP.toString == "\n"
org.apache.log4j.Layout.LINE_SEP_LEN == 1
this.name == null
this.threshold == null
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.FATAL.level == 50000
org.apache.log4j.Priority.FATAL.levelStr has only one value
org.apache.log4j.Priority.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Priority.FATAL.syslogEquivalent == 0
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
org.apache.log4j.Priority.ERROR.level == 40000
org.apache.log4j.Priority.ERROR.levelStr has only one value
org.apache.log4j.Priority.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Priority.ERROR.syslogEquivalent == 3
org.apache.log4j.Priority.WARN.level == 30000
org.apache.log4j.Priority.WARN.levelStr has only one value
org.apache.log4j.Priority.WARN.levelStr.toString == "WARN"
org.apache.log4j.Priority.WARN.syslogEquivalent == 4
org.apache.log4j.Priority.INFO.level == 20000
org.apache.log4j.Priority.INFO.levelStr has only one value
org.apache.log4j.Priority.INFO.levelStr.toString == "INFO"
org.apache.log4j.Priority.INFO.syslogEquivalent == 6
org.apache.log4j.Priority.DEBUG.level == 10000
org.apache.log4j.Priority.DEBUG.levelStr has only one value
org.apache.log4j.Priority.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Priority.DEBUG.syslogEquivalent == 7
this.errorHandler has only one value
this.errorHandler.getClass().getName() == org.apache.log4j.helpers.OnlyOnceErrorHandler.class
this.headFilter == null
this.tailFilter == null
this.closed == false
===========================================================================
org.apache.log4j.AppenderSkeleton.AppenderSkeleton():::EXIT
this.layout == null
===========================================================================
org.apache.log4j.AppenderSkeleton.setLayout(org.apache.log4j.Layout):::ENTER
this.layout == null
layout has only one value
layout.getClass().getName() == org.apache.log4j.PatternLayout.class
===========================================================================
org.apache.log4j.AppenderSkeleton.setLayout(org.apache.log4j.Layout):::EXIT
org.apache.log4j.Layout.LINE_SEP == orig(org.apache.log4j.Layout.LINE_SEP)
org.apache.log4j.Layout.LINE_SEP.toString == orig(org.apache.log4j.Layout.LINE_SEP.toString)
org.apache.log4j.Layout.LINE_SEP_LEN == orig(org.apache.log4j.Layout.LINE_SEP_LEN)
this.name == orig(this.name)
this.threshold == orig(this.threshold)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.errorHandler == orig(this.errorHandler)
this.errorHandler.getClass().getName() == orig(this.errorHandler.getClass().getName())
this.headFilter == orig(this.headFilter)
this.tailFilter == orig(this.tailFilter)
this.closed == orig(this.closed)
this.layout has only one value
===========================================================================
org.apache.log4j.Category:::OBJECT
this.name != null
this.name.toString one of { "org.vit.unsafeutils.serializer.UnsafeSerializer", "root" }
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.OFF != null
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.FATAL != null
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.ERROR != null
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.WARN != null
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.INFO != null
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.DEBUG != null
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.TRACE != null
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.ALL != null
org.apache.log4j.Level.class$org$apache$log4j$Level == null
org.apache.log4j.Level.OFF.level == 2147483647
org.apache.log4j.Level.OFF.levelStr has only one value
org.apache.log4j.Level.OFF.levelStr != null
org.apache.log4j.Level.OFF.levelStr.toString == "OFF"
org.apache.log4j.Level.OFF.syslogEquivalent == 0
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.FATAL != null
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.ERROR != null
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.WARN != null
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.INFO != null
org.apache.log4j.Priority.DEBUG has only one value
org.apache.log4j.Priority.DEBUG != null
org.apache.log4j.Level.FATAL.level == 50000
org.apache.log4j.Level.FATAL.levelStr has only one value
org.apache.log4j.Level.FATAL.levelStr != null
org.apache.log4j.Level.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Level.FATAL.syslogEquivalent == 0
org.apache.log4j.Level.ERROR.level == 40000
org.apache.log4j.Level.ERROR.levelStr has only one value
org.apache.log4j.Level.ERROR.levelStr != null
org.apache.log4j.Level.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Level.ERROR.syslogEquivalent == 3
org.apache.log4j.Level.WARN.level == 30000
org.apache.log4j.Level.WARN.levelStr has only one value
org.apache.log4j.Level.WARN.levelStr != null
org.apache.log4j.Level.WARN.levelStr.toString == "WARN"
org.apache.log4j.Level.WARN.syslogEquivalent == 4
org.apache.log4j.Level.INFO.level == 20000
org.apache.log4j.Level.INFO.levelStr has only one value
org.apache.log4j.Level.INFO.levelStr != null
org.apache.log4j.Level.INFO.levelStr.toString == "INFO"
org.apache.log4j.Level.INFO.syslogEquivalent == 6
org.apache.log4j.Level.DEBUG.level == 10000
org.apache.log4j.Level.DEBUG.levelStr has only one value
org.apache.log4j.Level.DEBUG.levelStr != null
org.apache.log4j.Level.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Level.DEBUG.syslogEquivalent == 7
org.apache.log4j.Level.TRACE.level == 5000
org.apache.log4j.Level.TRACE.levelStr has only one value
org.apache.log4j.Level.TRACE.levelStr != null
org.apache.log4j.Level.TRACE.levelStr.toString == "TRACE"
org.apache.log4j.Level.TRACE.syslogEquivalent == 7
org.apache.log4j.Level.ALL.level == -2147483648
org.apache.log4j.Level.ALL.levelStr has only one value
org.apache.log4j.Level.ALL.levelStr != null
org.apache.log4j.Level.ALL.levelStr.toString == "ALL"
org.apache.log4j.Level.ALL.syslogEquivalent == 7
this.level.level == 10000
this.level.levelStr has only one value
this.level.levelStr.toString == "DEBUG"
this.level.syslogEquivalent == 7
org.apache.log4j.Priority.FATAL.level == 50000
org.apache.log4j.Priority.FATAL.levelStr has only one value
org.apache.log4j.Priority.FATAL.levelStr != null
org.apache.log4j.Priority.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Priority.FATAL.syslogEquivalent == 0
org.apache.log4j.Priority.ERROR.level == 40000
org.apache.log4j.Priority.ERROR.levelStr has only one value
org.apache.log4j.Priority.ERROR.levelStr != null
org.apache.log4j.Priority.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Priority.ERROR.syslogEquivalent == 3
org.apache.log4j.Priority.WARN.level == 30000
org.apache.log4j.Priority.WARN.levelStr has only one value
org.apache.log4j.Priority.WARN.levelStr != null
org.apache.log4j.Priority.WARN.levelStr.toString == "WARN"
org.apache.log4j.Priority.WARN.syslogEquivalent == 4
org.apache.log4j.Priority.INFO.level == 20000
org.apache.log4j.Priority.INFO.levelStr has only one value
org.apache.log4j.Priority.INFO.levelStr != null
org.apache.log4j.Priority.INFO.levelStr.toString == "INFO"
org.apache.log4j.Priority.INFO.syslogEquivalent == 6
org.apache.log4j.Priority.DEBUG.level == 10000
org.apache.log4j.Priority.DEBUG.levelStr has only one value
org.apache.log4j.Priority.DEBUG.levelStr != null
org.apache.log4j.Priority.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Priority.DEBUG.syslogEquivalent == 7
this.parent.name has only one value
this.parent.name.toString == "root"
this.parent.level has only one value
this.parent.level.level == 10000
this.parent.level.levelStr has only one value
this.parent.level.levelStr.toString == "DEBUG"
this.parent.level.syslogEquivalent == 7
this.parent.parent == null
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN != null
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
org.apache.log4j.Category.class$org$apache$log4j$Category != null
this.parent.resourceBundle == null
this.parent.repository has only one value
this.parent.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
this.parent.aai has only one value
this.parent.aai.appenderList has only one value
this.parent.aai.appenderList[] contains no nulls and has only one value, of length 1
this.parent.aai.appenderList[] elements has only one value
this.parent.aai.appenderList[].getClass().getName() == [org.apache.log4j.ConsoleAppender]
this.parent.aai.appenderList[].getClass().getName() elements == org.apache.log4j.ConsoleAppender.class
this.parent.additive == true
this.resourceBundle == null
this.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
this.aai.appenderList has only one value
this.aai.appenderList[] contains no nulls and has only one value, of length 1
this.aai.appenderList[] elements has only one value
this.aai.appenderList[].getClass().getName() == [org.apache.log4j.ConsoleAppender]
this.aai.appenderList[].getClass().getName() elements == org.apache.log4j.ConsoleAppender.class
this.additive == true
size(this.parent.aai.appenderList[]) == 1
size(this.aai.appenderList[]) == 1
===========================================================================
org.apache.log4j.Category.Category(java.lang.String):::ENTER
name.toString one of { "org.vit.unsafeutils.serializer.UnsafeSerializer", "root" }
===========================================================================
org.apache.log4j.Category.Category(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.level == null
this.parent == null
this.repository == null
this.aai == null
name.toString one of { "org.vit.unsafeutils.serializer.UnsafeSerializer", "root" }
===========================================================================
org.apache.log4j.Category.addAppender(org.apache.log4j.Appender):::ENTER
this has only one value
this.name has only one value
this.name.toString == "root"
this.level has only one value
this.parent == null
this.repository has only one value
this.aai == null
newAppender has only one value
newAppender.getClass().getName() == org.apache.log4j.ConsoleAppender.class
===========================================================================
org.apache.log4j.Category.addAppender(org.apache.log4j.Appender):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.level == orig(this.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
this.level.level == orig(this.level.level)
this.level.levelStr == orig(this.level.levelStr)
this.level.levelStr.toString == orig(this.level.levelStr.toString)
this.level.syslogEquivalent == orig(this.level.syslogEquivalent)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.parent == orig(this.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.resourceBundle == orig(this.resourceBundle)
this.repository == orig(this.repository)
this.repository.getClass().getName() == orig(this.repository.getClass().getName())
this.additive == orig(this.additive)
this.name has only one value
this.name.toString == "root"
this.level has only one value
this.parent == null
this.repository has only one value
this.aai has only one value
===========================================================================
org.apache.log4j.Category.class$(java.lang.String):::ENTER
x0 has only one value
x0.toString == "org.apache.log4j.Category"
===========================================================================
org.apache.log4j.Category.class$(java.lang.String):::EXIT
x0.toString == orig(x0.toString)
x0.toString == "org.apache.log4j.Category"
return has only one value
===========================================================================
org.apache.log4j.Category.getEffectiveLevel():::ENTER
this has only one value
this.name has only one value
this.name.toString == "org.vit.unsafeutils.serializer.UnsafeSerializer"
this.level == null
this.parent has only one value
this.repository has only one value
this.aai == null
===========================================================================
org.apache.log4j.Category.getEffectiveLevel():::EXIT444
===========================================================================
org.apache.log4j.Category.getEffectiveLevel():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.level == orig(this.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.parent == orig(this.parent)
this.parent.name == orig(this.parent.name)
this.parent.name.toString == orig(this.parent.name.toString)
this.parent.level == orig(this.parent.level)
this.parent.level.level == orig(this.parent.level.level)
this.parent.level.levelStr == orig(this.parent.level.levelStr)
this.parent.level.levelStr.toString == orig(this.parent.level.levelStr.toString)
this.parent.level.syslogEquivalent == orig(this.parent.level.syslogEquivalent)
this.parent.parent == orig(this.parent.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.parent.resourceBundle == orig(this.parent.resourceBundle)
this.parent.repository == orig(this.parent.repository)
this.parent.repository.getClass().getName() == orig(this.parent.repository.getClass().getName())
this.parent.aai == orig(this.parent.aai)
this.parent.aai.appenderList == orig(this.parent.aai.appenderList)
this.parent.aai.appenderList[] == orig(this.parent.aai.appenderList[])
this.parent.additive == orig(this.parent.additive)
this.resourceBundle == orig(this.resourceBundle)
this.repository == orig(this.repository)
this.repository.getClass().getName() == orig(this.repository.getClass().getName())
this.aai == orig(this.aai)
this.additive == orig(this.additive)
this.name has only one value
this.name.toString == "org.vit.unsafeutils.serializer.UnsafeSerializer"
this.level == null
this.parent has only one value
this.repository has only one value
this.aai == null
return has only one value
return.level == 10000
return.levelStr has only one value
return.levelStr.toString == "DEBUG"
return.syslogEquivalent == 7
===========================================================================
org.apache.log4j.Category.isDebugEnabled():::ENTER
this has only one value
this.name has only one value
this.name.toString == "org.vit.unsafeutils.serializer.UnsafeSerializer"
this.level == null
this.parent has only one value
this.repository has only one value
this.aai == null
===========================================================================
org.apache.log4j.Category.isDebugEnabled():::EXIT736
===========================================================================
org.apache.log4j.Category.isDebugEnabled():::EXIT736;condition="return == true"
===========================================================================
org.apache.log4j.Category.isDebugEnabled():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.level == orig(this.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.parent == orig(this.parent)
this.parent.name == orig(this.parent.name)
this.parent.name.toString == orig(this.parent.name.toString)
this.parent.level == orig(this.parent.level)
this.parent.level.level == orig(this.parent.level.level)
this.parent.level.levelStr == orig(this.parent.level.levelStr)
this.parent.level.levelStr.toString == orig(this.parent.level.levelStr.toString)
this.parent.level.syslogEquivalent == orig(this.parent.level.syslogEquivalent)
this.parent.parent == orig(this.parent.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.parent.resourceBundle == orig(this.parent.resourceBundle)
this.parent.repository == orig(this.parent.repository)
this.parent.repository.getClass().getName() == orig(this.parent.repository.getClass().getName())
this.parent.aai == orig(this.parent.aai)
this.parent.aai.appenderList == orig(this.parent.aai.appenderList)
this.parent.aai.appenderList[] == orig(this.parent.aai.appenderList[])
this.parent.additive == orig(this.parent.additive)
this.resourceBundle == orig(this.resourceBundle)
this.repository == orig(this.repository)
this.repository.getClass().getName() == orig(this.repository.getClass().getName())
this.aai == orig(this.aai)
this.additive == orig(this.additive)
this.name has only one value
this.name.toString == "org.vit.unsafeutils.serializer.UnsafeSerializer"
this.level == null
this.parent has only one value
this.repository has only one value
this.aai == null
return == true
===========================================================================
org.apache.log4j.Category.isDebugEnabled():::EXIT;condition="return == true"
===========================================================================
org.apache.log4j.Category.setHierarchy(org.apache.log4j.spi.LoggerRepository):::ENTER
this.parent == null
this.repository == null
this.aai == null
repository has only one value
repository.getClass().getName() == org.apache.log4j.Hierarchy.class
===========================================================================
org.apache.log4j.Category.setHierarchy(org.apache.log4j.spi.LoggerRepository):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.level == orig(this.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
this.level.level == orig(this.level.level)
this.level.levelStr == orig(this.level.levelStr)
this.level.levelStr.toString == orig(this.level.levelStr.toString)
this.level.syslogEquivalent == orig(this.level.syslogEquivalent)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.parent == orig(this.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.resourceBundle == orig(this.resourceBundle)
this.aai == orig(this.aai)
this.additive == orig(this.additive)
this.parent == null
this.repository has only one value
this.aai == null
===========================================================================
org.apache.log4j.CategoryKey:::CLASS
org.apache.log4j.CategoryKey.class$org$apache$log4j$CategoryKey == null
===========================================================================
org.apache.log4j.CategoryKey:::OBJECT
this.name != null
===========================================================================
org.apache.log4j.CategoryKey.CategoryKey(java.lang.String):::ENTER
===========================================================================
org.apache.log4j.CategoryKey.CategoryKey(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.log4j.CategoryKey.hashCode():::ENTER
===========================================================================
org.apache.log4j.CategoryKey.hashCode():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.hashCache == orig(this.hashCache)
org.apache.log4j.CategoryKey.class$org$apache$log4j$CategoryKey == orig(org.apache.log4j.CategoryKey.class$org$apache$log4j$CategoryKey)
===========================================================================
org.apache.log4j.ConsoleAppender:::CLASS
org.apache.log4j.ConsoleAppender.SYSTEM_OUT has only one value
org.apache.log4j.ConsoleAppender.SYSTEM_OUT.toString == "System.out"
org.apache.log4j.ConsoleAppender.SYSTEM_ERR has only one value
org.apache.log4j.ConsoleAppender.SYSTEM_ERR.toString == "System.err"
===========================================================================
org.apache.log4j.ConsoleAppender:::OBJECT
this has only one value
this.target has only one value
this.target.toString == "System.out"
this.follow == false
this.immediateFlush == true
this.encoding == null
this.qw.errorHandler has only one value
this.qw.errorHandler.getClass().getName() == org.apache.log4j.helpers.OnlyOnceErrorHandler.class
this.layout has only one value
this.layout.getClass().getName() == org.apache.log4j.PatternLayout.class
org.apache.log4j.Layout.LINE_SEP has only one value
org.apache.log4j.Layout.LINE_SEP.toString == "\n"
org.apache.log4j.Layout.LINE_SEP_LEN == 1
this.name == null
this.threshold == null
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.FATAL.level == 50000
org.apache.log4j.Priority.FATAL.levelStr has only one value
org.apache.log4j.Priority.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Priority.FATAL.syslogEquivalent == 0
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
org.apache.log4j.Priority.ERROR.level == 40000
org.apache.log4j.Priority.ERROR.levelStr has only one value
org.apache.log4j.Priority.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Priority.ERROR.syslogEquivalent == 3
org.apache.log4j.Priority.WARN.level == 30000
org.apache.log4j.Priority.WARN.levelStr has only one value
org.apache.log4j.Priority.WARN.levelStr.toString == "WARN"
org.apache.log4j.Priority.WARN.syslogEquivalent == 4
org.apache.log4j.Priority.INFO.level == 20000
org.apache.log4j.Priority.INFO.levelStr has only one value
org.apache.log4j.Priority.INFO.levelStr.toString == "INFO"
org.apache.log4j.Priority.INFO.syslogEquivalent == 6
org.apache.log4j.Priority.DEBUG.level == 10000
org.apache.log4j.Priority.DEBUG.levelStr has only one value
org.apache.log4j.Priority.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Priority.DEBUG.syslogEquivalent == 7
this.errorHandler has only one value
this.errorHandler.getClass().getName() == org.apache.log4j.helpers.OnlyOnceErrorHandler.class
this.headFilter == null
this.tailFilter == null
this.closed == false
===========================================================================
org.apache.log4j.ConsoleAppender.ConsoleAppender(org.apache.log4j.Layout):::ENTER
layout has only one value
layout.getClass().getName() == org.apache.log4j.PatternLayout.class
org.apache.log4j.Layout.LINE_SEP has only one value
org.apache.log4j.Layout.LINE_SEP.toString == "\n"
org.apache.log4j.Layout.LINE_SEP_LEN == 1
===========================================================================
org.apache.log4j.ConsoleAppender.ConsoleAppender(org.apache.log4j.Layout):::EXIT
org.apache.log4j.Layout.LINE_SEP == orig(org.apache.log4j.Layout.LINE_SEP)
org.apache.log4j.Layout.LINE_SEP.toString == orig(org.apache.log4j.Layout.LINE_SEP.toString)
org.apache.log4j.Layout.LINE_SEP_LEN == orig(org.apache.log4j.Layout.LINE_SEP_LEN)
this.qw has only one value
===========================================================================
org.apache.log4j.ConsoleAppender.ConsoleAppender(org.apache.log4j.Layout, java.lang.String):::ENTER
layout has only one value
layout.getClass().getName() == org.apache.log4j.PatternLayout.class
org.apache.log4j.Layout.LINE_SEP has only one value
org.apache.log4j.Layout.LINE_SEP.toString == "\n"
org.apache.log4j.Layout.LINE_SEP_LEN == 1
target has only one value
target.toString == "System.out"
===========================================================================
org.apache.log4j.ConsoleAppender.ConsoleAppender(org.apache.log4j.Layout, java.lang.String):::EXIT
org.apache.log4j.Layout.LINE_SEP == orig(org.apache.log4j.Layout.LINE_SEP)
org.apache.log4j.Layout.LINE_SEP.toString == orig(org.apache.log4j.Layout.LINE_SEP.toString)
org.apache.log4j.Layout.LINE_SEP_LEN == orig(org.apache.log4j.Layout.LINE_SEP_LEN)
target.toString == orig(target.toString)
this.qw has only one value
target.toString == "System.out"
===========================================================================
org.apache.log4j.ConsoleAppender.activateOptions():::ENTER
this.qw == null
===========================================================================
org.apache.log4j.ConsoleAppender.activateOptions():::EXIT
org.apache.log4j.ConsoleAppender.SYSTEM_OUT == orig(org.apache.log4j.ConsoleAppender.SYSTEM_OUT)
org.apache.log4j.ConsoleAppender.SYSTEM_OUT.toString == orig(org.apache.log4j.ConsoleAppender.SYSTEM_OUT.toString)
org.apache.log4j.ConsoleAppender.SYSTEM_ERR == orig(org.apache.log4j.ConsoleAppender.SYSTEM_ERR)
org.apache.log4j.ConsoleAppender.SYSTEM_ERR.toString == orig(org.apache.log4j.ConsoleAppender.SYSTEM_ERR.toString)
this.target == orig(this.target)
this.target.toString == orig(this.target.toString)
this.follow == orig(this.follow)
this.immediateFlush == orig(this.immediateFlush)
this.encoding == orig(this.encoding)
this.layout == orig(this.layout)
this.layout.getClass().getName() == orig(this.layout.getClass().getName())
org.apache.log4j.Layout.LINE_SEP == orig(org.apache.log4j.Layout.LINE_SEP)
org.apache.log4j.Layout.LINE_SEP.toString == orig(org.apache.log4j.Layout.LINE_SEP.toString)
org.apache.log4j.Layout.LINE_SEP_LEN == orig(org.apache.log4j.Layout.LINE_SEP_LEN)
this.name == orig(this.name)
this.threshold == orig(this.threshold)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.errorHandler == orig(this.errorHandler)
this.errorHandler.getClass().getName() == orig(this.errorHandler.getClass().getName())
this.headFilter == orig(this.headFilter)
this.tailFilter == orig(this.tailFilter)
this.closed == orig(this.closed)
this.qw has only one value
===========================================================================
org.apache.log4j.ConsoleAppender.closeWriter():::ENTER
this.qw == null
===========================================================================
org.apache.log4j.ConsoleAppender.closeWriter():::EXIT
org.apache.log4j.ConsoleAppender.SYSTEM_OUT == orig(org.apache.log4j.ConsoleAppender.SYSTEM_OUT)
org.apache.log4j.ConsoleAppender.SYSTEM_OUT.toString == orig(org.apache.log4j.ConsoleAppender.SYSTEM_OUT.toString)
org.apache.log4j.ConsoleAppender.SYSTEM_ERR == orig(org.apache.log4j.ConsoleAppender.SYSTEM_ERR)
org.apache.log4j.ConsoleAppender.SYSTEM_ERR.toString == orig(org.apache.log4j.ConsoleAppender.SYSTEM_ERR.toString)
this.target == orig(this.target)
this.target.toString == orig(this.target.toString)
this.follow == orig(this.follow)
this.immediateFlush == orig(this.immediateFlush)
this.encoding == orig(this.encoding)
this.qw == orig(this.qw)
this.layout == orig(this.layout)
this.layout.getClass().getName() == orig(this.layout.getClass().getName())
org.apache.log4j.Layout.LINE_SEP == orig(org.apache.log4j.Layout.LINE_SEP)
org.apache.log4j.Layout.LINE_SEP.toString == orig(org.apache.log4j.Layout.LINE_SEP.toString)
org.apache.log4j.Layout.LINE_SEP_LEN == orig(org.apache.log4j.Layout.LINE_SEP_LEN)
this.name == orig(this.name)
this.threshold == orig(this.threshold)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.errorHandler == orig(this.errorHandler)
this.errorHandler.getClass().getName() == orig(this.errorHandler.getClass().getName())
this.headFilter == orig(this.headFilter)
this.tailFilter == orig(this.tailFilter)
this.closed == orig(this.closed)
this.qw == null
===========================================================================
org.apache.log4j.ConsoleAppender.setTarget(java.lang.String):::ENTER
this.qw == null
value has only one value
value.toString == "System.out"
===========================================================================
org.apache.log4j.ConsoleAppender.setTarget(java.lang.String):::EXIT
org.apache.log4j.ConsoleAppender.SYSTEM_OUT == orig(org.apache.log4j.ConsoleAppender.SYSTEM_OUT)
org.apache.log4j.ConsoleAppender.SYSTEM_OUT.toString == orig(org.apache.log4j.ConsoleAppender.SYSTEM_OUT.toString)
org.apache.log4j.ConsoleAppender.SYSTEM_ERR == orig(org.apache.log4j.ConsoleAppender.SYSTEM_ERR)
org.apache.log4j.ConsoleAppender.SYSTEM_ERR.toString == orig(org.apache.log4j.ConsoleAppender.SYSTEM_ERR.toString)
this.target == orig(this.target)
this.target.toString == orig(this.target.toString)
this.follow == orig(this.follow)
this.immediateFlush == orig(this.immediateFlush)
this.encoding == orig(this.encoding)
this.qw == orig(this.qw)
this.layout == orig(this.layout)
this.layout.getClass().getName() == orig(this.layout.getClass().getName())
org.apache.log4j.Layout.LINE_SEP == orig(org.apache.log4j.Layout.LINE_SEP)
org.apache.log4j.Layout.LINE_SEP.toString == orig(org.apache.log4j.Layout.LINE_SEP.toString)
org.apache.log4j.Layout.LINE_SEP_LEN == orig(org.apache.log4j.Layout.LINE_SEP_LEN)
this.name == orig(this.name)
this.threshold == orig(this.threshold)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.errorHandler == orig(this.errorHandler)
this.errorHandler.getClass().getName() == orig(this.errorHandler.getClass().getName())
this.headFilter == orig(this.headFilter)
this.tailFilter == orig(this.tailFilter)
this.closed == orig(this.closed)
value.toString == orig(value.toString)
this.qw == null
value.toString == "System.out"
===========================================================================
org.apache.log4j.DefaultCategoryFactory:::OBJECT
this has only one value
===========================================================================
org.apache.log4j.DefaultCategoryFactory.DefaultCategoryFactory():::EXIT
===========================================================================
org.apache.log4j.DefaultCategoryFactory.makeNewLoggerInstance(java.lang.String):::ENTER
name has only one value
name.toString == "org.vit.unsafeutils.serializer.UnsafeSerializer"
===========================================================================
org.apache.log4j.DefaultCategoryFactory.makeNewLoggerInstance(java.lang.String):::EXIT
name.toString == orig(name.toString)
name.toString == "org.vit.unsafeutils.serializer.UnsafeSerializer"
return has only one value
org.apache.log4j.Logger.FQCN has only one value
org.apache.log4j.Logger.FQCN.toString == "org.apache.log4j.Logger"
org.apache.log4j.Logger.class$org$apache$log4j$Logger has only one value
return.name has only one value
return.name.toString == "org.vit.unsafeutils.serializer.UnsafeSerializer"
return.level == null
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.class$org$apache$log4j$Level == null
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
return.parent == null
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
return.resourceBundle == null
return.repository == null
return.aai == null
return.additive == true
===========================================================================
org.apache.log4j.Hierarchy:::OBJECT
this has only one value
this.defaultFactory.getClass().getName() == org.apache.log4j.DefaultCategoryFactory.class
this.listeners has only one value
this.listeners != null
this.listeners[] == []
this.listeners[].getClass().getName() == []
this.ht has only one value
this.ht != null
this.root has only one value
this.root != null
org.apache.log4j.Logger.FQCN has only one value
org.apache.log4j.Logger.FQCN != null
org.apache.log4j.Logger.FQCN.toString == "org.apache.log4j.Logger"
org.apache.log4j.Logger.class$org$apache$log4j$Logger has only one value
org.apache.log4j.Logger.class$org$apache$log4j$Logger != null
this.root.name has only one value
this.root.name != null
this.root.name.toString == "root"
this.root.level has only one value
this.root.level != null
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.OFF != null
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.FATAL != null
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.ERROR != null
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.WARN != null
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.INFO != null
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.DEBUG != null
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.TRACE != null
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.ALL != null
org.apache.log4j.Level.class$org$apache$log4j$Level == null
this.root.level.level == 10000
this.root.level.levelStr has only one value
this.root.level.levelStr != null
this.root.level.levelStr.toString == "DEBUG"
this.root.level.syslogEquivalent == 7
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.FATAL != null
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.ERROR != null
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.WARN != null
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.INFO != null
org.apache.log4j.Priority.DEBUG has only one value
org.apache.log4j.Priority.DEBUG != null
this.root.parent == null
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN != null
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
org.apache.log4j.Category.class$org$apache$log4j$Category != null
this.root.resourceBundle == null
this.root.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
this.root.aai.appenderList has only one value
this.root.aai.appenderList[] contains no nulls and has only one value, of length 1
this.root.aai.appenderList[] elements has only one value
this.root.aai.appenderList[].getClass().getName() == [org.apache.log4j.ConsoleAppender]
this.root.aai.appenderList[].getClass().getName() elements == org.apache.log4j.ConsoleAppender.class
this.root.additive == true
this.rendererMap.map has only one value
this.rendererMap.map != null
org.apache.log4j.or.RendererMap.defaultRenderer has only one value
org.apache.log4j.or.RendererMap.defaultRenderer != null
org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName() == org.apache.log4j.or.DefaultRenderer.class
org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer == null
this.thresholdInt one of { -2147483648, 0 }
org.apache.log4j.Level.OFF.level == 2147483647
org.apache.log4j.Level.OFF.levelStr has only one value
org.apache.log4j.Level.OFF.levelStr != null
org.apache.log4j.Level.OFF.levelStr.toString == "OFF"
org.apache.log4j.Level.OFF.syslogEquivalent == 0
org.apache.log4j.Level.FATAL.level == 50000
org.apache.log4j.Level.FATAL.levelStr has only one value
org.apache.log4j.Level.FATAL.levelStr != null
org.apache.log4j.Level.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Level.FATAL.syslogEquivalent == 0
org.apache.log4j.Level.ERROR.level == 40000
org.apache.log4j.Level.ERROR.levelStr has only one value
org.apache.log4j.Level.ERROR.levelStr != null
org.apache.log4j.Level.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Level.ERROR.syslogEquivalent == 3
org.apache.log4j.Level.WARN.level == 30000
org.apache.log4j.Level.WARN.levelStr has only one value
org.apache.log4j.Level.WARN.levelStr != null
org.apache.log4j.Level.WARN.levelStr.toString == "WARN"
org.apache.log4j.Level.WARN.syslogEquivalent == 4
org.apache.log4j.Level.INFO.level == 20000
org.apache.log4j.Level.INFO.levelStr has only one value
org.apache.log4j.Level.INFO.levelStr != null
org.apache.log4j.Level.INFO.levelStr.toString == "INFO"
org.apache.log4j.Level.INFO.syslogEquivalent == 6
org.apache.log4j.Level.DEBUG.level == 10000
org.apache.log4j.Level.DEBUG.levelStr has only one value
org.apache.log4j.Level.DEBUG.levelStr != null
org.apache.log4j.Level.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Level.DEBUG.syslogEquivalent == 7
org.apache.log4j.Level.TRACE.level == 5000
org.apache.log4j.Level.TRACE.levelStr has only one value
org.apache.log4j.Level.TRACE.levelStr != null
org.apache.log4j.Level.TRACE.levelStr.toString == "TRACE"
org.apache.log4j.Level.TRACE.syslogEquivalent == 7
org.apache.log4j.Level.ALL.level == -2147483648
org.apache.log4j.Level.ALL.levelStr has only one value
org.apache.log4j.Level.ALL.levelStr != null
org.apache.log4j.Level.ALL.levelStr.toString == "ALL"
org.apache.log4j.Level.ALL.syslogEquivalent == 7
this.threshold.level == -2147483648
this.threshold.levelStr has only one value
this.threshold.levelStr != null
this.threshold.levelStr.toString == "ALL"
this.threshold.syslogEquivalent == 7
org.apache.log4j.Priority.FATAL.level == 50000
org.apache.log4j.Priority.FATAL.levelStr has only one value
org.apache.log4j.Priority.FATAL.levelStr != null
org.apache.log4j.Priority.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Priority.FATAL.syslogEquivalent == 0
org.apache.log4j.Priority.ERROR.level == 40000
org.apache.log4j.Priority.ERROR.levelStr has only one value
org.apache.log4j.Priority.ERROR.levelStr != null
org.apache.log4j.Priority.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Priority.ERROR.syslogEquivalent == 3
org.apache.log4j.Priority.WARN.level == 30000
org.apache.log4j.Priority.WARN.levelStr has only one value
org.apache.log4j.Priority.WARN.levelStr != null
org.apache.log4j.Priority.WARN.levelStr.toString == "WARN"
org.apache.log4j.Priority.WARN.syslogEquivalent == 4
org.apache.log4j.Priority.INFO.level == 20000
org.apache.log4j.Priority.INFO.levelStr has only one value
org.apache.log4j.Priority.INFO.levelStr != null
org.apache.log4j.Priority.INFO.levelStr.toString == "INFO"
org.apache.log4j.Priority.INFO.syslogEquivalent == 6
org.apache.log4j.Priority.DEBUG.level == 10000
org.apache.log4j.Priority.DEBUG.levelStr has only one value
org.apache.log4j.Priority.DEBUG.levelStr != null
org.apache.log4j.Priority.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Priority.DEBUG.syslogEquivalent == 7
this.emittedNoAppenderWarning == false
this.emittedNoResourceBundleWarning == false
size(this.root.aai.appenderList[]) == 1
===========================================================================
org.apache.log4j.Hierarchy.Hierarchy(org.apache.log4j.Logger):::ENTER
root has only one value
org.apache.log4j.Logger.FQCN has only one value
org.apache.log4j.Logger.FQCN.toString == "org.apache.log4j.Logger"
org.apache.log4j.Logger.class$org$apache$log4j$Logger has only one value
root.name has only one value
root.name.toString == "root"
root.level has only one value
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.class$org$apache$log4j$Level == null
root.level.level == 10000
root.level.levelStr has only one value
root.level.levelStr.toString == "DEBUG"
root.level.syslogEquivalent == 7
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
root.parent == null
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
root.resourceBundle == null
root.repository == null
root.aai == null
root.additive == true
===========================================================================
org.apache.log4j.Hierarchy.Hierarchy(org.apache.log4j.Logger):::EXIT
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
root.name == orig(root.name)
root.name.toString == orig(root.name.toString)
root.level == orig(root.level)
root.level.level == orig(root.level.level)
root.level.levelStr == orig(root.level.levelStr)
root.level.levelStr.toString == orig(root.level.levelStr.toString)
root.level.syslogEquivalent == orig(root.level.syslogEquivalent)
root.parent == orig(root.parent)
root.resourceBundle == orig(root.resourceBundle)
root.aai == orig(root.aai)
root.additive == orig(root.additive)
this.defaultFactory has only one value
this.root.repository has only one value
this.root.aai == null
this.rendererMap has only one value
this.thresholdInt == -2147483648
this.threshold has only one value
root.name has only one value
root.name.toString == "root"
root.level has only one value
root.level.level == 10000
root.level.levelStr has only one value
root.level.levelStr.toString == "DEBUG"
root.level.syslogEquivalent == 7
root.parent == null
root.resourceBundle == null
root.repository has only one value
root.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
root.aai == null
root.additive == true
===========================================================================
org.apache.log4j.Hierarchy.fireAddAppenderEvent(org.apache.log4j.Category, org.apache.log4j.Appender):::ENTER
this.defaultFactory has only one value
this.root.repository has only one value
this.root.aai has only one value
this.rendererMap has only one value
this.thresholdInt == -2147483648
this.threshold has only one value
logger has only one value
logger.name has only one value
logger.name.toString == "root"
logger.level has only one value
logger.level.level == 10000
logger.level.levelStr has only one value
logger.level.levelStr.toString == "DEBUG"
logger.level.syslogEquivalent == 7
logger.parent == null
logger.resourceBundle == null
logger.repository has only one value
logger.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
logger.aai has only one value
logger.aai.appenderList has only one value
logger.aai.appenderList[] contains no nulls and has only one value, of length 1
logger.aai.appenderList[] elements has only one value
logger.aai.appenderList[].getClass().getName() == [org.apache.log4j.ConsoleAppender]
logger.aai.appenderList[].getClass().getName() elements == org.apache.log4j.ConsoleAppender.class
logger.additive == true
appender has only one value
appender.getClass().getName() == org.apache.log4j.ConsoleAppender.class
size(logger.aai.appenderList[]) == 1
===========================================================================
org.apache.log4j.Hierarchy.fireAddAppenderEvent(org.apache.log4j.Category, org.apache.log4j.Appender):::EXIT
this.defaultFactory == orig(this.defaultFactory)
this.defaultFactory.getClass().getName() == orig(this.defaultFactory.getClass().getName())
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.ht == orig(this.ht)
this.root == orig(this.root)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
this.root.name == orig(this.root.name)
this.root.name.toString == orig(this.root.name.toString)
this.root.level == orig(this.root.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
this.root.level.level == orig(this.root.level.level)
this.root.level.levelStr == orig(this.root.level.levelStr)
this.root.level.levelStr.toString == orig(this.root.level.levelStr.toString)
this.root.level.syslogEquivalent == orig(this.root.level.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
this.root.parent == orig(this.root.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.root.resourceBundle == orig(this.root.resourceBundle)
this.root.repository == orig(this.root.repository)
this.root.repository.getClass().getName() == orig(this.root.repository.getClass().getName())
this.root.aai == orig(this.root.aai)
this.root.aai.appenderList == orig(this.root.aai.appenderList)
this.root.aai.appenderList[] == orig(this.root.aai.appenderList[])
this.root.additive == orig(this.root.additive)
this.rendererMap == orig(this.rendererMap)
this.rendererMap.map == orig(this.rendererMap.map)
org.apache.log4j.or.RendererMap.defaultRenderer == orig(org.apache.log4j.or.RendererMap.defaultRenderer)
org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName() == orig(org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName())
org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer == orig(org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer)
this.thresholdInt == orig(this.thresholdInt)
this.threshold == orig(this.threshold)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
this.threshold.level == orig(this.threshold.level)
this.threshold.levelStr == orig(this.threshold.levelStr)
this.threshold.levelStr.toString == orig(this.threshold.levelStr.toString)
this.threshold.syslogEquivalent == orig(this.threshold.syslogEquivalent)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.emittedNoAppenderWarning == orig(this.emittedNoAppenderWarning)
this.emittedNoResourceBundleWarning == orig(this.emittedNoResourceBundleWarning)
logger.name == orig(logger.name)
logger.name.toString == orig(logger.name.toString)
logger.level == orig(logger.level)
logger.level.level == orig(logger.level.level)
logger.level.levelStr == orig(logger.level.levelStr)
logger.level.levelStr.toString == orig(logger.level.levelStr.toString)
logger.level.syslogEquivalent == orig(logger.level.syslogEquivalent)
logger.parent == orig(logger.parent)
logger.resourceBundle == orig(logger.resourceBundle)
logger.repository == orig(logger.repository)
logger.repository.getClass().getName() == orig(logger.repository.getClass().getName())
logger.aai == orig(logger.aai)
logger.aai.appenderList == orig(logger.aai.appenderList)
logger.aai.appenderList[] == orig(logger.aai.appenderList[])
logger.additive == orig(logger.additive)
this.defaultFactory has only one value
this.root.repository has only one value
this.root.aai has only one value
this.rendererMap has only one value
this.thresholdInt == -2147483648
this.threshold has only one value
logger.name has only one value
logger.name.toString == "root"
logger.level has only one value
logger.level.level == 10000
logger.level.levelStr has only one value
logger.level.levelStr.toString == "DEBUG"
logger.level.syslogEquivalent == 7
logger.parent == null
logger.resourceBundle == null
logger.repository has only one value
logger.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
logger.aai has only one value
logger.aai.appenderList has only one value
logger.aai.appenderList[] contains no nulls and has only one value, of length 1
logger.aai.appenderList[] elements has only one value
logger.aai.appenderList[].getClass().getName() == [org.apache.log4j.ConsoleAppender]
logger.aai.appenderList[].getClass().getName() elements == org.apache.log4j.ConsoleAppender.class
logger.additive == true
size(logger.aai.appenderList[]) == 1
===========================================================================
org.apache.log4j.Hierarchy.getLogger(java.lang.String):::ENTER
this.defaultFactory has only one value
this.root.repository has only one value
this.root.aai has only one value
this.rendererMap has only one value
this.thresholdInt == -2147483648
this.threshold has only one value
name has only one value
name.toString == "org.vit.unsafeutils.serializer.UnsafeSerializer"
===========================================================================
org.apache.log4j.Hierarchy.getLogger(java.lang.String):::EXIT
this.defaultFactory == orig(this.defaultFactory)
this.defaultFactory.getClass().getName() == orig(this.defaultFactory.getClass().getName())
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.ht == orig(this.ht)
this.root == orig(this.root)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
this.root.name == orig(this.root.name)
this.root.name.toString == orig(this.root.name.toString)
this.root.level == orig(this.root.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
this.root.level.level == orig(this.root.level.level)
this.root.level.levelStr == orig(this.root.level.levelStr)
this.root.level.levelStr.toString == orig(this.root.level.levelStr.toString)
this.root.level.syslogEquivalent == orig(this.root.level.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
this.root.parent == orig(this.root.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.root.resourceBundle == orig(this.root.resourceBundle)
this.root.repository == orig(this.root.repository)
this.root.repository.getClass().getName() == orig(this.root.repository.getClass().getName())
this.root.aai == orig(this.root.aai)
this.root.aai.appenderList == orig(this.root.aai.appenderList)
this.root.aai.appenderList[] == orig(this.root.aai.appenderList[])
this.root.additive == orig(this.root.additive)
this.rendererMap == orig(this.rendererMap)
this.rendererMap.map == orig(this.rendererMap.map)
org.apache.log4j.or.RendererMap.defaultRenderer == orig(org.apache.log4j.or.RendererMap.defaultRenderer)
org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName() == orig(org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName())
org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer == orig(org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer)
this.thresholdInt == orig(this.thresholdInt)
this.threshold == orig(this.threshold)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
this.threshold.level == orig(this.threshold.level)
this.threshold.levelStr == orig(this.threshold.levelStr)
this.threshold.levelStr.toString == orig(this.threshold.levelStr.toString)
this.threshold.syslogEquivalent == orig(this.threshold.syslogEquivalent)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.emittedNoAppenderWarning == orig(this.emittedNoAppenderWarning)
this.emittedNoResourceBundleWarning == orig(this.emittedNoResourceBundleWarning)
name.toString == orig(name.toString)
this.defaultFactory has only one value
this.root.repository has only one value
this.root.aai has only one value
this.rendererMap has only one value
this.thresholdInt == -2147483648
this.threshold has only one value
name.toString == "org.vit.unsafeutils.serializer.UnsafeSerializer"
return has only one value
return.name has only one value
return.name.toString == "org.vit.unsafeutils.serializer.UnsafeSerializer"
return.level == null
return.parent has only one value
return.parent.name has only one value
return.parent.name.toString == "root"
return.parent.level has only one value
return.parent.parent == null
return.parent.resourceBundle == null
return.parent.repository has only one value
return.parent.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
return.parent.aai has only one value
return.parent.additive == true
return.resourceBundle == null
return.repository has only one value
return.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
return.aai == null
return.additive == true
===========================================================================
org.apache.log4j.Hierarchy.getLogger(java.lang.String, org.apache.log4j.spi.LoggerFactory):::ENTER
this.defaultFactory has only one value
this.root.repository has only one value
this.root.aai has only one value
this.rendererMap has only one value
this.thresholdInt == -2147483648
this.threshold has only one value
name has only one value
name.toString == "org.vit.unsafeutils.serializer.UnsafeSerializer"
factory has only one value
factory.getClass().getName() == org.apache.log4j.DefaultCategoryFactory.class
===========================================================================
org.apache.log4j.Hierarchy.getLogger(java.lang.String, org.apache.log4j.spi.LoggerFactory):::EXIT275
===========================================================================
org.apache.log4j.Hierarchy.getLogger(java.lang.String, org.apache.log4j.spi.LoggerFactory):::EXIT
this.defaultFactory == orig(this.defaultFactory)
this.defaultFactory.getClass().getName() == orig(this.defaultFactory.getClass().getName())
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.ht == orig(this.ht)
this.root == orig(this.root)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
this.root.name == orig(this.root.name)
this.root.name.toString == orig(this.root.name.toString)
this.root.level == orig(this.root.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
this.root.level.level == orig(this.root.level.level)
this.root.level.levelStr == orig(this.root.level.levelStr)
this.root.level.levelStr.toString == orig(this.root.level.levelStr.toString)
this.root.level.syslogEquivalent == orig(this.root.level.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
this.root.parent == orig(this.root.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.root.resourceBundle == orig(this.root.resourceBundle)
this.root.repository == orig(this.root.repository)
this.root.repository.getClass().getName() == orig(this.root.repository.getClass().getName())
this.root.aai == orig(this.root.aai)
this.root.aai.appenderList == orig(this.root.aai.appenderList)
this.root.aai.appenderList[] == orig(this.root.aai.appenderList[])
this.root.additive == orig(this.root.additive)
this.rendererMap == orig(this.rendererMap)
this.rendererMap.map == orig(this.rendererMap.map)
org.apache.log4j.or.RendererMap.defaultRenderer == orig(org.apache.log4j.or.RendererMap.defaultRenderer)
org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName() == orig(org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName())
org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer == orig(org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer)
this.thresholdInt == orig(this.thresholdInt)
this.threshold == orig(this.threshold)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
this.threshold.level == orig(this.threshold.level)
this.threshold.levelStr == orig(this.threshold.levelStr)
this.threshold.levelStr.toString == orig(this.threshold.levelStr.toString)
this.threshold.syslogEquivalent == orig(this.threshold.syslogEquivalent)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.emittedNoAppenderWarning == orig(this.emittedNoAppenderWarning)
this.emittedNoResourceBundleWarning == orig(this.emittedNoResourceBundleWarning)
name.toString == orig(name.toString)
this.defaultFactory has only one value
this.root.repository has only one value
this.root.aai has only one value
this.rendererMap has only one value
this.thresholdInt == -2147483648
this.threshold has only one value
name.toString == "org.vit.unsafeutils.serializer.UnsafeSerializer"
return has only one value
return.name has only one value
return.name.toString == "org.vit.unsafeutils.serializer.UnsafeSerializer"
return.level == null
return.parent has only one value
return.parent.name has only one value
return.parent.name.toString == "root"
return.parent.level has only one value
return.parent.parent == null
return.parent.resourceBundle == null
return.parent.repository has only one value
return.parent.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
return.parent.aai has only one value
return.parent.additive == true
return.resourceBundle == null
return.repository has only one value
return.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
return.aai == null
return.additive == true
===========================================================================
org.apache.log4j.Hierarchy.getRootLogger():::ENTER
this.defaultFactory has only one value
this.root.repository has only one value
this.root.aai == null
this.rendererMap has only one value
this.thresholdInt == -2147483648
this.threshold has only one value
===========================================================================
org.apache.log4j.Hierarchy.getRootLogger():::EXIT
this.defaultFactory == orig(this.defaultFactory)
this.defaultFactory.getClass().getName() == orig(this.defaultFactory.getClass().getName())
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.ht == orig(this.ht)
this.root == orig(this.root)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
this.root.name == orig(this.root.name)
this.root.name.toString == orig(this.root.name.toString)
this.root.level == orig(this.root.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
this.root.level.level == orig(this.root.level.level)
this.root.level.levelStr == orig(this.root.level.levelStr)
this.root.level.levelStr.toString == orig(this.root.level.levelStr.toString)
this.root.level.syslogEquivalent == orig(this.root.level.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
this.root.parent == orig(this.root.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.root.resourceBundle == orig(this.root.resourceBundle)
this.root.repository == orig(this.root.repository)
this.root.repository.getClass().getName() == orig(this.root.repository.getClass().getName())
this.root.aai == orig(this.root.aai)
this.root.additive == orig(this.root.additive)
this.rendererMap == orig(this.rendererMap)
this.rendererMap.map == orig(this.rendererMap.map)
org.apache.log4j.or.RendererMap.defaultRenderer == orig(org.apache.log4j.or.RendererMap.defaultRenderer)
org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName() == orig(org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName())
org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer == orig(org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer)
this.thresholdInt == orig(this.thresholdInt)
this.threshold == orig(this.threshold)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
this.threshold.level == orig(this.threshold.level)
this.threshold.levelStr == orig(this.threshold.levelStr)
this.threshold.levelStr.toString == orig(this.threshold.levelStr.toString)
this.threshold.syslogEquivalent == orig(this.threshold.syslogEquivalent)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.emittedNoAppenderWarning == orig(this.emittedNoAppenderWarning)
this.emittedNoResourceBundleWarning == orig(this.emittedNoResourceBundleWarning)
this.defaultFactory has only one value
this.root.repository has only one value
this.root.aai == null
this.rendererMap has only one value
this.thresholdInt == -2147483648
this.threshold has only one value
return has only one value
return.name has only one value
return.name.toString == "root"
return.level has only one value
return.level.level == 10000
return.level.levelStr has only one value
return.level.levelStr.toString == "DEBUG"
return.level.syslogEquivalent == 7
return.parent == null
return.resourceBundle == null
return.repository has only one value
return.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
return.aai == null
return.additive == true
===========================================================================
org.apache.log4j.Hierarchy.isDisabled(int):::ENTER
this.defaultFactory has only one value
this.root.repository has only one value
this.root.aai has only one value
this.rendererMap has only one value
this.thresholdInt == -2147483648
this.threshold has only one value
level == 10000
===========================================================================
org.apache.log4j.Hierarchy.isDisabled(int):::EXIT
this.defaultFactory == orig(this.defaultFactory)
this.defaultFactory.getClass().getName() == orig(this.defaultFactory.getClass().getName())
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.ht == orig(this.ht)
this.root == orig(this.root)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
this.root.name == orig(this.root.name)
this.root.name.toString == orig(this.root.name.toString)
this.root.level == orig(this.root.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
this.root.level.level == orig(this.root.level.level)
this.root.level.levelStr == orig(this.root.level.levelStr)
this.root.level.levelStr.toString == orig(this.root.level.levelStr.toString)
this.root.level.syslogEquivalent == orig(this.root.level.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
this.root.parent == orig(this.root.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.root.resourceBundle == orig(this.root.resourceBundle)
this.root.repository == orig(this.root.repository)
this.root.repository.getClass().getName() == orig(this.root.repository.getClass().getName())
this.root.aai == orig(this.root.aai)
this.root.aai.appenderList == orig(this.root.aai.appenderList)
this.root.aai.appenderList[] == orig(this.root.aai.appenderList[])
this.root.additive == orig(this.root.additive)
this.rendererMap == orig(this.rendererMap)
this.rendererMap.map == orig(this.rendererMap.map)
org.apache.log4j.or.RendererMap.defaultRenderer == orig(org.apache.log4j.or.RendererMap.defaultRenderer)
org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName() == orig(org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName())
org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer == orig(org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer)
this.thresholdInt == orig(this.thresholdInt)
this.threshold == orig(this.threshold)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
this.threshold.level == orig(this.threshold.level)
this.threshold.levelStr == orig(this.threshold.levelStr)
this.threshold.levelStr.toString == orig(this.threshold.levelStr.toString)
this.threshold.syslogEquivalent == orig(this.threshold.syslogEquivalent)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.emittedNoAppenderWarning == orig(this.emittedNoAppenderWarning)
this.emittedNoResourceBundleWarning == orig(this.emittedNoResourceBundleWarning)
this.defaultFactory has only one value
this.root.repository has only one value
this.root.aai has only one value
this.rendererMap has only one value
this.thresholdInt == -2147483648
this.threshold has only one value
return == false
===========================================================================
org.apache.log4j.Hierarchy.isDisabled(int):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.log4j.Hierarchy.setThreshold(org.apache.log4j.Level):::ENTER
this.defaultFactory == null
this.root.repository == null
this.root.aai == null
this.rendererMap == null
this.thresholdInt == 0
this.threshold == null
l has only one value
l.level == -2147483648
l.levelStr has only one value
l.levelStr.toString == "ALL"
l.syslogEquivalent == 7
===========================================================================
org.apache.log4j.Hierarchy.setThreshold(org.apache.log4j.Level):::EXIT
this.defaultFactory == orig(this.defaultFactory)
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.ht == orig(this.ht)
this.root == orig(this.root)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
this.root.name == orig(this.root.name)
this.root.name.toString == orig(this.root.name.toString)
this.root.level == orig(this.root.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
this.root.level.level == orig(this.root.level.level)
this.root.level.levelStr == orig(this.root.level.levelStr)
this.root.level.levelStr.toString == orig(this.root.level.levelStr.toString)
this.root.level.syslogEquivalent == orig(this.root.level.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
this.root.parent == orig(this.root.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.root.resourceBundle == orig(this.root.resourceBundle)
this.root.repository == orig(this.root.repository)
this.root.aai == orig(this.root.aai)
this.root.additive == orig(this.root.additive)
this.rendererMap == orig(this.rendererMap)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.emittedNoAppenderWarning == orig(this.emittedNoAppenderWarning)
this.emittedNoResourceBundleWarning == orig(this.emittedNoResourceBundleWarning)
l.level == orig(l.level)
l.levelStr == orig(l.levelStr)
l.levelStr.toString == orig(l.levelStr.toString)
l.syslogEquivalent == orig(l.syslogEquivalent)
this.defaultFactory == null
this.root.repository == null
this.root.aai == null
this.rendererMap == null
this.thresholdInt == -2147483648
this.threshold has only one value
l.level == -2147483648
l.levelStr has only one value
l.levelStr.toString == "ALL"
l.syslogEquivalent == 7
===========================================================================
org.apache.log4j.Hierarchy.updateParents(org.apache.log4j.Logger):::ENTER
this.defaultFactory has only one value
this.root.repository has only one value
this.root.aai has only one value
this.rendererMap has only one value
this.thresholdInt == -2147483648
this.threshold has only one value
cat has only one value
cat.name has only one value
cat.name.toString == "org.vit.unsafeutils.serializer.UnsafeSerializer"
cat.level == null
cat.parent == null
cat.resourceBundle == null
cat.repository has only one value
cat.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
cat.aai == null
cat.additive == true
===========================================================================
org.apache.log4j.Hierarchy.updateParents(org.apache.log4j.Logger):::EXIT
this.defaultFactory == orig(this.defaultFactory)
this.defaultFactory.getClass().getName() == orig(this.defaultFactory.getClass().getName())
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.ht == orig(this.ht)
this.root == orig(this.root)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
this.root.name == orig(this.root.name)
this.root.name.toString == orig(this.root.name.toString)
this.root.level == orig(this.root.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
this.root.level.level == orig(this.root.level.level)
this.root.level.levelStr == orig(this.root.level.levelStr)
this.root.level.levelStr.toString == orig(this.root.level.levelStr.toString)
this.root.level.syslogEquivalent == orig(this.root.level.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
this.root.parent == orig(this.root.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.root.resourceBundle == orig(this.root.resourceBundle)
this.root.repository == orig(this.root.repository)
this.root.repository.getClass().getName() == orig(this.root.repository.getClass().getName())
this.root.aai == orig(this.root.aai)
this.root.aai.appenderList == orig(this.root.aai.appenderList)
this.root.aai.appenderList[] == orig(this.root.aai.appenderList[])
this.root.additive == orig(this.root.additive)
this.rendererMap == orig(this.rendererMap)
this.rendererMap.map == orig(this.rendererMap.map)
org.apache.log4j.or.RendererMap.defaultRenderer == orig(org.apache.log4j.or.RendererMap.defaultRenderer)
org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName() == orig(org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName())
org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer == orig(org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer)
this.thresholdInt == orig(this.thresholdInt)
this.threshold == orig(this.threshold)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
this.threshold.level == orig(this.threshold.level)
this.threshold.levelStr == orig(this.threshold.levelStr)
this.threshold.levelStr.toString == orig(this.threshold.levelStr.toString)
this.threshold.syslogEquivalent == orig(this.threshold.syslogEquivalent)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.emittedNoAppenderWarning == orig(this.emittedNoAppenderWarning)
this.emittedNoResourceBundleWarning == orig(this.emittedNoResourceBundleWarning)
cat.name == orig(cat.name)
cat.name.toString == orig(cat.name.toString)
cat.level == orig(cat.level)
cat.resourceBundle == orig(cat.resourceBundle)
cat.repository == orig(cat.repository)
cat.repository.getClass().getName() == orig(cat.repository.getClass().getName())
cat.aai == orig(cat.aai)
cat.additive == orig(cat.additive)
this.defaultFactory has only one value
this.root.repository has only one value
this.root.aai has only one value
this.rendererMap has only one value
this.thresholdInt == -2147483648
this.threshold has only one value
cat.name has only one value
cat.name.toString == "org.vit.unsafeutils.serializer.UnsafeSerializer"
cat.level == null
cat.parent has only one value
cat.parent.name has only one value
cat.parent.name.toString == "root"
cat.parent.level has only one value
cat.parent.parent == null
cat.parent.resourceBundle == null
cat.parent.repository has only one value
cat.parent.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
cat.parent.aai has only one value
cat.parent.additive == true
cat.resourceBundle == null
cat.repository has only one value
cat.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
cat.aai == null
cat.additive == true
===========================================================================
org.apache.log4j.Layout:::CLASS
org.apache.log4j.Layout.LINE_SEP has only one value
org.apache.log4j.Layout.LINE_SEP.toString == "\n"
org.apache.log4j.Layout.LINE_SEP_LEN == 1
===========================================================================
org.apache.log4j.Layout:::OBJECT
this has only one value
this.getClass().getName() == org.apache.log4j.PatternLayout.class
===========================================================================
org.apache.log4j.Layout.Layout():::EXIT
===========================================================================
org.apache.log4j.Layout.getHeader():::ENTER
===========================================================================
org.apache.log4j.Layout.getHeader():::EXIT
org.apache.log4j.Layout.LINE_SEP == orig(org.apache.log4j.Layout.LINE_SEP)
org.apache.log4j.Layout.LINE_SEP.toString == orig(org.apache.log4j.Layout.LINE_SEP.toString)
org.apache.log4j.Layout.LINE_SEP_LEN == orig(org.apache.log4j.Layout.LINE_SEP_LEN)
return == null
===========================================================================
org.apache.log4j.Level:::CLASS
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
org.apache.log4j.Priority.FATAL.level == 50000
org.apache.log4j.Priority.FATAL.levelStr has only one value
org.apache.log4j.Priority.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Priority.FATAL.syslogEquivalent == 0
org.apache.log4j.Priority.ERROR.level == 40000
org.apache.log4j.Priority.ERROR.levelStr has only one value
org.apache.log4j.Priority.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Priority.ERROR.syslogEquivalent == 3
org.apache.log4j.Priority.WARN.level == 30000
org.apache.log4j.Priority.WARN.levelStr has only one value
org.apache.log4j.Priority.WARN.levelStr.toString == "WARN"
org.apache.log4j.Priority.WARN.syslogEquivalent == 4
org.apache.log4j.Priority.INFO.level == 20000
org.apache.log4j.Priority.INFO.levelStr has only one value
org.apache.log4j.Priority.INFO.levelStr.toString == "INFO"
org.apache.log4j.Priority.INFO.syslogEquivalent == 6
org.apache.log4j.Priority.DEBUG.level == 10000
org.apache.log4j.Priority.DEBUG.levelStr has only one value
org.apache.log4j.Priority.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Priority.DEBUG.syslogEquivalent == 7
===========================================================================
org.apache.log4j.Level:::OBJECT
this.levelStr != null
this.syslogEquivalent >= 0
===========================================================================
org.apache.log4j.Level.Level(int, java.lang.String, int):::ENTER
levelStr != null
syslogEquivalent >= 0
===========================================================================
org.apache.log4j.Level.Level(int, java.lang.String, int):::EXIT
levelStr.toString == orig(levelStr.toString)
===========================================================================
org.apache.log4j.LogManager:::CLASS
org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_FILE has only one value
org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_FILE.toString == "log4j.properties"
org.apache.log4j.LogManager.DEFAULT_XML_CONFIGURATION_FILE has only one value
org.apache.log4j.LogManager.DEFAULT_XML_CONFIGURATION_FILE.toString == "log4j.xml"
org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_KEY has only one value
org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_KEY.toString == "log4j.configuration"
org.apache.log4j.LogManager.CONFIGURATOR_CLASS_KEY has only one value
org.apache.log4j.LogManager.CONFIGURATOR_CLASS_KEY.toString == "log4j.configuratorClass"
org.apache.log4j.LogManager.DEFAULT_INIT_OVERRIDE_KEY has only one value
org.apache.log4j.LogManager.DEFAULT_INIT_OVERRIDE_KEY.toString == "log4j.defaultInitOverride"
org.apache.log4j.LogManager.guard == null
org.apache.log4j.LogManager.repositorySelector has only one value
org.apache.log4j.LogManager.repositorySelector.getClass().getName() == org.apache.log4j.spi.DefaultRepositorySelector.class
===========================================================================
org.apache.log4j.LogManager.getLogger(java.lang.String):::ENTER
name has only one value
name.toString == "org.vit.unsafeutils.serializer.UnsafeSerializer"
===========================================================================
org.apache.log4j.LogManager.getLogger(java.lang.String):::EXIT
org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_FILE == orig(org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_FILE)
org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_FILE.toString == orig(org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_FILE.toString)
org.apache.log4j.LogManager.DEFAULT_XML_CONFIGURATION_FILE == orig(org.apache.log4j.LogManager.DEFAULT_XML_CONFIGURATION_FILE)
org.apache.log4j.LogManager.DEFAULT_XML_CONFIGURATION_FILE.toString == orig(org.apache.log4j.LogManager.DEFAULT_XML_CONFIGURATION_FILE.toString)
org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_KEY == orig(org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_KEY)
org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_KEY.toString == orig(org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_KEY.toString)
org.apache.log4j.LogManager.CONFIGURATOR_CLASS_KEY == orig(org.apache.log4j.LogManager.CONFIGURATOR_CLASS_KEY)
org.apache.log4j.LogManager.CONFIGURATOR_CLASS_KEY.toString == orig(org.apache.log4j.LogManager.CONFIGURATOR_CLASS_KEY.toString)
org.apache.log4j.LogManager.DEFAULT_INIT_OVERRIDE_KEY == orig(org.apache.log4j.LogManager.DEFAULT_INIT_OVERRIDE_KEY)
org.apache.log4j.LogManager.DEFAULT_INIT_OVERRIDE_KEY.toString == orig(org.apache.log4j.LogManager.DEFAULT_INIT_OVERRIDE_KEY.toString)
org.apache.log4j.LogManager.guard == orig(org.apache.log4j.LogManager.guard)
org.apache.log4j.LogManager.repositorySelector == orig(org.apache.log4j.LogManager.repositorySelector)
org.apache.log4j.LogManager.repositorySelector.getClass().getName() == orig(org.apache.log4j.LogManager.repositorySelector.getClass().getName())
name.toString == orig(name.toString)
name.toString == "org.vit.unsafeutils.serializer.UnsafeSerializer"
return has only one value
org.apache.log4j.Logger.FQCN has only one value
org.apache.log4j.Logger.FQCN.toString == "org.apache.log4j.Logger"
org.apache.log4j.Logger.class$org$apache$log4j$Logger has only one value
return.name has only one value
return.name.toString == "org.vit.unsafeutils.serializer.UnsafeSerializer"
return.level == null
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.class$org$apache$log4j$Level == null
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
return.parent has only one value
return.parent.name has only one value
return.parent.name.toString == "root"
return.parent.level has only one value
return.parent.parent == null
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
return.parent.resourceBundle == null
return.parent.repository has only one value
return.parent.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
return.parent.aai has only one value
return.parent.additive == true
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
return.resourceBundle == null
return.repository has only one value
return.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
return.aai == null
return.additive == true
===========================================================================
org.apache.log4j.LogManager.getLoggerRepository():::ENTER
===========================================================================
org.apache.log4j.LogManager.getLoggerRepository():::EXIT
org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_FILE == orig(org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_FILE)
org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_FILE.toString == orig(org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_FILE.toString)
org.apache.log4j.LogManager.DEFAULT_XML_CONFIGURATION_FILE == orig(org.apache.log4j.LogManager.DEFAULT_XML_CONFIGURATION_FILE)
org.apache.log4j.LogManager.DEFAULT_XML_CONFIGURATION_FILE.toString == orig(org.apache.log4j.LogManager.DEFAULT_XML_CONFIGURATION_FILE.toString)
org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_KEY == orig(org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_KEY)
org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_KEY.toString == orig(org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_KEY.toString)
org.apache.log4j.LogManager.CONFIGURATOR_CLASS_KEY == orig(org.apache.log4j.LogManager.CONFIGURATOR_CLASS_KEY)
org.apache.log4j.LogManager.CONFIGURATOR_CLASS_KEY.toString == orig(org.apache.log4j.LogManager.CONFIGURATOR_CLASS_KEY.toString)
org.apache.log4j.LogManager.DEFAULT_INIT_OVERRIDE_KEY == orig(org.apache.log4j.LogManager.DEFAULT_INIT_OVERRIDE_KEY)
org.apache.log4j.LogManager.DEFAULT_INIT_OVERRIDE_KEY.toString == orig(org.apache.log4j.LogManager.DEFAULT_INIT_OVERRIDE_KEY.toString)
org.apache.log4j.LogManager.guard == orig(org.apache.log4j.LogManager.guard)
org.apache.log4j.LogManager.repositorySelector == orig(org.apache.log4j.LogManager.repositorySelector)
org.apache.log4j.LogManager.repositorySelector.getClass().getName() == orig(org.apache.log4j.LogManager.repositorySelector.getClass().getName())
return has only one value
return.getClass().getName() == org.apache.log4j.Hierarchy.class
===========================================================================
org.apache.log4j.LogManager.getRootLogger():::ENTER
===========================================================================
org.apache.log4j.LogManager.getRootLogger():::EXIT
org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_FILE == orig(org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_FILE)
org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_FILE.toString == orig(org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_FILE.toString)
org.apache.log4j.LogManager.DEFAULT_XML_CONFIGURATION_FILE == orig(org.apache.log4j.LogManager.DEFAULT_XML_CONFIGURATION_FILE)
org.apache.log4j.LogManager.DEFAULT_XML_CONFIGURATION_FILE.toString == orig(org.apache.log4j.LogManager.DEFAULT_XML_CONFIGURATION_FILE.toString)
org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_KEY == orig(org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_KEY)
org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_KEY.toString == orig(org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_KEY.toString)
org.apache.log4j.LogManager.CONFIGURATOR_CLASS_KEY == orig(org.apache.log4j.LogManager.CONFIGURATOR_CLASS_KEY)
org.apache.log4j.LogManager.CONFIGURATOR_CLASS_KEY.toString == orig(org.apache.log4j.LogManager.CONFIGURATOR_CLASS_KEY.toString)
org.apache.log4j.LogManager.DEFAULT_INIT_OVERRIDE_KEY == orig(org.apache.log4j.LogManager.DEFAULT_INIT_OVERRIDE_KEY)
org.apache.log4j.LogManager.DEFAULT_INIT_OVERRIDE_KEY.toString == orig(org.apache.log4j.LogManager.DEFAULT_INIT_OVERRIDE_KEY.toString)
org.apache.log4j.LogManager.guard == orig(org.apache.log4j.LogManager.guard)
org.apache.log4j.LogManager.repositorySelector == orig(org.apache.log4j.LogManager.repositorySelector)
org.apache.log4j.LogManager.repositorySelector.getClass().getName() == orig(org.apache.log4j.LogManager.repositorySelector.getClass().getName())
return has only one value
org.apache.log4j.Logger.FQCN has only one value
org.apache.log4j.Logger.FQCN.toString == "org.apache.log4j.Logger"
org.apache.log4j.Logger.class$org$apache$log4j$Logger has only one value
return.name has only one value
return.name.toString == "root"
return.level has only one value
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.class$org$apache$log4j$Level == null
return.level.level == 10000
return.level.levelStr has only one value
return.level.levelStr.toString == "DEBUG"
return.level.syslogEquivalent == 7
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
return.parent == null
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
return.resourceBundle == null
return.repository has only one value
return.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
return.aai == null
return.additive == true
===========================================================================
org.apache.log4j.Logger:::CLASS
org.apache.log4j.Logger.FQCN has only one value
org.apache.log4j.Logger.FQCN.toString == "org.apache.log4j.Logger"
org.apache.log4j.Logger.class$org$apache$log4j$Logger has only one value
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
===========================================================================
org.apache.log4j.Logger:::OBJECT
this.name.toString one of { "org.vit.unsafeutils.serializer.UnsafeSerializer", "root" }
this.level == null
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.class$org$apache$log4j$Level == null
org.apache.log4j.Level.OFF.level == 2147483647
org.apache.log4j.Level.OFF.levelStr has only one value
org.apache.log4j.Level.OFF.levelStr.toString == "OFF"
org.apache.log4j.Level.OFF.syslogEquivalent == 0
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
org.apache.log4j.Level.FATAL.level == 50000
org.apache.log4j.Level.FATAL.levelStr has only one value
org.apache.log4j.Level.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Level.FATAL.syslogEquivalent == 0
org.apache.log4j.Level.ERROR.level == 40000
org.apache.log4j.Level.ERROR.levelStr has only one value
org.apache.log4j.Level.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Level.ERROR.syslogEquivalent == 3
org.apache.log4j.Level.WARN.level == 30000
org.apache.log4j.Level.WARN.levelStr has only one value
org.apache.log4j.Level.WARN.levelStr.toString == "WARN"
org.apache.log4j.Level.WARN.syslogEquivalent == 4
org.apache.log4j.Level.INFO.level == 20000
org.apache.log4j.Level.INFO.levelStr has only one value
org.apache.log4j.Level.INFO.levelStr.toString == "INFO"
org.apache.log4j.Level.INFO.syslogEquivalent == 6
org.apache.log4j.Level.DEBUG.level == 10000
org.apache.log4j.Level.DEBUG.levelStr has only one value
org.apache.log4j.Level.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Level.DEBUG.syslogEquivalent == 7
org.apache.log4j.Level.TRACE.level == 5000
org.apache.log4j.Level.TRACE.levelStr has only one value
org.apache.log4j.Level.TRACE.levelStr.toString == "TRACE"
org.apache.log4j.Level.TRACE.syslogEquivalent == 7
org.apache.log4j.Level.ALL.level == -2147483648
org.apache.log4j.Level.ALL.levelStr has only one value
org.apache.log4j.Level.ALL.levelStr.toString == "ALL"
org.apache.log4j.Level.ALL.syslogEquivalent == 7
org.apache.log4j.Priority.FATAL.level == 50000
org.apache.log4j.Priority.FATAL.levelStr has only one value
org.apache.log4j.Priority.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Priority.FATAL.syslogEquivalent == 0
org.apache.log4j.Priority.ERROR.level == 40000
org.apache.log4j.Priority.ERROR.levelStr has only one value
org.apache.log4j.Priority.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Priority.ERROR.syslogEquivalent == 3
org.apache.log4j.Priority.WARN.level == 30000
org.apache.log4j.Priority.WARN.levelStr has only one value
org.apache.log4j.Priority.WARN.levelStr.toString == "WARN"
org.apache.log4j.Priority.WARN.syslogEquivalent == 4
org.apache.log4j.Priority.INFO.level == 20000
org.apache.log4j.Priority.INFO.levelStr has only one value
org.apache.log4j.Priority.INFO.levelStr.toString == "INFO"
org.apache.log4j.Priority.INFO.syslogEquivalent == 6
org.apache.log4j.Priority.DEBUG.level == 10000
org.apache.log4j.Priority.DEBUG.levelStr has only one value
org.apache.log4j.Priority.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Priority.DEBUG.syslogEquivalent == 7
this.parent == null
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
this.resourceBundle == null
this.repository == null
this.aai == null
this.additive == true
===========================================================================
org.apache.log4j.Logger.Logger(java.lang.String):::ENTER
name.toString one of { "org.vit.unsafeutils.serializer.UnsafeSerializer", "root" }
===========================================================================
org.apache.log4j.Logger.Logger(java.lang.String):::EXIT
name.toString == orig(name.toString)
name.toString one of { "org.vit.unsafeutils.serializer.UnsafeSerializer", "root" }
===========================================================================
org.apache.log4j.Logger.class$(java.lang.String):::ENTER
x0 has only one value
x0.toString == "org.apache.log4j.Logger"
===========================================================================
org.apache.log4j.Logger.class$(java.lang.String):::EXIT
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
x0.toString == orig(x0.toString)
x0.toString == "org.apache.log4j.Logger"
return has only one value
===========================================================================
org.apache.log4j.Logger.getLogger(java.lang.Class):::ENTER
clazz has only one value
===========================================================================
org.apache.log4j.Logger.getLogger(java.lang.Class):::EXIT
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
return has only one value
return.name has only one value
return.name.toString == "org.vit.unsafeutils.serializer.UnsafeSerializer"
return.level == null
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.class$org$apache$log4j$Level == null
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
return.parent has only one value
return.parent.name has only one value
return.parent.name.toString == "root"
return.parent.level has only one value
return.parent.parent == null
return.parent.resourceBundle == null
return.parent.repository has only one value
return.parent.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
return.parent.aai has only one value
return.parent.additive == true
return.resourceBundle == null
return.repository has only one value
return.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
return.aai == null
return.additive == true
===========================================================================
org.apache.log4j.Logger.getRootLogger():::ENTER
===========================================================================
org.apache.log4j.Logger.getRootLogger():::EXIT
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
return has only one value
return.name has only one value
return.name.toString == "root"
return.level has only one value
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.class$org$apache$log4j$Level == null
return.level.level == 10000
return.level.levelStr has only one value
return.level.levelStr.toString == "DEBUG"
return.level.syslogEquivalent == 7
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
return.parent == null
return.resourceBundle == null
return.repository has only one value
return.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
return.aai == null
return.additive == true
===========================================================================
org.apache.log4j.PatternLayout:::CLASS
org.apache.log4j.PatternLayout.DEFAULT_CONVERSION_PATTERN has only one value
org.apache.log4j.PatternLayout.DEFAULT_CONVERSION_PATTERN.toString == "%m%n"
org.apache.log4j.PatternLayout.TTCC_CONVERSION_PATTERN has only one value
org.apache.log4j.PatternLayout.TTCC_CONVERSION_PATTERN.toString == "%r [%t] %p %c %x - %m%n"
org.apache.log4j.Layout.LINE_SEP has only one value
org.apache.log4j.Layout.LINE_SEP.toString == "\n"
org.apache.log4j.Layout.LINE_SEP_LEN == 1
===========================================================================
org.apache.log4j.PatternLayout:::OBJECT
this has only one value
this.BUF_SIZE == 256
this.MAX_CAPACITY == 1024
this.sbuf has only one value
this.pattern has only one value
this.pattern.toString == "%d{ISO8601} [%t] %-5p %c %x - %m%n"
this.head.getClass().getName() == org.apache.log4j.helpers.PatternParser$DatePatternConverter.class
this.head.next has only one value
this.head.next.getClass().getName() == org.apache.log4j.helpers.PatternParser$LiteralPatternConverter.class
this.head.next.next has only one value
this.head.next.next.getClass().getName() == org.apache.log4j.helpers.PatternParser$BasicPatternConverter.class
this.head.next.min == -1
this.head.next.max == 2147483647
this.head.next.leftAlign == false
org.apache.log4j.helpers.PatternConverter.SPACES has only one value
org.apache.log4j.helpers.PatternConverter.SPACES.getClass().getName() == java.lang.String[].class
org.apache.log4j.helpers.PatternConverter.SPACES[] contains no nulls and has only one value, of length 6
org.apache.log4j.helpers.PatternConverter.SPACES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.apache.log4j.helpers.PatternConverter.SPACES[].getClass().getName() elements == java.lang.String.class
org.apache.log4j.helpers.PatternConverter.SPACES[].toString == [ ,   ,     ,         ,                 ,                                 ]
this.head.min == -1
this.head.max == 2147483647
this.head.leftAlign == false
size(org.apache.log4j.helpers.PatternConverter.SPACES[]) == 6
===========================================================================
org.apache.log4j.PatternLayout.PatternLayout(java.lang.String):::ENTER
pattern has only one value
pattern.toString == "%d{ISO8601} [%t] %-5p %c %x - %m%n"
===========================================================================
org.apache.log4j.PatternLayout.PatternLayout(java.lang.String):::EXIT
pattern.toString == orig(pattern.toString)
this.head has only one value
pattern.toString == "%d{ISO8601} [%t] %-5p %c %x - %m%n"
===========================================================================
org.apache.log4j.PatternLayout.createPatternParser(java.lang.String):::ENTER
this.head == null
pattern has only one value
pattern.toString == "%d{ISO8601} [%t] %-5p %c %x - %m%n"
===========================================================================
org.apache.log4j.PatternLayout.createPatternParser(java.lang.String):::EXIT
org.apache.log4j.PatternLayout.DEFAULT_CONVERSION_PATTERN == orig(org.apache.log4j.PatternLayout.DEFAULT_CONVERSION_PATTERN)
org.apache.log4j.PatternLayout.DEFAULT_CONVERSION_PATTERN.toString == orig(org.apache.log4j.PatternLayout.DEFAULT_CONVERSION_PATTERN.toString)
org.apache.log4j.PatternLayout.TTCC_CONVERSION_PATTERN == orig(org.apache.log4j.PatternLayout.TTCC_CONVERSION_PATTERN)
org.apache.log4j.PatternLayout.TTCC_CONVERSION_PATTERN.toString == orig(org.apache.log4j.PatternLayout.TTCC_CONVERSION_PATTERN.toString)
this.BUF_SIZE == orig(this.BUF_SIZE)
this.MAX_CAPACITY == orig(this.MAX_CAPACITY)
this.sbuf == orig(this.sbuf)
this.pattern == orig(this.pattern)
this.pattern.toString == orig(this.pattern.toString)
this.head == orig(this.head)
org.apache.log4j.Layout.LINE_SEP == orig(org.apache.log4j.Layout.LINE_SEP)
org.apache.log4j.Layout.LINE_SEP.toString == orig(org.apache.log4j.Layout.LINE_SEP.toString)
org.apache.log4j.Layout.LINE_SEP_LEN == orig(org.apache.log4j.Layout.LINE_SEP_LEN)
pattern.toString == orig(pattern.toString)
this.head == null
pattern.toString == "%d{ISO8601} [%t] %-5p %c %x - %m%n"
return has only one value
return.state == 0
return.currentLiteral has only one value
return.patternLength == 34
return.i == 0
return.head == null
return.tail == null
return.formattingInfo has only one value
return.formattingInfo.min == -1
return.formattingInfo.max == 2147483647
return.formattingInfo.leftAlign == false
return.pattern has only one value
return.pattern.toString == "%d{ISO8601} [%t] %-5p %c %x - %m%n"
org.apache.log4j.helpers.PatternParser.class$java$text$DateFormat == null
===========================================================================
org.apache.log4j.Priority:::CLASS
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.FATAL.level == 50000
org.apache.log4j.Priority.FATAL.levelStr has only one value
org.apache.log4j.Priority.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Priority.FATAL.syslogEquivalent == 0
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
org.apache.log4j.Priority.ERROR.level == 40000
org.apache.log4j.Priority.ERROR.levelStr has only one value
org.apache.log4j.Priority.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Priority.ERROR.syslogEquivalent == 3
org.apache.log4j.Priority.WARN.level == 30000
org.apache.log4j.Priority.WARN.levelStr has only one value
org.apache.log4j.Priority.WARN.levelStr.toString == "WARN"
org.apache.log4j.Priority.WARN.syslogEquivalent == 4
org.apache.log4j.Priority.INFO.level == 20000
org.apache.log4j.Priority.INFO.levelStr has only one value
org.apache.log4j.Priority.INFO.levelStr.toString == "INFO"
org.apache.log4j.Priority.INFO.syslogEquivalent == 6
org.apache.log4j.Priority.DEBUG.level == 10000
org.apache.log4j.Priority.DEBUG.levelStr has only one value
org.apache.log4j.Priority.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Priority.DEBUG.syslogEquivalent == 7
===========================================================================
org.apache.log4j.Priority:::OBJECT
this.levelStr != null
this.syslogEquivalent >= 0
===========================================================================
org.apache.log4j.Priority.Priority(int, java.lang.String, int):::ENTER
levelStr != null
syslogEquivalent >= 0
===========================================================================
org.apache.log4j.Priority.Priority(int, java.lang.String, int):::EXIT
levelStr.toString == orig(levelStr.toString)
===========================================================================
org.apache.log4j.Priority.isGreaterOrEqual(org.apache.log4j.Priority):::ENTER
this has only one value
this.level == 10000
this.levelStr has only one value
this.levelStr.toString == "DEBUG"
this.syslogEquivalent == 7
r has only one value
r.level == 10000
r.levelStr has only one value
r.levelStr.toString == "DEBUG"
r.syslogEquivalent == 7
===========================================================================
org.apache.log4j.Priority.isGreaterOrEqual(org.apache.log4j.Priority):::EXIT
this.level == orig(this.level)
this.levelStr == orig(this.levelStr)
this.levelStr.toString == orig(this.levelStr.toString)
this.syslogEquivalent == orig(this.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
r.level == orig(r.level)
r.levelStr == orig(r.levelStr)
r.levelStr.toString == orig(r.levelStr.toString)
r.syslogEquivalent == orig(r.syslogEquivalent)
this.level == 10000
this.levelStr has only one value
this.levelStr.toString == "DEBUG"
this.syslogEquivalent == 7
r.level == 10000
r.levelStr has only one value
r.levelStr.toString == "DEBUG"
r.syslogEquivalent == 7
return == true
===========================================================================
org.apache.log4j.Priority.isGreaterOrEqual(org.apache.log4j.Priority):::EXIT;condition="return == true"
===========================================================================
org.apache.log4j.ProvisionNode:::CLASS
===========================================================================
org.apache.log4j.ProvisionNode:::OBJECT
===========================================================================
org.apache.log4j.ProvisionNode.ProvisionNode(org.apache.log4j.Logger):::ENTER
logger has only one value
org.apache.log4j.Logger.FQCN has only one value
org.apache.log4j.Logger.FQCN.toString == "org.apache.log4j.Logger"
org.apache.log4j.Logger.class$org$apache$log4j$Logger has only one value
logger.name has only one value
logger.name.toString == "org.vit.unsafeutils.serializer.UnsafeSerializer"
logger.level == null
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.class$org$apache$log4j$Level == null
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
logger.parent == null
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
logger.resourceBundle == null
logger.repository has only one value
logger.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
logger.aai == null
logger.additive == true
===========================================================================
org.apache.log4j.ProvisionNode.ProvisionNode(org.apache.log4j.Logger):::EXIT
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
logger.name == orig(logger.name)
logger.name.toString == orig(logger.name.toString)
logger.level == orig(logger.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
logger.parent == orig(logger.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
logger.resourceBundle == orig(logger.resourceBundle)
logger.repository == orig(logger.repository)
logger.repository.getClass().getName() == orig(logger.repository.getClass().getName())
logger.aai == orig(logger.aai)
logger.additive == orig(logger.additive)
org.apache.log4j.Logger.FQCN has only one value
org.apache.log4j.Logger.FQCN.toString == "org.apache.log4j.Logger"
org.apache.log4j.Logger.class$org$apache$log4j$Logger has only one value
logger.name has only one value
logger.name.toString == "org.vit.unsafeutils.serializer.UnsafeSerializer"
logger.level == null
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.class$org$apache$log4j$Level == null
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
logger.parent == null
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
logger.resourceBundle == null
logger.repository has only one value
logger.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
logger.aai == null
logger.additive == true
===========================================================================
org.apache.log4j.WriterAppender:::OBJECT
this has only one value
this.immediateFlush == true
this.encoding == null
this.qw.errorHandler has only one value
this.qw.errorHandler.getClass().getName() == org.apache.log4j.helpers.OnlyOnceErrorHandler.class
this.layout.getClass().getName() == org.apache.log4j.PatternLayout.class
org.apache.log4j.Layout.LINE_SEP has only one value
org.apache.log4j.Layout.LINE_SEP != null
org.apache.log4j.Layout.LINE_SEP.toString == "\n"
org.apache.log4j.Layout.LINE_SEP_LEN == 1
this.name == null
this.threshold == null
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.FATAL != null
org.apache.log4j.Priority.FATAL.level == 50000
org.apache.log4j.Priority.FATAL.levelStr has only one value
org.apache.log4j.Priority.FATAL.levelStr != null
org.apache.log4j.Priority.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Priority.FATAL.syslogEquivalent == 0
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.ERROR != null
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.WARN != null
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.INFO != null
org.apache.log4j.Priority.DEBUG has only one value
org.apache.log4j.Priority.DEBUG != null
org.apache.log4j.Priority.ERROR.level == 40000
org.apache.log4j.Priority.ERROR.levelStr has only one value
org.apache.log4j.Priority.ERROR.levelStr != null
org.apache.log4j.Priority.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Priority.ERROR.syslogEquivalent == 3
org.apache.log4j.Priority.WARN.level == 30000
org.apache.log4j.Priority.WARN.levelStr has only one value
org.apache.log4j.Priority.WARN.levelStr != null
org.apache.log4j.Priority.WARN.levelStr.toString == "WARN"
org.apache.log4j.Priority.WARN.syslogEquivalent == 4
org.apache.log4j.Priority.INFO.level == 20000
org.apache.log4j.Priority.INFO.levelStr has only one value
org.apache.log4j.Priority.INFO.levelStr != null
org.apache.log4j.Priority.INFO.levelStr.toString == "INFO"
org.apache.log4j.Priority.INFO.syslogEquivalent == 6
org.apache.log4j.Priority.DEBUG.level == 10000
org.apache.log4j.Priority.DEBUG.levelStr has only one value
org.apache.log4j.Priority.DEBUG.levelStr != null
org.apache.log4j.Priority.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Priority.DEBUG.syslogEquivalent == 7
this.errorHandler has only one value
this.errorHandler != null
this.errorHandler.getClass().getName() == org.apache.log4j.helpers.OnlyOnceErrorHandler.class
this.headFilter == null
this.tailFilter == null
this.closed == false
===========================================================================
org.apache.log4j.WriterAppender.WriterAppender():::EXIT
this.qw == null
this.layout == null
===========================================================================
org.apache.log4j.WriterAppender.activateOptions():::ENTER
this.qw has only one value
this.layout has only one value
===========================================================================
org.apache.log4j.WriterAppender.activateOptions():::EXIT
this.immediateFlush == orig(this.immediateFlush)
this.encoding == orig(this.encoding)
this.qw == orig(this.qw)
this.qw.errorHandler == orig(this.qw.errorHandler)
this.qw.errorHandler.getClass().getName() == orig(this.qw.errorHandler.getClass().getName())
this.layout == orig(this.layout)
this.layout.getClass().getName() == orig(this.layout.getClass().getName())
org.apache.log4j.Layout.LINE_SEP == orig(org.apache.log4j.Layout.LINE_SEP)
org.apache.log4j.Layout.LINE_SEP.toString == orig(org.apache.log4j.Layout.LINE_SEP.toString)
org.apache.log4j.Layout.LINE_SEP_LEN == orig(org.apache.log4j.Layout.LINE_SEP_LEN)
this.name == orig(this.name)
this.threshold == orig(this.threshold)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.errorHandler == orig(this.errorHandler)
this.errorHandler.getClass().getName() == orig(this.errorHandler.getClass().getName())
this.headFilter == orig(this.headFilter)
this.tailFilter == orig(this.tailFilter)
this.closed == orig(this.closed)
this.qw has only one value
this.layout has only one value
===========================================================================
org.apache.log4j.WriterAppender.createWriter(java.io.OutputStream):::ENTER
this.qw == null
this.layout has only one value
os has only one value
os.getClass().getName() == java.io.PrintStream.class
===========================================================================
org.apache.log4j.WriterAppender.createWriter(java.io.OutputStream):::EXIT
this.immediateFlush == orig(this.immediateFlush)
this.encoding == orig(this.encoding)
this.qw == orig(this.qw)
this.layout == orig(this.layout)
this.layout.getClass().getName() == orig(this.layout.getClass().getName())
org.apache.log4j.Layout.LINE_SEP == orig(org.apache.log4j.Layout.LINE_SEP)
org.apache.log4j.Layout.LINE_SEP.toString == orig(org.apache.log4j.Layout.LINE_SEP.toString)
org.apache.log4j.Layout.LINE_SEP_LEN == orig(org.apache.log4j.Layout.LINE_SEP_LEN)
this.name == orig(this.name)
this.threshold == orig(this.threshold)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.errorHandler == orig(this.errorHandler)
this.errorHandler.getClass().getName() == orig(this.errorHandler.getClass().getName())
this.headFilter == orig(this.headFilter)
this.tailFilter == orig(this.tailFilter)
this.closed == orig(this.closed)
this.qw == null
this.layout has only one value
return has only one value
===========================================================================
org.apache.log4j.WriterAppender.getEncoding():::ENTER
this.qw == null
this.layout has only one value
===========================================================================
org.apache.log4j.WriterAppender.getEncoding():::EXIT
this.immediateFlush == orig(this.immediateFlush)
this.encoding == orig(this.encoding)
this.qw == orig(this.qw)
this.layout == orig(this.layout)
this.layout.getClass().getName() == orig(this.layout.getClass().getName())
org.apache.log4j.Layout.LINE_SEP == orig(org.apache.log4j.Layout.LINE_SEP)
org.apache.log4j.Layout.LINE_SEP.toString == orig(org.apache.log4j.Layout.LINE_SEP.toString)
org.apache.log4j.Layout.LINE_SEP_LEN == orig(org.apache.log4j.Layout.LINE_SEP_LEN)
this.name == orig(this.name)
this.threshold == orig(this.threshold)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.errorHandler == orig(this.errorHandler)
this.errorHandler.getClass().getName() == orig(this.errorHandler.getClass().getName())
this.headFilter == orig(this.headFilter)
this.tailFilter == orig(this.tailFilter)
this.closed == orig(this.closed)
this.qw == null
this.layout has only one value
return == null
===========================================================================
org.apache.log4j.WriterAppender.reset():::ENTER
this.qw == null
this.layout has only one value
===========================================================================
org.apache.log4j.WriterAppender.reset():::EXIT
this.immediateFlush == orig(this.immediateFlush)
this.encoding == orig(this.encoding)
this.qw == orig(this.qw)
this.layout == orig(this.layout)
this.layout.getClass().getName() == orig(this.layout.getClass().getName())
org.apache.log4j.Layout.LINE_SEP == orig(org.apache.log4j.Layout.LINE_SEP)
org.apache.log4j.Layout.LINE_SEP.toString == orig(org.apache.log4j.Layout.LINE_SEP.toString)
org.apache.log4j.Layout.LINE_SEP_LEN == orig(org.apache.log4j.Layout.LINE_SEP_LEN)
this.name == orig(this.name)
this.threshold == orig(this.threshold)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.errorHandler == orig(this.errorHandler)
this.errorHandler.getClass().getName() == orig(this.errorHandler.getClass().getName())
this.headFilter == orig(this.headFilter)
this.tailFilter == orig(this.tailFilter)
this.closed == orig(this.closed)
this.qw == null
this.layout has only one value
===========================================================================
org.apache.log4j.WriterAppender.setWriter(java.io.Writer):::ENTER
this.qw == null
this.layout has only one value
writer has only one value
writer.getClass().getName() == java.io.OutputStreamWriter.class
===========================================================================
org.apache.log4j.WriterAppender.setWriter(java.io.Writer):::EXIT
this.immediateFlush == orig(this.immediateFlush)
this.encoding == orig(this.encoding)
this.layout == orig(this.layout)
this.layout.getClass().getName() == orig(this.layout.getClass().getName())
org.apache.log4j.Layout.LINE_SEP == orig(org.apache.log4j.Layout.LINE_SEP)
org.apache.log4j.Layout.LINE_SEP.toString == orig(org.apache.log4j.Layout.LINE_SEP.toString)
org.apache.log4j.Layout.LINE_SEP_LEN == orig(org.apache.log4j.Layout.LINE_SEP_LEN)
this.name == orig(this.name)
this.threshold == orig(this.threshold)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.errorHandler == orig(this.errorHandler)
this.errorHandler.getClass().getName() == orig(this.errorHandler.getClass().getName())
this.headFilter == orig(this.headFilter)
this.tailFilter == orig(this.tailFilter)
this.closed == orig(this.closed)
this.qw has only one value
this.layout has only one value
===========================================================================
org.apache.log4j.WriterAppender.writeHeader():::ENTER
this.qw has only one value
this.layout has only one value
===========================================================================
org.apache.log4j.WriterAppender.writeHeader():::EXIT
this.immediateFlush == orig(this.immediateFlush)
this.encoding == orig(this.encoding)
this.qw == orig(this.qw)
this.qw.errorHandler == orig(this.qw.errorHandler)
this.qw.errorHandler.getClass().getName() == orig(this.qw.errorHandler.getClass().getName())
this.layout == orig(this.layout)
this.layout.getClass().getName() == orig(this.layout.getClass().getName())
org.apache.log4j.Layout.LINE_SEP == orig(org.apache.log4j.Layout.LINE_SEP)
org.apache.log4j.Layout.LINE_SEP.toString == orig(org.apache.log4j.Layout.LINE_SEP.toString)
org.apache.log4j.Layout.LINE_SEP_LEN == orig(org.apache.log4j.Layout.LINE_SEP_LEN)
this.name == orig(this.name)
this.threshold == orig(this.threshold)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.errorHandler == orig(this.errorHandler)
this.errorHandler.getClass().getName() == orig(this.errorHandler.getClass().getName())
this.headFilter == orig(this.headFilter)
this.tailFilter == orig(this.tailFilter)
this.closed == orig(this.closed)
this.qw has only one value
this.layout has only one value
===========================================================================
org.apache.log4j.helpers.AbsoluteTimeDateFormat:::CLASS
org.apache.log4j.helpers.AbsoluteTimeDateFormat.ABS_TIME_DATE_FORMAT has only one value
org.apache.log4j.helpers.AbsoluteTimeDateFormat.ABS_TIME_DATE_FORMAT.toString == "ABSOLUTE"
org.apache.log4j.helpers.AbsoluteTimeDateFormat.DATE_AND_TIME_DATE_FORMAT has only one value
org.apache.log4j.helpers.AbsoluteTimeDateFormat.DATE_AND_TIME_DATE_FORMAT.toString == "DATE"
org.apache.log4j.helpers.AbsoluteTimeDateFormat.ISO8601_DATE_FORMAT has only one value
org.apache.log4j.helpers.AbsoluteTimeDateFormat.ISO8601_DATE_FORMAT.toString == "ISO8601"
org.apache.log4j.helpers.AbsoluteTimeDateFormat.previousTime == 0
org.apache.log4j.helpers.AbsoluteTimeDateFormat.previousTimeWithoutMillis has only one value
org.apache.log4j.helpers.AbsoluteTimeDateFormat.previousTimeWithoutMillis[] == [0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.log4j.helpers.AbsoluteTimeDateFormat.previousTimeWithoutMillis[] elements == 0
size(org.apache.log4j.helpers.AbsoluteTimeDateFormat.previousTimeWithoutMillis[]) == 9
===========================================================================
org.apache.log4j.helpers.AbsoluteTimeDateFormat:::OBJECT
this has only one value
===========================================================================
org.apache.log4j.helpers.AbsoluteTimeDateFormat.AbsoluteTimeDateFormat():::EXIT
===========================================================================
org.apache.log4j.helpers.AppenderAttachableImpl:::OBJECT
this has only one value
this.appenderList[] contains no nulls and has only one value, of length 1
this.appenderList[] elements has only one value
this.appenderList[].getClass().getName() == [org.apache.log4j.ConsoleAppender]
this.appenderList[].getClass().getName() elements == org.apache.log4j.ConsoleAppender.class
size(this.appenderList[]) == 1
===========================================================================
org.apache.log4j.helpers.AppenderAttachableImpl.AppenderAttachableImpl():::EXIT
this.appenderList == null
===========================================================================
org.apache.log4j.helpers.AppenderAttachableImpl.addAppender(org.apache.log4j.Appender):::ENTER
this.appenderList == null
newAppender has only one value
newAppender.getClass().getName() == org.apache.log4j.ConsoleAppender.class
===========================================================================
org.apache.log4j.helpers.AppenderAttachableImpl.addAppender(org.apache.log4j.Appender):::EXIT53
===========================================================================
org.apache.log4j.helpers.AppenderAttachableImpl.addAppender(org.apache.log4j.Appender):::EXIT
this.appenderList has only one value
===========================================================================
org.apache.log4j.helpers.FormattingInfo:::OBJECT
this has only one value
this.min one of { -1, 5 }
this.max == 2147483647
===========================================================================
org.apache.log4j.helpers.FormattingInfo.FormattingInfo():::EXIT
this.min == -1
this.leftAlign == false
===========================================================================
org.apache.log4j.helpers.FormattingInfo.reset():::ENTER
===========================================================================
org.apache.log4j.helpers.FormattingInfo.reset():::EXIT
this.max == orig(this.max)
this.min == -1
this.leftAlign == false
this.min <= orig(this.min)
===========================================================================
org.apache.log4j.helpers.ISO8601DateFormat:::CLASS
org.apache.log4j.helpers.ISO8601DateFormat.lastTime == 0
org.apache.log4j.helpers.ISO8601DateFormat.lastTimeString has only one value
org.apache.log4j.helpers.ISO8601DateFormat.lastTimeString[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.log4j.helpers.ISO8601DateFormat.lastTimeString[] elements == 0
org.apache.log4j.helpers.AbsoluteTimeDateFormat.ABS_TIME_DATE_FORMAT has only one value
org.apache.log4j.helpers.AbsoluteTimeDateFormat.ABS_TIME_DATE_FORMAT.toString == "ABSOLUTE"
org.apache.log4j.helpers.AbsoluteTimeDateFormat.DATE_AND_TIME_DATE_FORMAT has only one value
org.apache.log4j.helpers.AbsoluteTimeDateFormat.DATE_AND_TIME_DATE_FORMAT.toString == "DATE"
org.apache.log4j.helpers.AbsoluteTimeDateFormat.ISO8601_DATE_FORMAT has only one value
org.apache.log4j.helpers.AbsoluteTimeDateFormat.ISO8601_DATE_FORMAT.toString == "ISO8601"
org.apache.log4j.helpers.AbsoluteTimeDateFormat.previousTime == 0
org.apache.log4j.helpers.AbsoluteTimeDateFormat.previousTimeWithoutMillis has only one value
org.apache.log4j.helpers.AbsoluteTimeDateFormat.previousTimeWithoutMillis[] == [0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.log4j.helpers.AbsoluteTimeDateFormat.previousTimeWithoutMillis[] elements == 0
size(org.apache.log4j.helpers.ISO8601DateFormat.lastTimeString[]) == 20
size(org.apache.log4j.helpers.AbsoluteTimeDateFormat.previousTimeWithoutMillis[]) == 9
===========================================================================
org.apache.log4j.helpers.ISO8601DateFormat:::OBJECT
this has only one value
===========================================================================
org.apache.log4j.helpers.ISO8601DateFormat.ISO8601DateFormat():::EXIT
===========================================================================
org.apache.log4j.helpers.Loader.class$(java.lang.String):::ENTER
x0.toString one of { "java.lang.Thread", "org.apache.log4j.helpers.Loader" }
===========================================================================
org.apache.log4j.helpers.Loader.class$(java.lang.String):::EXIT
x0.toString == orig(x0.toString)
x0.toString one of { "java.lang.Thread", "org.apache.log4j.helpers.Loader" }
===========================================================================
org.apache.log4j.helpers.Loader.getResource(java.lang.String):::ENTER
resource.toString one of { "log4j.properties", "log4j.xml" }
===========================================================================
org.apache.log4j.helpers.Loader.getResource(java.lang.String):::EXIT125
===========================================================================
org.apache.log4j.helpers.Loader.getResource(java.lang.String):::EXIT
resource.toString == orig(resource.toString)
resource.toString one of { "log4j.properties", "log4j.xml" }
return == null
===========================================================================
org.apache.log4j.helpers.Loader.getTCL():::EXIT155
===========================================================================
org.apache.log4j.helpers.Loader.getTCL():::EXIT
return has only one value
return.getClass().getName() == jdk.internal.loader.ClassLoaders$AppClassLoader.class
===========================================================================
org.apache.log4j.helpers.LogLog.debug(java.lang.String):::ENTER
===========================================================================
org.apache.log4j.helpers.LogLog.debug(java.lang.String):::EXIT
msg.toString == orig(msg.toString)
===========================================================================
org.apache.log4j.helpers.OnlyOnceErrorHandler:::OBJECT
this has only one value
this.WARN_PREFIX has only one value
this.WARN_PREFIX.toString == "log4j warning: "
this.ERROR_PREFIX has only one value
this.ERROR_PREFIX.toString == "log4j error: "
this.firstTime == true
===========================================================================
org.apache.log4j.helpers.OnlyOnceErrorHandler.OnlyOnceErrorHandler():::EXIT
===========================================================================
org.apache.log4j.helpers.OptionConverter:::CLASS
org.apache.log4j.helpers.OptionConverter.DELIM_START has only one value
org.apache.log4j.helpers.OptionConverter.DELIM_START != null
org.apache.log4j.helpers.OptionConverter.DELIM_START.toString == "${"
org.apache.log4j.helpers.OptionConverter.DELIM_STOP == 125
org.apache.log4j.helpers.OptionConverter.DELIM_START_LEN == 2
org.apache.log4j.helpers.OptionConverter.DELIM_STOP_LEN == 1
org.apache.log4j.helpers.OptionConverter.class$java$lang$String == null
org.apache.log4j.helpers.OptionConverter.class$org$apache$log4j$Level == null
org.apache.log4j.helpers.OptionConverter.class$org$apache$log4j$spi$Configurator == null
===========================================================================
org.apache.log4j.helpers.OptionConverter.getSystemProperty(java.lang.String, java.lang.String):::ENTER
def == null
===========================================================================
org.apache.log4j.helpers.OptionConverter.getSystemProperty(java.lang.String, java.lang.String):::EXIT101
===========================================================================
org.apache.log4j.helpers.OptionConverter.getSystemProperty(java.lang.String, java.lang.String):::EXIT
org.apache.log4j.helpers.OptionConverter.DELIM_START == orig(org.apache.log4j.helpers.OptionConverter.DELIM_START)
org.apache.log4j.helpers.OptionConverter.DELIM_START.toString == orig(org.apache.log4j.helpers.OptionConverter.DELIM_START.toString)
org.apache.log4j.helpers.OptionConverter.DELIM_STOP == orig(org.apache.log4j.helpers.OptionConverter.DELIM_STOP)
org.apache.log4j.helpers.OptionConverter.DELIM_START_LEN == orig(org.apache.log4j.helpers.OptionConverter.DELIM_START_LEN)
org.apache.log4j.helpers.OptionConverter.DELIM_STOP_LEN == orig(org.apache.log4j.helpers.OptionConverter.DELIM_STOP_LEN)
org.apache.log4j.helpers.OptionConverter.class$java$lang$String == orig(org.apache.log4j.helpers.OptionConverter.class$java$lang$String)
org.apache.log4j.helpers.OptionConverter.class$org$apache$log4j$Level == orig(org.apache.log4j.helpers.OptionConverter.class$org$apache$log4j$Level)
org.apache.log4j.helpers.OptionConverter.class$org$apache$log4j$spi$Configurator == orig(org.apache.log4j.helpers.OptionConverter.class$org$apache$log4j$spi$Configurator)
key.toString == orig(key.toString)
return.toString == "11.0.26"
===========================================================================
org.apache.log4j.helpers.PatternConverter:::OBJECT
this.next == null
org.apache.log4j.helpers.PatternConverter.SPACES has only one value
org.apache.log4j.helpers.PatternConverter.SPACES != null
org.apache.log4j.helpers.PatternConverter.SPACES.getClass().getName() == java.lang.String[].class
org.apache.log4j.helpers.PatternConverter.SPACES[] contains no nulls and has only one value, of length 6
org.apache.log4j.helpers.PatternConverter.SPACES[] elements != null
org.apache.log4j.helpers.PatternConverter.SPACES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.apache.log4j.helpers.PatternConverter.SPACES[].getClass().getName() elements == java.lang.String.class
org.apache.log4j.helpers.PatternConverter.SPACES[].toString == [ ,   ,     ,         ,                 ,                                 ]
this.min one of { -1, 5 }
this.max == 2147483647
size(org.apache.log4j.helpers.PatternConverter.SPACES[]) == 6
===========================================================================
org.apache.log4j.helpers.PatternConverter.PatternConverter():::EXIT
this.min == -1
this.leftAlign == false
===========================================================================
org.apache.log4j.helpers.PatternConverter.PatternConverter(org.apache.log4j.helpers.FormattingInfo):::ENTER
fi has only one value
fi.min one of { -1, 5 }
fi.max == 2147483647
===========================================================================
org.apache.log4j.helpers.PatternConverter.PatternConverter(org.apache.log4j.helpers.FormattingInfo):::EXIT
fi.min == orig(fi.min)
fi.max == orig(fi.max)
fi.leftAlign == orig(fi.leftAlign)
fi.min one of { -1, 5 }
fi.max == 2147483647
===========================================================================
org.apache.log4j.helpers.PatternParser$BasicPatternConverter:::OBJECT
this.next == null
org.apache.log4j.helpers.PatternConverter.SPACES has only one value
org.apache.log4j.helpers.PatternConverter.SPACES.getClass().getName() == java.lang.String[].class
org.apache.log4j.helpers.PatternConverter.SPACES[] contains no nulls and has only one value, of length 6
org.apache.log4j.helpers.PatternConverter.SPACES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.apache.log4j.helpers.PatternConverter.SPACES[].getClass().getName() elements == java.lang.String.class
org.apache.log4j.helpers.PatternConverter.SPACES[].toString == [ ,   ,     ,         ,                 ,                                 ]
this.min one of { -1, 5 }
this.max == 2147483647
size(org.apache.log4j.helpers.PatternConverter.SPACES[]) == 6
===========================================================================
org.apache.log4j.helpers.PatternParser$BasicPatternConverter.BasicPatternConverter(org.apache.log4j.helpers.FormattingInfo, int):::ENTER
formattingInfo has only one value
formattingInfo.min one of { -1, 5 }
formattingInfo.max == 2147483647
===========================================================================
org.apache.log4j.helpers.PatternParser$BasicPatternConverter.BasicPatternConverter(org.apache.log4j.helpers.FormattingInfo, int):::EXIT
formattingInfo.min == orig(formattingInfo.min)
formattingInfo.max == orig(formattingInfo.max)
formattingInfo.leftAlign == orig(formattingInfo.leftAlign)
formattingInfo.min one of { -1, 5 }
formattingInfo.max == 2147483647
===========================================================================
org.apache.log4j.helpers.PatternParser$CategoryPatternConverter:::OBJECT
this has only one value
org.apache.log4j.helpers.PatternParser.this has only one value
org.apache.log4j.helpers.PatternParser.this.state == 1
org.apache.log4j.helpers.PatternParser.this.currentLiteral has only one value
org.apache.log4j.helpers.PatternParser.this.patternLength == 34
org.apache.log4j.helpers.PatternParser.this.i == 24
org.apache.log4j.helpers.PatternParser.this.head has only one value
org.apache.log4j.helpers.PatternParser.this.head.getClass().getName() == org.apache.log4j.helpers.PatternParser$DatePatternConverter.class
org.apache.log4j.helpers.PatternParser.this.head.next has only one value
org.apache.log4j.helpers.PatternParser.this.head.next.getClass().getName() == org.apache.log4j.helpers.PatternParser$LiteralPatternConverter.class
org.apache.log4j.helpers.PatternParser.this.head.min == -1
org.apache.log4j.helpers.PatternParser.this.head.max == 2147483647
org.apache.log4j.helpers.PatternParser.this.head.leftAlign == false
org.apache.log4j.helpers.PatternConverter.SPACES has only one value
org.apache.log4j.helpers.PatternConverter.SPACES.getClass().getName() == java.lang.String[].class
org.apache.log4j.helpers.PatternConverter.SPACES[] contains no nulls and has only one value, of length 6
org.apache.log4j.helpers.PatternConverter.SPACES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.apache.log4j.helpers.PatternConverter.SPACES[].getClass().getName() elements == java.lang.String.class
org.apache.log4j.helpers.PatternConverter.SPACES[].toString == [ ,   ,     ,         ,                 ,                                 ]
org.apache.log4j.helpers.PatternParser.this.tail has only one value
org.apache.log4j.helpers.PatternParser.this.tail.getClass().getName() == org.apache.log4j.helpers.PatternParser$LiteralPatternConverter.class
org.apache.log4j.helpers.PatternParser.this.tail.next == null
org.apache.log4j.helpers.PatternParser.this.tail.min == -1
org.apache.log4j.helpers.PatternParser.this.tail.max == 2147483647
org.apache.log4j.helpers.PatternParser.this.tail.leftAlign == false
org.apache.log4j.helpers.PatternParser.this.formattingInfo has only one value
org.apache.log4j.helpers.PatternParser.this.formattingInfo.min == -1
org.apache.log4j.helpers.PatternParser.this.formattingInfo.max == 2147483647
org.apache.log4j.helpers.PatternParser.this.formattingInfo.leftAlign == false
org.apache.log4j.helpers.PatternParser.this.pattern has only one value
org.apache.log4j.helpers.PatternParser.this.pattern.toString == "%d{ISO8601} [%t] %-5p %c %x - %m%n"
org.apache.log4j.helpers.PatternParser.class$java$text$DateFormat == null
this.precision == 0
this.next == null
this.min == -1
this.max == 2147483647
this.leftAlign == false
size(org.apache.log4j.helpers.PatternConverter.SPACES[]) == 6
===========================================================================
org.apache.log4j.helpers.PatternParser$CategoryPatternConverter.CategoryPatternConverter(org.apache.log4j.helpers.PatternParser, org.apache.log4j.helpers.FormattingInfo, int):::ENTER
org.apache.log4j.helpers.PatternParser.this has only one value
org.apache.log4j.helpers.PatternParser.this.state == 1
org.apache.log4j.helpers.PatternParser.this.currentLiteral has only one value
org.apache.log4j.helpers.PatternParser.this.patternLength == 34
org.apache.log4j.helpers.PatternParser.this.i == 24
org.apache.log4j.helpers.PatternParser.this.head has only one value
org.apache.log4j.helpers.PatternParser.this.head.getClass().getName() == org.apache.log4j.helpers.PatternParser$DatePatternConverter.class
org.apache.log4j.helpers.PatternParser.this.head.next has only one value
org.apache.log4j.helpers.PatternParser.this.head.next.getClass().getName() == org.apache.log4j.helpers.PatternParser$LiteralPatternConverter.class
org.apache.log4j.helpers.PatternParser.this.head.min == -1
org.apache.log4j.helpers.PatternParser.this.head.max == 2147483647
org.apache.log4j.helpers.PatternParser.this.head.leftAlign == false
org.apache.log4j.helpers.PatternConverter.SPACES has only one value
org.apache.log4j.helpers.PatternConverter.SPACES.getClass().getName() == java.lang.String[].class
org.apache.log4j.helpers.PatternConverter.SPACES[] contains no nulls and has only one value, of length 6
org.apache.log4j.helpers.PatternConverter.SPACES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.apache.log4j.helpers.PatternConverter.SPACES[].getClass().getName() elements == java.lang.String.class
org.apache.log4j.helpers.PatternConverter.SPACES[].toString == [ ,   ,     ,         ,                 ,                                 ]
org.apache.log4j.helpers.PatternParser.this.tail has only one value
org.apache.log4j.helpers.PatternParser.this.tail.getClass().getName() == org.apache.log4j.helpers.PatternParser$LiteralPatternConverter.class
org.apache.log4j.helpers.PatternParser.this.tail.next == null
org.apache.log4j.helpers.PatternParser.this.tail.min == -1
org.apache.log4j.helpers.PatternParser.this.tail.max == 2147483647
org.apache.log4j.helpers.PatternParser.this.tail.leftAlign == false
org.apache.log4j.helpers.PatternParser.this.formattingInfo has only one value
org.apache.log4j.helpers.PatternParser.this.formattingInfo.min == -1
org.apache.log4j.helpers.PatternParser.this.formattingInfo.max == 2147483647
org.apache.log4j.helpers.PatternParser.this.formattingInfo.leftAlign == false
org.apache.log4j.helpers.PatternParser.this.pattern has only one value
org.apache.log4j.helpers.PatternParser.this.pattern.toString == "%d{ISO8601} [%t] %-5p %c %x - %m%n"
org.apache.log4j.helpers.PatternParser.class$java$text$DateFormat == null
formattingInfo has only one value
formattingInfo.min == -1
formattingInfo.max == 2147483647
formattingInfo.leftAlign == false
precision == 0
size(org.apache.log4j.helpers.PatternConverter.SPACES[]) == 6
===========================================================================
org.apache.log4j.helpers.PatternParser$CategoryPatternConverter.CategoryPatternConverter(org.apache.log4j.helpers.PatternParser, org.apache.log4j.helpers.FormattingInfo, int):::EXIT
org.apache.log4j.helpers.PatternParser.this == orig(org.apache.log4j.helpers.PatternParser.this)
org.apache.log4j.helpers.PatternParser.this.state == orig(org.apache.log4j.helpers.PatternParser.this.state)
org.apache.log4j.helpers.PatternParser.this.currentLiteral == orig(org.apache.log4j.helpers.PatternParser.this.currentLiteral)
org.apache.log4j.helpers.PatternParser.this.patternLength == orig(org.apache.log4j.helpers.PatternParser.this.patternLength)
org.apache.log4j.helpers.PatternParser.this.i == orig(org.apache.log4j.helpers.PatternParser.this.i)
org.apache.log4j.helpers.PatternParser.this.head == orig(org.apache.log4j.helpers.PatternParser.this.head)
org.apache.log4j.helpers.PatternParser.this.head.getClass().getName() == orig(org.apache.log4j.helpers.PatternParser.this.head.getClass().getName())
org.apache.log4j.helpers.PatternParser.this.head.next == orig(org.apache.log4j.helpers.PatternParser.this.head.next)
org.apache.log4j.helpers.PatternParser.this.head.next.getClass().getName() == orig(org.apache.log4j.helpers.PatternParser.this.head.next.getClass().getName())
org.apache.log4j.helpers.PatternParser.this.head.min == orig(org.apache.log4j.helpers.PatternParser.this.head.min)
org.apache.log4j.helpers.PatternParser.this.head.max == orig(org.apache.log4j.helpers.PatternParser.this.head.max)
org.apache.log4j.helpers.PatternParser.this.head.leftAlign == orig(org.apache.log4j.helpers.PatternParser.this.head.leftAlign)
org.apache.log4j.helpers.PatternConverter.SPACES == orig(org.apache.log4j.helpers.PatternConverter.SPACES)
org.apache.log4j.helpers.PatternConverter.SPACES.getClass().getName() == orig(org.apache.log4j.helpers.PatternConverter.SPACES.getClass().getName())
org.apache.log4j.helpers.PatternConverter.SPACES[] == orig(org.apache.log4j.helpers.PatternConverter.SPACES[])
org.apache.log4j.helpers.PatternParser.this.tail == orig(org.apache.log4j.helpers.PatternParser.this.tail)
org.apache.log4j.helpers.PatternParser.this.tail.getClass().getName() == orig(org.apache.log4j.helpers.PatternParser.this.tail.getClass().getName())
org.apache.log4j.helpers.PatternParser.this.tail.next == orig(org.apache.log4j.helpers.PatternParser.this.tail.next)
org.apache.log4j.helpers.PatternParser.this.tail.min == orig(org.apache.log4j.helpers.PatternParser.this.tail.min)
org.apache.log4j.helpers.PatternParser.this.tail.max == orig(org.apache.log4j.helpers.PatternParser.this.tail.max)
org.apache.log4j.helpers.PatternParser.this.tail.leftAlign == orig(org.apache.log4j.helpers.PatternParser.this.tail.leftAlign)
org.apache.log4j.helpers.PatternParser.this.formattingInfo == orig(org.apache.log4j.helpers.PatternParser.this.formattingInfo)
org.apache.log4j.helpers.PatternParser.this.formattingInfo.min == orig(org.apache.log4j.helpers.PatternParser.this.formattingInfo.min)
org.apache.log4j.helpers.PatternParser.this.formattingInfo.max == orig(org.apache.log4j.helpers.PatternParser.this.formattingInfo.max)
org.apache.log4j.helpers.PatternParser.this.formattingInfo.leftAlign == orig(org.apache.log4j.helpers.PatternParser.this.formattingInfo.leftAlign)
org.apache.log4j.helpers.PatternParser.this.pattern == orig(org.apache.log4j.helpers.PatternParser.this.pattern)
org.apache.log4j.helpers.PatternParser.this.pattern.toString == orig(org.apache.log4j.helpers.PatternParser.this.pattern.toString)
org.apache.log4j.helpers.PatternParser.class$java$text$DateFormat == orig(org.apache.log4j.helpers.PatternParser.class$java$text$DateFormat)
formattingInfo.min == orig(formattingInfo.min)
formattingInfo.max == orig(formattingInfo.max)
formattingInfo.leftAlign == orig(formattingInfo.leftAlign)
formattingInfo.min == -1
formattingInfo.max == 2147483647
formattingInfo.leftAlign == false
===========================================================================
org.apache.log4j.helpers.PatternParser$DatePatternConverter:::OBJECT
this has only one value
this.df has only one value
this.df.getClass().getName() == org.apache.log4j.helpers.ISO8601DateFormat.class
this.date has only one value
this.next == null
org.apache.log4j.helpers.PatternConverter.SPACES has only one value
org.apache.log4j.helpers.PatternConverter.SPACES.getClass().getName() == java.lang.String[].class
org.apache.log4j.helpers.PatternConverter.SPACES[] contains no nulls and has only one value, of length 6
org.apache.log4j.helpers.PatternConverter.SPACES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.apache.log4j.helpers.PatternConverter.SPACES[].getClass().getName() elements == java.lang.String.class
org.apache.log4j.helpers.PatternConverter.SPACES[].toString == [ ,   ,     ,         ,                 ,                                 ]
this.min == -1
this.max == 2147483647
this.leftAlign == false
size(org.apache.log4j.helpers.PatternConverter.SPACES[]) == 6
===========================================================================
org.apache.log4j.helpers.PatternParser$DatePatternConverter.DatePatternConverter(org.apache.log4j.helpers.FormattingInfo, java.text.DateFormat):::ENTER
formattingInfo has only one value
formattingInfo.min == -1
formattingInfo.max == 2147483647
formattingInfo.leftAlign == false
df has only one value
df.getClass().getName() == org.apache.log4j.helpers.ISO8601DateFormat.class
===========================================================================
org.apache.log4j.helpers.PatternParser$DatePatternConverter.DatePatternConverter(org.apache.log4j.helpers.FormattingInfo, java.text.DateFormat):::EXIT
formattingInfo.min == orig(formattingInfo.min)
formattingInfo.max == orig(formattingInfo.max)
formattingInfo.leftAlign == orig(formattingInfo.leftAlign)
formattingInfo.min == -1
formattingInfo.max == 2147483647
formattingInfo.leftAlign == false
===========================================================================
org.apache.log4j.helpers.PatternParser$LiteralPatternConverter:::OBJECT
this.next == null
org.apache.log4j.helpers.PatternConverter.SPACES has only one value
org.apache.log4j.helpers.PatternConverter.SPACES.getClass().getName() == java.lang.String[].class
org.apache.log4j.helpers.PatternConverter.SPACES[] contains no nulls and has only one value, of length 6
org.apache.log4j.helpers.PatternConverter.SPACES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.apache.log4j.helpers.PatternConverter.SPACES[].getClass().getName() elements == java.lang.String.class
org.apache.log4j.helpers.PatternConverter.SPACES[].toString == [ ,   ,     ,         ,                 ,                                 ]
this.min == -1
this.max == 2147483647
this.leftAlign == false
size(org.apache.log4j.helpers.PatternConverter.SPACES[]) == 6
===========================================================================
org.apache.log4j.helpers.PatternParser$LiteralPatternConverter.LiteralPatternConverter(java.lang.String):::ENTER
===========================================================================
org.apache.log4j.helpers.PatternParser$LiteralPatternConverter.LiteralPatternConverter(java.lang.String):::EXIT
value.toString == orig(value.toString)
===========================================================================
org.apache.log4j.helpers.PatternParser$NamedPatternConverter:::OBJECT
this has only one value
this.getClass().getName() == org.apache.log4j.helpers.PatternParser$CategoryPatternConverter.class
this.precision == 0
this.next == null
org.apache.log4j.helpers.PatternConverter.SPACES has only one value
org.apache.log4j.helpers.PatternConverter.SPACES.getClass().getName() == java.lang.String[].class
org.apache.log4j.helpers.PatternConverter.SPACES[] contains no nulls and has only one value, of length 6
org.apache.log4j.helpers.PatternConverter.SPACES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.apache.log4j.helpers.PatternConverter.SPACES[].getClass().getName() elements == java.lang.String.class
org.apache.log4j.helpers.PatternConverter.SPACES[].toString == [ ,   ,     ,         ,                 ,                                 ]
this.min == -1
this.max == 2147483647
this.leftAlign == false
size(org.apache.log4j.helpers.PatternConverter.SPACES[]) == 6
===========================================================================
org.apache.log4j.helpers.PatternParser$NamedPatternConverter.NamedPatternConverter(org.apache.log4j.helpers.FormattingInfo, int):::ENTER
formattingInfo has only one value
formattingInfo.min == -1
formattingInfo.max == 2147483647
formattingInfo.leftAlign == false
precision == 0
===========================================================================
org.apache.log4j.helpers.PatternParser$NamedPatternConverter.NamedPatternConverter(org.apache.log4j.helpers.FormattingInfo, int):::EXIT
formattingInfo.min == orig(formattingInfo.min)
formattingInfo.max == orig(formattingInfo.max)
formattingInfo.leftAlign == orig(formattingInfo.leftAlign)
formattingInfo.min == -1
formattingInfo.max == 2147483647
formattingInfo.leftAlign == false
===========================================================================
org.apache.log4j.helpers.PatternParser:::CLASS
org.apache.log4j.helpers.PatternParser.class$java$text$DateFormat == null
===========================================================================
org.apache.log4j.helpers.PatternParser:::OBJECT
this has only one value
this.state one of { 0, 1, 4 }
this.currentLiteral has only one value
this.currentLiteral != null
this.patternLength == 34
this.i >= 0
this.head.getClass().getName() == org.apache.log4j.helpers.PatternParser$DatePatternConverter.class
this.head.next.getClass().getName() == org.apache.log4j.helpers.PatternParser$LiteralPatternConverter.class
this.head.next.next.getClass().getName() == org.apache.log4j.helpers.PatternParser$BasicPatternConverter.class
this.head.next.min == -1
this.head.next.max == 2147483647
this.head.next.leftAlign == false
org.apache.log4j.helpers.PatternConverter.SPACES has only one value
org.apache.log4j.helpers.PatternConverter.SPACES != null
org.apache.log4j.helpers.PatternConverter.SPACES.getClass().getName() == java.lang.String[].class
org.apache.log4j.helpers.PatternConverter.SPACES[] contains no nulls and has only one value, of length 6
org.apache.log4j.helpers.PatternConverter.SPACES[] elements != null
org.apache.log4j.helpers.PatternConverter.SPACES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.apache.log4j.helpers.PatternConverter.SPACES[].getClass().getName() elements == java.lang.String.class
org.apache.log4j.helpers.PatternConverter.SPACES[].toString == [ ,   ,     ,         ,                 ,                                 ]
this.head.min == -1
this.head.max == 2147483647
this.head.leftAlign == false
this.tail.next == null
this.tail.min one of { -1, 5 }
this.tail.min != 0
this.tail.max == 2147483647
this.formattingInfo has only one value
this.formattingInfo != null
this.formattingInfo.min one of { -1, 5 }
this.formattingInfo.min != 0
this.formattingInfo.max == 2147483647
this.pattern has only one value
this.pattern != null
this.pattern.toString == "%d{ISO8601} [%t] %-5p %c %x - %m%n"
size(org.apache.log4j.helpers.PatternConverter.SPACES[]) == 6
===========================================================================
org.apache.log4j.helpers.PatternParser.PatternParser(java.lang.String):::ENTER
pattern has only one value
pattern.toString == "%d{ISO8601} [%t] %-5p %c %x - %m%n"
===========================================================================
org.apache.log4j.helpers.PatternParser.PatternParser(java.lang.String):::EXIT
pattern.toString == orig(pattern.toString)
this.state == 0
this.i == 0
this.head == null
this.tail == null
this.formattingInfo.min == -1
this.formattingInfo.leftAlign == false
pattern.toString == "%d{ISO8601} [%t] %-5p %c %x - %m%n"
===========================================================================
org.apache.log4j.helpers.PatternParser.addConverter(org.apache.log4j.helpers.PatternConverter):::ENTER
this.state one of { 1, 4 }
this.head.next has only one value
this.tail.getClass().getName() == org.apache.log4j.helpers.PatternParser$LiteralPatternConverter.class
this.tail.min == -1
this.tail.leftAlign == false
pc.next == null
pc.min one of { -1, 5 }
pc.max == 2147483647
===========================================================================
org.apache.log4j.helpers.PatternParser.addConverter(org.apache.log4j.helpers.PatternConverter):::EXIT
this.currentLiteral == orig(this.currentLiteral)
this.patternLength == orig(this.patternLength)
this.i == orig(this.i)
this.head.getClass().getName() == orig(this.head.getClass().getName())
this.head.next == orig(this.head.next)
this.head.next.getClass().getName() == orig(this.head.next.getClass().getName())
this.head.next.next.getClass().getName() == orig(this.head.next.next.getClass().getName())
this.head.next.min == orig(this.head.next.min)
this.head.next.max == orig(this.head.next.max)
this.head.next.leftAlign == orig(this.head.next.leftAlign)
org.apache.log4j.helpers.PatternConverter.SPACES == orig(org.apache.log4j.helpers.PatternConverter.SPACES)
org.apache.log4j.helpers.PatternConverter.SPACES.getClass().getName() == orig(org.apache.log4j.helpers.PatternConverter.SPACES.getClass().getName())
org.apache.log4j.helpers.PatternConverter.SPACES[] == orig(org.apache.log4j.helpers.PatternConverter.SPACES[])
this.head.min == orig(this.head.min)
this.head.max == orig(this.head.max)
this.head.leftAlign == orig(this.head.leftAlign)
this.tail.next == orig(this.tail.next)
this.tail.max == orig(this.tail.max)
this.formattingInfo == orig(this.formattingInfo)
this.formattingInfo.max == orig(this.formattingInfo.max)
this.pattern == orig(this.pattern)
this.pattern.toString == orig(this.pattern.toString)
org.apache.log4j.helpers.PatternParser.class$java$text$DateFormat == orig(org.apache.log4j.helpers.PatternParser.class$java$text$DateFormat)
pc.next == orig(pc.next)
pc.min == orig(pc.min)
pc.max == orig(pc.max)
pc.leftAlign == orig(pc.leftAlign)
this.state == 0
this.head has only one value
this.head.next.next has only one value
this.formattingInfo.min == -1
this.formattingInfo.leftAlign == false
pc.next == null
pc.min one of { -1, 5 }
pc.max == 2147483647
===========================================================================
org.apache.log4j.helpers.PatternParser.addToList(org.apache.log4j.helpers.PatternConverter):::ENTER
pc != null
pc.next == null
pc.min one of { -1, 5 }
pc.max == 2147483647
===========================================================================
org.apache.log4j.helpers.PatternParser.addToList(org.apache.log4j.helpers.PatternConverter):::EXIT
this.state == orig(this.state)
this.currentLiteral == orig(this.currentLiteral)
this.patternLength == orig(this.patternLength)
this.i == orig(this.i)
this.head.getClass().getName() == orig(this.head.getClass().getName())
this.head.next.getClass().getName() == orig(this.head.next.getClass().getName())
this.head.next.next.getClass().getName() == orig(this.head.next.next.getClass().getName())
this.head.next.min == orig(this.head.next.min)
this.head.next.max == orig(this.head.next.max)
this.head.next.leftAlign == orig(this.head.next.leftAlign)
org.apache.log4j.helpers.PatternConverter.SPACES == orig(org.apache.log4j.helpers.PatternConverter.SPACES)
org.apache.log4j.helpers.PatternConverter.SPACES.getClass().getName() == orig(org.apache.log4j.helpers.PatternConverter.SPACES.getClass().getName())
org.apache.log4j.helpers.PatternConverter.SPACES[] == orig(org.apache.log4j.helpers.PatternConverter.SPACES[])
this.head.min == orig(this.head.min)
this.head.max == orig(this.head.max)
this.head.leftAlign == orig(this.head.leftAlign)
this.tail.next == orig(this.tail.next)
this.tail.max == orig(this.tail.max)
this.formattingInfo == orig(this.formattingInfo)
this.formattingInfo.min == orig(this.formattingInfo.min)
this.formattingInfo.max == orig(this.formattingInfo.max)
this.formattingInfo.leftAlign == orig(this.formattingInfo.leftAlign)
this.pattern == orig(this.pattern)
this.pattern.toString == orig(this.pattern.toString)
org.apache.log4j.helpers.PatternParser.class$java$text$DateFormat == orig(org.apache.log4j.helpers.PatternParser.class$java$text$DateFormat)
pc.next == orig(pc.next)
pc.min == orig(pc.min)
pc.max == orig(pc.max)
pc.leftAlign == orig(pc.leftAlign)
this.head has only one value
this.head != null
this.tail != null
pc.next == null
pc.min one of { -1, 5 }
pc.max == 2147483647
this.tail.getClass().getName() != orig(this.tail.getClass().getName())
===========================================================================
org.apache.log4j.helpers.PatternParser.extractOption():::ENTER
this.state == 1
this.i one of { 2, 24 }
this.head.next has only one value
this.head.next.next has only one value
this.tail.getClass().getName() == org.apache.log4j.helpers.PatternParser$LiteralPatternConverter.class
this.tail.min == -1
this.tail.leftAlign == false
this.formattingInfo.min == -1
this.formattingInfo.leftAlign == false
===========================================================================
org.apache.log4j.helpers.PatternParser.extractOption():::EXIT101
this.i == 11
this.head == null
this.tail == null
return has only one value
orig(this.i) == 2
===========================================================================
org.apache.log4j.helpers.PatternParser.extractOption():::EXIT104
this.i == orig(this.i)
this.i == 24
this.head has only one value
this.tail has only one value
return == null
===========================================================================
org.apache.log4j.helpers.PatternParser.extractOption():::EXIT
this.state == orig(this.state)
this.currentLiteral == orig(this.currentLiteral)
this.patternLength == orig(this.patternLength)
this.head == orig(this.head)
this.head.getClass().getName() == orig(this.head.getClass().getName())
this.head.next == orig(this.head.next)
this.head.next.getClass().getName() == orig(this.head.next.getClass().getName())
this.head.next.next == orig(this.head.next.next)
this.head.next.next.getClass().getName() == orig(this.head.next.next.getClass().getName())
this.head.next.min == orig(this.head.next.min)
this.head.next.max == orig(this.head.next.max)
this.head.next.leftAlign == orig(this.head.next.leftAlign)
org.apache.log4j.helpers.PatternConverter.SPACES == orig(org.apache.log4j.helpers.PatternConverter.SPACES)
org.apache.log4j.helpers.PatternConverter.SPACES.getClass().getName() == orig(org.apache.log4j.helpers.PatternConverter.SPACES.getClass().getName())
org.apache.log4j.helpers.PatternConverter.SPACES[] == orig(org.apache.log4j.helpers.PatternConverter.SPACES[])
this.head.min == orig(this.head.min)
this.head.max == orig(this.head.max)
this.head.leftAlign == orig(this.head.leftAlign)
this.tail == orig(this.tail)
this.tail.getClass().getName() == orig(this.tail.getClass().getName())
this.tail.next == orig(this.tail.next)
this.tail.min == orig(this.tail.min)
this.tail.max == orig(this.tail.max)
this.tail.leftAlign == orig(this.tail.leftAlign)
this.formattingInfo == orig(this.formattingInfo)
this.formattingInfo.min == orig(this.formattingInfo.min)
this.formattingInfo.max == orig(this.formattingInfo.max)
this.formattingInfo.leftAlign == orig(this.formattingInfo.leftAlign)
this.pattern == orig(this.pattern)
this.pattern.toString == orig(this.pattern.toString)
org.apache.log4j.helpers.PatternParser.class$java$text$DateFormat == orig(org.apache.log4j.helpers.PatternParser.class$java$text$DateFormat)
(this.i == 11)  <==>  (orig(this.i) == 2)
(this.i == 11)  <==>  (return has only one value)
(this.i == 11)  <==>  (this.head == null)
(this.i == 11)  <==>  (this.tail == null)
(this.i == 11)  ==>  (return.toString == "ISO8601")
(this.i == 24)  <==>  (orig(this.i) == 24)
(this.i == 24)  <==>  (return == null)
(this.i == 24)  <==>  (this.head has only one value)
(this.i == 24)  <==>  (this.i == orig(this.i))
(this.i == 24)  <==>  (this.tail has only one value)
(this.i == 24)  ==>  (org.apache.log4j.helpers.PatternConverter.SPACES has only one value)
(this.i == 24)  ==>  (org.apache.log4j.helpers.PatternConverter.SPACES.getClass().getName() == java.lang.String[].class)
(this.i == 24)  ==>  (org.apache.log4j.helpers.PatternConverter.SPACES[] contains no nulls and has only one value, of length 6)
(this.i == 24)  ==>  (org.apache.log4j.helpers.PatternConverter.SPACES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String])
(this.i == 24)  ==>  (org.apache.log4j.helpers.PatternConverter.SPACES[].getClass().getName() elements == java.lang.String.class)
(this.i == 24)  ==>  (org.apache.log4j.helpers.PatternConverter.SPACES[].toString == [ ,   ,     ,         ,                 ,                                 ])
(this.i == 24)  ==>  (this.head.getClass().getName() == org.apache.log4j.helpers.PatternParser$DatePatternConverter.class)
(this.i == 24)  ==>  (this.head.next has only one value)
(this.i == 24)  ==>  (this.head.next.getClass().getName() == org.apache.log4j.helpers.PatternParser$LiteralPatternConverter.class)
(this.i == 24)  ==>  (this.head.next.next has only one value)
(this.i == 24)  ==>  (this.head.next.next.getClass().getName() == org.apache.log4j.helpers.PatternParser$BasicPatternConverter.class)
(this.i == 24)  ==>  (this.tail.getClass().getName() == org.apache.log4j.helpers.PatternParser$LiteralPatternConverter.class)
(this.i == 24)  ==>  (this.tail.next == null)
this.state == 1
this.i one of { 11, 24 }
this.head.next has only one value
this.head.next.next has only one value
this.tail.getClass().getName() == org.apache.log4j.helpers.PatternParser$LiteralPatternConverter.class
this.tail.min == -1
this.tail.leftAlign == false
this.formattingInfo.min == -1
this.formattingInfo.leftAlign == false
return.toString == "ISO8601"
===========================================================================
org.apache.log4j.helpers.PatternParser.extractPrecisionOption():::ENTER
this.state == 1
this.i == 24
this.head has only one value
this.head.next has only one value
this.head.next.next has only one value
this.tail has only one value
this.tail.getClass().getName() == org.apache.log4j.helpers.PatternParser$LiteralPatternConverter.class
this.tail.min == -1
this.tail.leftAlign == false
this.formattingInfo.min == -1
this.formattingInfo.leftAlign == false
===========================================================================
org.apache.log4j.helpers.PatternParser.extractPrecisionOption():::EXIT
this.state == orig(this.state)
this.currentLiteral == orig(this.currentLiteral)
this.patternLength == orig(this.patternLength)
this.i == orig(this.i)
this.head == orig(this.head)
this.head.getClass().getName() == orig(this.head.getClass().getName())
this.head.next == orig(this.head.next)
this.head.next.getClass().getName() == orig(this.head.next.getClass().getName())
this.head.next.next == orig(this.head.next.next)
this.head.next.next.getClass().getName() == orig(this.head.next.next.getClass().getName())
this.head.next.min == orig(this.head.next.min)
this.head.next.max == orig(this.head.next.max)
this.head.next.leftAlign == orig(this.head.next.leftAlign)
org.apache.log4j.helpers.PatternConverter.SPACES == orig(org.apache.log4j.helpers.PatternConverter.SPACES)
org.apache.log4j.helpers.PatternConverter.SPACES.getClass().getName() == orig(org.apache.log4j.helpers.PatternConverter.SPACES.getClass().getName())
org.apache.log4j.helpers.PatternConverter.SPACES[] == orig(org.apache.log4j.helpers.PatternConverter.SPACES[])
this.head.min == orig(this.head.min)
this.head.max == orig(this.head.max)
this.head.leftAlign == orig(this.head.leftAlign)
this.tail == orig(this.tail)
this.tail.getClass().getName() == orig(this.tail.getClass().getName())
this.tail.next == orig(this.tail.next)
this.tail.min == orig(this.tail.min)
this.tail.max == orig(this.tail.max)
this.tail.leftAlign == orig(this.tail.leftAlign)
this.formattingInfo == orig(this.formattingInfo)
this.formattingInfo.min == orig(this.formattingInfo.min)
this.formattingInfo.max == orig(this.formattingInfo.max)
this.formattingInfo.leftAlign == orig(this.formattingInfo.leftAlign)
this.pattern == orig(this.pattern)
this.pattern.toString == orig(this.pattern.toString)
org.apache.log4j.helpers.PatternParser.class$java$text$DateFormat == orig(org.apache.log4j.helpers.PatternParser.class$java$text$DateFormat)
this.state == 1
this.i == 24
this.head has only one value
this.head.next has only one value
this.head.next.next has only one value
this.tail has only one value
this.tail.getClass().getName() == org.apache.log4j.helpers.PatternParser$LiteralPatternConverter.class
this.tail.min == -1
this.tail.leftAlign == false
this.formattingInfo.min == -1
this.formattingInfo.leftAlign == false
return == 0
===========================================================================
org.apache.log4j.helpers.PatternParser.finalizeConverter(char):::ENTER
this.state one of { 1, 4 }
this.head.next has only one value
this.tail.getClass().getName() == org.apache.log4j.helpers.PatternParser$LiteralPatternConverter.class
this.tail.min == -1
this.tail.leftAlign == false
===========================================================================
org.apache.log4j.helpers.PatternParser.finalizeConverter(char):::EXIT
this.currentLiteral == orig(this.currentLiteral)
this.patternLength == orig(this.patternLength)
this.head.getClass().getName() == orig(this.head.getClass().getName())
this.head.next == orig(this.head.next)
this.head.next.getClass().getName() == orig(this.head.next.getClass().getName())
this.head.next.next.getClass().getName() == orig(this.head.next.next.getClass().getName())
this.head.next.min == orig(this.head.next.min)
this.head.next.max == orig(this.head.next.max)
this.head.next.leftAlign == orig(this.head.next.leftAlign)
org.apache.log4j.helpers.PatternConverter.SPACES == orig(org.apache.log4j.helpers.PatternConverter.SPACES)
org.apache.log4j.helpers.PatternConverter.SPACES.getClass().getName() == orig(org.apache.log4j.helpers.PatternConverter.SPACES.getClass().getName())
org.apache.log4j.helpers.PatternConverter.SPACES[].getClass().getName() == orig(org.apache.log4j.helpers.PatternConverter.SPACES[].getClass().getName())
org.apache.log4j.helpers.PatternConverter.SPACES[].toString == orig(org.apache.log4j.helpers.PatternConverter.SPACES[].toString)
this.head.min == orig(this.head.min)
this.head.max == orig(this.head.max)
this.head.leftAlign == orig(this.head.leftAlign)
this.tail.next == orig(this.tail.next)
this.tail.max == orig(this.tail.max)
this.formattingInfo == orig(this.formattingInfo)
this.formattingInfo.max == orig(this.formattingInfo.max)
this.pattern == orig(this.pattern)
this.pattern.toString == orig(this.pattern.toString)
org.apache.log4j.helpers.PatternParser.class$java$text$DateFormat == orig(org.apache.log4j.helpers.PatternParser.class$java$text$DateFormat)
this.state == 0
this.head has only one value
this.head.next.next has only one value
this.formattingInfo.min == -1
this.formattingInfo.leftAlign == false
org.apache.log4j.helpers.PatternConverter.SPACES[] == orig(org.apache.log4j.helpers.PatternConverter.SPACES[]) (elementwise)
org.apache.log4j.helpers.PatternConverter.SPACES[].getClass().getName() == orig(org.apache.log4j.helpers.PatternConverter.SPACES[].getClass().getName()) (elementwise)
org.apache.log4j.helpers.PatternConverter.SPACES[].toString == orig(org.apache.log4j.helpers.PatternConverter.SPACES[].toString) (elementwise)
===========================================================================
org.apache.log4j.helpers.PatternParser.parse():::ENTER
this.state == 0
this.i == 0
this.head == null
this.tail == null
this.formattingInfo.min == -1
this.formattingInfo.leftAlign == false
===========================================================================
org.apache.log4j.helpers.PatternParser.parse():::EXIT
this.state == orig(this.state)
this.currentLiteral == orig(this.currentLiteral)
this.patternLength == orig(this.patternLength)
this.formattingInfo == orig(this.formattingInfo)
this.formattingInfo.min == orig(this.formattingInfo.min)
this.formattingInfo.max == orig(this.formattingInfo.max)
this.formattingInfo.leftAlign == orig(this.formattingInfo.leftAlign)
this.pattern == orig(this.pattern)
this.pattern.toString == orig(this.pattern.toString)
org.apache.log4j.helpers.PatternParser.class$java$text$DateFormat == orig(org.apache.log4j.helpers.PatternParser.class$java$text$DateFormat)
this.state == 0
this.i == 34
this.head has only one value
this.head.next has only one value
this.head.next.next has only one value
this.tail has only one value
this.tail.getClass().getName() == org.apache.log4j.helpers.PatternParser$LiteralPatternConverter.class
this.tail.min == -1
this.tail.leftAlign == false
this.formattingInfo.min == -1
this.formattingInfo.leftAlign == false
return has only one value
return.getClass().getName() == org.apache.log4j.helpers.PatternParser$DatePatternConverter.class
return.next has only one value
return.next.getClass().getName() == org.apache.log4j.helpers.PatternParser$LiteralPatternConverter.class
return.next.next has only one value
return.next.next.getClass().getName() == org.apache.log4j.helpers.PatternParser$BasicPatternConverter.class
return.next.min == -1
return.next.max == 2147483647
return.next.leftAlign == false
return.min == -1
return.max == 2147483647
return.leftAlign == false
===========================================================================
org.apache.log4j.helpers.QuietWriter:::OBJECT
this has only one value
this.errorHandler.getClass().getName() == org.apache.log4j.helpers.OnlyOnceErrorHandler.class
===========================================================================
org.apache.log4j.helpers.QuietWriter.QuietWriter(java.io.Writer, org.apache.log4j.spi.ErrorHandler):::ENTER
writer has only one value
writer.getClass().getName() == java.io.OutputStreamWriter.class
errorHandler has only one value
errorHandler.getClass().getName() == org.apache.log4j.helpers.OnlyOnceErrorHandler.class
===========================================================================
org.apache.log4j.helpers.QuietWriter.QuietWriter(java.io.Writer, org.apache.log4j.spi.ErrorHandler):::EXIT
this.errorHandler has only one value
===========================================================================
org.apache.log4j.helpers.QuietWriter.setErrorHandler(org.apache.log4j.spi.ErrorHandler):::ENTER
this.errorHandler == null
eh has only one value
eh.getClass().getName() == org.apache.log4j.helpers.OnlyOnceErrorHandler.class
===========================================================================
org.apache.log4j.helpers.QuietWriter.setErrorHandler(org.apache.log4j.spi.ErrorHandler):::EXIT
this.errorHandler has only one value
===========================================================================
org.apache.log4j.or.DefaultRenderer:::OBJECT
this has only one value
===========================================================================
org.apache.log4j.or.DefaultRenderer.DefaultRenderer():::EXIT
===========================================================================
org.apache.log4j.or.RendererMap:::CLASS
org.apache.log4j.or.RendererMap.defaultRenderer has only one value
org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName() == org.apache.log4j.or.DefaultRenderer.class
org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer == null
===========================================================================
org.apache.log4j.or.RendererMap:::OBJECT
this has only one value
this.map has only one value
===========================================================================
org.apache.log4j.or.RendererMap.RendererMap():::EXIT
===========================================================================
org.apache.log4j.spi.DefaultRepositorySelector:::OBJECT
this has only one value
this.repository has only one value
this.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
===========================================================================
org.apache.log4j.spi.DefaultRepositorySelector.DefaultRepositorySelector(org.apache.log4j.spi.LoggerRepository):::ENTER
repository has only one value
repository.getClass().getName() == org.apache.log4j.Hierarchy.class
===========================================================================
org.apache.log4j.spi.DefaultRepositorySelector.DefaultRepositorySelector(org.apache.log4j.spi.LoggerRepository):::EXIT
===========================================================================
org.apache.log4j.spi.DefaultRepositorySelector.getLoggerRepository():::ENTER
===========================================================================
org.apache.log4j.spi.DefaultRepositorySelector.getLoggerRepository():::EXIT
this.repository == orig(this.repository)
this.repository.getClass().getName() == orig(this.repository.getClass().getName())
return has only one value
return.getClass().getName() == org.apache.log4j.Hierarchy.class
===========================================================================
org.apache.log4j.spi.RootLogger:::CLASS
org.apache.log4j.Logger.FQCN has only one value
org.apache.log4j.Logger.FQCN.toString == "org.apache.log4j.Logger"
org.apache.log4j.Logger.class$org$apache$log4j$Logger has only one value
===========================================================================
org.apache.log4j.spi.RootLogger:::OBJECT
this has only one value
this.name has only one value
this.name.toString == "root"
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.class$org$apache$log4j$Level == null
org.apache.log4j.Level.OFF.level == 2147483647
org.apache.log4j.Level.OFF.levelStr has only one value
org.apache.log4j.Level.OFF.levelStr.toString == "OFF"
org.apache.log4j.Level.OFF.syslogEquivalent == 0
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
org.apache.log4j.Level.FATAL.level == 50000
org.apache.log4j.Level.FATAL.levelStr has only one value
org.apache.log4j.Level.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Level.FATAL.syslogEquivalent == 0
org.apache.log4j.Level.ERROR.level == 40000
org.apache.log4j.Level.ERROR.levelStr has only one value
org.apache.log4j.Level.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Level.ERROR.syslogEquivalent == 3
org.apache.log4j.Level.WARN.level == 30000
org.apache.log4j.Level.WARN.levelStr has only one value
org.apache.log4j.Level.WARN.levelStr.toString == "WARN"
org.apache.log4j.Level.WARN.syslogEquivalent == 4
org.apache.log4j.Level.INFO.level == 20000
org.apache.log4j.Level.INFO.levelStr has only one value
org.apache.log4j.Level.INFO.levelStr.toString == "INFO"
org.apache.log4j.Level.INFO.syslogEquivalent == 6
org.apache.log4j.Level.DEBUG.level == 10000
org.apache.log4j.Level.DEBUG.levelStr has only one value
org.apache.log4j.Level.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Level.DEBUG.syslogEquivalent == 7
org.apache.log4j.Level.TRACE.level == 5000
org.apache.log4j.Level.TRACE.levelStr has only one value
org.apache.log4j.Level.TRACE.levelStr.toString == "TRACE"
org.apache.log4j.Level.TRACE.syslogEquivalent == 7
org.apache.log4j.Level.ALL.level == -2147483648
org.apache.log4j.Level.ALL.levelStr has only one value
org.apache.log4j.Level.ALL.levelStr.toString == "ALL"
org.apache.log4j.Level.ALL.syslogEquivalent == 7
this.level.level == 10000
this.level.levelStr has only one value
this.level.levelStr.toString == "DEBUG"
this.level.syslogEquivalent == 7
org.apache.log4j.Priority.FATAL.level == 50000
org.apache.log4j.Priority.FATAL.levelStr has only one value
org.apache.log4j.Priority.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Priority.FATAL.syslogEquivalent == 0
org.apache.log4j.Priority.ERROR.level == 40000
org.apache.log4j.Priority.ERROR.levelStr has only one value
org.apache.log4j.Priority.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Priority.ERROR.syslogEquivalent == 3
org.apache.log4j.Priority.WARN.level == 30000
org.apache.log4j.Priority.WARN.levelStr has only one value
org.apache.log4j.Priority.WARN.levelStr.toString == "WARN"
org.apache.log4j.Priority.WARN.syslogEquivalent == 4
org.apache.log4j.Priority.INFO.level == 20000
org.apache.log4j.Priority.INFO.levelStr has only one value
org.apache.log4j.Priority.INFO.levelStr.toString == "INFO"
org.apache.log4j.Priority.INFO.syslogEquivalent == 6
org.apache.log4j.Priority.DEBUG.level == 10000
org.apache.log4j.Priority.DEBUG.levelStr has only one value
org.apache.log4j.Priority.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Priority.DEBUG.syslogEquivalent == 7
this.parent == null
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
this.resourceBundle == null
this.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
this.aai == null
this.additive == true
===========================================================================
org.apache.log4j.spi.RootLogger.RootLogger(org.apache.log4j.Level):::ENTER
level has only one value
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.class$org$apache$log4j$Level == null
org.apache.log4j.Level.OFF.level == 2147483647
org.apache.log4j.Level.OFF.levelStr has only one value
org.apache.log4j.Level.OFF.levelStr.toString == "OFF"
org.apache.log4j.Level.OFF.syslogEquivalent == 0
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
org.apache.log4j.Level.FATAL.level == 50000
org.apache.log4j.Level.FATAL.levelStr has only one value
org.apache.log4j.Level.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Level.FATAL.syslogEquivalent == 0
org.apache.log4j.Level.ERROR.level == 40000
org.apache.log4j.Level.ERROR.levelStr has only one value
org.apache.log4j.Level.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Level.ERROR.syslogEquivalent == 3
org.apache.log4j.Level.WARN.level == 30000
org.apache.log4j.Level.WARN.levelStr has only one value
org.apache.log4j.Level.WARN.levelStr.toString == "WARN"
org.apache.log4j.Level.WARN.syslogEquivalent == 4
org.apache.log4j.Level.INFO.level == 20000
org.apache.log4j.Level.INFO.levelStr has only one value
org.apache.log4j.Level.INFO.levelStr.toString == "INFO"
org.apache.log4j.Level.INFO.syslogEquivalent == 6
org.apache.log4j.Level.DEBUG.level == 10000
org.apache.log4j.Level.DEBUG.levelStr has only one value
org.apache.log4j.Level.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Level.DEBUG.syslogEquivalent == 7
org.apache.log4j.Level.TRACE.level == 5000
org.apache.log4j.Level.TRACE.levelStr has only one value
org.apache.log4j.Level.TRACE.levelStr.toString == "TRACE"
org.apache.log4j.Level.TRACE.syslogEquivalent == 7
org.apache.log4j.Level.ALL.level == -2147483648
org.apache.log4j.Level.ALL.levelStr has only one value
org.apache.log4j.Level.ALL.levelStr.toString == "ALL"
org.apache.log4j.Level.ALL.syslogEquivalent == 7
level.level == 10000
level.levelStr has only one value
level.levelStr.toString == "DEBUG"
level.syslogEquivalent == 7
org.apache.log4j.Priority.FATAL.level == 50000
org.apache.log4j.Priority.FATAL.levelStr has only one value
org.apache.log4j.Priority.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Priority.FATAL.syslogEquivalent == 0
org.apache.log4j.Priority.ERROR.level == 40000
org.apache.log4j.Priority.ERROR.levelStr has only one value
org.apache.log4j.Priority.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Priority.ERROR.syslogEquivalent == 3
org.apache.log4j.Priority.WARN.level == 30000
org.apache.log4j.Priority.WARN.levelStr has only one value
org.apache.log4j.Priority.WARN.levelStr.toString == "WARN"
org.apache.log4j.Priority.WARN.syslogEquivalent == 4
org.apache.log4j.Priority.INFO.level == 20000
org.apache.log4j.Priority.INFO.levelStr has only one value
org.apache.log4j.Priority.INFO.levelStr.toString == "INFO"
org.apache.log4j.Priority.INFO.syslogEquivalent == 6
org.apache.log4j.Priority.DEBUG.level == 10000
org.apache.log4j.Priority.DEBUG.levelStr has only one value
org.apache.log4j.Priority.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Priority.DEBUG.syslogEquivalent == 7
===========================================================================
org.apache.log4j.spi.RootLogger.RootLogger(org.apache.log4j.Level):::EXIT
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
level.level == orig(level.level)
level.levelStr == orig(level.levelStr)
level.levelStr.toString == orig(level.levelStr.toString)
level.syslogEquivalent == orig(level.syslogEquivalent)
this.level has only one value
this.repository == null
level.level == 10000
level.levelStr has only one value
level.levelStr.toString == "DEBUG"
level.syslogEquivalent == 7
===========================================================================
org.apache.log4j.spi.RootLogger.setLevel(org.apache.log4j.Level):::ENTER
level has only one value
level.level == 10000
level.levelStr has only one value
level.levelStr.toString == "DEBUG"
level.syslogEquivalent == 7
===========================================================================
org.apache.log4j.spi.RootLogger.setLevel(org.apache.log4j.Level):::EXIT
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
this.level.level == orig(this.level.level)
this.level.levelStr == orig(this.level.levelStr)
this.level.levelStr.toString == orig(this.level.levelStr.toString)
this.level.syslogEquivalent == orig(this.level.syslogEquivalent)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.parent == orig(this.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.resourceBundle == orig(this.resourceBundle)
this.repository == orig(this.repository)
this.repository.getClass().getName() == orig(this.repository.getClass().getName())
this.aai == orig(this.aai)
this.additive == orig(this.additive)
level.level == orig(level.level)
level.levelStr == orig(level.levelStr)
level.levelStr.toString == orig(level.levelStr.toString)
level.syslogEquivalent == orig(level.syslogEquivalent)
this.level has only one value
level.level == 10000
level.levelStr has only one value
level.levelStr.toString == "DEBUG"
level.syslogEquivalent == 7
===========================================================================
org.reflections.adapters.JavassistAdapter:::OBJECT
this has only one value
===========================================================================
org.reflections.adapters.JavassistAdapter.JavassistAdapter():::EXIT
===========================================================================
org.reflections.scanners.AbstractScanner:::OBJECT
this.configuration == null
this.store == null
this.resultFilter has only one value
this.resultFilter.getClass().getName() == com.google.common.base.Predicates$AlwaysTruePredicate.class
===========================================================================
org.reflections.scanners.AbstractScanner.AbstractScanner():::EXIT
===========================================================================
org.reflections.scanners.SubTypesScanner:::OBJECT
this has only one value
this.configuration == null
this.store == null
this.resultFilter has only one value
this.resultFilter.getClass().getName() == com.google.common.base.Predicates$AlwaysTruePredicate.class
===========================================================================
org.reflections.scanners.SubTypesScanner.SubTypesScanner():::EXIT
===========================================================================
org.reflections.scanners.TypeAnnotationsScanner:::OBJECT
this has only one value
this.configuration == null
this.store == null
this.resultFilter has only one value
this.resultFilter.getClass().getName() == com.google.common.base.Predicates$AlwaysTruePredicate.class
===========================================================================
org.reflections.scanners.TypeAnnotationsScanner.TypeAnnotationsScanner():::EXIT
===========================================================================
org.reflections.serializers.XmlSerializer:::OBJECT
this has only one value
===========================================================================
org.reflections.serializers.XmlSerializer.XmlSerializer():::EXIT
===========================================================================
org.reflections.util.ConfigurationBuilder$1:::OBJECT
this has only one value
org.reflections.util.ConfigurationBuilder.this has only one value
org.reflections.util.ConfigurationBuilder.this.scanners has only one value
org.reflections.util.ConfigurationBuilder.this.scanners.getClass().getName() == java.util.HashSet.class
org.reflections.util.ConfigurationBuilder.this.urls == null
org.reflections.util.ConfigurationBuilder.this.metadataAdapter has only one value
org.reflections.util.ConfigurationBuilder.this.metadataAdapter.getClass().getName() == org.reflections.adapters.JavassistAdapter.class
org.reflections.util.ConfigurationBuilder.this.inputsFilter has only one value
org.reflections.util.ConfigurationBuilder.this.inputsFilter.getClass().getName() == com.google.common.base.Predicates$AlwaysTruePredicate.class
org.reflections.util.ConfigurationBuilder.this.serializer has only one value
org.reflections.util.ConfigurationBuilder.this.serializer.getClass().getName() == org.reflections.serializers.XmlSerializer.class
org.reflections.util.ConfigurationBuilder.this.executorServiceSupplier == null
===========================================================================
org.reflections.util.ConfigurationBuilder$1.(org.reflections.util.ConfigurationBuilder):::ENTER
org.reflections.util.ConfigurationBuilder.this has only one value
org.reflections.util.ConfigurationBuilder.this.scanners has only one value
org.reflections.util.ConfigurationBuilder.this.scanners.getClass().getName() == java.util.HashSet.class
org.reflections.util.ConfigurationBuilder.this.urls == null
org.reflections.util.ConfigurationBuilder.this.metadataAdapter has only one value
org.reflections.util.ConfigurationBuilder.this.metadataAdapter.getClass().getName() == org.reflections.adapters.JavassistAdapter.class
org.reflections.util.ConfigurationBuilder.this.inputsFilter has only one value
org.reflections.util.ConfigurationBuilder.this.inputsFilter.getClass().getName() == com.google.common.base.Predicates$AlwaysTruePredicate.class
org.reflections.util.ConfigurationBuilder.this.serializer has only one value
org.reflections.util.ConfigurationBuilder.this.serializer.getClass().getName() == org.reflections.serializers.XmlSerializer.class
org.reflections.util.ConfigurationBuilder.this.executorServiceSupplier == null
===========================================================================
org.reflections.util.ConfigurationBuilder$1.(org.reflections.util.ConfigurationBuilder):::EXIT
org.reflections.util.ConfigurationBuilder.this == orig(org.reflections.util.ConfigurationBuilder.this)
org.reflections.util.ConfigurationBuilder.this.scanners == orig(org.reflections.util.ConfigurationBuilder.this.scanners)
org.reflections.util.ConfigurationBuilder.this.scanners.getClass().getName() == orig(org.reflections.util.ConfigurationBuilder.this.scanners.getClass().getName())
org.reflections.util.ConfigurationBuilder.this.urls == orig(org.reflections.util.ConfigurationBuilder.this.urls)
org.reflections.util.ConfigurationBuilder.this.metadataAdapter == orig(org.reflections.util.ConfigurationBuilder.this.metadataAdapter)
org.reflections.util.ConfigurationBuilder.this.metadataAdapter.getClass().getName() == orig(org.reflections.util.ConfigurationBuilder.this.metadataAdapter.getClass().getName())
org.reflections.util.ConfigurationBuilder.this.inputsFilter == orig(org.reflections.util.ConfigurationBuilder.this.inputsFilter)
org.reflections.util.ConfigurationBuilder.this.inputsFilter.getClass().getName() == orig(org.reflections.util.ConfigurationBuilder.this.inputsFilter.getClass().getName())
org.reflections.util.ConfigurationBuilder.this.serializer == orig(org.reflections.util.ConfigurationBuilder.this.serializer)
org.reflections.util.ConfigurationBuilder.this.serializer.getClass().getName() == orig(org.reflections.util.ConfigurationBuilder.this.serializer.getClass().getName())
org.reflections.util.ConfigurationBuilder.this.executorServiceSupplier == orig(org.reflections.util.ConfigurationBuilder.this.executorServiceSupplier)
===========================================================================
org.reflections.util.ConfigurationBuilder:::OBJECT
this has only one value
this.scanners has only one value
this.scanners.getClass().getName() == java.util.HashSet.class
this.urls == null
this.metadataAdapter has only one value
this.metadataAdapter.getClass().getName() == org.reflections.adapters.JavassistAdapter.class
this.serializer has only one value
this.serializer.getClass().getName() == org.reflections.serializers.XmlSerializer.class
this.executorServiceSupplier has only one value
this.executorServiceSupplier.getClass().getName() == org.reflections.util.ConfigurationBuilder$1.class
===========================================================================
org.reflections.util.ConfigurationBuilder.ConfigurationBuilder():::EXIT
this.inputsFilter has only one value
this.inputsFilter.getClass().getName() == com.google.common.base.Predicates$AlwaysTruePredicate.class
===========================================================================
org.reflections.util.ConfigurationBuilder.filterInputsBy(com.google.common.base.Predicate):::ENTER
this.inputsFilter has only one value
this.inputsFilter.getClass().getName() == com.google.common.base.Predicates$AlwaysTruePredicate.class
inputsFilter has only one value
inputsFilter.getClass().getName() == org.reflections.util.FilterBuilder$Include.class
===========================================================================
org.reflections.util.ConfigurationBuilder.filterInputsBy(com.google.common.base.Predicate):::EXIT
this.scanners == orig(this.scanners)
this.scanners.getClass().getName() == orig(this.scanners.getClass().getName())
this.urls == orig(this.urls)
this.metadataAdapter == orig(this.metadataAdapter)
this.metadataAdapter.getClass().getName() == orig(this.metadataAdapter.getClass().getName())
this.serializer == orig(this.serializer)
this.serializer.getClass().getName() == orig(this.serializer.getClass().getName())
this.executorServiceSupplier == orig(this.executorServiceSupplier)
this.executorServiceSupplier.getClass().getName() == orig(this.executorServiceSupplier.getClass().getName())
this.inputsFilter has only one value
this.inputsFilter.getClass().getName() == org.reflections.util.FilterBuilder$Include.class
return has only one value
return.scanners has only one value
return.scanners.getClass().getName() == java.util.HashSet.class
return.urls == null
return.metadataAdapter has only one value
return.metadataAdapter.getClass().getName() == org.reflections.adapters.JavassistAdapter.class
return.inputsFilter has only one value
return.inputsFilter.getClass().getName() == org.reflections.util.FilterBuilder$Include.class
return.serializer has only one value
return.serializer.getClass().getName() == org.reflections.serializers.XmlSerializer.class
return.executorServiceSupplier has only one value
return.executorServiceSupplier.getClass().getName() == org.reflections.util.ConfigurationBuilder$1.class
===========================================================================
org.reflections.util.FilterBuilder$Include:::OBJECT
this has only one value
this.pattern has only one value
this.chain has only one value
this.chain[] == []
this.chain[].getClass().getName() == []
this.chain.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.reflections.util.FilterBuilder$Include.Include(java.lang.String):::ENTER
patternString has only one value
patternString.toString == "org\\.vit\\.unsafeutils\\.api.*"
===========================================================================
org.reflections.util.FilterBuilder$Include.Include(java.lang.String):::EXIT
patternString.toString == orig(patternString.toString)
patternString.toString == "org\\.vit\\.unsafeutils\\.api.*"
===========================================================================
org.reflections.util.FilterBuilder$Matcher:::OBJECT
this has only one value
this.getClass().getName() == org.reflections.util.FilterBuilder$Include.class
this.pattern has only one value
this.chain has only one value
this.chain[] == []
this.chain[].getClass().getName() == []
this.chain.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.reflections.util.FilterBuilder$Matcher.Matcher(java.lang.String):::ENTER
regex has only one value
regex.toString == "org\\.vit\\.unsafeutils\\.api.*"
===========================================================================
org.reflections.util.FilterBuilder$Matcher.Matcher(java.lang.String):::EXIT
regex.toString == orig(regex.toString)
regex.toString == "org\\.vit\\.unsafeutils\\.api.*"
===========================================================================
org.reflections.util.FilterBuilder:::OBJECT
this has only one value
this.chain has only one value
this.chain[] == []
this.chain[].getClass().getName() == []
this.chain.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.reflections.util.FilterBuilder.FilterBuilder():::EXIT
===========================================================================
org.reflections.util.FilterBuilder.prefix(java.lang.String):::ENTER
qualifiedName has only one value
qualifiedName.toString == "org.vit.unsafeutils.api"
===========================================================================
org.reflections.util.FilterBuilder.prefix(java.lang.String):::EXIT
qualifiedName.toString == orig(qualifiedName.toString)
qualifiedName.toString == "org.vit.unsafeutils.api"
return has only one value
return.toString == "org\\.vit\\.unsafeutils\\.api.*"
===========================================================================
org.slf4j.LoggerFactory.getLogger(java.lang.Class):::ENTER
clazz has only one value
===========================================================================
org.slf4j.LoggerFactory.getLogger(java.lang.Class):::EXIT
return has only one value
return.getClass().getName() == ch.qos.logback.classic.Logger.class
===========================================================================
org.slf4j.impl.StaticLoggerBinder:::CLASS
org.slf4j.impl.StaticLoggerBinder.NULL_CS_URL has only one value
org.slf4j.impl.StaticLoggerBinder.NULL_CS_URL.toString == "http://logback.qos.ch/codes.html#null_CS"
org.slf4j.impl.StaticLoggerBinder.SINGLETON has only one value
org.slf4j.impl.StaticLoggerBinder.SINGLETON.contextSelector has only one value
org.slf4j.impl.StaticLoggerBinder.SINGLETON.contextSelector.getClass().getName() == ch.qos.logback.classic.selector.DefaultContextSelector.class
org.slf4j.impl.StaticLoggerBinder.loggerFactoryClassStr has only one value
org.slf4j.impl.StaticLoggerBinder.loggerFactoryClassStr.toString == "ch.qos.logback.classic.selector.ContextSelector"
===========================================================================
org.slf4j.impl.StaticLoggerBinder:::OBJECT
this has only one value
this.contextSelector.getClass().getName() == ch.qos.logback.classic.selector.DefaultContextSelector.class
===========================================================================
org.slf4j.impl.StaticLoggerBinder.StaticLoggerBinder():::EXIT
this.contextSelector has only one value
===========================================================================
org.slf4j.impl.StaticLoggerBinder.getLoggerFactory():::ENTER
this.contextSelector has only one value
===========================================================================
org.slf4j.impl.StaticLoggerBinder.getLoggerFactory():::EXIT
this.contextSelector == orig(this.contextSelector)
this.contextSelector.getClass().getName() == orig(this.contextSelector.getClass().getName())
org.slf4j.impl.StaticLoggerBinder.NULL_CS_URL == orig(org.slf4j.impl.StaticLoggerBinder.NULL_CS_URL)
org.slf4j.impl.StaticLoggerBinder.NULL_CS_URL.toString == orig(org.slf4j.impl.StaticLoggerBinder.NULL_CS_URL.toString)
org.slf4j.impl.StaticLoggerBinder.SINGLETON == orig(org.slf4j.impl.StaticLoggerBinder.SINGLETON)
org.slf4j.impl.StaticLoggerBinder.SINGLETON.contextSelector == orig(org.slf4j.impl.StaticLoggerBinder.SINGLETON.contextSelector)
org.slf4j.impl.StaticLoggerBinder.SINGLETON.contextSelector.getClass().getName() == orig(org.slf4j.impl.StaticLoggerBinder.SINGLETON.contextSelector.getClass().getName())
org.slf4j.impl.StaticLoggerBinder.loggerFactoryClassStr == orig(org.slf4j.impl.StaticLoggerBinder.loggerFactoryClassStr)
org.slf4j.impl.StaticLoggerBinder.loggerFactoryClassStr.toString == orig(org.slf4j.impl.StaticLoggerBinder.loggerFactoryClassStr.toString)
this.contextSelector has only one value
return has only one value
return.getClass().getName() == ch.qos.logback.classic.LoggerContext.class
===========================================================================
org.slf4j.impl.StaticLoggerBinder.initialize():::ENTER
this.contextSelector == null
===========================================================================
org.slf4j.impl.StaticLoggerBinder.initialize():::EXIT
this.contextSelector has only one value
===========================================================================
org.vit.unsafeutils.TcpTest:::CLASS
org.vit.unsafeutils.TcpTest.host has only one value
org.vit.unsafeutils.TcpTest.host.toString == "localhost"
===========================================================================
org.vit.unsafeutils.TcpTest.log4j():::ENTER
===========================================================================
org.vit.unsafeutils.TcpTest.log4j():::EXIT
org.vit.unsafeutils.TcpTest.host == orig(org.vit.unsafeutils.TcpTest.host)
org.vit.unsafeutils.TcpTest.host.toString == orig(org.vit.unsafeutils.TcpTest.host.toString)
Exiting Daikon.
