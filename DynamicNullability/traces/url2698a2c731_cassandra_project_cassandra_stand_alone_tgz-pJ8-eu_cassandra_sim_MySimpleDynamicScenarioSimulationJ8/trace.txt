Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 630 times.  Unmatched entries are ignored!
Unterminated calls:
  eu.cassandra.sim.MySimpleDynamicScenarioSimulation.main(java.lang.String[]) : 1 invocation
  eu.cassandra.sim.MySimpleDynamicScenarioSimulation.MySimpleDynamicScenarioSimulation(java.lang.String, java.lang.String, int, boolean) : 1 invocation
  eu.cassandra.sim.Simulation.Simulation(java.lang.String, java.lang.String, int, boolean) : 1 invocation
  eu.cassandra.sim.utilities.MongoResults.createTablesAndIndexes() : 1 invocation
  com.mongodb.ServerMonitor$ServerMonitorRunnable.run() : 2 invocations
  com.mongodb.DBPort.DBPort(com.mongodb.ServerAddress, com.mongodb.PooledConnectionProvider, com.mongodb.MongoOptions, int) : 305 invocations
  com.mongodb.DBPort.ensureOpen() : 305 invocations
  com.mongodb.Mongo$CursorCleanerThread.run() : 2 invocations
  com.mongodb.DBCollection.createIndex(com.mongodb.DBObject) : 1 invocation
  com.mongodb.DBCollection.createIndex(com.mongodb.DBObject, com.mongodb.DBObject) : 1 invocation
  com.mongodb.DBCollectionImpl.createIndex(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBEncoder) : 1 invocation
  com.mongodb.DBTCPConnector.getPrimaryPort() : 1 invocation
  com.mongodb.DBTCPConnector$MyPort.get(boolean, com.mongodb.ReadPreference, com.mongodb.ServerAddress) : 1 invocation
  com.mongodb.DBTCPConnector$MyPort.getConnection(com.mongodb.ServerSelector) : 1 invocation
  com.mongodb.DBTCPConnector.getServer(com.mongodb.ServerSelector) : 1 invocation
  com.mongodb.BaseCluster.getServer(com.mongodb.ServerSelector, long, java.util.concurrent.TimeUnit) : 1 invocation
  com.mongodb.ServerMonitor$ServerMonitorRunnable.waitForNext() : 2 invocations
  com.mongodb.ServerMonitor$ServerMonitorRunnable.waitForSignalOrTimeout() : 2 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
com.mongodb.AnyServerSelector:::OBJECT
this has only one value
===========================================================================
com.mongodb.AnyServerSelector.AnyServerSelector():::EXIT
===========================================================================
com.mongodb.AnyServerSelector.choose(com.mongodb.ClusterDescription):::ENTER
clusterDescription.connectionMode == com.mongodb.ClusterConnectionMode.Single
clusterDescription.type == com.mongodb.ClusterType.Unknown
clusterDescription != null
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Single != null
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.Multiple != null
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES != null
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[] elements != null
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.StandAlone != null
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.ReplicaSet != null
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Sharded != null
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.Unknown != null
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES != null
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[] elements != null
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
clusterDescription.all != null
clusterDescription.all.getClass().getName() == java.util.Collections$UnmodifiableSet.class
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ClusterType.$VALUES.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != clusterDescription.all.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != clusterDescription.all.getClass().getName()
===========================================================================
com.mongodb.AnyServerSelector.choose(com.mongodb.ClusterDescription):::EXIT
clusterDescription.connectionMode == com.mongodb.ClusterConnectionMode.Single
com.mongodb.ClusterConnectionMode.Single == orig(clusterDescription.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
clusterDescription.type == com.mongodb.ClusterType.Unknown
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(clusterDescription.type)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
clusterDescription.all == orig(clusterDescription.all)
clusterDescription.all.getClass().getName() == orig(clusterDescription.all.getClass().getName())
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Single != null
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.Multiple != null
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES != null
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[] elements != null
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.StandAlone != null
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.ReplicaSet != null
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Sharded != null
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.Unknown != null
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES != null
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[] elements != null
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
clusterDescription.all != null
clusterDescription.all.getClass().getName() == java.util.Collections$UnmodifiableSet.class
return != null
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ClusterType.$VALUES.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != clusterDescription.all.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != return.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != clusterDescription.all.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != return.getClass().getName()
clusterDescription.all.getClass().getName() != return.getClass().getName()
===========================================================================
com.mongodb.AnyServerSelector.toString():::ENTER
===========================================================================
com.mongodb.AnyServerSelector.toString():::EXIT
return has only one value
return != null
return.toString == "AnyServerSelector{}"
===========================================================================
com.mongodb.BaseCluster$1:::OBJECT
com.mongodb.BaseCluster.this.getClass().getName() == com.mongodb.SingleServerCluster.class
com.mongodb.BaseCluster.LOGGER has only one value
com.mongodb.BaseCluster.this.serverFactory == null
com.mongodb.BaseCluster.this.random == null
com.mongodb.BaseCluster.this.clusterId == null
com.mongodb.BaseCluster.this.settings == null
com.mongodb.BaseCluster.this.clusterListener == null
com.mongodb.BaseCluster.this.isClosed == false
com.mongodb.BaseCluster.this.description == null
===========================================================================
com.mongodb.BaseCluster$1.(com.mongodb.BaseCluster):::ENTER
com.mongodb.BaseCluster.this.getClass().getName() == com.mongodb.SingleServerCluster.class
com.mongodb.BaseCluster.LOGGER has only one value
com.mongodb.BaseCluster.this.serverFactory == null
com.mongodb.BaseCluster.this.random == null
com.mongodb.BaseCluster.this.clusterId == null
com.mongodb.BaseCluster.this.settings == null
com.mongodb.BaseCluster.this.clusterListener == null
com.mongodb.BaseCluster.this.isClosed == false
com.mongodb.BaseCluster.this.description == null
===========================================================================
com.mongodb.BaseCluster$1.(com.mongodb.BaseCluster):::EXIT
com.mongodb.BaseCluster.this == orig(com.mongodb.BaseCluster.this)
com.mongodb.BaseCluster.this.getClass().getName() == orig(com.mongodb.BaseCluster.this.getClass().getName())
com.mongodb.BaseCluster.LOGGER == orig(com.mongodb.BaseCluster.LOGGER)
com.mongodb.BaseCluster.this.phase == orig(com.mongodb.BaseCluster.this.phase)
com.mongodb.BaseCluster.this.serverFactory == orig(com.mongodb.BaseCluster.this.serverFactory)
com.mongodb.BaseCluster.this.random == orig(com.mongodb.BaseCluster.this.random)
com.mongodb.BaseCluster.this.clusterId == orig(com.mongodb.BaseCluster.this.clusterId)
com.mongodb.BaseCluster.this.settings == orig(com.mongodb.BaseCluster.this.settings)
com.mongodb.BaseCluster.this.clusterListener == orig(com.mongodb.BaseCluster.this.clusterListener)
com.mongodb.BaseCluster.this.isClosed == orig(com.mongodb.BaseCluster.this.isClosed)
com.mongodb.BaseCluster.this.description == orig(com.mongodb.BaseCluster.this.description)
===========================================================================
com.mongodb.BaseCluster:::CLASS
com.mongodb.BaseCluster.LOGGER has only one value
com.mongodb.BaseCluster.LOGGER != null
===========================================================================
com.mongodb.BaseCluster:::OBJECT
this.settings.mode == com.mongodb.ClusterConnectionMode.Single
com.mongodb.ClusterConnectionMode.Single == this.description.connectionMode
this.settings.requiredClusterType == com.mongodb.ClusterType.Unknown
com.mongodb.ClusterType.Unknown == this.description.type
this.getClass().getName() == com.mongodb.SingleServerCluster.class
this.phase != null
this.serverFactory != null
this.serverFactory.getClass().getName() == com.mongodb.DefaultClusterableServerFactory.class
this.random != null
this.clusterId != null
this.clusterId.toString one of { "1", "2" }
this.settings != null
this.settings.hosts != null
this.settings.hosts[] elements != null
this.settings.hosts[].getClass().getName() == [com.mongodb.ServerAddress]
this.settings.hosts[].getClass().getName() elements == com.mongodb.ServerAddress.class
this.settings.hosts.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Single != null
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.Multiple != null
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES != null
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[] elements != null
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.StandAlone != null
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.ReplicaSet != null
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Sharded != null
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.Unknown != null
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES != null
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[] elements != null
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
this.settings.requiredReplicaSetName == null
this.clusterListener != null
this.clusterListener.getClass().getName() == com.mongodb.NoOpClusterListener.class
this.isClosed == false
this.description.connectionMode has only one value
this.description.connectionMode != null
this.description.type has only one value
this.description.type != null
this.description.all != null
this.description.all.getClass().getName() == java.util.Collections$UnmodifiableSet.class
size(this.settings.hosts[]) == 1
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
this.getClass().getName() != this.serverFactory.getClass().getName()
this.getClass().getName() != this.settings.hosts.getClass().getName()
this.getClass().getName() != com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName()
this.getClass().getName() != com.mongodb.ClusterType.$VALUES.getClass().getName()
this.getClass().getName() != this.clusterListener.getClass().getName()
this.getClass().getName() != this.description.all.getClass().getName()
this.serverFactory.getClass().getName() != this.settings.hosts.getClass().getName()
this.serverFactory.getClass().getName() != com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName()
this.serverFactory.getClass().getName() != com.mongodb.ClusterType.$VALUES.getClass().getName()
this.serverFactory.getClass().getName() != this.clusterListener.getClass().getName()
this.serverFactory.getClass().getName() != this.description.all.getClass().getName()
this.settings.hosts.getClass().getName() != com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName()
this.settings.hosts.getClass().getName() != com.mongodb.ClusterType.$VALUES.getClass().getName()
this.settings.hosts.getClass().getName() != this.clusterListener.getClass().getName()
this.settings.hosts.getClass().getName() != this.description.all.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ClusterType.$VALUES.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != this.clusterListener.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != this.description.all.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != this.clusterListener.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != this.description.all.getClass().getName()
this.clusterListener.getClass().getName() != this.description.all.getClass().getName()
===========================================================================
com.mongodb.BaseCluster.BaseCluster(java.lang.String, com.mongodb.ClusterSettings, com.mongodb.ClusterableServerFactory, com.mongodb.ClusterListener):::ENTER
settings.mode == com.mongodb.ClusterConnectionMode.Single
settings.requiredClusterType == com.mongodb.ClusterType.Unknown
clusterId.toString one of { "1", "2" }
settings.hosts[].getClass().getName() == [com.mongodb.ServerAddress]
settings.hosts[].getClass().getName() elements == com.mongodb.ServerAddress.class
settings.hosts.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
settings.requiredReplicaSetName == null
serverFactory.getClass().getName() == com.mongodb.DefaultClusterableServerFactory.class
clusterListener.getClass().getName() == com.mongodb.NoOpClusterListener.class
size(settings.hosts[]) == 1
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
===========================================================================
com.mongodb.BaseCluster.BaseCluster(java.lang.String, com.mongodb.ClusterSettings, com.mongodb.ClusterableServerFactory, com.mongodb.ClusterListener):::EXIT
this.serverFactory == orig(serverFactory)
this.serverFactory.getClass().getName() == orig(serverFactory.getClass().getName())
this.clusterId == orig(clusterId)
this.settings == orig(settings)
this.settings.hosts == settings.hosts
this.settings.hosts.getClass().getName() == settings.hosts.getClass().getName()
com.mongodb.ClusterConnectionMode.Single == settings.mode
com.mongodb.ClusterConnectionMode.Single == orig(settings.mode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == settings.requiredClusterType
com.mongodb.ClusterType.Unknown == orig(settings.requiredClusterType)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.clusterListener == orig(clusterListener)
this.clusterListener.getClass().getName() == orig(clusterListener.getClass().getName())
clusterId.toString == orig(clusterId.toString)
settings.hosts == orig(settings.hosts)
settings.hosts[] == orig(settings.hosts[])
settings.hosts.getClass().getName() == orig(settings.hosts.getClass().getName())
settings.requiredReplicaSetName == orig(settings.requiredReplicaSetName)
this.description == null
clusterId.toString one of { "1", "2" }
settings.hosts[].getClass().getName() == [com.mongodb.ServerAddress]
settings.hosts[].getClass().getName() elements == com.mongodb.ServerAddress.class
settings.hosts.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
settings.requiredReplicaSetName == null
size(settings.hosts[]) == 1
===========================================================================
com.mongodb.BaseCluster.createServer(com.mongodb.ServerAddress, com.mongodb.ChangeListener):::ENTER
this.description == null
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
serverStateListener.getClass().getName() == com.mongodb.SingleServerCluster$1.class
===========================================================================
com.mongodb.BaseCluster.createServer(com.mongodb.ServerAddress, com.mongodb.ChangeListener):::EXIT
com.mongodb.BaseCluster.LOGGER == orig(com.mongodb.BaseCluster.LOGGER)
this.phase == orig(this.phase)
this.serverFactory == orig(this.serverFactory)
this.serverFactory.getClass().getName() == orig(this.serverFactory.getClass().getName())
this.random == orig(this.random)
this.clusterId == orig(this.clusterId)
this.clusterId.toString == orig(this.clusterId.toString)
this.settings == orig(this.settings)
this.settings.hosts == orig(this.settings.hosts)
this.settings.hosts[] == orig(this.settings.hosts[])
this.settings.hosts.getClass().getName() == orig(this.settings.hosts.getClass().getName())
com.mongodb.ClusterConnectionMode.Single == orig(this.settings.mode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(this.settings.requiredClusterType)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.settings.requiredReplicaSetName == orig(this.settings.requiredReplicaSetName)
this.clusterListener == orig(this.clusterListener)
this.clusterListener.getClass().getName() == orig(this.clusterListener.getClass().getName())
this.isClosed == orig(this.isClosed)
this.description == orig(this.description)
serverAddress._host == orig(serverAddress._host)
serverAddress._host.toString == orig(serverAddress._host.toString)
serverAddress._port == orig(serverAddress._port)
this.description == null
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
return.getClass().getName() == com.mongodb.DefaultServer.class
===========================================================================
com.mongodb.BaseCluster.fireChangeEvent():::ENTER
this.description != null
===========================================================================
com.mongodb.BaseCluster.fireChangeEvent():::EXIT
com.mongodb.BaseCluster.LOGGER == orig(com.mongodb.BaseCluster.LOGGER)
this.phase == orig(this.phase)
this.serverFactory == orig(this.serverFactory)
this.serverFactory.getClass().getName() == orig(this.serverFactory.getClass().getName())
this.random == orig(this.random)
this.clusterId == orig(this.clusterId)
this.clusterId.toString == orig(this.clusterId.toString)
this.settings == orig(this.settings)
this.settings.hosts == orig(this.settings.hosts)
this.settings.hosts[] == orig(this.settings.hosts[])
this.settings.hosts.getClass().getName() == orig(this.settings.hosts.getClass().getName())
com.mongodb.ClusterConnectionMode.Single == orig(this.settings.mode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Single == orig(this.description.connectionMode)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(this.settings.requiredClusterType)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.Unknown == orig(this.description.type)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.settings.requiredReplicaSetName == orig(this.settings.requiredReplicaSetName)
this.clusterListener == orig(this.clusterListener)
this.clusterListener.getClass().getName() == orig(this.clusterListener.getClass().getName())
this.isClosed == orig(this.isClosed)
this.description == orig(this.description)
this.description.all == orig(this.description.all)
this.description.all.getClass().getName() == orig(this.description.all.getClass().getName())
this.description != null
this.serverFactory.getClass().getName() != orig(this.getClass().getName())
this.settings.hosts.getClass().getName() != orig(this.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != orig(this.getClass().getName())
com.mongodb.ClusterType.$VALUES.getClass().getName() != orig(this.getClass().getName())
this.clusterListener.getClass().getName() != orig(this.getClass().getName())
this.description.all.getClass().getName() != orig(this.getClass().getName())
===========================================================================
com.mongodb.BaseCluster.getSettings():::ENTER
===========================================================================
com.mongodb.BaseCluster.getSettings():::EXIT
com.mongodb.BaseCluster.LOGGER == orig(com.mongodb.BaseCluster.LOGGER)
this.phase == orig(this.phase)
this.serverFactory == orig(this.serverFactory)
this.serverFactory.getClass().getName() == orig(this.serverFactory.getClass().getName())
this.random == orig(this.random)
this.clusterId == orig(this.clusterId)
this.clusterId.toString == orig(this.clusterId.toString)
this.settings == return
this.settings.hosts == return.hosts
this.settings.hosts[] == orig(this.settings.hosts[])
this.settings.hosts.getClass().getName() == return.hosts.getClass().getName()
com.mongodb.ClusterConnectionMode.Single == return.mode
com.mongodb.ClusterConnectionMode.Single == orig(this.settings.mode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == return.requiredClusterType
com.mongodb.ClusterType.Unknown == orig(this.settings.requiredClusterType)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.settings.requiredReplicaSetName == orig(this.settings.requiredReplicaSetName)
this.clusterListener == orig(this.clusterListener)
this.clusterListener.getClass().getName() == orig(this.clusterListener.getClass().getName())
this.isClosed == orig(this.isClosed)
this.description == orig(this.description)
this.description.connectionMode == orig(this.description.connectionMode)
this.description.type == orig(this.description.type)
this.description.all == orig(this.description.all)
this.description.all.getClass().getName() == orig(this.description.all.getClass().getName())
return == orig(this.settings)
return.hosts == orig(this.settings.hosts)
return.hosts.getClass().getName() == orig(this.settings.hosts.getClass().getName())
return != null
return.hosts != null
return.hosts[] elements != null
return.hosts[].getClass().getName() == [com.mongodb.ServerAddress]
return.hosts[].getClass().getName() elements == com.mongodb.ServerAddress.class
return.hosts.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
return.requiredReplicaSetName == null
size(return.hosts[]) == 1
this.serverFactory.getClass().getName() != return.hosts.getClass().getName()
this.serverFactory.getClass().getName() != orig(this.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != return.hosts.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != orig(this.getClass().getName())
com.mongodb.ClusterType.$VALUES.getClass().getName() != return.hosts.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != orig(this.getClass().getName())
this.clusterListener.getClass().getName() != return.hosts.getClass().getName()
this.clusterListener.getClass().getName() != orig(this.getClass().getName())
this.description.all.getClass().getName() != return.hosts.getClass().getName()
this.description.all.getClass().getName() != orig(this.getClass().getName())
return.hosts.getClass().getName() != orig(this.getClass().getName())
===========================================================================
com.mongodb.BaseCluster.isClosed():::ENTER
this has only one value
this.phase has only one value
this.serverFactory has only one value
this.random has only one value
this.clusterId has only one value
this.clusterId.toString == "2"
this.settings has only one value
this.settings.hosts has only one value
this.settings.hosts[] contains no nulls and has only one value, of length 1
this.settings.hosts[] elements has only one value
this.clusterListener has only one value
this.description has only one value
this.description.all has only one value
===========================================================================
com.mongodb.BaseCluster.isClosed():::EXIT
com.mongodb.BaseCluster.LOGGER == orig(com.mongodb.BaseCluster.LOGGER)
this.phase == orig(this.phase)
this.serverFactory == orig(this.serverFactory)
this.serverFactory.getClass().getName() == orig(this.serverFactory.getClass().getName())
this.random == orig(this.random)
this.clusterId == orig(this.clusterId)
this.clusterId.toString == orig(this.clusterId.toString)
this.settings == orig(this.settings)
this.settings.hosts == orig(this.settings.hosts)
this.settings.hosts[] == orig(this.settings.hosts[])
this.settings.hosts.getClass().getName() == orig(this.settings.hosts.getClass().getName())
com.mongodb.ClusterConnectionMode.Single == orig(this.settings.mode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Single == orig(this.description.connectionMode)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(this.settings.requiredClusterType)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.Unknown == orig(this.description.type)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.settings.requiredReplicaSetName == orig(this.settings.requiredReplicaSetName)
this.clusterListener == orig(this.clusterListener)
this.clusterListener.getClass().getName() == orig(this.clusterListener.getClass().getName())
this.isClosed == return
this.description == orig(this.description)
this.description.all == orig(this.description.all)
this.description.all.getClass().getName() == orig(this.description.all.getClass().getName())
return == orig(this.isClosed)
this.phase has only one value
this.serverFactory has only one value
this.random has only one value
this.clusterId has only one value
this.clusterId.toString == "2"
this.settings has only one value
this.settings.hosts has only one value
this.settings.hosts[] contains no nulls and has only one value, of length 1
this.settings.hosts[] elements has only one value
this.clusterListener has only one value
this.description has only one value
this.description.all has only one value
return == false
===========================================================================
com.mongodb.BaseCluster.isClosed():::EXIT;condition="not(return == true)"
===========================================================================
com.mongodb.BaseCluster.throwIfIncompatible(com.mongodb.ClusterDescription):::ENTER
com.mongodb.ClusterConnectionMode.Single == curDescription.connectionMode
com.mongodb.ClusterType.Unknown == curDescription.type
this.description == curDescription
this.description.all == curDescription.all
this.description.all.getClass().getName() == curDescription.all.getClass().getName()
this has only one value
this.phase has only one value
this.serverFactory has only one value
this.random has only one value
this.clusterId has only one value
this.clusterId.toString == "2"
this.settings has only one value
this.settings.hosts has only one value
this.settings.hosts[] contains no nulls and has only one value, of length 1
this.settings.hosts[] elements has only one value
this.clusterListener has only one value
this.description != null
===========================================================================
com.mongodb.BaseCluster.throwIfIncompatible(com.mongodb.ClusterDescription):::EXIT
com.mongodb.BaseCluster.LOGGER == orig(com.mongodb.BaseCluster.LOGGER)
this.phase == orig(this.phase)
this.serverFactory == orig(this.serverFactory)
this.serverFactory.getClass().getName() == orig(this.serverFactory.getClass().getName())
this.random == orig(this.random)
this.clusterId == orig(this.clusterId)
this.clusterId.toString == orig(this.clusterId.toString)
this.settings == orig(this.settings)
this.settings.hosts == orig(this.settings.hosts)
this.settings.hosts[] == orig(this.settings.hosts[])
this.settings.hosts.getClass().getName() == orig(this.settings.hosts.getClass().getName())
com.mongodb.ClusterConnectionMode.Single == curDescription.connectionMode
com.mongodb.ClusterConnectionMode.Single == orig(this.settings.mode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Single == orig(this.description.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(curDescription.connectionMode)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == curDescription.type
com.mongodb.ClusterType.Unknown == orig(this.settings.requiredClusterType)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.Unknown == orig(this.description.type)
com.mongodb.ClusterType.Unknown == orig(curDescription.type)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.settings.requiredReplicaSetName == orig(this.settings.requiredReplicaSetName)
this.clusterListener == orig(this.clusterListener)
this.clusterListener.getClass().getName() == orig(this.clusterListener.getClass().getName())
this.isClosed == orig(this.isClosed)
this.description == orig(this.description)
this.description == orig(curDescription)
this.description.all == curDescription.all
this.description.all.getClass().getName() == curDescription.all.getClass().getName()
curDescription.all == orig(this.description.all)
curDescription.all == orig(curDescription.all)
curDescription.all.getClass().getName() == orig(this.description.all.getClass().getName())
curDescription.all.getClass().getName() == orig(curDescription.all.getClass().getName())
this.phase has only one value
this.serverFactory has only one value
this.random has only one value
this.clusterId has only one value
this.clusterId.toString == "2"
this.settings has only one value
this.settings.hosts has only one value
this.settings.hosts[] contains no nulls and has only one value, of length 1
this.settings.hosts[] elements has only one value
this.clusterListener has only one value
this.description != null
curDescription.all != null
curDescription.all.getClass().getName() == java.util.Collections$UnmodifiableSet.class
this.serverFactory.getClass().getName() != curDescription.all.getClass().getName()
this.serverFactory.getClass().getName() != orig(this.getClass().getName())
this.settings.hosts.getClass().getName() != curDescription.all.getClass().getName()
this.settings.hosts.getClass().getName() != orig(this.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != curDescription.all.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != orig(this.getClass().getName())
com.mongodb.ClusterType.$VALUES.getClass().getName() != curDescription.all.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != orig(this.getClass().getName())
this.clusterListener.getClass().getName() != curDescription.all.getClass().getName()
this.clusterListener.getClass().getName() != orig(this.getClass().getName())
curDescription.all.getClass().getName() != orig(this.getClass().getName())
===========================================================================
com.mongodb.BaseCluster.updateDescription(com.mongodb.ClusterDescription):::ENTER
com.mongodb.ClusterConnectionMode.Single == newDescription.connectionMode
com.mongodb.ClusterType.Unknown == newDescription.type
this.description.all.getClass().getName() == newDescription.all.getClass().getName()
newDescription != null
newDescription.all != null
newDescription.all.getClass().getName() == java.util.Collections$UnmodifiableSet.class
this.getClass().getName() != newDescription.all.getClass().getName()
this.serverFactory.getClass().getName() != newDescription.all.getClass().getName()
this.settings.hosts.getClass().getName() != newDescription.all.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != newDescription.all.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != newDescription.all.getClass().getName()
this.clusterListener.getClass().getName() != newDescription.all.getClass().getName()
===========================================================================
com.mongodb.BaseCluster.updateDescription(com.mongodb.ClusterDescription):::EXIT
com.mongodb.BaseCluster.LOGGER == orig(com.mongodb.BaseCluster.LOGGER)
this.phase == orig(this.phase)
this.serverFactory == orig(this.serverFactory)
this.serverFactory.getClass().getName() == orig(this.serverFactory.getClass().getName())
this.random == orig(this.random)
this.clusterId == orig(this.clusterId)
this.clusterId.toString == orig(this.clusterId.toString)
this.settings == orig(this.settings)
this.settings.hosts == orig(this.settings.hosts)
this.settings.hosts[] == orig(this.settings.hosts[])
this.settings.hosts.getClass().getName() == orig(this.settings.hosts.getClass().getName())
com.mongodb.ClusterConnectionMode.Single == newDescription.connectionMode
com.mongodb.ClusterConnectionMode.Single == orig(this.settings.mode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Single == orig(this.description.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(newDescription.connectionMode)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == newDescription.type
com.mongodb.ClusterType.Unknown == orig(this.settings.requiredClusterType)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.Unknown == orig(this.description.type)
com.mongodb.ClusterType.Unknown == orig(newDescription.type)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.settings.requiredReplicaSetName == orig(this.settings.requiredReplicaSetName)
this.clusterListener == orig(this.clusterListener)
this.clusterListener.getClass().getName() == orig(this.clusterListener.getClass().getName())
this.isClosed == orig(this.isClosed)
this.description == orig(newDescription)
this.description.all == newDescription.all
this.description.all.getClass().getName() == newDescription.all.getClass().getName()
newDescription.all == orig(newDescription.all)
newDescription.all.getClass().getName() == orig(this.description.all.getClass().getName())
newDescription.all.getClass().getName() == orig(newDescription.all.getClass().getName())
this.description != null
newDescription.all != null
newDescription.all.getClass().getName() == java.util.Collections$UnmodifiableSet.class
this.serverFactory.getClass().getName() != newDescription.all.getClass().getName()
this.serverFactory.getClass().getName() != orig(this.getClass().getName())
this.serverFactory.getClass().getName() != orig(this.description.all.getClass().getName())
this.settings.hosts.getClass().getName() != newDescription.all.getClass().getName()
this.settings.hosts.getClass().getName() != orig(this.getClass().getName())
this.settings.hosts.getClass().getName() != orig(this.description.all.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != newDescription.all.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != orig(this.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != orig(this.description.all.getClass().getName())
com.mongodb.ClusterType.$VALUES.getClass().getName() != newDescription.all.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != orig(this.getClass().getName())
com.mongodb.ClusterType.$VALUES.getClass().getName() != orig(this.description.all.getClass().getName())
this.clusterListener.getClass().getName() != newDescription.all.getClass().getName()
this.clusterListener.getClass().getName() != orig(this.getClass().getName())
this.clusterListener.getClass().getName() != orig(this.description.all.getClass().getName())
newDescription.all.getClass().getName() != orig(this.getClass().getName())
===========================================================================
com.mongodb.BasicDBObject:::CLASS
===========================================================================
com.mongodb.BasicDBObject:::OBJECT
this._isPartialObject == false
===========================================================================
com.mongodb.BasicDBObject.BasicDBObject():::EXIT
===========================================================================
com.mongodb.BasicDBObject.BasicDBObject(java.lang.String, java.lang.Object):::ENTER
key has only one value
key.toString == "tick"
value has only one value
value.getClass().getName() == java.lang.Integer.class
===========================================================================
com.mongodb.BasicDBObject.BasicDBObject(java.lang.String, java.lang.Object):::EXIT
key.toString == orig(key.toString)
key.toString == "tick"
===========================================================================
com.mongodb.Bytes$OptionHolder:::OBJECT
this._parent._parent._parent == null
this._parent._parent._options == 0
this._parent._parent._hasOptions == false
this._parent._options == 0
this._parent._hasOptions == false
this._options == 0
this._hasOptions == false
===========================================================================
com.mongodb.Bytes$OptionHolder.OptionHolder(com.mongodb.Bytes$OptionHolder):::ENTER
parent._parent._parent == null
parent._parent._options == 0
parent._parent._hasOptions == false
parent._options == 0
parent._hasOptions == false
===========================================================================
com.mongodb.Bytes$OptionHolder.OptionHolder(com.mongodb.Bytes$OptionHolder):::EXIT
parent._parent == orig(parent._parent)
parent._parent._parent == orig(parent._parent._parent)
parent._parent._options == orig(parent._parent._options)
parent._parent._hasOptions == orig(parent._parent._hasOptions)
parent._options == orig(parent._options)
parent._hasOptions == orig(parent._hasOptions)
parent._parent._parent == null
parent._parent._options == 0
parent._parent._hasOptions == false
parent._options == 0
parent._hasOptions == false
===========================================================================
com.mongodb.ChangeEvent:::OBJECT
this.oldValue != null
this.oldValue.getClass().getName() == com.mongodb.ServerDescription.class
this.newValue != null
this.newValue.getClass().getName() == com.mongodb.ServerDescription.class
===========================================================================
com.mongodb.ChangeEvent.ChangeEvent(java.lang.Object, java.lang.Object):::ENTER
oldValue != null
oldValue.getClass().getName() == com.mongodb.ServerDescription.class
newValue != null
newValue.getClass().getName() == com.mongodb.ServerDescription.class
===========================================================================
com.mongodb.ChangeEvent.ChangeEvent(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
com.mongodb.ChangeEvent.getNewValue():::ENTER
===========================================================================
com.mongodb.ChangeEvent.getNewValue():::EXIT
this.oldValue == orig(this.oldValue)
this.oldValue.getClass().getName() == orig(this.oldValue.getClass().getName())
this.newValue == orig(this.newValue)
this.newValue.getClass().getName() == orig(this.newValue.getClass().getName())
return != null
return.getClass().getName() == com.mongodb.ServerDescription.class
===========================================================================
com.mongodb.ClusterConnectionMode:::OBJECT
===========================================================================
com.mongodb.ClusterConnectionMode.ClusterConnectionMode(java.lang.String, int):::ENTER
$hidden$1.toString one of { "Multiple", "Single" }
$hidden$2 one of { 0, 1 }
===========================================================================
com.mongodb.ClusterConnectionMode.ClusterConnectionMode(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString one of { "Multiple", "Single" }
===========================================================================
com.mongodb.ClusterDescription$1:::OBJECT
com.mongodb.ClusterDescription.this.connectionMode == com.mongodb.ClusterConnectionMode.Single
com.mongodb.ClusterDescription.this.type == com.mongodb.ClusterType.Unknown
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Single != null
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.Multiple != null
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES != null
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[] elements != null
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.StandAlone != null
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.ReplicaSet != null
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Sharded != null
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.Unknown != null
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES != null
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[] elements != null
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
com.mongodb.ClusterDescription.this.all == null
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ClusterType.$VALUES.getClass().getName()
===========================================================================
com.mongodb.ClusterDescription$1.(com.mongodb.ClusterDescription):::ENTER
com.mongodb.ClusterDescription.this.connectionMode == com.mongodb.ClusterConnectionMode.Single
com.mongodb.ClusterDescription.this.type == com.mongodb.ClusterType.Unknown
com.mongodb.ClusterDescription.this != null
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Single != null
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.Multiple != null
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES != null
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[] elements != null
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.StandAlone != null
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.ReplicaSet != null
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Sharded != null
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.Unknown != null
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES != null
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[] elements != null
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
com.mongodb.ClusterDescription.this.all == null
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ClusterType.$VALUES.getClass().getName()
===========================================================================
com.mongodb.ClusterDescription$1.(com.mongodb.ClusterDescription):::EXIT
com.mongodb.ClusterDescription.this == orig(com.mongodb.ClusterDescription.this)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterDescription.this.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterDescription.this.type)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
com.mongodb.ClusterDescription.this.all == orig(com.mongodb.ClusterDescription.this.all)
===========================================================================
com.mongodb.ClusterDescription$1.compare(com.mongodb.ServerDescription, com.mongodb.ServerDescription):::ENTER
o1.type.getClass().getName() == com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() == o2.type.getClass().getName()
o1.hosts.getClass().getName() == o1.passives.getClass().getName()
o1.hosts.getClass().getName() == o1.arbiters.getClass().getName()
o1.hosts.getClass().getName() == o2.hosts.getClass().getName()
o1.hosts.getClass().getName() == o2.passives.getClass().getName()
o1.hosts.getClass().getName() == o2.arbiters.getClass().getName()
o1.tags.wrapped.getClass().getName() == o2.tags.wrapped.getClass().getName()
o1.version.versionList.getClass().getName() == o2.version.versionList.getClass().getName()
o1 != null
o1.address != null
o1.address._host has only one value
o1.address._host != null
o1.address._host.toString == "localhost"
o1.address._port == 27017
o1.type has only one value
o1.type != null
com.mongodb.ServerType.StandAlone has only one value
com.mongodb.ServerType.StandAlone != null
com.mongodb.ServerType.StandAlone.getClass().getName() == com.mongodb.ServerType$1.class
com.mongodb.ServerType.ReplicaSetPrimary has only one value
com.mongodb.ServerType.ReplicaSetPrimary != null
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == com.mongodb.ServerType$2.class
com.mongodb.ServerType.ReplicaSetSecondary has only one value
com.mongodb.ServerType.ReplicaSetSecondary != null
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == com.mongodb.ServerType$3.class
com.mongodb.ServerType.ReplicaSetArbiter has only one value
com.mongodb.ServerType.ReplicaSetArbiter != null
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == com.mongodb.ServerType$4.class
com.mongodb.ServerType.ReplicaSetOther has only one value
com.mongodb.ServerType.ReplicaSetOther != null
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == com.mongodb.ServerType$5.class
com.mongodb.ServerType.ReplicaSetGhost has only one value
com.mongodb.ServerType.ReplicaSetGhost != null
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == com.mongodb.ServerType$6.class
com.mongodb.ServerType.ShardRouter has only one value
com.mongodb.ServerType.ShardRouter != null
com.mongodb.ServerType.ShardRouter.getClass().getName() == com.mongodb.ServerType$7.class
com.mongodb.ServerType.Unknown has only one value
com.mongodb.ServerType.Unknown != null
com.mongodb.ServerType.Unknown.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.ServerType.$VALUES has only one value
com.mongodb.ServerType.$VALUES != null
com.mongodb.ServerType.$VALUES.getClass().getName() == com.mongodb.ServerType[].class
com.mongodb.ServerType.$VALUES[] contains no nulls and has only one value, of length 8
com.mongodb.ServerType.$VALUES[] elements != null
com.mongodb.ServerType.$VALUES[].getClass().getName() == [null, null, null, null, null, null, null, null]
com.mongodb.ServerType.$VALUES[].getClass().getName() elements == null
o1.hosts has only one value
o1.hosts != null
o1.hosts.getClass().getName() == java.util.Collections$EmptySet.class
o1.passives has only one value
o1.passives != null
o1.arbiters has only one value
o1.arbiters != null
o1.primary == null
o1.maxDocumentSize == 16777216
o1.maxWriteBatchSize == 512
o1.maxMessageSize == 33554432
o1.tags != null
o1.tags.frozen == true
o1.tags.wrapped != null
o1.tags.wrapped.getClass().getName() == java.util.HashMap.class
o1.setName == null
o1.averageLatencyNanos == 0
o1.ok == false
o1.state has only one value
o1.state != null
com.mongodb.ServerConnectionState.Connecting has only one value
com.mongodb.ServerConnectionState.Connecting != null
com.mongodb.ServerConnectionState.Connected has only one value
com.mongodb.ServerConnectionState.Connected != null
com.mongodb.ServerConnectionState.$VALUES has only one value
com.mongodb.ServerConnectionState.$VALUES != null
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == com.mongodb.ServerConnectionState[].class
com.mongodb.ServerConnectionState.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ServerConnectionState.$VALUES[] elements != null
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() == [com.mongodb.ServerConnectionState, com.mongodb.ServerConnectionState]
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() elements == com.mongodb.ServerConnectionState.class
o1.version != null
o1.version.versionList != null
o1.version.versionList[] contains no nulls and has only one value, of length 3
o1.version.versionList[] elements has only one value
o1.version.versionList[] elements != null
o1.version.versionList[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
o1.version.versionList[].getClass().getName() elements == java.lang.Integer.class
o1.version.versionList.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
o1.minWireVersion == 0
o1.maxWireVersion == 0
o2 != null
o2.address != null
o2.address._host has only one value
o2.address._host != null
o2.address._host.toString == "localhost"
o2.address._port == 27017
o2.type has only one value
o2.type != null
o2.hosts has only one value
o2.hosts != null
o2.passives has only one value
o2.passives != null
o2.arbiters has only one value
o2.arbiters != null
o2.primary == null
o2.maxDocumentSize == 16777216
o2.maxWriteBatchSize == 512
o2.maxMessageSize == 33554432
o2.tags != null
o2.tags.frozen == true
o2.tags.wrapped != null
o2.setName == null
o2.averageLatencyNanos == 0
o2.ok == false
o2.state has only one value
o2.state != null
o2.version != null
o2.version.versionList != null
o2.version.versionList[] contains no nulls and has only one value, of length 3
o2.version.versionList[] elements has only one value
o2.version.versionList[] elements != null
o2.version.versionList[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
o2.version.versionList[].getClass().getName() elements == java.lang.Integer.class
o2.minWireVersion == 0
o2.maxWireVersion == 0
size(com.mongodb.ServerType.$VALUES[]) == 8
size(com.mongodb.ServerConnectionState.$VALUES[]) == 2
size(o1.version.versionList[]) == 3
size(o2.version.versionList[]) == 3
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != o1.hosts.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != o1.tags.wrapped.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != o1.version.versionList.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != o1.hosts.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != o1.tags.wrapped.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != o1.version.versionList.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != o1.hosts.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != o1.tags.wrapped.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != o1.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != o1.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != o1.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != o1.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != o1.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != o1.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != o1.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != o1.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != o1.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != o1.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != o1.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != o1.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != o1.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != o1.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != o1.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != o1.version.versionList.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != o1.hosts.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != o1.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != o1.version.versionList.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != o1.hosts.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != o1.tags.wrapped.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != o1.version.versionList.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != o1.hosts.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != o1.tags.wrapped.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != o1.version.versionList.getClass().getName()
o1.hosts.getClass().getName() != o1.tags.wrapped.getClass().getName()
o1.hosts.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
o1.hosts.getClass().getName() != o1.version.versionList.getClass().getName()
o1.tags.wrapped.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
o1.tags.wrapped.getClass().getName() != o1.version.versionList.getClass().getName()
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() != o1.version.versionList.getClass().getName()
===========================================================================
com.mongodb.ClusterDescription$1.compare(com.mongodb.ServerDescription, com.mongodb.ServerDescription):::EXIT
com.mongodb.ClusterDescription.this == orig(com.mongodb.ClusterDescription.this)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterDescription.this.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterDescription.this.type)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
com.mongodb.ClusterDescription.this.all == orig(com.mongodb.ClusterDescription.this.all)
o1.address == orig(o1.address)
o1.address._host == orig(o1.address._host)
o1.address._host.toString == orig(o1.address._host.toString)
o1.address._port == orig(o1.address._port)
o1.type == orig(o1.type)
o1.type.getClass().getName() == com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == o2.type.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() == orig(o1.type.getClass().getName())
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.Unknown.getClass().getName() == orig(o2.type.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
o1.hosts == orig(o1.hosts)
o1.hosts.getClass().getName() == o1.passives.getClass().getName()
o1.hosts.getClass().getName() == o1.arbiters.getClass().getName()
o1.hosts.getClass().getName() == o2.hosts.getClass().getName()
o1.hosts.getClass().getName() == o2.passives.getClass().getName()
o1.hosts.getClass().getName() == o2.arbiters.getClass().getName()
o1.hosts.getClass().getName() == orig(o1.hosts.getClass().getName())
o1.hosts.getClass().getName() == orig(o1.passives.getClass().getName())
o1.hosts.getClass().getName() == orig(o1.arbiters.getClass().getName())
o1.hosts.getClass().getName() == orig(o2.hosts.getClass().getName())
o1.hosts.getClass().getName() == orig(o2.passives.getClass().getName())
o1.hosts.getClass().getName() == orig(o2.arbiters.getClass().getName())
o1.passives == orig(o1.passives)
o1.arbiters == orig(o1.arbiters)
o1.primary == orig(o1.primary)
o1.maxDocumentSize == orig(o1.maxDocumentSize)
o1.maxWriteBatchSize == orig(o1.maxWriteBatchSize)
o1.maxMessageSize == orig(o1.maxMessageSize)
o1.tags == orig(o1.tags)
o1.tags.frozen == orig(o1.tags.frozen)
o1.tags.wrapped == orig(o1.tags.wrapped)
o1.tags.wrapped.getClass().getName() == o2.tags.wrapped.getClass().getName()
o1.tags.wrapped.getClass().getName() == orig(o1.tags.wrapped.getClass().getName())
o1.tags.wrapped.getClass().getName() == orig(o2.tags.wrapped.getClass().getName())
o1.setName == orig(o1.setName)
o1.averageLatencyNanos == orig(o1.averageLatencyNanos)
o1.ok == orig(o1.ok)
o1.state == orig(o1.state)
com.mongodb.ServerConnectionState.Connecting == orig(com.mongodb.ServerConnectionState.Connecting)
com.mongodb.ServerConnectionState.Connected == orig(com.mongodb.ServerConnectionState.Connected)
com.mongodb.ServerConnectionState.$VALUES == orig(com.mongodb.ServerConnectionState.$VALUES)
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == orig(com.mongodb.ServerConnectionState.$VALUES.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES[] == orig(com.mongodb.ServerConnectionState.$VALUES[])
o1.version == orig(o1.version)
o1.version.versionList == orig(o1.version.versionList)
o1.version.versionList[] == orig(o1.version.versionList[])
o1.version.versionList.getClass().getName() == o2.version.versionList.getClass().getName()
o1.version.versionList.getClass().getName() == orig(o1.version.versionList.getClass().getName())
o1.version.versionList.getClass().getName() == orig(o2.version.versionList.getClass().getName())
o1.minWireVersion == orig(o1.minWireVersion)
o1.maxWireVersion == orig(o1.maxWireVersion)
o2.address == orig(o2.address)
o2.address._host == orig(o2.address._host)
o2.address._host.toString == orig(o2.address._host.toString)
o2.address._port == orig(o2.address._port)
o2.type == orig(o2.type)
o2.hosts == orig(o2.hosts)
o2.passives == orig(o2.passives)
o2.arbiters == orig(o2.arbiters)
o2.primary == orig(o2.primary)
o2.maxDocumentSize == orig(o2.maxDocumentSize)
o2.maxWriteBatchSize == orig(o2.maxWriteBatchSize)
o2.maxMessageSize == orig(o2.maxMessageSize)
o2.tags == orig(o2.tags)
o2.tags.frozen == orig(o2.tags.frozen)
o2.tags.wrapped == orig(o2.tags.wrapped)
o2.setName == orig(o2.setName)
o2.averageLatencyNanos == orig(o2.averageLatencyNanos)
o2.ok == orig(o2.ok)
o2.state == orig(o2.state)
o2.version == orig(o2.version)
o2.version.versionList == orig(o2.version.versionList)
o2.version.versionList[] == orig(o2.version.versionList[])
o2.minWireVersion == orig(o2.minWireVersion)
o2.maxWireVersion == orig(o2.maxWireVersion)
o1.address != null
o1.address._host has only one value
o1.address._host != null
o1.address._host.toString == "localhost"
o1.address._port == 27017
o1.type has only one value
o1.type != null
com.mongodb.ServerType.StandAlone has only one value
com.mongodb.ServerType.StandAlone != null
com.mongodb.ServerType.StandAlone.getClass().getName() == com.mongodb.ServerType$1.class
com.mongodb.ServerType.ReplicaSetPrimary has only one value
com.mongodb.ServerType.ReplicaSetPrimary != null
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == com.mongodb.ServerType$2.class
com.mongodb.ServerType.ReplicaSetSecondary has only one value
com.mongodb.ServerType.ReplicaSetSecondary != null
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == com.mongodb.ServerType$3.class
com.mongodb.ServerType.ReplicaSetArbiter has only one value
com.mongodb.ServerType.ReplicaSetArbiter != null
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == com.mongodb.ServerType$4.class
com.mongodb.ServerType.ReplicaSetOther has only one value
com.mongodb.ServerType.ReplicaSetOther != null
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == com.mongodb.ServerType$5.class
com.mongodb.ServerType.ReplicaSetGhost has only one value
com.mongodb.ServerType.ReplicaSetGhost != null
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == com.mongodb.ServerType$6.class
com.mongodb.ServerType.ShardRouter has only one value
com.mongodb.ServerType.ShardRouter != null
com.mongodb.ServerType.ShardRouter.getClass().getName() == com.mongodb.ServerType$7.class
com.mongodb.ServerType.Unknown has only one value
com.mongodb.ServerType.Unknown != null
com.mongodb.ServerType.Unknown.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.ServerType.$VALUES has only one value
com.mongodb.ServerType.$VALUES != null
com.mongodb.ServerType.$VALUES.getClass().getName() == com.mongodb.ServerType[].class
com.mongodb.ServerType.$VALUES[] contains no nulls and has only one value, of length 8
com.mongodb.ServerType.$VALUES[] elements != null
com.mongodb.ServerType.$VALUES[].getClass().getName() == [null, null, null, null, null, null, null, null]
com.mongodb.ServerType.$VALUES[].getClass().getName() elements == null
o1.hosts has only one value
o1.hosts != null
o1.hosts.getClass().getName() == java.util.Collections$EmptySet.class
o1.passives has only one value
o1.passives != null
o1.arbiters has only one value
o1.arbiters != null
o1.primary == null
o1.maxDocumentSize == 16777216
o1.maxWriteBatchSize == 512
o1.maxMessageSize == 33554432
o1.tags != null
o1.tags.frozen == true
o1.tags.wrapped != null
o1.tags.wrapped.getClass().getName() == java.util.HashMap.class
o1.setName == null
o1.averageLatencyNanos == 0
o1.ok == false
o1.state has only one value
o1.state != null
com.mongodb.ServerConnectionState.Connecting has only one value
com.mongodb.ServerConnectionState.Connecting != null
com.mongodb.ServerConnectionState.Connected has only one value
com.mongodb.ServerConnectionState.Connected != null
com.mongodb.ServerConnectionState.$VALUES has only one value
com.mongodb.ServerConnectionState.$VALUES != null
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == com.mongodb.ServerConnectionState[].class
com.mongodb.ServerConnectionState.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ServerConnectionState.$VALUES[] elements != null
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() == [com.mongodb.ServerConnectionState, com.mongodb.ServerConnectionState]
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() elements == com.mongodb.ServerConnectionState.class
o1.version != null
o1.version.versionList != null
o1.version.versionList[] contains no nulls and has only one value, of length 3
o1.version.versionList[] elements has only one value
o1.version.versionList[] elements != null
o1.version.versionList[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
o1.version.versionList[].getClass().getName() elements == java.lang.Integer.class
o1.version.versionList.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
o1.minWireVersion == 0
o1.maxWireVersion == 0
o2.address != null
o2.address._host has only one value
o2.address._host != null
o2.address._host.toString == "localhost"
o2.address._port == 27017
o2.type has only one value
o2.type != null
o2.hosts has only one value
o2.hosts != null
o2.passives has only one value
o2.passives != null
o2.arbiters has only one value
o2.arbiters != null
o2.primary == null
o2.maxDocumentSize == 16777216
o2.maxWriteBatchSize == 512
o2.maxMessageSize == 33554432
o2.tags != null
o2.tags.frozen == true
o2.tags.wrapped != null
o2.setName == null
o2.averageLatencyNanos == 0
o2.ok == false
o2.state has only one value
o2.state != null
o2.version != null
o2.version.versionList != null
o2.version.versionList[] contains no nulls and has only one value, of length 3
o2.version.versionList[] elements has only one value
o2.version.versionList[] elements != null
o2.version.versionList[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
o2.version.versionList[].getClass().getName() elements == java.lang.Integer.class
o2.minWireVersion == 0
o2.maxWireVersion == 0
return == 0
size(com.mongodb.ServerType.$VALUES[]) == 8
size(com.mongodb.ServerConnectionState.$VALUES[]) == 2
size(o1.version.versionList[]) == 3
size(o2.version.versionList[]) == 3
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != o1.hosts.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != o1.tags.wrapped.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != o1.version.versionList.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != o1.hosts.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != o1.tags.wrapped.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != o1.version.versionList.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != o1.hosts.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != o1.tags.wrapped.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != o1.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != o1.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != o1.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != o1.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != o1.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != o1.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != o1.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != o1.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != o1.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != o1.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != o1.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != o1.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != o1.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != o1.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != o1.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != o1.version.versionList.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != o1.hosts.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != o1.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != o1.version.versionList.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != o1.hosts.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != o1.tags.wrapped.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != o1.version.versionList.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != o1.hosts.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != o1.tags.wrapped.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != o1.version.versionList.getClass().getName()
o1.hosts.getClass().getName() != o1.tags.wrapped.getClass().getName()
o1.hosts.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
o1.hosts.getClass().getName() != o1.version.versionList.getClass().getName()
o1.tags.wrapped.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
o1.tags.wrapped.getClass().getName() != o1.version.versionList.getClass().getName()
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() != o1.version.versionList.getClass().getName()
===========================================================================
com.mongodb.ClusterDescription$5:::OBJECT
com.mongodb.ClusterDescription.this.connectionMode == com.mongodb.ClusterConnectionMode.Single
com.mongodb.ClusterDescription.this.type == com.mongodb.ClusterType.Unknown
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Single != null
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.Multiple != null
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES != null
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[] elements != null
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.StandAlone != null
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.ReplicaSet != null
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Sharded != null
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.Unknown != null
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES != null
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[] elements != null
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
com.mongodb.ClusterDescription.this.all != null
com.mongodb.ClusterDescription.this.all.getClass().getName() == java.util.Collections$UnmodifiableSet.class
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ClusterType.$VALUES.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ClusterDescription.this.all.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ClusterDescription.this.all.getClass().getName()
===========================================================================
com.mongodb.ClusterDescription$5.(com.mongodb.ClusterDescription):::ENTER
com.mongodb.ClusterDescription.this.connectionMode == com.mongodb.ClusterConnectionMode.Single
com.mongodb.ClusterDescription.this.type == com.mongodb.ClusterType.Unknown
com.mongodb.ClusterDescription.this != null
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Single != null
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.Multiple != null
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES != null
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[] elements != null
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.StandAlone != null
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.ReplicaSet != null
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Sharded != null
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.Unknown != null
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES != null
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[] elements != null
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
com.mongodb.ClusterDescription.this.all != null
com.mongodb.ClusterDescription.this.all.getClass().getName() == java.util.Collections$UnmodifiableSet.class
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ClusterType.$VALUES.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ClusterDescription.this.all.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ClusterDescription.this.all.getClass().getName()
===========================================================================
com.mongodb.ClusterDescription$5.(com.mongodb.ClusterDescription):::EXIT
com.mongodb.ClusterDescription.this == orig(com.mongodb.ClusterDescription.this)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterDescription.this.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterDescription.this.type)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
com.mongodb.ClusterDescription.this.all == orig(com.mongodb.ClusterDescription.this.all)
com.mongodb.ClusterDescription.this.all.getClass().getName() == orig(com.mongodb.ClusterDescription.this.all.getClass().getName())
===========================================================================
com.mongodb.ClusterDescription$5.apply(com.mongodb.ServerDescription):::ENTER
serverDescription.type == com.mongodb.ServerType.Unknown
serverDescription.type.getClass().getName() == com.mongodb.ServerType.Unknown.getClass().getName()
serverDescription.hosts == serverDescription.passives
serverDescription.hosts == serverDescription.arbiters
serverDescription.hosts.getClass().getName() == serverDescription.passives.getClass().getName()
serverDescription.hosts.getClass().getName() == serverDescription.arbiters.getClass().getName()
serverDescription.state == com.mongodb.ServerConnectionState.Connecting
serverDescription != null
serverDescription.address has only one value
serverDescription.address != null
serverDescription.address._host has only one value
serverDescription.address._host != null
serverDescription.address._host.toString == "localhost"
serverDescription.address._port == 27017
com.mongodb.ServerType.StandAlone has only one value
com.mongodb.ServerType.StandAlone != null
com.mongodb.ServerType.StandAlone.getClass().getName() == com.mongodb.ServerType$1.class
com.mongodb.ServerType.ReplicaSetPrimary has only one value
com.mongodb.ServerType.ReplicaSetPrimary != null
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == com.mongodb.ServerType$2.class
com.mongodb.ServerType.ReplicaSetSecondary has only one value
com.mongodb.ServerType.ReplicaSetSecondary != null
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == com.mongodb.ServerType$3.class
com.mongodb.ServerType.ReplicaSetArbiter has only one value
com.mongodb.ServerType.ReplicaSetArbiter != null
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == com.mongodb.ServerType$4.class
com.mongodb.ServerType.ReplicaSetOther has only one value
com.mongodb.ServerType.ReplicaSetOther != null
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == com.mongodb.ServerType$5.class
com.mongodb.ServerType.ReplicaSetGhost has only one value
com.mongodb.ServerType.ReplicaSetGhost != null
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == com.mongodb.ServerType$6.class
com.mongodb.ServerType.ShardRouter has only one value
com.mongodb.ServerType.ShardRouter != null
com.mongodb.ServerType.ShardRouter.getClass().getName() == com.mongodb.ServerType$7.class
com.mongodb.ServerType.Unknown has only one value
com.mongodb.ServerType.Unknown != null
com.mongodb.ServerType.Unknown.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.ServerType.$VALUES has only one value
com.mongodb.ServerType.$VALUES != null
com.mongodb.ServerType.$VALUES.getClass().getName() == com.mongodb.ServerType[].class
com.mongodb.ServerType.$VALUES[] contains no nulls and has only one value, of length 8
com.mongodb.ServerType.$VALUES[] elements != null
com.mongodb.ServerType.$VALUES[].getClass().getName() == [null, null, null, null, null, null, null, null]
com.mongodb.ServerType.$VALUES[].getClass().getName() elements == null
serverDescription.hosts has only one value
serverDescription.hosts != null
serverDescription.hosts.getClass().getName() == java.util.Collections$EmptySet.class
serverDescription.primary == null
serverDescription.maxDocumentSize == 16777216
serverDescription.maxWriteBatchSize == 512
serverDescription.maxMessageSize == 33554432
serverDescription.tags != null
serverDescription.tags.frozen == true
serverDescription.tags.wrapped != null
serverDescription.tags.wrapped.getClass().getName() == java.util.HashMap.class
serverDescription.setName == null
serverDescription.averageLatencyNanos == 0
serverDescription.ok == false
com.mongodb.ServerConnectionState.Connecting has only one value
com.mongodb.ServerConnectionState.Connecting != null
com.mongodb.ServerConnectionState.Connected has only one value
com.mongodb.ServerConnectionState.Connected != null
com.mongodb.ServerConnectionState.$VALUES has only one value
com.mongodb.ServerConnectionState.$VALUES != null
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == com.mongodb.ServerConnectionState[].class
com.mongodb.ServerConnectionState.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ServerConnectionState.$VALUES[] elements != null
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() == [com.mongodb.ServerConnectionState, com.mongodb.ServerConnectionState]
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() elements == com.mongodb.ServerConnectionState.class
serverDescription.version != null
serverDescription.version.versionList != null
serverDescription.version.versionList[] contains no nulls and has only one value, of length 3
serverDescription.version.versionList[] elements has only one value
serverDescription.version.versionList[] elements != null
serverDescription.version.versionList[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
serverDescription.version.versionList[].getClass().getName() elements == java.lang.Integer.class
serverDescription.version.versionList.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
serverDescription.minWireVersion == 0
serverDescription.maxWireVersion == 0
size(com.mongodb.ServerType.$VALUES[]) == 8
size(com.mongodb.ServerConnectionState.$VALUES[]) == 2
size(serverDescription.version.versionList[]) == 3
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != serverDescription.version.versionList.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != serverDescription.version.versionList.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != serverDescription.version.versionList.getClass().getName()
serverDescription.hosts.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
serverDescription.hosts.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
serverDescription.hosts.getClass().getName() != serverDescription.version.versionList.getClass().getName()
serverDescription.tags.wrapped.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
serverDescription.tags.wrapped.getClass().getName() != serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() != serverDescription.version.versionList.getClass().getName()
===========================================================================
com.mongodb.ClusterDescription$5.apply(com.mongodb.ServerDescription):::EXIT
com.mongodb.ClusterDescription.this == orig(com.mongodb.ClusterDescription.this)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterDescription.this.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterDescription.this.type)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
com.mongodb.ClusterDescription.this.all == orig(com.mongodb.ClusterDescription.this.all)
com.mongodb.ClusterDescription.this.all.getClass().getName() == orig(com.mongodb.ClusterDescription.this.all.getClass().getName())
serverDescription.address == orig(serverDescription.address)
serverDescription.address._host == orig(serverDescription.address._host)
serverDescription.address._host.toString == orig(serverDescription.address._host.toString)
serverDescription.address._port == orig(serverDescription.address._port)
serverDescription.type == com.mongodb.ServerType.Unknown
serverDescription.type.getClass().getName() == com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(serverDescription.type)
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == orig(serverDescription.type.getClass().getName())
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
serverDescription.hosts == serverDescription.passives
serverDescription.hosts == serverDescription.arbiters
serverDescription.hosts == orig(serverDescription.hosts)
serverDescription.hosts == orig(serverDescription.passives)
serverDescription.hosts == orig(serverDescription.arbiters)
serverDescription.hosts.getClass().getName() == serverDescription.passives.getClass().getName()
serverDescription.hosts.getClass().getName() == serverDescription.arbiters.getClass().getName()
serverDescription.hosts.getClass().getName() == orig(serverDescription.hosts.getClass().getName())
serverDescription.hosts.getClass().getName() == orig(serverDescription.passives.getClass().getName())
serverDescription.hosts.getClass().getName() == orig(serverDescription.arbiters.getClass().getName())
serverDescription.primary == orig(serverDescription.primary)
serverDescription.maxDocumentSize == orig(serverDescription.maxDocumentSize)
serverDescription.maxWriteBatchSize == orig(serverDescription.maxWriteBatchSize)
serverDescription.maxMessageSize == orig(serverDescription.maxMessageSize)
serverDescription.tags == orig(serverDescription.tags)
serverDescription.tags.frozen == orig(serverDescription.tags.frozen)
serverDescription.tags.wrapped == orig(serverDescription.tags.wrapped)
serverDescription.tags.wrapped.getClass().getName() == orig(serverDescription.tags.wrapped.getClass().getName())
serverDescription.setName == orig(serverDescription.setName)
serverDescription.averageLatencyNanos == orig(serverDescription.averageLatencyNanos)
serverDescription.ok == return
serverDescription.state == com.mongodb.ServerConnectionState.Connecting
com.mongodb.ServerConnectionState.Connecting == orig(serverDescription.state)
com.mongodb.ServerConnectionState.Connecting == orig(com.mongodb.ServerConnectionState.Connecting)
com.mongodb.ServerConnectionState.Connected == orig(com.mongodb.ServerConnectionState.Connected)
com.mongodb.ServerConnectionState.$VALUES == orig(com.mongodb.ServerConnectionState.$VALUES)
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == orig(com.mongodb.ServerConnectionState.$VALUES.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES[] == orig(com.mongodb.ServerConnectionState.$VALUES[])
serverDescription.version == orig(serverDescription.version)
serverDescription.version.versionList == orig(serverDescription.version.versionList)
serverDescription.version.versionList[] == orig(serverDescription.version.versionList[])
serverDescription.version.versionList.getClass().getName() == orig(serverDescription.version.versionList.getClass().getName())
serverDescription.minWireVersion == orig(serverDescription.minWireVersion)
serverDescription.maxWireVersion == orig(serverDescription.maxWireVersion)
return == orig(serverDescription.ok)
serverDescription.address has only one value
serverDescription.address != null
serverDescription.address._host has only one value
serverDescription.address._host != null
serverDescription.address._host.toString == "localhost"
serverDescription.address._port == 27017
com.mongodb.ServerType.StandAlone has only one value
com.mongodb.ServerType.StandAlone != null
com.mongodb.ServerType.StandAlone.getClass().getName() == com.mongodb.ServerType$1.class
com.mongodb.ServerType.ReplicaSetPrimary has only one value
com.mongodb.ServerType.ReplicaSetPrimary != null
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == com.mongodb.ServerType$2.class
com.mongodb.ServerType.ReplicaSetSecondary has only one value
com.mongodb.ServerType.ReplicaSetSecondary != null
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == com.mongodb.ServerType$3.class
com.mongodb.ServerType.ReplicaSetArbiter has only one value
com.mongodb.ServerType.ReplicaSetArbiter != null
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == com.mongodb.ServerType$4.class
com.mongodb.ServerType.ReplicaSetOther has only one value
com.mongodb.ServerType.ReplicaSetOther != null
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == com.mongodb.ServerType$5.class
com.mongodb.ServerType.ReplicaSetGhost has only one value
com.mongodb.ServerType.ReplicaSetGhost != null
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == com.mongodb.ServerType$6.class
com.mongodb.ServerType.ShardRouter has only one value
com.mongodb.ServerType.ShardRouter != null
com.mongodb.ServerType.ShardRouter.getClass().getName() == com.mongodb.ServerType$7.class
com.mongodb.ServerType.Unknown has only one value
com.mongodb.ServerType.Unknown != null
com.mongodb.ServerType.Unknown.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.ServerType.$VALUES has only one value
com.mongodb.ServerType.$VALUES != null
com.mongodb.ServerType.$VALUES.getClass().getName() == com.mongodb.ServerType[].class
com.mongodb.ServerType.$VALUES[] contains no nulls and has only one value, of length 8
com.mongodb.ServerType.$VALUES[] elements != null
com.mongodb.ServerType.$VALUES[].getClass().getName() == [null, null, null, null, null, null, null, null]
com.mongodb.ServerType.$VALUES[].getClass().getName() elements == null
serverDescription.hosts has only one value
serverDescription.hosts != null
serverDescription.hosts.getClass().getName() == java.util.Collections$EmptySet.class
serverDescription.primary == null
serverDescription.maxDocumentSize == 16777216
serverDescription.maxWriteBatchSize == 512
serverDescription.maxMessageSize == 33554432
serverDescription.tags != null
serverDescription.tags.frozen == true
serverDescription.tags.wrapped != null
serverDescription.tags.wrapped.getClass().getName() == java.util.HashMap.class
serverDescription.setName == null
serverDescription.averageLatencyNanos == 0
com.mongodb.ServerConnectionState.Connecting has only one value
com.mongodb.ServerConnectionState.Connecting != null
com.mongodb.ServerConnectionState.Connected has only one value
com.mongodb.ServerConnectionState.Connected != null
com.mongodb.ServerConnectionState.$VALUES has only one value
com.mongodb.ServerConnectionState.$VALUES != null
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == com.mongodb.ServerConnectionState[].class
com.mongodb.ServerConnectionState.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ServerConnectionState.$VALUES[] elements != null
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() == [com.mongodb.ServerConnectionState, com.mongodb.ServerConnectionState]
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() elements == com.mongodb.ServerConnectionState.class
serverDescription.version != null
serverDescription.version.versionList != null
serverDescription.version.versionList[] contains no nulls and has only one value, of length 3
serverDescription.version.versionList[] elements has only one value
serverDescription.version.versionList[] elements != null
serverDescription.version.versionList[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
serverDescription.version.versionList[].getClass().getName() elements == java.lang.Integer.class
serverDescription.version.versionList.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
serverDescription.minWireVersion == 0
serverDescription.maxWireVersion == 0
return == false
size(com.mongodb.ServerType.$VALUES[]) == 8
size(com.mongodb.ServerConnectionState.$VALUES[]) == 2
size(serverDescription.version.versionList[]) == 3
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != serverDescription.version.versionList.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != serverDescription.version.versionList.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ClusterDescription.this.all.getClass().getName() != serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != serverDescription.version.versionList.getClass().getName()
serverDescription.hosts.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
serverDescription.hosts.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
serverDescription.hosts.getClass().getName() != serverDescription.version.versionList.getClass().getName()
serverDescription.tags.wrapped.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
serverDescription.tags.wrapped.getClass().getName() != serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() != serverDescription.version.versionList.getClass().getName()
===========================================================================
com.mongodb.ClusterDescription$5.apply(com.mongodb.ServerDescription):::EXIT;condition="not(return == true)"
===========================================================================
com.mongodb.ClusterDescription:::OBJECT
this.connectionMode has only one value
this.connectionMode != null
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Single != null
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.Multiple != null
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES != null
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[] elements != null
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
this.type has only one value
this.type != null
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.StandAlone != null
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.ReplicaSet != null
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Sharded != null
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.Unknown != null
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES != null
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[] elements != null
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
this.all != null
this.all.getClass().getName() == java.util.Collections$UnmodifiableSet.class
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
===========================================================================
com.mongodb.ClusterDescription.ClusterDescription(com.mongodb.ClusterConnectionMode, com.mongodb.ClusterType, java.util.List):::ENTER
connectionMode has only one value
connectionMode != null
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Single != null
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.Multiple != null
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES != null
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[] elements != null
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
type has only one value
type != null
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.StandAlone != null
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.ReplicaSet != null
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Sharded != null
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.Unknown != null
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES != null
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[] elements != null
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
serverDescriptions != null
serverDescriptions[] elements != null
serverDescriptions[].getClass().getName() == [com.mongodb.ServerDescription]
serverDescriptions[].getClass().getName() elements == com.mongodb.ServerDescription.class
serverDescriptions.getClass().getName() == java.util.Arrays$ArrayList.class
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
size(serverDescriptions[]) == 1
===========================================================================
com.mongodb.ClusterDescription.ClusterDescription(com.mongodb.ClusterConnectionMode, com.mongodb.ClusterType, java.util.List):::EXIT
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
serverDescriptions[] == orig(serverDescriptions[])
serverDescriptions[] elements != null
serverDescriptions[].getClass().getName() == [com.mongodb.ServerDescription]
serverDescriptions[].getClass().getName() elements == com.mongodb.ServerDescription.class
===========================================================================
com.mongodb.ClusterDescription.getAny():::ENTER
===========================================================================
com.mongodb.ClusterDescription.getAny():::EXIT
this.connectionMode == orig(this.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
this.type == orig(this.type)
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.all == orig(this.all)
this.all.getClass().getName() == orig(this.all.getClass().getName())
return != null
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
===========================================================================
com.mongodb.ClusterDescription.getServersByPredicate(com.mongodb.ClusterDescription$Predicate):::ENTER
predicate != null
predicate.getClass().getName() == com.mongodb.ClusterDescription$5.class
===========================================================================
com.mongodb.ClusterDescription.getServersByPredicate(com.mongodb.ClusterDescription$Predicate):::EXIT
this.connectionMode == orig(this.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
this.type == orig(this.type)
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.all == orig(this.all)
this.all.getClass().getName() == orig(this.all.getClass().getName())
return != null
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
===========================================================================
com.mongodb.ClusterDescription.getShortDescription():::ENTER
===========================================================================
com.mongodb.ClusterDescription.getShortDescription():::EXIT
this.connectionMode == orig(this.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
this.type == orig(this.type)
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.all == orig(this.all)
this.all.getClass().getName() == orig(this.all.getClass().getName())
return != null
return.toString == "{type=Unknown, servers=[{address=localhost:27017, type=Unknown, state=Connecting}]"
===========================================================================
com.mongodb.ClusterDescription.getType():::ENTER
===========================================================================
com.mongodb.ClusterDescription.getType():::EXIT
this.connectionMode == orig(this.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
this.type == orig(this.type)
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.all == orig(this.all)
this.all.getClass().getName() == orig(this.all.getClass().getName())
return has only one value
return != null
===========================================================================
com.mongodb.ClusterDescription.isCompatibleWithDriver():::ENTER
===========================================================================
com.mongodb.ClusterDescription.isCompatibleWithDriver():::EXIT66
===========================================================================
com.mongodb.ClusterDescription.isCompatibleWithDriver():::EXIT66;condition="return == true"
===========================================================================
com.mongodb.ClusterDescription.isCompatibleWithDriver():::EXIT
this.connectionMode == orig(this.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
this.type == orig(this.type)
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.all == orig(this.all)
this.all.getClass().getName() == orig(this.all.getClass().getName())
return == true
===========================================================================
com.mongodb.ClusterDescription.isCompatibleWithDriver():::EXIT;condition="return == true"
===========================================================================
com.mongodb.ClusterDescription.toString():::ENTER
===========================================================================
com.mongodb.ClusterDescription.toString():::EXIT
this.connectionMode == orig(this.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
this.type == orig(this.type)
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.all == orig(this.all)
this.all.getClass().getName() == orig(this.all.getClass().getName())
return != null
return.toString == "ClusterDescription{type=Unknown, connectionMode=Single, all=[ServerDescription{address=localhost:27017, type=Unknown, hosts=[], passives=[], arbiters=[], primary='null', maxDocumentSize=16777216, maxMessageSize=33554432, maxWriteBatchSize=512, tags={}, setName='null', averageLatencyNanos=0, ok=false, state=Connecting, version=ServerVersion{versionList=[0, 0, 0]}, minWireVersion=0, maxWireVersion=0}]}"
===========================================================================
com.mongodb.ClusterDescriptionChangedEvent:::OBJECT
this.clusterDescription != null
this.clusterDescription.connectionMode has only one value
this.clusterDescription.connectionMode != null
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Single != null
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.Multiple != null
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES != null
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[] elements != null
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
this.clusterDescription.type has only one value
this.clusterDescription.type != null
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.StandAlone != null
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.ReplicaSet != null
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Sharded != null
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.Unknown != null
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES != null
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[] elements != null
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
this.clusterDescription.all != null
this.clusterDescription.all.getClass().getName() == java.util.Collections$UnmodifiableSet.class
this.clusterId != null
this.clusterId.toString one of { "1", "2" }
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
===========================================================================
com.mongodb.ClusterDescriptionChangedEvent.ClusterDescriptionChangedEvent(java.lang.String, com.mongodb.ClusterDescription):::ENTER
clusterId != null
clusterId.toString one of { "1", "2" }
clusterDescription != null
clusterDescription.connectionMode has only one value
clusterDescription.connectionMode != null
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Single != null
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.Multiple != null
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES != null
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[] elements != null
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
clusterDescription.type has only one value
clusterDescription.type != null
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.StandAlone != null
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.ReplicaSet != null
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Sharded != null
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.Unknown != null
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES != null
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[] elements != null
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
clusterDescription.all != null
clusterDescription.all.getClass().getName() == java.util.Collections$UnmodifiableSet.class
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
===========================================================================
com.mongodb.ClusterDescriptionChangedEvent.ClusterDescriptionChangedEvent(java.lang.String, com.mongodb.ClusterDescription):::EXIT
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
clusterId.toString == orig(clusterId.toString)
clusterDescription.connectionMode == orig(clusterDescription.connectionMode)
clusterDescription.type == orig(clusterDescription.type)
clusterDescription.all == orig(clusterDescription.all)
clusterDescription.all.getClass().getName() == orig(clusterDescription.all.getClass().getName())
clusterId.toString one of { "1", "2" }
clusterDescription.connectionMode has only one value
clusterDescription.connectionMode != null
clusterDescription.type has only one value
clusterDescription.type != null
clusterDescription.all != null
clusterDescription.all.getClass().getName() == java.util.Collections$UnmodifiableSet.class
===========================================================================
com.mongodb.ClusterEvent:::OBJECT
this.clusterId != null
this.clusterId.toString one of { "1", "2" }
===========================================================================
com.mongodb.ClusterEvent.ClusterEvent(java.lang.String):::ENTER
clusterId != null
clusterId.toString one of { "1", "2" }
===========================================================================
com.mongodb.ClusterEvent.ClusterEvent(java.lang.String):::EXIT
this.clusterId == orig(clusterId)
clusterId.toString == orig(clusterId.toString)
clusterId.toString one of { "1", "2" }
===========================================================================
com.mongodb.ClusterEvent.getClusterId():::ENTER
===========================================================================
com.mongodb.ClusterEvent.getClusterId():::EXIT
this.clusterId == return
this.clusterId.toString == orig(this.clusterId.toString)
return == orig(this.clusterId)
return.toString one of { "1", "2" }
===========================================================================
com.mongodb.ClusterListenerAdapter:::OBJECT
this.getClass().getName() == com.mongodb.NoOpClusterListener.class
===========================================================================
com.mongodb.ClusterListenerAdapter.ClusterListenerAdapter():::EXIT
===========================================================================
com.mongodb.ClusterListenerAdapter.clusterDescriptionChanged(com.mongodb.ClusterDescriptionChangedEvent):::ENTER
event != null
event.clusterDescription != null
event.clusterDescription.connectionMode has only one value
event.clusterDescription.connectionMode != null
event.clusterDescription.type has only one value
event.clusterDescription.type != null
event.clusterDescription.all != null
event.clusterDescription.all.getClass().getName() == java.util.Collections$UnmodifiableSet.class
event.clusterId != null
event.clusterId.toString one of { "1", "2" }
this.getClass().getName() != event.clusterDescription.all.getClass().getName()
===========================================================================
com.mongodb.ClusterListenerAdapter.clusterDescriptionChanged(com.mongodb.ClusterDescriptionChangedEvent):::EXIT
event.clusterDescription == orig(event.clusterDescription)
event.clusterDescription.connectionMode == orig(event.clusterDescription.connectionMode)
event.clusterDescription.type == orig(event.clusterDescription.type)
event.clusterDescription.all == orig(event.clusterDescription.all)
event.clusterDescription.all.getClass().getName() == orig(event.clusterDescription.all.getClass().getName())
event.clusterId == orig(event.clusterId)
event.clusterId.toString == orig(event.clusterId.toString)
event.clusterDescription != null
event.clusterDescription.connectionMode has only one value
event.clusterDescription.connectionMode != null
event.clusterDescription.type has only one value
event.clusterDescription.type != null
event.clusterDescription.all != null
event.clusterDescription.all.getClass().getName() == java.util.Collections$UnmodifiableSet.class
event.clusterId != null
event.clusterId.toString one of { "1", "2" }
event.clusterDescription.all.getClass().getName() != orig(this.getClass().getName())
===========================================================================
com.mongodb.ClusterListenerAdapter.clusterOpened(com.mongodb.ClusterEvent):::ENTER
event.clusterId.toString one of { "1", "2" }
===========================================================================
com.mongodb.ClusterListenerAdapter.clusterOpened(com.mongodb.ClusterEvent):::EXIT
event.clusterId == orig(event.clusterId)
event.clusterId.toString == orig(event.clusterId.toString)
event.clusterId.toString one of { "1", "2" }
===========================================================================
com.mongodb.ClusterSettings$Builder:::OBJECT
this.requiredClusterType == com.mongodb.ClusterType.Unknown
this.hosts[] elements != null
this.hosts[].getClass().getName() == [com.mongodb.ServerAddress]
this.hosts[].getClass().getName() elements == com.mongodb.ServerAddress.class
this.hosts.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.mode != null
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Single != null
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.Multiple != null
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES != null
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[] elements != null
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.StandAlone != null
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.ReplicaSet != null
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Sharded != null
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.Unknown != null
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES != null
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[] elements != null
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
this.requiredReplicaSetName == null
size(this.hosts[]) == 1
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
this.hosts.getClass().getName() != com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName()
this.hosts.getClass().getName() != com.mongodb.ClusterType.$VALUES.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ClusterType.$VALUES.getClass().getName()
===========================================================================
com.mongodb.ClusterSettings$Builder.Builder():::EXIT
this.mode == com.mongodb.ClusterConnectionMode.Multiple
this.hosts == null
===========================================================================
com.mongodb.ClusterSettings$Builder.build():::ENTER
this.mode == com.mongodb.ClusterConnectionMode.Single
===========================================================================
com.mongodb.ClusterSettings$Builder.build():::EXIT
this.hosts == return.hosts
this.hosts == orig(this.hosts)
this.hosts[] == orig(this.hosts[])
this.hosts.getClass().getName() == return.hosts.getClass().getName()
this.hosts.getClass().getName() == orig(this.hosts.getClass().getName())
this.mode == com.mongodb.ClusterConnectionMode.Single
com.mongodb.ClusterConnectionMode.Single == return.mode
com.mongodb.ClusterConnectionMode.Single == orig(this.mode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == return.requiredClusterType
com.mongodb.ClusterType.Unknown == orig(this.requiredClusterType)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.requiredReplicaSetName == orig(this.requiredReplicaSetName)
return.hosts[].getClass().getName() == [com.mongodb.ServerAddress]
return.hosts[].getClass().getName() elements == com.mongodb.ServerAddress.class
return.requiredReplicaSetName == null
size(return.hosts[]) == 1
===========================================================================
com.mongodb.ClusterSettings$Builder.hosts(java.util.List):::ENTER
this.mode == com.mongodb.ClusterConnectionMode.Multiple
this.hosts == null
hosts[].getClass().getName() == [com.mongodb.ServerAddress]
hosts[].getClass().getName() elements == com.mongodb.ServerAddress.class
hosts.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
size(hosts[]) == 1
===========================================================================
com.mongodb.ClusterSettings$Builder.hosts(java.util.List):::EXIT
this.hosts == return.hosts
this.hosts.getClass().getName() == return.hosts.getClass().getName()
this.hosts.getClass().getName() == orig(hosts.getClass().getName())
this.mode == com.mongodb.ClusterConnectionMode.Multiple
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == return.mode
com.mongodb.ClusterConnectionMode.Multiple == orig(this.mode)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == return.requiredClusterType
com.mongodb.ClusterType.Unknown == orig(this.requiredClusterType)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.requiredReplicaSetName == orig(this.requiredReplicaSetName)
hosts[] == orig(hosts[])
return == orig(this)
hosts[].getClass().getName() == [com.mongodb.ServerAddress]
hosts[].getClass().getName() elements == com.mongodb.ServerAddress.class
return.hosts[].getClass().getName() == [com.mongodb.ServerAddress]
return.hosts[].getClass().getName() elements == com.mongodb.ServerAddress.class
return.requiredReplicaSetName == null
size(return.hosts[]) == 1
===========================================================================
com.mongodb.ClusterSettings$Builder.mode(com.mongodb.ClusterConnectionMode):::ENTER
com.mongodb.ClusterConnectionMode.Single == mode
this.mode has only one value
===========================================================================
com.mongodb.ClusterSettings$Builder.mode(com.mongodb.ClusterConnectionMode):::EXIT
this.hosts == return.hosts
this.hosts == orig(this.hosts)
this.hosts[] == orig(this.hosts[])
this.hosts.getClass().getName() == return.hosts.getClass().getName()
this.hosts.getClass().getName() == orig(this.hosts.getClass().getName())
this.mode == com.mongodb.ClusterConnectionMode.Single
com.mongodb.ClusterConnectionMode.Single == return.mode
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Single == orig(mode)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == return.requiredClusterType
com.mongodb.ClusterType.Unknown == orig(this.requiredClusterType)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.requiredReplicaSetName == orig(this.requiredReplicaSetName)
return == orig(this)
return.hosts[].getClass().getName() == [com.mongodb.ServerAddress]
return.hosts[].getClass().getName() elements == com.mongodb.ServerAddress.class
return.requiredReplicaSetName == null
size(return.hosts[]) == 1
===========================================================================
com.mongodb.ClusterSettings$Builder.requiredReplicaSetName(java.lang.String):::ENTER
this.mode == com.mongodb.ClusterConnectionMode.Single
requiredReplicaSetName == null
===========================================================================
com.mongodb.ClusterSettings$Builder.requiredReplicaSetName(java.lang.String):::EXIT
this.hosts == return.hosts
this.hosts == orig(this.hosts)
this.hosts[] == orig(this.hosts[])
this.hosts.getClass().getName() == return.hosts.getClass().getName()
this.hosts.getClass().getName() == orig(this.hosts.getClass().getName())
this.mode == com.mongodb.ClusterConnectionMode.Single
com.mongodb.ClusterConnectionMode.Single == return.mode
com.mongodb.ClusterConnectionMode.Single == orig(this.mode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == return.requiredClusterType
com.mongodb.ClusterType.Unknown == orig(this.requiredClusterType)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.requiredReplicaSetName == orig(this.requiredReplicaSetName)
return == orig(this)
return.hosts[].getClass().getName() == [com.mongodb.ServerAddress]
return.hosts[].getClass().getName() elements == com.mongodb.ServerAddress.class
return.requiredReplicaSetName == null
size(return.hosts[]) == 1
===========================================================================
com.mongodb.ClusterSettings:::OBJECT
this.mode == com.mongodb.ClusterConnectionMode.Single
this.requiredClusterType == com.mongodb.ClusterType.Unknown
this.hosts != null
this.hosts[] elements != null
this.hosts[].getClass().getName() == [com.mongodb.ServerAddress]
this.hosts[].getClass().getName() elements == com.mongodb.ServerAddress.class
this.hosts.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Single != null
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.Multiple != null
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES != null
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[] elements != null
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.StandAlone != null
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.ReplicaSet != null
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Sharded != null
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.Unknown != null
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES != null
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[] elements != null
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
this.requiredReplicaSetName == null
size(this.hosts[]) == 1
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
this.hosts.getClass().getName() != com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName()
this.hosts.getClass().getName() != com.mongodb.ClusterType.$VALUES.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ClusterType.$VALUES.getClass().getName()
===========================================================================
com.mongodb.ClusterSettings.ClusterSettings(com.mongodb.ClusterSettings$Builder):::ENTER
builder.mode == com.mongodb.ClusterConnectionMode.Single
builder.requiredClusterType == com.mongodb.ClusterType.Unknown
builder.hosts[].getClass().getName() == [com.mongodb.ServerAddress]
builder.hosts[].getClass().getName() elements == com.mongodb.ServerAddress.class
builder.hosts.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
builder.requiredReplicaSetName == null
size(builder.hosts[]) == 1
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
===========================================================================
com.mongodb.ClusterSettings.ClusterSettings(com.mongodb.ClusterSettings$Builder):::EXIT
this.hosts == builder.hosts
this.hosts == orig(builder.hosts)
this.hosts.getClass().getName() == builder.hosts.getClass().getName()
this.hosts.getClass().getName() == orig(builder.hosts.getClass().getName())
com.mongodb.ClusterConnectionMode.Single == builder.mode
com.mongodb.ClusterConnectionMode.Single == orig(builder.mode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == builder.requiredClusterType
com.mongodb.ClusterType.Unknown == orig(builder.requiredClusterType)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
builder.hosts[] == orig(builder.hosts[])
builder.requiredReplicaSetName == orig(builder.requiredReplicaSetName)
builder.hosts[].getClass().getName() == [com.mongodb.ServerAddress]
builder.hosts[].getClass().getName() elements == com.mongodb.ServerAddress.class
builder.requiredReplicaSetName == null
size(builder.hosts[]) == 1
===========================================================================
com.mongodb.ClusterSettings.builder():::EXIT
return.mode == com.mongodb.ClusterConnectionMode.Multiple
return.requiredClusterType == com.mongodb.ClusterType.Unknown
return.hosts == null
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
return.requiredReplicaSetName == null
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
===========================================================================
com.mongodb.ClusterSettings.getHosts():::ENTER
===========================================================================
com.mongodb.ClusterSettings.getHosts():::EXIT
this.hosts == return
this.hosts[] == orig(this.hosts[])
this.hosts.getClass().getName() == return.getClass().getName()
com.mongodb.ClusterConnectionMode.Single == orig(this.mode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(this.requiredClusterType)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.requiredReplicaSetName == orig(this.requiredReplicaSetName)
return == orig(this.hosts)
return.getClass().getName() == orig(this.hosts.getClass().getName())
return[].getClass().getName() == [com.mongodb.ServerAddress]
return[].getClass().getName() elements == com.mongodb.ServerAddress.class
return.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
size(return[]) == 1
===========================================================================
com.mongodb.ClusterSettings.getMode():::ENTER
===========================================================================
com.mongodb.ClusterSettings.getMode():::EXIT
this.hosts == orig(this.hosts)
this.hosts[] == orig(this.hosts[])
this.hosts.getClass().getName() == orig(this.hosts.getClass().getName())
com.mongodb.ClusterConnectionMode.Single == return
com.mongodb.ClusterConnectionMode.Single == orig(this.mode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(this.requiredClusterType)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.requiredReplicaSetName == orig(this.requiredReplicaSetName)
===========================================================================
com.mongodb.ClusterSettings.getRequiredClusterType():::ENTER
===========================================================================
com.mongodb.ClusterSettings.getRequiredClusterType():::EXIT
this.hosts == orig(this.hosts)
this.hosts[] == orig(this.hosts[])
this.hosts.getClass().getName() == orig(this.hosts.getClass().getName())
com.mongodb.ClusterConnectionMode.Single == orig(this.mode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == return
com.mongodb.ClusterType.Unknown == orig(this.requiredClusterType)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.requiredReplicaSetName == orig(this.requiredReplicaSetName)
===========================================================================
com.mongodb.ClusterSettings.getShortDescription():::ENTER
===========================================================================
com.mongodb.ClusterSettings.getShortDescription():::EXIT
this.hosts == orig(this.hosts)
this.hosts[] == orig(this.hosts[])
this.hosts.getClass().getName() == orig(this.hosts.getClass().getName())
com.mongodb.ClusterConnectionMode.Single == orig(this.mode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(this.requiredClusterType)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.requiredReplicaSetName == orig(this.requiredReplicaSetName)
return.toString == "{hosts=[localhost:27017], mode=Single, requiredClusterType=Unknown}"
===========================================================================
com.mongodb.ClusterType:::OBJECT
===========================================================================
com.mongodb.ClusterType.ClusterType(java.lang.String, int):::ENTER
===========================================================================
com.mongodb.ClusterType.ClusterType(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
com.mongodb.Clusters.create(java.lang.String, com.mongodb.ClusterSettings, com.mongodb.ServerSettings, com.mongodb.ClusterListener, com.mongodb.Mongo):::ENTER
settings.mode == com.mongodb.ClusterConnectionMode.Single
com.mongodb.ClusterConnectionMode.Single == mongo._connector.connectionMode
settings.requiredClusterType == com.mongodb.ClusterType.Unknown
com.mongodb.ClusterType.Unknown == mongo._connector.type
serverSettings.heartbeatFrequencyMS == mongo._options.heartbeatFrequencyMS
serverSettings.heartbeatConnectRetryFrequencyMS == mongo._options.connectionsPerHost
serverSettings.heartbeatConnectRetryFrequencyMS == mongo._options.heartbeatConnectRetryFrequencyMS
serverSettings.heartbeatSocketSettings.connectTimeoutMS == serverSettings.heartbeatSocketSettings.readTimeoutMS
serverSettings.heartbeatSocketSettings.connectTimeoutMS == mongo._options.heartbeatConnectTimeoutMS
serverSettings.heartbeatSocketSettings.connectTimeoutMS == mongo._options.heartbeatReadTimeoutMS
serverSettings.heartbeatSocketSettings.socketFactory == mongo._options.socketFactory
serverSettings.heartbeatSocketSettings.socketFactory.getClass().getName() == mongo._options.socketFactory.getClass().getName()
mongo == mongo._connector._mongo
mongo._options.fsync == mongo._options.j
mongo._concern == com.mongodb.WriteConcern.NORMAL
mongo._readPref == com.mongodb.ReadPreference.PRIMARY
mongo._readPref.getClass().getName() == com.mongodb.ReadPreference.PRIMARY.getClass().getName()
com.mongodb.ReadPreference.PRIMARY == com.mongodb.ReadPreference._PRIMARY
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference._PRIMARY.getClass().getName()
com.mongodb.ReadPreference.SECONDARY == com.mongodb.ReadPreference._SECONDARY_PREFERRED
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName()
clusterId.toString one of { "1", "2" }
settings.hosts[].getClass().getName() == [com.mongodb.ServerAddress]
settings.hosts[].getClass().getName() elements == com.mongodb.ServerAddress.class
settings.hosts.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
settings.requiredReplicaSetName == null
serverSettings.heartbeatFrequencyMS == 5000
serverSettings.heartbeatConnectRetryFrequencyMS == 10
serverSettings.heartbeatSocketSettings.connectTimeoutMS == 20000
serverSettings.heartbeatSocketSettings.socketFactory has only one value
serverSettings.heartbeatSocketSettings.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
clusterListener == null
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
mongo._options.description == null
mongo._options.threadsAllowedToBlockForConnectionMultiplier == 5
mongo._options.maxWaitTime == 120000
mongo._options.connectTimeout == 10000
mongo._options.socketTimeout == 0
mongo._options.socketKeepAlive == false
mongo._options.autoConnectRetry == false
mongo._options.maxAutoConnectRetryTime == 0
mongo._options.slaveOk == false
mongo._options.readPreference == null
mongo._options.dbDecoderFactory has only one value
mongo._options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
mongo._options.dbEncoderFactory has only one value
mongo._options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
mongo._options.safe == false
mongo._options.w == 0
mongo._options.wtimeout == 0
mongo._options.fsync == false
mongo._options.cursorFinalizerEnabled == true
mongo._options.writeConcern == null
mongo._options.alwaysUseMBeans == false
mongo._options.minConnectionsPerHost == 0
mongo._options.maxConnectionIdleTime == 0
mongo._options.maxConnectionLifeTime == 0
mongo._options.acceptableLatencyDifferenceMS == 15
mongo._options.heartbeatThreadCount == 0
mongo._options.requiredReplicaSetName == null
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID has only one value
mongo._connector._closed == false
mongo._connector.cluster == null
mongo._connector.mongosHAServerSelector == null
mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
mongo._concern._w has only one value
mongo._concern._w.getClass().getName() == java.lang.Integer.class
mongo._concern._wtimeout == 0
mongo._concern._fsync == false
mongo._concern._j == false
mongo._concern._continueOnError == false
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
mongo._netOptions._parent == null
mongo._netOptions._options == 0
mongo._netOptions._hasOptions == false
mongo._cleaner == null
mongo._authority.type has only one value
mongo._authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
mongo._authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
mongo._authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
mongo._bufferPool._max == 1000
mongo._bufferPool._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
size(settings.hosts[]) == 1
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
size(mongo._authority.serverAddresses[]) == 1
===========================================================================
com.mongodb.Clusters.create(java.lang.String, com.mongodb.ClusterSettings, com.mongodb.ServerSettings, com.mongodb.ClusterListener, com.mongodb.Mongo):::EXIT32
===========================================================================
com.mongodb.Clusters.create(java.lang.String, com.mongodb.ClusterSettings, com.mongodb.ServerSettings, com.mongodb.ClusterListener, com.mongodb.Mongo):::EXIT
clusterId.toString == orig(clusterId.toString)
settings.hosts == orig(settings.hosts)
settings.hosts[] == orig(settings.hosts[])
settings.hosts.getClass().getName() == orig(settings.hosts.getClass().getName())
settings.mode == com.mongodb.ClusterConnectionMode.Single
com.mongodb.ClusterConnectionMode.Single == mongo._connector.connectionMode
com.mongodb.ClusterConnectionMode.Single == orig(settings.mode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Single == orig(mongo._connector.connectionMode)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
settings.requiredClusterType == com.mongodb.ClusterType.Unknown
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == mongo._connector.type
com.mongodb.ClusterType.Unknown == orig(settings.requiredClusterType)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.Unknown == orig(mongo._connector.type)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
settings.requiredReplicaSetName == orig(settings.requiredReplicaSetName)
serverSettings.heartbeatFrequencyMS == mongo._options.heartbeatFrequencyMS
serverSettings.heartbeatFrequencyMS == orig(serverSettings.heartbeatFrequencyMS)
serverSettings.heartbeatFrequencyMS == orig(mongo._options.heartbeatFrequencyMS)
serverSettings.heartbeatConnectRetryFrequencyMS == mongo._options.connectionsPerHost
serverSettings.heartbeatConnectRetryFrequencyMS == mongo._options.heartbeatConnectRetryFrequencyMS
serverSettings.heartbeatConnectRetryFrequencyMS == orig(serverSettings.heartbeatConnectRetryFrequencyMS)
serverSettings.heartbeatConnectRetryFrequencyMS == orig(mongo._options.connectionsPerHost)
serverSettings.heartbeatConnectRetryFrequencyMS == orig(mongo._options.heartbeatConnectRetryFrequencyMS)
serverSettings.heartbeatSocketSettings == orig(serverSettings.heartbeatSocketSettings)
serverSettings.heartbeatSocketSettings.connectTimeoutMS == serverSettings.heartbeatSocketSettings.readTimeoutMS
serverSettings.heartbeatSocketSettings.connectTimeoutMS == mongo._options.heartbeatConnectTimeoutMS
serverSettings.heartbeatSocketSettings.connectTimeoutMS == mongo._options.heartbeatReadTimeoutMS
serverSettings.heartbeatSocketSettings.connectTimeoutMS == orig(serverSettings.heartbeatSocketSettings.connectTimeoutMS)
serverSettings.heartbeatSocketSettings.connectTimeoutMS == orig(serverSettings.heartbeatSocketSettings.readTimeoutMS)
serverSettings.heartbeatSocketSettings.connectTimeoutMS == orig(mongo._options.heartbeatConnectTimeoutMS)
serverSettings.heartbeatSocketSettings.connectTimeoutMS == orig(mongo._options.heartbeatReadTimeoutMS)
serverSettings.heartbeatSocketSettings.socketFactory == mongo._options.socketFactory
serverSettings.heartbeatSocketSettings.socketFactory == orig(serverSettings.heartbeatSocketSettings.socketFactory)
serverSettings.heartbeatSocketSettings.socketFactory == orig(mongo._options.socketFactory)
serverSettings.heartbeatSocketSettings.socketFactory.getClass().getName() == mongo._options.socketFactory.getClass().getName()
serverSettings.heartbeatSocketSettings.socketFactory.getClass().getName() == orig(serverSettings.heartbeatSocketSettings.socketFactory.getClass().getName())
serverSettings.heartbeatSocketSettings.socketFactory.getClass().getName() == orig(mongo._options.socketFactory.getClass().getName())
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
mongo._options == orig(mongo._options)
mongo._options.description == orig(mongo._options.description)
mongo._options.threadsAllowedToBlockForConnectionMultiplier == orig(mongo._options.threadsAllowedToBlockForConnectionMultiplier)
mongo._options.maxWaitTime == orig(mongo._options.maxWaitTime)
mongo._options.connectTimeout == orig(mongo._options.connectTimeout)
mongo._options.socketTimeout == orig(mongo._options.socketTimeout)
mongo._options.socketKeepAlive == orig(mongo._options.socketKeepAlive)
mongo._options.autoConnectRetry == orig(mongo._options.autoConnectRetry)
mongo._options.maxAutoConnectRetryTime == orig(mongo._options.maxAutoConnectRetryTime)
mongo._options.slaveOk == orig(mongo._options.slaveOk)
mongo._options.readPreference == orig(mongo._options.readPreference)
mongo._options.dbDecoderFactory == orig(mongo._options.dbDecoderFactory)
mongo._options.dbDecoderFactory.getClass().getName() == orig(mongo._options.dbDecoderFactory.getClass().getName())
mongo._options.dbEncoderFactory == orig(mongo._options.dbEncoderFactory)
mongo._options.dbEncoderFactory.getClass().getName() == orig(mongo._options.dbEncoderFactory.getClass().getName())
mongo._options.safe == orig(mongo._options.safe)
mongo._options.w == orig(mongo._options.w)
mongo._options.wtimeout == orig(mongo._options.wtimeout)
mongo._options.fsync == mongo._options.j
mongo._options.fsync == orig(mongo._options.fsync)
mongo._options.fsync == orig(mongo._options.j)
mongo._options.cursorFinalizerEnabled == orig(mongo._options.cursorFinalizerEnabled)
mongo._options.writeConcern == orig(mongo._options.writeConcern)
mongo._options.alwaysUseMBeans == orig(mongo._options.alwaysUseMBeans)
mongo._options.minConnectionsPerHost == orig(mongo._options.minConnectionsPerHost)
mongo._options.maxConnectionIdleTime == orig(mongo._options.maxConnectionIdleTime)
mongo._options.maxConnectionLifeTime == orig(mongo._options.maxConnectionLifeTime)
mongo._options.acceptableLatencyDifferenceMS == orig(mongo._options.acceptableLatencyDifferenceMS)
mongo._options.heartbeatThreadCount == orig(mongo._options.heartbeatThreadCount)
mongo._options.requiredReplicaSetName == orig(mongo._options.requiredReplicaSetName)
mongo._connector == orig(mongo._connector)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
mongo._connector._closed == orig(mongo._connector._closed)
mongo._connector._mongo == orig(mongo)
mongo._connector.cluster == orig(mongo._connector.cluster)
mongo._connector._myPort == orig(mongo._connector._myPort)
mongo._connector.mongosHAServerSelector == orig(mongo._connector.mongosHAServerSelector)
mongo._dbs == orig(mongo._dbs)
mongo._dbs.getClass().getName() == orig(mongo._dbs.getClass().getName())
mongo._concern == com.mongodb.WriteConcern.NORMAL
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(mongo._concern)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
mongo._concern._w == orig(mongo._concern._w)
mongo._concern._w.getClass().getName() == orig(mongo._concern._w.getClass().getName())
mongo._concern._wtimeout == orig(mongo._concern._wtimeout)
mongo._concern._fsync == orig(mongo._concern._fsync)
mongo._concern._j == orig(mongo._concern._j)
mongo._concern._continueOnError == orig(mongo._concern._continueOnError)
mongo._readPref == com.mongodb.ReadPreference.PRIMARY
mongo._readPref.getClass().getName() == com.mongodb.ReadPreference.PRIMARY.getClass().getName()
com.mongodb.ReadPreference.PRIMARY == com.mongodb.ReadPreference._PRIMARY
com.mongodb.ReadPreference.PRIMARY == orig(mongo._readPref)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference._PRIMARY.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(mongo._readPref.getClass().getName())
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == com.mongodb.ReadPreference._SECONDARY_PREFERRED
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
mongo._netOptions == orig(mongo._netOptions)
mongo._netOptions._parent == orig(mongo._netOptions._parent)
mongo._netOptions._options == orig(mongo._netOptions._options)
mongo._netOptions._hasOptions == orig(mongo._netOptions._hasOptions)
mongo._cleaner == orig(mongo._cleaner)
mongo._authority == orig(mongo._authority)
mongo._authority.type == orig(mongo._authority.type)
mongo._authority.serverAddresses == orig(mongo._authority.serverAddresses)
mongo._authority.serverAddresses[] == orig(mongo._authority.serverAddresses[])
mongo._authority.serverAddresses.getClass().getName() == orig(mongo._authority.serverAddresses.getClass().getName())
mongo._authority.credentialsStore == orig(mongo._authority.credentialsStore)
mongo._bufferPool == orig(mongo._bufferPool)
mongo._bufferPool.getClass().getName() == orig(mongo._bufferPool.getClass().getName())
mongo._bufferPool._max == orig(mongo._bufferPool._max)
mongo._bufferPool._stored == orig(mongo._bufferPool._stored)
mongo._bufferPool._stored.getClass().getName() == orig(mongo._bufferPool._stored.getClass().getName())
clusterId.toString one of { "1", "2" }
settings.hosts[].getClass().getName() == [com.mongodb.ServerAddress]
settings.hosts[].getClass().getName() elements == com.mongodb.ServerAddress.class
settings.hosts.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
settings.requiredReplicaSetName == null
serverSettings.heartbeatFrequencyMS == 5000
serverSettings.heartbeatConnectRetryFrequencyMS == 10
serverSettings.heartbeatSocketSettings.connectTimeoutMS == 20000
serverSettings.heartbeatSocketSettings.socketFactory has only one value
serverSettings.heartbeatSocketSettings.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
mongo._options.description == null
mongo._options.threadsAllowedToBlockForConnectionMultiplier == 5
mongo._options.maxWaitTime == 120000
mongo._options.connectTimeout == 10000
mongo._options.socketTimeout == 0
mongo._options.socketKeepAlive == false
mongo._options.autoConnectRetry == false
mongo._options.maxAutoConnectRetryTime == 0
mongo._options.slaveOk == false
mongo._options.readPreference == null
mongo._options.dbDecoderFactory has only one value
mongo._options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
mongo._options.dbEncoderFactory has only one value
mongo._options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
mongo._options.safe == false
mongo._options.w == 0
mongo._options.wtimeout == 0
mongo._options.fsync == false
mongo._options.cursorFinalizerEnabled == true
mongo._options.writeConcern == null
mongo._options.alwaysUseMBeans == false
mongo._options.minConnectionsPerHost == 0
mongo._options.maxConnectionIdleTime == 0
mongo._options.maxConnectionLifeTime == 0
mongo._options.acceptableLatencyDifferenceMS == 15
mongo._options.heartbeatThreadCount == 0
mongo._options.requiredReplicaSetName == null
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID has only one value
mongo._connector._closed == false
mongo._connector.cluster == null
mongo._connector.mongosHAServerSelector == null
mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
mongo._concern._w has only one value
mongo._concern._w.getClass().getName() == java.lang.Integer.class
mongo._concern._wtimeout == 0
mongo._concern._fsync == false
mongo._concern._j == false
mongo._concern._continueOnError == false
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
mongo._netOptions._parent == null
mongo._netOptions._options == 0
mongo._netOptions._hasOptions == false
mongo._cleaner == null
mongo._authority.type has only one value
mongo._authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
mongo._authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
mongo._authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
mongo._bufferPool._max == 1000
mongo._bufferPool._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
return.getClass().getName() == com.mongodb.SingleServerCluster.class
size(settings.hosts[]) == 1
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
size(mongo._authority.serverAddresses[]) == 1
===========================================================================
com.mongodb.ConcurrentLinkedDeque$Node:::OBJECT
this.prev.prev == null
this.prev.element == null
this.element == null
===========================================================================
com.mongodb.ConcurrentLinkedDeque$Node.Node(java.lang.Object, com.mongodb.ConcurrentLinkedDeque$Node, com.mongodb.ConcurrentLinkedDeque$Node):::ENTER
element == null
next == null
prev.prev == null
prev.element == null
===========================================================================
com.mongodb.ConcurrentLinkedDeque$Node.Node(java.lang.Object, com.mongodb.ConcurrentLinkedDeque$Node, com.mongodb.ConcurrentLinkedDeque$Node):::EXIT
prev.prev == orig(prev.prev)
prev.element == orig(prev.element)
prev.prev == null
prev.element == null
===========================================================================
com.mongodb.ConcurrentLinkedDeque$Node.setNext(com.mongodb.ConcurrentLinkedDeque$Node):::ENTER
this.prev == null
n.prev.prev == null
n.prev.element == null
n.element == null
===========================================================================
com.mongodb.ConcurrentLinkedDeque$Node.setNext(com.mongodb.ConcurrentLinkedDeque$Node):::EXIT
this.prev == orig(this.prev)
this.element == orig(this.element)
n.prev == orig(n.prev)
n.prev.prev == orig(n.prev.prev)
n.prev.element == orig(n.prev.element)
n.element == orig(n.element)
this.prev == null
n.prev.prev == null
n.prev.element == null
n.element == null
===========================================================================
com.mongodb.ConcurrentLinkedDeque:::CLASS
===========================================================================
com.mongodb.ConcurrentLinkedDeque:::OBJECT
this.header == this.trailer.prev
this.header.prev == null
this.header.element == null
this.trailer.prev.prev == null
this.trailer.prev.element == null
this.trailer.element == null
===========================================================================
com.mongodb.ConcurrentLinkedDeque.ConcurrentLinkedDeque():::EXIT
===========================================================================
com.mongodb.ConcurrentPool:::OBJECT
this.maxSize == 10
this.itemFactory.getClass().getName() == com.mongodb.PooledConnectionProvider$ConnectionItemFactory.class
this.available.getClass().getName() == com.mongodb.ConcurrentLinkedDeque.class
this.closed == false
===========================================================================
com.mongodb.ConcurrentPool.ConcurrentPool(int, com.mongodb.ConcurrentPool$ItemFactory):::ENTER
maxSize == 10
itemFactory.getClass().getName() == com.mongodb.PooledConnectionProvider$ConnectionItemFactory.class
===========================================================================
com.mongodb.ConcurrentPool.ConcurrentPool(int, com.mongodb.ConcurrentPool$ItemFactory):::EXIT
===========================================================================
com.mongodb.ConnectionPoolEvent:::OBJECT
this.serverAddress != null
this.serverAddress._host has only one value
this.serverAddress._host != null
this.serverAddress._host.toString == "localhost"
this.serverAddress._port == 27017
this.clusterId != null
this.clusterId.toString one of { "1", "2" }
===========================================================================
com.mongodb.ConnectionPoolEvent.ConnectionPoolEvent(java.lang.String, com.mongodb.ServerAddress):::ENTER
clusterId.toString one of { "1", "2" }
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
===========================================================================
com.mongodb.ConnectionPoolEvent.ConnectionPoolEvent(java.lang.String, com.mongodb.ServerAddress):::EXIT
clusterId.toString == orig(clusterId.toString)
serverAddress._host == orig(serverAddress._host)
serverAddress._host.toString == orig(serverAddress._host.toString)
serverAddress._port == orig(serverAddress._port)
clusterId.toString one of { "1", "2" }
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
===========================================================================
com.mongodb.ConnectionPoolEvent.getServerAddress():::ENTER
===========================================================================
com.mongodb.ConnectionPoolEvent.getServerAddress():::EXIT
this.serverAddress == orig(this.serverAddress)
this.serverAddress._host == orig(this.serverAddress._host)
this.serverAddress._host.toString == orig(this.serverAddress._host.toString)
this.serverAddress._port == orig(this.serverAddress._port)
this.clusterId == orig(this.clusterId)
this.clusterId.toString == orig(this.clusterId.toString)
return._host has only one value
return._host.toString == "localhost"
return._port == 27017
===========================================================================
com.mongodb.ConnectionPoolListenerAdapter:::OBJECT
this.getClass().getName() == com.mongodb.ConnectionPoolStatistics.class
===========================================================================
com.mongodb.ConnectionPoolListenerAdapter.ConnectionPoolListenerAdapter():::EXIT
===========================================================================
com.mongodb.ConnectionPoolOpenedEvent:::OBJECT
this.settings.maxSize == 10
this.settings.minSize == 0
this.settings.maxWaitQueueSize == 50
this.settings.maxWaitTimeMS == 120000
this.settings.maxConnectionLifeTimeMS == 0
this.settings.maxConnectionIdleTimeMS == 0
this.settings.maintenanceInitialDelayMS == 0
this.settings.maintenanceFrequencyMS == 60000
this.serverAddress._host has only one value
this.serverAddress._host.toString == "localhost"
this.serverAddress._port == 27017
this.clusterId.toString one of { "1", "2" }
===========================================================================
com.mongodb.ConnectionPoolOpenedEvent.ConnectionPoolOpenedEvent(java.lang.String, com.mongodb.ServerAddress, com.mongodb.ConnectionPoolSettings):::ENTER
clusterId.toString one of { "1", "2" }
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
settings.maxSize == 10
settings.minSize == 0
settings.maxWaitQueueSize == 50
settings.maxWaitTimeMS == 120000
settings.maxConnectionLifeTimeMS == 0
settings.maxConnectionIdleTimeMS == 0
settings.maintenanceInitialDelayMS == 0
settings.maintenanceFrequencyMS == 60000
===========================================================================
com.mongodb.ConnectionPoolOpenedEvent.ConnectionPoolOpenedEvent(java.lang.String, com.mongodb.ServerAddress, com.mongodb.ConnectionPoolSettings):::EXIT
clusterId.toString == orig(clusterId.toString)
serverAddress._host == orig(serverAddress._host)
serverAddress._host.toString == orig(serverAddress._host.toString)
serverAddress._port == orig(serverAddress._port)
settings.maxSize == orig(settings.maxSize)
settings.minSize == orig(settings.minSize)
settings.maxWaitQueueSize == orig(settings.maxWaitQueueSize)
settings.maxWaitTimeMS == orig(settings.maxWaitTimeMS)
settings.maxConnectionLifeTimeMS == orig(settings.maxConnectionLifeTimeMS)
settings.maxConnectionIdleTimeMS == orig(settings.maxConnectionIdleTimeMS)
settings.maintenanceInitialDelayMS == orig(settings.maintenanceInitialDelayMS)
settings.maintenanceFrequencyMS == orig(settings.maintenanceFrequencyMS)
clusterId.toString one of { "1", "2" }
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
settings.maxSize == 10
settings.minSize == 0
settings.maxWaitQueueSize == 50
settings.maxWaitTimeMS == 120000
settings.maxConnectionLifeTimeMS == 0
settings.maxConnectionIdleTimeMS == 0
settings.maintenanceInitialDelayMS == 0
settings.maintenanceFrequencyMS == 60000
===========================================================================
com.mongodb.ConnectionPoolOpenedEvent.getSettings():::ENTER
===========================================================================
com.mongodb.ConnectionPoolOpenedEvent.getSettings():::EXIT
this.settings == orig(this.settings)
this.settings.maxSize == orig(this.settings.maxSize)
this.settings.minSize == orig(this.settings.minSize)
this.settings.maxWaitQueueSize == orig(this.settings.maxWaitQueueSize)
this.settings.maxWaitTimeMS == orig(this.settings.maxWaitTimeMS)
this.settings.maxConnectionLifeTimeMS == orig(this.settings.maxConnectionLifeTimeMS)
this.settings.maxConnectionIdleTimeMS == orig(this.settings.maxConnectionIdleTimeMS)
this.settings.maintenanceInitialDelayMS == orig(this.settings.maintenanceInitialDelayMS)
this.settings.maintenanceFrequencyMS == orig(this.settings.maintenanceFrequencyMS)
this.serverAddress == orig(this.serverAddress)
this.serverAddress._host == orig(this.serverAddress._host)
this.serverAddress._host.toString == orig(this.serverAddress._host.toString)
this.serverAddress._port == orig(this.serverAddress._port)
this.clusterId == orig(this.clusterId)
this.clusterId.toString == orig(this.clusterId.toString)
return.maxSize == 10
return.minSize == 0
return.maxWaitQueueSize == 50
return.maxWaitTimeMS == 120000
return.maxConnectionLifeTimeMS == 0
return.maxConnectionIdleTimeMS == 0
return.maintenanceInitialDelayMS == 0
return.maintenanceFrequencyMS == 60000
===========================================================================
com.mongodb.ConnectionPoolSettings$Builder:::OBJECT
this.maxSize one of { 0, 10 }
this.minSize == 0
this.maxWaitQueueSize one of { 0, 50 }
this.maxWaitTimeMS one of { 0, 120000 }
this.maxConnectionLifeTimeMS == 0
this.maxConnectionIdleTimeMS == 0
this.maintenanceInitialDelayMS == 0
this.maintenanceFrequencyMS == 60000
===========================================================================
com.mongodb.ConnectionPoolSettings$Builder.Builder():::EXIT
this.maxSize == 0
this.maxWaitQueueSize == 0
this.maxWaitTimeMS == 0
===========================================================================
com.mongodb.ConnectionPoolSettings$Builder.build():::ENTER
this.maxSize == 10
this.maxWaitQueueSize == 50
this.maxWaitTimeMS == 120000
===========================================================================
com.mongodb.ConnectionPoolSettings$Builder.build():::EXIT
this.maxSize == orig(this.maxSize)
this.minSize == orig(this.minSize)
this.maxWaitQueueSize == orig(this.maxWaitQueueSize)
this.maxWaitTimeMS == orig(this.maxWaitTimeMS)
this.maxConnectionLifeTimeMS == orig(this.maxConnectionLifeTimeMS)
this.maxConnectionIdleTimeMS == orig(this.maxConnectionIdleTimeMS)
this.maintenanceInitialDelayMS == orig(this.maintenanceInitialDelayMS)
this.maintenanceFrequencyMS == orig(this.maintenanceFrequencyMS)
this.maxSize == 10
this.maxWaitQueueSize == 50
this.maxWaitTimeMS == 120000
return.maxSize == 10
return.minSize == 0
return.maxWaitQueueSize == 50
return.maxWaitTimeMS == 120000
return.maxConnectionLifeTimeMS == 0
return.maxConnectionIdleTimeMS == 0
return.maintenanceInitialDelayMS == 0
return.maintenanceFrequencyMS == 60000
===========================================================================
com.mongodb.ConnectionPoolSettings$Builder.maxConnectionIdleTime(long, java.util.concurrent.TimeUnit):::ENTER
this.maxSize == 10
this.maxWaitQueueSize == 0
this.maxWaitTimeMS == 0
maxConnectionIdleTime == 0
timeUnit has only one value
===========================================================================
com.mongodb.ConnectionPoolSettings$Builder.maxConnectionIdleTime(long, java.util.concurrent.TimeUnit):::EXIT
this.maxSize == orig(this.maxSize)
this.minSize == orig(this.minSize)
this.maxWaitQueueSize == orig(this.maxWaitQueueSize)
this.maxWaitTimeMS == orig(this.maxWaitTimeMS)
this.maxConnectionLifeTimeMS == orig(this.maxConnectionLifeTimeMS)
this.maxConnectionIdleTimeMS == orig(this.maxConnectionIdleTimeMS)
this.maintenanceInitialDelayMS == orig(this.maintenanceInitialDelayMS)
this.maintenanceFrequencyMS == orig(this.maintenanceFrequencyMS)
this.maxSize == 10
this.maxWaitQueueSize == 0
this.maxWaitTimeMS == 0
return.maxSize == 10
return.minSize == 0
return.maxWaitQueueSize == 0
return.maxWaitTimeMS == 0
return.maxConnectionLifeTimeMS == 0
return.maxConnectionIdleTimeMS == 0
return.maintenanceInitialDelayMS == 0
return.maintenanceFrequencyMS == 60000
===========================================================================
com.mongodb.ConnectionPoolSettings$Builder.maxConnectionLifeTime(long, java.util.concurrent.TimeUnit):::ENTER
this.maxSize == 10
this.maxWaitQueueSize == 0
this.maxWaitTimeMS == 0
maxConnectionLifeTime == 0
timeUnit has only one value
===========================================================================
com.mongodb.ConnectionPoolSettings$Builder.maxConnectionLifeTime(long, java.util.concurrent.TimeUnit):::EXIT
this.maxSize == orig(this.maxSize)
this.minSize == orig(this.minSize)
this.maxWaitQueueSize == orig(this.maxWaitQueueSize)
this.maxWaitTimeMS == orig(this.maxWaitTimeMS)
this.maxConnectionLifeTimeMS == orig(this.maxConnectionLifeTimeMS)
this.maxConnectionIdleTimeMS == orig(this.maxConnectionIdleTimeMS)
this.maintenanceInitialDelayMS == orig(this.maintenanceInitialDelayMS)
this.maintenanceFrequencyMS == orig(this.maintenanceFrequencyMS)
this.maxSize == 10
this.maxWaitQueueSize == 0
this.maxWaitTimeMS == 0
return.maxSize == 10
return.minSize == 0
return.maxWaitQueueSize == 0
return.maxWaitTimeMS == 0
return.maxConnectionLifeTimeMS == 0
return.maxConnectionIdleTimeMS == 0
return.maintenanceInitialDelayMS == 0
return.maintenanceFrequencyMS == 60000
===========================================================================
com.mongodb.ConnectionPoolSettings$Builder.maxSize(int):::ENTER
this.maxSize == 0
this.maxWaitQueueSize == 0
this.maxWaitTimeMS == 0
maxSize == 10
===========================================================================
com.mongodb.ConnectionPoolSettings$Builder.maxSize(int):::EXIT
this.minSize == orig(this.minSize)
this.maxWaitQueueSize == orig(this.maxWaitQueueSize)
this.maxWaitTimeMS == orig(this.maxWaitTimeMS)
this.maxConnectionLifeTimeMS == orig(this.maxConnectionLifeTimeMS)
this.maxConnectionIdleTimeMS == orig(this.maxConnectionIdleTimeMS)
this.maintenanceInitialDelayMS == orig(this.maintenanceInitialDelayMS)
this.maintenanceFrequencyMS == orig(this.maintenanceFrequencyMS)
this.maxSize == 10
this.maxWaitQueueSize == 0
this.maxWaitTimeMS == 0
return.maxSize == 10
return.minSize == 0
return.maxWaitQueueSize == 0
return.maxWaitTimeMS == 0
return.maxConnectionLifeTimeMS == 0
return.maxConnectionIdleTimeMS == 0
return.maintenanceInitialDelayMS == 0
return.maintenanceFrequencyMS == 60000
===========================================================================
com.mongodb.ConnectionPoolSettings$Builder.maxWaitQueueSize(int):::ENTER
this.maxSize == 10
this.maxWaitQueueSize == 0
this.maxWaitTimeMS == 0
maxWaitQueueSize == 50
===========================================================================
com.mongodb.ConnectionPoolSettings$Builder.maxWaitQueueSize(int):::EXIT
this.maxSize == orig(this.maxSize)
this.minSize == orig(this.minSize)
this.maxWaitTimeMS == orig(this.maxWaitTimeMS)
this.maxConnectionLifeTimeMS == orig(this.maxConnectionLifeTimeMS)
this.maxConnectionIdleTimeMS == orig(this.maxConnectionIdleTimeMS)
this.maintenanceInitialDelayMS == orig(this.maintenanceInitialDelayMS)
this.maintenanceFrequencyMS == orig(this.maintenanceFrequencyMS)
this.maxSize == 10
this.maxWaitQueueSize == 50
this.maxWaitTimeMS == 0
return.maxSize == 10
return.minSize == 0
return.maxWaitQueueSize == 50
return.maxWaitTimeMS == 0
return.maxConnectionLifeTimeMS == 0
return.maxConnectionIdleTimeMS == 0
return.maintenanceInitialDelayMS == 0
return.maintenanceFrequencyMS == 60000
===========================================================================
com.mongodb.ConnectionPoolSettings$Builder.maxWaitTime(long, java.util.concurrent.TimeUnit):::ENTER
this.maxSize == 10
this.maxWaitQueueSize == 50
this.maxWaitTimeMS == 0
maxWaitTime == 120000
timeUnit has only one value
===========================================================================
com.mongodb.ConnectionPoolSettings$Builder.maxWaitTime(long, java.util.concurrent.TimeUnit):::EXIT
this.maxSize == orig(this.maxSize)
this.minSize == orig(this.minSize)
this.maxWaitQueueSize == orig(this.maxWaitQueueSize)
this.maxConnectionLifeTimeMS == orig(this.maxConnectionLifeTimeMS)
this.maxConnectionIdleTimeMS == orig(this.maxConnectionIdleTimeMS)
this.maintenanceInitialDelayMS == orig(this.maintenanceInitialDelayMS)
this.maintenanceFrequencyMS == orig(this.maintenanceFrequencyMS)
this.maxSize == 10
this.maxWaitQueueSize == 50
this.maxWaitTimeMS == 120000
return.maxSize == 10
return.minSize == 0
return.maxWaitQueueSize == 50
return.maxWaitTimeMS == 120000
return.maxConnectionLifeTimeMS == 0
return.maxConnectionIdleTimeMS == 0
return.maintenanceInitialDelayMS == 0
return.maintenanceFrequencyMS == 60000
===========================================================================
com.mongodb.ConnectionPoolSettings$Builder.minSize(int):::ENTER
this.maxSize == 0
this.maxWaitQueueSize == 0
this.maxWaitTimeMS == 0
minSize == 0
===========================================================================
com.mongodb.ConnectionPoolSettings$Builder.minSize(int):::EXIT
this.maxSize == orig(this.maxSize)
this.minSize == orig(this.minSize)
this.maxWaitQueueSize == orig(this.maxWaitQueueSize)
this.maxWaitTimeMS == orig(this.maxWaitTimeMS)
this.maxConnectionLifeTimeMS == orig(this.maxConnectionLifeTimeMS)
this.maxConnectionIdleTimeMS == orig(this.maxConnectionIdleTimeMS)
this.maintenanceInitialDelayMS == orig(this.maintenanceInitialDelayMS)
this.maintenanceFrequencyMS == orig(this.maintenanceFrequencyMS)
this.maxSize == 0
this.maxWaitQueueSize == 0
this.maxWaitTimeMS == 0
return.maxSize == 0
return.minSize == 0
return.maxWaitQueueSize == 0
return.maxWaitTimeMS == 0
return.maxConnectionLifeTimeMS == 0
return.maxConnectionIdleTimeMS == 0
return.maintenanceInitialDelayMS == 0
return.maintenanceFrequencyMS == 60000
===========================================================================
com.mongodb.ConnectionPoolSettings:::OBJECT
this.maxSize == 10
this.minSize == 0
this.maxWaitQueueSize == 50
this.maxWaitTimeMS == 120000
this.maxConnectionLifeTimeMS == 0
this.maxConnectionIdleTimeMS == 0
this.maintenanceInitialDelayMS == 0
this.maintenanceFrequencyMS == 60000
===========================================================================
com.mongodb.ConnectionPoolSettings.ConnectionPoolSettings(com.mongodb.ConnectionPoolSettings$Builder):::ENTER
builder.maxSize == 10
builder.minSize == 0
builder.maxWaitQueueSize == 50
builder.maxWaitTimeMS == 120000
builder.maxConnectionLifeTimeMS == 0
builder.maxConnectionIdleTimeMS == 0
builder.maintenanceInitialDelayMS == 0
builder.maintenanceFrequencyMS == 60000
===========================================================================
com.mongodb.ConnectionPoolSettings.ConnectionPoolSettings(com.mongodb.ConnectionPoolSettings$Builder):::EXIT
builder.maxSize == orig(builder.maxSize)
builder.minSize == orig(builder.minSize)
builder.maxWaitQueueSize == orig(builder.maxWaitQueueSize)
builder.maxWaitTimeMS == orig(builder.maxWaitTimeMS)
builder.maxConnectionLifeTimeMS == orig(builder.maxConnectionLifeTimeMS)
builder.maxConnectionIdleTimeMS == orig(builder.maxConnectionIdleTimeMS)
builder.maintenanceInitialDelayMS == orig(builder.maintenanceInitialDelayMS)
builder.maintenanceFrequencyMS == orig(builder.maintenanceFrequencyMS)
builder.maxSize == 10
builder.minSize == 0
builder.maxWaitQueueSize == 50
builder.maxWaitTimeMS == 120000
builder.maxConnectionLifeTimeMS == 0
builder.maxConnectionIdleTimeMS == 0
builder.maintenanceInitialDelayMS == 0
builder.maintenanceFrequencyMS == 60000
===========================================================================
com.mongodb.ConnectionPoolSettings.builder():::EXIT
return.maxSize == 0
return.minSize == 0
return.maxWaitQueueSize == 0
return.maxWaitTimeMS == 0
return.maxConnectionLifeTimeMS == 0
return.maxConnectionIdleTimeMS == 0
return.maintenanceInitialDelayMS == 0
return.maintenanceFrequencyMS == 60000
===========================================================================
com.mongodb.ConnectionPoolSettings.getMaxConnectionIdleTime(java.util.concurrent.TimeUnit):::ENTER
timeUnit has only one value
===========================================================================
com.mongodb.ConnectionPoolSettings.getMaxConnectionIdleTime(java.util.concurrent.TimeUnit):::EXIT
this.maxSize == orig(this.maxSize)
this.minSize == orig(this.minSize)
this.maxWaitQueueSize == orig(this.maxWaitQueueSize)
this.maxWaitTimeMS == orig(this.maxWaitTimeMS)
this.maxConnectionLifeTimeMS == orig(this.maxConnectionLifeTimeMS)
this.maxConnectionIdleTimeMS == orig(this.maxConnectionIdleTimeMS)
this.maintenanceInitialDelayMS == orig(this.maintenanceInitialDelayMS)
this.maintenanceFrequencyMS == orig(this.maintenanceFrequencyMS)
return == 0
===========================================================================
com.mongodb.ConnectionPoolSettings.getMaxConnectionLifeTime(java.util.concurrent.TimeUnit):::ENTER
timeUnit has only one value
===========================================================================
com.mongodb.ConnectionPoolSettings.getMaxConnectionLifeTime(java.util.concurrent.TimeUnit):::EXIT
this.maxSize == orig(this.maxSize)
this.minSize == orig(this.minSize)
this.maxWaitQueueSize == orig(this.maxWaitQueueSize)
this.maxWaitTimeMS == orig(this.maxWaitTimeMS)
this.maxConnectionLifeTimeMS == orig(this.maxConnectionLifeTimeMS)
this.maxConnectionIdleTimeMS == orig(this.maxConnectionIdleTimeMS)
this.maintenanceInitialDelayMS == orig(this.maintenanceInitialDelayMS)
this.maintenanceFrequencyMS == orig(this.maintenanceFrequencyMS)
return == 0
===========================================================================
com.mongodb.ConnectionPoolSettings.getMaxSize():::ENTER
===========================================================================
com.mongodb.ConnectionPoolSettings.getMaxSize():::EXIT
this.maxSize == orig(this.maxSize)
this.minSize == orig(this.minSize)
this.maxWaitQueueSize == orig(this.maxWaitQueueSize)
this.maxWaitTimeMS == orig(this.maxWaitTimeMS)
this.maxConnectionLifeTimeMS == orig(this.maxConnectionLifeTimeMS)
this.maxConnectionIdleTimeMS == orig(this.maxConnectionIdleTimeMS)
this.maintenanceInitialDelayMS == orig(this.maintenanceInitialDelayMS)
this.maintenanceFrequencyMS == orig(this.maintenanceFrequencyMS)
return == 10
===========================================================================
com.mongodb.ConnectionPoolSettings.getMinSize():::ENTER
===========================================================================
com.mongodb.ConnectionPoolSettings.getMinSize():::EXIT
this.maxSize == orig(this.maxSize)
this.minSize == orig(this.minSize)
this.maxWaitQueueSize == orig(this.maxWaitQueueSize)
this.maxWaitTimeMS == orig(this.maxWaitTimeMS)
this.maxConnectionLifeTimeMS == orig(this.maxConnectionLifeTimeMS)
this.maxConnectionIdleTimeMS == orig(this.maxConnectionIdleTimeMS)
this.maintenanceInitialDelayMS == orig(this.maintenanceInitialDelayMS)
this.maintenanceFrequencyMS == orig(this.maintenanceFrequencyMS)
return == 0
===========================================================================
com.mongodb.ConnectionPoolStatistics:::OBJECT
this.serverAddress._host has only one value
this.serverAddress._host.toString == "localhost"
this.serverAddress._port == 27017
this.settings.maxSize == 10
this.settings.minSize == 0
this.settings.maxWaitQueueSize == 50
this.settings.maxWaitTimeMS == 120000
this.settings.maxConnectionLifeTimeMS == 0
this.settings.maxConnectionIdleTimeMS == 0
this.settings.maintenanceInitialDelayMS == 0
this.settings.maintenanceFrequencyMS == 60000
===========================================================================
com.mongodb.ConnectionPoolStatistics.ConnectionPoolStatistics(com.mongodb.ConnectionPoolOpenedEvent):::ENTER
event.settings.maxSize == 10
event.settings.minSize == 0
event.settings.maxWaitQueueSize == 50
event.settings.maxWaitTimeMS == 120000
event.settings.maxConnectionLifeTimeMS == 0
event.settings.maxConnectionIdleTimeMS == 0
event.settings.maintenanceInitialDelayMS == 0
event.settings.maintenanceFrequencyMS == 60000
event.serverAddress._host has only one value
event.serverAddress._host.toString == "localhost"
event.serverAddress._port == 27017
event.clusterId.toString one of { "1", "2" }
===========================================================================
com.mongodb.ConnectionPoolStatistics.ConnectionPoolStatistics(com.mongodb.ConnectionPoolOpenedEvent):::EXIT
event.settings == orig(event.settings)
event.settings.maxSize == orig(event.settings.maxSize)
event.settings.minSize == orig(event.settings.minSize)
event.settings.maxWaitQueueSize == orig(event.settings.maxWaitQueueSize)
event.settings.maxWaitTimeMS == orig(event.settings.maxWaitTimeMS)
event.settings.maxConnectionLifeTimeMS == orig(event.settings.maxConnectionLifeTimeMS)
event.settings.maxConnectionIdleTimeMS == orig(event.settings.maxConnectionIdleTimeMS)
event.settings.maintenanceInitialDelayMS == orig(event.settings.maintenanceInitialDelayMS)
event.settings.maintenanceFrequencyMS == orig(event.settings.maintenanceFrequencyMS)
event.serverAddress == orig(event.serverAddress)
event.serverAddress._host == orig(event.serverAddress._host)
event.serverAddress._host.toString == orig(event.serverAddress._host.toString)
event.serverAddress._port == orig(event.serverAddress._port)
event.clusterId == orig(event.clusterId)
event.clusterId.toString == orig(event.clusterId.toString)
event.settings.maxSize == 10
event.settings.minSize == 0
event.settings.maxWaitQueueSize == 50
event.settings.maxWaitTimeMS == 120000
event.settings.maxConnectionLifeTimeMS == 0
event.settings.maxConnectionIdleTimeMS == 0
event.settings.maintenanceInitialDelayMS == 0
event.settings.maintenanceFrequencyMS == 60000
event.serverAddress._host has only one value
event.serverAddress._host.toString == "localhost"
event.serverAddress._port == 27017
event.clusterId.toString one of { "1", "2" }
===========================================================================
com.mongodb.DB:::CLASS
com.mongodb.DB._obedientCommands has only one value
com.mongodb.DB._obedientCommands.getClass().getName() == java.util.HashSet.class
===========================================================================
com.mongodb.DB:::OBJECT
this.getClass().getName() == com.mongodb.DBApiLayer.class
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
this._mongo._options.description == null
this._mongo._options.connectionsPerHost == 10
this._mongo._options.threadsAllowedToBlockForConnectionMultiplier == 5
this._mongo._options.maxWaitTime == 120000
this._mongo._options.connectTimeout == 10000
this._mongo._options.socketTimeout == 0
this._mongo._options.socketKeepAlive == false
this._mongo._options.autoConnectRetry == false
this._mongo._options.maxAutoConnectRetryTime == 0
this._mongo._options.slaveOk == false
this._mongo._options.readPreference == null
this._mongo._options.dbDecoderFactory has only one value
this._mongo._options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
this._mongo._options.dbEncoderFactory has only one value
this._mongo._options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
this._mongo._options.safe == false
this._mongo._options.w == 0
this._mongo._options.wtimeout == 0
this._mongo._options.fsync == false
this._mongo._options.j == false
this._mongo._options.socketFactory has only one value
this._mongo._options.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
this._mongo._options.cursorFinalizerEnabled == true
this._mongo._options.writeConcern == null
this._mongo._options.alwaysUseMBeans == false
this._mongo._options.minConnectionsPerHost == 0
this._mongo._options.maxConnectionIdleTime == 0
this._mongo._options.maxConnectionLifeTime == 0
this._mongo._options.heartbeatFrequencyMS == 5000
this._mongo._options.heartbeatConnectRetryFrequencyMS == 10
this._mongo._options.heartbeatConnectTimeoutMS == 20000
this._mongo._options.heartbeatReadTimeoutMS == 20000
this._mongo._options.acceptableLatencyDifferenceMS == 15
this._mongo._options.heartbeatThreadCount == 0
this._mongo._options.requiredReplicaSetName == null
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID has only one value
this._mongo._connector._closed == false
this._mongo._connector.cluster.getClass().getName() == com.mongodb.SingleServerCluster.class
this._mongo._connector.connectionMode has only one value
this._mongo._connector.type has only one value
this._mongo._connector.mongosHAServerSelector == null
this._mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
this._mongo._concern has only one value
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
this._mongo._concern._w has only one value
this._mongo._concern._w.getClass().getName() == java.lang.Integer.class
this._mongo._concern._wtimeout == 0
this._mongo._concern._fsync == false
this._mongo._concern._j == false
this._mongo._concern._continueOnError == false
this._mongo._readPref has only one value
this._mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY has only one value
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY_PREFERRED has only one value
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
this._mongo._netOptions._parent == null
this._mongo._netOptions._options == 0
this._mongo._netOptions._hasOptions == false
this._mongo._authority.type has only one value
this._mongo._authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
this._mongo._authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
this._mongo._authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
this._mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
this._mongo._bufferPool._max == 1000
this._mongo._bufferPool._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
this._name.toString one of { "SimpleDynamic1743934291905", "test" }
this._readOnly == false
this._concern == null
com.mongodb.WriteConcern.ERRORS_IGNORED._w has only one value
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == 0
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == false
com.mongodb.WriteConcern.ERRORS_IGNORED._j == false
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == false
com.mongodb.WriteConcern.ACKNOWLEDGED._w has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == 0
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == false
com.mongodb.WriteConcern.ACKNOWLEDGED._j == false
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == false
com.mongodb.WriteConcern.UNACKNOWLEDGED._w has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == 0
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == false
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == false
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == false
com.mongodb.WriteConcern.FSYNCED._w has only one value
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.FSYNCED._wtimeout == 0
com.mongodb.WriteConcern.FSYNCED._fsync == true
com.mongodb.WriteConcern.FSYNCED._j == false
com.mongodb.WriteConcern.FSYNCED._continueOnError == false
com.mongodb.WriteConcern.JOURNALED._w has only one value
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.JOURNALED._wtimeout == 0
com.mongodb.WriteConcern.JOURNALED._fsync == false
com.mongodb.WriteConcern.JOURNALED._j == true
com.mongodb.WriteConcern.JOURNALED._continueOnError == false
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == 0
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == false
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == false
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == false
com.mongodb.WriteConcern.NONE._w has only one value
com.mongodb.WriteConcern.NONE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.NONE._wtimeout == 0
com.mongodb.WriteConcern.NONE._fsync == false
com.mongodb.WriteConcern.NONE._j == false
com.mongodb.WriteConcern.NONE._continueOnError == false
com.mongodb.WriteConcern.NORMAL._w has only one value
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.NORMAL._wtimeout == 0
com.mongodb.WriteConcern.NORMAL._fsync == false
com.mongodb.WriteConcern.NORMAL._j == false
com.mongodb.WriteConcern.NORMAL._continueOnError == false
com.mongodb.WriteConcern.SAFE._w has only one value
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.SAFE._wtimeout == 0
com.mongodb.WriteConcern.SAFE._fsync == false
com.mongodb.WriteConcern.SAFE._j == false
com.mongodb.WriteConcern.SAFE._continueOnError == false
com.mongodb.WriteConcern.MAJORITY._w has only one value
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == java.lang.String.class
com.mongodb.WriteConcern.MAJORITY._wtimeout == 0
com.mongodb.WriteConcern.MAJORITY._fsync == false
com.mongodb.WriteConcern.MAJORITY._j == false
com.mongodb.WriteConcern.MAJORITY._continueOnError == false
com.mongodb.WriteConcern.FSYNC_SAFE._w has only one value
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == 0
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == true
com.mongodb.WriteConcern.FSYNC_SAFE._j == false
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == false
com.mongodb.WriteConcern.JOURNAL_SAFE._w has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == 0
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == false
com.mongodb.WriteConcern.JOURNAL_SAFE._j == true
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == false
com.mongodb.WriteConcern.REPLICAS_SAFE._w has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == 0
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == false
com.mongodb.WriteConcern.REPLICAS_SAFE._j == false
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == false
this._readPref == null
this._options._parent._parent == null
this._options._parent._options == 0
this._options._parent._hasOptions == false
this._options._options == 0
this._options._hasOptions == false
this.authenticationTestCommandResult == null
size(this._mongo._authority.serverAddresses[]) == 1
===========================================================================
com.mongodb.DB.DB(com.mongodb.Mongo, java.lang.String):::ENTER
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
mongo._options.description == null
mongo._options.connectionsPerHost == 10
mongo._options.threadsAllowedToBlockForConnectionMultiplier == 5
mongo._options.maxWaitTime == 120000
mongo._options.connectTimeout == 10000
mongo._options.socketTimeout == 0
mongo._options.socketKeepAlive == false
mongo._options.autoConnectRetry == false
mongo._options.maxAutoConnectRetryTime == 0
mongo._options.slaveOk == false
mongo._options.readPreference == null
mongo._options.dbDecoderFactory has only one value
mongo._options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
mongo._options.dbEncoderFactory has only one value
mongo._options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
mongo._options.safe == false
mongo._options.w == 0
mongo._options.wtimeout == 0
mongo._options.fsync == false
mongo._options.j == false
mongo._options.socketFactory has only one value
mongo._options.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
mongo._options.cursorFinalizerEnabled == true
mongo._options.writeConcern == null
mongo._options.alwaysUseMBeans == false
mongo._options.minConnectionsPerHost == 0
mongo._options.maxConnectionIdleTime == 0
mongo._options.maxConnectionLifeTime == 0
mongo._options.heartbeatFrequencyMS == 5000
mongo._options.heartbeatConnectRetryFrequencyMS == 10
mongo._options.heartbeatConnectTimeoutMS == 20000
mongo._options.heartbeatReadTimeoutMS == 20000
mongo._options.acceptableLatencyDifferenceMS == 15
mongo._options.heartbeatThreadCount == 0
mongo._options.requiredReplicaSetName == null
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID has only one value
mongo._connector._closed == false
mongo._connector.cluster.getClass().getName() == com.mongodb.SingleServerCluster.class
mongo._connector.connectionMode has only one value
mongo._connector.type has only one value
mongo._connector.mongosHAServerSelector == null
mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
mongo._concern has only one value
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
mongo._concern._w has only one value
mongo._concern._w.getClass().getName() == java.lang.Integer.class
mongo._concern._wtimeout == 0
mongo._concern._fsync == false
mongo._concern._j == false
mongo._concern._continueOnError == false
mongo._readPref has only one value
mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY has only one value
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY_PREFERRED has only one value
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
mongo._netOptions._parent == null
mongo._netOptions._options == 0
mongo._netOptions._hasOptions == false
mongo._authority.type has only one value
mongo._authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
mongo._authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
mongo._authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
mongo._bufferPool._max == 1000
mongo._bufferPool._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
name.toString one of { "SimpleDynamic1743934291905", "test" }
size(mongo._authority.serverAddresses[]) == 1
===========================================================================
com.mongodb.DB.DB(com.mongodb.Mongo, java.lang.String):::EXIT
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
com.mongodb.Mongo.this == orig(com.mongodb.Mongo.this)
mongo._options == orig(mongo._options)
mongo._options.description == orig(mongo._options.description)
mongo._options.connectionsPerHost == orig(mongo._options.connectionsPerHost)
mongo._options.threadsAllowedToBlockForConnectionMultiplier == orig(mongo._options.threadsAllowedToBlockForConnectionMultiplier)
mongo._options.maxWaitTime == orig(mongo._options.maxWaitTime)
mongo._options.connectTimeout == orig(mongo._options.connectTimeout)
mongo._options.socketTimeout == orig(mongo._options.socketTimeout)
mongo._options.socketKeepAlive == orig(mongo._options.socketKeepAlive)
mongo._options.autoConnectRetry == orig(mongo._options.autoConnectRetry)
mongo._options.maxAutoConnectRetryTime == orig(mongo._options.maxAutoConnectRetryTime)
mongo._options.slaveOk == orig(mongo._options.slaveOk)
mongo._options.readPreference == orig(mongo._options.readPreference)
mongo._options.dbDecoderFactory == orig(mongo._options.dbDecoderFactory)
mongo._options.dbDecoderFactory.getClass().getName() == orig(mongo._options.dbDecoderFactory.getClass().getName())
mongo._options.dbEncoderFactory == orig(mongo._options.dbEncoderFactory)
mongo._options.dbEncoderFactory.getClass().getName() == orig(mongo._options.dbEncoderFactory.getClass().getName())
mongo._options.safe == orig(mongo._options.safe)
mongo._options.w == orig(mongo._options.w)
mongo._options.wtimeout == orig(mongo._options.wtimeout)
mongo._options.fsync == orig(mongo._options.fsync)
mongo._options.j == orig(mongo._options.j)
mongo._options.socketFactory == orig(mongo._options.socketFactory)
mongo._options.socketFactory.getClass().getName() == orig(mongo._options.socketFactory.getClass().getName())
mongo._options.cursorFinalizerEnabled == orig(mongo._options.cursorFinalizerEnabled)
mongo._options.writeConcern == orig(mongo._options.writeConcern)
mongo._options.alwaysUseMBeans == orig(mongo._options.alwaysUseMBeans)
mongo._options.minConnectionsPerHost == orig(mongo._options.minConnectionsPerHost)
mongo._options.maxConnectionIdleTime == orig(mongo._options.maxConnectionIdleTime)
mongo._options.maxConnectionLifeTime == orig(mongo._options.maxConnectionLifeTime)
mongo._options.heartbeatFrequencyMS == orig(mongo._options.heartbeatFrequencyMS)
mongo._options.heartbeatConnectRetryFrequencyMS == orig(mongo._options.heartbeatConnectRetryFrequencyMS)
mongo._options.heartbeatConnectTimeoutMS == orig(mongo._options.heartbeatConnectTimeoutMS)
mongo._options.heartbeatReadTimeoutMS == orig(mongo._options.heartbeatReadTimeoutMS)
mongo._options.acceptableLatencyDifferenceMS == orig(mongo._options.acceptableLatencyDifferenceMS)
mongo._options.heartbeatThreadCount == orig(mongo._options.heartbeatThreadCount)
mongo._options.requiredReplicaSetName == orig(mongo._options.requiredReplicaSetName)
mongo._connector == orig(mongo._connector)
mongo._connector._closed == orig(mongo._connector._closed)
mongo._connector._mongo == orig(mongo._connector._mongo)
mongo._connector.cluster == orig(mongo._connector.cluster)
mongo._connector.cluster.getClass().getName() == orig(mongo._connector.cluster.getClass().getName())
mongo._connector._myPort == orig(mongo._connector._myPort)
mongo._connector.connectionMode == orig(mongo._connector.connectionMode)
mongo._connector.type == orig(mongo._connector.type)
mongo._connector.mongosHAServerSelector == orig(mongo._connector.mongosHAServerSelector)
mongo._dbs == orig(mongo._dbs)
mongo._dbs.getClass().getName() == orig(mongo._dbs.getClass().getName())
mongo._concern == orig(mongo._concern)
mongo._concern._w == orig(mongo._concern._w)
mongo._concern._w.getClass().getName() == orig(mongo._concern._w.getClass().getName())
mongo._concern._wtimeout == orig(mongo._concern._wtimeout)
mongo._concern._fsync == orig(mongo._concern._fsync)
mongo._concern._j == orig(mongo._concern._j)
mongo._concern._continueOnError == orig(mongo._concern._continueOnError)
mongo._readPref == orig(mongo._readPref)
mongo._readPref.getClass().getName() == orig(mongo._readPref.getClass().getName())
mongo._netOptions == orig(mongo._netOptions)
mongo._netOptions._parent == orig(mongo._netOptions._parent)
mongo._netOptions._options == orig(mongo._netOptions._options)
mongo._netOptions._hasOptions == orig(mongo._netOptions._hasOptions)
mongo._cleaner == orig(mongo._cleaner)
mongo._authority == orig(mongo._authority)
mongo._authority.type == orig(mongo._authority.type)
mongo._authority.serverAddresses == orig(mongo._authority.serverAddresses)
mongo._authority.serverAddresses[] == orig(mongo._authority.serverAddresses[])
mongo._authority.serverAddresses.getClass().getName() == orig(mongo._authority.serverAddresses.getClass().getName())
mongo._authority.credentialsStore == orig(mongo._authority.credentialsStore)
mongo._bufferPool == orig(mongo._bufferPool)
mongo._bufferPool.getClass().getName() == orig(mongo._bufferPool.getClass().getName())
mongo._bufferPool._max == orig(mongo._bufferPool._max)
mongo._bufferPool._stored == orig(mongo._bufferPool._stored)
mongo._bufferPool._stored.getClass().getName() == orig(mongo._bufferPool._stored.getClass().getName())
name.toString == orig(name.toString)
mongo._options.description == null
mongo._options.connectionsPerHost == 10
mongo._options.threadsAllowedToBlockForConnectionMultiplier == 5
mongo._options.maxWaitTime == 120000
mongo._options.connectTimeout == 10000
mongo._options.socketTimeout == 0
mongo._options.socketKeepAlive == false
mongo._options.autoConnectRetry == false
mongo._options.maxAutoConnectRetryTime == 0
mongo._options.slaveOk == false
mongo._options.readPreference == null
mongo._options.dbDecoderFactory has only one value
mongo._options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
mongo._options.dbEncoderFactory has only one value
mongo._options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
mongo._options.safe == false
mongo._options.w == 0
mongo._options.wtimeout == 0
mongo._options.fsync == false
mongo._options.j == false
mongo._options.socketFactory has only one value
mongo._options.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
mongo._options.cursorFinalizerEnabled == true
mongo._options.writeConcern == null
mongo._options.alwaysUseMBeans == false
mongo._options.minConnectionsPerHost == 0
mongo._options.maxConnectionIdleTime == 0
mongo._options.maxConnectionLifeTime == 0
mongo._options.heartbeatFrequencyMS == 5000
mongo._options.heartbeatConnectRetryFrequencyMS == 10
mongo._options.heartbeatConnectTimeoutMS == 20000
mongo._options.heartbeatReadTimeoutMS == 20000
mongo._options.acceptableLatencyDifferenceMS == 15
mongo._options.heartbeatThreadCount == 0
mongo._options.requiredReplicaSetName == null
mongo._connector._closed == false
mongo._connector.cluster.getClass().getName() == com.mongodb.SingleServerCluster.class
mongo._connector.connectionMode has only one value
mongo._connector.type has only one value
mongo._connector.mongosHAServerSelector == null
mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
mongo._concern has only one value
mongo._concern._w has only one value
mongo._concern._w.getClass().getName() == java.lang.Integer.class
mongo._concern._wtimeout == 0
mongo._concern._fsync == false
mongo._concern._j == false
mongo._concern._continueOnError == false
mongo._readPref has only one value
mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
mongo._netOptions._parent == null
mongo._netOptions._options == 0
mongo._netOptions._hasOptions == false
mongo._authority.type has only one value
mongo._authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
mongo._authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
mongo._authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
mongo._bufferPool._max == 1000
mongo._bufferPool._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
name.toString one of { "SimpleDynamic1743934291905", "test" }
size(mongo._authority.serverAddresses[]) == 1
===========================================================================
com.mongodb.DB.getCollection(java.lang.String):::ENTER
this has only one value
this._mongo has only one value
this._mongo._options has only one value
this._mongo._connector has only one value
this._mongo._connector._mongo has only one value
this._mongo._connector.cluster has only one value
this._mongo._connector._myPort has only one value
this._mongo._dbs has only one value
this._mongo._netOptions has only one value
this._mongo._cleaner has only one value
com.mongodb.Mongo.this has only one value
this._mongo._authority has only one value
this._mongo._authority.serverAddresses has only one value
this._mongo._authority.serverAddresses[] contains no nulls and has only one value, of length 1
this._mongo._authority.serverAddresses[] elements has only one value
this._mongo._authority.credentialsStore has only one value
this._mongo._bufferPool has only one value
this._mongo._bufferPool._stored has only one value
this._name has only one value
this._name.toString == "SimpleDynamic1743934291905"
this._options has only one value
this._options._parent has only one value
name has only one value
name.toString == "aggr_results"
===========================================================================
com.mongodb.DB.getCollection(java.lang.String):::EXIT
com.mongodb.DB._obedientCommands == orig(com.mongodb.DB._obedientCommands)
com.mongodb.DB._obedientCommands.getClass().getName() == orig(com.mongodb.DB._obedientCommands.getClass().getName())
this._mongo == orig(this._mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this._mongo._options == orig(this._mongo._options)
this._mongo._options.description == orig(this._mongo._options.description)
this._mongo._options.connectionsPerHost == orig(this._mongo._options.connectionsPerHost)
this._mongo._options.threadsAllowedToBlockForConnectionMultiplier == orig(this._mongo._options.threadsAllowedToBlockForConnectionMultiplier)
this._mongo._options.maxWaitTime == orig(this._mongo._options.maxWaitTime)
this._mongo._options.connectTimeout == orig(this._mongo._options.connectTimeout)
this._mongo._options.socketTimeout == orig(this._mongo._options.socketTimeout)
this._mongo._options.socketKeepAlive == orig(this._mongo._options.socketKeepAlive)
this._mongo._options.autoConnectRetry == orig(this._mongo._options.autoConnectRetry)
this._mongo._options.maxAutoConnectRetryTime == orig(this._mongo._options.maxAutoConnectRetryTime)
this._mongo._options.slaveOk == orig(this._mongo._options.slaveOk)
this._mongo._options.readPreference == orig(this._mongo._options.readPreference)
this._mongo._options.dbDecoderFactory == orig(this._mongo._options.dbDecoderFactory)
this._mongo._options.dbDecoderFactory.getClass().getName() == orig(this._mongo._options.dbDecoderFactory.getClass().getName())
this._mongo._options.dbEncoderFactory == orig(this._mongo._options.dbEncoderFactory)
this._mongo._options.dbEncoderFactory.getClass().getName() == orig(this._mongo._options.dbEncoderFactory.getClass().getName())
this._mongo._options.safe == orig(this._mongo._options.safe)
this._mongo._options.w == orig(this._mongo._options.w)
this._mongo._options.wtimeout == orig(this._mongo._options.wtimeout)
this._mongo._options.fsync == orig(this._mongo._options.fsync)
this._mongo._options.j == orig(this._mongo._options.j)
this._mongo._options.socketFactory == orig(this._mongo._options.socketFactory)
this._mongo._options.socketFactory.getClass().getName() == orig(this._mongo._options.socketFactory.getClass().getName())
this._mongo._options.cursorFinalizerEnabled == orig(this._mongo._options.cursorFinalizerEnabled)
this._mongo._options.writeConcern == orig(this._mongo._options.writeConcern)
this._mongo._options.alwaysUseMBeans == orig(this._mongo._options.alwaysUseMBeans)
this._mongo._options.minConnectionsPerHost == orig(this._mongo._options.minConnectionsPerHost)
this._mongo._options.maxConnectionIdleTime == orig(this._mongo._options.maxConnectionIdleTime)
this._mongo._options.maxConnectionLifeTime == orig(this._mongo._options.maxConnectionLifeTime)
this._mongo._options.heartbeatFrequencyMS == orig(this._mongo._options.heartbeatFrequencyMS)
this._mongo._options.heartbeatConnectRetryFrequencyMS == orig(this._mongo._options.heartbeatConnectRetryFrequencyMS)
this._mongo._options.heartbeatConnectTimeoutMS == orig(this._mongo._options.heartbeatConnectTimeoutMS)
this._mongo._options.heartbeatReadTimeoutMS == orig(this._mongo._options.heartbeatReadTimeoutMS)
this._mongo._options.acceptableLatencyDifferenceMS == orig(this._mongo._options.acceptableLatencyDifferenceMS)
this._mongo._options.heartbeatThreadCount == orig(this._mongo._options.heartbeatThreadCount)
this._mongo._options.requiredReplicaSetName == orig(this._mongo._options.requiredReplicaSetName)
this._mongo._connector == orig(this._mongo._connector)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
this._mongo._connector._closed == orig(this._mongo._connector._closed)
this._mongo._connector._mongo == orig(this._mongo._connector._mongo)
this._mongo._connector.cluster == orig(this._mongo._connector.cluster)
this._mongo._connector.cluster.getClass().getName() == orig(this._mongo._connector.cluster.getClass().getName())
this._mongo._connector._myPort == orig(this._mongo._connector._myPort)
this._mongo._connector.connectionMode == orig(this._mongo._connector.connectionMode)
this._mongo._connector.type == orig(this._mongo._connector.type)
this._mongo._connector.mongosHAServerSelector == orig(this._mongo._connector.mongosHAServerSelector)
this._mongo._dbs == orig(this._mongo._dbs)
this._mongo._dbs.getClass().getName() == orig(this._mongo._dbs.getClass().getName())
this._mongo._concern == orig(this._mongo._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this._mongo._concern._w == orig(this._mongo._concern._w)
this._mongo._concern._w.getClass().getName() == orig(this._mongo._concern._w.getClass().getName())
this._mongo._concern._wtimeout == orig(this._mongo._concern._wtimeout)
this._mongo._concern._fsync == orig(this._mongo._concern._fsync)
this._mongo._concern._j == orig(this._mongo._concern._j)
this._mongo._concern._continueOnError == orig(this._mongo._concern._continueOnError)
this._mongo._readPref == orig(this._mongo._readPref)
this._mongo._readPref.getClass().getName() == orig(this._mongo._readPref.getClass().getName())
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this._mongo._netOptions == orig(this._mongo._netOptions)
this._mongo._netOptions._parent == orig(this._mongo._netOptions._parent)
this._mongo._netOptions._options == orig(this._mongo._netOptions._options)
this._mongo._netOptions._hasOptions == orig(this._mongo._netOptions._hasOptions)
this._mongo._cleaner == orig(this._mongo._cleaner)
com.mongodb.Mongo.this == orig(com.mongodb.Mongo.this)
this._mongo._authority == orig(this._mongo._authority)
this._mongo._authority.type == orig(this._mongo._authority.type)
this._mongo._authority.serverAddresses == orig(this._mongo._authority.serverAddresses)
this._mongo._authority.serverAddresses[] == orig(this._mongo._authority.serverAddresses[])
this._mongo._authority.serverAddresses.getClass().getName() == orig(this._mongo._authority.serverAddresses.getClass().getName())
this._mongo._authority.credentialsStore == orig(this._mongo._authority.credentialsStore)
this._mongo._bufferPool == orig(this._mongo._bufferPool)
this._mongo._bufferPool.getClass().getName() == orig(this._mongo._bufferPool.getClass().getName())
this._mongo._bufferPool._max == orig(this._mongo._bufferPool._max)
this._mongo._bufferPool._stored == orig(this._mongo._bufferPool._stored)
this._mongo._bufferPool._stored.getClass().getName() == orig(this._mongo._bufferPool._stored.getClass().getName())
this._name == orig(this._name)
this._name.toString == orig(this._name.toString)
this._readOnly == orig(this._readOnly)
this._concern == orig(this._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this._readPref == orig(this._readPref)
this._options == orig(this._options)
this._options._parent == orig(this._options._parent)
this._options._parent._parent == orig(this._options._parent._parent)
this._options._parent._options == orig(this._options._parent._options)
this._options._parent._hasOptions == orig(this._options._parent._hasOptions)
this._options._options == orig(this._options._options)
this._options._hasOptions == orig(this._options._hasOptions)
this.authenticationTestCommandResult == orig(this.authenticationTestCommandResult)
name.toString == orig(name.toString)
this._mongo has only one value
this._mongo._options has only one value
this._mongo._connector has only one value
this._mongo._connector._mongo has only one value
this._mongo._connector.cluster has only one value
this._mongo._connector._myPort has only one value
this._mongo._dbs has only one value
this._mongo._netOptions has only one value
this._mongo._cleaner has only one value
com.mongodb.Mongo.this has only one value
this._mongo._authority has only one value
this._mongo._authority.serverAddresses has only one value
this._mongo._authority.serverAddresses[] contains no nulls and has only one value, of length 1
this._mongo._authority.serverAddresses[] elements has only one value
this._mongo._authority.credentialsStore has only one value
this._mongo._bufferPool has only one value
this._mongo._bufferPool._stored has only one value
this._name has only one value
this._name.toString == "SimpleDynamic1743934291905"
this._options has only one value
this._options._parent has only one value
name.toString == "aggr_results"
return has only one value
return.getClass().getName() == com.mongodb.DBCollectionImpl.class
return._db has only one value
return._db.getClass().getName() == com.mongodb.DBApiLayer.class
return._db._mongo has only one value
return._db._name has only one value
return._db._name.toString == "SimpleDynamic1743934291905"
return._db._readOnly == false
return._db._concern == null
return._db._readPref == null
return._db._options has only one value
return._db.authenticationTestCommandResult == null
return._name has only one value
return._name.toString == "aggr_results"
return._fullName has only one value
return._fullName.toString == "SimpleDynamic1743934291905.aggr_results"
return._hintFields == null
return._concern == null
return._readPref == null
return._decoderFactory == null
return._encoderFactory == null
return._options has only one value
return._options._parent has only one value
return._options._options == 0
return._options._hasOptions == false
return._objectClass == null
return._internalClass has only one value
return._internalClass.getClass().getName() == java.util.Collections$SynchronizedMap.class
return._wrapper == null
return._createdIndexes has only one value
return._createdIndexes.getClass().getName() == java.util.HashSet.class
===========================================================================
com.mongodb.DB.getName():::ENTER
this has only one value
this._mongo has only one value
this._mongo._options has only one value
this._mongo._connector has only one value
this._mongo._connector._mongo has only one value
this._mongo._connector.cluster has only one value
this._mongo._connector._myPort has only one value
this._mongo._dbs has only one value
this._mongo._netOptions has only one value
this._mongo._cleaner has only one value
com.mongodb.Mongo.this has only one value
this._mongo._authority has only one value
this._mongo._authority.serverAddresses has only one value
this._mongo._authority.serverAddresses[] contains no nulls and has only one value, of length 1
this._mongo._authority.serverAddresses[] elements has only one value
this._mongo._authority.credentialsStore has only one value
this._mongo._bufferPool has only one value
this._mongo._bufferPool._stored has only one value
this._name has only one value
this._name.toString == "SimpleDynamic1743934291905"
this._options has only one value
this._options._parent has only one value
===========================================================================
com.mongodb.DB.getName():::EXIT
com.mongodb.DB._obedientCommands == orig(com.mongodb.DB._obedientCommands)
com.mongodb.DB._obedientCommands.getClass().getName() == orig(com.mongodb.DB._obedientCommands.getClass().getName())
this._mongo == orig(this._mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this._mongo._options == orig(this._mongo._options)
this._mongo._options.description == orig(this._mongo._options.description)
this._mongo._options.connectionsPerHost == orig(this._mongo._options.connectionsPerHost)
this._mongo._options.threadsAllowedToBlockForConnectionMultiplier == orig(this._mongo._options.threadsAllowedToBlockForConnectionMultiplier)
this._mongo._options.maxWaitTime == orig(this._mongo._options.maxWaitTime)
this._mongo._options.connectTimeout == orig(this._mongo._options.connectTimeout)
this._mongo._options.socketTimeout == orig(this._mongo._options.socketTimeout)
this._mongo._options.socketKeepAlive == orig(this._mongo._options.socketKeepAlive)
this._mongo._options.autoConnectRetry == orig(this._mongo._options.autoConnectRetry)
this._mongo._options.maxAutoConnectRetryTime == orig(this._mongo._options.maxAutoConnectRetryTime)
this._mongo._options.slaveOk == orig(this._mongo._options.slaveOk)
this._mongo._options.readPreference == orig(this._mongo._options.readPreference)
this._mongo._options.dbDecoderFactory == orig(this._mongo._options.dbDecoderFactory)
this._mongo._options.dbDecoderFactory.getClass().getName() == orig(this._mongo._options.dbDecoderFactory.getClass().getName())
this._mongo._options.dbEncoderFactory == orig(this._mongo._options.dbEncoderFactory)
this._mongo._options.dbEncoderFactory.getClass().getName() == orig(this._mongo._options.dbEncoderFactory.getClass().getName())
this._mongo._options.safe == orig(this._mongo._options.safe)
this._mongo._options.w == orig(this._mongo._options.w)
this._mongo._options.wtimeout == orig(this._mongo._options.wtimeout)
this._mongo._options.fsync == orig(this._mongo._options.fsync)
this._mongo._options.j == orig(this._mongo._options.j)
this._mongo._options.socketFactory == orig(this._mongo._options.socketFactory)
this._mongo._options.socketFactory.getClass().getName() == orig(this._mongo._options.socketFactory.getClass().getName())
this._mongo._options.cursorFinalizerEnabled == orig(this._mongo._options.cursorFinalizerEnabled)
this._mongo._options.writeConcern == orig(this._mongo._options.writeConcern)
this._mongo._options.alwaysUseMBeans == orig(this._mongo._options.alwaysUseMBeans)
this._mongo._options.minConnectionsPerHost == orig(this._mongo._options.minConnectionsPerHost)
this._mongo._options.maxConnectionIdleTime == orig(this._mongo._options.maxConnectionIdleTime)
this._mongo._options.maxConnectionLifeTime == orig(this._mongo._options.maxConnectionLifeTime)
this._mongo._options.heartbeatFrequencyMS == orig(this._mongo._options.heartbeatFrequencyMS)
this._mongo._options.heartbeatConnectRetryFrequencyMS == orig(this._mongo._options.heartbeatConnectRetryFrequencyMS)
this._mongo._options.heartbeatConnectTimeoutMS == orig(this._mongo._options.heartbeatConnectTimeoutMS)
this._mongo._options.heartbeatReadTimeoutMS == orig(this._mongo._options.heartbeatReadTimeoutMS)
this._mongo._options.acceptableLatencyDifferenceMS == orig(this._mongo._options.acceptableLatencyDifferenceMS)
this._mongo._options.heartbeatThreadCount == orig(this._mongo._options.heartbeatThreadCount)
this._mongo._options.requiredReplicaSetName == orig(this._mongo._options.requiredReplicaSetName)
this._mongo._connector == orig(this._mongo._connector)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
this._mongo._connector._closed == orig(this._mongo._connector._closed)
this._mongo._connector._mongo == orig(this._mongo._connector._mongo)
this._mongo._connector.cluster == orig(this._mongo._connector.cluster)
this._mongo._connector.cluster.getClass().getName() == orig(this._mongo._connector.cluster.getClass().getName())
this._mongo._connector._myPort == orig(this._mongo._connector._myPort)
this._mongo._connector.connectionMode == orig(this._mongo._connector.connectionMode)
this._mongo._connector.type == orig(this._mongo._connector.type)
this._mongo._connector.mongosHAServerSelector == orig(this._mongo._connector.mongosHAServerSelector)
this._mongo._dbs == orig(this._mongo._dbs)
this._mongo._dbs.getClass().getName() == orig(this._mongo._dbs.getClass().getName())
this._mongo._concern == orig(this._mongo._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this._mongo._concern._w == orig(this._mongo._concern._w)
this._mongo._concern._w.getClass().getName() == orig(this._mongo._concern._w.getClass().getName())
this._mongo._concern._wtimeout == orig(this._mongo._concern._wtimeout)
this._mongo._concern._fsync == orig(this._mongo._concern._fsync)
this._mongo._concern._j == orig(this._mongo._concern._j)
this._mongo._concern._continueOnError == orig(this._mongo._concern._continueOnError)
this._mongo._readPref == orig(this._mongo._readPref)
this._mongo._readPref.getClass().getName() == orig(this._mongo._readPref.getClass().getName())
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this._mongo._netOptions == orig(this._mongo._netOptions)
this._mongo._netOptions._parent == orig(this._mongo._netOptions._parent)
this._mongo._netOptions._options == orig(this._mongo._netOptions._options)
this._mongo._netOptions._hasOptions == orig(this._mongo._netOptions._hasOptions)
this._mongo._cleaner == orig(this._mongo._cleaner)
com.mongodb.Mongo.this == orig(com.mongodb.Mongo.this)
this._mongo._authority == orig(this._mongo._authority)
this._mongo._authority.type == orig(this._mongo._authority.type)
this._mongo._authority.serverAddresses == orig(this._mongo._authority.serverAddresses)
this._mongo._authority.serverAddresses[] == orig(this._mongo._authority.serverAddresses[])
this._mongo._authority.serverAddresses.getClass().getName() == orig(this._mongo._authority.serverAddresses.getClass().getName())
this._mongo._authority.credentialsStore == orig(this._mongo._authority.credentialsStore)
this._mongo._bufferPool == orig(this._mongo._bufferPool)
this._mongo._bufferPool.getClass().getName() == orig(this._mongo._bufferPool.getClass().getName())
this._mongo._bufferPool._max == orig(this._mongo._bufferPool._max)
this._mongo._bufferPool._stored == orig(this._mongo._bufferPool._stored)
this._mongo._bufferPool._stored.getClass().getName() == orig(this._mongo._bufferPool._stored.getClass().getName())
this._name == orig(this._name)
this._name.toString == orig(this._name.toString)
this._readOnly == orig(this._readOnly)
this._concern == orig(this._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this._readPref == orig(this._readPref)
this._options == orig(this._options)
this._options._parent == orig(this._options._parent)
this._options._parent._parent == orig(this._options._parent._parent)
this._options._parent._options == orig(this._options._parent._options)
this._options._parent._hasOptions == orig(this._options._parent._hasOptions)
this._options._options == orig(this._options._options)
this._options._hasOptions == orig(this._options._hasOptions)
this.authenticationTestCommandResult == orig(this.authenticationTestCommandResult)
this._mongo has only one value
this._mongo._options has only one value
this._mongo._connector has only one value
this._mongo._connector._mongo has only one value
this._mongo._connector.cluster has only one value
this._mongo._connector._myPort has only one value
this._mongo._dbs has only one value
this._mongo._netOptions has only one value
this._mongo._cleaner has only one value
com.mongodb.Mongo.this has only one value
this._mongo._authority has only one value
this._mongo._authority.serverAddresses has only one value
this._mongo._authority.serverAddresses[] contains no nulls and has only one value, of length 1
this._mongo._authority.serverAddresses[] elements has only one value
this._mongo._authority.credentialsStore has only one value
this._mongo._bufferPool has only one value
this._mongo._bufferPool._stored has only one value
this._name has only one value
this._name.toString == "SimpleDynamic1743934291905"
this._options has only one value
this._options._parent has only one value
return has only one value
return.toString == "SimpleDynamic1743934291905"
===========================================================================
com.mongodb.DB.isValidName(java.lang.String):::ENTER
this._mongo == null
this._name == null
this._options == null
dbname.toString one of { "SimpleDynamic1743934291905", "test" }
===========================================================================
com.mongodb.DB.isValidName(java.lang.String):::EXIT
com.mongodb.DB._obedientCommands == orig(com.mongodb.DB._obedientCommands)
com.mongodb.DB._obedientCommands.getClass().getName() == orig(com.mongodb.DB._obedientCommands.getClass().getName())
this._mongo == orig(this._mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this._name == orig(this._name)
this._readOnly == orig(this._readOnly)
this._concern == orig(this._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this._readPref == orig(this._readPref)
this._options == orig(this._options)
this.authenticationTestCommandResult == orig(this.authenticationTestCommandResult)
dbname.toString == orig(dbname.toString)
this._mongo == null
this._name == null
this._options == null
dbname.toString one of { "SimpleDynamic1743934291905", "test" }
return == true
===========================================================================
com.mongodb.DB.isValidName(java.lang.String):::EXIT;condition="return == true"
===========================================================================
com.mongodb.DBApiLayer:::CLASS
com.mongodb.DB._obedientCommands has only one value
com.mongodb.DB._obedientCommands != null
com.mongodb.DB._obedientCommands.getClass().getName() == java.util.HashSet.class
===========================================================================
com.mongodb.DBApiLayer:::OBJECT
this._root != null
this._root.toString one of { "SimpleDynamic1743934291905", "test" }
this._rootPlusDot != null
this._rootPlusDot.toString one of { "SimpleDynamic1743934291905.", "test." }
this._connector != null
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID has only one value
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID != null
this._connector._closed == false
this._connector._mongo != null
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.logger != null
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION != null
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME != null
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
this._connector._mongo._options != null
this._connector._mongo._connector != null
this._connector._mongo._dbs != null
this._connector._mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
this._connector._mongo._concern has only one value
this._connector._mongo._concern != null
this._connector._mongo._readPref has only one value
this._connector._mongo._readPref != null
this._connector._mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
this._connector._mongo._netOptions != null
this._connector._mongo._cleaner != null
this._connector._mongo._authority != null
this._connector._mongo._bufferPool != null
this._connector._mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
this._connector.cluster != null
this._connector.cluster.getClass().getName() == com.mongodb.SingleServerCluster.class
this._connector._myPort != null
this._connector._myPort.pinnedRequestStatusThreadLocal != null
this._connector.connectionMode has only one value
this._connector.connectionMode != null
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Single != null
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.Multiple != null
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES != null
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[] elements != null
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
this._connector.type has only one value
this._connector.type != null
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.StandAlone != null
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.ReplicaSet != null
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Sharded != null
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.Unknown != null
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES != null
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[] elements != null
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
this._connector.mongosHAServerSelector == null
this._collections != null
this._deadCursorIds != null
this._mongo != null
this._mongo._options != null
this._mongo._options.description == null
this._mongo._options.connectionsPerHost == 10
this._mongo._options.threadsAllowedToBlockForConnectionMultiplier == 5
this._mongo._options.maxWaitTime == 120000
this._mongo._options.connectTimeout == 10000
this._mongo._options.socketTimeout == 0
this._mongo._options.socketKeepAlive == false
this._mongo._options.autoConnectRetry == false
this._mongo._options.maxAutoConnectRetryTime == 0
this._mongo._options.slaveOk == false
this._mongo._options.readPreference == null
this._mongo._options.dbDecoderFactory has only one value
this._mongo._options.dbDecoderFactory != null
this._mongo._options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
this._mongo._options.dbEncoderFactory has only one value
this._mongo._options.dbEncoderFactory != null
this._mongo._options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
this._mongo._options.safe == false
this._mongo._options.w == 0
this._mongo._options.wtimeout == 0
this._mongo._options.fsync == false
this._mongo._options.j == false
this._mongo._options.socketFactory has only one value
this._mongo._options.socketFactory != null
this._mongo._options.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
this._mongo._options.cursorFinalizerEnabled == true
this._mongo._options.writeConcern == null
this._mongo._options.alwaysUseMBeans == false
this._mongo._options.minConnectionsPerHost == 0
this._mongo._options.maxConnectionIdleTime == 0
this._mongo._options.maxConnectionLifeTime == 0
this._mongo._options.heartbeatFrequencyMS == 5000
this._mongo._options.heartbeatConnectRetryFrequencyMS == 10
this._mongo._options.heartbeatConnectTimeoutMS == 20000
this._mongo._options.heartbeatReadTimeoutMS == 20000
this._mongo._options.acceptableLatencyDifferenceMS == 15
this._mongo._options.heartbeatThreadCount == 0
this._mongo._options.requiredReplicaSetName == null
this._mongo._connector != null
this._mongo._connector._closed == false
this._mongo._connector._mongo != null
this._mongo._connector.cluster != null
this._mongo._connector.cluster.getClass().getName() == com.mongodb.SingleServerCluster.class
this._mongo._connector._myPort != null
this._mongo._connector.connectionMode has only one value
this._mongo._connector.connectionMode != null
this._mongo._connector.type has only one value
this._mongo._connector.type != null
this._mongo._connector.mongosHAServerSelector == null
this._mongo._dbs != null
this._mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
this._mongo._concern has only one value
this._mongo._concern != null
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ERRORS_IGNORED != null
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED != null
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED != null
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.FSYNCED != null
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.JOURNALED != null
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED != null
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NONE != null
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.NORMAL != null
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.SAFE != null
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.MAJORITY != null
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.FSYNC_SAFE != null
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE != null
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE != null
com.mongodb.WriteConcern._namedConcerns == null
this._mongo._concern._w has only one value
this._mongo._concern._w != null
this._mongo._concern._w.getClass().getName() == java.lang.Integer.class
this._mongo._concern._wtimeout == 0
this._mongo._concern._fsync == false
this._mongo._concern._j == false
this._mongo._concern._continueOnError == false
this._mongo._readPref has only one value
this._mongo._readPref != null
this._mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY != null
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY != null
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY has only one value
com.mongodb.ReadPreference._PRIMARY != null
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY != null
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY_PREFERRED has only one value
com.mongodb.ReadPreference._SECONDARY_PREFERRED != null
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED != null
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST != null
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
this._mongo._netOptions != null
this._mongo._netOptions._parent == null
this._mongo._netOptions._options == 0
this._mongo._netOptions._hasOptions == false
this._mongo._cleaner != null
this._mongo._authority != null
this._mongo._authority.type has only one value
this._mongo._authority.type != null
this._mongo._authority.serverAddresses != null
this._mongo._authority.serverAddresses[] elements != null
this._mongo._authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
this._mongo._authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
this._mongo._authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
this._mongo._authority.credentialsStore != null
this._mongo._bufferPool != null
this._mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
this._mongo._bufferPool._max == 1000
this._mongo._bufferPool._stored != null
this._mongo._bufferPool._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
this._name != null
this._name.toString one of { "SimpleDynamic1743934291905", "test" }
this._readOnly == false
this._concern == null
com.mongodb.WriteConcern.ERRORS_IGNORED._w has only one value
com.mongodb.WriteConcern.ERRORS_IGNORED._w != null
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == 0
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == false
com.mongodb.WriteConcern.ERRORS_IGNORED._j == false
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == false
com.mongodb.WriteConcern.ACKNOWLEDGED._w has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED._w != null
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == 0
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == false
com.mongodb.WriteConcern.ACKNOWLEDGED._j == false
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == false
com.mongodb.WriteConcern.UNACKNOWLEDGED._w has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED._w != null
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == 0
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == false
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == false
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == false
com.mongodb.WriteConcern.FSYNCED._w has only one value
com.mongodb.WriteConcern.FSYNCED._w != null
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.FSYNCED._wtimeout == 0
com.mongodb.WriteConcern.FSYNCED._fsync == true
com.mongodb.WriteConcern.FSYNCED._j == false
com.mongodb.WriteConcern.FSYNCED._continueOnError == false
com.mongodb.WriteConcern.JOURNALED._w has only one value
com.mongodb.WriteConcern.JOURNALED._w != null
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.JOURNALED._wtimeout == 0
com.mongodb.WriteConcern.JOURNALED._fsync == false
com.mongodb.WriteConcern.JOURNALED._j == true
com.mongodb.WriteConcern.JOURNALED._continueOnError == false
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w != null
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == 0
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == false
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == false
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == false
com.mongodb.WriteConcern.NONE._w has only one value
com.mongodb.WriteConcern.NONE._w != null
com.mongodb.WriteConcern.NONE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.NONE._wtimeout == 0
com.mongodb.WriteConcern.NONE._fsync == false
com.mongodb.WriteConcern.NONE._j == false
com.mongodb.WriteConcern.NONE._continueOnError == false
com.mongodb.WriteConcern.NORMAL._w has only one value
com.mongodb.WriteConcern.NORMAL._w != null
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.NORMAL._wtimeout == 0
com.mongodb.WriteConcern.NORMAL._fsync == false
com.mongodb.WriteConcern.NORMAL._j == false
com.mongodb.WriteConcern.NORMAL._continueOnError == false
com.mongodb.WriteConcern.SAFE._w has only one value
com.mongodb.WriteConcern.SAFE._w != null
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.SAFE._wtimeout == 0
com.mongodb.WriteConcern.SAFE._fsync == false
com.mongodb.WriteConcern.SAFE._j == false
com.mongodb.WriteConcern.SAFE._continueOnError == false
com.mongodb.WriteConcern.MAJORITY._w has only one value
com.mongodb.WriteConcern.MAJORITY._w != null
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == java.lang.String.class
com.mongodb.WriteConcern.MAJORITY._wtimeout == 0
com.mongodb.WriteConcern.MAJORITY._fsync == false
com.mongodb.WriteConcern.MAJORITY._j == false
com.mongodb.WriteConcern.MAJORITY._continueOnError == false
com.mongodb.WriteConcern.FSYNC_SAFE._w has only one value
com.mongodb.WriteConcern.FSYNC_SAFE._w != null
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == 0
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == true
com.mongodb.WriteConcern.FSYNC_SAFE._j == false
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == false
com.mongodb.WriteConcern.JOURNAL_SAFE._w has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE._w != null
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == 0
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == false
com.mongodb.WriteConcern.JOURNAL_SAFE._j == true
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == false
com.mongodb.WriteConcern.REPLICAS_SAFE._w has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE._w != null
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == 0
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == false
com.mongodb.WriteConcern.REPLICAS_SAFE._j == false
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == false
this._readPref == null
this._options != null
this._options._parent != null
this._options._parent._parent == null
this._options._parent._options == 0
this._options._parent._hasOptions == false
this._options._options == 0
this._options._hasOptions == false
this.authenticationTestCommandResult == null
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
size(this._mongo._authority.serverAddresses[]) == 1
===========================================================================
com.mongodb.DBApiLayer.DBApiLayer(com.mongodb.Mongo, java.lang.String, com.mongodb.DBConnector):::ENTER
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
mongo._options.description == null
mongo._options.connectionsPerHost == 10
mongo._options.threadsAllowedToBlockForConnectionMultiplier == 5
mongo._options.maxWaitTime == 120000
mongo._options.connectTimeout == 10000
mongo._options.socketTimeout == 0
mongo._options.socketKeepAlive == false
mongo._options.autoConnectRetry == false
mongo._options.maxAutoConnectRetryTime == 0
mongo._options.slaveOk == false
mongo._options.readPreference == null
mongo._options.dbDecoderFactory has only one value
mongo._options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
mongo._options.dbEncoderFactory has only one value
mongo._options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
mongo._options.safe == false
mongo._options.w == 0
mongo._options.wtimeout == 0
mongo._options.fsync == false
mongo._options.j == false
mongo._options.socketFactory has only one value
mongo._options.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
mongo._options.cursorFinalizerEnabled == true
mongo._options.writeConcern == null
mongo._options.alwaysUseMBeans == false
mongo._options.minConnectionsPerHost == 0
mongo._options.maxConnectionIdleTime == 0
mongo._options.maxConnectionLifeTime == 0
mongo._options.heartbeatFrequencyMS == 5000
mongo._options.heartbeatConnectRetryFrequencyMS == 10
mongo._options.heartbeatConnectTimeoutMS == 20000
mongo._options.heartbeatReadTimeoutMS == 20000
mongo._options.acceptableLatencyDifferenceMS == 15
mongo._options.heartbeatThreadCount == 0
mongo._options.requiredReplicaSetName == null
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID has only one value
mongo._connector._closed == false
mongo._connector.cluster.getClass().getName() == com.mongodb.SingleServerCluster.class
mongo._connector.connectionMode has only one value
mongo._connector.type has only one value
mongo._connector.mongosHAServerSelector == null
mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
mongo._concern has only one value
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
mongo._concern._w has only one value
mongo._concern._w.getClass().getName() == java.lang.Integer.class
mongo._concern._wtimeout == 0
mongo._concern._fsync == false
mongo._concern._j == false
mongo._concern._continueOnError == false
mongo._readPref has only one value
mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY has only one value
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY_PREFERRED has only one value
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
mongo._netOptions._parent == null
mongo._netOptions._options == 0
mongo._netOptions._hasOptions == false
mongo._authority.type has only one value
mongo._authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
mongo._authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
mongo._authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
mongo._bufferPool._max == 1000
mongo._bufferPool._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
name.toString one of { "SimpleDynamic1743934291905", "test" }
connector.getClass().getName() == com.mongodb.DBTCPConnector.class
size(mongo._authority.serverAddresses[]) == 1
===========================================================================
com.mongodb.DBApiLayer.DBApiLayer(com.mongodb.Mongo, java.lang.String, com.mongodb.DBConnector):::EXIT
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
com.mongodb.Mongo.this == orig(com.mongodb.Mongo.this)
mongo._options == orig(mongo._options)
mongo._options.description == orig(mongo._options.description)
mongo._options.connectionsPerHost == orig(mongo._options.connectionsPerHost)
mongo._options.threadsAllowedToBlockForConnectionMultiplier == orig(mongo._options.threadsAllowedToBlockForConnectionMultiplier)
mongo._options.maxWaitTime == orig(mongo._options.maxWaitTime)
mongo._options.connectTimeout == orig(mongo._options.connectTimeout)
mongo._options.socketTimeout == orig(mongo._options.socketTimeout)
mongo._options.socketKeepAlive == orig(mongo._options.socketKeepAlive)
mongo._options.autoConnectRetry == orig(mongo._options.autoConnectRetry)
mongo._options.maxAutoConnectRetryTime == orig(mongo._options.maxAutoConnectRetryTime)
mongo._options.slaveOk == orig(mongo._options.slaveOk)
mongo._options.readPreference == orig(mongo._options.readPreference)
mongo._options.dbDecoderFactory == orig(mongo._options.dbDecoderFactory)
mongo._options.dbDecoderFactory.getClass().getName() == orig(mongo._options.dbDecoderFactory.getClass().getName())
mongo._options.dbEncoderFactory == orig(mongo._options.dbEncoderFactory)
mongo._options.dbEncoderFactory.getClass().getName() == orig(mongo._options.dbEncoderFactory.getClass().getName())
mongo._options.safe == orig(mongo._options.safe)
mongo._options.w == orig(mongo._options.w)
mongo._options.wtimeout == orig(mongo._options.wtimeout)
mongo._options.fsync == orig(mongo._options.fsync)
mongo._options.j == orig(mongo._options.j)
mongo._options.socketFactory == orig(mongo._options.socketFactory)
mongo._options.socketFactory.getClass().getName() == orig(mongo._options.socketFactory.getClass().getName())
mongo._options.cursorFinalizerEnabled == orig(mongo._options.cursorFinalizerEnabled)
mongo._options.writeConcern == orig(mongo._options.writeConcern)
mongo._options.alwaysUseMBeans == orig(mongo._options.alwaysUseMBeans)
mongo._options.minConnectionsPerHost == orig(mongo._options.minConnectionsPerHost)
mongo._options.maxConnectionIdleTime == orig(mongo._options.maxConnectionIdleTime)
mongo._options.maxConnectionLifeTime == orig(mongo._options.maxConnectionLifeTime)
mongo._options.heartbeatFrequencyMS == orig(mongo._options.heartbeatFrequencyMS)
mongo._options.heartbeatConnectRetryFrequencyMS == orig(mongo._options.heartbeatConnectRetryFrequencyMS)
mongo._options.heartbeatConnectTimeoutMS == orig(mongo._options.heartbeatConnectTimeoutMS)
mongo._options.heartbeatReadTimeoutMS == orig(mongo._options.heartbeatReadTimeoutMS)
mongo._options.acceptableLatencyDifferenceMS == orig(mongo._options.acceptableLatencyDifferenceMS)
mongo._options.heartbeatThreadCount == orig(mongo._options.heartbeatThreadCount)
mongo._options.requiredReplicaSetName == orig(mongo._options.requiredReplicaSetName)
mongo._connector == orig(mongo._connector)
mongo._connector._closed == orig(mongo._connector._closed)
mongo._connector._mongo == orig(mongo._connector._mongo)
mongo._connector.cluster == orig(mongo._connector.cluster)
mongo._connector.cluster.getClass().getName() == orig(mongo._connector.cluster.getClass().getName())
mongo._connector._myPort == orig(mongo._connector._myPort)
mongo._connector.connectionMode == orig(mongo._connector.connectionMode)
mongo._connector.type == orig(mongo._connector.type)
mongo._connector.mongosHAServerSelector == orig(mongo._connector.mongosHAServerSelector)
mongo._dbs == orig(mongo._dbs)
mongo._dbs.getClass().getName() == orig(mongo._dbs.getClass().getName())
mongo._concern == orig(mongo._concern)
mongo._concern._w == orig(mongo._concern._w)
mongo._concern._w.getClass().getName() == orig(mongo._concern._w.getClass().getName())
mongo._concern._wtimeout == orig(mongo._concern._wtimeout)
mongo._concern._fsync == orig(mongo._concern._fsync)
mongo._concern._j == orig(mongo._concern._j)
mongo._concern._continueOnError == orig(mongo._concern._continueOnError)
mongo._readPref == orig(mongo._readPref)
mongo._readPref.getClass().getName() == orig(mongo._readPref.getClass().getName())
mongo._netOptions == orig(mongo._netOptions)
mongo._netOptions._parent == orig(mongo._netOptions._parent)
mongo._netOptions._options == orig(mongo._netOptions._options)
mongo._netOptions._hasOptions == orig(mongo._netOptions._hasOptions)
mongo._cleaner == orig(mongo._cleaner)
mongo._authority == orig(mongo._authority)
mongo._authority.type == orig(mongo._authority.type)
mongo._authority.serverAddresses == orig(mongo._authority.serverAddresses)
mongo._authority.serverAddresses[] == orig(mongo._authority.serverAddresses[])
mongo._authority.serverAddresses.getClass().getName() == orig(mongo._authority.serverAddresses.getClass().getName())
mongo._authority.credentialsStore == orig(mongo._authority.credentialsStore)
mongo._bufferPool == orig(mongo._bufferPool)
mongo._bufferPool.getClass().getName() == orig(mongo._bufferPool.getClass().getName())
mongo._bufferPool._max == orig(mongo._bufferPool._max)
mongo._bufferPool._stored == orig(mongo._bufferPool._stored)
mongo._bufferPool._stored.getClass().getName() == orig(mongo._bufferPool._stored.getClass().getName())
name.toString == orig(name.toString)
mongo._options.description == null
mongo._options.connectionsPerHost == 10
mongo._options.threadsAllowedToBlockForConnectionMultiplier == 5
mongo._options.maxWaitTime == 120000
mongo._options.connectTimeout == 10000
mongo._options.socketTimeout == 0
mongo._options.socketKeepAlive == false
mongo._options.autoConnectRetry == false
mongo._options.maxAutoConnectRetryTime == 0
mongo._options.slaveOk == false
mongo._options.readPreference == null
mongo._options.dbDecoderFactory has only one value
mongo._options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
mongo._options.dbEncoderFactory has only one value
mongo._options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
mongo._options.safe == false
mongo._options.w == 0
mongo._options.wtimeout == 0
mongo._options.fsync == false
mongo._options.j == false
mongo._options.socketFactory has only one value
mongo._options.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
mongo._options.cursorFinalizerEnabled == true
mongo._options.writeConcern == null
mongo._options.alwaysUseMBeans == false
mongo._options.minConnectionsPerHost == 0
mongo._options.maxConnectionIdleTime == 0
mongo._options.maxConnectionLifeTime == 0
mongo._options.heartbeatFrequencyMS == 5000
mongo._options.heartbeatConnectRetryFrequencyMS == 10
mongo._options.heartbeatConnectTimeoutMS == 20000
mongo._options.heartbeatReadTimeoutMS == 20000
mongo._options.acceptableLatencyDifferenceMS == 15
mongo._options.heartbeatThreadCount == 0
mongo._options.requiredReplicaSetName == null
mongo._connector._closed == false
mongo._connector.cluster.getClass().getName() == com.mongodb.SingleServerCluster.class
mongo._connector.connectionMode has only one value
mongo._connector.type has only one value
mongo._connector.mongosHAServerSelector == null
mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
mongo._concern has only one value
mongo._concern._w has only one value
mongo._concern._w.getClass().getName() == java.lang.Integer.class
mongo._concern._wtimeout == 0
mongo._concern._fsync == false
mongo._concern._j == false
mongo._concern._continueOnError == false
mongo._readPref has only one value
mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
mongo._netOptions._parent == null
mongo._netOptions._options == 0
mongo._netOptions._hasOptions == false
mongo._authority.type has only one value
mongo._authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
mongo._authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
mongo._authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
mongo._bufferPool._max == 1000
mongo._bufferPool._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
name.toString one of { "SimpleDynamic1743934291905", "test" }
size(mongo._authority.serverAddresses[]) == 1
===========================================================================
com.mongodb.DBApiLayer.cleanCursors(boolean):::ENTER
force == true
===========================================================================
com.mongodb.DBApiLayer.cleanCursors(boolean):::EXIT142
===========================================================================
com.mongodb.DBApiLayer.cleanCursors(boolean):::EXIT
this._root == orig(this._root)
this._root.toString == orig(this._root.toString)
this._rootPlusDot == orig(this._rootPlusDot)
this._rootPlusDot.toString == orig(this._rootPlusDot.toString)
this._connector == orig(this._connector)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
this._connector._closed == orig(this._connector._closed)
this._connector._mongo == orig(this._connector._mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this._connector._mongo._options == orig(this._connector._mongo._options)
this._connector._mongo._connector == orig(this._connector._mongo._connector)
this._connector._mongo._dbs == orig(this._connector._mongo._dbs)
this._connector._mongo._dbs.getClass().getName() == orig(this._connector._mongo._dbs.getClass().getName())
this._connector._mongo._concern == orig(this._connector._mongo._concern)
this._connector._mongo._readPref == orig(this._connector._mongo._readPref)
this._connector._mongo._readPref.getClass().getName() == orig(this._connector._mongo._readPref.getClass().getName())
this._connector._mongo._netOptions == orig(this._connector._mongo._netOptions)
this._connector._mongo._cleaner == orig(this._connector._mongo._cleaner)
this._connector._mongo._authority == orig(this._connector._mongo._authority)
this._connector._mongo._bufferPool == orig(this._connector._mongo._bufferPool)
this._connector._mongo._bufferPool.getClass().getName() == orig(this._connector._mongo._bufferPool.getClass().getName())
this._connector.cluster == orig(this._connector.cluster)
this._connector.cluster.getClass().getName() == orig(this._connector.cluster.getClass().getName())
this._connector._myPort == orig(this._connector._myPort)
this._connector._myPort.pinnedRequestStatusThreadLocal == orig(this._connector._myPort.pinnedRequestStatusThreadLocal)
com.mongodb.DBTCPConnector.this == orig(com.mongodb.DBTCPConnector.this)
this._connector.connectionMode == orig(this._connector.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
this._connector.type == orig(this._connector.type)
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this._connector.mongosHAServerSelector == orig(this._connector.mongosHAServerSelector)
this._collections == orig(this._collections)
this._deadCursorIds == orig(this._deadCursorIds)
com.mongodb.DB._obedientCommands == orig(com.mongodb.DB._obedientCommands)
com.mongodb.DB._obedientCommands.getClass().getName() == orig(com.mongodb.DB._obedientCommands.getClass().getName())
this._mongo == orig(this._mongo)
this._mongo._options == orig(this._mongo._options)
this._mongo._options.description == orig(this._mongo._options.description)
this._mongo._options.connectionsPerHost == orig(this._mongo._options.connectionsPerHost)
this._mongo._options.threadsAllowedToBlockForConnectionMultiplier == orig(this._mongo._options.threadsAllowedToBlockForConnectionMultiplier)
this._mongo._options.maxWaitTime == orig(this._mongo._options.maxWaitTime)
this._mongo._options.connectTimeout == orig(this._mongo._options.connectTimeout)
this._mongo._options.socketTimeout == orig(this._mongo._options.socketTimeout)
this._mongo._options.socketKeepAlive == orig(this._mongo._options.socketKeepAlive)
this._mongo._options.autoConnectRetry == orig(this._mongo._options.autoConnectRetry)
this._mongo._options.maxAutoConnectRetryTime == orig(this._mongo._options.maxAutoConnectRetryTime)
this._mongo._options.slaveOk == orig(this._mongo._options.slaveOk)
this._mongo._options.readPreference == orig(this._mongo._options.readPreference)
this._mongo._options.dbDecoderFactory == orig(this._mongo._options.dbDecoderFactory)
this._mongo._options.dbDecoderFactory.getClass().getName() == orig(this._mongo._options.dbDecoderFactory.getClass().getName())
this._mongo._options.dbEncoderFactory == orig(this._mongo._options.dbEncoderFactory)
this._mongo._options.dbEncoderFactory.getClass().getName() == orig(this._mongo._options.dbEncoderFactory.getClass().getName())
this._mongo._options.safe == orig(this._mongo._options.safe)
this._mongo._options.w == orig(this._mongo._options.w)
this._mongo._options.wtimeout == orig(this._mongo._options.wtimeout)
this._mongo._options.fsync == orig(this._mongo._options.fsync)
this._mongo._options.j == orig(this._mongo._options.j)
this._mongo._options.socketFactory == orig(this._mongo._options.socketFactory)
this._mongo._options.socketFactory.getClass().getName() == orig(this._mongo._options.socketFactory.getClass().getName())
this._mongo._options.cursorFinalizerEnabled == orig(this._mongo._options.cursorFinalizerEnabled)
this._mongo._options.writeConcern == orig(this._mongo._options.writeConcern)
this._mongo._options.alwaysUseMBeans == orig(this._mongo._options.alwaysUseMBeans)
this._mongo._options.minConnectionsPerHost == orig(this._mongo._options.minConnectionsPerHost)
this._mongo._options.maxConnectionIdleTime == orig(this._mongo._options.maxConnectionIdleTime)
this._mongo._options.maxConnectionLifeTime == orig(this._mongo._options.maxConnectionLifeTime)
this._mongo._options.heartbeatFrequencyMS == orig(this._mongo._options.heartbeatFrequencyMS)
this._mongo._options.heartbeatConnectRetryFrequencyMS == orig(this._mongo._options.heartbeatConnectRetryFrequencyMS)
this._mongo._options.heartbeatConnectTimeoutMS == orig(this._mongo._options.heartbeatConnectTimeoutMS)
this._mongo._options.heartbeatReadTimeoutMS == orig(this._mongo._options.heartbeatReadTimeoutMS)
this._mongo._options.acceptableLatencyDifferenceMS == orig(this._mongo._options.acceptableLatencyDifferenceMS)
this._mongo._options.heartbeatThreadCount == orig(this._mongo._options.heartbeatThreadCount)
this._mongo._options.requiredReplicaSetName == orig(this._mongo._options.requiredReplicaSetName)
this._mongo._connector == orig(this._mongo._connector)
this._mongo._connector._closed == orig(this._mongo._connector._closed)
this._mongo._connector._mongo == orig(this._mongo._connector._mongo)
this._mongo._connector.cluster == orig(this._mongo._connector.cluster)
this._mongo._connector.cluster.getClass().getName() == orig(this._mongo._connector.cluster.getClass().getName())
this._mongo._connector._myPort == orig(this._mongo._connector._myPort)
this._mongo._connector.connectionMode == orig(this._mongo._connector.connectionMode)
this._mongo._connector.type == orig(this._mongo._connector.type)
this._mongo._connector.mongosHAServerSelector == orig(this._mongo._connector.mongosHAServerSelector)
this._mongo._dbs == orig(this._mongo._dbs)
this._mongo._dbs.getClass().getName() == orig(this._mongo._dbs.getClass().getName())
this._mongo._concern == orig(this._mongo._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this._mongo._concern._w == orig(this._mongo._concern._w)
this._mongo._concern._w.getClass().getName() == orig(this._mongo._concern._w.getClass().getName())
this._mongo._concern._wtimeout == orig(this._mongo._concern._wtimeout)
this._mongo._concern._fsync == orig(this._mongo._concern._fsync)
this._mongo._concern._j == orig(this._mongo._concern._j)
this._mongo._concern._continueOnError == orig(this._mongo._concern._continueOnError)
this._mongo._readPref == orig(this._mongo._readPref)
this._mongo._readPref.getClass().getName() == orig(this._mongo._readPref.getClass().getName())
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this._mongo._netOptions == orig(this._mongo._netOptions)
this._mongo._netOptions._parent == orig(this._mongo._netOptions._parent)
this._mongo._netOptions._options == orig(this._mongo._netOptions._options)
this._mongo._netOptions._hasOptions == orig(this._mongo._netOptions._hasOptions)
this._mongo._cleaner == orig(this._mongo._cleaner)
com.mongodb.Mongo.this == orig(com.mongodb.Mongo.this)
this._mongo._authority == orig(this._mongo._authority)
this._mongo._authority.type == orig(this._mongo._authority.type)
this._mongo._authority.serverAddresses == orig(this._mongo._authority.serverAddresses)
this._mongo._authority.serverAddresses[] == orig(this._mongo._authority.serverAddresses[])
this._mongo._authority.serverAddresses.getClass().getName() == orig(this._mongo._authority.serverAddresses.getClass().getName())
this._mongo._authority.credentialsStore == orig(this._mongo._authority.credentialsStore)
this._mongo._bufferPool == orig(this._mongo._bufferPool)
this._mongo._bufferPool.getClass().getName() == orig(this._mongo._bufferPool.getClass().getName())
this._mongo._bufferPool._max == orig(this._mongo._bufferPool._max)
this._mongo._bufferPool._stored == orig(this._mongo._bufferPool._stored)
this._mongo._bufferPool._stored.getClass().getName() == orig(this._mongo._bufferPool._stored.getClass().getName())
this._name == orig(this._name)
this._name.toString == orig(this._name.toString)
this._readOnly == orig(this._readOnly)
this._concern == orig(this._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this._readPref == orig(this._readPref)
this._options == orig(this._options)
this._options._parent == orig(this._options._parent)
this._options._parent._parent == orig(this._options._parent._parent)
this._options._parent._options == orig(this._options._parent._options)
this._options._parent._hasOptions == orig(this._options._parent._hasOptions)
this._options._options == orig(this._options._options)
this._options._hasOptions == orig(this._options._hasOptions)
this.authenticationTestCommandResult == orig(this.authenticationTestCommandResult)
===========================================================================
com.mongodb.DBApiLayer.doGetCollection(java.lang.String):::ENTER
this has only one value
this._root has only one value
this._root.toString == "SimpleDynamic1743934291905"
this._rootPlusDot has only one value
this._rootPlusDot.toString == "SimpleDynamic1743934291905."
this._connector has only one value
this._connector._mongo has only one value
this._connector._mongo._options has only one value
this._connector._mongo._connector has only one value
this._connector._mongo._dbs has only one value
this._connector._mongo._netOptions has only one value
this._connector._mongo._cleaner has only one value
this._connector._mongo._authority has only one value
this._connector._mongo._bufferPool has only one value
this._connector.cluster has only one value
this._connector._myPort has only one value
this._connector._myPort.pinnedRequestStatusThreadLocal has only one value
com.mongodb.DBTCPConnector.this has only one value
this._collections has only one value
this._deadCursorIds has only one value
this._mongo has only one value
this._mongo._options has only one value
this._mongo._connector has only one value
this._mongo._connector._mongo has only one value
this._mongo._connector.cluster has only one value
this._mongo._connector._myPort has only one value
this._mongo._dbs has only one value
this._mongo._netOptions has only one value
this._mongo._cleaner has only one value
com.mongodb.Mongo.this has only one value
this._mongo._authority has only one value
this._mongo._authority.serverAddresses has only one value
this._mongo._authority.serverAddresses[] contains no nulls and has only one value, of length 1
this._mongo._authority.serverAddresses[] elements has only one value
this._mongo._authority.credentialsStore has only one value
this._mongo._bufferPool has only one value
this._mongo._bufferPool._stored has only one value
this._name has only one value
this._name.toString == "SimpleDynamic1743934291905"
this._options has only one value
this._options._parent has only one value
name has only one value
name.toString == "aggr_results"
===========================================================================
com.mongodb.DBApiLayer.doGetCollection(java.lang.String):::EXIT129
===========================================================================
com.mongodb.DBApiLayer.doGetCollection(java.lang.String):::EXIT
this._root == orig(this._root)
this._root.toString == orig(this._root.toString)
this._rootPlusDot == orig(this._rootPlusDot)
this._rootPlusDot.toString == orig(this._rootPlusDot.toString)
this._connector == orig(this._connector)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
this._connector._closed == orig(this._connector._closed)
this._connector._mongo == orig(this._connector._mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this._connector._mongo._options == orig(this._connector._mongo._options)
this._connector._mongo._connector == orig(this._connector._mongo._connector)
this._connector._mongo._dbs == orig(this._connector._mongo._dbs)
this._connector._mongo._dbs.getClass().getName() == orig(this._connector._mongo._dbs.getClass().getName())
this._connector._mongo._concern == orig(this._connector._mongo._concern)
this._connector._mongo._readPref == orig(this._connector._mongo._readPref)
this._connector._mongo._readPref.getClass().getName() == orig(this._connector._mongo._readPref.getClass().getName())
this._connector._mongo._netOptions == orig(this._connector._mongo._netOptions)
this._connector._mongo._cleaner == orig(this._connector._mongo._cleaner)
this._connector._mongo._authority == orig(this._connector._mongo._authority)
this._connector._mongo._bufferPool == orig(this._connector._mongo._bufferPool)
this._connector._mongo._bufferPool.getClass().getName() == orig(this._connector._mongo._bufferPool.getClass().getName())
this._connector.cluster == orig(this._connector.cluster)
this._connector.cluster.getClass().getName() == orig(this._connector.cluster.getClass().getName())
this._connector._myPort == orig(this._connector._myPort)
this._connector._myPort.pinnedRequestStatusThreadLocal == orig(this._connector._myPort.pinnedRequestStatusThreadLocal)
com.mongodb.DBTCPConnector.this == orig(com.mongodb.DBTCPConnector.this)
this._connector.connectionMode == orig(this._connector.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
this._connector.type == orig(this._connector.type)
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this._connector.mongosHAServerSelector == orig(this._connector.mongosHAServerSelector)
this._collections == orig(this._collections)
this._deadCursorIds == orig(this._deadCursorIds)
com.mongodb.DB._obedientCommands == orig(com.mongodb.DB._obedientCommands)
com.mongodb.DB._obedientCommands.getClass().getName() == orig(com.mongodb.DB._obedientCommands.getClass().getName())
this._mongo == orig(this._mongo)
this._mongo._options == orig(this._mongo._options)
this._mongo._options.description == orig(this._mongo._options.description)
this._mongo._options.connectionsPerHost == orig(this._mongo._options.connectionsPerHost)
this._mongo._options.threadsAllowedToBlockForConnectionMultiplier == orig(this._mongo._options.threadsAllowedToBlockForConnectionMultiplier)
this._mongo._options.maxWaitTime == orig(this._mongo._options.maxWaitTime)
this._mongo._options.connectTimeout == orig(this._mongo._options.connectTimeout)
this._mongo._options.socketTimeout == orig(this._mongo._options.socketTimeout)
this._mongo._options.socketKeepAlive == orig(this._mongo._options.socketKeepAlive)
this._mongo._options.autoConnectRetry == orig(this._mongo._options.autoConnectRetry)
this._mongo._options.maxAutoConnectRetryTime == orig(this._mongo._options.maxAutoConnectRetryTime)
this._mongo._options.slaveOk == orig(this._mongo._options.slaveOk)
this._mongo._options.readPreference == orig(this._mongo._options.readPreference)
this._mongo._options.dbDecoderFactory == orig(this._mongo._options.dbDecoderFactory)
this._mongo._options.dbDecoderFactory.getClass().getName() == orig(this._mongo._options.dbDecoderFactory.getClass().getName())
this._mongo._options.dbEncoderFactory == orig(this._mongo._options.dbEncoderFactory)
this._mongo._options.dbEncoderFactory.getClass().getName() == orig(this._mongo._options.dbEncoderFactory.getClass().getName())
this._mongo._options.safe == orig(this._mongo._options.safe)
this._mongo._options.w == orig(this._mongo._options.w)
this._mongo._options.wtimeout == orig(this._mongo._options.wtimeout)
this._mongo._options.fsync == orig(this._mongo._options.fsync)
this._mongo._options.j == orig(this._mongo._options.j)
this._mongo._options.socketFactory == orig(this._mongo._options.socketFactory)
this._mongo._options.socketFactory.getClass().getName() == orig(this._mongo._options.socketFactory.getClass().getName())
this._mongo._options.cursorFinalizerEnabled == orig(this._mongo._options.cursorFinalizerEnabled)
this._mongo._options.writeConcern == orig(this._mongo._options.writeConcern)
this._mongo._options.alwaysUseMBeans == orig(this._mongo._options.alwaysUseMBeans)
this._mongo._options.minConnectionsPerHost == orig(this._mongo._options.minConnectionsPerHost)
this._mongo._options.maxConnectionIdleTime == orig(this._mongo._options.maxConnectionIdleTime)
this._mongo._options.maxConnectionLifeTime == orig(this._mongo._options.maxConnectionLifeTime)
this._mongo._options.heartbeatFrequencyMS == orig(this._mongo._options.heartbeatFrequencyMS)
this._mongo._options.heartbeatConnectRetryFrequencyMS == orig(this._mongo._options.heartbeatConnectRetryFrequencyMS)
this._mongo._options.heartbeatConnectTimeoutMS == orig(this._mongo._options.heartbeatConnectTimeoutMS)
this._mongo._options.heartbeatReadTimeoutMS == orig(this._mongo._options.heartbeatReadTimeoutMS)
this._mongo._options.acceptableLatencyDifferenceMS == orig(this._mongo._options.acceptableLatencyDifferenceMS)
this._mongo._options.heartbeatThreadCount == orig(this._mongo._options.heartbeatThreadCount)
this._mongo._options.requiredReplicaSetName == orig(this._mongo._options.requiredReplicaSetName)
this._mongo._connector == orig(this._mongo._connector)
this._mongo._connector._closed == orig(this._mongo._connector._closed)
this._mongo._connector._mongo == orig(this._mongo._connector._mongo)
this._mongo._connector.cluster == orig(this._mongo._connector.cluster)
this._mongo._connector.cluster.getClass().getName() == orig(this._mongo._connector.cluster.getClass().getName())
this._mongo._connector._myPort == orig(this._mongo._connector._myPort)
this._mongo._connector.connectionMode == orig(this._mongo._connector.connectionMode)
this._mongo._connector.type == orig(this._mongo._connector.type)
this._mongo._connector.mongosHAServerSelector == orig(this._mongo._connector.mongosHAServerSelector)
this._mongo._dbs == orig(this._mongo._dbs)
this._mongo._dbs.getClass().getName() == orig(this._mongo._dbs.getClass().getName())
this._mongo._concern == orig(this._mongo._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this._mongo._concern._w == orig(this._mongo._concern._w)
this._mongo._concern._w.getClass().getName() == orig(this._mongo._concern._w.getClass().getName())
this._mongo._concern._wtimeout == orig(this._mongo._concern._wtimeout)
this._mongo._concern._fsync == orig(this._mongo._concern._fsync)
this._mongo._concern._j == orig(this._mongo._concern._j)
this._mongo._concern._continueOnError == orig(this._mongo._concern._continueOnError)
this._mongo._readPref == orig(this._mongo._readPref)
this._mongo._readPref.getClass().getName() == orig(this._mongo._readPref.getClass().getName())
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this._mongo._netOptions == orig(this._mongo._netOptions)
this._mongo._netOptions._parent == orig(this._mongo._netOptions._parent)
this._mongo._netOptions._options == orig(this._mongo._netOptions._options)
this._mongo._netOptions._hasOptions == orig(this._mongo._netOptions._hasOptions)
this._mongo._cleaner == orig(this._mongo._cleaner)
com.mongodb.Mongo.this == orig(com.mongodb.Mongo.this)
this._mongo._authority == orig(this._mongo._authority)
this._mongo._authority.type == orig(this._mongo._authority.type)
this._mongo._authority.serverAddresses == orig(this._mongo._authority.serverAddresses)
this._mongo._authority.serverAddresses[] == orig(this._mongo._authority.serverAddresses[])
this._mongo._authority.serverAddresses.getClass().getName() == orig(this._mongo._authority.serverAddresses.getClass().getName())
this._mongo._authority.credentialsStore == orig(this._mongo._authority.credentialsStore)
this._mongo._bufferPool == orig(this._mongo._bufferPool)
this._mongo._bufferPool.getClass().getName() == orig(this._mongo._bufferPool.getClass().getName())
this._mongo._bufferPool._max == orig(this._mongo._bufferPool._max)
this._mongo._bufferPool._stored == orig(this._mongo._bufferPool._stored)
this._mongo._bufferPool._stored.getClass().getName() == orig(this._mongo._bufferPool._stored.getClass().getName())
this._name == orig(this._name)
this._name.toString == orig(this._name.toString)
this._readOnly == orig(this._readOnly)
this._concern == orig(this._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this._readPref == orig(this._readPref)
this._options == orig(this._options)
this._options._parent == orig(this._options._parent)
this._options._parent._parent == orig(this._options._parent._parent)
this._options._parent._options == orig(this._options._parent._options)
this._options._parent._hasOptions == orig(this._options._parent._hasOptions)
this._options._options == orig(this._options._options)
this._options._hasOptions == orig(this._options._hasOptions)
this.authenticationTestCommandResult == orig(this.authenticationTestCommandResult)
name.toString == orig(name.toString)
this._root has only one value
this._root.toString == "SimpleDynamic1743934291905"
this._rootPlusDot has only one value
this._rootPlusDot.toString == "SimpleDynamic1743934291905."
this._connector has only one value
this._connector._mongo has only one value
this._connector._mongo._options has only one value
this._connector._mongo._connector has only one value
this._connector._mongo._dbs has only one value
this._connector._mongo._netOptions has only one value
this._connector._mongo._cleaner has only one value
this._connector._mongo._authority has only one value
this._connector._mongo._bufferPool has only one value
this._connector.cluster has only one value
this._connector._myPort has only one value
this._connector._myPort.pinnedRequestStatusThreadLocal has only one value
com.mongodb.DBTCPConnector.this has only one value
this._collections has only one value
this._deadCursorIds has only one value
this._mongo has only one value
this._mongo._options has only one value
this._mongo._connector has only one value
this._mongo._connector._mongo has only one value
this._mongo._connector.cluster has only one value
this._mongo._connector._myPort has only one value
this._mongo._dbs has only one value
this._mongo._netOptions has only one value
this._mongo._cleaner has only one value
com.mongodb.Mongo.this has only one value
this._mongo._authority has only one value
this._mongo._authority.serverAddresses has only one value
this._mongo._authority.serverAddresses[] contains no nulls and has only one value, of length 1
this._mongo._authority.serverAddresses[] elements has only one value
this._mongo._authority.credentialsStore has only one value
this._mongo._bufferPool has only one value
this._mongo._bufferPool._stored has only one value
this._name has only one value
this._name.toString == "SimpleDynamic1743934291905"
this._options has only one value
this._options._parent has only one value
name.toString == "aggr_results"
return has only one value
return.db has only one value
return.db._root has only one value
return.db._root.toString == "SimpleDynamic1743934291905"
return.db._rootPlusDot has only one value
return.db._rootPlusDot.toString == "SimpleDynamic1743934291905."
return.db._connector has only one value
return.db._collections has only one value
return.db._deadCursorIds has only one value
return.db._mongo has only one value
return.db._name has only one value
return.db._name.toString == "SimpleDynamic1743934291905"
return.db._readOnly == false
return.db._concern == null
return.db._readPref == null
return.db._options has only one value
return.db.authenticationTestCommandResult == null
return.namespace has only one value
return.namespace.toString == "SimpleDynamic1743934291905.aggr_results"
com.mongodb.DBCollectionImpl.TRACE_LOGGER has only one value
com.mongodb.DBCollectionImpl.TRACE_LEVEL has only one value
return._db has only one value
return._db.getClass().getName() == com.mongodb.DBApiLayer.class
return._db._mongo has only one value
return._db._name has only one value
return._db._name.toString == "SimpleDynamic1743934291905"
return._db._readOnly == false
return._db._concern == null
return._db._readPref == null
return._db._options has only one value
return._db.authenticationTestCommandResult == null
return._name has only one value
return._name.toString == "aggr_results"
return._fullName has only one value
return._fullName.toString == "SimpleDynamic1743934291905.aggr_results"
return._hintFields == null
return._concern == null
return._readPref == null
return._decoderFactory == null
return._encoderFactory == null
return._options has only one value
return._options._parent has only one value
return._options._options == 0
return._options._hasOptions == false
return._objectClass == null
return._internalClass has only one value
return._internalClass.getClass().getName() == java.util.Collections$SynchronizedMap.class
return._wrapper == null
return._createdIndexes has only one value
return._createdIndexes.getClass().getName() == java.util.HashSet.class
===========================================================================
com.mongodb.DBApiLayer.getConnector():::ENTER
this has only one value
this._root has only one value
this._root.toString == "SimpleDynamic1743934291905"
this._rootPlusDot has only one value
this._rootPlusDot.toString == "SimpleDynamic1743934291905."
this._connector has only one value
this._connector._mongo has only one value
this._connector._mongo._options has only one value
this._connector._mongo._connector has only one value
this._connector._mongo._dbs has only one value
this._connector._mongo._netOptions has only one value
this._connector._mongo._cleaner has only one value
this._connector._mongo._authority has only one value
this._connector._mongo._bufferPool has only one value
this._connector.cluster has only one value
this._connector._myPort has only one value
this._connector._myPort.pinnedRequestStatusThreadLocal has only one value
com.mongodb.DBTCPConnector.this has only one value
this._collections has only one value
this._deadCursorIds has only one value
this._mongo has only one value
this._mongo._options has only one value
this._mongo._connector has only one value
this._mongo._connector._mongo has only one value
this._mongo._connector.cluster has only one value
this._mongo._connector._myPort has only one value
this._mongo._dbs has only one value
this._mongo._netOptions has only one value
this._mongo._cleaner has only one value
com.mongodb.Mongo.this has only one value
this._mongo._authority has only one value
this._mongo._authority.serverAddresses has only one value
this._mongo._authority.serverAddresses[] contains no nulls and has only one value, of length 1
this._mongo._authority.serverAddresses[] elements has only one value
this._mongo._authority.credentialsStore has only one value
this._mongo._bufferPool has only one value
this._mongo._bufferPool._stored has only one value
this._name has only one value
this._name.toString == "SimpleDynamic1743934291905"
this._options has only one value
this._options._parent has only one value
===========================================================================
com.mongodb.DBApiLayer.getConnector():::EXIT
this._root == orig(this._root)
this._root.toString == orig(this._root.toString)
this._rootPlusDot == orig(this._rootPlusDot)
this._rootPlusDot.toString == orig(this._rootPlusDot.toString)
this._connector == orig(this._connector)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
this._connector._closed == orig(this._connector._closed)
this._connector._mongo == orig(this._connector._mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this._connector._mongo._options == orig(this._connector._mongo._options)
this._connector._mongo._connector == orig(this._connector._mongo._connector)
this._connector._mongo._dbs == orig(this._connector._mongo._dbs)
this._connector._mongo._dbs.getClass().getName() == orig(this._connector._mongo._dbs.getClass().getName())
this._connector._mongo._concern == orig(this._connector._mongo._concern)
this._connector._mongo._readPref == orig(this._connector._mongo._readPref)
this._connector._mongo._readPref.getClass().getName() == orig(this._connector._mongo._readPref.getClass().getName())
this._connector._mongo._netOptions == orig(this._connector._mongo._netOptions)
this._connector._mongo._cleaner == orig(this._connector._mongo._cleaner)
this._connector._mongo._authority == orig(this._connector._mongo._authority)
this._connector._mongo._bufferPool == orig(this._connector._mongo._bufferPool)
this._connector._mongo._bufferPool.getClass().getName() == orig(this._connector._mongo._bufferPool.getClass().getName())
this._connector.cluster == orig(this._connector.cluster)
this._connector.cluster.getClass().getName() == orig(this._connector.cluster.getClass().getName())
this._connector._myPort == orig(this._connector._myPort)
this._connector._myPort.pinnedRequestStatusThreadLocal == orig(this._connector._myPort.pinnedRequestStatusThreadLocal)
com.mongodb.DBTCPConnector.this == orig(com.mongodb.DBTCPConnector.this)
this._connector.connectionMode == orig(this._connector.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
this._connector.type == orig(this._connector.type)
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this._connector.mongosHAServerSelector == orig(this._connector.mongosHAServerSelector)
this._collections == orig(this._collections)
this._deadCursorIds == orig(this._deadCursorIds)
com.mongodb.DB._obedientCommands == orig(com.mongodb.DB._obedientCommands)
com.mongodb.DB._obedientCommands.getClass().getName() == orig(com.mongodb.DB._obedientCommands.getClass().getName())
this._mongo == orig(this._mongo)
this._mongo._options == orig(this._mongo._options)
this._mongo._options.description == orig(this._mongo._options.description)
this._mongo._options.connectionsPerHost == orig(this._mongo._options.connectionsPerHost)
this._mongo._options.threadsAllowedToBlockForConnectionMultiplier == orig(this._mongo._options.threadsAllowedToBlockForConnectionMultiplier)
this._mongo._options.maxWaitTime == orig(this._mongo._options.maxWaitTime)
this._mongo._options.connectTimeout == orig(this._mongo._options.connectTimeout)
this._mongo._options.socketTimeout == orig(this._mongo._options.socketTimeout)
this._mongo._options.socketKeepAlive == orig(this._mongo._options.socketKeepAlive)
this._mongo._options.autoConnectRetry == orig(this._mongo._options.autoConnectRetry)
this._mongo._options.maxAutoConnectRetryTime == orig(this._mongo._options.maxAutoConnectRetryTime)
this._mongo._options.slaveOk == orig(this._mongo._options.slaveOk)
this._mongo._options.readPreference == orig(this._mongo._options.readPreference)
this._mongo._options.dbDecoderFactory == orig(this._mongo._options.dbDecoderFactory)
this._mongo._options.dbDecoderFactory.getClass().getName() == orig(this._mongo._options.dbDecoderFactory.getClass().getName())
this._mongo._options.dbEncoderFactory == orig(this._mongo._options.dbEncoderFactory)
this._mongo._options.dbEncoderFactory.getClass().getName() == orig(this._mongo._options.dbEncoderFactory.getClass().getName())
this._mongo._options.safe == orig(this._mongo._options.safe)
this._mongo._options.w == orig(this._mongo._options.w)
this._mongo._options.wtimeout == orig(this._mongo._options.wtimeout)
this._mongo._options.fsync == orig(this._mongo._options.fsync)
this._mongo._options.j == orig(this._mongo._options.j)
this._mongo._options.socketFactory == orig(this._mongo._options.socketFactory)
this._mongo._options.socketFactory.getClass().getName() == orig(this._mongo._options.socketFactory.getClass().getName())
this._mongo._options.cursorFinalizerEnabled == orig(this._mongo._options.cursorFinalizerEnabled)
this._mongo._options.writeConcern == orig(this._mongo._options.writeConcern)
this._mongo._options.alwaysUseMBeans == orig(this._mongo._options.alwaysUseMBeans)
this._mongo._options.minConnectionsPerHost == orig(this._mongo._options.minConnectionsPerHost)
this._mongo._options.maxConnectionIdleTime == orig(this._mongo._options.maxConnectionIdleTime)
this._mongo._options.maxConnectionLifeTime == orig(this._mongo._options.maxConnectionLifeTime)
this._mongo._options.heartbeatFrequencyMS == orig(this._mongo._options.heartbeatFrequencyMS)
this._mongo._options.heartbeatConnectRetryFrequencyMS == orig(this._mongo._options.heartbeatConnectRetryFrequencyMS)
this._mongo._options.heartbeatConnectTimeoutMS == orig(this._mongo._options.heartbeatConnectTimeoutMS)
this._mongo._options.heartbeatReadTimeoutMS == orig(this._mongo._options.heartbeatReadTimeoutMS)
this._mongo._options.acceptableLatencyDifferenceMS == orig(this._mongo._options.acceptableLatencyDifferenceMS)
this._mongo._options.heartbeatThreadCount == orig(this._mongo._options.heartbeatThreadCount)
this._mongo._options.requiredReplicaSetName == orig(this._mongo._options.requiredReplicaSetName)
this._mongo._connector == orig(this._mongo._connector)
this._mongo._connector._closed == orig(this._mongo._connector._closed)
this._mongo._connector._mongo == orig(this._mongo._connector._mongo)
this._mongo._connector.cluster == orig(this._mongo._connector.cluster)
this._mongo._connector.cluster.getClass().getName() == orig(this._mongo._connector.cluster.getClass().getName())
this._mongo._connector._myPort == orig(this._mongo._connector._myPort)
this._mongo._connector.connectionMode == orig(this._mongo._connector.connectionMode)
this._mongo._connector.type == orig(this._mongo._connector.type)
this._mongo._connector.mongosHAServerSelector == orig(this._mongo._connector.mongosHAServerSelector)
this._mongo._dbs == orig(this._mongo._dbs)
this._mongo._dbs.getClass().getName() == orig(this._mongo._dbs.getClass().getName())
this._mongo._concern == orig(this._mongo._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this._mongo._concern._w == orig(this._mongo._concern._w)
this._mongo._concern._w.getClass().getName() == orig(this._mongo._concern._w.getClass().getName())
this._mongo._concern._wtimeout == orig(this._mongo._concern._wtimeout)
this._mongo._concern._fsync == orig(this._mongo._concern._fsync)
this._mongo._concern._j == orig(this._mongo._concern._j)
this._mongo._concern._continueOnError == orig(this._mongo._concern._continueOnError)
this._mongo._readPref == orig(this._mongo._readPref)
this._mongo._readPref.getClass().getName() == orig(this._mongo._readPref.getClass().getName())
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this._mongo._netOptions == orig(this._mongo._netOptions)
this._mongo._netOptions._parent == orig(this._mongo._netOptions._parent)
this._mongo._netOptions._options == orig(this._mongo._netOptions._options)
this._mongo._netOptions._hasOptions == orig(this._mongo._netOptions._hasOptions)
this._mongo._cleaner == orig(this._mongo._cleaner)
com.mongodb.Mongo.this == orig(com.mongodb.Mongo.this)
this._mongo._authority == orig(this._mongo._authority)
this._mongo._authority.type == orig(this._mongo._authority.type)
this._mongo._authority.serverAddresses == orig(this._mongo._authority.serverAddresses)
this._mongo._authority.serverAddresses[] == orig(this._mongo._authority.serverAddresses[])
this._mongo._authority.serverAddresses.getClass().getName() == orig(this._mongo._authority.serverAddresses.getClass().getName())
this._mongo._authority.credentialsStore == orig(this._mongo._authority.credentialsStore)
this._mongo._bufferPool == orig(this._mongo._bufferPool)
this._mongo._bufferPool.getClass().getName() == orig(this._mongo._bufferPool.getClass().getName())
this._mongo._bufferPool._max == orig(this._mongo._bufferPool._max)
this._mongo._bufferPool._stored == orig(this._mongo._bufferPool._stored)
this._mongo._bufferPool._stored.getClass().getName() == orig(this._mongo._bufferPool._stored.getClass().getName())
this._name == orig(this._name)
this._name.toString == orig(this._name.toString)
this._readOnly == orig(this._readOnly)
this._concern == orig(this._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this._readPref == orig(this._readPref)
this._options == orig(this._options)
this._options._parent == orig(this._options._parent)
this._options._parent._parent == orig(this._options._parent._parent)
this._options._parent._options == orig(this._options._parent._options)
this._options._parent._hasOptions == orig(this._options._parent._hasOptions)
this._options._options == orig(this._options._options)
this._options._hasOptions == orig(this._options._hasOptions)
this.authenticationTestCommandResult == orig(this.authenticationTestCommandResult)
this._root has only one value
this._root.toString == "SimpleDynamic1743934291905"
this._rootPlusDot has only one value
this._rootPlusDot.toString == "SimpleDynamic1743934291905."
this._connector has only one value
this._connector._mongo has only one value
this._connector._mongo._options has only one value
this._connector._mongo._connector has only one value
this._connector._mongo._dbs has only one value
this._connector._mongo._netOptions has only one value
this._connector._mongo._cleaner has only one value
this._connector._mongo._authority has only one value
this._connector._mongo._bufferPool has only one value
this._connector.cluster has only one value
this._connector._myPort has only one value
this._connector._myPort.pinnedRequestStatusThreadLocal has only one value
com.mongodb.DBTCPConnector.this has only one value
this._collections has only one value
this._deadCursorIds has only one value
this._mongo has only one value
this._mongo._options has only one value
this._mongo._connector has only one value
this._mongo._connector._mongo has only one value
this._mongo._connector.cluster has only one value
this._mongo._connector._myPort has only one value
this._mongo._dbs has only one value
this._mongo._netOptions has only one value
this._mongo._cleaner has only one value
com.mongodb.Mongo.this has only one value
this._mongo._authority has only one value
this._mongo._authority.serverAddresses has only one value
this._mongo._authority.serverAddresses[] contains no nulls and has only one value, of length 1
this._mongo._authority.serverAddresses[] elements has only one value
this._mongo._authority.credentialsStore has only one value
this._mongo._bufferPool has only one value
this._mongo._bufferPool._stored has only one value
this._name has only one value
this._name.toString == "SimpleDynamic1743934291905"
this._options has only one value
this._options._parent has only one value
return has only one value
return._closed == false
return._mongo has only one value
return._mongo._options has only one value
return._mongo._connector has only one value
return._mongo._dbs has only one value
return._mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
return._mongo._concern has only one value
return._mongo._readPref has only one value
return._mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
return._mongo._netOptions has only one value
return._mongo._cleaner has only one value
return._mongo._authority has only one value
return._mongo._bufferPool has only one value
return._mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
return.cluster has only one value
return.cluster.getClass().getName() == com.mongodb.SingleServerCluster.class
return._myPort has only one value
return._myPort.pinnedRequestStatusThreadLocal has only one value
return.connectionMode has only one value
return.type has only one value
return.mongosHAServerSelector == null
===========================================================================
com.mongodb.DBCollection:::OBJECT
this has only one value
this.getClass().getName() == com.mongodb.DBCollectionImpl.class
this._db has only one value
this._db.getClass().getName() == com.mongodb.DBApiLayer.class
com.mongodb.DB._obedientCommands has only one value
com.mongodb.DB._obedientCommands.getClass().getName() == java.util.HashSet.class
this._db._mongo has only one value
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
this._db._mongo._options has only one value
this._db._mongo._connector has only one value
this._db._mongo._dbs has only one value
this._db._mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
this._db._mongo._concern has only one value
this._db._mongo._readPref has only one value
this._db._mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
this._db._mongo._netOptions has only one value
this._db._mongo._cleaner has only one value
this._db._mongo._authority has only one value
this._db._mongo._bufferPool has only one value
this._db._mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
this._db._name has only one value
this._db._name.toString == "SimpleDynamic1743934291905"
this._db._readOnly == false
this._db._concern == null
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
this._db._readPref == null
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY has only one value
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY_PREFERRED has only one value
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
this._db._options has only one value
this._db._options._parent has only one value
this._db._options._options == 0
this._db._options._hasOptions == false
this._db.authenticationTestCommandResult == null
this._name has only one value
this._name.toString == "aggr_results"
this._fullName has only one value
this._fullName.toString == "SimpleDynamic1743934291905.aggr_results"
this._hintFields == null
this._concern == null
com.mongodb.WriteConcern.ERRORS_IGNORED._w has only one value
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == 0
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == false
com.mongodb.WriteConcern.ERRORS_IGNORED._j == false
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == false
com.mongodb.WriteConcern.ACKNOWLEDGED._w has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == 0
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == false
com.mongodb.WriteConcern.ACKNOWLEDGED._j == false
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == false
com.mongodb.WriteConcern.UNACKNOWLEDGED._w has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == 0
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == false
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == false
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == false
com.mongodb.WriteConcern.FSYNCED._w has only one value
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.FSYNCED._wtimeout == 0
com.mongodb.WriteConcern.FSYNCED._fsync == true
com.mongodb.WriteConcern.FSYNCED._j == false
com.mongodb.WriteConcern.FSYNCED._continueOnError == false
com.mongodb.WriteConcern.JOURNALED._w has only one value
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.JOURNALED._wtimeout == 0
com.mongodb.WriteConcern.JOURNALED._fsync == false
com.mongodb.WriteConcern.JOURNALED._j == true
com.mongodb.WriteConcern.JOURNALED._continueOnError == false
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == 0
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == false
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == false
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == false
com.mongodb.WriteConcern.NONE._w has only one value
com.mongodb.WriteConcern.NONE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.NONE._wtimeout == 0
com.mongodb.WriteConcern.NONE._fsync == false
com.mongodb.WriteConcern.NONE._j == false
com.mongodb.WriteConcern.NONE._continueOnError == false
com.mongodb.WriteConcern.NORMAL._w has only one value
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.NORMAL._wtimeout == 0
com.mongodb.WriteConcern.NORMAL._fsync == false
com.mongodb.WriteConcern.NORMAL._j == false
com.mongodb.WriteConcern.NORMAL._continueOnError == false
com.mongodb.WriteConcern.SAFE._w has only one value
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.SAFE._wtimeout == 0
com.mongodb.WriteConcern.SAFE._fsync == false
com.mongodb.WriteConcern.SAFE._j == false
com.mongodb.WriteConcern.SAFE._continueOnError == false
com.mongodb.WriteConcern.MAJORITY._w has only one value
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == java.lang.String.class
com.mongodb.WriteConcern.MAJORITY._wtimeout == 0
com.mongodb.WriteConcern.MAJORITY._fsync == false
com.mongodb.WriteConcern.MAJORITY._j == false
com.mongodb.WriteConcern.MAJORITY._continueOnError == false
com.mongodb.WriteConcern.FSYNC_SAFE._w has only one value
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == 0
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == true
com.mongodb.WriteConcern.FSYNC_SAFE._j == false
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == false
com.mongodb.WriteConcern.JOURNAL_SAFE._w has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == 0
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == false
com.mongodb.WriteConcern.JOURNAL_SAFE._j == true
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == false
com.mongodb.WriteConcern.REPLICAS_SAFE._w has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == 0
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == false
com.mongodb.WriteConcern.REPLICAS_SAFE._j == false
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == false
this._readPref == null
this._decoderFactory == null
this._encoderFactory == null
this._options has only one value
this._options._parent has only one value
this._options._parent._parent has only one value
this._options._parent._options == 0
this._options._parent._hasOptions == false
this._options._options == 0
this._options._hasOptions == false
this._objectClass == null
this._internalClass has only one value
this._internalClass.getClass().getName() == java.util.Collections$SynchronizedMap.class
this._wrapper == null
this._createdIndexes has only one value
this._createdIndexes.getClass().getName() == java.util.HashSet.class
===========================================================================
com.mongodb.DBCollection.DBCollection(com.mongodb.DB, java.lang.String):::ENTER
base has only one value
base.getClass().getName() == com.mongodb.DBApiLayer.class
com.mongodb.DB._obedientCommands has only one value
com.mongodb.DB._obedientCommands.getClass().getName() == java.util.HashSet.class
base._mongo has only one value
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
base._mongo._options has only one value
base._mongo._connector has only one value
base._mongo._dbs has only one value
base._mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
base._mongo._concern has only one value
base._mongo._readPref has only one value
base._mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
base._mongo._netOptions has only one value
base._mongo._cleaner has only one value
base._mongo._authority has only one value
base._mongo._bufferPool has only one value
base._mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
base._name has only one value
base._name.toString == "SimpleDynamic1743934291905"
base._readOnly == false
base._concern == null
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
base._readPref == null
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY has only one value
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY_PREFERRED has only one value
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
base._options has only one value
base._options._parent has only one value
base._options._options == 0
base._options._hasOptions == false
base.authenticationTestCommandResult == null
name has only one value
name.toString == "aggr_results"
===========================================================================
com.mongodb.DBCollection.DBCollection(com.mongodb.DB, java.lang.String):::EXIT
com.mongodb.DB._obedientCommands == orig(com.mongodb.DB._obedientCommands)
com.mongodb.DB._obedientCommands.getClass().getName() == orig(com.mongodb.DB._obedientCommands.getClass().getName())
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
base._mongo == orig(base._mongo)
base._mongo._options == orig(base._mongo._options)
base._mongo._connector == orig(base._mongo._connector)
base._mongo._dbs == orig(base._mongo._dbs)
base._mongo._dbs.getClass().getName() == orig(base._mongo._dbs.getClass().getName())
base._mongo._concern == orig(base._mongo._concern)
base._mongo._readPref == orig(base._mongo._readPref)
base._mongo._readPref.getClass().getName() == orig(base._mongo._readPref.getClass().getName())
base._mongo._netOptions == orig(base._mongo._netOptions)
base._mongo._cleaner == orig(base._mongo._cleaner)
base._mongo._authority == orig(base._mongo._authority)
base._mongo._bufferPool == orig(base._mongo._bufferPool)
base._mongo._bufferPool.getClass().getName() == orig(base._mongo._bufferPool.getClass().getName())
base._name == orig(base._name)
base._name.toString == orig(base._name.toString)
base._readOnly == orig(base._readOnly)
base._concern == orig(base._concern)
base._readPref == orig(base._readPref)
base._options == orig(base._options)
base._options._parent == orig(base._options._parent)
base._options._options == orig(base._options._options)
base._options._hasOptions == orig(base._options._hasOptions)
base.authenticationTestCommandResult == orig(base.authenticationTestCommandResult)
name.toString == orig(name.toString)
base._mongo has only one value
base._mongo._options has only one value
base._mongo._connector has only one value
base._mongo._dbs has only one value
base._mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
base._mongo._concern has only one value
base._mongo._readPref has only one value
base._mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
base._mongo._netOptions has only one value
base._mongo._cleaner has only one value
base._mongo._authority has only one value
base._mongo._bufferPool has only one value
base._mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
base._name has only one value
base._name.toString == "SimpleDynamic1743934291905"
base._readOnly == false
base._concern == null
base._readPref == null
base._options has only one value
base._options._parent has only one value
base._options._options == 0
base._options._hasOptions == false
base.authenticationTestCommandResult == null
name.toString == "aggr_results"
===========================================================================
com.mongodb.DBCollection.defaultOptions(com.mongodb.DBObject):::ENTER
keys has only one value
keys.getClass().getName() == com.mongodb.BasicDBObject.class
===========================================================================
com.mongodb.DBCollection.defaultOptions(com.mongodb.DBObject):::EXIT
this._db == orig(this._db)
this._db.getClass().getName() == orig(this._db.getClass().getName())
com.mongodb.DB._obedientCommands == orig(com.mongodb.DB._obedientCommands)
com.mongodb.DB._obedientCommands.getClass().getName() == orig(com.mongodb.DB._obedientCommands.getClass().getName())
this._db._mongo == orig(this._db._mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this._db._mongo._options == orig(this._db._mongo._options)
this._db._mongo._connector == orig(this._db._mongo._connector)
this._db._mongo._dbs == orig(this._db._mongo._dbs)
this._db._mongo._dbs.getClass().getName() == orig(this._db._mongo._dbs.getClass().getName())
this._db._mongo._concern == orig(this._db._mongo._concern)
this._db._mongo._readPref == orig(this._db._mongo._readPref)
this._db._mongo._readPref.getClass().getName() == orig(this._db._mongo._readPref.getClass().getName())
this._db._mongo._netOptions == orig(this._db._mongo._netOptions)
this._db._mongo._cleaner == orig(this._db._mongo._cleaner)
this._db._mongo._authority == orig(this._db._mongo._authority)
this._db._mongo._bufferPool == orig(this._db._mongo._bufferPool)
this._db._mongo._bufferPool.getClass().getName() == orig(this._db._mongo._bufferPool.getClass().getName())
this._db._name == orig(this._db._name)
this._db._name.toString == orig(this._db._name.toString)
this._db._readOnly == orig(this._db._readOnly)
this._db._concern == orig(this._db._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this._db._readPref == orig(this._db._readPref)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this._db._options == orig(this._db._options)
this._db._options._parent == orig(this._db._options._parent)
this._db._options._options == orig(this._db._options._options)
this._db._options._hasOptions == orig(this._db._options._hasOptions)
this._db.authenticationTestCommandResult == orig(this._db.authenticationTestCommandResult)
this._name == orig(this._name)
this._name.toString == orig(this._name.toString)
this._fullName == orig(this._fullName)
this._fullName.toString == orig(this._fullName.toString)
this._hintFields == orig(this._hintFields)
this._concern == orig(this._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this._readPref == orig(this._readPref)
this._decoderFactory == orig(this._decoderFactory)
this._encoderFactory == orig(this._encoderFactory)
this._options == orig(this._options)
this._options._parent == orig(this._options._parent)
this._options._parent._parent == orig(this._options._parent._parent)
this._options._parent._options == orig(this._options._parent._options)
this._options._parent._hasOptions == orig(this._options._parent._hasOptions)
this._options._options == orig(this._options._options)
this._options._hasOptions == orig(this._options._hasOptions)
this._objectClass == orig(this._objectClass)
this._internalClass == orig(this._internalClass)
this._internalClass.getClass().getName() == orig(this._internalClass.getClass().getName())
this._wrapper == orig(this._wrapper)
this._createdIndexes == orig(this._createdIndexes)
this._createdIndexes.getClass().getName() == orig(this._createdIndexes.getClass().getName())
return has only one value
return.getClass().getName() == com.mongodb.BasicDBObject.class
===========================================================================
com.mongodb.DBCollection.genIndexName(com.mongodb.DBObject):::ENTER
keys has only one value
keys.getClass().getName() == com.mongodb.BasicDBObject.class
===========================================================================
com.mongodb.DBCollection.genIndexName(com.mongodb.DBObject):::EXIT
return has only one value
return.toString == "tick_1"
===========================================================================
com.mongodb.DBCollection.getDBEncoder():::ENTER
===========================================================================
com.mongodb.DBCollection.getDBEncoder():::EXIT
this._db == orig(this._db)
this._db.getClass().getName() == orig(this._db.getClass().getName())
com.mongodb.DB._obedientCommands == orig(com.mongodb.DB._obedientCommands)
com.mongodb.DB._obedientCommands.getClass().getName() == orig(com.mongodb.DB._obedientCommands.getClass().getName())
this._db._mongo == orig(this._db._mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this._db._mongo._options == orig(this._db._mongo._options)
this._db._mongo._connector == orig(this._db._mongo._connector)
this._db._mongo._dbs == orig(this._db._mongo._dbs)
this._db._mongo._dbs.getClass().getName() == orig(this._db._mongo._dbs.getClass().getName())
this._db._mongo._concern == orig(this._db._mongo._concern)
this._db._mongo._readPref == orig(this._db._mongo._readPref)
this._db._mongo._readPref.getClass().getName() == orig(this._db._mongo._readPref.getClass().getName())
this._db._mongo._netOptions == orig(this._db._mongo._netOptions)
this._db._mongo._cleaner == orig(this._db._mongo._cleaner)
this._db._mongo._authority == orig(this._db._mongo._authority)
this._db._mongo._bufferPool == orig(this._db._mongo._bufferPool)
this._db._mongo._bufferPool.getClass().getName() == orig(this._db._mongo._bufferPool.getClass().getName())
this._db._name == orig(this._db._name)
this._db._name.toString == orig(this._db._name.toString)
this._db._readOnly == orig(this._db._readOnly)
this._db._concern == orig(this._db._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this._db._readPref == orig(this._db._readPref)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this._db._options == orig(this._db._options)
this._db._options._parent == orig(this._db._options._parent)
this._db._options._options == orig(this._db._options._options)
this._db._options._hasOptions == orig(this._db._options._hasOptions)
this._db.authenticationTestCommandResult == orig(this._db.authenticationTestCommandResult)
this._name == orig(this._name)
this._name.toString == orig(this._name.toString)
this._fullName == orig(this._fullName)
this._fullName.toString == orig(this._fullName.toString)
this._hintFields == orig(this._hintFields)
this._concern == orig(this._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this._readPref == orig(this._readPref)
this._decoderFactory == orig(this._decoderFactory)
this._encoderFactory == orig(this._encoderFactory)
this._options == orig(this._options)
this._options._parent == orig(this._options._parent)
this._options._parent._parent == orig(this._options._parent._parent)
this._options._parent._options == orig(this._options._parent._options)
this._options._parent._hasOptions == orig(this._options._parent._hasOptions)
this._options._options == orig(this._options._options)
this._options._hasOptions == orig(this._options._hasOptions)
this._objectClass == orig(this._objectClass)
this._internalClass == orig(this._internalClass)
this._internalClass.getClass().getName() == orig(this._internalClass.getClass().getName())
this._wrapper == orig(this._wrapper)
this._createdIndexes == orig(this._createdIndexes)
this._createdIndexes.getClass().getName() == orig(this._createdIndexes.getClass().getName())
return == null
===========================================================================
com.mongodb.DBCollection.getDBEncoderFactory():::ENTER
===========================================================================
com.mongodb.DBCollection.getDBEncoderFactory():::EXIT
this._db == orig(this._db)
this._db.getClass().getName() == orig(this._db.getClass().getName())
com.mongodb.DB._obedientCommands == orig(com.mongodb.DB._obedientCommands)
com.mongodb.DB._obedientCommands.getClass().getName() == orig(com.mongodb.DB._obedientCommands.getClass().getName())
this._db._mongo == orig(this._db._mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this._db._mongo._options == orig(this._db._mongo._options)
this._db._mongo._connector == orig(this._db._mongo._connector)
this._db._mongo._dbs == orig(this._db._mongo._dbs)
this._db._mongo._dbs.getClass().getName() == orig(this._db._mongo._dbs.getClass().getName())
this._db._mongo._concern == orig(this._db._mongo._concern)
this._db._mongo._readPref == orig(this._db._mongo._readPref)
this._db._mongo._readPref.getClass().getName() == orig(this._db._mongo._readPref.getClass().getName())
this._db._mongo._netOptions == orig(this._db._mongo._netOptions)
this._db._mongo._cleaner == orig(this._db._mongo._cleaner)
this._db._mongo._authority == orig(this._db._mongo._authority)
this._db._mongo._bufferPool == orig(this._db._mongo._bufferPool)
this._db._mongo._bufferPool.getClass().getName() == orig(this._db._mongo._bufferPool.getClass().getName())
this._db._name == orig(this._db._name)
this._db._name.toString == orig(this._db._name.toString)
this._db._readOnly == orig(this._db._readOnly)
this._db._concern == orig(this._db._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this._db._readPref == orig(this._db._readPref)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this._db._options == orig(this._db._options)
this._db._options._parent == orig(this._db._options._parent)
this._db._options._options == orig(this._db._options._options)
this._db._options._hasOptions == orig(this._db._options._hasOptions)
this._db.authenticationTestCommandResult == orig(this._db.authenticationTestCommandResult)
this._name == orig(this._name)
this._name.toString == orig(this._name.toString)
this._fullName == orig(this._fullName)
this._fullName.toString == orig(this._fullName.toString)
this._hintFields == orig(this._hintFields)
this._concern == orig(this._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this._readPref == orig(this._readPref)
this._decoderFactory == orig(this._decoderFactory)
this._encoderFactory == orig(this._encoderFactory)
this._options == orig(this._options)
this._options._parent == orig(this._options._parent)
this._options._parent._parent == orig(this._options._parent._parent)
this._options._parent._options == orig(this._options._parent._options)
this._options._parent._hasOptions == orig(this._options._parent._hasOptions)
this._options._options == orig(this._options._options)
this._options._hasOptions == orig(this._options._hasOptions)
this._objectClass == orig(this._objectClass)
this._internalClass == orig(this._internalClass)
this._internalClass.getClass().getName() == orig(this._internalClass.getClass().getName())
this._wrapper == orig(this._wrapper)
this._createdIndexes == orig(this._createdIndexes)
this._createdIndexes.getClass().getName() == orig(this._createdIndexes.getClass().getName())
return == null
===========================================================================
com.mongodb.DBCollectionImpl:::CLASS
com.mongodb.DBCollectionImpl.TRACE_LOGGER has only one value
com.mongodb.DBCollectionImpl.TRACE_LEVEL has only one value
===========================================================================
com.mongodb.DBCollectionImpl:::OBJECT
this has only one value
this.db has only one value
this.db._root has only one value
this.db._root.toString == "SimpleDynamic1743934291905"
this.db._rootPlusDot has only one value
this.db._rootPlusDot.toString == "SimpleDynamic1743934291905."
this.db._connector has only one value
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID has only one value
this.db._connector._closed == false
this.db._connector._mongo has only one value
this.db._connector.cluster has only one value
this.db._connector.cluster.getClass().getName() == com.mongodb.SingleServerCluster.class
this.db._connector._myPort has only one value
this.db._connector.connectionMode has only one value
this.db._connector.type has only one value
this.db._connector.mongosHAServerSelector == null
this.db._collections has only one value
this.db._deadCursorIds has only one value
com.mongodb.DB._obedientCommands has only one value
com.mongodb.DB._obedientCommands.getClass().getName() == java.util.HashSet.class
this.db._mongo has only one value
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
this.db._mongo._options has only one value
this.db._mongo._connector has only one value
this.db._mongo._dbs has only one value
this.db._mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
this.db._mongo._concern has only one value
this.db._mongo._readPref has only one value
this.db._mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
this.db._mongo._netOptions has only one value
this.db._mongo._cleaner has only one value
this.db._mongo._authority has only one value
this.db._mongo._bufferPool has only one value
this.db._mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
this.db._name has only one value
this.db._name.toString == "SimpleDynamic1743934291905"
this.db._readOnly == false
this.db._concern == null
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
this.db._readPref == null
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY has only one value
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY_PREFERRED has only one value
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
this.db._options has only one value
this.db._options._parent has only one value
this.db._options._options == 0
this.db._options._hasOptions == false
this.db.authenticationTestCommandResult == null
this.namespace has only one value
this.namespace.toString == "SimpleDynamic1743934291905.aggr_results"
this._db has only one value
this._db.getClass().getName() == com.mongodb.DBApiLayer.class
this._db._mongo has only one value
this._db._mongo._options has only one value
this._db._mongo._connector has only one value
this._db._mongo._dbs has only one value
this._db._mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
this._db._mongo._concern has only one value
this._db._mongo._readPref has only one value
this._db._mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
this._db._mongo._netOptions has only one value
this._db._mongo._cleaner has only one value
this._db._mongo._authority has only one value
this._db._mongo._bufferPool has only one value
this._db._mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
this._db._name has only one value
this._db._name.toString == "SimpleDynamic1743934291905"
this._db._readOnly == false
this._db._concern == null
this._db._readPref == null
this._db._options has only one value
this._db._options._parent has only one value
this._db._options._options == 0
this._db._options._hasOptions == false
this._db.authenticationTestCommandResult == null
this._name has only one value
this._name.toString == "aggr_results"
this._fullName has only one value
this._fullName.toString == "SimpleDynamic1743934291905.aggr_results"
this._hintFields == null
this._concern == null
com.mongodb.WriteConcern.ERRORS_IGNORED._w has only one value
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == 0
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == false
com.mongodb.WriteConcern.ERRORS_IGNORED._j == false
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == false
com.mongodb.WriteConcern.ACKNOWLEDGED._w has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == 0
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == false
com.mongodb.WriteConcern.ACKNOWLEDGED._j == false
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == false
com.mongodb.WriteConcern.UNACKNOWLEDGED._w has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == 0
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == false
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == false
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == false
com.mongodb.WriteConcern.FSYNCED._w has only one value
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.FSYNCED._wtimeout == 0
com.mongodb.WriteConcern.FSYNCED._fsync == true
com.mongodb.WriteConcern.FSYNCED._j == false
com.mongodb.WriteConcern.FSYNCED._continueOnError == false
com.mongodb.WriteConcern.JOURNALED._w has only one value
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.JOURNALED._wtimeout == 0
com.mongodb.WriteConcern.JOURNALED._fsync == false
com.mongodb.WriteConcern.JOURNALED._j == true
com.mongodb.WriteConcern.JOURNALED._continueOnError == false
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == 0
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == false
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == false
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == false
com.mongodb.WriteConcern.NONE._w has only one value
com.mongodb.WriteConcern.NONE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.NONE._wtimeout == 0
com.mongodb.WriteConcern.NONE._fsync == false
com.mongodb.WriteConcern.NONE._j == false
com.mongodb.WriteConcern.NONE._continueOnError == false
com.mongodb.WriteConcern.NORMAL._w has only one value
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.NORMAL._wtimeout == 0
com.mongodb.WriteConcern.NORMAL._fsync == false
com.mongodb.WriteConcern.NORMAL._j == false
com.mongodb.WriteConcern.NORMAL._continueOnError == false
com.mongodb.WriteConcern.SAFE._w has only one value
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.SAFE._wtimeout == 0
com.mongodb.WriteConcern.SAFE._fsync == false
com.mongodb.WriteConcern.SAFE._j == false
com.mongodb.WriteConcern.SAFE._continueOnError == false
com.mongodb.WriteConcern.MAJORITY._w has only one value
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == java.lang.String.class
com.mongodb.WriteConcern.MAJORITY._wtimeout == 0
com.mongodb.WriteConcern.MAJORITY._fsync == false
com.mongodb.WriteConcern.MAJORITY._j == false
com.mongodb.WriteConcern.MAJORITY._continueOnError == false
com.mongodb.WriteConcern.FSYNC_SAFE._w has only one value
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == 0
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == true
com.mongodb.WriteConcern.FSYNC_SAFE._j == false
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == false
com.mongodb.WriteConcern.JOURNAL_SAFE._w has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == 0
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == false
com.mongodb.WriteConcern.JOURNAL_SAFE._j == true
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == false
com.mongodb.WriteConcern.REPLICAS_SAFE._w has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == 0
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == false
com.mongodb.WriteConcern.REPLICAS_SAFE._j == false
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == false
this._readPref == null
this._decoderFactory == null
this._encoderFactory == null
this._options has only one value
this._options._parent has only one value
this._options._parent._parent has only one value
this._options._parent._options == 0
this._options._parent._hasOptions == false
this._options._options == 0
this._options._hasOptions == false
this._objectClass == null
this._internalClass has only one value
this._internalClass.getClass().getName() == java.util.Collections$SynchronizedMap.class
this._wrapper == null
this._createdIndexes has only one value
this._createdIndexes.getClass().getName() == java.util.HashSet.class
===========================================================================
com.mongodb.DBCollectionImpl.DBCollectionImpl(com.mongodb.DBApiLayer, java.lang.String):::ENTER
db has only one value
db._root has only one value
db._root.toString == "SimpleDynamic1743934291905"
db._rootPlusDot has only one value
db._rootPlusDot.toString == "SimpleDynamic1743934291905."
db._connector has only one value
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID has only one value
db._connector._closed == false
db._connector._mongo has only one value
db._connector.cluster has only one value
db._connector.cluster.getClass().getName() == com.mongodb.SingleServerCluster.class
db._connector._myPort has only one value
db._connector.connectionMode has only one value
db._connector.type has only one value
db._connector.mongosHAServerSelector == null
db._collections has only one value
db._deadCursorIds has only one value
com.mongodb.DB._obedientCommands has only one value
com.mongodb.DB._obedientCommands.getClass().getName() == java.util.HashSet.class
db._mongo has only one value
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
db._mongo._options has only one value
db._mongo._connector has only one value
db._mongo._dbs has only one value
db._mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
db._mongo._concern has only one value
db._mongo._readPref has only one value
db._mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
db._mongo._netOptions has only one value
db._mongo._cleaner has only one value
db._mongo._authority has only one value
db._mongo._bufferPool has only one value
db._mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
db._name has only one value
db._name.toString == "SimpleDynamic1743934291905"
db._readOnly == false
db._concern == null
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
db._readPref == null
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY has only one value
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY_PREFERRED has only one value
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
db._options has only one value
db._options._parent has only one value
db._options._options == 0
db._options._hasOptions == false
db.authenticationTestCommandResult == null
name has only one value
name.toString == "aggr_results"
===========================================================================
com.mongodb.DBCollectionImpl.DBCollectionImpl(com.mongodb.DBApiLayer, java.lang.String):::EXIT
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
com.mongodb.DB._obedientCommands == orig(com.mongodb.DB._obedientCommands)
com.mongodb.DB._obedientCommands.getClass().getName() == orig(com.mongodb.DB._obedientCommands.getClass().getName())
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
db._root == orig(db._root)
db._root.toString == orig(db._root.toString)
db._rootPlusDot == orig(db._rootPlusDot)
db._rootPlusDot.toString == orig(db._rootPlusDot.toString)
db._connector == orig(db._connector)
db._connector._closed == orig(db._connector._closed)
db._connector._mongo == orig(db._connector._mongo)
db._connector.cluster == orig(db._connector.cluster)
db._connector.cluster.getClass().getName() == orig(db._connector.cluster.getClass().getName())
db._connector._myPort == orig(db._connector._myPort)
db._connector.connectionMode == orig(db._connector.connectionMode)
db._connector.type == orig(db._connector.type)
db._connector.mongosHAServerSelector == orig(db._connector.mongosHAServerSelector)
db._collections == orig(db._collections)
db._deadCursorIds == orig(db._deadCursorIds)
db._mongo == orig(db._mongo)
db._mongo._options == orig(db._mongo._options)
db._mongo._connector == orig(db._mongo._connector)
db._mongo._dbs == orig(db._mongo._dbs)
db._mongo._dbs.getClass().getName() == orig(db._mongo._dbs.getClass().getName())
db._mongo._concern == orig(db._mongo._concern)
db._mongo._readPref == orig(db._mongo._readPref)
db._mongo._readPref.getClass().getName() == orig(db._mongo._readPref.getClass().getName())
db._mongo._netOptions == orig(db._mongo._netOptions)
db._mongo._cleaner == orig(db._mongo._cleaner)
db._mongo._authority == orig(db._mongo._authority)
db._mongo._bufferPool == orig(db._mongo._bufferPool)
db._mongo._bufferPool.getClass().getName() == orig(db._mongo._bufferPool.getClass().getName())
db._name == orig(db._name)
db._name.toString == orig(db._name.toString)
db._readOnly == orig(db._readOnly)
db._concern == orig(db._concern)
db._readPref == orig(db._readPref)
db._options == orig(db._options)
db._options._parent == orig(db._options._parent)
db._options._options == orig(db._options._options)
db._options._hasOptions == orig(db._options._hasOptions)
db.authenticationTestCommandResult == orig(db.authenticationTestCommandResult)
name.toString == orig(name.toString)
db._root has only one value
db._root.toString == "SimpleDynamic1743934291905"
db._rootPlusDot has only one value
db._rootPlusDot.toString == "SimpleDynamic1743934291905."
db._connector has only one value
db._connector._closed == false
db._connector._mongo has only one value
db._connector.cluster has only one value
db._connector.cluster.getClass().getName() == com.mongodb.SingleServerCluster.class
db._connector._myPort has only one value
db._connector.connectionMode has only one value
db._connector.type has only one value
db._connector.mongosHAServerSelector == null
db._collections has only one value
db._deadCursorIds has only one value
db._mongo has only one value
db._mongo._options has only one value
db._mongo._connector has only one value
db._mongo._dbs has only one value
db._mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
db._mongo._concern has only one value
db._mongo._readPref has only one value
db._mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
db._mongo._netOptions has only one value
db._mongo._cleaner has only one value
db._mongo._authority has only one value
db._mongo._bufferPool has only one value
db._mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
db._name has only one value
db._name.toString == "SimpleDynamic1743934291905"
db._readOnly == false
db._concern == null
db._readPref == null
db._options has only one value
db._options._parent has only one value
db._options._options == 0
db._options._hasOptions == false
db.authenticationTestCommandResult == null
name.toString == "aggr_results"
===========================================================================
com.mongodb.DBPort:::CLASS
com.mongodb.DBPort._rootLogger has only one value
com.mongodb.DBPort._rootLogger != null
===========================================================================
com.mongodb.DBPort:::OBJECT
this.openedAt == 0
this.lastUsedAt == 0
this.generation == 0
this.provider == null
com.mongodb.PooledConnectionProvider.LOGGER has only one value
com.mongodb.PooledConnectionProvider.LOGGER != null
this._sa != null
this._sa._host has only one value
this._sa._host != null
this._sa._host.toString == "localhost"
this._sa._port == 27017
this._addr != null
this._addr._host has only one value
this._addr._host != null
this._addr._host.toString == "localhost"
this._addr._port == 27017
this._options != null
this._options.description == null
this._options.connectionsPerHost == 10
this._options.threadsAllowedToBlockForConnectionMultiplier == 5
this._options.maxWaitTime == 120000
this._options.connectTimeout == 20000
this._options.socketTimeout == 20000
this._options.socketKeepAlive == false
this._options.autoConnectRetry == false
this._options.maxAutoConnectRetryTime == 0
this._options.slaveOk == false
this._options.readPreference == null
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY != null
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY != null
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY has only one value
com.mongodb.ReadPreference._PRIMARY != null
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY != null
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY_PREFERRED has only one value
com.mongodb.ReadPreference._SECONDARY_PREFERRED != null
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED != null
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST != null
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
this._options.dbDecoderFactory has only one value
this._options.dbDecoderFactory != null
this._options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
this._options.dbEncoderFactory has only one value
this._options.dbEncoderFactory != null
this._options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
this._options.safe == false
this._options.w == 0
this._options.wtimeout == 0
this._options.fsync == false
this._options.j == false
this._options.socketFactory has only one value
this._options.socketFactory != null
this._options.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
this._options.cursorFinalizerEnabled == true
this._options.writeConcern == null
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ERRORS_IGNORED != null
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED != null
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED != null
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.FSYNCED != null
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.JOURNALED != null
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED != null
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NONE != null
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.NORMAL != null
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.SAFE != null
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.MAJORITY != null
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.FSYNC_SAFE != null
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE != null
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE != null
com.mongodb.WriteConcern._namedConcerns == null
this._options.alwaysUseMBeans == false
this._options.minConnectionsPerHost == 0
this._options.maxConnectionIdleTime == 0
this._options.maxConnectionLifeTime == 0
this._options.heartbeatFrequencyMS == 5000
this._options.heartbeatConnectRetryFrequencyMS == 10
this._options.heartbeatConnectTimeoutMS == 20000
this._options.heartbeatReadTimeoutMS == 20000
this._options.acceptableLatencyDifferenceMS == 15
this._options.heartbeatThreadCount == 0
this._options.requiredReplicaSetName == null
this._logger != null
this._decoder == null
this._in == null
this._out == null
this.authenticatedDatabases != null
this.authenticatedDatabases.getClass().getName() == java.util.Collections$SynchronizedSet.class
this.usageCount == 0
this._activeState == null
===========================================================================
com.mongodb.DBPort.close():::ENTER
this.closed == false
this._socket != null
===========================================================================
com.mongodb.DBPort.close():::EXIT
com.mongodb.DBPort._rootLogger == orig(com.mongodb.DBPort._rootLogger)
this.openedAt == orig(this.openedAt)
this.lastUsedAt == orig(this.lastUsedAt)
this.generation == orig(this.generation)
this.provider == orig(this.provider)
com.mongodb.PooledConnectionProvider.LOGGER == orig(com.mongodb.PooledConnectionProvider.LOGGER)
this._sa == orig(this._sa)
this._sa._host == orig(this._sa._host)
this._sa._host.toString == orig(this._sa._host.toString)
this._sa._port == orig(this._sa._port)
this._addr == orig(this._addr)
this._addr._host == orig(this._addr._host)
this._addr._host.toString == orig(this._addr._host.toString)
this._addr._port == orig(this._addr._port)
this._options == orig(this._options)
this._options.description == orig(this._options.description)
this._options.connectionsPerHost == orig(this._options.connectionsPerHost)
this._options.threadsAllowedToBlockForConnectionMultiplier == orig(this._options.threadsAllowedToBlockForConnectionMultiplier)
this._options.maxWaitTime == orig(this._options.maxWaitTime)
this._options.connectTimeout == orig(this._options.connectTimeout)
this._options.socketTimeout == orig(this._options.socketTimeout)
this._options.socketKeepAlive == orig(this._options.socketKeepAlive)
this._options.autoConnectRetry == orig(this._options.autoConnectRetry)
this._options.maxAutoConnectRetryTime == orig(this._options.maxAutoConnectRetryTime)
this._options.slaveOk == orig(this._options.slaveOk)
this._options.readPreference == orig(this._options.readPreference)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this._options.dbDecoderFactory == orig(this._options.dbDecoderFactory)
this._options.dbDecoderFactory.getClass().getName() == orig(this._options.dbDecoderFactory.getClass().getName())
this._options.dbEncoderFactory == orig(this._options.dbEncoderFactory)
this._options.dbEncoderFactory.getClass().getName() == orig(this._options.dbEncoderFactory.getClass().getName())
this._options.safe == orig(this._options.safe)
this._options.w == orig(this._options.w)
this._options.wtimeout == orig(this._options.wtimeout)
this._options.fsync == orig(this._options.fsync)
this._options.j == orig(this._options.j)
this._options.socketFactory == orig(this._options.socketFactory)
this._options.socketFactory.getClass().getName() == orig(this._options.socketFactory.getClass().getName())
this._options.cursorFinalizerEnabled == orig(this._options.cursorFinalizerEnabled)
this._options.writeConcern == orig(this._options.writeConcern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this._options.alwaysUseMBeans == orig(this._options.alwaysUseMBeans)
this._options.minConnectionsPerHost == orig(this._options.minConnectionsPerHost)
this._options.maxConnectionIdleTime == orig(this._options.maxConnectionIdleTime)
this._options.maxConnectionLifeTime == orig(this._options.maxConnectionLifeTime)
this._options.heartbeatFrequencyMS == orig(this._options.heartbeatFrequencyMS)
this._options.heartbeatConnectRetryFrequencyMS == orig(this._options.heartbeatConnectRetryFrequencyMS)
this._options.heartbeatConnectTimeoutMS == orig(this._options.heartbeatConnectTimeoutMS)
this._options.heartbeatReadTimeoutMS == orig(this._options.heartbeatReadTimeoutMS)
this._options.acceptableLatencyDifferenceMS == orig(this._options.acceptableLatencyDifferenceMS)
this._options.heartbeatThreadCount == orig(this._options.heartbeatThreadCount)
this._options.requiredReplicaSetName == orig(this._options.requiredReplicaSetName)
this._logger == orig(this._logger)
this._decoder == orig(this._decoder)
this._in == orig(this._in)
this._out == orig(this._out)
this.authenticatedDatabases == orig(this.authenticatedDatabases)
this.authenticatedDatabases.getClass().getName() == orig(this.authenticatedDatabases.getClass().getName())
this.usageCount == orig(this.usageCount)
this._activeState == orig(this._activeState)
this.closed == true
this._socket == null
===========================================================================
com.mongodb.DBPortFactory:::OBJECT
this.options.connectionsPerHost == this.options.heartbeatConnectRetryFrequencyMS
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference._PRIMARY.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName()
this.options.fsync == this.options.j
this.options.heartbeatConnectTimeoutMS == this.options.heartbeatReadTimeoutMS
this.options.description == null
this.options.connectionsPerHost == 10
this.options.threadsAllowedToBlockForConnectionMultiplier == 5
this.options.maxWaitTime == 120000
this.options.connectTimeout == 10000
this.options.socketTimeout == 0
this.options.socketKeepAlive == false
this.options.autoConnectRetry == false
this.options.maxAutoConnectRetryTime == 0
this.options.slaveOk == false
this.options.readPreference == null
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY has only one value
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
this.options.dbDecoderFactory has only one value
this.options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
this.options.dbEncoderFactory has only one value
this.options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
this.options.safe == false
this.options.w == 0
this.options.wtimeout == 0
this.options.fsync == false
this.options.socketFactory has only one value
this.options.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
this.options.cursorFinalizerEnabled == true
this.options.writeConcern == null
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
this.options.alwaysUseMBeans == false
this.options.minConnectionsPerHost == 0
this.options.maxConnectionIdleTime == 0
this.options.maxConnectionLifeTime == 0
this.options.heartbeatFrequencyMS == 5000
this.options.heartbeatConnectTimeoutMS == 20000
this.options.acceptableLatencyDifferenceMS == 15
this.options.heartbeatThreadCount == 0
this.options.requiredReplicaSetName == null
===========================================================================
com.mongodb.DBPortFactory.DBPortFactory(com.mongodb.MongoOptions):::ENTER
options.connectionsPerHost == options.heartbeatConnectRetryFrequencyMS
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference._PRIMARY.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName()
options.fsync == options.j
options.heartbeatConnectTimeoutMS == options.heartbeatReadTimeoutMS
options.description == null
options.connectionsPerHost == 10
options.threadsAllowedToBlockForConnectionMultiplier == 5
options.maxWaitTime == 120000
options.connectTimeout == 10000
options.socketTimeout == 0
options.socketKeepAlive == false
options.autoConnectRetry == false
options.maxAutoConnectRetryTime == 0
options.slaveOk == false
options.readPreference == null
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY has only one value
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
options.dbDecoderFactory has only one value
options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
options.dbEncoderFactory has only one value
options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
options.safe == false
options.w == 0
options.wtimeout == 0
options.fsync == false
options.socketFactory has only one value
options.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
options.cursorFinalizerEnabled == true
options.writeConcern == null
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
options.alwaysUseMBeans == false
options.minConnectionsPerHost == 0
options.maxConnectionIdleTime == 0
options.maxConnectionLifeTime == 0
options.heartbeatFrequencyMS == 5000
options.heartbeatConnectTimeoutMS == 20000
options.acceptableLatencyDifferenceMS == 15
options.heartbeatThreadCount == 0
options.requiredReplicaSetName == null
===========================================================================
com.mongodb.DBPortFactory.DBPortFactory(com.mongodb.MongoOptions):::EXIT
this.options == orig(options)
this.options.connectionsPerHost == options.connectionsPerHost
this.options.threadsAllowedToBlockForConnectionMultiplier == options.threadsAllowedToBlockForConnectionMultiplier
this.options.maxWaitTime == options.maxWaitTime
this.options.connectTimeout == options.connectTimeout
this.options.socketTimeout == options.socketTimeout
this.options.socketKeepAlive == options.socketKeepAlive
this.options.autoConnectRetry == options.autoConnectRetry
this.options.maxAutoConnectRetryTime == options.maxAutoConnectRetryTime
this.options.slaveOk == options.slaveOk
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this.options.dbDecoderFactory == options.dbDecoderFactory
this.options.dbDecoderFactory.getClass().getName() == options.dbDecoderFactory.getClass().getName()
this.options.dbEncoderFactory == options.dbEncoderFactory
this.options.dbEncoderFactory.getClass().getName() == options.dbEncoderFactory.getClass().getName()
this.options.safe == options.safe
this.options.w == options.w
this.options.wtimeout == options.wtimeout
this.options.fsync == options.fsync
this.options.j == options.fsync
this.options.socketFactory == options.socketFactory
this.options.socketFactory.getClass().getName() == options.socketFactory.getClass().getName()
this.options.cursorFinalizerEnabled == options.cursorFinalizerEnabled
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this.options.alwaysUseMBeans == options.alwaysUseMBeans
this.options.minConnectionsPerHost == options.minConnectionsPerHost
this.options.maxConnectionIdleTime == options.maxConnectionIdleTime
this.options.maxConnectionLifeTime == options.maxConnectionLifeTime
this.options.heartbeatFrequencyMS == options.heartbeatFrequencyMS
this.options.heartbeatConnectRetryFrequencyMS == options.connectionsPerHost
this.options.heartbeatConnectTimeoutMS == options.heartbeatConnectTimeoutMS
this.options.heartbeatReadTimeoutMS == options.heartbeatConnectTimeoutMS
this.options.acceptableLatencyDifferenceMS == options.acceptableLatencyDifferenceMS
this.options.heartbeatThreadCount == options.heartbeatThreadCount
options.description == orig(options.description)
options.connectionsPerHost == options.heartbeatConnectRetryFrequencyMS
options.connectionsPerHost == orig(options.connectionsPerHost)
options.connectionsPerHost == orig(options.heartbeatConnectRetryFrequencyMS)
options.threadsAllowedToBlockForConnectionMultiplier == orig(options.threadsAllowedToBlockForConnectionMultiplier)
options.maxWaitTime == orig(options.maxWaitTime)
options.connectTimeout == orig(options.connectTimeout)
options.socketTimeout == orig(options.socketTimeout)
options.socketKeepAlive == orig(options.socketKeepAlive)
options.autoConnectRetry == orig(options.autoConnectRetry)
options.maxAutoConnectRetryTime == orig(options.maxAutoConnectRetryTime)
options.slaveOk == orig(options.slaveOk)
options.readPreference == orig(options.readPreference)
options.dbDecoderFactory == orig(options.dbDecoderFactory)
options.dbDecoderFactory.getClass().getName() == orig(options.dbDecoderFactory.getClass().getName())
options.dbEncoderFactory == orig(options.dbEncoderFactory)
options.dbEncoderFactory.getClass().getName() == orig(options.dbEncoderFactory.getClass().getName())
options.safe == orig(options.safe)
options.w == orig(options.w)
options.wtimeout == orig(options.wtimeout)
options.fsync == options.j
options.fsync == orig(options.fsync)
options.fsync == orig(options.j)
options.socketFactory == orig(options.socketFactory)
options.socketFactory.getClass().getName() == orig(options.socketFactory.getClass().getName())
options.cursorFinalizerEnabled == orig(options.cursorFinalizerEnabled)
options.writeConcern == orig(options.writeConcern)
options.alwaysUseMBeans == orig(options.alwaysUseMBeans)
options.minConnectionsPerHost == orig(options.minConnectionsPerHost)
options.maxConnectionIdleTime == orig(options.maxConnectionIdleTime)
options.maxConnectionLifeTime == orig(options.maxConnectionLifeTime)
options.heartbeatFrequencyMS == orig(options.heartbeatFrequencyMS)
options.heartbeatConnectTimeoutMS == options.heartbeatReadTimeoutMS
options.heartbeatConnectTimeoutMS == orig(options.heartbeatConnectTimeoutMS)
options.heartbeatConnectTimeoutMS == orig(options.heartbeatReadTimeoutMS)
options.acceptableLatencyDifferenceMS == orig(options.acceptableLatencyDifferenceMS)
options.heartbeatThreadCount == orig(options.heartbeatThreadCount)
options.requiredReplicaSetName == orig(options.requiredReplicaSetName)
options.description == null
options.connectionsPerHost == 10
options.threadsAllowedToBlockForConnectionMultiplier == 5
options.maxWaitTime == 120000
options.connectTimeout == 10000
options.socketTimeout == 0
options.socketKeepAlive == false
options.autoConnectRetry == false
options.maxAutoConnectRetryTime == 0
options.slaveOk == false
options.readPreference == null
options.dbDecoderFactory has only one value
options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
options.dbEncoderFactory has only one value
options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
options.safe == false
options.w == 0
options.wtimeout == 0
options.fsync == false
options.socketFactory has only one value
options.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
options.cursorFinalizerEnabled == true
options.writeConcern == null
options.alwaysUseMBeans == false
options.minConnectionsPerHost == 0
options.maxConnectionIdleTime == 0
options.maxConnectionLifeTime == 0
options.heartbeatFrequencyMS == 5000
options.heartbeatConnectTimeoutMS == 20000
options.acceptableLatencyDifferenceMS == 15
options.heartbeatThreadCount == 0
options.requiredReplicaSetName == null
===========================================================================
com.mongodb.DBPortPool$NoMoreConnection:::CLASS
===========================================================================
com.mongodb.DBPortPool$NoMoreConnection:::OBJECT
this has only one value
this._code == -3
===========================================================================
com.mongodb.DBPortPool$NoMoreConnection.NoMoreConnection(java.lang.String):::ENTER
msg has only one value
msg.toString == "Timed out while waiting for a server that matches AnyServerSelector{} after 239 ms"
===========================================================================
com.mongodb.DBPortPool$NoMoreConnection.NoMoreConnection(java.lang.String):::EXIT
msg.toString == orig(msg.toString)
msg.toString == "Timed out while waiting for a server that matches AnyServerSelector{} after 239 ms"
===========================================================================
com.mongodb.DBTCPConnector$MyPort:::OBJECT
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID has only one value
com.mongodb.DBTCPConnector.this._closed == false
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
com.mongodb.DBTCPConnector.this._mongo._options has only one value
com.mongodb.DBTCPConnector.this._mongo._connector has only one value
com.mongodb.DBTCPConnector.this._mongo._dbs has only one value
com.mongodb.DBTCPConnector.this._mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
com.mongodb.DBTCPConnector.this._mongo._concern has only one value
com.mongodb.DBTCPConnector.this._mongo._readPref has only one value
com.mongodb.DBTCPConnector.this._mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.DBTCPConnector.this._mongo._netOptions has only one value
com.mongodb.DBTCPConnector.this._mongo._cleaner has only one value
com.mongodb.DBTCPConnector.this._mongo._authority has only one value
com.mongodb.DBTCPConnector.this._mongo._bufferPool has only one value
com.mongodb.DBTCPConnector.this._mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
com.mongodb.DBTCPConnector.this.cluster.getClass().getName() == com.mongodb.SingleServerCluster.class
com.mongodb.DBTCPConnector.this._myPort.pinnedRequestStatusThreadLocal has only one value
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
com.mongodb.DBTCPConnector.this.mongosHAServerSelector == null
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
===========================================================================
com.mongodb.DBTCPConnector$MyPort.MyPort(com.mongodb.DBTCPConnector):::ENTER
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID has only one value
com.mongodb.DBTCPConnector.this._closed == false
com.mongodb.DBTCPConnector.this._mongo == null
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
com.mongodb.DBTCPConnector.this.cluster == null
com.mongodb.DBTCPConnector.this._myPort == null
com.mongodb.DBTCPConnector.this.connectionMode == null
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
com.mongodb.DBTCPConnector.this.type == null
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
com.mongodb.DBTCPConnector.this.mongosHAServerSelector == null
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
===========================================================================
com.mongodb.DBTCPConnector$MyPort.MyPort(com.mongodb.DBTCPConnector):::EXIT
com.mongodb.DBTCPConnector.this == orig(com.mongodb.DBTCPConnector.this)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
com.mongodb.DBTCPConnector.this._closed == orig(com.mongodb.DBTCPConnector.this._closed)
com.mongodb.DBTCPConnector.this._mongo == orig(com.mongodb.DBTCPConnector.this._mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
com.mongodb.DBTCPConnector.this.cluster == orig(com.mongodb.DBTCPConnector.this.cluster)
com.mongodb.DBTCPConnector.this._myPort == orig(com.mongodb.DBTCPConnector.this._myPort)
com.mongodb.DBTCPConnector.this.connectionMode == orig(com.mongodb.DBTCPConnector.this.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.DBTCPConnector.this.type == orig(com.mongodb.DBTCPConnector.this.type)
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
com.mongodb.DBTCPConnector.this.mongosHAServerSelector == orig(com.mongodb.DBTCPConnector.this.mongosHAServerSelector)
com.mongodb.DBTCPConnector.this._mongo == null
com.mongodb.DBTCPConnector.this.cluster == null
com.mongodb.DBTCPConnector.this._myPort == null
com.mongodb.DBTCPConnector.this.connectionMode == null
com.mongodb.DBTCPConnector.this.type == null
===========================================================================
com.mongodb.DBTCPConnector$MyPort.getPinnedRequestPortForThread():::ENTER
this has only one value
this.pinnedRequestStatusThreadLocal has only one value
com.mongodb.DBTCPConnector.this has only one value
com.mongodb.DBTCPConnector.this._mongo has only one value
com.mongodb.DBTCPConnector.this.cluster has only one value
com.mongodb.DBTCPConnector.this._myPort has only one value
com.mongodb.DBTCPConnector.this.connectionMode has only one value
com.mongodb.DBTCPConnector.this.type has only one value
===========================================================================
com.mongodb.DBTCPConnector$MyPort.getPinnedRequestPortForThread():::EXIT
this.pinnedRequestStatusThreadLocal == orig(this.pinnedRequestStatusThreadLocal)
com.mongodb.DBTCPConnector.this == orig(com.mongodb.DBTCPConnector.this)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
com.mongodb.DBTCPConnector.this._closed == orig(com.mongodb.DBTCPConnector.this._closed)
com.mongodb.DBTCPConnector.this._mongo == orig(com.mongodb.DBTCPConnector.this._mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
com.mongodb.DBTCPConnector.this._mongo._options == orig(com.mongodb.DBTCPConnector.this._mongo._options)
com.mongodb.DBTCPConnector.this._mongo._connector == orig(com.mongodb.DBTCPConnector.this._mongo._connector)
com.mongodb.DBTCPConnector.this._mongo._dbs == orig(com.mongodb.DBTCPConnector.this._mongo._dbs)
com.mongodb.DBTCPConnector.this._mongo._dbs.getClass().getName() == orig(com.mongodb.DBTCPConnector.this._mongo._dbs.getClass().getName())
com.mongodb.DBTCPConnector.this._mongo._concern == orig(com.mongodb.DBTCPConnector.this._mongo._concern)
com.mongodb.DBTCPConnector.this._mongo._readPref == orig(com.mongodb.DBTCPConnector.this._mongo._readPref)
com.mongodb.DBTCPConnector.this._mongo._readPref.getClass().getName() == orig(com.mongodb.DBTCPConnector.this._mongo._readPref.getClass().getName())
com.mongodb.DBTCPConnector.this._mongo._netOptions == orig(com.mongodb.DBTCPConnector.this._mongo._netOptions)
com.mongodb.DBTCPConnector.this._mongo._cleaner == orig(com.mongodb.DBTCPConnector.this._mongo._cleaner)
com.mongodb.DBTCPConnector.this._mongo._authority == orig(com.mongodb.DBTCPConnector.this._mongo._authority)
com.mongodb.DBTCPConnector.this._mongo._bufferPool == orig(com.mongodb.DBTCPConnector.this._mongo._bufferPool)
com.mongodb.DBTCPConnector.this._mongo._bufferPool.getClass().getName() == orig(com.mongodb.DBTCPConnector.this._mongo._bufferPool.getClass().getName())
com.mongodb.DBTCPConnector.this.cluster == orig(com.mongodb.DBTCPConnector.this.cluster)
com.mongodb.DBTCPConnector.this.cluster.getClass().getName() == orig(com.mongodb.DBTCPConnector.this.cluster.getClass().getName())
com.mongodb.DBTCPConnector.this._myPort == orig(com.mongodb.DBTCPConnector.this._myPort)
com.mongodb.DBTCPConnector.this._myPort.pinnedRequestStatusThreadLocal == orig(com.mongodb.DBTCPConnector.this._myPort.pinnedRequestStatusThreadLocal)
com.mongodb.DBTCPConnector.this.connectionMode == orig(com.mongodb.DBTCPConnector.this.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.DBTCPConnector.this.type == orig(com.mongodb.DBTCPConnector.this.type)
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
com.mongodb.DBTCPConnector.this.mongosHAServerSelector == orig(com.mongodb.DBTCPConnector.this.mongosHAServerSelector)
this.pinnedRequestStatusThreadLocal has only one value
com.mongodb.DBTCPConnector.this has only one value
com.mongodb.DBTCPConnector.this._mongo has only one value
com.mongodb.DBTCPConnector.this.cluster has only one value
com.mongodb.DBTCPConnector.this._myPort has only one value
com.mongodb.DBTCPConnector.this.connectionMode has only one value
com.mongodb.DBTCPConnector.this.type has only one value
return == null
com.mongodb.DBPort._rootLogger has only one value
com.mongodb.PooledConnectionProvider.LOGGER has only one value
===========================================================================
com.mongodb.DBTCPConnector$MyPort.threadHasPinnedRequest():::ENTER
this has only one value
this.pinnedRequestStatusThreadLocal has only one value
com.mongodb.DBTCPConnector.this has only one value
com.mongodb.DBTCPConnector.this._mongo has only one value
com.mongodb.DBTCPConnector.this.cluster has only one value
com.mongodb.DBTCPConnector.this._myPort has only one value
com.mongodb.DBTCPConnector.this.connectionMode has only one value
com.mongodb.DBTCPConnector.this.type has only one value
===========================================================================
com.mongodb.DBTCPConnector$MyPort.threadHasPinnedRequest():::EXIT
this.pinnedRequestStatusThreadLocal == orig(this.pinnedRequestStatusThreadLocal)
com.mongodb.DBTCPConnector.this == orig(com.mongodb.DBTCPConnector.this)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
com.mongodb.DBTCPConnector.this._closed == orig(com.mongodb.DBTCPConnector.this._closed)
com.mongodb.DBTCPConnector.this._mongo == orig(com.mongodb.DBTCPConnector.this._mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
com.mongodb.DBTCPConnector.this._mongo._options == orig(com.mongodb.DBTCPConnector.this._mongo._options)
com.mongodb.DBTCPConnector.this._mongo._connector == orig(com.mongodb.DBTCPConnector.this._mongo._connector)
com.mongodb.DBTCPConnector.this._mongo._dbs == orig(com.mongodb.DBTCPConnector.this._mongo._dbs)
com.mongodb.DBTCPConnector.this._mongo._dbs.getClass().getName() == orig(com.mongodb.DBTCPConnector.this._mongo._dbs.getClass().getName())
com.mongodb.DBTCPConnector.this._mongo._concern == orig(com.mongodb.DBTCPConnector.this._mongo._concern)
com.mongodb.DBTCPConnector.this._mongo._readPref == orig(com.mongodb.DBTCPConnector.this._mongo._readPref)
com.mongodb.DBTCPConnector.this._mongo._readPref.getClass().getName() == orig(com.mongodb.DBTCPConnector.this._mongo._readPref.getClass().getName())
com.mongodb.DBTCPConnector.this._mongo._netOptions == orig(com.mongodb.DBTCPConnector.this._mongo._netOptions)
com.mongodb.DBTCPConnector.this._mongo._cleaner == orig(com.mongodb.DBTCPConnector.this._mongo._cleaner)
com.mongodb.DBTCPConnector.this._mongo._authority == orig(com.mongodb.DBTCPConnector.this._mongo._authority)
com.mongodb.DBTCPConnector.this._mongo._bufferPool == orig(com.mongodb.DBTCPConnector.this._mongo._bufferPool)
com.mongodb.DBTCPConnector.this._mongo._bufferPool.getClass().getName() == orig(com.mongodb.DBTCPConnector.this._mongo._bufferPool.getClass().getName())
com.mongodb.DBTCPConnector.this.cluster == orig(com.mongodb.DBTCPConnector.this.cluster)
com.mongodb.DBTCPConnector.this.cluster.getClass().getName() == orig(com.mongodb.DBTCPConnector.this.cluster.getClass().getName())
com.mongodb.DBTCPConnector.this._myPort == orig(com.mongodb.DBTCPConnector.this._myPort)
com.mongodb.DBTCPConnector.this._myPort.pinnedRequestStatusThreadLocal == orig(com.mongodb.DBTCPConnector.this._myPort.pinnedRequestStatusThreadLocal)
com.mongodb.DBTCPConnector.this.connectionMode == orig(com.mongodb.DBTCPConnector.this.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.DBTCPConnector.this.type == orig(com.mongodb.DBTCPConnector.this.type)
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
com.mongodb.DBTCPConnector.this.mongosHAServerSelector == orig(com.mongodb.DBTCPConnector.this.mongosHAServerSelector)
this.pinnedRequestStatusThreadLocal has only one value
com.mongodb.DBTCPConnector.this has only one value
com.mongodb.DBTCPConnector.this._mongo has only one value
com.mongodb.DBTCPConnector.this.cluster has only one value
com.mongodb.DBTCPConnector.this._myPort has only one value
com.mongodb.DBTCPConnector.this.connectionMode has only one value
com.mongodb.DBTCPConnector.this.type has only one value
return == false
===========================================================================
com.mongodb.DBTCPConnector$MyPort.threadHasPinnedRequest():::EXIT;condition="not(return == true)"
===========================================================================
com.mongodb.DBTCPConnector:::CLASS
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID has only one value
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID != null
===========================================================================
com.mongodb.DBTCPConnector:::OBJECT
this._closed == false
this._mongo != null
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.logger != null
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION != null
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME != null
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
this._mongo._options != null
this._mongo._options.description == null
this._mongo._options.connectionsPerHost == 10
this._mongo._options.threadsAllowedToBlockForConnectionMultiplier == 5
this._mongo._options.maxWaitTime == 120000
this._mongo._options.connectTimeout == 10000
this._mongo._options.socketTimeout == 0
this._mongo._options.socketKeepAlive == false
this._mongo._options.autoConnectRetry == false
this._mongo._options.maxAutoConnectRetryTime == 0
this._mongo._options.slaveOk == false
this._mongo._options.readPreference == null
this._mongo._options.dbDecoderFactory has only one value
this._mongo._options.dbDecoderFactory != null
this._mongo._options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
this._mongo._options.dbEncoderFactory has only one value
this._mongo._options.dbEncoderFactory != null
this._mongo._options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
this._mongo._options.safe == false
this._mongo._options.w == 0
this._mongo._options.wtimeout == 0
this._mongo._options.fsync == false
this._mongo._options.j == false
this._mongo._options.socketFactory has only one value
this._mongo._options.socketFactory != null
this._mongo._options.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
this._mongo._options.cursorFinalizerEnabled == true
this._mongo._options.writeConcern == null
this._mongo._options.alwaysUseMBeans == false
this._mongo._options.minConnectionsPerHost == 0
this._mongo._options.maxConnectionIdleTime == 0
this._mongo._options.maxConnectionLifeTime == 0
this._mongo._options.heartbeatFrequencyMS == 5000
this._mongo._options.heartbeatConnectRetryFrequencyMS == 10
this._mongo._options.heartbeatConnectTimeoutMS == 20000
this._mongo._options.heartbeatReadTimeoutMS == 20000
this._mongo._options.acceptableLatencyDifferenceMS == 15
this._mongo._options.heartbeatThreadCount == 0
this._mongo._options.requiredReplicaSetName == null
this._mongo._connector._closed == false
this._mongo._connector._mongo != null
this._mongo._connector.cluster.getClass().getName() == com.mongodb.SingleServerCluster.class
this._mongo._connector._myPort != null
this._mongo._connector.connectionMode has only one value
this._mongo._connector.connectionMode != null
this._mongo._connector.type has only one value
this._mongo._connector.type != null
this._mongo._connector.mongosHAServerSelector == null
this._mongo._dbs != null
this._mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
this._mongo._concern has only one value
this._mongo._concern != null
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ERRORS_IGNORED != null
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED != null
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED != null
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.FSYNCED != null
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.JOURNALED != null
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED != null
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NONE != null
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.NORMAL != null
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.SAFE != null
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.MAJORITY != null
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.FSYNC_SAFE != null
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE != null
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE != null
com.mongodb.WriteConcern._namedConcerns == null
this._mongo._concern._w has only one value
this._mongo._concern._w != null
this._mongo._concern._w.getClass().getName() == java.lang.Integer.class
this._mongo._concern._wtimeout == 0
this._mongo._concern._fsync == false
this._mongo._concern._j == false
this._mongo._concern._continueOnError == false
this._mongo._readPref has only one value
this._mongo._readPref != null
this._mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY != null
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY != null
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY has only one value
com.mongodb.ReadPreference._PRIMARY != null
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY != null
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY_PREFERRED has only one value
com.mongodb.ReadPreference._SECONDARY_PREFERRED != null
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED != null
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST != null
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
this._mongo._netOptions != null
this._mongo._netOptions._parent == null
this._mongo._netOptions._options == 0
this._mongo._netOptions._hasOptions == false
this._mongo._authority != null
this._mongo._authority.type has only one value
this._mongo._authority.type != null
this._mongo._authority.serverAddresses != null
this._mongo._authority.serverAddresses[] elements != null
this._mongo._authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
this._mongo._authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
this._mongo._authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
this._mongo._authority.credentialsStore != null
this._mongo._bufferPool != null
this._mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
this._mongo._bufferPool._max == 1000
this._mongo._bufferPool._stored != null
this._mongo._bufferPool._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
this.cluster.getClass().getName() == com.mongodb.SingleServerCluster.class
this._myPort != null
this._myPort.pinnedRequestStatusThreadLocal != null
com.mongodb.DBTCPConnector.this._closed == false
com.mongodb.DBTCPConnector.this._mongo != null
com.mongodb.DBTCPConnector.this.cluster.getClass().getName() == com.mongodb.SingleServerCluster.class
com.mongodb.DBTCPConnector.this._myPort != null
com.mongodb.DBTCPConnector.this.connectionMode has only one value
com.mongodb.DBTCPConnector.this.connectionMode != null
com.mongodb.DBTCPConnector.this.type has only one value
com.mongodb.DBTCPConnector.this.type != null
com.mongodb.DBTCPConnector.this.mongosHAServerSelector == null
this.connectionMode has only one value
this.connectionMode != null
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Single != null
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.Multiple != null
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES != null
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[] elements != null
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
this.type has only one value
this.type != null
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.StandAlone != null
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.ReplicaSet != null
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Sharded != null
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.Unknown != null
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES != null
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[] elements != null
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
this.mongosHAServerSelector == null
size(this._mongo._authority.serverAddresses[]) == 1
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
===========================================================================
com.mongodb.DBTCPConnector.DBTCPConnector(com.mongodb.Mongo):::ENTER
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
mongo._options.description == null
mongo._options.connectionsPerHost == 10
mongo._options.threadsAllowedToBlockForConnectionMultiplier == 5
mongo._options.maxWaitTime == 120000
mongo._options.connectTimeout == 10000
mongo._options.socketTimeout == 0
mongo._options.socketKeepAlive == false
mongo._options.autoConnectRetry == false
mongo._options.maxAutoConnectRetryTime == 0
mongo._options.slaveOk == false
mongo._options.readPreference == null
mongo._options.dbDecoderFactory has only one value
mongo._options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
mongo._options.dbEncoderFactory has only one value
mongo._options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
mongo._options.safe == false
mongo._options.w == 0
mongo._options.wtimeout == 0
mongo._options.fsync == false
mongo._options.j == false
mongo._options.socketFactory has only one value
mongo._options.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
mongo._options.cursorFinalizerEnabled == true
mongo._options.writeConcern == null
mongo._options.alwaysUseMBeans == false
mongo._options.minConnectionsPerHost == 0
mongo._options.maxConnectionIdleTime == 0
mongo._options.maxConnectionLifeTime == 0
mongo._options.heartbeatFrequencyMS == 5000
mongo._options.heartbeatConnectRetryFrequencyMS == 10
mongo._options.heartbeatConnectTimeoutMS == 20000
mongo._options.heartbeatReadTimeoutMS == 20000
mongo._options.acceptableLatencyDifferenceMS == 15
mongo._options.heartbeatThreadCount == 0
mongo._options.requiredReplicaSetName == null
mongo._connector == null
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID has only one value
mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
mongo._concern has only one value
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
mongo._concern._w has only one value
mongo._concern._w.getClass().getName() == java.lang.Integer.class
mongo._concern._wtimeout == 0
mongo._concern._fsync == false
mongo._concern._j == false
mongo._concern._continueOnError == false
mongo._readPref has only one value
mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY has only one value
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY_PREFERRED has only one value
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
mongo._netOptions._parent == null
mongo._netOptions._options == 0
mongo._netOptions._hasOptions == false
mongo._cleaner == null
mongo._authority.type has only one value
mongo._authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
mongo._authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
mongo._authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
mongo._bufferPool._max == 1000
mongo._bufferPool._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
size(mongo._authority.serverAddresses[]) == 1
===========================================================================
com.mongodb.DBTCPConnector.DBTCPConnector(com.mongodb.Mongo):::EXIT
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
mongo._options == orig(mongo._options)
mongo._options.description == orig(mongo._options.description)
mongo._options.connectionsPerHost == orig(mongo._options.connectionsPerHost)
mongo._options.threadsAllowedToBlockForConnectionMultiplier == orig(mongo._options.threadsAllowedToBlockForConnectionMultiplier)
mongo._options.maxWaitTime == orig(mongo._options.maxWaitTime)
mongo._options.connectTimeout == orig(mongo._options.connectTimeout)
mongo._options.socketTimeout == orig(mongo._options.socketTimeout)
mongo._options.socketKeepAlive == orig(mongo._options.socketKeepAlive)
mongo._options.autoConnectRetry == orig(mongo._options.autoConnectRetry)
mongo._options.maxAutoConnectRetryTime == orig(mongo._options.maxAutoConnectRetryTime)
mongo._options.slaveOk == orig(mongo._options.slaveOk)
mongo._options.readPreference == orig(mongo._options.readPreference)
mongo._options.dbDecoderFactory == orig(mongo._options.dbDecoderFactory)
mongo._options.dbDecoderFactory.getClass().getName() == orig(mongo._options.dbDecoderFactory.getClass().getName())
mongo._options.dbEncoderFactory == orig(mongo._options.dbEncoderFactory)
mongo._options.dbEncoderFactory.getClass().getName() == orig(mongo._options.dbEncoderFactory.getClass().getName())
mongo._options.safe == orig(mongo._options.safe)
mongo._options.w == orig(mongo._options.w)
mongo._options.wtimeout == orig(mongo._options.wtimeout)
mongo._options.fsync == orig(mongo._options.fsync)
mongo._options.j == orig(mongo._options.j)
mongo._options.socketFactory == orig(mongo._options.socketFactory)
mongo._options.socketFactory.getClass().getName() == orig(mongo._options.socketFactory.getClass().getName())
mongo._options.cursorFinalizerEnabled == orig(mongo._options.cursorFinalizerEnabled)
mongo._options.writeConcern == orig(mongo._options.writeConcern)
mongo._options.alwaysUseMBeans == orig(mongo._options.alwaysUseMBeans)
mongo._options.minConnectionsPerHost == orig(mongo._options.minConnectionsPerHost)
mongo._options.maxConnectionIdleTime == orig(mongo._options.maxConnectionIdleTime)
mongo._options.maxConnectionLifeTime == orig(mongo._options.maxConnectionLifeTime)
mongo._options.heartbeatFrequencyMS == orig(mongo._options.heartbeatFrequencyMS)
mongo._options.heartbeatConnectRetryFrequencyMS == orig(mongo._options.heartbeatConnectRetryFrequencyMS)
mongo._options.heartbeatConnectTimeoutMS == orig(mongo._options.heartbeatConnectTimeoutMS)
mongo._options.heartbeatReadTimeoutMS == orig(mongo._options.heartbeatReadTimeoutMS)
mongo._options.acceptableLatencyDifferenceMS == orig(mongo._options.acceptableLatencyDifferenceMS)
mongo._options.heartbeatThreadCount == orig(mongo._options.heartbeatThreadCount)
mongo._options.requiredReplicaSetName == orig(mongo._options.requiredReplicaSetName)
mongo._connector == orig(mongo._connector)
mongo._dbs == orig(mongo._dbs)
mongo._dbs.getClass().getName() == orig(mongo._dbs.getClass().getName())
mongo._concern == orig(mongo._concern)
mongo._concern._w == orig(mongo._concern._w)
mongo._concern._w.getClass().getName() == orig(mongo._concern._w.getClass().getName())
mongo._concern._wtimeout == orig(mongo._concern._wtimeout)
mongo._concern._fsync == orig(mongo._concern._fsync)
mongo._concern._j == orig(mongo._concern._j)
mongo._concern._continueOnError == orig(mongo._concern._continueOnError)
mongo._readPref == orig(mongo._readPref)
mongo._readPref.getClass().getName() == orig(mongo._readPref.getClass().getName())
mongo._netOptions == orig(mongo._netOptions)
mongo._netOptions._parent == orig(mongo._netOptions._parent)
mongo._netOptions._options == orig(mongo._netOptions._options)
mongo._netOptions._hasOptions == orig(mongo._netOptions._hasOptions)
mongo._cleaner == orig(mongo._cleaner)
mongo._authority == orig(mongo._authority)
mongo._authority.type == orig(mongo._authority.type)
mongo._authority.serverAddresses == orig(mongo._authority.serverAddresses)
mongo._authority.serverAddresses[] == orig(mongo._authority.serverAddresses[])
mongo._authority.serverAddresses.getClass().getName() == orig(mongo._authority.serverAddresses.getClass().getName())
mongo._authority.credentialsStore == orig(mongo._authority.credentialsStore)
mongo._bufferPool == orig(mongo._bufferPool)
mongo._bufferPool.getClass().getName() == orig(mongo._bufferPool.getClass().getName())
mongo._bufferPool._max == orig(mongo._bufferPool._max)
mongo._bufferPool._stored == orig(mongo._bufferPool._stored)
mongo._bufferPool._stored.getClass().getName() == orig(mongo._bufferPool._stored.getClass().getName())
this._mongo._connector == null
this._mongo._cleaner == null
this.cluster == null
com.mongodb.DBTCPConnector.this.cluster == null
mongo._options.description == null
mongo._options.connectionsPerHost == 10
mongo._options.threadsAllowedToBlockForConnectionMultiplier == 5
mongo._options.maxWaitTime == 120000
mongo._options.connectTimeout == 10000
mongo._options.socketTimeout == 0
mongo._options.socketKeepAlive == false
mongo._options.autoConnectRetry == false
mongo._options.maxAutoConnectRetryTime == 0
mongo._options.slaveOk == false
mongo._options.readPreference == null
mongo._options.dbDecoderFactory has only one value
mongo._options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
mongo._options.dbEncoderFactory has only one value
mongo._options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
mongo._options.safe == false
mongo._options.w == 0
mongo._options.wtimeout == 0
mongo._options.fsync == false
mongo._options.j == false
mongo._options.socketFactory has only one value
mongo._options.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
mongo._options.cursorFinalizerEnabled == true
mongo._options.writeConcern == null
mongo._options.alwaysUseMBeans == false
mongo._options.minConnectionsPerHost == 0
mongo._options.maxConnectionIdleTime == 0
mongo._options.maxConnectionLifeTime == 0
mongo._options.heartbeatFrequencyMS == 5000
mongo._options.heartbeatConnectRetryFrequencyMS == 10
mongo._options.heartbeatConnectTimeoutMS == 20000
mongo._options.heartbeatReadTimeoutMS == 20000
mongo._options.acceptableLatencyDifferenceMS == 15
mongo._options.heartbeatThreadCount == 0
mongo._options.requiredReplicaSetName == null
mongo._connector == null
mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
mongo._concern has only one value
mongo._concern._w has only one value
mongo._concern._w.getClass().getName() == java.lang.Integer.class
mongo._concern._wtimeout == 0
mongo._concern._fsync == false
mongo._concern._j == false
mongo._concern._continueOnError == false
mongo._readPref has only one value
mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
mongo._netOptions._parent == null
mongo._netOptions._options == 0
mongo._netOptions._hasOptions == false
mongo._cleaner == null
mongo._authority.type has only one value
mongo._authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
mongo._authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
mongo._authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
mongo._bufferPool._max == 1000
mongo._bufferPool._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
size(mongo._authority.serverAddresses[]) == 1
===========================================================================
com.mongodb.DBTCPConnector.createServerSelector(com.mongodb.ReadPreference):::ENTER
this has only one value
this._mongo has only one value
this._mongo._options has only one value
this._mongo._connector has only one value
this._mongo._connector._mongo has only one value
this._mongo._connector.cluster has only one value
this._mongo._connector._myPort has only one value
this._mongo._dbs has only one value
this._mongo._netOptions has only one value
this._mongo._cleaner has only one value
com.mongodb.Mongo.this has only one value
this._mongo._authority has only one value
this._mongo._authority.serverAddresses has only one value
this._mongo._authority.serverAddresses[] contains no nulls and has only one value, of length 1
this._mongo._authority.serverAddresses[] elements has only one value
this._mongo._authority.credentialsStore has only one value
this._mongo._bufferPool has only one value
this._mongo._bufferPool._stored has only one value
this.cluster has only one value
this._myPort has only one value
this._myPort.pinnedRequestStatusThreadLocal has only one value
com.mongodb.DBTCPConnector.this has only one value
com.mongodb.DBTCPConnector.this._mongo has only one value
com.mongodb.DBTCPConnector.this.cluster has only one value
com.mongodb.DBTCPConnector.this._myPort has only one value
readPreference has only one value
readPreference.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
===========================================================================
com.mongodb.DBTCPConnector.createServerSelector(com.mongodb.ReadPreference):::EXIT563
===========================================================================
com.mongodb.DBTCPConnector.createServerSelector(com.mongodb.ReadPreference):::EXIT
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
this._closed == orig(this._closed)
this._mongo == orig(this._mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this._mongo._options == orig(this._mongo._options)
this._mongo._options.description == orig(this._mongo._options.description)
this._mongo._options.connectionsPerHost == orig(this._mongo._options.connectionsPerHost)
this._mongo._options.threadsAllowedToBlockForConnectionMultiplier == orig(this._mongo._options.threadsAllowedToBlockForConnectionMultiplier)
this._mongo._options.maxWaitTime == orig(this._mongo._options.maxWaitTime)
this._mongo._options.connectTimeout == orig(this._mongo._options.connectTimeout)
this._mongo._options.socketTimeout == orig(this._mongo._options.socketTimeout)
this._mongo._options.socketKeepAlive == orig(this._mongo._options.socketKeepAlive)
this._mongo._options.autoConnectRetry == orig(this._mongo._options.autoConnectRetry)
this._mongo._options.maxAutoConnectRetryTime == orig(this._mongo._options.maxAutoConnectRetryTime)
this._mongo._options.slaveOk == orig(this._mongo._options.slaveOk)
this._mongo._options.readPreference == orig(this._mongo._options.readPreference)
this._mongo._options.dbDecoderFactory == orig(this._mongo._options.dbDecoderFactory)
this._mongo._options.dbDecoderFactory.getClass().getName() == orig(this._mongo._options.dbDecoderFactory.getClass().getName())
this._mongo._options.dbEncoderFactory == orig(this._mongo._options.dbEncoderFactory)
this._mongo._options.dbEncoderFactory.getClass().getName() == orig(this._mongo._options.dbEncoderFactory.getClass().getName())
this._mongo._options.safe == orig(this._mongo._options.safe)
this._mongo._options.w == orig(this._mongo._options.w)
this._mongo._options.wtimeout == orig(this._mongo._options.wtimeout)
this._mongo._options.fsync == orig(this._mongo._options.fsync)
this._mongo._options.j == orig(this._mongo._options.j)
this._mongo._options.socketFactory == orig(this._mongo._options.socketFactory)
this._mongo._options.socketFactory.getClass().getName() == orig(this._mongo._options.socketFactory.getClass().getName())
this._mongo._options.cursorFinalizerEnabled == orig(this._mongo._options.cursorFinalizerEnabled)
this._mongo._options.writeConcern == orig(this._mongo._options.writeConcern)
this._mongo._options.alwaysUseMBeans == orig(this._mongo._options.alwaysUseMBeans)
this._mongo._options.minConnectionsPerHost == orig(this._mongo._options.minConnectionsPerHost)
this._mongo._options.maxConnectionIdleTime == orig(this._mongo._options.maxConnectionIdleTime)
this._mongo._options.maxConnectionLifeTime == orig(this._mongo._options.maxConnectionLifeTime)
this._mongo._options.heartbeatFrequencyMS == orig(this._mongo._options.heartbeatFrequencyMS)
this._mongo._options.heartbeatConnectRetryFrequencyMS == orig(this._mongo._options.heartbeatConnectRetryFrequencyMS)
this._mongo._options.heartbeatConnectTimeoutMS == orig(this._mongo._options.heartbeatConnectTimeoutMS)
this._mongo._options.heartbeatReadTimeoutMS == orig(this._mongo._options.heartbeatReadTimeoutMS)
this._mongo._options.acceptableLatencyDifferenceMS == orig(this._mongo._options.acceptableLatencyDifferenceMS)
this._mongo._options.heartbeatThreadCount == orig(this._mongo._options.heartbeatThreadCount)
this._mongo._options.requiredReplicaSetName == orig(this._mongo._options.requiredReplicaSetName)
this._mongo._connector == orig(this._mongo._connector)
this._mongo._connector._closed == orig(this._mongo._connector._closed)
this._mongo._connector._mongo == orig(this._mongo._connector._mongo)
this._mongo._connector.cluster == orig(this._mongo._connector.cluster)
this._mongo._connector.cluster.getClass().getName() == orig(this._mongo._connector.cluster.getClass().getName())
this._mongo._connector._myPort == orig(this._mongo._connector._myPort)
this._mongo._connector.connectionMode == orig(this._mongo._connector.connectionMode)
this._mongo._connector.type == orig(this._mongo._connector.type)
this._mongo._connector.mongosHAServerSelector == orig(this._mongo._connector.mongosHAServerSelector)
this._mongo._dbs == orig(this._mongo._dbs)
this._mongo._dbs.getClass().getName() == orig(this._mongo._dbs.getClass().getName())
this._mongo._concern == orig(this._mongo._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this._mongo._concern._w == orig(this._mongo._concern._w)
this._mongo._concern._w.getClass().getName() == orig(this._mongo._concern._w.getClass().getName())
this._mongo._concern._wtimeout == orig(this._mongo._concern._wtimeout)
this._mongo._concern._fsync == orig(this._mongo._concern._fsync)
this._mongo._concern._j == orig(this._mongo._concern._j)
this._mongo._concern._continueOnError == orig(this._mongo._concern._continueOnError)
this._mongo._readPref == orig(this._mongo._readPref)
this._mongo._readPref.getClass().getName() == orig(this._mongo._readPref.getClass().getName())
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this._mongo._netOptions == orig(this._mongo._netOptions)
this._mongo._netOptions._parent == orig(this._mongo._netOptions._parent)
this._mongo._netOptions._options == orig(this._mongo._netOptions._options)
this._mongo._netOptions._hasOptions == orig(this._mongo._netOptions._hasOptions)
this._mongo._cleaner == orig(this._mongo._cleaner)
com.mongodb.Mongo.this == orig(com.mongodb.Mongo.this)
this._mongo._authority == orig(this._mongo._authority)
this._mongo._authority.type == orig(this._mongo._authority.type)
this._mongo._authority.serverAddresses == orig(this._mongo._authority.serverAddresses)
this._mongo._authority.serverAddresses[] == orig(this._mongo._authority.serverAddresses[])
this._mongo._authority.serverAddresses.getClass().getName() == orig(this._mongo._authority.serverAddresses.getClass().getName())
this._mongo._authority.credentialsStore == orig(this._mongo._authority.credentialsStore)
this._mongo._bufferPool == orig(this._mongo._bufferPool)
this._mongo._bufferPool.getClass().getName() == orig(this._mongo._bufferPool.getClass().getName())
this._mongo._bufferPool._max == orig(this._mongo._bufferPool._max)
this._mongo._bufferPool._stored == orig(this._mongo._bufferPool._stored)
this._mongo._bufferPool._stored.getClass().getName() == orig(this._mongo._bufferPool._stored.getClass().getName())
this.cluster == orig(this.cluster)
this.cluster.getClass().getName() == orig(this.cluster.getClass().getName())
this._myPort == orig(this._myPort)
this._myPort.pinnedRequestStatusThreadLocal == orig(this._myPort.pinnedRequestStatusThreadLocal)
com.mongodb.DBTCPConnector.this == orig(com.mongodb.DBTCPConnector.this)
com.mongodb.DBTCPConnector.this._closed == orig(com.mongodb.DBTCPConnector.this._closed)
com.mongodb.DBTCPConnector.this._mongo == orig(com.mongodb.DBTCPConnector.this._mongo)
com.mongodb.DBTCPConnector.this.cluster == orig(com.mongodb.DBTCPConnector.this.cluster)
com.mongodb.DBTCPConnector.this.cluster.getClass().getName() == orig(com.mongodb.DBTCPConnector.this.cluster.getClass().getName())
com.mongodb.DBTCPConnector.this._myPort == orig(com.mongodb.DBTCPConnector.this._myPort)
com.mongodb.DBTCPConnector.this.connectionMode == orig(com.mongodb.DBTCPConnector.this.connectionMode)
com.mongodb.DBTCPConnector.this.type == orig(com.mongodb.DBTCPConnector.this.type)
com.mongodb.DBTCPConnector.this.mongosHAServerSelector == orig(com.mongodb.DBTCPConnector.this.mongosHAServerSelector)
this.connectionMode == orig(this.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
this.type == orig(this.type)
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.mongosHAServerSelector == orig(this.mongosHAServerSelector)
this._mongo has only one value
this._mongo._options has only one value
this._mongo._connector has only one value
this._mongo._connector._mongo has only one value
this._mongo._connector.cluster has only one value
this._mongo._connector._myPort has only one value
this._mongo._dbs has only one value
this._mongo._netOptions has only one value
this._mongo._cleaner has only one value
com.mongodb.Mongo.this has only one value
this._mongo._authority has only one value
this._mongo._authority.serverAddresses has only one value
this._mongo._authority.serverAddresses[] contains no nulls and has only one value, of length 1
this._mongo._authority.serverAddresses[] elements has only one value
this._mongo._authority.credentialsStore has only one value
this._mongo._bufferPool has only one value
this._mongo._bufferPool._stored has only one value
this.cluster has only one value
this._myPort has only one value
this._myPort.pinnedRequestStatusThreadLocal has only one value
com.mongodb.DBTCPConnector.this has only one value
com.mongodb.DBTCPConnector.this._mongo has only one value
com.mongodb.DBTCPConnector.this.cluster has only one value
com.mongodb.DBTCPConnector.this._myPort has only one value
return has only one value
return.getClass().getName() == com.mongodb.AnyServerSelector.class
===========================================================================
com.mongodb.DBTCPConnector.getClusterWaitTimeMS():::ENTER
this has only one value
this._mongo has only one value
this._mongo._options has only one value
this._mongo._connector has only one value
this._mongo._connector._mongo has only one value
this._mongo._connector.cluster has only one value
this._mongo._connector._myPort has only one value
this._mongo._dbs has only one value
this._mongo._netOptions has only one value
this._mongo._cleaner has only one value
com.mongodb.Mongo.this has only one value
this._mongo._authority has only one value
this._mongo._authority.serverAddresses has only one value
this._mongo._authority.serverAddresses[] contains no nulls and has only one value, of length 1
this._mongo._authority.serverAddresses[] elements has only one value
this._mongo._authority.credentialsStore has only one value
this._mongo._bufferPool has only one value
this._mongo._bufferPool._stored has only one value
this.cluster has only one value
this._myPort has only one value
this._myPort.pinnedRequestStatusThreadLocal has only one value
com.mongodb.DBTCPConnector.this has only one value
com.mongodb.DBTCPConnector.this._mongo has only one value
com.mongodb.DBTCPConnector.this.cluster has only one value
com.mongodb.DBTCPConnector.this._myPort has only one value
===========================================================================
com.mongodb.DBTCPConnector.getClusterWaitTimeMS():::EXIT
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
this._closed == orig(this._closed)
this._mongo == orig(this._mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this._mongo._options == orig(this._mongo._options)
this._mongo._options.description == orig(this._mongo._options.description)
this._mongo._options.connectionsPerHost == orig(this._mongo._options.connectionsPerHost)
this._mongo._options.threadsAllowedToBlockForConnectionMultiplier == orig(this._mongo._options.threadsAllowedToBlockForConnectionMultiplier)
this._mongo._options.maxWaitTime == orig(this._mongo._options.maxWaitTime)
this._mongo._options.connectTimeout == orig(this._mongo._options.connectTimeout)
this._mongo._options.socketTimeout == orig(this._mongo._options.socketTimeout)
this._mongo._options.socketKeepAlive == orig(this._mongo._options.socketKeepAlive)
this._mongo._options.autoConnectRetry == orig(this._mongo._options.autoConnectRetry)
this._mongo._options.maxAutoConnectRetryTime == orig(this._mongo._options.maxAutoConnectRetryTime)
this._mongo._options.slaveOk == orig(this._mongo._options.slaveOk)
this._mongo._options.readPreference == orig(this._mongo._options.readPreference)
this._mongo._options.dbDecoderFactory == orig(this._mongo._options.dbDecoderFactory)
this._mongo._options.dbDecoderFactory.getClass().getName() == orig(this._mongo._options.dbDecoderFactory.getClass().getName())
this._mongo._options.dbEncoderFactory == orig(this._mongo._options.dbEncoderFactory)
this._mongo._options.dbEncoderFactory.getClass().getName() == orig(this._mongo._options.dbEncoderFactory.getClass().getName())
this._mongo._options.safe == orig(this._mongo._options.safe)
this._mongo._options.w == orig(this._mongo._options.w)
this._mongo._options.wtimeout == orig(this._mongo._options.wtimeout)
this._mongo._options.fsync == orig(this._mongo._options.fsync)
this._mongo._options.j == orig(this._mongo._options.j)
this._mongo._options.socketFactory == orig(this._mongo._options.socketFactory)
this._mongo._options.socketFactory.getClass().getName() == orig(this._mongo._options.socketFactory.getClass().getName())
this._mongo._options.cursorFinalizerEnabled == orig(this._mongo._options.cursorFinalizerEnabled)
this._mongo._options.writeConcern == orig(this._mongo._options.writeConcern)
this._mongo._options.alwaysUseMBeans == orig(this._mongo._options.alwaysUseMBeans)
this._mongo._options.minConnectionsPerHost == orig(this._mongo._options.minConnectionsPerHost)
this._mongo._options.maxConnectionIdleTime == orig(this._mongo._options.maxConnectionIdleTime)
this._mongo._options.maxConnectionLifeTime == orig(this._mongo._options.maxConnectionLifeTime)
this._mongo._options.heartbeatFrequencyMS == orig(this._mongo._options.heartbeatFrequencyMS)
this._mongo._options.heartbeatConnectRetryFrequencyMS == orig(this._mongo._options.heartbeatConnectRetryFrequencyMS)
this._mongo._options.heartbeatConnectTimeoutMS == orig(this._mongo._options.heartbeatConnectTimeoutMS)
this._mongo._options.heartbeatReadTimeoutMS == orig(this._mongo._options.heartbeatReadTimeoutMS)
this._mongo._options.acceptableLatencyDifferenceMS == orig(this._mongo._options.acceptableLatencyDifferenceMS)
this._mongo._options.heartbeatThreadCount == orig(this._mongo._options.heartbeatThreadCount)
this._mongo._options.requiredReplicaSetName == orig(this._mongo._options.requiredReplicaSetName)
this._mongo._connector == orig(this._mongo._connector)
this._mongo._connector._closed == orig(this._mongo._connector._closed)
this._mongo._connector._mongo == orig(this._mongo._connector._mongo)
this._mongo._connector.cluster == orig(this._mongo._connector.cluster)
this._mongo._connector.cluster.getClass().getName() == orig(this._mongo._connector.cluster.getClass().getName())
this._mongo._connector._myPort == orig(this._mongo._connector._myPort)
this._mongo._connector.connectionMode == orig(this._mongo._connector.connectionMode)
this._mongo._connector.type == orig(this._mongo._connector.type)
this._mongo._connector.mongosHAServerSelector == orig(this._mongo._connector.mongosHAServerSelector)
this._mongo._dbs == orig(this._mongo._dbs)
this._mongo._dbs.getClass().getName() == orig(this._mongo._dbs.getClass().getName())
this._mongo._concern == orig(this._mongo._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this._mongo._concern._w == orig(this._mongo._concern._w)
this._mongo._concern._w.getClass().getName() == orig(this._mongo._concern._w.getClass().getName())
this._mongo._concern._wtimeout == orig(this._mongo._concern._wtimeout)
this._mongo._concern._fsync == orig(this._mongo._concern._fsync)
this._mongo._concern._j == orig(this._mongo._concern._j)
this._mongo._concern._continueOnError == orig(this._mongo._concern._continueOnError)
this._mongo._readPref == orig(this._mongo._readPref)
this._mongo._readPref.getClass().getName() == orig(this._mongo._readPref.getClass().getName())
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this._mongo._netOptions == orig(this._mongo._netOptions)
this._mongo._netOptions._parent == orig(this._mongo._netOptions._parent)
this._mongo._netOptions._options == orig(this._mongo._netOptions._options)
this._mongo._netOptions._hasOptions == orig(this._mongo._netOptions._hasOptions)
this._mongo._cleaner == orig(this._mongo._cleaner)
com.mongodb.Mongo.this == orig(com.mongodb.Mongo.this)
this._mongo._authority == orig(this._mongo._authority)
this._mongo._authority.type == orig(this._mongo._authority.type)
this._mongo._authority.serverAddresses == orig(this._mongo._authority.serverAddresses)
this._mongo._authority.serverAddresses[] == orig(this._mongo._authority.serverAddresses[])
this._mongo._authority.serverAddresses.getClass().getName() == orig(this._mongo._authority.serverAddresses.getClass().getName())
this._mongo._authority.credentialsStore == orig(this._mongo._authority.credentialsStore)
this._mongo._bufferPool == orig(this._mongo._bufferPool)
this._mongo._bufferPool.getClass().getName() == orig(this._mongo._bufferPool.getClass().getName())
this._mongo._bufferPool._max == orig(this._mongo._bufferPool._max)
this._mongo._bufferPool._stored == orig(this._mongo._bufferPool._stored)
this._mongo._bufferPool._stored.getClass().getName() == orig(this._mongo._bufferPool._stored.getClass().getName())
this.cluster == orig(this.cluster)
this.cluster.getClass().getName() == orig(this.cluster.getClass().getName())
this._myPort == orig(this._myPort)
this._myPort.pinnedRequestStatusThreadLocal == orig(this._myPort.pinnedRequestStatusThreadLocal)
com.mongodb.DBTCPConnector.this == orig(com.mongodb.DBTCPConnector.this)
com.mongodb.DBTCPConnector.this._closed == orig(com.mongodb.DBTCPConnector.this._closed)
com.mongodb.DBTCPConnector.this._mongo == orig(com.mongodb.DBTCPConnector.this._mongo)
com.mongodb.DBTCPConnector.this.cluster == orig(com.mongodb.DBTCPConnector.this.cluster)
com.mongodb.DBTCPConnector.this.cluster.getClass().getName() == orig(com.mongodb.DBTCPConnector.this.cluster.getClass().getName())
com.mongodb.DBTCPConnector.this._myPort == orig(com.mongodb.DBTCPConnector.this._myPort)
com.mongodb.DBTCPConnector.this.connectionMode == orig(com.mongodb.DBTCPConnector.this.connectionMode)
com.mongodb.DBTCPConnector.this.type == orig(com.mongodb.DBTCPConnector.this.type)
com.mongodb.DBTCPConnector.this.mongosHAServerSelector == orig(com.mongodb.DBTCPConnector.this.mongosHAServerSelector)
this.connectionMode == orig(this.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
this.type == orig(this.type)
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.mongosHAServerSelector == orig(this.mongosHAServerSelector)
this._mongo has only one value
this._mongo._options has only one value
this._mongo._connector has only one value
this._mongo._connector._mongo has only one value
this._mongo._connector.cluster has only one value
this._mongo._connector._myPort has only one value
this._mongo._dbs has only one value
this._mongo._netOptions has only one value
this._mongo._cleaner has only one value
com.mongodb.Mongo.this has only one value
this._mongo._authority has only one value
this._mongo._authority.serverAddresses has only one value
this._mongo._authority.serverAddresses[] contains no nulls and has only one value, of length 1
this._mongo._authority.serverAddresses[] elements has only one value
this._mongo._authority.credentialsStore has only one value
this._mongo._bufferPool has only one value
this._mongo._bufferPool._stored has only one value
this.cluster has only one value
this._myPort has only one value
this._myPort.pinnedRequestStatusThreadLocal has only one value
com.mongodb.DBTCPConnector.this has only one value
com.mongodb.DBTCPConnector.this._mongo has only one value
com.mongodb.DBTCPConnector.this.cluster has only one value
com.mongodb.DBTCPConnector.this._myPort has only one value
return == 10000
===========================================================================
com.mongodb.DBTCPConnector.isOpen():::ENTER
this._mongo._connector != null
this._mongo._connector.cluster != null
this._mongo._cleaner != null
this.cluster != null
com.mongodb.DBTCPConnector.this.cluster != null
===========================================================================
com.mongodb.DBTCPConnector.isOpen():::EXIT
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
this._closed == orig(this._closed)
this._mongo == orig(this._mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this._mongo._options == orig(this._mongo._options)
this._mongo._options.description == orig(this._mongo._options.description)
this._mongo._options.connectionsPerHost == orig(this._mongo._options.connectionsPerHost)
this._mongo._options.threadsAllowedToBlockForConnectionMultiplier == orig(this._mongo._options.threadsAllowedToBlockForConnectionMultiplier)
this._mongo._options.maxWaitTime == orig(this._mongo._options.maxWaitTime)
this._mongo._options.connectTimeout == orig(this._mongo._options.connectTimeout)
this._mongo._options.socketTimeout == orig(this._mongo._options.socketTimeout)
this._mongo._options.socketKeepAlive == orig(this._mongo._options.socketKeepAlive)
this._mongo._options.autoConnectRetry == orig(this._mongo._options.autoConnectRetry)
this._mongo._options.maxAutoConnectRetryTime == orig(this._mongo._options.maxAutoConnectRetryTime)
this._mongo._options.slaveOk == orig(this._mongo._options.slaveOk)
this._mongo._options.readPreference == orig(this._mongo._options.readPreference)
this._mongo._options.dbDecoderFactory == orig(this._mongo._options.dbDecoderFactory)
this._mongo._options.dbDecoderFactory.getClass().getName() == orig(this._mongo._options.dbDecoderFactory.getClass().getName())
this._mongo._options.dbEncoderFactory == orig(this._mongo._options.dbEncoderFactory)
this._mongo._options.dbEncoderFactory.getClass().getName() == orig(this._mongo._options.dbEncoderFactory.getClass().getName())
this._mongo._options.safe == orig(this._mongo._options.safe)
this._mongo._options.w == orig(this._mongo._options.w)
this._mongo._options.wtimeout == orig(this._mongo._options.wtimeout)
this._mongo._options.fsync == orig(this._mongo._options.fsync)
this._mongo._options.j == orig(this._mongo._options.j)
this._mongo._options.socketFactory == orig(this._mongo._options.socketFactory)
this._mongo._options.socketFactory.getClass().getName() == orig(this._mongo._options.socketFactory.getClass().getName())
this._mongo._options.cursorFinalizerEnabled == orig(this._mongo._options.cursorFinalizerEnabled)
this._mongo._options.writeConcern == orig(this._mongo._options.writeConcern)
this._mongo._options.alwaysUseMBeans == orig(this._mongo._options.alwaysUseMBeans)
this._mongo._options.minConnectionsPerHost == orig(this._mongo._options.minConnectionsPerHost)
this._mongo._options.maxConnectionIdleTime == orig(this._mongo._options.maxConnectionIdleTime)
this._mongo._options.maxConnectionLifeTime == orig(this._mongo._options.maxConnectionLifeTime)
this._mongo._options.heartbeatFrequencyMS == orig(this._mongo._options.heartbeatFrequencyMS)
this._mongo._options.heartbeatConnectRetryFrequencyMS == orig(this._mongo._options.heartbeatConnectRetryFrequencyMS)
this._mongo._options.heartbeatConnectTimeoutMS == orig(this._mongo._options.heartbeatConnectTimeoutMS)
this._mongo._options.heartbeatReadTimeoutMS == orig(this._mongo._options.heartbeatReadTimeoutMS)
this._mongo._options.acceptableLatencyDifferenceMS == orig(this._mongo._options.acceptableLatencyDifferenceMS)
this._mongo._options.heartbeatThreadCount == orig(this._mongo._options.heartbeatThreadCount)
this._mongo._options.requiredReplicaSetName == orig(this._mongo._options.requiredReplicaSetName)
this._mongo._connector == orig(this._mongo._connector)
this._mongo._connector._closed == orig(this._mongo._connector._closed)
this._mongo._connector._mongo == orig(this._mongo._connector._mongo)
this._mongo._connector.cluster == orig(this._mongo._connector.cluster)
this._mongo._connector.cluster.getClass().getName() == orig(this._mongo._connector.cluster.getClass().getName())
this._mongo._connector._myPort == orig(this._mongo._connector._myPort)
this._mongo._connector.connectionMode == orig(this._mongo._connector.connectionMode)
this._mongo._connector.type == orig(this._mongo._connector.type)
this._mongo._connector.mongosHAServerSelector == orig(this._mongo._connector.mongosHAServerSelector)
this._mongo._dbs == orig(this._mongo._dbs)
this._mongo._dbs.getClass().getName() == orig(this._mongo._dbs.getClass().getName())
this._mongo._concern == orig(this._mongo._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this._mongo._concern._w == orig(this._mongo._concern._w)
this._mongo._concern._w.getClass().getName() == orig(this._mongo._concern._w.getClass().getName())
this._mongo._concern._wtimeout == orig(this._mongo._concern._wtimeout)
this._mongo._concern._fsync == orig(this._mongo._concern._fsync)
this._mongo._concern._j == orig(this._mongo._concern._j)
this._mongo._concern._continueOnError == orig(this._mongo._concern._continueOnError)
this._mongo._readPref == orig(this._mongo._readPref)
this._mongo._readPref.getClass().getName() == orig(this._mongo._readPref.getClass().getName())
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this._mongo._netOptions == orig(this._mongo._netOptions)
this._mongo._netOptions._parent == orig(this._mongo._netOptions._parent)
this._mongo._netOptions._options == orig(this._mongo._netOptions._options)
this._mongo._netOptions._hasOptions == orig(this._mongo._netOptions._hasOptions)
this._mongo._cleaner == orig(this._mongo._cleaner)
com.mongodb.Mongo.this == orig(com.mongodb.Mongo.this)
this._mongo._authority == orig(this._mongo._authority)
this._mongo._authority.type == orig(this._mongo._authority.type)
this._mongo._authority.serverAddresses == orig(this._mongo._authority.serverAddresses)
this._mongo._authority.serverAddresses[] == orig(this._mongo._authority.serverAddresses[])
this._mongo._authority.serverAddresses.getClass().getName() == orig(this._mongo._authority.serverAddresses.getClass().getName())
this._mongo._authority.credentialsStore == orig(this._mongo._authority.credentialsStore)
this._mongo._bufferPool == orig(this._mongo._bufferPool)
this._mongo._bufferPool.getClass().getName() == orig(this._mongo._bufferPool.getClass().getName())
this._mongo._bufferPool._max == orig(this._mongo._bufferPool._max)
this._mongo._bufferPool._stored == orig(this._mongo._bufferPool._stored)
this._mongo._bufferPool._stored.getClass().getName() == orig(this._mongo._bufferPool._stored.getClass().getName())
this.cluster == orig(this.cluster)
this.cluster.getClass().getName() == orig(this.cluster.getClass().getName())
this._myPort == orig(this._myPort)
this._myPort.pinnedRequestStatusThreadLocal == orig(this._myPort.pinnedRequestStatusThreadLocal)
com.mongodb.DBTCPConnector.this == orig(com.mongodb.DBTCPConnector.this)
com.mongodb.DBTCPConnector.this._closed == orig(com.mongodb.DBTCPConnector.this._closed)
com.mongodb.DBTCPConnector.this._mongo == orig(com.mongodb.DBTCPConnector.this._mongo)
com.mongodb.DBTCPConnector.this.cluster == orig(com.mongodb.DBTCPConnector.this.cluster)
com.mongodb.DBTCPConnector.this.cluster.getClass().getName() == orig(com.mongodb.DBTCPConnector.this.cluster.getClass().getName())
com.mongodb.DBTCPConnector.this._myPort == orig(com.mongodb.DBTCPConnector.this._myPort)
com.mongodb.DBTCPConnector.this.connectionMode == orig(com.mongodb.DBTCPConnector.this.connectionMode)
com.mongodb.DBTCPConnector.this.type == orig(com.mongodb.DBTCPConnector.this.type)
com.mongodb.DBTCPConnector.this.mongosHAServerSelector == orig(com.mongodb.DBTCPConnector.this.mongosHAServerSelector)
this.connectionMode == orig(this.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
this.type == orig(this.type)
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.mongosHAServerSelector == orig(this.mongosHAServerSelector)
this._mongo._connector != null
this._mongo._connector.cluster != null
this._mongo._cleaner != null
this.cluster != null
com.mongodb.DBTCPConnector.this.cluster != null
return == true
===========================================================================
com.mongodb.DBTCPConnector.isOpen():::EXIT;condition="return == true"
===========================================================================
com.mongodb.DBTCPConnector.start():::ENTER
this._mongo._connector.cluster == null
this._mongo._cleaner == null
this.cluster == null
com.mongodb.DBTCPConnector.this.cluster == null
===========================================================================
com.mongodb.DBTCPConnector.start():::EXIT
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
this._closed == orig(this._closed)
this._mongo == orig(this._mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this._mongo._options == orig(this._mongo._options)
this._mongo._options.description == orig(this._mongo._options.description)
this._mongo._options.connectionsPerHost == orig(this._mongo._options.connectionsPerHost)
this._mongo._options.threadsAllowedToBlockForConnectionMultiplier == orig(this._mongo._options.threadsAllowedToBlockForConnectionMultiplier)
this._mongo._options.maxWaitTime == orig(this._mongo._options.maxWaitTime)
this._mongo._options.connectTimeout == orig(this._mongo._options.connectTimeout)
this._mongo._options.socketTimeout == orig(this._mongo._options.socketTimeout)
this._mongo._options.socketKeepAlive == orig(this._mongo._options.socketKeepAlive)
this._mongo._options.autoConnectRetry == orig(this._mongo._options.autoConnectRetry)
this._mongo._options.maxAutoConnectRetryTime == orig(this._mongo._options.maxAutoConnectRetryTime)
this._mongo._options.slaveOk == orig(this._mongo._options.slaveOk)
this._mongo._options.readPreference == orig(this._mongo._options.readPreference)
this._mongo._options.dbDecoderFactory == orig(this._mongo._options.dbDecoderFactory)
this._mongo._options.dbDecoderFactory.getClass().getName() == orig(this._mongo._options.dbDecoderFactory.getClass().getName())
this._mongo._options.dbEncoderFactory == orig(this._mongo._options.dbEncoderFactory)
this._mongo._options.dbEncoderFactory.getClass().getName() == orig(this._mongo._options.dbEncoderFactory.getClass().getName())
this._mongo._options.safe == orig(this._mongo._options.safe)
this._mongo._options.w == orig(this._mongo._options.w)
this._mongo._options.wtimeout == orig(this._mongo._options.wtimeout)
this._mongo._options.fsync == orig(this._mongo._options.fsync)
this._mongo._options.j == orig(this._mongo._options.j)
this._mongo._options.socketFactory == orig(this._mongo._options.socketFactory)
this._mongo._options.socketFactory.getClass().getName() == orig(this._mongo._options.socketFactory.getClass().getName())
this._mongo._options.cursorFinalizerEnabled == orig(this._mongo._options.cursorFinalizerEnabled)
this._mongo._options.writeConcern == orig(this._mongo._options.writeConcern)
this._mongo._options.alwaysUseMBeans == orig(this._mongo._options.alwaysUseMBeans)
this._mongo._options.minConnectionsPerHost == orig(this._mongo._options.minConnectionsPerHost)
this._mongo._options.maxConnectionIdleTime == orig(this._mongo._options.maxConnectionIdleTime)
this._mongo._options.maxConnectionLifeTime == orig(this._mongo._options.maxConnectionLifeTime)
this._mongo._options.heartbeatFrequencyMS == orig(this._mongo._options.heartbeatFrequencyMS)
this._mongo._options.heartbeatConnectRetryFrequencyMS == orig(this._mongo._options.heartbeatConnectRetryFrequencyMS)
this._mongo._options.heartbeatConnectTimeoutMS == orig(this._mongo._options.heartbeatConnectTimeoutMS)
this._mongo._options.heartbeatReadTimeoutMS == orig(this._mongo._options.heartbeatReadTimeoutMS)
this._mongo._options.acceptableLatencyDifferenceMS == orig(this._mongo._options.acceptableLatencyDifferenceMS)
this._mongo._options.heartbeatThreadCount == orig(this._mongo._options.heartbeatThreadCount)
this._mongo._options.requiredReplicaSetName == orig(this._mongo._options.requiredReplicaSetName)
this._mongo._connector == orig(this._mongo._connector)
this._mongo._connector._closed == orig(this._mongo._connector._closed)
this._mongo._connector._mongo == orig(this._mongo._connector._mongo)
this._mongo._connector._myPort == orig(this._mongo._connector._myPort)
this._mongo._connector.connectionMode == orig(this._mongo._connector.connectionMode)
this._mongo._connector.type == orig(this._mongo._connector.type)
this._mongo._connector.mongosHAServerSelector == orig(this._mongo._connector.mongosHAServerSelector)
this._mongo._dbs == orig(this._mongo._dbs)
this._mongo._dbs.getClass().getName() == orig(this._mongo._dbs.getClass().getName())
this._mongo._concern == orig(this._mongo._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this._mongo._concern._w == orig(this._mongo._concern._w)
this._mongo._concern._w.getClass().getName() == orig(this._mongo._concern._w.getClass().getName())
this._mongo._concern._wtimeout == orig(this._mongo._concern._wtimeout)
this._mongo._concern._fsync == orig(this._mongo._concern._fsync)
this._mongo._concern._j == orig(this._mongo._concern._j)
this._mongo._concern._continueOnError == orig(this._mongo._concern._continueOnError)
this._mongo._readPref == orig(this._mongo._readPref)
this._mongo._readPref.getClass().getName() == orig(this._mongo._readPref.getClass().getName())
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this._mongo._netOptions == orig(this._mongo._netOptions)
this._mongo._netOptions._parent == orig(this._mongo._netOptions._parent)
this._mongo._netOptions._options == orig(this._mongo._netOptions._options)
this._mongo._netOptions._hasOptions == orig(this._mongo._netOptions._hasOptions)
this._mongo._cleaner == orig(this._mongo._cleaner)
this._mongo._authority == orig(this._mongo._authority)
this._mongo._authority.type == orig(this._mongo._authority.type)
this._mongo._authority.serverAddresses == orig(this._mongo._authority.serverAddresses)
this._mongo._authority.serverAddresses[] == orig(this._mongo._authority.serverAddresses[])
this._mongo._authority.serverAddresses.getClass().getName() == orig(this._mongo._authority.serverAddresses.getClass().getName())
this._mongo._authority.credentialsStore == orig(this._mongo._authority.credentialsStore)
this._mongo._bufferPool == orig(this._mongo._bufferPool)
this._mongo._bufferPool.getClass().getName() == orig(this._mongo._bufferPool.getClass().getName())
this._mongo._bufferPool._max == orig(this._mongo._bufferPool._max)
this._mongo._bufferPool._stored == orig(this._mongo._bufferPool._stored)
this._mongo._bufferPool._stored.getClass().getName() == orig(this._mongo._bufferPool._stored.getClass().getName())
this._myPort == orig(this._myPort)
this._myPort.pinnedRequestStatusThreadLocal == orig(this._myPort.pinnedRequestStatusThreadLocal)
com.mongodb.DBTCPConnector.this == orig(com.mongodb.DBTCPConnector.this)
com.mongodb.DBTCPConnector.this._closed == orig(com.mongodb.DBTCPConnector.this._closed)
com.mongodb.DBTCPConnector.this._mongo == orig(com.mongodb.DBTCPConnector.this._mongo)
com.mongodb.DBTCPConnector.this._myPort == orig(com.mongodb.DBTCPConnector.this._myPort)
com.mongodb.DBTCPConnector.this.connectionMode == orig(com.mongodb.DBTCPConnector.this.connectionMode)
com.mongodb.DBTCPConnector.this.type == orig(com.mongodb.DBTCPConnector.this.type)
com.mongodb.DBTCPConnector.this.mongosHAServerSelector == orig(com.mongodb.DBTCPConnector.this.mongosHAServerSelector)
this.connectionMode == orig(this.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
this.type == orig(this.type)
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.mongosHAServerSelector == orig(this.mongosHAServerSelector)
this._mongo._cleaner == null
===========================================================================
com.mongodb.DefaultClusterableServerFactory:::OBJECT
this.settings.heartbeatFrequencyMS == this.mongo._options.heartbeatFrequencyMS
this.settings.heartbeatConnectRetryFrequencyMS == this.mongo._options.connectionsPerHost
this.settings.heartbeatConnectRetryFrequencyMS == this.mongo._options.heartbeatConnectRetryFrequencyMS
this.settings.heartbeatSocketSettings.connectTimeoutMS == this.settings.heartbeatSocketSettings.readTimeoutMS
this.settings.heartbeatSocketSettings.connectTimeoutMS == this.mongo._options.heartbeatConnectTimeoutMS
this.settings.heartbeatSocketSettings.connectTimeoutMS == this.mongo._options.heartbeatReadTimeoutMS
this.settings.heartbeatSocketSettings.socketFactory == this.mongo._options.socketFactory
this.settings.heartbeatSocketSettings.socketFactory.getClass().getName() == this.mongo._options.socketFactory.getClass().getName()
this.mongo == this.mongo._connector._mongo
this.mongo._options.fsync == this.mongo._options.j
this.mongo._concern == com.mongodb.WriteConcern.NORMAL
this.mongo._readPref == com.mongodb.ReadPreference.PRIMARY
this.mongo._readPref.getClass().getName() == com.mongodb.ReadPreference.PRIMARY.getClass().getName()
com.mongodb.ReadPreference.PRIMARY == com.mongodb.ReadPreference._PRIMARY
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference._PRIMARY.getClass().getName()
com.mongodb.ReadPreference.SECONDARY == com.mongodb.ReadPreference._SECONDARY_PREFERRED
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName()
this.clusterId.toString one of { "1", "2" }
this.settings.heartbeatFrequencyMS == 5000
this.settings.heartbeatConnectRetryFrequencyMS == 10
this.settings.heartbeatSocketSettings.connectTimeoutMS == 20000
this.settings.heartbeatSocketSettings.socketFactory has only one value
this.settings.heartbeatSocketSettings.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
this.mongo._options.description == null
this.mongo._options.threadsAllowedToBlockForConnectionMultiplier == 5
this.mongo._options.maxWaitTime == 120000
this.mongo._options.connectTimeout == 10000
this.mongo._options.socketTimeout == 0
this.mongo._options.socketKeepAlive == false
this.mongo._options.autoConnectRetry == false
this.mongo._options.maxAutoConnectRetryTime == 0
this.mongo._options.slaveOk == false
this.mongo._options.readPreference == null
this.mongo._options.dbDecoderFactory has only one value
this.mongo._options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
this.mongo._options.dbEncoderFactory has only one value
this.mongo._options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
this.mongo._options.safe == false
this.mongo._options.w == 0
this.mongo._options.wtimeout == 0
this.mongo._options.fsync == false
this.mongo._options.cursorFinalizerEnabled == true
this.mongo._options.writeConcern == null
this.mongo._options.alwaysUseMBeans == false
this.mongo._options.minConnectionsPerHost == 0
this.mongo._options.maxConnectionIdleTime == 0
this.mongo._options.maxConnectionLifeTime == 0
this.mongo._options.acceptableLatencyDifferenceMS == 15
this.mongo._options.heartbeatThreadCount == 0
this.mongo._options.requiredReplicaSetName == null
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID has only one value
this.mongo._connector._closed == false
this.mongo._connector.cluster == null
this.mongo._connector.connectionMode has only one value
this.mongo._connector.type has only one value
this.mongo._connector.mongosHAServerSelector == null
this.mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
this.mongo._concern._w has only one value
this.mongo._concern._w.getClass().getName() == java.lang.Integer.class
this.mongo._concern._wtimeout == 0
this.mongo._concern._fsync == false
this.mongo._concern._j == false
this.mongo._concern._continueOnError == false
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
this.mongo._netOptions._parent == null
this.mongo._netOptions._options == 0
this.mongo._netOptions._hasOptions == false
this.mongo._cleaner == null
this.mongo._authority.type has only one value
this.mongo._authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
this.mongo._authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
this.mongo._authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
this.mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
this.mongo._bufferPool._max == 1000
this.mongo._bufferPool._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
size(this.mongo._authority.serverAddresses[]) == 1
===========================================================================
com.mongodb.DefaultClusterableServerFactory.DefaultClusterableServerFactory(java.lang.String, com.mongodb.ServerSettings, com.mongodb.Mongo):::ENTER
settings.heartbeatFrequencyMS == mongo._options.heartbeatFrequencyMS
settings.heartbeatConnectRetryFrequencyMS == mongo._options.connectionsPerHost
settings.heartbeatConnectRetryFrequencyMS == mongo._options.heartbeatConnectRetryFrequencyMS
settings.heartbeatSocketSettings.connectTimeoutMS == settings.heartbeatSocketSettings.readTimeoutMS
settings.heartbeatSocketSettings.connectTimeoutMS == mongo._options.heartbeatConnectTimeoutMS
settings.heartbeatSocketSettings.connectTimeoutMS == mongo._options.heartbeatReadTimeoutMS
settings.heartbeatSocketSettings.socketFactory == mongo._options.socketFactory
settings.heartbeatSocketSettings.socketFactory.getClass().getName() == mongo._options.socketFactory.getClass().getName()
mongo == mongo._connector._mongo
mongo._options.fsync == mongo._options.j
mongo._concern == com.mongodb.WriteConcern.NORMAL
mongo._readPref == com.mongodb.ReadPreference.PRIMARY
mongo._readPref.getClass().getName() == com.mongodb.ReadPreference.PRIMARY.getClass().getName()
com.mongodb.ReadPreference.PRIMARY == com.mongodb.ReadPreference._PRIMARY
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference._PRIMARY.getClass().getName()
com.mongodb.ReadPreference.SECONDARY == com.mongodb.ReadPreference._SECONDARY_PREFERRED
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName()
clusterId.toString one of { "1", "2" }
settings.heartbeatFrequencyMS == 5000
settings.heartbeatConnectRetryFrequencyMS == 10
settings.heartbeatSocketSettings.connectTimeoutMS == 20000
settings.heartbeatSocketSettings.socketFactory has only one value
settings.heartbeatSocketSettings.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
mongo._options.description == null
mongo._options.threadsAllowedToBlockForConnectionMultiplier == 5
mongo._options.maxWaitTime == 120000
mongo._options.connectTimeout == 10000
mongo._options.socketTimeout == 0
mongo._options.socketKeepAlive == false
mongo._options.autoConnectRetry == false
mongo._options.maxAutoConnectRetryTime == 0
mongo._options.slaveOk == false
mongo._options.readPreference == null
mongo._options.dbDecoderFactory has only one value
mongo._options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
mongo._options.dbEncoderFactory has only one value
mongo._options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
mongo._options.safe == false
mongo._options.w == 0
mongo._options.wtimeout == 0
mongo._options.fsync == false
mongo._options.cursorFinalizerEnabled == true
mongo._options.writeConcern == null
mongo._options.alwaysUseMBeans == false
mongo._options.minConnectionsPerHost == 0
mongo._options.maxConnectionIdleTime == 0
mongo._options.maxConnectionLifeTime == 0
mongo._options.acceptableLatencyDifferenceMS == 15
mongo._options.heartbeatThreadCount == 0
mongo._options.requiredReplicaSetName == null
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID has only one value
mongo._connector._closed == false
mongo._connector.cluster == null
mongo._connector.connectionMode has only one value
mongo._connector.type has only one value
mongo._connector.mongosHAServerSelector == null
mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
mongo._concern._w has only one value
mongo._concern._w.getClass().getName() == java.lang.Integer.class
mongo._concern._wtimeout == 0
mongo._concern._fsync == false
mongo._concern._j == false
mongo._concern._continueOnError == false
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
mongo._netOptions._parent == null
mongo._netOptions._options == 0
mongo._netOptions._hasOptions == false
mongo._cleaner == null
mongo._authority.type has only one value
mongo._authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
mongo._authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
mongo._authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
mongo._bufferPool._max == 1000
mongo._bufferPool._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
size(mongo._authority.serverAddresses[]) == 1
===========================================================================
com.mongodb.DefaultClusterableServerFactory.DefaultClusterableServerFactory(java.lang.String, com.mongodb.ServerSettings, com.mongodb.Mongo):::EXIT
this.clusterId == orig(clusterId)
this.settings == orig(settings)
this.settings.heartbeatFrequencyMS == settings.heartbeatFrequencyMS
this.settings.heartbeatConnectRetryFrequencyMS == settings.heartbeatConnectRetryFrequencyMS
this.settings.heartbeatSocketSettings == settings.heartbeatSocketSettings
this.settings.heartbeatSocketSettings.connectTimeoutMS == settings.heartbeatSocketSettings.connectTimeoutMS
this.settings.heartbeatSocketSettings.readTimeoutMS == settings.heartbeatSocketSettings.connectTimeoutMS
this.settings.heartbeatSocketSettings.socketFactory == settings.heartbeatSocketSettings.socketFactory
this.settings.heartbeatSocketSettings.socketFactory.getClass().getName() == settings.heartbeatSocketSettings.socketFactory.getClass().getName()
this.mongo == mongo._connector._mongo
this.mongo == orig(mongo)
this.mongo == orig(mongo._connector._mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this.mongo._options == mongo._options
this.mongo._options.connectionsPerHost == settings.heartbeatConnectRetryFrequencyMS
this.mongo._options.threadsAllowedToBlockForConnectionMultiplier == mongo._options.threadsAllowedToBlockForConnectionMultiplier
this.mongo._options.maxWaitTime == mongo._options.maxWaitTime
this.mongo._options.connectTimeout == mongo._options.connectTimeout
this.mongo._options.socketTimeout == mongo._options.socketTimeout
this.mongo._options.socketKeepAlive == mongo._options.socketKeepAlive
this.mongo._options.autoConnectRetry == mongo._options.autoConnectRetry
this.mongo._options.maxAutoConnectRetryTime == mongo._options.maxAutoConnectRetryTime
this.mongo._options.slaveOk == mongo._options.slaveOk
this.mongo._options.dbDecoderFactory == mongo._options.dbDecoderFactory
this.mongo._options.dbDecoderFactory.getClass().getName() == mongo._options.dbDecoderFactory.getClass().getName()
this.mongo._options.dbEncoderFactory == mongo._options.dbEncoderFactory
this.mongo._options.dbEncoderFactory.getClass().getName() == mongo._options.dbEncoderFactory.getClass().getName()
this.mongo._options.safe == mongo._options.safe
this.mongo._options.w == mongo._options.w
this.mongo._options.wtimeout == mongo._options.wtimeout
this.mongo._options.fsync == mongo._options.fsync
this.mongo._options.j == mongo._options.fsync
this.mongo._options.socketFactory == settings.heartbeatSocketSettings.socketFactory
this.mongo._options.socketFactory.getClass().getName() == settings.heartbeatSocketSettings.socketFactory.getClass().getName()
this.mongo._options.cursorFinalizerEnabled == mongo._options.cursorFinalizerEnabled
this.mongo._options.alwaysUseMBeans == mongo._options.alwaysUseMBeans
this.mongo._options.minConnectionsPerHost == mongo._options.minConnectionsPerHost
this.mongo._options.maxConnectionIdleTime == mongo._options.maxConnectionIdleTime
this.mongo._options.maxConnectionLifeTime == mongo._options.maxConnectionLifeTime
this.mongo._options.heartbeatFrequencyMS == settings.heartbeatFrequencyMS
this.mongo._options.heartbeatConnectRetryFrequencyMS == settings.heartbeatConnectRetryFrequencyMS
this.mongo._options.heartbeatConnectTimeoutMS == settings.heartbeatSocketSettings.connectTimeoutMS
this.mongo._options.heartbeatReadTimeoutMS == settings.heartbeatSocketSettings.connectTimeoutMS
this.mongo._options.acceptableLatencyDifferenceMS == mongo._options.acceptableLatencyDifferenceMS
this.mongo._options.heartbeatThreadCount == mongo._options.heartbeatThreadCount
this.mongo._connector == mongo._connector
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
this.mongo._connector._closed == mongo._connector._closed
this.mongo._connector._myPort == mongo._connector._myPort
this.mongo._connector.connectionMode == mongo._connector.connectionMode
this.mongo._connector.type == mongo._connector.type
this.mongo._dbs == mongo._dbs
this.mongo._dbs.getClass().getName() == mongo._dbs.getClass().getName()
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == mongo._concern
com.mongodb.WriteConcern.NORMAL == orig(mongo._concern)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this.mongo._concern._w == mongo._concern._w
this.mongo._concern._w.getClass().getName() == mongo._concern._w.getClass().getName()
this.mongo._concern._wtimeout == mongo._concern._wtimeout
this.mongo._concern._fsync == mongo._concern._fsync
this.mongo._concern._j == mongo._concern._j
this.mongo._concern._continueOnError == mongo._concern._continueOnError
com.mongodb.ReadPreference.PRIMARY == mongo._readPref
com.mongodb.ReadPreference.PRIMARY == orig(mongo._readPref)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == mongo._readPref.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(mongo._readPref.getClass().getName())
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this.mongo._netOptions == mongo._netOptions
this.mongo._netOptions._options == mongo._netOptions._options
this.mongo._netOptions._hasOptions == mongo._netOptions._hasOptions
this.mongo._authority == mongo._authority
this.mongo._authority.type == mongo._authority.type
this.mongo._authority.serverAddresses == mongo._authority.serverAddresses
this.mongo._authority.serverAddresses.getClass().getName() == mongo._authority.serverAddresses.getClass().getName()
this.mongo._authority.credentialsStore == mongo._authority.credentialsStore
this.mongo._bufferPool == mongo._bufferPool
this.mongo._bufferPool.getClass().getName() == mongo._bufferPool.getClass().getName()
this.mongo._bufferPool._max == mongo._bufferPool._max
this.mongo._bufferPool._stored == mongo._bufferPool._stored
this.mongo._bufferPool._stored.getClass().getName() == mongo._bufferPool._stored.getClass().getName()
clusterId.toString == orig(clusterId.toString)
settings.heartbeatFrequencyMS == mongo._options.heartbeatFrequencyMS
settings.heartbeatFrequencyMS == orig(settings.heartbeatFrequencyMS)
settings.heartbeatFrequencyMS == orig(mongo._options.heartbeatFrequencyMS)
settings.heartbeatConnectRetryFrequencyMS == mongo._options.connectionsPerHost
settings.heartbeatConnectRetryFrequencyMS == mongo._options.heartbeatConnectRetryFrequencyMS
settings.heartbeatConnectRetryFrequencyMS == orig(settings.heartbeatConnectRetryFrequencyMS)
settings.heartbeatConnectRetryFrequencyMS == orig(mongo._options.connectionsPerHost)
settings.heartbeatConnectRetryFrequencyMS == orig(mongo._options.heartbeatConnectRetryFrequencyMS)
settings.heartbeatSocketSettings == orig(settings.heartbeatSocketSettings)
settings.heartbeatSocketSettings.connectTimeoutMS == settings.heartbeatSocketSettings.readTimeoutMS
settings.heartbeatSocketSettings.connectTimeoutMS == mongo._options.heartbeatConnectTimeoutMS
settings.heartbeatSocketSettings.connectTimeoutMS == mongo._options.heartbeatReadTimeoutMS
settings.heartbeatSocketSettings.connectTimeoutMS == orig(settings.heartbeatSocketSettings.connectTimeoutMS)
settings.heartbeatSocketSettings.connectTimeoutMS == orig(settings.heartbeatSocketSettings.readTimeoutMS)
settings.heartbeatSocketSettings.connectTimeoutMS == orig(mongo._options.heartbeatConnectTimeoutMS)
settings.heartbeatSocketSettings.connectTimeoutMS == orig(mongo._options.heartbeatReadTimeoutMS)
settings.heartbeatSocketSettings.socketFactory == mongo._options.socketFactory
settings.heartbeatSocketSettings.socketFactory == orig(settings.heartbeatSocketSettings.socketFactory)
settings.heartbeatSocketSettings.socketFactory == orig(mongo._options.socketFactory)
settings.heartbeatSocketSettings.socketFactory.getClass().getName() == mongo._options.socketFactory.getClass().getName()
settings.heartbeatSocketSettings.socketFactory.getClass().getName() == orig(settings.heartbeatSocketSettings.socketFactory.getClass().getName())
settings.heartbeatSocketSettings.socketFactory.getClass().getName() == orig(mongo._options.socketFactory.getClass().getName())
mongo._options == orig(mongo._options)
mongo._options.description == orig(mongo._options.description)
mongo._options.threadsAllowedToBlockForConnectionMultiplier == orig(mongo._options.threadsAllowedToBlockForConnectionMultiplier)
mongo._options.maxWaitTime == orig(mongo._options.maxWaitTime)
mongo._options.connectTimeout == orig(mongo._options.connectTimeout)
mongo._options.socketTimeout == orig(mongo._options.socketTimeout)
mongo._options.socketKeepAlive == orig(mongo._options.socketKeepAlive)
mongo._options.autoConnectRetry == orig(mongo._options.autoConnectRetry)
mongo._options.maxAutoConnectRetryTime == orig(mongo._options.maxAutoConnectRetryTime)
mongo._options.slaveOk == orig(mongo._options.slaveOk)
mongo._options.readPreference == orig(mongo._options.readPreference)
mongo._options.dbDecoderFactory == orig(mongo._options.dbDecoderFactory)
mongo._options.dbDecoderFactory.getClass().getName() == orig(mongo._options.dbDecoderFactory.getClass().getName())
mongo._options.dbEncoderFactory == orig(mongo._options.dbEncoderFactory)
mongo._options.dbEncoderFactory.getClass().getName() == orig(mongo._options.dbEncoderFactory.getClass().getName())
mongo._options.safe == orig(mongo._options.safe)
mongo._options.w == orig(mongo._options.w)
mongo._options.wtimeout == orig(mongo._options.wtimeout)
mongo._options.fsync == mongo._options.j
mongo._options.fsync == orig(mongo._options.fsync)
mongo._options.fsync == orig(mongo._options.j)
mongo._options.cursorFinalizerEnabled == orig(mongo._options.cursorFinalizerEnabled)
mongo._options.writeConcern == orig(mongo._options.writeConcern)
mongo._options.alwaysUseMBeans == orig(mongo._options.alwaysUseMBeans)
mongo._options.minConnectionsPerHost == orig(mongo._options.minConnectionsPerHost)
mongo._options.maxConnectionIdleTime == orig(mongo._options.maxConnectionIdleTime)
mongo._options.maxConnectionLifeTime == orig(mongo._options.maxConnectionLifeTime)
mongo._options.acceptableLatencyDifferenceMS == orig(mongo._options.acceptableLatencyDifferenceMS)
mongo._options.heartbeatThreadCount == orig(mongo._options.heartbeatThreadCount)
mongo._options.requiredReplicaSetName == orig(mongo._options.requiredReplicaSetName)
mongo._connector == orig(mongo._connector)
mongo._connector._closed == orig(mongo._connector._closed)
mongo._connector.cluster == orig(mongo._connector.cluster)
mongo._connector._myPort == orig(mongo._connector._myPort)
mongo._connector.connectionMode == orig(mongo._connector.connectionMode)
mongo._connector.type == orig(mongo._connector.type)
mongo._connector.mongosHAServerSelector == orig(mongo._connector.mongosHAServerSelector)
mongo._dbs == orig(mongo._dbs)
mongo._dbs.getClass().getName() == orig(mongo._dbs.getClass().getName())
mongo._concern._w == orig(mongo._concern._w)
mongo._concern._w.getClass().getName() == orig(mongo._concern._w.getClass().getName())
mongo._concern._wtimeout == orig(mongo._concern._wtimeout)
mongo._concern._fsync == orig(mongo._concern._fsync)
mongo._concern._j == orig(mongo._concern._j)
mongo._concern._continueOnError == orig(mongo._concern._continueOnError)
mongo._netOptions == orig(mongo._netOptions)
mongo._netOptions._parent == orig(mongo._netOptions._parent)
mongo._netOptions._options == orig(mongo._netOptions._options)
mongo._netOptions._hasOptions == orig(mongo._netOptions._hasOptions)
mongo._cleaner == orig(mongo._cleaner)
mongo._authority == orig(mongo._authority)
mongo._authority.type == orig(mongo._authority.type)
mongo._authority.serverAddresses == orig(mongo._authority.serverAddresses)
mongo._authority.serverAddresses[] == orig(mongo._authority.serverAddresses[])
mongo._authority.serverAddresses.getClass().getName() == orig(mongo._authority.serverAddresses.getClass().getName())
mongo._authority.credentialsStore == orig(mongo._authority.credentialsStore)
mongo._bufferPool == orig(mongo._bufferPool)
mongo._bufferPool.getClass().getName() == orig(mongo._bufferPool.getClass().getName())
mongo._bufferPool._max == orig(mongo._bufferPool._max)
mongo._bufferPool._stored == orig(mongo._bufferPool._stored)
mongo._bufferPool._stored.getClass().getName() == orig(mongo._bufferPool._stored.getClass().getName())
clusterId.toString one of { "1", "2" }
settings.heartbeatFrequencyMS == 5000
settings.heartbeatConnectRetryFrequencyMS == 10
settings.heartbeatSocketSettings.connectTimeoutMS == 20000
settings.heartbeatSocketSettings.socketFactory has only one value
settings.heartbeatSocketSettings.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
mongo._options.description == null
mongo._options.threadsAllowedToBlockForConnectionMultiplier == 5
mongo._options.maxWaitTime == 120000
mongo._options.connectTimeout == 10000
mongo._options.socketTimeout == 0
mongo._options.socketKeepAlive == false
mongo._options.autoConnectRetry == false
mongo._options.maxAutoConnectRetryTime == 0
mongo._options.slaveOk == false
mongo._options.readPreference == null
mongo._options.dbDecoderFactory has only one value
mongo._options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
mongo._options.dbEncoderFactory has only one value
mongo._options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
mongo._options.safe == false
mongo._options.w == 0
mongo._options.wtimeout == 0
mongo._options.fsync == false
mongo._options.cursorFinalizerEnabled == true
mongo._options.writeConcern == null
mongo._options.alwaysUseMBeans == false
mongo._options.minConnectionsPerHost == 0
mongo._options.maxConnectionIdleTime == 0
mongo._options.maxConnectionLifeTime == 0
mongo._options.acceptableLatencyDifferenceMS == 15
mongo._options.heartbeatThreadCount == 0
mongo._options.requiredReplicaSetName == null
mongo._connector._closed == false
mongo._connector.cluster == null
mongo._connector.connectionMode has only one value
mongo._connector.type has only one value
mongo._connector.mongosHAServerSelector == null
mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
mongo._concern._w has only one value
mongo._concern._w.getClass().getName() == java.lang.Integer.class
mongo._concern._wtimeout == 0
mongo._concern._fsync == false
mongo._concern._j == false
mongo._concern._continueOnError == false
mongo._netOptions._parent == null
mongo._netOptions._options == 0
mongo._netOptions._hasOptions == false
mongo._cleaner == null
mongo._authority.type has only one value
mongo._authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
mongo._authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
mongo._authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
mongo._bufferPool._max == 1000
mongo._bufferPool._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
size(mongo._authority.serverAddresses[]) == 1
===========================================================================
com.mongodb.DefaultClusterableServerFactory.create(com.mongodb.ServerAddress):::ENTER
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
===========================================================================
com.mongodb.DefaultClusterableServerFactory.create(com.mongodb.ServerAddress):::EXIT
this.clusterId == orig(this.clusterId)
this.clusterId.toString == orig(this.clusterId.toString)
this.settings == orig(this.settings)
this.settings.heartbeatFrequencyMS == orig(this.settings.heartbeatFrequencyMS)
this.settings.heartbeatFrequencyMS == orig(this.mongo._options.heartbeatFrequencyMS)
this.settings.heartbeatConnectRetryFrequencyMS == orig(this.settings.heartbeatConnectRetryFrequencyMS)
this.settings.heartbeatConnectRetryFrequencyMS == orig(this.mongo._options.connectionsPerHost)
this.settings.heartbeatConnectRetryFrequencyMS == orig(this.mongo._options.heartbeatConnectRetryFrequencyMS)
this.settings.heartbeatSocketSettings == orig(this.settings.heartbeatSocketSettings)
this.settings.heartbeatSocketSettings.connectTimeoutMS == orig(this.settings.heartbeatSocketSettings.connectTimeoutMS)
this.settings.heartbeatSocketSettings.connectTimeoutMS == orig(this.settings.heartbeatSocketSettings.readTimeoutMS)
this.settings.heartbeatSocketSettings.connectTimeoutMS == orig(this.mongo._options.heartbeatConnectTimeoutMS)
this.settings.heartbeatSocketSettings.connectTimeoutMS == orig(this.mongo._options.heartbeatReadTimeoutMS)
this.settings.heartbeatSocketSettings.socketFactory == orig(this.settings.heartbeatSocketSettings.socketFactory)
this.settings.heartbeatSocketSettings.socketFactory == orig(this.mongo._options.socketFactory)
this.settings.heartbeatSocketSettings.socketFactory.getClass().getName() == orig(this.settings.heartbeatSocketSettings.socketFactory.getClass().getName())
this.settings.heartbeatSocketSettings.socketFactory.getClass().getName() == orig(this.mongo._options.socketFactory.getClass().getName())
this.mongo == orig(this.mongo)
this.mongo == orig(this.mongo._connector._mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this.mongo._options == orig(this.mongo._options)
this.mongo._options.description == orig(this.mongo._options.description)
this.mongo._options.threadsAllowedToBlockForConnectionMultiplier == orig(this.mongo._options.threadsAllowedToBlockForConnectionMultiplier)
this.mongo._options.maxWaitTime == orig(this.mongo._options.maxWaitTime)
this.mongo._options.connectTimeout == orig(this.mongo._options.connectTimeout)
this.mongo._options.socketTimeout == orig(this.mongo._options.socketTimeout)
this.mongo._options.socketKeepAlive == orig(this.mongo._options.socketKeepAlive)
this.mongo._options.autoConnectRetry == orig(this.mongo._options.autoConnectRetry)
this.mongo._options.maxAutoConnectRetryTime == orig(this.mongo._options.maxAutoConnectRetryTime)
this.mongo._options.slaveOk == orig(this.mongo._options.slaveOk)
this.mongo._options.readPreference == orig(this.mongo._options.readPreference)
this.mongo._options.dbDecoderFactory == orig(this.mongo._options.dbDecoderFactory)
this.mongo._options.dbDecoderFactory.getClass().getName() == orig(this.mongo._options.dbDecoderFactory.getClass().getName())
this.mongo._options.dbEncoderFactory == orig(this.mongo._options.dbEncoderFactory)
this.mongo._options.dbEncoderFactory.getClass().getName() == orig(this.mongo._options.dbEncoderFactory.getClass().getName())
this.mongo._options.safe == orig(this.mongo._options.safe)
this.mongo._options.w == orig(this.mongo._options.w)
this.mongo._options.wtimeout == orig(this.mongo._options.wtimeout)
this.mongo._options.fsync == orig(this.mongo._options.fsync)
this.mongo._options.fsync == orig(this.mongo._options.j)
this.mongo._options.cursorFinalizerEnabled == orig(this.mongo._options.cursorFinalizerEnabled)
this.mongo._options.writeConcern == orig(this.mongo._options.writeConcern)
this.mongo._options.alwaysUseMBeans == orig(this.mongo._options.alwaysUseMBeans)
this.mongo._options.minConnectionsPerHost == orig(this.mongo._options.minConnectionsPerHost)
this.mongo._options.maxConnectionIdleTime == orig(this.mongo._options.maxConnectionIdleTime)
this.mongo._options.maxConnectionLifeTime == orig(this.mongo._options.maxConnectionLifeTime)
this.mongo._options.acceptableLatencyDifferenceMS == orig(this.mongo._options.acceptableLatencyDifferenceMS)
this.mongo._options.heartbeatThreadCount == orig(this.mongo._options.heartbeatThreadCount)
this.mongo._options.requiredReplicaSetName == orig(this.mongo._options.requiredReplicaSetName)
this.mongo._connector == orig(this.mongo._connector)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
this.mongo._connector._closed == orig(this.mongo._connector._closed)
this.mongo._connector.cluster == orig(this.mongo._connector.cluster)
this.mongo._connector._myPort == orig(this.mongo._connector._myPort)
this.mongo._connector.connectionMode == orig(this.mongo._connector.connectionMode)
this.mongo._connector.type == orig(this.mongo._connector.type)
this.mongo._connector.mongosHAServerSelector == orig(this.mongo._connector.mongosHAServerSelector)
this.mongo._dbs == orig(this.mongo._dbs)
this.mongo._dbs.getClass().getName() == orig(this.mongo._dbs.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(this.mongo._concern)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this.mongo._concern._w == orig(this.mongo._concern._w)
this.mongo._concern._w.getClass().getName() == orig(this.mongo._concern._w.getClass().getName())
this.mongo._concern._wtimeout == orig(this.mongo._concern._wtimeout)
this.mongo._concern._fsync == orig(this.mongo._concern._fsync)
this.mongo._concern._j == orig(this.mongo._concern._j)
this.mongo._concern._continueOnError == orig(this.mongo._concern._continueOnError)
com.mongodb.ReadPreference.PRIMARY == orig(this.mongo._readPref)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(this.mongo._readPref.getClass().getName())
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this.mongo._netOptions == orig(this.mongo._netOptions)
this.mongo._netOptions._parent == orig(this.mongo._netOptions._parent)
this.mongo._netOptions._options == orig(this.mongo._netOptions._options)
this.mongo._netOptions._hasOptions == orig(this.mongo._netOptions._hasOptions)
this.mongo._cleaner == orig(this.mongo._cleaner)
this.mongo._authority == orig(this.mongo._authority)
this.mongo._authority.type == orig(this.mongo._authority.type)
this.mongo._authority.serverAddresses == orig(this.mongo._authority.serverAddresses)
this.mongo._authority.serverAddresses[] == orig(this.mongo._authority.serverAddresses[])
this.mongo._authority.serverAddresses.getClass().getName() == orig(this.mongo._authority.serverAddresses.getClass().getName())
this.mongo._authority.credentialsStore == orig(this.mongo._authority.credentialsStore)
this.mongo._bufferPool == orig(this.mongo._bufferPool)
this.mongo._bufferPool.getClass().getName() == orig(this.mongo._bufferPool.getClass().getName())
this.mongo._bufferPool._max == orig(this.mongo._bufferPool._max)
this.mongo._bufferPool._stored == orig(this.mongo._bufferPool._stored)
this.mongo._bufferPool._stored.getClass().getName() == orig(this.mongo._bufferPool._stored.getClass().getName())
serverAddress._host == orig(serverAddress._host)
serverAddress._host.toString == orig(serverAddress._host.toString)
serverAddress._port == orig(serverAddress._port)
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
return.getClass().getName() == com.mongodb.DefaultServer.class
===========================================================================
com.mongodb.DefaultDBDecoder$DefaultFactory:::OBJECT
this has only one value
===========================================================================
com.mongodb.DefaultDBDecoder$DefaultFactory.DefaultFactory():::EXIT
===========================================================================
com.mongodb.DefaultDBDecoder$DefaultFactory.toString():::ENTER
===========================================================================
com.mongodb.DefaultDBDecoder$DefaultFactory.toString():::EXIT
return has only one value
return.toString == "DefaultDBDecoder.DefaultFactory"
===========================================================================
com.mongodb.DefaultDBEncoder$DefaultFactory:::OBJECT
this has only one value
===========================================================================
com.mongodb.DefaultDBEncoder$DefaultFactory.DefaultFactory():::EXIT
===========================================================================
com.mongodb.DefaultDBEncoder$DefaultFactory.toString():::ENTER
===========================================================================
com.mongodb.DefaultDBEncoder$DefaultFactory.toString():::EXIT
return has only one value
return.toString == "DefaultDBEncoder.DefaultFactory"
===========================================================================
com.mongodb.DefaultServer$DefaultServerStateListener:::OBJECT
com.mongodb.DefaultServer.this.serverAddress == com.mongodb.DefaultServer.this.description.address
com.mongodb.DefaultServer.this.serverMonitor.serverStateListener.getClass().getName() == com.mongodb.DefaultServer.this.serverStateListener.getClass().getName()
com.mongodb.DefaultServer.this.description.hosts == com.mongodb.DefaultServer.this.description.passives
com.mongodb.DefaultServer.this.description.hosts == com.mongodb.DefaultServer.this.description.arbiters
com.mongodb.DefaultServer.this.description.hosts.getClass().getName() == com.mongodb.DefaultServer.this.description.passives.getClass().getName()
com.mongodb.DefaultServer.this.description.hosts.getClass().getName() == com.mongodb.DefaultServer.this.description.arbiters.getClass().getName()
com.mongodb.DefaultServer.this.serverAddress != null
com.mongodb.DefaultServer.this.serverAddress._host has only one value
com.mongodb.DefaultServer.this.serverAddress._host != null
com.mongodb.DefaultServer.this.serverAddress._host.toString == "localhost"
com.mongodb.DefaultServer.this.serverAddress._port == 27017
com.mongodb.ServerMonitor.LOGGER has only one value
com.mongodb.ServerMonitor.LOGGER != null
com.mongodb.DefaultServer.this.serverMonitor.serverAddress != null
com.mongodb.DefaultServer.this.serverMonitor.serverStateListener != null
com.mongodb.DefaultServer.this.serverMonitor.socketSettings != null
com.mongodb.DefaultServer.this.serverMonitor.settings != null
com.mongodb.DefaultServer.this.serverMonitor.mongo != null
com.mongodb.DefaultServer.this.serverMonitor.count == 0
com.mongodb.DefaultServer.this.serverMonitor.elapsedNanosSum == 0
com.mongodb.DefaultServer.this.serverMonitor.serverDescription != null
com.mongodb.DefaultServer.this.serverMonitor.isClosed == false
com.mongodb.DefaultServer.this.serverMonitor.connection == null
com.mongodb.DefaultServer.this.serverMonitor.monitorThread != null
com.mongodb.DefaultServer.this.serverMonitor.lock != null
com.mongodb.DefaultServer.this.serverMonitor.lock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
com.mongodb.DefaultServer.this.serverMonitor.condition != null
com.mongodb.DefaultServer.this.serverMonitor.condition.getClass().getName() == java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.class
com.mongodb.PooledConnectionProvider.LOGGER has only one value
com.mongodb.PooledConnectionProvider.LOGGER != null
com.mongodb.DefaultServer.this.connectionProvider.pool != null
com.mongodb.DefaultServer.this.connectionProvider.settings != null
com.mongodb.DefaultServer.this.connectionProvider.waitQueueSize != null
com.mongodb.DefaultServer.this.connectionProvider.generation != null
com.mongodb.DefaultServer.this.connectionProvider.sizeMaintenanceTimer == null
com.mongodb.DefaultServer.this.connectionProvider.clusterId != null
com.mongodb.DefaultServer.this.connectionProvider.clusterId.toString one of { "1", "2" }
com.mongodb.DefaultServer.this.connectionProvider.serverAddress != null
com.mongodb.DefaultServer.this.connectionProvider.maintenanceTask == null
com.mongodb.DefaultServer.this.connectionProvider.connectionPoolListener != null
com.mongodb.DefaultServer.this.connectionProvider.connectionPoolListener.getClass().getName() == com.mongodb.JMXConnectionPoolListener.class
com.mongodb.DefaultServer.this.connectionProvider.connectionFactory != null
com.mongodb.DefaultServer.this.connectionProvider.connectionFactory.getClass().getName() == com.mongodb.DBPortFactory.class
com.mongodb.DefaultServer.this.connectionProvider.closed == false
com.mongodb.DefaultServer.this.connectionProvider.hasWorked == false
com.mongodb.DefaultServer.this.changeListeners != null
com.mongodb.DefaultServer.this.changeListeners.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
com.mongodb.DefaultServer.this.serverStateListener.getClass().getName() == com.mongodb.DefaultServer$DefaultServerStateListener.class
com.mongodb.DefaultServer.this.description != null
com.mongodb.DefaultServer.this.description.type has only one value
com.mongodb.DefaultServer.this.description.type != null
com.mongodb.DefaultServer.this.description.type.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.DefaultServer.this.description.hosts has only one value
com.mongodb.DefaultServer.this.description.hosts != null
com.mongodb.DefaultServer.this.description.hosts.getClass().getName() == java.util.Collections$EmptySet.class
com.mongodb.DefaultServer.this.description.primary == null
com.mongodb.DefaultServer.this.description.maxDocumentSize == 16777216
com.mongodb.DefaultServer.this.description.maxWriteBatchSize == 512
com.mongodb.DefaultServer.this.description.maxMessageSize == 33554432
com.mongodb.DefaultServer.this.description.tags != null
com.mongodb.DefaultServer.this.description.setName == null
com.mongodb.DefaultServer.this.description.averageLatencyNanos == 0
com.mongodb.DefaultServer.this.description.ok == false
com.mongodb.DefaultServer.this.description.state has only one value
com.mongodb.DefaultServer.this.description.state != null
com.mongodb.DefaultServer.this.description.version != null
com.mongodb.DefaultServer.this.description.minWireVersion == 0
com.mongodb.DefaultServer.this.description.maxWireVersion == 0
com.mongodb.DefaultServer.this.isClosed == false
com.mongodb.DefaultServer.this.serverMonitor.lock.getClass().getName() != com.mongodb.DefaultServer.this.serverMonitor.condition.getClass().getName()
com.mongodb.DefaultServer.this.serverMonitor.lock.getClass().getName() != com.mongodb.DefaultServer.this.connectionProvider.connectionPoolListener.getClass().getName()
com.mongodb.DefaultServer.this.serverMonitor.lock.getClass().getName() != com.mongodb.DefaultServer.this.connectionProvider.connectionFactory.getClass().getName()
com.mongodb.DefaultServer.this.serverMonitor.lock.getClass().getName() != com.mongodb.DefaultServer.this.changeListeners.getClass().getName()
com.mongodb.DefaultServer.this.serverMonitor.lock.getClass().getName() != com.mongodb.DefaultServer.this.serverStateListener.getClass().getName()
com.mongodb.DefaultServer.this.serverMonitor.lock.getClass().getName() != com.mongodb.DefaultServer.this.description.type.getClass().getName()
com.mongodb.DefaultServer.this.serverMonitor.lock.getClass().getName() != com.mongodb.DefaultServer.this.description.hosts.getClass().getName()
com.mongodb.DefaultServer.this.serverMonitor.condition.getClass().getName() != com.mongodb.DefaultServer.this.connectionProvider.connectionPoolListener.getClass().getName()
com.mongodb.DefaultServer.this.serverMonitor.condition.getClass().getName() != com.mongodb.DefaultServer.this.connectionProvider.connectionFactory.getClass().getName()
com.mongodb.DefaultServer.this.serverMonitor.condition.getClass().getName() != com.mongodb.DefaultServer.this.changeListeners.getClass().getName()
com.mongodb.DefaultServer.this.serverMonitor.condition.getClass().getName() != com.mongodb.DefaultServer.this.serverStateListener.getClass().getName()
com.mongodb.DefaultServer.this.serverMonitor.condition.getClass().getName() != com.mongodb.DefaultServer.this.description.type.getClass().getName()
com.mongodb.DefaultServer.this.serverMonitor.condition.getClass().getName() != com.mongodb.DefaultServer.this.description.hosts.getClass().getName()
com.mongodb.DefaultServer.this.connectionProvider.connectionPoolListener.getClass().getName() != com.mongodb.DefaultServer.this.connectionProvider.connectionFactory.getClass().getName()
com.mongodb.DefaultServer.this.connectionProvider.connectionPoolListener.getClass().getName() != com.mongodb.DefaultServer.this.changeListeners.getClass().getName()
com.mongodb.DefaultServer.this.connectionProvider.connectionPoolListener.getClass().getName() != com.mongodb.DefaultServer.this.serverStateListener.getClass().getName()
com.mongodb.DefaultServer.this.connectionProvider.connectionPoolListener.getClass().getName() != com.mongodb.DefaultServer.this.description.type.getClass().getName()
com.mongodb.DefaultServer.this.connectionProvider.connectionPoolListener.getClass().getName() != com.mongodb.DefaultServer.this.description.hosts.getClass().getName()
com.mongodb.DefaultServer.this.connectionProvider.connectionFactory.getClass().getName() != com.mongodb.DefaultServer.this.changeListeners.getClass().getName()
com.mongodb.DefaultServer.this.connectionProvider.connectionFactory.getClass().getName() != com.mongodb.DefaultServer.this.serverStateListener.getClass().getName()
com.mongodb.DefaultServer.this.connectionProvider.connectionFactory.getClass().getName() != com.mongodb.DefaultServer.this.description.type.getClass().getName()
com.mongodb.DefaultServer.this.connectionProvider.connectionFactory.getClass().getName() != com.mongodb.DefaultServer.this.description.hosts.getClass().getName()
com.mongodb.DefaultServer.this.changeListeners.getClass().getName() != com.mongodb.DefaultServer.this.serverStateListener.getClass().getName()
com.mongodb.DefaultServer.this.changeListeners.getClass().getName() != com.mongodb.DefaultServer.this.description.type.getClass().getName()
com.mongodb.DefaultServer.this.changeListeners.getClass().getName() != com.mongodb.DefaultServer.this.description.hosts.getClass().getName()
com.mongodb.DefaultServer.this.serverStateListener.getClass().getName() != com.mongodb.DefaultServer.this.description.type.getClass().getName()
com.mongodb.DefaultServer.this.serverStateListener.getClass().getName() != com.mongodb.DefaultServer.this.description.hosts.getClass().getName()
com.mongodb.DefaultServer.this.description.type.getClass().getName() != com.mongodb.DefaultServer.this.description.hosts.getClass().getName()
===========================================================================
com.mongodb.DefaultServer$DefaultServerStateListener.DefaultServerStateListener(com.mongodb.DefaultServer):::ENTER
com.mongodb.DefaultServer.this.serverAddress == com.mongodb.DefaultServer.this.description.address
com.mongodb.DefaultServer.this.description.hosts == com.mongodb.DefaultServer.this.description.passives
com.mongodb.DefaultServer.this.description.hosts == com.mongodb.DefaultServer.this.description.arbiters
com.mongodb.DefaultServer.this.description.hosts.getClass().getName() == com.mongodb.DefaultServer.this.description.passives.getClass().getName()
com.mongodb.DefaultServer.this.description.hosts.getClass().getName() == com.mongodb.DefaultServer.this.description.arbiters.getClass().getName()
com.mongodb.DefaultServer.this.serverAddress._host has only one value
com.mongodb.DefaultServer.this.serverAddress._host.toString == "localhost"
com.mongodb.DefaultServer.this.serverAddress._port == 27017
com.mongodb.DefaultServer.this.serverMonitor == null
com.mongodb.ServerMonitor.LOGGER has only one value
com.mongodb.DefaultServer.this.connectionProvider == null
com.mongodb.PooledConnectionProvider.LOGGER has only one value
com.mongodb.DefaultServer.this.changeListeners.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
com.mongodb.DefaultServer.this.serverStateListener == null
com.mongodb.DefaultServer.this.description.type has only one value
com.mongodb.DefaultServer.this.description.type.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.DefaultServer.this.description.hosts has only one value
com.mongodb.DefaultServer.this.description.hosts.getClass().getName() == java.util.Collections$EmptySet.class
com.mongodb.DefaultServer.this.description.primary == null
com.mongodb.DefaultServer.this.description.maxDocumentSize == 16777216
com.mongodb.DefaultServer.this.description.maxWriteBatchSize == 512
com.mongodb.DefaultServer.this.description.maxMessageSize == 33554432
com.mongodb.DefaultServer.this.description.setName == null
com.mongodb.DefaultServer.this.description.averageLatencyNanos == 0
com.mongodb.DefaultServer.this.description.ok == false
com.mongodb.DefaultServer.this.description.state has only one value
com.mongodb.DefaultServer.this.description.minWireVersion == 0
com.mongodb.DefaultServer.this.description.maxWireVersion == 0
com.mongodb.DefaultServer.this.isClosed == false
===========================================================================
com.mongodb.DefaultServer$DefaultServerStateListener.DefaultServerStateListener(com.mongodb.DefaultServer):::EXIT
com.mongodb.DefaultServer.this == orig(com.mongodb.DefaultServer.this)
com.mongodb.DefaultServer.this.serverAddress == orig(com.mongodb.DefaultServer.this.serverAddress)
com.mongodb.DefaultServer.this.serverAddress == orig(com.mongodb.DefaultServer.this.description.address)
com.mongodb.DefaultServer.this.serverAddress._host == orig(com.mongodb.DefaultServer.this.serverAddress._host)
com.mongodb.DefaultServer.this.serverAddress._host.toString == orig(com.mongodb.DefaultServer.this.serverAddress._host.toString)
com.mongodb.DefaultServer.this.serverAddress._port == orig(com.mongodb.DefaultServer.this.serverAddress._port)
com.mongodb.DefaultServer.this.serverMonitor == orig(com.mongodb.DefaultServer.this.serverMonitor)
com.mongodb.ServerMonitor.LOGGER == orig(com.mongodb.ServerMonitor.LOGGER)
com.mongodb.DefaultServer.this.connectionProvider == orig(com.mongodb.DefaultServer.this.connectionProvider)
com.mongodb.PooledConnectionProvider.LOGGER == orig(com.mongodb.PooledConnectionProvider.LOGGER)
com.mongodb.DefaultServer.this.changeListeners == orig(com.mongodb.DefaultServer.this.changeListeners)
com.mongodb.DefaultServer.this.changeListeners.getClass().getName() == orig(com.mongodb.DefaultServer.this.changeListeners.getClass().getName())
com.mongodb.DefaultServer.this.serverStateListener == orig(com.mongodb.DefaultServer.this.serverStateListener)
com.mongodb.DefaultServer.this.description == orig(com.mongodb.DefaultServer.this.description)
com.mongodb.DefaultServer.this.description.type == orig(com.mongodb.DefaultServer.this.description.type)
com.mongodb.DefaultServer.this.description.type.getClass().getName() == orig(com.mongodb.DefaultServer.this.description.type.getClass().getName())
com.mongodb.DefaultServer.this.description.hosts == orig(com.mongodb.DefaultServer.this.description.hosts)
com.mongodb.DefaultServer.this.description.hosts == orig(com.mongodb.DefaultServer.this.description.passives)
com.mongodb.DefaultServer.this.description.hosts == orig(com.mongodb.DefaultServer.this.description.arbiters)
com.mongodb.DefaultServer.this.description.hosts.getClass().getName() == orig(com.mongodb.DefaultServer.this.description.hosts.getClass().getName())
com.mongodb.DefaultServer.this.description.hosts.getClass().getName() == orig(com.mongodb.DefaultServer.this.description.passives.getClass().getName())
com.mongodb.DefaultServer.this.description.hosts.getClass().getName() == orig(com.mongodb.DefaultServer.this.description.arbiters.getClass().getName())
com.mongodb.DefaultServer.this.description.primary == orig(com.mongodb.DefaultServer.this.description.primary)
com.mongodb.DefaultServer.this.description.maxDocumentSize == orig(com.mongodb.DefaultServer.this.description.maxDocumentSize)
com.mongodb.DefaultServer.this.description.maxWriteBatchSize == orig(com.mongodb.DefaultServer.this.description.maxWriteBatchSize)
com.mongodb.DefaultServer.this.description.maxMessageSize == orig(com.mongodb.DefaultServer.this.description.maxMessageSize)
com.mongodb.DefaultServer.this.description.tags == orig(com.mongodb.DefaultServer.this.description.tags)
com.mongodb.DefaultServer.this.description.setName == orig(com.mongodb.DefaultServer.this.description.setName)
com.mongodb.DefaultServer.this.description.averageLatencyNanos == orig(com.mongodb.DefaultServer.this.description.averageLatencyNanos)
com.mongodb.DefaultServer.this.description.ok == orig(com.mongodb.DefaultServer.this.description.ok)
com.mongodb.DefaultServer.this.description.state == orig(com.mongodb.DefaultServer.this.description.state)
com.mongodb.DefaultServer.this.description.version == orig(com.mongodb.DefaultServer.this.description.version)
com.mongodb.DefaultServer.this.description.minWireVersion == orig(com.mongodb.DefaultServer.this.description.minWireVersion)
com.mongodb.DefaultServer.this.description.maxWireVersion == orig(com.mongodb.DefaultServer.this.description.maxWireVersion)
com.mongodb.DefaultServer.this.isClosed == orig(com.mongodb.DefaultServer.this.isClosed)
com.mongodb.DefaultServer.this.serverMonitor == null
com.mongodb.DefaultServer.this.connectionProvider == null
com.mongodb.DefaultServer.this.serverStateListener == null
===========================================================================
com.mongodb.DefaultServer$DefaultServerStateListener.stateChanged(com.mongodb.ChangeEvent):::ENTER
event.oldValue.getClass().getName() == event.newValue.getClass().getName()
com.mongodb.DefaultServer.this.serverMonitor != null
com.mongodb.DefaultServer.this.connectionProvider != null
com.mongodb.DefaultServer.this.serverStateListener != null
event != null
event.oldValue != null
event.oldValue.getClass().getName() == com.mongodb.ServerDescription.class
event.newValue != null
com.mongodb.DefaultServer.this.serverMonitor.lock.getClass().getName() != event.oldValue.getClass().getName()
com.mongodb.DefaultServer.this.serverMonitor.condition.getClass().getName() != event.oldValue.getClass().getName()
com.mongodb.DefaultServer.this.connectionProvider.connectionPoolListener.getClass().getName() != event.oldValue.getClass().getName()
com.mongodb.DefaultServer.this.connectionProvider.connectionFactory.getClass().getName() != event.oldValue.getClass().getName()
com.mongodb.DefaultServer.this.changeListeners.getClass().getName() != event.oldValue.getClass().getName()
com.mongodb.DefaultServer.this.serverStateListener.getClass().getName() != event.oldValue.getClass().getName()
com.mongodb.DefaultServer.this.description.type.getClass().getName() != event.oldValue.getClass().getName()
com.mongodb.DefaultServer.this.description.hosts.getClass().getName() != event.oldValue.getClass().getName()
===========================================================================
com.mongodb.DefaultServer$DefaultServerStateListener.stateChanged(com.mongodb.ChangeEvent):::EXIT
com.mongodb.DefaultServer.this == orig(com.mongodb.DefaultServer.this)
com.mongodb.DefaultServer.this.serverAddress == orig(com.mongodb.DefaultServer.this.serverAddress)
com.mongodb.DefaultServer.this.serverAddress == orig(com.mongodb.DefaultServer.this.description.address)
com.mongodb.DefaultServer.this.serverAddress._host == orig(com.mongodb.DefaultServer.this.serverAddress._host)
com.mongodb.DefaultServer.this.serverAddress._host.toString == orig(com.mongodb.DefaultServer.this.serverAddress._host.toString)
com.mongodb.DefaultServer.this.serverAddress._port == orig(com.mongodb.DefaultServer.this.serverAddress._port)
com.mongodb.DefaultServer.this.serverMonitor == orig(com.mongodb.DefaultServer.this.serverMonitor)
com.mongodb.ServerMonitor.LOGGER == orig(com.mongodb.ServerMonitor.LOGGER)
com.mongodb.DefaultServer.this.serverMonitor.serverAddress == orig(com.mongodb.DefaultServer.this.serverMonitor.serverAddress)
com.mongodb.DefaultServer.this.serverMonitor.serverStateListener == orig(com.mongodb.DefaultServer.this.serverMonitor.serverStateListener)
com.mongodb.DefaultServer.this.serverMonitor.socketSettings == orig(com.mongodb.DefaultServer.this.serverMonitor.socketSettings)
com.mongodb.DefaultServer.this.serverMonitor.settings == orig(com.mongodb.DefaultServer.this.serverMonitor.settings)
com.mongodb.DefaultServer.this.serverMonitor.mongo == orig(com.mongodb.DefaultServer.this.serverMonitor.mongo)
com.mongodb.DefaultServer.this.serverMonitor.count == orig(com.mongodb.DefaultServer.this.serverMonitor.count)
com.mongodb.DefaultServer.this.serverMonitor.elapsedNanosSum == orig(com.mongodb.DefaultServer.this.serverMonitor.elapsedNanosSum)
com.mongodb.DefaultServer.this.serverMonitor.serverDescription == orig(com.mongodb.DefaultServer.this.serverMonitor.serverDescription)
com.mongodb.DefaultServer.this.serverMonitor.isClosed == orig(com.mongodb.DefaultServer.this.serverMonitor.isClosed)
com.mongodb.DefaultServer.this.serverMonitor.connection == orig(com.mongodb.DefaultServer.this.serverMonitor.connection)
com.mongodb.DefaultServer.this.serverMonitor.monitorThread == orig(com.mongodb.DefaultServer.this.serverMonitor.monitorThread)
com.mongodb.DefaultServer.this.serverMonitor.lock == orig(com.mongodb.DefaultServer.this.serverMonitor.lock)
com.mongodb.DefaultServer.this.serverMonitor.lock.getClass().getName() == orig(com.mongodb.DefaultServer.this.serverMonitor.lock.getClass().getName())
com.mongodb.DefaultServer.this.serverMonitor.condition == orig(com.mongodb.DefaultServer.this.serverMonitor.condition)
com.mongodb.DefaultServer.this.serverMonitor.condition.getClass().getName() == orig(com.mongodb.DefaultServer.this.serverMonitor.condition.getClass().getName())
com.mongodb.DefaultServer.this.connectionProvider == orig(com.mongodb.DefaultServer.this.connectionProvider)
com.mongodb.PooledConnectionProvider.LOGGER == orig(com.mongodb.PooledConnectionProvider.LOGGER)
com.mongodb.DefaultServer.this.connectionProvider.pool == orig(com.mongodb.DefaultServer.this.connectionProvider.pool)
com.mongodb.DefaultServer.this.connectionProvider.settings == orig(com.mongodb.DefaultServer.this.connectionProvider.settings)
com.mongodb.DefaultServer.this.connectionProvider.waitQueueSize == orig(com.mongodb.DefaultServer.this.connectionProvider.waitQueueSize)
com.mongodb.DefaultServer.this.connectionProvider.generation == orig(com.mongodb.DefaultServer.this.connectionProvider.generation)
com.mongodb.DefaultServer.this.connectionProvider.sizeMaintenanceTimer == orig(com.mongodb.DefaultServer.this.connectionProvider.sizeMaintenanceTimer)
com.mongodb.DefaultServer.this.connectionProvider.clusterId == orig(com.mongodb.DefaultServer.this.connectionProvider.clusterId)
com.mongodb.DefaultServer.this.connectionProvider.clusterId.toString == orig(com.mongodb.DefaultServer.this.connectionProvider.clusterId.toString)
com.mongodb.DefaultServer.this.connectionProvider.serverAddress == orig(com.mongodb.DefaultServer.this.connectionProvider.serverAddress)
com.mongodb.DefaultServer.this.connectionProvider.maintenanceTask == orig(com.mongodb.DefaultServer.this.connectionProvider.maintenanceTask)
com.mongodb.DefaultServer.this.connectionProvider.connectionPoolListener == orig(com.mongodb.DefaultServer.this.connectionProvider.connectionPoolListener)
com.mongodb.DefaultServer.this.connectionProvider.connectionPoolListener.getClass().getName() == orig(com.mongodb.DefaultServer.this.connectionProvider.connectionPoolListener.getClass().getName())
com.mongodb.DefaultServer.this.connectionProvider.connectionFactory == orig(com.mongodb.DefaultServer.this.connectionProvider.connectionFactory)
com.mongodb.DefaultServer.this.connectionProvider.connectionFactory.getClass().getName() == orig(com.mongodb.DefaultServer.this.connectionProvider.connectionFactory.getClass().getName())
com.mongodb.DefaultServer.this.connectionProvider.closed == orig(com.mongodb.DefaultServer.this.connectionProvider.closed)
com.mongodb.DefaultServer.this.connectionProvider.hasWorked == orig(com.mongodb.DefaultServer.this.connectionProvider.hasWorked)
com.mongodb.DefaultServer.this.changeListeners == orig(com.mongodb.DefaultServer.this.changeListeners)
com.mongodb.DefaultServer.this.changeListeners.getClass().getName() == orig(com.mongodb.DefaultServer.this.changeListeners.getClass().getName())
com.mongodb.DefaultServer.this.serverStateListener == orig(com.mongodb.DefaultServer.this.serverStateListener)
com.mongodb.DefaultServer.this.serverStateListener.getClass().getName() == orig(com.mongodb.DefaultServer.this.serverMonitor.serverStateListener.getClass().getName())
com.mongodb.DefaultServer.this.serverStateListener.getClass().getName() == orig(com.mongodb.DefaultServer.this.serverStateListener.getClass().getName())
com.mongodb.DefaultServer.this.description.type == orig(com.mongodb.DefaultServer.this.description.type)
com.mongodb.DefaultServer.this.description.type.getClass().getName() == orig(com.mongodb.DefaultServer.this.description.type.getClass().getName())
com.mongodb.DefaultServer.this.description.hosts == orig(com.mongodb.DefaultServer.this.description.hosts)
com.mongodb.DefaultServer.this.description.hosts == orig(com.mongodb.DefaultServer.this.description.passives)
com.mongodb.DefaultServer.this.description.hosts == orig(com.mongodb.DefaultServer.this.description.arbiters)
com.mongodb.DefaultServer.this.description.hosts.getClass().getName() == orig(com.mongodb.DefaultServer.this.description.hosts.getClass().getName())
com.mongodb.DefaultServer.this.description.hosts.getClass().getName() == orig(com.mongodb.DefaultServer.this.description.passives.getClass().getName())
com.mongodb.DefaultServer.this.description.hosts.getClass().getName() == orig(com.mongodb.DefaultServer.this.description.arbiters.getClass().getName())
com.mongodb.DefaultServer.this.description.primary == orig(com.mongodb.DefaultServer.this.description.primary)
com.mongodb.DefaultServer.this.description.maxDocumentSize == orig(com.mongodb.DefaultServer.this.description.maxDocumentSize)
com.mongodb.DefaultServer.this.description.maxWriteBatchSize == orig(com.mongodb.DefaultServer.this.description.maxWriteBatchSize)
com.mongodb.DefaultServer.this.description.maxMessageSize == orig(com.mongodb.DefaultServer.this.description.maxMessageSize)
com.mongodb.DefaultServer.this.description.setName == orig(com.mongodb.DefaultServer.this.description.setName)
com.mongodb.DefaultServer.this.description.averageLatencyNanos == orig(com.mongodb.DefaultServer.this.description.averageLatencyNanos)
com.mongodb.DefaultServer.this.description.ok == orig(com.mongodb.DefaultServer.this.description.ok)
com.mongodb.DefaultServer.this.description.state == orig(com.mongodb.DefaultServer.this.description.state)
com.mongodb.DefaultServer.this.description.minWireVersion == orig(com.mongodb.DefaultServer.this.description.minWireVersion)
com.mongodb.DefaultServer.this.description.maxWireVersion == orig(com.mongodb.DefaultServer.this.description.maxWireVersion)
com.mongodb.DefaultServer.this.isClosed == orig(com.mongodb.DefaultServer.this.isClosed)
event.oldValue == orig(event.oldValue)
event.oldValue.getClass().getName() == event.newValue.getClass().getName()
event.oldValue.getClass().getName() == orig(event.oldValue.getClass().getName())
event.oldValue.getClass().getName() == orig(event.newValue.getClass().getName())
event.newValue == orig(event.newValue)
com.mongodb.DefaultServer.this.serverMonitor != null
com.mongodb.DefaultServer.this.connectionProvider != null
com.mongodb.DefaultServer.this.serverStateListener != null
event.oldValue != null
event.oldValue.getClass().getName() == com.mongodb.ServerDescription.class
event.newValue != null
com.mongodb.DefaultServer.this.serverMonitor.lock.getClass().getName() != event.oldValue.getClass().getName()
com.mongodb.DefaultServer.this.serverMonitor.condition.getClass().getName() != event.oldValue.getClass().getName()
com.mongodb.DefaultServer.this.connectionProvider.connectionPoolListener.getClass().getName() != event.oldValue.getClass().getName()
com.mongodb.DefaultServer.this.connectionProvider.connectionFactory.getClass().getName() != event.oldValue.getClass().getName()
com.mongodb.DefaultServer.this.changeListeners.getClass().getName() != event.oldValue.getClass().getName()
com.mongodb.DefaultServer.this.serverStateListener.getClass().getName() != event.oldValue.getClass().getName()
com.mongodb.DefaultServer.this.description.type.getClass().getName() != event.oldValue.getClass().getName()
com.mongodb.DefaultServer.this.description.hosts.getClass().getName() != event.oldValue.getClass().getName()
===========================================================================
com.mongodb.DefaultServer:::OBJECT
this.serverAddress != null
this.serverAddress._host has only one value
this.serverAddress._host != null
this.serverAddress._host.toString == "localhost"
this.serverAddress._port == 27017
this.serverMonitor != null
com.mongodb.ServerMonitor.LOGGER has only one value
com.mongodb.ServerMonitor.LOGGER != null
this.serverMonitor.serverAddress != null
this.serverMonitor.serverAddress._host has only one value
this.serverMonitor.serverAddress._host != null
this.serverMonitor.serverAddress._host.toString == "localhost"
this.serverMonitor.serverAddress._port == 27017
this.serverMonitor.serverStateListener != null
this.serverMonitor.serverStateListener.getClass().getName() == com.mongodb.DefaultServer$DefaultServerStateListener.class
this.serverMonitor.socketSettings != null
this.serverMonitor.socketSettings.connectTimeoutMS == 20000
this.serverMonitor.socketSettings.readTimeoutMS == 20000
this.serverMonitor.socketSettings.socketFactory has only one value
this.serverMonitor.socketSettings.socketFactory != null
this.serverMonitor.socketSettings.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
this.serverMonitor.settings != null
this.serverMonitor.settings.heartbeatFrequencyMS == 5000
this.serverMonitor.settings.heartbeatConnectRetryFrequencyMS == 10
this.serverMonitor.settings.heartbeatSocketSettings != null
this.serverMonitor.mongo != null
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.logger != null
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION != null
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME != null
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
this.serverMonitor.mongo._options != null
this.serverMonitor.mongo._connector != null
this.serverMonitor.mongo._dbs != null
this.serverMonitor.mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
this.serverMonitor.mongo._concern has only one value
this.serverMonitor.mongo._concern != null
this.serverMonitor.mongo._readPref has only one value
this.serverMonitor.mongo._readPref != null
this.serverMonitor.mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
this.serverMonitor.mongo._netOptions != null
this.serverMonitor.mongo._authority != null
this.serverMonitor.mongo._bufferPool != null
this.serverMonitor.mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
this.serverMonitor.count == 0
this.serverMonitor.elapsedNanosSum == 0
this.serverMonitor.serverDescription != null
this.serverMonitor.serverDescription.address != null
this.serverMonitor.serverDescription.type has only one value
this.serverMonitor.serverDescription.type != null
this.serverMonitor.serverDescription.type.getClass().getName() == com.mongodb.ServerType$8.class
this.serverMonitor.serverDescription.hosts has only one value
this.serverMonitor.serverDescription.hosts != null
this.serverMonitor.serverDescription.hosts.getClass().getName() == java.util.Collections$EmptySet.class
this.serverMonitor.serverDescription.passives has only one value
this.serverMonitor.serverDescription.passives != null
this.serverMonitor.serverDescription.passives.getClass().getName() == java.util.Collections$EmptySet.class
this.serverMonitor.serverDescription.arbiters has only one value
this.serverMonitor.serverDescription.arbiters != null
this.serverMonitor.serverDescription.arbiters.getClass().getName() == java.util.Collections$EmptySet.class
this.serverMonitor.serverDescription.primary == null
this.serverMonitor.serverDescription.maxDocumentSize == 16777216
this.serverMonitor.serverDescription.maxWriteBatchSize == 512
this.serverMonitor.serverDescription.maxMessageSize == 33554432
this.serverMonitor.serverDescription.tags != null
this.serverMonitor.serverDescription.setName == null
this.serverMonitor.serverDescription.averageLatencyNanos == 0
this.serverMonitor.serverDescription.ok == false
this.serverMonitor.serverDescription.state has only one value
this.serverMonitor.serverDescription.state != null
this.serverMonitor.serverDescription.version != null
this.serverMonitor.serverDescription.minWireVersion == 0
this.serverMonitor.serverDescription.maxWireVersion == 0
this.serverMonitor.isClosed == false
this.serverMonitor.connection == null
com.mongodb.DBPort._rootLogger has only one value
com.mongodb.DBPort._rootLogger != null
this.serverMonitor.monitorThread != null
this.serverMonitor.lock != null
this.serverMonitor.lock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
this.serverMonitor.condition != null
this.serverMonitor.condition.getClass().getName() == java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.class
this.connectionProvider != null
com.mongodb.PooledConnectionProvider.LOGGER has only one value
com.mongodb.PooledConnectionProvider.LOGGER != null
this.connectionProvider.pool != null
this.connectionProvider.pool.maxSize == 10
this.connectionProvider.pool.itemFactory != null
this.connectionProvider.pool.itemFactory.getClass().getName() == com.mongodb.PooledConnectionProvider$ConnectionItemFactory.class
this.connectionProvider.pool.available != null
this.connectionProvider.pool.available.getClass().getName() == com.mongodb.ConcurrentLinkedDeque.class
this.connectionProvider.pool.permits != null
this.connectionProvider.pool.closed == false
this.connectionProvider.settings != null
this.connectionProvider.settings.maxSize == 10
this.connectionProvider.settings.minSize == 0
this.connectionProvider.settings.maxWaitQueueSize == 50
this.connectionProvider.settings.maxWaitTimeMS == 120000
this.connectionProvider.settings.maxConnectionLifeTimeMS == 0
this.connectionProvider.settings.maxConnectionIdleTimeMS == 0
this.connectionProvider.settings.maintenanceInitialDelayMS == 0
this.connectionProvider.settings.maintenanceFrequencyMS == 60000
this.connectionProvider.waitQueueSize != null
this.connectionProvider.generation != null
this.connectionProvider.sizeMaintenanceTimer == null
this.connectionProvider.clusterId != null
this.connectionProvider.clusterId.toString one of { "1", "2" }
this.connectionProvider.serverAddress != null
this.connectionProvider.serverAddress._host has only one value
this.connectionProvider.serverAddress._host != null
this.connectionProvider.serverAddress._host.toString == "localhost"
this.connectionProvider.serverAddress._port == 27017
this.connectionProvider.maintenanceTask == null
this.connectionProvider.connectionPoolListener != null
this.connectionProvider.connectionPoolListener.getClass().getName() == com.mongodb.JMXConnectionPoolListener.class
this.connectionProvider.connectionFactory != null
this.connectionProvider.connectionFactory.getClass().getName() == com.mongodb.DBPortFactory.class
this.connectionProvider.closed == false
this.connectionProvider.hasWorked == false
this.changeListeners != null
this.changeListeners.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
this.serverStateListener != null
this.serverStateListener.getClass().getName() == com.mongodb.DefaultServer$DefaultServerStateListener.class
this.description != null
this.description.address != null
this.description.address._host has only one value
this.description.address._host != null
this.description.address._host.toString == "localhost"
this.description.address._port == 27017
this.description.type has only one value
this.description.type != null
this.description.type.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.ServerType.StandAlone has only one value
com.mongodb.ServerType.StandAlone != null
com.mongodb.ServerType.StandAlone.getClass().getName() == com.mongodb.ServerType$1.class
com.mongodb.ServerType.ReplicaSetPrimary has only one value
com.mongodb.ServerType.ReplicaSetPrimary != null
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == com.mongodb.ServerType$2.class
com.mongodb.ServerType.ReplicaSetSecondary has only one value
com.mongodb.ServerType.ReplicaSetSecondary != null
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == com.mongodb.ServerType$3.class
com.mongodb.ServerType.ReplicaSetArbiter has only one value
com.mongodb.ServerType.ReplicaSetArbiter != null
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == com.mongodb.ServerType$4.class
com.mongodb.ServerType.ReplicaSetOther has only one value
com.mongodb.ServerType.ReplicaSetOther != null
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == com.mongodb.ServerType$5.class
com.mongodb.ServerType.ReplicaSetGhost has only one value
com.mongodb.ServerType.ReplicaSetGhost != null
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == com.mongodb.ServerType$6.class
com.mongodb.ServerType.ShardRouter has only one value
com.mongodb.ServerType.ShardRouter != null
com.mongodb.ServerType.ShardRouter.getClass().getName() == com.mongodb.ServerType$7.class
com.mongodb.ServerType.Unknown has only one value
com.mongodb.ServerType.Unknown != null
com.mongodb.ServerType.Unknown.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.ServerType.$VALUES has only one value
com.mongodb.ServerType.$VALUES != null
com.mongodb.ServerType.$VALUES.getClass().getName() == com.mongodb.ServerType[].class
com.mongodb.ServerType.$VALUES[] contains no nulls and has only one value, of length 8
com.mongodb.ServerType.$VALUES[] elements != null
com.mongodb.ServerType.$VALUES[].getClass().getName() == [null, null, null, null, null, null, null, null]
com.mongodb.ServerType.$VALUES[].getClass().getName() elements == null
this.description.hosts has only one value
this.description.hosts != null
this.description.hosts.getClass().getName() == java.util.Collections$EmptySet.class
this.description.passives has only one value
this.description.passives != null
this.description.passives.getClass().getName() == java.util.Collections$EmptySet.class
this.description.arbiters has only one value
this.description.arbiters != null
this.description.arbiters.getClass().getName() == java.util.Collections$EmptySet.class
this.description.primary == null
this.description.maxDocumentSize == 16777216
this.description.maxWriteBatchSize == 512
this.description.maxMessageSize == 33554432
this.description.tags != null
this.description.tags.frozen == true
this.description.tags.wrapped != null
this.description.tags.wrapped.getClass().getName() == java.util.HashMap.class
this.description.setName == null
this.description.averageLatencyNanos == 0
this.description.ok == false
this.description.state has only one value
this.description.state != null
com.mongodb.ServerConnectionState.Connecting has only one value
com.mongodb.ServerConnectionState.Connecting != null
com.mongodb.ServerConnectionState.Connected has only one value
com.mongodb.ServerConnectionState.Connected != null
com.mongodb.ServerConnectionState.$VALUES has only one value
com.mongodb.ServerConnectionState.$VALUES != null
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == com.mongodb.ServerConnectionState[].class
com.mongodb.ServerConnectionState.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ServerConnectionState.$VALUES[] elements != null
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() == [com.mongodb.ServerConnectionState, com.mongodb.ServerConnectionState]
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() elements == com.mongodb.ServerConnectionState.class
this.description.version != null
this.description.version.versionList != null
this.description.version.versionList[] contains no nulls and has only one value, of length 3
this.description.version.versionList[] elements has only one value
this.description.version.versionList[] elements != null
this.description.version.versionList[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.description.version.versionList[].getClass().getName() elements == java.lang.Integer.class
this.description.version.versionList.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.description.minWireVersion == 0
this.description.maxWireVersion == 0
this.isClosed == false
size(com.mongodb.ServerType.$VALUES[]) == 8
size(com.mongodb.ServerConnectionState.$VALUES[]) == 2
size(this.description.version.versionList[]) == 3
===========================================================================
com.mongodb.DefaultServer.DefaultServer(com.mongodb.ServerAddress, com.mongodb.ServerSettings, java.lang.String, com.mongodb.PooledConnectionProvider, com.mongodb.Mongo):::ENTER
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
settings.heartbeatFrequencyMS == 5000
settings.heartbeatConnectRetryFrequencyMS == 10
settings.heartbeatSocketSettings.connectTimeoutMS == 20000
settings.heartbeatSocketSettings.readTimeoutMS == 20000
settings.heartbeatSocketSettings.socketFactory has only one value
settings.heartbeatSocketSettings.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
clusterId.toString one of { "1", "2" }
com.mongodb.PooledConnectionProvider.LOGGER has only one value
connectionProvider.pool.maxSize == 10
connectionProvider.pool.itemFactory.getClass().getName() == com.mongodb.PooledConnectionProvider$ConnectionItemFactory.class
connectionProvider.pool.available.getClass().getName() == com.mongodb.ConcurrentLinkedDeque.class
connectionProvider.pool.closed == false
connectionProvider.settings.maxSize == 10
connectionProvider.settings.minSize == 0
connectionProvider.settings.maxWaitQueueSize == 50
connectionProvider.settings.maxWaitTimeMS == 120000
connectionProvider.settings.maxConnectionLifeTimeMS == 0
connectionProvider.settings.maxConnectionIdleTimeMS == 0
connectionProvider.settings.maintenanceInitialDelayMS == 0
connectionProvider.settings.maintenanceFrequencyMS == 60000
connectionProvider.sizeMaintenanceTimer == null
connectionProvider.clusterId.toString one of { "1", "2" }
connectionProvider.serverAddress._host has only one value
connectionProvider.serverAddress._host.toString == "localhost"
connectionProvider.serverAddress._port == 27017
connectionProvider.maintenanceTask == null
connectionProvider.connectionPoolListener.getClass().getName() == com.mongodb.JMXConnectionPoolListener.class
connectionProvider.connectionFactory.getClass().getName() == com.mongodb.DBPortFactory.class
connectionProvider.closed == false
connectionProvider.hasWorked == false
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
mongo._options.description == null
mongo._options.connectionsPerHost == 10
mongo._options.threadsAllowedToBlockForConnectionMultiplier == 5
mongo._options.maxWaitTime == 120000
mongo._options.connectTimeout == 10000
mongo._options.socketTimeout == 0
mongo._options.socketKeepAlive == false
mongo._options.autoConnectRetry == false
mongo._options.maxAutoConnectRetryTime == 0
mongo._options.slaveOk == false
mongo._options.readPreference == null
mongo._options.dbDecoderFactory has only one value
mongo._options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
mongo._options.dbEncoderFactory has only one value
mongo._options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
mongo._options.safe == false
mongo._options.w == 0
mongo._options.wtimeout == 0
mongo._options.fsync == false
mongo._options.j == false
mongo._options.socketFactory has only one value
mongo._options.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
mongo._options.cursorFinalizerEnabled == true
mongo._options.writeConcern == null
mongo._options.alwaysUseMBeans == false
mongo._options.minConnectionsPerHost == 0
mongo._options.maxConnectionIdleTime == 0
mongo._options.maxConnectionLifeTime == 0
mongo._options.heartbeatFrequencyMS == 5000
mongo._options.heartbeatConnectRetryFrequencyMS == 10
mongo._options.heartbeatConnectTimeoutMS == 20000
mongo._options.heartbeatReadTimeoutMS == 20000
mongo._options.acceptableLatencyDifferenceMS == 15
mongo._options.heartbeatThreadCount == 0
mongo._options.requiredReplicaSetName == null
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID has only one value
mongo._connector._closed == false
mongo._connector.cluster == null
mongo._connector.connectionMode has only one value
mongo._connector.type has only one value
mongo._connector.mongosHAServerSelector == null
mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
mongo._concern has only one value
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
mongo._concern._w has only one value
mongo._concern._w.getClass().getName() == java.lang.Integer.class
mongo._concern._wtimeout == 0
mongo._concern._fsync == false
mongo._concern._j == false
mongo._concern._continueOnError == false
mongo._readPref has only one value
mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY has only one value
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY_PREFERRED has only one value
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
mongo._netOptions._parent == null
mongo._netOptions._options == 0
mongo._netOptions._hasOptions == false
mongo._cleaner == null
mongo._authority.type has only one value
mongo._authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
mongo._authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
mongo._authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
mongo._bufferPool._max == 1000
mongo._bufferPool._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
size(mongo._authority.serverAddresses[]) == 1
===========================================================================
com.mongodb.DefaultServer.DefaultServer(com.mongodb.ServerAddress, com.mongodb.ServerSettings, java.lang.String, com.mongodb.PooledConnectionProvider, com.mongodb.Mongo):::EXIT
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
com.mongodb.PooledConnectionProvider.LOGGER == orig(com.mongodb.PooledConnectionProvider.LOGGER)
serverAddress._host == orig(serverAddress._host)
serverAddress._host.toString == orig(serverAddress._host.toString)
serverAddress._port == orig(serverAddress._port)
settings.heartbeatFrequencyMS == orig(settings.heartbeatFrequencyMS)
settings.heartbeatConnectRetryFrequencyMS == orig(settings.heartbeatConnectRetryFrequencyMS)
settings.heartbeatSocketSettings == orig(settings.heartbeatSocketSettings)
settings.heartbeatSocketSettings.connectTimeoutMS == orig(settings.heartbeatSocketSettings.connectTimeoutMS)
settings.heartbeatSocketSettings.readTimeoutMS == orig(settings.heartbeatSocketSettings.readTimeoutMS)
settings.heartbeatSocketSettings.socketFactory == orig(settings.heartbeatSocketSettings.socketFactory)
settings.heartbeatSocketSettings.socketFactory.getClass().getName() == orig(settings.heartbeatSocketSettings.socketFactory.getClass().getName())
clusterId.toString == orig(clusterId.toString)
connectionProvider.pool == orig(connectionProvider.pool)
connectionProvider.pool.maxSize == orig(connectionProvider.pool.maxSize)
connectionProvider.pool.itemFactory == orig(connectionProvider.pool.itemFactory)
connectionProvider.pool.itemFactory.getClass().getName() == orig(connectionProvider.pool.itemFactory.getClass().getName())
connectionProvider.pool.available == orig(connectionProvider.pool.available)
connectionProvider.pool.available.getClass().getName() == orig(connectionProvider.pool.available.getClass().getName())
connectionProvider.pool.permits == orig(connectionProvider.pool.permits)
connectionProvider.pool.closed == orig(connectionProvider.pool.closed)
connectionProvider.settings == orig(connectionProvider.settings)
connectionProvider.settings.maxSize == orig(connectionProvider.settings.maxSize)
connectionProvider.settings.minSize == orig(connectionProvider.settings.minSize)
connectionProvider.settings.maxWaitQueueSize == orig(connectionProvider.settings.maxWaitQueueSize)
connectionProvider.settings.maxWaitTimeMS == orig(connectionProvider.settings.maxWaitTimeMS)
connectionProvider.settings.maxConnectionLifeTimeMS == orig(connectionProvider.settings.maxConnectionLifeTimeMS)
connectionProvider.settings.maxConnectionIdleTimeMS == orig(connectionProvider.settings.maxConnectionIdleTimeMS)
connectionProvider.settings.maintenanceInitialDelayMS == orig(connectionProvider.settings.maintenanceInitialDelayMS)
connectionProvider.settings.maintenanceFrequencyMS == orig(connectionProvider.settings.maintenanceFrequencyMS)
connectionProvider.waitQueueSize == orig(connectionProvider.waitQueueSize)
connectionProvider.generation == orig(connectionProvider.generation)
connectionProvider.sizeMaintenanceTimer == orig(connectionProvider.sizeMaintenanceTimer)
connectionProvider.clusterId == orig(connectionProvider.clusterId)
connectionProvider.clusterId.toString == orig(connectionProvider.clusterId.toString)
connectionProvider.serverAddress == orig(connectionProvider.serverAddress)
connectionProvider.serverAddress._host == orig(connectionProvider.serverAddress._host)
connectionProvider.serverAddress._host.toString == orig(connectionProvider.serverAddress._host.toString)
connectionProvider.serverAddress._port == orig(connectionProvider.serverAddress._port)
connectionProvider.maintenanceTask == orig(connectionProvider.maintenanceTask)
connectionProvider.connectionPoolListener == orig(connectionProvider.connectionPoolListener)
connectionProvider.connectionPoolListener.getClass().getName() == orig(connectionProvider.connectionPoolListener.getClass().getName())
connectionProvider.connectionFactory == orig(connectionProvider.connectionFactory)
connectionProvider.connectionFactory.getClass().getName() == orig(connectionProvider.connectionFactory.getClass().getName())
connectionProvider.closed == orig(connectionProvider.closed)
connectionProvider.hasWorked == orig(connectionProvider.hasWorked)
mongo._options == orig(mongo._options)
mongo._options.description == orig(mongo._options.description)
mongo._options.connectionsPerHost == orig(mongo._options.connectionsPerHost)
mongo._options.threadsAllowedToBlockForConnectionMultiplier == orig(mongo._options.threadsAllowedToBlockForConnectionMultiplier)
mongo._options.maxWaitTime == orig(mongo._options.maxWaitTime)
mongo._options.connectTimeout == orig(mongo._options.connectTimeout)
mongo._options.socketTimeout == orig(mongo._options.socketTimeout)
mongo._options.socketKeepAlive == orig(mongo._options.socketKeepAlive)
mongo._options.autoConnectRetry == orig(mongo._options.autoConnectRetry)
mongo._options.maxAutoConnectRetryTime == orig(mongo._options.maxAutoConnectRetryTime)
mongo._options.slaveOk == orig(mongo._options.slaveOk)
mongo._options.readPreference == orig(mongo._options.readPreference)
mongo._options.dbDecoderFactory == orig(mongo._options.dbDecoderFactory)
mongo._options.dbDecoderFactory.getClass().getName() == orig(mongo._options.dbDecoderFactory.getClass().getName())
mongo._options.dbEncoderFactory == orig(mongo._options.dbEncoderFactory)
mongo._options.dbEncoderFactory.getClass().getName() == orig(mongo._options.dbEncoderFactory.getClass().getName())
mongo._options.safe == orig(mongo._options.safe)
mongo._options.w == orig(mongo._options.w)
mongo._options.wtimeout == orig(mongo._options.wtimeout)
mongo._options.fsync == orig(mongo._options.fsync)
mongo._options.j == orig(mongo._options.j)
mongo._options.socketFactory == orig(mongo._options.socketFactory)
mongo._options.socketFactory.getClass().getName() == orig(mongo._options.socketFactory.getClass().getName())
mongo._options.cursorFinalizerEnabled == orig(mongo._options.cursorFinalizerEnabled)
mongo._options.writeConcern == orig(mongo._options.writeConcern)
mongo._options.alwaysUseMBeans == orig(mongo._options.alwaysUseMBeans)
mongo._options.minConnectionsPerHost == orig(mongo._options.minConnectionsPerHost)
mongo._options.maxConnectionIdleTime == orig(mongo._options.maxConnectionIdleTime)
mongo._options.maxConnectionLifeTime == orig(mongo._options.maxConnectionLifeTime)
mongo._options.heartbeatFrequencyMS == orig(mongo._options.heartbeatFrequencyMS)
mongo._options.heartbeatConnectRetryFrequencyMS == orig(mongo._options.heartbeatConnectRetryFrequencyMS)
mongo._options.heartbeatConnectTimeoutMS == orig(mongo._options.heartbeatConnectTimeoutMS)
mongo._options.heartbeatReadTimeoutMS == orig(mongo._options.heartbeatReadTimeoutMS)
mongo._options.acceptableLatencyDifferenceMS == orig(mongo._options.acceptableLatencyDifferenceMS)
mongo._options.heartbeatThreadCount == orig(mongo._options.heartbeatThreadCount)
mongo._options.requiredReplicaSetName == orig(mongo._options.requiredReplicaSetName)
mongo._connector == orig(mongo._connector)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
mongo._connector._closed == orig(mongo._connector._closed)
mongo._connector._mongo == orig(mongo._connector._mongo)
mongo._connector.cluster == orig(mongo._connector.cluster)
mongo._connector._myPort == orig(mongo._connector._myPort)
mongo._connector.connectionMode == orig(mongo._connector.connectionMode)
mongo._connector.type == orig(mongo._connector.type)
mongo._connector.mongosHAServerSelector == orig(mongo._connector.mongosHAServerSelector)
mongo._dbs == orig(mongo._dbs)
mongo._dbs.getClass().getName() == orig(mongo._dbs.getClass().getName())
mongo._concern == orig(mongo._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
mongo._concern._w == orig(mongo._concern._w)
mongo._concern._w.getClass().getName() == orig(mongo._concern._w.getClass().getName())
mongo._concern._wtimeout == orig(mongo._concern._wtimeout)
mongo._concern._fsync == orig(mongo._concern._fsync)
mongo._concern._j == orig(mongo._concern._j)
mongo._concern._continueOnError == orig(mongo._concern._continueOnError)
mongo._readPref == orig(mongo._readPref)
mongo._readPref.getClass().getName() == orig(mongo._readPref.getClass().getName())
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
mongo._netOptions == orig(mongo._netOptions)
mongo._netOptions._parent == orig(mongo._netOptions._parent)
mongo._netOptions._options == orig(mongo._netOptions._options)
mongo._netOptions._hasOptions == orig(mongo._netOptions._hasOptions)
mongo._cleaner == orig(mongo._cleaner)
mongo._authority == orig(mongo._authority)
mongo._authority.type == orig(mongo._authority.type)
mongo._authority.serverAddresses == orig(mongo._authority.serverAddresses)
mongo._authority.serverAddresses[] == orig(mongo._authority.serverAddresses[])
mongo._authority.serverAddresses.getClass().getName() == orig(mongo._authority.serverAddresses.getClass().getName())
mongo._authority.credentialsStore == orig(mongo._authority.credentialsStore)
mongo._bufferPool == orig(mongo._bufferPool)
mongo._bufferPool.getClass().getName() == orig(mongo._bufferPool.getClass().getName())
mongo._bufferPool._max == orig(mongo._bufferPool._max)
mongo._bufferPool._stored == orig(mongo._bufferPool._stored)
mongo._bufferPool._stored.getClass().getName() == orig(mongo._bufferPool._stored.getClass().getName())
this.serverMonitor.mongo._cleaner == null
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
settings.heartbeatFrequencyMS == 5000
settings.heartbeatConnectRetryFrequencyMS == 10
settings.heartbeatSocketSettings.connectTimeoutMS == 20000
settings.heartbeatSocketSettings.readTimeoutMS == 20000
settings.heartbeatSocketSettings.socketFactory has only one value
settings.heartbeatSocketSettings.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
clusterId.toString one of { "1", "2" }
connectionProvider.pool.maxSize == 10
connectionProvider.pool.itemFactory.getClass().getName() == com.mongodb.PooledConnectionProvider$ConnectionItemFactory.class
connectionProvider.pool.available.getClass().getName() == com.mongodb.ConcurrentLinkedDeque.class
connectionProvider.pool.closed == false
connectionProvider.settings.maxSize == 10
connectionProvider.settings.minSize == 0
connectionProvider.settings.maxWaitQueueSize == 50
connectionProvider.settings.maxWaitTimeMS == 120000
connectionProvider.settings.maxConnectionLifeTimeMS == 0
connectionProvider.settings.maxConnectionIdleTimeMS == 0
connectionProvider.settings.maintenanceInitialDelayMS == 0
connectionProvider.settings.maintenanceFrequencyMS == 60000
connectionProvider.sizeMaintenanceTimer == null
connectionProvider.clusterId.toString one of { "1", "2" }
connectionProvider.serverAddress._host has only one value
connectionProvider.serverAddress._host.toString == "localhost"
connectionProvider.serverAddress._port == 27017
connectionProvider.maintenanceTask == null
connectionProvider.connectionPoolListener.getClass().getName() == com.mongodb.JMXConnectionPoolListener.class
connectionProvider.connectionFactory.getClass().getName() == com.mongodb.DBPortFactory.class
connectionProvider.closed == false
connectionProvider.hasWorked == false
mongo._options.description == null
mongo._options.connectionsPerHost == 10
mongo._options.threadsAllowedToBlockForConnectionMultiplier == 5
mongo._options.maxWaitTime == 120000
mongo._options.connectTimeout == 10000
mongo._options.socketTimeout == 0
mongo._options.socketKeepAlive == false
mongo._options.autoConnectRetry == false
mongo._options.maxAutoConnectRetryTime == 0
mongo._options.slaveOk == false
mongo._options.readPreference == null
mongo._options.dbDecoderFactory has only one value
mongo._options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
mongo._options.dbEncoderFactory has only one value
mongo._options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
mongo._options.safe == false
mongo._options.w == 0
mongo._options.wtimeout == 0
mongo._options.fsync == false
mongo._options.j == false
mongo._options.socketFactory has only one value
mongo._options.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
mongo._options.cursorFinalizerEnabled == true
mongo._options.writeConcern == null
mongo._options.alwaysUseMBeans == false
mongo._options.minConnectionsPerHost == 0
mongo._options.maxConnectionIdleTime == 0
mongo._options.maxConnectionLifeTime == 0
mongo._options.heartbeatFrequencyMS == 5000
mongo._options.heartbeatConnectRetryFrequencyMS == 10
mongo._options.heartbeatConnectTimeoutMS == 20000
mongo._options.heartbeatReadTimeoutMS == 20000
mongo._options.acceptableLatencyDifferenceMS == 15
mongo._options.heartbeatThreadCount == 0
mongo._options.requiredReplicaSetName == null
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID has only one value
mongo._connector._closed == false
mongo._connector.cluster == null
mongo._connector.connectionMode has only one value
mongo._connector.type has only one value
mongo._connector.mongosHAServerSelector == null
mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
mongo._concern has only one value
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
mongo._concern._w has only one value
mongo._concern._w.getClass().getName() == java.lang.Integer.class
mongo._concern._wtimeout == 0
mongo._concern._fsync == false
mongo._concern._j == false
mongo._concern._continueOnError == false
mongo._readPref has only one value
mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY has only one value
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY_PREFERRED has only one value
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
mongo._netOptions._parent == null
mongo._netOptions._options == 0
mongo._netOptions._hasOptions == false
mongo._cleaner == null
mongo._authority.type has only one value
mongo._authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
mongo._authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
mongo._authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
mongo._bufferPool._max == 1000
mongo._bufferPool._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
size(mongo._authority.serverAddresses[]) == 1
===========================================================================
com.mongodb.DefaultServer.addChangeListener(com.mongodb.ChangeListener):::ENTER
this.serverMonitor.mongo._cleaner == null
changeListener.getClass().getName() == com.mongodb.SingleServerCluster$1.class
===========================================================================
com.mongodb.DefaultServer.addChangeListener(com.mongodb.ChangeListener):::EXIT
this.serverAddress == orig(this.serverAddress)
this.serverAddress._host == orig(this.serverAddress._host)
this.serverAddress._host.toString == orig(this.serverAddress._host.toString)
this.serverAddress._port == orig(this.serverAddress._port)
this.serverMonitor == orig(this.serverMonitor)
com.mongodb.ServerMonitor.LOGGER == orig(com.mongodb.ServerMonitor.LOGGER)
this.serverMonitor.serverAddress == orig(this.serverMonitor.serverAddress)
this.serverMonitor.serverAddress._host == orig(this.serverMonitor.serverAddress._host)
this.serverMonitor.serverAddress._host.toString == orig(this.serverMonitor.serverAddress._host.toString)
this.serverMonitor.serverAddress._port == orig(this.serverMonitor.serverAddress._port)
this.serverMonitor.serverStateListener == orig(this.serverMonitor.serverStateListener)
this.serverMonitor.serverStateListener.getClass().getName() == orig(this.serverMonitor.serverStateListener.getClass().getName())
this.serverMonitor.socketSettings == orig(this.serverMonitor.socketSettings)
this.serverMonitor.socketSettings.connectTimeoutMS == orig(this.serverMonitor.socketSettings.connectTimeoutMS)
this.serverMonitor.socketSettings.readTimeoutMS == orig(this.serverMonitor.socketSettings.readTimeoutMS)
this.serverMonitor.socketSettings.socketFactory == orig(this.serverMonitor.socketSettings.socketFactory)
this.serverMonitor.socketSettings.socketFactory.getClass().getName() == orig(this.serverMonitor.socketSettings.socketFactory.getClass().getName())
this.serverMonitor.settings == orig(this.serverMonitor.settings)
this.serverMonitor.settings.heartbeatFrequencyMS == orig(this.serverMonitor.settings.heartbeatFrequencyMS)
this.serverMonitor.settings.heartbeatConnectRetryFrequencyMS == orig(this.serverMonitor.settings.heartbeatConnectRetryFrequencyMS)
this.serverMonitor.settings.heartbeatSocketSettings == orig(this.serverMonitor.settings.heartbeatSocketSettings)
this.serverMonitor.mongo == orig(this.serverMonitor.mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this.serverMonitor.mongo._options == orig(this.serverMonitor.mongo._options)
this.serverMonitor.mongo._connector == orig(this.serverMonitor.mongo._connector)
this.serverMonitor.mongo._dbs == orig(this.serverMonitor.mongo._dbs)
this.serverMonitor.mongo._dbs.getClass().getName() == orig(this.serverMonitor.mongo._dbs.getClass().getName())
this.serverMonitor.mongo._concern == orig(this.serverMonitor.mongo._concern)
this.serverMonitor.mongo._readPref == orig(this.serverMonitor.mongo._readPref)
this.serverMonitor.mongo._readPref.getClass().getName() == orig(this.serverMonitor.mongo._readPref.getClass().getName())
this.serverMonitor.mongo._netOptions == orig(this.serverMonitor.mongo._netOptions)
this.serverMonitor.mongo._cleaner == orig(this.serverMonitor.mongo._cleaner)
this.serverMonitor.mongo._authority == orig(this.serverMonitor.mongo._authority)
this.serverMonitor.mongo._bufferPool == orig(this.serverMonitor.mongo._bufferPool)
this.serverMonitor.mongo._bufferPool.getClass().getName() == orig(this.serverMonitor.mongo._bufferPool.getClass().getName())
this.serverMonitor.count == orig(this.serverMonitor.count)
this.serverMonitor.elapsedNanosSum == orig(this.serverMonitor.elapsedNanosSum)
this.serverMonitor.serverDescription == orig(this.serverMonitor.serverDescription)
this.serverMonitor.serverDescription.address == orig(this.serverMonitor.serverDescription.address)
this.serverMonitor.serverDescription.type == orig(this.serverMonitor.serverDescription.type)
this.serverMonitor.serverDescription.type.getClass().getName() == orig(this.serverMonitor.serverDescription.type.getClass().getName())
this.serverMonitor.serverDescription.hosts == orig(this.serverMonitor.serverDescription.hosts)
this.serverMonitor.serverDescription.hosts.getClass().getName() == orig(this.serverMonitor.serverDescription.hosts.getClass().getName())
this.serverMonitor.serverDescription.passives == orig(this.serverMonitor.serverDescription.passives)
this.serverMonitor.serverDescription.passives.getClass().getName() == orig(this.serverMonitor.serverDescription.passives.getClass().getName())
this.serverMonitor.serverDescription.arbiters == orig(this.serverMonitor.serverDescription.arbiters)
this.serverMonitor.serverDescription.arbiters.getClass().getName() == orig(this.serverMonitor.serverDescription.arbiters.getClass().getName())
this.serverMonitor.serverDescription.primary == orig(this.serverMonitor.serverDescription.primary)
this.serverMonitor.serverDescription.maxDocumentSize == orig(this.serverMonitor.serverDescription.maxDocumentSize)
this.serverMonitor.serverDescription.maxWriteBatchSize == orig(this.serverMonitor.serverDescription.maxWriteBatchSize)
this.serverMonitor.serverDescription.maxMessageSize == orig(this.serverMonitor.serverDescription.maxMessageSize)
this.serverMonitor.serverDescription.tags == orig(this.serverMonitor.serverDescription.tags)
this.serverMonitor.serverDescription.setName == orig(this.serverMonitor.serverDescription.setName)
this.serverMonitor.serverDescription.averageLatencyNanos == orig(this.serverMonitor.serverDescription.averageLatencyNanos)
this.serverMonitor.serverDescription.ok == orig(this.serverMonitor.serverDescription.ok)
this.serverMonitor.serverDescription.state == orig(this.serverMonitor.serverDescription.state)
this.serverMonitor.serverDescription.version == orig(this.serverMonitor.serverDescription.version)
this.serverMonitor.serverDescription.minWireVersion == orig(this.serverMonitor.serverDescription.minWireVersion)
this.serverMonitor.serverDescription.maxWireVersion == orig(this.serverMonitor.serverDescription.maxWireVersion)
this.serverMonitor.isClosed == orig(this.serverMonitor.isClosed)
this.serverMonitor.connection == orig(this.serverMonitor.connection)
com.mongodb.DBPort._rootLogger == orig(com.mongodb.DBPort._rootLogger)
this.serverMonitor.monitorThread == orig(this.serverMonitor.monitorThread)
this.serverMonitor.lock == orig(this.serverMonitor.lock)
this.serverMonitor.lock.getClass().getName() == orig(this.serverMonitor.lock.getClass().getName())
this.serverMonitor.condition == orig(this.serverMonitor.condition)
this.serverMonitor.condition.getClass().getName() == orig(this.serverMonitor.condition.getClass().getName())
this.connectionProvider == orig(this.connectionProvider)
com.mongodb.PooledConnectionProvider.LOGGER == orig(com.mongodb.PooledConnectionProvider.LOGGER)
this.connectionProvider.pool == orig(this.connectionProvider.pool)
this.connectionProvider.pool.maxSize == orig(this.connectionProvider.pool.maxSize)
this.connectionProvider.pool.itemFactory == orig(this.connectionProvider.pool.itemFactory)
this.connectionProvider.pool.itemFactory.getClass().getName() == orig(this.connectionProvider.pool.itemFactory.getClass().getName())
this.connectionProvider.pool.available == orig(this.connectionProvider.pool.available)
this.connectionProvider.pool.available.getClass().getName() == orig(this.connectionProvider.pool.available.getClass().getName())
this.connectionProvider.pool.permits == orig(this.connectionProvider.pool.permits)
this.connectionProvider.pool.closed == orig(this.connectionProvider.pool.closed)
this.connectionProvider.settings == orig(this.connectionProvider.settings)
this.connectionProvider.settings.maxSize == orig(this.connectionProvider.settings.maxSize)
this.connectionProvider.settings.minSize == orig(this.connectionProvider.settings.minSize)
this.connectionProvider.settings.maxWaitQueueSize == orig(this.connectionProvider.settings.maxWaitQueueSize)
this.connectionProvider.settings.maxWaitTimeMS == orig(this.connectionProvider.settings.maxWaitTimeMS)
this.connectionProvider.settings.maxConnectionLifeTimeMS == orig(this.connectionProvider.settings.maxConnectionLifeTimeMS)
this.connectionProvider.settings.maxConnectionIdleTimeMS == orig(this.connectionProvider.settings.maxConnectionIdleTimeMS)
this.connectionProvider.settings.maintenanceInitialDelayMS == orig(this.connectionProvider.settings.maintenanceInitialDelayMS)
this.connectionProvider.settings.maintenanceFrequencyMS == orig(this.connectionProvider.settings.maintenanceFrequencyMS)
this.connectionProvider.waitQueueSize == orig(this.connectionProvider.waitQueueSize)
this.connectionProvider.generation == orig(this.connectionProvider.generation)
this.connectionProvider.sizeMaintenanceTimer == orig(this.connectionProvider.sizeMaintenanceTimer)
this.connectionProvider.clusterId == orig(this.connectionProvider.clusterId)
this.connectionProvider.clusterId.toString == orig(this.connectionProvider.clusterId.toString)
this.connectionProvider.serverAddress == orig(this.connectionProvider.serverAddress)
this.connectionProvider.serverAddress._host == orig(this.connectionProvider.serverAddress._host)
this.connectionProvider.serverAddress._host.toString == orig(this.connectionProvider.serverAddress._host.toString)
this.connectionProvider.serverAddress._port == orig(this.connectionProvider.serverAddress._port)
this.connectionProvider.maintenanceTask == orig(this.connectionProvider.maintenanceTask)
this.connectionProvider.connectionPoolListener == orig(this.connectionProvider.connectionPoolListener)
this.connectionProvider.connectionPoolListener.getClass().getName() == orig(this.connectionProvider.connectionPoolListener.getClass().getName())
this.connectionProvider.connectionFactory == orig(this.connectionProvider.connectionFactory)
this.connectionProvider.connectionFactory.getClass().getName() == orig(this.connectionProvider.connectionFactory.getClass().getName())
this.connectionProvider.closed == orig(this.connectionProvider.closed)
this.connectionProvider.hasWorked == orig(this.connectionProvider.hasWorked)
this.changeListeners == orig(this.changeListeners)
this.changeListeners.getClass().getName() == orig(this.changeListeners.getClass().getName())
this.serverStateListener == orig(this.serverStateListener)
this.serverStateListener.getClass().getName() == orig(this.serverStateListener.getClass().getName())
this.description == orig(this.description)
this.description.address == orig(this.description.address)
this.description.address._host == orig(this.description.address._host)
this.description.address._host.toString == orig(this.description.address._host.toString)
this.description.address._port == orig(this.description.address._port)
this.description.type == orig(this.description.type)
this.description.type.getClass().getName() == orig(this.description.type.getClass().getName())
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
this.description.hosts == orig(this.description.hosts)
this.description.hosts.getClass().getName() == orig(this.description.hosts.getClass().getName())
this.description.passives == orig(this.description.passives)
this.description.passives.getClass().getName() == orig(this.description.passives.getClass().getName())
this.description.arbiters == orig(this.description.arbiters)
this.description.arbiters.getClass().getName() == orig(this.description.arbiters.getClass().getName())
this.description.primary == orig(this.description.primary)
this.description.maxDocumentSize == orig(this.description.maxDocumentSize)
this.description.maxWriteBatchSize == orig(this.description.maxWriteBatchSize)
this.description.maxMessageSize == orig(this.description.maxMessageSize)
this.description.tags == orig(this.description.tags)
this.description.tags.frozen == orig(this.description.tags.frozen)
this.description.tags.wrapped == orig(this.description.tags.wrapped)
this.description.tags.wrapped.getClass().getName() == orig(this.description.tags.wrapped.getClass().getName())
this.description.setName == orig(this.description.setName)
this.description.averageLatencyNanos == orig(this.description.averageLatencyNanos)
this.description.ok == orig(this.description.ok)
this.description.state == orig(this.description.state)
com.mongodb.ServerConnectionState.Connecting == orig(com.mongodb.ServerConnectionState.Connecting)
com.mongodb.ServerConnectionState.Connected == orig(com.mongodb.ServerConnectionState.Connected)
com.mongodb.ServerConnectionState.$VALUES == orig(com.mongodb.ServerConnectionState.$VALUES)
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == orig(com.mongodb.ServerConnectionState.$VALUES.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES[] == orig(com.mongodb.ServerConnectionState.$VALUES[])
this.description.version == orig(this.description.version)
this.description.version.versionList == orig(this.description.version.versionList)
this.description.version.versionList[] == orig(this.description.version.versionList[])
this.description.version.versionList.getClass().getName() == orig(this.description.version.versionList.getClass().getName())
this.description.minWireVersion == orig(this.description.minWireVersion)
this.description.maxWireVersion == orig(this.description.maxWireVersion)
this.isClosed == orig(this.isClosed)
this.serverMonitor.mongo._cleaner == null
===========================================================================
com.mongodb.DefaultServer.connect():::ENTER
this has only one value
this.serverAddress has only one value
this.serverMonitor has only one value
this.serverMonitor.serverAddress has only one value
this.serverMonitor.serverStateListener has only one value
this.serverMonitor.socketSettings has only one value
this.serverMonitor.settings has only one value
this.serverMonitor.settings.heartbeatSocketSettings has only one value
this.serverMonitor.mongo has only one value
this.serverMonitor.mongo._options has only one value
this.serverMonitor.mongo._connector has only one value
this.serverMonitor.mongo._dbs has only one value
this.serverMonitor.mongo._netOptions has only one value
this.serverMonitor.mongo._cleaner has only one value
this.serverMonitor.mongo._cleaner != null
this.serverMonitor.mongo._authority has only one value
this.serverMonitor.mongo._bufferPool has only one value
this.serverMonitor.serverDescription.address has only one value
this.serverMonitor.monitorThread has only one value
this.serverMonitor.lock has only one value
this.serverMonitor.condition has only one value
this.connectionProvider has only one value
this.connectionProvider.pool has only one value
this.connectionProvider.pool.itemFactory has only one value
this.connectionProvider.pool.available has only one value
this.connectionProvider.pool.permits has only one value
this.connectionProvider.settings has only one value
this.connectionProvider.waitQueueSize has only one value
this.connectionProvider.generation has only one value
this.connectionProvider.clusterId has only one value
this.connectionProvider.clusterId.toString == "2"
this.connectionProvider.serverAddress has only one value
this.connectionProvider.connectionPoolListener has only one value
this.connectionProvider.connectionFactory has only one value
this.changeListeners has only one value
this.serverStateListener has only one value
this.description.address has only one value
===========================================================================
com.mongodb.DefaultServer.connect():::EXIT
this.serverAddress == orig(this.serverAddress)
this.serverAddress._host == orig(this.serverAddress._host)
this.serverAddress._host.toString == orig(this.serverAddress._host.toString)
this.serverAddress._port == orig(this.serverAddress._port)
this.serverMonitor == orig(this.serverMonitor)
com.mongodb.ServerMonitor.LOGGER == orig(com.mongodb.ServerMonitor.LOGGER)
this.serverMonitor.serverAddress == orig(this.serverMonitor.serverAddress)
this.serverMonitor.serverAddress._host == orig(this.serverMonitor.serverAddress._host)
this.serverMonitor.serverAddress._host.toString == orig(this.serverMonitor.serverAddress._host.toString)
this.serverMonitor.serverAddress._port == orig(this.serverMonitor.serverAddress._port)
this.serverMonitor.serverStateListener == orig(this.serverMonitor.serverStateListener)
this.serverMonitor.serverStateListener.getClass().getName() == orig(this.serverMonitor.serverStateListener.getClass().getName())
this.serverMonitor.socketSettings == orig(this.serverMonitor.socketSettings)
this.serverMonitor.socketSettings.connectTimeoutMS == orig(this.serverMonitor.socketSettings.connectTimeoutMS)
this.serverMonitor.socketSettings.readTimeoutMS == orig(this.serverMonitor.socketSettings.readTimeoutMS)
this.serverMonitor.socketSettings.socketFactory == orig(this.serverMonitor.socketSettings.socketFactory)
this.serverMonitor.socketSettings.socketFactory.getClass().getName() == orig(this.serverMonitor.socketSettings.socketFactory.getClass().getName())
this.serverMonitor.settings == orig(this.serverMonitor.settings)
this.serverMonitor.settings.heartbeatFrequencyMS == orig(this.serverMonitor.settings.heartbeatFrequencyMS)
this.serverMonitor.settings.heartbeatConnectRetryFrequencyMS == orig(this.serverMonitor.settings.heartbeatConnectRetryFrequencyMS)
this.serverMonitor.settings.heartbeatSocketSettings == orig(this.serverMonitor.settings.heartbeatSocketSettings)
this.serverMonitor.mongo == orig(this.serverMonitor.mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this.serverMonitor.mongo._options == orig(this.serverMonitor.mongo._options)
this.serverMonitor.mongo._connector == orig(this.serverMonitor.mongo._connector)
this.serverMonitor.mongo._dbs == orig(this.serverMonitor.mongo._dbs)
this.serverMonitor.mongo._dbs.getClass().getName() == orig(this.serverMonitor.mongo._dbs.getClass().getName())
this.serverMonitor.mongo._concern == orig(this.serverMonitor.mongo._concern)
this.serverMonitor.mongo._readPref == orig(this.serverMonitor.mongo._readPref)
this.serverMonitor.mongo._readPref.getClass().getName() == orig(this.serverMonitor.mongo._readPref.getClass().getName())
this.serverMonitor.mongo._netOptions == orig(this.serverMonitor.mongo._netOptions)
this.serverMonitor.mongo._cleaner == orig(this.serverMonitor.mongo._cleaner)
this.serverMonitor.mongo._authority == orig(this.serverMonitor.mongo._authority)
this.serverMonitor.mongo._bufferPool == orig(this.serverMonitor.mongo._bufferPool)
this.serverMonitor.mongo._bufferPool.getClass().getName() == orig(this.serverMonitor.mongo._bufferPool.getClass().getName())
this.serverMonitor.count == orig(this.serverMonitor.count)
this.serverMonitor.elapsedNanosSum == orig(this.serverMonitor.elapsedNanosSum)
this.serverMonitor.serverDescription == orig(this.serverMonitor.serverDescription)
this.serverMonitor.serverDescription.address == orig(this.serverMonitor.serverDescription.address)
this.serverMonitor.serverDescription.type == orig(this.serverMonitor.serverDescription.type)
this.serverMonitor.serverDescription.type.getClass().getName() == orig(this.serverMonitor.serverDescription.type.getClass().getName())
this.serverMonitor.serverDescription.hosts == orig(this.serverMonitor.serverDescription.hosts)
this.serverMonitor.serverDescription.hosts.getClass().getName() == orig(this.serverMonitor.serverDescription.hosts.getClass().getName())
this.serverMonitor.serverDescription.passives == orig(this.serverMonitor.serverDescription.passives)
this.serverMonitor.serverDescription.passives.getClass().getName() == orig(this.serverMonitor.serverDescription.passives.getClass().getName())
this.serverMonitor.serverDescription.arbiters == orig(this.serverMonitor.serverDescription.arbiters)
this.serverMonitor.serverDescription.arbiters.getClass().getName() == orig(this.serverMonitor.serverDescription.arbiters.getClass().getName())
this.serverMonitor.serverDescription.primary == orig(this.serverMonitor.serverDescription.primary)
this.serverMonitor.serverDescription.maxDocumentSize == orig(this.serverMonitor.serverDescription.maxDocumentSize)
this.serverMonitor.serverDescription.maxWriteBatchSize == orig(this.serverMonitor.serverDescription.maxWriteBatchSize)
this.serverMonitor.serverDescription.maxMessageSize == orig(this.serverMonitor.serverDescription.maxMessageSize)
this.serverMonitor.serverDescription.tags == orig(this.serverMonitor.serverDescription.tags)
this.serverMonitor.serverDescription.setName == orig(this.serverMonitor.serverDescription.setName)
this.serverMonitor.serverDescription.averageLatencyNanos == orig(this.serverMonitor.serverDescription.averageLatencyNanos)
this.serverMonitor.serverDescription.ok == orig(this.serverMonitor.serverDescription.ok)
this.serverMonitor.serverDescription.state == orig(this.serverMonitor.serverDescription.state)
this.serverMonitor.serverDescription.version == orig(this.serverMonitor.serverDescription.version)
this.serverMonitor.serverDescription.minWireVersion == orig(this.serverMonitor.serverDescription.minWireVersion)
this.serverMonitor.serverDescription.maxWireVersion == orig(this.serverMonitor.serverDescription.maxWireVersion)
this.serverMonitor.isClosed == orig(this.serverMonitor.isClosed)
this.serverMonitor.connection == orig(this.serverMonitor.connection)
com.mongodb.DBPort._rootLogger == orig(com.mongodb.DBPort._rootLogger)
this.serverMonitor.monitorThread == orig(this.serverMonitor.monitorThread)
this.serverMonitor.lock == orig(this.serverMonitor.lock)
this.serverMonitor.lock.getClass().getName() == orig(this.serverMonitor.lock.getClass().getName())
this.serverMonitor.condition == orig(this.serverMonitor.condition)
this.serverMonitor.condition.getClass().getName() == orig(this.serverMonitor.condition.getClass().getName())
this.connectionProvider == orig(this.connectionProvider)
com.mongodb.PooledConnectionProvider.LOGGER == orig(com.mongodb.PooledConnectionProvider.LOGGER)
this.connectionProvider.pool == orig(this.connectionProvider.pool)
this.connectionProvider.pool.maxSize == orig(this.connectionProvider.pool.maxSize)
this.connectionProvider.pool.itemFactory == orig(this.connectionProvider.pool.itemFactory)
this.connectionProvider.pool.itemFactory.getClass().getName() == orig(this.connectionProvider.pool.itemFactory.getClass().getName())
this.connectionProvider.pool.available == orig(this.connectionProvider.pool.available)
this.connectionProvider.pool.available.getClass().getName() == orig(this.connectionProvider.pool.available.getClass().getName())
this.connectionProvider.pool.permits == orig(this.connectionProvider.pool.permits)
this.connectionProvider.pool.closed == orig(this.connectionProvider.pool.closed)
this.connectionProvider.settings == orig(this.connectionProvider.settings)
this.connectionProvider.settings.maxSize == orig(this.connectionProvider.settings.maxSize)
this.connectionProvider.settings.minSize == orig(this.connectionProvider.settings.minSize)
this.connectionProvider.settings.maxWaitQueueSize == orig(this.connectionProvider.settings.maxWaitQueueSize)
this.connectionProvider.settings.maxWaitTimeMS == orig(this.connectionProvider.settings.maxWaitTimeMS)
this.connectionProvider.settings.maxConnectionLifeTimeMS == orig(this.connectionProvider.settings.maxConnectionLifeTimeMS)
this.connectionProvider.settings.maxConnectionIdleTimeMS == orig(this.connectionProvider.settings.maxConnectionIdleTimeMS)
this.connectionProvider.settings.maintenanceInitialDelayMS == orig(this.connectionProvider.settings.maintenanceInitialDelayMS)
this.connectionProvider.settings.maintenanceFrequencyMS == orig(this.connectionProvider.settings.maintenanceFrequencyMS)
this.connectionProvider.waitQueueSize == orig(this.connectionProvider.waitQueueSize)
this.connectionProvider.generation == orig(this.connectionProvider.generation)
this.connectionProvider.sizeMaintenanceTimer == orig(this.connectionProvider.sizeMaintenanceTimer)
this.connectionProvider.clusterId == orig(this.connectionProvider.clusterId)
this.connectionProvider.clusterId.toString == orig(this.connectionProvider.clusterId.toString)
this.connectionProvider.serverAddress == orig(this.connectionProvider.serverAddress)
this.connectionProvider.serverAddress._host == orig(this.connectionProvider.serverAddress._host)
this.connectionProvider.serverAddress._host.toString == orig(this.connectionProvider.serverAddress._host.toString)
this.connectionProvider.serverAddress._port == orig(this.connectionProvider.serverAddress._port)
this.connectionProvider.maintenanceTask == orig(this.connectionProvider.maintenanceTask)
this.connectionProvider.connectionPoolListener == orig(this.connectionProvider.connectionPoolListener)
this.connectionProvider.connectionPoolListener.getClass().getName() == orig(this.connectionProvider.connectionPoolListener.getClass().getName())
this.connectionProvider.connectionFactory == orig(this.connectionProvider.connectionFactory)
this.connectionProvider.connectionFactory.getClass().getName() == orig(this.connectionProvider.connectionFactory.getClass().getName())
this.connectionProvider.closed == orig(this.connectionProvider.closed)
this.connectionProvider.hasWorked == orig(this.connectionProvider.hasWorked)
this.changeListeners == orig(this.changeListeners)
this.changeListeners.getClass().getName() == orig(this.changeListeners.getClass().getName())
this.serverStateListener == orig(this.serverStateListener)
this.serverStateListener.getClass().getName() == orig(this.serverStateListener.getClass().getName())
this.description == orig(this.description)
this.description.address == orig(this.description.address)
this.description.address._host == orig(this.description.address._host)
this.description.address._host.toString == orig(this.description.address._host.toString)
this.description.address._port == orig(this.description.address._port)
this.description.type == orig(this.description.type)
this.description.type.getClass().getName() == orig(this.description.type.getClass().getName())
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
this.description.hosts == orig(this.description.hosts)
this.description.hosts.getClass().getName() == orig(this.description.hosts.getClass().getName())
this.description.passives == orig(this.description.passives)
this.description.passives.getClass().getName() == orig(this.description.passives.getClass().getName())
this.description.arbiters == orig(this.description.arbiters)
this.description.arbiters.getClass().getName() == orig(this.description.arbiters.getClass().getName())
this.description.primary == orig(this.description.primary)
this.description.maxDocumentSize == orig(this.description.maxDocumentSize)
this.description.maxWriteBatchSize == orig(this.description.maxWriteBatchSize)
this.description.maxMessageSize == orig(this.description.maxMessageSize)
this.description.tags == orig(this.description.tags)
this.description.tags.frozen == orig(this.description.tags.frozen)
this.description.tags.wrapped == orig(this.description.tags.wrapped)
this.description.tags.wrapped.getClass().getName() == orig(this.description.tags.wrapped.getClass().getName())
this.description.setName == orig(this.description.setName)
this.description.averageLatencyNanos == orig(this.description.averageLatencyNanos)
this.description.ok == orig(this.description.ok)
this.description.state == orig(this.description.state)
com.mongodb.ServerConnectionState.Connecting == orig(com.mongodb.ServerConnectionState.Connecting)
com.mongodb.ServerConnectionState.Connected == orig(com.mongodb.ServerConnectionState.Connected)
com.mongodb.ServerConnectionState.$VALUES == orig(com.mongodb.ServerConnectionState.$VALUES)
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == orig(com.mongodb.ServerConnectionState.$VALUES.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES[] == orig(com.mongodb.ServerConnectionState.$VALUES[])
this.description.version == orig(this.description.version)
this.description.version.versionList == orig(this.description.version.versionList)
this.description.version.versionList[] == orig(this.description.version.versionList[])
this.description.version.versionList.getClass().getName() == orig(this.description.version.versionList.getClass().getName())
this.description.minWireVersion == orig(this.description.minWireVersion)
this.description.maxWireVersion == orig(this.description.maxWireVersion)
this.isClosed == orig(this.isClosed)
this.serverAddress has only one value
this.serverMonitor has only one value
this.serverMonitor.serverAddress has only one value
this.serverMonitor.serverStateListener has only one value
this.serverMonitor.socketSettings has only one value
this.serverMonitor.settings has only one value
this.serverMonitor.settings.heartbeatSocketSettings has only one value
this.serverMonitor.mongo has only one value
this.serverMonitor.mongo._options has only one value
this.serverMonitor.mongo._connector has only one value
this.serverMonitor.mongo._dbs has only one value
this.serverMonitor.mongo._netOptions has only one value
this.serverMonitor.mongo._cleaner has only one value
this.serverMonitor.mongo._cleaner != null
this.serverMonitor.mongo._authority has only one value
this.serverMonitor.mongo._bufferPool has only one value
this.serverMonitor.serverDescription.address has only one value
this.serverMonitor.monitorThread has only one value
this.serverMonitor.lock has only one value
this.serverMonitor.condition has only one value
this.connectionProvider has only one value
this.connectionProvider.pool has only one value
this.connectionProvider.pool.itemFactory has only one value
this.connectionProvider.pool.available has only one value
this.connectionProvider.pool.permits has only one value
this.connectionProvider.settings has only one value
this.connectionProvider.waitQueueSize has only one value
this.connectionProvider.generation has only one value
this.connectionProvider.clusterId has only one value
this.connectionProvider.clusterId.toString == "2"
this.connectionProvider.serverAddress has only one value
this.connectionProvider.connectionPoolListener has only one value
this.connectionProvider.connectionFactory has only one value
this.changeListeners has only one value
this.serverStateListener has only one value
this.description.address has only one value
===========================================================================
com.mongodb.DefaultServer.getDescription():::ENTER
this.serverMonitor.mongo._cleaner == null
===========================================================================
com.mongodb.DefaultServer.getDescription():::EXIT
this.serverAddress == orig(this.serverAddress)
this.serverAddress._host == orig(this.serverAddress._host)
this.serverAddress._host.toString == orig(this.serverAddress._host.toString)
this.serverAddress._port == orig(this.serverAddress._port)
this.serverMonitor == orig(this.serverMonitor)
com.mongodb.ServerMonitor.LOGGER == orig(com.mongodb.ServerMonitor.LOGGER)
this.serverMonitor.serverAddress == orig(this.serverMonitor.serverAddress)
this.serverMonitor.serverAddress._host == orig(this.serverMonitor.serverAddress._host)
this.serverMonitor.serverAddress._host.toString == orig(this.serverMonitor.serverAddress._host.toString)
this.serverMonitor.serverAddress._port == orig(this.serverMonitor.serverAddress._port)
this.serverMonitor.serverStateListener == orig(this.serverMonitor.serverStateListener)
this.serverMonitor.serverStateListener.getClass().getName() == orig(this.serverMonitor.serverStateListener.getClass().getName())
this.serverMonitor.socketSettings == orig(this.serverMonitor.socketSettings)
this.serverMonitor.socketSettings.connectTimeoutMS == orig(this.serverMonitor.socketSettings.connectTimeoutMS)
this.serverMonitor.socketSettings.readTimeoutMS == orig(this.serverMonitor.socketSettings.readTimeoutMS)
this.serverMonitor.socketSettings.socketFactory == orig(this.serverMonitor.socketSettings.socketFactory)
this.serverMonitor.socketSettings.socketFactory.getClass().getName() == orig(this.serverMonitor.socketSettings.socketFactory.getClass().getName())
this.serverMonitor.settings == orig(this.serverMonitor.settings)
this.serverMonitor.settings.heartbeatFrequencyMS == orig(this.serverMonitor.settings.heartbeatFrequencyMS)
this.serverMonitor.settings.heartbeatConnectRetryFrequencyMS == orig(this.serverMonitor.settings.heartbeatConnectRetryFrequencyMS)
this.serverMonitor.settings.heartbeatSocketSettings == orig(this.serverMonitor.settings.heartbeatSocketSettings)
this.serverMonitor.mongo == orig(this.serverMonitor.mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this.serverMonitor.mongo._options == orig(this.serverMonitor.mongo._options)
this.serverMonitor.mongo._connector == orig(this.serverMonitor.mongo._connector)
this.serverMonitor.mongo._dbs == orig(this.serverMonitor.mongo._dbs)
this.serverMonitor.mongo._dbs.getClass().getName() == orig(this.serverMonitor.mongo._dbs.getClass().getName())
this.serverMonitor.mongo._concern == orig(this.serverMonitor.mongo._concern)
this.serverMonitor.mongo._readPref == orig(this.serverMonitor.mongo._readPref)
this.serverMonitor.mongo._readPref.getClass().getName() == orig(this.serverMonitor.mongo._readPref.getClass().getName())
this.serverMonitor.mongo._netOptions == orig(this.serverMonitor.mongo._netOptions)
this.serverMonitor.mongo._cleaner == orig(this.serverMonitor.mongo._cleaner)
this.serverMonitor.mongo._authority == orig(this.serverMonitor.mongo._authority)
this.serverMonitor.mongo._bufferPool == orig(this.serverMonitor.mongo._bufferPool)
this.serverMonitor.mongo._bufferPool.getClass().getName() == orig(this.serverMonitor.mongo._bufferPool.getClass().getName())
this.serverMonitor.count == orig(this.serverMonitor.count)
this.serverMonitor.elapsedNanosSum == orig(this.serverMonitor.elapsedNanosSum)
this.serverMonitor.serverDescription == orig(this.serverMonitor.serverDescription)
this.serverMonitor.serverDescription.address == orig(this.serverMonitor.serverDescription.address)
this.serverMonitor.serverDescription.type == orig(this.serverMonitor.serverDescription.type)
this.serverMonitor.serverDescription.type.getClass().getName() == orig(this.serverMonitor.serverDescription.type.getClass().getName())
this.serverMonitor.serverDescription.hosts == orig(this.serverMonitor.serverDescription.hosts)
this.serverMonitor.serverDescription.hosts.getClass().getName() == orig(this.serverMonitor.serverDescription.hosts.getClass().getName())
this.serverMonitor.serverDescription.passives == orig(this.serverMonitor.serverDescription.passives)
this.serverMonitor.serverDescription.passives.getClass().getName() == orig(this.serverMonitor.serverDescription.passives.getClass().getName())
this.serverMonitor.serverDescription.arbiters == orig(this.serverMonitor.serverDescription.arbiters)
this.serverMonitor.serverDescription.arbiters.getClass().getName() == orig(this.serverMonitor.serverDescription.arbiters.getClass().getName())
this.serverMonitor.serverDescription.primary == orig(this.serverMonitor.serverDescription.primary)
this.serverMonitor.serverDescription.maxDocumentSize == orig(this.serverMonitor.serverDescription.maxDocumentSize)
this.serverMonitor.serverDescription.maxWriteBatchSize == orig(this.serverMonitor.serverDescription.maxWriteBatchSize)
this.serverMonitor.serverDescription.maxMessageSize == orig(this.serverMonitor.serverDescription.maxMessageSize)
this.serverMonitor.serverDescription.tags == orig(this.serverMonitor.serverDescription.tags)
this.serverMonitor.serverDescription.setName == orig(this.serverMonitor.serverDescription.setName)
this.serverMonitor.serverDescription.averageLatencyNanos == orig(this.serverMonitor.serverDescription.averageLatencyNanos)
this.serverMonitor.serverDescription.ok == orig(this.serverMonitor.serverDescription.ok)
this.serverMonitor.serverDescription.state == orig(this.serverMonitor.serverDescription.state)
this.serverMonitor.serverDescription.version == orig(this.serverMonitor.serverDescription.version)
this.serverMonitor.serverDescription.minWireVersion == orig(this.serverMonitor.serverDescription.minWireVersion)
this.serverMonitor.serverDescription.maxWireVersion == orig(this.serverMonitor.serverDescription.maxWireVersion)
this.serverMonitor.isClosed == orig(this.serverMonitor.isClosed)
this.serverMonitor.connection == orig(this.serverMonitor.connection)
com.mongodb.DBPort._rootLogger == orig(com.mongodb.DBPort._rootLogger)
this.serverMonitor.monitorThread == orig(this.serverMonitor.monitorThread)
this.serverMonitor.lock == orig(this.serverMonitor.lock)
this.serverMonitor.lock.getClass().getName() == orig(this.serverMonitor.lock.getClass().getName())
this.serverMonitor.condition == orig(this.serverMonitor.condition)
this.serverMonitor.condition.getClass().getName() == orig(this.serverMonitor.condition.getClass().getName())
this.connectionProvider == orig(this.connectionProvider)
com.mongodb.PooledConnectionProvider.LOGGER == orig(com.mongodb.PooledConnectionProvider.LOGGER)
this.connectionProvider.pool == orig(this.connectionProvider.pool)
this.connectionProvider.pool.maxSize == orig(this.connectionProvider.pool.maxSize)
this.connectionProvider.pool.itemFactory == orig(this.connectionProvider.pool.itemFactory)
this.connectionProvider.pool.itemFactory.getClass().getName() == orig(this.connectionProvider.pool.itemFactory.getClass().getName())
this.connectionProvider.pool.available == orig(this.connectionProvider.pool.available)
this.connectionProvider.pool.available.getClass().getName() == orig(this.connectionProvider.pool.available.getClass().getName())
this.connectionProvider.pool.permits == orig(this.connectionProvider.pool.permits)
this.connectionProvider.pool.closed == orig(this.connectionProvider.pool.closed)
this.connectionProvider.settings == orig(this.connectionProvider.settings)
this.connectionProvider.settings.maxSize == orig(this.connectionProvider.settings.maxSize)
this.connectionProvider.settings.minSize == orig(this.connectionProvider.settings.minSize)
this.connectionProvider.settings.maxWaitQueueSize == orig(this.connectionProvider.settings.maxWaitQueueSize)
this.connectionProvider.settings.maxWaitTimeMS == orig(this.connectionProvider.settings.maxWaitTimeMS)
this.connectionProvider.settings.maxConnectionLifeTimeMS == orig(this.connectionProvider.settings.maxConnectionLifeTimeMS)
this.connectionProvider.settings.maxConnectionIdleTimeMS == orig(this.connectionProvider.settings.maxConnectionIdleTimeMS)
this.connectionProvider.settings.maintenanceInitialDelayMS == orig(this.connectionProvider.settings.maintenanceInitialDelayMS)
this.connectionProvider.settings.maintenanceFrequencyMS == orig(this.connectionProvider.settings.maintenanceFrequencyMS)
this.connectionProvider.waitQueueSize == orig(this.connectionProvider.waitQueueSize)
this.connectionProvider.generation == orig(this.connectionProvider.generation)
this.connectionProvider.sizeMaintenanceTimer == orig(this.connectionProvider.sizeMaintenanceTimer)
this.connectionProvider.clusterId == orig(this.connectionProvider.clusterId)
this.connectionProvider.clusterId.toString == orig(this.connectionProvider.clusterId.toString)
this.connectionProvider.serverAddress == orig(this.connectionProvider.serverAddress)
this.connectionProvider.serverAddress._host == orig(this.connectionProvider.serverAddress._host)
this.connectionProvider.serverAddress._host.toString == orig(this.connectionProvider.serverAddress._host.toString)
this.connectionProvider.serverAddress._port == orig(this.connectionProvider.serverAddress._port)
this.connectionProvider.maintenanceTask == orig(this.connectionProvider.maintenanceTask)
this.connectionProvider.connectionPoolListener == orig(this.connectionProvider.connectionPoolListener)
this.connectionProvider.connectionPoolListener.getClass().getName() == orig(this.connectionProvider.connectionPoolListener.getClass().getName())
this.connectionProvider.connectionFactory == orig(this.connectionProvider.connectionFactory)
this.connectionProvider.connectionFactory.getClass().getName() == orig(this.connectionProvider.connectionFactory.getClass().getName())
this.connectionProvider.closed == orig(this.connectionProvider.closed)
this.connectionProvider.hasWorked == orig(this.connectionProvider.hasWorked)
this.changeListeners == orig(this.changeListeners)
this.changeListeners.getClass().getName() == orig(this.changeListeners.getClass().getName())
this.serverStateListener == orig(this.serverStateListener)
this.serverStateListener.getClass().getName() == orig(this.serverStateListener.getClass().getName())
this.description == orig(this.description)
this.description.address == orig(this.description.address)
this.description.address._host == orig(this.description.address._host)
this.description.address._host.toString == orig(this.description.address._host.toString)
this.description.address._port == orig(this.description.address._port)
this.description.type == orig(this.description.type)
this.description.type.getClass().getName() == orig(this.description.type.getClass().getName())
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
this.description.hosts == orig(this.description.hosts)
this.description.hosts.getClass().getName() == orig(this.description.hosts.getClass().getName())
this.description.passives == orig(this.description.passives)
this.description.passives.getClass().getName() == orig(this.description.passives.getClass().getName())
this.description.arbiters == orig(this.description.arbiters)
this.description.arbiters.getClass().getName() == orig(this.description.arbiters.getClass().getName())
this.description.primary == orig(this.description.primary)
this.description.maxDocumentSize == orig(this.description.maxDocumentSize)
this.description.maxWriteBatchSize == orig(this.description.maxWriteBatchSize)
this.description.maxMessageSize == orig(this.description.maxMessageSize)
this.description.tags == orig(this.description.tags)
this.description.tags.frozen == orig(this.description.tags.frozen)
this.description.tags.wrapped == orig(this.description.tags.wrapped)
this.description.tags.wrapped.getClass().getName() == orig(this.description.tags.wrapped.getClass().getName())
this.description.setName == orig(this.description.setName)
this.description.averageLatencyNanos == orig(this.description.averageLatencyNanos)
this.description.ok == orig(this.description.ok)
this.description.state == orig(this.description.state)
com.mongodb.ServerConnectionState.Connecting == orig(com.mongodb.ServerConnectionState.Connecting)
com.mongodb.ServerConnectionState.Connected == orig(com.mongodb.ServerConnectionState.Connected)
com.mongodb.ServerConnectionState.$VALUES == orig(com.mongodb.ServerConnectionState.$VALUES)
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == orig(com.mongodb.ServerConnectionState.$VALUES.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES[] == orig(com.mongodb.ServerConnectionState.$VALUES[])
this.description.version == orig(this.description.version)
this.description.version.versionList == orig(this.description.version.versionList)
this.description.version.versionList[] == orig(this.description.version.versionList[])
this.description.version.versionList.getClass().getName() == orig(this.description.version.versionList.getClass().getName())
this.description.minWireVersion == orig(this.description.minWireVersion)
this.description.maxWireVersion == orig(this.description.maxWireVersion)
this.isClosed == orig(this.isClosed)
this.serverMonitor.mongo._cleaner == null
return.address._host has only one value
return.address._host.toString == "localhost"
return.address._port == 27017
return.type has only one value
return.type.getClass().getName() == com.mongodb.ServerType$8.class
return.hosts has only one value
return.hosts.getClass().getName() == java.util.Collections$EmptySet.class
return.passives has only one value
return.passives.getClass().getName() == java.util.Collections$EmptySet.class
return.arbiters has only one value
return.arbiters.getClass().getName() == java.util.Collections$EmptySet.class
return.primary == null
return.maxDocumentSize == 16777216
return.maxWriteBatchSize == 512
return.maxMessageSize == 33554432
return.tags.frozen == true
return.tags.wrapped.getClass().getName() == java.util.HashMap.class
return.setName == null
return.averageLatencyNanos == 0
return.ok == false
return.state has only one value
return.version.versionList[] contains no nulls and has only one value, of length 3
return.version.versionList[] elements has only one value
return.version.versionList[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
return.version.versionList[].getClass().getName() elements == java.lang.Integer.class
return.version.versionList.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
return.minWireVersion == 0
return.maxWireVersion == 0
size(return.version.versionList[]) == 3
===========================================================================
com.mongodb.DefaultServer.isClosed():::ENTER
this.serverMonitor.mongo._cleaner == null
===========================================================================
com.mongodb.DefaultServer.isClosed():::EXIT
this.serverAddress == orig(this.serverAddress)
this.serverAddress._host == orig(this.serverAddress._host)
this.serverAddress._host.toString == orig(this.serverAddress._host.toString)
this.serverAddress._port == orig(this.serverAddress._port)
this.serverMonitor == orig(this.serverMonitor)
com.mongodb.ServerMonitor.LOGGER == orig(com.mongodb.ServerMonitor.LOGGER)
this.serverMonitor.serverAddress == orig(this.serverMonitor.serverAddress)
this.serverMonitor.serverAddress._host == orig(this.serverMonitor.serverAddress._host)
this.serverMonitor.serverAddress._host.toString == orig(this.serverMonitor.serverAddress._host.toString)
this.serverMonitor.serverAddress._port == orig(this.serverMonitor.serverAddress._port)
this.serverMonitor.serverStateListener == orig(this.serverMonitor.serverStateListener)
this.serverMonitor.serverStateListener.getClass().getName() == orig(this.serverMonitor.serverStateListener.getClass().getName())
this.serverMonitor.socketSettings == orig(this.serverMonitor.socketSettings)
this.serverMonitor.socketSettings.connectTimeoutMS == orig(this.serverMonitor.socketSettings.connectTimeoutMS)
this.serverMonitor.socketSettings.readTimeoutMS == orig(this.serverMonitor.socketSettings.readTimeoutMS)
this.serverMonitor.socketSettings.socketFactory == orig(this.serverMonitor.socketSettings.socketFactory)
this.serverMonitor.socketSettings.socketFactory.getClass().getName() == orig(this.serverMonitor.socketSettings.socketFactory.getClass().getName())
this.serverMonitor.settings == orig(this.serverMonitor.settings)
this.serverMonitor.settings.heartbeatFrequencyMS == orig(this.serverMonitor.settings.heartbeatFrequencyMS)
this.serverMonitor.settings.heartbeatConnectRetryFrequencyMS == orig(this.serverMonitor.settings.heartbeatConnectRetryFrequencyMS)
this.serverMonitor.settings.heartbeatSocketSettings == orig(this.serverMonitor.settings.heartbeatSocketSettings)
this.serverMonitor.mongo == orig(this.serverMonitor.mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this.serverMonitor.mongo._options == orig(this.serverMonitor.mongo._options)
this.serverMonitor.mongo._connector == orig(this.serverMonitor.mongo._connector)
this.serverMonitor.mongo._dbs == orig(this.serverMonitor.mongo._dbs)
this.serverMonitor.mongo._dbs.getClass().getName() == orig(this.serverMonitor.mongo._dbs.getClass().getName())
this.serverMonitor.mongo._concern == orig(this.serverMonitor.mongo._concern)
this.serverMonitor.mongo._readPref == orig(this.serverMonitor.mongo._readPref)
this.serverMonitor.mongo._readPref.getClass().getName() == orig(this.serverMonitor.mongo._readPref.getClass().getName())
this.serverMonitor.mongo._netOptions == orig(this.serverMonitor.mongo._netOptions)
this.serverMonitor.mongo._cleaner == orig(this.serverMonitor.mongo._cleaner)
this.serverMonitor.mongo._authority == orig(this.serverMonitor.mongo._authority)
this.serverMonitor.mongo._bufferPool == orig(this.serverMonitor.mongo._bufferPool)
this.serverMonitor.mongo._bufferPool.getClass().getName() == orig(this.serverMonitor.mongo._bufferPool.getClass().getName())
this.serverMonitor.count == orig(this.serverMonitor.count)
this.serverMonitor.elapsedNanosSum == orig(this.serverMonitor.elapsedNanosSum)
this.serverMonitor.serverDescription == orig(this.serverMonitor.serverDescription)
this.serverMonitor.serverDescription.address == orig(this.serverMonitor.serverDescription.address)
this.serverMonitor.serverDescription.type == orig(this.serverMonitor.serverDescription.type)
this.serverMonitor.serverDescription.type.getClass().getName() == orig(this.serverMonitor.serverDescription.type.getClass().getName())
this.serverMonitor.serverDescription.hosts == orig(this.serverMonitor.serverDescription.hosts)
this.serverMonitor.serverDescription.hosts.getClass().getName() == orig(this.serverMonitor.serverDescription.hosts.getClass().getName())
this.serverMonitor.serverDescription.passives == orig(this.serverMonitor.serverDescription.passives)
this.serverMonitor.serverDescription.passives.getClass().getName() == orig(this.serverMonitor.serverDescription.passives.getClass().getName())
this.serverMonitor.serverDescription.arbiters == orig(this.serverMonitor.serverDescription.arbiters)
this.serverMonitor.serverDescription.arbiters.getClass().getName() == orig(this.serverMonitor.serverDescription.arbiters.getClass().getName())
this.serverMonitor.serverDescription.primary == orig(this.serverMonitor.serverDescription.primary)
this.serverMonitor.serverDescription.maxDocumentSize == orig(this.serverMonitor.serverDescription.maxDocumentSize)
this.serverMonitor.serverDescription.maxWriteBatchSize == orig(this.serverMonitor.serverDescription.maxWriteBatchSize)
this.serverMonitor.serverDescription.maxMessageSize == orig(this.serverMonitor.serverDescription.maxMessageSize)
this.serverMonitor.serverDescription.tags == orig(this.serverMonitor.serverDescription.tags)
this.serverMonitor.serverDescription.setName == orig(this.serverMonitor.serverDescription.setName)
this.serverMonitor.serverDescription.averageLatencyNanos == orig(this.serverMonitor.serverDescription.averageLatencyNanos)
this.serverMonitor.serverDescription.ok == orig(this.serverMonitor.serverDescription.ok)
this.serverMonitor.serverDescription.state == orig(this.serverMonitor.serverDescription.state)
this.serverMonitor.serverDescription.version == orig(this.serverMonitor.serverDescription.version)
this.serverMonitor.serverDescription.minWireVersion == orig(this.serverMonitor.serverDescription.minWireVersion)
this.serverMonitor.serverDescription.maxWireVersion == orig(this.serverMonitor.serverDescription.maxWireVersion)
this.serverMonitor.isClosed == orig(this.serverMonitor.isClosed)
this.serverMonitor.connection == orig(this.serverMonitor.connection)
com.mongodb.DBPort._rootLogger == orig(com.mongodb.DBPort._rootLogger)
this.serverMonitor.monitorThread == orig(this.serverMonitor.monitorThread)
this.serverMonitor.lock == orig(this.serverMonitor.lock)
this.serverMonitor.lock.getClass().getName() == orig(this.serverMonitor.lock.getClass().getName())
this.serverMonitor.condition == orig(this.serverMonitor.condition)
this.serverMonitor.condition.getClass().getName() == orig(this.serverMonitor.condition.getClass().getName())
this.connectionProvider == orig(this.connectionProvider)
com.mongodb.PooledConnectionProvider.LOGGER == orig(com.mongodb.PooledConnectionProvider.LOGGER)
this.connectionProvider.pool == orig(this.connectionProvider.pool)
this.connectionProvider.pool.maxSize == orig(this.connectionProvider.pool.maxSize)
this.connectionProvider.pool.itemFactory == orig(this.connectionProvider.pool.itemFactory)
this.connectionProvider.pool.itemFactory.getClass().getName() == orig(this.connectionProvider.pool.itemFactory.getClass().getName())
this.connectionProvider.pool.available == orig(this.connectionProvider.pool.available)
this.connectionProvider.pool.available.getClass().getName() == orig(this.connectionProvider.pool.available.getClass().getName())
this.connectionProvider.pool.permits == orig(this.connectionProvider.pool.permits)
this.connectionProvider.pool.closed == orig(this.connectionProvider.pool.closed)
this.connectionProvider.settings == orig(this.connectionProvider.settings)
this.connectionProvider.settings.maxSize == orig(this.connectionProvider.settings.maxSize)
this.connectionProvider.settings.minSize == orig(this.connectionProvider.settings.minSize)
this.connectionProvider.settings.maxWaitQueueSize == orig(this.connectionProvider.settings.maxWaitQueueSize)
this.connectionProvider.settings.maxWaitTimeMS == orig(this.connectionProvider.settings.maxWaitTimeMS)
this.connectionProvider.settings.maxConnectionLifeTimeMS == orig(this.connectionProvider.settings.maxConnectionLifeTimeMS)
this.connectionProvider.settings.maxConnectionIdleTimeMS == orig(this.connectionProvider.settings.maxConnectionIdleTimeMS)
this.connectionProvider.settings.maintenanceInitialDelayMS == orig(this.connectionProvider.settings.maintenanceInitialDelayMS)
this.connectionProvider.settings.maintenanceFrequencyMS == orig(this.connectionProvider.settings.maintenanceFrequencyMS)
this.connectionProvider.waitQueueSize == orig(this.connectionProvider.waitQueueSize)
this.connectionProvider.generation == orig(this.connectionProvider.generation)
this.connectionProvider.sizeMaintenanceTimer == orig(this.connectionProvider.sizeMaintenanceTimer)
this.connectionProvider.clusterId == orig(this.connectionProvider.clusterId)
this.connectionProvider.clusterId.toString == orig(this.connectionProvider.clusterId.toString)
this.connectionProvider.serverAddress == orig(this.connectionProvider.serverAddress)
this.connectionProvider.serverAddress._host == orig(this.connectionProvider.serverAddress._host)
this.connectionProvider.serverAddress._host.toString == orig(this.connectionProvider.serverAddress._host.toString)
this.connectionProvider.serverAddress._port == orig(this.connectionProvider.serverAddress._port)
this.connectionProvider.maintenanceTask == orig(this.connectionProvider.maintenanceTask)
this.connectionProvider.connectionPoolListener == orig(this.connectionProvider.connectionPoolListener)
this.connectionProvider.connectionPoolListener.getClass().getName() == orig(this.connectionProvider.connectionPoolListener.getClass().getName())
this.connectionProvider.connectionFactory == orig(this.connectionProvider.connectionFactory)
this.connectionProvider.connectionFactory.getClass().getName() == orig(this.connectionProvider.connectionFactory.getClass().getName())
this.connectionProvider.closed == orig(this.connectionProvider.closed)
this.connectionProvider.hasWorked == orig(this.connectionProvider.hasWorked)
this.changeListeners == orig(this.changeListeners)
this.changeListeners.getClass().getName() == orig(this.changeListeners.getClass().getName())
this.serverStateListener == orig(this.serverStateListener)
this.serverStateListener.getClass().getName() == orig(this.serverStateListener.getClass().getName())
this.description == orig(this.description)
this.description.address == orig(this.description.address)
this.description.address._host == orig(this.description.address._host)
this.description.address._host.toString == orig(this.description.address._host.toString)
this.description.address._port == orig(this.description.address._port)
this.description.type == orig(this.description.type)
this.description.type.getClass().getName() == orig(this.description.type.getClass().getName())
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
this.description.hosts == orig(this.description.hosts)
this.description.hosts.getClass().getName() == orig(this.description.hosts.getClass().getName())
this.description.passives == orig(this.description.passives)
this.description.passives.getClass().getName() == orig(this.description.passives.getClass().getName())
this.description.arbiters == orig(this.description.arbiters)
this.description.arbiters.getClass().getName() == orig(this.description.arbiters.getClass().getName())
this.description.primary == orig(this.description.primary)
this.description.maxDocumentSize == orig(this.description.maxDocumentSize)
this.description.maxWriteBatchSize == orig(this.description.maxWriteBatchSize)
this.description.maxMessageSize == orig(this.description.maxMessageSize)
this.description.tags == orig(this.description.tags)
this.description.tags.frozen == orig(this.description.tags.frozen)
this.description.tags.wrapped == orig(this.description.tags.wrapped)
this.description.tags.wrapped.getClass().getName() == orig(this.description.tags.wrapped.getClass().getName())
this.description.setName == orig(this.description.setName)
this.description.averageLatencyNanos == orig(this.description.averageLatencyNanos)
this.description.ok == orig(this.description.ok)
this.description.state == orig(this.description.state)
com.mongodb.ServerConnectionState.Connecting == orig(com.mongodb.ServerConnectionState.Connecting)
com.mongodb.ServerConnectionState.Connected == orig(com.mongodb.ServerConnectionState.Connected)
com.mongodb.ServerConnectionState.$VALUES == orig(com.mongodb.ServerConnectionState.$VALUES)
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == orig(com.mongodb.ServerConnectionState.$VALUES.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES[] == orig(com.mongodb.ServerConnectionState.$VALUES[])
this.description.version == orig(this.description.version)
this.description.version.versionList == orig(this.description.version.versionList)
this.description.version.versionList[] == orig(this.description.version.versionList[])
this.description.version.versionList.getClass().getName() == orig(this.description.version.versionList.getClass().getName())
this.description.minWireVersion == orig(this.description.minWireVersion)
this.description.maxWireVersion == orig(this.description.maxWireVersion)
this.isClosed == orig(this.isClosed)
this.serverMonitor.mongo._cleaner == null
return == false
===========================================================================
com.mongodb.DefaultServer.isClosed():::EXIT;condition="not(return == true)"
===========================================================================
com.mongodb.JMXConnectionPoolListener$ClusterIdServerAddressPair:::OBJECT
this.clusterId.toString one of { "1", "2" }
this.serverAddress._host has only one value
this.serverAddress._host.toString == "localhost"
this.serverAddress._port == 27017
===========================================================================
com.mongodb.JMXConnectionPoolListener$ClusterIdServerAddressPair.ClusterIdServerAddressPair(java.lang.String, com.mongodb.ServerAddress):::ENTER
clusterId.toString one of { "1", "2" }
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
===========================================================================
com.mongodb.JMXConnectionPoolListener$ClusterIdServerAddressPair.ClusterIdServerAddressPair(java.lang.String, com.mongodb.ServerAddress):::EXIT
this.clusterId == orig(clusterId)
this.serverAddress == orig(serverAddress)
this.serverAddress._host == serverAddress._host
this.serverAddress._port == serverAddress._port
clusterId.toString == orig(clusterId.toString)
serverAddress._host == orig(serverAddress._host)
serverAddress._host.toString == orig(serverAddress._host.toString)
serverAddress._port == orig(serverAddress._port)
clusterId.toString one of { "1", "2" }
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
===========================================================================
com.mongodb.JMXConnectionPoolListener$ClusterIdServerAddressPair.hashCode():::ENTER
===========================================================================
com.mongodb.JMXConnectionPoolListener$ClusterIdServerAddressPair.hashCode():::EXIT
this.clusterId == orig(this.clusterId)
this.clusterId.toString == orig(this.clusterId.toString)
this.serverAddress == orig(this.serverAddress)
this.serverAddress._host == orig(this.serverAddress._host)
this.serverAddress._host.toString == orig(this.serverAddress._host.toString)
this.serverAddress._port == orig(this.serverAddress._port)
return one of { 1311914565, 1311914596 }
===========================================================================
com.mongodb.JMXConnectionPoolListener:::OBJECT
this.map.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
this.clusterDescription == null
===========================================================================
com.mongodb.JMXConnectionPoolListener.JMXConnectionPoolListener(java.lang.String):::ENTER
clusterDescription == null
===========================================================================
com.mongodb.JMXConnectionPoolListener.JMXConnectionPoolListener(java.lang.String):::EXIT
===========================================================================
com.mongodb.JMXConnectionPoolListener.connectionPoolOpened(com.mongodb.ConnectionPoolOpenedEvent):::ENTER
event.settings.maxSize == 10
event.settings.minSize == 0
event.settings.maxWaitQueueSize == 50
event.settings.maxWaitTimeMS == 120000
event.settings.maxConnectionLifeTimeMS == 0
event.settings.maxConnectionIdleTimeMS == 0
event.settings.maintenanceInitialDelayMS == 0
event.settings.maintenanceFrequencyMS == 60000
event.serverAddress._host has only one value
event.serverAddress._host.toString == "localhost"
event.serverAddress._port == 27017
event.clusterId.toString one of { "1", "2" }
===========================================================================
com.mongodb.JMXConnectionPoolListener.connectionPoolOpened(com.mongodb.ConnectionPoolOpenedEvent):::EXIT
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
this.clusterDescription == orig(this.clusterDescription)
event.settings == orig(event.settings)
event.settings.maxSize == orig(event.settings.maxSize)
event.settings.minSize == orig(event.settings.minSize)
event.settings.maxWaitQueueSize == orig(event.settings.maxWaitQueueSize)
event.settings.maxWaitTimeMS == orig(event.settings.maxWaitTimeMS)
event.settings.maxConnectionLifeTimeMS == orig(event.settings.maxConnectionLifeTimeMS)
event.settings.maxConnectionIdleTimeMS == orig(event.settings.maxConnectionIdleTimeMS)
event.settings.maintenanceInitialDelayMS == orig(event.settings.maintenanceInitialDelayMS)
event.settings.maintenanceFrequencyMS == orig(event.settings.maintenanceFrequencyMS)
event.serverAddress == orig(event.serverAddress)
event.serverAddress._host == orig(event.serverAddress._host)
event.serverAddress._host.toString == orig(event.serverAddress._host.toString)
event.serverAddress._port == orig(event.serverAddress._port)
event.clusterId == orig(event.clusterId)
event.clusterId.toString == orig(event.clusterId.toString)
event.settings.maxSize == 10
event.settings.minSize == 0
event.settings.maxWaitQueueSize == 50
event.settings.maxWaitTimeMS == 120000
event.settings.maxConnectionLifeTimeMS == 0
event.settings.maxConnectionIdleTimeMS == 0
event.settings.maintenanceInitialDelayMS == 0
event.settings.maintenanceFrequencyMS == 60000
event.serverAddress._host has only one value
event.serverAddress._host.toString == "localhost"
event.serverAddress._port == 27017
event.clusterId.toString one of { "1", "2" }
===========================================================================
com.mongodb.JMXConnectionPoolListener.getMBeanObjectName(java.lang.String, com.mongodb.ServerAddress):::ENTER
clusterId.toString one of { "1", "2" }
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
===========================================================================
com.mongodb.JMXConnectionPoolListener.getMBeanObjectName(java.lang.String, com.mongodb.ServerAddress):::EXIT
this.map == orig(this.map)
this.map.getClass().getName() == orig(this.map.getClass().getName())
this.clusterDescription == orig(this.clusterDescription)
clusterId.toString == orig(clusterId.toString)
serverAddress._host == orig(serverAddress._host)
serverAddress._host.toString == orig(serverAddress._host.toString)
serverAddress._port == orig(serverAddress._port)
clusterId.toString one of { "1", "2" }
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
return.toString one of { "org.mongodb.driver:type=ConnectionPool,clusterId=1,host=localhost,port=27017", "org.mongodb.driver:type=ConnectionPool,clusterId=2,host=localhost,port=27017" }
===========================================================================
com.mongodb.Loggers:::CLASS
com.mongodb.Loggers.PREFIX has only one value
com.mongodb.Loggers.PREFIX.toString == "com.mongodb.driver"
===========================================================================
com.mongodb.Loggers.getLogger(java.lang.String):::ENTER
suffix.toString one of { "cluster", "connection" }
===========================================================================
com.mongodb.Loggers.getLogger(java.lang.String):::EXIT
com.mongodb.Loggers.PREFIX == orig(com.mongodb.Loggers.PREFIX)
com.mongodb.Loggers.PREFIX.toString == orig(com.mongodb.Loggers.PREFIX.toString)
suffix.toString == orig(suffix.toString)
suffix.toString one of { "cluster", "connection" }
===========================================================================
com.mongodb.Mongo$1:::OBJECT
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
com.mongodb.Mongo.this._options == null
com.mongodb.Mongo.this._connector == null
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID has only one value
com.mongodb.Mongo.this._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
com.mongodb.Mongo.this._concern has only one value
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
com.mongodb.Mongo.this._concern._w has only one value
com.mongodb.Mongo.this._concern._w.getClass().getName() == java.lang.Integer.class
com.mongodb.Mongo.this._concern._wtimeout == 0
com.mongodb.Mongo.this._concern._fsync == false
com.mongodb.Mongo.this._concern._j == false
com.mongodb.Mongo.this._concern._continueOnError == false
com.mongodb.Mongo.this._readPref has only one value
com.mongodb.Mongo.this._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY has only one value
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY_PREFERRED has only one value
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
com.mongodb.Mongo.this._netOptions._parent == null
com.mongodb.Mongo.this._netOptions._options == 0
com.mongodb.Mongo.this._netOptions._hasOptions == false
com.mongodb.Mongo.this._cleaner == null
com.mongodb.Mongo.this._authority == null
com.mongodb.Mongo.this._bufferPool == null
this._max == 1000
this._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
===========================================================================
com.mongodb.Mongo$1.(com.mongodb.Mongo, int):::ENTER
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
com.mongodb.Mongo.this._options == null
com.mongodb.Mongo.this._connector == null
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID has only one value
com.mongodb.Mongo.this._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
com.mongodb.Mongo.this._concern has only one value
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
com.mongodb.Mongo.this._concern._w has only one value
com.mongodb.Mongo.this._concern._w.getClass().getName() == java.lang.Integer.class
com.mongodb.Mongo.this._concern._wtimeout == 0
com.mongodb.Mongo.this._concern._fsync == false
com.mongodb.Mongo.this._concern._j == false
com.mongodb.Mongo.this._concern._continueOnError == false
com.mongodb.Mongo.this._readPref has only one value
com.mongodb.Mongo.this._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY has only one value
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY_PREFERRED has only one value
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
com.mongodb.Mongo.this._netOptions._parent == null
com.mongodb.Mongo.this._netOptions._options == 0
com.mongodb.Mongo.this._netOptions._hasOptions == false
com.mongodb.Mongo.this._cleaner == null
com.mongodb.Mongo.this._authority == null
com.mongodb.Mongo.this._bufferPool == null
x0 == 1000
===========================================================================
com.mongodb.Mongo$1.(com.mongodb.Mongo, int):::EXIT
com.mongodb.Mongo.this == orig(com.mongodb.Mongo.this)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
com.mongodb.Mongo.this._options == orig(com.mongodb.Mongo.this._options)
com.mongodb.Mongo.this._connector == orig(com.mongodb.Mongo.this._connector)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
com.mongodb.Mongo.this._dbs == orig(com.mongodb.Mongo.this._dbs)
com.mongodb.Mongo.this._dbs.getClass().getName() == orig(com.mongodb.Mongo.this._dbs.getClass().getName())
com.mongodb.Mongo.this._concern == orig(com.mongodb.Mongo.this._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
com.mongodb.Mongo.this._concern._w == orig(com.mongodb.Mongo.this._concern._w)
com.mongodb.Mongo.this._concern._w.getClass().getName() == orig(com.mongodb.Mongo.this._concern._w.getClass().getName())
com.mongodb.Mongo.this._concern._wtimeout == orig(com.mongodb.Mongo.this._concern._wtimeout)
com.mongodb.Mongo.this._concern._fsync == orig(com.mongodb.Mongo.this._concern._fsync)
com.mongodb.Mongo.this._concern._j == orig(com.mongodb.Mongo.this._concern._j)
com.mongodb.Mongo.this._concern._continueOnError == orig(com.mongodb.Mongo.this._concern._continueOnError)
com.mongodb.Mongo.this._readPref == orig(com.mongodb.Mongo.this._readPref)
com.mongodb.Mongo.this._readPref.getClass().getName() == orig(com.mongodb.Mongo.this._readPref.getClass().getName())
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
com.mongodb.Mongo.this._netOptions == orig(com.mongodb.Mongo.this._netOptions)
com.mongodb.Mongo.this._netOptions._parent == orig(com.mongodb.Mongo.this._netOptions._parent)
com.mongodb.Mongo.this._netOptions._options == orig(com.mongodb.Mongo.this._netOptions._options)
com.mongodb.Mongo.this._netOptions._hasOptions == orig(com.mongodb.Mongo.this._netOptions._hasOptions)
com.mongodb.Mongo.this._cleaner == orig(com.mongodb.Mongo.this._cleaner)
com.mongodb.Mongo.this._authority == orig(com.mongodb.Mongo.this._authority)
com.mongodb.Mongo.this._bufferPool == orig(com.mongodb.Mongo.this._bufferPool)
===========================================================================
com.mongodb.Mongo$CursorCleanerThread:::OBJECT
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
com.mongodb.Mongo.this._options.description == null
com.mongodb.Mongo.this._options.connectionsPerHost == 10
com.mongodb.Mongo.this._options.threadsAllowedToBlockForConnectionMultiplier == 5
com.mongodb.Mongo.this._options.maxWaitTime == 120000
com.mongodb.Mongo.this._options.connectTimeout == 10000
com.mongodb.Mongo.this._options.socketTimeout == 0
com.mongodb.Mongo.this._options.socketKeepAlive == false
com.mongodb.Mongo.this._options.autoConnectRetry == false
com.mongodb.Mongo.this._options.maxAutoConnectRetryTime == 0
com.mongodb.Mongo.this._options.slaveOk == false
com.mongodb.Mongo.this._options.readPreference == null
com.mongodb.Mongo.this._options.dbDecoderFactory has only one value
com.mongodb.Mongo.this._options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
com.mongodb.Mongo.this._options.dbEncoderFactory has only one value
com.mongodb.Mongo.this._options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
com.mongodb.Mongo.this._options.safe == false
com.mongodb.Mongo.this._options.w == 0
com.mongodb.Mongo.this._options.wtimeout == 0
com.mongodb.Mongo.this._options.fsync == false
com.mongodb.Mongo.this._options.j == false
com.mongodb.Mongo.this._options.socketFactory has only one value
com.mongodb.Mongo.this._options.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
com.mongodb.Mongo.this._options.cursorFinalizerEnabled == true
com.mongodb.Mongo.this._options.writeConcern == null
com.mongodb.Mongo.this._options.alwaysUseMBeans == false
com.mongodb.Mongo.this._options.minConnectionsPerHost == 0
com.mongodb.Mongo.this._options.maxConnectionIdleTime == 0
com.mongodb.Mongo.this._options.maxConnectionLifeTime == 0
com.mongodb.Mongo.this._options.heartbeatFrequencyMS == 5000
com.mongodb.Mongo.this._options.heartbeatConnectRetryFrequencyMS == 10
com.mongodb.Mongo.this._options.heartbeatConnectTimeoutMS == 20000
com.mongodb.Mongo.this._options.heartbeatReadTimeoutMS == 20000
com.mongodb.Mongo.this._options.acceptableLatencyDifferenceMS == 15
com.mongodb.Mongo.this._options.heartbeatThreadCount == 0
com.mongodb.Mongo.this._options.requiredReplicaSetName == null
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID has only one value
com.mongodb.Mongo.this._connector._closed == false
com.mongodb.Mongo.this._connector.cluster.getClass().getName() == com.mongodb.SingleServerCluster.class
com.mongodb.Mongo.this._connector.connectionMode has only one value
com.mongodb.Mongo.this._connector.type has only one value
com.mongodb.Mongo.this._connector.mongosHAServerSelector == null
com.mongodb.Mongo.this._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
com.mongodb.Mongo.this._concern has only one value
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
com.mongodb.Mongo.this._concern._w has only one value
com.mongodb.Mongo.this._concern._w.getClass().getName() == java.lang.Integer.class
com.mongodb.Mongo.this._concern._wtimeout == 0
com.mongodb.Mongo.this._concern._fsync == false
com.mongodb.Mongo.this._concern._j == false
com.mongodb.Mongo.this._concern._continueOnError == false
com.mongodb.Mongo.this._readPref has only one value
com.mongodb.Mongo.this._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY has only one value
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY_PREFERRED has only one value
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
com.mongodb.Mongo.this._netOptions._parent == null
com.mongodb.Mongo.this._netOptions._options == 0
com.mongodb.Mongo.this._netOptions._hasOptions == false
com.mongodb.Mongo.this._cleaner == null
com.mongodb.Mongo.this._authority.type has only one value
com.mongodb.Mongo.this._authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
com.mongodb.Mongo.this._authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
com.mongodb.Mongo.this._authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
com.mongodb.Mongo.this._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
com.mongodb.Mongo.this._bufferPool._max == 1000
com.mongodb.Mongo.this._bufferPool._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
size(com.mongodb.Mongo.this._authority.serverAddresses[]) == 1
===========================================================================
com.mongodb.Mongo$CursorCleanerThread.CursorCleanerThread(com.mongodb.Mongo):::ENTER
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
com.mongodb.Mongo.this._options.description == null
com.mongodb.Mongo.this._options.connectionsPerHost == 10
com.mongodb.Mongo.this._options.threadsAllowedToBlockForConnectionMultiplier == 5
com.mongodb.Mongo.this._options.maxWaitTime == 120000
com.mongodb.Mongo.this._options.connectTimeout == 10000
com.mongodb.Mongo.this._options.socketTimeout == 0
com.mongodb.Mongo.this._options.socketKeepAlive == false
com.mongodb.Mongo.this._options.autoConnectRetry == false
com.mongodb.Mongo.this._options.maxAutoConnectRetryTime == 0
com.mongodb.Mongo.this._options.slaveOk == false
com.mongodb.Mongo.this._options.readPreference == null
com.mongodb.Mongo.this._options.dbDecoderFactory has only one value
com.mongodb.Mongo.this._options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
com.mongodb.Mongo.this._options.dbEncoderFactory has only one value
com.mongodb.Mongo.this._options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
com.mongodb.Mongo.this._options.safe == false
com.mongodb.Mongo.this._options.w == 0
com.mongodb.Mongo.this._options.wtimeout == 0
com.mongodb.Mongo.this._options.fsync == false
com.mongodb.Mongo.this._options.j == false
com.mongodb.Mongo.this._options.socketFactory has only one value
com.mongodb.Mongo.this._options.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
com.mongodb.Mongo.this._options.cursorFinalizerEnabled == true
com.mongodb.Mongo.this._options.writeConcern == null
com.mongodb.Mongo.this._options.alwaysUseMBeans == false
com.mongodb.Mongo.this._options.minConnectionsPerHost == 0
com.mongodb.Mongo.this._options.maxConnectionIdleTime == 0
com.mongodb.Mongo.this._options.maxConnectionLifeTime == 0
com.mongodb.Mongo.this._options.heartbeatFrequencyMS == 5000
com.mongodb.Mongo.this._options.heartbeatConnectRetryFrequencyMS == 10
com.mongodb.Mongo.this._options.heartbeatConnectTimeoutMS == 20000
com.mongodb.Mongo.this._options.heartbeatReadTimeoutMS == 20000
com.mongodb.Mongo.this._options.acceptableLatencyDifferenceMS == 15
com.mongodb.Mongo.this._options.heartbeatThreadCount == 0
com.mongodb.Mongo.this._options.requiredReplicaSetName == null
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID has only one value
com.mongodb.Mongo.this._connector._closed == false
com.mongodb.Mongo.this._connector.cluster.getClass().getName() == com.mongodb.SingleServerCluster.class
com.mongodb.Mongo.this._connector.connectionMode has only one value
com.mongodb.Mongo.this._connector.type has only one value
com.mongodb.Mongo.this._connector.mongosHAServerSelector == null
com.mongodb.Mongo.this._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
com.mongodb.Mongo.this._concern has only one value
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
com.mongodb.Mongo.this._concern._w has only one value
com.mongodb.Mongo.this._concern._w.getClass().getName() == java.lang.Integer.class
com.mongodb.Mongo.this._concern._wtimeout == 0
com.mongodb.Mongo.this._concern._fsync == false
com.mongodb.Mongo.this._concern._j == false
com.mongodb.Mongo.this._concern._continueOnError == false
com.mongodb.Mongo.this._readPref has only one value
com.mongodb.Mongo.this._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY has only one value
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY_PREFERRED has only one value
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
com.mongodb.Mongo.this._netOptions._parent == null
com.mongodb.Mongo.this._netOptions._options == 0
com.mongodb.Mongo.this._netOptions._hasOptions == false
com.mongodb.Mongo.this._cleaner == null
com.mongodb.Mongo.this._authority.type has only one value
com.mongodb.Mongo.this._authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
com.mongodb.Mongo.this._authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
com.mongodb.Mongo.this._authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
com.mongodb.Mongo.this._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
com.mongodb.Mongo.this._bufferPool._max == 1000
com.mongodb.Mongo.this._bufferPool._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
size(com.mongodb.Mongo.this._authority.serverAddresses[]) == 1
===========================================================================
com.mongodb.Mongo$CursorCleanerThread.CursorCleanerThread(com.mongodb.Mongo):::EXIT
com.mongodb.Mongo.this == orig(com.mongodb.Mongo.this)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
com.mongodb.Mongo.this._options == orig(com.mongodb.Mongo.this._options)
com.mongodb.Mongo.this._options.description == orig(com.mongodb.Mongo.this._options.description)
com.mongodb.Mongo.this._options.connectionsPerHost == orig(com.mongodb.Mongo.this._options.connectionsPerHost)
com.mongodb.Mongo.this._options.threadsAllowedToBlockForConnectionMultiplier == orig(com.mongodb.Mongo.this._options.threadsAllowedToBlockForConnectionMultiplier)
com.mongodb.Mongo.this._options.maxWaitTime == orig(com.mongodb.Mongo.this._options.maxWaitTime)
com.mongodb.Mongo.this._options.connectTimeout == orig(com.mongodb.Mongo.this._options.connectTimeout)
com.mongodb.Mongo.this._options.socketTimeout == orig(com.mongodb.Mongo.this._options.socketTimeout)
com.mongodb.Mongo.this._options.socketKeepAlive == orig(com.mongodb.Mongo.this._options.socketKeepAlive)
com.mongodb.Mongo.this._options.autoConnectRetry == orig(com.mongodb.Mongo.this._options.autoConnectRetry)
com.mongodb.Mongo.this._options.maxAutoConnectRetryTime == orig(com.mongodb.Mongo.this._options.maxAutoConnectRetryTime)
com.mongodb.Mongo.this._options.slaveOk == orig(com.mongodb.Mongo.this._options.slaveOk)
com.mongodb.Mongo.this._options.readPreference == orig(com.mongodb.Mongo.this._options.readPreference)
com.mongodb.Mongo.this._options.dbDecoderFactory == orig(com.mongodb.Mongo.this._options.dbDecoderFactory)
com.mongodb.Mongo.this._options.dbDecoderFactory.getClass().getName() == orig(com.mongodb.Mongo.this._options.dbDecoderFactory.getClass().getName())
com.mongodb.Mongo.this._options.dbEncoderFactory == orig(com.mongodb.Mongo.this._options.dbEncoderFactory)
com.mongodb.Mongo.this._options.dbEncoderFactory.getClass().getName() == orig(com.mongodb.Mongo.this._options.dbEncoderFactory.getClass().getName())
com.mongodb.Mongo.this._options.safe == orig(com.mongodb.Mongo.this._options.safe)
com.mongodb.Mongo.this._options.w == orig(com.mongodb.Mongo.this._options.w)
com.mongodb.Mongo.this._options.wtimeout == orig(com.mongodb.Mongo.this._options.wtimeout)
com.mongodb.Mongo.this._options.fsync == orig(com.mongodb.Mongo.this._options.fsync)
com.mongodb.Mongo.this._options.j == orig(com.mongodb.Mongo.this._options.j)
com.mongodb.Mongo.this._options.socketFactory == orig(com.mongodb.Mongo.this._options.socketFactory)
com.mongodb.Mongo.this._options.socketFactory.getClass().getName() == orig(com.mongodb.Mongo.this._options.socketFactory.getClass().getName())
com.mongodb.Mongo.this._options.cursorFinalizerEnabled == orig(com.mongodb.Mongo.this._options.cursorFinalizerEnabled)
com.mongodb.Mongo.this._options.writeConcern == orig(com.mongodb.Mongo.this._options.writeConcern)
com.mongodb.Mongo.this._options.alwaysUseMBeans == orig(com.mongodb.Mongo.this._options.alwaysUseMBeans)
com.mongodb.Mongo.this._options.minConnectionsPerHost == orig(com.mongodb.Mongo.this._options.minConnectionsPerHost)
com.mongodb.Mongo.this._options.maxConnectionIdleTime == orig(com.mongodb.Mongo.this._options.maxConnectionIdleTime)
com.mongodb.Mongo.this._options.maxConnectionLifeTime == orig(com.mongodb.Mongo.this._options.maxConnectionLifeTime)
com.mongodb.Mongo.this._options.heartbeatFrequencyMS == orig(com.mongodb.Mongo.this._options.heartbeatFrequencyMS)
com.mongodb.Mongo.this._options.heartbeatConnectRetryFrequencyMS == orig(com.mongodb.Mongo.this._options.heartbeatConnectRetryFrequencyMS)
com.mongodb.Mongo.this._options.heartbeatConnectTimeoutMS == orig(com.mongodb.Mongo.this._options.heartbeatConnectTimeoutMS)
com.mongodb.Mongo.this._options.heartbeatReadTimeoutMS == orig(com.mongodb.Mongo.this._options.heartbeatReadTimeoutMS)
com.mongodb.Mongo.this._options.acceptableLatencyDifferenceMS == orig(com.mongodb.Mongo.this._options.acceptableLatencyDifferenceMS)
com.mongodb.Mongo.this._options.heartbeatThreadCount == orig(com.mongodb.Mongo.this._options.heartbeatThreadCount)
com.mongodb.Mongo.this._options.requiredReplicaSetName == orig(com.mongodb.Mongo.this._options.requiredReplicaSetName)
com.mongodb.Mongo.this._connector == orig(com.mongodb.Mongo.this._connector)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
com.mongodb.Mongo.this._connector._closed == orig(com.mongodb.Mongo.this._connector._closed)
com.mongodb.Mongo.this._connector._mongo == orig(com.mongodb.Mongo.this._connector._mongo)
com.mongodb.Mongo.this._connector.cluster == orig(com.mongodb.Mongo.this._connector.cluster)
com.mongodb.Mongo.this._connector.cluster.getClass().getName() == orig(com.mongodb.Mongo.this._connector.cluster.getClass().getName())
com.mongodb.Mongo.this._connector._myPort == orig(com.mongodb.Mongo.this._connector._myPort)
com.mongodb.Mongo.this._connector.connectionMode == orig(com.mongodb.Mongo.this._connector.connectionMode)
com.mongodb.Mongo.this._connector.type == orig(com.mongodb.Mongo.this._connector.type)
com.mongodb.Mongo.this._connector.mongosHAServerSelector == orig(com.mongodb.Mongo.this._connector.mongosHAServerSelector)
com.mongodb.Mongo.this._dbs == orig(com.mongodb.Mongo.this._dbs)
com.mongodb.Mongo.this._dbs.getClass().getName() == orig(com.mongodb.Mongo.this._dbs.getClass().getName())
com.mongodb.Mongo.this._concern == orig(com.mongodb.Mongo.this._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
com.mongodb.Mongo.this._concern._w == orig(com.mongodb.Mongo.this._concern._w)
com.mongodb.Mongo.this._concern._w.getClass().getName() == orig(com.mongodb.Mongo.this._concern._w.getClass().getName())
com.mongodb.Mongo.this._concern._wtimeout == orig(com.mongodb.Mongo.this._concern._wtimeout)
com.mongodb.Mongo.this._concern._fsync == orig(com.mongodb.Mongo.this._concern._fsync)
com.mongodb.Mongo.this._concern._j == orig(com.mongodb.Mongo.this._concern._j)
com.mongodb.Mongo.this._concern._continueOnError == orig(com.mongodb.Mongo.this._concern._continueOnError)
com.mongodb.Mongo.this._readPref == orig(com.mongodb.Mongo.this._readPref)
com.mongodb.Mongo.this._readPref.getClass().getName() == orig(com.mongodb.Mongo.this._readPref.getClass().getName())
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
com.mongodb.Mongo.this._netOptions == orig(com.mongodb.Mongo.this._netOptions)
com.mongodb.Mongo.this._netOptions._parent == orig(com.mongodb.Mongo.this._netOptions._parent)
com.mongodb.Mongo.this._netOptions._options == orig(com.mongodb.Mongo.this._netOptions._options)
com.mongodb.Mongo.this._netOptions._hasOptions == orig(com.mongodb.Mongo.this._netOptions._hasOptions)
com.mongodb.Mongo.this._cleaner == orig(com.mongodb.Mongo.this._cleaner)
com.mongodb.Mongo.this._authority == orig(com.mongodb.Mongo.this._authority)
com.mongodb.Mongo.this._authority.type == orig(com.mongodb.Mongo.this._authority.type)
com.mongodb.Mongo.this._authority.serverAddresses == orig(com.mongodb.Mongo.this._authority.serverAddresses)
com.mongodb.Mongo.this._authority.serverAddresses[] == orig(com.mongodb.Mongo.this._authority.serverAddresses[])
com.mongodb.Mongo.this._authority.serverAddresses.getClass().getName() == orig(com.mongodb.Mongo.this._authority.serverAddresses.getClass().getName())
com.mongodb.Mongo.this._authority.credentialsStore == orig(com.mongodb.Mongo.this._authority.credentialsStore)
com.mongodb.Mongo.this._bufferPool == orig(com.mongodb.Mongo.this._bufferPool)
com.mongodb.Mongo.this._bufferPool.getClass().getName() == orig(com.mongodb.Mongo.this._bufferPool.getClass().getName())
com.mongodb.Mongo.this._bufferPool._max == orig(com.mongodb.Mongo.this._bufferPool._max)
com.mongodb.Mongo.this._bufferPool._stored == orig(com.mongodb.Mongo.this._bufferPool._stored)
com.mongodb.Mongo.this._bufferPool._stored.getClass().getName() == orig(com.mongodb.Mongo.this._bufferPool._stored.getClass().getName())
===========================================================================
com.mongodb.Mongo:::CLASS
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.logger != null
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION != null
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME != null
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
===========================================================================
com.mongodb.Mongo:::OBJECT
this._options.description == null
this._options.connectionsPerHost == 10
this._options.threadsAllowedToBlockForConnectionMultiplier == 5
this._options.maxWaitTime == 120000
this._options.connectTimeout == 10000
this._options.socketTimeout == 0
this._options.socketKeepAlive == false
this._options.autoConnectRetry == false
this._options.maxAutoConnectRetryTime == 0
this._options.slaveOk == false
this._options.readPreference == null
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY != null
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY != null
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY has only one value
com.mongodb.ReadPreference._PRIMARY != null
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY != null
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY_PREFERRED has only one value
com.mongodb.ReadPreference._SECONDARY_PREFERRED != null
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED != null
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST != null
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
this._options.dbDecoderFactory has only one value
this._options.dbDecoderFactory != null
this._options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
this._options.dbEncoderFactory has only one value
this._options.dbEncoderFactory != null
this._options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
this._options.safe == false
this._options.w == 0
this._options.wtimeout == 0
this._options.fsync == false
this._options.j == false
this._options.socketFactory has only one value
this._options.socketFactory != null
this._options.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
this._options.cursorFinalizerEnabled == true
this._options.writeConcern == null
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ERRORS_IGNORED != null
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED != null
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED != null
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.FSYNCED != null
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.JOURNALED != null
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED != null
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NONE != null
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.NORMAL != null
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.SAFE != null
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.MAJORITY != null
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.FSYNC_SAFE != null
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE != null
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE != null
com.mongodb.WriteConcern._namedConcerns == null
this._options.alwaysUseMBeans == false
this._options.minConnectionsPerHost == 0
this._options.maxConnectionIdleTime == 0
this._options.maxConnectionLifeTime == 0
this._options.heartbeatFrequencyMS == 5000
this._options.heartbeatConnectRetryFrequencyMS == 10
this._options.heartbeatConnectTimeoutMS == 20000
this._options.heartbeatReadTimeoutMS == 20000
this._options.acceptableLatencyDifferenceMS == 15
this._options.heartbeatThreadCount == 0
this._options.requiredReplicaSetName == null
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID has only one value
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID != null
this._connector._closed == false
this._connector._mongo != null
this._connector._mongo._options != null
this._connector._mongo._connector != null
this._connector._mongo._dbs != null
this._connector._mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
this._connector._mongo._concern has only one value
this._connector._mongo._concern != null
this._connector._mongo._readPref has only one value
this._connector._mongo._readPref != null
this._connector._mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
this._connector._mongo._netOptions != null
this._connector._mongo._authority != null
this._connector._mongo._bufferPool != null
this._connector._mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
this._connector.cluster.getClass().getName() == com.mongodb.SingleServerCluster.class
this._connector._myPort != null
this._connector._myPort.pinnedRequestStatusThreadLocal != null
this._connector.connectionMode has only one value
this._connector.connectionMode != null
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Single != null
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.Multiple != null
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES != null
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[] elements != null
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
this._connector.type has only one value
this._connector.type != null
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.StandAlone != null
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.ReplicaSet != null
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Sharded != null
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.Unknown != null
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES != null
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[] elements != null
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
this._connector.mongosHAServerSelector == null
this._dbs != null
this._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
this._concern has only one value
this._concern != null
com.mongodb.WriteConcern.ERRORS_IGNORED._w has only one value
com.mongodb.WriteConcern.ERRORS_IGNORED._w != null
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == 0
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == false
com.mongodb.WriteConcern.ERRORS_IGNORED._j == false
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == false
com.mongodb.WriteConcern.ACKNOWLEDGED._w has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED._w != null
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == 0
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == false
com.mongodb.WriteConcern.ACKNOWLEDGED._j == false
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == false
com.mongodb.WriteConcern.UNACKNOWLEDGED._w has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED._w != null
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == 0
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == false
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == false
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == false
com.mongodb.WriteConcern.FSYNCED._w has only one value
com.mongodb.WriteConcern.FSYNCED._w != null
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.FSYNCED._wtimeout == 0
com.mongodb.WriteConcern.FSYNCED._fsync == true
com.mongodb.WriteConcern.FSYNCED._j == false
com.mongodb.WriteConcern.FSYNCED._continueOnError == false
com.mongodb.WriteConcern.JOURNALED._w has only one value
com.mongodb.WriteConcern.JOURNALED._w != null
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.JOURNALED._wtimeout == 0
com.mongodb.WriteConcern.JOURNALED._fsync == false
com.mongodb.WriteConcern.JOURNALED._j == true
com.mongodb.WriteConcern.JOURNALED._continueOnError == false
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w != null
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == 0
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == false
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == false
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == false
com.mongodb.WriteConcern.NONE._w has only one value
com.mongodb.WriteConcern.NONE._w != null
com.mongodb.WriteConcern.NONE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.NONE._wtimeout == 0
com.mongodb.WriteConcern.NONE._fsync == false
com.mongodb.WriteConcern.NONE._j == false
com.mongodb.WriteConcern.NONE._continueOnError == false
com.mongodb.WriteConcern.NORMAL._w has only one value
com.mongodb.WriteConcern.NORMAL._w != null
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.NORMAL._wtimeout == 0
com.mongodb.WriteConcern.NORMAL._fsync == false
com.mongodb.WriteConcern.NORMAL._j == false
com.mongodb.WriteConcern.NORMAL._continueOnError == false
com.mongodb.WriteConcern.SAFE._w has only one value
com.mongodb.WriteConcern.SAFE._w != null
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.SAFE._wtimeout == 0
com.mongodb.WriteConcern.SAFE._fsync == false
com.mongodb.WriteConcern.SAFE._j == false
com.mongodb.WriteConcern.SAFE._continueOnError == false
com.mongodb.WriteConcern.MAJORITY._w has only one value
com.mongodb.WriteConcern.MAJORITY._w != null
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == java.lang.String.class
com.mongodb.WriteConcern.MAJORITY._wtimeout == 0
com.mongodb.WriteConcern.MAJORITY._fsync == false
com.mongodb.WriteConcern.MAJORITY._j == false
com.mongodb.WriteConcern.MAJORITY._continueOnError == false
com.mongodb.WriteConcern.FSYNC_SAFE._w has only one value
com.mongodb.WriteConcern.FSYNC_SAFE._w != null
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == 0
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == true
com.mongodb.WriteConcern.FSYNC_SAFE._j == false
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == false
com.mongodb.WriteConcern.JOURNAL_SAFE._w has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE._w != null
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == 0
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == false
com.mongodb.WriteConcern.JOURNAL_SAFE._j == true
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == false
com.mongodb.WriteConcern.REPLICAS_SAFE._w has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE._w != null
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == 0
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == false
com.mongodb.WriteConcern.REPLICAS_SAFE._j == false
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == false
this._concern._w has only one value
this._concern._w != null
this._concern._w.getClass().getName() == java.lang.Integer.class
this._concern._wtimeout == 0
this._concern._fsync == false
this._concern._j == false
this._concern._continueOnError == false
this._readPref has only one value
this._readPref != null
this._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
this._netOptions != null
this._netOptions._parent == null
this._netOptions._options == 0
this._netOptions._hasOptions == false
com.mongodb.Mongo.this._options != null
com.mongodb.Mongo.this._connector != null
com.mongodb.Mongo.this._dbs != null
com.mongodb.Mongo.this._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
com.mongodb.Mongo.this._concern has only one value
com.mongodb.Mongo.this._concern != null
com.mongodb.Mongo.this._readPref has only one value
com.mongodb.Mongo.this._readPref != null
com.mongodb.Mongo.this._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.Mongo.this._netOptions != null
com.mongodb.Mongo.this._cleaner != null
com.mongodb.Mongo.this._authority != null
com.mongodb.Mongo.this._bufferPool != null
com.mongodb.Mongo.this._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
this._authority.type has only one value
this._authority.type != null
com.mongodb.MongoAuthority$Type.Direct has only one value
com.mongodb.MongoAuthority$Type.Direct != null
com.mongodb.MongoAuthority$Type.Set has only one value
com.mongodb.MongoAuthority$Type.Set != null
com.mongodb.MongoAuthority$Type.$VALUES has only one value
com.mongodb.MongoAuthority$Type.$VALUES != null
com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName() == com.mongodb.MongoAuthority$Type[].class
com.mongodb.MongoAuthority$Type.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.MongoAuthority$Type.$VALUES[] elements != null
com.mongodb.MongoAuthority$Type.$VALUES[].getClass().getName() == [com.mongodb.MongoAuthority.Type, com.mongodb.MongoAuthority.Type]
com.mongodb.MongoAuthority$Type.$VALUES[].getClass().getName() elements == com.mongodb.MongoAuthority.Type.class
this._authority.serverAddresses != null
this._authority.serverAddresses[] elements != null
this._authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
this._authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
this._authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
this._authority.credentialsStore != null
this._authority.credentialsStore.credentialsMap != null
this._authority.credentialsStore.credentialsMap.getClass().getName() == java.util.HashMap.class
this._authority.credentialsStore.allDatabasesWithCredentials != null
this._authority.credentialsStore.allDatabasesWithCredentials.getClass().getName() == java.util.HashSet.class
this._bufferPool != null
this._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
this._bufferPool._max == 1000
this._bufferPool._stored != null
this._bufferPool._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
size(com.mongodb.MongoAuthority$Type.$VALUES[]) == 2
size(this._authority.serverAddresses[]) == 1
===========================================================================
com.mongodb.Mongo.Mongo(com.mongodb.MongoAuthority, com.mongodb.MongoOptions):::ENTER
authority.type has only one value
com.mongodb.MongoAuthority$Type.Direct has only one value
com.mongodb.MongoAuthority$Type.Set has only one value
com.mongodb.MongoAuthority$Type.$VALUES has only one value
com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName() == com.mongodb.MongoAuthority$Type[].class
com.mongodb.MongoAuthority$Type.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.MongoAuthority$Type.$VALUES[].getClass().getName() == [com.mongodb.MongoAuthority.Type, com.mongodb.MongoAuthority.Type]
com.mongodb.MongoAuthority$Type.$VALUES[].getClass().getName() elements == com.mongodb.MongoAuthority.Type.class
authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
authority.credentialsStore.credentialsMap.getClass().getName() == java.util.HashMap.class
authority.credentialsStore.allDatabasesWithCredentials.getClass().getName() == java.util.HashSet.class
options.description == null
options.connectionsPerHost == 10
options.threadsAllowedToBlockForConnectionMultiplier == 5
options.maxWaitTime == 120000
options.connectTimeout == 10000
options.socketTimeout == 0
options.socketKeepAlive == false
options.autoConnectRetry == false
options.maxAutoConnectRetryTime == 0
options.slaveOk == false
options.readPreference == null
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY has only one value
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY_PREFERRED has only one value
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
options.dbDecoderFactory has only one value
options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
options.dbEncoderFactory has only one value
options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
options.safe == false
options.w == 0
options.wtimeout == 0
options.fsync == false
options.j == false
options.socketFactory has only one value
options.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
options.cursorFinalizerEnabled == true
options.writeConcern == null
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
options.alwaysUseMBeans == false
options.minConnectionsPerHost == 0
options.maxConnectionIdleTime == 0
options.maxConnectionLifeTime == 0
options.heartbeatFrequencyMS == 5000
options.heartbeatConnectRetryFrequencyMS == 10
options.heartbeatConnectTimeoutMS == 20000
options.heartbeatReadTimeoutMS == 20000
options.acceptableLatencyDifferenceMS == 15
options.heartbeatThreadCount == 0
options.requiredReplicaSetName == null
size(com.mongodb.MongoAuthority$Type.$VALUES[]) == 2
size(authority.serverAddresses[]) == 1
===========================================================================
com.mongodb.Mongo.Mongo(com.mongodb.MongoAuthority, com.mongodb.MongoOptions):::EXIT
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
com.mongodb.MongoAuthority$Type.Direct == orig(com.mongodb.MongoAuthority$Type.Direct)
com.mongodb.MongoAuthority$Type.Set == orig(com.mongodb.MongoAuthority$Type.Set)
com.mongodb.MongoAuthority$Type.$VALUES == orig(com.mongodb.MongoAuthority$Type.$VALUES)
com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName() == orig(com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName())
com.mongodb.MongoAuthority$Type.$VALUES[] == orig(com.mongodb.MongoAuthority$Type.$VALUES[])
authority.type == orig(authority.type)
authority.serverAddresses == orig(authority.serverAddresses)
authority.serverAddresses[] == orig(authority.serverAddresses[])
authority.serverAddresses.getClass().getName() == orig(authority.serverAddresses.getClass().getName())
authority.credentialsStore == orig(authority.credentialsStore)
authority.credentialsStore.credentialsMap == orig(authority.credentialsStore.credentialsMap)
authority.credentialsStore.credentialsMap.getClass().getName() == orig(authority.credentialsStore.credentialsMap.getClass().getName())
authority.credentialsStore.allDatabasesWithCredentials == orig(authority.credentialsStore.allDatabasesWithCredentials)
authority.credentialsStore.allDatabasesWithCredentials.getClass().getName() == orig(authority.credentialsStore.allDatabasesWithCredentials.getClass().getName())
options.description == orig(options.description)
options.connectionsPerHost == orig(options.connectionsPerHost)
options.threadsAllowedToBlockForConnectionMultiplier == orig(options.threadsAllowedToBlockForConnectionMultiplier)
options.maxWaitTime == orig(options.maxWaitTime)
options.connectTimeout == orig(options.connectTimeout)
options.socketTimeout == orig(options.socketTimeout)
options.socketKeepAlive == orig(options.socketKeepAlive)
options.autoConnectRetry == orig(options.autoConnectRetry)
options.maxAutoConnectRetryTime == orig(options.maxAutoConnectRetryTime)
options.slaveOk == orig(options.slaveOk)
options.readPreference == orig(options.readPreference)
options.dbDecoderFactory == orig(options.dbDecoderFactory)
options.dbDecoderFactory.getClass().getName() == orig(options.dbDecoderFactory.getClass().getName())
options.dbEncoderFactory == orig(options.dbEncoderFactory)
options.dbEncoderFactory.getClass().getName() == orig(options.dbEncoderFactory.getClass().getName())
options.safe == orig(options.safe)
options.w == orig(options.w)
options.wtimeout == orig(options.wtimeout)
options.fsync == orig(options.fsync)
options.j == orig(options.j)
options.socketFactory == orig(options.socketFactory)
options.socketFactory.getClass().getName() == orig(options.socketFactory.getClass().getName())
options.cursorFinalizerEnabled == orig(options.cursorFinalizerEnabled)
options.writeConcern == orig(options.writeConcern)
options.alwaysUseMBeans == orig(options.alwaysUseMBeans)
options.minConnectionsPerHost == orig(options.minConnectionsPerHost)
options.maxConnectionIdleTime == orig(options.maxConnectionIdleTime)
options.maxConnectionLifeTime == orig(options.maxConnectionLifeTime)
options.heartbeatFrequencyMS == orig(options.heartbeatFrequencyMS)
options.heartbeatConnectRetryFrequencyMS == orig(options.heartbeatConnectRetryFrequencyMS)
options.heartbeatConnectTimeoutMS == orig(options.heartbeatConnectTimeoutMS)
options.heartbeatReadTimeoutMS == orig(options.heartbeatReadTimeoutMS)
options.acceptableLatencyDifferenceMS == orig(options.acceptableLatencyDifferenceMS)
options.heartbeatThreadCount == orig(options.heartbeatThreadCount)
options.requiredReplicaSetName == orig(options.requiredReplicaSetName)
authority.type has only one value
authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
authority.credentialsStore.credentialsMap.getClass().getName() == java.util.HashMap.class
authority.credentialsStore.allDatabasesWithCredentials.getClass().getName() == java.util.HashSet.class
options.description == null
options.connectionsPerHost == 10
options.threadsAllowedToBlockForConnectionMultiplier == 5
options.maxWaitTime == 120000
options.connectTimeout == 10000
options.socketTimeout == 0
options.socketKeepAlive == false
options.autoConnectRetry == false
options.maxAutoConnectRetryTime == 0
options.slaveOk == false
options.readPreference == null
options.dbDecoderFactory has only one value
options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
options.dbEncoderFactory has only one value
options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
options.safe == false
options.w == 0
options.wtimeout == 0
options.fsync == false
options.j == false
options.socketFactory has only one value
options.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
options.cursorFinalizerEnabled == true
options.writeConcern == null
options.alwaysUseMBeans == false
options.minConnectionsPerHost == 0
options.maxConnectionIdleTime == 0
options.maxConnectionLifeTime == 0
options.heartbeatFrequencyMS == 5000
options.heartbeatConnectRetryFrequencyMS == 10
options.heartbeatConnectTimeoutMS == 20000
options.heartbeatReadTimeoutMS == 20000
options.acceptableLatencyDifferenceMS == 15
options.heartbeatThreadCount == 0
options.requiredReplicaSetName == null
size(authority.serverAddresses[]) == 1
===========================================================================
com.mongodb.Mongo.Mongo(com.mongodb.ServerAddress):::ENTER
addr._host has only one value
addr._host.toString == "localhost"
addr._port == 27017
===========================================================================
com.mongodb.Mongo.Mongo(com.mongodb.ServerAddress):::EXIT
addr._host == orig(addr._host)
addr._host.toString == orig(addr._host.toString)
addr._port == orig(addr._port)
addr._host has only one value
addr._host.toString == "localhost"
addr._port == 27017
===========================================================================
com.mongodb.Mongo.Mongo(com.mongodb.ServerAddress, com.mongodb.MongoOptions):::ENTER
addr._host has only one value
addr._host.toString == "localhost"
addr._port == 27017
options.description == null
options.connectionsPerHost == 10
options.threadsAllowedToBlockForConnectionMultiplier == 5
options.maxWaitTime == 120000
options.connectTimeout == 10000
options.socketTimeout == 0
options.socketKeepAlive == false
options.autoConnectRetry == false
options.maxAutoConnectRetryTime == 0
options.slaveOk == false
options.readPreference == null
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY has only one value
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY_PREFERRED has only one value
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
options.dbDecoderFactory has only one value
options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
options.dbEncoderFactory has only one value
options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
options.safe == false
options.w == 0
options.wtimeout == 0
options.fsync == false
options.j == false
options.socketFactory has only one value
options.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
options.cursorFinalizerEnabled == true
options.writeConcern == null
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
options.alwaysUseMBeans == false
options.minConnectionsPerHost == 0
options.maxConnectionIdleTime == 0
options.maxConnectionLifeTime == 0
options.heartbeatFrequencyMS == 5000
options.heartbeatConnectRetryFrequencyMS == 10
options.heartbeatConnectTimeoutMS == 20000
options.heartbeatReadTimeoutMS == 20000
options.acceptableLatencyDifferenceMS == 15
options.heartbeatThreadCount == 0
options.requiredReplicaSetName == null
===========================================================================
com.mongodb.Mongo.Mongo(com.mongodb.ServerAddress, com.mongodb.MongoOptions):::EXIT
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
addr._host == orig(addr._host)
addr._host.toString == orig(addr._host.toString)
addr._port == orig(addr._port)
options.description == orig(options.description)
options.connectionsPerHost == orig(options.connectionsPerHost)
options.threadsAllowedToBlockForConnectionMultiplier == orig(options.threadsAllowedToBlockForConnectionMultiplier)
options.maxWaitTime == orig(options.maxWaitTime)
options.connectTimeout == orig(options.connectTimeout)
options.socketTimeout == orig(options.socketTimeout)
options.socketKeepAlive == orig(options.socketKeepAlive)
options.autoConnectRetry == orig(options.autoConnectRetry)
options.maxAutoConnectRetryTime == orig(options.maxAutoConnectRetryTime)
options.slaveOk == orig(options.slaveOk)
options.readPreference == orig(options.readPreference)
options.dbDecoderFactory == orig(options.dbDecoderFactory)
options.dbDecoderFactory.getClass().getName() == orig(options.dbDecoderFactory.getClass().getName())
options.dbEncoderFactory == orig(options.dbEncoderFactory)
options.dbEncoderFactory.getClass().getName() == orig(options.dbEncoderFactory.getClass().getName())
options.safe == orig(options.safe)
options.w == orig(options.w)
options.wtimeout == orig(options.wtimeout)
options.fsync == orig(options.fsync)
options.j == orig(options.j)
options.socketFactory == orig(options.socketFactory)
options.socketFactory.getClass().getName() == orig(options.socketFactory.getClass().getName())
options.cursorFinalizerEnabled == orig(options.cursorFinalizerEnabled)
options.writeConcern == orig(options.writeConcern)
options.alwaysUseMBeans == orig(options.alwaysUseMBeans)
options.minConnectionsPerHost == orig(options.minConnectionsPerHost)
options.maxConnectionIdleTime == orig(options.maxConnectionIdleTime)
options.maxConnectionLifeTime == orig(options.maxConnectionLifeTime)
options.heartbeatFrequencyMS == orig(options.heartbeatFrequencyMS)
options.heartbeatConnectRetryFrequencyMS == orig(options.heartbeatConnectRetryFrequencyMS)
options.heartbeatConnectTimeoutMS == orig(options.heartbeatConnectTimeoutMS)
options.heartbeatReadTimeoutMS == orig(options.heartbeatReadTimeoutMS)
options.acceptableLatencyDifferenceMS == orig(options.acceptableLatencyDifferenceMS)
options.heartbeatThreadCount == orig(options.heartbeatThreadCount)
options.requiredReplicaSetName == orig(options.requiredReplicaSetName)
addr._host has only one value
addr._host.toString == "localhost"
addr._port == 27017
options.description == null
options.connectionsPerHost == 10
options.threadsAllowedToBlockForConnectionMultiplier == 5
options.maxWaitTime == 120000
options.connectTimeout == 10000
options.socketTimeout == 0
options.socketKeepAlive == false
options.autoConnectRetry == false
options.maxAutoConnectRetryTime == 0
options.slaveOk == false
options.readPreference == null
options.dbDecoderFactory has only one value
options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
options.dbEncoderFactory has only one value
options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
options.safe == false
options.w == 0
options.wtimeout == 0
options.fsync == false
options.j == false
options.socketFactory has only one value
options.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
options.cursorFinalizerEnabled == true
options.writeConcern == null
options.alwaysUseMBeans == false
options.minConnectionsPerHost == 0
options.maxConnectionIdleTime == 0
options.maxConnectionLifeTime == 0
options.heartbeatFrequencyMS == 5000
options.heartbeatConnectRetryFrequencyMS == 10
options.heartbeatConnectTimeoutMS == 20000
options.heartbeatReadTimeoutMS == 20000
options.acceptableLatencyDifferenceMS == 15
options.heartbeatThreadCount == 0
options.requiredReplicaSetName == null
===========================================================================
com.mongodb.Mongo.Mongo(java.lang.String):::ENTER
host has only one value
host.toString == "localhost"
===========================================================================
com.mongodb.Mongo.Mongo(java.lang.String):::EXIT
host.toString == orig(host.toString)
host.toString == "localhost"
===========================================================================
com.mongodb.Mongo._applyMongoOptions():::ENTER
this._connector == null
this._cleaner == null
===========================================================================
com.mongodb.Mongo._applyMongoOptions():::EXIT
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this._options == orig(this._options)
this._options.description == orig(this._options.description)
this._options.connectionsPerHost == orig(this._options.connectionsPerHost)
this._options.threadsAllowedToBlockForConnectionMultiplier == orig(this._options.threadsAllowedToBlockForConnectionMultiplier)
this._options.maxWaitTime == orig(this._options.maxWaitTime)
this._options.connectTimeout == orig(this._options.connectTimeout)
this._options.socketTimeout == orig(this._options.socketTimeout)
this._options.socketKeepAlive == orig(this._options.socketKeepAlive)
this._options.autoConnectRetry == orig(this._options.autoConnectRetry)
this._options.maxAutoConnectRetryTime == orig(this._options.maxAutoConnectRetryTime)
this._options.slaveOk == orig(this._options.slaveOk)
this._options.readPreference == orig(this._options.readPreference)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this._options.dbDecoderFactory == orig(this._options.dbDecoderFactory)
this._options.dbDecoderFactory.getClass().getName() == orig(this._options.dbDecoderFactory.getClass().getName())
this._options.dbEncoderFactory == orig(this._options.dbEncoderFactory)
this._options.dbEncoderFactory.getClass().getName() == orig(this._options.dbEncoderFactory.getClass().getName())
this._options.safe == orig(this._options.safe)
this._options.w == orig(this._options.w)
this._options.wtimeout == orig(this._options.wtimeout)
this._options.fsync == orig(this._options.fsync)
this._options.j == orig(this._options.j)
this._options.socketFactory == orig(this._options.socketFactory)
this._options.socketFactory.getClass().getName() == orig(this._options.socketFactory.getClass().getName())
this._options.cursorFinalizerEnabled == orig(this._options.cursorFinalizerEnabled)
this._options.writeConcern == orig(this._options.writeConcern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this._options.alwaysUseMBeans == orig(this._options.alwaysUseMBeans)
this._options.minConnectionsPerHost == orig(this._options.minConnectionsPerHost)
this._options.maxConnectionIdleTime == orig(this._options.maxConnectionIdleTime)
this._options.maxConnectionLifeTime == orig(this._options.maxConnectionLifeTime)
this._options.heartbeatFrequencyMS == orig(this._options.heartbeatFrequencyMS)
this._options.heartbeatConnectRetryFrequencyMS == orig(this._options.heartbeatConnectRetryFrequencyMS)
this._options.heartbeatConnectTimeoutMS == orig(this._options.heartbeatConnectTimeoutMS)
this._options.heartbeatReadTimeoutMS == orig(this._options.heartbeatReadTimeoutMS)
this._options.acceptableLatencyDifferenceMS == orig(this._options.acceptableLatencyDifferenceMS)
this._options.heartbeatThreadCount == orig(this._options.heartbeatThreadCount)
this._options.requiredReplicaSetName == orig(this._options.requiredReplicaSetName)
this._connector == orig(this._connector)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this._dbs == orig(this._dbs)
this._dbs.getClass().getName() == orig(this._dbs.getClass().getName())
this._concern == orig(this._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this._concern._w == orig(this._concern._w)
this._concern._w.getClass().getName() == orig(this._concern._w.getClass().getName())
this._concern._wtimeout == orig(this._concern._wtimeout)
this._concern._fsync == orig(this._concern._fsync)
this._concern._j == orig(this._concern._j)
this._concern._continueOnError == orig(this._concern._continueOnError)
this._readPref == orig(this._readPref)
this._readPref.getClass().getName() == orig(this._readPref.getClass().getName())
this._netOptions == orig(this._netOptions)
this._netOptions._parent == orig(this._netOptions._parent)
this._netOptions._options == orig(this._netOptions._options)
this._netOptions._hasOptions == orig(this._netOptions._hasOptions)
this._cleaner == orig(this._cleaner)
this._authority == orig(this._authority)
this._authority.type == orig(this._authority.type)
com.mongodb.MongoAuthority$Type.Direct == orig(com.mongodb.MongoAuthority$Type.Direct)
com.mongodb.MongoAuthority$Type.Set == orig(com.mongodb.MongoAuthority$Type.Set)
com.mongodb.MongoAuthority$Type.$VALUES == orig(com.mongodb.MongoAuthority$Type.$VALUES)
com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName() == orig(com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName())
com.mongodb.MongoAuthority$Type.$VALUES[] == orig(com.mongodb.MongoAuthority$Type.$VALUES[])
this._authority.serverAddresses == orig(this._authority.serverAddresses)
this._authority.serverAddresses[] == orig(this._authority.serverAddresses[])
this._authority.serverAddresses.getClass().getName() == orig(this._authority.serverAddresses.getClass().getName())
this._authority.credentialsStore == orig(this._authority.credentialsStore)
this._authority.credentialsStore.credentialsMap == orig(this._authority.credentialsStore.credentialsMap)
this._authority.credentialsStore.credentialsMap.getClass().getName() == orig(this._authority.credentialsStore.credentialsMap.getClass().getName())
this._authority.credentialsStore.allDatabasesWithCredentials == orig(this._authority.credentialsStore.allDatabasesWithCredentials)
this._authority.credentialsStore.allDatabasesWithCredentials.getClass().getName() == orig(this._authority.credentialsStore.allDatabasesWithCredentials.getClass().getName())
this._bufferPool == orig(this._bufferPool)
this._bufferPool.getClass().getName() == orig(this._bufferPool.getClass().getName())
this._bufferPool._max == orig(this._bufferPool._max)
this._bufferPool._stored == orig(this._bufferPool._stored)
this._bufferPool._stored.getClass().getName() == orig(this._bufferPool._stored.getClass().getName())
this._connector == null
this._cleaner == null
===========================================================================
com.mongodb.Mongo.getAuthority():::ENTER
this._connector._mongo._cleaner == null
this._connector.cluster == null
this._cleaner == null
===========================================================================
com.mongodb.Mongo.getAuthority():::EXIT
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this._options == orig(this._options)
this._options.description == orig(this._options.description)
this._options.connectionsPerHost == orig(this._options.connectionsPerHost)
this._options.threadsAllowedToBlockForConnectionMultiplier == orig(this._options.threadsAllowedToBlockForConnectionMultiplier)
this._options.maxWaitTime == orig(this._options.maxWaitTime)
this._options.connectTimeout == orig(this._options.connectTimeout)
this._options.socketTimeout == orig(this._options.socketTimeout)
this._options.socketKeepAlive == orig(this._options.socketKeepAlive)
this._options.autoConnectRetry == orig(this._options.autoConnectRetry)
this._options.maxAutoConnectRetryTime == orig(this._options.maxAutoConnectRetryTime)
this._options.slaveOk == orig(this._options.slaveOk)
this._options.readPreference == orig(this._options.readPreference)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this._options.dbDecoderFactory == orig(this._options.dbDecoderFactory)
this._options.dbDecoderFactory.getClass().getName() == orig(this._options.dbDecoderFactory.getClass().getName())
this._options.dbEncoderFactory == orig(this._options.dbEncoderFactory)
this._options.dbEncoderFactory.getClass().getName() == orig(this._options.dbEncoderFactory.getClass().getName())
this._options.safe == orig(this._options.safe)
this._options.w == orig(this._options.w)
this._options.wtimeout == orig(this._options.wtimeout)
this._options.fsync == orig(this._options.fsync)
this._options.j == orig(this._options.j)
this._options.socketFactory == orig(this._options.socketFactory)
this._options.socketFactory.getClass().getName() == orig(this._options.socketFactory.getClass().getName())
this._options.cursorFinalizerEnabled == orig(this._options.cursorFinalizerEnabled)
this._options.writeConcern == orig(this._options.writeConcern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this._options.alwaysUseMBeans == orig(this._options.alwaysUseMBeans)
this._options.minConnectionsPerHost == orig(this._options.minConnectionsPerHost)
this._options.maxConnectionIdleTime == orig(this._options.maxConnectionIdleTime)
this._options.maxConnectionLifeTime == orig(this._options.maxConnectionLifeTime)
this._options.heartbeatFrequencyMS == orig(this._options.heartbeatFrequencyMS)
this._options.heartbeatConnectRetryFrequencyMS == orig(this._options.heartbeatConnectRetryFrequencyMS)
this._options.heartbeatConnectTimeoutMS == orig(this._options.heartbeatConnectTimeoutMS)
this._options.heartbeatReadTimeoutMS == orig(this._options.heartbeatReadTimeoutMS)
this._options.acceptableLatencyDifferenceMS == orig(this._options.acceptableLatencyDifferenceMS)
this._options.heartbeatThreadCount == orig(this._options.heartbeatThreadCount)
this._options.requiredReplicaSetName == orig(this._options.requiredReplicaSetName)
this._connector == orig(this._connector)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
this._connector._closed == orig(this._connector._closed)
this._connector._mongo == orig(this._connector._mongo)
this._connector._mongo._options == orig(this._connector._mongo._options)
this._connector._mongo._connector == orig(this._connector._mongo._connector)
this._connector._mongo._dbs == orig(this._connector._mongo._dbs)
this._connector._mongo._dbs.getClass().getName() == orig(this._connector._mongo._dbs.getClass().getName())
this._connector._mongo._concern == orig(this._connector._mongo._concern)
this._connector._mongo._readPref == orig(this._connector._mongo._readPref)
this._connector._mongo._readPref.getClass().getName() == orig(this._connector._mongo._readPref.getClass().getName())
this._connector._mongo._netOptions == orig(this._connector._mongo._netOptions)
this._connector._mongo._cleaner == orig(this._connector._mongo._cleaner)
this._connector._mongo._authority == orig(this._connector._mongo._authority)
this._connector._mongo._bufferPool == orig(this._connector._mongo._bufferPool)
this._connector._mongo._bufferPool.getClass().getName() == orig(this._connector._mongo._bufferPool.getClass().getName())
this._connector.cluster == orig(this._connector.cluster)
this._connector._myPort == orig(this._connector._myPort)
this._connector._myPort.pinnedRequestStatusThreadLocal == orig(this._connector._myPort.pinnedRequestStatusThreadLocal)
com.mongodb.DBTCPConnector.this == orig(com.mongodb.DBTCPConnector.this)
this._connector.connectionMode == orig(this._connector.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
this._connector.type == orig(this._connector.type)
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this._connector.mongosHAServerSelector == orig(this._connector.mongosHAServerSelector)
this._dbs == orig(this._dbs)
this._dbs.getClass().getName() == orig(this._dbs.getClass().getName())
this._concern == orig(this._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this._concern._w == orig(this._concern._w)
this._concern._w.getClass().getName() == orig(this._concern._w.getClass().getName())
this._concern._wtimeout == orig(this._concern._wtimeout)
this._concern._fsync == orig(this._concern._fsync)
this._concern._j == orig(this._concern._j)
this._concern._continueOnError == orig(this._concern._continueOnError)
this._readPref == orig(this._readPref)
this._readPref.getClass().getName() == orig(this._readPref.getClass().getName())
this._netOptions == orig(this._netOptions)
this._netOptions._parent == orig(this._netOptions._parent)
this._netOptions._options == orig(this._netOptions._options)
this._netOptions._hasOptions == orig(this._netOptions._hasOptions)
this._cleaner == orig(this._cleaner)
this._authority == orig(this._authority)
this._authority.type == orig(this._authority.type)
com.mongodb.MongoAuthority$Type.Direct == orig(com.mongodb.MongoAuthority$Type.Direct)
com.mongodb.MongoAuthority$Type.Set == orig(com.mongodb.MongoAuthority$Type.Set)
com.mongodb.MongoAuthority$Type.$VALUES == orig(com.mongodb.MongoAuthority$Type.$VALUES)
com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName() == orig(com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName())
com.mongodb.MongoAuthority$Type.$VALUES[] == orig(com.mongodb.MongoAuthority$Type.$VALUES[])
this._authority.serverAddresses == orig(this._authority.serverAddresses)
this._authority.serverAddresses[] == orig(this._authority.serverAddresses[])
this._authority.serverAddresses.getClass().getName() == orig(this._authority.serverAddresses.getClass().getName())
this._authority.credentialsStore == orig(this._authority.credentialsStore)
this._authority.credentialsStore.credentialsMap == orig(this._authority.credentialsStore.credentialsMap)
this._authority.credentialsStore.credentialsMap.getClass().getName() == orig(this._authority.credentialsStore.credentialsMap.getClass().getName())
this._authority.credentialsStore.allDatabasesWithCredentials == orig(this._authority.credentialsStore.allDatabasesWithCredentials)
this._authority.credentialsStore.allDatabasesWithCredentials.getClass().getName() == orig(this._authority.credentialsStore.allDatabasesWithCredentials.getClass().getName())
this._bufferPool == orig(this._bufferPool)
this._bufferPool.getClass().getName() == orig(this._bufferPool.getClass().getName())
this._bufferPool._max == orig(this._bufferPool._max)
this._bufferPool._stored == orig(this._bufferPool._stored)
this._bufferPool._stored.getClass().getName() == orig(this._bufferPool._stored.getClass().getName())
this._connector._mongo._cleaner == null
this._connector.cluster == null
this._cleaner == null
return.type has only one value
return.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
return.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
return.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
return.credentialsStore.credentialsMap.getClass().getName() == java.util.HashMap.class
return.credentialsStore.allDatabasesWithCredentials.getClass().getName() == java.util.HashSet.class
size(return.serverAddresses[]) == 1
===========================================================================
com.mongodb.Mongo.getDB(java.lang.String):::ENTER
dbname.toString one of { "SimpleDynamic1743934291905", "test" }
===========================================================================
com.mongodb.Mongo.getDB(java.lang.String):::EXIT371
===========================================================================
com.mongodb.Mongo.getDB(java.lang.String):::EXIT
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this._options == orig(this._options)
this._options.description == orig(this._options.description)
this._options.connectionsPerHost == orig(this._options.connectionsPerHost)
this._options.threadsAllowedToBlockForConnectionMultiplier == orig(this._options.threadsAllowedToBlockForConnectionMultiplier)
this._options.maxWaitTime == orig(this._options.maxWaitTime)
this._options.connectTimeout == orig(this._options.connectTimeout)
this._options.socketTimeout == orig(this._options.socketTimeout)
this._options.socketKeepAlive == orig(this._options.socketKeepAlive)
this._options.autoConnectRetry == orig(this._options.autoConnectRetry)
this._options.maxAutoConnectRetryTime == orig(this._options.maxAutoConnectRetryTime)
this._options.slaveOk == orig(this._options.slaveOk)
this._options.readPreference == orig(this._options.readPreference)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this._options.dbDecoderFactory == orig(this._options.dbDecoderFactory)
this._options.dbDecoderFactory.getClass().getName() == orig(this._options.dbDecoderFactory.getClass().getName())
this._options.dbEncoderFactory == orig(this._options.dbEncoderFactory)
this._options.dbEncoderFactory.getClass().getName() == orig(this._options.dbEncoderFactory.getClass().getName())
this._options.safe == orig(this._options.safe)
this._options.w == orig(this._options.w)
this._options.wtimeout == orig(this._options.wtimeout)
this._options.fsync == orig(this._options.fsync)
this._options.j == orig(this._options.j)
this._options.socketFactory == orig(this._options.socketFactory)
this._options.socketFactory.getClass().getName() == orig(this._options.socketFactory.getClass().getName())
this._options.cursorFinalizerEnabled == orig(this._options.cursorFinalizerEnabled)
this._options.writeConcern == orig(this._options.writeConcern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this._options.alwaysUseMBeans == orig(this._options.alwaysUseMBeans)
this._options.minConnectionsPerHost == orig(this._options.minConnectionsPerHost)
this._options.maxConnectionIdleTime == orig(this._options.maxConnectionIdleTime)
this._options.maxConnectionLifeTime == orig(this._options.maxConnectionLifeTime)
this._options.heartbeatFrequencyMS == orig(this._options.heartbeatFrequencyMS)
this._options.heartbeatConnectRetryFrequencyMS == orig(this._options.heartbeatConnectRetryFrequencyMS)
this._options.heartbeatConnectTimeoutMS == orig(this._options.heartbeatConnectTimeoutMS)
this._options.heartbeatReadTimeoutMS == orig(this._options.heartbeatReadTimeoutMS)
this._options.acceptableLatencyDifferenceMS == orig(this._options.acceptableLatencyDifferenceMS)
this._options.heartbeatThreadCount == orig(this._options.heartbeatThreadCount)
this._options.requiredReplicaSetName == orig(this._options.requiredReplicaSetName)
this._connector == orig(this._connector)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
this._connector._closed == orig(this._connector._closed)
this._connector._mongo == orig(this._connector._mongo)
this._connector._mongo._options == orig(this._connector._mongo._options)
this._connector._mongo._connector == orig(this._connector._mongo._connector)
this._connector._mongo._dbs == orig(this._connector._mongo._dbs)
this._connector._mongo._dbs.getClass().getName() == orig(this._connector._mongo._dbs.getClass().getName())
this._connector._mongo._concern == orig(this._connector._mongo._concern)
this._connector._mongo._readPref == orig(this._connector._mongo._readPref)
this._connector._mongo._readPref.getClass().getName() == orig(this._connector._mongo._readPref.getClass().getName())
this._connector._mongo._netOptions == orig(this._connector._mongo._netOptions)
this._connector._mongo._cleaner == orig(this._connector._mongo._cleaner)
this._connector._mongo._authority == orig(this._connector._mongo._authority)
this._connector._mongo._bufferPool == orig(this._connector._mongo._bufferPool)
this._connector._mongo._bufferPool.getClass().getName() == orig(this._connector._mongo._bufferPool.getClass().getName())
this._connector.cluster == orig(this._connector.cluster)
this._connector.cluster.getClass().getName() == orig(this._connector.cluster.getClass().getName())
this._connector._myPort == orig(this._connector._myPort)
this._connector._myPort.pinnedRequestStatusThreadLocal == orig(this._connector._myPort.pinnedRequestStatusThreadLocal)
com.mongodb.DBTCPConnector.this == orig(com.mongodb.DBTCPConnector.this)
this._connector.connectionMode == orig(this._connector.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
this._connector.type == orig(this._connector.type)
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this._connector.mongosHAServerSelector == orig(this._connector.mongosHAServerSelector)
this._dbs == orig(this._dbs)
this._dbs.getClass().getName() == orig(this._dbs.getClass().getName())
this._concern == orig(this._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this._concern._w == orig(this._concern._w)
this._concern._w.getClass().getName() == orig(this._concern._w.getClass().getName())
this._concern._wtimeout == orig(this._concern._wtimeout)
this._concern._fsync == orig(this._concern._fsync)
this._concern._j == orig(this._concern._j)
this._concern._continueOnError == orig(this._concern._continueOnError)
this._readPref == orig(this._readPref)
this._readPref.getClass().getName() == orig(this._readPref.getClass().getName())
this._netOptions == orig(this._netOptions)
this._netOptions._parent == orig(this._netOptions._parent)
this._netOptions._options == orig(this._netOptions._options)
this._netOptions._hasOptions == orig(this._netOptions._hasOptions)
this._cleaner == orig(this._cleaner)
com.mongodb.Mongo.this == orig(com.mongodb.Mongo.this)
com.mongodb.Mongo.this._options == orig(com.mongodb.Mongo.this._options)
com.mongodb.Mongo.this._connector == orig(com.mongodb.Mongo.this._connector)
com.mongodb.Mongo.this._dbs == orig(com.mongodb.Mongo.this._dbs)
com.mongodb.Mongo.this._dbs.getClass().getName() == orig(com.mongodb.Mongo.this._dbs.getClass().getName())
com.mongodb.Mongo.this._concern == orig(com.mongodb.Mongo.this._concern)
com.mongodb.Mongo.this._readPref == orig(com.mongodb.Mongo.this._readPref)
com.mongodb.Mongo.this._readPref.getClass().getName() == orig(com.mongodb.Mongo.this._readPref.getClass().getName())
com.mongodb.Mongo.this._netOptions == orig(com.mongodb.Mongo.this._netOptions)
com.mongodb.Mongo.this._cleaner == orig(com.mongodb.Mongo.this._cleaner)
com.mongodb.Mongo.this._authority == orig(com.mongodb.Mongo.this._authority)
com.mongodb.Mongo.this._bufferPool == orig(com.mongodb.Mongo.this._bufferPool)
com.mongodb.Mongo.this._bufferPool.getClass().getName() == orig(com.mongodb.Mongo.this._bufferPool.getClass().getName())
this._authority == orig(this._authority)
this._authority.type == orig(this._authority.type)
com.mongodb.MongoAuthority$Type.Direct == orig(com.mongodb.MongoAuthority$Type.Direct)
com.mongodb.MongoAuthority$Type.Set == orig(com.mongodb.MongoAuthority$Type.Set)
com.mongodb.MongoAuthority$Type.$VALUES == orig(com.mongodb.MongoAuthority$Type.$VALUES)
com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName() == orig(com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName())
com.mongodb.MongoAuthority$Type.$VALUES[] == orig(com.mongodb.MongoAuthority$Type.$VALUES[])
this._authority.serverAddresses == orig(this._authority.serverAddresses)
this._authority.serverAddresses[] == orig(this._authority.serverAddresses[])
this._authority.serverAddresses.getClass().getName() == orig(this._authority.serverAddresses.getClass().getName())
this._authority.credentialsStore == orig(this._authority.credentialsStore)
this._authority.credentialsStore.credentialsMap == orig(this._authority.credentialsStore.credentialsMap)
this._authority.credentialsStore.credentialsMap.getClass().getName() == orig(this._authority.credentialsStore.credentialsMap.getClass().getName())
this._authority.credentialsStore.allDatabasesWithCredentials == orig(this._authority.credentialsStore.allDatabasesWithCredentials)
this._authority.credentialsStore.allDatabasesWithCredentials.getClass().getName() == orig(this._authority.credentialsStore.allDatabasesWithCredentials.getClass().getName())
this._bufferPool == orig(this._bufferPool)
this._bufferPool.getClass().getName() == orig(this._bufferPool.getClass().getName())
this._bufferPool._max == orig(this._bufferPool._max)
this._bufferPool._stored == orig(this._bufferPool._stored)
this._bufferPool._stored.getClass().getName() == orig(this._bufferPool._stored.getClass().getName())
dbname.toString == orig(dbname.toString)
dbname.toString one of { "SimpleDynamic1743934291905", "test" }
return.getClass().getName() == com.mongodb.DBApiLayer.class
com.mongodb.DB._obedientCommands has only one value
com.mongodb.DB._obedientCommands.getClass().getName() == java.util.HashSet.class
return._mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
return._mongo._concern has only one value
return._mongo._readPref has only one value
return._mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
return._mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
return._name.toString one of { "SimpleDynamic1743934291905", "test" }
return._readOnly == false
return._concern == null
return._readPref == null
return._options._options == 0
return._options._hasOptions == false
return.authenticationTestCommandResult == null
===========================================================================
com.mongodb.Mongo.getMongoOptions():::ENTER
this._options != null
com.mongodb.Mongo.this has only one value
com.mongodb.Mongo.this._options has only one value
com.mongodb.Mongo.this._connector has only one value
com.mongodb.Mongo.this._dbs has only one value
com.mongodb.Mongo.this._netOptions has only one value
com.mongodb.Mongo.this._cleaner has only one value
com.mongodb.Mongo.this._authority has only one value
com.mongodb.Mongo.this._bufferPool has only one value
this._authority != null
===========================================================================
com.mongodb.Mongo.getMongoOptions():::EXIT
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this._options == orig(this._options)
this._options.description == orig(this._options.description)
this._options.connectionsPerHost == orig(this._options.connectionsPerHost)
this._options.threadsAllowedToBlockForConnectionMultiplier == orig(this._options.threadsAllowedToBlockForConnectionMultiplier)
this._options.maxWaitTime == orig(this._options.maxWaitTime)
this._options.connectTimeout == orig(this._options.connectTimeout)
this._options.socketTimeout == orig(this._options.socketTimeout)
this._options.socketKeepAlive == orig(this._options.socketKeepAlive)
this._options.autoConnectRetry == orig(this._options.autoConnectRetry)
this._options.maxAutoConnectRetryTime == orig(this._options.maxAutoConnectRetryTime)
this._options.slaveOk == orig(this._options.slaveOk)
this._options.readPreference == orig(this._options.readPreference)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this._options.dbDecoderFactory == orig(this._options.dbDecoderFactory)
this._options.dbDecoderFactory.getClass().getName() == orig(this._options.dbDecoderFactory.getClass().getName())
this._options.dbEncoderFactory == orig(this._options.dbEncoderFactory)
this._options.dbEncoderFactory.getClass().getName() == orig(this._options.dbEncoderFactory.getClass().getName())
this._options.safe == orig(this._options.safe)
this._options.w == orig(this._options.w)
this._options.wtimeout == orig(this._options.wtimeout)
this._options.fsync == orig(this._options.fsync)
this._options.j == orig(this._options.j)
this._options.socketFactory == orig(this._options.socketFactory)
this._options.socketFactory.getClass().getName() == orig(this._options.socketFactory.getClass().getName())
this._options.cursorFinalizerEnabled == orig(this._options.cursorFinalizerEnabled)
this._options.writeConcern == orig(this._options.writeConcern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this._options.alwaysUseMBeans == orig(this._options.alwaysUseMBeans)
this._options.minConnectionsPerHost == orig(this._options.minConnectionsPerHost)
this._options.maxConnectionIdleTime == orig(this._options.maxConnectionIdleTime)
this._options.maxConnectionLifeTime == orig(this._options.maxConnectionLifeTime)
this._options.heartbeatFrequencyMS == orig(this._options.heartbeatFrequencyMS)
this._options.heartbeatConnectRetryFrequencyMS == orig(this._options.heartbeatConnectRetryFrequencyMS)
this._options.heartbeatConnectTimeoutMS == orig(this._options.heartbeatConnectTimeoutMS)
this._options.heartbeatReadTimeoutMS == orig(this._options.heartbeatReadTimeoutMS)
this._options.acceptableLatencyDifferenceMS == orig(this._options.acceptableLatencyDifferenceMS)
this._options.heartbeatThreadCount == orig(this._options.heartbeatThreadCount)
this._options.requiredReplicaSetName == orig(this._options.requiredReplicaSetName)
this._connector == orig(this._connector)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
this._connector._closed == orig(this._connector._closed)
this._connector._mongo == orig(this._connector._mongo)
this._connector._mongo._options == orig(this._connector._mongo._options)
this._connector._mongo._connector == orig(this._connector._mongo._connector)
this._connector._mongo._dbs == orig(this._connector._mongo._dbs)
this._connector._mongo._dbs.getClass().getName() == orig(this._connector._mongo._dbs.getClass().getName())
this._connector._mongo._concern == orig(this._connector._mongo._concern)
this._connector._mongo._readPref == orig(this._connector._mongo._readPref)
this._connector._mongo._readPref.getClass().getName() == orig(this._connector._mongo._readPref.getClass().getName())
this._connector._mongo._netOptions == orig(this._connector._mongo._netOptions)
this._connector._mongo._cleaner == orig(this._connector._mongo._cleaner)
this._connector._mongo._authority == orig(this._connector._mongo._authority)
this._connector._mongo._bufferPool == orig(this._connector._mongo._bufferPool)
this._connector._mongo._bufferPool.getClass().getName() == orig(this._connector._mongo._bufferPool.getClass().getName())
this._connector.cluster == orig(this._connector.cluster)
this._connector.cluster.getClass().getName() == orig(this._connector.cluster.getClass().getName())
this._connector._myPort == orig(this._connector._myPort)
this._connector._myPort.pinnedRequestStatusThreadLocal == orig(this._connector._myPort.pinnedRequestStatusThreadLocal)
com.mongodb.DBTCPConnector.this == orig(com.mongodb.DBTCPConnector.this)
this._connector.connectionMode == orig(this._connector.connectionMode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
this._connector.type == orig(this._connector.type)
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this._connector.mongosHAServerSelector == orig(this._connector.mongosHAServerSelector)
this._dbs == orig(this._dbs)
this._dbs.getClass().getName() == orig(this._dbs.getClass().getName())
this._concern == orig(this._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this._concern._w == orig(this._concern._w)
this._concern._w.getClass().getName() == orig(this._concern._w.getClass().getName())
this._concern._wtimeout == orig(this._concern._wtimeout)
this._concern._fsync == orig(this._concern._fsync)
this._concern._j == orig(this._concern._j)
this._concern._continueOnError == orig(this._concern._continueOnError)
this._readPref == orig(this._readPref)
this._readPref.getClass().getName() == orig(this._readPref.getClass().getName())
this._netOptions == orig(this._netOptions)
this._netOptions._parent == orig(this._netOptions._parent)
this._netOptions._options == orig(this._netOptions._options)
this._netOptions._hasOptions == orig(this._netOptions._hasOptions)
this._cleaner == orig(this._cleaner)
com.mongodb.Mongo.this == orig(com.mongodb.Mongo.this)
com.mongodb.Mongo.this._options == orig(com.mongodb.Mongo.this._options)
com.mongodb.Mongo.this._connector == orig(com.mongodb.Mongo.this._connector)
com.mongodb.Mongo.this._dbs == orig(com.mongodb.Mongo.this._dbs)
com.mongodb.Mongo.this._dbs.getClass().getName() == orig(com.mongodb.Mongo.this._dbs.getClass().getName())
com.mongodb.Mongo.this._concern == orig(com.mongodb.Mongo.this._concern)
com.mongodb.Mongo.this._readPref == orig(com.mongodb.Mongo.this._readPref)
com.mongodb.Mongo.this._readPref.getClass().getName() == orig(com.mongodb.Mongo.this._readPref.getClass().getName())
com.mongodb.Mongo.this._netOptions == orig(com.mongodb.Mongo.this._netOptions)
com.mongodb.Mongo.this._cleaner == orig(com.mongodb.Mongo.this._cleaner)
com.mongodb.Mongo.this._authority == orig(com.mongodb.Mongo.this._authority)
com.mongodb.Mongo.this._bufferPool == orig(com.mongodb.Mongo.this._bufferPool)
com.mongodb.Mongo.this._bufferPool.getClass().getName() == orig(com.mongodb.Mongo.this._bufferPool.getClass().getName())
this._authority == orig(this._authority)
this._authority.type == orig(this._authority.type)
com.mongodb.MongoAuthority$Type.Direct == orig(com.mongodb.MongoAuthority$Type.Direct)
com.mongodb.MongoAuthority$Type.Set == orig(com.mongodb.MongoAuthority$Type.Set)
com.mongodb.MongoAuthority$Type.$VALUES == orig(com.mongodb.MongoAuthority$Type.$VALUES)
com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName() == orig(com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName())
com.mongodb.MongoAuthority$Type.$VALUES[] == orig(com.mongodb.MongoAuthority$Type.$VALUES[])
this._authority.serverAddresses == orig(this._authority.serverAddresses)
this._authority.serverAddresses[] == orig(this._authority.serverAddresses[])
this._authority.serverAddresses.getClass().getName() == orig(this._authority.serverAddresses.getClass().getName())
this._authority.credentialsStore == orig(this._authority.credentialsStore)
this._authority.credentialsStore.credentialsMap == orig(this._authority.credentialsStore.credentialsMap)
this._authority.credentialsStore.credentialsMap.getClass().getName() == orig(this._authority.credentialsStore.credentialsMap.getClass().getName())
this._authority.credentialsStore.allDatabasesWithCredentials == orig(this._authority.credentialsStore.allDatabasesWithCredentials)
this._authority.credentialsStore.allDatabasesWithCredentials.getClass().getName() == orig(this._authority.credentialsStore.allDatabasesWithCredentials.getClass().getName())
this._bufferPool == orig(this._bufferPool)
this._bufferPool.getClass().getName() == orig(this._bufferPool.getClass().getName())
this._bufferPool._max == orig(this._bufferPool._max)
this._bufferPool._stored == orig(this._bufferPool._stored)
this._bufferPool._stored.getClass().getName() == orig(this._bufferPool._stored.getClass().getName())
this._options != null
com.mongodb.Mongo.this has only one value
com.mongodb.Mongo.this._options has only one value
com.mongodb.Mongo.this._connector has only one value
com.mongodb.Mongo.this._dbs has only one value
com.mongodb.Mongo.this._netOptions has only one value
com.mongodb.Mongo.this._cleaner has only one value
com.mongodb.Mongo.this._authority has only one value
com.mongodb.Mongo.this._bufferPool has only one value
this._authority != null
return != null
return.description == null
return.connectionsPerHost == 10
return.threadsAllowedToBlockForConnectionMultiplier == 5
return.maxWaitTime == 120000
return.connectTimeout == 10000
return.socketTimeout == 0
return.socketKeepAlive == false
return.autoConnectRetry == false
return.maxAutoConnectRetryTime == 0
return.slaveOk == false
return.readPreference == null
return.dbDecoderFactory has only one value
return.dbDecoderFactory != null
return.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
return.dbEncoderFactory has only one value
return.dbEncoderFactory != null
return.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
return.safe == false
return.w == 0
return.wtimeout == 0
return.fsync == false
return.j == false
return.socketFactory has only one value
return.socketFactory != null
return.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
return.cursorFinalizerEnabled == true
return.writeConcern == null
return.alwaysUseMBeans == false
return.minConnectionsPerHost == 0
return.maxConnectionIdleTime == 0
return.maxConnectionLifeTime == 0
return.heartbeatFrequencyMS == 5000
return.heartbeatConnectRetryFrequencyMS == 10
return.heartbeatConnectTimeoutMS == 20000
return.heartbeatReadTimeoutMS == 20000
return.acceptableLatencyDifferenceMS == 15
return.heartbeatThreadCount == 0
return.requiredReplicaSetName == null
===========================================================================
com.mongodb.Mongo.getVersion():::ENTER
this._options == null
this._connector == null
this._cleaner == null
this._authority == null
===========================================================================
com.mongodb.Mongo.getVersion():::EXIT
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this._options == orig(this._options)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this._connector == orig(this._connector)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this._dbs == orig(this._dbs)
this._dbs.getClass().getName() == orig(this._dbs.getClass().getName())
this._concern == orig(this._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this._concern._w == orig(this._concern._w)
this._concern._w.getClass().getName() == orig(this._concern._w.getClass().getName())
this._concern._wtimeout == orig(this._concern._wtimeout)
this._concern._fsync == orig(this._concern._fsync)
this._concern._j == orig(this._concern._j)
this._concern._continueOnError == orig(this._concern._continueOnError)
this._readPref == orig(this._readPref)
this._readPref.getClass().getName() == orig(this._readPref.getClass().getName())
this._netOptions == orig(this._netOptions)
this._netOptions._parent == orig(this._netOptions._parent)
this._netOptions._options == orig(this._netOptions._options)
this._netOptions._hasOptions == orig(this._netOptions._hasOptions)
this._cleaner == orig(this._cleaner)
this._authority == orig(this._authority)
com.mongodb.MongoAuthority$Type.Direct == orig(com.mongodb.MongoAuthority$Type.Direct)
com.mongodb.MongoAuthority$Type.Set == orig(com.mongodb.MongoAuthority$Type.Set)
com.mongodb.MongoAuthority$Type.$VALUES == orig(com.mongodb.MongoAuthority$Type.$VALUES)
com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName() == orig(com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName())
com.mongodb.MongoAuthority$Type.$VALUES[] == orig(com.mongodb.MongoAuthority$Type.$VALUES[])
this._bufferPool == orig(this._bufferPool)
this._bufferPool.getClass().getName() == orig(this._bufferPool.getClass().getName())
this._bufferPool._max == orig(this._bufferPool._max)
this._bufferPool._stored == orig(this._bufferPool._stored)
this._bufferPool._stored.getClass().getName() == orig(this._bufferPool._stored.getClass().getName())
this._options == null
this._connector == null
this._cleaner == null
this._authority == null
return has only one value
return.toString == "2.12.2"
===========================================================================
com.mongodb.Mongo.setWriteConcern(com.mongodb.WriteConcern):::ENTER
this._connector == null
this._cleaner == null
concern has only one value
concern._w has only one value
concern._w.getClass().getName() == java.lang.Integer.class
concern._wtimeout == 0
concern._fsync == false
concern._j == false
concern._continueOnError == false
===========================================================================
com.mongodb.Mongo.setWriteConcern(com.mongodb.WriteConcern):::EXIT
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this._options == orig(this._options)
this._options.description == orig(this._options.description)
this._options.connectionsPerHost == orig(this._options.connectionsPerHost)
this._options.threadsAllowedToBlockForConnectionMultiplier == orig(this._options.threadsAllowedToBlockForConnectionMultiplier)
this._options.maxWaitTime == orig(this._options.maxWaitTime)
this._options.connectTimeout == orig(this._options.connectTimeout)
this._options.socketTimeout == orig(this._options.socketTimeout)
this._options.socketKeepAlive == orig(this._options.socketKeepAlive)
this._options.autoConnectRetry == orig(this._options.autoConnectRetry)
this._options.maxAutoConnectRetryTime == orig(this._options.maxAutoConnectRetryTime)
this._options.slaveOk == orig(this._options.slaveOk)
this._options.readPreference == orig(this._options.readPreference)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this._options.dbDecoderFactory == orig(this._options.dbDecoderFactory)
this._options.dbDecoderFactory.getClass().getName() == orig(this._options.dbDecoderFactory.getClass().getName())
this._options.dbEncoderFactory == orig(this._options.dbEncoderFactory)
this._options.dbEncoderFactory.getClass().getName() == orig(this._options.dbEncoderFactory.getClass().getName())
this._options.safe == orig(this._options.safe)
this._options.w == orig(this._options.w)
this._options.wtimeout == orig(this._options.wtimeout)
this._options.fsync == orig(this._options.fsync)
this._options.j == orig(this._options.j)
this._options.socketFactory == orig(this._options.socketFactory)
this._options.socketFactory.getClass().getName() == orig(this._options.socketFactory.getClass().getName())
this._options.cursorFinalizerEnabled == orig(this._options.cursorFinalizerEnabled)
this._options.writeConcern == orig(this._options.writeConcern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this._options.alwaysUseMBeans == orig(this._options.alwaysUseMBeans)
this._options.minConnectionsPerHost == orig(this._options.minConnectionsPerHost)
this._options.maxConnectionIdleTime == orig(this._options.maxConnectionIdleTime)
this._options.maxConnectionLifeTime == orig(this._options.maxConnectionLifeTime)
this._options.heartbeatFrequencyMS == orig(this._options.heartbeatFrequencyMS)
this._options.heartbeatConnectRetryFrequencyMS == orig(this._options.heartbeatConnectRetryFrequencyMS)
this._options.heartbeatConnectTimeoutMS == orig(this._options.heartbeatConnectTimeoutMS)
this._options.heartbeatReadTimeoutMS == orig(this._options.heartbeatReadTimeoutMS)
this._options.acceptableLatencyDifferenceMS == orig(this._options.acceptableLatencyDifferenceMS)
this._options.heartbeatThreadCount == orig(this._options.heartbeatThreadCount)
this._options.requiredReplicaSetName == orig(this._options.requiredReplicaSetName)
this._connector == orig(this._connector)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this._dbs == orig(this._dbs)
this._dbs.getClass().getName() == orig(this._dbs.getClass().getName())
this._concern == orig(this._concern)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this._concern._w == orig(this._concern._w)
this._concern._w.getClass().getName() == orig(this._concern._w.getClass().getName())
this._concern._wtimeout == orig(this._concern._wtimeout)
this._concern._fsync == orig(this._concern._fsync)
this._concern._j == orig(this._concern._j)
this._concern._continueOnError == orig(this._concern._continueOnError)
this._readPref == orig(this._readPref)
this._readPref.getClass().getName() == orig(this._readPref.getClass().getName())
this._netOptions == orig(this._netOptions)
this._netOptions._parent == orig(this._netOptions._parent)
this._netOptions._options == orig(this._netOptions._options)
this._netOptions._hasOptions == orig(this._netOptions._hasOptions)
this._cleaner == orig(this._cleaner)
this._authority == orig(this._authority)
this._authority.type == orig(this._authority.type)
com.mongodb.MongoAuthority$Type.Direct == orig(com.mongodb.MongoAuthority$Type.Direct)
com.mongodb.MongoAuthority$Type.Set == orig(com.mongodb.MongoAuthority$Type.Set)
com.mongodb.MongoAuthority$Type.$VALUES == orig(com.mongodb.MongoAuthority$Type.$VALUES)
com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName() == orig(com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName())
com.mongodb.MongoAuthority$Type.$VALUES[] == orig(com.mongodb.MongoAuthority$Type.$VALUES[])
this._authority.serverAddresses == orig(this._authority.serverAddresses)
this._authority.serverAddresses[] == orig(this._authority.serverAddresses[])
this._authority.serverAddresses.getClass().getName() == orig(this._authority.serverAddresses.getClass().getName())
this._authority.credentialsStore == orig(this._authority.credentialsStore)
this._authority.credentialsStore.credentialsMap == orig(this._authority.credentialsStore.credentialsMap)
this._authority.credentialsStore.credentialsMap.getClass().getName() == orig(this._authority.credentialsStore.credentialsMap.getClass().getName())
this._authority.credentialsStore.allDatabasesWithCredentials == orig(this._authority.credentialsStore.allDatabasesWithCredentials)
this._authority.credentialsStore.allDatabasesWithCredentials.getClass().getName() == orig(this._authority.credentialsStore.allDatabasesWithCredentials.getClass().getName())
this._bufferPool == orig(this._bufferPool)
this._bufferPool.getClass().getName() == orig(this._bufferPool.getClass().getName())
this._bufferPool._max == orig(this._bufferPool._max)
this._bufferPool._stored == orig(this._bufferPool._stored)
this._bufferPool._stored.getClass().getName() == orig(this._bufferPool._stored.getClass().getName())
concern._w == orig(concern._w)
concern._w.getClass().getName() == orig(concern._w.getClass().getName())
concern._wtimeout == orig(concern._wtimeout)
concern._fsync == orig(concern._fsync)
concern._j == orig(concern._j)
concern._continueOnError == orig(concern._continueOnError)
this._connector == null
this._cleaner == null
concern._w has only one value
concern._w.getClass().getName() == java.lang.Integer.class
concern._wtimeout == 0
concern._fsync == false
concern._j == false
concern._continueOnError == false
===========================================================================
com.mongodb.MongoAuthority$Type:::OBJECT
===========================================================================
com.mongodb.MongoAuthority$Type.Type(java.lang.String, int):::ENTER
$hidden$1.toString one of { "Direct", "Set" }
$hidden$2 one of { 0, 1 }
===========================================================================
com.mongodb.MongoAuthority$Type.Type(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString one of { "Direct", "Set" }
===========================================================================
com.mongodb.MongoAuthority:::OBJECT
this.type has only one value
this.type != null
com.mongodb.MongoAuthority$Type.Direct has only one value
com.mongodb.MongoAuthority$Type.Direct != null
com.mongodb.MongoAuthority$Type.Set has only one value
com.mongodb.MongoAuthority$Type.Set != null
com.mongodb.MongoAuthority$Type.$VALUES has only one value
com.mongodb.MongoAuthority$Type.$VALUES != null
com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName() == com.mongodb.MongoAuthority$Type[].class
com.mongodb.MongoAuthority$Type.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.MongoAuthority$Type.$VALUES[] elements != null
com.mongodb.MongoAuthority$Type.$VALUES[].getClass().getName() == [com.mongodb.MongoAuthority.Type, com.mongodb.MongoAuthority.Type]
com.mongodb.MongoAuthority$Type.$VALUES[].getClass().getName() elements == com.mongodb.MongoAuthority.Type.class
this.serverAddresses != null
this.serverAddresses[] elements != null
this.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
this.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
this.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
this.credentialsStore != null
this.credentialsStore.credentialsMap != null
this.credentialsStore.credentialsMap.getClass().getName() == java.util.HashMap.class
this.credentialsStore.allDatabasesWithCredentials != null
this.credentialsStore.allDatabasesWithCredentials.getClass().getName() == java.util.HashSet.class
size(com.mongodb.MongoAuthority$Type.$VALUES[]) == 2
size(this.serverAddresses[]) == 1
===========================================================================
com.mongodb.MongoAuthority.MongoAuthority(com.mongodb.ServerAddress, com.mongodb.MongoCredentialsStore):::ENTER
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
credentialsStore.credentialsMap.getClass().getName() == java.util.HashMap.class
credentialsStore.allDatabasesWithCredentials.getClass().getName() == java.util.HashSet.class
===========================================================================
com.mongodb.MongoAuthority.MongoAuthority(com.mongodb.ServerAddress, com.mongodb.MongoCredentialsStore):::EXIT
serverAddress._host == orig(serverAddress._host)
serverAddress._host.toString == orig(serverAddress._host.toString)
serverAddress._port == orig(serverAddress._port)
credentialsStore.credentialsMap == orig(credentialsStore.credentialsMap)
credentialsStore.credentialsMap.getClass().getName() == orig(credentialsStore.credentialsMap.getClass().getName())
credentialsStore.allDatabasesWithCredentials == orig(credentialsStore.allDatabasesWithCredentials)
credentialsStore.allDatabasesWithCredentials.getClass().getName() == orig(credentialsStore.allDatabasesWithCredentials.getClass().getName())
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
credentialsStore.credentialsMap.getClass().getName() == java.util.HashMap.class
credentialsStore.allDatabasesWithCredentials.getClass().getName() == java.util.HashSet.class
===========================================================================
com.mongodb.MongoAuthority.direct(com.mongodb.ServerAddress):::ENTER
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
===========================================================================
com.mongodb.MongoAuthority.direct(com.mongodb.ServerAddress):::EXIT
serverAddress._host == orig(serverAddress._host)
serverAddress._host.toString == orig(serverAddress._host.toString)
serverAddress._port == orig(serverAddress._port)
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
return.type has only one value
com.mongodb.MongoAuthority$Type.Direct has only one value
com.mongodb.MongoAuthority$Type.Set has only one value
com.mongodb.MongoAuthority$Type.$VALUES has only one value
com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName() == com.mongodb.MongoAuthority$Type[].class
com.mongodb.MongoAuthority$Type.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.MongoAuthority$Type.$VALUES[].getClass().getName() == [com.mongodb.MongoAuthority.Type, com.mongodb.MongoAuthority.Type]
com.mongodb.MongoAuthority$Type.$VALUES[].getClass().getName() elements == com.mongodb.MongoAuthority.Type.class
return.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
return.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
return.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
return.credentialsStore.credentialsMap.getClass().getName() == java.util.HashMap.class
return.credentialsStore.allDatabasesWithCredentials.getClass().getName() == java.util.HashSet.class
size(com.mongodb.MongoAuthority$Type.$VALUES[]) == 2
size(return.serverAddresses[]) == 1
===========================================================================
com.mongodb.MongoAuthority.direct(com.mongodb.ServerAddress, com.mongodb.MongoCredential):::ENTER
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
credentials == null
===========================================================================
com.mongodb.MongoAuthority.direct(com.mongodb.ServerAddress, com.mongodb.MongoCredential):::EXIT
serverAddress._host == orig(serverAddress._host)
serverAddress._host.toString == orig(serverAddress._host.toString)
serverAddress._port == orig(serverAddress._port)
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
return.type has only one value
com.mongodb.MongoAuthority$Type.Direct has only one value
com.mongodb.MongoAuthority$Type.Set has only one value
com.mongodb.MongoAuthority$Type.$VALUES has only one value
com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName() == com.mongodb.MongoAuthority$Type[].class
com.mongodb.MongoAuthority$Type.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.MongoAuthority$Type.$VALUES[].getClass().getName() == [com.mongodb.MongoAuthority.Type, com.mongodb.MongoAuthority.Type]
com.mongodb.MongoAuthority$Type.$VALUES[].getClass().getName() elements == com.mongodb.MongoAuthority.Type.class
return.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
return.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
return.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
return.credentialsStore.credentialsMap.getClass().getName() == java.util.HashMap.class
return.credentialsStore.allDatabasesWithCredentials.getClass().getName() == java.util.HashSet.class
size(com.mongodb.MongoAuthority$Type.$VALUES[]) == 2
size(return.serverAddresses[]) == 1
===========================================================================
com.mongodb.MongoAuthority.direct(com.mongodb.ServerAddress, com.mongodb.MongoCredentialsStore):::ENTER
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
credentialsStore.credentialsMap.getClass().getName() == java.util.HashMap.class
credentialsStore.allDatabasesWithCredentials.getClass().getName() == java.util.HashSet.class
===========================================================================
com.mongodb.MongoAuthority.direct(com.mongodb.ServerAddress, com.mongodb.MongoCredentialsStore):::EXIT
serverAddress._host == orig(serverAddress._host)
serverAddress._host.toString == orig(serverAddress._host.toString)
serverAddress._port == orig(serverAddress._port)
credentialsStore.credentialsMap == orig(credentialsStore.credentialsMap)
credentialsStore.credentialsMap.getClass().getName() == orig(credentialsStore.credentialsMap.getClass().getName())
credentialsStore.allDatabasesWithCredentials == orig(credentialsStore.allDatabasesWithCredentials)
credentialsStore.allDatabasesWithCredentials.getClass().getName() == orig(credentialsStore.allDatabasesWithCredentials.getClass().getName())
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
credentialsStore.credentialsMap.getClass().getName() == java.util.HashMap.class
credentialsStore.allDatabasesWithCredentials.getClass().getName() == java.util.HashSet.class
return.type has only one value
com.mongodb.MongoAuthority$Type.Direct has only one value
com.mongodb.MongoAuthority$Type.Set has only one value
com.mongodb.MongoAuthority$Type.$VALUES has only one value
com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName() == com.mongodb.MongoAuthority$Type[].class
com.mongodb.MongoAuthority$Type.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.MongoAuthority$Type.$VALUES[].getClass().getName() == [com.mongodb.MongoAuthority.Type, com.mongodb.MongoAuthority.Type]
com.mongodb.MongoAuthority$Type.$VALUES[].getClass().getName() elements == com.mongodb.MongoAuthority.Type.class
return.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
return.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
return.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
return.credentialsStore.credentialsMap.getClass().getName() == java.util.HashMap.class
return.credentialsStore.allDatabasesWithCredentials.getClass().getName() == java.util.HashSet.class
size(com.mongodb.MongoAuthority$Type.$VALUES[]) == 2
size(return.serverAddresses[]) == 1
===========================================================================
com.mongodb.MongoAuthority.getServerAddresses():::ENTER
===========================================================================
com.mongodb.MongoAuthority.getServerAddresses():::EXIT
this.type == orig(this.type)
com.mongodb.MongoAuthority$Type.Direct == orig(com.mongodb.MongoAuthority$Type.Direct)
com.mongodb.MongoAuthority$Type.Set == orig(com.mongodb.MongoAuthority$Type.Set)
com.mongodb.MongoAuthority$Type.$VALUES == orig(com.mongodb.MongoAuthority$Type.$VALUES)
com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName() == orig(com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName())
com.mongodb.MongoAuthority$Type.$VALUES[] == orig(com.mongodb.MongoAuthority$Type.$VALUES[])
this.serverAddresses == orig(this.serverAddresses)
this.serverAddresses[] == orig(this.serverAddresses[])
this.serverAddresses.getClass().getName() == orig(this.serverAddresses.getClass().getName())
this.credentialsStore == orig(this.credentialsStore)
this.credentialsStore.credentialsMap == orig(this.credentialsStore.credentialsMap)
this.credentialsStore.credentialsMap.getClass().getName() == orig(this.credentialsStore.credentialsMap.getClass().getName())
this.credentialsStore.allDatabasesWithCredentials == orig(this.credentialsStore.allDatabasesWithCredentials)
this.credentialsStore.allDatabasesWithCredentials.getClass().getName() == orig(this.credentialsStore.allDatabasesWithCredentials.getClass().getName())
return[].getClass().getName() == [com.mongodb.ServerAddress]
return[].getClass().getName() elements == com.mongodb.ServerAddress.class
return.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
size(return[]) == 1
===========================================================================
com.mongodb.MongoAuthority.getType():::ENTER
===========================================================================
com.mongodb.MongoAuthority.getType():::EXIT
this.type == orig(this.type)
com.mongodb.MongoAuthority$Type.Direct == orig(com.mongodb.MongoAuthority$Type.Direct)
com.mongodb.MongoAuthority$Type.Set == orig(com.mongodb.MongoAuthority$Type.Set)
com.mongodb.MongoAuthority$Type.$VALUES == orig(com.mongodb.MongoAuthority$Type.$VALUES)
com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName() == orig(com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName())
com.mongodb.MongoAuthority$Type.$VALUES[] == orig(com.mongodb.MongoAuthority$Type.$VALUES[])
this.serverAddresses == orig(this.serverAddresses)
this.serverAddresses[] == orig(this.serverAddresses[])
this.serverAddresses.getClass().getName() == orig(this.serverAddresses.getClass().getName())
this.credentialsStore == orig(this.credentialsStore)
this.credentialsStore.credentialsMap == orig(this.credentialsStore.credentialsMap)
this.credentialsStore.credentialsMap.getClass().getName() == orig(this.credentialsStore.credentialsMap.getClass().getName())
this.credentialsStore.allDatabasesWithCredentials == orig(this.credentialsStore.allDatabasesWithCredentials)
this.credentialsStore.allDatabasesWithCredentials.getClass().getName() == orig(this.credentialsStore.allDatabasesWithCredentials.getClass().getName())
return has only one value
===========================================================================
com.mongodb.MongoAuthority.toString():::ENTER
===========================================================================
com.mongodb.MongoAuthority.toString():::EXIT
this.type == orig(this.type)
com.mongodb.MongoAuthority$Type.Direct == orig(com.mongodb.MongoAuthority$Type.Direct)
com.mongodb.MongoAuthority$Type.Set == orig(com.mongodb.MongoAuthority$Type.Set)
com.mongodb.MongoAuthority$Type.$VALUES == orig(com.mongodb.MongoAuthority$Type.$VALUES)
com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName() == orig(com.mongodb.MongoAuthority$Type.$VALUES.getClass().getName())
com.mongodb.MongoAuthority$Type.$VALUES[] == orig(com.mongodb.MongoAuthority$Type.$VALUES[])
this.serverAddresses == orig(this.serverAddresses)
this.serverAddresses[] == orig(this.serverAddresses[])
this.serverAddresses.getClass().getName() == orig(this.serverAddresses.getClass().getName())
this.credentialsStore == orig(this.credentialsStore)
this.credentialsStore.credentialsMap == orig(this.credentialsStore.credentialsMap)
this.credentialsStore.credentialsMap.getClass().getName() == orig(this.credentialsStore.credentialsMap.getClass().getName())
this.credentialsStore.allDatabasesWithCredentials == orig(this.credentialsStore.allDatabasesWithCredentials)
this.credentialsStore.allDatabasesWithCredentials.getClass().getName() == orig(this.credentialsStore.allDatabasesWithCredentials.getClass().getName())
return.toString == "MongoAuthority{type=Direct, serverAddresses=[localhost:27017], credentials={credentials={}}}"
===========================================================================
com.mongodb.MongoClientException:::CLASS
===========================================================================
com.mongodb.MongoClientException:::OBJECT
this has only one value
this._code == -3
===========================================================================
com.mongodb.MongoClientException.MongoClientException(java.lang.String):::ENTER
msg has only one value
msg.toString == "Timed out while waiting for a server that matches AnyServerSelector{} after 239 ms"
===========================================================================
com.mongodb.MongoClientException.MongoClientException(java.lang.String):::EXIT
msg.toString == orig(msg.toString)
msg.toString == "Timed out while waiting for a server that matches AnyServerSelector{} after 239 ms"
===========================================================================
com.mongodb.MongoCredentialsStore:::OBJECT
this.credentialsMap.getClass().getName() == java.util.HashMap.class
this.allDatabasesWithCredentials.getClass().getName() == java.util.HashSet.class
===========================================================================
com.mongodb.MongoCredentialsStore.MongoCredentialsStore(com.mongodb.MongoCredential):::ENTER
credentials == null
===========================================================================
com.mongodb.MongoCredentialsStore.MongoCredentialsStore(com.mongodb.MongoCredential):::EXIT56
===========================================================================
com.mongodb.MongoCredentialsStore.MongoCredentialsStore(com.mongodb.MongoCredential):::EXIT
===========================================================================
com.mongodb.MongoCredentialsStore.toString():::ENTER
===========================================================================
com.mongodb.MongoCredentialsStore.toString():::EXIT
this.credentialsMap == orig(this.credentialsMap)
this.credentialsMap.getClass().getName() == orig(this.credentialsMap.getClass().getName())
this.allDatabasesWithCredentials == orig(this.allDatabasesWithCredentials)
this.allDatabasesWithCredentials.getClass().getName() == orig(this.allDatabasesWithCredentials.getClass().getName())
return.toString == "{credentials={}}"
===========================================================================
com.mongodb.MongoException$Network:::CLASS
===========================================================================
com.mongodb.MongoException$Network:::OBJECT
this._code == -2
===========================================================================
com.mongodb.MongoException$Network.Network(java.lang.String, java.io.IOException):::ENTER
msg has only one value
msg != null
msg.toString == "Exception opening the socket"
ioe != null
===========================================================================
com.mongodb.MongoException$Network.Network(java.lang.String, java.io.IOException):::EXIT
msg.toString == orig(msg.toString)
msg.toString == "Exception opening the socket"
===========================================================================
com.mongodb.MongoException:::CLASS
===========================================================================
com.mongodb.MongoException:::OBJECT
this._code one of { -3, -2 }
===========================================================================
com.mongodb.MongoException.MongoException(int, java.lang.String, java.lang.Throwable):::ENTER
code == -2
msg has only one value
msg != null
msg.toString == "Exception opening the socket"
t != null
===========================================================================
com.mongodb.MongoException.MongoException(int, java.lang.String, java.lang.Throwable):::EXIT
msg.toString == orig(msg.toString)
this._code == -2
msg.toString == "Exception opening the socket"
===========================================================================
com.mongodb.MongoException.MongoException(java.lang.String):::ENTER
msg has only one value
msg.toString == "Timed out while waiting for a server that matches AnyServerSelector{} after 239 ms"
===========================================================================
com.mongodb.MongoException.MongoException(java.lang.String):::EXIT
msg.toString == orig(msg.toString)
this._code == -3
msg.toString == "Timed out while waiting for a server that matches AnyServerSelector{} after 239 ms"
===========================================================================
com.mongodb.MongoInternalException:::CLASS
===========================================================================
com.mongodb.MongoInternalException:::OBJECT
this has only one value
this._code == -3
===========================================================================
com.mongodb.MongoInternalException.MongoInternalException(java.lang.String):::ENTER
msg has only one value
msg.toString == "Timed out while waiting for a server that matches AnyServerSelector{} after 239 ms"
===========================================================================
com.mongodb.MongoInternalException.MongoInternalException(java.lang.String):::EXIT
msg.toString == orig(msg.toString)
msg.toString == "Timed out while waiting for a server that matches AnyServerSelector{} after 239 ms"
===========================================================================
com.mongodb.MongoOptions:::OBJECT
this.description == null
this.connectionsPerHost one of { 0, 10 }
this.threadsAllowedToBlockForConnectionMultiplier one of { 0, 5 }
this.maxWaitTime one of { 0, 120000 }
this.connectTimeout one of { 0, 10000, 20000 }
this.socketTimeout one of { 0, 20000 }
this.socketKeepAlive == false
this.autoConnectRetry == false
this.maxAutoConnectRetryTime == 0
this.slaveOk == false
this.readPreference == null
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY != null
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY != null
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY has only one value
com.mongodb.ReadPreference._PRIMARY != null
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY != null
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY_PREFERRED has only one value
com.mongodb.ReadPreference._SECONDARY_PREFERRED != null
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED != null
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST != null
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
this.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
this.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
this.safe == false
this.w == 0
this.wtimeout == 0
this.fsync == false
this.j == false
this.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
this.writeConcern == null
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ERRORS_IGNORED != null
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED != null
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED != null
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.FSYNCED != null
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.JOURNALED != null
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED != null
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NONE != null
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.NORMAL != null
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.SAFE != null
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.MAJORITY != null
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.FSYNC_SAFE != null
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE != null
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE != null
com.mongodb.WriteConcern._namedConcerns == null
com.mongodb.WriteConcern.ERRORS_IGNORED._w has only one value
com.mongodb.WriteConcern.ERRORS_IGNORED._w != null
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == 0
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == false
com.mongodb.WriteConcern.ERRORS_IGNORED._j == false
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == false
com.mongodb.WriteConcern.ACKNOWLEDGED._w has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED._w != null
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == 0
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == false
com.mongodb.WriteConcern.ACKNOWLEDGED._j == false
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == false
com.mongodb.WriteConcern.UNACKNOWLEDGED._w has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED._w != null
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == 0
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == false
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == false
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == false
com.mongodb.WriteConcern.FSYNCED._w has only one value
com.mongodb.WriteConcern.FSYNCED._w != null
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.FSYNCED._wtimeout == 0
com.mongodb.WriteConcern.FSYNCED._fsync == true
com.mongodb.WriteConcern.FSYNCED._j == false
com.mongodb.WriteConcern.FSYNCED._continueOnError == false
com.mongodb.WriteConcern.JOURNALED._w has only one value
com.mongodb.WriteConcern.JOURNALED._w != null
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.JOURNALED._wtimeout == 0
com.mongodb.WriteConcern.JOURNALED._fsync == false
com.mongodb.WriteConcern.JOURNALED._j == true
com.mongodb.WriteConcern.JOURNALED._continueOnError == false
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w != null
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == 0
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == false
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == false
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == false
com.mongodb.WriteConcern.NONE._w has only one value
com.mongodb.WriteConcern.NONE._w != null
com.mongodb.WriteConcern.NONE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.NONE._wtimeout == 0
com.mongodb.WriteConcern.NONE._fsync == false
com.mongodb.WriteConcern.NONE._j == false
com.mongodb.WriteConcern.NONE._continueOnError == false
com.mongodb.WriteConcern.NORMAL._w has only one value
com.mongodb.WriteConcern.NORMAL._w != null
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.NORMAL._wtimeout == 0
com.mongodb.WriteConcern.NORMAL._fsync == false
com.mongodb.WriteConcern.NORMAL._j == false
com.mongodb.WriteConcern.NORMAL._continueOnError == false
com.mongodb.WriteConcern.SAFE._w has only one value
com.mongodb.WriteConcern.SAFE._w != null
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.SAFE._wtimeout == 0
com.mongodb.WriteConcern.SAFE._fsync == false
com.mongodb.WriteConcern.SAFE._j == false
com.mongodb.WriteConcern.SAFE._continueOnError == false
com.mongodb.WriteConcern.MAJORITY._w has only one value
com.mongodb.WriteConcern.MAJORITY._w != null
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == java.lang.String.class
com.mongodb.WriteConcern.MAJORITY._wtimeout == 0
com.mongodb.WriteConcern.MAJORITY._fsync == false
com.mongodb.WriteConcern.MAJORITY._j == false
com.mongodb.WriteConcern.MAJORITY._continueOnError == false
com.mongodb.WriteConcern.FSYNC_SAFE._w has only one value
com.mongodb.WriteConcern.FSYNC_SAFE._w != null
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == 0
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == true
com.mongodb.WriteConcern.FSYNC_SAFE._j == false
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == false
com.mongodb.WriteConcern.JOURNAL_SAFE._w has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE._w != null
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == 0
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == false
com.mongodb.WriteConcern.JOURNAL_SAFE._j == true
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == false
com.mongodb.WriteConcern.REPLICAS_SAFE._w has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE._w != null
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == java.lang.Integer.class
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == 0
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == false
com.mongodb.WriteConcern.REPLICAS_SAFE._j == false
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == false
this.alwaysUseMBeans == false
this.minConnectionsPerHost == 0
this.maxConnectionIdleTime == 0
this.maxConnectionLifeTime == 0
this.heartbeatFrequencyMS one of { 0, 5000 }
this.heartbeatConnectRetryFrequencyMS one of { 0, 10 }
this.heartbeatConnectTimeoutMS one of { 0, 20000 }
this.heartbeatReadTimeoutMS one of { 0, 20000 }
this.acceptableLatencyDifferenceMS one of { 0, 15 }
this.heartbeatThreadCount == 0
this.requiredReplicaSetName == null
===========================================================================
com.mongodb.MongoOptions.MongoOptions():::EXIT
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 10000
this.socketTimeout == 0
this.dbDecoderFactory has only one value
this.dbDecoderFactory != null
this.dbEncoderFactory has only one value
this.dbEncoderFactory != null
this.socketFactory has only one value
this.socketFactory != null
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
===========================================================================
com.mongodb.MongoOptions.getConnectionsPerHost():::ENTER
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 10000
this.socketTimeout == 0
this.dbDecoderFactory has only one value
this.dbEncoderFactory has only one value
this.socketFactory has only one value
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
===========================================================================
com.mongodb.MongoOptions.getConnectionsPerHost():::EXIT
this.description == orig(this.description)
this.connectionsPerHost == orig(this.connectionsPerHost)
this.threadsAllowedToBlockForConnectionMultiplier == orig(this.threadsAllowedToBlockForConnectionMultiplier)
this.maxWaitTime == orig(this.maxWaitTime)
this.connectTimeout == orig(this.connectTimeout)
this.socketTimeout == orig(this.socketTimeout)
this.socketKeepAlive == orig(this.socketKeepAlive)
this.autoConnectRetry == orig(this.autoConnectRetry)
this.maxAutoConnectRetryTime == orig(this.maxAutoConnectRetryTime)
this.slaveOk == orig(this.slaveOk)
this.readPreference == orig(this.readPreference)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this.dbDecoderFactory == orig(this.dbDecoderFactory)
this.dbDecoderFactory.getClass().getName() == orig(this.dbDecoderFactory.getClass().getName())
this.dbEncoderFactory == orig(this.dbEncoderFactory)
this.dbEncoderFactory.getClass().getName() == orig(this.dbEncoderFactory.getClass().getName())
this.safe == orig(this.safe)
this.w == orig(this.w)
this.wtimeout == orig(this.wtimeout)
this.fsync == orig(this.fsync)
this.j == orig(this.j)
this.socketFactory == orig(this.socketFactory)
this.socketFactory.getClass().getName() == orig(this.socketFactory.getClass().getName())
this.cursorFinalizerEnabled == orig(this.cursorFinalizerEnabled)
this.writeConcern == orig(this.writeConcern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this.alwaysUseMBeans == orig(this.alwaysUseMBeans)
this.minConnectionsPerHost == orig(this.minConnectionsPerHost)
this.maxConnectionIdleTime == orig(this.maxConnectionIdleTime)
this.maxConnectionLifeTime == orig(this.maxConnectionLifeTime)
this.heartbeatFrequencyMS == orig(this.heartbeatFrequencyMS)
this.heartbeatConnectRetryFrequencyMS == orig(this.heartbeatConnectRetryFrequencyMS)
this.heartbeatConnectTimeoutMS == orig(this.heartbeatConnectTimeoutMS)
this.heartbeatReadTimeoutMS == orig(this.heartbeatReadTimeoutMS)
this.acceptableLatencyDifferenceMS == orig(this.acceptableLatencyDifferenceMS)
this.heartbeatThreadCount == orig(this.heartbeatThreadCount)
this.requiredReplicaSetName == orig(this.requiredReplicaSetName)
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 10000
this.socketTimeout == 0
this.dbDecoderFactory has only one value
this.dbEncoderFactory has only one value
this.socketFactory has only one value
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
return == 10
===========================================================================
com.mongodb.MongoOptions.getDescription():::ENTER
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 10000
this.socketTimeout == 0
this.dbDecoderFactory has only one value
this.dbEncoderFactory has only one value
this.socketFactory has only one value
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
===========================================================================
com.mongodb.MongoOptions.getDescription():::EXIT
this.description == orig(this.description)
this.connectionsPerHost == orig(this.connectionsPerHost)
this.threadsAllowedToBlockForConnectionMultiplier == orig(this.threadsAllowedToBlockForConnectionMultiplier)
this.maxWaitTime == orig(this.maxWaitTime)
this.connectTimeout == orig(this.connectTimeout)
this.socketTimeout == orig(this.socketTimeout)
this.socketKeepAlive == orig(this.socketKeepAlive)
this.autoConnectRetry == orig(this.autoConnectRetry)
this.maxAutoConnectRetryTime == orig(this.maxAutoConnectRetryTime)
this.slaveOk == orig(this.slaveOk)
this.readPreference == orig(this.readPreference)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this.dbDecoderFactory == orig(this.dbDecoderFactory)
this.dbDecoderFactory.getClass().getName() == orig(this.dbDecoderFactory.getClass().getName())
this.dbEncoderFactory == orig(this.dbEncoderFactory)
this.dbEncoderFactory.getClass().getName() == orig(this.dbEncoderFactory.getClass().getName())
this.safe == orig(this.safe)
this.w == orig(this.w)
this.wtimeout == orig(this.wtimeout)
this.fsync == orig(this.fsync)
this.j == orig(this.j)
this.socketFactory == orig(this.socketFactory)
this.socketFactory.getClass().getName() == orig(this.socketFactory.getClass().getName())
this.cursorFinalizerEnabled == orig(this.cursorFinalizerEnabled)
this.writeConcern == orig(this.writeConcern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this.alwaysUseMBeans == orig(this.alwaysUseMBeans)
this.minConnectionsPerHost == orig(this.minConnectionsPerHost)
this.maxConnectionIdleTime == orig(this.maxConnectionIdleTime)
this.maxConnectionLifeTime == orig(this.maxConnectionLifeTime)
this.heartbeatFrequencyMS == orig(this.heartbeatFrequencyMS)
this.heartbeatConnectRetryFrequencyMS == orig(this.heartbeatConnectRetryFrequencyMS)
this.heartbeatConnectTimeoutMS == orig(this.heartbeatConnectTimeoutMS)
this.heartbeatReadTimeoutMS == orig(this.heartbeatReadTimeoutMS)
this.acceptableLatencyDifferenceMS == orig(this.acceptableLatencyDifferenceMS)
this.heartbeatThreadCount == orig(this.heartbeatThreadCount)
this.requiredReplicaSetName == orig(this.requiredReplicaSetName)
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 10000
this.socketTimeout == 0
this.dbDecoderFactory has only one value
this.dbEncoderFactory has only one value
this.socketFactory has only one value
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
return == null
===========================================================================
com.mongodb.MongoOptions.getMaxWaitTime():::ENTER
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 10000
this.socketTimeout == 0
this.dbDecoderFactory has only one value
this.dbEncoderFactory has only one value
this.socketFactory has only one value
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
===========================================================================
com.mongodb.MongoOptions.getMaxWaitTime():::EXIT
this.description == orig(this.description)
this.connectionsPerHost == orig(this.connectionsPerHost)
this.threadsAllowedToBlockForConnectionMultiplier == orig(this.threadsAllowedToBlockForConnectionMultiplier)
this.maxWaitTime == orig(this.maxWaitTime)
this.connectTimeout == orig(this.connectTimeout)
this.socketTimeout == orig(this.socketTimeout)
this.socketKeepAlive == orig(this.socketKeepAlive)
this.autoConnectRetry == orig(this.autoConnectRetry)
this.maxAutoConnectRetryTime == orig(this.maxAutoConnectRetryTime)
this.slaveOk == orig(this.slaveOk)
this.readPreference == orig(this.readPreference)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this.dbDecoderFactory == orig(this.dbDecoderFactory)
this.dbDecoderFactory.getClass().getName() == orig(this.dbDecoderFactory.getClass().getName())
this.dbEncoderFactory == orig(this.dbEncoderFactory)
this.dbEncoderFactory.getClass().getName() == orig(this.dbEncoderFactory.getClass().getName())
this.safe == orig(this.safe)
this.w == orig(this.w)
this.wtimeout == orig(this.wtimeout)
this.fsync == orig(this.fsync)
this.j == orig(this.j)
this.socketFactory == orig(this.socketFactory)
this.socketFactory.getClass().getName() == orig(this.socketFactory.getClass().getName())
this.cursorFinalizerEnabled == orig(this.cursorFinalizerEnabled)
this.writeConcern == orig(this.writeConcern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this.alwaysUseMBeans == orig(this.alwaysUseMBeans)
this.minConnectionsPerHost == orig(this.minConnectionsPerHost)
this.maxConnectionIdleTime == orig(this.maxConnectionIdleTime)
this.maxConnectionLifeTime == orig(this.maxConnectionLifeTime)
this.heartbeatFrequencyMS == orig(this.heartbeatFrequencyMS)
this.heartbeatConnectRetryFrequencyMS == orig(this.heartbeatConnectRetryFrequencyMS)
this.heartbeatConnectTimeoutMS == orig(this.heartbeatConnectTimeoutMS)
this.heartbeatReadTimeoutMS == orig(this.heartbeatReadTimeoutMS)
this.acceptableLatencyDifferenceMS == orig(this.acceptableLatencyDifferenceMS)
this.heartbeatThreadCount == orig(this.heartbeatThreadCount)
this.requiredReplicaSetName == orig(this.requiredReplicaSetName)
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 10000
this.socketTimeout == 0
this.dbDecoderFactory has only one value
this.dbEncoderFactory has only one value
this.socketFactory has only one value
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
return == 120000
===========================================================================
com.mongodb.MongoOptions.getReadPreference():::ENTER
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 10000
this.socketTimeout == 0
this.dbDecoderFactory has only one value
this.dbEncoderFactory has only one value
this.socketFactory has only one value
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
===========================================================================
com.mongodb.MongoOptions.getReadPreference():::EXIT
this.description == orig(this.description)
this.connectionsPerHost == orig(this.connectionsPerHost)
this.threadsAllowedToBlockForConnectionMultiplier == orig(this.threadsAllowedToBlockForConnectionMultiplier)
this.maxWaitTime == orig(this.maxWaitTime)
this.connectTimeout == orig(this.connectTimeout)
this.socketTimeout == orig(this.socketTimeout)
this.socketKeepAlive == orig(this.socketKeepAlive)
this.autoConnectRetry == orig(this.autoConnectRetry)
this.maxAutoConnectRetryTime == orig(this.maxAutoConnectRetryTime)
this.slaveOk == orig(this.slaveOk)
this.readPreference == orig(this.readPreference)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this.dbDecoderFactory == orig(this.dbDecoderFactory)
this.dbDecoderFactory.getClass().getName() == orig(this.dbDecoderFactory.getClass().getName())
this.dbEncoderFactory == orig(this.dbEncoderFactory)
this.dbEncoderFactory.getClass().getName() == orig(this.dbEncoderFactory.getClass().getName())
this.safe == orig(this.safe)
this.w == orig(this.w)
this.wtimeout == orig(this.wtimeout)
this.fsync == orig(this.fsync)
this.j == orig(this.j)
this.socketFactory == orig(this.socketFactory)
this.socketFactory.getClass().getName() == orig(this.socketFactory.getClass().getName())
this.cursorFinalizerEnabled == orig(this.cursorFinalizerEnabled)
this.writeConcern == orig(this.writeConcern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this.alwaysUseMBeans == orig(this.alwaysUseMBeans)
this.minConnectionsPerHost == orig(this.minConnectionsPerHost)
this.maxConnectionIdleTime == orig(this.maxConnectionIdleTime)
this.maxConnectionLifeTime == orig(this.maxConnectionLifeTime)
this.heartbeatFrequencyMS == orig(this.heartbeatFrequencyMS)
this.heartbeatConnectRetryFrequencyMS == orig(this.heartbeatConnectRetryFrequencyMS)
this.heartbeatConnectTimeoutMS == orig(this.heartbeatConnectTimeoutMS)
this.heartbeatReadTimeoutMS == orig(this.heartbeatReadTimeoutMS)
this.acceptableLatencyDifferenceMS == orig(this.acceptableLatencyDifferenceMS)
this.heartbeatThreadCount == orig(this.heartbeatThreadCount)
this.requiredReplicaSetName == orig(this.requiredReplicaSetName)
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 10000
this.socketTimeout == 0
this.dbDecoderFactory has only one value
this.dbEncoderFactory has only one value
this.socketFactory has only one value
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
return == null
===========================================================================
com.mongodb.MongoOptions.getRequiredReplicaSetName():::ENTER
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 10000
this.socketTimeout == 0
this.dbDecoderFactory has only one value
this.dbEncoderFactory has only one value
this.socketFactory has only one value
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
===========================================================================
com.mongodb.MongoOptions.getRequiredReplicaSetName():::EXIT
this.description == orig(this.description)
this.connectionsPerHost == orig(this.connectionsPerHost)
this.threadsAllowedToBlockForConnectionMultiplier == orig(this.threadsAllowedToBlockForConnectionMultiplier)
this.maxWaitTime == orig(this.maxWaitTime)
this.connectTimeout == orig(this.connectTimeout)
this.socketTimeout == orig(this.socketTimeout)
this.socketKeepAlive == orig(this.socketKeepAlive)
this.autoConnectRetry == orig(this.autoConnectRetry)
this.maxAutoConnectRetryTime == orig(this.maxAutoConnectRetryTime)
this.slaveOk == orig(this.slaveOk)
this.readPreference == orig(this.readPreference)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this.dbDecoderFactory == orig(this.dbDecoderFactory)
this.dbDecoderFactory.getClass().getName() == orig(this.dbDecoderFactory.getClass().getName())
this.dbEncoderFactory == orig(this.dbEncoderFactory)
this.dbEncoderFactory.getClass().getName() == orig(this.dbEncoderFactory.getClass().getName())
this.safe == orig(this.safe)
this.w == orig(this.w)
this.wtimeout == orig(this.wtimeout)
this.fsync == orig(this.fsync)
this.j == orig(this.j)
this.socketFactory == orig(this.socketFactory)
this.socketFactory.getClass().getName() == orig(this.socketFactory.getClass().getName())
this.cursorFinalizerEnabled == orig(this.cursorFinalizerEnabled)
this.writeConcern == orig(this.writeConcern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this.alwaysUseMBeans == orig(this.alwaysUseMBeans)
this.minConnectionsPerHost == orig(this.minConnectionsPerHost)
this.maxConnectionIdleTime == orig(this.maxConnectionIdleTime)
this.maxConnectionLifeTime == orig(this.maxConnectionLifeTime)
this.heartbeatFrequencyMS == orig(this.heartbeatFrequencyMS)
this.heartbeatConnectRetryFrequencyMS == orig(this.heartbeatConnectRetryFrequencyMS)
this.heartbeatConnectTimeoutMS == orig(this.heartbeatConnectTimeoutMS)
this.heartbeatReadTimeoutMS == orig(this.heartbeatReadTimeoutMS)
this.acceptableLatencyDifferenceMS == orig(this.acceptableLatencyDifferenceMS)
this.heartbeatThreadCount == orig(this.heartbeatThreadCount)
this.requiredReplicaSetName == orig(this.requiredReplicaSetName)
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 10000
this.socketTimeout == 0
this.dbDecoderFactory has only one value
this.dbEncoderFactory has only one value
this.socketFactory has only one value
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
return == null
===========================================================================
com.mongodb.MongoOptions.getSocketFactory():::ENTER
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 10000
this.socketTimeout == 0
this.dbDecoderFactory has only one value
this.dbEncoderFactory has only one value
this.socketFactory has only one value
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
===========================================================================
com.mongodb.MongoOptions.getSocketFactory():::EXIT
this.description == orig(this.description)
this.connectionsPerHost == orig(this.connectionsPerHost)
this.threadsAllowedToBlockForConnectionMultiplier == orig(this.threadsAllowedToBlockForConnectionMultiplier)
this.maxWaitTime == orig(this.maxWaitTime)
this.connectTimeout == orig(this.connectTimeout)
this.socketTimeout == orig(this.socketTimeout)
this.socketKeepAlive == orig(this.socketKeepAlive)
this.autoConnectRetry == orig(this.autoConnectRetry)
this.maxAutoConnectRetryTime == orig(this.maxAutoConnectRetryTime)
this.slaveOk == orig(this.slaveOk)
this.readPreference == orig(this.readPreference)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this.dbDecoderFactory == orig(this.dbDecoderFactory)
this.dbDecoderFactory.getClass().getName() == orig(this.dbDecoderFactory.getClass().getName())
this.dbEncoderFactory == orig(this.dbEncoderFactory)
this.dbEncoderFactory.getClass().getName() == orig(this.dbEncoderFactory.getClass().getName())
this.safe == orig(this.safe)
this.w == orig(this.w)
this.wtimeout == orig(this.wtimeout)
this.fsync == orig(this.fsync)
this.j == orig(this.j)
this.socketFactory == orig(this.socketFactory)
this.socketFactory.getClass().getName() == orig(this.socketFactory.getClass().getName())
this.cursorFinalizerEnabled == orig(this.cursorFinalizerEnabled)
this.writeConcern == orig(this.writeConcern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this.alwaysUseMBeans == orig(this.alwaysUseMBeans)
this.minConnectionsPerHost == orig(this.minConnectionsPerHost)
this.maxConnectionIdleTime == orig(this.maxConnectionIdleTime)
this.maxConnectionLifeTime == orig(this.maxConnectionLifeTime)
this.heartbeatFrequencyMS == orig(this.heartbeatFrequencyMS)
this.heartbeatConnectRetryFrequencyMS == orig(this.heartbeatConnectRetryFrequencyMS)
this.heartbeatConnectTimeoutMS == orig(this.heartbeatConnectTimeoutMS)
this.heartbeatReadTimeoutMS == orig(this.heartbeatReadTimeoutMS)
this.acceptableLatencyDifferenceMS == orig(this.acceptableLatencyDifferenceMS)
this.heartbeatThreadCount == orig(this.heartbeatThreadCount)
this.requiredReplicaSetName == orig(this.requiredReplicaSetName)
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 10000
this.socketTimeout == 0
this.dbDecoderFactory has only one value
this.dbEncoderFactory has only one value
this.socketFactory has only one value
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
return has only one value
return.getClass().getName() == javax.net.DefaultSocketFactory.class
===========================================================================
com.mongodb.MongoOptions.getThreadsAllowedToBlockForConnectionMultiplier():::ENTER
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 10000
this.socketTimeout == 0
this.dbDecoderFactory has only one value
this.dbEncoderFactory has only one value
this.socketFactory has only one value
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
===========================================================================
com.mongodb.MongoOptions.getThreadsAllowedToBlockForConnectionMultiplier():::EXIT
this.description == orig(this.description)
this.connectionsPerHost == orig(this.connectionsPerHost)
this.threadsAllowedToBlockForConnectionMultiplier == orig(this.threadsAllowedToBlockForConnectionMultiplier)
this.maxWaitTime == orig(this.maxWaitTime)
this.connectTimeout == orig(this.connectTimeout)
this.socketTimeout == orig(this.socketTimeout)
this.socketKeepAlive == orig(this.socketKeepAlive)
this.autoConnectRetry == orig(this.autoConnectRetry)
this.maxAutoConnectRetryTime == orig(this.maxAutoConnectRetryTime)
this.slaveOk == orig(this.slaveOk)
this.readPreference == orig(this.readPreference)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this.dbDecoderFactory == orig(this.dbDecoderFactory)
this.dbDecoderFactory.getClass().getName() == orig(this.dbDecoderFactory.getClass().getName())
this.dbEncoderFactory == orig(this.dbEncoderFactory)
this.dbEncoderFactory.getClass().getName() == orig(this.dbEncoderFactory.getClass().getName())
this.safe == orig(this.safe)
this.w == orig(this.w)
this.wtimeout == orig(this.wtimeout)
this.fsync == orig(this.fsync)
this.j == orig(this.j)
this.socketFactory == orig(this.socketFactory)
this.socketFactory.getClass().getName() == orig(this.socketFactory.getClass().getName())
this.cursorFinalizerEnabled == orig(this.cursorFinalizerEnabled)
this.writeConcern == orig(this.writeConcern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this.alwaysUseMBeans == orig(this.alwaysUseMBeans)
this.minConnectionsPerHost == orig(this.minConnectionsPerHost)
this.maxConnectionIdleTime == orig(this.maxConnectionIdleTime)
this.maxConnectionLifeTime == orig(this.maxConnectionLifeTime)
this.heartbeatFrequencyMS == orig(this.heartbeatFrequencyMS)
this.heartbeatConnectRetryFrequencyMS == orig(this.heartbeatConnectRetryFrequencyMS)
this.heartbeatConnectTimeoutMS == orig(this.heartbeatConnectTimeoutMS)
this.heartbeatReadTimeoutMS == orig(this.heartbeatReadTimeoutMS)
this.acceptableLatencyDifferenceMS == orig(this.acceptableLatencyDifferenceMS)
this.heartbeatThreadCount == orig(this.heartbeatThreadCount)
this.requiredReplicaSetName == orig(this.requiredReplicaSetName)
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 10000
this.socketTimeout == 0
this.dbDecoderFactory has only one value
this.dbEncoderFactory has only one value
this.socketFactory has only one value
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
return == 5
===========================================================================
com.mongodb.MongoOptions.getWriteConcern():::ENTER
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 10000
this.socketTimeout == 0
this.dbDecoderFactory has only one value
this.dbEncoderFactory has only one value
this.socketFactory has only one value
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
===========================================================================
com.mongodb.MongoOptions.getWriteConcern():::EXIT157
===========================================================================
com.mongodb.MongoOptions.getWriteConcern():::EXIT
this.description == orig(this.description)
this.connectionsPerHost == orig(this.connectionsPerHost)
this.threadsAllowedToBlockForConnectionMultiplier == orig(this.threadsAllowedToBlockForConnectionMultiplier)
this.maxWaitTime == orig(this.maxWaitTime)
this.connectTimeout == orig(this.connectTimeout)
this.socketTimeout == orig(this.socketTimeout)
this.socketKeepAlive == orig(this.socketKeepAlive)
this.autoConnectRetry == orig(this.autoConnectRetry)
this.maxAutoConnectRetryTime == orig(this.maxAutoConnectRetryTime)
this.slaveOk == orig(this.slaveOk)
this.readPreference == orig(this.readPreference)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this.dbDecoderFactory == orig(this.dbDecoderFactory)
this.dbDecoderFactory.getClass().getName() == orig(this.dbDecoderFactory.getClass().getName())
this.dbEncoderFactory == orig(this.dbEncoderFactory)
this.dbEncoderFactory.getClass().getName() == orig(this.dbEncoderFactory.getClass().getName())
this.safe == orig(this.safe)
this.w == orig(this.w)
this.wtimeout == orig(this.wtimeout)
this.fsync == orig(this.fsync)
this.j == orig(this.j)
this.socketFactory == orig(this.socketFactory)
this.socketFactory.getClass().getName() == orig(this.socketFactory.getClass().getName())
this.cursorFinalizerEnabled == orig(this.cursorFinalizerEnabled)
this.writeConcern == orig(this.writeConcern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this.alwaysUseMBeans == orig(this.alwaysUseMBeans)
this.minConnectionsPerHost == orig(this.minConnectionsPerHost)
this.maxConnectionIdleTime == orig(this.maxConnectionIdleTime)
this.maxConnectionLifeTime == orig(this.maxConnectionLifeTime)
this.heartbeatFrequencyMS == orig(this.heartbeatFrequencyMS)
this.heartbeatConnectRetryFrequencyMS == orig(this.heartbeatConnectRetryFrequencyMS)
this.heartbeatConnectTimeoutMS == orig(this.heartbeatConnectTimeoutMS)
this.heartbeatReadTimeoutMS == orig(this.heartbeatReadTimeoutMS)
this.acceptableLatencyDifferenceMS == orig(this.acceptableLatencyDifferenceMS)
this.heartbeatThreadCount == orig(this.heartbeatThreadCount)
this.requiredReplicaSetName == orig(this.requiredReplicaSetName)
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 10000
this.socketTimeout == 0
this.dbDecoderFactory has only one value
this.dbEncoderFactory has only one value
this.socketFactory has only one value
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
return has only one value
return._w has only one value
return._w.getClass().getName() == java.lang.Integer.class
return._wtimeout == 0
return._fsync == false
return._j == false
return._continueOnError == false
===========================================================================
com.mongodb.MongoOptions.reset():::ENTER
this.connectionsPerHost == 0
this.threadsAllowedToBlockForConnectionMultiplier == 0
this.maxWaitTime == 0
this.connectTimeout == 0
this.socketTimeout == 0
this.dbDecoderFactory == null
this.dbEncoderFactory == null
this.socketFactory == null
this.cursorFinalizerEnabled == false
this.heartbeatFrequencyMS == 0
this.heartbeatConnectRetryFrequencyMS == 0
this.heartbeatConnectTimeoutMS == 0
this.heartbeatReadTimeoutMS == 0
this.acceptableLatencyDifferenceMS == 0
===========================================================================
com.mongodb.MongoOptions.reset():::EXIT
this.description == orig(this.description)
this.socketTimeout == orig(this.socketTimeout)
this.socketKeepAlive == orig(this.socketKeepAlive)
this.autoConnectRetry == orig(this.autoConnectRetry)
this.maxAutoConnectRetryTime == orig(this.maxAutoConnectRetryTime)
this.slaveOk == orig(this.slaveOk)
this.readPreference == orig(this.readPreference)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this.safe == orig(this.safe)
this.w == orig(this.w)
this.wtimeout == orig(this.wtimeout)
this.fsync == orig(this.fsync)
this.j == orig(this.j)
this.writeConcern == orig(this.writeConcern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this.alwaysUseMBeans == orig(this.alwaysUseMBeans)
this.minConnectionsPerHost == orig(this.minConnectionsPerHost)
this.maxConnectionIdleTime == orig(this.maxConnectionIdleTime)
this.maxConnectionLifeTime == orig(this.maxConnectionLifeTime)
this.heartbeatThreadCount == orig(this.heartbeatThreadCount)
this.requiredReplicaSetName == orig(this.requiredReplicaSetName)
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 10000
this.socketTimeout == 0
this.dbDecoderFactory has only one value
this.dbDecoderFactory != null
this.dbEncoderFactory has only one value
this.dbEncoderFactory != null
this.socketFactory has only one value
this.socketFactory != null
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
===========================================================================
com.mongodb.MongoOptions.setConnectTimeout(int):::ENTER
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 10000
this.socketTimeout == 0
this.dbDecoderFactory has only one value
this.dbDecoderFactory != null
this.dbEncoderFactory has only one value
this.dbEncoderFactory != null
this.socketFactory has only one value
this.socketFactory != null
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
timeoutMS == 20000
===========================================================================
com.mongodb.MongoOptions.setConnectTimeout(int):::EXIT
this.description == orig(this.description)
this.connectionsPerHost == orig(this.connectionsPerHost)
this.threadsAllowedToBlockForConnectionMultiplier == orig(this.threadsAllowedToBlockForConnectionMultiplier)
this.maxWaitTime == orig(this.maxWaitTime)
this.socketTimeout == orig(this.socketTimeout)
this.socketKeepAlive == orig(this.socketKeepAlive)
this.autoConnectRetry == orig(this.autoConnectRetry)
this.maxAutoConnectRetryTime == orig(this.maxAutoConnectRetryTime)
this.slaveOk == orig(this.slaveOk)
this.readPreference == orig(this.readPreference)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this.dbDecoderFactory == orig(this.dbDecoderFactory)
this.dbDecoderFactory.getClass().getName() == orig(this.dbDecoderFactory.getClass().getName())
this.dbEncoderFactory == orig(this.dbEncoderFactory)
this.dbEncoderFactory.getClass().getName() == orig(this.dbEncoderFactory.getClass().getName())
this.safe == orig(this.safe)
this.w == orig(this.w)
this.wtimeout == orig(this.wtimeout)
this.fsync == orig(this.fsync)
this.j == orig(this.j)
this.socketFactory == orig(this.socketFactory)
this.socketFactory.getClass().getName() == orig(this.socketFactory.getClass().getName())
this.cursorFinalizerEnabled == orig(this.cursorFinalizerEnabled)
this.writeConcern == orig(this.writeConcern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this.alwaysUseMBeans == orig(this.alwaysUseMBeans)
this.minConnectionsPerHost == orig(this.minConnectionsPerHost)
this.maxConnectionIdleTime == orig(this.maxConnectionIdleTime)
this.maxConnectionLifeTime == orig(this.maxConnectionLifeTime)
this.heartbeatFrequencyMS == orig(this.heartbeatFrequencyMS)
this.heartbeatConnectRetryFrequencyMS == orig(this.heartbeatConnectRetryFrequencyMS)
this.heartbeatConnectTimeoutMS == orig(this.heartbeatConnectTimeoutMS)
this.heartbeatReadTimeoutMS == orig(this.heartbeatReadTimeoutMS)
this.acceptableLatencyDifferenceMS == orig(this.acceptableLatencyDifferenceMS)
this.heartbeatThreadCount == orig(this.heartbeatThreadCount)
this.requiredReplicaSetName == orig(this.requiredReplicaSetName)
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 20000
this.socketTimeout == 0
this.dbDecoderFactory has only one value
this.dbDecoderFactory != null
this.dbEncoderFactory has only one value
this.dbEncoderFactory != null
this.socketFactory has only one value
this.socketFactory != null
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
===========================================================================
com.mongodb.MongoOptions.setSocketFactory(javax.net.SocketFactory):::ENTER
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 20000
this.socketTimeout == 20000
this.dbDecoderFactory has only one value
this.dbDecoderFactory != null
this.dbEncoderFactory has only one value
this.dbEncoderFactory != null
this.socketFactory has only one value
this.socketFactory != null
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
factory has only one value
factory != null
factory.getClass().getName() == javax.net.DefaultSocketFactory.class
===========================================================================
com.mongodb.MongoOptions.setSocketFactory(javax.net.SocketFactory):::EXIT
this.description == orig(this.description)
this.connectionsPerHost == orig(this.connectionsPerHost)
this.threadsAllowedToBlockForConnectionMultiplier == orig(this.threadsAllowedToBlockForConnectionMultiplier)
this.maxWaitTime == orig(this.maxWaitTime)
this.connectTimeout == orig(this.connectTimeout)
this.socketTimeout == orig(this.socketTimeout)
this.socketKeepAlive == orig(this.socketKeepAlive)
this.autoConnectRetry == orig(this.autoConnectRetry)
this.maxAutoConnectRetryTime == orig(this.maxAutoConnectRetryTime)
this.slaveOk == orig(this.slaveOk)
this.readPreference == orig(this.readPreference)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this.dbDecoderFactory == orig(this.dbDecoderFactory)
this.dbDecoderFactory.getClass().getName() == orig(this.dbDecoderFactory.getClass().getName())
this.dbEncoderFactory == orig(this.dbEncoderFactory)
this.dbEncoderFactory.getClass().getName() == orig(this.dbEncoderFactory.getClass().getName())
this.safe == orig(this.safe)
this.w == orig(this.w)
this.wtimeout == orig(this.wtimeout)
this.fsync == orig(this.fsync)
this.j == orig(this.j)
this.socketFactory == orig(this.socketFactory)
this.socketFactory.getClass().getName() == orig(this.socketFactory.getClass().getName())
this.cursorFinalizerEnabled == orig(this.cursorFinalizerEnabled)
this.writeConcern == orig(this.writeConcern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this.alwaysUseMBeans == orig(this.alwaysUseMBeans)
this.minConnectionsPerHost == orig(this.minConnectionsPerHost)
this.maxConnectionIdleTime == orig(this.maxConnectionIdleTime)
this.maxConnectionLifeTime == orig(this.maxConnectionLifeTime)
this.heartbeatFrequencyMS == orig(this.heartbeatFrequencyMS)
this.heartbeatConnectRetryFrequencyMS == orig(this.heartbeatConnectRetryFrequencyMS)
this.heartbeatConnectTimeoutMS == orig(this.heartbeatConnectTimeoutMS)
this.heartbeatReadTimeoutMS == orig(this.heartbeatReadTimeoutMS)
this.acceptableLatencyDifferenceMS == orig(this.acceptableLatencyDifferenceMS)
this.heartbeatThreadCount == orig(this.heartbeatThreadCount)
this.requiredReplicaSetName == orig(this.requiredReplicaSetName)
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 20000
this.socketTimeout == 20000
this.dbDecoderFactory has only one value
this.dbDecoderFactory != null
this.dbEncoderFactory has only one value
this.dbEncoderFactory != null
this.socketFactory has only one value
this.socketFactory != null
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
===========================================================================
com.mongodb.MongoOptions.setSocketTimeout(int):::ENTER
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 20000
this.socketTimeout == 0
this.dbDecoderFactory has only one value
this.dbDecoderFactory != null
this.dbEncoderFactory has only one value
this.dbEncoderFactory != null
this.socketFactory has only one value
this.socketFactory != null
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
timeoutMS == 20000
===========================================================================
com.mongodb.MongoOptions.setSocketTimeout(int):::EXIT
this.description == orig(this.description)
this.connectionsPerHost == orig(this.connectionsPerHost)
this.threadsAllowedToBlockForConnectionMultiplier == orig(this.threadsAllowedToBlockForConnectionMultiplier)
this.maxWaitTime == orig(this.maxWaitTime)
this.connectTimeout == orig(this.connectTimeout)
this.socketKeepAlive == orig(this.socketKeepAlive)
this.autoConnectRetry == orig(this.autoConnectRetry)
this.maxAutoConnectRetryTime == orig(this.maxAutoConnectRetryTime)
this.slaveOk == orig(this.slaveOk)
this.readPreference == orig(this.readPreference)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this.dbDecoderFactory == orig(this.dbDecoderFactory)
this.dbDecoderFactory.getClass().getName() == orig(this.dbDecoderFactory.getClass().getName())
this.dbEncoderFactory == orig(this.dbEncoderFactory)
this.dbEncoderFactory.getClass().getName() == orig(this.dbEncoderFactory.getClass().getName())
this.safe == orig(this.safe)
this.w == orig(this.w)
this.wtimeout == orig(this.wtimeout)
this.fsync == orig(this.fsync)
this.j == orig(this.j)
this.socketFactory == orig(this.socketFactory)
this.socketFactory.getClass().getName() == orig(this.socketFactory.getClass().getName())
this.cursorFinalizerEnabled == orig(this.cursorFinalizerEnabled)
this.writeConcern == orig(this.writeConcern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this.alwaysUseMBeans == orig(this.alwaysUseMBeans)
this.minConnectionsPerHost == orig(this.minConnectionsPerHost)
this.maxConnectionIdleTime == orig(this.maxConnectionIdleTime)
this.maxConnectionLifeTime == orig(this.maxConnectionLifeTime)
this.heartbeatFrequencyMS == orig(this.heartbeatFrequencyMS)
this.heartbeatConnectRetryFrequencyMS == orig(this.heartbeatConnectRetryFrequencyMS)
this.heartbeatConnectTimeoutMS == orig(this.heartbeatConnectTimeoutMS)
this.heartbeatReadTimeoutMS == orig(this.heartbeatReadTimeoutMS)
this.acceptableLatencyDifferenceMS == orig(this.acceptableLatencyDifferenceMS)
this.heartbeatThreadCount == orig(this.heartbeatThreadCount)
this.requiredReplicaSetName == orig(this.requiredReplicaSetName)
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 20000
this.socketTimeout == 20000
this.dbDecoderFactory has only one value
this.dbDecoderFactory != null
this.dbEncoderFactory has only one value
this.dbEncoderFactory != null
this.socketFactory has only one value
this.socketFactory != null
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
===========================================================================
com.mongodb.MongoOptions.toString():::ENTER
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 10000
this.socketTimeout == 0
this.dbDecoderFactory has only one value
this.dbEncoderFactory has only one value
this.socketFactory has only one value
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
===========================================================================
com.mongodb.MongoOptions.toString():::EXIT
this.description == orig(this.description)
this.connectionsPerHost == orig(this.connectionsPerHost)
this.threadsAllowedToBlockForConnectionMultiplier == orig(this.threadsAllowedToBlockForConnectionMultiplier)
this.maxWaitTime == orig(this.maxWaitTime)
this.connectTimeout == orig(this.connectTimeout)
this.socketTimeout == orig(this.socketTimeout)
this.socketKeepAlive == orig(this.socketKeepAlive)
this.autoConnectRetry == orig(this.autoConnectRetry)
this.maxAutoConnectRetryTime == orig(this.maxAutoConnectRetryTime)
this.slaveOk == orig(this.slaveOk)
this.readPreference == orig(this.readPreference)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this.dbDecoderFactory == orig(this.dbDecoderFactory)
this.dbDecoderFactory.getClass().getName() == orig(this.dbDecoderFactory.getClass().getName())
this.dbEncoderFactory == orig(this.dbEncoderFactory)
this.dbEncoderFactory.getClass().getName() == orig(this.dbEncoderFactory.getClass().getName())
this.safe == orig(this.safe)
this.w == orig(this.w)
this.wtimeout == orig(this.wtimeout)
this.fsync == orig(this.fsync)
this.j == orig(this.j)
this.socketFactory == orig(this.socketFactory)
this.socketFactory.getClass().getName() == orig(this.socketFactory.getClass().getName())
this.cursorFinalizerEnabled == orig(this.cursorFinalizerEnabled)
this.writeConcern == orig(this.writeConcern)
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
com.mongodb.WriteConcern.ERRORS_IGNORED._w == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w)
com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._w.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._wtimeout)
com.mongodb.WriteConcern.ERRORS_IGNORED._fsync == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._fsync)
com.mongodb.WriteConcern.ERRORS_IGNORED._j == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._j)
com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError == orig(com.mongodb.WriteConcern.ERRORS_IGNORED._continueOnError)
com.mongodb.WriteConcern.ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w)
com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._j)
com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w)
com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.UNACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._j)
com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.FSYNCED._w == orig(com.mongodb.WriteConcern.FSYNCED._w)
com.mongodb.WriteConcern.FSYNCED._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNCED._w.getClass().getName())
com.mongodb.WriteConcern.FSYNCED._wtimeout == orig(com.mongodb.WriteConcern.FSYNCED._wtimeout)
com.mongodb.WriteConcern.FSYNCED._fsync == orig(com.mongodb.WriteConcern.FSYNCED._fsync)
com.mongodb.WriteConcern.FSYNCED._j == orig(com.mongodb.WriteConcern.FSYNCED._j)
com.mongodb.WriteConcern.FSYNCED._continueOnError == orig(com.mongodb.WriteConcern.FSYNCED._continueOnError)
com.mongodb.WriteConcern.JOURNALED._w == orig(com.mongodb.WriteConcern.JOURNALED._w)
com.mongodb.WriteConcern.JOURNALED._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNALED._w.getClass().getName())
com.mongodb.WriteConcern.JOURNALED._wtimeout == orig(com.mongodb.WriteConcern.JOURNALED._wtimeout)
com.mongodb.WriteConcern.JOURNALED._fsync == orig(com.mongodb.WriteConcern.JOURNALED._fsync)
com.mongodb.WriteConcern.JOURNALED._j == orig(com.mongodb.WriteConcern.JOURNALED._j)
com.mongodb.WriteConcern.JOURNALED._continueOnError == orig(com.mongodb.WriteConcern.JOURNALED._continueOnError)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._w.getClass().getName())
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._wtimeout)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._fsync)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._j)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED._continueOnError)
com.mongodb.WriteConcern.NONE._w == orig(com.mongodb.WriteConcern.NONE._w)
com.mongodb.WriteConcern.NONE._w.getClass().getName() == orig(com.mongodb.WriteConcern.NONE._w.getClass().getName())
com.mongodb.WriteConcern.NONE._wtimeout == orig(com.mongodb.WriteConcern.NONE._wtimeout)
com.mongodb.WriteConcern.NONE._fsync == orig(com.mongodb.WriteConcern.NONE._fsync)
com.mongodb.WriteConcern.NONE._j == orig(com.mongodb.WriteConcern.NONE._j)
com.mongodb.WriteConcern.NONE._continueOnError == orig(com.mongodb.WriteConcern.NONE._continueOnError)
com.mongodb.WriteConcern.NORMAL._w == orig(com.mongodb.WriteConcern.NORMAL._w)
com.mongodb.WriteConcern.NORMAL._w.getClass().getName() == orig(com.mongodb.WriteConcern.NORMAL._w.getClass().getName())
com.mongodb.WriteConcern.NORMAL._wtimeout == orig(com.mongodb.WriteConcern.NORMAL._wtimeout)
com.mongodb.WriteConcern.NORMAL._fsync == orig(com.mongodb.WriteConcern.NORMAL._fsync)
com.mongodb.WriteConcern.NORMAL._j == orig(com.mongodb.WriteConcern.NORMAL._j)
com.mongodb.WriteConcern.NORMAL._continueOnError == orig(com.mongodb.WriteConcern.NORMAL._continueOnError)
com.mongodb.WriteConcern.SAFE._w == orig(com.mongodb.WriteConcern.SAFE._w)
com.mongodb.WriteConcern.SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.SAFE._w.getClass().getName())
com.mongodb.WriteConcern.SAFE._wtimeout == orig(com.mongodb.WriteConcern.SAFE._wtimeout)
com.mongodb.WriteConcern.SAFE._fsync == orig(com.mongodb.WriteConcern.SAFE._fsync)
com.mongodb.WriteConcern.SAFE._j == orig(com.mongodb.WriteConcern.SAFE._j)
com.mongodb.WriteConcern.SAFE._continueOnError == orig(com.mongodb.WriteConcern.SAFE._continueOnError)
com.mongodb.WriteConcern.MAJORITY._w == orig(com.mongodb.WriteConcern.MAJORITY._w)
com.mongodb.WriteConcern.MAJORITY._w.getClass().getName() == orig(com.mongodb.WriteConcern.MAJORITY._w.getClass().getName())
com.mongodb.WriteConcern.MAJORITY._wtimeout == orig(com.mongodb.WriteConcern.MAJORITY._wtimeout)
com.mongodb.WriteConcern.MAJORITY._fsync == orig(com.mongodb.WriteConcern.MAJORITY._fsync)
com.mongodb.WriteConcern.MAJORITY._j == orig(com.mongodb.WriteConcern.MAJORITY._j)
com.mongodb.WriteConcern.MAJORITY._continueOnError == orig(com.mongodb.WriteConcern.MAJORITY._continueOnError)
com.mongodb.WriteConcern.FSYNC_SAFE._w == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w)
com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.FSYNC_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout == orig(com.mongodb.WriteConcern.FSYNC_SAFE._wtimeout)
com.mongodb.WriteConcern.FSYNC_SAFE._fsync == orig(com.mongodb.WriteConcern.FSYNC_SAFE._fsync)
com.mongodb.WriteConcern.FSYNC_SAFE._j == orig(com.mongodb.WriteConcern.FSYNC_SAFE._j)
com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError == orig(com.mongodb.WriteConcern.FSYNC_SAFE._continueOnError)
com.mongodb.WriteConcern.JOURNAL_SAFE._w == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w)
com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._wtimeout)
com.mongodb.WriteConcern.JOURNAL_SAFE._fsync == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._fsync)
com.mongodb.WriteConcern.JOURNAL_SAFE._j == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._j)
com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError == orig(com.mongodb.WriteConcern.JOURNAL_SAFE._continueOnError)
com.mongodb.WriteConcern.REPLICAS_SAFE._w == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w)
com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName() == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._w.getClass().getName())
com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._wtimeout)
com.mongodb.WriteConcern.REPLICAS_SAFE._fsync == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._fsync)
com.mongodb.WriteConcern.REPLICAS_SAFE._j == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._j)
com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError == orig(com.mongodb.WriteConcern.REPLICAS_SAFE._continueOnError)
this.alwaysUseMBeans == orig(this.alwaysUseMBeans)
this.minConnectionsPerHost == orig(this.minConnectionsPerHost)
this.maxConnectionIdleTime == orig(this.maxConnectionIdleTime)
this.maxConnectionLifeTime == orig(this.maxConnectionLifeTime)
this.heartbeatFrequencyMS == orig(this.heartbeatFrequencyMS)
this.heartbeatConnectRetryFrequencyMS == orig(this.heartbeatConnectRetryFrequencyMS)
this.heartbeatConnectTimeoutMS == orig(this.heartbeatConnectTimeoutMS)
this.heartbeatReadTimeoutMS == orig(this.heartbeatReadTimeoutMS)
this.acceptableLatencyDifferenceMS == orig(this.acceptableLatencyDifferenceMS)
this.heartbeatThreadCount == orig(this.heartbeatThreadCount)
this.requiredReplicaSetName == orig(this.requiredReplicaSetName)
this.connectionsPerHost == 10
this.threadsAllowedToBlockForConnectionMultiplier == 5
this.maxWaitTime == 120000
this.connectTimeout == 10000
this.socketTimeout == 0
this.dbDecoderFactory has only one value
this.dbEncoderFactory has only one value
this.socketFactory has only one value
this.cursorFinalizerEnabled == true
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatConnectTimeoutMS == 20000
this.heartbeatReadTimeoutMS == 20000
this.acceptableLatencyDifferenceMS == 15
return.toString == "MongoOptions{description='null', connectionsPerHost=10, threadsAllowedToBlockForConnectionMultiplier=5, maxWaitTime=120000, connectTimeout=10000, socketTimeout=0, socketKeepAlive=false, autoConnectRetry=false, maxAutoConnectRetryTime=0, slaveOk=false, readPreference=null, dbDecoderFactory=DefaultDBDecoder.DefaultFactory, dbEncoderFactory=DefaultDBEncoder.DefaultFactory, safe=false, w=0, wtimeout=0, fsync=false, j=false, socketFactory=javax.net.DefaultSocketFactory@39403943, cursorFinalizerEnabled=true, writeConcern=null, alwaysUseMBeans=false, requiredReplicaSetName=null}"
===========================================================================
com.mongodb.MongoSocketException:::CLASS
===========================================================================
com.mongodb.MongoSocketException:::OBJECT
this._code == -2
===========================================================================
com.mongodb.MongoSocketException.MongoSocketException(java.lang.String, java.io.IOException):::ENTER
msg has only one value
msg != null
msg.toString == "Exception opening the socket"
ioe != null
===========================================================================
com.mongodb.MongoSocketException.MongoSocketException(java.lang.String, java.io.IOException):::EXIT
msg.toString == orig(msg.toString)
msg.toString == "Exception opening the socket"
===========================================================================
com.mongodb.MongoTimeoutException:::CLASS
===========================================================================
com.mongodb.MongoTimeoutException:::OBJECT
this has only one value
this._code == -3
===========================================================================
com.mongodb.MongoTimeoutException.MongoTimeoutException(java.lang.String):::ENTER
msg has only one value
msg.toString == "Timed out while waiting for a server that matches AnyServerSelector{} after 239 ms"
===========================================================================
com.mongodb.MongoTimeoutException.MongoTimeoutException(java.lang.String):::EXIT
msg.toString == orig(msg.toString)
msg.toString == "Timed out while waiting for a server that matches AnyServerSelector{} after 239 ms"
===========================================================================
com.mongodb.NoOpClusterListener:::OBJECT
===========================================================================
com.mongodb.NoOpClusterListener.NoOpClusterListener():::EXIT
===========================================================================
com.mongodb.PooledConnectionProvider$ConnectionItemFactory:::OBJECT
com.mongodb.PooledConnectionProvider.LOGGER has only one value
com.mongodb.PooledConnectionProvider.this.pool == null
com.mongodb.PooledConnectionProvider.this.settings.maxSize == 10
com.mongodb.PooledConnectionProvider.this.settings.minSize == 0
com.mongodb.PooledConnectionProvider.this.settings.maxWaitQueueSize == 50
com.mongodb.PooledConnectionProvider.this.settings.maxWaitTimeMS == 120000
com.mongodb.PooledConnectionProvider.this.settings.maxConnectionLifeTimeMS == 0
com.mongodb.PooledConnectionProvider.this.settings.maxConnectionIdleTimeMS == 0
com.mongodb.PooledConnectionProvider.this.settings.maintenanceInitialDelayMS == 0
com.mongodb.PooledConnectionProvider.this.settings.maintenanceFrequencyMS == 60000
com.mongodb.PooledConnectionProvider.this.sizeMaintenanceTimer == null
com.mongodb.PooledConnectionProvider.this.clusterId.toString one of { "1", "2" }
com.mongodb.PooledConnectionProvider.this.serverAddress._host has only one value
com.mongodb.PooledConnectionProvider.this.serverAddress._host.toString == "localhost"
com.mongodb.PooledConnectionProvider.this.serverAddress._port == 27017
com.mongodb.PooledConnectionProvider.this.maintenanceTask == null
com.mongodb.PooledConnectionProvider.this.connectionPoolListener == null
com.mongodb.PooledConnectionProvider.this.connectionFactory.getClass().getName() == com.mongodb.DBPortFactory.class
com.mongodb.PooledConnectionProvider.this.closed == false
com.mongodb.PooledConnectionProvider.this.hasWorked == false
===========================================================================
com.mongodb.PooledConnectionProvider$ConnectionItemFactory.ConnectionItemFactory(com.mongodb.PooledConnectionProvider):::ENTER
com.mongodb.PooledConnectionProvider.LOGGER has only one value
com.mongodb.PooledConnectionProvider.this.pool == null
com.mongodb.PooledConnectionProvider.this.settings.maxSize == 10
com.mongodb.PooledConnectionProvider.this.settings.minSize == 0
com.mongodb.PooledConnectionProvider.this.settings.maxWaitQueueSize == 50
com.mongodb.PooledConnectionProvider.this.settings.maxWaitTimeMS == 120000
com.mongodb.PooledConnectionProvider.this.settings.maxConnectionLifeTimeMS == 0
com.mongodb.PooledConnectionProvider.this.settings.maxConnectionIdleTimeMS == 0
com.mongodb.PooledConnectionProvider.this.settings.maintenanceInitialDelayMS == 0
com.mongodb.PooledConnectionProvider.this.settings.maintenanceFrequencyMS == 60000
com.mongodb.PooledConnectionProvider.this.sizeMaintenanceTimer == null
com.mongodb.PooledConnectionProvider.this.clusterId.toString one of { "1", "2" }
com.mongodb.PooledConnectionProvider.this.serverAddress._host has only one value
com.mongodb.PooledConnectionProvider.this.serverAddress._host.toString == "localhost"
com.mongodb.PooledConnectionProvider.this.serverAddress._port == 27017
com.mongodb.PooledConnectionProvider.this.maintenanceTask == null
com.mongodb.PooledConnectionProvider.this.connectionPoolListener == null
com.mongodb.PooledConnectionProvider.this.connectionFactory.getClass().getName() == com.mongodb.DBPortFactory.class
com.mongodb.PooledConnectionProvider.this.closed == false
com.mongodb.PooledConnectionProvider.this.hasWorked == false
===========================================================================
com.mongodb.PooledConnectionProvider$ConnectionItemFactory.ConnectionItemFactory(com.mongodb.PooledConnectionProvider):::EXIT
com.mongodb.PooledConnectionProvider.this == orig(com.mongodb.PooledConnectionProvider.this)
com.mongodb.PooledConnectionProvider.LOGGER == orig(com.mongodb.PooledConnectionProvider.LOGGER)
com.mongodb.PooledConnectionProvider.this.pool == orig(com.mongodb.PooledConnectionProvider.this.pool)
com.mongodb.PooledConnectionProvider.this.settings == orig(com.mongodb.PooledConnectionProvider.this.settings)
com.mongodb.PooledConnectionProvider.this.settings.maxSize == orig(com.mongodb.PooledConnectionProvider.this.settings.maxSize)
com.mongodb.PooledConnectionProvider.this.settings.minSize == orig(com.mongodb.PooledConnectionProvider.this.settings.minSize)
com.mongodb.PooledConnectionProvider.this.settings.maxWaitQueueSize == orig(com.mongodb.PooledConnectionProvider.this.settings.maxWaitQueueSize)
com.mongodb.PooledConnectionProvider.this.settings.maxWaitTimeMS == orig(com.mongodb.PooledConnectionProvider.this.settings.maxWaitTimeMS)
com.mongodb.PooledConnectionProvider.this.settings.maxConnectionLifeTimeMS == orig(com.mongodb.PooledConnectionProvider.this.settings.maxConnectionLifeTimeMS)
com.mongodb.PooledConnectionProvider.this.settings.maxConnectionIdleTimeMS == orig(com.mongodb.PooledConnectionProvider.this.settings.maxConnectionIdleTimeMS)
com.mongodb.PooledConnectionProvider.this.settings.maintenanceInitialDelayMS == orig(com.mongodb.PooledConnectionProvider.this.settings.maintenanceInitialDelayMS)
com.mongodb.PooledConnectionProvider.this.settings.maintenanceFrequencyMS == orig(com.mongodb.PooledConnectionProvider.this.settings.maintenanceFrequencyMS)
com.mongodb.PooledConnectionProvider.this.waitQueueSize == orig(com.mongodb.PooledConnectionProvider.this.waitQueueSize)
com.mongodb.PooledConnectionProvider.this.generation == orig(com.mongodb.PooledConnectionProvider.this.generation)
com.mongodb.PooledConnectionProvider.this.sizeMaintenanceTimer == orig(com.mongodb.PooledConnectionProvider.this.sizeMaintenanceTimer)
com.mongodb.PooledConnectionProvider.this.clusterId == orig(com.mongodb.PooledConnectionProvider.this.clusterId)
com.mongodb.PooledConnectionProvider.this.clusterId.toString == orig(com.mongodb.PooledConnectionProvider.this.clusterId.toString)
com.mongodb.PooledConnectionProvider.this.serverAddress == orig(com.mongodb.PooledConnectionProvider.this.serverAddress)
com.mongodb.PooledConnectionProvider.this.serverAddress._host == orig(com.mongodb.PooledConnectionProvider.this.serverAddress._host)
com.mongodb.PooledConnectionProvider.this.serverAddress._host.toString == orig(com.mongodb.PooledConnectionProvider.this.serverAddress._host.toString)
com.mongodb.PooledConnectionProvider.this.serverAddress._port == orig(com.mongodb.PooledConnectionProvider.this.serverAddress._port)
com.mongodb.PooledConnectionProvider.this.maintenanceTask == orig(com.mongodb.PooledConnectionProvider.this.maintenanceTask)
com.mongodb.PooledConnectionProvider.this.connectionPoolListener == orig(com.mongodb.PooledConnectionProvider.this.connectionPoolListener)
com.mongodb.PooledConnectionProvider.this.connectionFactory == orig(com.mongodb.PooledConnectionProvider.this.connectionFactory)
com.mongodb.PooledConnectionProvider.this.connectionFactory.getClass().getName() == orig(com.mongodb.PooledConnectionProvider.this.connectionFactory.getClass().getName())
com.mongodb.PooledConnectionProvider.this.closed == orig(com.mongodb.PooledConnectionProvider.this.closed)
com.mongodb.PooledConnectionProvider.this.hasWorked == orig(com.mongodb.PooledConnectionProvider.this.hasWorked)
===========================================================================
com.mongodb.PooledConnectionProvider:::CLASS
com.mongodb.PooledConnectionProvider.LOGGER has only one value
com.mongodb.PooledConnectionProvider.LOGGER != null
===========================================================================
com.mongodb.PooledConnectionProvider:::OBJECT
this.pool != null
this.pool.maxSize == 10
this.pool.itemFactory != null
this.pool.itemFactory.getClass().getName() == com.mongodb.PooledConnectionProvider$ConnectionItemFactory.class
this.pool.available != null
this.pool.available.getClass().getName() == com.mongodb.ConcurrentLinkedDeque.class
this.pool.permits != null
this.pool.closed == false
this.settings != null
this.settings.maxSize == 10
this.settings.minSize == 0
this.settings.maxWaitQueueSize == 50
this.settings.maxWaitTimeMS == 120000
this.settings.maxConnectionLifeTimeMS == 0
this.settings.maxConnectionIdleTimeMS == 0
this.settings.maintenanceInitialDelayMS == 0
this.settings.maintenanceFrequencyMS == 60000
this.waitQueueSize != null
this.generation != null
this.sizeMaintenanceTimer == null
this.clusterId != null
this.clusterId.toString one of { "1", "2" }
this.serverAddress != null
this.serverAddress._host has only one value
this.serverAddress._host != null
this.serverAddress._host.toString == "localhost"
this.serverAddress._port == 27017
this.maintenanceTask == null
this.connectionPoolListener.getClass().getName() == com.mongodb.JMXConnectionPoolListener.class
this.connectionFactory != null
this.connectionFactory.getClass().getName() == com.mongodb.DBPortFactory.class
this.closed == false
this.hasWorked == false
===========================================================================
com.mongodb.PooledConnectionProvider.PooledConnectionProvider(java.lang.String, com.mongodb.ServerAddress, com.mongodb.ConnectionFactory, com.mongodb.ConnectionPoolSettings, com.mongodb.ConnectionPoolListener):::ENTER
clusterId.toString one of { "1", "2" }
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
connectionFactory.getClass().getName() == com.mongodb.DBPortFactory.class
settings.maxSize == 10
settings.minSize == 0
settings.maxWaitQueueSize == 50
settings.maxWaitTimeMS == 120000
settings.maxConnectionLifeTimeMS == 0
settings.maxConnectionIdleTimeMS == 0
settings.maintenanceInitialDelayMS == 0
settings.maintenanceFrequencyMS == 60000
connectionPoolListener.getClass().getName() == com.mongodb.JMXConnectionPoolListener.class
===========================================================================
com.mongodb.PooledConnectionProvider.PooledConnectionProvider(java.lang.String, com.mongodb.ServerAddress, com.mongodb.ConnectionFactory, com.mongodb.ConnectionPoolSettings, com.mongodb.ConnectionPoolListener):::EXIT
clusterId.toString == orig(clusterId.toString)
serverAddress._host == orig(serverAddress._host)
serverAddress._host.toString == orig(serverAddress._host.toString)
serverAddress._port == orig(serverAddress._port)
settings.maxSize == orig(settings.maxSize)
settings.minSize == orig(settings.minSize)
settings.maxWaitQueueSize == orig(settings.maxWaitQueueSize)
settings.maxWaitTimeMS == orig(settings.maxWaitTimeMS)
settings.maxConnectionLifeTimeMS == orig(settings.maxConnectionLifeTimeMS)
settings.maxConnectionIdleTimeMS == orig(settings.maxConnectionIdleTimeMS)
settings.maintenanceInitialDelayMS == orig(settings.maintenanceInitialDelayMS)
settings.maintenanceFrequencyMS == orig(settings.maintenanceFrequencyMS)
clusterId.toString one of { "1", "2" }
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
settings.maxSize == 10
settings.minSize == 0
settings.maxWaitQueueSize == 50
settings.maxWaitTimeMS == 120000
settings.maxConnectionLifeTimeMS == 0
settings.maxConnectionIdleTimeMS == 0
settings.maintenanceInitialDelayMS == 0
settings.maintenanceFrequencyMS == 60000
===========================================================================
com.mongodb.PooledConnectionProvider.createMaintenanceTask():::ENTER
this.connectionPoolListener == null
===========================================================================
com.mongodb.PooledConnectionProvider.createMaintenanceTask():::EXIT
com.mongodb.PooledConnectionProvider.LOGGER == orig(com.mongodb.PooledConnectionProvider.LOGGER)
this.pool == orig(this.pool)
this.pool.maxSize == orig(this.pool.maxSize)
this.pool.itemFactory == orig(this.pool.itemFactory)
this.pool.itemFactory.getClass().getName() == orig(this.pool.itemFactory.getClass().getName())
this.pool.available == orig(this.pool.available)
this.pool.available.getClass().getName() == orig(this.pool.available.getClass().getName())
this.pool.permits == orig(this.pool.permits)
this.pool.closed == orig(this.pool.closed)
this.settings == orig(this.settings)
this.settings.maxSize == orig(this.settings.maxSize)
this.settings.minSize == orig(this.settings.minSize)
this.settings.maxWaitQueueSize == orig(this.settings.maxWaitQueueSize)
this.settings.maxWaitTimeMS == orig(this.settings.maxWaitTimeMS)
this.settings.maxConnectionLifeTimeMS == orig(this.settings.maxConnectionLifeTimeMS)
this.settings.maxConnectionIdleTimeMS == orig(this.settings.maxConnectionIdleTimeMS)
this.settings.maintenanceInitialDelayMS == orig(this.settings.maintenanceInitialDelayMS)
this.settings.maintenanceFrequencyMS == orig(this.settings.maintenanceFrequencyMS)
this.waitQueueSize == orig(this.waitQueueSize)
this.generation == orig(this.generation)
this.sizeMaintenanceTimer == orig(this.sizeMaintenanceTimer)
this.clusterId == orig(this.clusterId)
this.clusterId.toString == orig(this.clusterId.toString)
this.serverAddress == orig(this.serverAddress)
this.serverAddress._host == orig(this.serverAddress._host)
this.serverAddress._host.toString == orig(this.serverAddress._host.toString)
this.serverAddress._port == orig(this.serverAddress._port)
this.maintenanceTask == orig(this.maintenanceTask)
this.connectionPoolListener == orig(this.connectionPoolListener)
this.connectionFactory == orig(this.connectionFactory)
this.connectionFactory.getClass().getName() == orig(this.connectionFactory.getClass().getName())
this.closed == orig(this.closed)
this.hasWorked == orig(this.hasWorked)
this.connectionPoolListener == null
return == null
===========================================================================
com.mongodb.PooledConnectionProvider.createTimer():::ENTER
this.connectionPoolListener == null
===========================================================================
com.mongodb.PooledConnectionProvider.createTimer():::EXIT142
===========================================================================
com.mongodb.PooledConnectionProvider.createTimer():::EXIT
com.mongodb.PooledConnectionProvider.LOGGER == orig(com.mongodb.PooledConnectionProvider.LOGGER)
this.pool == orig(this.pool)
this.pool.maxSize == orig(this.pool.maxSize)
this.pool.itemFactory == orig(this.pool.itemFactory)
this.pool.itemFactory.getClass().getName() == orig(this.pool.itemFactory.getClass().getName())
this.pool.available == orig(this.pool.available)
this.pool.available.getClass().getName() == orig(this.pool.available.getClass().getName())
this.pool.permits == orig(this.pool.permits)
this.pool.closed == orig(this.pool.closed)
this.settings == orig(this.settings)
this.settings.maxSize == orig(this.settings.maxSize)
this.settings.minSize == orig(this.settings.minSize)
this.settings.maxWaitQueueSize == orig(this.settings.maxWaitQueueSize)
this.settings.maxWaitTimeMS == orig(this.settings.maxWaitTimeMS)
this.settings.maxConnectionLifeTimeMS == orig(this.settings.maxConnectionLifeTimeMS)
this.settings.maxConnectionIdleTimeMS == orig(this.settings.maxConnectionIdleTimeMS)
this.settings.maintenanceInitialDelayMS == orig(this.settings.maintenanceInitialDelayMS)
this.settings.maintenanceFrequencyMS == orig(this.settings.maintenanceFrequencyMS)
this.waitQueueSize == orig(this.waitQueueSize)
this.generation == orig(this.generation)
this.sizeMaintenanceTimer == orig(this.sizeMaintenanceTimer)
this.clusterId == orig(this.clusterId)
this.clusterId.toString == orig(this.clusterId.toString)
this.serverAddress == orig(this.serverAddress)
this.serverAddress._host == orig(this.serverAddress._host)
this.serverAddress._host.toString == orig(this.serverAddress._host.toString)
this.serverAddress._port == orig(this.serverAddress._port)
this.maintenanceTask == orig(this.maintenanceTask)
this.connectionPoolListener == orig(this.connectionPoolListener)
this.connectionFactory == orig(this.connectionFactory)
this.connectionFactory.getClass().getName() == orig(this.connectionFactory.getClass().getName())
this.closed == orig(this.closed)
this.hasWorked == orig(this.hasWorked)
this.connectionPoolListener == null
return == null
===========================================================================
com.mongodb.PooledConnectionProvider.shouldEnsureMinSize():::ENTER
this.connectionPoolListener == null
===========================================================================
com.mongodb.PooledConnectionProvider.shouldEnsureMinSize():::EXIT
com.mongodb.PooledConnectionProvider.LOGGER == orig(com.mongodb.PooledConnectionProvider.LOGGER)
this.pool == orig(this.pool)
this.pool.maxSize == orig(this.pool.maxSize)
this.pool.itemFactory == orig(this.pool.itemFactory)
this.pool.itemFactory.getClass().getName() == orig(this.pool.itemFactory.getClass().getName())
this.pool.available == orig(this.pool.available)
this.pool.available.getClass().getName() == orig(this.pool.available.getClass().getName())
this.pool.permits == orig(this.pool.permits)
this.pool.closed == orig(this.pool.closed)
this.settings == orig(this.settings)
this.settings.maxSize == orig(this.settings.maxSize)
this.settings.minSize == orig(this.settings.minSize)
this.settings.maxWaitQueueSize == orig(this.settings.maxWaitQueueSize)
this.settings.maxWaitTimeMS == orig(this.settings.maxWaitTimeMS)
this.settings.maxConnectionLifeTimeMS == orig(this.settings.maxConnectionLifeTimeMS)
this.settings.maxConnectionIdleTimeMS == orig(this.settings.maxConnectionIdleTimeMS)
this.settings.maintenanceInitialDelayMS == orig(this.settings.maintenanceInitialDelayMS)
this.settings.maintenanceFrequencyMS == orig(this.settings.maintenanceFrequencyMS)
this.waitQueueSize == orig(this.waitQueueSize)
this.generation == orig(this.generation)
this.sizeMaintenanceTimer == orig(this.sizeMaintenanceTimer)
this.clusterId == orig(this.clusterId)
this.clusterId.toString == orig(this.clusterId.toString)
this.serverAddress == orig(this.serverAddress)
this.serverAddress._host == orig(this.serverAddress._host)
this.serverAddress._host.toString == orig(this.serverAddress._host.toString)
this.serverAddress._port == orig(this.serverAddress._port)
this.maintenanceTask == orig(this.maintenanceTask)
this.connectionPoolListener == orig(this.connectionPoolListener)
this.connectionFactory == orig(this.connectionFactory)
this.connectionFactory.getClass().getName() == orig(this.connectionFactory.getClass().getName())
this.closed == orig(this.closed)
this.hasWorked == orig(this.hasWorked)
this.connectionPoolListener == null
return == false
===========================================================================
com.mongodb.PooledConnectionProvider.shouldEnsureMinSize():::EXIT;condition="not(return == true)"
===========================================================================
com.mongodb.PooledConnectionProvider.shouldPrune():::ENTER
this.connectionPoolListener == null
===========================================================================
com.mongodb.PooledConnectionProvider.shouldPrune():::EXIT
com.mongodb.PooledConnectionProvider.LOGGER == orig(com.mongodb.PooledConnectionProvider.LOGGER)
this.pool == orig(this.pool)
this.pool.maxSize == orig(this.pool.maxSize)
this.pool.itemFactory == orig(this.pool.itemFactory)
this.pool.itemFactory.getClass().getName() == orig(this.pool.itemFactory.getClass().getName())
this.pool.available == orig(this.pool.available)
this.pool.available.getClass().getName() == orig(this.pool.available.getClass().getName())
this.pool.permits == orig(this.pool.permits)
this.pool.closed == orig(this.pool.closed)
this.settings == orig(this.settings)
this.settings.maxSize == orig(this.settings.maxSize)
this.settings.minSize == orig(this.settings.minSize)
this.settings.maxWaitQueueSize == orig(this.settings.maxWaitQueueSize)
this.settings.maxWaitTimeMS == orig(this.settings.maxWaitTimeMS)
this.settings.maxConnectionLifeTimeMS == orig(this.settings.maxConnectionLifeTimeMS)
this.settings.maxConnectionIdleTimeMS == orig(this.settings.maxConnectionIdleTimeMS)
this.settings.maintenanceInitialDelayMS == orig(this.settings.maintenanceInitialDelayMS)
this.settings.maintenanceFrequencyMS == orig(this.settings.maintenanceFrequencyMS)
this.waitQueueSize == orig(this.waitQueueSize)
this.generation == orig(this.generation)
this.sizeMaintenanceTimer == orig(this.sizeMaintenanceTimer)
this.clusterId == orig(this.clusterId)
this.clusterId.toString == orig(this.clusterId.toString)
this.serverAddress == orig(this.serverAddress)
this.serverAddress._host == orig(this.serverAddress._host)
this.serverAddress._host.toString == orig(this.serverAddress._host.toString)
this.serverAddress._port == orig(this.serverAddress._port)
this.maintenanceTask == orig(this.maintenanceTask)
this.connectionPoolListener == orig(this.connectionPoolListener)
this.connectionFactory == orig(this.connectionFactory)
this.connectionFactory.getClass().getName() == orig(this.connectionFactory.getClass().getName())
this.closed == orig(this.closed)
this.hasWorked == orig(this.hasWorked)
this.connectionPoolListener == null
return == false
===========================================================================
com.mongodb.PooledConnectionProvider.shouldPrune():::EXIT;condition="not(return == true)"
===========================================================================
com.mongodb.ReadPreference$PrimaryReadPreference:::OBJECT
this has only one value
===========================================================================
com.mongodb.ReadPreference$PrimaryReadPreference.PrimaryReadPreference():::EXIT
===========================================================================
com.mongodb.ReadPreference:::CLASS
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY has only one value
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._SECONDARY_PREFERRED has only one value
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
===========================================================================
com.mongodb.ReadPreference:::OBJECT
===========================================================================
com.mongodb.ReadPreference.ReadPreference():::EXIT
===========================================================================
com.mongodb.ReadPreference.primary():::ENTER
===========================================================================
com.mongodb.ReadPreference.primary():::EXIT
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference._PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._SECONDARY_PREFERRED == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
return has only one value
return.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
===========================================================================
com.mongodb.ServerAddress:::OBJECT
this._host has only one value
this._host != null
this._host.toString == "localhost"
this._port == 27017
===========================================================================
com.mongodb.ServerAddress.ServerAddress(java.lang.String):::ENTER
host has only one value
host.toString == "localhost"
===========================================================================
com.mongodb.ServerAddress.ServerAddress(java.lang.String):::EXIT
host.toString == orig(host.toString)
host.toString == "localhost"
===========================================================================
com.mongodb.ServerAddress.ServerAddress(java.lang.String, int):::ENTER
host has only one value
host.toString == "localhost"
port == 27017
===========================================================================
com.mongodb.ServerAddress.ServerAddress(java.lang.String, int):::EXIT
host.toString == orig(host.toString)
host.toString == "localhost"
===========================================================================
com.mongodb.ServerAddress.defaultPort():::EXIT
return == 27017
===========================================================================
com.mongodb.ServerAddress.equals(java.lang.Object):::ENTER
o != null
o.getClass().getName() == com.mongodb.ServerAddress.class
===========================================================================
com.mongodb.ServerAddress.equals(java.lang.Object):::EXIT145
===========================================================================
com.mongodb.ServerAddress.equals(java.lang.Object):::EXIT145;condition="return == true"
===========================================================================
com.mongodb.ServerAddress.equals(java.lang.Object):::EXIT
this._host == orig(this._host)
this._host.toString == orig(this._host.toString)
this._port == orig(this._port)
return == true
===========================================================================
com.mongodb.ServerAddress.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
com.mongodb.ServerAddress.getHost():::ENTER
===========================================================================
com.mongodb.ServerAddress.getHost():::EXIT
this._host == orig(this._host)
this._host.toString == orig(this._host.toString)
this._port == orig(this._port)
return has only one value
return.toString == "localhost"
===========================================================================
com.mongodb.ServerAddress.getPort():::ENTER
===========================================================================
com.mongodb.ServerAddress.getPort():::EXIT
this._host == orig(this._host)
this._host.toString == orig(this._host.toString)
this._port == orig(this._port)
return == 27017
===========================================================================
com.mongodb.ServerAddress.getSocketAddress():::ENTER
===========================================================================
com.mongodb.ServerAddress.getSocketAddress():::EXIT
this._host == orig(this._host)
this._host.toString == orig(this._host.toString)
this._port == orig(this._port)
return != null
===========================================================================
com.mongodb.ServerAddress.hashCode():::ENTER
===========================================================================
com.mongodb.ServerAddress.hashCode():::EXIT
this._host == orig(this._host)
this._host.toString == orig(this._host.toString)
this._port == orig(this._port)
return == 1311913046
===========================================================================
com.mongodb.ServerAddress.toString():::ENTER
===========================================================================
com.mongodb.ServerAddress.toString():::EXIT
this._host == orig(this._host)
this._host.toString == orig(this._host.toString)
this._port == orig(this._port)
return != null
return.toString == "localhost:27017"
===========================================================================
com.mongodb.ServerConnectionState:::OBJECT
===========================================================================
com.mongodb.ServerConnectionState.ServerConnectionState(java.lang.String, int):::ENTER
$hidden$1.toString one of { "Connected", "Connecting" }
$hidden$2 one of { 0, 1 }
===========================================================================
com.mongodb.ServerConnectionState.ServerConnectionState(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString one of { "Connected", "Connecting" }
===========================================================================
com.mongodb.ServerDescription$Builder:::OBJECT
this.address._host has only one value
this.address._host != null
this.address._host.toString == "localhost"
this.address._port == 27017
this.type has only one value
this.type != null
this.type.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.ServerType.StandAlone has only one value
com.mongodb.ServerType.StandAlone != null
com.mongodb.ServerType.StandAlone.getClass().getName() == com.mongodb.ServerType$1.class
com.mongodb.ServerType.ReplicaSetPrimary has only one value
com.mongodb.ServerType.ReplicaSetPrimary != null
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == com.mongodb.ServerType$2.class
com.mongodb.ServerType.ReplicaSetSecondary has only one value
com.mongodb.ServerType.ReplicaSetSecondary != null
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == com.mongodb.ServerType$3.class
com.mongodb.ServerType.ReplicaSetArbiter has only one value
com.mongodb.ServerType.ReplicaSetArbiter != null
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == com.mongodb.ServerType$4.class
com.mongodb.ServerType.ReplicaSetOther has only one value
com.mongodb.ServerType.ReplicaSetOther != null
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == com.mongodb.ServerType$5.class
com.mongodb.ServerType.ReplicaSetGhost has only one value
com.mongodb.ServerType.ReplicaSetGhost != null
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == com.mongodb.ServerType$6.class
com.mongodb.ServerType.ShardRouter has only one value
com.mongodb.ServerType.ShardRouter != null
com.mongodb.ServerType.ShardRouter.getClass().getName() == com.mongodb.ServerType$7.class
com.mongodb.ServerType.Unknown has only one value
com.mongodb.ServerType.Unknown != null
com.mongodb.ServerType.Unknown.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.ServerType.$VALUES has only one value
com.mongodb.ServerType.$VALUES != null
com.mongodb.ServerType.$VALUES.getClass().getName() == com.mongodb.ServerType[].class
com.mongodb.ServerType.$VALUES[] contains no nulls and has only one value, of length 8
com.mongodb.ServerType.$VALUES[] elements != null
com.mongodb.ServerType.$VALUES[].getClass().getName() == [null, null, null, null, null, null, null, null]
com.mongodb.ServerType.$VALUES[].getClass().getName() elements == null
this.hosts has only one value
this.hosts != null
this.hosts.getClass().getName() == java.util.Collections$EmptySet.class
this.passives has only one value
this.passives != null
this.passives.getClass().getName() == java.util.Collections$EmptySet.class
this.arbiters has only one value
this.arbiters != null
this.arbiters.getClass().getName() == java.util.Collections$EmptySet.class
this.primary == null
this.maxDocumentSize == 16777216
this.maxMessageSize == 33554432
this.maxWriteBatchSize == 512
this.tags != null
this.tags.frozen == true
this.tags.wrapped != null
this.tags.wrapped.getClass().getName() == java.util.HashMap.class
this.setName == null
this.averageLatency == 0
this.ok == false
com.mongodb.ServerConnectionState.Connecting has only one value
com.mongodb.ServerConnectionState.Connecting != null
com.mongodb.ServerConnectionState.Connected has only one value
com.mongodb.ServerConnectionState.Connected != null
com.mongodb.ServerConnectionState.$VALUES has only one value
com.mongodb.ServerConnectionState.$VALUES != null
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == com.mongodb.ServerConnectionState[].class
com.mongodb.ServerConnectionState.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ServerConnectionState.$VALUES[] elements != null
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() == [com.mongodb.ServerConnectionState, com.mongodb.ServerConnectionState]
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() elements == com.mongodb.ServerConnectionState.class
this.version != null
this.version.versionList != null
this.version.versionList[] contains no nulls and has only one value, of length 3
this.version.versionList[] elements has only one value
this.version.versionList[] elements != null
this.version.versionList[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.version.versionList[].getClass().getName() elements == java.lang.Integer.class
this.version.versionList.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.minWireVersion == 0
this.maxWireVersion == 0
size(com.mongodb.ServerType.$VALUES[]) == 8
size(com.mongodb.ServerConnectionState.$VALUES[]) == 2
size(this.version.versionList[]) == 3
===========================================================================
com.mongodb.ServerDescription$Builder.Builder():::EXIT
this.address == null
this.state == null
===========================================================================
com.mongodb.ServerDescription$Builder.address(com.mongodb.ServerAddress):::ENTER
this.address == null
this.state has only one value
this.state != null
address != null
address._host has only one value
address._host != null
address._host.toString == "localhost"
address._port == 27017
===========================================================================
com.mongodb.ServerDescription$Builder.address(com.mongodb.ServerAddress):::EXIT
this.type == orig(this.type)
this.type.getClass().getName() == orig(this.type.getClass().getName())
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
this.hosts == orig(this.hosts)
this.hosts.getClass().getName() == orig(this.hosts.getClass().getName())
this.passives == orig(this.passives)
this.passives.getClass().getName() == orig(this.passives.getClass().getName())
this.arbiters == orig(this.arbiters)
this.arbiters.getClass().getName() == orig(this.arbiters.getClass().getName())
this.primary == orig(this.primary)
this.maxDocumentSize == orig(this.maxDocumentSize)
this.maxMessageSize == orig(this.maxMessageSize)
this.maxWriteBatchSize == orig(this.maxWriteBatchSize)
this.tags == orig(this.tags)
this.tags.frozen == orig(this.tags.frozen)
this.tags.wrapped == orig(this.tags.wrapped)
this.tags.wrapped.getClass().getName() == orig(this.tags.wrapped.getClass().getName())
this.setName == orig(this.setName)
this.averageLatency == orig(this.averageLatency)
this.ok == orig(this.ok)
this.state == orig(this.state)
com.mongodb.ServerConnectionState.Connecting == orig(com.mongodb.ServerConnectionState.Connecting)
com.mongodb.ServerConnectionState.Connected == orig(com.mongodb.ServerConnectionState.Connected)
com.mongodb.ServerConnectionState.$VALUES == orig(com.mongodb.ServerConnectionState.$VALUES)
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == orig(com.mongodb.ServerConnectionState.$VALUES.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES[] == orig(com.mongodb.ServerConnectionState.$VALUES[])
this.version == orig(this.version)
this.version.versionList == orig(this.version.versionList)
this.version.versionList[] == orig(this.version.versionList[])
this.version.versionList.getClass().getName() == orig(this.version.versionList.getClass().getName())
this.minWireVersion == orig(this.minWireVersion)
this.maxWireVersion == orig(this.maxWireVersion)
address._host == orig(address._host)
address._host.toString == orig(address._host.toString)
address._port == orig(address._port)
this.address != null
this.state has only one value
this.state != null
address._host has only one value
address._host != null
address._host.toString == "localhost"
address._port == 27017
return != null
return.address != null
return.address._host has only one value
return.address._host != null
return.address._host.toString == "localhost"
return.address._port == 27017
return.type has only one value
return.type != null
return.type.getClass().getName() == com.mongodb.ServerType$8.class
return.hosts has only one value
return.hosts != null
return.hosts.getClass().getName() == java.util.Collections$EmptySet.class
return.passives has only one value
return.passives != null
return.passives.getClass().getName() == java.util.Collections$EmptySet.class
return.arbiters has only one value
return.arbiters != null
return.arbiters.getClass().getName() == java.util.Collections$EmptySet.class
return.primary == null
return.maxDocumentSize == 16777216
return.maxMessageSize == 33554432
return.maxWriteBatchSize == 512
return.tags != null
return.tags.frozen == true
return.tags.wrapped != null
return.tags.wrapped.getClass().getName() == java.util.HashMap.class
return.setName == null
return.averageLatency == 0
return.ok == false
return.state has only one value
return.state != null
return.version != null
return.version.versionList != null
return.version.versionList[] contains no nulls and has only one value, of length 3
return.version.versionList[] elements has only one value
return.version.versionList[] elements != null
return.version.versionList[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
return.version.versionList[].getClass().getName() elements == java.lang.Integer.class
return.version.versionList.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
return.minWireVersion == 0
return.maxWireVersion == 0
size(return.version.versionList[]) == 3
===========================================================================
com.mongodb.ServerDescription$Builder.build():::ENTER
this.address != null
this.state has only one value
this.state != null
===========================================================================
com.mongodb.ServerDescription$Builder.build():::EXIT
this.address == orig(this.address)
this.address._host == orig(this.address._host)
this.address._host.toString == orig(this.address._host.toString)
this.address._port == orig(this.address._port)
this.type == orig(this.type)
this.type.getClass().getName() == orig(this.type.getClass().getName())
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
this.hosts == orig(this.hosts)
this.hosts.getClass().getName() == orig(this.hosts.getClass().getName())
this.passives == orig(this.passives)
this.passives.getClass().getName() == orig(this.passives.getClass().getName())
this.arbiters == orig(this.arbiters)
this.arbiters.getClass().getName() == orig(this.arbiters.getClass().getName())
this.primary == orig(this.primary)
this.maxDocumentSize == orig(this.maxDocumentSize)
this.maxMessageSize == orig(this.maxMessageSize)
this.maxWriteBatchSize == orig(this.maxWriteBatchSize)
this.tags == orig(this.tags)
this.tags.frozen == orig(this.tags.frozen)
this.tags.wrapped == orig(this.tags.wrapped)
this.tags.wrapped.getClass().getName() == orig(this.tags.wrapped.getClass().getName())
this.setName == orig(this.setName)
this.averageLatency == orig(this.averageLatency)
this.ok == orig(this.ok)
this.state == orig(this.state)
com.mongodb.ServerConnectionState.Connecting == orig(com.mongodb.ServerConnectionState.Connecting)
com.mongodb.ServerConnectionState.Connected == orig(com.mongodb.ServerConnectionState.Connected)
com.mongodb.ServerConnectionState.$VALUES == orig(com.mongodb.ServerConnectionState.$VALUES)
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == orig(com.mongodb.ServerConnectionState.$VALUES.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES[] == orig(com.mongodb.ServerConnectionState.$VALUES[])
this.version == orig(this.version)
this.version.versionList == orig(this.version.versionList)
this.version.versionList[] == orig(this.version.versionList[])
this.version.versionList.getClass().getName() == orig(this.version.versionList.getClass().getName())
this.minWireVersion == orig(this.minWireVersion)
this.maxWireVersion == orig(this.maxWireVersion)
this.address != null
this.state has only one value
this.state != null
return != null
return.address != null
return.address._host has only one value
return.address._host != null
return.address._host.toString == "localhost"
return.address._port == 27017
return.type has only one value
return.type != null
return.type.getClass().getName() == com.mongodb.ServerType$8.class
return.hosts has only one value
return.hosts != null
return.hosts.getClass().getName() == java.util.Collections$EmptySet.class
return.passives has only one value
return.passives != null
return.passives.getClass().getName() == java.util.Collections$EmptySet.class
return.arbiters has only one value
return.arbiters != null
return.arbiters.getClass().getName() == java.util.Collections$EmptySet.class
return.primary == null
return.maxDocumentSize == 16777216
return.maxWriteBatchSize == 512
return.maxMessageSize == 33554432
return.tags != null
return.tags.frozen == true
return.tags.wrapped != null
return.tags.wrapped.getClass().getName() == java.util.HashMap.class
return.setName == null
return.averageLatencyNanos == 0
return.ok == false
return.state has only one value
return.state != null
return.version != null
return.version.versionList != null
return.version.versionList[] contains no nulls and has only one value, of length 3
return.version.versionList[] elements has only one value
return.version.versionList[] elements != null
return.version.versionList[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
return.version.versionList[].getClass().getName() elements == java.lang.Integer.class
return.version.versionList.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
return.minWireVersion == 0
return.maxWireVersion == 0
size(return.version.versionList[]) == 3
===========================================================================
com.mongodb.ServerDescription$Builder.state(com.mongodb.ServerConnectionState):::ENTER
this.address == null
this.state == null
state has only one value
state != null
===========================================================================
com.mongodb.ServerDescription$Builder.state(com.mongodb.ServerConnectionState):::EXIT
this.address == orig(this.address)
this.type == orig(this.type)
this.type.getClass().getName() == orig(this.type.getClass().getName())
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
this.hosts == orig(this.hosts)
this.hosts.getClass().getName() == orig(this.hosts.getClass().getName())
this.passives == orig(this.passives)
this.passives.getClass().getName() == orig(this.passives.getClass().getName())
this.arbiters == orig(this.arbiters)
this.arbiters.getClass().getName() == orig(this.arbiters.getClass().getName())
this.primary == orig(this.primary)
this.maxDocumentSize == orig(this.maxDocumentSize)
this.maxMessageSize == orig(this.maxMessageSize)
this.maxWriteBatchSize == orig(this.maxWriteBatchSize)
this.tags == orig(this.tags)
this.tags.frozen == orig(this.tags.frozen)
this.tags.wrapped == orig(this.tags.wrapped)
this.tags.wrapped.getClass().getName() == orig(this.tags.wrapped.getClass().getName())
this.setName == orig(this.setName)
this.averageLatency == orig(this.averageLatency)
this.ok == orig(this.ok)
com.mongodb.ServerConnectionState.Connecting == orig(com.mongodb.ServerConnectionState.Connecting)
com.mongodb.ServerConnectionState.Connected == orig(com.mongodb.ServerConnectionState.Connected)
com.mongodb.ServerConnectionState.$VALUES == orig(com.mongodb.ServerConnectionState.$VALUES)
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == orig(com.mongodb.ServerConnectionState.$VALUES.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES[] == orig(com.mongodb.ServerConnectionState.$VALUES[])
this.version == orig(this.version)
this.version.versionList == orig(this.version.versionList)
this.version.versionList[] == orig(this.version.versionList[])
this.version.versionList.getClass().getName() == orig(this.version.versionList.getClass().getName())
this.minWireVersion == orig(this.minWireVersion)
this.maxWireVersion == orig(this.maxWireVersion)
this.address == null
this.state has only one value
this.state != null
return != null
return.address == null
return.type has only one value
return.type != null
return.type.getClass().getName() == com.mongodb.ServerType$8.class
return.hosts has only one value
return.hosts != null
return.hosts.getClass().getName() == java.util.Collections$EmptySet.class
return.passives has only one value
return.passives != null
return.passives.getClass().getName() == java.util.Collections$EmptySet.class
return.arbiters has only one value
return.arbiters != null
return.arbiters.getClass().getName() == java.util.Collections$EmptySet.class
return.primary == null
return.maxDocumentSize == 16777216
return.maxMessageSize == 33554432
return.maxWriteBatchSize == 512
return.tags != null
return.tags.frozen == true
return.tags.wrapped != null
return.tags.wrapped.getClass().getName() == java.util.HashMap.class
return.setName == null
return.averageLatency == 0
return.ok == false
return.state has only one value
return.state != null
return.version != null
return.version.versionList != null
return.version.versionList[] contains no nulls and has only one value, of length 3
return.version.versionList[] elements has only one value
return.version.versionList[] elements != null
return.version.versionList[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
return.version.versionList[].getClass().getName() elements == java.lang.Integer.class
return.version.versionList.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
return.minWireVersion == 0
return.maxWireVersion == 0
size(return.version.versionList[]) == 3
===========================================================================
com.mongodb.ServerDescription$Builder.type(com.mongodb.ServerType):::ENTER
this.address == null
this.state == null
type has only one value
type != null
type.getClass().getName() == com.mongodb.ServerType$8.class
===========================================================================
com.mongodb.ServerDescription$Builder.type(com.mongodb.ServerType):::EXIT
this.address == orig(this.address)
this.type == orig(this.type)
this.type.getClass().getName() == orig(this.type.getClass().getName())
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
this.hosts == orig(this.hosts)
this.hosts.getClass().getName() == orig(this.hosts.getClass().getName())
this.passives == orig(this.passives)
this.passives.getClass().getName() == orig(this.passives.getClass().getName())
this.arbiters == orig(this.arbiters)
this.arbiters.getClass().getName() == orig(this.arbiters.getClass().getName())
this.primary == orig(this.primary)
this.maxDocumentSize == orig(this.maxDocumentSize)
this.maxMessageSize == orig(this.maxMessageSize)
this.maxWriteBatchSize == orig(this.maxWriteBatchSize)
this.tags == orig(this.tags)
this.tags.frozen == orig(this.tags.frozen)
this.tags.wrapped == orig(this.tags.wrapped)
this.tags.wrapped.getClass().getName() == orig(this.tags.wrapped.getClass().getName())
this.setName == orig(this.setName)
this.averageLatency == orig(this.averageLatency)
this.ok == orig(this.ok)
this.state == orig(this.state)
com.mongodb.ServerConnectionState.Connecting == orig(com.mongodb.ServerConnectionState.Connecting)
com.mongodb.ServerConnectionState.Connected == orig(com.mongodb.ServerConnectionState.Connected)
com.mongodb.ServerConnectionState.$VALUES == orig(com.mongodb.ServerConnectionState.$VALUES)
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == orig(com.mongodb.ServerConnectionState.$VALUES.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES[] == orig(com.mongodb.ServerConnectionState.$VALUES[])
this.version == orig(this.version)
this.version.versionList == orig(this.version.versionList)
this.version.versionList[] == orig(this.version.versionList[])
this.version.versionList.getClass().getName() == orig(this.version.versionList.getClass().getName())
this.minWireVersion == orig(this.minWireVersion)
this.maxWireVersion == orig(this.maxWireVersion)
this.address == null
this.state == null
return != null
return.address == null
return.type has only one value
return.type != null
return.type.getClass().getName() == com.mongodb.ServerType$8.class
return.hosts has only one value
return.hosts != null
return.hosts.getClass().getName() == java.util.Collections$EmptySet.class
return.passives has only one value
return.passives != null
return.passives.getClass().getName() == java.util.Collections$EmptySet.class
return.arbiters has only one value
return.arbiters != null
return.arbiters.getClass().getName() == java.util.Collections$EmptySet.class
return.primary == null
return.maxDocumentSize == 16777216
return.maxMessageSize == 33554432
return.maxWriteBatchSize == 512
return.tags != null
return.tags.frozen == true
return.tags.wrapped != null
return.tags.wrapped.getClass().getName() == java.util.HashMap.class
return.setName == null
return.averageLatency == 0
return.ok == false
return.state == null
return.version != null
return.version.versionList != null
return.version.versionList[] contains no nulls and has only one value, of length 3
return.version.versionList[] elements has only one value
return.version.versionList[] elements != null
return.version.versionList[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
return.version.versionList[].getClass().getName() elements == java.lang.Integer.class
return.version.versionList.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
return.minWireVersion == 0
return.maxWireVersion == 0
size(return.version.versionList[]) == 3
===========================================================================
com.mongodb.ServerDescription:::CLASS
===========================================================================
com.mongodb.ServerDescription:::OBJECT
this.address != null
this.address._host has only one value
this.address._host != null
this.address._host.toString == "localhost"
this.address._port == 27017
this.type has only one value
this.type != null
this.type.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.ServerType.StandAlone has only one value
com.mongodb.ServerType.StandAlone != null
com.mongodb.ServerType.StandAlone.getClass().getName() == com.mongodb.ServerType$1.class
com.mongodb.ServerType.ReplicaSetPrimary has only one value
com.mongodb.ServerType.ReplicaSetPrimary != null
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == com.mongodb.ServerType$2.class
com.mongodb.ServerType.ReplicaSetSecondary has only one value
com.mongodb.ServerType.ReplicaSetSecondary != null
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == com.mongodb.ServerType$3.class
com.mongodb.ServerType.ReplicaSetArbiter has only one value
com.mongodb.ServerType.ReplicaSetArbiter != null
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == com.mongodb.ServerType$4.class
com.mongodb.ServerType.ReplicaSetOther has only one value
com.mongodb.ServerType.ReplicaSetOther != null
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == com.mongodb.ServerType$5.class
com.mongodb.ServerType.ReplicaSetGhost has only one value
com.mongodb.ServerType.ReplicaSetGhost != null
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == com.mongodb.ServerType$6.class
com.mongodb.ServerType.ShardRouter has only one value
com.mongodb.ServerType.ShardRouter != null
com.mongodb.ServerType.ShardRouter.getClass().getName() == com.mongodb.ServerType$7.class
com.mongodb.ServerType.Unknown has only one value
com.mongodb.ServerType.Unknown != null
com.mongodb.ServerType.Unknown.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.ServerType.$VALUES has only one value
com.mongodb.ServerType.$VALUES != null
com.mongodb.ServerType.$VALUES.getClass().getName() == com.mongodb.ServerType[].class
com.mongodb.ServerType.$VALUES[] contains no nulls and has only one value, of length 8
com.mongodb.ServerType.$VALUES[] elements != null
com.mongodb.ServerType.$VALUES[].getClass().getName() == [null, null, null, null, null, null, null, null]
com.mongodb.ServerType.$VALUES[].getClass().getName() elements == null
this.hosts has only one value
this.hosts != null
this.hosts.getClass().getName() == java.util.Collections$EmptySet.class
this.passives has only one value
this.passives != null
this.passives.getClass().getName() == java.util.Collections$EmptySet.class
this.arbiters has only one value
this.arbiters != null
this.arbiters.getClass().getName() == java.util.Collections$EmptySet.class
this.primary == null
this.maxDocumentSize == 16777216
this.maxWriteBatchSize == 512
this.maxMessageSize == 33554432
this.tags != null
this.tags.frozen == true
this.tags.wrapped != null
this.tags.wrapped.getClass().getName() == java.util.HashMap.class
this.setName == null
this.averageLatencyNanos == 0
this.ok == false
this.state has only one value
this.state != null
com.mongodb.ServerConnectionState.Connecting has only one value
com.mongodb.ServerConnectionState.Connecting != null
com.mongodb.ServerConnectionState.Connected has only one value
com.mongodb.ServerConnectionState.Connected != null
com.mongodb.ServerConnectionState.$VALUES has only one value
com.mongodb.ServerConnectionState.$VALUES != null
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == com.mongodb.ServerConnectionState[].class
com.mongodb.ServerConnectionState.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ServerConnectionState.$VALUES[] elements != null
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() == [com.mongodb.ServerConnectionState, com.mongodb.ServerConnectionState]
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() elements == com.mongodb.ServerConnectionState.class
this.version != null
this.version.versionList != null
this.version.versionList[] contains no nulls and has only one value, of length 3
this.version.versionList[] elements has only one value
this.version.versionList[] elements != null
this.version.versionList[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.version.versionList[].getClass().getName() elements == java.lang.Integer.class
this.version.versionList.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.minWireVersion == 0
this.maxWireVersion == 0
size(com.mongodb.ServerType.$VALUES[]) == 8
size(com.mongodb.ServerConnectionState.$VALUES[]) == 2
size(this.version.versionList[]) == 3
===========================================================================
com.mongodb.ServerDescription.ServerDescription(com.mongodb.ServerDescription$Builder):::ENTER
builder != null
builder.address != null
builder.address._host has only one value
builder.address._host != null
builder.address._host.toString == "localhost"
builder.address._port == 27017
builder.type has only one value
builder.type != null
builder.type.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.ServerType.StandAlone has only one value
com.mongodb.ServerType.StandAlone != null
com.mongodb.ServerType.StandAlone.getClass().getName() == com.mongodb.ServerType$1.class
com.mongodb.ServerType.ReplicaSetPrimary has only one value
com.mongodb.ServerType.ReplicaSetPrimary != null
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == com.mongodb.ServerType$2.class
com.mongodb.ServerType.ReplicaSetSecondary has only one value
com.mongodb.ServerType.ReplicaSetSecondary != null
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == com.mongodb.ServerType$3.class
com.mongodb.ServerType.ReplicaSetArbiter has only one value
com.mongodb.ServerType.ReplicaSetArbiter != null
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == com.mongodb.ServerType$4.class
com.mongodb.ServerType.ReplicaSetOther has only one value
com.mongodb.ServerType.ReplicaSetOther != null
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == com.mongodb.ServerType$5.class
com.mongodb.ServerType.ReplicaSetGhost has only one value
com.mongodb.ServerType.ReplicaSetGhost != null
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == com.mongodb.ServerType$6.class
com.mongodb.ServerType.ShardRouter has only one value
com.mongodb.ServerType.ShardRouter != null
com.mongodb.ServerType.ShardRouter.getClass().getName() == com.mongodb.ServerType$7.class
com.mongodb.ServerType.Unknown has only one value
com.mongodb.ServerType.Unknown != null
com.mongodb.ServerType.Unknown.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.ServerType.$VALUES has only one value
com.mongodb.ServerType.$VALUES != null
com.mongodb.ServerType.$VALUES.getClass().getName() == com.mongodb.ServerType[].class
com.mongodb.ServerType.$VALUES[] contains no nulls and has only one value, of length 8
com.mongodb.ServerType.$VALUES[] elements != null
com.mongodb.ServerType.$VALUES[].getClass().getName() == [null, null, null, null, null, null, null, null]
com.mongodb.ServerType.$VALUES[].getClass().getName() elements == null
builder.hosts has only one value
builder.hosts != null
builder.hosts.getClass().getName() == java.util.Collections$EmptySet.class
builder.passives has only one value
builder.passives != null
builder.passives.getClass().getName() == java.util.Collections$EmptySet.class
builder.arbiters has only one value
builder.arbiters != null
builder.arbiters.getClass().getName() == java.util.Collections$EmptySet.class
builder.primary == null
builder.maxDocumentSize == 16777216
builder.maxMessageSize == 33554432
builder.maxWriteBatchSize == 512
builder.tags != null
builder.tags.frozen == true
builder.tags.wrapped != null
builder.tags.wrapped.getClass().getName() == java.util.HashMap.class
builder.setName == null
builder.averageLatency == 0
builder.ok == false
builder.state has only one value
builder.state != null
com.mongodb.ServerConnectionState.Connecting has only one value
com.mongodb.ServerConnectionState.Connecting != null
com.mongodb.ServerConnectionState.Connected has only one value
com.mongodb.ServerConnectionState.Connected != null
com.mongodb.ServerConnectionState.$VALUES has only one value
com.mongodb.ServerConnectionState.$VALUES != null
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == com.mongodb.ServerConnectionState[].class
com.mongodb.ServerConnectionState.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ServerConnectionState.$VALUES[] elements != null
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() == [com.mongodb.ServerConnectionState, com.mongodb.ServerConnectionState]
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() elements == com.mongodb.ServerConnectionState.class
builder.version != null
builder.version.versionList != null
builder.version.versionList[] contains no nulls and has only one value, of length 3
builder.version.versionList[] elements has only one value
builder.version.versionList[] elements != null
builder.version.versionList[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
builder.version.versionList[].getClass().getName() elements == java.lang.Integer.class
builder.version.versionList.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
builder.minWireVersion == 0
builder.maxWireVersion == 0
size(com.mongodb.ServerType.$VALUES[]) == 8
size(com.mongodb.ServerConnectionState.$VALUES[]) == 2
size(builder.version.versionList[]) == 3
===========================================================================
com.mongodb.ServerDescription.ServerDescription(com.mongodb.ServerDescription$Builder):::EXIT
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
com.mongodb.ServerConnectionState.Connecting == orig(com.mongodb.ServerConnectionState.Connecting)
com.mongodb.ServerConnectionState.Connected == orig(com.mongodb.ServerConnectionState.Connected)
com.mongodb.ServerConnectionState.$VALUES == orig(com.mongodb.ServerConnectionState.$VALUES)
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == orig(com.mongodb.ServerConnectionState.$VALUES.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES[] == orig(com.mongodb.ServerConnectionState.$VALUES[])
builder.address == orig(builder.address)
builder.address._host == orig(builder.address._host)
builder.address._host.toString == orig(builder.address._host.toString)
builder.address._port == orig(builder.address._port)
builder.type == orig(builder.type)
builder.type.getClass().getName() == orig(builder.type.getClass().getName())
builder.hosts == orig(builder.hosts)
builder.hosts.getClass().getName() == orig(builder.hosts.getClass().getName())
builder.passives == orig(builder.passives)
builder.passives.getClass().getName() == orig(builder.passives.getClass().getName())
builder.arbiters == orig(builder.arbiters)
builder.arbiters.getClass().getName() == orig(builder.arbiters.getClass().getName())
builder.primary == orig(builder.primary)
builder.maxDocumentSize == orig(builder.maxDocumentSize)
builder.maxMessageSize == orig(builder.maxMessageSize)
builder.maxWriteBatchSize == orig(builder.maxWriteBatchSize)
builder.tags == orig(builder.tags)
builder.tags.frozen == orig(builder.tags.frozen)
builder.tags.wrapped == orig(builder.tags.wrapped)
builder.tags.wrapped.getClass().getName() == orig(builder.tags.wrapped.getClass().getName())
builder.setName == orig(builder.setName)
builder.averageLatency == orig(builder.averageLatency)
builder.ok == orig(builder.ok)
builder.state == orig(builder.state)
builder.version == orig(builder.version)
builder.version.versionList == orig(builder.version.versionList)
builder.version.versionList[] == orig(builder.version.versionList[])
builder.version.versionList.getClass().getName() == orig(builder.version.versionList.getClass().getName())
builder.minWireVersion == orig(builder.minWireVersion)
builder.maxWireVersion == orig(builder.maxWireVersion)
builder.address != null
builder.address._host has only one value
builder.address._host != null
builder.address._host.toString == "localhost"
builder.address._port == 27017
builder.type has only one value
builder.type != null
builder.type.getClass().getName() == com.mongodb.ServerType$8.class
builder.hosts has only one value
builder.hosts != null
builder.hosts.getClass().getName() == java.util.Collections$EmptySet.class
builder.passives has only one value
builder.passives != null
builder.passives.getClass().getName() == java.util.Collections$EmptySet.class
builder.arbiters has only one value
builder.arbiters != null
builder.arbiters.getClass().getName() == java.util.Collections$EmptySet.class
builder.primary == null
builder.maxDocumentSize == 16777216
builder.maxMessageSize == 33554432
builder.maxWriteBatchSize == 512
builder.tags != null
builder.tags.frozen == true
builder.tags.wrapped != null
builder.tags.wrapped.getClass().getName() == java.util.HashMap.class
builder.setName == null
builder.averageLatency == 0
builder.ok == false
builder.state has only one value
builder.state != null
builder.version != null
builder.version.versionList != null
builder.version.versionList[] contains no nulls and has only one value, of length 3
builder.version.versionList[] elements has only one value
builder.version.versionList[] elements != null
builder.version.versionList[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
builder.version.versionList[].getClass().getName() elements == java.lang.Integer.class
builder.version.versionList.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
builder.minWireVersion == 0
builder.maxWireVersion == 0
size(builder.version.versionList[]) == 3
===========================================================================
com.mongodb.ServerDescription.builder():::ENTER
===========================================================================
com.mongodb.ServerDescription.builder():::EXIT
return != null
return.address == null
return.type has only one value
return.type != null
return.type.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.ServerType.StandAlone has only one value
com.mongodb.ServerType.StandAlone != null
com.mongodb.ServerType.StandAlone.getClass().getName() == com.mongodb.ServerType$1.class
com.mongodb.ServerType.ReplicaSetPrimary has only one value
com.mongodb.ServerType.ReplicaSetPrimary != null
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == com.mongodb.ServerType$2.class
com.mongodb.ServerType.ReplicaSetSecondary has only one value
com.mongodb.ServerType.ReplicaSetSecondary != null
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == com.mongodb.ServerType$3.class
com.mongodb.ServerType.ReplicaSetArbiter has only one value
com.mongodb.ServerType.ReplicaSetArbiter != null
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == com.mongodb.ServerType$4.class
com.mongodb.ServerType.ReplicaSetOther has only one value
com.mongodb.ServerType.ReplicaSetOther != null
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == com.mongodb.ServerType$5.class
com.mongodb.ServerType.ReplicaSetGhost has only one value
com.mongodb.ServerType.ReplicaSetGhost != null
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == com.mongodb.ServerType$6.class
com.mongodb.ServerType.ShardRouter has only one value
com.mongodb.ServerType.ShardRouter != null
com.mongodb.ServerType.ShardRouter.getClass().getName() == com.mongodb.ServerType$7.class
com.mongodb.ServerType.Unknown has only one value
com.mongodb.ServerType.Unknown != null
com.mongodb.ServerType.Unknown.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.ServerType.$VALUES has only one value
com.mongodb.ServerType.$VALUES != null
com.mongodb.ServerType.$VALUES.getClass().getName() == com.mongodb.ServerType[].class
com.mongodb.ServerType.$VALUES[] contains no nulls and has only one value, of length 8
com.mongodb.ServerType.$VALUES[] elements != null
com.mongodb.ServerType.$VALUES[].getClass().getName() == [null, null, null, null, null, null, null, null]
com.mongodb.ServerType.$VALUES[].getClass().getName() elements == null
return.hosts has only one value
return.hosts != null
return.hosts.getClass().getName() == java.util.Collections$EmptySet.class
return.passives has only one value
return.passives != null
return.passives.getClass().getName() == java.util.Collections$EmptySet.class
return.arbiters has only one value
return.arbiters != null
return.arbiters.getClass().getName() == java.util.Collections$EmptySet.class
return.primary == null
return.maxDocumentSize == 16777216
return.maxMessageSize == 33554432
return.maxWriteBatchSize == 512
return.tags != null
return.tags.frozen == true
return.tags.wrapped != null
return.tags.wrapped.getClass().getName() == java.util.HashMap.class
return.setName == null
return.averageLatency == 0
return.ok == false
return.state == null
com.mongodb.ServerConnectionState.Connecting has only one value
com.mongodb.ServerConnectionState.Connecting != null
com.mongodb.ServerConnectionState.Connected has only one value
com.mongodb.ServerConnectionState.Connected != null
com.mongodb.ServerConnectionState.$VALUES has only one value
com.mongodb.ServerConnectionState.$VALUES != null
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == com.mongodb.ServerConnectionState[].class
com.mongodb.ServerConnectionState.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ServerConnectionState.$VALUES[] elements != null
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() == [com.mongodb.ServerConnectionState, com.mongodb.ServerConnectionState]
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() elements == com.mongodb.ServerConnectionState.class
return.version != null
return.version.versionList != null
return.version.versionList[] contains no nulls and has only one value, of length 3
return.version.versionList[] elements has only one value
return.version.versionList[] elements != null
return.version.versionList[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
return.version.versionList[].getClass().getName() elements == java.lang.Integer.class
return.version.versionList.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
return.minWireVersion == 0
return.maxWireVersion == 0
size(com.mongodb.ServerType.$VALUES[]) == 8
size(com.mongodb.ServerConnectionState.$VALUES[]) == 2
size(return.version.versionList[]) == 3
===========================================================================
com.mongodb.ServerDescription.equals(java.lang.Object):::ENTER
o != null
o.getClass().getName() == com.mongodb.ServerDescription.class
===========================================================================
com.mongodb.ServerDescription.equals(java.lang.Object):::EXIT418
===========================================================================
com.mongodb.ServerDescription.equals(java.lang.Object):::EXIT418;condition="return == true"
===========================================================================
com.mongodb.ServerDescription.equals(java.lang.Object):::EXIT
this.address == orig(this.address)
this.address._host == orig(this.address._host)
this.address._host.toString == orig(this.address._host.toString)
this.address._port == orig(this.address._port)
this.type == orig(this.type)
this.type.getClass().getName() == orig(this.type.getClass().getName())
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
this.hosts == orig(this.hosts)
this.hosts.getClass().getName() == orig(this.hosts.getClass().getName())
this.passives == orig(this.passives)
this.passives.getClass().getName() == orig(this.passives.getClass().getName())
this.arbiters == orig(this.arbiters)
this.arbiters.getClass().getName() == orig(this.arbiters.getClass().getName())
this.primary == orig(this.primary)
this.maxDocumentSize == orig(this.maxDocumentSize)
this.maxWriteBatchSize == orig(this.maxWriteBatchSize)
this.maxMessageSize == orig(this.maxMessageSize)
this.tags == orig(this.tags)
this.tags.frozen == orig(this.tags.frozen)
this.tags.wrapped == orig(this.tags.wrapped)
this.tags.wrapped.getClass().getName() == orig(this.tags.wrapped.getClass().getName())
this.setName == orig(this.setName)
this.averageLatencyNanos == orig(this.averageLatencyNanos)
this.ok == orig(this.ok)
this.state == orig(this.state)
com.mongodb.ServerConnectionState.Connecting == orig(com.mongodb.ServerConnectionState.Connecting)
com.mongodb.ServerConnectionState.Connected == orig(com.mongodb.ServerConnectionState.Connected)
com.mongodb.ServerConnectionState.$VALUES == orig(com.mongodb.ServerConnectionState.$VALUES)
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == orig(com.mongodb.ServerConnectionState.$VALUES.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES[] == orig(com.mongodb.ServerConnectionState.$VALUES[])
this.version == orig(this.version)
this.version.versionList == orig(this.version.versionList)
this.version.versionList[] == orig(this.version.versionList[])
this.version.versionList.getClass().getName() == orig(this.version.versionList.getClass().getName())
this.minWireVersion == orig(this.minWireVersion)
this.maxWireVersion == orig(this.maxWireVersion)
return == true
===========================================================================
com.mongodb.ServerDescription.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
com.mongodb.ServerDescription.getAddress():::ENTER
===========================================================================
com.mongodb.ServerDescription.getAddress():::EXIT
this.address == orig(this.address)
this.address._host == orig(this.address._host)
this.address._host.toString == orig(this.address._host.toString)
this.address._port == orig(this.address._port)
this.type == orig(this.type)
this.type.getClass().getName() == orig(this.type.getClass().getName())
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
this.hosts == orig(this.hosts)
this.hosts.getClass().getName() == orig(this.hosts.getClass().getName())
this.passives == orig(this.passives)
this.passives.getClass().getName() == orig(this.passives.getClass().getName())
this.arbiters == orig(this.arbiters)
this.arbiters.getClass().getName() == orig(this.arbiters.getClass().getName())
this.primary == orig(this.primary)
this.maxDocumentSize == orig(this.maxDocumentSize)
this.maxWriteBatchSize == orig(this.maxWriteBatchSize)
this.maxMessageSize == orig(this.maxMessageSize)
this.tags == orig(this.tags)
this.tags.frozen == orig(this.tags.frozen)
this.tags.wrapped == orig(this.tags.wrapped)
this.tags.wrapped.getClass().getName() == orig(this.tags.wrapped.getClass().getName())
this.setName == orig(this.setName)
this.averageLatencyNanos == orig(this.averageLatencyNanos)
this.ok == orig(this.ok)
this.state == orig(this.state)
com.mongodb.ServerConnectionState.Connecting == orig(com.mongodb.ServerConnectionState.Connecting)
com.mongodb.ServerConnectionState.Connected == orig(com.mongodb.ServerConnectionState.Connected)
com.mongodb.ServerConnectionState.$VALUES == orig(com.mongodb.ServerConnectionState.$VALUES)
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == orig(com.mongodb.ServerConnectionState.$VALUES.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES[] == orig(com.mongodb.ServerConnectionState.$VALUES[])
this.version == orig(this.version)
this.version.versionList == orig(this.version.versionList)
this.version.versionList[] == orig(this.version.versionList[])
this.version.versionList.getClass().getName() == orig(this.version.versionList.getClass().getName())
this.minWireVersion == orig(this.minWireVersion)
this.maxWireVersion == orig(this.maxWireVersion)
return != null
return._host has only one value
return._host != null
return._host.toString == "localhost"
return._port == 27017
===========================================================================
com.mongodb.ServerDescription.getClusterType():::ENTER
===========================================================================
com.mongodb.ServerDescription.getClusterType():::EXIT
this.address == orig(this.address)
this.address._host == orig(this.address._host)
this.address._host.toString == orig(this.address._host.toString)
this.address._port == orig(this.address._port)
this.type == orig(this.type)
this.type.getClass().getName() == orig(this.type.getClass().getName())
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
this.hosts == orig(this.hosts)
this.hosts.getClass().getName() == orig(this.hosts.getClass().getName())
this.passives == orig(this.passives)
this.passives.getClass().getName() == orig(this.passives.getClass().getName())
this.arbiters == orig(this.arbiters)
this.arbiters.getClass().getName() == orig(this.arbiters.getClass().getName())
this.primary == orig(this.primary)
this.maxDocumentSize == orig(this.maxDocumentSize)
this.maxWriteBatchSize == orig(this.maxWriteBatchSize)
this.maxMessageSize == orig(this.maxMessageSize)
this.tags == orig(this.tags)
this.tags.frozen == orig(this.tags.frozen)
this.tags.wrapped == orig(this.tags.wrapped)
this.tags.wrapped.getClass().getName() == orig(this.tags.wrapped.getClass().getName())
this.setName == orig(this.setName)
this.averageLatencyNanos == orig(this.averageLatencyNanos)
this.ok == orig(this.ok)
this.state == orig(this.state)
com.mongodb.ServerConnectionState.Connecting == orig(com.mongodb.ServerConnectionState.Connecting)
com.mongodb.ServerConnectionState.Connected == orig(com.mongodb.ServerConnectionState.Connected)
com.mongodb.ServerConnectionState.$VALUES == orig(com.mongodb.ServerConnectionState.$VALUES)
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == orig(com.mongodb.ServerConnectionState.$VALUES.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES[] == orig(com.mongodb.ServerConnectionState.$VALUES[])
this.version == orig(this.version)
this.version.versionList == orig(this.version.versionList)
this.version.versionList[] == orig(this.version.versionList[])
this.version.versionList.getClass().getName() == orig(this.version.versionList.getClass().getName())
this.minWireVersion == orig(this.minWireVersion)
this.maxWireVersion == orig(this.maxWireVersion)
return has only one value
return != null
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.StandAlone != null
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.ReplicaSet != null
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Sharded != null
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.Unknown != null
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES != null
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[] elements != null
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
size(com.mongodb.ClusterType.$VALUES[]) == 4
===========================================================================
com.mongodb.ServerDescription.getShortDescription():::ENTER
===========================================================================
com.mongodb.ServerDescription.getShortDescription():::EXIT
this.address == orig(this.address)
this.address._host == orig(this.address._host)
this.address._host.toString == orig(this.address._host.toString)
this.address._port == orig(this.address._port)
this.type == orig(this.type)
this.type.getClass().getName() == orig(this.type.getClass().getName())
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
this.hosts == orig(this.hosts)
this.hosts.getClass().getName() == orig(this.hosts.getClass().getName())
this.passives == orig(this.passives)
this.passives.getClass().getName() == orig(this.passives.getClass().getName())
this.arbiters == orig(this.arbiters)
this.arbiters.getClass().getName() == orig(this.arbiters.getClass().getName())
this.primary == orig(this.primary)
this.maxDocumentSize == orig(this.maxDocumentSize)
this.maxWriteBatchSize == orig(this.maxWriteBatchSize)
this.maxMessageSize == orig(this.maxMessageSize)
this.tags == orig(this.tags)
this.tags.frozen == orig(this.tags.frozen)
this.tags.wrapped == orig(this.tags.wrapped)
this.tags.wrapped.getClass().getName() == orig(this.tags.wrapped.getClass().getName())
this.setName == orig(this.setName)
this.averageLatencyNanos == orig(this.averageLatencyNanos)
this.ok == orig(this.ok)
this.state == orig(this.state)
com.mongodb.ServerConnectionState.Connecting == orig(com.mongodb.ServerConnectionState.Connecting)
com.mongodb.ServerConnectionState.Connected == orig(com.mongodb.ServerConnectionState.Connected)
com.mongodb.ServerConnectionState.$VALUES == orig(com.mongodb.ServerConnectionState.$VALUES)
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == orig(com.mongodb.ServerConnectionState.$VALUES.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES[] == orig(com.mongodb.ServerConnectionState.$VALUES[])
this.version == orig(this.version)
this.version.versionList == orig(this.version.versionList)
this.version.versionList[] == orig(this.version.versionList[])
this.version.versionList.getClass().getName() == orig(this.version.versionList.getClass().getName())
this.minWireVersion == orig(this.minWireVersion)
this.maxWireVersion == orig(this.maxWireVersion)
return != null
return.toString == "{address=localhost:27017, type=Unknown, state=Connecting}"
===========================================================================
com.mongodb.ServerDescription.isCompatibleWithDriver():::ENTER
this.address has only one value
===========================================================================
com.mongodb.ServerDescription.isCompatibleWithDriver():::EXIT195
===========================================================================
com.mongodb.ServerDescription.isCompatibleWithDriver():::EXIT195;condition="return == true"
===========================================================================
com.mongodb.ServerDescription.isCompatibleWithDriver():::EXIT
this.address == orig(this.address)
this.address._host == orig(this.address._host)
this.address._host.toString == orig(this.address._host.toString)
this.address._port == orig(this.address._port)
this.type == orig(this.type)
this.type.getClass().getName() == orig(this.type.getClass().getName())
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
this.hosts == orig(this.hosts)
this.hosts.getClass().getName() == orig(this.hosts.getClass().getName())
this.passives == orig(this.passives)
this.passives.getClass().getName() == orig(this.passives.getClass().getName())
this.arbiters == orig(this.arbiters)
this.arbiters.getClass().getName() == orig(this.arbiters.getClass().getName())
this.primary == orig(this.primary)
this.maxDocumentSize == orig(this.maxDocumentSize)
this.maxWriteBatchSize == orig(this.maxWriteBatchSize)
this.maxMessageSize == orig(this.maxMessageSize)
this.tags == orig(this.tags)
this.tags.frozen == orig(this.tags.frozen)
this.tags.wrapped == orig(this.tags.wrapped)
this.tags.wrapped.getClass().getName() == orig(this.tags.wrapped.getClass().getName())
this.setName == orig(this.setName)
this.averageLatencyNanos == orig(this.averageLatencyNanos)
this.ok == orig(this.ok)
this.state == orig(this.state)
com.mongodb.ServerConnectionState.Connecting == orig(com.mongodb.ServerConnectionState.Connecting)
com.mongodb.ServerConnectionState.Connected == orig(com.mongodb.ServerConnectionState.Connected)
com.mongodb.ServerConnectionState.$VALUES == orig(com.mongodb.ServerConnectionState.$VALUES)
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == orig(com.mongodb.ServerConnectionState.$VALUES.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES[] == orig(com.mongodb.ServerConnectionState.$VALUES[])
this.version == orig(this.version)
this.version.versionList == orig(this.version.versionList)
this.version.versionList[] == orig(this.version.versionList[])
this.version.versionList.getClass().getName() == orig(this.version.versionList.getClass().getName())
this.minWireVersion == orig(this.minWireVersion)
this.maxWireVersion == orig(this.maxWireVersion)
this.address has only one value
return == true
===========================================================================
com.mongodb.ServerDescription.isCompatibleWithDriver():::EXIT;condition="return == true"
===========================================================================
com.mongodb.ServerDescription.isOk():::ENTER
===========================================================================
com.mongodb.ServerDescription.isOk():::EXIT
this.address == orig(this.address)
this.address._host == orig(this.address._host)
this.address._host.toString == orig(this.address._host.toString)
this.address._port == orig(this.address._port)
this.type == orig(this.type)
this.type.getClass().getName() == orig(this.type.getClass().getName())
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
this.hosts == orig(this.hosts)
this.hosts.getClass().getName() == orig(this.hosts.getClass().getName())
this.passives == orig(this.passives)
this.passives.getClass().getName() == orig(this.passives.getClass().getName())
this.arbiters == orig(this.arbiters)
this.arbiters.getClass().getName() == orig(this.arbiters.getClass().getName())
this.primary == orig(this.primary)
this.maxDocumentSize == orig(this.maxDocumentSize)
this.maxWriteBatchSize == orig(this.maxWriteBatchSize)
this.maxMessageSize == orig(this.maxMessageSize)
this.tags == orig(this.tags)
this.tags.frozen == orig(this.tags.frozen)
this.tags.wrapped == orig(this.tags.wrapped)
this.tags.wrapped.getClass().getName() == orig(this.tags.wrapped.getClass().getName())
this.setName == orig(this.setName)
this.averageLatencyNanos == orig(this.averageLatencyNanos)
this.ok == orig(this.ok)
this.state == orig(this.state)
com.mongodb.ServerConnectionState.Connecting == orig(com.mongodb.ServerConnectionState.Connecting)
com.mongodb.ServerConnectionState.Connected == orig(com.mongodb.ServerConnectionState.Connected)
com.mongodb.ServerConnectionState.$VALUES == orig(com.mongodb.ServerConnectionState.$VALUES)
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == orig(com.mongodb.ServerConnectionState.$VALUES.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES[] == orig(com.mongodb.ServerConnectionState.$VALUES[])
this.version == orig(this.version)
this.version.versionList == orig(this.version.versionList)
this.version.versionList[] == orig(this.version.versionList[])
this.version.versionList.getClass().getName() == orig(this.version.versionList.getClass().getName())
this.minWireVersion == orig(this.minWireVersion)
this.maxWireVersion == orig(this.maxWireVersion)
return == false
===========================================================================
com.mongodb.ServerDescription.isOk():::EXIT;condition="not(return == true)"
===========================================================================
com.mongodb.ServerDescription.toString():::ENTER
this.address has only one value
===========================================================================
com.mongodb.ServerDescription.toString():::EXIT
this.address == orig(this.address)
this.address._host == orig(this.address._host)
this.address._host.toString == orig(this.address._host.toString)
this.address._port == orig(this.address._port)
this.type == orig(this.type)
this.type.getClass().getName() == orig(this.type.getClass().getName())
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
this.hosts == orig(this.hosts)
this.hosts.getClass().getName() == orig(this.hosts.getClass().getName())
this.passives == orig(this.passives)
this.passives.getClass().getName() == orig(this.passives.getClass().getName())
this.arbiters == orig(this.arbiters)
this.arbiters.getClass().getName() == orig(this.arbiters.getClass().getName())
this.primary == orig(this.primary)
this.maxDocumentSize == orig(this.maxDocumentSize)
this.maxWriteBatchSize == orig(this.maxWriteBatchSize)
this.maxMessageSize == orig(this.maxMessageSize)
this.tags == orig(this.tags)
this.tags.frozen == orig(this.tags.frozen)
this.tags.wrapped == orig(this.tags.wrapped)
this.tags.wrapped.getClass().getName() == orig(this.tags.wrapped.getClass().getName())
this.setName == orig(this.setName)
this.averageLatencyNanos == orig(this.averageLatencyNanos)
this.ok == orig(this.ok)
this.state == orig(this.state)
com.mongodb.ServerConnectionState.Connecting == orig(com.mongodb.ServerConnectionState.Connecting)
com.mongodb.ServerConnectionState.Connected == orig(com.mongodb.ServerConnectionState.Connected)
com.mongodb.ServerConnectionState.$VALUES == orig(com.mongodb.ServerConnectionState.$VALUES)
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == orig(com.mongodb.ServerConnectionState.$VALUES.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES[] == orig(com.mongodb.ServerConnectionState.$VALUES[])
this.version == orig(this.version)
this.version.versionList == orig(this.version.versionList)
this.version.versionList[] == orig(this.version.versionList[])
this.version.versionList.getClass().getName() == orig(this.version.versionList.getClass().getName())
this.minWireVersion == orig(this.minWireVersion)
this.maxWireVersion == orig(this.maxWireVersion)
this.address has only one value
return != null
return.toString == "ServerDescription{address=localhost:27017, type=Unknown, hosts=[], passives=[], arbiters=[], primary='null', maxDocumentSize=16777216, maxMessageSize=33554432, maxWriteBatchSize=512, tags={}, setName='null', averageLatencyNanos=0, ok=false, state=Connecting, version=ServerVersion{versionList=[0, 0, 0]}, minWireVersion=0, maxWireVersion=0}"
===========================================================================
com.mongodb.ServerMonitor$ServerMonitorRunnable:::OBJECT
com.mongodb.ServerMonitor.this.serverAddress == com.mongodb.ServerMonitor.this.serverDescription.address
com.mongodb.ServerMonitor.this.socketSettings == com.mongodb.ServerMonitor.this.settings.heartbeatSocketSettings
com.mongodb.ServerMonitor.this.socketSettings.connectTimeoutMS == com.mongodb.ServerMonitor.this.socketSettings.readTimeoutMS
com.mongodb.ServerMonitor.this.serverDescription.hosts == com.mongodb.ServerMonitor.this.serverDescription.passives
com.mongodb.ServerMonitor.this.serverDescription.hosts == com.mongodb.ServerMonitor.this.serverDescription.arbiters
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() == com.mongodb.ServerMonitor.this.serverDescription.passives.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() == com.mongodb.ServerMonitor.this.serverDescription.arbiters.getClass().getName()
com.mongodb.ServerMonitor.LOGGER has only one value
com.mongodb.ServerMonitor.LOGGER != null
com.mongodb.ServerMonitor.this.serverAddress != null
com.mongodb.ServerMonitor.this.serverAddress._host has only one value
com.mongodb.ServerMonitor.this.serverAddress._host != null
com.mongodb.ServerMonitor.this.serverAddress._host.toString == "localhost"
com.mongodb.ServerMonitor.this.serverAddress._port == 27017
com.mongodb.ServerMonitor.this.serverStateListener != null
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() == com.mongodb.DefaultServer$DefaultServerStateListener.class
com.mongodb.ServerMonitor.this.socketSettings != null
com.mongodb.ServerMonitor.this.socketSettings.connectTimeoutMS == 20000
com.mongodb.ServerMonitor.this.socketSettings.socketFactory has only one value
com.mongodb.ServerMonitor.this.socketSettings.socketFactory != null
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
com.mongodb.ServerMonitor.this.settings != null
com.mongodb.ServerMonitor.this.settings.heartbeatFrequencyMS == 5000
com.mongodb.ServerMonitor.this.settings.heartbeatConnectRetryFrequencyMS == 10
com.mongodb.ServerMonitor.this.mongo != null
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.logger != null
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION != null
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME != null
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
com.mongodb.ServerMonitor.this.mongo._options != null
com.mongodb.ServerMonitor.this.mongo._connector != null
com.mongodb.ServerMonitor.this.mongo._dbs != null
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
com.mongodb.ServerMonitor.this.mongo._concern has only one value
com.mongodb.ServerMonitor.this.mongo._concern != null
com.mongodb.ServerMonitor.this.mongo._readPref has only one value
com.mongodb.ServerMonitor.this.mongo._readPref != null
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ServerMonitor.this.mongo._netOptions != null
com.mongodb.ServerMonitor.this.mongo._authority != null
com.mongodb.ServerMonitor.this.mongo._bufferPool != null
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
com.mongodb.ServerMonitor.this.count == 0
com.mongodb.ServerMonitor.this.elapsedNanosSum == 0
com.mongodb.ServerMonitor.this.serverDescription != null
com.mongodb.ServerMonitor.this.serverDescription.type has only one value
com.mongodb.ServerMonitor.this.serverDescription.type != null
com.mongodb.ServerMonitor.this.serverDescription.type.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.ServerMonitor.this.serverDescription.hosts has only one value
com.mongodb.ServerMonitor.this.serverDescription.hosts != null
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() == java.util.Collections$EmptySet.class
com.mongodb.ServerMonitor.this.serverDescription.primary == null
com.mongodb.ServerMonitor.this.serverDescription.maxDocumentSize == 16777216
com.mongodb.ServerMonitor.this.serverDescription.maxWriteBatchSize == 512
com.mongodb.ServerMonitor.this.serverDescription.maxMessageSize == 33554432
com.mongodb.ServerMonitor.this.serverDescription.tags != null
com.mongodb.ServerMonitor.this.serverDescription.setName == null
com.mongodb.ServerMonitor.this.serverDescription.averageLatencyNanos == 0
com.mongodb.ServerMonitor.this.serverDescription.ok == false
com.mongodb.ServerMonitor.this.serverDescription.state has only one value
com.mongodb.ServerMonitor.this.serverDescription.state != null
com.mongodb.ServerMonitor.this.serverDescription.version != null
com.mongodb.ServerMonitor.this.serverDescription.minWireVersion == 0
com.mongodb.ServerMonitor.this.serverDescription.maxWireVersion == 0
com.mongodb.ServerMonitor.this.isClosed == false
com.mongodb.ServerMonitor.this.connection == null
com.mongodb.DBPort._rootLogger has only one value
com.mongodb.DBPort._rootLogger != null
com.mongodb.ServerMonitor.this.lock != null
com.mongodb.ServerMonitor.this.lock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
com.mongodb.ServerMonitor.this.condition != null
com.mongodb.ServerMonitor.this.condition.getClass().getName() == java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.class
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerMonitor.this.serverDescription.type.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerMonitor.this.lock.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerMonitor.this.condition.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerMonitor.this.serverDescription.type.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerMonitor.this.lock.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerMonitor.this.condition.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerMonitor.this.serverDescription.type.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerMonitor.this.lock.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerMonitor.this.condition.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerMonitor.this.serverDescription.type.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerMonitor.this.lock.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerMonitor.this.condition.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerMonitor.this.serverDescription.type.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerMonitor.this.lock.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerMonitor.this.condition.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.type.getClass().getName() != com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.type.getClass().getName() != com.mongodb.ServerMonitor.this.lock.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.type.getClass().getName() != com.mongodb.ServerMonitor.this.condition.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() != com.mongodb.ServerMonitor.this.lock.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() != com.mongodb.ServerMonitor.this.condition.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != com.mongodb.ServerMonitor.this.condition.getClass().getName()
===========================================================================
com.mongodb.ServerMonitor$ServerMonitorRunnable.ServerMonitorRunnable(com.mongodb.ServerMonitor):::ENTER
com.mongodb.ServerMonitor.this.serverAddress == com.mongodb.ServerMonitor.this.serverDescription.address
com.mongodb.ServerMonitor.this.socketSettings == com.mongodb.ServerMonitor.this.settings.heartbeatSocketSettings
com.mongodb.ServerMonitor.this.socketSettings.connectTimeoutMS == com.mongodb.ServerMonitor.this.socketSettings.readTimeoutMS
com.mongodb.ServerMonitor.this.serverDescription.hosts == com.mongodb.ServerMonitor.this.serverDescription.passives
com.mongodb.ServerMonitor.this.serverDescription.hosts == com.mongodb.ServerMonitor.this.serverDescription.arbiters
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() == com.mongodb.ServerMonitor.this.serverDescription.passives.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() == com.mongodb.ServerMonitor.this.serverDescription.arbiters.getClass().getName()
com.mongodb.ServerMonitor.LOGGER has only one value
com.mongodb.ServerMonitor.this.serverAddress._host has only one value
com.mongodb.ServerMonitor.this.serverAddress._host.toString == "localhost"
com.mongodb.ServerMonitor.this.serverAddress._port == 27017
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() == com.mongodb.DefaultServer$DefaultServerStateListener.class
com.mongodb.ServerMonitor.this.socketSettings.connectTimeoutMS == 20000
com.mongodb.ServerMonitor.this.socketSettings.socketFactory has only one value
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
com.mongodb.ServerMonitor.this.settings.heartbeatFrequencyMS == 5000
com.mongodb.ServerMonitor.this.settings.heartbeatConnectRetryFrequencyMS == 10
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
com.mongodb.ServerMonitor.this.mongo._concern has only one value
com.mongodb.ServerMonitor.this.mongo._readPref has only one value
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ServerMonitor.this.mongo._cleaner == null
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
com.mongodb.ServerMonitor.this.count == 0
com.mongodb.ServerMonitor.this.elapsedNanosSum == 0
com.mongodb.ServerMonitor.this.serverDescription.type has only one value
com.mongodb.ServerMonitor.this.serverDescription.type.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.ServerMonitor.this.serverDescription.hosts has only one value
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() == java.util.Collections$EmptySet.class
com.mongodb.ServerMonitor.this.serverDescription.primary == null
com.mongodb.ServerMonitor.this.serverDescription.maxDocumentSize == 16777216
com.mongodb.ServerMonitor.this.serverDescription.maxWriteBatchSize == 512
com.mongodb.ServerMonitor.this.serverDescription.maxMessageSize == 33554432
com.mongodb.ServerMonitor.this.serverDescription.setName == null
com.mongodb.ServerMonitor.this.serverDescription.averageLatencyNanos == 0
com.mongodb.ServerMonitor.this.serverDescription.ok == false
com.mongodb.ServerMonitor.this.serverDescription.state has only one value
com.mongodb.ServerMonitor.this.serverDescription.minWireVersion == 0
com.mongodb.ServerMonitor.this.serverDescription.maxWireVersion == 0
com.mongodb.ServerMonitor.this.isClosed == false
com.mongodb.ServerMonitor.this.connection == null
com.mongodb.DBPort._rootLogger has only one value
com.mongodb.ServerMonitor.this.monitorThread == null
com.mongodb.ServerMonitor.this.lock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
com.mongodb.ServerMonitor.this.condition.getClass().getName() == java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.class
===========================================================================
com.mongodb.ServerMonitor$ServerMonitorRunnable.ServerMonitorRunnable(com.mongodb.ServerMonitor):::EXIT
com.mongodb.ServerMonitor.this == orig(com.mongodb.ServerMonitor.this)
com.mongodb.ServerMonitor.LOGGER == orig(com.mongodb.ServerMonitor.LOGGER)
com.mongodb.ServerMonitor.this.serverAddress == orig(com.mongodb.ServerMonitor.this.serverAddress)
com.mongodb.ServerMonitor.this.serverAddress == orig(com.mongodb.ServerMonitor.this.serverDescription.address)
com.mongodb.ServerMonitor.this.serverAddress._host == orig(com.mongodb.ServerMonitor.this.serverAddress._host)
com.mongodb.ServerMonitor.this.serverAddress._host.toString == orig(com.mongodb.ServerMonitor.this.serverAddress._host.toString)
com.mongodb.ServerMonitor.this.serverAddress._port == orig(com.mongodb.ServerMonitor.this.serverAddress._port)
com.mongodb.ServerMonitor.this.serverStateListener == orig(com.mongodb.ServerMonitor.this.serverStateListener)
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() == orig(com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName())
com.mongodb.ServerMonitor.this.socketSettings == orig(com.mongodb.ServerMonitor.this.socketSettings)
com.mongodb.ServerMonitor.this.socketSettings == orig(com.mongodb.ServerMonitor.this.settings.heartbeatSocketSettings)
com.mongodb.ServerMonitor.this.socketSettings.connectTimeoutMS == orig(com.mongodb.ServerMonitor.this.socketSettings.connectTimeoutMS)
com.mongodb.ServerMonitor.this.socketSettings.connectTimeoutMS == orig(com.mongodb.ServerMonitor.this.socketSettings.readTimeoutMS)
com.mongodb.ServerMonitor.this.socketSettings.socketFactory == orig(com.mongodb.ServerMonitor.this.socketSettings.socketFactory)
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() == orig(com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName())
com.mongodb.ServerMonitor.this.settings == orig(com.mongodb.ServerMonitor.this.settings)
com.mongodb.ServerMonitor.this.settings.heartbeatFrequencyMS == orig(com.mongodb.ServerMonitor.this.settings.heartbeatFrequencyMS)
com.mongodb.ServerMonitor.this.settings.heartbeatConnectRetryFrequencyMS == orig(com.mongodb.ServerMonitor.this.settings.heartbeatConnectRetryFrequencyMS)
com.mongodb.ServerMonitor.this.mongo == orig(com.mongodb.ServerMonitor.this.mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
com.mongodb.ServerMonitor.this.mongo._options == orig(com.mongodb.ServerMonitor.this.mongo._options)
com.mongodb.ServerMonitor.this.mongo._connector == orig(com.mongodb.ServerMonitor.this.mongo._connector)
com.mongodb.ServerMonitor.this.mongo._dbs == orig(com.mongodb.ServerMonitor.this.mongo._dbs)
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() == orig(com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName())
com.mongodb.ServerMonitor.this.mongo._concern == orig(com.mongodb.ServerMonitor.this.mongo._concern)
com.mongodb.ServerMonitor.this.mongo._readPref == orig(com.mongodb.ServerMonitor.this.mongo._readPref)
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() == orig(com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName())
com.mongodb.ServerMonitor.this.mongo._netOptions == orig(com.mongodb.ServerMonitor.this.mongo._netOptions)
com.mongodb.ServerMonitor.this.mongo._cleaner == orig(com.mongodb.ServerMonitor.this.mongo._cleaner)
com.mongodb.ServerMonitor.this.mongo._authority == orig(com.mongodb.ServerMonitor.this.mongo._authority)
com.mongodb.ServerMonitor.this.mongo._bufferPool == orig(com.mongodb.ServerMonitor.this.mongo._bufferPool)
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() == orig(com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName())
com.mongodb.ServerMonitor.this.count == orig(com.mongodb.ServerMonitor.this.count)
com.mongodb.ServerMonitor.this.elapsedNanosSum == orig(com.mongodb.ServerMonitor.this.elapsedNanosSum)
com.mongodb.ServerMonitor.this.serverDescription == orig(com.mongodb.ServerMonitor.this.serverDescription)
com.mongodb.ServerMonitor.this.serverDescription.type == orig(com.mongodb.ServerMonitor.this.serverDescription.type)
com.mongodb.ServerMonitor.this.serverDescription.type.getClass().getName() == orig(com.mongodb.ServerMonitor.this.serverDescription.type.getClass().getName())
com.mongodb.ServerMonitor.this.serverDescription.hosts == orig(com.mongodb.ServerMonitor.this.serverDescription.hosts)
com.mongodb.ServerMonitor.this.serverDescription.hosts == orig(com.mongodb.ServerMonitor.this.serverDescription.passives)
com.mongodb.ServerMonitor.this.serverDescription.hosts == orig(com.mongodb.ServerMonitor.this.serverDescription.arbiters)
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() == orig(com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName())
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() == orig(com.mongodb.ServerMonitor.this.serverDescription.passives.getClass().getName())
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() == orig(com.mongodb.ServerMonitor.this.serverDescription.arbiters.getClass().getName())
com.mongodb.ServerMonitor.this.serverDescription.primary == orig(com.mongodb.ServerMonitor.this.serverDescription.primary)
com.mongodb.ServerMonitor.this.serverDescription.maxDocumentSize == orig(com.mongodb.ServerMonitor.this.serverDescription.maxDocumentSize)
com.mongodb.ServerMonitor.this.serverDescription.maxWriteBatchSize == orig(com.mongodb.ServerMonitor.this.serverDescription.maxWriteBatchSize)
com.mongodb.ServerMonitor.this.serverDescription.maxMessageSize == orig(com.mongodb.ServerMonitor.this.serverDescription.maxMessageSize)
com.mongodb.ServerMonitor.this.serverDescription.tags == orig(com.mongodb.ServerMonitor.this.serverDescription.tags)
com.mongodb.ServerMonitor.this.serverDescription.setName == orig(com.mongodb.ServerMonitor.this.serverDescription.setName)
com.mongodb.ServerMonitor.this.serverDescription.averageLatencyNanos == orig(com.mongodb.ServerMonitor.this.serverDescription.averageLatencyNanos)
com.mongodb.ServerMonitor.this.serverDescription.ok == orig(com.mongodb.ServerMonitor.this.serverDescription.ok)
com.mongodb.ServerMonitor.this.serverDescription.state == orig(com.mongodb.ServerMonitor.this.serverDescription.state)
com.mongodb.ServerMonitor.this.serverDescription.version == orig(com.mongodb.ServerMonitor.this.serverDescription.version)
com.mongodb.ServerMonitor.this.serverDescription.minWireVersion == orig(com.mongodb.ServerMonitor.this.serverDescription.minWireVersion)
com.mongodb.ServerMonitor.this.serverDescription.maxWireVersion == orig(com.mongodb.ServerMonitor.this.serverDescription.maxWireVersion)
com.mongodb.ServerMonitor.this.isClosed == orig(com.mongodb.ServerMonitor.this.isClosed)
com.mongodb.ServerMonitor.this.connection == orig(com.mongodb.ServerMonitor.this.connection)
com.mongodb.DBPort._rootLogger == orig(com.mongodb.DBPort._rootLogger)
com.mongodb.ServerMonitor.this.monitorThread == orig(com.mongodb.ServerMonitor.this.monitorThread)
com.mongodb.ServerMonitor.this.lock == orig(com.mongodb.ServerMonitor.this.lock)
com.mongodb.ServerMonitor.this.lock.getClass().getName() == orig(com.mongodb.ServerMonitor.this.lock.getClass().getName())
com.mongodb.ServerMonitor.this.condition == orig(com.mongodb.ServerMonitor.this.condition)
com.mongodb.ServerMonitor.this.condition.getClass().getName() == orig(com.mongodb.ServerMonitor.this.condition.getClass().getName())
com.mongodb.ServerMonitor.this.mongo._cleaner == null
com.mongodb.ServerMonitor.this.monitorThread == null
===========================================================================
com.mongodb.ServerMonitor$ServerMonitorRunnable.logStateChange(com.mongodb.ServerDescription, java.lang.Throwable):::ENTER
com.mongodb.ServerMonitor.this.serverDescription.type.getClass().getName() == com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() == currentServerDescription.hosts.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() == currentServerDescription.passives.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() == currentServerDescription.arbiters.getClass().getName()
currentServerDescription.type.getClass().getName() == com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._cleaner != null
com.mongodb.ServerMonitor.this.monitorThread != null
currentServerDescription != null
currentServerDescription.address != null
currentServerDescription.address._host has only one value
currentServerDescription.address._host != null
currentServerDescription.address._host.toString == "localhost"
currentServerDescription.address._port == 27017
currentServerDescription.type has only one value
currentServerDescription.type != null
com.mongodb.ServerType.StandAlone has only one value
com.mongodb.ServerType.StandAlone != null
com.mongodb.ServerType.StandAlone.getClass().getName() == com.mongodb.ServerType$1.class
com.mongodb.ServerType.ReplicaSetPrimary has only one value
com.mongodb.ServerType.ReplicaSetPrimary != null
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == com.mongodb.ServerType$2.class
com.mongodb.ServerType.ReplicaSetSecondary has only one value
com.mongodb.ServerType.ReplicaSetSecondary != null
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == com.mongodb.ServerType$3.class
com.mongodb.ServerType.ReplicaSetArbiter has only one value
com.mongodb.ServerType.ReplicaSetArbiter != null
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == com.mongodb.ServerType$4.class
com.mongodb.ServerType.ReplicaSetOther has only one value
com.mongodb.ServerType.ReplicaSetOther != null
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == com.mongodb.ServerType$5.class
com.mongodb.ServerType.ReplicaSetGhost has only one value
com.mongodb.ServerType.ReplicaSetGhost != null
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == com.mongodb.ServerType$6.class
com.mongodb.ServerType.ShardRouter has only one value
com.mongodb.ServerType.ShardRouter != null
com.mongodb.ServerType.ShardRouter.getClass().getName() == com.mongodb.ServerType$7.class
com.mongodb.ServerType.Unknown has only one value
com.mongodb.ServerType.Unknown != null
com.mongodb.ServerType.Unknown.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.ServerType.$VALUES has only one value
com.mongodb.ServerType.$VALUES != null
com.mongodb.ServerType.$VALUES.getClass().getName() == com.mongodb.ServerType[].class
com.mongodb.ServerType.$VALUES[] contains no nulls and has only one value, of length 8
com.mongodb.ServerType.$VALUES[] elements != null
com.mongodb.ServerType.$VALUES[].getClass().getName() == [null, null, null, null, null, null, null, null]
com.mongodb.ServerType.$VALUES[].getClass().getName() elements == null
currentServerDescription.hosts has only one value
currentServerDescription.hosts != null
currentServerDescription.passives has only one value
currentServerDescription.passives != null
currentServerDescription.arbiters has only one value
currentServerDescription.arbiters != null
currentServerDescription.primary == null
currentServerDescription.maxDocumentSize == 16777216
currentServerDescription.maxWriteBatchSize == 512
currentServerDescription.maxMessageSize == 33554432
currentServerDescription.tags != null
currentServerDescription.tags.frozen == true
currentServerDescription.tags.wrapped != null
currentServerDescription.tags.wrapped.getClass().getName() == java.util.HashMap.class
currentServerDescription.setName == null
currentServerDescription.averageLatencyNanos == 0
currentServerDescription.ok == false
currentServerDescription.state has only one value
currentServerDescription.state != null
com.mongodb.ServerConnectionState.Connecting has only one value
com.mongodb.ServerConnectionState.Connecting != null
com.mongodb.ServerConnectionState.Connected has only one value
com.mongodb.ServerConnectionState.Connected != null
com.mongodb.ServerConnectionState.$VALUES has only one value
com.mongodb.ServerConnectionState.$VALUES != null
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == com.mongodb.ServerConnectionState[].class
com.mongodb.ServerConnectionState.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ServerConnectionState.$VALUES[] elements != null
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() == [com.mongodb.ServerConnectionState, com.mongodb.ServerConnectionState]
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() elements == com.mongodb.ServerConnectionState.class
currentServerDescription.version != null
currentServerDescription.version.versionList != null
currentServerDescription.version.versionList[] contains no nulls and has only one value, of length 3
currentServerDescription.version.versionList[] elements has only one value
currentServerDescription.version.versionList[] elements != null
currentServerDescription.version.versionList[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
currentServerDescription.version.versionList[].getClass().getName() elements == java.lang.Integer.class
currentServerDescription.version.versionList.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
currentServerDescription.minWireVersion == 0
currentServerDescription.maxWireVersion == 0
throwable != null
size(com.mongodb.ServerType.$VALUES[]) == 8
size(com.mongodb.ServerConnectionState.$VALUES[]) == 2
size(currentServerDescription.version.versionList[]) == 3
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
currentServerDescription.tags.wrapped.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
currentServerDescription.tags.wrapped.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
===========================================================================
com.mongodb.ServerMonitor$ServerMonitorRunnable.logStateChange(com.mongodb.ServerDescription, java.lang.Throwable):::EXIT
com.mongodb.ServerMonitor.this == orig(com.mongodb.ServerMonitor.this)
com.mongodb.ServerMonitor.LOGGER == orig(com.mongodb.ServerMonitor.LOGGER)
com.mongodb.ServerMonitor.this.serverAddress == orig(com.mongodb.ServerMonitor.this.serverAddress)
com.mongodb.ServerMonitor.this.serverAddress == orig(com.mongodb.ServerMonitor.this.serverDescription.address)
com.mongodb.ServerMonitor.this.serverAddress._host == orig(com.mongodb.ServerMonitor.this.serverAddress._host)
com.mongodb.ServerMonitor.this.serverAddress._host.toString == orig(com.mongodb.ServerMonitor.this.serverAddress._host.toString)
com.mongodb.ServerMonitor.this.serverAddress._port == orig(com.mongodb.ServerMonitor.this.serverAddress._port)
com.mongodb.ServerMonitor.this.serverStateListener == orig(com.mongodb.ServerMonitor.this.serverStateListener)
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() == orig(com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName())
com.mongodb.ServerMonitor.this.socketSettings == orig(com.mongodb.ServerMonitor.this.socketSettings)
com.mongodb.ServerMonitor.this.socketSettings == orig(com.mongodb.ServerMonitor.this.settings.heartbeatSocketSettings)
com.mongodb.ServerMonitor.this.socketSettings.connectTimeoutMS == orig(com.mongodb.ServerMonitor.this.socketSettings.connectTimeoutMS)
com.mongodb.ServerMonitor.this.socketSettings.connectTimeoutMS == orig(com.mongodb.ServerMonitor.this.socketSettings.readTimeoutMS)
com.mongodb.ServerMonitor.this.socketSettings.socketFactory == orig(com.mongodb.ServerMonitor.this.socketSettings.socketFactory)
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() == orig(com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName())
com.mongodb.ServerMonitor.this.settings == orig(com.mongodb.ServerMonitor.this.settings)
com.mongodb.ServerMonitor.this.settings.heartbeatFrequencyMS == orig(com.mongodb.ServerMonitor.this.settings.heartbeatFrequencyMS)
com.mongodb.ServerMonitor.this.settings.heartbeatConnectRetryFrequencyMS == orig(com.mongodb.ServerMonitor.this.settings.heartbeatConnectRetryFrequencyMS)
com.mongodb.ServerMonitor.this.mongo == orig(com.mongodb.ServerMonitor.this.mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
com.mongodb.ServerMonitor.this.mongo._options == orig(com.mongodb.ServerMonitor.this.mongo._options)
com.mongodb.ServerMonitor.this.mongo._connector == orig(com.mongodb.ServerMonitor.this.mongo._connector)
com.mongodb.ServerMonitor.this.mongo._dbs == orig(com.mongodb.ServerMonitor.this.mongo._dbs)
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() == orig(com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName())
com.mongodb.ServerMonitor.this.mongo._concern == orig(com.mongodb.ServerMonitor.this.mongo._concern)
com.mongodb.ServerMonitor.this.mongo._readPref == orig(com.mongodb.ServerMonitor.this.mongo._readPref)
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() == orig(com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName())
com.mongodb.ServerMonitor.this.mongo._netOptions == orig(com.mongodb.ServerMonitor.this.mongo._netOptions)
com.mongodb.ServerMonitor.this.mongo._cleaner == orig(com.mongodb.ServerMonitor.this.mongo._cleaner)
com.mongodb.ServerMonitor.this.mongo._authority == orig(com.mongodb.ServerMonitor.this.mongo._authority)
com.mongodb.ServerMonitor.this.mongo._bufferPool == orig(com.mongodb.ServerMonitor.this.mongo._bufferPool)
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() == orig(com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName())
com.mongodb.ServerMonitor.this.count == orig(com.mongodb.ServerMonitor.this.count)
com.mongodb.ServerMonitor.this.elapsedNanosSum == orig(com.mongodb.ServerMonitor.this.elapsedNanosSum)
com.mongodb.ServerMonitor.this.serverDescription == orig(com.mongodb.ServerMonitor.this.serverDescription)
com.mongodb.ServerMonitor.this.serverDescription.type == orig(com.mongodb.ServerMonitor.this.serverDescription.type)
com.mongodb.ServerMonitor.this.serverDescription.type.getClass().getName() == com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.hosts == orig(com.mongodb.ServerMonitor.this.serverDescription.hosts)
com.mongodb.ServerMonitor.this.serverDescription.hosts == orig(com.mongodb.ServerMonitor.this.serverDescription.passives)
com.mongodb.ServerMonitor.this.serverDescription.hosts == orig(com.mongodb.ServerMonitor.this.serverDescription.arbiters)
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() == currentServerDescription.hosts.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.passives.getClass().getName() == currentServerDescription.hosts.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.arbiters.getClass().getName() == currentServerDescription.hosts.getClass().getName()
com.mongodb.ServerMonitor.this.serverDescription.primary == orig(com.mongodb.ServerMonitor.this.serverDescription.primary)
com.mongodb.ServerMonitor.this.serverDescription.maxDocumentSize == orig(com.mongodb.ServerMonitor.this.serverDescription.maxDocumentSize)
com.mongodb.ServerMonitor.this.serverDescription.maxWriteBatchSize == orig(com.mongodb.ServerMonitor.this.serverDescription.maxWriteBatchSize)
com.mongodb.ServerMonitor.this.serverDescription.maxMessageSize == orig(com.mongodb.ServerMonitor.this.serverDescription.maxMessageSize)
com.mongodb.ServerMonitor.this.serverDescription.tags == orig(com.mongodb.ServerMonitor.this.serverDescription.tags)
com.mongodb.ServerMonitor.this.serverDescription.setName == orig(com.mongodb.ServerMonitor.this.serverDescription.setName)
com.mongodb.ServerMonitor.this.serverDescription.averageLatencyNanos == orig(com.mongodb.ServerMonitor.this.serverDescription.averageLatencyNanos)
com.mongodb.ServerMonitor.this.serverDescription.ok == orig(com.mongodb.ServerMonitor.this.serverDescription.ok)
com.mongodb.ServerMonitor.this.serverDescription.state == orig(com.mongodb.ServerMonitor.this.serverDescription.state)
com.mongodb.ServerMonitor.this.serverDescription.version == orig(com.mongodb.ServerMonitor.this.serverDescription.version)
com.mongodb.ServerMonitor.this.serverDescription.minWireVersion == orig(com.mongodb.ServerMonitor.this.serverDescription.minWireVersion)
com.mongodb.ServerMonitor.this.serverDescription.maxWireVersion == orig(com.mongodb.ServerMonitor.this.serverDescription.maxWireVersion)
com.mongodb.ServerMonitor.this.isClosed == orig(com.mongodb.ServerMonitor.this.isClosed)
com.mongodb.ServerMonitor.this.connection == orig(com.mongodb.ServerMonitor.this.connection)
com.mongodb.DBPort._rootLogger == orig(com.mongodb.DBPort._rootLogger)
com.mongodb.ServerMonitor.this.monitorThread == orig(com.mongodb.ServerMonitor.this.monitorThread)
com.mongodb.ServerMonitor.this.lock == orig(com.mongodb.ServerMonitor.this.lock)
com.mongodb.ServerMonitor.this.lock.getClass().getName() == orig(com.mongodb.ServerMonitor.this.lock.getClass().getName())
com.mongodb.ServerMonitor.this.condition == orig(com.mongodb.ServerMonitor.this.condition)
com.mongodb.ServerMonitor.this.condition.getClass().getName() == orig(com.mongodb.ServerMonitor.this.condition.getClass().getName())
currentServerDescription.address == orig(currentServerDescription.address)
currentServerDescription.address._host == orig(currentServerDescription.address._host)
currentServerDescription.address._host.toString == orig(currentServerDescription.address._host.toString)
currentServerDescription.address._port == orig(currentServerDescription.address._port)
currentServerDescription.type == orig(currentServerDescription.type)
currentServerDescription.type.getClass().getName() == com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerMonitor.this.serverDescription.type.getClass().getName())
com.mongodb.ServerType.Unknown.getClass().getName() == orig(currentServerDescription.type.getClass().getName())
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
currentServerDescription.hosts == orig(currentServerDescription.hosts)
currentServerDescription.hosts.getClass().getName() == currentServerDescription.passives.getClass().getName()
currentServerDescription.hosts.getClass().getName() == currentServerDescription.arbiters.getClass().getName()
currentServerDescription.hosts.getClass().getName() == orig(com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName())
currentServerDescription.hosts.getClass().getName() == orig(com.mongodb.ServerMonitor.this.serverDescription.passives.getClass().getName())
currentServerDescription.hosts.getClass().getName() == orig(com.mongodb.ServerMonitor.this.serverDescription.arbiters.getClass().getName())
currentServerDescription.hosts.getClass().getName() == orig(currentServerDescription.hosts.getClass().getName())
currentServerDescription.hosts.getClass().getName() == orig(currentServerDescription.passives.getClass().getName())
currentServerDescription.hosts.getClass().getName() == orig(currentServerDescription.arbiters.getClass().getName())
currentServerDescription.passives == orig(currentServerDescription.passives)
currentServerDescription.arbiters == orig(currentServerDescription.arbiters)
currentServerDescription.primary == orig(currentServerDescription.primary)
currentServerDescription.maxDocumentSize == orig(currentServerDescription.maxDocumentSize)
currentServerDescription.maxWriteBatchSize == orig(currentServerDescription.maxWriteBatchSize)
currentServerDescription.maxMessageSize == orig(currentServerDescription.maxMessageSize)
currentServerDescription.tags == orig(currentServerDescription.tags)
currentServerDescription.tags.frozen == orig(currentServerDescription.tags.frozen)
currentServerDescription.tags.wrapped == orig(currentServerDescription.tags.wrapped)
currentServerDescription.tags.wrapped.getClass().getName() == orig(currentServerDescription.tags.wrapped.getClass().getName())
currentServerDescription.setName == orig(currentServerDescription.setName)
currentServerDescription.averageLatencyNanos == orig(currentServerDescription.averageLatencyNanos)
currentServerDescription.ok == orig(currentServerDescription.ok)
currentServerDescription.state == orig(currentServerDescription.state)
com.mongodb.ServerConnectionState.Connecting == orig(com.mongodb.ServerConnectionState.Connecting)
com.mongodb.ServerConnectionState.Connected == orig(com.mongodb.ServerConnectionState.Connected)
com.mongodb.ServerConnectionState.$VALUES == orig(com.mongodb.ServerConnectionState.$VALUES)
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == orig(com.mongodb.ServerConnectionState.$VALUES.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES[] == orig(com.mongodb.ServerConnectionState.$VALUES[])
currentServerDescription.version == orig(currentServerDescription.version)
currentServerDescription.version.versionList == orig(currentServerDescription.version.versionList)
currentServerDescription.version.versionList[] == orig(currentServerDescription.version.versionList[])
currentServerDescription.version.versionList.getClass().getName() == orig(currentServerDescription.version.versionList.getClass().getName())
currentServerDescription.minWireVersion == orig(currentServerDescription.minWireVersion)
currentServerDescription.maxWireVersion == orig(currentServerDescription.maxWireVersion)
com.mongodb.ServerMonitor.this.mongo._cleaner != null
com.mongodb.ServerMonitor.this.monitorThread != null
currentServerDescription.address != null
currentServerDescription.address._host has only one value
currentServerDescription.address._host != null
currentServerDescription.address._host.toString == "localhost"
currentServerDescription.address._port == 27017
currentServerDescription.type has only one value
currentServerDescription.type != null
com.mongodb.ServerType.StandAlone has only one value
com.mongodb.ServerType.StandAlone != null
com.mongodb.ServerType.StandAlone.getClass().getName() == com.mongodb.ServerType$1.class
com.mongodb.ServerType.ReplicaSetPrimary has only one value
com.mongodb.ServerType.ReplicaSetPrimary != null
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == com.mongodb.ServerType$2.class
com.mongodb.ServerType.ReplicaSetSecondary has only one value
com.mongodb.ServerType.ReplicaSetSecondary != null
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == com.mongodb.ServerType$3.class
com.mongodb.ServerType.ReplicaSetArbiter has only one value
com.mongodb.ServerType.ReplicaSetArbiter != null
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == com.mongodb.ServerType$4.class
com.mongodb.ServerType.ReplicaSetOther has only one value
com.mongodb.ServerType.ReplicaSetOther != null
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == com.mongodb.ServerType$5.class
com.mongodb.ServerType.ReplicaSetGhost has only one value
com.mongodb.ServerType.ReplicaSetGhost != null
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == com.mongodb.ServerType$6.class
com.mongodb.ServerType.ShardRouter has only one value
com.mongodb.ServerType.ShardRouter != null
com.mongodb.ServerType.ShardRouter.getClass().getName() == com.mongodb.ServerType$7.class
com.mongodb.ServerType.Unknown has only one value
com.mongodb.ServerType.Unknown != null
com.mongodb.ServerType.Unknown.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.ServerType.$VALUES has only one value
com.mongodb.ServerType.$VALUES != null
com.mongodb.ServerType.$VALUES.getClass().getName() == com.mongodb.ServerType[].class
com.mongodb.ServerType.$VALUES[] contains no nulls and has only one value, of length 8
com.mongodb.ServerType.$VALUES[] elements != null
com.mongodb.ServerType.$VALUES[].getClass().getName() == [null, null, null, null, null, null, null, null]
com.mongodb.ServerType.$VALUES[].getClass().getName() elements == null
currentServerDescription.hosts has only one value
currentServerDescription.hosts != null
currentServerDescription.hosts.getClass().getName() == java.util.Collections$EmptySet.class
currentServerDescription.passives has only one value
currentServerDescription.passives != null
currentServerDescription.arbiters has only one value
currentServerDescription.arbiters != null
currentServerDescription.primary == null
currentServerDescription.maxDocumentSize == 16777216
currentServerDescription.maxWriteBatchSize == 512
currentServerDescription.maxMessageSize == 33554432
currentServerDescription.tags != null
currentServerDescription.tags.frozen == true
currentServerDescription.tags.wrapped != null
currentServerDescription.tags.wrapped.getClass().getName() == java.util.HashMap.class
currentServerDescription.setName == null
currentServerDescription.averageLatencyNanos == 0
currentServerDescription.ok == false
currentServerDescription.state has only one value
currentServerDescription.state != null
com.mongodb.ServerConnectionState.Connecting has only one value
com.mongodb.ServerConnectionState.Connecting != null
com.mongodb.ServerConnectionState.Connected has only one value
com.mongodb.ServerConnectionState.Connected != null
com.mongodb.ServerConnectionState.$VALUES has only one value
com.mongodb.ServerConnectionState.$VALUES != null
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == com.mongodb.ServerConnectionState[].class
com.mongodb.ServerConnectionState.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ServerConnectionState.$VALUES[] elements != null
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() == [com.mongodb.ServerConnectionState, com.mongodb.ServerConnectionState]
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() elements == com.mongodb.ServerConnectionState.class
currentServerDescription.version != null
currentServerDescription.version.versionList != null
currentServerDescription.version.versionList[] contains no nulls and has only one value, of length 3
currentServerDescription.version.versionList[] elements has only one value
currentServerDescription.version.versionList[] elements != null
currentServerDescription.version.versionList[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
currentServerDescription.version.versionList[].getClass().getName() elements == java.lang.Integer.class
currentServerDescription.version.versionList.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
currentServerDescription.minWireVersion == 0
currentServerDescription.maxWireVersion == 0
size(com.mongodb.ServerType.$VALUES[]) == 8
size(com.mongodb.ServerConnectionState.$VALUES[]) == 2
size(currentServerDescription.version.versionList[]) == 3
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != currentServerDescription.hosts.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != currentServerDescription.hosts.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != currentServerDescription.hosts.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != currentServerDescription.hosts.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != currentServerDescription.hosts.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != currentServerDescription.hosts.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.lock.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != currentServerDescription.hosts.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerMonitor.this.condition.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != currentServerDescription.hosts.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != currentServerDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != currentServerDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != currentServerDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != currentServerDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != currentServerDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != currentServerDescription.hosts.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != currentServerDescription.hosts.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != currentServerDescription.hosts.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
currentServerDescription.hosts.getClass().getName() != currentServerDescription.tags.wrapped.getClass().getName()
currentServerDescription.hosts.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
currentServerDescription.hosts.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
currentServerDescription.tags.wrapped.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
currentServerDescription.tags.wrapped.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() != currentServerDescription.version.versionList.getClass().getName()
===========================================================================
com.mongodb.ServerMonitor$ServerMonitorRunnable.waitForNext():::ENTER
com.mongodb.ServerMonitor.this.mongo._cleaner != null
com.mongodb.ServerMonitor.this.monitorThread != null
===========================================================================
com.mongodb.ServerMonitor$ServerMonitorRunnable.waitForNext():::EXIT
com.mongodb.ServerMonitor.this == orig(com.mongodb.ServerMonitor.this)
com.mongodb.ServerMonitor.LOGGER == orig(com.mongodb.ServerMonitor.LOGGER)
com.mongodb.ServerMonitor.this.serverAddress == orig(com.mongodb.ServerMonitor.this.serverAddress)
com.mongodb.ServerMonitor.this.serverAddress == orig(com.mongodb.ServerMonitor.this.serverDescription.address)
com.mongodb.ServerMonitor.this.serverAddress._host == orig(com.mongodb.ServerMonitor.this.serverAddress._host)
com.mongodb.ServerMonitor.this.serverAddress._host.toString == orig(com.mongodb.ServerMonitor.this.serverAddress._host.toString)
com.mongodb.ServerMonitor.this.serverAddress._port == orig(com.mongodb.ServerMonitor.this.serverAddress._port)
com.mongodb.ServerMonitor.this.serverStateListener == orig(com.mongodb.ServerMonitor.this.serverStateListener)
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() == orig(com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName())
com.mongodb.ServerMonitor.this.socketSettings == orig(com.mongodb.ServerMonitor.this.socketSettings)
com.mongodb.ServerMonitor.this.socketSettings == orig(com.mongodb.ServerMonitor.this.settings.heartbeatSocketSettings)
com.mongodb.ServerMonitor.this.socketSettings.connectTimeoutMS == orig(com.mongodb.ServerMonitor.this.socketSettings.connectTimeoutMS)
com.mongodb.ServerMonitor.this.socketSettings.connectTimeoutMS == orig(com.mongodb.ServerMonitor.this.socketSettings.readTimeoutMS)
com.mongodb.ServerMonitor.this.socketSettings.socketFactory == orig(com.mongodb.ServerMonitor.this.socketSettings.socketFactory)
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() == orig(com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName())
com.mongodb.ServerMonitor.this.settings == orig(com.mongodb.ServerMonitor.this.settings)
com.mongodb.ServerMonitor.this.settings.heartbeatFrequencyMS == orig(com.mongodb.ServerMonitor.this.settings.heartbeatFrequencyMS)
com.mongodb.ServerMonitor.this.settings.heartbeatConnectRetryFrequencyMS == orig(com.mongodb.ServerMonitor.this.settings.heartbeatConnectRetryFrequencyMS)
com.mongodb.ServerMonitor.this.mongo == orig(com.mongodb.ServerMonitor.this.mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
com.mongodb.ServerMonitor.this.mongo._options == orig(com.mongodb.ServerMonitor.this.mongo._options)
com.mongodb.ServerMonitor.this.mongo._connector == orig(com.mongodb.ServerMonitor.this.mongo._connector)
com.mongodb.ServerMonitor.this.mongo._dbs == orig(com.mongodb.ServerMonitor.this.mongo._dbs)
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() == orig(com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName())
com.mongodb.ServerMonitor.this.mongo._concern == orig(com.mongodb.ServerMonitor.this.mongo._concern)
com.mongodb.ServerMonitor.this.mongo._readPref == orig(com.mongodb.ServerMonitor.this.mongo._readPref)
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() == orig(com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName())
com.mongodb.ServerMonitor.this.mongo._netOptions == orig(com.mongodb.ServerMonitor.this.mongo._netOptions)
com.mongodb.ServerMonitor.this.mongo._cleaner == orig(com.mongodb.ServerMonitor.this.mongo._cleaner)
com.mongodb.ServerMonitor.this.mongo._authority == orig(com.mongodb.ServerMonitor.this.mongo._authority)
com.mongodb.ServerMonitor.this.mongo._bufferPool == orig(com.mongodb.ServerMonitor.this.mongo._bufferPool)
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() == orig(com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName())
com.mongodb.ServerMonitor.this.count == orig(com.mongodb.ServerMonitor.this.count)
com.mongodb.ServerMonitor.this.elapsedNanosSum == orig(com.mongodb.ServerMonitor.this.elapsedNanosSum)
com.mongodb.ServerMonitor.this.serverDescription == orig(com.mongodb.ServerMonitor.this.serverDescription)
com.mongodb.ServerMonitor.this.serverDescription.type == orig(com.mongodb.ServerMonitor.this.serverDescription.type)
com.mongodb.ServerMonitor.this.serverDescription.type.getClass().getName() == orig(com.mongodb.ServerMonitor.this.serverDescription.type.getClass().getName())
com.mongodb.ServerMonitor.this.serverDescription.hosts == orig(com.mongodb.ServerMonitor.this.serverDescription.hosts)
com.mongodb.ServerMonitor.this.serverDescription.hosts == orig(com.mongodb.ServerMonitor.this.serverDescription.passives)
com.mongodb.ServerMonitor.this.serverDescription.hosts == orig(com.mongodb.ServerMonitor.this.serverDescription.arbiters)
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() == orig(com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName())
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() == orig(com.mongodb.ServerMonitor.this.serverDescription.passives.getClass().getName())
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() == orig(com.mongodb.ServerMonitor.this.serverDescription.arbiters.getClass().getName())
com.mongodb.ServerMonitor.this.serverDescription.primary == orig(com.mongodb.ServerMonitor.this.serverDescription.primary)
com.mongodb.ServerMonitor.this.serverDescription.maxDocumentSize == orig(com.mongodb.ServerMonitor.this.serverDescription.maxDocumentSize)
com.mongodb.ServerMonitor.this.serverDescription.maxWriteBatchSize == orig(com.mongodb.ServerMonitor.this.serverDescription.maxWriteBatchSize)
com.mongodb.ServerMonitor.this.serverDescription.maxMessageSize == orig(com.mongodb.ServerMonitor.this.serverDescription.maxMessageSize)
com.mongodb.ServerMonitor.this.serverDescription.tags == orig(com.mongodb.ServerMonitor.this.serverDescription.tags)
com.mongodb.ServerMonitor.this.serverDescription.setName == orig(com.mongodb.ServerMonitor.this.serverDescription.setName)
com.mongodb.ServerMonitor.this.serverDescription.averageLatencyNanos == orig(com.mongodb.ServerMonitor.this.serverDescription.averageLatencyNanos)
com.mongodb.ServerMonitor.this.serverDescription.ok == orig(com.mongodb.ServerMonitor.this.serverDescription.ok)
com.mongodb.ServerMonitor.this.serverDescription.state == orig(com.mongodb.ServerMonitor.this.serverDescription.state)
com.mongodb.ServerMonitor.this.serverDescription.version == orig(com.mongodb.ServerMonitor.this.serverDescription.version)
com.mongodb.ServerMonitor.this.serverDescription.minWireVersion == orig(com.mongodb.ServerMonitor.this.serverDescription.minWireVersion)
com.mongodb.ServerMonitor.this.serverDescription.maxWireVersion == orig(com.mongodb.ServerMonitor.this.serverDescription.maxWireVersion)
com.mongodb.ServerMonitor.this.isClosed == orig(com.mongodb.ServerMonitor.this.isClosed)
com.mongodb.ServerMonitor.this.connection == orig(com.mongodb.ServerMonitor.this.connection)
com.mongodb.DBPort._rootLogger == orig(com.mongodb.DBPort._rootLogger)
com.mongodb.ServerMonitor.this.monitorThread == orig(com.mongodb.ServerMonitor.this.monitorThread)
com.mongodb.ServerMonitor.this.lock == orig(com.mongodb.ServerMonitor.this.lock)
com.mongodb.ServerMonitor.this.lock.getClass().getName() == orig(com.mongodb.ServerMonitor.this.lock.getClass().getName())
com.mongodb.ServerMonitor.this.condition == orig(com.mongodb.ServerMonitor.this.condition)
com.mongodb.ServerMonitor.this.condition.getClass().getName() == orig(com.mongodb.ServerMonitor.this.condition.getClass().getName())
com.mongodb.ServerMonitor.this.mongo._cleaner != null
com.mongodb.ServerMonitor.this.monitorThread != null
===========================================================================
com.mongodb.ServerMonitor$ServerMonitorRunnable.waitForSignalOrTimeout():::ENTER
com.mongodb.ServerMonitor.this.mongo._cleaner != null
com.mongodb.ServerMonitor.this.monitorThread != null
===========================================================================
com.mongodb.ServerMonitor$ServerMonitorRunnable.waitForSignalOrTimeout():::EXIT
com.mongodb.ServerMonitor.this == orig(com.mongodb.ServerMonitor.this)
com.mongodb.ServerMonitor.LOGGER == orig(com.mongodb.ServerMonitor.LOGGER)
com.mongodb.ServerMonitor.this.serverAddress == orig(com.mongodb.ServerMonitor.this.serverAddress)
com.mongodb.ServerMonitor.this.serverAddress == orig(com.mongodb.ServerMonitor.this.serverDescription.address)
com.mongodb.ServerMonitor.this.serverAddress._host == orig(com.mongodb.ServerMonitor.this.serverAddress._host)
com.mongodb.ServerMonitor.this.serverAddress._host.toString == orig(com.mongodb.ServerMonitor.this.serverAddress._host.toString)
com.mongodb.ServerMonitor.this.serverAddress._port == orig(com.mongodb.ServerMonitor.this.serverAddress._port)
com.mongodb.ServerMonitor.this.serverStateListener == orig(com.mongodb.ServerMonitor.this.serverStateListener)
com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName() == orig(com.mongodb.ServerMonitor.this.serverStateListener.getClass().getName())
com.mongodb.ServerMonitor.this.socketSettings == orig(com.mongodb.ServerMonitor.this.socketSettings)
com.mongodb.ServerMonitor.this.socketSettings == orig(com.mongodb.ServerMonitor.this.settings.heartbeatSocketSettings)
com.mongodb.ServerMonitor.this.socketSettings.connectTimeoutMS == orig(com.mongodb.ServerMonitor.this.socketSettings.connectTimeoutMS)
com.mongodb.ServerMonitor.this.socketSettings.connectTimeoutMS == orig(com.mongodb.ServerMonitor.this.socketSettings.readTimeoutMS)
com.mongodb.ServerMonitor.this.socketSettings.socketFactory == orig(com.mongodb.ServerMonitor.this.socketSettings.socketFactory)
com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName() == orig(com.mongodb.ServerMonitor.this.socketSettings.socketFactory.getClass().getName())
com.mongodb.ServerMonitor.this.settings == orig(com.mongodb.ServerMonitor.this.settings)
com.mongodb.ServerMonitor.this.settings.heartbeatFrequencyMS == orig(com.mongodb.ServerMonitor.this.settings.heartbeatFrequencyMS)
com.mongodb.ServerMonitor.this.settings.heartbeatConnectRetryFrequencyMS == orig(com.mongodb.ServerMonitor.this.settings.heartbeatConnectRetryFrequencyMS)
com.mongodb.ServerMonitor.this.mongo == orig(com.mongodb.ServerMonitor.this.mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
com.mongodb.ServerMonitor.this.mongo._options == orig(com.mongodb.ServerMonitor.this.mongo._options)
com.mongodb.ServerMonitor.this.mongo._connector == orig(com.mongodb.ServerMonitor.this.mongo._connector)
com.mongodb.ServerMonitor.this.mongo._dbs == orig(com.mongodb.ServerMonitor.this.mongo._dbs)
com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName() == orig(com.mongodb.ServerMonitor.this.mongo._dbs.getClass().getName())
com.mongodb.ServerMonitor.this.mongo._concern == orig(com.mongodb.ServerMonitor.this.mongo._concern)
com.mongodb.ServerMonitor.this.mongo._readPref == orig(com.mongodb.ServerMonitor.this.mongo._readPref)
com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName() == orig(com.mongodb.ServerMonitor.this.mongo._readPref.getClass().getName())
com.mongodb.ServerMonitor.this.mongo._netOptions == orig(com.mongodb.ServerMonitor.this.mongo._netOptions)
com.mongodb.ServerMonitor.this.mongo._cleaner == orig(com.mongodb.ServerMonitor.this.mongo._cleaner)
com.mongodb.ServerMonitor.this.mongo._authority == orig(com.mongodb.ServerMonitor.this.mongo._authority)
com.mongodb.ServerMonitor.this.mongo._bufferPool == orig(com.mongodb.ServerMonitor.this.mongo._bufferPool)
com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName() == orig(com.mongodb.ServerMonitor.this.mongo._bufferPool.getClass().getName())
com.mongodb.ServerMonitor.this.count == orig(com.mongodb.ServerMonitor.this.count)
com.mongodb.ServerMonitor.this.elapsedNanosSum == orig(com.mongodb.ServerMonitor.this.elapsedNanosSum)
com.mongodb.ServerMonitor.this.serverDescription == orig(com.mongodb.ServerMonitor.this.serverDescription)
com.mongodb.ServerMonitor.this.serverDescription.type == orig(com.mongodb.ServerMonitor.this.serverDescription.type)
com.mongodb.ServerMonitor.this.serverDescription.type.getClass().getName() == orig(com.mongodb.ServerMonitor.this.serverDescription.type.getClass().getName())
com.mongodb.ServerMonitor.this.serverDescription.hosts == orig(com.mongodb.ServerMonitor.this.serverDescription.hosts)
com.mongodb.ServerMonitor.this.serverDescription.hosts == orig(com.mongodb.ServerMonitor.this.serverDescription.passives)
com.mongodb.ServerMonitor.this.serverDescription.hosts == orig(com.mongodb.ServerMonitor.this.serverDescription.arbiters)
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() == orig(com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName())
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() == orig(com.mongodb.ServerMonitor.this.serverDescription.passives.getClass().getName())
com.mongodb.ServerMonitor.this.serverDescription.hosts.getClass().getName() == orig(com.mongodb.ServerMonitor.this.serverDescription.arbiters.getClass().getName())
com.mongodb.ServerMonitor.this.serverDescription.primary == orig(com.mongodb.ServerMonitor.this.serverDescription.primary)
com.mongodb.ServerMonitor.this.serverDescription.maxDocumentSize == orig(com.mongodb.ServerMonitor.this.serverDescription.maxDocumentSize)
com.mongodb.ServerMonitor.this.serverDescription.maxWriteBatchSize == orig(com.mongodb.ServerMonitor.this.serverDescription.maxWriteBatchSize)
com.mongodb.ServerMonitor.this.serverDescription.maxMessageSize == orig(com.mongodb.ServerMonitor.this.serverDescription.maxMessageSize)
com.mongodb.ServerMonitor.this.serverDescription.tags == orig(com.mongodb.ServerMonitor.this.serverDescription.tags)
com.mongodb.ServerMonitor.this.serverDescription.setName == orig(com.mongodb.ServerMonitor.this.serverDescription.setName)
com.mongodb.ServerMonitor.this.serverDescription.averageLatencyNanos == orig(com.mongodb.ServerMonitor.this.serverDescription.averageLatencyNanos)
com.mongodb.ServerMonitor.this.serverDescription.ok == orig(com.mongodb.ServerMonitor.this.serverDescription.ok)
com.mongodb.ServerMonitor.this.serverDescription.state == orig(com.mongodb.ServerMonitor.this.serverDescription.state)
com.mongodb.ServerMonitor.this.serverDescription.version == orig(com.mongodb.ServerMonitor.this.serverDescription.version)
com.mongodb.ServerMonitor.this.serverDescription.minWireVersion == orig(com.mongodb.ServerMonitor.this.serverDescription.minWireVersion)
com.mongodb.ServerMonitor.this.serverDescription.maxWireVersion == orig(com.mongodb.ServerMonitor.this.serverDescription.maxWireVersion)
com.mongodb.ServerMonitor.this.isClosed == orig(com.mongodb.ServerMonitor.this.isClosed)
com.mongodb.ServerMonitor.this.connection == orig(com.mongodb.ServerMonitor.this.connection)
com.mongodb.DBPort._rootLogger == orig(com.mongodb.DBPort._rootLogger)
com.mongodb.ServerMonitor.this.monitorThread == orig(com.mongodb.ServerMonitor.this.monitorThread)
com.mongodb.ServerMonitor.this.lock == orig(com.mongodb.ServerMonitor.this.lock)
com.mongodb.ServerMonitor.this.lock.getClass().getName() == orig(com.mongodb.ServerMonitor.this.lock.getClass().getName())
com.mongodb.ServerMonitor.this.condition == orig(com.mongodb.ServerMonitor.this.condition)
com.mongodb.ServerMonitor.this.condition.getClass().getName() == orig(com.mongodb.ServerMonitor.this.condition.getClass().getName())
com.mongodb.ServerMonitor.this.mongo._cleaner != null
com.mongodb.ServerMonitor.this.monitorThread != null
return != 0
===========================================================================
com.mongodb.ServerMonitor:::CLASS
com.mongodb.ServerMonitor.LOGGER has only one value
com.mongodb.ServerMonitor.LOGGER != null
===========================================================================
com.mongodb.ServerMonitor:::OBJECT
this.serverAddress == this.serverDescription.address
this.serverAddress._host == this.serverDescription.address._host
this.serverAddress._port == this.serverDescription.address._port
this.socketSettings == this.settings.heartbeatSocketSettings
this.socketSettings.connectTimeoutMS == this.socketSettings.readTimeoutMS
this.socketSettings.connectTimeoutMS == this.settings.heartbeatSocketSettings.connectTimeoutMS
this.socketSettings.connectTimeoutMS == this.settings.heartbeatSocketSettings.readTimeoutMS
this.socketSettings.connectTimeoutMS == this.mongo._options.heartbeatConnectTimeoutMS
this.socketSettings.connectTimeoutMS == this.mongo._options.heartbeatReadTimeoutMS
this.socketSettings.socketFactory == this.settings.heartbeatSocketSettings.socketFactory
this.socketSettings.socketFactory == this.mongo._options.socketFactory
this.socketSettings.socketFactory.getClass().getName() == this.settings.heartbeatSocketSettings.socketFactory.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() == this.mongo._options.socketFactory.getClass().getName()
this.settings.heartbeatFrequencyMS == this.mongo._options.heartbeatFrequencyMS
this.settings.heartbeatConnectRetryFrequencyMS == this.mongo._options.connectionsPerHost
this.settings.heartbeatConnectRetryFrequencyMS == this.mongo._options.heartbeatConnectRetryFrequencyMS
this.mongo == this.mongo._connector._mongo
this.mongo == com.mongodb.Mongo.this
this.mongo._options.fsync == this.mongo._options.j
this.mongo._concern == com.mongodb.WriteConcern.NORMAL
this.mongo._readPref == com.mongodb.ReadPreference.PRIMARY
this.mongo._readPref.getClass().getName() == com.mongodb.ReadPreference.PRIMARY.getClass().getName()
com.mongodb.ReadPreference.PRIMARY == com.mongodb.ReadPreference._PRIMARY
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference._PRIMARY.getClass().getName()
com.mongodb.ReadPreference.SECONDARY == com.mongodb.ReadPreference._SECONDARY_PREFERRED
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName()
this.serverDescription.type == com.mongodb.ServerType.Unknown
this.serverDescription.type.getClass().getName() == com.mongodb.ServerType.Unknown.getClass().getName()
this.serverDescription.hosts == this.serverDescription.passives
this.serverDescription.hosts == this.serverDescription.arbiters
this.serverDescription.hosts.getClass().getName() == this.serverDescription.passives.getClass().getName()
this.serverDescription.hosts.getClass().getName() == this.serverDescription.arbiters.getClass().getName()
this.serverDescription.state == com.mongodb.ServerConnectionState.Connecting
this.serverAddress != null
this.serverAddress._host has only one value
this.serverAddress._host != null
this.serverAddress._host.toString == "localhost"
this.serverAddress._port == 27017
this.serverStateListener != null
this.serverStateListener.getClass().getName() == com.mongodb.DefaultServer$DefaultServerStateListener.class
this.socketSettings != null
this.socketSettings.connectTimeoutMS == 20000
this.socketSettings.socketFactory has only one value
this.socketSettings.socketFactory != null
this.socketSettings.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
this.settings != null
this.settings.heartbeatFrequencyMS == 5000
this.settings.heartbeatConnectRetryFrequencyMS == 10
this.mongo != null
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.logger != null
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION != null
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME != null
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
this.mongo._options != null
this.mongo._options.description == null
this.mongo._options.threadsAllowedToBlockForConnectionMultiplier == 5
this.mongo._options.maxWaitTime == 120000
this.mongo._options.connectTimeout == 10000
this.mongo._options.socketTimeout == 0
this.mongo._options.socketKeepAlive == false
this.mongo._options.autoConnectRetry == false
this.mongo._options.maxAutoConnectRetryTime == 0
this.mongo._options.slaveOk == false
this.mongo._options.readPreference == null
this.mongo._options.dbDecoderFactory has only one value
this.mongo._options.dbDecoderFactory != null
this.mongo._options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
this.mongo._options.dbEncoderFactory has only one value
this.mongo._options.dbEncoderFactory != null
this.mongo._options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
this.mongo._options.safe == false
this.mongo._options.w == 0
this.mongo._options.wtimeout == 0
this.mongo._options.fsync == false
this.mongo._options.cursorFinalizerEnabled == true
this.mongo._options.writeConcern == null
this.mongo._options.alwaysUseMBeans == false
this.mongo._options.minConnectionsPerHost == 0
this.mongo._options.maxConnectionIdleTime == 0
this.mongo._options.maxConnectionLifeTime == 0
this.mongo._options.acceptableLatencyDifferenceMS == 15
this.mongo._options.heartbeatThreadCount == 0
this.mongo._options.requiredReplicaSetName == null
this.mongo._connector != null
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID has only one value
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID != null
this.mongo._connector._closed == false
this.mongo._connector.cluster.getClass().getName() == com.mongodb.SingleServerCluster.class
this.mongo._connector._myPort != null
this.mongo._connector.connectionMode has only one value
this.mongo._connector.connectionMode != null
this.mongo._connector.type has only one value
this.mongo._connector.type != null
this.mongo._connector.mongosHAServerSelector == null
this.mongo._dbs != null
this.mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ERRORS_IGNORED != null
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED != null
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED != null
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.FSYNCED != null
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.JOURNALED != null
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED != null
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NONE != null
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.NORMAL != null
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.SAFE != null
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.MAJORITY != null
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.FSYNC_SAFE != null
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE != null
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE != null
com.mongodb.WriteConcern._namedConcerns == null
this.mongo._concern._w has only one value
this.mongo._concern._w != null
this.mongo._concern._w.getClass().getName() == java.lang.Integer.class
this.mongo._concern._wtimeout == 0
this.mongo._concern._fsync == false
this.mongo._concern._j == false
this.mongo._concern._continueOnError == false
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY != null
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY != null
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY != null
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED != null
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST != null
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
this.mongo._netOptions != null
this.mongo._netOptions._parent == null
this.mongo._netOptions._options == 0
this.mongo._netOptions._hasOptions == false
this.mongo._authority != null
this.mongo._authority.type has only one value
this.mongo._authority.type != null
this.mongo._authority.serverAddresses != null
this.mongo._authority.serverAddresses[] elements != null
this.mongo._authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
this.mongo._authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
this.mongo._authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
this.mongo._authority.credentialsStore != null
this.mongo._bufferPool != null
this.mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
this.mongo._bufferPool._max == 1000
this.mongo._bufferPool._stored != null
this.mongo._bufferPool._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
this.count == 0
this.elapsedNanosSum == 0
this.serverDescription.address != null
this.serverDescription.address._host has only one value
this.serverDescription.address._host != null
this.serverDescription.address._host.toString == "localhost"
this.serverDescription.address._port == 27017
this.serverDescription.type has only one value
this.serverDescription.type != null
this.serverDescription.type.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.ServerType.StandAlone has only one value
com.mongodb.ServerType.StandAlone != null
com.mongodb.ServerType.StandAlone.getClass().getName() == com.mongodb.ServerType$1.class
com.mongodb.ServerType.ReplicaSetPrimary has only one value
com.mongodb.ServerType.ReplicaSetPrimary != null
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == com.mongodb.ServerType$2.class
com.mongodb.ServerType.ReplicaSetSecondary has only one value
com.mongodb.ServerType.ReplicaSetSecondary != null
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == com.mongodb.ServerType$3.class
com.mongodb.ServerType.ReplicaSetArbiter has only one value
com.mongodb.ServerType.ReplicaSetArbiter != null
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == com.mongodb.ServerType$4.class
com.mongodb.ServerType.ReplicaSetOther has only one value
com.mongodb.ServerType.ReplicaSetOther != null
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == com.mongodb.ServerType$5.class
com.mongodb.ServerType.ReplicaSetGhost has only one value
com.mongodb.ServerType.ReplicaSetGhost != null
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == com.mongodb.ServerType$6.class
com.mongodb.ServerType.ShardRouter has only one value
com.mongodb.ServerType.ShardRouter != null
com.mongodb.ServerType.ShardRouter.getClass().getName() == com.mongodb.ServerType$7.class
com.mongodb.ServerType.Unknown has only one value
com.mongodb.ServerType.Unknown != null
com.mongodb.ServerType.Unknown.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.ServerType.$VALUES has only one value
com.mongodb.ServerType.$VALUES != null
com.mongodb.ServerType.$VALUES.getClass().getName() == com.mongodb.ServerType[].class
com.mongodb.ServerType.$VALUES[] contains no nulls and has only one value, of length 8
com.mongodb.ServerType.$VALUES[] elements != null
com.mongodb.ServerType.$VALUES[].getClass().getName() == [null, null, null, null, null, null, null, null]
com.mongodb.ServerType.$VALUES[].getClass().getName() elements == null
this.serverDescription.hosts has only one value
this.serverDescription.hosts != null
this.serverDescription.hosts.getClass().getName() == java.util.Collections$EmptySet.class
this.serverDescription.primary == null
this.serverDescription.maxDocumentSize == 16777216
this.serverDescription.maxWriteBatchSize == 512
this.serverDescription.maxMessageSize == 33554432
this.serverDescription.tags != null
this.serverDescription.tags.frozen == true
this.serverDescription.tags.wrapped != null
this.serverDescription.tags.wrapped.getClass().getName() == java.util.HashMap.class
this.serverDescription.setName == null
this.serverDescription.averageLatencyNanos == 0
this.serverDescription.ok == false
this.serverDescription.state has only one value
this.serverDescription.state != null
com.mongodb.ServerConnectionState.Connecting has only one value
com.mongodb.ServerConnectionState.Connecting != null
com.mongodb.ServerConnectionState.Connected has only one value
com.mongodb.ServerConnectionState.Connected != null
com.mongodb.ServerConnectionState.$VALUES has only one value
com.mongodb.ServerConnectionState.$VALUES != null
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == com.mongodb.ServerConnectionState[].class
com.mongodb.ServerConnectionState.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ServerConnectionState.$VALUES[] elements != null
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() == [com.mongodb.ServerConnectionState, com.mongodb.ServerConnectionState]
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() elements == com.mongodb.ServerConnectionState.class
this.serverDescription.version != null
this.serverDescription.version.versionList != null
this.serverDescription.version.versionList[] contains no nulls and has only one value, of length 3
this.serverDescription.version.versionList[] elements has only one value
this.serverDescription.version.versionList[] elements != null
this.serverDescription.version.versionList[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.serverDescription.version.versionList[].getClass().getName() elements == java.lang.Integer.class
this.serverDescription.version.versionList.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
this.serverDescription.minWireVersion == 0
this.serverDescription.maxWireVersion == 0
this.isClosed == false
this.connection == null
com.mongodb.DBPort._rootLogger has only one value
com.mongodb.DBPort._rootLogger != null
com.mongodb.PooledConnectionProvider.LOGGER has only one value
com.mongodb.PooledConnectionProvider.LOGGER != null
this.lock != null
this.lock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
this.condition != null
this.condition.getClass().getName() == java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.class
size(this.mongo._authority.serverAddresses[]) == 1
size(com.mongodb.ServerType.$VALUES[]) == 8
size(com.mongodb.ServerConnectionState.$VALUES[]) == 2
size(this.serverDescription.version.versionList[]) == 3
this.serverStateListener.getClass().getName() != this.socketSettings.socketFactory.getClass().getName()
this.serverStateListener.getClass().getName() != this.mongo._options.dbDecoderFactory.getClass().getName()
this.serverStateListener.getClass().getName() != this.mongo._options.dbEncoderFactory.getClass().getName()
this.serverStateListener.getClass().getName() != this.mongo._connector.cluster.getClass().getName()
this.serverStateListener.getClass().getName() != this.mongo._dbs.getClass().getName()
this.serverStateListener.getClass().getName() != this.mongo._concern._w.getClass().getName()
this.serverStateListener.getClass().getName() != com.mongodb.ReadPreference.PRIMARY.getClass().getName()
this.serverStateListener.getClass().getName() != com.mongodb.ReadPreference.SECONDARY.getClass().getName()
this.serverStateListener.getClass().getName() != com.mongodb.ReadPreference._SECONDARY.getClass().getName()
this.serverStateListener.getClass().getName() != com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName()
this.serverStateListener.getClass().getName() != com.mongodb.ReadPreference._NEAREST.getClass().getName()
this.serverStateListener.getClass().getName() != this.mongo._authority.serverAddresses.getClass().getName()
this.serverStateListener.getClass().getName() != this.mongo._bufferPool.getClass().getName()
this.serverStateListener.getClass().getName() != this.mongo._bufferPool._stored.getClass().getName()
this.serverStateListener.getClass().getName() != this.serverDescription.type.getClass().getName()
this.serverStateListener.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
this.serverStateListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
this.serverStateListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
this.serverStateListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
this.serverStateListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
this.serverStateListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
this.serverStateListener.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
this.serverStateListener.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
this.serverStateListener.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
this.serverStateListener.getClass().getName() != this.serverDescription.hosts.getClass().getName()
this.serverStateListener.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
this.serverStateListener.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
this.serverStateListener.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
this.serverStateListener.getClass().getName() != this.lock.getClass().getName()
this.serverStateListener.getClass().getName() != this.condition.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != this.mongo._options.dbDecoderFactory.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != this.mongo._options.dbEncoderFactory.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != this.mongo._connector.cluster.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != this.mongo._dbs.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != this.mongo._concern._w.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ReadPreference.PRIMARY.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ReadPreference.SECONDARY.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ReadPreference._SECONDARY.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ReadPreference._NEAREST.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != this.mongo._authority.serverAddresses.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != this.mongo._bufferPool.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != this.mongo._bufferPool._stored.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != this.serverDescription.type.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != this.serverDescription.hosts.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != this.lock.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != this.condition.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != this.mongo._options.dbEncoderFactory.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != this.mongo._connector.cluster.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != this.mongo._dbs.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != this.mongo._concern._w.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != com.mongodb.ReadPreference.PRIMARY.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != com.mongodb.ReadPreference.SECONDARY.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != com.mongodb.ReadPreference._SECONDARY.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != com.mongodb.ReadPreference._NEAREST.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != this.mongo._authority.serverAddresses.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != this.mongo._bufferPool.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != this.mongo._bufferPool._stored.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != this.serverDescription.type.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != this.serverDescription.hosts.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != this.lock.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != this.condition.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != this.mongo._connector.cluster.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != this.mongo._dbs.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != this.mongo._concern._w.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != com.mongodb.ReadPreference.PRIMARY.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != com.mongodb.ReadPreference.SECONDARY.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != com.mongodb.ReadPreference._SECONDARY.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != com.mongodb.ReadPreference._NEAREST.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != this.mongo._authority.serverAddresses.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != this.mongo._bufferPool.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != this.mongo._bufferPool._stored.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != this.serverDescription.type.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != this.serverDescription.hosts.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != this.lock.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != this.condition.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != this.mongo._dbs.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != this.mongo._concern._w.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != com.mongodb.ReadPreference.PRIMARY.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != com.mongodb.ReadPreference.SECONDARY.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != com.mongodb.ReadPreference._SECONDARY.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != com.mongodb.ReadPreference._NEAREST.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != this.mongo._authority.serverAddresses.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != this.mongo._bufferPool.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != this.mongo._bufferPool._stored.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != this.serverDescription.type.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != this.serverDescription.hosts.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != this.lock.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != this.condition.getClass().getName()
this.mongo._dbs.getClass().getName() != this.mongo._concern._w.getClass().getName()
this.mongo._dbs.getClass().getName() != com.mongodb.ReadPreference.PRIMARY.getClass().getName()
this.mongo._dbs.getClass().getName() != com.mongodb.ReadPreference.SECONDARY.getClass().getName()
this.mongo._dbs.getClass().getName() != com.mongodb.ReadPreference._SECONDARY.getClass().getName()
this.mongo._dbs.getClass().getName() != com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName()
this.mongo._dbs.getClass().getName() != com.mongodb.ReadPreference._NEAREST.getClass().getName()
this.mongo._dbs.getClass().getName() != this.mongo._authority.serverAddresses.getClass().getName()
this.mongo._dbs.getClass().getName() != this.mongo._bufferPool.getClass().getName()
this.mongo._dbs.getClass().getName() != this.mongo._bufferPool._stored.getClass().getName()
this.mongo._dbs.getClass().getName() != this.serverDescription.type.getClass().getName()
this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
this.mongo._dbs.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
this.mongo._dbs.getClass().getName() != this.serverDescription.hosts.getClass().getName()
this.mongo._dbs.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
this.mongo._dbs.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
this.mongo._dbs.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
this.mongo._dbs.getClass().getName() != this.lock.getClass().getName()
this.mongo._dbs.getClass().getName() != this.condition.getClass().getName()
this.mongo._concern._w.getClass().getName() != com.mongodb.ReadPreference.PRIMARY.getClass().getName()
this.mongo._concern._w.getClass().getName() != com.mongodb.ReadPreference.SECONDARY.getClass().getName()
this.mongo._concern._w.getClass().getName() != com.mongodb.ReadPreference._SECONDARY.getClass().getName()
this.mongo._concern._w.getClass().getName() != com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName()
this.mongo._concern._w.getClass().getName() != com.mongodb.ReadPreference._NEAREST.getClass().getName()
this.mongo._concern._w.getClass().getName() != this.mongo._authority.serverAddresses.getClass().getName()
this.mongo._concern._w.getClass().getName() != this.mongo._bufferPool.getClass().getName()
this.mongo._concern._w.getClass().getName() != this.mongo._bufferPool._stored.getClass().getName()
this.mongo._concern._w.getClass().getName() != this.serverDescription.type.getClass().getName()
this.mongo._concern._w.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
this.mongo._concern._w.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
this.mongo._concern._w.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
this.mongo._concern._w.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
this.mongo._concern._w.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
this.mongo._concern._w.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
this.mongo._concern._w.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
this.mongo._concern._w.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
this.mongo._concern._w.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
this.mongo._concern._w.getClass().getName() != this.serverDescription.hosts.getClass().getName()
this.mongo._concern._w.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
this.mongo._concern._w.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
this.mongo._concern._w.getClass().getName() in this.serverDescription.version.versionList[].getClass().getName()
this.mongo._concern._w.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
this.mongo._concern._w.getClass().getName() != this.lock.getClass().getName()
this.mongo._concern._w.getClass().getName() != this.condition.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != com.mongodb.ReadPreference.SECONDARY.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != com.mongodb.ReadPreference._SECONDARY.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != com.mongodb.ReadPreference._NEAREST.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != this.mongo._authority.serverAddresses.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != this.mongo._bufferPool.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != this.mongo._bufferPool._stored.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != this.serverDescription.type.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != this.serverDescription.hosts.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != this.lock.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != this.condition.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != com.mongodb.ReadPreference._SECONDARY.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != com.mongodb.ReadPreference._NEAREST.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != this.mongo._authority.serverAddresses.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != this.mongo._bufferPool.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != this.mongo._bufferPool._stored.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != this.serverDescription.type.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != this.serverDescription.hosts.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != this.lock.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != this.condition.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != com.mongodb.ReadPreference._NEAREST.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != this.mongo._authority.serverAddresses.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != this.mongo._bufferPool.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != this.mongo._bufferPool._stored.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != this.serverDescription.type.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != this.serverDescription.hosts.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != this.lock.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != this.condition.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != com.mongodb.ReadPreference._NEAREST.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != this.mongo._authority.serverAddresses.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != this.mongo._bufferPool.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != this.mongo._bufferPool._stored.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != this.serverDescription.type.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != this.serverDescription.hosts.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != this.lock.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != this.condition.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != this.mongo._authority.serverAddresses.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != this.mongo._bufferPool.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != this.mongo._bufferPool._stored.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != this.serverDescription.type.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != this.serverDescription.hosts.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != this.lock.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != this.condition.getClass().getName()
this.mongo._authority.serverAddresses.getClass().getName() != this.mongo._bufferPool.getClass().getName()
this.mongo._authority.serverAddresses.getClass().getName() != this.mongo._bufferPool._stored.getClass().getName()
this.mongo._authority.serverAddresses.getClass().getName() != this.serverDescription.type.getClass().getName()
this.mongo._authority.serverAddresses.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
this.mongo._authority.serverAddresses.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
this.mongo._authority.serverAddresses.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
this.mongo._authority.serverAddresses.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
this.mongo._authority.serverAddresses.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
this.mongo._authority.serverAddresses.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
this.mongo._authority.serverAddresses.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
this.mongo._authority.serverAddresses.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
this.mongo._authority.serverAddresses.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
this.mongo._authority.serverAddresses.getClass().getName() != this.serverDescription.hosts.getClass().getName()
this.mongo._authority.serverAddresses.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
this.mongo._authority.serverAddresses.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
this.mongo._authority.serverAddresses.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
this.mongo._authority.serverAddresses.getClass().getName() != this.lock.getClass().getName()
this.mongo._authority.serverAddresses.getClass().getName() != this.condition.getClass().getName()
this.mongo._bufferPool.getClass().getName() != this.mongo._bufferPool._stored.getClass().getName()
this.mongo._bufferPool.getClass().getName() != this.serverDescription.type.getClass().getName()
this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
this.mongo._bufferPool.getClass().getName() != this.serverDescription.hosts.getClass().getName()
this.mongo._bufferPool.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
this.mongo._bufferPool.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
this.mongo._bufferPool.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
this.mongo._bufferPool.getClass().getName() != this.lock.getClass().getName()
this.mongo._bufferPool.getClass().getName() != this.condition.getClass().getName()
this.mongo._bufferPool._stored.getClass().getName() != this.serverDescription.type.getClass().getName()
this.mongo._bufferPool._stored.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
this.mongo._bufferPool._stored.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
this.mongo._bufferPool._stored.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
this.mongo._bufferPool._stored.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
this.mongo._bufferPool._stored.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
this.mongo._bufferPool._stored.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
this.mongo._bufferPool._stored.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
this.mongo._bufferPool._stored.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
this.mongo._bufferPool._stored.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
this.mongo._bufferPool._stored.getClass().getName() != this.serverDescription.hosts.getClass().getName()
this.mongo._bufferPool._stored.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
this.mongo._bufferPool._stored.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
this.mongo._bufferPool._stored.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
this.mongo._bufferPool._stored.getClass().getName() != this.lock.getClass().getName()
this.mongo._bufferPool._stored.getClass().getName() != this.condition.getClass().getName()
this.serverDescription.type.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
this.serverDescription.type.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
this.serverDescription.type.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
this.serverDescription.type.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
this.serverDescription.type.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
this.serverDescription.type.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
this.serverDescription.type.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
this.serverDescription.type.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
this.serverDescription.type.getClass().getName() != this.serverDescription.hosts.getClass().getName()
this.serverDescription.type.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
this.serverDescription.type.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
this.serverDescription.type.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
this.serverDescription.type.getClass().getName() != this.lock.getClass().getName()
this.serverDescription.type.getClass().getName() != this.condition.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != this.serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != this.lock.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != this.condition.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != this.serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != this.lock.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != this.condition.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != this.serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != this.lock.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != this.condition.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != this.serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != this.lock.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != this.condition.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != this.serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != this.lock.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != this.condition.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != this.serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != this.lock.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != this.condition.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != this.serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != this.lock.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != this.condition.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != this.serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != this.lock.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != this.condition.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != this.serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != this.lock.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != this.condition.getClass().getName()
this.serverDescription.hosts.getClass().getName() != this.serverDescription.tags.wrapped.getClass().getName()
this.serverDescription.hosts.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
this.serverDescription.hosts.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
this.serverDescription.hosts.getClass().getName() != this.lock.getClass().getName()
this.serverDescription.hosts.getClass().getName() != this.condition.getClass().getName()
this.serverDescription.tags.wrapped.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
this.serverDescription.tags.wrapped.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
this.serverDescription.tags.wrapped.getClass().getName() != this.lock.getClass().getName()
this.serverDescription.tags.wrapped.getClass().getName() != this.condition.getClass().getName()
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() != this.serverDescription.version.versionList.getClass().getName()
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() != this.lock.getClass().getName()
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() != this.condition.getClass().getName()
this.serverDescription.version.versionList.getClass().getName() != this.lock.getClass().getName()
this.serverDescription.version.versionList.getClass().getName() != this.condition.getClass().getName()
this.lock.getClass().getName() != this.condition.getClass().getName()
===========================================================================
com.mongodb.ServerMonitor.ServerMonitor(com.mongodb.ServerAddress, com.mongodb.ChangeListener, com.mongodb.SocketSettings, com.mongodb.ServerSettings, java.lang.String, com.mongodb.Mongo):::ENTER
socketSettings == settings.heartbeatSocketSettings
socketSettings.connectTimeoutMS == socketSettings.readTimeoutMS
socketSettings.connectTimeoutMS == settings.heartbeatSocketSettings.connectTimeoutMS
socketSettings.connectTimeoutMS == settings.heartbeatSocketSettings.readTimeoutMS
socketSettings.connectTimeoutMS == mongo._options.heartbeatConnectTimeoutMS
socketSettings.connectTimeoutMS == mongo._options.heartbeatReadTimeoutMS
socketSettings.socketFactory == settings.heartbeatSocketSettings.socketFactory
socketSettings.socketFactory == mongo._options.socketFactory
socketSettings.socketFactory.getClass().getName() == settings.heartbeatSocketSettings.socketFactory.getClass().getName()
socketSettings.socketFactory.getClass().getName() == mongo._options.socketFactory.getClass().getName()
settings.heartbeatFrequencyMS == mongo._options.heartbeatFrequencyMS
settings.heartbeatConnectRetryFrequencyMS == mongo._options.connectionsPerHost
settings.heartbeatConnectRetryFrequencyMS == mongo._options.heartbeatConnectRetryFrequencyMS
mongo == mongo._connector._mongo
mongo._options.fsync == mongo._options.j
mongo._concern == com.mongodb.WriteConcern.NORMAL
mongo._readPref == com.mongodb.ReadPreference.PRIMARY
mongo._readPref.getClass().getName() == com.mongodb.ReadPreference.PRIMARY.getClass().getName()
com.mongodb.ReadPreference.PRIMARY == com.mongodb.ReadPreference._PRIMARY
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference._PRIMARY.getClass().getName()
com.mongodb.ReadPreference.SECONDARY == com.mongodb.ReadPreference._SECONDARY_PREFERRED
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName()
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
serverStateListener.getClass().getName() == com.mongodb.DefaultServer$DefaultServerStateListener.class
socketSettings.connectTimeoutMS == 20000
socketSettings.socketFactory has only one value
socketSettings.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
settings.heartbeatFrequencyMS == 5000
settings.heartbeatConnectRetryFrequencyMS == 10
clusterId.toString one of { "1", "2" }
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
mongo._options.description == null
mongo._options.threadsAllowedToBlockForConnectionMultiplier == 5
mongo._options.maxWaitTime == 120000
mongo._options.connectTimeout == 10000
mongo._options.socketTimeout == 0
mongo._options.socketKeepAlive == false
mongo._options.autoConnectRetry == false
mongo._options.maxAutoConnectRetryTime == 0
mongo._options.slaveOk == false
mongo._options.readPreference == null
mongo._options.dbDecoderFactory has only one value
mongo._options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
mongo._options.dbEncoderFactory has only one value
mongo._options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
mongo._options.safe == false
mongo._options.w == 0
mongo._options.wtimeout == 0
mongo._options.fsync == false
mongo._options.cursorFinalizerEnabled == true
mongo._options.writeConcern == null
mongo._options.alwaysUseMBeans == false
mongo._options.minConnectionsPerHost == 0
mongo._options.maxConnectionIdleTime == 0
mongo._options.maxConnectionLifeTime == 0
mongo._options.acceptableLatencyDifferenceMS == 15
mongo._options.heartbeatThreadCount == 0
mongo._options.requiredReplicaSetName == null
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID has only one value
mongo._connector._closed == false
mongo._connector.cluster == null
mongo._connector.connectionMode has only one value
mongo._connector.type has only one value
mongo._connector.mongosHAServerSelector == null
mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
mongo._concern._w has only one value
mongo._concern._w.getClass().getName() == java.lang.Integer.class
mongo._concern._wtimeout == 0
mongo._concern._fsync == false
mongo._concern._j == false
mongo._concern._continueOnError == false
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
mongo._netOptions._parent == null
mongo._netOptions._options == 0
mongo._netOptions._hasOptions == false
mongo._cleaner == null
mongo._authority.type has only one value
mongo._authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
mongo._authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
mongo._authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
mongo._bufferPool._max == 1000
mongo._bufferPool._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
size(mongo._authority.serverAddresses[]) == 1
===========================================================================
com.mongodb.ServerMonitor.ServerMonitor(com.mongodb.ServerAddress, com.mongodb.ChangeListener, com.mongodb.SocketSettings, com.mongodb.ServerSettings, java.lang.String, com.mongodb.Mongo):::EXIT
this.serverAddress == orig(serverAddress)
this.serverAddress._host == serverAddress._host
this.serverAddress._port == serverAddress._port
this.serverStateListener == orig(serverStateListener)
this.serverStateListener.getClass().getName() == orig(serverStateListener.getClass().getName())
this.socketSettings == settings.heartbeatSocketSettings
this.socketSettings == orig(socketSettings)
this.socketSettings == orig(settings.heartbeatSocketSettings)
this.socketSettings.connectTimeoutMS == socketSettings.connectTimeoutMS
this.socketSettings.readTimeoutMS == socketSettings.connectTimeoutMS
this.socketSettings.socketFactory == socketSettings.socketFactory
this.socketSettings.socketFactory.getClass().getName() == socketSettings.socketFactory.getClass().getName()
this.settings == orig(settings)
this.settings.heartbeatFrequencyMS == settings.heartbeatFrequencyMS
this.settings.heartbeatConnectRetryFrequencyMS == settings.heartbeatConnectRetryFrequencyMS
this.settings.heartbeatSocketSettings.connectTimeoutMS == socketSettings.connectTimeoutMS
this.settings.heartbeatSocketSettings.readTimeoutMS == socketSettings.connectTimeoutMS
this.settings.heartbeatSocketSettings.socketFactory == socketSettings.socketFactory
this.settings.heartbeatSocketSettings.socketFactory.getClass().getName() == socketSettings.socketFactory.getClass().getName()
this.mongo == mongo._connector._mongo
this.mongo == orig(mongo)
this.mongo == orig(mongo._connector._mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this.mongo._options == mongo._options
this.mongo._options.connectionsPerHost == settings.heartbeatConnectRetryFrequencyMS
this.mongo._options.threadsAllowedToBlockForConnectionMultiplier == mongo._options.threadsAllowedToBlockForConnectionMultiplier
this.mongo._options.maxWaitTime == mongo._options.maxWaitTime
this.mongo._options.connectTimeout == mongo._options.connectTimeout
this.mongo._options.socketTimeout == mongo._options.socketTimeout
this.mongo._options.socketKeepAlive == mongo._options.socketKeepAlive
this.mongo._options.autoConnectRetry == mongo._options.autoConnectRetry
this.mongo._options.maxAutoConnectRetryTime == mongo._options.maxAutoConnectRetryTime
this.mongo._options.slaveOk == mongo._options.slaveOk
this.mongo._options.dbDecoderFactory == mongo._options.dbDecoderFactory
this.mongo._options.dbDecoderFactory.getClass().getName() == mongo._options.dbDecoderFactory.getClass().getName()
this.mongo._options.dbEncoderFactory == mongo._options.dbEncoderFactory
this.mongo._options.dbEncoderFactory.getClass().getName() == mongo._options.dbEncoderFactory.getClass().getName()
this.mongo._options.safe == mongo._options.safe
this.mongo._options.w == mongo._options.w
this.mongo._options.wtimeout == mongo._options.wtimeout
this.mongo._options.fsync == mongo._options.fsync
this.mongo._options.j == mongo._options.fsync
this.mongo._options.socketFactory == socketSettings.socketFactory
this.mongo._options.socketFactory.getClass().getName() == socketSettings.socketFactory.getClass().getName()
this.mongo._options.cursorFinalizerEnabled == mongo._options.cursorFinalizerEnabled
this.mongo._options.alwaysUseMBeans == mongo._options.alwaysUseMBeans
this.mongo._options.minConnectionsPerHost == mongo._options.minConnectionsPerHost
this.mongo._options.maxConnectionIdleTime == mongo._options.maxConnectionIdleTime
this.mongo._options.maxConnectionLifeTime == mongo._options.maxConnectionLifeTime
this.mongo._options.heartbeatFrequencyMS == settings.heartbeatFrequencyMS
this.mongo._options.heartbeatConnectRetryFrequencyMS == settings.heartbeatConnectRetryFrequencyMS
this.mongo._options.heartbeatConnectTimeoutMS == socketSettings.connectTimeoutMS
this.mongo._options.heartbeatReadTimeoutMS == socketSettings.connectTimeoutMS
this.mongo._options.acceptableLatencyDifferenceMS == mongo._options.acceptableLatencyDifferenceMS
this.mongo._options.heartbeatThreadCount == mongo._options.heartbeatThreadCount
this.mongo._connector == mongo._connector
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
this.mongo._connector._closed == mongo._connector._closed
this.mongo._connector._myPort == mongo._connector._myPort
this.mongo._connector.connectionMode == mongo._connector.connectionMode
this.mongo._connector.type == mongo._connector.type
this.mongo._dbs == mongo._dbs
this.mongo._dbs.getClass().getName() == mongo._dbs.getClass().getName()
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == mongo._concern
com.mongodb.WriteConcern.NORMAL == orig(mongo._concern)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this.mongo._concern._w == mongo._concern._w
this.mongo._concern._w.getClass().getName() == mongo._concern._w.getClass().getName()
this.mongo._concern._wtimeout == mongo._concern._wtimeout
this.mongo._concern._fsync == mongo._concern._fsync
this.mongo._concern._j == mongo._concern._j
this.mongo._concern._continueOnError == mongo._concern._continueOnError
com.mongodb.ReadPreference.PRIMARY == mongo._readPref
com.mongodb.ReadPreference.PRIMARY == orig(mongo._readPref)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == mongo._readPref.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(mongo._readPref.getClass().getName())
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this.mongo._netOptions == mongo._netOptions
this.mongo._netOptions._options == mongo._netOptions._options
this.mongo._netOptions._hasOptions == mongo._netOptions._hasOptions
this.mongo._authority == mongo._authority
this.mongo._authority.type == mongo._authority.type
this.mongo._authority.serverAddresses == mongo._authority.serverAddresses
this.mongo._authority.serverAddresses.getClass().getName() == mongo._authority.serverAddresses.getClass().getName()
this.mongo._authority.credentialsStore == mongo._authority.credentialsStore
this.mongo._bufferPool == mongo._bufferPool
this.mongo._bufferPool.getClass().getName() == mongo._bufferPool.getClass().getName()
this.mongo._bufferPool._max == mongo._bufferPool._max
this.mongo._bufferPool._stored == mongo._bufferPool._stored
this.mongo._bufferPool._stored.getClass().getName() == mongo._bufferPool._stored.getClass().getName()
this.serverDescription.address._host == serverAddress._host
this.serverDescription.address._port == serverAddress._port
serverAddress._host == orig(serverAddress._host)
serverAddress._host.toString == orig(serverAddress._host.toString)
serverAddress._port == orig(serverAddress._port)
socketSettings.connectTimeoutMS == socketSettings.readTimeoutMS
socketSettings.connectTimeoutMS == settings.heartbeatSocketSettings.connectTimeoutMS
socketSettings.connectTimeoutMS == settings.heartbeatSocketSettings.readTimeoutMS
socketSettings.connectTimeoutMS == mongo._options.heartbeatConnectTimeoutMS
socketSettings.connectTimeoutMS == mongo._options.heartbeatReadTimeoutMS
socketSettings.connectTimeoutMS == orig(socketSettings.connectTimeoutMS)
socketSettings.connectTimeoutMS == orig(socketSettings.readTimeoutMS)
socketSettings.connectTimeoutMS == orig(settings.heartbeatSocketSettings.connectTimeoutMS)
socketSettings.connectTimeoutMS == orig(settings.heartbeatSocketSettings.readTimeoutMS)
socketSettings.connectTimeoutMS == orig(mongo._options.heartbeatConnectTimeoutMS)
socketSettings.connectTimeoutMS == orig(mongo._options.heartbeatReadTimeoutMS)
socketSettings.socketFactory == settings.heartbeatSocketSettings.socketFactory
socketSettings.socketFactory == mongo._options.socketFactory
socketSettings.socketFactory == orig(socketSettings.socketFactory)
socketSettings.socketFactory == orig(settings.heartbeatSocketSettings.socketFactory)
socketSettings.socketFactory == orig(mongo._options.socketFactory)
socketSettings.socketFactory.getClass().getName() == settings.heartbeatSocketSettings.socketFactory.getClass().getName()
socketSettings.socketFactory.getClass().getName() == mongo._options.socketFactory.getClass().getName()
socketSettings.socketFactory.getClass().getName() == orig(socketSettings.socketFactory.getClass().getName())
socketSettings.socketFactory.getClass().getName() == orig(settings.heartbeatSocketSettings.socketFactory.getClass().getName())
socketSettings.socketFactory.getClass().getName() == orig(mongo._options.socketFactory.getClass().getName())
settings.heartbeatFrequencyMS == mongo._options.heartbeatFrequencyMS
settings.heartbeatFrequencyMS == orig(settings.heartbeatFrequencyMS)
settings.heartbeatFrequencyMS == orig(mongo._options.heartbeatFrequencyMS)
settings.heartbeatConnectRetryFrequencyMS == mongo._options.connectionsPerHost
settings.heartbeatConnectRetryFrequencyMS == mongo._options.heartbeatConnectRetryFrequencyMS
settings.heartbeatConnectRetryFrequencyMS == orig(settings.heartbeatConnectRetryFrequencyMS)
settings.heartbeatConnectRetryFrequencyMS == orig(mongo._options.connectionsPerHost)
settings.heartbeatConnectRetryFrequencyMS == orig(mongo._options.heartbeatConnectRetryFrequencyMS)
clusterId.toString == orig(clusterId.toString)
mongo._options == orig(mongo._options)
mongo._options.description == orig(mongo._options.description)
mongo._options.threadsAllowedToBlockForConnectionMultiplier == orig(mongo._options.threadsAllowedToBlockForConnectionMultiplier)
mongo._options.maxWaitTime == orig(mongo._options.maxWaitTime)
mongo._options.connectTimeout == orig(mongo._options.connectTimeout)
mongo._options.socketTimeout == orig(mongo._options.socketTimeout)
mongo._options.socketKeepAlive == orig(mongo._options.socketKeepAlive)
mongo._options.autoConnectRetry == orig(mongo._options.autoConnectRetry)
mongo._options.maxAutoConnectRetryTime == orig(mongo._options.maxAutoConnectRetryTime)
mongo._options.slaveOk == orig(mongo._options.slaveOk)
mongo._options.readPreference == orig(mongo._options.readPreference)
mongo._options.dbDecoderFactory == orig(mongo._options.dbDecoderFactory)
mongo._options.dbDecoderFactory.getClass().getName() == orig(mongo._options.dbDecoderFactory.getClass().getName())
mongo._options.dbEncoderFactory == orig(mongo._options.dbEncoderFactory)
mongo._options.dbEncoderFactory.getClass().getName() == orig(mongo._options.dbEncoderFactory.getClass().getName())
mongo._options.safe == orig(mongo._options.safe)
mongo._options.w == orig(mongo._options.w)
mongo._options.wtimeout == orig(mongo._options.wtimeout)
mongo._options.fsync == mongo._options.j
mongo._options.fsync == orig(mongo._options.fsync)
mongo._options.fsync == orig(mongo._options.j)
mongo._options.cursorFinalizerEnabled == orig(mongo._options.cursorFinalizerEnabled)
mongo._options.writeConcern == orig(mongo._options.writeConcern)
mongo._options.alwaysUseMBeans == orig(mongo._options.alwaysUseMBeans)
mongo._options.minConnectionsPerHost == orig(mongo._options.minConnectionsPerHost)
mongo._options.maxConnectionIdleTime == orig(mongo._options.maxConnectionIdleTime)
mongo._options.maxConnectionLifeTime == orig(mongo._options.maxConnectionLifeTime)
mongo._options.acceptableLatencyDifferenceMS == orig(mongo._options.acceptableLatencyDifferenceMS)
mongo._options.heartbeatThreadCount == orig(mongo._options.heartbeatThreadCount)
mongo._options.requiredReplicaSetName == orig(mongo._options.requiredReplicaSetName)
mongo._connector == orig(mongo._connector)
mongo._connector._closed == orig(mongo._connector._closed)
mongo._connector.cluster == orig(mongo._connector.cluster)
mongo._connector._myPort == orig(mongo._connector._myPort)
mongo._connector.connectionMode == orig(mongo._connector.connectionMode)
mongo._connector.type == orig(mongo._connector.type)
mongo._connector.mongosHAServerSelector == orig(mongo._connector.mongosHAServerSelector)
mongo._dbs == orig(mongo._dbs)
mongo._dbs.getClass().getName() == orig(mongo._dbs.getClass().getName())
mongo._concern._w == orig(mongo._concern._w)
mongo._concern._w.getClass().getName() == orig(mongo._concern._w.getClass().getName())
mongo._concern._wtimeout == orig(mongo._concern._wtimeout)
mongo._concern._fsync == orig(mongo._concern._fsync)
mongo._concern._j == orig(mongo._concern._j)
mongo._concern._continueOnError == orig(mongo._concern._continueOnError)
mongo._netOptions == orig(mongo._netOptions)
mongo._netOptions._parent == orig(mongo._netOptions._parent)
mongo._netOptions._options == orig(mongo._netOptions._options)
mongo._netOptions._hasOptions == orig(mongo._netOptions._hasOptions)
mongo._cleaner == orig(mongo._cleaner)
mongo._authority == orig(mongo._authority)
mongo._authority.type == orig(mongo._authority.type)
mongo._authority.serverAddresses == orig(mongo._authority.serverAddresses)
mongo._authority.serverAddresses[] == orig(mongo._authority.serverAddresses[])
mongo._authority.serverAddresses.getClass().getName() == orig(mongo._authority.serverAddresses.getClass().getName())
mongo._authority.credentialsStore == orig(mongo._authority.credentialsStore)
mongo._bufferPool == orig(mongo._bufferPool)
mongo._bufferPool.getClass().getName() == orig(mongo._bufferPool.getClass().getName())
mongo._bufferPool._max == orig(mongo._bufferPool._max)
mongo._bufferPool._stored == orig(mongo._bufferPool._stored)
mongo._bufferPool._stored.getClass().getName() == orig(mongo._bufferPool._stored.getClass().getName())
this.mongo._connector.cluster == null
this.mongo._cleaner == null
serverAddress._host has only one value
serverAddress._host.toString == "localhost"
serverAddress._port == 27017
socketSettings.connectTimeoutMS == 20000
socketSettings.socketFactory has only one value
socketSettings.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
settings.heartbeatFrequencyMS == 5000
settings.heartbeatConnectRetryFrequencyMS == 10
clusterId.toString one of { "1", "2" }
mongo._options.description == null
mongo._options.threadsAllowedToBlockForConnectionMultiplier == 5
mongo._options.maxWaitTime == 120000
mongo._options.connectTimeout == 10000
mongo._options.socketTimeout == 0
mongo._options.socketKeepAlive == false
mongo._options.autoConnectRetry == false
mongo._options.maxAutoConnectRetryTime == 0
mongo._options.slaveOk == false
mongo._options.readPreference == null
mongo._options.dbDecoderFactory has only one value
mongo._options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
mongo._options.dbEncoderFactory has only one value
mongo._options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
mongo._options.safe == false
mongo._options.w == 0
mongo._options.wtimeout == 0
mongo._options.fsync == false
mongo._options.cursorFinalizerEnabled == true
mongo._options.writeConcern == null
mongo._options.alwaysUseMBeans == false
mongo._options.minConnectionsPerHost == 0
mongo._options.maxConnectionIdleTime == 0
mongo._options.maxConnectionLifeTime == 0
mongo._options.acceptableLatencyDifferenceMS == 15
mongo._options.heartbeatThreadCount == 0
mongo._options.requiredReplicaSetName == null
mongo._connector._closed == false
mongo._connector.cluster == null
mongo._connector.connectionMode has only one value
mongo._connector.type has only one value
mongo._connector.mongosHAServerSelector == null
mongo._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
mongo._concern._w has only one value
mongo._concern._w.getClass().getName() == java.lang.Integer.class
mongo._concern._wtimeout == 0
mongo._concern._fsync == false
mongo._concern._j == false
mongo._concern._continueOnError == false
mongo._netOptions._parent == null
mongo._netOptions._options == 0
mongo._netOptions._hasOptions == false
mongo._cleaner == null
mongo._authority.type has only one value
mongo._authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
mongo._authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
mongo._authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
mongo._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
mongo._bufferPool._max == 1000
mongo._bufferPool._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
size(mongo._authority.serverAddresses[]) == 1
mongo._concern._w.getClass().getName() in this.serverDescription.version.versionList[].getClass().getName()
===========================================================================
com.mongodb.ServerMonitor.connect():::ENTER
this has only one value
this.serverAddress has only one value
this.serverStateListener has only one value
this.socketSettings has only one value
this.settings has only one value
this.mongo has only one value
this.mongo._options has only one value
this.mongo._connector has only one value
this.mongo._connector.cluster has only one value
this.mongo._connector.cluster != null
this.mongo._connector._myPort has only one value
this.mongo._dbs has only one value
this.mongo._netOptions has only one value
this.mongo._cleaner has only one value
this.mongo._cleaner != null
com.mongodb.Mongo.this has only one value
this.mongo._authority has only one value
this.mongo._authority.serverAddresses has only one value
this.mongo._authority.serverAddresses[] contains no nulls and has only one value, of length 1
this.mongo._authority.serverAddresses[] elements has only one value
this.mongo._authority.credentialsStore has only one value
this.mongo._bufferPool has only one value
this.mongo._bufferPool._stored has only one value
this.serverDescription != null
this.monitorThread has only one value
this.monitorThread != null
this.lock has only one value
this.condition has only one value
===========================================================================
com.mongodb.ServerMonitor.connect():::EXIT
com.mongodb.ServerMonitor.LOGGER == orig(com.mongodb.ServerMonitor.LOGGER)
this.serverAddress == orig(this.serverAddress)
this.serverAddress == orig(this.serverDescription.address)
this.serverAddress._host == orig(this.serverAddress._host)
this.serverAddress._host == orig(this.serverDescription.address._host)
this.serverAddress._host.toString == orig(this.serverAddress._host.toString)
this.serverAddress._port == orig(this.serverAddress._port)
this.serverAddress._port == orig(this.serverDescription.address._port)
this.serverStateListener == orig(this.serverStateListener)
this.serverStateListener.getClass().getName() == orig(this.serverStateListener.getClass().getName())
this.socketSettings == orig(this.socketSettings)
this.socketSettings == orig(this.settings.heartbeatSocketSettings)
this.socketSettings.connectTimeoutMS == orig(this.socketSettings.connectTimeoutMS)
this.socketSettings.connectTimeoutMS == orig(this.socketSettings.readTimeoutMS)
this.socketSettings.connectTimeoutMS == orig(this.settings.heartbeatSocketSettings.connectTimeoutMS)
this.socketSettings.connectTimeoutMS == orig(this.settings.heartbeatSocketSettings.readTimeoutMS)
this.socketSettings.connectTimeoutMS == orig(this.mongo._options.heartbeatConnectTimeoutMS)
this.socketSettings.connectTimeoutMS == orig(this.mongo._options.heartbeatReadTimeoutMS)
this.socketSettings.socketFactory == orig(this.socketSettings.socketFactory)
this.socketSettings.socketFactory == orig(this.settings.heartbeatSocketSettings.socketFactory)
this.socketSettings.socketFactory == orig(this.mongo._options.socketFactory)
this.socketSettings.socketFactory.getClass().getName() == orig(this.socketSettings.socketFactory.getClass().getName())
this.socketSettings.socketFactory.getClass().getName() == orig(this.settings.heartbeatSocketSettings.socketFactory.getClass().getName())
this.socketSettings.socketFactory.getClass().getName() == orig(this.mongo._options.socketFactory.getClass().getName())
this.settings == orig(this.settings)
this.settings.heartbeatFrequencyMS == orig(this.settings.heartbeatFrequencyMS)
this.settings.heartbeatFrequencyMS == orig(this.mongo._options.heartbeatFrequencyMS)
this.settings.heartbeatConnectRetryFrequencyMS == orig(this.settings.heartbeatConnectRetryFrequencyMS)
this.settings.heartbeatConnectRetryFrequencyMS == orig(this.mongo._options.connectionsPerHost)
this.settings.heartbeatConnectRetryFrequencyMS == orig(this.mongo._options.heartbeatConnectRetryFrequencyMS)
this.mongo == orig(this.mongo)
this.mongo == orig(this.mongo._connector._mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this.mongo._options == orig(this.mongo._options)
this.mongo._options.description == orig(this.mongo._options.description)
this.mongo._options.threadsAllowedToBlockForConnectionMultiplier == orig(this.mongo._options.threadsAllowedToBlockForConnectionMultiplier)
this.mongo._options.maxWaitTime == orig(this.mongo._options.maxWaitTime)
this.mongo._options.connectTimeout == orig(this.mongo._options.connectTimeout)
this.mongo._options.socketTimeout == orig(this.mongo._options.socketTimeout)
this.mongo._options.socketKeepAlive == orig(this.mongo._options.socketKeepAlive)
this.mongo._options.autoConnectRetry == orig(this.mongo._options.autoConnectRetry)
this.mongo._options.maxAutoConnectRetryTime == orig(this.mongo._options.maxAutoConnectRetryTime)
this.mongo._options.slaveOk == orig(this.mongo._options.slaveOk)
this.mongo._options.readPreference == orig(this.mongo._options.readPreference)
this.mongo._options.dbDecoderFactory == orig(this.mongo._options.dbDecoderFactory)
this.mongo._options.dbDecoderFactory.getClass().getName() == orig(this.mongo._options.dbDecoderFactory.getClass().getName())
this.mongo._options.dbEncoderFactory == orig(this.mongo._options.dbEncoderFactory)
this.mongo._options.dbEncoderFactory.getClass().getName() == orig(this.mongo._options.dbEncoderFactory.getClass().getName())
this.mongo._options.safe == orig(this.mongo._options.safe)
this.mongo._options.w == orig(this.mongo._options.w)
this.mongo._options.wtimeout == orig(this.mongo._options.wtimeout)
this.mongo._options.fsync == orig(this.mongo._options.fsync)
this.mongo._options.fsync == orig(this.mongo._options.j)
this.mongo._options.cursorFinalizerEnabled == orig(this.mongo._options.cursorFinalizerEnabled)
this.mongo._options.writeConcern == orig(this.mongo._options.writeConcern)
this.mongo._options.alwaysUseMBeans == orig(this.mongo._options.alwaysUseMBeans)
this.mongo._options.minConnectionsPerHost == orig(this.mongo._options.minConnectionsPerHost)
this.mongo._options.maxConnectionIdleTime == orig(this.mongo._options.maxConnectionIdleTime)
this.mongo._options.maxConnectionLifeTime == orig(this.mongo._options.maxConnectionLifeTime)
this.mongo._options.acceptableLatencyDifferenceMS == orig(this.mongo._options.acceptableLatencyDifferenceMS)
this.mongo._options.heartbeatThreadCount == orig(this.mongo._options.heartbeatThreadCount)
this.mongo._options.requiredReplicaSetName == orig(this.mongo._options.requiredReplicaSetName)
this.mongo._connector == orig(this.mongo._connector)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
this.mongo._connector._closed == orig(this.mongo._connector._closed)
this.mongo._connector.cluster == orig(this.mongo._connector.cluster)
this.mongo._connector.cluster.getClass().getName() == orig(this.mongo._connector.cluster.getClass().getName())
this.mongo._connector._myPort == orig(this.mongo._connector._myPort)
this.mongo._connector.connectionMode == orig(this.mongo._connector.connectionMode)
this.mongo._connector.type == orig(this.mongo._connector.type)
this.mongo._connector.mongosHAServerSelector == orig(this.mongo._connector.mongosHAServerSelector)
this.mongo._dbs == orig(this.mongo._dbs)
this.mongo._dbs.getClass().getName() == orig(this.mongo._dbs.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(this.mongo._concern)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this.mongo._concern._w == orig(this.mongo._concern._w)
this.mongo._concern._w.getClass().getName() == orig(this.mongo._concern._w.getClass().getName())
this.mongo._concern._wtimeout == orig(this.mongo._concern._wtimeout)
this.mongo._concern._fsync == orig(this.mongo._concern._fsync)
this.mongo._concern._j == orig(this.mongo._concern._j)
this.mongo._concern._continueOnError == orig(this.mongo._concern._continueOnError)
com.mongodb.ReadPreference.PRIMARY == orig(this.mongo._readPref)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(this.mongo._readPref.getClass().getName())
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this.mongo._netOptions == orig(this.mongo._netOptions)
this.mongo._netOptions._parent == orig(this.mongo._netOptions._parent)
this.mongo._netOptions._options == orig(this.mongo._netOptions._options)
this.mongo._netOptions._hasOptions == orig(this.mongo._netOptions._hasOptions)
this.mongo._cleaner == orig(this.mongo._cleaner)
com.mongodb.Mongo.this == orig(com.mongodb.Mongo.this)
this.mongo._authority == orig(this.mongo._authority)
this.mongo._authority.type == orig(this.mongo._authority.type)
this.mongo._authority.serverAddresses == orig(this.mongo._authority.serverAddresses)
this.mongo._authority.serverAddresses[] == orig(this.mongo._authority.serverAddresses[])
this.mongo._authority.serverAddresses.getClass().getName() == orig(this.mongo._authority.serverAddresses.getClass().getName())
this.mongo._authority.credentialsStore == orig(this.mongo._authority.credentialsStore)
this.mongo._bufferPool == orig(this.mongo._bufferPool)
this.mongo._bufferPool.getClass().getName() == orig(this.mongo._bufferPool.getClass().getName())
this.mongo._bufferPool._max == orig(this.mongo._bufferPool._max)
this.mongo._bufferPool._stored == orig(this.mongo._bufferPool._stored)
this.mongo._bufferPool._stored.getClass().getName() == orig(this.mongo._bufferPool._stored.getClass().getName())
this.count == orig(this.count)
this.elapsedNanosSum == orig(this.elapsedNanosSum)
this.serverDescription == orig(this.serverDescription)
this.serverDescription.address._host.toString == orig(this.serverDescription.address._host.toString)
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(this.serverDescription.type)
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == orig(this.serverDescription.type.getClass().getName())
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
this.serverDescription.hosts == orig(this.serverDescription.hosts)
this.serverDescription.hosts == orig(this.serverDescription.passives)
this.serverDescription.hosts == orig(this.serverDescription.arbiters)
this.serverDescription.hosts.getClass().getName() == orig(this.serverDescription.hosts.getClass().getName())
this.serverDescription.hosts.getClass().getName() == orig(this.serverDescription.passives.getClass().getName())
this.serverDescription.hosts.getClass().getName() == orig(this.serverDescription.arbiters.getClass().getName())
this.serverDescription.primary == orig(this.serverDescription.primary)
this.serverDescription.maxDocumentSize == orig(this.serverDescription.maxDocumentSize)
this.serverDescription.maxWriteBatchSize == orig(this.serverDescription.maxWriteBatchSize)
this.serverDescription.maxMessageSize == orig(this.serverDescription.maxMessageSize)
this.serverDescription.tags == orig(this.serverDescription.tags)
this.serverDescription.tags.frozen == orig(this.serverDescription.tags.frozen)
this.serverDescription.tags.wrapped == orig(this.serverDescription.tags.wrapped)
this.serverDescription.tags.wrapped.getClass().getName() == orig(this.serverDescription.tags.wrapped.getClass().getName())
this.serverDescription.setName == orig(this.serverDescription.setName)
this.serverDescription.averageLatencyNanos == orig(this.serverDescription.averageLatencyNanos)
this.serverDescription.ok == orig(this.serverDescription.ok)
com.mongodb.ServerConnectionState.Connecting == orig(this.serverDescription.state)
com.mongodb.ServerConnectionState.Connecting == orig(com.mongodb.ServerConnectionState.Connecting)
com.mongodb.ServerConnectionState.Connected == orig(com.mongodb.ServerConnectionState.Connected)
com.mongodb.ServerConnectionState.$VALUES == orig(com.mongodb.ServerConnectionState.$VALUES)
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == orig(com.mongodb.ServerConnectionState.$VALUES.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES[] == orig(com.mongodb.ServerConnectionState.$VALUES[])
this.serverDescription.version == orig(this.serverDescription.version)
this.serverDescription.version.versionList == orig(this.serverDescription.version.versionList)
this.serverDescription.version.versionList[] == orig(this.serverDescription.version.versionList[])
this.serverDescription.version.versionList.getClass().getName() == orig(this.serverDescription.version.versionList.getClass().getName())
this.serverDescription.minWireVersion == orig(this.serverDescription.minWireVersion)
this.serverDescription.maxWireVersion == orig(this.serverDescription.maxWireVersion)
this.isClosed == orig(this.isClosed)
this.connection == orig(this.connection)
com.mongodb.DBPort._rootLogger == orig(com.mongodb.DBPort._rootLogger)
com.mongodb.PooledConnectionProvider.LOGGER == orig(com.mongodb.PooledConnectionProvider.LOGGER)
this.monitorThread == orig(this.monitorThread)
this.lock == orig(this.lock)
this.lock.getClass().getName() == orig(this.lock.getClass().getName())
this.condition == orig(this.condition)
this.condition.getClass().getName() == orig(this.condition.getClass().getName())
this.serverAddress has only one value
this.serverStateListener has only one value
this.socketSettings has only one value
this.settings has only one value
this.mongo has only one value
this.mongo._options has only one value
this.mongo._connector has only one value
this.mongo._connector.cluster has only one value
this.mongo._connector.cluster != null
this.mongo._connector._myPort has only one value
this.mongo._dbs has only one value
this.mongo._netOptions has only one value
this.mongo._cleaner has only one value
this.mongo._cleaner != null
com.mongodb.Mongo.this has only one value
this.mongo._authority has only one value
this.mongo._authority.serverAddresses has only one value
this.mongo._authority.serverAddresses[] contains no nulls and has only one value, of length 1
this.mongo._authority.serverAddresses[] elements has only one value
this.mongo._authority.credentialsStore has only one value
this.mongo._bufferPool has only one value
this.mongo._bufferPool._stored has only one value
this.serverDescription != null
this.monitorThread has only one value
this.monitorThread != null
this.lock has only one value
this.condition has only one value
===========================================================================
com.mongodb.ServerMonitor.getConnectingServerDescription():::ENTER
===========================================================================
com.mongodb.ServerMonitor.getConnectingServerDescription():::EXIT
com.mongodb.ServerMonitor.LOGGER == orig(com.mongodb.ServerMonitor.LOGGER)
this.serverAddress == return.address
this.serverAddress == orig(this.serverAddress)
this.serverAddress._host == return.address._host
this.serverAddress._host == orig(this.serverAddress._host)
this.serverAddress._host.toString == orig(this.serverAddress._host.toString)
this.serverAddress._port == return.address._port
this.serverAddress._port == orig(this.serverAddress._port)
this.serverStateListener == orig(this.serverStateListener)
this.serverStateListener.getClass().getName() == orig(this.serverStateListener.getClass().getName())
this.socketSettings == orig(this.socketSettings)
this.socketSettings == orig(this.settings.heartbeatSocketSettings)
this.socketSettings.connectTimeoutMS == orig(this.socketSettings.connectTimeoutMS)
this.socketSettings.connectTimeoutMS == orig(this.socketSettings.readTimeoutMS)
this.socketSettings.connectTimeoutMS == orig(this.settings.heartbeatSocketSettings.connectTimeoutMS)
this.socketSettings.connectTimeoutMS == orig(this.settings.heartbeatSocketSettings.readTimeoutMS)
this.socketSettings.connectTimeoutMS == orig(this.mongo._options.heartbeatConnectTimeoutMS)
this.socketSettings.connectTimeoutMS == orig(this.mongo._options.heartbeatReadTimeoutMS)
this.socketSettings.socketFactory == orig(this.socketSettings.socketFactory)
this.socketSettings.socketFactory == orig(this.settings.heartbeatSocketSettings.socketFactory)
this.socketSettings.socketFactory == orig(this.mongo._options.socketFactory)
this.socketSettings.socketFactory.getClass().getName() == orig(this.socketSettings.socketFactory.getClass().getName())
this.socketSettings.socketFactory.getClass().getName() == orig(this.settings.heartbeatSocketSettings.socketFactory.getClass().getName())
this.socketSettings.socketFactory.getClass().getName() == orig(this.mongo._options.socketFactory.getClass().getName())
this.settings == orig(this.settings)
this.settings.heartbeatFrequencyMS == orig(this.settings.heartbeatFrequencyMS)
this.settings.heartbeatFrequencyMS == orig(this.mongo._options.heartbeatFrequencyMS)
this.settings.heartbeatConnectRetryFrequencyMS == orig(this.settings.heartbeatConnectRetryFrequencyMS)
this.settings.heartbeatConnectRetryFrequencyMS == orig(this.mongo._options.connectionsPerHost)
this.settings.heartbeatConnectRetryFrequencyMS == orig(this.mongo._options.heartbeatConnectRetryFrequencyMS)
this.mongo == orig(this.mongo)
this.mongo == orig(this.mongo._connector._mongo)
this.mongo == orig(com.mongodb.Mongo.this)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this.mongo._options == orig(this.mongo._options)
this.mongo._options.description == orig(this.mongo._options.description)
this.mongo._options.threadsAllowedToBlockForConnectionMultiplier == orig(this.mongo._options.threadsAllowedToBlockForConnectionMultiplier)
this.mongo._options.maxWaitTime == orig(this.mongo._options.maxWaitTime)
this.mongo._options.connectTimeout == orig(this.mongo._options.connectTimeout)
this.mongo._options.socketTimeout == orig(this.mongo._options.socketTimeout)
this.mongo._options.socketKeepAlive == orig(this.mongo._options.socketKeepAlive)
this.mongo._options.autoConnectRetry == orig(this.mongo._options.autoConnectRetry)
this.mongo._options.maxAutoConnectRetryTime == orig(this.mongo._options.maxAutoConnectRetryTime)
this.mongo._options.slaveOk == orig(this.mongo._options.slaveOk)
this.mongo._options.readPreference == orig(this.mongo._options.readPreference)
this.mongo._options.dbDecoderFactory == orig(this.mongo._options.dbDecoderFactory)
this.mongo._options.dbDecoderFactory.getClass().getName() == orig(this.mongo._options.dbDecoderFactory.getClass().getName())
this.mongo._options.dbEncoderFactory == orig(this.mongo._options.dbEncoderFactory)
this.mongo._options.dbEncoderFactory.getClass().getName() == orig(this.mongo._options.dbEncoderFactory.getClass().getName())
this.mongo._options.safe == orig(this.mongo._options.safe)
this.mongo._options.w == orig(this.mongo._options.w)
this.mongo._options.wtimeout == orig(this.mongo._options.wtimeout)
this.mongo._options.fsync == orig(this.mongo._options.fsync)
this.mongo._options.fsync == orig(this.mongo._options.j)
this.mongo._options.cursorFinalizerEnabled == orig(this.mongo._options.cursorFinalizerEnabled)
this.mongo._options.writeConcern == orig(this.mongo._options.writeConcern)
this.mongo._options.alwaysUseMBeans == orig(this.mongo._options.alwaysUseMBeans)
this.mongo._options.minConnectionsPerHost == orig(this.mongo._options.minConnectionsPerHost)
this.mongo._options.maxConnectionIdleTime == orig(this.mongo._options.maxConnectionIdleTime)
this.mongo._options.maxConnectionLifeTime == orig(this.mongo._options.maxConnectionLifeTime)
this.mongo._options.acceptableLatencyDifferenceMS == orig(this.mongo._options.acceptableLatencyDifferenceMS)
this.mongo._options.heartbeatThreadCount == orig(this.mongo._options.heartbeatThreadCount)
this.mongo._options.requiredReplicaSetName == orig(this.mongo._options.requiredReplicaSetName)
this.mongo._connector == orig(this.mongo._connector)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
this.mongo._connector._closed == orig(this.mongo._connector._closed)
this.mongo._connector.cluster == orig(this.mongo._connector.cluster)
this.mongo._connector.cluster.getClass().getName() == orig(this.mongo._connector.cluster.getClass().getName())
this.mongo._connector._myPort == orig(this.mongo._connector._myPort)
this.mongo._connector.connectionMode == orig(this.mongo._connector.connectionMode)
this.mongo._connector.type == orig(this.mongo._connector.type)
this.mongo._connector.mongosHAServerSelector == orig(this.mongo._connector.mongosHAServerSelector)
this.mongo._dbs == orig(this.mongo._dbs)
this.mongo._dbs.getClass().getName() == orig(this.mongo._dbs.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(this.mongo._concern)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this.mongo._concern._w == orig(this.mongo._concern._w)
this.mongo._concern._w.getClass().getName() == orig(this.mongo._concern._w.getClass().getName())
this.mongo._concern._wtimeout == orig(this.mongo._concern._wtimeout)
this.mongo._concern._fsync == orig(this.mongo._concern._fsync)
this.mongo._concern._j == orig(this.mongo._concern._j)
this.mongo._concern._continueOnError == orig(this.mongo._concern._continueOnError)
com.mongodb.ReadPreference.PRIMARY == orig(this.mongo._readPref)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(this.mongo._readPref.getClass().getName())
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this.mongo._netOptions == orig(this.mongo._netOptions)
this.mongo._netOptions._parent == orig(this.mongo._netOptions._parent)
this.mongo._netOptions._options == orig(this.mongo._netOptions._options)
this.mongo._netOptions._hasOptions == orig(this.mongo._netOptions._hasOptions)
com.mongodb.Mongo.this == orig(com.mongodb.Mongo.this)
this.mongo._authority == orig(this.mongo._authority)
this.mongo._authority.type == orig(this.mongo._authority.type)
this.mongo._authority.serverAddresses == orig(this.mongo._authority.serverAddresses)
this.mongo._authority.serverAddresses[] == orig(this.mongo._authority.serverAddresses[])
this.mongo._authority.serverAddresses.getClass().getName() == orig(this.mongo._authority.serverAddresses.getClass().getName())
this.mongo._authority.credentialsStore == orig(this.mongo._authority.credentialsStore)
this.mongo._bufferPool == orig(this.mongo._bufferPool)
this.mongo._bufferPool.getClass().getName() == orig(this.mongo._bufferPool.getClass().getName())
this.mongo._bufferPool._max == orig(this.mongo._bufferPool._max)
this.mongo._bufferPool._stored == orig(this.mongo._bufferPool._stored)
this.mongo._bufferPool._stored.getClass().getName() == orig(this.mongo._bufferPool._stored.getClass().getName())
this.count == orig(this.count)
this.elapsedNanosSum == orig(this.elapsedNanosSum)
this.serverDescription == orig(this.serverDescription)
this.serverDescription.address == orig(this.serverDescription.address)
this.serverDescription.address._host == orig(this.serverDescription.address._host)
this.serverDescription.address._host.toString == orig(this.serverDescription.address._host.toString)
this.serverDescription.address._port == orig(this.serverDescription.address._port)
this.serverDescription.type == orig(this.serverDescription.type)
this.serverDescription.type.getClass().getName() == orig(this.serverDescription.type.getClass().getName())
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == return.type.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
this.serverDescription.hosts == orig(this.serverDescription.hosts)
this.serverDescription.hosts == orig(this.serverDescription.passives)
this.serverDescription.hosts == orig(this.serverDescription.arbiters)
this.serverDescription.hosts.getClass().getName() == return.hosts.getClass().getName()
this.serverDescription.hosts.getClass().getName() == orig(this.serverDescription.hosts.getClass().getName())
this.serverDescription.hosts.getClass().getName() == orig(this.serverDescription.passives.getClass().getName())
this.serverDescription.hosts.getClass().getName() == orig(this.serverDescription.arbiters.getClass().getName())
this.serverDescription.primary == orig(this.serverDescription.primary)
this.serverDescription.maxDocumentSize == orig(this.serverDescription.maxDocumentSize)
this.serverDescription.maxWriteBatchSize == orig(this.serverDescription.maxWriteBatchSize)
this.serverDescription.maxMessageSize == orig(this.serverDescription.maxMessageSize)
this.serverDescription.tags == orig(this.serverDescription.tags)
this.serverDescription.tags.frozen == orig(this.serverDescription.tags.frozen)
this.serverDescription.tags.wrapped == orig(this.serverDescription.tags.wrapped)
this.serverDescription.tags.wrapped.getClass().getName() == return.tags.wrapped.getClass().getName()
this.serverDescription.tags.wrapped.getClass().getName() == orig(this.serverDescription.tags.wrapped.getClass().getName())
this.serverDescription.setName == orig(this.serverDescription.setName)
this.serverDescription.averageLatencyNanos == orig(this.serverDescription.averageLatencyNanos)
this.serverDescription.ok == orig(this.serverDescription.ok)
this.serverDescription.state == orig(this.serverDescription.state)
com.mongodb.ServerConnectionState.Connecting == orig(com.mongodb.ServerConnectionState.Connecting)
com.mongodb.ServerConnectionState.Connected == orig(com.mongodb.ServerConnectionState.Connected)
com.mongodb.ServerConnectionState.$VALUES == orig(com.mongodb.ServerConnectionState.$VALUES)
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == orig(com.mongodb.ServerConnectionState.$VALUES.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES[] == orig(com.mongodb.ServerConnectionState.$VALUES[])
this.serverDescription.version == orig(this.serverDescription.version)
this.serverDescription.version.versionList == orig(this.serverDescription.version.versionList)
this.serverDescription.version.versionList[] == orig(this.serverDescription.version.versionList[])
this.serverDescription.version.versionList.getClass().getName() == return.version.versionList.getClass().getName()
this.serverDescription.version.versionList.getClass().getName() == orig(this.serverDescription.version.versionList.getClass().getName())
this.serverDescription.minWireVersion == orig(this.serverDescription.minWireVersion)
this.serverDescription.maxWireVersion == orig(this.serverDescription.maxWireVersion)
this.isClosed == orig(this.isClosed)
this.connection == orig(this.connection)
com.mongodb.DBPort._rootLogger == orig(com.mongodb.DBPort._rootLogger)
com.mongodb.PooledConnectionProvider.LOGGER == orig(com.mongodb.PooledConnectionProvider.LOGGER)
this.monitorThread == orig(this.monitorThread)
this.lock == orig(this.lock)
this.lock.getClass().getName() == orig(this.lock.getClass().getName())
this.condition == orig(this.condition)
this.condition.getClass().getName() == orig(this.condition.getClass().getName())
return.hosts == return.passives
return.hosts == return.arbiters
return.hosts.getClass().getName() == return.passives.getClass().getName()
return.hosts.getClass().getName() == return.arbiters.getClass().getName()
return != null
return.address._host.toString == "localhost"
return.type has only one value
return.type != null
return.hosts has only one value
return.hosts != null
return.hosts.getClass().getName() == java.util.Collections$EmptySet.class
return.primary == null
return.maxDocumentSize == 16777216
return.maxWriteBatchSize == 512
return.maxMessageSize == 33554432
return.tags != null
return.tags.frozen == true
return.tags.wrapped != null
return.tags.wrapped.getClass().getName() == java.util.HashMap.class
return.setName == null
return.averageLatencyNanos == 0
return.ok == false
return.state has only one value
return.state != null
return.version != null
return.version.versionList != null
return.version.versionList[] contains no nulls and has only one value, of length 3
return.version.versionList[] elements has only one value
return.version.versionList[] elements != null
return.version.versionList[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
return.version.versionList[].getClass().getName() elements == java.lang.Integer.class
return.version.versionList.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
return.minWireVersion == 0
return.maxWireVersion == 0
size(return.version.versionList[]) == 3
this.serverStateListener.getClass().getName() != return.hosts.getClass().getName()
this.serverStateListener.getClass().getName() != return.tags.wrapped.getClass().getName()
this.serverStateListener.getClass().getName() != return.version.versionList.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != return.hosts.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != return.tags.wrapped.getClass().getName()
this.socketSettings.socketFactory.getClass().getName() != return.version.versionList.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != return.hosts.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != return.tags.wrapped.getClass().getName()
this.mongo._options.dbDecoderFactory.getClass().getName() != return.version.versionList.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != return.hosts.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != return.tags.wrapped.getClass().getName()
this.mongo._options.dbEncoderFactory.getClass().getName() != return.version.versionList.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != return.hosts.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != return.tags.wrapped.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != return.version.versionList.getClass().getName()
this.mongo._dbs.getClass().getName() != return.hosts.getClass().getName()
this.mongo._dbs.getClass().getName() != return.tags.wrapped.getClass().getName()
this.mongo._dbs.getClass().getName() != return.version.versionList.getClass().getName()
this.mongo._concern._w.getClass().getName() != return.hosts.getClass().getName()
this.mongo._concern._w.getClass().getName() != return.tags.wrapped.getClass().getName()
this.mongo._concern._w.getClass().getName() in return.version.versionList[].getClass().getName()
this.mongo._concern._w.getClass().getName() != return.version.versionList.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != return.hosts.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != return.tags.wrapped.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != return.version.versionList.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != return.hosts.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != return.tags.wrapped.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != return.version.versionList.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != return.hosts.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != return.tags.wrapped.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != return.version.versionList.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != return.hosts.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != return.tags.wrapped.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != return.version.versionList.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != return.hosts.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != return.tags.wrapped.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != return.version.versionList.getClass().getName()
this.mongo._authority.serverAddresses.getClass().getName() != return.hosts.getClass().getName()
this.mongo._authority.serverAddresses.getClass().getName() != return.tags.wrapped.getClass().getName()
this.mongo._authority.serverAddresses.getClass().getName() != return.version.versionList.getClass().getName()
this.mongo._bufferPool.getClass().getName() != return.hosts.getClass().getName()
this.mongo._bufferPool.getClass().getName() != return.tags.wrapped.getClass().getName()
this.mongo._bufferPool.getClass().getName() != return.version.versionList.getClass().getName()
this.mongo._bufferPool._stored.getClass().getName() != return.hosts.getClass().getName()
this.mongo._bufferPool._stored.getClass().getName() != return.tags.wrapped.getClass().getName()
this.mongo._bufferPool._stored.getClass().getName() != return.version.versionList.getClass().getName()
this.serverDescription.type.getClass().getName() != return.hosts.getClass().getName()
this.serverDescription.type.getClass().getName() != return.tags.wrapped.getClass().getName()
this.serverDescription.type.getClass().getName() != return.version.versionList.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != return.hosts.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != return.tags.wrapped.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != return.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != return.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != return.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != return.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != return.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != return.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != return.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != return.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != return.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != return.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != return.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != return.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != return.version.versionList.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != return.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != return.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != return.version.versionList.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != return.hosts.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != return.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != return.version.versionList.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != return.hosts.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != return.tags.wrapped.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != return.version.versionList.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != return.hosts.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != return.tags.wrapped.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != return.version.versionList.getClass().getName()
this.serverDescription.hosts.getClass().getName() != return.tags.wrapped.getClass().getName()
this.serverDescription.hosts.getClass().getName() != return.version.versionList.getClass().getName()
this.serverDescription.tags.wrapped.getClass().getName() != return.hosts.getClass().getName()
this.serverDescription.tags.wrapped.getClass().getName() != return.version.versionList.getClass().getName()
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() != return.hosts.getClass().getName()
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() != return.tags.wrapped.getClass().getName()
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() != return.version.versionList.getClass().getName()
this.serverDescription.version.versionList.getClass().getName() != return.hosts.getClass().getName()
this.serverDescription.version.versionList.getClass().getName() != return.tags.wrapped.getClass().getName()
this.lock.getClass().getName() != return.hosts.getClass().getName()
this.lock.getClass().getName() != return.tags.wrapped.getClass().getName()
this.lock.getClass().getName() != return.version.versionList.getClass().getName()
this.condition.getClass().getName() != return.hosts.getClass().getName()
this.condition.getClass().getName() != return.tags.wrapped.getClass().getName()
this.condition.getClass().getName() != return.version.versionList.getClass().getName()
return.hosts.getClass().getName() != return.tags.wrapped.getClass().getName()
return.hosts.getClass().getName() != return.version.versionList.getClass().getName()
return.tags.wrapped.getClass().getName() != return.version.versionList.getClass().getName()
===========================================================================
com.mongodb.ServerMonitor.getOptions():::ENTER
this.serverDescription != null
this.monitorThread != null
===========================================================================
com.mongodb.ServerMonitor.getOptions():::EXIT
com.mongodb.ServerMonitor.LOGGER == orig(com.mongodb.ServerMonitor.LOGGER)
this.serverAddress == orig(this.serverAddress)
this.serverAddress == orig(this.serverDescription.address)
this.serverAddress._host == orig(this.serverAddress._host)
this.serverAddress._host == orig(this.serverDescription.address._host)
this.serverAddress._host.toString == orig(this.serverAddress._host.toString)
this.serverAddress._port == orig(this.serverAddress._port)
this.serverAddress._port == orig(this.serverDescription.address._port)
this.serverStateListener == orig(this.serverStateListener)
this.serverStateListener.getClass().getName() == orig(this.serverStateListener.getClass().getName())
this.socketSettings == orig(this.socketSettings)
this.socketSettings == orig(this.settings.heartbeatSocketSettings)
this.socketSettings.connectTimeoutMS == orig(this.socketSettings.connectTimeoutMS)
this.socketSettings.connectTimeoutMS == orig(this.socketSettings.readTimeoutMS)
this.socketSettings.connectTimeoutMS == orig(this.settings.heartbeatSocketSettings.connectTimeoutMS)
this.socketSettings.connectTimeoutMS == orig(this.settings.heartbeatSocketSettings.readTimeoutMS)
this.socketSettings.connectTimeoutMS == orig(this.mongo._options.heartbeatConnectTimeoutMS)
this.socketSettings.connectTimeoutMS == orig(this.mongo._options.heartbeatReadTimeoutMS)
this.socketSettings.socketFactory == orig(this.socketSettings.socketFactory)
this.socketSettings.socketFactory == orig(this.settings.heartbeatSocketSettings.socketFactory)
this.socketSettings.socketFactory == orig(this.mongo._options.socketFactory)
this.socketSettings.socketFactory.getClass().getName() == return.socketFactory.getClass().getName()
this.settings == orig(this.settings)
this.settings.heartbeatFrequencyMS == orig(this.settings.heartbeatFrequencyMS)
this.settings.heartbeatFrequencyMS == orig(this.mongo._options.heartbeatFrequencyMS)
this.settings.heartbeatConnectRetryFrequencyMS == orig(this.settings.heartbeatConnectRetryFrequencyMS)
this.settings.heartbeatConnectRetryFrequencyMS == orig(this.mongo._options.connectionsPerHost)
this.settings.heartbeatConnectRetryFrequencyMS == orig(this.mongo._options.heartbeatConnectRetryFrequencyMS)
this.settings.heartbeatSocketSettings.socketFactory.getClass().getName() == return.socketFactory.getClass().getName()
this.mongo == orig(this.mongo)
this.mongo == orig(this.mongo._connector._mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this.mongo._options == orig(this.mongo._options)
this.mongo._options.description == orig(this.mongo._options.description)
this.mongo._options.threadsAllowedToBlockForConnectionMultiplier == orig(this.mongo._options.threadsAllowedToBlockForConnectionMultiplier)
this.mongo._options.maxWaitTime == orig(this.mongo._options.maxWaitTime)
this.mongo._options.connectTimeout == orig(this.mongo._options.connectTimeout)
this.mongo._options.socketTimeout == orig(this.mongo._options.socketTimeout)
this.mongo._options.socketKeepAlive == orig(this.mongo._options.socketKeepAlive)
this.mongo._options.autoConnectRetry == orig(this.mongo._options.autoConnectRetry)
this.mongo._options.maxAutoConnectRetryTime == orig(this.mongo._options.maxAutoConnectRetryTime)
this.mongo._options.slaveOk == orig(this.mongo._options.slaveOk)
this.mongo._options.readPreference == orig(this.mongo._options.readPreference)
this.mongo._options.dbDecoderFactory == orig(this.mongo._options.dbDecoderFactory)
this.mongo._options.dbDecoderFactory.getClass().getName() == return.dbDecoderFactory.getClass().getName()
this.mongo._options.dbEncoderFactory == orig(this.mongo._options.dbEncoderFactory)
this.mongo._options.dbEncoderFactory.getClass().getName() == return.dbEncoderFactory.getClass().getName()
this.mongo._options.safe == orig(this.mongo._options.safe)
this.mongo._options.w == orig(this.mongo._options.w)
this.mongo._options.wtimeout == orig(this.mongo._options.wtimeout)
this.mongo._options.fsync == orig(this.mongo._options.fsync)
this.mongo._options.fsync == orig(this.mongo._options.j)
this.mongo._options.socketFactory.getClass().getName() == return.socketFactory.getClass().getName()
this.mongo._options.cursorFinalizerEnabled == orig(this.mongo._options.cursorFinalizerEnabled)
this.mongo._options.writeConcern == orig(this.mongo._options.writeConcern)
this.mongo._options.alwaysUseMBeans == orig(this.mongo._options.alwaysUseMBeans)
this.mongo._options.minConnectionsPerHost == orig(this.mongo._options.minConnectionsPerHost)
this.mongo._options.maxConnectionIdleTime == orig(this.mongo._options.maxConnectionIdleTime)
this.mongo._options.maxConnectionLifeTime == orig(this.mongo._options.maxConnectionLifeTime)
this.mongo._options.acceptableLatencyDifferenceMS == orig(this.mongo._options.acceptableLatencyDifferenceMS)
this.mongo._options.heartbeatThreadCount == orig(this.mongo._options.heartbeatThreadCount)
this.mongo._options.requiredReplicaSetName == orig(this.mongo._options.requiredReplicaSetName)
this.mongo._connector == orig(this.mongo._connector)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
this.mongo._connector._closed == orig(this.mongo._connector._closed)
this.mongo._connector.cluster == orig(this.mongo._connector.cluster)
this.mongo._connector.cluster.getClass().getName() == orig(this.mongo._connector.cluster.getClass().getName())
this.mongo._connector._myPort == orig(this.mongo._connector._myPort)
this.mongo._connector.connectionMode == orig(this.mongo._connector.connectionMode)
this.mongo._connector.type == orig(this.mongo._connector.type)
this.mongo._connector.mongosHAServerSelector == orig(this.mongo._connector.mongosHAServerSelector)
this.mongo._dbs == orig(this.mongo._dbs)
this.mongo._dbs.getClass().getName() == orig(this.mongo._dbs.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(this.mongo._concern)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this.mongo._concern._w == orig(this.mongo._concern._w)
this.mongo._concern._w.getClass().getName() == orig(this.mongo._concern._w.getClass().getName())
this.mongo._concern._wtimeout == orig(this.mongo._concern._wtimeout)
this.mongo._concern._fsync == orig(this.mongo._concern._fsync)
this.mongo._concern._j == orig(this.mongo._concern._j)
this.mongo._concern._continueOnError == orig(this.mongo._concern._continueOnError)
com.mongodb.ReadPreference.PRIMARY == orig(this.mongo._readPref)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(this.mongo._readPref.getClass().getName())
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this.mongo._netOptions == orig(this.mongo._netOptions)
this.mongo._netOptions._parent == orig(this.mongo._netOptions._parent)
this.mongo._netOptions._options == orig(this.mongo._netOptions._options)
this.mongo._netOptions._hasOptions == orig(this.mongo._netOptions._hasOptions)
this.mongo._cleaner == orig(this.mongo._cleaner)
com.mongodb.Mongo.this == orig(com.mongodb.Mongo.this)
this.mongo._authority == orig(this.mongo._authority)
this.mongo._authority.type == orig(this.mongo._authority.type)
this.mongo._authority.serverAddresses == orig(this.mongo._authority.serverAddresses)
this.mongo._authority.serverAddresses[] == orig(this.mongo._authority.serverAddresses[])
this.mongo._authority.serverAddresses.getClass().getName() == orig(this.mongo._authority.serverAddresses.getClass().getName())
this.mongo._authority.credentialsStore == orig(this.mongo._authority.credentialsStore)
this.mongo._bufferPool == orig(this.mongo._bufferPool)
this.mongo._bufferPool.getClass().getName() == orig(this.mongo._bufferPool.getClass().getName())
this.mongo._bufferPool._max == orig(this.mongo._bufferPool._max)
this.mongo._bufferPool._stored == orig(this.mongo._bufferPool._stored)
this.mongo._bufferPool._stored.getClass().getName() == orig(this.mongo._bufferPool._stored.getClass().getName())
this.count == orig(this.count)
this.elapsedNanosSum == orig(this.elapsedNanosSum)
this.serverDescription == orig(this.serverDescription)
this.serverDescription.address._host.toString == orig(this.serverDescription.address._host.toString)
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(this.serverDescription.type)
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == orig(this.serverDescription.type.getClass().getName())
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
this.serverDescription.hosts == orig(this.serverDescription.hosts)
this.serverDescription.hosts == orig(this.serverDescription.passives)
this.serverDescription.hosts == orig(this.serverDescription.arbiters)
this.serverDescription.hosts.getClass().getName() == orig(this.serverDescription.hosts.getClass().getName())
this.serverDescription.hosts.getClass().getName() == orig(this.serverDescription.passives.getClass().getName())
this.serverDescription.hosts.getClass().getName() == orig(this.serverDescription.arbiters.getClass().getName())
this.serverDescription.primary == orig(this.serverDescription.primary)
this.serverDescription.maxDocumentSize == orig(this.serverDescription.maxDocumentSize)
this.serverDescription.maxWriteBatchSize == orig(this.serverDescription.maxWriteBatchSize)
this.serverDescription.maxMessageSize == orig(this.serverDescription.maxMessageSize)
this.serverDescription.tags == orig(this.serverDescription.tags)
this.serverDescription.tags.frozen == orig(this.serverDescription.tags.frozen)
this.serverDescription.tags.wrapped == orig(this.serverDescription.tags.wrapped)
this.serverDescription.tags.wrapped.getClass().getName() == orig(this.serverDescription.tags.wrapped.getClass().getName())
this.serverDescription.setName == orig(this.serverDescription.setName)
this.serverDescription.averageLatencyNanos == orig(this.serverDescription.averageLatencyNanos)
this.serverDescription.ok == orig(this.serverDescription.ok)
com.mongodb.ServerConnectionState.Connecting == orig(this.serverDescription.state)
com.mongodb.ServerConnectionState.Connecting == orig(com.mongodb.ServerConnectionState.Connecting)
com.mongodb.ServerConnectionState.Connected == orig(com.mongodb.ServerConnectionState.Connected)
com.mongodb.ServerConnectionState.$VALUES == orig(com.mongodb.ServerConnectionState.$VALUES)
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == orig(com.mongodb.ServerConnectionState.$VALUES.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES[] == orig(com.mongodb.ServerConnectionState.$VALUES[])
this.serverDescription.version == orig(this.serverDescription.version)
this.serverDescription.version.versionList == orig(this.serverDescription.version.versionList)
this.serverDescription.version.versionList[] == orig(this.serverDescription.version.versionList[])
this.serverDescription.version.versionList.getClass().getName() == orig(this.serverDescription.version.versionList.getClass().getName())
this.serverDescription.minWireVersion == orig(this.serverDescription.minWireVersion)
this.serverDescription.maxWireVersion == orig(this.serverDescription.maxWireVersion)
this.isClosed == orig(this.isClosed)
this.connection == orig(this.connection)
com.mongodb.DBPort._rootLogger == orig(com.mongodb.DBPort._rootLogger)
com.mongodb.PooledConnectionProvider.LOGGER == orig(com.mongodb.PooledConnectionProvider.LOGGER)
this.monitorThread == orig(this.monitorThread)
this.lock == orig(this.lock)
this.lock.getClass().getName() == orig(this.lock.getClass().getName())
this.condition == orig(this.condition)
this.condition.getClass().getName() == orig(this.condition.getClass().getName())
return.dbDecoderFactory.getClass().getName() == orig(this.mongo._options.dbDecoderFactory.getClass().getName())
return.dbEncoderFactory.getClass().getName() == orig(this.mongo._options.dbEncoderFactory.getClass().getName())
return.socketFactory.getClass().getName() == orig(this.socketSettings.socketFactory.getClass().getName())
return.socketFactory.getClass().getName() == orig(this.settings.heartbeatSocketSettings.socketFactory.getClass().getName())
return.socketFactory.getClass().getName() == orig(this.mongo._options.socketFactory.getClass().getName())
this.serverDescription != null
this.monitorThread != null
return != null
return.description == null
return.connectionsPerHost == 10
return.threadsAllowedToBlockForConnectionMultiplier == 5
return.maxWaitTime == 120000
return.connectTimeout == 20000
return.socketTimeout == 20000
return.socketKeepAlive == false
return.autoConnectRetry == false
return.maxAutoConnectRetryTime == 0
return.slaveOk == false
return.readPreference == null
return.dbDecoderFactory has only one value
return.dbDecoderFactory != null
return.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
return.dbEncoderFactory has only one value
return.dbEncoderFactory != null
return.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
return.safe == false
return.w == 0
return.wtimeout == 0
return.fsync == false
return.j == false
return.socketFactory has only one value
return.socketFactory != null
return.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
return.cursorFinalizerEnabled == true
return.writeConcern == null
return.alwaysUseMBeans == false
return.minConnectionsPerHost == 0
return.maxConnectionIdleTime == 0
return.maxConnectionLifeTime == 0
return.heartbeatFrequencyMS == 5000
return.heartbeatConnectRetryFrequencyMS == 10
return.heartbeatConnectTimeoutMS == 20000
return.heartbeatReadTimeoutMS == 20000
return.acceptableLatencyDifferenceMS == 15
return.heartbeatThreadCount == 0
return.requiredReplicaSetName == null
this.serverStateListener.getClass().getName() != return.dbDecoderFactory.getClass().getName()
this.serverStateListener.getClass().getName() != return.dbEncoderFactory.getClass().getName()
this.serverStateListener.getClass().getName() != return.socketFactory.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != return.dbDecoderFactory.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != return.dbEncoderFactory.getClass().getName()
this.mongo._connector.cluster.getClass().getName() != return.socketFactory.getClass().getName()
this.mongo._dbs.getClass().getName() != return.dbDecoderFactory.getClass().getName()
this.mongo._dbs.getClass().getName() != return.dbEncoderFactory.getClass().getName()
this.mongo._dbs.getClass().getName() != return.socketFactory.getClass().getName()
this.mongo._concern._w.getClass().getName() != return.dbDecoderFactory.getClass().getName()
this.mongo._concern._w.getClass().getName() != return.dbEncoderFactory.getClass().getName()
this.mongo._concern._w.getClass().getName() != return.socketFactory.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != return.dbDecoderFactory.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != return.dbEncoderFactory.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() != return.socketFactory.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != return.dbDecoderFactory.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != return.dbEncoderFactory.getClass().getName()
com.mongodb.ReadPreference.SECONDARY.getClass().getName() != return.socketFactory.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != return.dbDecoderFactory.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != return.dbEncoderFactory.getClass().getName()
com.mongodb.ReadPreference._SECONDARY.getClass().getName() != return.socketFactory.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != return.dbDecoderFactory.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != return.dbEncoderFactory.getClass().getName()
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() != return.socketFactory.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != return.dbDecoderFactory.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != return.dbEncoderFactory.getClass().getName()
com.mongodb.ReadPreference._NEAREST.getClass().getName() != return.socketFactory.getClass().getName()
this.mongo._authority.serverAddresses.getClass().getName() != return.dbDecoderFactory.getClass().getName()
this.mongo._authority.serverAddresses.getClass().getName() != return.dbEncoderFactory.getClass().getName()
this.mongo._authority.serverAddresses.getClass().getName() != return.socketFactory.getClass().getName()
this.mongo._bufferPool.getClass().getName() != return.dbDecoderFactory.getClass().getName()
this.mongo._bufferPool.getClass().getName() != return.dbEncoderFactory.getClass().getName()
this.mongo._bufferPool.getClass().getName() != return.socketFactory.getClass().getName()
this.mongo._bufferPool._stored.getClass().getName() != return.dbDecoderFactory.getClass().getName()
this.mongo._bufferPool._stored.getClass().getName() != return.dbEncoderFactory.getClass().getName()
this.mongo._bufferPool._stored.getClass().getName() != return.socketFactory.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != return.dbDecoderFactory.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != return.dbEncoderFactory.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != return.socketFactory.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != return.dbDecoderFactory.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != return.dbEncoderFactory.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != return.socketFactory.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != return.dbDecoderFactory.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != return.dbEncoderFactory.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != return.socketFactory.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != return.dbDecoderFactory.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != return.dbEncoderFactory.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != return.socketFactory.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != return.dbDecoderFactory.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != return.dbEncoderFactory.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != return.socketFactory.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != return.dbDecoderFactory.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != return.dbEncoderFactory.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != return.socketFactory.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != return.dbDecoderFactory.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != return.dbEncoderFactory.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != return.socketFactory.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != return.dbDecoderFactory.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != return.dbEncoderFactory.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != return.socketFactory.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != return.dbDecoderFactory.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != return.dbEncoderFactory.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != return.socketFactory.getClass().getName()
this.serverDescription.hosts.getClass().getName() != return.dbDecoderFactory.getClass().getName()
this.serverDescription.hosts.getClass().getName() != return.dbEncoderFactory.getClass().getName()
this.serverDescription.hosts.getClass().getName() != return.socketFactory.getClass().getName()
this.serverDescription.tags.wrapped.getClass().getName() != return.dbDecoderFactory.getClass().getName()
this.serverDescription.tags.wrapped.getClass().getName() != return.dbEncoderFactory.getClass().getName()
this.serverDescription.tags.wrapped.getClass().getName() != return.socketFactory.getClass().getName()
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() != return.dbDecoderFactory.getClass().getName()
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() != return.dbEncoderFactory.getClass().getName()
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() != return.socketFactory.getClass().getName()
this.serverDescription.version.versionList.getClass().getName() != return.dbDecoderFactory.getClass().getName()
this.serverDescription.version.versionList.getClass().getName() != return.dbEncoderFactory.getClass().getName()
this.serverDescription.version.versionList.getClass().getName() != return.socketFactory.getClass().getName()
this.lock.getClass().getName() != return.dbDecoderFactory.getClass().getName()
this.lock.getClass().getName() != return.dbEncoderFactory.getClass().getName()
this.lock.getClass().getName() != return.socketFactory.getClass().getName()
this.condition.getClass().getName() != return.dbDecoderFactory.getClass().getName()
this.condition.getClass().getName() != return.dbEncoderFactory.getClass().getName()
this.condition.getClass().getName() != return.socketFactory.getClass().getName()
return.dbDecoderFactory.getClass().getName() != return.dbEncoderFactory.getClass().getName()
return.dbDecoderFactory.getClass().getName() != return.socketFactory.getClass().getName()
return.dbEncoderFactory.getClass().getName() != return.socketFactory.getClass().getName()
===========================================================================
com.mongodb.ServerMonitor.start():::ENTER
this.mongo._connector.cluster == null
this.mongo._cleaner == null
===========================================================================
com.mongodb.ServerMonitor.start():::EXIT
com.mongodb.ServerMonitor.LOGGER == orig(com.mongodb.ServerMonitor.LOGGER)
this.serverAddress == orig(this.serverAddress)
this.serverAddress == orig(this.serverDescription.address)
this.serverAddress._host == orig(this.serverAddress._host)
this.serverAddress._host == orig(this.serverDescription.address._host)
this.serverAddress._host.toString == orig(this.serverAddress._host.toString)
this.serverAddress._port == orig(this.serverAddress._port)
this.serverAddress._port == orig(this.serverDescription.address._port)
this.serverStateListener == orig(this.serverStateListener)
this.serverStateListener.getClass().getName() == orig(this.serverStateListener.getClass().getName())
this.socketSettings == orig(this.socketSettings)
this.socketSettings == orig(this.settings.heartbeatSocketSettings)
this.socketSettings.connectTimeoutMS == orig(this.socketSettings.connectTimeoutMS)
this.socketSettings.connectTimeoutMS == orig(this.socketSettings.readTimeoutMS)
this.socketSettings.connectTimeoutMS == orig(this.settings.heartbeatSocketSettings.connectTimeoutMS)
this.socketSettings.connectTimeoutMS == orig(this.settings.heartbeatSocketSettings.readTimeoutMS)
this.socketSettings.connectTimeoutMS == orig(this.mongo._options.heartbeatConnectTimeoutMS)
this.socketSettings.connectTimeoutMS == orig(this.mongo._options.heartbeatReadTimeoutMS)
this.socketSettings.socketFactory == orig(this.socketSettings.socketFactory)
this.socketSettings.socketFactory == orig(this.settings.heartbeatSocketSettings.socketFactory)
this.socketSettings.socketFactory == orig(this.mongo._options.socketFactory)
this.socketSettings.socketFactory.getClass().getName() == orig(this.socketSettings.socketFactory.getClass().getName())
this.socketSettings.socketFactory.getClass().getName() == orig(this.settings.heartbeatSocketSettings.socketFactory.getClass().getName())
this.socketSettings.socketFactory.getClass().getName() == orig(this.mongo._options.socketFactory.getClass().getName())
this.settings == orig(this.settings)
this.settings.heartbeatFrequencyMS == orig(this.settings.heartbeatFrequencyMS)
this.settings.heartbeatFrequencyMS == orig(this.mongo._options.heartbeatFrequencyMS)
this.settings.heartbeatConnectRetryFrequencyMS == orig(this.settings.heartbeatConnectRetryFrequencyMS)
this.settings.heartbeatConnectRetryFrequencyMS == orig(this.mongo._options.connectionsPerHost)
this.settings.heartbeatConnectRetryFrequencyMS == orig(this.mongo._options.heartbeatConnectRetryFrequencyMS)
this.mongo == orig(this.mongo)
this.mongo == orig(this.mongo._connector._mongo)
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
this.mongo._options == orig(this.mongo._options)
this.mongo._options.description == orig(this.mongo._options.description)
this.mongo._options.threadsAllowedToBlockForConnectionMultiplier == orig(this.mongo._options.threadsAllowedToBlockForConnectionMultiplier)
this.mongo._options.maxWaitTime == orig(this.mongo._options.maxWaitTime)
this.mongo._options.connectTimeout == orig(this.mongo._options.connectTimeout)
this.mongo._options.socketTimeout == orig(this.mongo._options.socketTimeout)
this.mongo._options.socketKeepAlive == orig(this.mongo._options.socketKeepAlive)
this.mongo._options.autoConnectRetry == orig(this.mongo._options.autoConnectRetry)
this.mongo._options.maxAutoConnectRetryTime == orig(this.mongo._options.maxAutoConnectRetryTime)
this.mongo._options.slaveOk == orig(this.mongo._options.slaveOk)
this.mongo._options.readPreference == orig(this.mongo._options.readPreference)
this.mongo._options.dbDecoderFactory == orig(this.mongo._options.dbDecoderFactory)
this.mongo._options.dbDecoderFactory.getClass().getName() == orig(this.mongo._options.dbDecoderFactory.getClass().getName())
this.mongo._options.dbEncoderFactory == orig(this.mongo._options.dbEncoderFactory)
this.mongo._options.dbEncoderFactory.getClass().getName() == orig(this.mongo._options.dbEncoderFactory.getClass().getName())
this.mongo._options.safe == orig(this.mongo._options.safe)
this.mongo._options.w == orig(this.mongo._options.w)
this.mongo._options.wtimeout == orig(this.mongo._options.wtimeout)
this.mongo._options.fsync == orig(this.mongo._options.fsync)
this.mongo._options.fsync == orig(this.mongo._options.j)
this.mongo._options.cursorFinalizerEnabled == orig(this.mongo._options.cursorFinalizerEnabled)
this.mongo._options.writeConcern == orig(this.mongo._options.writeConcern)
this.mongo._options.alwaysUseMBeans == orig(this.mongo._options.alwaysUseMBeans)
this.mongo._options.minConnectionsPerHost == orig(this.mongo._options.minConnectionsPerHost)
this.mongo._options.maxConnectionIdleTime == orig(this.mongo._options.maxConnectionIdleTime)
this.mongo._options.maxConnectionLifeTime == orig(this.mongo._options.maxConnectionLifeTime)
this.mongo._options.acceptableLatencyDifferenceMS == orig(this.mongo._options.acceptableLatencyDifferenceMS)
this.mongo._options.heartbeatThreadCount == orig(this.mongo._options.heartbeatThreadCount)
this.mongo._options.requiredReplicaSetName == orig(this.mongo._options.requiredReplicaSetName)
this.mongo._connector == orig(this.mongo._connector)
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID == orig(com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID)
this.mongo._connector._closed == orig(this.mongo._connector._closed)
this.mongo._connector.cluster == orig(this.mongo._connector.cluster)
this.mongo._connector._myPort == orig(this.mongo._connector._myPort)
this.mongo._connector.connectionMode == orig(this.mongo._connector.connectionMode)
this.mongo._connector.type == orig(this.mongo._connector.type)
this.mongo._connector.mongosHAServerSelector == orig(this.mongo._connector.mongosHAServerSelector)
this.mongo._dbs == orig(this.mongo._dbs)
this.mongo._dbs.getClass().getName() == orig(this.mongo._dbs.getClass().getName())
com.mongodb.WriteConcern.ERRORS_IGNORED == orig(com.mongodb.WriteConcern.ERRORS_IGNORED)
com.mongodb.WriteConcern.ACKNOWLEDGED == orig(com.mongodb.WriteConcern.ACKNOWLEDGED)
com.mongodb.WriteConcern.UNACKNOWLEDGED == orig(com.mongodb.WriteConcern.UNACKNOWLEDGED)
com.mongodb.WriteConcern.FSYNCED == orig(com.mongodb.WriteConcern.FSYNCED)
com.mongodb.WriteConcern.JOURNALED == orig(com.mongodb.WriteConcern.JOURNALED)
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED == orig(com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED)
com.mongodb.WriteConcern.NONE == orig(com.mongodb.WriteConcern.NONE)
com.mongodb.WriteConcern.NORMAL == orig(this.mongo._concern)
com.mongodb.WriteConcern.NORMAL == orig(com.mongodb.WriteConcern.NORMAL)
com.mongodb.WriteConcern.SAFE == orig(com.mongodb.WriteConcern.SAFE)
com.mongodb.WriteConcern.MAJORITY == orig(com.mongodb.WriteConcern.MAJORITY)
com.mongodb.WriteConcern.FSYNC_SAFE == orig(com.mongodb.WriteConcern.FSYNC_SAFE)
com.mongodb.WriteConcern.JOURNAL_SAFE == orig(com.mongodb.WriteConcern.JOURNAL_SAFE)
com.mongodb.WriteConcern.REPLICAS_SAFE == orig(com.mongodb.WriteConcern.REPLICAS_SAFE)
com.mongodb.WriteConcern._namedConcerns == orig(com.mongodb.WriteConcern._namedConcerns)
this.mongo._concern._w == orig(this.mongo._concern._w)
this.mongo._concern._w.getClass().getName() == orig(this.mongo._concern._w.getClass().getName())
this.mongo._concern._wtimeout == orig(this.mongo._concern._wtimeout)
this.mongo._concern._fsync == orig(this.mongo._concern._fsync)
this.mongo._concern._j == orig(this.mongo._concern._j)
this.mongo._concern._continueOnError == orig(this.mongo._concern._continueOnError)
com.mongodb.ReadPreference.PRIMARY == orig(this.mongo._readPref)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference.PRIMARY)
com.mongodb.ReadPreference.PRIMARY == orig(com.mongodb.ReadPreference._PRIMARY)
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(this.mongo._readPref.getClass().getName())
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference.PRIMARY.getClass().getName())
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference.SECONDARY)
com.mongodb.ReadPreference.SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED)
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference.SECONDARY.getClass().getName())
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._SECONDARY == orig(com.mongodb.ReadPreference._SECONDARY)
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == orig(com.mongodb.ReadPreference._SECONDARY.getClass().getName())
com.mongodb.ReadPreference._PRIMARY_PREFERRED == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED)
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == orig(com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName())
com.mongodb.ReadPreference._NEAREST == orig(com.mongodb.ReadPreference._NEAREST)
com.mongodb.ReadPreference._NEAREST.getClass().getName() == orig(com.mongodb.ReadPreference._NEAREST.getClass().getName())
this.mongo._netOptions == orig(this.mongo._netOptions)
this.mongo._netOptions._parent == orig(this.mongo._netOptions._parent)
this.mongo._netOptions._options == orig(this.mongo._netOptions._options)
this.mongo._netOptions._hasOptions == orig(this.mongo._netOptions._hasOptions)
this.mongo._cleaner == orig(this.mongo._cleaner)
this.mongo._authority == orig(this.mongo._authority)
this.mongo._authority.type == orig(this.mongo._authority.type)
this.mongo._authority.serverAddresses == orig(this.mongo._authority.serverAddresses)
this.mongo._authority.serverAddresses[] == orig(this.mongo._authority.serverAddresses[])
this.mongo._authority.serverAddresses.getClass().getName() == orig(this.mongo._authority.serverAddresses.getClass().getName())
this.mongo._authority.credentialsStore == orig(this.mongo._authority.credentialsStore)
this.mongo._bufferPool == orig(this.mongo._bufferPool)
this.mongo._bufferPool.getClass().getName() == orig(this.mongo._bufferPool.getClass().getName())
this.mongo._bufferPool._max == orig(this.mongo._bufferPool._max)
this.mongo._bufferPool._stored == orig(this.mongo._bufferPool._stored)
this.mongo._bufferPool._stored.getClass().getName() == orig(this.mongo._bufferPool._stored.getClass().getName())
this.count == orig(this.count)
this.elapsedNanosSum == orig(this.elapsedNanosSum)
this.serverDescription == orig(this.serverDescription)
this.serverDescription.address._host.toString == orig(this.serverDescription.address._host.toString)
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(this.serverDescription.type)
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == orig(this.serverDescription.type.getClass().getName())
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
this.serverDescription.hosts == orig(this.serverDescription.hosts)
this.serverDescription.hosts == orig(this.serverDescription.passives)
this.serverDescription.hosts == orig(this.serverDescription.arbiters)
this.serverDescription.hosts.getClass().getName() == orig(this.serverDescription.hosts.getClass().getName())
this.serverDescription.hosts.getClass().getName() == orig(this.serverDescription.passives.getClass().getName())
this.serverDescription.hosts.getClass().getName() == orig(this.serverDescription.arbiters.getClass().getName())
this.serverDescription.primary == orig(this.serverDescription.primary)
this.serverDescription.maxDocumentSize == orig(this.serverDescription.maxDocumentSize)
this.serverDescription.maxWriteBatchSize == orig(this.serverDescription.maxWriteBatchSize)
this.serverDescription.maxMessageSize == orig(this.serverDescription.maxMessageSize)
this.serverDescription.tags == orig(this.serverDescription.tags)
this.serverDescription.tags.frozen == orig(this.serverDescription.tags.frozen)
this.serverDescription.tags.wrapped == orig(this.serverDescription.tags.wrapped)
this.serverDescription.tags.wrapped.getClass().getName() == orig(this.serverDescription.tags.wrapped.getClass().getName())
this.serverDescription.setName == orig(this.serverDescription.setName)
this.serverDescription.averageLatencyNanos == orig(this.serverDescription.averageLatencyNanos)
this.serverDescription.ok == orig(this.serverDescription.ok)
com.mongodb.ServerConnectionState.Connecting == orig(this.serverDescription.state)
com.mongodb.ServerConnectionState.Connecting == orig(com.mongodb.ServerConnectionState.Connecting)
com.mongodb.ServerConnectionState.Connected == orig(com.mongodb.ServerConnectionState.Connected)
com.mongodb.ServerConnectionState.$VALUES == orig(com.mongodb.ServerConnectionState.$VALUES)
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == orig(com.mongodb.ServerConnectionState.$VALUES.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES[] == orig(com.mongodb.ServerConnectionState.$VALUES[])
this.serverDescription.version == orig(this.serverDescription.version)
this.serverDescription.version.versionList == orig(this.serverDescription.version.versionList)
this.serverDescription.version.versionList[] == orig(this.serverDescription.version.versionList[])
this.serverDescription.version.versionList.getClass().getName() == orig(this.serverDescription.version.versionList.getClass().getName())
this.serverDescription.minWireVersion == orig(this.serverDescription.minWireVersion)
this.serverDescription.maxWireVersion == orig(this.serverDescription.maxWireVersion)
this.isClosed == orig(this.isClosed)
this.connection == orig(this.connection)
com.mongodb.DBPort._rootLogger == orig(com.mongodb.DBPort._rootLogger)
com.mongodb.PooledConnectionProvider.LOGGER == orig(com.mongodb.PooledConnectionProvider.LOGGER)
this.monitorThread == orig(this.monitorThread)
this.lock == orig(this.lock)
this.lock.getClass().getName() == orig(this.lock.getClass().getName())
this.condition == orig(this.condition)
this.condition.getClass().getName() == orig(this.condition.getClass().getName())
this.mongo._connector.cluster == null
this.mongo._cleaner == null
===========================================================================
com.mongodb.ServerSettings$Builder:::OBJECT
this.heartbeatSocketSettings.connectTimeoutMS == this.heartbeatSocketSettings.readTimeoutMS
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatSocketSettings != null
this.heartbeatSocketSettings.connectTimeoutMS one of { 0, 20000 }
this.heartbeatSocketSettings.socketFactory has only one value
this.heartbeatSocketSettings.socketFactory != null
this.heartbeatSocketSettings.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
this.heartbeatFrequencyMS != this.heartbeatSocketSettings.connectTimeoutMS
this.heartbeatConnectRetryFrequencyMS != this.heartbeatSocketSettings.connectTimeoutMS
===========================================================================
com.mongodb.ServerSettings$Builder.Builder():::EXIT
this.heartbeatSocketSettings.connectTimeoutMS == 0
===========================================================================
com.mongodb.ServerSettings$Builder.build():::ENTER
this.heartbeatSocketSettings.connectTimeoutMS == 20000
===========================================================================
com.mongodb.ServerSettings$Builder.build():::EXIT
this.heartbeatFrequencyMS == return.heartbeatFrequencyMS
this.heartbeatFrequencyMS == orig(this.heartbeatFrequencyMS)
this.heartbeatConnectRetryFrequencyMS == return.heartbeatConnectRetryFrequencyMS
this.heartbeatConnectRetryFrequencyMS == orig(this.heartbeatConnectRetryFrequencyMS)
this.heartbeatSocketSettings == return.heartbeatSocketSettings
this.heartbeatSocketSettings == orig(this.heartbeatSocketSettings)
this.heartbeatSocketSettings.connectTimeoutMS == return.heartbeatSocketSettings.connectTimeoutMS
this.heartbeatSocketSettings.connectTimeoutMS == return.heartbeatSocketSettings.readTimeoutMS
this.heartbeatSocketSettings.connectTimeoutMS == orig(this.heartbeatSocketSettings.connectTimeoutMS)
this.heartbeatSocketSettings.connectTimeoutMS == orig(this.heartbeatSocketSettings.readTimeoutMS)
this.heartbeatSocketSettings.socketFactory == return.heartbeatSocketSettings.socketFactory
this.heartbeatSocketSettings.socketFactory == orig(this.heartbeatSocketSettings.socketFactory)
this.heartbeatSocketSettings.socketFactory.getClass().getName() == return.heartbeatSocketSettings.socketFactory.getClass().getName()
this.heartbeatSocketSettings.socketFactory.getClass().getName() == orig(this.heartbeatSocketSettings.socketFactory.getClass().getName())
this.heartbeatSocketSettings.connectTimeoutMS == 20000
===========================================================================
com.mongodb.ServerSettings$Builder.heartbeatConnectRetryFrequency(long, java.util.concurrent.TimeUnit):::ENTER
this.heartbeatConnectRetryFrequencyMS == heartbeatConnectRetryFrequency
this.heartbeatSocketSettings.connectTimeoutMS == 0
timeUnit has only one value
===========================================================================
com.mongodb.ServerSettings$Builder.heartbeatConnectRetryFrequency(long, java.util.concurrent.TimeUnit):::EXIT
this.heartbeatFrequencyMS == return.heartbeatFrequencyMS
this.heartbeatFrequencyMS == orig(this.heartbeatFrequencyMS)
this.heartbeatConnectRetryFrequencyMS == return.heartbeatConnectRetryFrequencyMS
this.heartbeatConnectRetryFrequencyMS == orig(this.heartbeatConnectRetryFrequencyMS)
this.heartbeatConnectRetryFrequencyMS == orig(heartbeatConnectRetryFrequency)
this.heartbeatSocketSettings == return.heartbeatSocketSettings
this.heartbeatSocketSettings == orig(this.heartbeatSocketSettings)
this.heartbeatSocketSettings.connectTimeoutMS == return.heartbeatSocketSettings.connectTimeoutMS
this.heartbeatSocketSettings.connectTimeoutMS == return.heartbeatSocketSettings.readTimeoutMS
this.heartbeatSocketSettings.connectTimeoutMS == orig(this.heartbeatSocketSettings.connectTimeoutMS)
this.heartbeatSocketSettings.connectTimeoutMS == orig(this.heartbeatSocketSettings.readTimeoutMS)
this.heartbeatSocketSettings.socketFactory == return.heartbeatSocketSettings.socketFactory
this.heartbeatSocketSettings.socketFactory == orig(this.heartbeatSocketSettings.socketFactory)
this.heartbeatSocketSettings.socketFactory.getClass().getName() == return.heartbeatSocketSettings.socketFactory.getClass().getName()
this.heartbeatSocketSettings.socketFactory.getClass().getName() == orig(this.heartbeatSocketSettings.socketFactory.getClass().getName())
return == orig(this)
this.heartbeatSocketSettings.connectTimeoutMS == 0
===========================================================================
com.mongodb.ServerSettings$Builder.heartbeatFrequency(long, java.util.concurrent.TimeUnit):::ENTER
this.heartbeatFrequencyMS == heartbeatFrequency
this.heartbeatSocketSettings.connectTimeoutMS == 0
timeUnit has only one value
===========================================================================
com.mongodb.ServerSettings$Builder.heartbeatFrequency(long, java.util.concurrent.TimeUnit):::EXIT
this.heartbeatFrequencyMS == return.heartbeatFrequencyMS
this.heartbeatFrequencyMS == orig(this.heartbeatFrequencyMS)
this.heartbeatFrequencyMS == orig(heartbeatFrequency)
this.heartbeatConnectRetryFrequencyMS == return.heartbeatConnectRetryFrequencyMS
this.heartbeatConnectRetryFrequencyMS == orig(this.heartbeatConnectRetryFrequencyMS)
this.heartbeatSocketSettings == return.heartbeatSocketSettings
this.heartbeatSocketSettings == orig(this.heartbeatSocketSettings)
this.heartbeatSocketSettings.connectTimeoutMS == return.heartbeatSocketSettings.connectTimeoutMS
this.heartbeatSocketSettings.connectTimeoutMS == return.heartbeatSocketSettings.readTimeoutMS
this.heartbeatSocketSettings.connectTimeoutMS == orig(this.heartbeatSocketSettings.connectTimeoutMS)
this.heartbeatSocketSettings.connectTimeoutMS == orig(this.heartbeatSocketSettings.readTimeoutMS)
this.heartbeatSocketSettings.socketFactory == return.heartbeatSocketSettings.socketFactory
this.heartbeatSocketSettings.socketFactory == orig(this.heartbeatSocketSettings.socketFactory)
this.heartbeatSocketSettings.socketFactory.getClass().getName() == return.heartbeatSocketSettings.socketFactory.getClass().getName()
this.heartbeatSocketSettings.socketFactory.getClass().getName() == orig(this.heartbeatSocketSettings.socketFactory.getClass().getName())
return == orig(this)
this.heartbeatSocketSettings.connectTimeoutMS == 0
===========================================================================
com.mongodb.ServerSettings$Builder.heartbeatSocketSettings(com.mongodb.SocketSettings):::ENTER
this.heartbeatSocketSettings.socketFactory == heartbeatSocketSettings.socketFactory
this.heartbeatSocketSettings.socketFactory.getClass().getName() == heartbeatSocketSettings.socketFactory.getClass().getName()
heartbeatSocketSettings.connectTimeoutMS == heartbeatSocketSettings.readTimeoutMS
this.heartbeatSocketSettings.connectTimeoutMS == 0
heartbeatSocketSettings.connectTimeoutMS == 20000
===========================================================================
com.mongodb.ServerSettings$Builder.heartbeatSocketSettings(com.mongodb.SocketSettings):::EXIT
this.heartbeatFrequencyMS == return.heartbeatFrequencyMS
this.heartbeatFrequencyMS == orig(this.heartbeatFrequencyMS)
this.heartbeatConnectRetryFrequencyMS == return.heartbeatConnectRetryFrequencyMS
this.heartbeatConnectRetryFrequencyMS == orig(this.heartbeatConnectRetryFrequencyMS)
this.heartbeatSocketSettings == return.heartbeatSocketSettings
this.heartbeatSocketSettings == orig(heartbeatSocketSettings)
this.heartbeatSocketSettings.connectTimeoutMS == heartbeatSocketSettings.connectTimeoutMS
this.heartbeatSocketSettings.readTimeoutMS == heartbeatSocketSettings.connectTimeoutMS
this.heartbeatSocketSettings.socketFactory == heartbeatSocketSettings.socketFactory
this.heartbeatSocketSettings.socketFactory.getClass().getName() == heartbeatSocketSettings.socketFactory.getClass().getName()
heartbeatSocketSettings.connectTimeoutMS == heartbeatSocketSettings.readTimeoutMS
heartbeatSocketSettings.connectTimeoutMS == return.heartbeatSocketSettings.connectTimeoutMS
heartbeatSocketSettings.connectTimeoutMS == return.heartbeatSocketSettings.readTimeoutMS
heartbeatSocketSettings.connectTimeoutMS == orig(heartbeatSocketSettings.connectTimeoutMS)
heartbeatSocketSettings.connectTimeoutMS == orig(heartbeatSocketSettings.readTimeoutMS)
heartbeatSocketSettings.socketFactory == return.heartbeatSocketSettings.socketFactory
heartbeatSocketSettings.socketFactory == orig(this.heartbeatSocketSettings.socketFactory)
heartbeatSocketSettings.socketFactory == orig(heartbeatSocketSettings.socketFactory)
heartbeatSocketSettings.socketFactory.getClass().getName() == return.heartbeatSocketSettings.socketFactory.getClass().getName()
heartbeatSocketSettings.socketFactory.getClass().getName() == orig(this.heartbeatSocketSettings.socketFactory.getClass().getName())
heartbeatSocketSettings.socketFactory.getClass().getName() == orig(heartbeatSocketSettings.socketFactory.getClass().getName())
return == orig(this)
heartbeatSocketSettings.connectTimeoutMS == 20000
heartbeatSocketSettings.socketFactory has only one value
heartbeatSocketSettings.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
===========================================================================
com.mongodb.ServerSettings:::OBJECT
this.heartbeatSocketSettings.connectTimeoutMS == this.heartbeatSocketSettings.readTimeoutMS
this.heartbeatFrequencyMS == 5000
this.heartbeatConnectRetryFrequencyMS == 10
this.heartbeatSocketSettings != null
this.heartbeatSocketSettings.connectTimeoutMS == 20000
this.heartbeatSocketSettings.socketFactory has only one value
this.heartbeatSocketSettings.socketFactory != null
this.heartbeatSocketSettings.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
===========================================================================
com.mongodb.ServerSettings.ServerSettings(com.mongodb.ServerSettings$Builder):::ENTER
builder.heartbeatSocketSettings.connectTimeoutMS == builder.heartbeatSocketSettings.readTimeoutMS
builder.heartbeatFrequencyMS == 5000
builder.heartbeatConnectRetryFrequencyMS == 10
builder.heartbeatSocketSettings.connectTimeoutMS == 20000
builder.heartbeatSocketSettings.socketFactory has only one value
builder.heartbeatSocketSettings.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
===========================================================================
com.mongodb.ServerSettings.ServerSettings(com.mongodb.ServerSettings$Builder):::EXIT
this.heartbeatFrequencyMS == builder.heartbeatFrequencyMS
this.heartbeatFrequencyMS == orig(builder.heartbeatFrequencyMS)
this.heartbeatConnectRetryFrequencyMS == builder.heartbeatConnectRetryFrequencyMS
this.heartbeatConnectRetryFrequencyMS == orig(builder.heartbeatConnectRetryFrequencyMS)
this.heartbeatSocketSettings == builder.heartbeatSocketSettings
this.heartbeatSocketSettings == orig(builder.heartbeatSocketSettings)
this.heartbeatSocketSettings.connectTimeoutMS == builder.heartbeatSocketSettings.connectTimeoutMS
this.heartbeatSocketSettings.connectTimeoutMS == builder.heartbeatSocketSettings.readTimeoutMS
this.heartbeatSocketSettings.connectTimeoutMS == orig(builder.heartbeatSocketSettings.connectTimeoutMS)
this.heartbeatSocketSettings.connectTimeoutMS == orig(builder.heartbeatSocketSettings.readTimeoutMS)
this.heartbeatSocketSettings.socketFactory == builder.heartbeatSocketSettings.socketFactory
this.heartbeatSocketSettings.socketFactory == orig(builder.heartbeatSocketSettings.socketFactory)
this.heartbeatSocketSettings.socketFactory.getClass().getName() == builder.heartbeatSocketSettings.socketFactory.getClass().getName()
this.heartbeatSocketSettings.socketFactory.getClass().getName() == orig(builder.heartbeatSocketSettings.socketFactory.getClass().getName())
===========================================================================
com.mongodb.ServerSettings.builder():::EXIT
return.heartbeatFrequencyMS == 5000
return.heartbeatConnectRetryFrequencyMS == 10
return.heartbeatSocketSettings.connectTimeoutMS == 0
return.heartbeatSocketSettings.readTimeoutMS == 0
return.heartbeatSocketSettings.socketFactory has only one value
return.heartbeatSocketSettings.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
===========================================================================
com.mongodb.ServerSettings.getHeartbeatConnectRetryFrequency(java.util.concurrent.TimeUnit):::ENTER
this has only one value
this.heartbeatSocketSettings has only one value
timeUnit has only one value
timeUnit != null
===========================================================================
com.mongodb.ServerSettings.getHeartbeatConnectRetryFrequency(java.util.concurrent.TimeUnit):::EXIT
this.heartbeatFrequencyMS == orig(this.heartbeatFrequencyMS)
this.heartbeatConnectRetryFrequencyMS == orig(this.heartbeatConnectRetryFrequencyMS)
this.heartbeatSocketSettings == orig(this.heartbeatSocketSettings)
this.heartbeatSocketSettings.connectTimeoutMS == orig(this.heartbeatSocketSettings.connectTimeoutMS)
this.heartbeatSocketSettings.connectTimeoutMS == orig(this.heartbeatSocketSettings.readTimeoutMS)
this.heartbeatSocketSettings.socketFactory == orig(this.heartbeatSocketSettings.socketFactory)
this.heartbeatSocketSettings.socketFactory.getClass().getName() == orig(this.heartbeatSocketSettings.socketFactory.getClass().getName())
this.heartbeatSocketSettings has only one value
return == 10000000
===========================================================================
com.mongodb.ServerSettings.getHeartbeatFrequency(java.util.concurrent.TimeUnit):::ENTER
timeUnit has only one value
timeUnit != null
===========================================================================
com.mongodb.ServerSettings.getHeartbeatFrequency(java.util.concurrent.TimeUnit):::EXIT
this.heartbeatFrequencyMS == orig(this.heartbeatFrequencyMS)
this.heartbeatConnectRetryFrequencyMS == orig(this.heartbeatConnectRetryFrequencyMS)
this.heartbeatSocketSettings == orig(this.heartbeatSocketSettings)
this.heartbeatSocketSettings.connectTimeoutMS == orig(this.heartbeatSocketSettings.connectTimeoutMS)
this.heartbeatSocketSettings.connectTimeoutMS == orig(this.heartbeatSocketSettings.readTimeoutMS)
this.heartbeatSocketSettings.socketFactory == orig(this.heartbeatSocketSettings.socketFactory)
this.heartbeatSocketSettings.socketFactory.getClass().getName() == orig(this.heartbeatSocketSettings.socketFactory.getClass().getName())
return == 5000000000L
===========================================================================
com.mongodb.ServerSettings.getHeartbeatSocketSettings():::ENTER
===========================================================================
com.mongodb.ServerSettings.getHeartbeatSocketSettings():::EXIT
this.heartbeatFrequencyMS == orig(this.heartbeatFrequencyMS)
this.heartbeatConnectRetryFrequencyMS == orig(this.heartbeatConnectRetryFrequencyMS)
this.heartbeatSocketSettings == return
this.heartbeatSocketSettings.connectTimeoutMS == return.connectTimeoutMS
this.heartbeatSocketSettings.readTimeoutMS == return.connectTimeoutMS
this.heartbeatSocketSettings.socketFactory == return.socketFactory
this.heartbeatSocketSettings.socketFactory.getClass().getName() == return.socketFactory.getClass().getName()
return == orig(this.heartbeatSocketSettings)
return.connectTimeoutMS == return.readTimeoutMS
return.connectTimeoutMS == orig(this.heartbeatSocketSettings.connectTimeoutMS)
return.connectTimeoutMS == orig(this.heartbeatSocketSettings.readTimeoutMS)
return.socketFactory == orig(this.heartbeatSocketSettings.socketFactory)
return.socketFactory.getClass().getName() == orig(this.heartbeatSocketSettings.socketFactory.getClass().getName())
return.connectTimeoutMS == 20000
return.socketFactory has only one value
return.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
===========================================================================
com.mongodb.ServerType$1:::OBJECT
this has only one value
===========================================================================
com.mongodb.ServerType$1.(java.lang.String, int):::ENTER
$hidden$1 has only one value
$hidden$1.toString == "StandAlone"
$hidden$2 == 0
===========================================================================
com.mongodb.ServerType$1.(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString == "StandAlone"
===========================================================================
com.mongodb.ServerType$2:::OBJECT
this has only one value
===========================================================================
com.mongodb.ServerType$2.(java.lang.String, int):::ENTER
$hidden$1 has only one value
$hidden$1.toString == "ReplicaSetPrimary"
$hidden$2 == 1
===========================================================================
com.mongodb.ServerType$2.(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString == "ReplicaSetPrimary"
===========================================================================
com.mongodb.ServerType$3:::OBJECT
this has only one value
===========================================================================
com.mongodb.ServerType$3.(java.lang.String, int):::ENTER
$hidden$1 has only one value
$hidden$1.toString == "ReplicaSetSecondary"
$hidden$2 == 2
===========================================================================
com.mongodb.ServerType$3.(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString == "ReplicaSetSecondary"
===========================================================================
com.mongodb.ServerType$4:::OBJECT
this has only one value
===========================================================================
com.mongodb.ServerType$4.(java.lang.String, int):::ENTER
$hidden$1 has only one value
$hidden$1.toString == "ReplicaSetArbiter"
$hidden$2 == 3
===========================================================================
com.mongodb.ServerType$4.(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString == "ReplicaSetArbiter"
===========================================================================
com.mongodb.ServerType$5:::OBJECT
this has only one value
===========================================================================
com.mongodb.ServerType$5.(java.lang.String, int):::ENTER
$hidden$1 has only one value
$hidden$1.toString == "ReplicaSetOther"
$hidden$2 == 4
===========================================================================
com.mongodb.ServerType$5.(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString == "ReplicaSetOther"
===========================================================================
com.mongodb.ServerType$6:::OBJECT
this has only one value
===========================================================================
com.mongodb.ServerType$6.(java.lang.String, int):::ENTER
$hidden$1 has only one value
$hidden$1.toString == "ReplicaSetGhost"
$hidden$2 == 5
===========================================================================
com.mongodb.ServerType$6.(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString == "ReplicaSetGhost"
===========================================================================
com.mongodb.ServerType$7:::OBJECT
this has only one value
===========================================================================
com.mongodb.ServerType$7.(java.lang.String, int):::ENTER
$hidden$1 has only one value
$hidden$1.toString == "ShardRouter"
$hidden$2 == 6
===========================================================================
com.mongodb.ServerType$7.(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString == "ShardRouter"
===========================================================================
com.mongodb.ServerType$8:::CLASS
com.mongodb.ServerType.StandAlone has only one value
com.mongodb.ServerType.StandAlone != null
com.mongodb.ServerType.StandAlone.getClass().getName() == com.mongodb.ServerType$1.class
com.mongodb.ServerType.ReplicaSetPrimary has only one value
com.mongodb.ServerType.ReplicaSetPrimary != null
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == com.mongodb.ServerType$2.class
com.mongodb.ServerType.ReplicaSetSecondary has only one value
com.mongodb.ServerType.ReplicaSetSecondary != null
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == com.mongodb.ServerType$3.class
com.mongodb.ServerType.ReplicaSetArbiter has only one value
com.mongodb.ServerType.ReplicaSetArbiter != null
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == com.mongodb.ServerType$4.class
com.mongodb.ServerType.ReplicaSetOther has only one value
com.mongodb.ServerType.ReplicaSetOther != null
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == com.mongodb.ServerType$5.class
com.mongodb.ServerType.ReplicaSetGhost has only one value
com.mongodb.ServerType.ReplicaSetGhost != null
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == com.mongodb.ServerType$6.class
com.mongodb.ServerType.ShardRouter has only one value
com.mongodb.ServerType.ShardRouter != null
com.mongodb.ServerType.ShardRouter.getClass().getName() == com.mongodb.ServerType$7.class
com.mongodb.ServerType.Unknown has only one value
com.mongodb.ServerType.Unknown != null
com.mongodb.ServerType.Unknown.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.ServerType.$VALUES has only one value
com.mongodb.ServerType.$VALUES != null
com.mongodb.ServerType.$VALUES.getClass().getName() == com.mongodb.ServerType[].class
com.mongodb.ServerType.$VALUES[] contains no nulls and has only one value, of length 8
com.mongodb.ServerType.$VALUES[] elements != null
com.mongodb.ServerType.$VALUES[].getClass().getName() == [null, null, null, null, null, null, null, null]
com.mongodb.ServerType.$VALUES[].getClass().getName() elements == null
size(com.mongodb.ServerType.$VALUES[]) == 8
===========================================================================
com.mongodb.ServerType$8:::OBJECT
this has only one value
===========================================================================
com.mongodb.ServerType$8.(java.lang.String, int):::ENTER
$hidden$1 has only one value
$hidden$1.toString == "Unknown"
$hidden$2 == 7
===========================================================================
com.mongodb.ServerType$8.(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString == "Unknown"
===========================================================================
com.mongodb.ServerType$8.getClusterType():::ENTER
===========================================================================
com.mongodb.ServerType$8.getClusterType():::EXIT
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
return has only one value
return != null
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.StandAlone != null
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.ReplicaSet != null
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Sharded != null
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.Unknown != null
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES != null
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[] elements != null
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
size(com.mongodb.ClusterType.$VALUES[]) == 4
===========================================================================
com.mongodb.ServerType:::OBJECT
===========================================================================
com.mongodb.ServerType.ServerType(java.lang.String, int):::ENTER
===========================================================================
com.mongodb.ServerType.ServerType(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
com.mongodb.ServerVersion:::OBJECT
this.versionList != null
this.versionList[] contains no nulls and has only one value, of length 3
this.versionList[] elements has only one value
this.versionList[] elements != null
this.versionList[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.versionList[].getClass().getName() elements == java.lang.Integer.class
this.versionList.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
size(this.versionList[]) == 3
===========================================================================
com.mongodb.ServerVersion.ServerVersion():::EXIT
===========================================================================
com.mongodb.ServerVersion.equals(java.lang.Object):::ENTER
o != null
o.getClass().getName() == com.mongodb.ServerVersion.class
===========================================================================
com.mongodb.ServerVersion.equals(java.lang.Object):::EXIT98
===========================================================================
com.mongodb.ServerVersion.equals(java.lang.Object):::EXIT98;condition="return == true"
===========================================================================
com.mongodb.ServerVersion.equals(java.lang.Object):::EXIT
this.versionList == orig(this.versionList)
this.versionList[] == orig(this.versionList[])
this.versionList.getClass().getName() == orig(this.versionList.getClass().getName())
return == true
===========================================================================
com.mongodb.ServerVersion.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
com.mongodb.ServerVersion.toString():::ENTER
===========================================================================
com.mongodb.ServerVersion.toString():::EXIT
this.versionList == orig(this.versionList)
this.versionList[] == orig(this.versionList[])
this.versionList.getClass().getName() == orig(this.versionList.getClass().getName())
return != null
return.toString == "ServerVersion{versionList=[0, 0, 0]}"
===========================================================================
com.mongodb.SingleServerCluster$1:::OBJECT
com.mongodb.SingleServerCluster.LOGGER == com.mongodb.BaseCluster.LOGGER
com.mongodb.SingleServerCluster.LOGGER has only one value
com.mongodb.SingleServerCluster.LOGGER != null
com.mongodb.SingleServerCluster.this.server.getClass().getName() == com.mongodb.DefaultServer.class
com.mongodb.SingleServerCluster.this.phase != null
com.mongodb.SingleServerCluster.this.serverFactory != null
com.mongodb.SingleServerCluster.this.serverFactory.getClass().getName() == com.mongodb.DefaultClusterableServerFactory.class
com.mongodb.SingleServerCluster.this.random != null
com.mongodb.SingleServerCluster.this.clusterId != null
com.mongodb.SingleServerCluster.this.clusterId.toString one of { "1", "2" }
com.mongodb.SingleServerCluster.this.settings != null
com.mongodb.SingleServerCluster.this.settings.hosts != null
com.mongodb.SingleServerCluster.this.settings.hosts[] elements != null
com.mongodb.SingleServerCluster.this.settings.hosts[].getClass().getName() == [com.mongodb.ServerAddress]
com.mongodb.SingleServerCluster.this.settings.hosts[].getClass().getName() elements == com.mongodb.ServerAddress.class
com.mongodb.SingleServerCluster.this.settings.hosts.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
com.mongodb.SingleServerCluster.this.settings.mode has only one value
com.mongodb.SingleServerCluster.this.settings.mode != null
com.mongodb.SingleServerCluster.this.settings.requiredClusterType has only one value
com.mongodb.SingleServerCluster.this.settings.requiredClusterType != null
com.mongodb.SingleServerCluster.this.settings.requiredReplicaSetName == null
com.mongodb.SingleServerCluster.this.clusterListener != null
com.mongodb.SingleServerCluster.this.clusterListener.getClass().getName() == com.mongodb.NoOpClusterListener.class
com.mongodb.SingleServerCluster.this.isClosed == false
com.mongodb.SingleServerCluster.this.description.connectionMode has only one value
com.mongodb.SingleServerCluster.this.description.connectionMode != null
com.mongodb.SingleServerCluster.this.description.type has only one value
com.mongodb.SingleServerCluster.this.description.type != null
com.mongodb.SingleServerCluster.this.description.all != null
com.mongodb.SingleServerCluster.this.description.all.getClass().getName() == java.util.Collections$UnmodifiableSet.class
size(com.mongodb.SingleServerCluster.this.settings.hosts[]) == 1
com.mongodb.SingleServerCluster.this.server.getClass().getName() != com.mongodb.SingleServerCluster.this.serverFactory.getClass().getName()
com.mongodb.SingleServerCluster.this.server.getClass().getName() != com.mongodb.SingleServerCluster.this.settings.hosts.getClass().getName()
com.mongodb.SingleServerCluster.this.server.getClass().getName() != com.mongodb.SingleServerCluster.this.clusterListener.getClass().getName()
com.mongodb.SingleServerCluster.this.server.getClass().getName() != com.mongodb.SingleServerCluster.this.description.all.getClass().getName()
com.mongodb.SingleServerCluster.this.serverFactory.getClass().getName() != com.mongodb.SingleServerCluster.this.settings.hosts.getClass().getName()
com.mongodb.SingleServerCluster.this.serverFactory.getClass().getName() != com.mongodb.SingleServerCluster.this.clusterListener.getClass().getName()
com.mongodb.SingleServerCluster.this.serverFactory.getClass().getName() != com.mongodb.SingleServerCluster.this.description.all.getClass().getName()
com.mongodb.SingleServerCluster.this.settings.hosts.getClass().getName() != com.mongodb.SingleServerCluster.this.clusterListener.getClass().getName()
com.mongodb.SingleServerCluster.this.settings.hosts.getClass().getName() != com.mongodb.SingleServerCluster.this.description.all.getClass().getName()
com.mongodb.SingleServerCluster.this.clusterListener.getClass().getName() != com.mongodb.SingleServerCluster.this.description.all.getClass().getName()
===========================================================================
com.mongodb.SingleServerCluster$1.(com.mongodb.SingleServerCluster):::ENTER
com.mongodb.SingleServerCluster.LOGGER == com.mongodb.BaseCluster.LOGGER
com.mongodb.SingleServerCluster.LOGGER has only one value
com.mongodb.SingleServerCluster.this.server == null
com.mongodb.SingleServerCluster.this.serverFactory.getClass().getName() == com.mongodb.DefaultClusterableServerFactory.class
com.mongodb.SingleServerCluster.this.clusterId.toString one of { "1", "2" }
com.mongodb.SingleServerCluster.this.settings.hosts[].getClass().getName() == [com.mongodb.ServerAddress]
com.mongodb.SingleServerCluster.this.settings.hosts[].getClass().getName() elements == com.mongodb.ServerAddress.class
com.mongodb.SingleServerCluster.this.settings.hosts.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
com.mongodb.SingleServerCluster.this.settings.mode has only one value
com.mongodb.SingleServerCluster.this.settings.requiredClusterType has only one value
com.mongodb.SingleServerCluster.this.settings.requiredReplicaSetName == null
com.mongodb.SingleServerCluster.this.clusterListener.getClass().getName() == com.mongodb.NoOpClusterListener.class
com.mongodb.SingleServerCluster.this.isClosed == false
com.mongodb.SingleServerCluster.this.description == null
size(com.mongodb.SingleServerCluster.this.settings.hosts[]) == 1
===========================================================================
com.mongodb.SingleServerCluster$1.(com.mongodb.SingleServerCluster):::EXIT
com.mongodb.SingleServerCluster.this == orig(com.mongodb.SingleServerCluster.this)
com.mongodb.SingleServerCluster.LOGGER == orig(com.mongodb.SingleServerCluster.LOGGER)
com.mongodb.SingleServerCluster.LOGGER == orig(com.mongodb.BaseCluster.LOGGER)
com.mongodb.SingleServerCluster.this.server == orig(com.mongodb.SingleServerCluster.this.server)
com.mongodb.SingleServerCluster.this.phase == orig(com.mongodb.SingleServerCluster.this.phase)
com.mongodb.SingleServerCluster.this.serverFactory == orig(com.mongodb.SingleServerCluster.this.serverFactory)
com.mongodb.SingleServerCluster.this.serverFactory.getClass().getName() == orig(com.mongodb.SingleServerCluster.this.serverFactory.getClass().getName())
com.mongodb.SingleServerCluster.this.random == orig(com.mongodb.SingleServerCluster.this.random)
com.mongodb.SingleServerCluster.this.clusterId == orig(com.mongodb.SingleServerCluster.this.clusterId)
com.mongodb.SingleServerCluster.this.clusterId.toString == orig(com.mongodb.SingleServerCluster.this.clusterId.toString)
com.mongodb.SingleServerCluster.this.settings == orig(com.mongodb.SingleServerCluster.this.settings)
com.mongodb.SingleServerCluster.this.settings.hosts == orig(com.mongodb.SingleServerCluster.this.settings.hosts)
com.mongodb.SingleServerCluster.this.settings.hosts[] == orig(com.mongodb.SingleServerCluster.this.settings.hosts[])
com.mongodb.SingleServerCluster.this.settings.hosts.getClass().getName() == orig(com.mongodb.SingleServerCluster.this.settings.hosts.getClass().getName())
com.mongodb.SingleServerCluster.this.settings.mode == orig(com.mongodb.SingleServerCluster.this.settings.mode)
com.mongodb.SingleServerCluster.this.settings.requiredClusterType == orig(com.mongodb.SingleServerCluster.this.settings.requiredClusterType)
com.mongodb.SingleServerCluster.this.settings.requiredReplicaSetName == orig(com.mongodb.SingleServerCluster.this.settings.requiredReplicaSetName)
com.mongodb.SingleServerCluster.this.clusterListener == orig(com.mongodb.SingleServerCluster.this.clusterListener)
com.mongodb.SingleServerCluster.this.clusterListener.getClass().getName() == orig(com.mongodb.SingleServerCluster.this.clusterListener.getClass().getName())
com.mongodb.SingleServerCluster.this.isClosed == orig(com.mongodb.SingleServerCluster.this.isClosed)
com.mongodb.SingleServerCluster.this.description == orig(com.mongodb.SingleServerCluster.this.description)
com.mongodb.SingleServerCluster.this.server == null
com.mongodb.SingleServerCluster.this.description == null
===========================================================================
com.mongodb.SingleServerCluster$1.stateChanged(com.mongodb.ChangeEvent):::ENTER
event.oldValue.getClass().getName() == event.newValue.getClass().getName()
com.mongodb.SingleServerCluster.this.server != null
com.mongodb.SingleServerCluster.this.description != null
event != null
event.oldValue != null
event.oldValue.getClass().getName() == com.mongodb.ServerDescription.class
event.newValue != null
com.mongodb.SingleServerCluster.this.server.getClass().getName() != event.oldValue.getClass().getName()
com.mongodb.SingleServerCluster.this.serverFactory.getClass().getName() != event.oldValue.getClass().getName()
com.mongodb.SingleServerCluster.this.settings.hosts.getClass().getName() != event.oldValue.getClass().getName()
com.mongodb.SingleServerCluster.this.clusterListener.getClass().getName() != event.oldValue.getClass().getName()
com.mongodb.SingleServerCluster.this.description.all.getClass().getName() != event.oldValue.getClass().getName()
===========================================================================
com.mongodb.SingleServerCluster$1.stateChanged(com.mongodb.ChangeEvent):::EXIT
com.mongodb.SingleServerCluster.this == orig(com.mongodb.SingleServerCluster.this)
com.mongodb.SingleServerCluster.LOGGER == orig(com.mongodb.SingleServerCluster.LOGGER)
com.mongodb.SingleServerCluster.LOGGER == orig(com.mongodb.BaseCluster.LOGGER)
com.mongodb.SingleServerCluster.this.server == orig(com.mongodb.SingleServerCluster.this.server)
com.mongodb.SingleServerCluster.this.server.getClass().getName() == orig(com.mongodb.SingleServerCluster.this.server.getClass().getName())
com.mongodb.SingleServerCluster.this.phase == orig(com.mongodb.SingleServerCluster.this.phase)
com.mongodb.SingleServerCluster.this.serverFactory == orig(com.mongodb.SingleServerCluster.this.serverFactory)
com.mongodb.SingleServerCluster.this.serverFactory.getClass().getName() == orig(com.mongodb.SingleServerCluster.this.serverFactory.getClass().getName())
com.mongodb.SingleServerCluster.this.random == orig(com.mongodb.SingleServerCluster.this.random)
com.mongodb.SingleServerCluster.this.clusterId == orig(com.mongodb.SingleServerCluster.this.clusterId)
com.mongodb.SingleServerCluster.this.clusterId.toString == orig(com.mongodb.SingleServerCluster.this.clusterId.toString)
com.mongodb.SingleServerCluster.this.settings == orig(com.mongodb.SingleServerCluster.this.settings)
com.mongodb.SingleServerCluster.this.settings.hosts == orig(com.mongodb.SingleServerCluster.this.settings.hosts)
com.mongodb.SingleServerCluster.this.settings.hosts[] == orig(com.mongodb.SingleServerCluster.this.settings.hosts[])
com.mongodb.SingleServerCluster.this.settings.hosts.getClass().getName() == orig(com.mongodb.SingleServerCluster.this.settings.hosts.getClass().getName())
com.mongodb.SingleServerCluster.this.settings.mode == orig(com.mongodb.SingleServerCluster.this.settings.mode)
com.mongodb.SingleServerCluster.this.settings.requiredClusterType == orig(com.mongodb.SingleServerCluster.this.settings.requiredClusterType)
com.mongodb.SingleServerCluster.this.settings.requiredReplicaSetName == orig(com.mongodb.SingleServerCluster.this.settings.requiredReplicaSetName)
com.mongodb.SingleServerCluster.this.clusterListener == orig(com.mongodb.SingleServerCluster.this.clusterListener)
com.mongodb.SingleServerCluster.this.clusterListener.getClass().getName() == orig(com.mongodb.SingleServerCluster.this.clusterListener.getClass().getName())
com.mongodb.SingleServerCluster.this.isClosed == orig(com.mongodb.SingleServerCluster.this.isClosed)
com.mongodb.SingleServerCluster.this.description.connectionMode == orig(com.mongodb.SingleServerCluster.this.description.connectionMode)
com.mongodb.SingleServerCluster.this.description.type == orig(com.mongodb.SingleServerCluster.this.description.type)
com.mongodb.SingleServerCluster.this.description.all.getClass().getName() == orig(com.mongodb.SingleServerCluster.this.description.all.getClass().getName())
event.oldValue == orig(event.oldValue)
event.oldValue.getClass().getName() == event.newValue.getClass().getName()
event.oldValue.getClass().getName() == orig(event.oldValue.getClass().getName())
event.oldValue.getClass().getName() == orig(event.newValue.getClass().getName())
event.newValue == orig(event.newValue)
com.mongodb.SingleServerCluster.this.server != null
com.mongodb.SingleServerCluster.this.description != null
event.oldValue != null
event.oldValue.getClass().getName() == com.mongodb.ServerDescription.class
event.newValue != null
com.mongodb.SingleServerCluster.this.server.getClass().getName() != event.oldValue.getClass().getName()
com.mongodb.SingleServerCluster.this.serverFactory.getClass().getName() != event.oldValue.getClass().getName()
com.mongodb.SingleServerCluster.this.settings.hosts.getClass().getName() != event.oldValue.getClass().getName()
com.mongodb.SingleServerCluster.this.clusterListener.getClass().getName() != event.oldValue.getClass().getName()
com.mongodb.SingleServerCluster.this.description.all.getClass().getName() != event.oldValue.getClass().getName()
===========================================================================
com.mongodb.SingleServerCluster:::CLASS
com.mongodb.SingleServerCluster.LOGGER == com.mongodb.BaseCluster.LOGGER
com.mongodb.SingleServerCluster.LOGGER has only one value
com.mongodb.SingleServerCluster.LOGGER != null
===========================================================================
com.mongodb.SingleServerCluster:::OBJECT
this.settings.mode == com.mongodb.ClusterConnectionMode.Single
com.mongodb.ClusterConnectionMode.Single == this.description.connectionMode
this.settings.requiredClusterType == com.mongodb.ClusterType.Unknown
com.mongodb.ClusterType.Unknown == this.description.type
this.server != null
this.server.getClass().getName() == com.mongodb.DefaultServer.class
this.phase != null
this.serverFactory != null
this.serverFactory.getClass().getName() == com.mongodb.DefaultClusterableServerFactory.class
this.random != null
this.clusterId != null
this.clusterId.toString one of { "1", "2" }
this.settings != null
this.settings.hosts != null
this.settings.hosts[] elements != null
this.settings.hosts[].getClass().getName() == [com.mongodb.ServerAddress]
this.settings.hosts[].getClass().getName() elements == com.mongodb.ServerAddress.class
this.settings.hosts.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Single != null
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.Multiple != null
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES != null
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[] elements != null
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.StandAlone != null
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.ReplicaSet != null
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Sharded != null
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.Unknown != null
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES != null
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[] elements != null
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
this.settings.requiredReplicaSetName == null
this.clusterListener != null
this.clusterListener.getClass().getName() == com.mongodb.NoOpClusterListener.class
this.isClosed == false
this.description.connectionMode has only one value
this.description.connectionMode != null
this.description.type has only one value
this.description.type != null
this.description.all != null
this.description.all.getClass().getName() == java.util.Collections$UnmodifiableSet.class
size(this.settings.hosts[]) == 1
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
this.server.getClass().getName() != this.serverFactory.getClass().getName()
this.server.getClass().getName() != this.settings.hosts.getClass().getName()
this.server.getClass().getName() != com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName()
this.server.getClass().getName() != com.mongodb.ClusterType.$VALUES.getClass().getName()
this.server.getClass().getName() != this.clusterListener.getClass().getName()
this.server.getClass().getName() != this.description.all.getClass().getName()
this.serverFactory.getClass().getName() != this.settings.hosts.getClass().getName()
this.serverFactory.getClass().getName() != com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName()
this.serverFactory.getClass().getName() != com.mongodb.ClusterType.$VALUES.getClass().getName()
this.serverFactory.getClass().getName() != this.clusterListener.getClass().getName()
this.serverFactory.getClass().getName() != this.description.all.getClass().getName()
this.settings.hosts.getClass().getName() != com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName()
this.settings.hosts.getClass().getName() != com.mongodb.ClusterType.$VALUES.getClass().getName()
this.settings.hosts.getClass().getName() != this.clusterListener.getClass().getName()
this.settings.hosts.getClass().getName() != this.description.all.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ClusterType.$VALUES.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != this.clusterListener.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != this.description.all.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != this.clusterListener.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != this.description.all.getClass().getName()
this.clusterListener.getClass().getName() != this.description.all.getClass().getName()
===========================================================================
com.mongodb.SingleServerCluster.SingleServerCluster(java.lang.String, com.mongodb.ClusterSettings, com.mongodb.ClusterableServerFactory, com.mongodb.ClusterListener):::ENTER
settings.mode == com.mongodb.ClusterConnectionMode.Single
settings.requiredClusterType == com.mongodb.ClusterType.Unknown
clusterId.toString one of { "1", "2" }
settings.hosts[].getClass().getName() == [com.mongodb.ServerAddress]
settings.hosts[].getClass().getName() elements == com.mongodb.ServerAddress.class
settings.hosts.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
com.mongodb.ClusterConnectionMode.Single has only one value
com.mongodb.ClusterConnectionMode.Multiple has only one value
com.mongodb.ClusterConnectionMode.$VALUES has only one value
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == com.mongodb.ClusterConnectionMode[].class
com.mongodb.ClusterConnectionMode.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() == [com.mongodb.ClusterConnectionMode, com.mongodb.ClusterConnectionMode]
com.mongodb.ClusterConnectionMode.$VALUES[].getClass().getName() elements == com.mongodb.ClusterConnectionMode.class
com.mongodb.ClusterType.StandAlone has only one value
com.mongodb.ClusterType.ReplicaSet has only one value
com.mongodb.ClusterType.Sharded has only one value
com.mongodb.ClusterType.Unknown has only one value
com.mongodb.ClusterType.$VALUES has only one value
com.mongodb.ClusterType.$VALUES.getClass().getName() == com.mongodb.ClusterType[].class
com.mongodb.ClusterType.$VALUES[] contains no nulls and has only one value, of length 4
com.mongodb.ClusterType.$VALUES[].getClass().getName() == [com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType, com.mongodb.ClusterType]
com.mongodb.ClusterType.$VALUES[].getClass().getName() elements == com.mongodb.ClusterType.class
settings.requiredReplicaSetName == null
serverFactory.getClass().getName() == com.mongodb.DefaultClusterableServerFactory.class
clusterListener.getClass().getName() == com.mongodb.NoOpClusterListener.class
size(settings.hosts[]) == 1
size(com.mongodb.ClusterConnectionMode.$VALUES[]) == 2
size(com.mongodb.ClusterType.$VALUES[]) == 4
===========================================================================
com.mongodb.SingleServerCluster.SingleServerCluster(java.lang.String, com.mongodb.ClusterSettings, com.mongodb.ClusterableServerFactory, com.mongodb.ClusterListener):::EXIT
this.serverFactory == orig(serverFactory)
this.serverFactory.getClass().getName() == orig(serverFactory.getClass().getName())
this.clusterId == orig(clusterId)
this.settings == orig(settings)
this.settings.hosts == settings.hosts
this.settings.hosts.getClass().getName() == settings.hosts.getClass().getName()
com.mongodb.ClusterConnectionMode.Single == settings.mode
com.mongodb.ClusterConnectionMode.Single == orig(settings.mode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == settings.requiredClusterType
com.mongodb.ClusterType.Unknown == orig(settings.requiredClusterType)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.clusterListener == orig(clusterListener)
this.clusterListener.getClass().getName() == orig(clusterListener.getClass().getName())
clusterId.toString == orig(clusterId.toString)
settings.hosts == orig(settings.hosts)
settings.hosts[] == orig(settings.hosts[])
settings.hosts.getClass().getName() == orig(settings.hosts.getClass().getName())
settings.requiredReplicaSetName == orig(settings.requiredReplicaSetName)
clusterId.toString one of { "1", "2" }
settings.hosts[].getClass().getName() == [com.mongodb.ServerAddress]
settings.hosts[].getClass().getName() elements == com.mongodb.ServerAddress.class
settings.hosts.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
settings.requiredReplicaSetName == null
size(settings.hosts[]) == 1
===========================================================================
com.mongodb.SingleServerCluster.connect():::ENTER
this has only one value
this.server has only one value
this.phase has only one value
this.serverFactory has only one value
this.random has only one value
this.clusterId has only one value
this.clusterId.toString == "2"
this.settings has only one value
this.settings.hosts has only one value
this.settings.hosts[] contains no nulls and has only one value, of length 1
this.settings.hosts[] elements has only one value
this.clusterListener has only one value
this.description != null
===========================================================================
com.mongodb.SingleServerCluster.connect():::EXIT
com.mongodb.SingleServerCluster.LOGGER == orig(com.mongodb.SingleServerCluster.LOGGER)
com.mongodb.SingleServerCluster.LOGGER == orig(com.mongodb.BaseCluster.LOGGER)
this.server == orig(this.server)
this.server.getClass().getName() == orig(this.server.getClass().getName())
this.phase == orig(this.phase)
this.serverFactory == orig(this.serverFactory)
this.serverFactory.getClass().getName() == orig(this.serverFactory.getClass().getName())
this.random == orig(this.random)
this.clusterId == orig(this.clusterId)
this.clusterId.toString == orig(this.clusterId.toString)
this.settings == orig(this.settings)
this.settings.hosts == orig(this.settings.hosts)
this.settings.hosts[] == orig(this.settings.hosts[])
this.settings.hosts.getClass().getName() == orig(this.settings.hosts.getClass().getName())
com.mongodb.ClusterConnectionMode.Single == orig(this.settings.mode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Single == orig(this.description.connectionMode)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(this.settings.requiredClusterType)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.Unknown == orig(this.description.type)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.settings.requiredReplicaSetName == orig(this.settings.requiredReplicaSetName)
this.clusterListener == orig(this.clusterListener)
this.clusterListener.getClass().getName() == orig(this.clusterListener.getClass().getName())
this.isClosed == orig(this.isClosed)
this.description == orig(this.description)
this.description.all == orig(this.description.all)
this.description.all.getClass().getName() == orig(this.description.all.getClass().getName())
this.server has only one value
this.phase has only one value
this.serverFactory has only one value
this.random has only one value
this.clusterId has only one value
this.clusterId.toString == "2"
this.settings has only one value
this.settings.hosts has only one value
this.settings.hosts[] contains no nulls and has only one value, of length 1
this.settings.hosts[] elements has only one value
this.clusterListener has only one value
this.description != null
===========================================================================
com.mongodb.SingleServerCluster.publishDescription(com.mongodb.ServerDescription):::ENTER
this.settings.hosts.getClass().getName() == serverDescription.version.versionList.getClass().getName()
serverDescription.type == com.mongodb.ServerType.Unknown
serverDescription.type.getClass().getName() == com.mongodb.ServerType.Unknown.getClass().getName()
serverDescription.hosts == serverDescription.passives
serverDescription.hosts == serverDescription.arbiters
serverDescription.hosts.getClass().getName() == serverDescription.passives.getClass().getName()
serverDescription.hosts.getClass().getName() == serverDescription.arbiters.getClass().getName()
serverDescription.state == com.mongodb.ServerConnectionState.Connecting
serverDescription != null
serverDescription.address != null
serverDescription.address._host has only one value
serverDescription.address._host != null
serverDescription.address._host.toString == "localhost"
serverDescription.address._port == 27017
com.mongodb.ServerType.StandAlone has only one value
com.mongodb.ServerType.StandAlone != null
com.mongodb.ServerType.StandAlone.getClass().getName() == com.mongodb.ServerType$1.class
com.mongodb.ServerType.ReplicaSetPrimary has only one value
com.mongodb.ServerType.ReplicaSetPrimary != null
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == com.mongodb.ServerType$2.class
com.mongodb.ServerType.ReplicaSetSecondary has only one value
com.mongodb.ServerType.ReplicaSetSecondary != null
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == com.mongodb.ServerType$3.class
com.mongodb.ServerType.ReplicaSetArbiter has only one value
com.mongodb.ServerType.ReplicaSetArbiter != null
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == com.mongodb.ServerType$4.class
com.mongodb.ServerType.ReplicaSetOther has only one value
com.mongodb.ServerType.ReplicaSetOther != null
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == com.mongodb.ServerType$5.class
com.mongodb.ServerType.ReplicaSetGhost has only one value
com.mongodb.ServerType.ReplicaSetGhost != null
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == com.mongodb.ServerType$6.class
com.mongodb.ServerType.ShardRouter has only one value
com.mongodb.ServerType.ShardRouter != null
com.mongodb.ServerType.ShardRouter.getClass().getName() == com.mongodb.ServerType$7.class
com.mongodb.ServerType.Unknown has only one value
com.mongodb.ServerType.Unknown != null
com.mongodb.ServerType.Unknown.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.ServerType.$VALUES has only one value
com.mongodb.ServerType.$VALUES != null
com.mongodb.ServerType.$VALUES.getClass().getName() == com.mongodb.ServerType[].class
com.mongodb.ServerType.$VALUES[] contains no nulls and has only one value, of length 8
com.mongodb.ServerType.$VALUES[] elements != null
com.mongodb.ServerType.$VALUES[].getClass().getName() == [null, null, null, null, null, null, null, null]
com.mongodb.ServerType.$VALUES[].getClass().getName() elements == null
serverDescription.hosts has only one value
serverDescription.hosts != null
serverDescription.hosts.getClass().getName() == java.util.Collections$EmptySet.class
serverDescription.primary == null
serverDescription.maxDocumentSize == 16777216
serverDescription.maxWriteBatchSize == 512
serverDescription.maxMessageSize == 33554432
serverDescription.tags != null
serverDescription.tags.frozen == true
serverDescription.tags.wrapped != null
serverDescription.tags.wrapped.getClass().getName() == java.util.HashMap.class
serverDescription.setName == null
serverDescription.averageLatencyNanos == 0
serverDescription.ok == false
com.mongodb.ServerConnectionState.Connecting has only one value
com.mongodb.ServerConnectionState.Connecting != null
com.mongodb.ServerConnectionState.Connected has only one value
com.mongodb.ServerConnectionState.Connected != null
com.mongodb.ServerConnectionState.$VALUES has only one value
com.mongodb.ServerConnectionState.$VALUES != null
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == com.mongodb.ServerConnectionState[].class
com.mongodb.ServerConnectionState.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ServerConnectionState.$VALUES[] elements != null
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() == [com.mongodb.ServerConnectionState, com.mongodb.ServerConnectionState]
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() elements == com.mongodb.ServerConnectionState.class
serverDescription.version != null
serverDescription.version.versionList != null
serverDescription.version.versionList[] contains no nulls and has only one value, of length 3
serverDescription.version.versionList[] elements has only one value
serverDescription.version.versionList[] elements != null
serverDescription.version.versionList[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
serverDescription.version.versionList[].getClass().getName() elements == java.lang.Integer.class
serverDescription.minWireVersion == 0
serverDescription.maxWireVersion == 0
size(com.mongodb.ServerType.$VALUES[]) == 8
size(com.mongodb.ServerConnectionState.$VALUES[]) == 2
size(serverDescription.version.versionList[]) == 3
this.server.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
this.server.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
this.server.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
this.server.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
this.server.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
this.server.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
this.server.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
this.server.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
this.server.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
this.server.getClass().getName() != serverDescription.hosts.getClass().getName()
this.server.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
this.server.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
this.serverFactory.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
this.serverFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
this.serverFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
this.serverFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
this.serverFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
this.serverFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
this.serverFactory.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
this.serverFactory.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
this.serverFactory.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
this.serverFactory.getClass().getName() != serverDescription.hosts.getClass().getName()
this.serverFactory.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
this.serverFactory.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
this.settings.hosts.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
this.settings.hosts.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
this.settings.hosts.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
this.settings.hosts.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
this.settings.hosts.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
this.settings.hosts.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
this.settings.hosts.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
this.settings.hosts.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
this.settings.hosts.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
this.settings.hosts.getClass().getName() != serverDescription.hosts.getClass().getName()
this.settings.hosts.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
this.settings.hosts.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
this.clusterListener.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
this.clusterListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
this.clusterListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
this.clusterListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
this.clusterListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
this.clusterListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
this.clusterListener.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
this.clusterListener.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
this.clusterListener.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
this.clusterListener.getClass().getName() != serverDescription.hosts.getClass().getName()
this.clusterListener.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
this.clusterListener.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
this.description.all.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
this.description.all.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
this.description.all.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
this.description.all.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
this.description.all.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
this.description.all.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
this.description.all.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
this.description.all.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
this.description.all.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
this.description.all.getClass().getName() != serverDescription.hosts.getClass().getName()
this.description.all.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
this.description.all.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
serverDescription.hosts.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
serverDescription.hosts.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
serverDescription.tags.wrapped.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
===========================================================================
com.mongodb.SingleServerCluster.publishDescription(com.mongodb.ServerDescription):::EXIT
com.mongodb.SingleServerCluster.LOGGER == orig(com.mongodb.SingleServerCluster.LOGGER)
com.mongodb.SingleServerCluster.LOGGER == orig(com.mongodb.BaseCluster.LOGGER)
this.server == orig(this.server)
this.server.getClass().getName() == orig(this.server.getClass().getName())
this.phase == orig(this.phase)
this.serverFactory == orig(this.serverFactory)
this.serverFactory.getClass().getName() == orig(this.serverFactory.getClass().getName())
this.random == orig(this.random)
this.clusterId == orig(this.clusterId)
this.clusterId.toString == orig(this.clusterId.toString)
this.settings == orig(this.settings)
this.settings.hosts == orig(this.settings.hosts)
this.settings.hosts[] == orig(this.settings.hosts[])
this.settings.hosts.getClass().getName() == serverDescription.version.versionList.getClass().getName()
this.settings.hosts.getClass().getName() == orig(this.settings.hosts.getClass().getName())
this.settings.hosts.getClass().getName() == orig(serverDescription.version.versionList.getClass().getName())
com.mongodb.ClusterConnectionMode.Single == orig(this.settings.mode)
com.mongodb.ClusterConnectionMode.Single == orig(com.mongodb.ClusterConnectionMode.Single)
com.mongodb.ClusterConnectionMode.Single == orig(this.description.connectionMode)
com.mongodb.ClusterConnectionMode.Multiple == orig(com.mongodb.ClusterConnectionMode.Multiple)
com.mongodb.ClusterConnectionMode.$VALUES == orig(com.mongodb.ClusterConnectionMode.$VALUES)
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() == orig(com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES[] == orig(com.mongodb.ClusterConnectionMode.$VALUES[])
com.mongodb.ClusterType.StandAlone == orig(com.mongodb.ClusterType.StandAlone)
com.mongodb.ClusterType.ReplicaSet == orig(com.mongodb.ClusterType.ReplicaSet)
com.mongodb.ClusterType.Sharded == orig(com.mongodb.ClusterType.Sharded)
com.mongodb.ClusterType.Unknown == orig(this.settings.requiredClusterType)
com.mongodb.ClusterType.Unknown == orig(com.mongodb.ClusterType.Unknown)
com.mongodb.ClusterType.Unknown == orig(this.description.type)
com.mongodb.ClusterType.$VALUES == orig(com.mongodb.ClusterType.$VALUES)
com.mongodb.ClusterType.$VALUES.getClass().getName() == orig(com.mongodb.ClusterType.$VALUES.getClass().getName())
com.mongodb.ClusterType.$VALUES[] == orig(com.mongodb.ClusterType.$VALUES[])
this.settings.requiredReplicaSetName == orig(this.settings.requiredReplicaSetName)
this.clusterListener == orig(this.clusterListener)
this.clusterListener.getClass().getName() == orig(this.clusterListener.getClass().getName())
this.isClosed == orig(this.isClosed)
this.description.all.getClass().getName() == orig(this.description.all.getClass().getName())
serverDescription.address == orig(serverDescription.address)
serverDescription.address._host == orig(serverDescription.address._host)
serverDescription.address._host.toString == orig(serverDescription.address._host.toString)
serverDescription.address._port == orig(serverDescription.address._port)
serverDescription.type == com.mongodb.ServerType.Unknown
serverDescription.type.getClass().getName() == com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.StandAlone == orig(com.mongodb.ServerType.StandAlone)
com.mongodb.ServerType.StandAlone.getClass().getName() == orig(com.mongodb.ServerType.StandAlone.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary == orig(com.mongodb.ServerType.ReplicaSetPrimary)
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary == orig(com.mongodb.ServerType.ReplicaSetSecondary)
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter == orig(com.mongodb.ServerType.ReplicaSetArbiter)
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther == orig(com.mongodb.ServerType.ReplicaSetOther)
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetOther.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost == orig(com.mongodb.ServerType.ReplicaSetGhost)
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == orig(com.mongodb.ServerType.ReplicaSetGhost.getClass().getName())
com.mongodb.ServerType.ShardRouter == orig(com.mongodb.ServerType.ShardRouter)
com.mongodb.ServerType.ShardRouter.getClass().getName() == orig(com.mongodb.ServerType.ShardRouter.getClass().getName())
com.mongodb.ServerType.Unknown == orig(serverDescription.type)
com.mongodb.ServerType.Unknown == orig(com.mongodb.ServerType.Unknown)
com.mongodb.ServerType.Unknown.getClass().getName() == orig(serverDescription.type.getClass().getName())
com.mongodb.ServerType.Unknown.getClass().getName() == orig(com.mongodb.ServerType.Unknown.getClass().getName())
com.mongodb.ServerType.$VALUES == orig(com.mongodb.ServerType.$VALUES)
com.mongodb.ServerType.$VALUES.getClass().getName() == orig(com.mongodb.ServerType.$VALUES.getClass().getName())
com.mongodb.ServerType.$VALUES[] == orig(com.mongodb.ServerType.$VALUES[])
serverDescription.hosts == serverDescription.passives
serverDescription.hosts == serverDescription.arbiters
serverDescription.hosts == orig(serverDescription.hosts)
serverDescription.hosts == orig(serverDescription.passives)
serverDescription.hosts == orig(serverDescription.arbiters)
serverDescription.hosts.getClass().getName() == serverDescription.passives.getClass().getName()
serverDescription.hosts.getClass().getName() == serverDescription.arbiters.getClass().getName()
serverDescription.hosts.getClass().getName() == orig(serverDescription.hosts.getClass().getName())
serverDescription.hosts.getClass().getName() == orig(serverDescription.passives.getClass().getName())
serverDescription.hosts.getClass().getName() == orig(serverDescription.arbiters.getClass().getName())
serverDescription.primary == orig(serverDescription.primary)
serverDescription.maxDocumentSize == orig(serverDescription.maxDocumentSize)
serverDescription.maxWriteBatchSize == orig(serverDescription.maxWriteBatchSize)
serverDescription.maxMessageSize == orig(serverDescription.maxMessageSize)
serverDescription.tags == orig(serverDescription.tags)
serverDescription.tags.frozen == orig(serverDescription.tags.frozen)
serverDescription.tags.wrapped == orig(serverDescription.tags.wrapped)
serverDescription.tags.wrapped.getClass().getName() == orig(serverDescription.tags.wrapped.getClass().getName())
serverDescription.setName == orig(serverDescription.setName)
serverDescription.averageLatencyNanos == orig(serverDescription.averageLatencyNanos)
serverDescription.ok == orig(serverDescription.ok)
serverDescription.state == com.mongodb.ServerConnectionState.Connecting
com.mongodb.ServerConnectionState.Connecting == orig(serverDescription.state)
com.mongodb.ServerConnectionState.Connecting == orig(com.mongodb.ServerConnectionState.Connecting)
com.mongodb.ServerConnectionState.Connected == orig(com.mongodb.ServerConnectionState.Connected)
com.mongodb.ServerConnectionState.$VALUES == orig(com.mongodb.ServerConnectionState.$VALUES)
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == orig(com.mongodb.ServerConnectionState.$VALUES.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES[] == orig(com.mongodb.ServerConnectionState.$VALUES[])
serverDescription.version == orig(serverDescription.version)
serverDescription.version.versionList == orig(serverDescription.version.versionList)
serverDescription.version.versionList[] == orig(serverDescription.version.versionList[])
serverDescription.minWireVersion == orig(serverDescription.minWireVersion)
serverDescription.maxWireVersion == orig(serverDescription.maxWireVersion)
this.description != null
serverDescription.address != null
serverDescription.address._host has only one value
serverDescription.address._host != null
serverDescription.address._host.toString == "localhost"
serverDescription.address._port == 27017
com.mongodb.ServerType.StandAlone has only one value
com.mongodb.ServerType.StandAlone != null
com.mongodb.ServerType.StandAlone.getClass().getName() == com.mongodb.ServerType$1.class
com.mongodb.ServerType.ReplicaSetPrimary has only one value
com.mongodb.ServerType.ReplicaSetPrimary != null
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() == com.mongodb.ServerType$2.class
com.mongodb.ServerType.ReplicaSetSecondary has only one value
com.mongodb.ServerType.ReplicaSetSecondary != null
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() == com.mongodb.ServerType$3.class
com.mongodb.ServerType.ReplicaSetArbiter has only one value
com.mongodb.ServerType.ReplicaSetArbiter != null
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() == com.mongodb.ServerType$4.class
com.mongodb.ServerType.ReplicaSetOther has only one value
com.mongodb.ServerType.ReplicaSetOther != null
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() == com.mongodb.ServerType$5.class
com.mongodb.ServerType.ReplicaSetGhost has only one value
com.mongodb.ServerType.ReplicaSetGhost != null
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() == com.mongodb.ServerType$6.class
com.mongodb.ServerType.ShardRouter has only one value
com.mongodb.ServerType.ShardRouter != null
com.mongodb.ServerType.ShardRouter.getClass().getName() == com.mongodb.ServerType$7.class
com.mongodb.ServerType.Unknown has only one value
com.mongodb.ServerType.Unknown != null
com.mongodb.ServerType.Unknown.getClass().getName() == com.mongodb.ServerType$8.class
com.mongodb.ServerType.$VALUES has only one value
com.mongodb.ServerType.$VALUES != null
com.mongodb.ServerType.$VALUES.getClass().getName() == com.mongodb.ServerType[].class
com.mongodb.ServerType.$VALUES[] contains no nulls and has only one value, of length 8
com.mongodb.ServerType.$VALUES[] elements != null
com.mongodb.ServerType.$VALUES[].getClass().getName() == [null, null, null, null, null, null, null, null]
com.mongodb.ServerType.$VALUES[].getClass().getName() elements == null
serverDescription.hosts has only one value
serverDescription.hosts != null
serverDescription.hosts.getClass().getName() == java.util.Collections$EmptySet.class
serverDescription.primary == null
serverDescription.maxDocumentSize == 16777216
serverDescription.maxWriteBatchSize == 512
serverDescription.maxMessageSize == 33554432
serverDescription.tags != null
serverDescription.tags.frozen == true
serverDescription.tags.wrapped != null
serverDescription.tags.wrapped.getClass().getName() == java.util.HashMap.class
serverDescription.setName == null
serverDescription.averageLatencyNanos == 0
serverDescription.ok == false
com.mongodb.ServerConnectionState.Connecting has only one value
com.mongodb.ServerConnectionState.Connecting != null
com.mongodb.ServerConnectionState.Connected has only one value
com.mongodb.ServerConnectionState.Connected != null
com.mongodb.ServerConnectionState.$VALUES has only one value
com.mongodb.ServerConnectionState.$VALUES != null
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() == com.mongodb.ServerConnectionState[].class
com.mongodb.ServerConnectionState.$VALUES[] contains no nulls and has only one value, of length 2
com.mongodb.ServerConnectionState.$VALUES[] elements != null
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() == [com.mongodb.ServerConnectionState, com.mongodb.ServerConnectionState]
com.mongodb.ServerConnectionState.$VALUES[].getClass().getName() elements == com.mongodb.ServerConnectionState.class
serverDescription.version != null
serverDescription.version.versionList != null
serverDescription.version.versionList[] contains no nulls and has only one value, of length 3
serverDescription.version.versionList[] elements has only one value
serverDescription.version.versionList[] elements != null
serverDescription.version.versionList[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
serverDescription.version.versionList[].getClass().getName() elements == java.lang.Integer.class
serverDescription.minWireVersion == 0
serverDescription.maxWireVersion == 0
size(com.mongodb.ServerType.$VALUES[]) == 8
size(com.mongodb.ServerConnectionState.$VALUES[]) == 2
size(serverDescription.version.versionList[]) == 3
this.server.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
this.server.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
this.server.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
this.server.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
this.server.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
this.server.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
this.server.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
this.server.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
this.server.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
this.server.getClass().getName() != serverDescription.hosts.getClass().getName()
this.server.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
this.server.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
this.server.getClass().getName() != orig(this.description.all.getClass().getName())
this.serverFactory.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
this.serverFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
this.serverFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
this.serverFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
this.serverFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
this.serverFactory.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
this.serverFactory.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
this.serverFactory.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
this.serverFactory.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
this.serverFactory.getClass().getName() != serverDescription.hosts.getClass().getName()
this.serverFactory.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
this.serverFactory.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
this.serverFactory.getClass().getName() != orig(this.description.all.getClass().getName())
this.settings.hosts.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
this.settings.hosts.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
this.settings.hosts.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
this.settings.hosts.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
this.settings.hosts.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
this.settings.hosts.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
this.settings.hosts.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
this.settings.hosts.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
this.settings.hosts.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
this.settings.hosts.getClass().getName() != serverDescription.hosts.getClass().getName()
this.settings.hosts.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
this.settings.hosts.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
this.settings.hosts.getClass().getName() != orig(this.description.all.getClass().getName())
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ClusterConnectionMode.$VALUES.getClass().getName() != orig(this.description.all.getClass().getName())
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ClusterType.$VALUES.getClass().getName() != orig(this.description.all.getClass().getName())
this.clusterListener.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
this.clusterListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
this.clusterListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
this.clusterListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
this.clusterListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
this.clusterListener.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
this.clusterListener.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
this.clusterListener.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
this.clusterListener.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
this.clusterListener.getClass().getName() != serverDescription.hosts.getClass().getName()
this.clusterListener.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
this.clusterListener.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
this.clusterListener.getClass().getName() != orig(this.description.all.getClass().getName())
this.description.all.getClass().getName() != com.mongodb.ServerType.StandAlone.getClass().getName()
this.description.all.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
this.description.all.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
this.description.all.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
this.description.all.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
this.description.all.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
this.description.all.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
this.description.all.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
this.description.all.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
this.description.all.getClass().getName() != serverDescription.hosts.getClass().getName()
this.description.all.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
this.description.all.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.StandAlone.getClass().getName() != orig(this.description.all.getClass().getName())
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetPrimary.getClass().getName() != orig(this.description.all.getClass().getName())
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetSecondary.getClass().getName() != orig(this.description.all.getClass().getName())
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ReplicaSetOther.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetArbiter.getClass().getName() != orig(this.description.all.getClass().getName())
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.ReplicaSetGhost.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetOther.getClass().getName() != orig(this.description.all.getClass().getName())
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.ShardRouter.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ReplicaSetGhost.getClass().getName() != orig(this.description.all.getClass().getName())
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerType.Unknown.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.ShardRouter.getClass().getName() != orig(this.description.all.getClass().getName())
com.mongodb.ServerType.Unknown.getClass().getName() != com.mongodb.ServerType.$VALUES.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.Unknown.getClass().getName() != orig(this.description.all.getClass().getName())
com.mongodb.ServerType.$VALUES.getClass().getName() != serverDescription.hosts.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
com.mongodb.ServerType.$VALUES.getClass().getName() != orig(this.description.all.getClass().getName())
serverDescription.hosts.getClass().getName() != serverDescription.tags.wrapped.getClass().getName()
serverDescription.hosts.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
serverDescription.hosts.getClass().getName() != orig(this.description.all.getClass().getName())
serverDescription.tags.wrapped.getClass().getName() != com.mongodb.ServerConnectionState.$VALUES.getClass().getName()
serverDescription.tags.wrapped.getClass().getName() != orig(this.description.all.getClass().getName())
com.mongodb.ServerConnectionState.$VALUES.getClass().getName() != orig(this.description.all.getClass().getName())
===========================================================================
com.mongodb.SocketSettings$Builder:::OBJECT
this.connectTimeoutMS one of { 0, 20000 }
this.readTimeoutMS one of { 0, 20000 }
this.socketFactory has only one value
this.socketFactory != null
this.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
this.connectTimeoutMS >= this.readTimeoutMS
===========================================================================
com.mongodb.SocketSettings$Builder.Builder():::EXIT
this.connectTimeoutMS == this.readTimeoutMS
this.connectTimeoutMS == 0
===========================================================================
com.mongodb.SocketSettings$Builder.build():::ENTER
this.connectTimeoutMS == this.readTimeoutMS
===========================================================================
com.mongodb.SocketSettings$Builder.build():::EXIT
this.connectTimeoutMS == this.readTimeoutMS
this.connectTimeoutMS == return.connectTimeoutMS
this.connectTimeoutMS == return.readTimeoutMS
this.connectTimeoutMS == orig(this.connectTimeoutMS)
this.connectTimeoutMS == orig(this.readTimeoutMS)
this.socketFactory == return.socketFactory
this.socketFactory == orig(this.socketFactory)
this.socketFactory.getClass().getName() == return.socketFactory.getClass().getName()
this.socketFactory.getClass().getName() == orig(this.socketFactory.getClass().getName())
===========================================================================
com.mongodb.SocketSettings$Builder.connectTimeout(int, java.util.concurrent.TimeUnit):::ENTER
this.connectTimeoutMS == this.readTimeoutMS
this.connectTimeoutMS == 0
connectTimeout == 20000
timeUnit has only one value
===========================================================================
com.mongodb.SocketSettings$Builder.connectTimeout(int, java.util.concurrent.TimeUnit):::EXIT
this.connectTimeoutMS == return.connectTimeoutMS
this.connectTimeoutMS == orig(connectTimeout)
this.readTimeoutMS == orig(this.connectTimeoutMS)
this.readTimeoutMS == orig(this.readTimeoutMS)
this.socketFactory == return.socketFactory
this.socketFactory == orig(this.socketFactory)
this.socketFactory.getClass().getName() == return.socketFactory.getClass().getName()
this.socketFactory.getClass().getName() == orig(this.socketFactory.getClass().getName())
return == orig(this)
this.connectTimeoutMS == 20000
this.readTimeoutMS == 0
return.readTimeoutMS == 0
===========================================================================
com.mongodb.SocketSettings$Builder.readTimeout(int, java.util.concurrent.TimeUnit):::ENTER
this.connectTimeoutMS == readTimeout
this.connectTimeoutMS == 20000
this.readTimeoutMS == 0
timeUnit has only one value
===========================================================================
com.mongodb.SocketSettings$Builder.readTimeout(int, java.util.concurrent.TimeUnit):::EXIT
this.connectTimeoutMS == this.readTimeoutMS
this.connectTimeoutMS == return.connectTimeoutMS
this.connectTimeoutMS == return.readTimeoutMS
this.connectTimeoutMS == orig(this.connectTimeoutMS)
this.connectTimeoutMS == orig(readTimeout)
this.socketFactory == return.socketFactory
this.socketFactory == orig(this.socketFactory)
this.socketFactory.getClass().getName() == return.socketFactory.getClass().getName()
this.socketFactory.getClass().getName() == orig(this.socketFactory.getClass().getName())
return == orig(this)
this.connectTimeoutMS == 20000
===========================================================================
com.mongodb.SocketSettings$Builder.socketFactory(javax.net.SocketFactory):::ENTER
this.connectTimeoutMS == this.readTimeoutMS
this.socketFactory == socketFactory
this.socketFactory.getClass().getName() == socketFactory.getClass().getName()
this.connectTimeoutMS == 20000
===========================================================================
com.mongodb.SocketSettings$Builder.socketFactory(javax.net.SocketFactory):::EXIT
this.connectTimeoutMS == this.readTimeoutMS
this.connectTimeoutMS == return.connectTimeoutMS
this.connectTimeoutMS == return.readTimeoutMS
this.connectTimeoutMS == orig(this.connectTimeoutMS)
this.connectTimeoutMS == orig(this.readTimeoutMS)
this.socketFactory == return.socketFactory
this.socketFactory == orig(this.socketFactory)
this.socketFactory == orig(socketFactory)
this.socketFactory.getClass().getName() == return.socketFactory.getClass().getName()
this.socketFactory.getClass().getName() == orig(this.socketFactory.getClass().getName())
this.socketFactory.getClass().getName() == orig(socketFactory.getClass().getName())
return == orig(this)
this.connectTimeoutMS == 20000
===========================================================================
com.mongodb.SocketSettings:::OBJECT
this.connectTimeoutMS == this.readTimeoutMS
this.connectTimeoutMS one of { 0, 20000 }
this.socketFactory has only one value
this.socketFactory != null
this.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
===========================================================================
com.mongodb.SocketSettings.SocketSettings(com.mongodb.SocketSettings$Builder):::ENTER
builder.connectTimeoutMS == builder.readTimeoutMS
builder.connectTimeoutMS one of { 0, 20000 }
builder.socketFactory has only one value
builder.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
===========================================================================
com.mongodb.SocketSettings.SocketSettings(com.mongodb.SocketSettings$Builder):::EXIT
this.connectTimeoutMS == builder.connectTimeoutMS
this.connectTimeoutMS == builder.readTimeoutMS
this.connectTimeoutMS == orig(builder.connectTimeoutMS)
this.connectTimeoutMS == orig(builder.readTimeoutMS)
this.socketFactory == builder.socketFactory
this.socketFactory == orig(builder.socketFactory)
this.socketFactory.getClass().getName() == builder.socketFactory.getClass().getName()
this.socketFactory.getClass().getName() == orig(builder.socketFactory.getClass().getName())
===========================================================================
com.mongodb.SocketSettings.builder():::EXIT
return.connectTimeoutMS == 0
return.readTimeoutMS == 0
return.socketFactory has only one value
return.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
===========================================================================
com.mongodb.SocketSettings.getConnectTimeout(java.util.concurrent.TimeUnit):::ENTER
this.connectTimeoutMS == 20000
timeUnit has only one value
timeUnit != null
===========================================================================
com.mongodb.SocketSettings.getConnectTimeout(java.util.concurrent.TimeUnit):::EXIT
this.connectTimeoutMS == orig(this.connectTimeoutMS)
this.connectTimeoutMS == orig(this.readTimeoutMS)
this.socketFactory == orig(this.socketFactory)
this.socketFactory.getClass().getName() == orig(this.socketFactory.getClass().getName())
this.connectTimeoutMS == 20000
return == 20000
===========================================================================
com.mongodb.SocketSettings.getReadTimeout(java.util.concurrent.TimeUnit):::ENTER
this.connectTimeoutMS == 20000
timeUnit has only one value
timeUnit != null
===========================================================================
com.mongodb.SocketSettings.getReadTimeout(java.util.concurrent.TimeUnit):::EXIT
this.connectTimeoutMS == orig(this.connectTimeoutMS)
this.connectTimeoutMS == orig(this.readTimeoutMS)
this.socketFactory == orig(this.socketFactory)
this.socketFactory.getClass().getName() == orig(this.socketFactory.getClass().getName())
this.connectTimeoutMS == 20000
return == 20000
===========================================================================
com.mongodb.SocketSettings.getSocketFactory():::ENTER
this.connectTimeoutMS == 20000
===========================================================================
com.mongodb.SocketSettings.getSocketFactory():::EXIT
this.connectTimeoutMS == orig(this.connectTimeoutMS)
this.connectTimeoutMS == orig(this.readTimeoutMS)
this.socketFactory == orig(this.socketFactory)
this.socketFactory.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.socketFactory.getClass().getName())
this.connectTimeoutMS == 20000
return has only one value
return != null
return.getClass().getName() == javax.net.DefaultSocketFactory.class
===========================================================================
com.mongodb.TaggableReadPreference$NearestReadPreference:::CLASS
com.mongodb.TaggableReadPreference.EMPTY has only one value
com.mongodb.TaggableReadPreference.EMPTY[] == []
com.mongodb.TaggableReadPreference.EMPTY[].getClass().getName() == []
com.mongodb.TaggableReadPreference.EMPTY.getClass().getName() == java.util.ArrayList.class
===========================================================================
com.mongodb.TaggableReadPreference$NearestReadPreference:::OBJECT
this has only one value
this._tags has only one value
this._tags[] == []
this._tags[].getClass().getName() == []
this._tags.getClass().getName() == java.util.ArrayList.class
===========================================================================
com.mongodb.TaggableReadPreference$NearestReadPreference.NearestReadPreference():::EXIT
===========================================================================
com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference:::CLASS
com.mongodb.TaggableReadPreference.EMPTY has only one value
com.mongodb.TaggableReadPreference.EMPTY[] == []
com.mongodb.TaggableReadPreference.EMPTY[].getClass().getName() == []
com.mongodb.TaggableReadPreference.EMPTY.getClass().getName() == java.util.ArrayList.class
===========================================================================
com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference:::OBJECT
this has only one value
this._tags has only one value
this._tags[] == []
this._tags[].getClass().getName() == []
this._tags.getClass().getName() == java.util.ArrayList.class
===========================================================================
com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.PrimaryPreferredReadPreference():::EXIT
===========================================================================
com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference:::CLASS
com.mongodb.TaggableReadPreference.EMPTY has only one value
com.mongodb.TaggableReadPreference.EMPTY[] == []
com.mongodb.TaggableReadPreference.EMPTY[].getClass().getName() == []
com.mongodb.TaggableReadPreference.EMPTY.getClass().getName() == java.util.ArrayList.class
===========================================================================
com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference:::OBJECT
this has only one value
this._tags has only one value
this._tags[] == []
this._tags[].getClass().getName() == []
this._tags.getClass().getName() == java.util.ArrayList.class
===========================================================================
com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.SecondaryPreferredReadPreference():::EXIT
===========================================================================
com.mongodb.TaggableReadPreference$SecondaryReadPreference:::CLASS
com.mongodb.TaggableReadPreference.EMPTY has only one value
com.mongodb.TaggableReadPreference.EMPTY[] == []
com.mongodb.TaggableReadPreference.EMPTY[].getClass().getName() == []
com.mongodb.TaggableReadPreference.EMPTY.getClass().getName() == java.util.ArrayList.class
===========================================================================
com.mongodb.TaggableReadPreference$SecondaryReadPreference:::OBJECT
this._tags has only one value
this._tags[] == []
this._tags[].getClass().getName() == []
this._tags.getClass().getName() == java.util.ArrayList.class
===========================================================================
com.mongodb.TaggableReadPreference$SecondaryReadPreference.SecondaryReadPreference():::EXIT
===========================================================================
com.mongodb.TaggableReadPreference:::CLASS
com.mongodb.TaggableReadPreference.EMPTY has only one value
com.mongodb.TaggableReadPreference.EMPTY[] == []
com.mongodb.TaggableReadPreference.EMPTY[].getClass().getName() == []
com.mongodb.TaggableReadPreference.EMPTY.getClass().getName() == java.util.ArrayList.class
===========================================================================
com.mongodb.TaggableReadPreference:::OBJECT
this._tags has only one value
this._tags[] == []
this._tags[].getClass().getName() == []
this._tags.getClass().getName() == java.util.ArrayList.class
===========================================================================
com.mongodb.TaggableReadPreference.TaggableReadPreference():::EXIT
===========================================================================
com.mongodb.Tags:::OBJECT
this.wrapped != null
this.wrapped.getClass().getName() == java.util.HashMap.class
===========================================================================
com.mongodb.Tags.Tags():::EXIT
this.frozen == false
===========================================================================
com.mongodb.Tags.Tags(java.util.Map):::ENTER
wrapped != null
wrapped.getClass().getName() == com.mongodb.Tags.class
===========================================================================
com.mongodb.Tags.Tags(java.util.Map):::EXIT
this.frozen == true
===========================================================================
com.mongodb.Tags.equals(java.lang.Object):::ENTER
this.frozen == true
o != null
o.getClass().getName() == com.mongodb.Tags.class
===========================================================================
com.mongodb.Tags.equals(java.lang.Object):::EXIT151
===========================================================================
com.mongodb.Tags.equals(java.lang.Object):::EXIT151;condition="return == true"
===========================================================================
com.mongodb.Tags.equals(java.lang.Object):::EXIT
this.frozen == orig(this.frozen)
this.wrapped == orig(this.wrapped)
this.wrapped.getClass().getName() == orig(this.wrapped.getClass().getName())
this.frozen == true
return == true
===========================================================================
com.mongodb.Tags.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
com.mongodb.Tags.freeze(com.mongodb.Tags):::ENTER
tags != null
tags.frozen == false
tags.wrapped != null
tags.wrapped.getClass().getName() == java.util.HashMap.class
===========================================================================
com.mongodb.Tags.freeze(com.mongodb.Tags):::EXIT
tags.frozen == orig(tags.frozen)
tags.wrapped == orig(tags.wrapped)
tags.wrapped.getClass().getName() == orig(tags.wrapped.getClass().getName())
tags.frozen == false
tags.wrapped != null
tags.wrapped.getClass().getName() == java.util.HashMap.class
return != null
return.frozen == true
return.wrapped != null
return.wrapped.getClass().getName() == java.util.HashMap.class
===========================================================================
com.mongodb.Tags.isEmpty():::ENTER
this.frozen == true
===========================================================================
com.mongodb.Tags.isEmpty():::EXIT
this.frozen == orig(this.frozen)
this.wrapped == orig(this.wrapped)
this.wrapped.getClass().getName() == orig(this.wrapped.getClass().getName())
this.frozen == true
return == true
===========================================================================
com.mongodb.Tags.isEmpty():::EXIT;condition="return == true"
===========================================================================
com.mongodb.Tags.size():::ENTER
this.frozen == false
===========================================================================
com.mongodb.Tags.size():::EXIT
this.frozen == orig(this.frozen)
this.wrapped == orig(this.wrapped)
this.wrapped.getClass().getName() == orig(this.wrapped.getClass().getName())
this.frozen == false
return == 0
===========================================================================
com.mongodb.Tags.toString():::ENTER
this.frozen == true
===========================================================================
com.mongodb.Tags.toString():::EXIT
this.frozen == orig(this.frozen)
this.wrapped == orig(this.wrapped)
this.wrapped.getClass().getName() == orig(this.wrapped.getClass().getName())
this.frozen == true
return has only one value
return != null
return.toString == "{}"
===========================================================================
com.mongodb.WriteConcern$Majority:::CLASS
===========================================================================
com.mongodb.WriteConcern$Majority:::OBJECT
this has only one value
this._w has only one value
this._w.getClass().getName() == java.lang.String.class
this._wtimeout == 0
this._fsync == false
this._j == false
this._continueOnError == false
===========================================================================
com.mongodb.WriteConcern$Majority.Majority():::EXIT
===========================================================================
com.mongodb.WriteConcern:::CLASS
===========================================================================
com.mongodb.WriteConcern:::OBJECT
this._w != null
this._wtimeout == 0
this._continueOnError == false
===========================================================================
com.mongodb.WriteConcern.WriteConcern(boolean):::ENTER
fsync == true
===========================================================================
com.mongodb.WriteConcern.WriteConcern(boolean):::EXIT
this._w has only one value
this._w.getClass().getName() == java.lang.Integer.class
this._fsync == true
this._j == false
===========================================================================
com.mongodb.WriteConcern.WriteConcern(int):::ENTER
===========================================================================
com.mongodb.WriteConcern.WriteConcern(int):::EXIT
this._w.getClass().getName() == java.lang.Integer.class
this._fsync == false
this._j == false
===========================================================================
com.mongodb.WriteConcern.WriteConcern(int, int, boolean):::ENTER
wtimeout == 0
===========================================================================
com.mongodb.WriteConcern.WriteConcern(int, int, boolean):::EXIT
this._w.getClass().getName() == java.lang.Integer.class
this._j == false
===========================================================================
com.mongodb.WriteConcern.WriteConcern(int, int, boolean, boolean):::ENTER
wtimeout == 0
===========================================================================
com.mongodb.WriteConcern.WriteConcern(int, int, boolean, boolean):::EXIT
this._w.getClass().getName() == java.lang.Integer.class
===========================================================================
com.mongodb.WriteConcern.WriteConcern(int, int, boolean, boolean, boolean):::ENTER
wtimeout == 0
continueOnError == false
===========================================================================
com.mongodb.WriteConcern.WriteConcern(int, int, boolean, boolean, boolean):::EXIT
this._w.getClass().getName() == java.lang.Integer.class
===========================================================================
com.mongodb.WriteConcern.WriteConcern(java.lang.String, int, boolean, boolean):::ENTER
w has only one value
w.toString == "majority"
wtimeout == 0
fsync == false
j == false
===========================================================================
com.mongodb.WriteConcern.WriteConcern(java.lang.String, int, boolean, boolean):::EXIT
w.toString == orig(w.toString)
this._w has only one value
this._w.getClass().getName() == java.lang.String.class
this._fsync == false
this._j == false
w.toString == "majority"
===========================================================================
com.mongodb.WriteConcern.WriteConcern(java.lang.String, int, boolean, boolean, boolean):::ENTER
w has only one value
w.toString == "majority"
wtimeout == 0
fsync == false
j == false
continueOnError == false
===========================================================================
com.mongodb.WriteConcern.WriteConcern(java.lang.String, int, boolean, boolean, boolean):::EXIT
w.toString == orig(w.toString)
this._w has only one value
this._w.getClass().getName() == java.lang.String.class
this._fsync == false
this._j == false
w.toString == "majority"
===========================================================================
com.mongodb.util.management.MBeanServerFactory:::CLASS
com.mongodb.util.management.MBeanServerFactory.mBeanServer has only one value
com.mongodb.util.management.MBeanServerFactory.mBeanServer.getClass().getName() == com.mongodb.util.management.jmx.JMXMBeanServer.class
===========================================================================
com.mongodb.util.management.MBeanServerFactory.getMBeanServer():::ENTER
===========================================================================
com.mongodb.util.management.MBeanServerFactory.getMBeanServer():::EXIT
com.mongodb.util.management.MBeanServerFactory.mBeanServer == return
com.mongodb.util.management.MBeanServerFactory.mBeanServer == orig(com.mongodb.util.management.MBeanServerFactory.mBeanServer)
com.mongodb.util.management.MBeanServerFactory.mBeanServer.getClass().getName() == return.getClass().getName()
com.mongodb.util.management.MBeanServerFactory.mBeanServer.getClass().getName() == orig(com.mongodb.util.management.MBeanServerFactory.mBeanServer.getClass().getName())
===========================================================================
com.mongodb.util.management.jmx.JMXMBeanServer:::CLASS
com.mongodb.util.management.jmx.JMXMBeanServer.LOGGER has only one value
===========================================================================
com.mongodb.util.management.jmx.JMXMBeanServer:::OBJECT
this has only one value
this.server has only one value
this.server.getClass().getName() == com.sun.jmx.mbeanserver.JmxMBeanServer.class
===========================================================================
com.mongodb.util.management.jmx.JMXMBeanServer.JMXMBeanServer():::EXIT
===========================================================================
com.mongodb.util.management.jmx.JMXMBeanServer.createObjectName(java.lang.String):::ENTER
mBeanName.toString one of { "org.mongodb.driver:type=ConnectionPool,clusterId=1,host=localhost,port=27017", "org.mongodb.driver:type=ConnectionPool,clusterId=2,host=localhost,port=27017" }
===========================================================================
com.mongodb.util.management.jmx.JMXMBeanServer.createObjectName(java.lang.String):::EXIT
com.mongodb.util.management.jmx.JMXMBeanServer.LOGGER == orig(com.mongodb.util.management.jmx.JMXMBeanServer.LOGGER)
this.server == orig(this.server)
this.server.getClass().getName() == orig(this.server.getClass().getName())
mBeanName.toString == orig(mBeanName.toString)
mBeanName.toString one of { "org.mongodb.driver:type=ConnectionPool,clusterId=1,host=localhost,port=27017", "org.mongodb.driver:type=ConnectionPool,clusterId=2,host=localhost,port=27017" }
===========================================================================
com.mongodb.util.management.jmx.JMXMBeanServer.registerMBean(java.lang.Object, java.lang.String):::ENTER
mBean.getClass().getName() == com.mongodb.ConnectionPoolStatistics.class
mBeanName.toString one of { "org.mongodb.driver:type=ConnectionPool,clusterId=1,host=localhost,port=27017", "org.mongodb.driver:type=ConnectionPool,clusterId=2,host=localhost,port=27017" }
===========================================================================
com.mongodb.util.management.jmx.JMXMBeanServer.registerMBean(java.lang.Object, java.lang.String):::EXIT
com.mongodb.util.management.jmx.JMXMBeanServer.LOGGER == orig(com.mongodb.util.management.jmx.JMXMBeanServer.LOGGER)
this.server == orig(this.server)
this.server.getClass().getName() == orig(this.server.getClass().getName())
mBeanName.toString == orig(mBeanName.toString)
mBeanName.toString one of { "org.mongodb.driver:type=ConnectionPool,clusterId=1,host=localhost,port=27017", "org.mongodb.driver:type=ConnectionPool,clusterId=2,host=localhost,port=27017" }
===========================================================================
eu.cassandra.sim.utilities.DBConn:::CLASS
eu.cassandra.sim.utilities.DBConn.DB_NAME has only one value
eu.cassandra.sim.utilities.DBConn.DB_NAME.toString == "test"
eu.cassandra.sim.utilities.DBConn.DB_HOST has only one value
eu.cassandra.sim.utilities.DBConn.DB_HOST.toString == "localhost"
eu.cassandra.sim.utilities.DBConn.dbConn has only one value
eu.cassandra.sim.utilities.DBConn.dbRuns has only one value
eu.cassandra.sim.utilities.DBConn.dbConn.m has only one value
eu.cassandra.sim.utilities.DBConn.dbConn.db has only one value
eu.cassandra.sim.utilities.DBConn.dbConn.db.getClass().getName() == com.mongodb.DBApiLayer.class
com.mongodb.Mongo.logger has only one value
com.mongodb.Mongo.FULL_VERSION has only one value
com.mongodb.Mongo.FULL_VERSION.toString == "2.12.2"
com.mongodb.Mongo.cleanerIntervalMS == 1000
com.mongodb.Mongo.ADMIN_DATABASE_NAME has only one value
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == "admin"
eu.cassandra.sim.utilities.DBConn.dbConn.m._options has only one value
eu.cassandra.sim.utilities.DBConn.dbConn.m._connector has only one value
eu.cassandra.sim.utilities.DBConn.dbConn.m._dbs has only one value
eu.cassandra.sim.utilities.DBConn.dbConn.m._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
eu.cassandra.sim.utilities.DBConn.dbConn.m._concern has only one value
eu.cassandra.sim.utilities.DBConn.dbConn.m._readPref has only one value
eu.cassandra.sim.utilities.DBConn.dbConn.m._readPref.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
eu.cassandra.sim.utilities.DBConn.dbConn.m._netOptions has only one value
eu.cassandra.sim.utilities.DBConn.dbConn.m._cleaner has only one value
eu.cassandra.sim.utilities.DBConn.dbConn.m._authority has only one value
eu.cassandra.sim.utilities.DBConn.dbConn.m._bufferPool has only one value
eu.cassandra.sim.utilities.DBConn.dbConn.m._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
com.mongodb.DB._obedientCommands has only one value
com.mongodb.DB._obedientCommands.getClass().getName() == java.util.HashSet.class
eu.cassandra.sim.utilities.DBConn.dbConn.db._mongo has only one value
eu.cassandra.sim.utilities.DBConn.dbConn.db._name has only one value
eu.cassandra.sim.utilities.DBConn.dbConn.db._name.toString == "test"
eu.cassandra.sim.utilities.DBConn.dbConn.db._readOnly == false
eu.cassandra.sim.utilities.DBConn.dbConn.db._concern == null
eu.cassandra.sim.utilities.DBConn.dbConn.db._readPref == null
eu.cassandra.sim.utilities.DBConn.dbConn.db._options has only one value
eu.cassandra.sim.utilities.DBConn.dbConn.db.authenticationTestCommandResult == null
===========================================================================
eu.cassandra.sim.utilities.DBConn:::OBJECT
this.m == this.m._connector._mongo
this.m == com.mongodb.Mongo.this
this.m == this.db._mongo
this.m._options == this.db._mongo._options
this.m._options.connectionsPerHost == this.m._options.heartbeatConnectRetryFrequencyMS
this.m._options.fsync == this.m._options.j
this.m._options.heartbeatConnectTimeoutMS == this.m._options.heartbeatReadTimeoutMS
this.m._connector == this.db._mongo._connector
this.m._dbs == this.db._mongo._dbs
this.m._concern == com.mongodb.WriteConcern.NORMAL
com.mongodb.WriteConcern.NORMAL == this.db._mongo._concern
this.m._readPref == com.mongodb.ReadPreference.PRIMARY
com.mongodb.ReadPreference.PRIMARY == com.mongodb.ReadPreference._PRIMARY
com.mongodb.ReadPreference.PRIMARY == this.db._mongo._readPref
com.mongodb.ReadPreference.SECONDARY == com.mongodb.ReadPreference._SECONDARY_PREFERRED
this.m._netOptions == this.db._mongo._netOptions
this.m._netOptions == this.db._options._parent
this.m._cleaner == this.db._mongo._cleaner
this.m._authority == this.db._mongo._authority
this.m._bufferPool == this.db._mongo._bufferPool
this has only one value
this.m has only one value
this.m._options has only one value
this.m._options.description == null
this.m._options.connectionsPerHost == 10
this.m._options.threadsAllowedToBlockForConnectionMultiplier == 5
this.m._options.maxWaitTime == 120000
this.m._options.connectTimeout == 10000
this.m._options.socketTimeout == 0
this.m._options.socketKeepAlive == false
this.m._options.autoConnectRetry == false
this.m._options.maxAutoConnectRetryTime == 0
this.m._options.slaveOk == false
this.m._options.readPreference == null
this.m._options.dbDecoderFactory has only one value
this.m._options.dbDecoderFactory.getClass().getName() == com.mongodb.DefaultDBDecoder$DefaultFactory.class
this.m._options.dbEncoderFactory has only one value
this.m._options.dbEncoderFactory.getClass().getName() == com.mongodb.DefaultDBEncoder$DefaultFactory.class
this.m._options.safe == false
this.m._options.w == 0
this.m._options.wtimeout == 0
this.m._options.fsync == false
this.m._options.socketFactory has only one value
this.m._options.socketFactory.getClass().getName() == javax.net.DefaultSocketFactory.class
this.m._options.cursorFinalizerEnabled == true
this.m._options.writeConcern == null
this.m._options.alwaysUseMBeans == false
this.m._options.minConnectionsPerHost == 0
this.m._options.maxConnectionIdleTime == 0
this.m._options.maxConnectionLifeTime == 0
this.m._options.heartbeatFrequencyMS == 5000
this.m._options.heartbeatConnectTimeoutMS == 20000
this.m._options.acceptableLatencyDifferenceMS == 15
this.m._options.heartbeatThreadCount == 0
this.m._options.requiredReplicaSetName == null
this.m._connector has only one value
com.mongodb.DBTCPConnector.NEXT_CLUSTER_ID has only one value
this.m._connector._closed == false
this.m._connector.cluster has only one value
this.m._connector.cluster.getClass().getName() == com.mongodb.SingleServerCluster.class
this.m._connector._myPort has only one value
this.m._connector.connectionMode has only one value
this.m._connector.type has only one value
this.m._connector.mongosHAServerSelector == null
this.m._dbs has only one value
this.m._dbs.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
this.m._concern._w has only one value
this.m._concern._w.getClass().getName() == java.lang.Integer.class
this.m._concern._wtimeout == 0
this.m._concern._fsync == false
this.m._concern._j == false
this.m._concern._continueOnError == false
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
this.m._netOptions has only one value
this.m._netOptions._parent == null
this.m._netOptions._options == 0
this.m._netOptions._hasOptions == false
this.m._cleaner has only one value
com.mongodb.Mongo.this has only one value
this.m._authority has only one value
this.m._authority.type has only one value
this.m._authority.serverAddresses has only one value
this.m._authority.serverAddresses[] contains no nulls and has only one value, of length 1
this.m._authority.serverAddresses[] elements has only one value
this.m._authority.serverAddresses[].getClass().getName() == [com.mongodb.ServerAddress]
this.m._authority.serverAddresses[].getClass().getName() elements == com.mongodb.ServerAddress.class
this.m._authority.serverAddresses.getClass().getName() == java.util.Arrays$ArrayList.class
this.m._authority.credentialsStore has only one value
this.m._bufferPool has only one value
this.m._bufferPool.getClass().getName() == com.mongodb.Mongo$1.class
this.m._bufferPool._max == 1000
this.m._bufferPool._stored has only one value
this.m._bufferPool._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
this.db has only one value
this.db.getClass().getName() == com.mongodb.DBApiLayer.class
this.db._name has only one value
this.db._name.toString == "test"
this.db._readOnly == false
this.db._concern == null
this.db._readPref == null
this.db._options has only one value
this.db._options._options == 0
this.db._options._hasOptions == false
this.db.authenticationTestCommandResult == null
size(this.m._authority.serverAddresses[]) == 1
===========================================================================
eu.cassandra.sim.utilities.DBConn.DBConn():::EXIT
===========================================================================
eu.cassandra.sim.utilities.DBConn.getConn(java.lang.String):::ENTER
eu.cassandra.sim.utilities.DBConn.dbConn.m == eu.cassandra.sim.utilities.DBConn.dbConn.db._mongo
arg0 has only one value
arg0.toString == "SimpleDynamic1743934291905"
===========================================================================
eu.cassandra.sim.utilities.DBConn.getConn(java.lang.String):::EXIT88
===========================================================================
eu.cassandra.sim.utilities.DBConn.getConn(java.lang.String):::EXIT
eu.cassandra.sim.utilities.DBConn.DB_NAME == orig(eu.cassandra.sim.utilities.DBConn.DB_NAME)
eu.cassandra.sim.utilities.DBConn.DB_NAME.toString == orig(eu.cassandra.sim.utilities.DBConn.DB_NAME.toString)
eu.cassandra.sim.utilities.DBConn.DB_HOST == orig(eu.cassandra.sim.utilities.DBConn.DB_HOST)
eu.cassandra.sim.utilities.DBConn.DB_HOST.toString == orig(eu.cassandra.sim.utilities.DBConn.DB_HOST.toString)
eu.cassandra.sim.utilities.DBConn.dbConn == orig(eu.cassandra.sim.utilities.DBConn.dbConn)
eu.cassandra.sim.utilities.DBConn.dbRuns == orig(eu.cassandra.sim.utilities.DBConn.dbRuns)
eu.cassandra.sim.utilities.DBConn.dbConn.m == eu.cassandra.sim.utilities.DBConn.dbConn.db._mongo
eu.cassandra.sim.utilities.DBConn.dbConn.m == orig(eu.cassandra.sim.utilities.DBConn.dbConn.m)
eu.cassandra.sim.utilities.DBConn.dbConn.m == orig(eu.cassandra.sim.utilities.DBConn.dbConn.db._mongo)
eu.cassandra.sim.utilities.DBConn.dbConn.db == orig(eu.cassandra.sim.utilities.DBConn.dbConn.db)
eu.cassandra.sim.utilities.DBConn.dbConn.db.getClass().getName() == return.getClass().getName()
com.mongodb.Mongo.logger == orig(com.mongodb.Mongo.logger)
com.mongodb.Mongo.FULL_VERSION == orig(com.mongodb.Mongo.FULL_VERSION)
com.mongodb.Mongo.FULL_VERSION.toString == orig(com.mongodb.Mongo.FULL_VERSION.toString)
com.mongodb.Mongo.cleanerIntervalMS == orig(com.mongodb.Mongo.cleanerIntervalMS)
com.mongodb.Mongo.ADMIN_DATABASE_NAME == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME)
com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString == orig(com.mongodb.Mongo.ADMIN_DATABASE_NAME.toString)
eu.cassandra.sim.utilities.DBConn.dbConn.m._options == orig(eu.cassandra.sim.utilities.DBConn.dbConn.m._options)
eu.cassandra.sim.utilities.DBConn.dbConn.m._connector == orig(eu.cassandra.sim.utilities.DBConn.dbConn.m._connector)
eu.cassandra.sim.utilities.DBConn.dbConn.m._dbs == orig(eu.cassandra.sim.utilities.DBConn.dbConn.m._dbs)
eu.cassandra.sim.utilities.DBConn.dbConn.m._dbs.getClass().getName() == return._mongo._dbs.getClass().getName()
eu.cassandra.sim.utilities.DBConn.dbConn.m._dbs.getClass().getName() == orig(eu.cassandra.sim.utilities.DBConn.dbConn.m._dbs.getClass().getName())
eu.cassandra.sim.utilities.DBConn.dbConn.m._concern == orig(eu.cassandra.sim.utilities.DBConn.dbConn.m._concern)
eu.cassandra.sim.utilities.DBConn.dbConn.m._readPref == orig(eu.cassandra.sim.utilities.DBConn.dbConn.m._readPref)
eu.cassandra.sim.utilities.DBConn.dbConn.m._readPref.getClass().getName() == com.mongodb.ReadPreference.PRIMARY.getClass().getName()
eu.cassandra.sim.utilities.DBConn.dbConn.m._netOptions == orig(eu.cassandra.sim.utilities.DBConn.dbConn.m._netOptions)
eu.cassandra.sim.utilities.DBConn.dbConn.m._cleaner == orig(eu.cassandra.sim.utilities.DBConn.dbConn.m._cleaner)
eu.cassandra.sim.utilities.DBConn.dbConn.m._authority == orig(eu.cassandra.sim.utilities.DBConn.dbConn.m._authority)
eu.cassandra.sim.utilities.DBConn.dbConn.m._bufferPool == orig(eu.cassandra.sim.utilities.DBConn.dbConn.m._bufferPool)
eu.cassandra.sim.utilities.DBConn.dbConn.m._bufferPool.getClass().getName() == return._mongo._bufferPool.getClass().getName()
eu.cassandra.sim.utilities.DBConn.dbConn.m._bufferPool.getClass().getName() == orig(eu.cassandra.sim.utilities.DBConn.dbConn.m._bufferPool.getClass().getName())
com.mongodb.DB._obedientCommands == orig(com.mongodb.DB._obedientCommands)
com.mongodb.DB._obedientCommands.getClass().getName() == orig(com.mongodb.DB._obedientCommands.getClass().getName())
eu.cassandra.sim.utilities.DBConn.dbConn.db._name == orig(eu.cassandra.sim.utilities.DBConn.dbConn.db._name)
eu.cassandra.sim.utilities.DBConn.dbConn.db._name.toString == orig(eu.cassandra.sim.utilities.DBConn.dbConn.db._name.toString)
eu.cassandra.sim.utilities.DBConn.dbConn.db._readOnly == orig(eu.cassandra.sim.utilities.DBConn.dbConn.db._readOnly)
eu.cassandra.sim.utilities.DBConn.dbConn.db._concern == orig(eu.cassandra.sim.utilities.DBConn.dbConn.db._concern)
eu.cassandra.sim.utilities.DBConn.dbConn.db._readPref == orig(eu.cassandra.sim.utilities.DBConn.dbConn.db._readPref)
eu.cassandra.sim.utilities.DBConn.dbConn.db._options == orig(eu.cassandra.sim.utilities.DBConn.dbConn.db._options)
eu.cassandra.sim.utilities.DBConn.dbConn.db.authenticationTestCommandResult == orig(eu.cassandra.sim.utilities.DBConn.dbConn.db.authenticationTestCommandResult)
arg0.toString == orig(arg0.toString)
return.getClass().getName() == orig(eu.cassandra.sim.utilities.DBConn.dbConn.db.getClass().getName())
return._mongo._readPref.getClass().getName() == com.mongodb.ReadPreference.PRIMARY.getClass().getName()
return._mongo._netOptions == return._options._parent
return._name == orig(arg0)
com.mongodb.ReadPreference.PRIMARY == com.mongodb.ReadPreference._PRIMARY
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference._PRIMARY.getClass().getName()
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == orig(eu.cassandra.sim.utilities.DBConn.dbConn.m._readPref.getClass().getName())
com.mongodb.ReadPreference.SECONDARY == com.mongodb.ReadPreference._SECONDARY_PREFERRED
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.ReadPreference._SECONDARY_PREFERRED.getClass().getName()
arg0.toString == "SimpleDynamic1743934291905"
return has only one value
return.getClass().getName() == com.mongodb.DBApiLayer.class
return._mongo has only one value
return._mongo._options has only one value
return._mongo._connector has only one value
return._mongo._dbs has only one value
return._mongo._concern has only one value
return._mongo._readPref has only one value
return._mongo._netOptions has only one value
return._mongo._cleaner has only one value
return._mongo._authority has only one value
return._mongo._bufferPool has only one value
return._name has only one value
return._name.toString == "SimpleDynamic1743934291905"
return._readOnly == false
return._concern == null
com.mongodb.WriteConcern.ERRORS_IGNORED has only one value
com.mongodb.WriteConcern.ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.UNACKNOWLEDGED has only one value
com.mongodb.WriteConcern.FSYNCED has only one value
com.mongodb.WriteConcern.JOURNALED has only one value
com.mongodb.WriteConcern.REPLICA_ACKNOWLEDGED has only one value
com.mongodb.WriteConcern.NONE has only one value
com.mongodb.WriteConcern.NORMAL has only one value
com.mongodb.WriteConcern.SAFE has only one value
com.mongodb.WriteConcern.MAJORITY has only one value
com.mongodb.WriteConcern.FSYNC_SAFE has only one value
com.mongodb.WriteConcern.JOURNAL_SAFE has only one value
com.mongodb.WriteConcern.REPLICAS_SAFE has only one value
com.mongodb.WriteConcern._namedConcerns == null
return._readPref == null
com.mongodb.ReadPreference.PRIMARY has only one value
com.mongodb.ReadPreference.PRIMARY.getClass().getName() == com.mongodb.ReadPreference$PrimaryReadPreference.class
com.mongodb.ReadPreference.SECONDARY has only one value
com.mongodb.ReadPreference.SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.class
com.mongodb.ReadPreference._SECONDARY has only one value
com.mongodb.ReadPreference._SECONDARY.getClass().getName() == com.mongodb.TaggableReadPreference$SecondaryReadPreference.class
com.mongodb.ReadPreference._PRIMARY_PREFERRED has only one value
com.mongodb.ReadPreference._PRIMARY_PREFERRED.getClass().getName() == com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.class
com.mongodb.ReadPreference._NEAREST has only one value
com.mongodb.ReadPreference._NEAREST.getClass().getName() == com.mongodb.TaggableReadPreference$NearestReadPreference.class
return._options has only one value
return._options._options == 0
return._options._hasOptions == false
return.authenticationTestCommandResult == null
===========================================================================
eu.cassandra.sim.utilities.MongoResults:::OBJECT
this has only one value
this.dbname has only one value
this.dbname.toString == "SimpleDynamic1743934291905"
===========================================================================
eu.cassandra.sim.utilities.MongoResults.MongoResults(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "SimpleDynamic1743934291905"
===========================================================================
eu.cassandra.sim.utilities.MongoResults.MongoResults(java.lang.String):::EXIT
this.dbname == orig(arg0)
arg0.toString == orig(arg0.toString)
arg0.toString == "SimpleDynamic1743934291905"
===========================================================================
eu.cassandra.sim.utilities.ORNG:::OBJECT
this has only one value
this.random has only one value
===========================================================================
eu.cassandra.sim.utilities.ORNG.ORNG(long):::ENTER
arg0 == 171181
===========================================================================
eu.cassandra.sim.utilities.ORNG.ORNG(long):::EXIT
===========================================================================
org.bson.BSON$1:::OBJECT
this has only one value
===========================================================================
org.bson.BSON$1.():::EXIT
===========================================================================
org.bson.BSON$2:::OBJECT
this has only one value
===========================================================================
org.bson.BSON$2.():::EXIT
===========================================================================
org.bson.BasicBSONDecoder:::CLASS
===========================================================================
org.bson.BasicBSONDecoder._fillRange(byte, byte):::ENTER
min one of { 48, 65, 97 }
max one of { 57, 90, 122 }
===========================================================================
org.bson.BasicBSONDecoder._fillRange(byte, byte):::EXIT
===========================================================================
org.bson.BasicBSONObject:::CLASS
===========================================================================
org.bson.BasicBSONObject:::OBJECT
===========================================================================
org.bson.BasicBSONObject.BasicBSONObject():::EXIT
===========================================================================
org.bson.BasicBSONObject.BasicBSONObject(java.lang.String, java.lang.Object):::ENTER
key has only one value
key.toString == "tick"
value has only one value
value.getClass().getName() == java.lang.Integer.class
===========================================================================
org.bson.BasicBSONObject.BasicBSONObject(java.lang.String, java.lang.Object):::EXIT
key.toString == orig(key.toString)
key.toString == "tick"
===========================================================================
org.bson.BasicBSONObject.get(java.lang.String):::ENTER
this has only one value
key has only one value
key.toString == "tick"
===========================================================================
org.bson.BasicBSONObject.get(java.lang.String):::EXIT
key.toString == orig(key.toString)
key.toString == "tick"
return has only one value
return.getClass().getName() == java.lang.Integer.class
===========================================================================
org.bson.BasicBSONObject.put(java.lang.String, java.lang.Object):::ENTER
key.toString one of { "name", "ns", "tick" }
===========================================================================
org.bson.BasicBSONObject.put(java.lang.String, java.lang.Object):::EXIT
key.toString == orig(key.toString)
key.toString one of { "name", "ns", "tick" }
return == null
===========================================================================
org.bson.types.ObjectId:::CLASS
===========================================================================
org.bson.types.ObjectId:::OBJECT
this has only one value
this._time == -1
this._machine == -1
this._inc == -1
this._new == false
===========================================================================
org.bson.types.ObjectId.ObjectId(int, int, int):::ENTER
time == -1
machine == -1
inc == -1
===========================================================================
org.bson.types.ObjectId.ObjectId(int, int, int):::EXIT
===========================================================================
org.bson.util.AbstractCopyOnWriteMap$Immutable:::CLASS
===========================================================================
org.bson.util.AbstractCopyOnWriteMap$Immutable:::OBJECT
org.bson.util.AbstractCopyOnWriteMap.this.getClass().getName() == org.bson.util.CopyOnWriteMap$Hash.class
org.bson.util.AbstractCopyOnWriteMap.this.delegate.getClass().getName() == java.util.HashMap.class
org.bson.util.AbstractCopyOnWriteMap.this.lock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.bson.util.AbstractCopyOnWriteMap.this.view == null
===========================================================================
org.bson.util.AbstractCopyOnWriteMap$Immutable.Immutable(org.bson.util.AbstractCopyOnWriteMap):::ENTER
org.bson.util.AbstractCopyOnWriteMap.this.getClass().getName() == org.bson.util.CopyOnWriteMap$Hash.class
org.bson.util.AbstractCopyOnWriteMap.this.delegate.getClass().getName() == java.util.HashMap.class
org.bson.util.AbstractCopyOnWriteMap.this.lock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
org.bson.util.AbstractCopyOnWriteMap.this.view == null
===========================================================================
org.bson.util.AbstractCopyOnWriteMap$Immutable.Immutable(org.bson.util.AbstractCopyOnWriteMap):::EXIT
org.bson.util.AbstractCopyOnWriteMap.this == orig(org.bson.util.AbstractCopyOnWriteMap.this)
org.bson.util.AbstractCopyOnWriteMap.this.getClass().getName() == orig(org.bson.util.AbstractCopyOnWriteMap.this.getClass().getName())
org.bson.util.AbstractCopyOnWriteMap.this.delegate == orig(org.bson.util.AbstractCopyOnWriteMap.this.delegate)
org.bson.util.AbstractCopyOnWriteMap.this.delegate.getClass().getName() == orig(org.bson.util.AbstractCopyOnWriteMap.this.delegate.getClass().getName())
org.bson.util.AbstractCopyOnWriteMap.this.lock == orig(org.bson.util.AbstractCopyOnWriteMap.this.lock)
org.bson.util.AbstractCopyOnWriteMap.this.lock.getClass().getName() == orig(org.bson.util.AbstractCopyOnWriteMap.this.lock.getClass().getName())
org.bson.util.AbstractCopyOnWriteMap.this.view == orig(org.bson.util.AbstractCopyOnWriteMap.this.view)
===========================================================================
org.bson.util.AbstractCopyOnWriteMap$View$Type$1:::CLASS
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type$1.class
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type$2.class
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type[].class
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[] contains no nulls and has only one value, of length 2
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[].getClass().getName() == [null, null]
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[].getClass().getName() elements == null
size(org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[]) == 2
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName() != org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE.getClass().getName()
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName() != org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES.getClass().getName()
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE.getClass().getName() != org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES.getClass().getName()
===========================================================================
org.bson.util.AbstractCopyOnWriteMap$View$Type$1:::OBJECT
this has only one value
===========================================================================
org.bson.util.AbstractCopyOnWriteMap$View$Type$1.(java.lang.String, int):::ENTER
$hidden$1 has only one value
$hidden$1.toString == "STABLE"
$hidden$2 == 0
===========================================================================
org.bson.util.AbstractCopyOnWriteMap$View$Type$1.(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString == "STABLE"
===========================================================================
org.bson.util.AbstractCopyOnWriteMap$View$Type$1.get(org.bson.util.AbstractCopyOnWriteMap):::ENTER
host.getClass().getName() == org.bson.util.CopyOnWriteMap$Hash.class
host.delegate.getClass().getName() == java.util.HashMap.class
host.lock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
host.view == null
===========================================================================
org.bson.util.AbstractCopyOnWriteMap$View$Type$1.get(org.bson.util.AbstractCopyOnWriteMap):::EXIT
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE)
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName() == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName())
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE)
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE.getClass().getName() == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE.getClass().getName())
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES)
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES.getClass().getName() == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES.getClass().getName())
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[] == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[])
host.delegate == orig(host.delegate)
host.delegate.getClass().getName() == orig(host.delegate.getClass().getName())
host.lock == orig(host.lock)
host.lock.getClass().getName() == orig(host.lock.getClass().getName())
host.view == orig(host.view)
host.delegate.getClass().getName() == java.util.HashMap.class
host.lock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
host.view == null
return.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$Immutable.class
===========================================================================
org.bson.util.AbstractCopyOnWriteMap$View$Type$2:::OBJECT
this has only one value
===========================================================================
org.bson.util.AbstractCopyOnWriteMap$View$Type$2.(java.lang.String, int):::ENTER
$hidden$1 has only one value
$hidden$1.toString == "LIVE"
$hidden$2 == 1
===========================================================================
org.bson.util.AbstractCopyOnWriteMap$View$Type$2.(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString == "LIVE"
===========================================================================
org.bson.util.AbstractCopyOnWriteMap$View$Type:::OBJECT
===========================================================================
org.bson.util.AbstractCopyOnWriteMap$View$Type.Type(java.lang.String, int):::ENTER
$hidden$1.toString one of { "LIVE", "STABLE" }
$hidden$2 one of { 0, 1 }
===========================================================================
org.bson.util.AbstractCopyOnWriteMap$View$Type.Type(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString one of { "LIVE", "STABLE" }
===========================================================================
org.bson.util.AbstractCopyOnWriteMap$View:::OBJECT
this.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$Immutable.class
===========================================================================
org.bson.util.AbstractCopyOnWriteMap$View.View():::EXIT
===========================================================================
org.bson.util.AbstractCopyOnWriteMap:::CLASS
===========================================================================
org.bson.util.AbstractCopyOnWriteMap:::OBJECT
this.getClass().getName() == org.bson.util.CopyOnWriteMap$Hash.class
this.delegate.getClass().getName() == java.util.HashMap.class
this.lock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
this.view.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$Immutable.class
===========================================================================
org.bson.util.AbstractCopyOnWriteMap.AbstractCopyOnWriteMap(java.util.Map, org.bson.util.AbstractCopyOnWriteMap$View$Type):::ENTER
map.getClass().getName() == java.util.HashMap.class
viewType has only one value
viewType.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type$1.class
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type$1.class
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type$2.class
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type[].class
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[] contains no nulls and has only one value, of length 2
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[].getClass().getName() == [null, null]
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[].getClass().getName() elements == null
size(org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[]) == 2
===========================================================================
org.bson.util.AbstractCopyOnWriteMap.AbstractCopyOnWriteMap(java.util.Map, org.bson.util.AbstractCopyOnWriteMap$View$Type):::EXIT
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE)
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName() == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName())
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE)
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE.getClass().getName() == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE.getClass().getName())
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES)
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES.getClass().getName() == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES.getClass().getName())
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[] == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[])
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type$1.class
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type$2.class
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type[].class
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[] contains no nulls and has only one value, of length 2
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[].getClass().getName() == [null, null]
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[].getClass().getName() elements == null
size(org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[]) == 2
===========================================================================
org.bson.util.Assertions.isTrue(java.lang.String, boolean):::ENTER
name != null
check == true
===========================================================================
org.bson.util.Assertions.isTrue(java.lang.String, boolean):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.bson.util.Assertions.isTrueArgument(java.lang.String, boolean):::ENTER
name has only one value
name.toString == "hosts size > 0"
check == true
===========================================================================
org.bson.util.Assertions.isTrueArgument(java.lang.String, boolean):::EXIT
name.toString == orig(name.toString)
name.toString == "hosts size > 0"
===========================================================================
org.bson.util.Assertions.notNull(java.lang.String, java.lang.Object):::ENTER
name != null
notNull != null
===========================================================================
org.bson.util.Assertions.notNull(java.lang.String, java.lang.Object):::EXIT
name.toString == orig(name.toString)
return == orig(notNull)
return.getClass().getName() == orig(notNull.getClass().getName())
return != null
===========================================================================
org.bson.util.ClassMap$ComputeFunction:::OBJECT
org.bson.util.ClassMap.this.map.getClass().getName() == org.bson.util.CopyOnWriteMap$Hash.class
org.bson.util.ClassMap.this.cache == null
===========================================================================
org.bson.util.ClassMap$ComputeFunction.ComputeFunction(org.bson.util.ClassMap):::ENTER
org.bson.util.ClassMap.this.map.getClass().getName() == org.bson.util.CopyOnWriteMap$Hash.class
org.bson.util.ClassMap.this.cache == null
===========================================================================
org.bson.util.ClassMap$ComputeFunction.ComputeFunction(org.bson.util.ClassMap):::EXIT
org.bson.util.ClassMap.this == orig(org.bson.util.ClassMap.this)
org.bson.util.ClassMap.this.map == orig(org.bson.util.ClassMap.this.map)
org.bson.util.ClassMap.this.map.getClass().getName() == orig(org.bson.util.ClassMap.this.map.getClass().getName())
org.bson.util.ClassMap.this.cache == orig(org.bson.util.ClassMap.this.cache)
===========================================================================
org.bson.util.ClassMap:::OBJECT
this.map.getClass().getName() == org.bson.util.CopyOnWriteMap$Hash.class
this.cache.getClass().getName() == org.bson.util.ComputingMap.class
===========================================================================
org.bson.util.ClassMap.ClassMap():::EXIT
===========================================================================
org.bson.util.ComputingMap:::OBJECT
this.map.getClass().getName() == org.bson.util.CopyOnWriteMap$Hash.class
this.function.getClass().getName() == org.bson.util.ClassMap$ComputeFunction.class
===========================================================================
org.bson.util.ComputingMap.ComputingMap(java.util.concurrent.ConcurrentMap, org.bson.util.Function):::ENTER
map.getClass().getName() == org.bson.util.CopyOnWriteMap$Hash.class
function.getClass().getName() == org.bson.util.ClassMap$ComputeFunction.class
===========================================================================
org.bson.util.ComputingMap.ComputingMap(java.util.concurrent.ConcurrentMap, org.bson.util.Function):::EXIT
this.map == orig(map)
this.map.getClass().getName() == orig(map.getClass().getName())
this.function == orig(function)
this.function.getClass().getName() == orig(function.getClass().getName())
===========================================================================
org.bson.util.ComputingMap.create(org.bson.util.Function):::ENTER
function.getClass().getName() == org.bson.util.ClassMap$ComputeFunction.class
===========================================================================
org.bson.util.ComputingMap.create(org.bson.util.Function):::EXIT
return.getClass().getName() == org.bson.util.ComputingMap.class
===========================================================================
org.bson.util.CopyOnWriteMap$Builder:::OBJECT
this.viewType == org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE
this.viewType.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName()
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE != null
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type$1.class
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE != null
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type$2.class
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES != null
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type[].class
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[] contains no nulls and has only one value, of length 2
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[] elements != null
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[].getClass().getName() == [null, null]
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[].getClass().getName() elements == null
this.initialValues != null
this.initialValues.getClass().getName() == java.util.HashMap.class
size(org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[]) == 2
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName() != org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE.getClass().getName()
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName() != org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES.getClass().getName()
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName() != this.initialValues.getClass().getName()
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE.getClass().getName() != org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES.getClass().getName()
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE.getClass().getName() != this.initialValues.getClass().getName()
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES.getClass().getName() != this.initialValues.getClass().getName()
===========================================================================
org.bson.util.CopyOnWriteMap$Builder.Builder():::EXIT
===========================================================================
org.bson.util.CopyOnWriteMap$Builder.newHashMap():::ENTER
===========================================================================
org.bson.util.CopyOnWriteMap$Builder.newHashMap():::EXIT
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE == orig(this.viewType)
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE)
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName() == orig(this.viewType.getClass().getName())
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName() == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName())
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE)
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE.getClass().getName() == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE.getClass().getName())
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES)
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES.getClass().getName() == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES.getClass().getName())
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[] == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[])
this.initialValues == orig(this.initialValues)
this.initialValues.getClass().getName() == return.delegate.getClass().getName()
this.initialValues.getClass().getName() == orig(this.initialValues.getClass().getName())
return.getClass().getName() == org.bson.util.CopyOnWriteMap$Hash.class
return.lock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
return.view.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$Immutable.class
===========================================================================
org.bson.util.CopyOnWriteMap$Hash:::CLASS
===========================================================================
org.bson.util.CopyOnWriteMap$Hash:::OBJECT
this.delegate.getClass().getName() == java.util.HashMap.class
this.lock != null
this.lock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
this.view.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$Immutable.class
===========================================================================
org.bson.util.CopyOnWriteMap$Hash.Hash(java.util.Map, org.bson.util.AbstractCopyOnWriteMap$View$Type):::ENTER
viewType == org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE
viewType.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName()
map.getClass().getName() == java.util.HashMap.class
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type$1.class
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type$2.class
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type[].class
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[] contains no nulls and has only one value, of length 2
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[].getClass().getName() == [null, null]
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[].getClass().getName() elements == null
size(org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[]) == 2
===========================================================================
org.bson.util.CopyOnWriteMap$Hash.Hash(java.util.Map, org.bson.util.AbstractCopyOnWriteMap$View$Type):::EXIT
this.delegate.getClass().getName() == orig(map.getClass().getName())
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE == orig(viewType)
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE)
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName() == orig(viewType.getClass().getName())
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName() == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName())
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE)
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE.getClass().getName() == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE.getClass().getName())
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES)
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES.getClass().getName() == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES.getClass().getName())
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[] == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[])
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type$1.class
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type$2.class
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type[].class
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[] contains no nulls and has only one value, of length 2
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[].getClass().getName() == [null, null]
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[].getClass().getName() elements == null
size(org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[]) == 2
===========================================================================
org.bson.util.CopyOnWriteMap$Hash.copy(java.util.Map):::ENTER
this.delegate == null
this.view == null
map.getClass().getName() == java.util.HashMap.class
===========================================================================
org.bson.util.CopyOnWriteMap$Hash.copy(java.util.Map):::EXIT
this.delegate == orig(this.delegate)
this.lock == orig(this.lock)
this.lock.getClass().getName() == orig(this.lock.getClass().getName())
this.view == orig(this.view)
return.getClass().getName() == orig(map.getClass().getName())
this.delegate == null
this.view == null
return.getClass().getName() == java.util.HashMap.class
===========================================================================
org.bson.util.CopyOnWriteMap:::CLASS
===========================================================================
org.bson.util.CopyOnWriteMap:::OBJECT
this.getClass().getName() == org.bson.util.CopyOnWriteMap$Hash.class
this.delegate.getClass().getName() == java.util.HashMap.class
this.lock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
this.view.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$Immutable.class
===========================================================================
org.bson.util.CopyOnWriteMap.CopyOnWriteMap(java.util.Map, org.bson.util.AbstractCopyOnWriteMap$View$Type):::ENTER
viewType == org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE
viewType.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName()
map.getClass().getName() == java.util.HashMap.class
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type$1.class
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type$2.class
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type[].class
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[] contains no nulls and has only one value, of length 2
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[].getClass().getName() == [null, null]
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[].getClass().getName() elements == null
size(org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[]) == 2
===========================================================================
org.bson.util.CopyOnWriteMap.CopyOnWriteMap(java.util.Map, org.bson.util.AbstractCopyOnWriteMap$View$Type):::EXIT
this.delegate.getClass().getName() == orig(map.getClass().getName())
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE == orig(viewType)
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE)
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName() == orig(viewType.getClass().getName())
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName() == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName())
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE)
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE.getClass().getName() == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE.getClass().getName())
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES)
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES.getClass().getName() == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES.getClass().getName())
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[] == orig(org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[])
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type$1.class
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type$2.class
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type[].class
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[] contains no nulls and has only one value, of length 2
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[].getClass().getName() == [null, null]
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[].getClass().getName() elements == null
size(org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[]) == 2
===========================================================================
org.bson.util.CopyOnWriteMap.builder():::ENTER
===========================================================================
org.bson.util.CopyOnWriteMap.builder():::EXIT
return.viewType == org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE
return.viewType.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName()
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.STABLE.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type$1.class
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.LIVE.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type$2.class
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES has only one value
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$View$Type[].class
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[] contains no nulls and has only one value, of length 2
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[].getClass().getName() == [null, null]
org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[].getClass().getName() elements == null
return.initialValues.getClass().getName() == java.util.HashMap.class
size(org.bson.util.AbstractCopyOnWriteMap$View$Type.$VALUES[]) == 2
===========================================================================
org.bson.util.CopyOnWriteMap.newHashMap():::ENTER
===========================================================================
org.bson.util.CopyOnWriteMap.newHashMap():::EXIT
return.getClass().getName() == org.bson.util.CopyOnWriteMap$Hash.class
return.delegate.getClass().getName() == java.util.HashMap.class
return.lock.getClass().getName() == java.util.concurrent.locks.ReentrantLock.class
return.view.getClass().getName() == org.bson.util.AbstractCopyOnWriteMap$Immutable.class
===========================================================================
org.bson.util.SimplePool:::OBJECT
this.getClass().getName() == com.mongodb.Mongo$1.class
this._max == 1000
this._stored.getClass().getName() == java.util.concurrent.ConcurrentLinkedQueue.class
===========================================================================
org.bson.util.SimplePool.SimplePool(int):::ENTER
max == 1000
===========================================================================
org.bson.util.SimplePool.SimplePool(int):::EXIT
Exiting Daikon.
