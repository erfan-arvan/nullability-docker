Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

===========================================================================
DATA.ClassType:::OBJECT
this.name != null
this.shortName != null
this.duration != null
this.duration.begin != null
this.duration.begin.day == 0
this.duration.begin.min one of { 0, 30, 40 }
this.duration.end != null
this.duration.end.day == 0
this.duration.end.hour one of { 1, 2, 4 }
this.duration.end.min one of { 0, 30 }
this.duration.begin.day <= this.duration.begin.hour
this.duration.begin.day <= this.duration.begin.min
this.duration.begin.hour != this.duration.begin.min
this.duration.end.day < this.duration.end.hour
this.duration.end.day <= this.duration.end.min
this.duration.end.hour != this.duration.end.min
this.duration.end.min % this.duration.end.hour == 0
===========================================================================
DATA.ClassType.ClassType(java.lang.String, java.lang.String, DATA.Slot):::ENTER
arg2.begin.day == 0
arg2.begin.min one of { 0, 30, 40 }
arg2.end.day == 0
arg2.end.hour one of { 1, 2, 4 }
arg2.end.min one of { 0, 30 }
arg2.begin.day <= arg2.begin.hour
arg2.begin.day <= arg2.begin.min
arg2.begin.hour != arg2.begin.min
arg2.end.day < arg2.end.hour
arg2.end.day <= arg2.end.min
arg2.end.hour != arg2.end.min
arg2.end.min % arg2.end.hour == 0
===========================================================================
DATA.ClassType.ClassType(java.lang.String, java.lang.String, DATA.Slot):::EXIT
this.name == orig(arg0)
this.shortName == orig(arg1)
this.duration == orig(arg2)
this.duration.begin == arg2.begin
this.duration.begin.day == arg2.begin.day
this.duration.begin.hour == arg2.begin.hour
this.duration.begin.min == arg2.begin.min
this.duration.end == arg2.end
this.duration.end.day == arg2.end.day
this.duration.end.hour == arg2.end.hour
this.duration.end.min == arg2.end.min
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
arg2.begin == orig(arg2.begin)
arg2.begin.day == orig(arg2.begin.day)
arg2.begin.hour == orig(arg2.begin.hour)
arg2.begin.min == orig(arg2.begin.min)
arg2.end == orig(arg2.end)
arg2.end.day == orig(arg2.end.day)
arg2.end.hour == orig(arg2.end.hour)
arg2.end.min == orig(arg2.end.min)
arg2.begin.day == 0
arg2.begin.min one of { 0, 30, 40 }
arg2.end.day == 0
arg2.end.hour one of { 1, 2, 4 }
arg2.end.min one of { 0, 30 }
arg2.begin.day <= arg2.begin.hour
arg2.begin.day <= arg2.begin.min
arg2.begin.hour != arg2.begin.min
arg2.end.day < arg2.end.hour
arg2.end.day <= arg2.end.min
arg2.end.hour != arg2.end.min
arg2.end.min % arg2.end.hour == 0
===========================================================================
DATA.ClassType.getDuration():::ENTER
this.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
this.duration.begin.hour one of { 1, 4 }
this.duration.begin.min one of { 0, 30 }
===========================================================================
DATA.ClassType.getDuration():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.shortName == orig(this.shortName)
this.shortName.toString == orig(this.shortName.toString)
this.duration == return
this.duration.begin == return.begin
this.duration.begin.day == return.begin.day
this.duration.begin.hour == return.begin.hour
this.duration.begin.min == return.begin.min
this.duration.end == return.end
this.duration.end.day == return.end.day
this.duration.end.hour == return.end.hour
this.duration.end.min == return.end.min
return == orig(this.duration)
return.begin == orig(this.duration.begin)
return.begin.day == orig(this.duration.begin.day)
return.begin.hour == orig(this.duration.begin.hour)
return.begin.min == orig(this.duration.begin.min)
return.end == orig(this.duration.end)
return.end.day == orig(this.duration.end.day)
return.end.hour == orig(this.duration.end.hour)
return.end.min == orig(this.duration.end.min)
this.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
return.begin.day == 0
return.begin.hour one of { 1, 4 }
return.begin.min one of { 0, 30 }
return.end.day == 0
return.end.hour one of { 1, 2, 4 }
return.end.min one of { 0, 30 }
return.end.min % return.end.hour == 0
===========================================================================
DATA.Classroom:::OBJECT
this.timeTable == this.timeTable.owner.timeTable
this.coords != null
this.type != null
this.type.name != null
this.type.shortName != null
this.type.duration != null
this.type.duration.begin != null
this.type.duration.end != null
this.name != null
this.timeTable != null
this.timeTable.slots != null
this.timeTable.slots[] elements != null
this.timeTable.owner != null
this.timeTable.owner.getClass().getName() == DATA.Classroom.class
DATA.WeekTable.minDelta has only one value
DATA.WeekTable.minDelta != null
DATA.WeekTable.minDelta.day == 0
DATA.WeekTable.minDelta.hour == 0
DATA.WeekTable.minDelta.min == 1
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
DATA.WeekTable.defaultWeek.slots has only one value
DATA.WeekTable.defaultWeek.slots != null
DATA.WeekTable.defaultWeek.slots[] contains no nulls and has only one value, of length 9
DATA.WeekTable.defaultWeek.slots[] elements != null
DATA.WeekTable.defaultWeek.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
DATA.WeekTable.defaultWeek.slots[].getClass().getName() elements == DATA.Slot.class
DATA.WeekTable.defaultWeek.owner == null
size(DATA.WeekTable.defaultWeek.slots[]) == 9
===========================================================================
DATA.Classroom.Classroom(DATA.ClassType, java.lang.String, int, java.awt.Point):::ENTER
===========================================================================
DATA.Classroom.Classroom(DATA.ClassType, java.lang.String, int, java.awt.Point):::EXIT
this.coords == orig(arg3)
this.type == orig(arg0)
this.type.name == arg0.name
this.type.shortName == arg0.shortName
this.type.duration == arg0.duration
this.type.duration.begin == arg0.duration.begin
this.type.duration.end == arg0.duration.end
this.name == orig(arg1)
this.effectif == orig(arg2)
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.shortName == orig(arg0.shortName)
arg0.shortName.toString == orig(arg0.shortName.toString)
arg0.duration == orig(arg0.duration)
arg0.duration.begin == orig(arg0.duration.begin)
arg0.duration.end == orig(arg0.duration.end)
arg1.toString == orig(arg1.toString)
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
size(this.timeTable.slots[]) == 9
===========================================================================
DATA.Classroom.getEffectif():::ENTER
this.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
this.effectif one of { 25, 32, 100 }
===========================================================================
DATA.Classroom.getEffectif():::EXIT
this.coords == orig(this.coords)
this.type == orig(this.type)
this.type.name == orig(this.type.name)
this.type.name.toString == orig(this.type.name.toString)
this.type.shortName == orig(this.type.shortName)
this.type.shortName.toString == orig(this.type.shortName.toString)
this.type.duration == orig(this.type.duration)
this.type.duration.begin == orig(this.type.duration.begin)
this.type.duration.end == orig(this.type.duration.end)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.effectif == return
this.timeTable == orig(this.timeTable)
this.timeTable == orig(this.timeTable.owner.timeTable)
this.timeTable.slots == orig(this.timeTable.slots)
this.timeTable.slots[] == orig(this.timeTable.slots[])
this.timeTable.owner == orig(this.timeTable.owner)
this.timeTable.owner.getClass().getName() == orig(this.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
return == orig(this.effectif)
this.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
return one of { 25, 32, 100 }
===========================================================================
DATA.Classroom.getType():::ENTER
===========================================================================
DATA.Classroom.getType():::EXIT
this.coords == orig(this.coords)
this.type == return
this.type.name == return.name
this.type.name.toString == orig(this.type.name.toString)
this.type.shortName == return.shortName
this.type.shortName.toString == orig(this.type.shortName.toString)
this.type.duration == return.duration
this.type.duration.begin == return.duration.begin
this.type.duration.end == return.duration.end
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.effectif == orig(this.effectif)
this.timeTable == orig(this.timeTable)
this.timeTable == orig(this.timeTable.owner.timeTable)
this.timeTable.slots == orig(this.timeTable.slots)
this.timeTable.slots[] == orig(this.timeTable.slots[])
this.timeTable.owner == orig(this.timeTable.owner)
this.timeTable.owner.getClass().getName() == orig(this.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
return == orig(this.type)
return.name == orig(this.type.name)
return.shortName == orig(this.type.shortName)
return.duration == orig(this.type.duration)
return.duration.begin == orig(this.type.duration.begin)
return.duration.end == orig(this.type.duration.end)
return != null
return.name != null
return.shortName != null
return.duration != null
return.duration.begin != null
return.duration.end != null
===========================================================================
DATA.Constrainable:::OBJECT
===========================================================================
DATA.Constrainable.Constrainable():::EXIT
===========================================================================
DATA.DataStore:::OBJECT
this has only one value
this.teachers has only one value
this.teachers != null
this.teachers[] elements != null
this.teachers[].getClass().getName() elements == DATA.Teacher.class
this.teachers[].getClass().getName() one of { [], [DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher] }
this.classrooms has only one value
this.classrooms != null
this.classrooms[] elements != null
this.classrooms[].getClass().getName() elements == DATA.Classroom.class
this.classrooms[].getClass().getName() one of { [], [DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom] }
this.groups has only one value
this.groups != null
this.groups[] elements != null
this.groups[].getClass().getName() elements == DATA.Group.class
this.groups[].getClass().getName() one of { [], [DATA.Group, DATA.Group, DATA.Group, DATA.Group] }
this.types has only one value
this.types != null
this.types[] elements != null
this.types[].getClass().getName() elements == DATA.ClassType.class
this.types[].getClass().getName() one of { [], [DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType] }
this.fields has only one value
this.fields != null
this.fields[] elements != null
this.fields[].getClass().getName() elements == DATA.Field.class
this.fields[].getClass().getName() one of { [], [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field] }
this.MWWH.day == 1
this.MWWH.hour one of { 1, 12 }
this.MWWH.min == 0
this.defaultWeek == null
DATA.WeekTable.minDelta has only one value
DATA.WeekTable.minDelta != null
DATA.WeekTable.minDelta.day == 0
DATA.WeekTable.minDelta.hour == 0
DATA.WeekTable.minDelta.min == 1
DATA.WeekTable.defaultWeek.slots has only one value
DATA.WeekTable.defaultWeek.slots[] contains no nulls and has only one value, of length 9
DATA.WeekTable.defaultWeek.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
DATA.WeekTable.defaultWeek.slots[].getClass().getName() elements == DATA.Slot.class
DATA.WeekTable.defaultWeek.owner == null
size(this.teachers[]) one of { 0, 5 }
size(this.classrooms[]) one of { 0, 9 }
size(this.groups[]) one of { 0, 4 }
size(this.types[]) one of { 0, 8 }
size(this.fields[]) one of { 0, 6 }
size(DATA.WeekTable.defaultWeek.slots[]) == 9
this.MWWH.day <= this.MWWH.hour
this.MWWH.hour > this.MWWH.min
===========================================================================
DATA.DataStore.DataStore():::EXIT
this.teachers[] == []
this.teachers[].getClass().getName() == []
this.classrooms[] == []
this.classrooms[].getClass().getName() == []
this.groups[] == []
this.groups[].getClass().getName() == []
this.types[] == []
this.types[].getClass().getName() == []
this.fields[] == []
this.fields[].getClass().getName() == []
this.MWWH == null
DATA.WeekTable.defaultWeek == null
===========================================================================
DATA.DataStore.addFixtures():::ENTER
this.teachers[] == []
this.teachers[].getClass().getName() == []
this.classrooms[] == []
this.classrooms[].getClass().getName() == []
this.groups[] == []
this.groups[].getClass().getName() == []
this.types[] == []
this.types[].getClass().getName() == []
this.fields[] == []
this.fields[].getClass().getName() == []
this.MWWH == null
DATA.WeekTable.defaultWeek == null
===========================================================================
DATA.DataStore.addFixtures():::EXIT
this.teachers == orig(this.teachers)
this.classrooms == orig(this.classrooms)
this.groups == orig(this.groups)
this.types == orig(this.types)
this.fields == orig(this.fields)
this.MWWH.day == this.MWWH.hour
this.defaultWeek == orig(this.defaultWeek)
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
this.teachers[] contains no nulls and has only one value, of length 5
this.teachers[].getClass().getName() == [DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher]
this.classrooms[] contains no nulls and has only one value, of length 9
this.classrooms[].getClass().getName() == [DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom]
this.groups[] contains no nulls and has only one value, of length 4
this.groups[].getClass().getName() == [DATA.Group, DATA.Group, DATA.Group, DATA.Group]
this.types[] contains no nulls and has only one value, of length 8
this.types[].getClass().getName() == [DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType]
this.fields[] contains no nulls and has only one value, of length 6
this.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.MWWH has only one value
DATA.WeekTable.defaultWeek has only one value
size(this.teachers[]) == 5
size(this.classrooms[]) == 9
size(this.groups[]) == 4
size(this.types[]) == 8
size(this.fields[]) == 6
===========================================================================
DATA.DataStore.getClassrooms():::ENTER
this.MWWH.day == this.MWWH.hour
this.teachers[] contains no nulls and has only one value, of length 5
this.teachers[].getClass().getName() == [DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher]
this.classrooms[] contains no nulls and has only one value, of length 9
this.classrooms[].getClass().getName() == [DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom]
this.groups[] contains no nulls and has only one value, of length 4
this.groups[].getClass().getName() == [DATA.Group, DATA.Group, DATA.Group, DATA.Group]
this.types[] contains no nulls and has only one value, of length 8
this.types[].getClass().getName() == [DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType]
this.fields[] contains no nulls and has only one value, of length 6
this.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.MWWH has only one value
DATA.WeekTable.defaultWeek has only one value
size(this.teachers[]) == 5
size(this.classrooms[]) == 9
size(this.groups[]) == 4
size(this.types[]) == 8
size(this.fields[]) == 6
===========================================================================
DATA.DataStore.getClassrooms():::EXIT
this.teachers == orig(this.teachers)
this.teachers[] == orig(this.teachers[])
this.classrooms == return
this.classrooms[] == orig(this.classrooms[])
this.groups == orig(this.groups)
this.groups[] == orig(this.groups[])
this.types == orig(this.types)
this.types[] == orig(this.types[])
this.fields == orig(this.fields)
this.fields[] == orig(this.fields[])
this.MWWH == orig(this.MWWH)
this.MWWH.day == this.MWWH.hour
this.MWWH.day == orig(this.MWWH.day)
this.MWWH.day == orig(this.MWWH.hour)
this.MWWH.min == orig(this.MWWH.min)
this.defaultWeek == orig(this.defaultWeek)
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
return == orig(this.classrooms)
this.teachers[] contains no nulls and has only one value, of length 5
this.teachers[].getClass().getName() == [DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher]
this.classrooms[] contains no nulls and has only one value, of length 9
this.classrooms[].getClass().getName() == [DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom]
this.groups[] contains no nulls and has only one value, of length 4
this.groups[].getClass().getName() == [DATA.Group, DATA.Group, DATA.Group, DATA.Group]
this.types[] contains no nulls and has only one value, of length 8
this.types[].getClass().getName() == [DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType]
this.fields[] contains no nulls and has only one value, of length 6
this.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.MWWH has only one value
DATA.WeekTable.defaultWeek has only one value
return has only one value
return[] contains no nulls and has only one value, of length 9
return[].getClass().getName() == [DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom]
return[].getClass().getName() elements == DATA.Classroom.class
size(this.teachers[]) == 5
size(this.classrooms[]) == 9
size(this.groups[]) == 4
size(this.types[]) == 8
size(this.fields[]) == 6
size(return[]) == 9
===========================================================================
DATA.DataStore.getGroups():::ENTER
this.MWWH.day == this.MWWH.hour
this.teachers[] contains no nulls and has only one value, of length 5
this.teachers[].getClass().getName() == [DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher]
this.classrooms[] contains no nulls and has only one value, of length 9
this.classrooms[].getClass().getName() == [DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom]
this.groups[] contains no nulls and has only one value, of length 4
this.groups[].getClass().getName() == [DATA.Group, DATA.Group, DATA.Group, DATA.Group]
this.types[] contains no nulls and has only one value, of length 8
this.types[].getClass().getName() == [DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType]
this.fields[] contains no nulls and has only one value, of length 6
this.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.MWWH has only one value
DATA.WeekTable.defaultWeek has only one value
size(this.teachers[]) == 5
size(this.classrooms[]) == 9
size(this.groups[]) == 4
size(this.types[]) == 8
size(this.fields[]) == 6
===========================================================================
DATA.DataStore.getGroups():::EXIT
this.teachers == orig(this.teachers)
this.teachers[] == orig(this.teachers[])
this.classrooms == orig(this.classrooms)
this.classrooms[] == orig(this.classrooms[])
this.groups == return
this.groups[] == orig(this.groups[])
this.types == orig(this.types)
this.types[] == orig(this.types[])
this.fields == orig(this.fields)
this.fields[] == orig(this.fields[])
this.MWWH == orig(this.MWWH)
this.MWWH.day == this.MWWH.hour
this.MWWH.day == orig(this.MWWH.day)
this.MWWH.day == orig(this.MWWH.hour)
this.MWWH.min == orig(this.MWWH.min)
this.defaultWeek == orig(this.defaultWeek)
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
return == orig(this.groups)
this.teachers[] contains no nulls and has only one value, of length 5
this.teachers[].getClass().getName() == [DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher]
this.classrooms[] contains no nulls and has only one value, of length 9
this.classrooms[].getClass().getName() == [DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom]
this.groups[] contains no nulls and has only one value, of length 4
this.groups[].getClass().getName() == [DATA.Group, DATA.Group, DATA.Group, DATA.Group]
this.types[] contains no nulls and has only one value, of length 8
this.types[].getClass().getName() == [DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType]
this.fields[] contains no nulls and has only one value, of length 6
this.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.MWWH has only one value
DATA.WeekTable.defaultWeek has only one value
return has only one value
return[] contains no nulls and has only one value, of length 4
return[].getClass().getName() == [DATA.Group, DATA.Group, DATA.Group, DATA.Group]
return[].getClass().getName() elements == DATA.Group.class
size(this.teachers[]) == 5
size(this.classrooms[]) == 9
size(this.groups[]) == 4
size(this.types[]) == 8
size(this.fields[]) == 6
size(return[]) == 4
===========================================================================
DATA.DataStore.getMWWH():::ENTER
this.MWWH.day == this.MWWH.hour
this.teachers[] contains no nulls and has only one value, of length 5
this.teachers[].getClass().getName() == [DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher]
this.classrooms[] contains no nulls and has only one value, of length 9
this.classrooms[].getClass().getName() == [DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom]
this.groups[] contains no nulls and has only one value, of length 4
this.groups[].getClass().getName() == [DATA.Group, DATA.Group, DATA.Group, DATA.Group]
this.types[] contains no nulls and has only one value, of length 8
this.types[].getClass().getName() == [DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType]
this.fields[] contains no nulls and has only one value, of length 6
this.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.MWWH has only one value
DATA.WeekTable.defaultWeek has only one value
size(this.teachers[]) == 5
size(this.classrooms[]) == 9
size(this.groups[]) == 4
size(this.types[]) == 8
size(this.fields[]) == 6
===========================================================================
DATA.DataStore.getMWWH():::EXIT
this.teachers == orig(this.teachers)
this.teachers[] == orig(this.teachers[])
this.classrooms == orig(this.classrooms)
this.classrooms[] == orig(this.classrooms[])
this.groups == orig(this.groups)
this.groups[] == orig(this.groups[])
this.types == orig(this.types)
this.types[] == orig(this.types[])
this.fields == orig(this.fields)
this.fields[] == orig(this.fields[])
this.MWWH == return
this.MWWH.day == return.day
this.MWWH.hour == return.hour
this.MWWH.min == return.min
this.defaultWeek == orig(this.defaultWeek)
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
return.day == orig(this.MWWH.day)
return.day == orig(this.MWWH.hour)
return.min == orig(this.MWWH.min)
this.teachers[] contains no nulls and has only one value, of length 5
this.teachers[].getClass().getName() == [DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher]
this.classrooms[] contains no nulls and has only one value, of length 9
this.classrooms[].getClass().getName() == [DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom]
this.groups[] contains no nulls and has only one value, of length 4
this.groups[].getClass().getName() == [DATA.Group, DATA.Group, DATA.Group, DATA.Group]
this.types[] contains no nulls and has only one value, of length 8
this.types[].getClass().getName() == [DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType]
this.fields[] contains no nulls and has only one value, of length 6
this.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
DATA.WeekTable.defaultWeek has only one value
return has only one value
return.day == 1
return.hour == 12
return.min == 0
size(this.teachers[]) == 5
size(this.classrooms[]) == 9
size(this.groups[]) == 4
size(this.types[]) == 8
size(this.fields[]) == 6
===========================================================================
DATA.DataStore.getTeachers():::ENTER
this.MWWH.day == this.MWWH.hour
this.teachers[] contains no nulls and has only one value, of length 5
this.teachers[].getClass().getName() == [DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher]
this.classrooms[] contains no nulls and has only one value, of length 9
this.classrooms[].getClass().getName() == [DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom]
this.groups[] contains no nulls and has only one value, of length 4
this.groups[].getClass().getName() == [DATA.Group, DATA.Group, DATA.Group, DATA.Group]
this.types[] contains no nulls and has only one value, of length 8
this.types[].getClass().getName() == [DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType]
this.fields[] contains no nulls and has only one value, of length 6
this.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.MWWH has only one value
DATA.WeekTable.defaultWeek has only one value
size(this.teachers[]) == 5
size(this.classrooms[]) == 9
size(this.groups[]) == 4
size(this.types[]) == 8
size(this.fields[]) == 6
===========================================================================
DATA.DataStore.getTeachers():::EXIT
this.teachers == return
this.teachers[] == orig(this.teachers[])
this.classrooms == orig(this.classrooms)
this.classrooms[] == orig(this.classrooms[])
this.groups == orig(this.groups)
this.groups[] == orig(this.groups[])
this.types == orig(this.types)
this.types[] == orig(this.types[])
this.fields == orig(this.fields)
this.fields[] == orig(this.fields[])
this.MWWH == orig(this.MWWH)
this.MWWH.day == this.MWWH.hour
this.MWWH.day == orig(this.MWWH.day)
this.MWWH.day == orig(this.MWWH.hour)
this.MWWH.min == orig(this.MWWH.min)
this.defaultWeek == orig(this.defaultWeek)
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
return == orig(this.teachers)
this.teachers[] contains no nulls and has only one value, of length 5
this.teachers[].getClass().getName() == [DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher]
this.classrooms[] contains no nulls and has only one value, of length 9
this.classrooms[].getClass().getName() == [DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom]
this.groups[] contains no nulls and has only one value, of length 4
this.groups[].getClass().getName() == [DATA.Group, DATA.Group, DATA.Group, DATA.Group]
this.types[] contains no nulls and has only one value, of length 8
this.types[].getClass().getName() == [DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType]
this.fields[] contains no nulls and has only one value, of length 6
this.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.MWWH has only one value
DATA.WeekTable.defaultWeek has only one value
return has only one value
return[] contains no nulls and has only one value, of length 5
return[].getClass().getName() == [DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher]
return[].getClass().getName() elements == DATA.Teacher.class
size(this.teachers[]) == 5
size(this.classrooms[]) == 9
size(this.groups[]) == 4
size(this.types[]) == 8
size(this.fields[]) == 6
size(return[]) == 5
===========================================================================
DATA.DataStore.getTypes():::ENTER
this.MWWH.day == this.MWWH.hour
this.teachers[] contains no nulls and has only one value, of length 5
this.teachers[].getClass().getName() == [DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher]
this.classrooms[] contains no nulls and has only one value, of length 9
this.classrooms[].getClass().getName() == [DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom]
this.groups[] contains no nulls and has only one value, of length 4
this.groups[].getClass().getName() == [DATA.Group, DATA.Group, DATA.Group, DATA.Group]
this.types[] contains no nulls and has only one value, of length 8
this.types[].getClass().getName() == [DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType]
this.fields[] contains no nulls and has only one value, of length 6
this.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.MWWH has only one value
DATA.WeekTable.defaultWeek has only one value
size(this.teachers[]) == 5
size(this.classrooms[]) == 9
size(this.groups[]) == 4
size(this.types[]) == 8
size(this.fields[]) == 6
===========================================================================
DATA.DataStore.getTypes():::EXIT
this.teachers == orig(this.teachers)
this.teachers[] == orig(this.teachers[])
this.classrooms == orig(this.classrooms)
this.classrooms[] == orig(this.classrooms[])
this.groups == orig(this.groups)
this.groups[] == orig(this.groups[])
this.types == return
this.types[] == orig(this.types[])
this.fields == orig(this.fields)
this.fields[] == orig(this.fields[])
this.MWWH == orig(this.MWWH)
this.MWWH.day == this.MWWH.hour
this.MWWH.day == orig(this.MWWH.day)
this.MWWH.day == orig(this.MWWH.hour)
this.MWWH.min == orig(this.MWWH.min)
this.defaultWeek == orig(this.defaultWeek)
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
return == orig(this.types)
this.teachers[] contains no nulls and has only one value, of length 5
this.teachers[].getClass().getName() == [DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher]
this.classrooms[] contains no nulls and has only one value, of length 9
this.classrooms[].getClass().getName() == [DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom]
this.groups[] contains no nulls and has only one value, of length 4
this.groups[].getClass().getName() == [DATA.Group, DATA.Group, DATA.Group, DATA.Group]
this.types[] contains no nulls and has only one value, of length 8
this.types[].getClass().getName() == [DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType]
this.fields[] contains no nulls and has only one value, of length 6
this.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.MWWH has only one value
DATA.WeekTable.defaultWeek has only one value
return has only one value
return[] contains no nulls and has only one value, of length 8
return[].getClass().getName() == [DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType]
return[].getClass().getName() elements == DATA.ClassType.class
size(this.teachers[]) == 5
size(this.classrooms[]) == 9
size(this.groups[]) == 4
size(this.types[]) == 8
size(this.fields[]) == 6
size(return[]) == 8
===========================================================================
DATA.Field:::OBJECT
this.type.duration == this.duration
this.type.duration.begin == this.duration.begin
this.type.duration.end == this.duration.end
this.duration.begin.day == this.duration.end.day
this.type != null
this.type.name != null
this.type.shortName != null
this.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
this.name != null
this.duration != null
this.duration.begin != null
this.duration.begin.day == 0
this.duration.begin.hour one of { 1, 4 }
this.duration.begin.min one of { 0, 30 }
this.duration.end != null
this.duration.end.hour one of { 1, 2, 4 }
this.duration.end.min one of { 0, 30 }
this.duration.begin.day < this.duration.begin.hour
this.duration.begin.day <= this.duration.begin.min
this.duration.begin.day < this.duration.end.hour
this.duration.begin.day <= this.duration.end.min
this.duration.begin.hour != this.duration.begin.min
this.duration.begin.hour <= this.duration.end.hour
this.duration.end.hour % this.duration.begin.hour == 0
this.duration.begin.hour != this.duration.end.min
this.duration.begin.min != this.duration.end.hour
this.duration.begin.min % this.duration.end.hour == 0
this.duration.end.hour != this.duration.end.min
this.duration.end.min % this.duration.end.hour == 0
===========================================================================
DATA.Field.Field(DATA.ClassType, java.lang.String):::ENTER
arg0.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
===========================================================================
DATA.Field.Field(DATA.ClassType, java.lang.String):::EXIT
this.type == orig(arg0)
this.type.name == arg0.name
this.type.shortName == arg0.shortName
this.name == orig(arg1)
this.duration == arg0.duration
this.duration == orig(arg0.duration)
this.duration.begin == arg0.duration.begin
this.duration.begin == orig(arg0.duration.begin)
this.duration.end == arg0.duration.end
this.duration.end == orig(arg0.duration.end)
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.shortName == orig(arg0.shortName)
arg0.shortName.toString == orig(arg0.shortName.toString)
arg1.toString == orig(arg1.toString)
arg0.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
===========================================================================
DATA.Field.getDuration():::ENTER
===========================================================================
DATA.Field.getDuration():::EXIT
this.type == orig(this.type)
this.type.name == orig(this.type.name)
this.type.name.toString == orig(this.type.name.toString)
this.type.shortName == orig(this.type.shortName)
this.type.shortName.toString == orig(this.type.shortName.toString)
this.type.duration == return
this.type.duration.begin == return.begin
this.type.duration.end == return.end
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.duration == return
this.duration.begin == return.begin
this.duration.begin.day == return.begin.day
this.duration.begin.hour == return.begin.hour
this.duration.begin.min == return.begin.min
this.duration.end == return.end
this.duration.end.day == return.begin.day
this.duration.end.hour == return.end.hour
this.duration.end.min == return.end.min
return == orig(this.type.duration)
return == orig(this.duration)
return.begin == orig(this.type.duration.begin)
return.begin == orig(this.duration.begin)
return.begin.day == return.end.day
return.begin.day == orig(this.duration.begin.day)
return.begin.day == orig(this.duration.end.day)
return.begin.hour == orig(this.duration.begin.hour)
return.begin.min == orig(this.duration.begin.min)
return.end == orig(this.type.duration.end)
return.end == orig(this.duration.end)
return.end.hour == orig(this.duration.end.hour)
return.end.min == orig(this.duration.end.min)
return != null
return.begin != null
return.begin.day == 0
return.begin.hour one of { 1, 4 }
return.begin.min one of { 0, 30 }
return.end != null
return.end.hour one of { 1, 2, 4 }
return.end.min one of { 0, 30 }
return.begin.day < return.begin.hour
return.begin.day <= return.begin.min
return.begin.day < return.end.hour
return.begin.day <= return.end.min
return.begin.hour != return.begin.min
return.begin.hour <= return.end.hour
return.end.hour % return.begin.hour == 0
return.begin.hour != return.end.min
return.begin.min != return.end.hour
return.begin.min % return.end.hour == 0
return.end.hour != return.end.min
return.end.min % return.end.hour == 0
===========================================================================
DATA.Field.getType():::ENTER
===========================================================================
DATA.Field.getType():::EXIT
this.type == return
this.type.name == return.name
this.type.name.toString == orig(this.type.name.toString)
this.type.shortName == return.shortName
this.type.shortName.toString == orig(this.type.shortName.toString)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.duration == return.duration
this.duration == orig(this.type.duration)
this.duration == orig(this.duration)
this.duration.begin == return.duration.begin
this.duration.begin == orig(this.type.duration.begin)
this.duration.begin == orig(this.duration.begin)
this.duration.begin.day == orig(this.duration.begin.day)
this.duration.begin.day == orig(this.duration.end.day)
this.duration.begin.hour == orig(this.duration.begin.hour)
this.duration.begin.min == orig(this.duration.begin.min)
this.duration.end == return.duration.end
this.duration.end == orig(this.type.duration.end)
this.duration.end == orig(this.duration.end)
this.duration.end.hour == orig(this.duration.end.hour)
this.duration.end.min == orig(this.duration.end.min)
return == orig(this.type)
return.name == orig(this.type.name)
return.shortName == orig(this.type.shortName)
return != null
return.name != null
return.shortName != null
return.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
===========================================================================
DATA.Filler:::CLASS
===========================================================================
DATA.Filler:::OBJECT
this has only one value
this.classrooms has only one value
this.classrooms != null
this.classrooms[] contains no nulls and has only one value, of length 9
this.classrooms[] elements != null
this.classrooms[].getClass().getName() == [DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom]
this.classrooms[].getClass().getName() elements == DATA.Classroom.class
this.types has only one value
this.types != null
this.types[] contains no nulls and has only one value, of length 8
this.types[] elements != null
this.types[].getClass().getName() == [DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType]
this.types[].getClass().getName() elements == DATA.ClassType.class
this.groups has only one value
this.groups != null
this.groups[] contains no nulls and has only one value, of length 4
this.groups[] elements != null
this.groups[].getClass().getName() == [DATA.Group, DATA.Group, DATA.Group, DATA.Group]
this.groups[].getClass().getName() elements == DATA.Group.class
this.teachers has only one value
this.teachers != null
this.teachers[] contains no nulls and has only one value, of length 5
this.teachers[] elements != null
this.teachers[].getClass().getName() == [DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher]
this.teachers[].getClass().getName() elements == DATA.Teacher.class
this.done[] elements != null
this.done[].getClass().getName() elements == DATA.Lesson.class
this.steps.keys has only one value
this.steps.keys != null
this.steps.keys[] elements != null
this.steps.keys[].getClass().getName() elements == java.lang.Integer.class
this.steps.values has only one value
this.steps.values != null
this.steps.values[] elements != null
this.steps.values[].getClass().getName() elements == java.lang.Integer.class
this.errorsIndexes.keys has only one value
this.errorsIndexes.keys != null
this.errorsIndexes.keys[] == []
this.errorsIndexes.keys[].getClass().getName() == []
this.errorsIndexes.values has only one value
this.errorsIndexes.values != null
this.errorsIndexes.values[] == []
this.errorsIndexes.values[].getClass().getName() == []
this.lastErrorIndex == 0
this.MWWH has only one value
this.MWWH != null
this.MWWH.day == 1
this.MWWH.hour == 12
this.MWWH.min == 0
this.ps has only one value
this.ps != null
this.mode one of { 0, 2 }
size(this.classrooms[]) == 9
size(this.types[]) == 8
size(this.groups[]) == 4
size(this.teachers[]) == 5
size(this.steps.keys[]) >= 1
size(this.steps.values[]) >= 1
===========================================================================
DATA.Filler.Filler(java.io.PrintStream, DATA.DataStore):::ENTER
arg1.MWWH.day == arg1.MWWH.hour
arg0 has only one value
arg1 has only one value
arg1.teachers has only one value
arg1.teachers[] contains no nulls and has only one value, of length 5
arg1.teachers[].getClass().getName() == [DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher]
arg1.teachers[].getClass().getName() elements == DATA.Teacher.class
arg1.classrooms has only one value
arg1.classrooms[] contains no nulls and has only one value, of length 9
arg1.classrooms[].getClass().getName() == [DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom]
arg1.classrooms[].getClass().getName() elements == DATA.Classroom.class
arg1.groups has only one value
arg1.groups[] contains no nulls and has only one value, of length 4
arg1.groups[].getClass().getName() == [DATA.Group, DATA.Group, DATA.Group, DATA.Group]
arg1.groups[].getClass().getName() elements == DATA.Group.class
arg1.types has only one value
arg1.types[] contains no nulls and has only one value, of length 8
arg1.types[].getClass().getName() == [DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType]
arg1.types[].getClass().getName() elements == DATA.ClassType.class
arg1.fields has only one value
arg1.fields[] contains no nulls and has only one value, of length 6
arg1.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg1.fields[].getClass().getName() elements == DATA.Field.class
arg1.MWWH has only one value
arg1.MWWH.day == 1
arg1.MWWH.min == 0
arg1.defaultWeek == null
DATA.WeekTable.minDelta has only one value
DATA.WeekTable.defaultWeek has only one value
size(arg1.teachers[]) == 5
size(arg1.classrooms[]) == 9
size(arg1.groups[]) == 4
size(arg1.types[]) == 8
size(arg1.fields[]) == 6
===========================================================================
DATA.Filler.Filler(java.io.PrintStream, DATA.DataStore):::EXIT
this.classrooms == arg1.classrooms
this.classrooms == orig(arg1.classrooms)
this.types == arg1.types
this.types == orig(arg1.types)
this.groups == arg1.groups
this.groups == orig(arg1.groups)
this.teachers == arg1.teachers
this.teachers == orig(arg1.teachers)
this.MWWH == arg1.MWWH
this.MWWH.day == arg1.MWWH.day
this.MWWH.day == orig(arg1.MWWH.day)
this.MWWH.day == orig(arg1.MWWH.hour)
this.MWWH.hour == arg1.MWWH.hour
this.MWWH.min == arg1.MWWH.min
this.MWWH.min == orig(arg1.MWWH.min)
this.ps == orig(arg0)
arg1.teachers[] == orig(arg1.teachers[])
arg1.classrooms[] == orig(arg1.classrooms[])
arg1.groups[] == orig(arg1.groups[])
arg1.types[] == orig(arg1.types[])
arg1.fields == orig(arg1.fields)
arg1.fields[] == orig(arg1.fields[])
arg1.defaultWeek == orig(arg1.defaultWeek)
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
this.done == null
this.steps == null
this.errorsIndexes == null
this.mode == 0
arg1.teachers[] contains no nulls and has only one value, of length 5
arg1.teachers[].getClass().getName() == [DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher, DATA.Teacher]
arg1.teachers[].getClass().getName() elements == DATA.Teacher.class
arg1.classrooms[] contains no nulls and has only one value, of length 9
arg1.classrooms[].getClass().getName() == [DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom, DATA.Classroom]
arg1.classrooms[].getClass().getName() elements == DATA.Classroom.class
arg1.groups[] contains no nulls and has only one value, of length 4
arg1.groups[].getClass().getName() == [DATA.Group, DATA.Group, DATA.Group, DATA.Group]
arg1.groups[].getClass().getName() elements == DATA.Group.class
arg1.types[] contains no nulls and has only one value, of length 8
arg1.types[].getClass().getName() == [DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType]
arg1.types[].getClass().getName() elements == DATA.ClassType.class
arg1.fields has only one value
arg1.fields[] contains no nulls and has only one value, of length 6
arg1.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg1.fields[].getClass().getName() elements == DATA.Field.class
arg1.defaultWeek == null
DATA.WeekTable.minDelta has only one value
DATA.WeekTable.defaultWeek has only one value
size(arg1.teachers[]) == 5
size(arg1.classrooms[]) == 9
size(arg1.groups[]) == 4
size(arg1.types[]) == 8
size(arg1.fields[]) == 6
===========================================================================
DATA.Filler.attributeTeachers(java.util.ArrayList):::ENTER
this.done == null
this.steps == null
this.errorsIndexes == null
this.mode == 0
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 6
arg0[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg0[].getClass().getName() elements == DATA.Field.class
size(arg0[]) == 6
===========================================================================
DATA.Filler.attributeTeachers(java.util.ArrayList):::EXIT
this.classrooms == orig(this.classrooms)
this.classrooms[] == orig(this.classrooms[])
this.types == orig(this.types)
this.types[] == orig(this.types[])
this.groups == orig(this.groups)
this.groups[] == orig(this.groups[])
this.teachers == orig(this.teachers)
this.teachers[] == orig(this.teachers[])
this.done == orig(this.done)
this.steps == orig(this.steps)
this.errorsIndexes == orig(this.errorsIndexes)
this.lastErrorIndex == orig(this.lastErrorIndex)
this.MWWH == orig(this.MWWH)
this.MWWH.day == orig(this.MWWH.day)
this.MWWH.hour == orig(this.MWWH.hour)
this.MWWH.min == orig(this.MWWH.min)
this.ps == orig(this.ps)
this.mode == orig(this.mode)
arg0[] == orig(arg0[])
this.done == null
this.steps == null
this.errorsIndexes == null
this.mode == 0
arg0[] contains no nulls and has only one value, of length 6
arg0[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg0[].getClass().getName() elements == DATA.Field.class
return == true
===========================================================================
DATA.Filler.attributeTeachers(java.util.ArrayList):::EXIT;condition="return == true"
===========================================================================
DATA.Filler.computeConstraints(boolean):::ENTER
this.done == null
this.steps == null
this.errorsIndexes == null
this.mode == 0
arg0 == true
===========================================================================
DATA.Filler.computeConstraints(boolean):::EXIT
this.classrooms == orig(this.classrooms)
this.classrooms[] == orig(this.classrooms[])
this.types == orig(this.types)
this.types[] == orig(this.types[])
this.groups == orig(this.groups)
this.groups[] == orig(this.groups[])
this.teachers == orig(this.teachers)
this.teachers[] == orig(this.teachers[])
this.done == orig(this.done)
this.steps == orig(this.steps)
this.errorsIndexes == orig(this.errorsIndexes)
this.lastErrorIndex == orig(this.lastErrorIndex)
this.MWWH == orig(this.MWWH)
this.MWWH.day == orig(this.MWWH.day)
this.MWWH.hour == orig(this.MWWH.hour)
this.MWWH.min == orig(this.MWWH.min)
this.ps == orig(this.ps)
this.mode == orig(this.mode)
this.done == null
this.steps == null
this.errorsIndexes == null
this.mode == 0
return has only one value
return.keys has only one value
return.keys[] contains no nulls and has only one value, of length 23
return.keys[].getClass().getName() == [DATA.Teacher, DATA.Field, DATA.Field, DATA.Teacher, DATA.Field, DATA.Group, DATA.Group, DATA.Group, DATA.ClassType, DATA.Field, DATA.Field, DATA.Teacher, DATA.Teacher, DATA.ClassType, DATA.ClassType, DATA.Field, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.Teacher, DATA.Group]
return.values has only one value
return.values[] contains no nulls and has only one value, of length 23
return.values[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
return.values[].getClass().getName() elements == java.lang.Double.class
size(return.keys[]) == 23
size(return.values[]) == 23
===========================================================================
DATA.Filler.fill(DATA.HashMap, int):::ENTER
this.done == null
this.steps == null
this.errorsIndexes == null
this.mode == 0
arg0 has only one value
arg0.keys has only one value
arg0.keys[] contains no nulls and has only one value, of length 23
arg0.keys[].getClass().getName() == [DATA.Teacher, DATA.Field, DATA.Field, DATA.Teacher, DATA.Field, DATA.Group, DATA.Group, DATA.Group, DATA.ClassType, DATA.Field, DATA.Field, DATA.Teacher, DATA.Teacher, DATA.ClassType, DATA.ClassType, DATA.Field, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.Teacher, DATA.Group]
arg0.values has only one value
arg0.values[] contains no nulls and has only one value, of length 23
arg0.values[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
arg0.values[].getClass().getName() elements == java.lang.Double.class
arg1 == 2
size(arg0.keys[]) == 23
size(arg0.values[]) == 23
===========================================================================
DATA.Filler.fill(DATA.HashMap, int):::EXIT
this.classrooms == orig(this.classrooms)
this.classrooms[] == orig(this.classrooms[])
this.types == orig(this.types)
this.types[] == orig(this.types[])
this.groups == orig(this.groups)
this.groups[] == orig(this.groups[])
this.teachers == orig(this.teachers)
this.teachers[] == orig(this.teachers[])
this.lastErrorIndex == orig(this.lastErrorIndex)
this.MWWH == orig(this.MWWH)
this.MWWH.day == orig(this.MWWH.day)
this.MWWH.hour == orig(this.MWWH.hour)
this.MWWH.min == orig(this.MWWH.min)
this.ps == orig(this.ps)
this.mode == orig(arg1)
arg0.keys == orig(arg0.keys)
arg0.keys[] == orig(arg0.keys[])
arg0.values == orig(arg0.values)
arg0.values[] == orig(arg0.values[])
this.done has only one value
this.done[] contains no nulls and has only one value, of length 30
this.done[].getClass().getName() == [DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson]
this.steps has only one value
this.steps.keys[] contains no nulls and has only one value, of length 23
this.steps.keys[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.steps.values[] contains no nulls and has only one value, of length 23
this.steps.values[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.errorsIndexes has only one value
this.mode == 2
arg0.keys has only one value
arg0.keys[] contains no nulls and has only one value, of length 23
arg0.keys[].getClass().getName() == [DATA.Teacher, DATA.Field, DATA.Field, DATA.Teacher, DATA.Field, DATA.Group, DATA.Group, DATA.Group, DATA.ClassType, DATA.Field, DATA.Field, DATA.Teacher, DATA.Teacher, DATA.ClassType, DATA.ClassType, DATA.Field, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.Teacher, DATA.Group]
arg0.values has only one value
arg0.values[] contains no nulls and has only one value, of length 23
arg0.values[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
arg0.values[].getClass().getName() elements == java.lang.Double.class
return == 0
size(this.done[]) == 30
size(this.steps.keys[]) == 23
size(this.steps.values[]) == 23
size(arg0.keys[]) == 23
size(arg0.values[]) == 23
===========================================================================
DATA.Filler.findClassRoom(DATA.ClassType, DATA.Slot):::ENTER
arg1.begin.day == arg1.end.day
this.done has only one value
this.done != null
this.steps has only one value
this.steps != null
this.errorsIndexes has only one value
this.errorsIndexes != null
this.mode == 2
arg0 != null
arg0.name != null
arg0.shortName != null
arg0.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
arg0.duration != null
arg0.duration.begin != null
arg0.duration.end != null
arg1 != null
arg1.begin != null
arg1.begin.day >= 0
arg1.begin.min >= 0
arg1.end != null
arg1.end.min >= 0
this.MWWH.day < arg1.begin.hour
this.MWWH.day < arg1.end.hour
this.MWWH.day != arg1.end.min
this.MWWH.hour > arg1.begin.day
this.MWWH.hour != arg1.begin.hour
this.MWWH.hour != arg1.end.min
this.MWWH.min <= arg1.begin.day
this.MWWH.min < arg1.begin.hour
this.MWWH.min <= arg1.begin.min
this.MWWH.min < arg1.end.hour
this.MWWH.min <= arg1.end.min
arg1.begin.day < arg1.begin.hour
arg1.begin.day < arg1.end.hour
arg1.begin.hour < arg1.end.hour
arg1.begin.hour != arg1.end.min
arg1.end.hour != arg1.end.min
===========================================================================
DATA.Filler.findClassRoom(DATA.ClassType, DATA.Slot):::EXIT955
arg1.begin.min one of { 0, 30 }
arg1.end.min one of { 0, 30 }
return != null
this.MWWH.day != arg1.begin.min
this.MWWH.hour != arg1.begin.min
arg1.begin.hour != arg1.begin.min
arg1.begin.min != arg1.end.hour
===========================================================================
DATA.Filler.findClassRoom(DATA.ClassType, DATA.Slot):::EXIT959
this.done[].getClass().getName() one of { [DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson], [DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson] }
this.steps.keys[].getClass().getName() one of { [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] }
this.steps.values[].getClass().getName() one of { [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] }
arg0.name has only one value
arg0.name.toString == "Cours"
arg0.shortName has only one value
arg0.shortName.toString == "Amphith\351\342tre"
arg0.duration has only one value
arg0.duration.begin has only one value
arg0.duration.end has only one value
arg1.begin.day one of { 0, 3 }
arg1.begin.hour one of { 8, 10 }
arg1.end.hour one of { 9, 11, 12 }
return == null
orig(arg0) has only one value
size(this.done[]) one of { 27, 28 }
size(this.steps.keys[]) one of { 7, 8 }
size(this.steps.values[]) one of { 7, 8 }
this.MWWH.day != arg1.begin.day
this.MWWH.hour > arg1.begin.hour
this.MWWH.hour >= arg1.end.hour
arg1.begin.day <= arg1.end.min
arg1.begin.min != arg1.end.min
===========================================================================
DATA.Filler.findClassRoom(DATA.ClassType, DATA.Slot):::EXIT
this.classrooms == orig(this.classrooms)
this.classrooms[] == orig(this.classrooms[])
this.types == orig(this.types)
this.types[] == orig(this.types[])
this.groups == orig(this.groups)
this.groups[] == orig(this.groups[])
this.teachers == orig(this.teachers)
this.teachers[] == orig(this.teachers[])
this.done == orig(this.done)
this.done[] == orig(this.done[])
this.steps == orig(this.steps)
this.steps.keys == orig(this.steps.keys)
this.steps.keys[] == orig(this.steps.keys[])
this.steps.values == orig(this.steps.values)
this.steps.values[] == orig(this.steps.values[])
this.errorsIndexes == orig(this.errorsIndexes)
this.errorsIndexes.keys == orig(this.errorsIndexes.keys)
this.errorsIndexes.keys[] == orig(this.errorsIndexes.keys[])
this.errorsIndexes.values == orig(this.errorsIndexes.values)
this.errorsIndexes.values[] == orig(this.errorsIndexes.values[])
this.lastErrorIndex == orig(this.lastErrorIndex)
this.MWWH == orig(this.MWWH)
this.MWWH.day == orig(this.MWWH.day)
this.MWWH.hour == orig(this.MWWH.hour)
this.MWWH.min == orig(this.MWWH.min)
this.ps == orig(this.ps)
this.mode == orig(this.mode)
arg0.name == return.type.name
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.shortName == return.type.shortName
arg0.shortName == orig(arg0.shortName)
arg0.shortName.toString == orig(arg0.shortName.toString)
arg0.duration == return.type.duration
arg0.duration == orig(arg0.duration)
arg0.duration.begin == orig(arg0.duration.begin)
arg0.duration.end == orig(arg0.duration.end)
arg1.begin == orig(arg1.begin)
arg1.begin.day == arg1.end.day
arg1.begin.day == orig(arg1.begin.day)
arg1.begin.day == orig(arg1.end.day)
arg1.begin.hour == orig(arg1.begin.hour)
arg1.begin.min == orig(arg1.begin.min)
arg1.end == orig(arg1.end)
arg1.end.hour == orig(arg1.end.hour)
arg1.end.min == orig(arg1.end.min)
return.type == orig(arg0)
(return != null)  ==>  (arg0.duration == return.type.duration)
(return != null)  ==>  (arg0.name == return.type.name)
(return != null)  ==>  (arg0.shortName == return.type.shortName)
(return != null)  ==>  (arg0.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" })
(return != null)  ==>  (arg1.begin.hour != arg1.begin.min)
(return != null)  ==>  (arg1.begin.min != arg1.end.hour)
(return != null)  ==>  (arg1.begin.min one of { 0, 30 })
(return != null)  ==>  (arg1.end.min one of { 0, 30 })
(return != null)  ==>  (return.coords != null)
(return != null)  ==>  (return.effectif one of { 25, 32, 100 })
(return != null)  ==>  (return.name != null)
(return != null)  ==>  (return.timeTable != null)
(return != null)  ==>  (return.timeTable.owner != null)
(return != null)  ==>  (return.timeTable.owner.getClass().getName() == DATA.Classroom.class)
(return != null)  ==>  (return.timeTable.owner.getClass().getName() in this.classrooms[].getClass().getName())
(return != null)  ==>  (return.timeTable.slots != null)
(return != null)  ==>  (return.timeTable.slots[] elements != null)
(return != null)  ==>  (return.type != null)
(return != null)  ==>  (return.type == orig(arg0))
(return != null)  ==>  (return.type.duration != null)
(return != null)  ==>  (return.type.name != null)
(return != null)  ==>  (return.type.shortName != null)
(return != null)  ==>  (return.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" })
(return != null)  ==>  (size(this.steps.keys[]) >= 1)
(return != null)  ==>  (size(this.steps.values[]) >= 1)
(return != null)  ==>  (this.MWWH.day != arg1.begin.min)
(return != null)  ==>  (this.MWWH.hour != arg1.begin.min)
(return == null)  ==>  (arg0.duration has only one value)
(return == null)  ==>  (arg0.duration.begin has only one value)
(return == null)  ==>  (arg0.duration.end has only one value)
(return == null)  ==>  (arg0.name has only one value)
(return == null)  ==>  (arg0.name.toString == "Cours")
(return == null)  ==>  (arg0.shortName has only one value)
(return == null)  ==>  (arg0.shortName.toString == "Amphith\351\342tre")
(return == null)  ==>  (arg1.begin.day <= arg1.end.min)
(return == null)  ==>  (arg1.begin.day one of { 0, 3 })
(return == null)  ==>  (arg1.begin.hour one of { 8, 10 })
(return == null)  ==>  (arg1.begin.min != arg1.end.min)
(return == null)  ==>  (arg1.end.hour one of { 9, 11, 12 })
(return == null)  ==>  (orig(arg0) has only one value)
(return == null)  ==>  (size(this.done[]) one of { 27, 28 })
(return == null)  ==>  (size(this.steps.keys[]) one of { 7, 8 })
(return == null)  ==>  (size(this.steps.values[]) one of { 7, 8 })
(return == null)  ==>  (this.MWWH.day != arg1.begin.day)
(return == null)  ==>  (this.MWWH.hour > arg1.begin.hour)
(return == null)  ==>  (this.MWWH.hour >= arg1.end.hour)
(return == null)  ==>  (this.done[].getClass().getName() one of { [DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson], [DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson] })
(return == null)  ==>  (this.steps.keys[].getClass().getName() one of { [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] })
(return == null)  ==>  (this.steps.values[].getClass().getName() one of { [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] })
this.done has only one value
this.done != null
this.steps has only one value
this.steps != null
this.errorsIndexes has only one value
this.errorsIndexes != null
this.mode == 2
arg0.name != null
arg0.shortName != null
arg0.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
arg0.duration != null
arg0.duration.begin != null
arg0.duration.end != null
arg1.begin != null
arg1.begin.day >= 0
arg1.begin.min >= 0
arg1.end != null
arg1.end.min >= 0
return.coords != null
return.type != null
return.type.name != null
return.type.shortName != null
return.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
return.type.duration != null
return.name != null
return.effectif one of { 25, 32, 100 }
return.timeTable != null
return.timeTable.slots != null
return.timeTable.slots[] elements != null
return.timeTable.owner != null
return.timeTable.owner.getClass().getName() == DATA.Classroom.class
DATA.WeekTable.minDelta has only one value
DATA.WeekTable.minDelta != null
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
return.timeTable.owner.getClass().getName() in this.classrooms[].getClass().getName()
this.MWWH.day < arg1.begin.hour
this.MWWH.day < arg1.end.hour
this.MWWH.day != arg1.end.min
this.MWWH.hour > arg1.begin.day
this.MWWH.hour != arg1.begin.hour
this.MWWH.hour != arg1.end.min
this.MWWH.min <= arg1.begin.day
this.MWWH.min < arg1.begin.hour
this.MWWH.min <= arg1.begin.min
this.MWWH.min < arg1.end.hour
this.MWWH.min <= arg1.end.min
arg1.begin.day < arg1.begin.hour
arg1.begin.day < arg1.end.hour
arg1.begin.hour < arg1.end.hour
arg1.begin.hour != arg1.end.min
arg1.end.hour != arg1.end.min
===========================================================================
DATA.Filler.orderByValues(java.util.ArrayList):::ENTER
this.done == null
this.steps == null
this.errorsIndexes == null
this.mode == 0
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 4
arg0[].getClass().getName() == [DATA.HashMap, DATA.HashMap, DATA.HashMap, DATA.HashMap]
arg0[].getClass().getName() elements == DATA.HashMap.class
size(arg0[]) == 4
===========================================================================
DATA.Filler.orderByValues(java.util.ArrayList):::EXIT
this.classrooms == orig(this.classrooms)
this.classrooms[] == orig(this.classrooms[])
this.types == orig(this.types)
this.types[] == orig(this.types[])
this.groups == orig(this.groups)
this.groups[] == orig(this.groups[])
this.teachers == orig(this.teachers)
this.teachers[] == orig(this.teachers[])
this.done == orig(this.done)
this.steps == orig(this.steps)
this.errorsIndexes == orig(this.errorsIndexes)
this.lastErrorIndex == orig(this.lastErrorIndex)
this.MWWH == orig(this.MWWH)
this.MWWH.day == orig(this.MWWH.day)
this.MWWH.hour == orig(this.MWWH.hour)
this.MWWH.min == orig(this.MWWH.min)
this.ps == orig(this.ps)
this.mode == orig(this.mode)
arg0[] == orig(arg0[])
this.done == null
this.steps == null
this.errorsIndexes == null
this.mode == 0
arg0[] contains no nulls and has only one value, of length 4
arg0[].getClass().getName() == [DATA.HashMap, DATA.HashMap, DATA.HashMap, DATA.HashMap]
arg0[].getClass().getName() elements == DATA.HashMap.class
return has only one value
return.keys has only one value
return.keys[] contains no nulls and has only one value, of length 23
return.keys[].getClass().getName() == [DATA.Teacher, DATA.Field, DATA.Field, DATA.Teacher, DATA.Field, DATA.Group, DATA.Group, DATA.Group, DATA.ClassType, DATA.Field, DATA.Field, DATA.Teacher, DATA.Teacher, DATA.ClassType, DATA.ClassType, DATA.Field, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.Teacher, DATA.Group]
return.values has only one value
return.values[] contains no nulls and has only one value, of length 23
return.values[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
return.values[].getClass().getName() elements == java.lang.Double.class
size(return.keys[]) == 23
size(return.values[]) == 23
===========================================================================
DATA.Filler.takeCareOf(DATA.ClassType, java.util.ArrayList, java.util.ArrayList):::ENTER
this.done has only one value
this.done[] contains no nulls and has only one value, of length 30
this.done[].getClass().getName() == [DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson]
this.steps has only one value
this.errorsIndexes has only one value
this.mode == 2
arg1 has only one value
arg1[] contains no nulls and has only one value, of length 4
arg1[].getClass().getName() == [DATA.Group, DATA.Group, DATA.Group, DATA.Group]
arg1[].getClass().getName() elements == DATA.Group.class
arg2 has only one value
arg2[] contains no nulls and has only one value, of length 6
arg2[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg2[].getClass().getName() elements == DATA.Field.class
size(this.done[]) == 30
size(arg1[]) == 4
size(arg2[]) == 6
===========================================================================
DATA.Filler.takeCareOf(DATA.ClassType, java.util.ArrayList, java.util.ArrayList):::EXIT674
===========================================================================
DATA.Filler.takeCareOf(DATA.ClassType, java.util.ArrayList, java.util.ArrayList):::EXIT674;condition="return == true"
===========================================================================
DATA.Filler.takeCareOf(DATA.ClassType, java.util.ArrayList, java.util.ArrayList):::EXIT
this.classrooms == orig(this.classrooms)
this.classrooms[] == orig(this.classrooms[])
this.types == orig(this.types)
this.types[] == orig(this.types[])
this.groups == orig(this.groups)
this.groups[] == orig(this.groups[])
this.teachers == orig(this.teachers)
this.teachers[] == orig(this.teachers[])
this.done == orig(this.done)
this.done[] == orig(this.done[])
this.steps == orig(this.steps)
this.steps.keys == orig(this.steps.keys)
this.steps.keys[] == orig(this.steps.keys[])
this.steps.values == orig(this.steps.values)
this.steps.values[] == orig(this.steps.values[])
this.errorsIndexes == orig(this.errorsIndexes)
this.errorsIndexes.keys == orig(this.errorsIndexes.keys)
this.errorsIndexes.keys[] == orig(this.errorsIndexes.keys[])
this.errorsIndexes.values == orig(this.errorsIndexes.values)
this.errorsIndexes.values[] == orig(this.errorsIndexes.values[])
this.lastErrorIndex == orig(this.lastErrorIndex)
this.MWWH == orig(this.MWWH)
this.MWWH.day == orig(this.MWWH.day)
this.MWWH.hour == orig(this.MWWH.hour)
this.MWWH.min == orig(this.MWWH.min)
this.ps == orig(this.ps)
this.mode == orig(this.mode)
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.shortName == orig(arg0.shortName)
arg0.shortName.toString == orig(arg0.shortName.toString)
arg0.duration == orig(arg0.duration)
arg0.duration.begin == orig(arg0.duration.begin)
arg0.duration.end == orig(arg0.duration.end)
arg1[] == orig(arg1[])
arg2[] == orig(arg2[])
this.done has only one value
this.done[] contains no nulls and has only one value, of length 30
this.done[].getClass().getName() == [DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson, DATA.Lesson]
this.steps has only one value
this.errorsIndexes has only one value
this.mode == 2
arg1[] contains no nulls and has only one value, of length 4
arg1[].getClass().getName() == [DATA.Group, DATA.Group, DATA.Group, DATA.Group]
arg1[].getClass().getName() elements == DATA.Group.class
arg2[] contains no nulls and has only one value, of length 6
arg2[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg2[].getClass().getName() elements == DATA.Field.class
return == true
size(this.done[]) == 30
===========================================================================
DATA.Filler.takeCareOf(DATA.ClassType, java.util.ArrayList, java.util.ArrayList):::EXIT;condition="return == true"
===========================================================================
DATA.Filler.takeCareOf(DATA.Field, java.util.ArrayList):::ENTER
arg0.type.duration == arg0.duration
this.done has only one value
this.steps has only one value
this.errorsIndexes has only one value
this.mode == 2
arg0.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
arg1 has only one value
arg1[] contains no nulls and has only one value, of length 4
arg1[].getClass().getName() == [DATA.Group, DATA.Group, DATA.Group, DATA.Group]
arg1[].getClass().getName() elements == DATA.Group.class
size(arg1[]) == 4
===========================================================================
DATA.Filler.takeCareOf(DATA.Field, java.util.ArrayList):::EXIT661
===========================================================================
DATA.Filler.takeCareOf(DATA.Field, java.util.ArrayList):::EXIT661;condition="return == true"
===========================================================================
DATA.Filler.takeCareOf(DATA.Field, java.util.ArrayList):::EXIT
this.classrooms == orig(this.classrooms)
this.classrooms[] == orig(this.classrooms[])
this.types == orig(this.types)
this.types[] == orig(this.types[])
this.groups == orig(this.groups)
this.groups[] == orig(this.groups[])
this.teachers == orig(this.teachers)
this.teachers[] == orig(this.teachers[])
this.done == orig(this.done)
this.steps == orig(this.steps)
this.steps.keys == orig(this.steps.keys)
this.steps.keys[] == orig(this.steps.keys[])
this.steps.values == orig(this.steps.values)
this.steps.values[] == orig(this.steps.values[])
this.errorsIndexes == orig(this.errorsIndexes)
this.errorsIndexes.keys == orig(this.errorsIndexes.keys)
this.errorsIndexes.keys[] == orig(this.errorsIndexes.keys[])
this.errorsIndexes.values == orig(this.errorsIndexes.values)
this.errorsIndexes.values[] == orig(this.errorsIndexes.values[])
this.lastErrorIndex == orig(this.lastErrorIndex)
this.MWWH == orig(this.MWWH)
this.MWWH.day == orig(this.MWWH.day)
this.MWWH.hour == orig(this.MWWH.hour)
this.MWWH.min == orig(this.MWWH.min)
this.ps == orig(this.ps)
this.mode == orig(this.mode)
arg0.type == orig(arg0.type)
arg0.type.name == orig(arg0.type.name)
arg0.type.name.toString == orig(arg0.type.name.toString)
arg0.type.shortName == orig(arg0.type.shortName)
arg0.type.shortName.toString == orig(arg0.type.shortName.toString)
arg0.type.duration == arg0.duration
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.duration == orig(arg0.type.duration)
arg0.duration == orig(arg0.duration)
arg0.duration.begin == orig(arg0.duration.begin)
arg0.duration.end == orig(arg0.duration.end)
arg1[] == orig(arg1[])
this.done has only one value
this.steps has only one value
this.errorsIndexes has only one value
this.mode == 2
arg0.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
arg1[] contains no nulls and has only one value, of length 4
arg1[].getClass().getName() == [DATA.Group, DATA.Group, DATA.Group, DATA.Group]
arg1[].getClass().getName() elements == DATA.Group.class
return == true
size(this.done[]) one of { 21, 24, 30 }
===========================================================================
DATA.Filler.takeCareOf(DATA.Field, java.util.ArrayList):::EXIT;condition="return == true"
===========================================================================
DATA.Filler.takeCareOf(DATA.Group, DATA.Field):::ENTER
arg1.type.duration == arg1.duration
this.done has only one value
this.done != null
this.steps has only one value
this.steps != null
this.errorsIndexes has only one value
this.errorsIndexes != null
this.mode == 2
arg0 != null
arg0.name != null
arg0.name.toString one of { "g2116", "g42", "g46" }
arg0.effectif == 25
arg0.links != null
arg0.classes has only one value
arg0.classes != null
arg0.classes.keys has only one value
arg0.classes.keys != null
arg0.classes.keys[] contains no nulls and has only one value, of length 6
arg0.classes.keys[] elements != null
arg0.classes.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg0.classes.keys[].getClass().getName() elements == DATA.Field.class
arg0.classes.values has only one value
arg0.classes.values != null
arg0.classes.values[] contains no nulls and has only one value, of length 6
arg0.classes.values[] elements != null
arg0.classes.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
arg0.classes.values[].getClass().getName() elements == DATA.Time.class
arg0.done != null
arg0.done.keys != null
arg0.done.keys[] contains no nulls and has only one value, of length 6
arg0.done.keys[] elements != null
arg0.done.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg0.done.keys[].getClass().getName() elements == DATA.Field.class
arg0.done.values != null
arg0.done.values[] elements != null
arg0.done.values[].getClass().getName() == [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean]
arg0.done.values[].getClass().getName() elements == java.lang.Boolean.class
arg0.parent has only one value
arg0.parent != null
arg0.parent.name has only one value
arg0.parent.name != null
arg0.parent.name.toString == "Lanip"
arg0.parent.effectif == 100
arg0.parent.links has only one value
arg0.parent.links != null
arg0.parent.classes has only one value
arg0.parent.classes != null
arg0.parent.done has only one value
arg0.parent.done != null
arg0.parent.parent == null
arg0.parent.children has only one value
arg0.parent.children != null
arg0.parent.children.getClass().getName() == DATA.Group[].class
arg0.parent.children[] contains no nulls and has only one value, of length 2
arg0.parent.children[] elements != null
arg0.parent.children[].getClass().getName() == [DATA.Group, DATA.Group]
arg0.parent.children[].getClass().getName() elements == DATA.Group.class
arg0.parent.children[].name contains no nulls and has only one value, of length 2
arg0.parent.children[].name elements != null
arg0.parent.children[].name.toString == [g46, g42]
arg0.parent.children[].name.toString elements one of { "g42", "g46" }
arg0.parent.children[].effectif == [25, 25]
arg0.parent.children[].effectif elements == 25
arg0.parent.children[].links contains no nulls and has only one value, of length 2
arg0.parent.children[].links elements != null
arg0.parent.children[].classes contains no nulls and has only one value, of length 2
arg0.parent.children[].classes elements has only one value
arg0.parent.children[].classes elements != null
arg0.parent.children[].done contains no nulls and has only one value, of length 2
arg0.parent.children[].done elements != null
arg0.parent.children[].parent contains no nulls and has only one value, of length 2
arg0.parent.children[].parent elements has only one value
arg0.parent.children[].parent elements != null
arg0.parent.children[].children contains only nulls and has only one value, of length 2
arg0.parent.children[].children elements == null
arg0.parent.children[].children.getClass().getName() == [null, null]
arg0.parent.children[].children.getClass().getName() elements == null
arg0.parent.children[].timeTable contains no nulls and has only one value, of length 2
arg0.parent.children[].timeTable elements != null
arg0.parent.timeTable has only one value
arg0.parent.timeTable != null
arg0.children == null
arg0.timeTable != null
arg0.timeTable.slots != null
arg0.timeTable.slots[] elements != null
arg0.timeTable.owner != null
arg0.timeTable.owner.getClass().getName() == DATA.Group.class
DATA.WeekTable.minDelta has only one value
DATA.WeekTable.minDelta != null
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
arg1 != null
arg1.type != null
arg1.type.name != null
arg1.type.shortName != null
arg1.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
arg1.name != null
arg1.duration != null
arg1.duration.begin != null
arg1.duration.end != null
size(arg0.classes.keys[]) == 6
size(arg0.classes.values[]) == 6
size(arg0.done.keys[]) == 6
size(arg0.done.values[]) == 6
size(arg0.parent.children[]) == 2
arg0.timeTable.owner.getClass().getName() in this.groups[].getClass().getName()
arg0.effectif in arg0.parent.children[].effectif
arg0.parent.children[].effectif elements == arg0.effectif
arg0.classes in arg0.parent.children[].classes
arg0.parent.children[].classes elements == arg0.classes
arg0.parent in arg0.parent.children[].parent
arg0.parent.children[].parent elements == arg0.parent
arg0.parent.children.getClass().getName() != arg0.timeTable.owner.getClass().getName()
arg0.timeTable.owner.getClass().getName() in arg0.parent.children[].getClass().getName()
===========================================================================
DATA.Filler.takeCareOf(DATA.Group, DATA.Field):::EXIT862
===========================================================================
DATA.Filler.takeCareOf(DATA.Group, DATA.Field):::EXIT862;condition="return == true"
===========================================================================
DATA.Filler.takeCareOf(DATA.Group, DATA.Field):::EXIT
this.classrooms == orig(this.classrooms)
this.classrooms[] == orig(this.classrooms[])
this.types == orig(this.types)
this.types[] == orig(this.types[])
this.groups == orig(this.groups)
this.groups[] == orig(this.groups[])
this.teachers == orig(this.teachers)
this.teachers[] == orig(this.teachers[])
this.done == orig(this.done)
this.steps == orig(this.steps)
this.steps.keys == orig(this.steps.keys)
this.steps.keys[] == orig(this.steps.keys[])
this.steps.values == orig(this.steps.values)
this.steps.values[] == orig(this.steps.values[])
this.errorsIndexes == orig(this.errorsIndexes)
this.errorsIndexes.keys == orig(this.errorsIndexes.keys)
this.errorsIndexes.keys[] == orig(this.errorsIndexes.keys[])
this.errorsIndexes.values == orig(this.errorsIndexes.values)
this.errorsIndexes.values[] == orig(this.errorsIndexes.values[])
this.lastErrorIndex == orig(this.lastErrorIndex)
this.MWWH == orig(this.MWWH)
this.MWWH.day == orig(this.MWWH.day)
this.MWWH.hour == orig(this.MWWH.hour)
this.MWWH.min == orig(this.MWWH.min)
this.ps == orig(this.ps)
this.mode == orig(this.mode)
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.effectif == orig(arg0.effectif)
arg0.links == orig(arg0.links)
arg0.classes == orig(arg0.classes)
arg0.classes.keys == orig(arg0.classes.keys)
arg0.classes.keys[] == orig(arg0.classes.keys[])
arg0.classes.values == orig(arg0.classes.values)
arg0.classes.values[] == orig(arg0.classes.values[])
arg0.done == orig(arg0.done)
arg0.done.keys == orig(arg0.done.keys)
arg0.done.keys[] == orig(arg0.done.keys[])
arg0.done.values == orig(arg0.done.values)
arg0.parent == orig(arg0.parent)
arg0.parent.name == orig(arg0.parent.name)
arg0.parent.name.toString == orig(arg0.parent.name.toString)
arg0.parent.effectif == orig(arg0.parent.effectif)
arg0.parent.links == orig(arg0.parent.links)
arg0.parent.classes == orig(arg0.parent.classes)
arg0.parent.done == orig(arg0.parent.done)
arg0.parent.parent == orig(arg0.parent.parent)
arg0.parent.children == orig(arg0.parent.children)
arg0.parent.children.getClass().getName() == orig(arg0.parent.children.getClass().getName())
arg0.parent.children[] == orig(arg0.parent.children[])
arg0.parent.children[].name == orig(arg0.parent.children[].name)
arg0.parent.children[].effectif == orig(arg0.parent.children[].effectif)
arg0.parent.children[].links == orig(arg0.parent.children[].links)
arg0.parent.children[].classes == orig(arg0.parent.children[].classes)
arg0.parent.children[].done == orig(arg0.parent.children[].done)
arg0.parent.children[].parent == orig(arg0.parent.children[].parent)
arg0.parent.children[].children == orig(arg0.parent.children[].children)
arg0.parent.children[].timeTable == orig(arg0.parent.children[].timeTable)
arg0.parent.timeTable == orig(arg0.parent.timeTable)
arg0.children == orig(arg0.children)
arg0.timeTable == orig(arg0.timeTable)
arg0.timeTable.slots == orig(arg0.timeTable.slots)
arg0.timeTable.owner == orig(arg0.timeTable.owner)
arg0.timeTable.owner.getClass().getName() == orig(arg0.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
arg1.type == orig(arg1.type)
arg1.type.name == orig(arg1.type.name)
arg1.type.name.toString == orig(arg1.type.name.toString)
arg1.type.shortName == orig(arg1.type.shortName)
arg1.type.shortName.toString == orig(arg1.type.shortName.toString)
arg1.type.duration == arg1.duration
arg1.name == orig(arg1.name)
arg1.name.toString == orig(arg1.name.toString)
arg1.duration == orig(arg1.type.duration)
arg1.duration == orig(arg1.duration)
arg1.duration.begin == orig(arg1.duration.begin)
arg1.duration.end == orig(arg1.duration.end)
size(arg0.done.values[]) == orig(size(arg0.done.values[]))
this.done has only one value
this.done != null
this.steps has only one value
this.steps != null
this.errorsIndexes has only one value
this.errorsIndexes != null
this.mode == 2
arg0.name != null
arg0.name.toString one of { "g2116", "g42", "g46" }
arg0.effectif == 25
arg0.links != null
arg0.classes has only one value
arg0.classes != null
arg0.classes.keys has only one value
arg0.classes.keys != null
arg0.classes.keys[] contains no nulls and has only one value, of length 6
arg0.classes.keys[] elements != null
arg0.classes.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg0.classes.keys[].getClass().getName() elements == DATA.Field.class
arg0.classes.values has only one value
arg0.classes.values != null
arg0.classes.values[] contains no nulls and has only one value, of length 6
arg0.classes.values[] elements != null
arg0.classes.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
arg0.classes.values[].getClass().getName() elements == DATA.Time.class
arg0.done != null
arg0.done.keys != null
arg0.done.keys[] contains no nulls and has only one value, of length 6
arg0.done.keys[] elements != null
arg0.done.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg0.done.keys[].getClass().getName() elements == DATA.Field.class
arg0.done.values != null
arg0.done.values[] elements != null
arg0.done.values[].getClass().getName() == [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean]
arg0.done.values[].getClass().getName() elements == java.lang.Boolean.class
arg0.parent has only one value
arg0.parent != null
arg0.parent.name has only one value
arg0.parent.name != null
arg0.parent.name.toString == "Lanip"
arg0.parent.effectif == 100
arg0.parent.links has only one value
arg0.parent.links != null
arg0.parent.classes has only one value
arg0.parent.classes != null
arg0.parent.done has only one value
arg0.parent.done != null
arg0.parent.parent == null
arg0.parent.children has only one value
arg0.parent.children != null
arg0.parent.children.getClass().getName() == DATA.Group[].class
arg0.parent.children[] contains no nulls and has only one value, of length 2
arg0.parent.children[] elements != null
arg0.parent.children[].getClass().getName() == [DATA.Group, DATA.Group]
arg0.parent.children[].getClass().getName() elements == DATA.Group.class
arg0.parent.children[].name contains no nulls and has only one value, of length 2
arg0.parent.children[].name elements != null
arg0.parent.children[].name.toString == [g46, g42]
arg0.parent.children[].name.toString elements one of { "g42", "g46" }
arg0.parent.children[].effectif == [25, 25]
arg0.parent.children[].effectif elements == 25
arg0.parent.children[].links contains no nulls and has only one value, of length 2
arg0.parent.children[].links elements != null
arg0.parent.children[].classes contains no nulls and has only one value, of length 2
arg0.parent.children[].classes elements has only one value
arg0.parent.children[].classes elements != null
arg0.parent.children[].done contains no nulls and has only one value, of length 2
arg0.parent.children[].done elements != null
arg0.parent.children[].parent contains no nulls and has only one value, of length 2
arg0.parent.children[].parent elements has only one value
arg0.parent.children[].parent elements != null
arg0.parent.children[].children contains only nulls and has only one value, of length 2
arg0.parent.children[].children elements == null
arg0.parent.children[].children.getClass().getName() == [null, null]
arg0.parent.children[].children.getClass().getName() elements == null
arg0.parent.children[].timeTable contains no nulls and has only one value, of length 2
arg0.parent.children[].timeTable elements != null
arg0.parent.timeTable has only one value
arg0.parent.timeTable != null
arg0.children == null
arg0.timeTable != null
arg0.timeTable.slots != null
arg0.timeTable.slots[] elements != null
arg0.timeTable.owner != null
arg0.timeTable.owner.getClass().getName() == DATA.Group.class
DATA.WeekTable.minDelta has only one value
DATA.WeekTable.minDelta != null
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
arg1.type != null
arg1.type.name != null
arg1.type.shortName != null
arg1.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
arg1.name != null
arg1.duration != null
arg1.duration.begin != null
arg1.duration.end != null
return == true
size(arg0.classes.keys[]) == 6
size(arg0.classes.values[]) == 6
size(arg0.done.keys[]) == 6
size(arg0.done.values[]) == 6
size(arg0.parent.children[]) == 2
arg0.timeTable.owner.getClass().getName() in this.groups[].getClass().getName()
arg0.effectif in arg0.parent.children[].effectif
arg0.parent.children[].effectif elements == arg0.effectif
arg0.classes in arg0.parent.children[].classes
arg0.parent.children[].classes elements == arg0.classes
arg0.parent in arg0.parent.children[].parent
arg0.parent.children[].parent elements == arg0.parent
arg0.parent.children.getClass().getName() != arg0.timeTable.owner.getClass().getName()
arg0.timeTable.owner.getClass().getName() in arg0.parent.children[].getClass().getName()
size(this.done[])-1 >= orig(size(this.done[]))
size(arg0.timeTable.slots[]) >= orig(size(arg0.timeTable.slots[]))
size(arg0.timeTable.slots[])-1 >= orig(size(arg0.timeTable.slots[]))-1
===========================================================================
DATA.Filler.takeCareOf(DATA.Group, DATA.Field):::EXIT;condition="return == true"
===========================================================================
DATA.Filler.takeCareOf(DATA.Group, java.util.ArrayList):::ENTER
this.done has only one value
this.steps has only one value
this.errorsIndexes has only one value
this.mode == 2
arg0.effectif one of { 25, 100 }
arg0.classes.keys[].getClass().getName() elements == DATA.Field.class
arg0.classes.keys[].getClass().getName() one of { [], [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field] }
arg0.classes.values[].getClass().getName() elements == DATA.Time.class
arg0.classes.values[].getClass().getName() one of { [], [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time] }
arg0.done.keys[].getClass().getName() elements == DATA.Field.class
arg0.done.keys[].getClass().getName() one of { [], [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field] }
arg0.done.values[].getClass().getName() elements == java.lang.Boolean.class
arg0.done.values[].getClass().getName() one of { [], [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean] }
arg0.parent.name has only one value
arg0.parent.name.toString == "Lanip"
arg0.parent.effectif == 100
arg0.parent.links has only one value
arg0.parent.classes has only one value
arg0.parent.done has only one value
arg0.parent.parent == null
arg0.parent.children has only one value
arg0.parent.children.getClass().getName() == DATA.Group[].class
arg0.parent.children[] contains no nulls and has only one value, of length 2
arg0.parent.children[].getClass().getName() == [DATA.Group, DATA.Group]
arg0.parent.children[].getClass().getName() elements == DATA.Group.class
arg0.parent.children[].name contains no nulls and has only one value, of length 2
arg0.parent.children[].name.toString == [g46, g42]
arg0.parent.children[].name.toString elements one of { "g42", "g46" }
arg0.parent.children[].effectif == [25, 25]
arg0.parent.children[].effectif elements == 25
arg0.parent.children[].links contains no nulls and has only one value, of length 2
arg0.parent.children[].classes contains no nulls and has only one value, of length 2
arg0.parent.children[].classes elements has only one value
arg0.parent.children[].done contains no nulls and has only one value, of length 2
arg0.parent.children[].parent contains no nulls and has only one value, of length 2
arg0.parent.children[].parent elements has only one value
arg0.parent.children[].children contains only nulls and has only one value, of length 2
arg0.parent.children[].children elements == null
arg0.parent.children[].children.getClass().getName() == [null, null]
arg0.parent.children[].children.getClass().getName() elements == null
arg0.parent.children[].timeTable contains no nulls and has only one value, of length 2
arg0.parent.timeTable has only one value
arg0.children.getClass().getName() == DATA.Group[].class
arg0.children[] contains no nulls and has only one value, of length 2
arg0.children[].getClass().getName() == [DATA.Group, DATA.Group]
arg0.children[].getClass().getName() elements == DATA.Group.class
arg0.children[].name contains no nulls and has only one value, of length 2
arg0.children[].name.toString == [g46, g42]
arg0.children[].name.toString elements one of { "g42", "g46" }
arg0.children[].effectif == [25, 25]
arg0.children[].effectif elements == 25
arg0.children[].links contains no nulls and has only one value, of length 2
arg0.children[].classes contains no nulls and has only one value, of length 2
arg0.children[].classes elements has only one value
arg0.children[].done contains no nulls and has only one value, of length 2
arg0.children[].parent contains no nulls and has only one value, of length 2
arg0.children[].parent elements has only one value
arg0.children[].children contains only nulls and has only one value, of length 2
arg0.children[].children elements == null
arg0.children[].children.getClass().getName() == [null, null]
arg0.children[].children.getClass().getName() elements == null
arg0.children[].timeTable contains no nulls and has only one value, of length 2
arg0.timeTable.owner.getClass().getName() == DATA.Group.class
DATA.WeekTable.minDelta has only one value
DATA.WeekTable.defaultWeek has only one value
arg1 has only one value
arg1[] contains no nulls and has only one value, of length 6
arg1[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg1[].getClass().getName() elements == DATA.Field.class
size(arg0.classes.keys[]) one of { 0, 6 }
size(arg0.classes.values[]) one of { 0, 6 }
size(arg0.done.keys[]) one of { 0, 6 }
size(arg0.done.values[]) one of { 0, 6 }
size(arg0.parent.children[]) == 2
size(arg0.children[]) == 2
size(arg1[]) == 6
arg0.timeTable.owner.getClass().getName() in this.groups[].getClass().getName()
arg0 in arg0.children[].parent
arg0.children[].parent elements == arg0
arg0.effectif in arg0.parent.children[].effectif
arg0.parent.children[].effectif elements == arg0.effectif
arg0.classes in arg0.parent.children[].classes
arg0.parent.children[].classes elements == arg0.classes
arg0.parent in arg0.parent.children[].parent
arg0.parent.children[].parent elements == arg0.parent
arg0.parent.children.getClass().getName() in arg0.children[].getClass().getName()
arg0.parent.children.getClass().getName() in arg0.children[].children.getClass().getName()
arg0.children.getClass().getName() in arg0.parent.children[].getClass().getName()
arg0.timeTable.owner.getClass().getName() in arg0.parent.children[].getClass().getName()
arg0.children.getClass().getName() in arg0.parent.children[].children.getClass().getName()
arg0.timeTable.owner.getClass().getName() in arg0.children[].getClass().getName()
===========================================================================
DATA.Filler.takeCareOf(DATA.Group, java.util.ArrayList):::EXIT708
===========================================================================
DATA.Filler.takeCareOf(DATA.Group, java.util.ArrayList):::EXIT708;condition="return == true"
===========================================================================
DATA.Filler.takeCareOf(DATA.Group, java.util.ArrayList):::EXIT
this.classrooms == orig(this.classrooms)
this.classrooms[] == orig(this.classrooms[])
this.types == orig(this.types)
this.types[] == orig(this.types[])
this.groups == orig(this.groups)
this.groups[] == orig(this.groups[])
this.teachers == orig(this.teachers)
this.teachers[] == orig(this.teachers[])
this.done == orig(this.done)
this.steps == orig(this.steps)
this.steps.keys == orig(this.steps.keys)
this.steps.keys[] == orig(this.steps.keys[])
this.steps.values == orig(this.steps.values)
this.steps.values[] == orig(this.steps.values[])
this.errorsIndexes == orig(this.errorsIndexes)
this.errorsIndexes.keys == orig(this.errorsIndexes.keys)
this.errorsIndexes.keys[] == orig(this.errorsIndexes.keys[])
this.errorsIndexes.values == orig(this.errorsIndexes.values)
this.errorsIndexes.values[] == orig(this.errorsIndexes.values[])
this.lastErrorIndex == orig(this.lastErrorIndex)
this.MWWH == orig(this.MWWH)
this.MWWH.day == orig(this.MWWH.day)
this.MWWH.hour == orig(this.MWWH.hour)
this.MWWH.min == orig(this.MWWH.min)
this.ps == orig(this.ps)
this.mode == orig(this.mode)
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.effectif == orig(arg0.effectif)
arg0.links == orig(arg0.links)
arg0.classes == orig(arg0.classes)
arg0.classes.keys == orig(arg0.classes.keys)
arg0.classes.keys[] == orig(arg0.classes.keys[])
arg0.classes.values == orig(arg0.classes.values)
arg0.classes.values[] == orig(arg0.classes.values[])
arg0.done == orig(arg0.done)
arg0.done.keys == orig(arg0.done.keys)
arg0.done.keys[] == orig(arg0.done.keys[])
arg0.done.values == orig(arg0.done.values)
arg0.parent == orig(arg0.parent)
arg0.parent.name == orig(arg0.parent.name)
arg0.parent.name.toString == orig(arg0.parent.name.toString)
arg0.parent.effectif == orig(arg0.parent.effectif)
arg0.parent.links == orig(arg0.parent.links)
arg0.parent.classes == orig(arg0.parent.classes)
arg0.parent.done == orig(arg0.parent.done)
arg0.parent.parent == orig(arg0.parent.parent)
arg0.parent.children == orig(arg0.parent.children)
arg0.parent.children.getClass().getName() == orig(arg0.parent.children.getClass().getName())
arg0.parent.children[] == orig(arg0.parent.children[])
arg0.parent.children[].name == orig(arg0.parent.children[].name)
arg0.parent.children[].effectif == orig(arg0.parent.children[].effectif)
arg0.parent.children[].links == orig(arg0.parent.children[].links)
arg0.parent.children[].classes == orig(arg0.parent.children[].classes)
arg0.parent.children[].done == orig(arg0.parent.children[].done)
arg0.parent.children[].parent == orig(arg0.parent.children[].parent)
arg0.parent.children[].children == orig(arg0.parent.children[].children)
arg0.parent.children[].timeTable == orig(arg0.parent.children[].timeTable)
arg0.parent.timeTable == orig(arg0.parent.timeTable)
arg0.children == orig(arg0.children)
arg0.children.getClass().getName() == orig(arg0.children.getClass().getName())
arg0.children[] == orig(arg0.children[])
arg0.children[].name == orig(arg0.children[].name)
arg0.children[].effectif == orig(arg0.children[].effectif)
arg0.children[].links == orig(arg0.children[].links)
arg0.children[].classes == orig(arg0.children[].classes)
arg0.children[].done == orig(arg0.children[].done)
arg0.children[].parent == orig(arg0.children[].parent)
arg0.children[].children == orig(arg0.children[].children)
arg0.children[].timeTable == orig(arg0.children[].timeTable)
arg0.timeTable == orig(arg0.timeTable)
arg0.timeTable.slots == orig(arg0.timeTable.slots)
arg0.timeTable.owner == orig(arg0.timeTable.owner)
arg0.timeTable.owner.getClass().getName() == orig(arg0.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
arg1[] == orig(arg1[])
size(arg0.done.values[]) == orig(size(arg0.done.values[]))
this.done has only one value
this.steps has only one value
this.errorsIndexes has only one value
this.mode == 2
arg0.effectif one of { 25, 100 }
arg0.classes.keys[].getClass().getName() elements == DATA.Field.class
arg0.classes.keys[].getClass().getName() one of { [], [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field] }
arg0.classes.values[].getClass().getName() elements == DATA.Time.class
arg0.classes.values[].getClass().getName() one of { [], [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time] }
arg0.done.keys[].getClass().getName() elements == DATA.Field.class
arg0.done.keys[].getClass().getName() one of { [], [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field] }
arg0.done.values[] elements has only one value
arg0.done.values[].getClass().getName() elements == java.lang.Boolean.class
arg0.done.values[].getClass().getName() one of { [], [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean] }
arg0.parent.name has only one value
arg0.parent.name.toString == "Lanip"
arg0.parent.effectif == 100
arg0.parent.links has only one value
arg0.parent.classes has only one value
arg0.parent.done has only one value
arg0.parent.parent == null
arg0.parent.children has only one value
arg0.parent.children.getClass().getName() == DATA.Group[].class
arg0.parent.children[] contains no nulls and has only one value, of length 2
arg0.parent.children[].getClass().getName() == [DATA.Group, DATA.Group]
arg0.parent.children[].getClass().getName() elements == DATA.Group.class
arg0.parent.children[].name contains no nulls and has only one value, of length 2
arg0.parent.children[].name.toString == [g46, g42]
arg0.parent.children[].name.toString elements one of { "g42", "g46" }
arg0.parent.children[].effectif == [25, 25]
arg0.parent.children[].effectif elements == 25
arg0.parent.children[].links contains no nulls and has only one value, of length 2
arg0.parent.children[].classes contains no nulls and has only one value, of length 2
arg0.parent.children[].classes elements has only one value
arg0.parent.children[].done contains no nulls and has only one value, of length 2
arg0.parent.children[].parent contains no nulls and has only one value, of length 2
arg0.parent.children[].parent elements has only one value
arg0.parent.children[].children contains only nulls and has only one value, of length 2
arg0.parent.children[].children elements == null
arg0.parent.children[].children.getClass().getName() == [null, null]
arg0.parent.children[].children.getClass().getName() elements == null
arg0.parent.children[].timeTable contains no nulls and has only one value, of length 2
arg0.parent.timeTable has only one value
arg0.children.getClass().getName() == DATA.Group[].class
arg0.children[] contains no nulls and has only one value, of length 2
arg0.children[].getClass().getName() == [DATA.Group, DATA.Group]
arg0.children[].getClass().getName() elements == DATA.Group.class
arg0.children[].name contains no nulls and has only one value, of length 2
arg0.children[].name.toString == [g46, g42]
arg0.children[].name.toString elements one of { "g42", "g46" }
arg0.children[].effectif == [25, 25]
arg0.children[].effectif elements == 25
arg0.children[].links contains no nulls and has only one value, of length 2
arg0.children[].classes contains no nulls and has only one value, of length 2
arg0.children[].classes elements has only one value
arg0.children[].done contains no nulls and has only one value, of length 2
arg0.children[].parent contains no nulls and has only one value, of length 2
arg0.children[].parent elements has only one value
arg0.children[].children contains only nulls and has only one value, of length 2
arg0.children[].children elements == null
arg0.children[].children.getClass().getName() == [null, null]
arg0.children[].children.getClass().getName() elements == null
arg0.children[].timeTable contains no nulls and has only one value, of length 2
arg0.timeTable.owner.getClass().getName() == DATA.Group.class
DATA.WeekTable.minDelta has only one value
DATA.WeekTable.defaultWeek has only one value
arg1[] contains no nulls and has only one value, of length 6
arg1[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg1[].getClass().getName() elements == DATA.Field.class
return == true
size(this.done[]) one of { 26, 28, 30 }
size(arg0.classes.keys[]) one of { 0, 6 }
size(arg0.classes.values[]) one of { 0, 6 }
size(arg0.done.keys[]) one of { 0, 6 }
size(arg0.done.values[]) one of { 0, 6 }
size(arg0.parent.children[]) == 2
size(arg0.children[]) == 2
arg0.timeTable.owner.getClass().getName() in this.groups[].getClass().getName()
arg0.effectif in arg0.parent.children[].effectif
arg0.parent.children[].effectif elements == arg0.effectif
arg0.classes in arg0.parent.children[].classes
arg0.parent.children[].classes elements == arg0.classes
arg0.parent in arg0.parent.children[].parent
arg0.parent.children[].parent elements == arg0.parent
arg0.parent.children.getClass().getName() in arg0.children[].getClass().getName()
arg0.parent.children.getClass().getName() in arg0.children[].children.getClass().getName()
arg0.children.getClass().getName() in arg0.parent.children[].getClass().getName()
arg0.timeTable.owner.getClass().getName() in arg0.parent.children[].getClass().getName()
arg0.children.getClass().getName() in arg0.parent.children[].children.getClass().getName()
arg0.timeTable.owner.getClass().getName() in arg0.children[].getClass().getName()
arg0.children[].parent elements == orig(arg0)
orig(arg0) in arg0.children[].parent
===========================================================================
DATA.Filler.takeCareOf(DATA.Group, java.util.ArrayList):::EXIT;condition="return == true"
===========================================================================
DATA.Filler.takeCareOf(DATA.Teacher, java.util.ArrayList, java.util.ArrayList):::ENTER
this.MWWH.day == arg0.maxWeekWorkedHours.day
this.MWWH.day == arg0.maxWeekWorkedHours.hour
this.MWWH.min == arg0.maxWeekWorkedHours.min
this.MWWH.min == arg0.currentWeekWorkedHours.min
this.done has only one value
this.steps has only one value
this.errorsIndexes has only one value
this.mode == 2
arg0.maxWeekWorkedHours has only one value
arg0.currentWeekWorkedHours.day one of { 0, 1 }
arg0.fields[].getClass().getName() elements == DATA.Field.class
arg0.fields[].getClass().getName() one of { [DATA.Field], [DATA.Field, DATA.Field, DATA.Field] }
arg0.timeTable.owner.getClass().getName() == DATA.Teacher.class
DATA.WeekTable.minDelta has only one value
DATA.WeekTable.defaultWeek has only one value
arg1 has only one value
arg1[] contains no nulls and has only one value, of length 6
arg1[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg1[].getClass().getName() elements == DATA.Field.class
arg2 has only one value
arg2[] contains no nulls and has only one value, of length 4
arg2[].getClass().getName() == [DATA.Group, DATA.Group, DATA.Group, DATA.Group]
arg2[].getClass().getName() elements == DATA.Group.class
size(this.done[]) one of { 0, 24, 30 }
size(arg0.fields[]) one of { 1, 3 }
size(arg1[]) == 6
size(arg2[]) == 4
arg0.timeTable.owner.getClass().getName() in this.teachers[].getClass().getName()
===========================================================================
DATA.Filler.takeCareOf(DATA.Teacher, java.util.ArrayList, java.util.ArrayList):::EXIT695
===========================================================================
DATA.Filler.takeCareOf(DATA.Teacher, java.util.ArrayList, java.util.ArrayList):::EXIT695;condition="return == true"
===========================================================================
DATA.Filler.takeCareOf(DATA.Teacher, java.util.ArrayList, java.util.ArrayList):::EXIT
this.classrooms == orig(this.classrooms)
this.classrooms[] == orig(this.classrooms[])
this.types == orig(this.types)
this.types[] == orig(this.types[])
this.groups == orig(this.groups)
this.groups[] == orig(this.groups[])
this.teachers == orig(this.teachers)
this.teachers[] == orig(this.teachers[])
this.done == orig(this.done)
this.steps == orig(this.steps)
this.steps.keys == orig(this.steps.keys)
this.steps.keys[] == orig(this.steps.keys[])
this.steps.values == orig(this.steps.values)
this.steps.values[] == orig(this.steps.values[])
this.errorsIndexes == orig(this.errorsIndexes)
this.errorsIndexes.keys == orig(this.errorsIndexes.keys)
this.errorsIndexes.keys[] == orig(this.errorsIndexes.keys[])
this.errorsIndexes.values == orig(this.errorsIndexes.values)
this.errorsIndexes.values[] == orig(this.errorsIndexes.values[])
this.lastErrorIndex == orig(this.lastErrorIndex)
this.MWWH == orig(this.MWWH)
this.MWWH.day == arg0.maxWeekWorkedHours.day
this.MWWH.day == arg0.maxWeekWorkedHours.hour
this.MWWH.day == orig(this.MWWH.day)
this.MWWH.day == orig(arg0.maxWeekWorkedHours.day)
this.MWWH.day == orig(arg0.maxWeekWorkedHours.hour)
this.MWWH.hour == orig(this.MWWH.hour)
this.MWWH.min == arg0.maxWeekWorkedHours.min
this.MWWH.min == arg0.currentWeekWorkedHours.min
this.MWWH.min == orig(this.MWWH.min)
this.MWWH.min == orig(arg0.maxWeekWorkedHours.min)
this.MWWH.min == orig(arg0.currentWeekWorkedHours.min)
this.ps == orig(this.ps)
this.mode == orig(this.mode)
arg0.firstName == orig(arg0.firstName)
arg0.firstName.toString == orig(arg0.firstName.toString)
arg0.lastName == orig(arg0.lastName)
arg0.lastName.toString == orig(arg0.lastName.toString)
arg0.maxWeekWorkedHours == orig(arg0.maxWeekWorkedHours)
arg0.currentWeekWorkedHours == orig(arg0.currentWeekWorkedHours)
arg0.currentWeekWorkedHours.day == orig(arg0.currentWeekWorkedHours.day)
arg0.currentWeekWorkedHours.hour == orig(arg0.currentWeekWorkedHours.hour)
arg0.fields == orig(arg0.fields)
arg0.fields[] == orig(arg0.fields[])
arg0.students == orig(arg0.students)
arg0.timeTable == orig(arg0.timeTable)
arg0.timeTable.slots == orig(arg0.timeTable.slots)
arg0.timeTable.owner == orig(arg0.timeTable.owner)
arg0.timeTable.owner.getClass().getName() == orig(arg0.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
arg1[] == orig(arg1[])
arg2[] == orig(arg2[])
this.done has only one value
this.steps has only one value
this.errorsIndexes has only one value
this.mode == 2
arg0.maxWeekWorkedHours has only one value
arg0.currentWeekWorkedHours.day one of { 0, 1 }
arg0.fields[].getClass().getName() elements == DATA.Field.class
arg0.fields[].getClass().getName() one of { [DATA.Field], [DATA.Field, DATA.Field, DATA.Field] }
arg0.timeTable.owner.getClass().getName() == DATA.Teacher.class
DATA.WeekTable.minDelta has only one value
DATA.WeekTable.defaultWeek has only one value
arg1[] contains no nulls and has only one value, of length 6
arg1[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg1[].getClass().getName() elements == DATA.Field.class
arg2[] contains no nulls and has only one value, of length 4
arg2[].getClass().getName() == [DATA.Group, DATA.Group, DATA.Group, DATA.Group]
arg2[].getClass().getName() elements == DATA.Group.class
return == true
size(this.done[]) one of { 15, 24, 30 }
size(arg0.fields[]) one of { 1, 3 }
arg0.timeTable.owner.getClass().getName() in this.teachers[].getClass().getName()
orig(size(this.done[])) % size(this.done[]) == 0
size(this.done[])-1 % orig(size(this.done[]))-1 == 0
===========================================================================
DATA.Filler.takeCareOf(DATA.Teacher, java.util.ArrayList, java.util.ArrayList):::EXIT;condition="return == true"
===========================================================================
DATA.Group:::OBJECT
this.parent.timeTable.owner.getClass().getName() == this.timeTable.owner.getClass().getName()
this.timeTable == this.timeTable.owner.timeTable
this.name != null
this.effectif one of { 25, 100 }
this.links != null
this.classes != null
this.classes.keys != null
this.classes.keys[] elements != null
this.classes.keys[].getClass().getName() elements == DATA.Field.class
this.classes.keys[].getClass().getName() one of { [], [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field] }
this.classes.values != null
this.classes.values[] elements != null
this.classes.values[].getClass().getName() elements == DATA.Time.class
this.classes.values[].getClass().getName() one of { [], [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time] }
this.done != null
this.done.keys != null
this.done.keys[] elements != null
this.done.keys[].getClass().getName() elements == DATA.Field.class
this.done.keys[].getClass().getName() one of { [], [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field] }
this.done.values != null
this.done.values[] elements != null
this.done.values[].getClass().getName() elements == java.lang.Boolean.class
this.done.values[].getClass().getName() one of { [], [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean] }
this.parent.name has only one value
this.parent.name != null
this.parent.name.toString == "Lanip"
this.parent.effectif == 100
this.parent.links has only one value
this.parent.links != null
this.parent.classes has only one value
this.parent.classes != null
this.parent.classes.keys has only one value
this.parent.classes.keys != null
this.parent.classes.keys[] == []
this.parent.classes.keys[].getClass().getName() == []
this.parent.classes.values has only one value
this.parent.classes.values != null
this.parent.classes.values[] == []
this.parent.classes.values[].getClass().getName() == []
this.parent.done has only one value
this.parent.done != null
this.parent.done.keys has only one value
this.parent.done.keys != null
this.parent.done.keys[] == []
this.parent.done.keys[].getClass().getName() == []
this.parent.done.values has only one value
this.parent.done.values != null
this.parent.done.values[] == []
this.parent.done.values[].getClass().getName() == []
this.parent.parent == null
this.parent.children.getClass().getName() == DATA.Group[].class
this.parent.children[] contains no nulls and has only one value, of length 2
this.parent.children[] elements != null
this.parent.children[].getClass().getName() == [DATA.Group, DATA.Group]
this.parent.children[].getClass().getName() elements == DATA.Group.class
this.parent.children[].name contains no nulls and has only one value, of length 2
this.parent.children[].name elements != null
this.parent.children[].name.toString == [g46, g42]
this.parent.children[].name.toString elements one of { "g42", "g46" }
this.parent.children[].effectif == [25, 25]
this.parent.children[].effectif elements == 25
this.parent.children[].links contains no nulls and has only one value, of length 2
this.parent.children[].links elements != null
this.parent.children[].classes contains no nulls and has only one value, of length 2
this.parent.children[].classes elements has only one value
this.parent.children[].classes elements != null
this.parent.children[].done contains no nulls and has only one value, of length 2
this.parent.children[].done elements != null
this.parent.children[].parent contains no nulls and has only one value, of length 2
this.parent.children[].parent elements has only one value
this.parent.children[].parent elements != null
this.parent.children[].children contains only nulls and has only one value, of length 2
this.parent.children[].children elements == null
this.parent.children[].children.getClass().getName() == [null, null]
this.parent.children[].children.getClass().getName() elements == null
this.parent.children[].timeTable contains no nulls and has only one value, of length 2
this.parent.children[].timeTable elements != null
this.parent.timeTable has only one value
this.parent.timeTable != null
this.parent.timeTable.slots has only one value
this.parent.timeTable.slots != null
this.parent.timeTable.slots[] contains no nulls and has only one value, of length 9
this.parent.timeTable.slots[] elements != null
this.parent.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.parent.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
this.parent.timeTable.owner has only one value
this.parent.timeTable.owner != null
this.parent.timeTable.owner.getClass().getName() == DATA.Group.class
DATA.WeekTable.minDelta has only one value
DATA.WeekTable.minDelta != null
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
this.children.getClass().getName() == DATA.Group[].class
this.children[] contains no nulls and has only one value, of length 2
this.children[] elements != null
this.children[].getClass().getName() == [DATA.Group, DATA.Group]
this.children[].getClass().getName() elements == DATA.Group.class
this.children[].name contains no nulls and has only one value, of length 2
this.children[].name elements != null
this.children[].name.toString == [g46, g42]
this.children[].name.toString elements one of { "g42", "g46" }
this.children[].effectif == [25, 25]
this.children[].effectif elements == 25
this.children[].links contains no nulls and has only one value, of length 2
this.children[].links elements != null
this.children[].classes contains no nulls and has only one value, of length 2
this.children[].classes elements has only one value
this.children[].classes elements != null
this.children[].classes.keys contains no nulls and has only one value, of length 2
this.children[].classes.keys elements has only one value
this.children[].classes.keys elements != null
this.children[].classes.values contains no nulls and has only one value, of length 2
this.children[].classes.values elements has only one value
this.children[].classes.values elements != null
this.children[].done contains no nulls and has only one value, of length 2
this.children[].done elements != null
this.children[].done.keys contains no nulls and has only one value, of length 2
this.children[].done.keys elements != null
this.children[].done.values contains no nulls and has only one value, of length 2
this.children[].done.values elements != null
this.children[].parent contains no nulls and has only one value, of length 2
this.children[].parent elements has only one value
this.children[].parent elements != null
this.children[].parent.name contains no nulls and has only one value, of length 2
this.children[].parent.name elements has only one value
this.children[].parent.name elements != null
this.children[].parent.name.toString == [Lanip, Lanip]
this.children[].parent.name.toString elements == "Lanip"
this.children[].parent.effectif == [100, 100]
this.children[].parent.effectif elements == 100
this.children[].parent.links contains no nulls and has only one value, of length 2
this.children[].parent.links elements has only one value
this.children[].parent.links elements != null
this.children[].parent.classes contains no nulls and has only one value, of length 2
this.children[].parent.classes elements has only one value
this.children[].parent.classes elements != null
this.children[].parent.done contains no nulls and has only one value, of length 2
this.children[].parent.done elements has only one value
this.children[].parent.done elements != null
this.children[].parent.parent contains only nulls and has only one value, of length 2
this.children[].parent.parent elements == null
this.children[].parent.children contains no nulls and has only one value, of length 2
this.children[].parent.children elements has only one value
this.children[].parent.children elements != null
this.children[].parent.children.getClass().getName() == [DATA.Group[], DATA.Group[]]
this.children[].parent.children.getClass().getName() elements == DATA.Group[].class
this.children[].parent.timeTable contains no nulls and has only one value, of length 2
this.children[].parent.timeTable elements has only one value
this.children[].parent.timeTable elements != null
this.children[].children contains only nulls and has only one value, of length 2
this.children[].children elements == null
this.children[].children.getClass().getName() == [null, null]
this.children[].children.getClass().getName() elements == null
this.children[].timeTable contains no nulls and has only one value, of length 2
this.children[].timeTable elements != null
this.children[].timeTable.slots contains no nulls and has only one value, of length 2
this.children[].timeTable.slots elements != null
this.children[].timeTable.owner contains no nulls and has only one value, of length 2
this.children[].timeTable.owner elements != null
this.children[].timeTable.owner.getClass().getName() == [DATA.Group, DATA.Group]
this.children[].timeTable.owner.getClass().getName() elements == DATA.Group.class
this.timeTable != null
this.timeTable.slots != null
this.timeTable.slots[] elements != null
this.timeTable.owner != null
this.timeTable.owner.getClass().getName() == DATA.Group.class
DATA.WeekTable.minDelta.day == 0
DATA.WeekTable.minDelta.hour == 0
DATA.WeekTable.minDelta.min == 1
DATA.WeekTable.defaultWeek.slots has only one value
DATA.WeekTable.defaultWeek.slots != null
DATA.WeekTable.defaultWeek.slots[] contains no nulls and has only one value, of length 9
DATA.WeekTable.defaultWeek.slots[] elements != null
DATA.WeekTable.defaultWeek.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
DATA.WeekTable.defaultWeek.slots[].getClass().getName() elements == DATA.Slot.class
DATA.WeekTable.defaultWeek.owner == null
size(this.classes.keys[]) one of { 0, 6 }
size(this.classes.keys[])-1 != 0
size(this.classes.values[]) one of { 0, 6 }
size(this.classes.values[])-1 != 0
size(this.done.keys[]) one of { 0, 6 }
size(this.done.keys[])-1 != 0
size(this.done.values[]) one of { 0, 6 }
size(this.done.values[])-1 != 0
size(this.parent.children[]) == 2
size(this.parent.timeTable.slots[]) == 9
size(this.children[]) == 2
size(DATA.WeekTable.defaultWeek.slots[]) == 9
this in this.children[].parent
this.children[].parent elements == this
this.children[].parent.name elements == this.name
this.name in this.children[].parent.name
this.effectif in this.parent.children[].effectif
this.parent.children[].effectif elements == this.effectif
this.children[].parent.effectif elements == this.effectif
this.effectif in this.children[].parent.effectif
this.children[].parent.links elements == this.links
this.links in this.children[].parent.links
this.classes in this.parent.children[].classes
this.parent.children[].classes elements == this.classes
this.children[].parent.classes elements == this.classes
this.classes in this.children[].parent.classes
this.children[].parent.done elements == this.done
this.done in this.children[].parent.done
this.parent in this.parent.children[].parent
this.parent.children[].parent elements == this.parent
this.children.getClass().getName() in this.parent.classes.keys[].getClass().getName()
this.children.getClass().getName() in this.parent.classes.values[].getClass().getName()
this.children.getClass().getName() in this.parent.done.keys[].getClass().getName()
this.children.getClass().getName() in this.parent.done.values[].getClass().getName()
this.parent.children.getClass().getName() != this.parent.timeTable.owner.getClass().getName()
this.parent.children.getClass().getName() in this.children[].getClass().getName()
this.parent.children.getClass().getName() in this.children[].parent.children.getClass().getName()
this.parent.children.getClass().getName() in this.children[].children.getClass().getName()
this.parent.children.getClass().getName() in this.children[].timeTable.owner.getClass().getName()
this.parent.children.getClass().getName() != this.timeTable.owner.getClass().getName()
this.parent.timeTable.owner.getClass().getName() in this.parent.children[].getClass().getName()
this.children.getClass().getName() in this.parent.children[].getClass().getName()
this.timeTable.owner.getClass().getName() in this.parent.children[].getClass().getName()
this.children.getClass().getName() in this.parent.children[].children.getClass().getName()
this.children.getClass().getName() in this.parent.timeTable.slots[].getClass().getName()
this.parent.timeTable.owner in this.children[].timeTable.owner
this.parent.timeTable.owner.getClass().getName() in this.children[].getClass().getName()
this.parent.timeTable.owner.getClass().getName() in this.children[].parent.children.getClass().getName()
this.parent.timeTable.owner.getClass().getName() in this.children[].children.getClass().getName()
this.parent.timeTable.owner.getClass().getName() in this.children[].timeTable.owner.getClass().getName()
this.children in this.children[].parent.children
this.children[].parent.children elements == this.children
this.children.getClass().getName() in this.children[].parent.children.getClass().getName()
this.children.getClass().getName() != this.timeTable.owner.getClass().getName()
this.timeTable.owner.getClass().getName() in this.children[].getClass().getName()
this.children[].parent.timeTable elements == this.timeTable
this.timeTable in this.children[].parent.timeTable
this.timeTable.owner.getClass().getName() in this.children[].timeTable.owner.getClass().getName()
===========================================================================
DATA.Group.Group(java.lang.String, int):::ENTER
arg1 one of { 25, 100 }
===========================================================================
DATA.Group.Group(java.lang.String, int):::EXIT
this.name == orig(arg0)
this.effectif == orig(arg1)
arg0.toString == orig(arg0.toString)
this.classes.keys[] == []
this.classes.keys[].getClass().getName() == []
this.classes.values[] == []
this.classes.values[].getClass().getName() == []
this.done.keys[] == []
this.done.keys[].getClass().getName() == []
this.done.values[] == []
this.done.values[].getClass().getName() == []
this.parent == null
this.children == null
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
size(this.timeTable.slots[]) == 9
===========================================================================
DATA.Group.getClasses():::ENTER
this.parent.children has only one value
this.parent.children != null
===========================================================================
DATA.Group.getClasses():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.effectif == orig(this.effectif)
this.links == orig(this.links)
this.classes == return
this.classes.keys == return.keys
this.classes.keys[] == orig(this.classes.keys[])
this.classes.values == return.values
this.classes.values[] == orig(this.classes.values[])
this.done == orig(this.done)
this.done.keys == orig(this.done.keys)
this.done.keys[] == orig(this.done.keys[])
this.done.values == orig(this.done.values)
this.done.values[] == orig(this.done.values[])
this.parent == orig(this.parent)
this.parent.name == orig(this.parent.name)
this.parent.name.toString == orig(this.parent.name.toString)
this.parent.effectif == orig(this.parent.effectif)
this.parent.links == orig(this.parent.links)
this.parent.classes == orig(this.parent.classes)
this.parent.classes.keys == orig(this.parent.classes.keys)
this.parent.classes.keys[] == orig(this.parent.classes.keys[])
this.parent.classes.values == orig(this.parent.classes.values)
this.parent.classes.values[] == orig(this.parent.classes.values[])
this.parent.done == orig(this.parent.done)
this.parent.done.keys == orig(this.parent.done.keys)
this.parent.done.keys[] == orig(this.parent.done.keys[])
this.parent.done.values == orig(this.parent.done.values)
this.parent.done.values[] == orig(this.parent.done.values[])
this.parent.parent == orig(this.parent.parent)
this.parent.children == orig(this.parent.children)
this.parent.children.getClass().getName() == orig(this.parent.children.getClass().getName())
this.parent.children[] == orig(this.parent.children[])
this.parent.children[].name == orig(this.parent.children[].name)
this.parent.children[].effectif == orig(this.parent.children[].effectif)
this.parent.children[].links == orig(this.parent.children[].links)
this.parent.children[].classes == orig(this.parent.children[].classes)
this.parent.children[].done == orig(this.parent.children[].done)
this.parent.children[].parent == orig(this.parent.children[].parent)
this.parent.children[].children == orig(this.parent.children[].children)
this.parent.children[].timeTable == orig(this.parent.children[].timeTable)
this.parent.timeTable == orig(this.parent.timeTable)
this.parent.timeTable.slots == orig(this.parent.timeTable.slots)
this.parent.timeTable.slots[] == orig(this.parent.timeTable.slots[])
this.parent.timeTable.owner == orig(this.parent.timeTable.owner)
this.parent.timeTable.owner.getClass().getName() == orig(this.parent.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
this.children == orig(this.children)
this.children.getClass().getName() == orig(this.children.getClass().getName())
this.children[] == orig(this.children[])
this.children[].name == orig(this.children[].name)
this.children[].effectif == orig(this.children[].effectif)
this.children[].links == orig(this.children[].links)
this.children[].classes == orig(this.children[].classes)
this.children[].classes.keys == orig(this.children[].classes.keys)
this.children[].classes.values == orig(this.children[].classes.values)
this.children[].done == orig(this.children[].done)
this.children[].done.keys == orig(this.children[].done.keys)
this.children[].done.values == orig(this.children[].done.values)
this.children[].parent == orig(this.children[].parent)
this.children[].parent.name == orig(this.children[].parent.name)
this.children[].parent.effectif == orig(this.children[].parent.effectif)
this.children[].parent.links == orig(this.children[].parent.links)
this.children[].parent.classes == orig(this.children[].parent.classes)
this.children[].parent.done == orig(this.children[].parent.done)
this.children[].parent.parent == orig(this.children[].parent.parent)
this.children[].parent.children == orig(this.children[].parent.children)
this.children[].parent.timeTable == orig(this.children[].parent.timeTable)
this.children[].children == orig(this.children[].children)
this.children[].timeTable == orig(this.children[].timeTable)
this.children[].timeTable.slots == orig(this.children[].timeTable.slots)
this.children[].timeTable.owner == orig(this.children[].timeTable.owner)
this.timeTable == orig(this.timeTable)
this.timeTable == orig(this.timeTable.owner.timeTable)
this.timeTable.slots == orig(this.timeTable.slots)
this.timeTable.slots[] == orig(this.timeTable.slots[])
this.timeTable.owner == orig(this.timeTable.owner)
this.timeTable.owner.getClass().getName() == orig(this.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
return == orig(this.classes)
return.keys == orig(this.classes.keys)
return.values == orig(this.classes.values)
this.parent.children has only one value
this.parent.children != null
return != null
return.keys != null
return.keys[] elements != null
return.keys[].getClass().getName() elements == DATA.Field.class
return.keys[].getClass().getName() one of { [], [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field] }
return.values != null
return.values[] elements != null
return.values[].getClass().getName() elements == DATA.Time.class
return.values[].getClass().getName() one of { [], [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time] }
size(return.keys[]) one of { 0, 6 }
size(return.keys[])-1 != 0
size(return.values[]) one of { 0, 6 }
size(return.values[])-1 != 0
return in this.parent.children[].classes
this.parent.children[].classes elements == return
orig(this) in this.children[].parent
this.children[].parent elements == orig(this)
return in this.children[].parent.classes
this.children[].parent.classes elements == return
===========================================================================
DATA.Group.getEffectif():::ENTER
this.name.toString one of { "g2116", "g42", "g46" }
this.effectif == 25
this.classes has only one value
this.classes.keys has only one value
this.classes.keys[] contains no nulls and has only one value, of length 6
this.classes.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.classes.values has only one value
this.classes.values[] contains no nulls and has only one value, of length 6
this.classes.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
this.done.keys[] contains no nulls and has only one value, of length 6
this.done.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.done.values[].getClass().getName() == [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean]
this.parent has only one value
this.parent != null
this.parent.children has only one value
this.parent.children != null
this.children == null
size(this.classes.keys[]) == 6
size(this.classes.values[]) == 6
size(this.done.keys[]) == 6
size(this.done.values[]) == 6
===========================================================================
DATA.Group.getEffectif():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.effectif == return
this.links == orig(this.links)
this.classes == orig(this.classes)
this.classes.keys == orig(this.classes.keys)
this.classes.keys[] == orig(this.classes.keys[])
this.classes.values == orig(this.classes.values)
this.classes.values[] == orig(this.classes.values[])
this.done == orig(this.done)
this.done.keys == orig(this.done.keys)
this.done.keys[] == orig(this.done.keys[])
this.done.values == orig(this.done.values)
this.done.values[] == orig(this.done.values[])
this.parent == orig(this.parent)
this.parent.name == orig(this.parent.name)
this.parent.name.toString == orig(this.parent.name.toString)
this.parent.effectif == orig(this.parent.effectif)
this.parent.links == orig(this.parent.links)
this.parent.classes == orig(this.parent.classes)
this.parent.classes.keys == orig(this.parent.classes.keys)
this.parent.classes.keys[] == orig(this.parent.classes.keys[])
this.parent.classes.values == orig(this.parent.classes.values)
this.parent.classes.values[] == orig(this.parent.classes.values[])
this.parent.done == orig(this.parent.done)
this.parent.done.keys == orig(this.parent.done.keys)
this.parent.done.keys[] == orig(this.parent.done.keys[])
this.parent.done.values == orig(this.parent.done.values)
this.parent.done.values[] == orig(this.parent.done.values[])
this.parent.parent == orig(this.parent.parent)
this.parent.children == orig(this.parent.children)
this.parent.children.getClass().getName() == orig(this.parent.children.getClass().getName())
this.parent.children[] == orig(this.parent.children[])
this.parent.children[].name == orig(this.parent.children[].name)
this.parent.children[].effectif == orig(this.parent.children[].effectif)
this.parent.children[].links == orig(this.parent.children[].links)
this.parent.children[].classes == orig(this.parent.children[].classes)
this.parent.children[].done == orig(this.parent.children[].done)
this.parent.children[].parent == orig(this.parent.children[].parent)
this.parent.children[].children == orig(this.parent.children[].children)
this.parent.children[].timeTable == orig(this.parent.children[].timeTable)
this.parent.timeTable == orig(this.parent.timeTable)
this.parent.timeTable.slots == orig(this.parent.timeTable.slots)
this.parent.timeTable.slots[] == orig(this.parent.timeTable.slots[])
this.parent.timeTable.owner == orig(this.parent.timeTable.owner)
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
this.children == orig(this.children)
this.timeTable == orig(this.timeTable)
this.timeTable == orig(this.timeTable.owner.timeTable)
this.timeTable.slots == orig(this.timeTable.slots)
this.timeTable.slots[] == orig(this.timeTable.slots[])
this.timeTable.owner == orig(this.timeTable.owner)
this.timeTable.owner.getClass().getName() == orig(this.parent.timeTable.owner.getClass().getName())
this.timeTable.owner.getClass().getName() == orig(this.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
return == orig(this.effectif)
this.name.toString one of { "g2116", "g42", "g46" }
this.classes has only one value
this.classes.keys has only one value
this.classes.keys[] contains no nulls and has only one value, of length 6
this.classes.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.classes.values has only one value
this.classes.values[] contains no nulls and has only one value, of length 6
this.classes.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
this.done.keys[] contains no nulls and has only one value, of length 6
this.done.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.done.values[].getClass().getName() == [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean]
this.parent has only one value
this.parent != null
this.parent.children has only one value
this.parent.children != null
this.children == null
return == 25
size(this.classes.keys[]) == 6
size(this.classes.values[]) == 6
size(this.done.keys[]) == 6
size(this.done.values[]) == 6
return in this.parent.children[].effectif
this.parent.children[].effectif elements == return
===========================================================================
DATA.Group.getFieldsDone():::ENTER
this.name.toString one of { "g2116", "g42", "g46" }
this.effectif == 25
this.classes has only one value
this.classes.keys has only one value
this.classes.keys[] contains no nulls and has only one value, of length 6
this.classes.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.classes.values has only one value
this.classes.values[] contains no nulls and has only one value, of length 6
this.classes.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
this.done.keys[] contains no nulls and has only one value, of length 6
this.done.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.done.values[].getClass().getName() == [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean]
this.parent has only one value
this.parent != null
this.parent.children has only one value
this.parent.children != null
this.children == null
size(this.classes.keys[]) == 6
size(this.classes.values[]) == 6
size(this.done.keys[]) == 6
size(this.done.values[]) == 6
===========================================================================
DATA.Group.getFieldsDone():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.effectif == orig(this.effectif)
this.links == orig(this.links)
this.classes == orig(this.classes)
this.classes.keys == orig(this.classes.keys)
this.classes.keys[] == orig(this.classes.keys[])
this.classes.values == orig(this.classes.values)
this.classes.values[] == orig(this.classes.values[])
this.done == return
this.done.keys == return.keys
this.done.keys[] == orig(this.done.keys[])
this.done.values == return.values
this.done.values[] == orig(this.done.values[])
this.parent == orig(this.parent)
this.parent.name == orig(this.parent.name)
this.parent.name.toString == orig(this.parent.name.toString)
this.parent.effectif == orig(this.parent.effectif)
this.parent.links == orig(this.parent.links)
this.parent.classes == orig(this.parent.classes)
this.parent.classes.keys == orig(this.parent.classes.keys)
this.parent.classes.keys[] == orig(this.parent.classes.keys[])
this.parent.classes.values == orig(this.parent.classes.values)
this.parent.classes.values[] == orig(this.parent.classes.values[])
this.parent.done == orig(this.parent.done)
this.parent.done.keys == orig(this.parent.done.keys)
this.parent.done.keys[] == orig(this.parent.done.keys[])
this.parent.done.values == orig(this.parent.done.values)
this.parent.done.values[] == orig(this.parent.done.values[])
this.parent.parent == orig(this.parent.parent)
this.parent.children == orig(this.parent.children)
this.parent.children.getClass().getName() == orig(this.parent.children.getClass().getName())
this.parent.children[] == orig(this.parent.children[])
this.parent.children[].name == orig(this.parent.children[].name)
this.parent.children[].effectif == orig(this.parent.children[].effectif)
this.parent.children[].links == orig(this.parent.children[].links)
this.parent.children[].classes == orig(this.parent.children[].classes)
this.parent.children[].done == orig(this.parent.children[].done)
this.parent.children[].parent == orig(this.parent.children[].parent)
this.parent.children[].children == orig(this.parent.children[].children)
this.parent.children[].timeTable == orig(this.parent.children[].timeTable)
this.parent.timeTable == orig(this.parent.timeTable)
this.parent.timeTable.slots == orig(this.parent.timeTable.slots)
this.parent.timeTable.slots[] == orig(this.parent.timeTable.slots[])
this.parent.timeTable.owner == orig(this.parent.timeTable.owner)
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
this.children == orig(this.children)
this.timeTable == orig(this.timeTable)
this.timeTable == orig(this.timeTable.owner.timeTable)
this.timeTable.slots == orig(this.timeTable.slots)
this.timeTable.slots[] == orig(this.timeTable.slots[])
this.timeTable.owner == orig(this.timeTable.owner)
this.timeTable.owner.getClass().getName() == orig(this.parent.timeTable.owner.getClass().getName())
this.timeTable.owner.getClass().getName() == orig(this.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
return == orig(this.done)
return.keys == orig(this.done.keys)
return.values == orig(this.done.values)
this.name.toString one of { "g2116", "g42", "g46" }
this.effectif == 25
this.classes has only one value
this.classes.keys has only one value
this.classes.keys[] contains no nulls and has only one value, of length 6
this.classes.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.classes.values has only one value
this.classes.values[] contains no nulls and has only one value, of length 6
this.classes.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
this.done.keys[] contains no nulls and has only one value, of length 6
this.done.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.done.values[].getClass().getName() == [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean]
this.parent has only one value
this.parent != null
this.parent.children has only one value
this.parent.children != null
this.children == null
return != null
return.keys != null
return.keys[] contains no nulls and has only one value, of length 6
return.keys[] elements != null
return.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
return.keys[].getClass().getName() elements == DATA.Field.class
return.values != null
return.values[] elements != null
return.values[].getClass().getName() == [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean]
return.values[].getClass().getName() elements == java.lang.Boolean.class
size(this.classes.keys[]) == 6
size(this.classes.values[]) == 6
size(this.done.keys[]) == 6
size(this.done.values[]) == 6
size(return.keys[]) == 6
size(return.values[]) == 6
===========================================================================
DATA.Group.getLinks():::ENTER
this.name.toString one of { "g2116", "g42", "g46" }
this.effectif == 25
this.classes has only one value
this.classes.keys has only one value
this.classes.keys[] contains no nulls and has only one value, of length 6
this.classes.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.classes.values has only one value
this.classes.values[] contains no nulls and has only one value, of length 6
this.classes.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
this.done.keys[] contains no nulls and has only one value, of length 6
this.done.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.done.values[] contains no nulls and has only one value, of length 6
this.done.values[] elements has only one value
this.done.values[].getClass().getName() == [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean]
this.parent has only one value
this.parent != null
this.parent.children has only one value
this.parent.children != null
this.children == null
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
size(this.classes.keys[]) == 6
size(this.classes.values[]) == 6
size(this.done.keys[]) == 6
size(this.done.values[]) == 6
size(this.timeTable.slots[]) == 9
===========================================================================
DATA.Group.getLinks():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.effectif == orig(this.effectif)
this.links == return
this.classes == orig(this.classes)
this.classes.keys == orig(this.classes.keys)
this.classes.keys[] == orig(this.classes.keys[])
this.classes.values == orig(this.classes.values)
this.classes.values[] == orig(this.classes.values[])
this.done == orig(this.done)
this.done.keys == orig(this.done.keys)
this.done.keys[] == orig(this.done.keys[])
this.done.values == orig(this.done.values)
this.done.values[] == orig(this.done.values[])
this.parent == orig(this.parent)
this.parent.name == orig(this.parent.name)
this.parent.name.toString == orig(this.parent.name.toString)
this.parent.effectif == orig(this.parent.effectif)
this.parent.links == orig(this.parent.links)
this.parent.classes == orig(this.parent.classes)
this.parent.classes.keys == orig(this.parent.classes.keys)
this.parent.classes.keys[] == orig(this.parent.classes.keys[])
this.parent.classes.values == orig(this.parent.classes.values)
this.parent.classes.values[] == orig(this.parent.classes.values[])
this.parent.done == orig(this.parent.done)
this.parent.done.keys == orig(this.parent.done.keys)
this.parent.done.keys[] == orig(this.parent.done.keys[])
this.parent.done.values == orig(this.parent.done.values)
this.parent.done.values[] == orig(this.parent.done.values[])
this.parent.parent == orig(this.parent.parent)
this.parent.children == orig(this.parent.children)
this.parent.children.getClass().getName() == orig(this.parent.children.getClass().getName())
this.parent.children[] == orig(this.parent.children[])
this.parent.children[].name == orig(this.parent.children[].name)
this.parent.children[].effectif == orig(this.parent.children[].effectif)
this.parent.children[].links == orig(this.parent.children[].links)
this.parent.children[].classes == orig(this.parent.children[].classes)
this.parent.children[].done == orig(this.parent.children[].done)
this.parent.children[].parent == orig(this.parent.children[].parent)
this.parent.children[].children == orig(this.parent.children[].children)
this.parent.children[].timeTable == orig(this.parent.children[].timeTable)
this.parent.timeTable == orig(this.parent.timeTable)
this.parent.timeTable.slots == orig(this.parent.timeTable.slots)
this.parent.timeTable.slots[] == orig(this.parent.timeTable.slots[])
this.parent.timeTable.owner == orig(this.parent.timeTable.owner)
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
this.children == orig(this.children)
this.timeTable == orig(this.timeTable)
this.timeTable == orig(this.timeTable.owner.timeTable)
this.timeTable.slots == orig(this.timeTable.slots)
this.timeTable.slots[] == orig(this.timeTable.slots[])
this.timeTable.owner == orig(this.timeTable.owner)
this.timeTable.owner.getClass().getName() == orig(this.parent.timeTable.owner.getClass().getName())
this.timeTable.owner.getClass().getName() == orig(this.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
return == orig(this.links)
this.name.toString one of { "g2116", "g42", "g46" }
this.effectif == 25
this.classes has only one value
this.classes.keys has only one value
this.classes.keys[] contains no nulls and has only one value, of length 6
this.classes.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.classes.values has only one value
this.classes.values[] contains no nulls and has only one value, of length 6
this.classes.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
this.done.keys[] contains no nulls and has only one value, of length 6
this.done.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.done.values[] contains no nulls and has only one value, of length 6
this.done.values[] elements has only one value
this.done.values[].getClass().getName() == [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean]
this.parent has only one value
this.parent != null
this.parent.children has only one value
this.parent.children != null
this.children == null
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
return != null
size(this.classes.keys[]) == 6
size(this.classes.values[]) == 6
size(this.done.keys[]) == 6
size(this.done.values[]) == 6
size(this.timeTable.slots[]) == 9
===========================================================================
DATA.Group.getTeacher(DATA.Field):::ENTER
arg0.type.duration == arg0.duration
this.name.toString one of { "g2116", "g42", "g46" }
this.effectif == 25
this.classes has only one value
this.classes.keys has only one value
this.classes.keys[] contains no nulls and has only one value, of length 6
this.classes.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.classes.values has only one value
this.classes.values[] contains no nulls and has only one value, of length 6
this.classes.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
this.done.keys[] contains no nulls and has only one value, of length 6
this.done.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.done.values[].getClass().getName() == [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean]
this.parent has only one value
this.parent != null
this.parent.children has only one value
this.parent.children != null
this.children == null
arg0 != null
arg0.type != null
arg0.type.name != null
arg0.type.shortName != null
arg0.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
arg0.name != null
arg0.duration != null
arg0.duration.begin != null
arg0.duration.end != null
size(this.classes.keys[]) == 6
size(this.classes.values[]) == 6
size(this.done.keys[]) == 6
size(this.done.values[]) == 6
===========================================================================
DATA.Group.getTeacher(DATA.Field):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.effectif == orig(this.effectif)
this.links == orig(this.links)
this.classes == orig(this.classes)
this.classes.keys == orig(this.classes.keys)
this.classes.keys[] == orig(this.classes.keys[])
this.classes.values == orig(this.classes.values)
this.classes.values[] == orig(this.classes.values[])
this.done == orig(this.done)
this.done.keys == orig(this.done.keys)
this.done.keys[] == orig(this.done.keys[])
this.done.values == orig(this.done.values)
this.done.values[] == orig(this.done.values[])
this.parent == orig(this.parent)
this.parent.name == orig(this.parent.name)
this.parent.name.toString == orig(this.parent.name.toString)
this.parent.effectif == orig(this.parent.effectif)
this.parent.links == orig(this.parent.links)
this.parent.classes == orig(this.parent.classes)
this.parent.classes.keys == orig(this.parent.classes.keys)
this.parent.classes.keys[] == orig(this.parent.classes.keys[])
this.parent.classes.values == orig(this.parent.classes.values)
this.parent.classes.values[] == orig(this.parent.classes.values[])
this.parent.done == orig(this.parent.done)
this.parent.done.keys == orig(this.parent.done.keys)
this.parent.done.keys[] == orig(this.parent.done.keys[])
this.parent.done.values == orig(this.parent.done.values)
this.parent.done.values[] == orig(this.parent.done.values[])
this.parent.parent == orig(this.parent.parent)
this.parent.children == orig(this.parent.children)
this.parent.children.getClass().getName() == orig(this.parent.children.getClass().getName())
this.parent.children[] == orig(this.parent.children[])
this.parent.children[].name == orig(this.parent.children[].name)
this.parent.children[].effectif == orig(this.parent.children[].effectif)
this.parent.children[].links == orig(this.parent.children[].links)
this.parent.children[].classes == orig(this.parent.children[].classes)
this.parent.children[].done == orig(this.parent.children[].done)
this.parent.children[].parent == orig(this.parent.children[].parent)
this.parent.children[].children == orig(this.parent.children[].children)
this.parent.children[].timeTable == orig(this.parent.children[].timeTable)
this.parent.timeTable == orig(this.parent.timeTable)
this.parent.timeTable.slots == orig(this.parent.timeTable.slots)
this.parent.timeTable.slots[] == orig(this.parent.timeTable.slots[])
this.parent.timeTable.owner == orig(this.parent.timeTable.owner)
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
this.children == orig(this.children)
this.timeTable == orig(this.timeTable)
this.timeTable == orig(this.timeTable.owner.timeTable)
this.timeTable.slots == orig(this.timeTable.slots)
this.timeTable.slots[] == orig(this.timeTable.slots[])
this.timeTable.owner == orig(this.timeTable.owner)
this.timeTable.owner.getClass().getName() == orig(this.parent.timeTable.owner.getClass().getName())
this.timeTable.owner.getClass().getName() == orig(this.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
arg0.type == orig(arg0.type)
arg0.type.name == orig(arg0.type.name)
arg0.type.name.toString == orig(arg0.type.name.toString)
arg0.type.shortName == orig(arg0.type.shortName)
arg0.type.shortName.toString == orig(arg0.type.shortName.toString)
arg0.type.duration == arg0.duration
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.duration == orig(arg0.type.duration)
arg0.duration == orig(arg0.duration)
arg0.duration.begin == orig(arg0.duration.begin)
arg0.duration.end == orig(arg0.duration.end)
return.maxWeekWorkedHours.day == return.maxWeekWorkedHours.hour
return.maxWeekWorkedHours.min == return.currentWeekWorkedHours.min
this.name.toString one of { "g2116", "g42", "g46" }
this.effectif == 25
this.classes has only one value
this.classes.keys has only one value
this.classes.keys[] contains no nulls and has only one value, of length 6
this.classes.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.classes.values has only one value
this.classes.values[] contains no nulls and has only one value, of length 6
this.classes.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
this.done.keys[] contains no nulls and has only one value, of length 6
this.done.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.done.values[].getClass().getName() == [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean]
this.parent has only one value
this.parent != null
this.parent.children has only one value
this.parent.children != null
this.children == null
arg0.type != null
arg0.type.name != null
arg0.type.shortName != null
arg0.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
arg0.name != null
arg0.duration != null
arg0.duration.begin != null
arg0.duration.end != null
return != null
return.firstName != null
return.lastName != null
return.maxWeekWorkedHours has only one value
return.maxWeekWorkedHours != null
return.maxWeekWorkedHours.day == 1
return.maxWeekWorkedHours.min == 0
return.currentWeekWorkedHours != null
return.currentWeekWorkedHours.day one of { 0, 1 }
return.currentWeekWorkedHours.hour one of { 1, 9, 14 }
return.fields != null
return.fields[] elements != null
return.fields[].getClass().getName() elements == DATA.Field.class
return.fields[].getClass().getName() one of { [DATA.Field], [DATA.Field, DATA.Field, DATA.Field] }
return.students != null
return.timeTable != null
return.timeTable.slots != null
return.timeTable.slots[] elements != null
return.timeTable.owner != null
return.timeTable.owner.getClass().getName() == DATA.Teacher.class
size(this.classes.keys[]) == 6
size(this.classes.values[]) == 6
size(this.done.keys[]) == 6
size(this.done.values[]) == 6
size(return.fields[]) one of { 1, 3 }
this.parent.children.getClass().getName() != return.timeTable.owner.getClass().getName()
this.timeTable.owner.getClass().getName() != return.timeTable.owner.getClass().getName()
return.maxWeekWorkedHours.day >= return.currentWeekWorkedHours.day
return.maxWeekWorkedHours.day <= return.currentWeekWorkedHours.hour
return.maxWeekWorkedHours.min <= return.currentWeekWorkedHours.day
return.maxWeekWorkedHours.min < return.currentWeekWorkedHours.hour
return.currentWeekWorkedHours.day % return.currentWeekWorkedHours.hour == 0
return.currentWeekWorkedHours.day <= return.currentWeekWorkedHours.hour
===========================================================================
DATA.Group.setChildren(DATA.Group[]):::ENTER
this.done.values[] elements has only one value
this.parent.children == null
this.children == null
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg0.getClass().getName() == DATA.Group[].class
arg0[] contains no nulls and has only one value, of length 2
arg0[].name contains no nulls and has only one value, of length 2
arg0[].name.toString == [g46, g42]
arg0[].name.toString elements one of { "g42", "g46" }
arg0[].effectif == [25, 25]
arg0[].effectif elements == 25
arg0[].links contains no nulls and has only one value, of length 2
arg0[].classes contains no nulls and has only one value, of length 2
arg0[].classes elements has only one value
arg0[].classes.keys contains no nulls and has only one value, of length 2
arg0[].classes.keys elements has only one value
arg0[].classes.values contains no nulls and has only one value, of length 2
arg0[].classes.values elements has only one value
arg0[].done contains no nulls and has only one value, of length 2
arg0[].done.keys contains no nulls and has only one value, of length 2
arg0[].done.values contains no nulls and has only one value, of length 2
arg0[].parent contains no nulls and has only one value, of length 2
arg0[].parent elements has only one value
arg0[].parent.name contains no nulls and has only one value, of length 2
arg0[].parent.name elements has only one value
arg0[].parent.name.toString == [Lanip, Lanip]
arg0[].parent.name.toString elements == "Lanip"
arg0[].parent.effectif == [100, 100]
arg0[].parent.effectif elements == 100
arg0[].parent.links contains no nulls and has only one value, of length 2
arg0[].parent.links elements has only one value
arg0[].parent.classes contains no nulls and has only one value, of length 2
arg0[].parent.classes elements has only one value
arg0[].parent.done contains no nulls and has only one value, of length 2
arg0[].parent.done elements has only one value
arg0[].parent.parent contains only nulls and has only one value, of length 2
arg0[].parent.parent elements == null
arg0[].parent.children contains only nulls and has only one value, of length 2
arg0[].parent.children elements == null
arg0[].parent.children.getClass().getName() == [null, null]
arg0[].parent.children.getClass().getName() elements == null
arg0[].parent.timeTable contains no nulls and has only one value, of length 2
arg0[].parent.timeTable elements has only one value
arg0[].children contains only nulls and has only one value, of length 2
arg0[].children elements == null
arg0[].children.getClass().getName() == [null, null]
arg0[].children.getClass().getName() elements == null
arg0[].timeTable contains no nulls and has only one value, of length 2
arg0[].timeTable.slots contains no nulls and has only one value, of length 2
arg0[].timeTable.owner contains no nulls and has only one value, of length 2
arg0[].timeTable.owner.getClass().getName() == [DATA.Group, DATA.Group]
arg0[].timeTable.owner.getClass().getName() elements == DATA.Group.class
size(this.timeTable.slots[]) == 9
size(arg0[]) == 2
arg0[].parent elements == this
this in arg0[].parent
arg0[].parent.name elements == this.name
this.name in arg0[].parent.name
arg0[].parent.effectif elements == this.effectif
this.effectif in arg0[].parent.effectif
arg0[].parent.links elements == this.links
this.links in arg0[].parent.links
arg0[].parent.classes elements == this.classes
this.classes in arg0[].parent.classes
arg0[].parent.done elements == this.done
this.done in arg0[].parent.done
arg0.getClass().getName() in this.parent.classes.keys[].getClass().getName()
arg0.getClass().getName() in this.parent.classes.values[].getClass().getName()
arg0.getClass().getName() in this.parent.done.keys[].getClass().getName()
arg0.getClass().getName() in this.parent.done.values[].getClass().getName()
arg0.getClass().getName() in this.parent.timeTable.slots[].getClass().getName()
this.parent.timeTable.owner in arg0[].timeTable.owner
this.parent.timeTable.owner.getClass().getName() in arg0[].parent.children.getClass().getName()
this.parent.timeTable.owner.getClass().getName() in arg0[].children.getClass().getName()
this.parent.timeTable.owner.getClass().getName() in arg0[].timeTable.owner.getClass().getName()
arg0[].parent.children elements == this.children
this.children in arg0[].parent.children
arg0[].parent.timeTable elements == this.timeTable
this.timeTable in arg0[].parent.timeTable
this.timeTable.owner.getClass().getName() in arg0[].timeTable.owner.getClass().getName()
===========================================================================
DATA.Group.setChildren(DATA.Group[]):::EXIT
this.name == return.name
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.effectif == return.effectif
this.effectif == orig(this.effectif)
this.links == return.links
this.links == orig(this.links)
this.classes == return.classes
this.classes == orig(this.classes)
this.classes.keys == return.classes.keys
this.classes.keys == orig(this.classes.keys)
this.classes.keys[] == orig(this.classes.keys[])
this.classes.values == return.classes.values
this.classes.values == orig(this.classes.values)
this.classes.values[] == orig(this.classes.values[])
this.done == return.done
this.done == orig(this.done)
this.done.keys == return.done.keys
this.done.keys == orig(this.done.keys)
this.done.keys[] == orig(this.done.keys[])
this.done.values == return.done.values
this.done.values == orig(this.done.values)
this.done.values[] == orig(this.done.values[])
this.parent == return.parent
this.parent == orig(this.parent)
this.parent.name == return.parent.name
this.parent.name == orig(this.parent.name)
this.parent.name.toString == orig(this.parent.name.toString)
this.parent.effectif == return.parent.effectif
this.parent.effectif == orig(this.parent.effectif)
this.parent.links == return.parent.links
this.parent.links == orig(this.parent.links)
this.parent.classes == return.parent.classes
this.parent.classes == orig(this.parent.classes)
this.parent.classes.keys == orig(this.parent.classes.keys)
this.parent.classes.keys[] == orig(this.parent.classes.keys[])
this.parent.classes.values == orig(this.parent.classes.values)
this.parent.classes.values[] == orig(this.parent.classes.values[])
this.parent.done == return.parent.done
this.parent.done == orig(this.parent.done)
this.parent.done.keys == orig(this.parent.done.keys)
this.parent.done.keys[] == orig(this.parent.done.keys[])
this.parent.done.values == orig(this.parent.done.values)
this.parent.done.values[] == orig(this.parent.done.values[])
this.parent.parent == orig(this.parent.parent)
this.parent.children == orig(this.parent.children)
this.parent.timeTable == return.parent.timeTable
this.parent.timeTable == orig(this.parent.timeTable)
this.parent.timeTable.slots == orig(this.parent.timeTable.slots)
this.parent.timeTable.slots[] == orig(this.parent.timeTable.slots[])
this.parent.timeTable.owner == orig(this.parent.timeTable.owner)
this.parent.timeTable.owner.getClass().getName() == orig(this.parent.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
this.children == return.children
this.children == orig(arg0)
this.timeTable == return.timeTable
this.timeTable == orig(this.timeTable)
this.timeTable == orig(this.timeTable.owner.timeTable)
this.timeTable.slots == return.timeTable.slots
this.timeTable.slots == orig(this.timeTable.slots)
this.timeTable.slots[] == orig(this.timeTable.slots[])
this.timeTable.owner == return.timeTable.owner
this.timeTable.owner == orig(this.timeTable.owner)
this.timeTable.owner.getClass().getName() == return.timeTable.owner.getClass().getName()
this.timeTable.owner.getClass().getName() == orig(this.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
arg0[] == orig(arg0[])
arg0[].name == orig(arg0[].name)
arg0[].effectif == orig(arg0[].effectif)
arg0[].links == orig(arg0[].links)
arg0[].classes == orig(arg0[].classes)
arg0[].classes.keys == orig(arg0[].classes.keys)
arg0[].classes.values == orig(arg0[].classes.values)
arg0[].done == orig(arg0[].done)
arg0[].done.keys == orig(arg0[].done.keys)
arg0[].done.values == orig(arg0[].done.values)
arg0[].parent == orig(arg0[].parent)
arg0[].parent.name == orig(arg0[].parent.name)
arg0[].parent.effectif == orig(arg0[].parent.effectif)
arg0[].parent.links == orig(arg0[].parent.links)
arg0[].parent.classes == orig(arg0[].parent.classes)
arg0[].parent.done == orig(arg0[].parent.done)
arg0[].parent.parent == orig(arg0[].parent.parent)
arg0[].parent.timeTable == orig(arg0[].parent.timeTable)
arg0[].children == orig(arg0[].children)
arg0[].timeTable == orig(arg0[].timeTable)
arg0[].timeTable.slots == orig(arg0[].timeTable.slots)
arg0[].timeTable.owner == orig(arg0[].timeTable.owner)
return == orig(this)
this.done.values[] elements has only one value
this.parent.children == null
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg0[] contains no nulls and has only one value, of length 2
arg0[].name contains no nulls and has only one value, of length 2
arg0[].name.toString == [g46, g42]
arg0[].name.toString elements one of { "g42", "g46" }
arg0[].effectif == [25, 25]
arg0[].effectif elements == 25
arg0[].links contains no nulls and has only one value, of length 2
arg0[].classes contains no nulls and has only one value, of length 2
arg0[].classes elements has only one value
arg0[].classes.keys contains no nulls and has only one value, of length 2
arg0[].classes.keys elements has only one value
arg0[].classes.values contains no nulls and has only one value, of length 2
arg0[].classes.values elements has only one value
arg0[].done contains no nulls and has only one value, of length 2
arg0[].done.keys contains no nulls and has only one value, of length 2
arg0[].done.values contains no nulls and has only one value, of length 2
arg0[].parent contains no nulls and has only one value, of length 2
arg0[].parent elements has only one value
arg0[].parent.name contains no nulls and has only one value, of length 2
arg0[].parent.name elements has only one value
arg0[].parent.name.toString == [Lanip, Lanip]
arg0[].parent.name.toString elements == "Lanip"
arg0[].parent.effectif == [100, 100]
arg0[].parent.effectif elements == 100
arg0[].parent.links contains no nulls and has only one value, of length 2
arg0[].parent.links elements has only one value
arg0[].parent.classes contains no nulls and has only one value, of length 2
arg0[].parent.classes elements has only one value
arg0[].parent.done contains no nulls and has only one value, of length 2
arg0[].parent.done elements has only one value
arg0[].parent.parent contains only nulls and has only one value, of length 2
arg0[].parent.parent elements == null
arg0[].parent.children contains no nulls and has only one value, of length 2
arg0[].parent.children elements has only one value
arg0[].parent.children.getClass().getName() == [DATA.Group[], DATA.Group[]]
arg0[].parent.children.getClass().getName() elements == DATA.Group[].class
arg0[].parent.timeTable contains no nulls and has only one value, of length 2
arg0[].parent.timeTable elements has only one value
arg0[].children contains only nulls and has only one value, of length 2
arg0[].children elements == null
arg0[].children.getClass().getName() == [null, null]
arg0[].children.getClass().getName() elements == null
arg0[].timeTable contains no nulls and has only one value, of length 2
arg0[].timeTable.slots contains no nulls and has only one value, of length 2
arg0[].timeTable.owner contains no nulls and has only one value, of length 2
arg0[].timeTable.owner.getClass().getName() == [DATA.Group, DATA.Group]
arg0[].timeTable.owner.getClass().getName() elements == DATA.Group.class
return.classes.keys[].getClass().getName() elements == DATA.Field.class
return.classes.keys[].getClass().getName() one of { [], [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field] }
return.classes.values[].getClass().getName() elements == DATA.Time.class
return.classes.values[].getClass().getName() one of { [], [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time] }
return.done.keys[].getClass().getName() elements == DATA.Field.class
return.done.keys[].getClass().getName() one of { [], [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field] }
return.done.values[] elements has only one value
return.done.values[].getClass().getName() elements == java.lang.Boolean.class
return.done.values[].getClass().getName() one of { [], [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean] }
return.parent.name.toString == "Lanip"
return.parent.parent == null
return.parent.children == null
return.children[] contains no nulls and has only one value, of length 2
return.children[].getClass().getName() == [DATA.Group, DATA.Group]
return.children[].getClass().getName() elements == DATA.Group.class
return.children[].name contains no nulls and has only one value, of length 2
return.children[].name.toString == [g46, g42]
return.children[].name.toString elements one of { "g42", "g46" }
return.children[].effectif == [25, 25]
return.children[].effectif elements == 25
return.children[].links contains no nulls and has only one value, of length 2
return.children[].classes contains no nulls and has only one value, of length 2
return.children[].classes elements has only one value
return.children[].done contains no nulls and has only one value, of length 2
return.children[].parent contains no nulls and has only one value, of length 2
return.children[].parent elements has only one value
return.children[].children contains only nulls and has only one value, of length 2
return.children[].children elements == null
return.children[].children.getClass().getName() == [null, null]
return.children[].children.getClass().getName() elements == null
return.children[].timeTable contains no nulls and has only one value, of length 2
return.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
return.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
size(this.timeTable.slots[]) == 9
size(return.classes.keys[]) one of { 0, 6 }
size(return.classes.values[]) one of { 0, 6 }
size(return.done.keys[]) one of { 0, 6 }
size(return.done.values[]) one of { 0, 6 }
size(return.children[]) == 2
size(return.timeTable.slots[]) == 9
arg0[].parent.name elements == this.name
this.name in arg0[].parent.name
arg0[].parent.effectif elements == this.effectif
this.effectif in arg0[].parent.effectif
arg0[].parent.links elements == this.links
this.links in arg0[].parent.links
arg0[].parent.classes elements == this.classes
this.classes in arg0[].parent.classes
arg0[].parent.done elements == this.done
this.done in arg0[].parent.done
this.parent.timeTable.owner in arg0[].timeTable.owner
this.parent.timeTable.owner.getClass().getName() in arg0[].parent.children.getClass().getName()
this.parent.timeTable.owner.getClass().getName() in arg0[].children.getClass().getName()
this.parent.timeTable.owner.getClass().getName() in arg0[].timeTable.owner.getClass().getName()
this.parent.timeTable.owner.getClass().getName() in return.children[].getClass().getName()
this.parent.timeTable.owner.getClass().getName() in return.children[].children.getClass().getName()
this.parent.timeTable.owner.getClass().getName() in orig(arg0[].parent.children.getClass().getName())
arg0[].parent.children elements == this.children
this.children in arg0[].parent.children
this.children.getClass().getName() in arg0[].parent.children.getClass().getName()
return in this.children[].parent
this.children[].parent elements == return
orig(this) in this.children[].parent
this.children[].parent elements == orig(this)
arg0[].parent.timeTable elements == this.timeTable
this.timeTable in arg0[].parent.timeTable
this.timeTable.owner.getClass().getName() in arg0[].timeTable.owner.getClass().getName()
this.timeTable.owner.getClass().getName() in return.children[].getClass().getName()
arg0[].parent elements == return
return in arg0[].parent
arg0[].parent elements == orig(this)
orig(this) in arg0[].parent
return in return.children[].parent
return.children[].parent elements == return
orig(this) in return.children[].parent
return.children[].parent elements == orig(this)
===========================================================================
DATA.Group.setClasses(DATA.HashMap):::ENTER
this.classes.keys[] == []
this.classes.keys[].getClass().getName() == []
this.classes.values[] == []
this.classes.values[].getClass().getName() == []
this.done.keys[] == []
this.done.keys[].getClass().getName() == []
this.done.values[] == []
this.done.values[].getClass().getName() == []
this.parent == null
this.children == null
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg0.keys has only one value
arg0.keys[] contains no nulls and has only one value, of length 6
arg0.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg0.keys[].getClass().getName() elements == DATA.Field.class
arg0.values has only one value
arg0.values[] contains no nulls and has only one value, of length 6
arg0.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
arg0.values[].getClass().getName() elements == DATA.Time.class
size(this.timeTable.slots[]) == 9
size(arg0.keys[]) == 6
size(arg0.values[]) == 6
===========================================================================
DATA.Group.setClasses(DATA.HashMap):::EXIT
this.name == return.name
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.effectif == return.effectif
this.effectif == orig(this.effectif)
this.links == return.links
this.links == orig(this.links)
this.classes == return.classes
this.classes.keys == arg0.keys
this.classes.keys == return.classes.keys
this.classes.values == arg0.values
this.classes.values == return.classes.values
this.done == return.done
this.done == orig(this.done)
this.done.keys == return.done.keys
this.done.keys == orig(this.done.keys)
this.done.values == return.done.values
this.done.values == orig(this.done.values)
this.parent == orig(this.parent)
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
this.children == orig(this.children)
this.timeTable == return.timeTable
this.timeTable == orig(this.timeTable)
this.timeTable == orig(this.timeTable.owner.timeTable)
this.timeTable.slots == return.timeTable.slots
this.timeTable.slots == orig(this.timeTable.slots)
this.timeTable.slots[] == orig(this.timeTable.slots[])
this.timeTable.owner == return.timeTable.owner
this.timeTable.owner == orig(this.timeTable.owner)
this.timeTable.owner.getClass().getName() == return.timeTable.owner.getClass().getName()
this.timeTable.owner.getClass().getName() == orig(this.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
arg0.keys == orig(arg0.keys)
arg0.keys[] == orig(arg0.keys[])
arg0.values == orig(arg0.values)
arg0.values[] == orig(arg0.values[])
return == orig(this)
this.done.values[] elements has only one value
this.parent == null
this.children == null
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg0.keys has only one value
arg0.keys[] contains no nulls and has only one value, of length 6
arg0.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg0.keys[].getClass().getName() elements == DATA.Field.class
arg0.values has only one value
arg0.values[] contains no nulls and has only one value, of length 6
arg0.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
arg0.values[].getClass().getName() elements == DATA.Time.class
return.classes.keys[].getClass().getName() elements == DATA.Field.class
return.classes.keys[].getClass().getName() one of { [], [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field] }
return.classes.values[].getClass().getName() elements == DATA.Time.class
return.classes.values[].getClass().getName() one of { [], [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time] }
return.done.keys[].getClass().getName() elements == DATA.Field.class
return.done.keys[].getClass().getName() one of { [], [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field] }
return.done.values[] elements has only one value
return.done.values[].getClass().getName() elements == java.lang.Boolean.class
return.done.values[].getClass().getName() one of { [], [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean] }
return.parent == null
return.children == null
return.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
return.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
size(this.timeTable.slots[]) == 9
size(arg0.keys[]) == 6
size(arg0.values[]) == 6
size(return.classes.keys[]) one of { 0, 6 }
size(return.classes.values[]) one of { 0, 6 }
size(return.done.keys[]) one of { 0, 6 }
size(return.done.values[]) one of { 0, 6 }
size(return.timeTable.slots[]) == 9
===========================================================================
DATA.Group.setParent(DATA.Group):::ENTER
this.timeTable.owner.getClass().getName() == arg0.timeTable.owner.getClass().getName()
this.done.values[] elements has only one value
this.parent == null
this.children == null
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg0.name has only one value
arg0.name.toString == "Lanip"
arg0.effectif == 100
arg0.links has only one value
arg0.classes has only one value
arg0.classes.keys has only one value
arg0.classes.keys[] == []
arg0.classes.keys[].getClass().getName() == []
arg0.classes.values has only one value
arg0.classes.values[] == []
arg0.classes.values[].getClass().getName() == []
arg0.done has only one value
arg0.done.keys has only one value
arg0.done.keys[] == []
arg0.done.keys[].getClass().getName() == []
arg0.done.values has only one value
arg0.done.values[] == []
arg0.done.values[].getClass().getName() == []
arg0.parent == null
arg0.children == null
arg0.timeTable has only one value
arg0.timeTable.slots has only one value
arg0.timeTable.slots[] contains no nulls and has only one value, of length 9
arg0.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
arg0.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg0.timeTable.owner has only one value
arg0.timeTable.owner.getClass().getName() == DATA.Group.class
size(this.timeTable.slots[]) == 9
size(arg0.timeTable.slots[]) == 9
===========================================================================
DATA.Group.setParent(DATA.Group):::EXIT
this.name == return.name
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.effectif == return.effectif
this.effectif == orig(this.effectif)
this.links == return.links
this.links == orig(this.links)
this.classes == return.classes
this.classes == orig(this.classes)
this.classes.keys == return.classes.keys
this.classes.keys == orig(this.classes.keys)
this.classes.keys[] == orig(this.classes.keys[])
this.classes.values == return.classes.values
this.classes.values == orig(this.classes.values)
this.classes.values[] == orig(this.classes.values[])
this.done == return.done
this.done == orig(this.done)
this.done.keys == return.done.keys
this.done.keys == orig(this.done.keys)
this.done.keys[] == orig(this.done.keys[])
this.done.values == return.done.values
this.done.values == orig(this.done.values)
this.done.values[] == orig(this.done.values[])
this.parent == return.parent
this.parent == orig(arg0)
this.parent.name == arg0.name
this.parent.effectif == arg0.effectif
this.parent.links == arg0.links
this.parent.classes == arg0.classes
this.parent.classes.keys == arg0.classes.keys
this.parent.classes.values == arg0.classes.values
this.parent.done == arg0.done
this.parent.done.keys == arg0.done.keys
this.parent.done.values == arg0.done.values
this.parent.timeTable == arg0.timeTable
this.parent.timeTable.slots == arg0.timeTable.slots
this.parent.timeTable.owner == arg0.timeTable.owner
this.parent.timeTable.owner.getClass().getName() == arg0.timeTable.owner.getClass().getName()
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
this.children == orig(this.children)
this.timeTable == return.timeTable
this.timeTable == orig(this.timeTable)
this.timeTable == orig(this.timeTable.owner.timeTable)
this.timeTable.slots == return.timeTable.slots
this.timeTable.slots == orig(this.timeTable.slots)
this.timeTable.slots[] == orig(this.timeTable.slots[])
this.timeTable.owner == return.timeTable.owner
this.timeTable.owner == orig(this.timeTable.owner)
this.timeTable.owner.getClass().getName() == arg0.timeTable.owner.getClass().getName()
this.timeTable.owner.getClass().getName() == return.timeTable.owner.getClass().getName()
this.timeTable.owner.getClass().getName() == orig(this.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
arg0.name == return.parent.name
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.effectif == return.parent.effectif
arg0.effectif == orig(arg0.effectif)
arg0.links == return.parent.links
arg0.links == orig(arg0.links)
arg0.classes == return.parent.classes
arg0.classes == orig(arg0.classes)
arg0.classes.keys == orig(arg0.classes.keys)
arg0.classes.keys[] == orig(arg0.classes.keys[])
arg0.classes.values == orig(arg0.classes.values)
arg0.classes.values[] == orig(arg0.classes.values[])
arg0.done == return.parent.done
arg0.done == orig(arg0.done)
arg0.done.keys == orig(arg0.done.keys)
arg0.done.keys[] == orig(arg0.done.keys[])
arg0.done.values == orig(arg0.done.values)
arg0.done.values[] == orig(arg0.done.values[])
arg0.parent == orig(arg0.parent)
arg0.children == orig(arg0.children)
arg0.timeTable == return.parent.timeTable
arg0.timeTable == orig(arg0.timeTable)
arg0.timeTable.slots == orig(arg0.timeTable.slots)
arg0.timeTable.slots[] == orig(arg0.timeTable.slots[])
arg0.timeTable.owner == orig(arg0.timeTable.owner)
arg0.timeTable.owner.getClass().getName() == orig(arg0.timeTable.owner.getClass().getName())
return == orig(this)
this.done.values[] elements has only one value
this.parent.children == null
this.children == null
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg0.name has only one value
arg0.name.toString == "Lanip"
arg0.effectif == 100
arg0.links has only one value
arg0.classes has only one value
arg0.classes.keys has only one value
arg0.classes.keys[] == []
arg0.classes.keys[].getClass().getName() == []
arg0.classes.values has only one value
arg0.classes.values[] == []
arg0.classes.values[].getClass().getName() == []
arg0.done has only one value
arg0.done.keys has only one value
arg0.done.keys[] == []
arg0.done.keys[].getClass().getName() == []
arg0.done.values has only one value
arg0.done.values[] == []
arg0.done.values[].getClass().getName() == []
arg0.parent == null
arg0.children == null
arg0.timeTable has only one value
arg0.timeTable.slots has only one value
arg0.timeTable.slots[] contains no nulls and has only one value, of length 9
arg0.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
arg0.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg0.timeTable.owner has only one value
arg0.timeTable.owner.getClass().getName() == DATA.Group.class
return.classes.keys[].getClass().getName() elements == DATA.Field.class
return.classes.keys[].getClass().getName() one of { [], [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field] }
return.classes.values[].getClass().getName() elements == DATA.Time.class
return.classes.values[].getClass().getName() one of { [], [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time] }
return.done.keys[].getClass().getName() elements == DATA.Field.class
return.done.keys[].getClass().getName() one of { [], [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field] }
return.done.values[] elements has only one value
return.done.values[].getClass().getName() elements == java.lang.Boolean.class
return.done.values[].getClass().getName() one of { [], [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean] }
return.parent.name.toString == "Lanip"
return.parent.parent == null
return.parent.children == null
return.children == null
return.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
return.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
size(this.timeTable.slots[]) == 9
size(arg0.timeTable.slots[]) == 9
size(return.classes.keys[]) one of { 0, 6 }
size(return.classes.values[]) one of { 0, 6 }
size(return.done.keys[]) one of { 0, 6 }
size(return.done.values[]) one of { 0, 6 }
size(return.timeTable.slots[]) == 9
===========================================================================
DATA.Group.setTeacher(DATA.Teacher, DATA.Field):::ENTER
arg0.maxWeekWorkedHours.day == arg0.maxWeekWorkedHours.hour
arg0.maxWeekWorkedHours.min == arg0.currentWeekWorkedHours.day
arg1.type.duration == arg1.duration
this.name.toString one of { "g2116", "g42", "g46" }
this.effectif == 25
this.classes has only one value
this.classes.keys has only one value
this.classes.keys[] contains no nulls and has only one value, of length 6
this.classes.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.classes.values has only one value
this.classes.values[] contains no nulls and has only one value, of length 6
this.classes.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
this.done.keys[] contains no nulls and has only one value, of length 6
this.done.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.done.values[] contains no nulls and has only one value, of length 6
this.done.values[] elements has only one value
this.done.values[].getClass().getName() == [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean]
this.parent has only one value
this.parent != null
this.parent.children has only one value
this.parent.children != null
this.children == null
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg0 != null
arg0.firstName != null
arg0.lastName != null
arg0.maxWeekWorkedHours has only one value
arg0.maxWeekWorkedHours != null
arg0.maxWeekWorkedHours.day == 1
arg0.maxWeekWorkedHours.min == 0
arg0.currentWeekWorkedHours != null
arg0.currentWeekWorkedHours.hour >= 0
arg0.currentWeekWorkedHours.min one of { 0, 30 }
arg0.fields != null
arg0.fields[] elements != null
arg0.fields[].getClass().getName() elements == DATA.Field.class
arg0.fields[].getClass().getName() one of { [DATA.Field], [DATA.Field, DATA.Field, DATA.Field] }
arg0.students != null
arg0.timeTable != null
arg0.timeTable.slots != null
arg0.timeTable.slots[] elements != null
arg0.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
arg0.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg0.timeTable.owner != null
arg0.timeTable.owner.getClass().getName() == DATA.Teacher.class
arg1 != null
arg1.type != null
arg1.type.name != null
arg1.type.shortName != null
arg1.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
arg1.name != null
arg1.duration != null
arg1.duration.begin != null
arg1.duration.end != null
size(this.classes.keys[]) == 6
size(this.classes.values[]) == 6
size(this.done.keys[]) == 6
size(this.done.values[]) == 6
size(this.timeTable.slots[]) == 9
size(arg0.fields[]) one of { 1, 3 }
size(arg0.timeTable.slots[]) == 9
this.parent.children.getClass().getName() != arg0.timeTable.owner.getClass().getName()
this.timeTable.owner.getClass().getName() != arg0.timeTable.owner.getClass().getName()
arg0.maxWeekWorkedHours.day != arg0.currentWeekWorkedHours.hour
arg0.maxWeekWorkedHours.day != arg0.currentWeekWorkedHours.min
arg0.maxWeekWorkedHours.min <= arg0.currentWeekWorkedHours.hour
arg0.maxWeekWorkedHours.min <= arg0.currentWeekWorkedHours.min
===========================================================================
DATA.Group.setTeacher(DATA.Teacher, DATA.Field):::EXIT58
===========================================================================
DATA.Group.setTeacher(DATA.Teacher, DATA.Field):::EXIT58;condition="return == true"
===========================================================================
DATA.Group.setTeacher(DATA.Teacher, DATA.Field):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.effectif == orig(this.effectif)
this.links == orig(this.links)
this.classes == orig(this.classes)
this.classes.keys == orig(this.classes.keys)
this.classes.keys[] == orig(this.classes.keys[])
this.classes.values == orig(this.classes.values)
this.classes.values[] == orig(this.classes.values[])
this.done == orig(this.done)
this.done.keys == orig(this.done.keys)
this.done.keys[] == orig(this.done.keys[])
this.done.values == orig(this.done.values)
this.done.values[] == orig(this.done.values[])
this.parent == orig(this.parent)
this.parent.name == orig(this.parent.name)
this.parent.name.toString == orig(this.parent.name.toString)
this.parent.effectif == orig(this.parent.effectif)
this.parent.links == orig(this.parent.links)
this.parent.classes == orig(this.parent.classes)
this.parent.classes.keys == orig(this.parent.classes.keys)
this.parent.classes.keys[] == orig(this.parent.classes.keys[])
this.parent.classes.values == orig(this.parent.classes.values)
this.parent.classes.values[] == orig(this.parent.classes.values[])
this.parent.done == orig(this.parent.done)
this.parent.done.keys == orig(this.parent.done.keys)
this.parent.done.keys[] == orig(this.parent.done.keys[])
this.parent.done.values == orig(this.parent.done.values)
this.parent.done.values[] == orig(this.parent.done.values[])
this.parent.parent == orig(this.parent.parent)
this.parent.children == orig(this.parent.children)
this.parent.children.getClass().getName() == orig(this.parent.children.getClass().getName())
this.parent.children[] == orig(this.parent.children[])
this.parent.children[].name == orig(this.parent.children[].name)
this.parent.children[].effectif == orig(this.parent.children[].effectif)
this.parent.children[].links == orig(this.parent.children[].links)
this.parent.children[].classes == orig(this.parent.children[].classes)
this.parent.children[].done == orig(this.parent.children[].done)
this.parent.children[].parent == orig(this.parent.children[].parent)
this.parent.children[].children == orig(this.parent.children[].children)
this.parent.children[].timeTable == orig(this.parent.children[].timeTable)
this.parent.timeTable == orig(this.parent.timeTable)
this.parent.timeTable.slots == orig(this.parent.timeTable.slots)
this.parent.timeTable.slots[] == orig(this.parent.timeTable.slots[])
this.parent.timeTable.owner == orig(this.parent.timeTable.owner)
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
this.children == orig(this.children)
this.timeTable == orig(this.timeTable)
this.timeTable == orig(this.timeTable.owner.timeTable)
this.timeTable.slots == orig(this.timeTable.slots)
this.timeTable.slots[] == orig(this.timeTable.slots[])
this.timeTable.owner == orig(this.timeTable.owner)
this.timeTable.owner.getClass().getName() == orig(this.parent.timeTable.owner.getClass().getName())
this.timeTable.owner.getClass().getName() == orig(this.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
arg0.firstName == orig(arg0.firstName)
arg0.firstName.toString == orig(arg0.firstName.toString)
arg0.lastName == orig(arg0.lastName)
arg0.lastName.toString == orig(arg0.lastName.toString)
arg0.maxWeekWorkedHours == orig(arg0.maxWeekWorkedHours)
arg0.maxWeekWorkedHours.day == arg0.maxWeekWorkedHours.hour
arg0.maxWeekWorkedHours.day == orig(arg0.maxWeekWorkedHours.day)
arg0.maxWeekWorkedHours.day == orig(arg0.maxWeekWorkedHours.hour)
arg0.maxWeekWorkedHours.min == orig(arg0.maxWeekWorkedHours.min)
arg0.maxWeekWorkedHours.min == orig(arg0.currentWeekWorkedHours.day)
arg0.fields == orig(arg0.fields)
arg0.fields[] == orig(arg0.fields[])
arg0.students == orig(arg0.students)
arg0.timeTable == orig(arg0.timeTable)
arg0.timeTable.slots == orig(arg0.timeTable.slots)
arg0.timeTable.slots[] == orig(arg0.timeTable.slots[])
arg0.timeTable.owner == orig(arg0.timeTable.owner)
arg0.timeTable.owner.getClass().getName() == orig(arg0.timeTable.owner.getClass().getName())
arg1.type == orig(arg1.type)
arg1.type.name == orig(arg1.type.name)
arg1.type.name.toString == orig(arg1.type.name.toString)
arg1.type.shortName == orig(arg1.type.shortName)
arg1.type.shortName.toString == orig(arg1.type.shortName.toString)
arg1.type.duration == arg1.duration
arg1.name == orig(arg1.name)
arg1.name.toString == orig(arg1.name.toString)
arg1.duration == orig(arg1.type.duration)
arg1.duration == orig(arg1.duration)
arg1.duration.begin == orig(arg1.duration.begin)
arg1.duration.end == orig(arg1.duration.end)
this.name.toString one of { "g2116", "g42", "g46" }
this.effectif == 25
this.classes has only one value
this.classes.keys has only one value
this.classes.keys[] contains no nulls and has only one value, of length 6
this.classes.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.classes.values has only one value
this.classes.values[] contains no nulls and has only one value, of length 6
this.classes.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
this.done.keys[] contains no nulls and has only one value, of length 6
this.done.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.done.values[] contains no nulls and has only one value, of length 6
this.done.values[] elements has only one value
this.done.values[].getClass().getName() == [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean]
this.parent has only one value
this.parent != null
this.parent.children has only one value
this.parent.children != null
this.children == null
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg0.firstName != null
arg0.lastName != null
arg0.maxWeekWorkedHours has only one value
arg0.maxWeekWorkedHours != null
arg0.maxWeekWorkedHours.day == 1
arg0.maxWeekWorkedHours.min == 0
arg0.currentWeekWorkedHours != null
arg0.currentWeekWorkedHours.day one of { 0, 1 }
arg0.currentWeekWorkedHours.min one of { 0, 30 }
arg0.fields != null
arg0.fields[] elements != null
arg0.fields[].getClass().getName() elements == DATA.Field.class
arg0.fields[].getClass().getName() one of { [DATA.Field], [DATA.Field, DATA.Field, DATA.Field] }
arg0.students != null
arg0.timeTable != null
arg0.timeTable.slots != null
arg0.timeTable.slots[] elements != null
arg0.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
arg0.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg0.timeTable.owner != null
arg0.timeTable.owner.getClass().getName() == DATA.Teacher.class
arg1.type != null
arg1.type.name != null
arg1.type.shortName != null
arg1.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
arg1.name != null
arg1.duration != null
arg1.duration.begin != null
arg1.duration.end != null
return == true
size(this.classes.keys[]) == 6
size(this.classes.values[]) == 6
size(this.done.keys[]) == 6
size(this.done.values[]) == 6
size(this.timeTable.slots[]) == 9
size(arg0.fields[]) one of { 1, 3 }
size(arg0.timeTable.slots[]) == 9
this.parent.children.getClass().getName() != arg0.timeTable.owner.getClass().getName()
this.timeTable.owner.getClass().getName() != arg0.timeTable.owner.getClass().getName()
arg0.maxWeekWorkedHours.day >= arg0.currentWeekWorkedHours.day
arg0.maxWeekWorkedHours.day <= arg0.currentWeekWorkedHours.hour
arg0.maxWeekWorkedHours.day != arg0.currentWeekWorkedHours.min
arg0.maxWeekWorkedHours.day != orig(arg0.currentWeekWorkedHours.hour)
arg0.maxWeekWorkedHours.day != orig(arg0.currentWeekWorkedHours.min)
arg0.maxWeekWorkedHours.min <= arg0.currentWeekWorkedHours.day
arg0.maxWeekWorkedHours.min < arg0.currentWeekWorkedHours.hour
arg0.maxWeekWorkedHours.min <= arg0.currentWeekWorkedHours.min
arg0.maxWeekWorkedHours.min <= orig(arg0.currentWeekWorkedHours.hour)
arg0.maxWeekWorkedHours.min <= orig(arg0.currentWeekWorkedHours.min)
arg0.currentWeekWorkedHours.day % arg0.currentWeekWorkedHours.hour == 0
arg0.currentWeekWorkedHours.day <= arg0.currentWeekWorkedHours.hour
arg0.currentWeekWorkedHours.day <= orig(arg0.currentWeekWorkedHours.hour)
arg0.currentWeekWorkedHours.hour != arg0.currentWeekWorkedHours.min
arg0.currentWeekWorkedHours.hour != orig(arg0.currentWeekWorkedHours.hour)
arg0.currentWeekWorkedHours.hour != orig(arg0.currentWeekWorkedHours.min)
===========================================================================
DATA.Group.setTeacher(DATA.Teacher, DATA.Field):::EXIT;condition="return == true"
===========================================================================
DATA.HashMap:::OBJECT
this.keys != null
this.keys[] elements != null
this.values != null
this.values[] elements != null
===========================================================================
DATA.HashMap.HashMap():::EXIT
this.keys[] == []
this.keys[].getClass().getName() == []
this.values[] == []
this.values[].getClass().getName() == []
===========================================================================
DATA.HashMap.containsKey(java.lang.Object):::ENTER
this.keys[].getClass().getName() elements == DATA.Field.class
arg0 != null
arg0.getClass().getName() == DATA.Field.class
===========================================================================
DATA.HashMap.containsKey(java.lang.Object):::EXIT
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.values == orig(this.values)
this.values[] == orig(this.values[])
(return == true)  <==>  (size(this.keys[]) == 6)
(return == true)  <==>  (size(this.values[]) == 6)
(return == true)  ==>  (orig(arg0.getClass().getName()) in this.keys[].getClass().getName())
(return == true)  ==>  (this.keys[] contains no nulls and has only one value, of length 6)
(return == true)  ==>  (this.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field])
(return == true)  ==>  (this.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time])
(return == true)  ==>  (this.values[].getClass().getName() elements == DATA.Time.class)
this.keys[].getClass().getName() elements == DATA.Field.class
===========================================================================
DATA.HashMap.containsKey(java.lang.Object):::EXIT;condition="return == true"
this.keys[] contains no nulls and has only one value, of length 6
this.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
this.values[].getClass().getName() elements == DATA.Time.class
return == true
size(this.keys[]) == 6
size(this.values[]) == 6
orig(arg0.getClass().getName()) in this.keys[].getClass().getName()
===========================================================================
DATA.HashMap.containsKey(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
DATA.HashMap.get(java.lang.Object):::ENTER
arg0 != null
===========================================================================
DATA.HashMap.get(java.lang.Object):::EXIT59
return != null
orig(arg0.getClass().getName()) in this.keys[].getClass().getName()
===========================================================================
DATA.HashMap.get(java.lang.Object):::EXIT60
this.values[].getClass().getName() elements == java.lang.Double.class
return == null
size(this.keys[]) one of { 5, 6, 8 }
size(this.values[]) one of { 5, 6, 8 }
===========================================================================
DATA.HashMap.get(java.lang.Object):::EXIT
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.values == orig(this.values)
this.values[] == orig(this.values[])
(return != null)  ==>  (orig(arg0.getClass().getName()) in this.keys[].getClass().getName())
(return != null)  ==>  (return.getClass().getName() != orig(arg0.getClass().getName()))
(return != null)  ==>  (return.getClass().getName() in this.values[].getClass().getName())
(return == null)  ==>  (size(this.keys[]) one of { 5, 6, 8 })
(return == null)  ==>  (size(this.values[]) one of { 5, 6, 8 })
(return == null)  ==>  (this.values[].getClass().getName() elements == java.lang.Double.class)
return.getClass().getName() in this.values[].getClass().getName()
return.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
DATA.HashMap.getKey(int):::ENTER
this.values[].getClass().getName() elements == java.lang.Double.class
arg0 >= 0
===========================================================================
DATA.HashMap.getKey(int):::EXIT
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.values == orig(this.values)
this.values[] == orig(this.values[])
this.values[].getClass().getName() elements == java.lang.Double.class
return != null
return.getClass().getName() in this.keys[].getClass().getName()
===========================================================================
DATA.HashMap.iterator():::ENTER
===========================================================================
DATA.HashMap.iterator():::EXIT
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.values == orig(this.values)
this.values[] == orig(this.values[])
return != null
return.getClass().getName() == java.util.ArrayList$Itr.class
===========================================================================
DATA.HashMap.keySet():::ENTER
this.keys[].getClass().getName() elements == DATA.Field.class
this.keys[].getClass().getName() one of { [], [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field] }
this.values[].getClass().getName() elements == DATA.Time.class
this.values[].getClass().getName() one of { [], [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time] }
size(this.keys[]) one of { 0, 6 }
size(this.values[]) one of { 0, 6 }
===========================================================================
DATA.HashMap.keySet():::EXIT
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.values == orig(this.values)
this.values[] == orig(this.values[])
this.keys[].getClass().getName() elements == DATA.Field.class
this.keys[].getClass().getName() one of { [], [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field] }
this.values[].getClass().getName() elements == DATA.Time.class
this.values[].getClass().getName() one of { [], [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time] }
return.getClass().getName() == java.util.concurrent.CopyOnWriteArraySet.class
size(this.keys[]) one of { 0, 6 }
size(this.values[]) one of { 0, 6 }
===========================================================================
DATA.HashMap.put(int, java.lang.Object, java.lang.Object):::ENTER
this has only one value
this.keys has only one value
this.values has only one value
this.values[].getClass().getName() elements == java.lang.Double.class
arg1 != null
arg2 != null
arg2.getClass().getName() == java.lang.Double.class
arg2.getClass().getName() in this.values[].getClass().getName()
arg1.getClass().getName() != arg2.getClass().getName()
===========================================================================
DATA.HashMap.put(int, java.lang.Object, java.lang.Object):::EXIT
this.keys == orig(this.keys)
this.values == orig(this.values)
size(this.keys[])-1 == orig(size(this.keys[]))
size(this.values[])-1 == orig(size(this.values[]))
this.keys has only one value
this.values has only one value
this.values[].getClass().getName() elements == java.lang.Double.class
orig(arg1.getClass().getName()) in this.keys[].getClass().getName()
orig(arg2.getClass().getName()) in this.values[].getClass().getName()
===========================================================================
DATA.HashMap.put(java.lang.Object, java.lang.Object):::ENTER
arg0 != null
arg1 != null
===========================================================================
DATA.HashMap.put(java.lang.Object, java.lang.Object):::EXIT
this.keys == orig(this.keys)
this.values == orig(this.values)
return == orig(arg1)
return.getClass().getName() == orig(arg1.getClass().getName())
return != null
size(this.keys[]) >= 1
size(this.values[]) >= 1
orig(arg0.getClass().getName()) in this.keys[].getClass().getName()
return.getClass().getName() in this.values[].getClass().getName()
size(this.keys[]) >= orig(size(this.keys[]))
size(this.keys[])-1 <= orig(size(this.keys[]))
size(this.keys[])-1 >= orig(size(this.keys[]))-1
size(this.values[]) >= orig(size(this.values[]))
size(this.values[])-1 <= orig(size(this.values[]))
size(this.values[])-1 >= orig(size(this.values[]))-1
===========================================================================
DATA.HashMap.remove(java.lang.Object):::ENTER
this has only one value
this.keys has only one value
this.keys[] contains no nulls and has only one value, of length 14
this.keys[].getClass().getName() == [DATA.Teacher, DATA.Teacher, DATA.Group, DATA.ClassType, DATA.Teacher, DATA.Teacher, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.Teacher]
this.values has only one value
this.values[] contains no nulls and has only one value, of length 14
this.values[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
this.values[].getClass().getName() elements == java.lang.Double.class
arg0 has only one value
arg0.getClass().getName() == DATA.Group.class
size(this.keys[]) == 14
size(this.values[]) == 14
arg0.getClass().getName() in this.keys[].getClass().getName()
===========================================================================
DATA.HashMap.remove(java.lang.Object):::EXIT96
===========================================================================
DATA.HashMap.remove(java.lang.Object):::EXIT
this.keys == orig(this.keys)
this.values == orig(this.values)
size(this.keys[]) == orig(size(this.keys[]))-1
size(this.values[]) == orig(size(this.values[]))-1
this.keys has only one value
this.keys[] contains no nulls and has only one value, of length 13
this.keys[].getClass().getName() == [DATA.Teacher, DATA.Teacher, DATA.ClassType, DATA.Teacher, DATA.Teacher, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.ClassType, DATA.Teacher]
this.values has only one value
this.values[] contains no nulls and has only one value, of length 13
this.values[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
this.values[].getClass().getName() elements == java.lang.Double.class
return has only one value
return.getClass().getName() == java.lang.Double.class
return.getClass().getName() in this.values[].getClass().getName()
return.getClass().getName() in orig(this.values[].getClass().getName())
===========================================================================
DATA.HashMap.size():::ENTER
this.values[].getClass().getName() elements == java.lang.Double.class
===========================================================================
DATA.HashMap.size():::EXIT
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.values == orig(this.values)
this.values[] == orig(this.values[])
this.values[].getClass().getName() elements == java.lang.Double.class
===========================================================================
DATA.Lesson:::OBJECT
this.teacher != null
this.teacher.firstName != null
this.teacher.lastName != null
this.teacher.maxWeekWorkedHours has only one value
this.teacher.maxWeekWorkedHours != null
this.teacher.maxWeekWorkedHours.day == 1
this.teacher.maxWeekWorkedHours.hour == 1
this.teacher.maxWeekWorkedHours.min == 0
this.teacher.currentWeekWorkedHours != null
this.teacher.currentWeekWorkedHours.day one of { 0, 1 }
this.teacher.currentWeekWorkedHours.hour one of { 1, 9, 14 }
this.teacher.currentWeekWorkedHours.min == 0
this.teacher.fields != null
this.teacher.fields[] elements != null
this.teacher.fields[].getClass().getName() elements == DATA.Field.class
this.teacher.fields[].getClass().getName() one of { [DATA.Field], [DATA.Field, DATA.Field, DATA.Field] }
this.teacher.students != null
this.teacher.timeTable != null
this.teacher.timeTable.slots != null
this.teacher.timeTable.slots[] elements != null
this.teacher.timeTable.owner != null
this.teacher.timeTable.owner.getClass().getName() == DATA.Teacher.class
DATA.WeekTable.minDelta has only one value
DATA.WeekTable.minDelta != null
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
this.students != null
this.students.name != null
this.students.name.toString one of { "g2116", "g42", "g46" }
this.students.effectif == 25
this.students.links != null
this.students.classes has only one value
this.students.classes != null
this.students.classes.keys has only one value
this.students.classes.keys != null
this.students.classes.keys[] contains no nulls and has only one value, of length 6
this.students.classes.keys[] elements != null
this.students.classes.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.students.classes.keys[].getClass().getName() elements == DATA.Field.class
this.students.classes.values has only one value
this.students.classes.values != null
this.students.classes.values[] contains no nulls and has only one value, of length 6
this.students.classes.values[] elements != null
this.students.classes.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
this.students.classes.values[].getClass().getName() elements == DATA.Time.class
this.students.done != null
this.students.done.keys != null
this.students.done.keys[] contains no nulls and has only one value, of length 6
this.students.done.keys[] elements != null
this.students.done.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.students.done.keys[].getClass().getName() elements == DATA.Field.class
this.students.done.values != null
this.students.done.values[] elements != null
this.students.done.values[].getClass().getName() == [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean]
this.students.done.values[].getClass().getName() elements == java.lang.Boolean.class
this.students.parent has only one value
this.students.parent != null
this.students.parent.name has only one value
this.students.parent.name != null
this.students.parent.name.toString == "Lanip"
this.students.parent.effectif == 100
this.students.parent.links has only one value
this.students.parent.links != null
this.students.parent.classes has only one value
this.students.parent.classes != null
this.students.parent.done has only one value
this.students.parent.done != null
this.students.parent.parent == null
this.students.parent.children has only one value
this.students.parent.children != null
this.students.parent.children.getClass().getName() == DATA.Group[].class
this.students.parent.children[] contains no nulls and has only one value, of length 2
this.students.parent.children[] elements != null
this.students.parent.children[].getClass().getName() == [DATA.Group, DATA.Group]
this.students.parent.children[].getClass().getName() elements == DATA.Group.class
this.students.parent.children[].name contains no nulls and has only one value, of length 2
this.students.parent.children[].name elements != null
this.students.parent.children[].name.toString == [g46, g42]
this.students.parent.children[].name.toString elements one of { "g42", "g46" }
this.students.parent.children[].effectif == [25, 25]
this.students.parent.children[].effectif elements == 25
this.students.parent.children[].links contains no nulls and has only one value, of length 2
this.students.parent.children[].links elements != null
this.students.parent.children[].classes contains no nulls and has only one value, of length 2
this.students.parent.children[].classes elements has only one value
this.students.parent.children[].classes elements != null
this.students.parent.children[].done contains no nulls and has only one value, of length 2
this.students.parent.children[].done elements != null
this.students.parent.children[].parent contains no nulls and has only one value, of length 2
this.students.parent.children[].parent elements has only one value
this.students.parent.children[].parent elements != null
this.students.parent.children[].children contains only nulls and has only one value, of length 2
this.students.parent.children[].children elements == null
this.students.parent.children[].children.getClass().getName() == [null, null]
this.students.parent.children[].children.getClass().getName() elements == null
this.students.parent.children[].timeTable contains no nulls and has only one value, of length 2
this.students.parent.children[].timeTable elements != null
this.students.parent.timeTable has only one value
this.students.parent.timeTable != null
this.students.children == null
this.students.timeTable != null
this.students.timeTable.slots != null
this.students.timeTable.slots[] elements != null
this.students.timeTable.owner != null
this.students.timeTable.owner.getClass().getName() == DATA.Group.class
this.field != null
this.field.type != null
this.field.type.name != null
this.field.type.shortName != null
this.field.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
this.field.type.duration != null
this.field.name != null
this.field.duration != null
this.field.duration.begin != null
this.field.duration.end != null
this.place != null
this.place.coords != null
this.place.type != null
this.place.type.name != null
this.place.type.shortName != null
this.place.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
this.place.type.duration != null
this.place.name != null
this.place.effectif one of { 25, 32, 100 }
this.place.timeTable != null
this.place.timeTable.slots != null
this.place.timeTable.slots[] elements != null
this.place.timeTable.owner != null
this.place.timeTable.owner.getClass().getName() == DATA.Classroom.class
this.begin != null
this.begin.day >= 0
this.begin.min one of { 0, 30 }
this.end != null
this.end.day >= 0
this.end.min one of { 0, 30 }
size(this.teacher.fields[]) one of { 1, 3 }
size(this.students.classes.keys[]) == 6
size(this.students.classes.values[]) == 6
size(this.students.done.keys[]) == 6
size(this.students.done.values[]) == 6
size(this.students.parent.children[]) == 2
===========================================================================
DATA.Lesson.Lesson(DATA.Teacher, DATA.Group, DATA.Field, DATA.Classroom, DATA.Slot):::ENTER
arg0 != null
arg0.firstName != null
arg0.lastName != null
arg0.maxWeekWorkedHours has only one value
arg0.maxWeekWorkedHours != null
arg0.maxWeekWorkedHours.day == 1
arg0.maxWeekWorkedHours.hour == 1
arg0.maxWeekWorkedHours.min == 0
arg0.currentWeekWorkedHours != null
arg0.currentWeekWorkedHours.day one of { 0, 1 }
arg0.currentWeekWorkedHours.hour one of { 1, 9, 14 }
arg0.currentWeekWorkedHours.min == 0
arg0.fields != null
arg0.fields[] elements != null
arg0.fields[].getClass().getName() elements == DATA.Field.class
arg0.fields[].getClass().getName() one of { [DATA.Field], [DATA.Field, DATA.Field, DATA.Field] }
arg0.students != null
arg0.timeTable != null
arg0.timeTable.slots != null
arg0.timeTable.slots[] elements != null
arg0.timeTable.owner != null
arg0.timeTable.owner.getClass().getName() == DATA.Teacher.class
DATA.WeekTable.minDelta has only one value
DATA.WeekTable.minDelta != null
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
arg1 != null
arg1.name != null
arg1.name.toString one of { "g2116", "g42", "g46" }
arg1.effectif == 25
arg1.links != null
arg1.classes has only one value
arg1.classes != null
arg1.classes.keys has only one value
arg1.classes.keys != null
arg1.classes.keys[] contains no nulls and has only one value, of length 6
arg1.classes.keys[] elements != null
arg1.classes.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg1.classes.keys[].getClass().getName() elements == DATA.Field.class
arg1.classes.values has only one value
arg1.classes.values != null
arg1.classes.values[] contains no nulls and has only one value, of length 6
arg1.classes.values[] elements != null
arg1.classes.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
arg1.classes.values[].getClass().getName() elements == DATA.Time.class
arg1.done != null
arg1.done.keys != null
arg1.done.keys[] contains no nulls and has only one value, of length 6
arg1.done.keys[] elements != null
arg1.done.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg1.done.keys[].getClass().getName() elements == DATA.Field.class
arg1.done.values != null
arg1.done.values[] elements != null
arg1.done.values[].getClass().getName() == [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean]
arg1.done.values[].getClass().getName() elements == java.lang.Boolean.class
arg1.parent has only one value
arg1.parent != null
arg1.parent.name has only one value
arg1.parent.name != null
arg1.parent.name.toString == "Lanip"
arg1.parent.effectif == 100
arg1.parent.links has only one value
arg1.parent.links != null
arg1.parent.classes has only one value
arg1.parent.classes != null
arg1.parent.done has only one value
arg1.parent.done != null
arg1.parent.parent == null
arg1.parent.children has only one value
arg1.parent.children != null
arg1.parent.children.getClass().getName() == DATA.Group[].class
arg1.parent.children[] contains no nulls and has only one value, of length 2
arg1.parent.children[] elements != null
arg1.parent.children[].getClass().getName() == [DATA.Group, DATA.Group]
arg1.parent.children[].getClass().getName() elements == DATA.Group.class
arg1.parent.children[].name contains no nulls and has only one value, of length 2
arg1.parent.children[].name elements != null
arg1.parent.children[].name.toString == [g46, g42]
arg1.parent.children[].name.toString elements one of { "g42", "g46" }
arg1.parent.children[].effectif == [25, 25]
arg1.parent.children[].effectif elements == 25
arg1.parent.children[].links contains no nulls and has only one value, of length 2
arg1.parent.children[].links elements != null
arg1.parent.children[].classes contains no nulls and has only one value, of length 2
arg1.parent.children[].classes elements has only one value
arg1.parent.children[].classes elements != null
arg1.parent.children[].done contains no nulls and has only one value, of length 2
arg1.parent.children[].done elements != null
arg1.parent.children[].parent contains no nulls and has only one value, of length 2
arg1.parent.children[].parent elements has only one value
arg1.parent.children[].parent elements != null
arg1.parent.children[].children contains only nulls and has only one value, of length 2
arg1.parent.children[].children elements == null
arg1.parent.children[].children.getClass().getName() == [null, null]
arg1.parent.children[].children.getClass().getName() elements == null
arg1.parent.children[].timeTable contains no nulls and has only one value, of length 2
arg1.parent.children[].timeTable elements != null
arg1.parent.timeTable has only one value
arg1.parent.timeTable != null
arg1.children == null
arg1.timeTable != null
arg1.timeTable.slots != null
arg1.timeTable.slots[] elements != null
arg1.timeTable.owner != null
arg1.timeTable.owner.getClass().getName() == DATA.Group.class
arg2 != null
arg2.type != null
arg2.type.name != null
arg2.type.shortName != null
arg2.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
arg2.type.duration != null
arg2.name != null
arg2.duration != null
arg2.duration.begin != null
arg2.duration.end != null
arg3 != null
arg3.coords != null
arg3.type != null
arg3.type.name != null
arg3.type.shortName != null
arg3.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
arg3.type.duration != null
arg3.name != null
arg3.effectif one of { 25, 32, 100 }
arg3.timeTable != null
arg3.timeTable.slots != null
arg3.timeTable.slots[] elements != null
arg3.timeTable.owner != null
arg3.timeTable.owner.getClass().getName() == DATA.Classroom.class
arg4 != null
arg4.begin != null
arg4.begin.day >= 0
arg4.begin.min one of { 0, 30 }
arg4.end != null
arg4.end.day >= 0
arg4.end.min one of { 0, 30 }
size(arg0.fields[]) one of { 1, 3 }
size(arg1.classes.keys[]) == 6
size(arg1.classes.values[]) == 6
size(arg1.done.keys[]) == 6
size(arg1.done.values[]) == 6
size(arg1.parent.children[]) == 2
===========================================================================
DATA.Lesson.Lesson(DATA.Teacher, DATA.Group, DATA.Field, DATA.Classroom, DATA.Slot):::EXIT
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
arg0.firstName == orig(arg0.firstName)
arg0.firstName.toString == orig(arg0.firstName.toString)
arg0.lastName == orig(arg0.lastName)
arg0.lastName.toString == orig(arg0.lastName.toString)
arg0.maxWeekWorkedHours == orig(arg0.maxWeekWorkedHours)
arg0.maxWeekWorkedHours.day == orig(arg0.maxWeekWorkedHours.day)
arg0.maxWeekWorkedHours.hour == orig(arg0.maxWeekWorkedHours.hour)
arg0.maxWeekWorkedHours.min == orig(arg0.maxWeekWorkedHours.min)
arg0.currentWeekWorkedHours == orig(arg0.currentWeekWorkedHours)
arg0.currentWeekWorkedHours.day == orig(arg0.currentWeekWorkedHours.day)
arg0.currentWeekWorkedHours.hour == orig(arg0.currentWeekWorkedHours.hour)
arg0.currentWeekWorkedHours.min == orig(arg0.currentWeekWorkedHours.min)
arg0.fields == orig(arg0.fields)
arg0.fields[] == orig(arg0.fields[])
arg0.students == orig(arg0.students)
arg0.timeTable == orig(arg0.timeTable)
arg0.timeTable.slots == orig(arg0.timeTable.slots)
arg0.timeTable.slots[] == orig(arg0.timeTable.slots[])
arg0.timeTable.owner == orig(arg0.timeTable.owner)
arg0.timeTable.owner.getClass().getName() == orig(arg0.timeTable.owner.getClass().getName())
arg1.name == orig(arg1.name)
arg1.name.toString == orig(arg1.name.toString)
arg1.effectif == orig(arg1.effectif)
arg1.links == orig(arg1.links)
arg1.classes == orig(arg1.classes)
arg1.classes.keys == orig(arg1.classes.keys)
arg1.classes.keys[] == orig(arg1.classes.keys[])
arg1.classes.values == orig(arg1.classes.values)
arg1.classes.values[] == orig(arg1.classes.values[])
arg1.done == orig(arg1.done)
arg1.done.keys == orig(arg1.done.keys)
arg1.done.keys[] == orig(arg1.done.keys[])
arg1.done.values == orig(arg1.done.values)
arg1.done.values[] == orig(arg1.done.values[])
arg1.parent == orig(arg1.parent)
arg1.parent.name == orig(arg1.parent.name)
arg1.parent.name.toString == orig(arg1.parent.name.toString)
arg1.parent.effectif == orig(arg1.parent.effectif)
arg1.parent.links == orig(arg1.parent.links)
arg1.parent.classes == orig(arg1.parent.classes)
arg1.parent.done == orig(arg1.parent.done)
arg1.parent.parent == orig(arg1.parent.parent)
arg1.parent.children == orig(arg1.parent.children)
arg1.parent.children.getClass().getName() == orig(arg1.parent.children.getClass().getName())
arg1.parent.children[] == orig(arg1.parent.children[])
arg1.parent.children[].name == orig(arg1.parent.children[].name)
arg1.parent.children[].effectif == orig(arg1.parent.children[].effectif)
arg1.parent.children[].links == orig(arg1.parent.children[].links)
arg1.parent.children[].classes == orig(arg1.parent.children[].classes)
arg1.parent.children[].done == orig(arg1.parent.children[].done)
arg1.parent.children[].parent == orig(arg1.parent.children[].parent)
arg1.parent.children[].children == orig(arg1.parent.children[].children)
arg1.parent.children[].timeTable == orig(arg1.parent.children[].timeTable)
arg1.parent.timeTable == orig(arg1.parent.timeTable)
arg1.children == orig(arg1.children)
arg1.timeTable == orig(arg1.timeTable)
arg1.timeTable.slots == orig(arg1.timeTable.slots)
arg1.timeTable.slots[] == orig(arg1.timeTable.slots[])
arg1.timeTable.owner == orig(arg1.timeTable.owner)
arg1.timeTable.owner.getClass().getName() == orig(arg1.timeTable.owner.getClass().getName())
arg2.type == orig(arg2.type)
arg2.type.name == orig(arg2.type.name)
arg2.type.name.toString == orig(arg2.type.name.toString)
arg2.type.shortName == orig(arg2.type.shortName)
arg2.type.shortName.toString == orig(arg2.type.shortName.toString)
arg2.type.duration == orig(arg2.type.duration)
arg2.name == orig(arg2.name)
arg2.name.toString == orig(arg2.name.toString)
arg2.duration == orig(arg2.duration)
arg2.duration.begin == orig(arg2.duration.begin)
arg2.duration.end == orig(arg2.duration.end)
arg3.coords == orig(arg3.coords)
arg3.type == orig(arg3.type)
arg3.type.name == orig(arg3.type.name)
arg3.type.name.toString == orig(arg3.type.name.toString)
arg3.type.shortName == orig(arg3.type.shortName)
arg3.type.shortName.toString == orig(arg3.type.shortName.toString)
arg3.type.duration == orig(arg3.type.duration)
arg3.name == orig(arg3.name)
arg3.name.toString == orig(arg3.name.toString)
arg3.effectif == orig(arg3.effectif)
arg3.timeTable == orig(arg3.timeTable)
arg3.timeTable.slots == orig(arg3.timeTable.slots)
arg3.timeTable.slots[] == orig(arg3.timeTable.slots[])
arg3.timeTable.owner == orig(arg3.timeTable.owner)
arg3.timeTable.owner.getClass().getName() == orig(arg3.timeTable.owner.getClass().getName())
arg4.begin == orig(arg4.begin)
arg4.begin.day == orig(arg4.begin.day)
arg4.begin.hour == orig(arg4.begin.hour)
arg4.begin.min == orig(arg4.begin.min)
arg4.end == orig(arg4.end)
arg4.end.day == orig(arg4.end.day)
arg4.end.hour == orig(arg4.end.hour)
arg4.end.min == orig(arg4.end.min)
arg0.firstName != null
arg0.lastName != null
arg0.maxWeekWorkedHours has only one value
arg0.maxWeekWorkedHours != null
arg0.maxWeekWorkedHours.day == 1
arg0.maxWeekWorkedHours.hour == 1
arg0.maxWeekWorkedHours.min == 0
arg0.currentWeekWorkedHours != null
arg0.currentWeekWorkedHours.day one of { 0, 1 }
arg0.currentWeekWorkedHours.hour one of { 1, 9, 14 }
arg0.currentWeekWorkedHours.min == 0
arg0.fields != null
arg0.fields[] elements != null
arg0.fields[].getClass().getName() elements == DATA.Field.class
arg0.fields[].getClass().getName() one of { [DATA.Field], [DATA.Field, DATA.Field, DATA.Field] }
arg0.students != null
arg0.timeTable != null
arg0.timeTable.slots != null
arg0.timeTable.slots[] elements != null
arg0.timeTable.owner != null
arg0.timeTable.owner.getClass().getName() == DATA.Teacher.class
arg1.name != null
arg1.name.toString one of { "g2116", "g42", "g46" }
arg1.effectif == 25
arg1.links != null
arg1.classes has only one value
arg1.classes != null
arg1.classes.keys has only one value
arg1.classes.keys != null
arg1.classes.keys[] contains no nulls and has only one value, of length 6
arg1.classes.keys[] elements != null
arg1.classes.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg1.classes.keys[].getClass().getName() elements == DATA.Field.class
arg1.classes.values has only one value
arg1.classes.values != null
arg1.classes.values[] contains no nulls and has only one value, of length 6
arg1.classes.values[] elements != null
arg1.classes.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
arg1.classes.values[].getClass().getName() elements == DATA.Time.class
arg1.done != null
arg1.done.keys != null
arg1.done.keys[] contains no nulls and has only one value, of length 6
arg1.done.keys[] elements != null
arg1.done.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg1.done.keys[].getClass().getName() elements == DATA.Field.class
arg1.done.values != null
arg1.done.values[] elements != null
arg1.done.values[].getClass().getName() == [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean]
arg1.done.values[].getClass().getName() elements == java.lang.Boolean.class
arg1.parent has only one value
arg1.parent != null
arg1.parent.name has only one value
arg1.parent.name != null
arg1.parent.name.toString == "Lanip"
arg1.parent.effectif == 100
arg1.parent.links has only one value
arg1.parent.links != null
arg1.parent.classes has only one value
arg1.parent.classes != null
arg1.parent.done has only one value
arg1.parent.done != null
arg1.parent.parent == null
arg1.parent.children has only one value
arg1.parent.children != null
arg1.parent.children.getClass().getName() == DATA.Group[].class
arg1.parent.children[] contains no nulls and has only one value, of length 2
arg1.parent.children[] elements != null
arg1.parent.children[].getClass().getName() == [DATA.Group, DATA.Group]
arg1.parent.children[].getClass().getName() elements == DATA.Group.class
arg1.parent.children[].name contains no nulls and has only one value, of length 2
arg1.parent.children[].name elements != null
arg1.parent.children[].name.toString == [g46, g42]
arg1.parent.children[].name.toString elements one of { "g42", "g46" }
arg1.parent.children[].effectif == [25, 25]
arg1.parent.children[].effectif elements == 25
arg1.parent.children[].links contains no nulls and has only one value, of length 2
arg1.parent.children[].links elements != null
arg1.parent.children[].classes contains no nulls and has only one value, of length 2
arg1.parent.children[].classes elements has only one value
arg1.parent.children[].classes elements != null
arg1.parent.children[].done contains no nulls and has only one value, of length 2
arg1.parent.children[].done elements != null
arg1.parent.children[].parent contains no nulls and has only one value, of length 2
arg1.parent.children[].parent elements has only one value
arg1.parent.children[].parent elements != null
arg1.parent.children[].children contains only nulls and has only one value, of length 2
arg1.parent.children[].children elements == null
arg1.parent.children[].children.getClass().getName() == [null, null]
arg1.parent.children[].children.getClass().getName() elements == null
arg1.parent.children[].timeTable contains no nulls and has only one value, of length 2
arg1.parent.children[].timeTable elements != null
arg1.parent.timeTable has only one value
arg1.parent.timeTable != null
arg1.children == null
arg1.timeTable != null
arg1.timeTable.slots != null
arg1.timeTable.slots[] elements != null
arg1.timeTable.owner != null
arg1.timeTable.owner.getClass().getName() == DATA.Group.class
arg2.type != null
arg2.type.name != null
arg2.type.shortName != null
arg2.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
arg2.type.duration != null
arg2.name != null
arg2.duration != null
arg2.duration.begin != null
arg2.duration.end != null
arg3.coords != null
arg3.type != null
arg3.type.name != null
arg3.type.shortName != null
arg3.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
arg3.type.duration != null
arg3.name != null
arg3.effectif one of { 25, 32, 100 }
arg3.timeTable != null
arg3.timeTable.slots != null
arg3.timeTable.slots[] elements != null
arg3.timeTable.owner != null
arg3.timeTable.owner.getClass().getName() == DATA.Classroom.class
arg4.begin != null
arg4.begin.day >= 0
arg4.begin.min one of { 0, 30 }
arg4.end != null
arg4.end.day >= 0
arg4.end.min one of { 0, 30 }
size(arg0.fields[]) one of { 1, 3 }
size(arg1.classes.keys[]) == 6
size(arg1.classes.values[]) == 6
size(arg1.done.keys[]) == 6
size(arg1.done.values[]) == 6
size(arg1.parent.children[]) == 2
===========================================================================
DATA.Lesson.check():::ENTER
===========================================================================
DATA.Lesson.check():::EXIT
this.teacher == orig(this.teacher)
this.teacher.firstName == orig(this.teacher.firstName)
this.teacher.firstName.toString == orig(this.teacher.firstName.toString)
this.teacher.lastName == orig(this.teacher.lastName)
this.teacher.lastName.toString == orig(this.teacher.lastName.toString)
this.teacher.maxWeekWorkedHours == orig(this.teacher.maxWeekWorkedHours)
this.teacher.maxWeekWorkedHours.day == orig(this.teacher.maxWeekWorkedHours.day)
this.teacher.maxWeekWorkedHours.hour == orig(this.teacher.maxWeekWorkedHours.hour)
this.teacher.maxWeekWorkedHours.min == orig(this.teacher.maxWeekWorkedHours.min)
this.teacher.currentWeekWorkedHours == orig(this.teacher.currentWeekWorkedHours)
this.teacher.currentWeekWorkedHours.day == orig(this.teacher.currentWeekWorkedHours.day)
this.teacher.currentWeekWorkedHours.hour == orig(this.teacher.currentWeekWorkedHours.hour)
this.teacher.currentWeekWorkedHours.min == orig(this.teacher.currentWeekWorkedHours.min)
this.teacher.fields == orig(this.teacher.fields)
this.teacher.fields[] == orig(this.teacher.fields[])
this.teacher.students == orig(this.teacher.students)
this.teacher.timeTable == orig(this.teacher.timeTable)
this.teacher.timeTable.slots == orig(this.teacher.timeTable.slots)
this.teacher.timeTable.slots[] == orig(this.teacher.timeTable.slots[])
this.teacher.timeTable.owner == orig(this.teacher.timeTable.owner)
this.teacher.timeTable.owner.getClass().getName() == orig(this.teacher.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
this.students == orig(this.students)
this.students.name == orig(this.students.name)
this.students.name.toString == orig(this.students.name.toString)
this.students.effectif == orig(this.students.effectif)
this.students.links == orig(this.students.links)
this.students.classes == orig(this.students.classes)
this.students.classes.keys == orig(this.students.classes.keys)
this.students.classes.keys[] == orig(this.students.classes.keys[])
this.students.classes.values == orig(this.students.classes.values)
this.students.classes.values[] == orig(this.students.classes.values[])
this.students.done == orig(this.students.done)
this.students.done.keys == orig(this.students.done.keys)
this.students.done.keys[] == orig(this.students.done.keys[])
this.students.done.values == orig(this.students.done.values)
this.students.done.values[] == orig(this.students.done.values[])
this.students.parent == orig(this.students.parent)
this.students.parent.name == orig(this.students.parent.name)
this.students.parent.name.toString == orig(this.students.parent.name.toString)
this.students.parent.effectif == orig(this.students.parent.effectif)
this.students.parent.links == orig(this.students.parent.links)
this.students.parent.classes == orig(this.students.parent.classes)
this.students.parent.done == orig(this.students.parent.done)
this.students.parent.parent == orig(this.students.parent.parent)
this.students.parent.children == orig(this.students.parent.children)
this.students.parent.children.getClass().getName() == orig(this.students.parent.children.getClass().getName())
this.students.parent.children[] == orig(this.students.parent.children[])
this.students.parent.children[].name == orig(this.students.parent.children[].name)
this.students.parent.children[].effectif == orig(this.students.parent.children[].effectif)
this.students.parent.children[].links == orig(this.students.parent.children[].links)
this.students.parent.children[].classes == orig(this.students.parent.children[].classes)
this.students.parent.children[].done == orig(this.students.parent.children[].done)
this.students.parent.children[].parent == orig(this.students.parent.children[].parent)
this.students.parent.children[].children == orig(this.students.parent.children[].children)
this.students.parent.children[].timeTable == orig(this.students.parent.children[].timeTable)
this.students.parent.timeTable == orig(this.students.parent.timeTable)
this.students.children == orig(this.students.children)
this.students.timeTable == orig(this.students.timeTable)
this.students.timeTable.slots == orig(this.students.timeTable.slots)
this.students.timeTable.slots[] == orig(this.students.timeTable.slots[])
this.students.timeTable.owner == orig(this.students.timeTable.owner)
this.students.timeTable.owner.getClass().getName() == orig(this.students.timeTable.owner.getClass().getName())
this.field == orig(this.field)
this.field.type == orig(this.field.type)
this.field.type.name == orig(this.field.type.name)
this.field.type.name.toString == orig(this.field.type.name.toString)
this.field.type.shortName == orig(this.field.type.shortName)
this.field.type.shortName.toString == orig(this.field.type.shortName.toString)
this.field.type.duration == orig(this.field.type.duration)
this.field.name == orig(this.field.name)
this.field.name.toString == orig(this.field.name.toString)
this.field.duration == orig(this.field.duration)
this.field.duration.begin == orig(this.field.duration.begin)
this.field.duration.end == orig(this.field.duration.end)
this.place == orig(this.place)
this.place.coords == orig(this.place.coords)
this.place.type == orig(this.place.type)
this.place.type.name == orig(this.place.type.name)
this.place.type.name.toString == orig(this.place.type.name.toString)
this.place.type.shortName == orig(this.place.type.shortName)
this.place.type.shortName.toString == orig(this.place.type.shortName.toString)
this.place.type.duration == orig(this.place.type.duration)
this.place.name == orig(this.place.name)
this.place.name.toString == orig(this.place.name.toString)
this.place.effectif == orig(this.place.effectif)
this.place.timeTable == orig(this.place.timeTable)
this.place.timeTable.slots == orig(this.place.timeTable.slots)
this.place.timeTable.slots[] == orig(this.place.timeTable.slots[])
this.place.timeTable.owner == orig(this.place.timeTable.owner)
this.place.timeTable.owner.getClass().getName() == orig(this.place.timeTable.owner.getClass().getName())
this.begin == orig(this.begin)
this.begin.day == orig(this.begin.day)
this.begin.hour == orig(this.begin.hour)
this.begin.min == orig(this.begin.min)
this.end == orig(this.end)
this.end.day == orig(this.end.day)
this.end.hour == orig(this.end.hour)
this.end.min == orig(this.end.min)
return == true
===========================================================================
DATA.Lesson.check():::EXIT;condition="return == true"
===========================================================================
DATA.Lesson.getField():::ENTER
===========================================================================
DATA.Lesson.getField():::EXIT
this.teacher == orig(this.teacher)
this.teacher.firstName == orig(this.teacher.firstName)
this.teacher.firstName.toString == orig(this.teacher.firstName.toString)
this.teacher.lastName == orig(this.teacher.lastName)
this.teacher.lastName.toString == orig(this.teacher.lastName.toString)
this.teacher.maxWeekWorkedHours == orig(this.teacher.maxWeekWorkedHours)
this.teacher.maxWeekWorkedHours.day == orig(this.teacher.maxWeekWorkedHours.day)
this.teacher.maxWeekWorkedHours.hour == orig(this.teacher.maxWeekWorkedHours.hour)
this.teacher.maxWeekWorkedHours.min == orig(this.teacher.maxWeekWorkedHours.min)
this.teacher.currentWeekWorkedHours == orig(this.teacher.currentWeekWorkedHours)
this.teacher.currentWeekWorkedHours.day == orig(this.teacher.currentWeekWorkedHours.day)
this.teacher.currentWeekWorkedHours.hour == orig(this.teacher.currentWeekWorkedHours.hour)
this.teacher.currentWeekWorkedHours.min == orig(this.teacher.currentWeekWorkedHours.min)
this.teacher.fields == orig(this.teacher.fields)
this.teacher.fields[] == orig(this.teacher.fields[])
this.teacher.students == orig(this.teacher.students)
this.teacher.timeTable == orig(this.teacher.timeTable)
this.teacher.timeTable.slots == orig(this.teacher.timeTable.slots)
this.teacher.timeTable.slots[] == orig(this.teacher.timeTable.slots[])
this.teacher.timeTable.owner == orig(this.teacher.timeTable.owner)
this.teacher.timeTable.owner.getClass().getName() == orig(this.teacher.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
this.students == orig(this.students)
this.students.name == orig(this.students.name)
this.students.name.toString == orig(this.students.name.toString)
this.students.effectif == orig(this.students.effectif)
this.students.links == orig(this.students.links)
this.students.classes == orig(this.students.classes)
this.students.classes.keys == orig(this.students.classes.keys)
this.students.classes.keys[] == orig(this.students.classes.keys[])
this.students.classes.values == orig(this.students.classes.values)
this.students.classes.values[] == orig(this.students.classes.values[])
this.students.done == orig(this.students.done)
this.students.done.keys == orig(this.students.done.keys)
this.students.done.keys[] == orig(this.students.done.keys[])
this.students.done.values == orig(this.students.done.values)
this.students.done.values[] == orig(this.students.done.values[])
this.students.parent == orig(this.students.parent)
this.students.parent.name == orig(this.students.parent.name)
this.students.parent.name.toString == orig(this.students.parent.name.toString)
this.students.parent.effectif == orig(this.students.parent.effectif)
this.students.parent.links == orig(this.students.parent.links)
this.students.parent.classes == orig(this.students.parent.classes)
this.students.parent.done == orig(this.students.parent.done)
this.students.parent.parent == orig(this.students.parent.parent)
this.students.parent.children == orig(this.students.parent.children)
this.students.parent.children.getClass().getName() == orig(this.students.parent.children.getClass().getName())
this.students.parent.children[] == orig(this.students.parent.children[])
this.students.parent.children[].name == orig(this.students.parent.children[].name)
this.students.parent.children[].effectif == orig(this.students.parent.children[].effectif)
this.students.parent.children[].links == orig(this.students.parent.children[].links)
this.students.parent.children[].classes == orig(this.students.parent.children[].classes)
this.students.parent.children[].done == orig(this.students.parent.children[].done)
this.students.parent.children[].parent == orig(this.students.parent.children[].parent)
this.students.parent.children[].children == orig(this.students.parent.children[].children)
this.students.parent.children[].timeTable == orig(this.students.parent.children[].timeTable)
this.students.parent.timeTable == orig(this.students.parent.timeTable)
this.students.children == orig(this.students.children)
this.students.timeTable == orig(this.students.timeTable)
this.students.timeTable.slots == orig(this.students.timeTable.slots)
this.students.timeTable.slots[] == orig(this.students.timeTable.slots[])
this.students.timeTable.owner == orig(this.students.timeTable.owner)
this.students.timeTable.owner.getClass().getName() == orig(this.students.timeTable.owner.getClass().getName())
this.field == orig(this.field)
this.field.type == orig(this.field.type)
this.field.type.name == orig(this.field.type.name)
this.field.type.name.toString == orig(this.field.type.name.toString)
this.field.type.shortName == orig(this.field.type.shortName)
this.field.type.shortName.toString == orig(this.field.type.shortName.toString)
this.field.type.duration == orig(this.field.type.duration)
this.field.name == orig(this.field.name)
this.field.name.toString == orig(this.field.name.toString)
this.field.duration == orig(this.field.duration)
this.field.duration.begin == orig(this.field.duration.begin)
this.field.duration.end == orig(this.field.duration.end)
this.place == orig(this.place)
this.place.coords == orig(this.place.coords)
this.place.type == orig(this.place.type)
this.place.type.name == orig(this.place.type.name)
this.place.type.name.toString == orig(this.place.type.name.toString)
this.place.type.shortName == orig(this.place.type.shortName)
this.place.type.shortName.toString == orig(this.place.type.shortName.toString)
this.place.type.duration == orig(this.place.type.duration)
this.place.name == orig(this.place.name)
this.place.name.toString == orig(this.place.name.toString)
this.place.effectif == orig(this.place.effectif)
this.place.timeTable == orig(this.place.timeTable)
this.place.timeTable.slots == orig(this.place.timeTable.slots)
this.place.timeTable.slots[] == orig(this.place.timeTable.slots[])
this.place.timeTable.owner == orig(this.place.timeTable.owner)
this.place.timeTable.owner.getClass().getName() == orig(this.place.timeTable.owner.getClass().getName())
this.begin == orig(this.begin)
this.begin.day == orig(this.begin.day)
this.begin.hour == orig(this.begin.hour)
this.begin.min == orig(this.begin.min)
this.end == orig(this.end)
this.end.day == orig(this.end.day)
this.end.hour == orig(this.end.hour)
this.end.min == orig(this.end.min)
return != null
return.type != null
return.type.name != null
return.type.shortName != null
return.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
return.type.duration != null
return.name != null
return.duration != null
return.duration.begin != null
return.duration.end != null
===========================================================================
DATA.Lesson.getPlace():::ENTER
this.teacher has only one value
this.teacher.firstName has only one value
this.teacher.firstName.toString == "Apple"
this.teacher.lastName has only one value
this.teacher.lastName.toString == "Jack"
this.teacher.currentWeekWorkedHours has only one value
this.teacher.currentWeekWorkedHours.day == 1
this.teacher.currentWeekWorkedHours.hour == 1
this.teacher.fields has only one value
this.teacher.fields[] contains no nulls and has only one value, of length 3
this.teacher.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field]
this.teacher.students has only one value
this.teacher.timeTable has only one value
this.teacher.timeTable.slots has only one value
this.teacher.timeTable.owner has only one value
this.field.type has only one value
this.field.type.name has only one value
this.field.type.name.toString == "TD"
this.field.type.shortName has only one value
this.field.type.shortName.toString == "TD"
this.field.type.duration has only one value
this.field.name.toString one of { "Maths", "Physique" }
this.field.duration has only one value
this.field.duration.begin has only one value
this.field.duration.end has only one value
this.place has only one value
this.place.coords has only one value
this.place.type has only one value
this.place.type.name has only one value
this.place.type.name.toString == "TD"
this.place.type.shortName has only one value
this.place.type.shortName.toString == "TD"
this.place.type.duration has only one value
this.place.name has only one value
this.place.name.toString == "C9"
this.place.effectif == 25
this.place.timeTable has only one value
this.place.timeTable.slots has only one value
this.place.timeTable.owner has only one value
size(this.teacher.fields[]) == 3
size(this.place.timeTable.slots[]) one of { 12, 13, 15 }
===========================================================================
DATA.Lesson.getPlace():::EXIT
this.teacher == orig(this.teacher)
this.teacher.firstName == orig(this.teacher.firstName)
this.teacher.firstName.toString == orig(this.teacher.firstName.toString)
this.teacher.lastName == orig(this.teacher.lastName)
this.teacher.lastName.toString == orig(this.teacher.lastName.toString)
this.teacher.maxWeekWorkedHours == orig(this.teacher.maxWeekWorkedHours)
this.teacher.maxWeekWorkedHours.day == orig(this.teacher.maxWeekWorkedHours.day)
this.teacher.maxWeekWorkedHours.hour == orig(this.teacher.maxWeekWorkedHours.hour)
this.teacher.maxWeekWorkedHours.min == orig(this.teacher.maxWeekWorkedHours.min)
this.teacher.currentWeekWorkedHours == orig(this.teacher.currentWeekWorkedHours)
this.teacher.currentWeekWorkedHours.day == orig(this.teacher.currentWeekWorkedHours.day)
this.teacher.currentWeekWorkedHours.hour == orig(this.teacher.currentWeekWorkedHours.hour)
this.teacher.currentWeekWorkedHours.min == orig(this.teacher.currentWeekWorkedHours.min)
this.teacher.fields == orig(this.teacher.fields)
this.teacher.fields[] == orig(this.teacher.fields[])
this.teacher.students == orig(this.teacher.students)
this.teacher.timeTable == orig(this.teacher.timeTable)
this.teacher.timeTable.slots == orig(this.teacher.timeTable.slots)
this.teacher.timeTable.slots[] == orig(this.teacher.timeTable.slots[])
this.teacher.timeTable.owner == orig(this.teacher.timeTable.owner)
this.teacher.timeTable.owner.getClass().getName() == orig(this.teacher.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
this.students == orig(this.students)
this.students.name == orig(this.students.name)
this.students.name.toString == orig(this.students.name.toString)
this.students.effectif == orig(this.students.effectif)
this.students.links == orig(this.students.links)
this.students.classes == orig(this.students.classes)
this.students.classes.keys == orig(this.students.classes.keys)
this.students.classes.keys[] == orig(this.students.classes.keys[])
this.students.classes.values == orig(this.students.classes.values)
this.students.classes.values[] == orig(this.students.classes.values[])
this.students.done == orig(this.students.done)
this.students.done.keys == orig(this.students.done.keys)
this.students.done.keys[] == orig(this.students.done.keys[])
this.students.done.values == orig(this.students.done.values)
this.students.done.values[] == orig(this.students.done.values[])
this.students.parent == orig(this.students.parent)
this.students.parent.name == orig(this.students.parent.name)
this.students.parent.name.toString == orig(this.students.parent.name.toString)
this.students.parent.effectif == orig(this.students.parent.effectif)
this.students.parent.links == orig(this.students.parent.links)
this.students.parent.classes == orig(this.students.parent.classes)
this.students.parent.done == orig(this.students.parent.done)
this.students.parent.parent == orig(this.students.parent.parent)
this.students.parent.children == orig(this.students.parent.children)
this.students.parent.children.getClass().getName() == orig(this.students.parent.children.getClass().getName())
this.students.parent.children[] == orig(this.students.parent.children[])
this.students.parent.children[].name == orig(this.students.parent.children[].name)
this.students.parent.children[].effectif == orig(this.students.parent.children[].effectif)
this.students.parent.children[].links == orig(this.students.parent.children[].links)
this.students.parent.children[].classes == orig(this.students.parent.children[].classes)
this.students.parent.children[].done == orig(this.students.parent.children[].done)
this.students.parent.children[].parent == orig(this.students.parent.children[].parent)
this.students.parent.children[].children == orig(this.students.parent.children[].children)
this.students.parent.children[].timeTable == orig(this.students.parent.children[].timeTable)
this.students.parent.timeTable == orig(this.students.parent.timeTable)
this.students.children == orig(this.students.children)
this.students.timeTable == orig(this.students.timeTable)
this.students.timeTable.slots == orig(this.students.timeTable.slots)
this.students.timeTable.slots[] == orig(this.students.timeTable.slots[])
this.students.timeTable.owner == orig(this.students.timeTable.owner)
this.students.timeTable.owner.getClass().getName() == orig(this.students.timeTable.owner.getClass().getName())
this.field == orig(this.field)
this.field.type == orig(this.field.type)
this.field.type.name == orig(this.field.type.name)
this.field.type.name.toString == orig(this.field.type.name.toString)
this.field.type.shortName == orig(this.field.type.shortName)
this.field.type.shortName.toString == orig(this.field.type.shortName.toString)
this.field.type.duration == orig(this.field.type.duration)
this.field.name == orig(this.field.name)
this.field.name.toString == orig(this.field.name.toString)
this.field.duration == orig(this.field.duration)
this.field.duration.begin == orig(this.field.duration.begin)
this.field.duration.end == orig(this.field.duration.end)
this.place == orig(this.place)
this.place.coords == orig(this.place.coords)
this.place.type == orig(this.place.type)
this.place.type.name == orig(this.place.type.name)
this.place.type.name.toString == orig(this.place.type.name.toString)
this.place.type.shortName == orig(this.place.type.shortName)
this.place.type.shortName.toString == orig(this.place.type.shortName.toString)
this.place.type.duration == orig(this.place.type.duration)
this.place.name == orig(this.place.name)
this.place.name.toString == orig(this.place.name.toString)
this.place.effectif == orig(this.place.effectif)
this.place.timeTable == orig(this.place.timeTable)
this.place.timeTable.slots == orig(this.place.timeTable.slots)
this.place.timeTable.slots[] == orig(this.place.timeTable.slots[])
this.place.timeTable.owner == orig(this.place.timeTable.owner)
this.place.timeTable.owner.getClass().getName() == orig(this.place.timeTable.owner.getClass().getName())
this.begin == orig(this.begin)
this.begin.day == orig(this.begin.day)
this.begin.hour == orig(this.begin.hour)
this.begin.min == orig(this.begin.min)
this.end == orig(this.end)
this.end.day == orig(this.end.day)
this.end.hour == orig(this.end.hour)
this.end.min == orig(this.end.min)
this.teacher has only one value
this.teacher.firstName has only one value
this.teacher.firstName.toString == "Apple"
this.teacher.lastName has only one value
this.teacher.lastName.toString == "Jack"
this.teacher.currentWeekWorkedHours has only one value
this.teacher.currentWeekWorkedHours.day == 1
this.teacher.currentWeekWorkedHours.hour == 1
this.teacher.fields has only one value
this.teacher.fields[] contains no nulls and has only one value, of length 3
this.teacher.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field]
this.teacher.students has only one value
this.teacher.timeTable has only one value
this.teacher.timeTable.slots has only one value
this.teacher.timeTable.owner has only one value
this.field.type has only one value
this.field.type.name has only one value
this.field.type.name.toString == "TD"
this.field.type.shortName has only one value
this.field.type.shortName.toString == "TD"
this.field.type.duration has only one value
this.field.name.toString one of { "Maths", "Physique" }
this.field.duration has only one value
this.field.duration.begin has only one value
this.field.duration.end has only one value
this.place has only one value
this.place.coords has only one value
this.place.type has only one value
this.place.type.name has only one value
this.place.type.name.toString == "TD"
this.place.type.shortName has only one value
this.place.type.shortName.toString == "TD"
this.place.type.duration has only one value
this.place.name has only one value
this.place.name.toString == "C9"
this.place.effectif == 25
this.place.timeTable has only one value
this.place.timeTable.slots has only one value
this.place.timeTable.owner has only one value
return has only one value
return != null
return.coords has only one value
return.coords != null
return.type has only one value
return.type != null
return.type.name has only one value
return.type.name != null
return.type.name.toString == "TD"
return.type.shortName has only one value
return.type.shortName != null
return.type.shortName.toString == "TD"
return.type.duration has only one value
return.type.duration != null
return.name has only one value
return.name != null
return.name.toString == "C9"
return.effectif == 25
return.timeTable has only one value
return.timeTable != null
return.timeTable.slots has only one value
return.timeTable.slots != null
return.timeTable.slots[] elements != null
return.timeTable.owner has only one value
return.timeTable.owner != null
return.timeTable.owner.getClass().getName() == DATA.Classroom.class
size(this.teacher.fields[]) == 3
size(this.place.timeTable.slots[]) one of { 12, 13, 15 }
size(return.timeTable.slots[]) one of { 12, 13, 15 }
===========================================================================
DATA.Lesson.getStudents():::ENTER
this.teacher has only one value
this.teacher.firstName has only one value
this.teacher.firstName.toString == "Apple"
this.teacher.lastName has only one value
this.teacher.lastName.toString == "Jack"
this.teacher.currentWeekWorkedHours has only one value
this.teacher.currentWeekWorkedHours.day == 1
this.teacher.currentWeekWorkedHours.hour == 1
this.teacher.fields has only one value
this.teacher.fields[] contains no nulls and has only one value, of length 3
this.teacher.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field]
this.teacher.students has only one value
this.teacher.timeTable has only one value
this.teacher.timeTable.slots has only one value
this.teacher.timeTable.owner has only one value
this.field.type has only one value
this.field.type.name has only one value
this.field.type.name.toString == "TD"
this.field.type.shortName has only one value
this.field.type.shortName.toString == "TD"
this.field.type.duration has only one value
this.field.name.toString one of { "Maths", "Physique" }
this.field.duration has only one value
this.field.duration.begin has only one value
this.field.duration.end has only one value
this.place has only one value
this.place.coords has only one value
this.place.type has only one value
this.place.type.name has only one value
this.place.type.name.toString == "TD"
this.place.type.shortName has only one value
this.place.type.shortName.toString == "TD"
this.place.type.duration has only one value
this.place.name has only one value
this.place.name.toString == "C9"
this.place.effectif == 25
this.place.timeTable has only one value
this.place.timeTable.slots has only one value
this.place.timeTable.owner has only one value
size(this.teacher.fields[]) == 3
size(this.place.timeTable.slots[]) one of { 12, 13, 15 }
===========================================================================
DATA.Lesson.getStudents():::EXIT
this.teacher == orig(this.teacher)
this.teacher.firstName == orig(this.teacher.firstName)
this.teacher.firstName.toString == orig(this.teacher.firstName.toString)
this.teacher.lastName == orig(this.teacher.lastName)
this.teacher.lastName.toString == orig(this.teacher.lastName.toString)
this.teacher.maxWeekWorkedHours == orig(this.teacher.maxWeekWorkedHours)
this.teacher.maxWeekWorkedHours.day == orig(this.teacher.maxWeekWorkedHours.day)
this.teacher.maxWeekWorkedHours.hour == orig(this.teacher.maxWeekWorkedHours.hour)
this.teacher.maxWeekWorkedHours.min == orig(this.teacher.maxWeekWorkedHours.min)
this.teacher.currentWeekWorkedHours == orig(this.teacher.currentWeekWorkedHours)
this.teacher.currentWeekWorkedHours.day == orig(this.teacher.currentWeekWorkedHours.day)
this.teacher.currentWeekWorkedHours.hour == orig(this.teacher.currentWeekWorkedHours.hour)
this.teacher.currentWeekWorkedHours.min == orig(this.teacher.currentWeekWorkedHours.min)
this.teacher.fields == orig(this.teacher.fields)
this.teacher.fields[] == orig(this.teacher.fields[])
this.teacher.students == orig(this.teacher.students)
this.teacher.timeTable == orig(this.teacher.timeTable)
this.teacher.timeTable.slots == orig(this.teacher.timeTable.slots)
this.teacher.timeTable.slots[] == orig(this.teacher.timeTable.slots[])
this.teacher.timeTable.owner == orig(this.teacher.timeTable.owner)
this.teacher.timeTable.owner.getClass().getName() == orig(this.teacher.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
this.students == orig(this.students)
this.students.name == orig(this.students.name)
this.students.name.toString == orig(this.students.name.toString)
this.students.effectif == orig(this.students.effectif)
this.students.links == orig(this.students.links)
this.students.classes == orig(this.students.classes)
this.students.classes.keys == orig(this.students.classes.keys)
this.students.classes.keys[] == orig(this.students.classes.keys[])
this.students.classes.values == orig(this.students.classes.values)
this.students.classes.values[] == orig(this.students.classes.values[])
this.students.done == orig(this.students.done)
this.students.done.keys == orig(this.students.done.keys)
this.students.done.keys[] == orig(this.students.done.keys[])
this.students.done.values == orig(this.students.done.values)
this.students.done.values[] == orig(this.students.done.values[])
this.students.parent == orig(this.students.parent)
this.students.parent.name == orig(this.students.parent.name)
this.students.parent.name.toString == orig(this.students.parent.name.toString)
this.students.parent.effectif == orig(this.students.parent.effectif)
this.students.parent.links == orig(this.students.parent.links)
this.students.parent.classes == orig(this.students.parent.classes)
this.students.parent.done == orig(this.students.parent.done)
this.students.parent.parent == orig(this.students.parent.parent)
this.students.parent.children == orig(this.students.parent.children)
this.students.parent.children.getClass().getName() == orig(this.students.parent.children.getClass().getName())
this.students.parent.children[] == orig(this.students.parent.children[])
this.students.parent.children[].name == orig(this.students.parent.children[].name)
this.students.parent.children[].effectif == orig(this.students.parent.children[].effectif)
this.students.parent.children[].links == orig(this.students.parent.children[].links)
this.students.parent.children[].classes == orig(this.students.parent.children[].classes)
this.students.parent.children[].done == orig(this.students.parent.children[].done)
this.students.parent.children[].parent == orig(this.students.parent.children[].parent)
this.students.parent.children[].children == orig(this.students.parent.children[].children)
this.students.parent.children[].timeTable == orig(this.students.parent.children[].timeTable)
this.students.parent.timeTable == orig(this.students.parent.timeTable)
this.students.children == orig(this.students.children)
this.students.timeTable == orig(this.students.timeTable)
this.students.timeTable.slots == orig(this.students.timeTable.slots)
this.students.timeTable.slots[] == orig(this.students.timeTable.slots[])
this.students.timeTable.owner == orig(this.students.timeTable.owner)
this.students.timeTable.owner.getClass().getName() == orig(this.students.timeTable.owner.getClass().getName())
this.field == orig(this.field)
this.field.type == orig(this.field.type)
this.field.type.name == orig(this.field.type.name)
this.field.type.name.toString == orig(this.field.type.name.toString)
this.field.type.shortName == orig(this.field.type.shortName)
this.field.type.shortName.toString == orig(this.field.type.shortName.toString)
this.field.type.duration == orig(this.field.type.duration)
this.field.name == orig(this.field.name)
this.field.name.toString == orig(this.field.name.toString)
this.field.duration == orig(this.field.duration)
this.field.duration.begin == orig(this.field.duration.begin)
this.field.duration.end == orig(this.field.duration.end)
this.place == orig(this.place)
this.place.coords == orig(this.place.coords)
this.place.type == orig(this.place.type)
this.place.type.name == orig(this.place.type.name)
this.place.type.name.toString == orig(this.place.type.name.toString)
this.place.type.shortName == orig(this.place.type.shortName)
this.place.type.shortName.toString == orig(this.place.type.shortName.toString)
this.place.type.duration == orig(this.place.type.duration)
this.place.name == orig(this.place.name)
this.place.name.toString == orig(this.place.name.toString)
this.place.effectif == orig(this.place.effectif)
this.place.timeTable == orig(this.place.timeTable)
this.place.timeTable.slots == orig(this.place.timeTable.slots)
this.place.timeTable.slots[] == orig(this.place.timeTable.slots[])
this.place.timeTable.owner == orig(this.place.timeTable.owner)
this.place.timeTable.owner.getClass().getName() == orig(this.place.timeTable.owner.getClass().getName())
this.begin == orig(this.begin)
this.begin.day == orig(this.begin.day)
this.begin.hour == orig(this.begin.hour)
this.begin.min == orig(this.begin.min)
this.end == orig(this.end)
this.end.day == orig(this.end.day)
this.end.hour == orig(this.end.hour)
this.end.min == orig(this.end.min)
this.teacher has only one value
this.teacher.firstName has only one value
this.teacher.firstName.toString == "Apple"
this.teacher.lastName has only one value
this.teacher.lastName.toString == "Jack"
this.teacher.currentWeekWorkedHours has only one value
this.teacher.currentWeekWorkedHours.day == 1
this.teacher.currentWeekWorkedHours.hour == 1
this.teacher.fields has only one value
this.teacher.fields[] contains no nulls and has only one value, of length 3
this.teacher.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field]
this.teacher.students has only one value
this.teacher.timeTable has only one value
this.teacher.timeTable.slots has only one value
this.teacher.timeTable.owner has only one value
this.field.type has only one value
this.field.type.name has only one value
this.field.type.name.toString == "TD"
this.field.type.shortName has only one value
this.field.type.shortName.toString == "TD"
this.field.type.duration has only one value
this.field.name.toString one of { "Maths", "Physique" }
this.field.duration has only one value
this.field.duration.begin has only one value
this.field.duration.end has only one value
this.place has only one value
this.place.coords has only one value
this.place.type has only one value
this.place.type.name has only one value
this.place.type.name.toString == "TD"
this.place.type.shortName has only one value
this.place.type.shortName.toString == "TD"
this.place.type.duration has only one value
this.place.name has only one value
this.place.name.toString == "C9"
this.place.effectif == 25
this.place.timeTable has only one value
this.place.timeTable.slots has only one value
this.place.timeTable.owner has only one value
return != null
return.name != null
return.name.toString one of { "g2116", "g42", "g46" }
return.effectif == 25
return.links != null
return.classes has only one value
return.classes != null
return.classes.keys has only one value
return.classes.keys != null
return.classes.keys[] contains no nulls and has only one value, of length 6
return.classes.keys[] elements != null
return.classes.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
return.classes.keys[].getClass().getName() elements == DATA.Field.class
return.classes.values has only one value
return.classes.values != null
return.classes.values[] contains no nulls and has only one value, of length 6
return.classes.values[] elements != null
return.classes.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
return.classes.values[].getClass().getName() elements == DATA.Time.class
return.done != null
return.done.keys != null
return.done.keys[] contains no nulls and has only one value, of length 6
return.done.keys[] elements != null
return.done.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
return.done.keys[].getClass().getName() elements == DATA.Field.class
return.done.values != null
return.done.values[] elements != null
return.done.values[].getClass().getName() == [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean]
return.done.values[].getClass().getName() elements == java.lang.Boolean.class
return.parent has only one value
return.parent != null
return.parent.name has only one value
return.parent.name != null
return.parent.name.toString == "Lanip"
return.parent.effectif == 100
return.parent.links has only one value
return.parent.links != null
return.parent.classes has only one value
return.parent.classes != null
return.parent.done has only one value
return.parent.done != null
return.parent.parent == null
return.parent.children has only one value
return.parent.children != null
return.parent.children.getClass().getName() == DATA.Group[].class
return.parent.children[] contains no nulls and has only one value, of length 2
return.parent.children[] elements != null
return.parent.children[].getClass().getName() == [DATA.Group, DATA.Group]
return.parent.children[].getClass().getName() elements == DATA.Group.class
return.parent.children[].name contains no nulls and has only one value, of length 2
return.parent.children[].name elements != null
return.parent.children[].name.toString == [g46, g42]
return.parent.children[].name.toString elements one of { "g42", "g46" }
return.parent.children[].effectif == [25, 25]
return.parent.children[].effectif elements == 25
return.parent.children[].links contains no nulls and has only one value, of length 2
return.parent.children[].links elements != null
return.parent.children[].classes contains no nulls and has only one value, of length 2
return.parent.children[].classes elements has only one value
return.parent.children[].classes elements != null
return.parent.children[].done contains no nulls and has only one value, of length 2
return.parent.children[].done elements != null
return.parent.children[].parent contains no nulls and has only one value, of length 2
return.parent.children[].parent elements has only one value
return.parent.children[].parent elements != null
return.parent.children[].children contains only nulls and has only one value, of length 2
return.parent.children[].children elements == null
return.parent.children[].children.getClass().getName() == [null, null]
return.parent.children[].children.getClass().getName() elements == null
return.parent.children[].timeTable contains no nulls and has only one value, of length 2
return.parent.children[].timeTable elements != null
return.parent.timeTable has only one value
return.parent.timeTable != null
return.children == null
return.timeTable != null
return.timeTable.slots != null
return.timeTable.slots[] elements != null
return.timeTable.owner != null
return.timeTable.owner.getClass().getName() == DATA.Group.class
size(this.teacher.fields[]) == 3
size(this.place.timeTable.slots[]) one of { 12, 13, 15 }
size(return.classes.keys[]) == 6
size(return.classes.values[]) == 6
size(return.done.keys[]) == 6
size(return.done.values[]) == 6
size(return.parent.children[]) == 2
===========================================================================
DATA.Lesson.getTeacher():::ENTER
this.teacher has only one value
this.teacher.firstName has only one value
this.teacher.firstName.toString == "Apple"
this.teacher.lastName has only one value
this.teacher.lastName.toString == "Jack"
this.teacher.currentWeekWorkedHours has only one value
this.teacher.currentWeekWorkedHours.day == 1
this.teacher.currentWeekWorkedHours.hour == 1
this.teacher.fields has only one value
this.teacher.fields[] contains no nulls and has only one value, of length 3
this.teacher.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field]
this.teacher.students has only one value
this.teacher.timeTable has only one value
this.teacher.timeTable.slots has only one value
this.teacher.timeTable.owner has only one value
this.field.type has only one value
this.field.type.name has only one value
this.field.type.name.toString == "TD"
this.field.type.shortName has only one value
this.field.type.shortName.toString == "TD"
this.field.type.duration has only one value
this.field.name.toString one of { "Maths", "Physique" }
this.field.duration has only one value
this.field.duration.begin has only one value
this.field.duration.end has only one value
this.place has only one value
this.place.coords has only one value
this.place.type has only one value
this.place.type.name has only one value
this.place.type.name.toString == "TD"
this.place.type.shortName has only one value
this.place.type.shortName.toString == "TD"
this.place.type.duration has only one value
this.place.name has only one value
this.place.name.toString == "C9"
this.place.effectif == 25
this.place.timeTable has only one value
this.place.timeTable.slots has only one value
this.place.timeTable.owner has only one value
size(this.teacher.fields[]) == 3
size(this.place.timeTable.slots[]) one of { 12, 13, 15 }
===========================================================================
DATA.Lesson.getTeacher():::EXIT
this.teacher == orig(this.teacher)
this.teacher.firstName == orig(this.teacher.firstName)
this.teacher.firstName.toString == orig(this.teacher.firstName.toString)
this.teacher.lastName == orig(this.teacher.lastName)
this.teacher.lastName.toString == orig(this.teacher.lastName.toString)
this.teacher.maxWeekWorkedHours == orig(this.teacher.maxWeekWorkedHours)
this.teacher.maxWeekWorkedHours.day == orig(this.teacher.maxWeekWorkedHours.day)
this.teacher.maxWeekWorkedHours.hour == orig(this.teacher.maxWeekWorkedHours.hour)
this.teacher.maxWeekWorkedHours.min == orig(this.teacher.maxWeekWorkedHours.min)
this.teacher.currentWeekWorkedHours == orig(this.teacher.currentWeekWorkedHours)
this.teacher.currentWeekWorkedHours.day == orig(this.teacher.currentWeekWorkedHours.day)
this.teacher.currentWeekWorkedHours.hour == orig(this.teacher.currentWeekWorkedHours.hour)
this.teacher.currentWeekWorkedHours.min == orig(this.teacher.currentWeekWorkedHours.min)
this.teacher.fields == orig(this.teacher.fields)
this.teacher.fields[] == orig(this.teacher.fields[])
this.teacher.students == orig(this.teacher.students)
this.teacher.timeTable == orig(this.teacher.timeTable)
this.teacher.timeTable.slots == orig(this.teacher.timeTable.slots)
this.teacher.timeTable.slots[] == orig(this.teacher.timeTable.slots[])
this.teacher.timeTable.owner == orig(this.teacher.timeTable.owner)
this.teacher.timeTable.owner.getClass().getName() == orig(this.teacher.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
this.students == orig(this.students)
this.students.name == orig(this.students.name)
this.students.name.toString == orig(this.students.name.toString)
this.students.effectif == orig(this.students.effectif)
this.students.links == orig(this.students.links)
this.students.classes == orig(this.students.classes)
this.students.classes.keys == orig(this.students.classes.keys)
this.students.classes.keys[] == orig(this.students.classes.keys[])
this.students.classes.values == orig(this.students.classes.values)
this.students.classes.values[] == orig(this.students.classes.values[])
this.students.done == orig(this.students.done)
this.students.done.keys == orig(this.students.done.keys)
this.students.done.keys[] == orig(this.students.done.keys[])
this.students.done.values == orig(this.students.done.values)
this.students.done.values[] == orig(this.students.done.values[])
this.students.parent == orig(this.students.parent)
this.students.parent.name == orig(this.students.parent.name)
this.students.parent.name.toString == orig(this.students.parent.name.toString)
this.students.parent.effectif == orig(this.students.parent.effectif)
this.students.parent.links == orig(this.students.parent.links)
this.students.parent.classes == orig(this.students.parent.classes)
this.students.parent.done == orig(this.students.parent.done)
this.students.parent.parent == orig(this.students.parent.parent)
this.students.parent.children == orig(this.students.parent.children)
this.students.parent.children.getClass().getName() == orig(this.students.parent.children.getClass().getName())
this.students.parent.children[] == orig(this.students.parent.children[])
this.students.parent.children[].name == orig(this.students.parent.children[].name)
this.students.parent.children[].effectif == orig(this.students.parent.children[].effectif)
this.students.parent.children[].links == orig(this.students.parent.children[].links)
this.students.parent.children[].classes == orig(this.students.parent.children[].classes)
this.students.parent.children[].done == orig(this.students.parent.children[].done)
this.students.parent.children[].parent == orig(this.students.parent.children[].parent)
this.students.parent.children[].children == orig(this.students.parent.children[].children)
this.students.parent.children[].timeTable == orig(this.students.parent.children[].timeTable)
this.students.parent.timeTable == orig(this.students.parent.timeTable)
this.students.children == orig(this.students.children)
this.students.timeTable == orig(this.students.timeTable)
this.students.timeTable.slots == orig(this.students.timeTable.slots)
this.students.timeTable.slots[] == orig(this.students.timeTable.slots[])
this.students.timeTable.owner == orig(this.students.timeTable.owner)
this.students.timeTable.owner.getClass().getName() == orig(this.students.timeTable.owner.getClass().getName())
this.field == orig(this.field)
this.field.type == orig(this.field.type)
this.field.type.name == orig(this.field.type.name)
this.field.type.name.toString == orig(this.field.type.name.toString)
this.field.type.shortName == orig(this.field.type.shortName)
this.field.type.shortName.toString == orig(this.field.type.shortName.toString)
this.field.type.duration == orig(this.field.type.duration)
this.field.name == orig(this.field.name)
this.field.name.toString == orig(this.field.name.toString)
this.field.duration == orig(this.field.duration)
this.field.duration.begin == orig(this.field.duration.begin)
this.field.duration.end == orig(this.field.duration.end)
this.place == orig(this.place)
this.place.coords == orig(this.place.coords)
this.place.type == orig(this.place.type)
this.place.type.name == orig(this.place.type.name)
this.place.type.name.toString == orig(this.place.type.name.toString)
this.place.type.shortName == orig(this.place.type.shortName)
this.place.type.shortName.toString == orig(this.place.type.shortName.toString)
this.place.type.duration == orig(this.place.type.duration)
this.place.name == orig(this.place.name)
this.place.name.toString == orig(this.place.name.toString)
this.place.effectif == orig(this.place.effectif)
this.place.timeTable == orig(this.place.timeTable)
this.place.timeTable.slots == orig(this.place.timeTable.slots)
this.place.timeTable.slots[] == orig(this.place.timeTable.slots[])
this.place.timeTable.owner == orig(this.place.timeTable.owner)
this.place.timeTable.owner.getClass().getName() == orig(this.place.timeTable.owner.getClass().getName())
this.begin == orig(this.begin)
this.begin.day == orig(this.begin.day)
this.begin.hour == orig(this.begin.hour)
this.begin.min == orig(this.begin.min)
this.end == orig(this.end)
this.end.day == orig(this.end.day)
this.end.hour == orig(this.end.hour)
this.end.min == orig(this.end.min)
this.teacher has only one value
this.teacher.firstName has only one value
this.teacher.firstName.toString == "Apple"
this.teacher.lastName has only one value
this.teacher.lastName.toString == "Jack"
this.teacher.currentWeekWorkedHours has only one value
this.teacher.currentWeekWorkedHours.day == 1
this.teacher.currentWeekWorkedHours.hour == 1
this.teacher.fields has only one value
this.teacher.fields[] contains no nulls and has only one value, of length 3
this.teacher.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field]
this.teacher.students has only one value
this.teacher.timeTable has only one value
this.teacher.timeTable.slots has only one value
this.teacher.timeTable.owner has only one value
this.field.type has only one value
this.field.type.name has only one value
this.field.type.name.toString == "TD"
this.field.type.shortName has only one value
this.field.type.shortName.toString == "TD"
this.field.type.duration has only one value
this.field.name.toString one of { "Maths", "Physique" }
this.field.duration has only one value
this.field.duration.begin has only one value
this.field.duration.end has only one value
this.place has only one value
this.place.coords has only one value
this.place.type has only one value
this.place.type.name has only one value
this.place.type.name.toString == "TD"
this.place.type.shortName has only one value
this.place.type.shortName.toString == "TD"
this.place.type.duration has only one value
this.place.name has only one value
this.place.name.toString == "C9"
this.place.effectif == 25
this.place.timeTable has only one value
this.place.timeTable.slots has only one value
this.place.timeTable.owner has only one value
return has only one value
return != null
return.firstName has only one value
return.firstName != null
return.firstName.toString == "Apple"
return.lastName has only one value
return.lastName != null
return.lastName.toString == "Jack"
return.maxWeekWorkedHours has only one value
return.maxWeekWorkedHours != null
return.maxWeekWorkedHours.day == 1
return.maxWeekWorkedHours.hour == 1
return.maxWeekWorkedHours.min == 0
return.currentWeekWorkedHours has only one value
return.currentWeekWorkedHours != null
return.currentWeekWorkedHours.day == 1
return.currentWeekWorkedHours.hour == 1
return.currentWeekWorkedHours.min == 0
return.fields has only one value
return.fields != null
return.fields[] contains no nulls and has only one value, of length 3
return.fields[] elements != null
return.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field]
return.fields[].getClass().getName() elements == DATA.Field.class
return.students has only one value
return.students != null
return.timeTable has only one value
return.timeTable != null
return.timeTable.slots has only one value
return.timeTable.slots != null
return.timeTable.slots[] elements != null
return.timeTable.owner has only one value
return.timeTable.owner != null
return.timeTable.owner.getClass().getName() == DATA.Teacher.class
size(this.teacher.fields[]) == 3
size(this.place.timeTable.slots[]) one of { 12, 13, 15 }
size(return.fields[]) == 3
===========================================================================
DATA.Lesson.getType():::ENTER
this.teacher has only one value
this.teacher.firstName has only one value
this.teacher.firstName.toString == "Apple"
this.teacher.lastName has only one value
this.teacher.lastName.toString == "Jack"
this.teacher.currentWeekWorkedHours has only one value
this.teacher.currentWeekWorkedHours.day == 1
this.teacher.currentWeekWorkedHours.hour == 1
this.teacher.fields has only one value
this.teacher.fields[] contains no nulls and has only one value, of length 3
this.teacher.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field]
this.teacher.students has only one value
this.teacher.timeTable has only one value
this.teacher.timeTable.slots has only one value
this.teacher.timeTable.owner has only one value
this.field.type has only one value
this.field.type.name has only one value
this.field.type.name.toString == "TD"
this.field.type.shortName has only one value
this.field.type.shortName.toString == "TD"
this.field.type.duration has only one value
this.field.name.toString one of { "Maths", "Physique" }
this.field.duration has only one value
this.field.duration.begin has only one value
this.field.duration.end has only one value
this.place has only one value
this.place.coords has only one value
this.place.type has only one value
this.place.type.name has only one value
this.place.type.name.toString == "TD"
this.place.type.shortName has only one value
this.place.type.shortName.toString == "TD"
this.place.type.duration has only one value
this.place.name has only one value
this.place.name.toString == "C9"
this.place.effectif == 25
this.place.timeTable has only one value
this.place.timeTable.slots has only one value
this.place.timeTable.owner has only one value
size(this.teacher.fields[]) == 3
size(this.place.timeTable.slots[]) one of { 12, 13, 15 }
===========================================================================
DATA.Lesson.getType():::EXIT
this.teacher == orig(this.teacher)
this.teacher.firstName == orig(this.teacher.firstName)
this.teacher.firstName.toString == orig(this.teacher.firstName.toString)
this.teacher.lastName == orig(this.teacher.lastName)
this.teacher.lastName.toString == orig(this.teacher.lastName.toString)
this.teacher.maxWeekWorkedHours == orig(this.teacher.maxWeekWorkedHours)
this.teacher.maxWeekWorkedHours.day == orig(this.teacher.maxWeekWorkedHours.day)
this.teacher.maxWeekWorkedHours.hour == orig(this.teacher.maxWeekWorkedHours.hour)
this.teacher.maxWeekWorkedHours.min == orig(this.teacher.maxWeekWorkedHours.min)
this.teacher.currentWeekWorkedHours == orig(this.teacher.currentWeekWorkedHours)
this.teacher.currentWeekWorkedHours.day == orig(this.teacher.currentWeekWorkedHours.day)
this.teacher.currentWeekWorkedHours.hour == orig(this.teacher.currentWeekWorkedHours.hour)
this.teacher.currentWeekWorkedHours.min == orig(this.teacher.currentWeekWorkedHours.min)
this.teacher.fields == orig(this.teacher.fields)
this.teacher.fields[] == orig(this.teacher.fields[])
this.teacher.students == orig(this.teacher.students)
this.teacher.timeTable == orig(this.teacher.timeTable)
this.teacher.timeTable.slots == orig(this.teacher.timeTable.slots)
this.teacher.timeTable.slots[] == orig(this.teacher.timeTable.slots[])
this.teacher.timeTable.owner == orig(this.teacher.timeTable.owner)
this.teacher.timeTable.owner.getClass().getName() == orig(this.teacher.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
this.students == orig(this.students)
this.students.name == orig(this.students.name)
this.students.name.toString == orig(this.students.name.toString)
this.students.effectif == orig(this.students.effectif)
this.students.links == orig(this.students.links)
this.students.classes == orig(this.students.classes)
this.students.classes.keys == orig(this.students.classes.keys)
this.students.classes.keys[] == orig(this.students.classes.keys[])
this.students.classes.values == orig(this.students.classes.values)
this.students.classes.values[] == orig(this.students.classes.values[])
this.students.done == orig(this.students.done)
this.students.done.keys == orig(this.students.done.keys)
this.students.done.keys[] == orig(this.students.done.keys[])
this.students.done.values == orig(this.students.done.values)
this.students.done.values[] == orig(this.students.done.values[])
this.students.parent == orig(this.students.parent)
this.students.parent.name == orig(this.students.parent.name)
this.students.parent.name.toString == orig(this.students.parent.name.toString)
this.students.parent.effectif == orig(this.students.parent.effectif)
this.students.parent.links == orig(this.students.parent.links)
this.students.parent.classes == orig(this.students.parent.classes)
this.students.parent.done == orig(this.students.parent.done)
this.students.parent.parent == orig(this.students.parent.parent)
this.students.parent.children == orig(this.students.parent.children)
this.students.parent.children.getClass().getName() == orig(this.students.parent.children.getClass().getName())
this.students.parent.children[] == orig(this.students.parent.children[])
this.students.parent.children[].name == orig(this.students.parent.children[].name)
this.students.parent.children[].effectif == orig(this.students.parent.children[].effectif)
this.students.parent.children[].links == orig(this.students.parent.children[].links)
this.students.parent.children[].classes == orig(this.students.parent.children[].classes)
this.students.parent.children[].done == orig(this.students.parent.children[].done)
this.students.parent.children[].parent == orig(this.students.parent.children[].parent)
this.students.parent.children[].children == orig(this.students.parent.children[].children)
this.students.parent.children[].timeTable == orig(this.students.parent.children[].timeTable)
this.students.parent.timeTable == orig(this.students.parent.timeTable)
this.students.children == orig(this.students.children)
this.students.timeTable == orig(this.students.timeTable)
this.students.timeTable.slots == orig(this.students.timeTable.slots)
this.students.timeTable.slots[] == orig(this.students.timeTable.slots[])
this.students.timeTable.owner == orig(this.students.timeTable.owner)
this.students.timeTable.owner.getClass().getName() == orig(this.students.timeTable.owner.getClass().getName())
this.field == orig(this.field)
this.field.type == orig(this.field.type)
this.field.type.name == orig(this.field.type.name)
this.field.type.name.toString == orig(this.field.type.name.toString)
this.field.type.shortName == orig(this.field.type.shortName)
this.field.type.shortName.toString == orig(this.field.type.shortName.toString)
this.field.type.duration == orig(this.field.type.duration)
this.field.name == orig(this.field.name)
this.field.name.toString == orig(this.field.name.toString)
this.field.duration == orig(this.field.duration)
this.field.duration.begin == orig(this.field.duration.begin)
this.field.duration.end == orig(this.field.duration.end)
this.place == orig(this.place)
this.place.coords == orig(this.place.coords)
this.place.type == orig(this.place.type)
this.place.type.name == orig(this.place.type.name)
this.place.type.name.toString == orig(this.place.type.name.toString)
this.place.type.shortName == orig(this.place.type.shortName)
this.place.type.shortName.toString == orig(this.place.type.shortName.toString)
this.place.type.duration == orig(this.place.type.duration)
this.place.name == orig(this.place.name)
this.place.name.toString == orig(this.place.name.toString)
this.place.effectif == orig(this.place.effectif)
this.place.timeTable == orig(this.place.timeTable)
this.place.timeTable.slots == orig(this.place.timeTable.slots)
this.place.timeTable.slots[] == orig(this.place.timeTable.slots[])
this.place.timeTable.owner == orig(this.place.timeTable.owner)
this.place.timeTable.owner.getClass().getName() == orig(this.place.timeTable.owner.getClass().getName())
this.begin == orig(this.begin)
this.begin.day == orig(this.begin.day)
this.begin.hour == orig(this.begin.hour)
this.begin.min == orig(this.begin.min)
this.end == orig(this.end)
this.end.day == orig(this.end.day)
this.end.hour == orig(this.end.hour)
this.end.min == orig(this.end.min)
this.teacher has only one value
this.teacher.firstName has only one value
this.teacher.firstName.toString == "Apple"
this.teacher.lastName has only one value
this.teacher.lastName.toString == "Jack"
this.teacher.currentWeekWorkedHours has only one value
this.teacher.currentWeekWorkedHours.day == 1
this.teacher.currentWeekWorkedHours.hour == 1
this.teacher.fields has only one value
this.teacher.fields[] contains no nulls and has only one value, of length 3
this.teacher.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field]
this.teacher.students has only one value
this.teacher.timeTable has only one value
this.teacher.timeTable.slots has only one value
this.teacher.timeTable.owner has only one value
this.field.type has only one value
this.field.type.name has only one value
this.field.type.name.toString == "TD"
this.field.type.shortName has only one value
this.field.type.shortName.toString == "TD"
this.field.type.duration has only one value
this.field.name.toString one of { "Maths", "Physique" }
this.field.duration has only one value
this.field.duration.begin has only one value
this.field.duration.end has only one value
this.place has only one value
this.place.coords has only one value
this.place.type has only one value
this.place.type.name has only one value
this.place.type.name.toString == "TD"
this.place.type.shortName has only one value
this.place.type.shortName.toString == "TD"
this.place.type.duration has only one value
this.place.name has only one value
this.place.name.toString == "C9"
this.place.effectif == 25
this.place.timeTable has only one value
this.place.timeTable.slots has only one value
this.place.timeTable.owner has only one value
return has only one value
return != null
return.name has only one value
return.name != null
return.name.toString == "TD"
return.shortName has only one value
return.shortName != null
return.shortName.toString == "TD"
return.duration has only one value
return.duration != null
return.duration.begin has only one value
return.duration.begin != null
return.duration.end has only one value
return.duration.end != null
size(this.teacher.fields[]) == 3
size(this.place.timeTable.slots[]) one of { 12, 13, 15 }
===========================================================================
DATA.Link:::OBJECT
this.teach != null
this.teach.firstName != null
this.teach.lastName != null
this.teach.maxWeekWorkedHours has only one value
this.teach.maxWeekWorkedHours != null
this.teach.maxWeekWorkedHours.day == 1
this.teach.maxWeekWorkedHours.hour == 1
this.teach.maxWeekWorkedHours.min == 0
this.teach.currentWeekWorkedHours != null
this.teach.currentWeekWorkedHours.day one of { 0, 1 }
this.teach.currentWeekWorkedHours.min one of { 0, 30 }
this.teach.fields != null
this.teach.fields[] elements != null
this.teach.fields[].getClass().getName() elements == DATA.Field.class
this.teach.fields[].getClass().getName() one of { [DATA.Field], [DATA.Field, DATA.Field, DATA.Field] }
this.teach.students != null
this.teach.timeTable != null
this.teach.timeTable.slots != null
this.teach.timeTable.slots[] elements != null
this.teach.timeTable.owner != null
this.teach.timeTable.owner.getClass().getName() == DATA.Teacher.class
DATA.WeekTable.minDelta has only one value
DATA.WeekTable.minDelta != null
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
this.group != null
this.group.name != null
this.group.name.toString one of { "g2116", "g42", "g46" }
this.group.effectif == 25
this.group.links != null
this.group.classes has only one value
this.group.classes != null
this.group.classes.keys has only one value
this.group.classes.keys != null
this.group.classes.keys[] contains no nulls and has only one value, of length 6
this.group.classes.keys[] elements != null
this.group.classes.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.group.classes.keys[].getClass().getName() elements == DATA.Field.class
this.group.classes.values has only one value
this.group.classes.values != null
this.group.classes.values[] contains no nulls and has only one value, of length 6
this.group.classes.values[] elements != null
this.group.classes.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
this.group.classes.values[].getClass().getName() elements == DATA.Time.class
this.group.done != null
this.group.done.keys != null
this.group.done.keys[] contains no nulls and has only one value, of length 6
this.group.done.keys[] elements != null
this.group.done.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
this.group.done.keys[].getClass().getName() elements == DATA.Field.class
this.group.done.values != null
this.group.done.values[] elements != null
this.group.done.values[].getClass().getName() == [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean]
this.group.done.values[].getClass().getName() elements == java.lang.Boolean.class
this.group.parent has only one value
this.group.parent != null
this.group.parent.name has only one value
this.group.parent.name != null
this.group.parent.name.toString == "Lanip"
this.group.parent.effectif == 100
this.group.parent.links has only one value
this.group.parent.links != null
this.group.parent.classes has only one value
this.group.parent.classes != null
this.group.parent.done has only one value
this.group.parent.done != null
this.group.parent.parent == null
this.group.parent.children has only one value
this.group.parent.children != null
this.group.parent.children.getClass().getName() == DATA.Group[].class
this.group.parent.children[] contains no nulls and has only one value, of length 2
this.group.parent.children[] elements != null
this.group.parent.children[].getClass().getName() == [DATA.Group, DATA.Group]
this.group.parent.children[].getClass().getName() elements == DATA.Group.class
this.group.parent.children[].name contains no nulls and has only one value, of length 2
this.group.parent.children[].name elements != null
this.group.parent.children[].name.toString == [g46, g42]
this.group.parent.children[].name.toString elements one of { "g42", "g46" }
this.group.parent.children[].effectif == [25, 25]
this.group.parent.children[].effectif elements == 25
this.group.parent.children[].links contains no nulls and has only one value, of length 2
this.group.parent.children[].links elements != null
this.group.parent.children[].classes contains no nulls and has only one value, of length 2
this.group.parent.children[].classes elements has only one value
this.group.parent.children[].classes elements != null
this.group.parent.children[].done contains no nulls and has only one value, of length 2
this.group.parent.children[].done elements != null
this.group.parent.children[].parent contains no nulls and has only one value, of length 2
this.group.parent.children[].parent elements has only one value
this.group.parent.children[].parent elements != null
this.group.parent.children[].children contains only nulls and has only one value, of length 2
this.group.parent.children[].children elements == null
this.group.parent.children[].children.getClass().getName() == [null, null]
this.group.parent.children[].children.getClass().getName() elements == null
this.group.parent.children[].timeTable contains no nulls and has only one value, of length 2
this.group.parent.children[].timeTable elements != null
this.group.parent.timeTable has only one value
this.group.parent.timeTable != null
this.group.children == null
this.group.timeTable != null
this.group.timeTable.slots != null
this.group.timeTable.slots[] elements != null
this.group.timeTable.owner != null
this.group.timeTable.owner.getClass().getName() == DATA.Group.class
this.field != null
this.field.type != null
this.field.type.name != null
this.field.type.shortName != null
this.field.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
this.field.type.duration != null
this.field.name != null
this.field.duration != null
this.field.duration.begin != null
this.field.duration.end != null
size(this.teach.fields[]) one of { 1, 3 }
size(this.group.classes.keys[]) == 6
size(this.group.classes.values[]) == 6
size(this.group.done.keys[]) == 6
size(this.group.done.values[]) == 6
size(this.group.parent.children[]) == 2
===========================================================================
DATA.Link.Link(DATA.Teacher, DATA.Group, DATA.Field):::ENTER
arg0 != null
arg0.firstName != null
arg0.lastName != null
arg0.maxWeekWorkedHours has only one value
arg0.maxWeekWorkedHours != null
arg0.maxWeekWorkedHours.day == 1
arg0.maxWeekWorkedHours.hour == 1
arg0.maxWeekWorkedHours.min == 0
arg0.currentWeekWorkedHours != null
arg0.currentWeekWorkedHours.day == 0
arg0.currentWeekWorkedHours.hour >= 0
arg0.currentWeekWorkedHours.min one of { 0, 30 }
arg0.fields != null
arg0.fields[] elements != null
arg0.fields[].getClass().getName() elements == DATA.Field.class
arg0.fields[].getClass().getName() one of { [DATA.Field], [DATA.Field, DATA.Field, DATA.Field] }
arg0.students != null
arg0.timeTable != null
arg0.timeTable.slots != null
arg0.timeTable.slots[] elements != null
arg0.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
arg0.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg0.timeTable.owner != null
arg0.timeTable.owner.getClass().getName() == DATA.Teacher.class
DATA.WeekTable.minDelta has only one value
DATA.WeekTable.minDelta != null
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
arg1 != null
arg1.name != null
arg1.name.toString one of { "g2116", "g42", "g46" }
arg1.effectif == 25
arg1.links != null
arg1.classes has only one value
arg1.classes != null
arg1.classes.keys has only one value
arg1.classes.keys != null
arg1.classes.keys[] contains no nulls and has only one value, of length 6
arg1.classes.keys[] elements != null
arg1.classes.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg1.classes.keys[].getClass().getName() elements == DATA.Field.class
arg1.classes.values has only one value
arg1.classes.values != null
arg1.classes.values[] contains no nulls and has only one value, of length 6
arg1.classes.values[] elements != null
arg1.classes.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
arg1.classes.values[].getClass().getName() elements == DATA.Time.class
arg1.done != null
arg1.done.keys != null
arg1.done.keys[] contains no nulls and has only one value, of length 6
arg1.done.keys[] elements != null
arg1.done.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg1.done.keys[].getClass().getName() elements == DATA.Field.class
arg1.done.values != null
arg1.done.values[] contains no nulls and has only one value, of length 6
arg1.done.values[] elements has only one value
arg1.done.values[] elements != null
arg1.done.values[].getClass().getName() == [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean]
arg1.done.values[].getClass().getName() elements == java.lang.Boolean.class
arg1.parent has only one value
arg1.parent != null
arg1.parent.name has only one value
arg1.parent.name != null
arg1.parent.name.toString == "Lanip"
arg1.parent.effectif == 100
arg1.parent.links has only one value
arg1.parent.links != null
arg1.parent.classes has only one value
arg1.parent.classes != null
arg1.parent.done has only one value
arg1.parent.done != null
arg1.parent.parent == null
arg1.parent.children has only one value
arg1.parent.children != null
arg1.parent.children.getClass().getName() == DATA.Group[].class
arg1.parent.children[] contains no nulls and has only one value, of length 2
arg1.parent.children[] elements != null
arg1.parent.children[].getClass().getName() == [DATA.Group, DATA.Group]
arg1.parent.children[].getClass().getName() elements == DATA.Group.class
arg1.parent.children[].name contains no nulls and has only one value, of length 2
arg1.parent.children[].name elements != null
arg1.parent.children[].name.toString == [g46, g42]
arg1.parent.children[].name.toString elements one of { "g42", "g46" }
arg1.parent.children[].effectif == [25, 25]
arg1.parent.children[].effectif elements == 25
arg1.parent.children[].links contains no nulls and has only one value, of length 2
arg1.parent.children[].links elements != null
arg1.parent.children[].classes contains no nulls and has only one value, of length 2
arg1.parent.children[].classes elements has only one value
arg1.parent.children[].classes elements != null
arg1.parent.children[].done contains no nulls and has only one value, of length 2
arg1.parent.children[].done elements != null
arg1.parent.children[].parent contains no nulls and has only one value, of length 2
arg1.parent.children[].parent elements has only one value
arg1.parent.children[].parent elements != null
arg1.parent.children[].children contains only nulls and has only one value, of length 2
arg1.parent.children[].children elements == null
arg1.parent.children[].children.getClass().getName() == [null, null]
arg1.parent.children[].children.getClass().getName() elements == null
arg1.parent.children[].timeTable contains no nulls and has only one value, of length 2
arg1.parent.children[].timeTable elements != null
arg1.parent.timeTable has only one value
arg1.parent.timeTable != null
arg1.children == null
arg1.timeTable != null
arg1.timeTable.slots != null
arg1.timeTable.slots[] elements != null
arg1.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
arg1.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg1.timeTable.owner != null
arg1.timeTable.owner.getClass().getName() == DATA.Group.class
arg2 != null
arg2.type != null
arg2.type.name != null
arg2.type.shortName != null
arg2.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
arg2.type.duration != null
arg2.name != null
arg2.duration != null
arg2.duration.begin != null
arg2.duration.end != null
size(arg0.fields[]) one of { 1, 3 }
size(arg0.timeTable.slots[]) == 9
size(arg1.classes.keys[]) == 6
size(arg1.classes.values[]) == 6
size(arg1.done.keys[]) == 6
size(arg1.done.values[]) == 6
size(arg1.parent.children[]) == 2
size(arg1.timeTable.slots[]) == 9
===========================================================================
DATA.Link.Link(DATA.Teacher, DATA.Group, DATA.Field):::EXIT
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
arg0.firstName == orig(arg0.firstName)
arg0.firstName.toString == orig(arg0.firstName.toString)
arg0.lastName == orig(arg0.lastName)
arg0.lastName.toString == orig(arg0.lastName.toString)
arg0.maxWeekWorkedHours == orig(arg0.maxWeekWorkedHours)
arg0.maxWeekWorkedHours.day == orig(arg0.maxWeekWorkedHours.day)
arg0.maxWeekWorkedHours.hour == orig(arg0.maxWeekWorkedHours.hour)
arg0.maxWeekWorkedHours.min == orig(arg0.maxWeekWorkedHours.min)
arg0.currentWeekWorkedHours == orig(arg0.currentWeekWorkedHours)
arg0.currentWeekWorkedHours.day == orig(arg0.currentWeekWorkedHours.day)
arg0.currentWeekWorkedHours.hour == orig(arg0.currentWeekWorkedHours.hour)
arg0.currentWeekWorkedHours.min == orig(arg0.currentWeekWorkedHours.min)
arg0.fields == orig(arg0.fields)
arg0.fields[] == orig(arg0.fields[])
arg0.students == orig(arg0.students)
arg0.timeTable == orig(arg0.timeTable)
arg0.timeTable.slots == orig(arg0.timeTable.slots)
arg0.timeTable.slots[] == orig(arg0.timeTable.slots[])
arg0.timeTable.owner == orig(arg0.timeTable.owner)
arg0.timeTable.owner.getClass().getName() == orig(arg0.timeTable.owner.getClass().getName())
arg1.name == orig(arg1.name)
arg1.name.toString == orig(arg1.name.toString)
arg1.effectif == orig(arg1.effectif)
arg1.links == orig(arg1.links)
arg1.classes == orig(arg1.classes)
arg1.classes.keys == orig(arg1.classes.keys)
arg1.classes.keys[] == orig(arg1.classes.keys[])
arg1.classes.values == orig(arg1.classes.values)
arg1.classes.values[] == orig(arg1.classes.values[])
arg1.done == orig(arg1.done)
arg1.done.keys == orig(arg1.done.keys)
arg1.done.keys[] == orig(arg1.done.keys[])
arg1.done.values == orig(arg1.done.values)
arg1.done.values[] == orig(arg1.done.values[])
arg1.parent == orig(arg1.parent)
arg1.parent.name == orig(arg1.parent.name)
arg1.parent.name.toString == orig(arg1.parent.name.toString)
arg1.parent.effectif == orig(arg1.parent.effectif)
arg1.parent.links == orig(arg1.parent.links)
arg1.parent.classes == orig(arg1.parent.classes)
arg1.parent.done == orig(arg1.parent.done)
arg1.parent.parent == orig(arg1.parent.parent)
arg1.parent.children == orig(arg1.parent.children)
arg1.parent.children.getClass().getName() == orig(arg1.parent.children.getClass().getName())
arg1.parent.children[] == orig(arg1.parent.children[])
arg1.parent.children[].name == orig(arg1.parent.children[].name)
arg1.parent.children[].effectif == orig(arg1.parent.children[].effectif)
arg1.parent.children[].links == orig(arg1.parent.children[].links)
arg1.parent.children[].classes == orig(arg1.parent.children[].classes)
arg1.parent.children[].done == orig(arg1.parent.children[].done)
arg1.parent.children[].parent == orig(arg1.parent.children[].parent)
arg1.parent.children[].children == orig(arg1.parent.children[].children)
arg1.parent.children[].timeTable == orig(arg1.parent.children[].timeTable)
arg1.parent.timeTable == orig(arg1.parent.timeTable)
arg1.children == orig(arg1.children)
arg1.timeTable == orig(arg1.timeTable)
arg1.timeTable.slots == orig(arg1.timeTable.slots)
arg1.timeTable.slots[] == orig(arg1.timeTable.slots[])
arg1.timeTable.owner == orig(arg1.timeTable.owner)
arg1.timeTable.owner.getClass().getName() == orig(arg1.timeTable.owner.getClass().getName())
arg2.type == orig(arg2.type)
arg2.type.name == orig(arg2.type.name)
arg2.type.name.toString == orig(arg2.type.name.toString)
arg2.type.shortName == orig(arg2.type.shortName)
arg2.type.shortName.toString == orig(arg2.type.shortName.toString)
arg2.type.duration == orig(arg2.type.duration)
arg2.name == orig(arg2.name)
arg2.name.toString == orig(arg2.name.toString)
arg2.duration == orig(arg2.duration)
arg2.duration.begin == orig(arg2.duration.begin)
arg2.duration.end == orig(arg2.duration.end)
this.teach.currentWeekWorkedHours.day == 0
this.teach.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.teach.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
this.group.done.values[] contains no nulls and has only one value, of length 6
this.group.done.values[] elements has only one value
this.group.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.group.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg0.firstName != null
arg0.lastName != null
arg0.maxWeekWorkedHours has only one value
arg0.maxWeekWorkedHours != null
arg0.maxWeekWorkedHours.day == 1
arg0.maxWeekWorkedHours.hour == 1
arg0.maxWeekWorkedHours.min == 0
arg0.currentWeekWorkedHours != null
arg0.currentWeekWorkedHours.day == 0
arg0.currentWeekWorkedHours.hour >= 0
arg0.currentWeekWorkedHours.min one of { 0, 30 }
arg0.fields != null
arg0.fields[] elements != null
arg0.fields[].getClass().getName() elements == DATA.Field.class
arg0.fields[].getClass().getName() one of { [DATA.Field], [DATA.Field, DATA.Field, DATA.Field] }
arg0.students != null
arg0.timeTable != null
arg0.timeTable.slots != null
arg0.timeTable.slots[] elements != null
arg0.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
arg0.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg0.timeTable.owner != null
arg0.timeTable.owner.getClass().getName() == DATA.Teacher.class
arg1.name != null
arg1.name.toString one of { "g2116", "g42", "g46" }
arg1.effectif == 25
arg1.links != null
arg1.classes has only one value
arg1.classes != null
arg1.classes.keys has only one value
arg1.classes.keys != null
arg1.classes.keys[] contains no nulls and has only one value, of length 6
arg1.classes.keys[] elements != null
arg1.classes.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg1.classes.keys[].getClass().getName() elements == DATA.Field.class
arg1.classes.values has only one value
arg1.classes.values != null
arg1.classes.values[] contains no nulls and has only one value, of length 6
arg1.classes.values[] elements != null
arg1.classes.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
arg1.classes.values[].getClass().getName() elements == DATA.Time.class
arg1.done != null
arg1.done.keys != null
arg1.done.keys[] contains no nulls and has only one value, of length 6
arg1.done.keys[] elements != null
arg1.done.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg1.done.keys[].getClass().getName() elements == DATA.Field.class
arg1.done.values != null
arg1.done.values[] contains no nulls and has only one value, of length 6
arg1.done.values[] elements has only one value
arg1.done.values[] elements != null
arg1.done.values[].getClass().getName() == [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean]
arg1.done.values[].getClass().getName() elements == java.lang.Boolean.class
arg1.parent has only one value
arg1.parent != null
arg1.parent.name has only one value
arg1.parent.name != null
arg1.parent.name.toString == "Lanip"
arg1.parent.effectif == 100
arg1.parent.links has only one value
arg1.parent.links != null
arg1.parent.classes has only one value
arg1.parent.classes != null
arg1.parent.done has only one value
arg1.parent.done != null
arg1.parent.parent == null
arg1.parent.children has only one value
arg1.parent.children != null
arg1.parent.children.getClass().getName() == DATA.Group[].class
arg1.parent.children[] contains no nulls and has only one value, of length 2
arg1.parent.children[] elements != null
arg1.parent.children[].getClass().getName() == [DATA.Group, DATA.Group]
arg1.parent.children[].getClass().getName() elements == DATA.Group.class
arg1.parent.children[].name contains no nulls and has only one value, of length 2
arg1.parent.children[].name elements != null
arg1.parent.children[].name.toString == [g46, g42]
arg1.parent.children[].name.toString elements one of { "g42", "g46" }
arg1.parent.children[].effectif == [25, 25]
arg1.parent.children[].effectif elements == 25
arg1.parent.children[].links contains no nulls and has only one value, of length 2
arg1.parent.children[].links elements != null
arg1.parent.children[].classes contains no nulls and has only one value, of length 2
arg1.parent.children[].classes elements has only one value
arg1.parent.children[].classes elements != null
arg1.parent.children[].done contains no nulls and has only one value, of length 2
arg1.parent.children[].done elements != null
arg1.parent.children[].parent contains no nulls and has only one value, of length 2
arg1.parent.children[].parent elements has only one value
arg1.parent.children[].parent elements != null
arg1.parent.children[].children contains only nulls and has only one value, of length 2
arg1.parent.children[].children elements == null
arg1.parent.children[].children.getClass().getName() == [null, null]
arg1.parent.children[].children.getClass().getName() elements == null
arg1.parent.children[].timeTable contains no nulls and has only one value, of length 2
arg1.parent.children[].timeTable elements != null
arg1.parent.timeTable has only one value
arg1.parent.timeTable != null
arg1.children == null
arg1.timeTable != null
arg1.timeTable.slots != null
arg1.timeTable.slots[] elements != null
arg1.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
arg1.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg1.timeTable.owner != null
arg1.timeTable.owner.getClass().getName() == DATA.Group.class
arg2.type != null
arg2.type.name != null
arg2.type.shortName != null
arg2.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
arg2.type.duration != null
arg2.name != null
arg2.duration != null
arg2.duration.begin != null
arg2.duration.end != null
size(this.teach.timeTable.slots[]) == 9
size(this.group.timeTable.slots[]) == 9
size(arg0.fields[]) one of { 1, 3 }
size(arg0.timeTable.slots[]) == 9
size(arg1.classes.keys[]) == 6
size(arg1.classes.values[]) == 6
size(arg1.done.keys[]) == 6
size(arg1.done.values[]) == 6
size(arg1.parent.children[]) == 2
size(arg1.timeTable.slots[]) == 9
===========================================================================
DATA.Link.getField():::ENTER
===========================================================================
DATA.Link.getField():::EXIT
this.teach == orig(this.teach)
this.teach.firstName == orig(this.teach.firstName)
this.teach.firstName.toString == orig(this.teach.firstName.toString)
this.teach.lastName == orig(this.teach.lastName)
this.teach.lastName.toString == orig(this.teach.lastName.toString)
this.teach.maxWeekWorkedHours == orig(this.teach.maxWeekWorkedHours)
this.teach.maxWeekWorkedHours.day == orig(this.teach.maxWeekWorkedHours.day)
this.teach.maxWeekWorkedHours.hour == orig(this.teach.maxWeekWorkedHours.hour)
this.teach.maxWeekWorkedHours.min == orig(this.teach.maxWeekWorkedHours.min)
this.teach.currentWeekWorkedHours == orig(this.teach.currentWeekWorkedHours)
this.teach.currentWeekWorkedHours.day == orig(this.teach.currentWeekWorkedHours.day)
this.teach.currentWeekWorkedHours.hour == orig(this.teach.currentWeekWorkedHours.hour)
this.teach.currentWeekWorkedHours.min == orig(this.teach.currentWeekWorkedHours.min)
this.teach.fields == orig(this.teach.fields)
this.teach.fields[] == orig(this.teach.fields[])
this.teach.students == orig(this.teach.students)
this.teach.timeTable == orig(this.teach.timeTable)
this.teach.timeTable.slots == orig(this.teach.timeTable.slots)
this.teach.timeTable.slots[] == orig(this.teach.timeTable.slots[])
this.teach.timeTable.owner == orig(this.teach.timeTable.owner)
this.teach.timeTable.owner.getClass().getName() == orig(this.teach.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
this.group == orig(this.group)
this.group.name == orig(this.group.name)
this.group.name.toString == orig(this.group.name.toString)
this.group.effectif == orig(this.group.effectif)
this.group.links == orig(this.group.links)
this.group.classes == orig(this.group.classes)
this.group.classes.keys == orig(this.group.classes.keys)
this.group.classes.keys[] == orig(this.group.classes.keys[])
this.group.classes.values == orig(this.group.classes.values)
this.group.classes.values[] == orig(this.group.classes.values[])
this.group.done == orig(this.group.done)
this.group.done.keys == orig(this.group.done.keys)
this.group.done.keys[] == orig(this.group.done.keys[])
this.group.done.values == orig(this.group.done.values)
this.group.done.values[] == orig(this.group.done.values[])
this.group.parent == orig(this.group.parent)
this.group.parent.name == orig(this.group.parent.name)
this.group.parent.name.toString == orig(this.group.parent.name.toString)
this.group.parent.effectif == orig(this.group.parent.effectif)
this.group.parent.links == orig(this.group.parent.links)
this.group.parent.classes == orig(this.group.parent.classes)
this.group.parent.done == orig(this.group.parent.done)
this.group.parent.parent == orig(this.group.parent.parent)
this.group.parent.children == orig(this.group.parent.children)
this.group.parent.children.getClass().getName() == orig(this.group.parent.children.getClass().getName())
this.group.parent.children[] == orig(this.group.parent.children[])
this.group.parent.children[].name == orig(this.group.parent.children[].name)
this.group.parent.children[].effectif == orig(this.group.parent.children[].effectif)
this.group.parent.children[].links == orig(this.group.parent.children[].links)
this.group.parent.children[].classes == orig(this.group.parent.children[].classes)
this.group.parent.children[].done == orig(this.group.parent.children[].done)
this.group.parent.children[].parent == orig(this.group.parent.children[].parent)
this.group.parent.children[].children == orig(this.group.parent.children[].children)
this.group.parent.children[].timeTable == orig(this.group.parent.children[].timeTable)
this.group.parent.timeTable == orig(this.group.parent.timeTable)
this.group.children == orig(this.group.children)
this.group.timeTable == orig(this.group.timeTable)
this.group.timeTable.slots == orig(this.group.timeTable.slots)
this.group.timeTable.slots[] == orig(this.group.timeTable.slots[])
this.group.timeTable.owner == orig(this.group.timeTable.owner)
this.group.timeTable.owner.getClass().getName() == orig(this.group.timeTable.owner.getClass().getName())
this.field == orig(this.field)
this.field.type == orig(this.field.type)
this.field.type.name == orig(this.field.type.name)
this.field.type.name.toString == orig(this.field.type.name.toString)
this.field.type.shortName == orig(this.field.type.shortName)
this.field.type.shortName.toString == orig(this.field.type.shortName.toString)
this.field.type.duration == orig(this.field.type.duration)
this.field.name == orig(this.field.name)
this.field.name.toString == orig(this.field.name.toString)
this.field.duration == orig(this.field.duration)
this.field.duration.begin == orig(this.field.duration.begin)
this.field.duration.end == orig(this.field.duration.end)
return != null
return.type != null
return.type.name != null
return.type.shortName != null
return.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
return.type.duration != null
return.name != null
return.duration != null
return.duration.begin != null
return.duration.end != null
===========================================================================
DATA.Link.getGroup():::ENTER
===========================================================================
DATA.Link.getGroup():::EXIT
this.teach == orig(this.teach)
this.teach.firstName == orig(this.teach.firstName)
this.teach.firstName.toString == orig(this.teach.firstName.toString)
this.teach.lastName == orig(this.teach.lastName)
this.teach.lastName.toString == orig(this.teach.lastName.toString)
this.teach.maxWeekWorkedHours == orig(this.teach.maxWeekWorkedHours)
this.teach.maxWeekWorkedHours.day == orig(this.teach.maxWeekWorkedHours.day)
this.teach.maxWeekWorkedHours.hour == orig(this.teach.maxWeekWorkedHours.hour)
this.teach.maxWeekWorkedHours.min == orig(this.teach.maxWeekWorkedHours.min)
this.teach.currentWeekWorkedHours == orig(this.teach.currentWeekWorkedHours)
this.teach.currentWeekWorkedHours.day == orig(this.teach.currentWeekWorkedHours.day)
this.teach.currentWeekWorkedHours.hour == orig(this.teach.currentWeekWorkedHours.hour)
this.teach.currentWeekWorkedHours.min == orig(this.teach.currentWeekWorkedHours.min)
this.teach.fields == orig(this.teach.fields)
this.teach.fields[] == orig(this.teach.fields[])
this.teach.students == orig(this.teach.students)
this.teach.timeTable == orig(this.teach.timeTable)
this.teach.timeTable.slots == orig(this.teach.timeTable.slots)
this.teach.timeTable.slots[] == orig(this.teach.timeTable.slots[])
this.teach.timeTable.owner == orig(this.teach.timeTable.owner)
this.teach.timeTable.owner.getClass().getName() == orig(this.teach.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
this.group == orig(this.group)
this.group.name == orig(this.group.name)
this.group.name.toString == orig(this.group.name.toString)
this.group.effectif == orig(this.group.effectif)
this.group.links == orig(this.group.links)
this.group.classes == orig(this.group.classes)
this.group.classes.keys == orig(this.group.classes.keys)
this.group.classes.keys[] == orig(this.group.classes.keys[])
this.group.classes.values == orig(this.group.classes.values)
this.group.classes.values[] == orig(this.group.classes.values[])
this.group.done == orig(this.group.done)
this.group.done.keys == orig(this.group.done.keys)
this.group.done.keys[] == orig(this.group.done.keys[])
this.group.done.values == orig(this.group.done.values)
this.group.done.values[] == orig(this.group.done.values[])
this.group.parent == orig(this.group.parent)
this.group.parent.name == orig(this.group.parent.name)
this.group.parent.name.toString == orig(this.group.parent.name.toString)
this.group.parent.effectif == orig(this.group.parent.effectif)
this.group.parent.links == orig(this.group.parent.links)
this.group.parent.classes == orig(this.group.parent.classes)
this.group.parent.done == orig(this.group.parent.done)
this.group.parent.parent == orig(this.group.parent.parent)
this.group.parent.children == orig(this.group.parent.children)
this.group.parent.children.getClass().getName() == orig(this.group.parent.children.getClass().getName())
this.group.parent.children[] == orig(this.group.parent.children[])
this.group.parent.children[].name == orig(this.group.parent.children[].name)
this.group.parent.children[].effectif == orig(this.group.parent.children[].effectif)
this.group.parent.children[].links == orig(this.group.parent.children[].links)
this.group.parent.children[].classes == orig(this.group.parent.children[].classes)
this.group.parent.children[].done == orig(this.group.parent.children[].done)
this.group.parent.children[].parent == orig(this.group.parent.children[].parent)
this.group.parent.children[].children == orig(this.group.parent.children[].children)
this.group.parent.children[].timeTable == orig(this.group.parent.children[].timeTable)
this.group.parent.timeTable == orig(this.group.parent.timeTable)
this.group.children == orig(this.group.children)
this.group.timeTable == orig(this.group.timeTable)
this.group.timeTable.slots == orig(this.group.timeTable.slots)
this.group.timeTable.slots[] == orig(this.group.timeTable.slots[])
this.group.timeTable.owner == orig(this.group.timeTable.owner)
this.group.timeTable.owner.getClass().getName() == orig(this.group.timeTable.owner.getClass().getName())
this.field == orig(this.field)
this.field.type == orig(this.field.type)
this.field.type.name == orig(this.field.type.name)
this.field.type.name.toString == orig(this.field.type.name.toString)
this.field.type.shortName == orig(this.field.type.shortName)
this.field.type.shortName.toString == orig(this.field.type.shortName.toString)
this.field.type.duration == orig(this.field.type.duration)
this.field.name == orig(this.field.name)
this.field.name.toString == orig(this.field.name.toString)
this.field.duration == orig(this.field.duration)
this.field.duration.begin == orig(this.field.duration.begin)
this.field.duration.end == orig(this.field.duration.end)
return != null
return.name != null
return.name.toString one of { "g2116", "g42", "g46" }
return.effectif == 25
return.links != null
return.classes has only one value
return.classes != null
return.classes.keys has only one value
return.classes.keys != null
return.classes.keys[] contains no nulls and has only one value, of length 6
return.classes.keys[] elements != null
return.classes.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
return.classes.keys[].getClass().getName() elements == DATA.Field.class
return.classes.values has only one value
return.classes.values != null
return.classes.values[] contains no nulls and has only one value, of length 6
return.classes.values[] elements != null
return.classes.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
return.classes.values[].getClass().getName() elements == DATA.Time.class
return.done != null
return.done.keys != null
return.done.keys[] contains no nulls and has only one value, of length 6
return.done.keys[] elements != null
return.done.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
return.done.keys[].getClass().getName() elements == DATA.Field.class
return.done.values != null
return.done.values[] elements != null
return.done.values[].getClass().getName() == [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean]
return.done.values[].getClass().getName() elements == java.lang.Boolean.class
return.parent has only one value
return.parent != null
return.parent.name has only one value
return.parent.name != null
return.parent.name.toString == "Lanip"
return.parent.effectif == 100
return.parent.links has only one value
return.parent.links != null
return.parent.classes has only one value
return.parent.classes != null
return.parent.done has only one value
return.parent.done != null
return.parent.parent == null
return.parent.children has only one value
return.parent.children != null
return.parent.children.getClass().getName() == DATA.Group[].class
return.parent.children[] contains no nulls and has only one value, of length 2
return.parent.children[] elements != null
return.parent.children[].getClass().getName() == [DATA.Group, DATA.Group]
return.parent.children[].getClass().getName() elements == DATA.Group.class
return.parent.children[].name contains no nulls and has only one value, of length 2
return.parent.children[].name elements != null
return.parent.children[].name.toString == [g46, g42]
return.parent.children[].name.toString elements one of { "g42", "g46" }
return.parent.children[].effectif == [25, 25]
return.parent.children[].effectif elements == 25
return.parent.children[].links contains no nulls and has only one value, of length 2
return.parent.children[].links elements != null
return.parent.children[].classes contains no nulls and has only one value, of length 2
return.parent.children[].classes elements has only one value
return.parent.children[].classes elements != null
return.parent.children[].done contains no nulls and has only one value, of length 2
return.parent.children[].done elements != null
return.parent.children[].parent contains no nulls and has only one value, of length 2
return.parent.children[].parent elements has only one value
return.parent.children[].parent elements != null
return.parent.children[].children contains only nulls and has only one value, of length 2
return.parent.children[].children elements == null
return.parent.children[].children.getClass().getName() == [null, null]
return.parent.children[].children.getClass().getName() elements == null
return.parent.children[].timeTable contains no nulls and has only one value, of length 2
return.parent.children[].timeTable elements != null
return.parent.timeTable has only one value
return.parent.timeTable != null
return.children == null
return.timeTable != null
return.timeTable.slots != null
return.timeTable.slots[] elements != null
return.timeTable.owner != null
return.timeTable.owner.getClass().getName() == DATA.Group.class
size(return.classes.keys[]) == 6
size(return.classes.values[]) == 6
size(return.done.keys[]) == 6
size(return.done.values[]) == 6
size(return.parent.children[]) == 2
===========================================================================
DATA.Link.getTeacher():::ENTER
===========================================================================
DATA.Link.getTeacher():::EXIT
this.teach == orig(this.teach)
this.teach.firstName == orig(this.teach.firstName)
this.teach.firstName.toString == orig(this.teach.firstName.toString)
this.teach.lastName == orig(this.teach.lastName)
this.teach.lastName.toString == orig(this.teach.lastName.toString)
this.teach.maxWeekWorkedHours == orig(this.teach.maxWeekWorkedHours)
this.teach.maxWeekWorkedHours.day == orig(this.teach.maxWeekWorkedHours.day)
this.teach.maxWeekWorkedHours.hour == orig(this.teach.maxWeekWorkedHours.hour)
this.teach.maxWeekWorkedHours.min == orig(this.teach.maxWeekWorkedHours.min)
this.teach.currentWeekWorkedHours == orig(this.teach.currentWeekWorkedHours)
this.teach.currentWeekWorkedHours.day == orig(this.teach.currentWeekWorkedHours.day)
this.teach.currentWeekWorkedHours.hour == orig(this.teach.currentWeekWorkedHours.hour)
this.teach.currentWeekWorkedHours.min == orig(this.teach.currentWeekWorkedHours.min)
this.teach.fields == orig(this.teach.fields)
this.teach.fields[] == orig(this.teach.fields[])
this.teach.students == orig(this.teach.students)
this.teach.timeTable == orig(this.teach.timeTable)
this.teach.timeTable.slots == orig(this.teach.timeTable.slots)
this.teach.timeTable.slots[] == orig(this.teach.timeTable.slots[])
this.teach.timeTable.owner == orig(this.teach.timeTable.owner)
this.teach.timeTable.owner.getClass().getName() == orig(this.teach.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
this.group == orig(this.group)
this.group.name == orig(this.group.name)
this.group.name.toString == orig(this.group.name.toString)
this.group.effectif == orig(this.group.effectif)
this.group.links == orig(this.group.links)
this.group.classes == orig(this.group.classes)
this.group.classes.keys == orig(this.group.classes.keys)
this.group.classes.keys[] == orig(this.group.classes.keys[])
this.group.classes.values == orig(this.group.classes.values)
this.group.classes.values[] == orig(this.group.classes.values[])
this.group.done == orig(this.group.done)
this.group.done.keys == orig(this.group.done.keys)
this.group.done.keys[] == orig(this.group.done.keys[])
this.group.done.values == orig(this.group.done.values)
this.group.done.values[] == orig(this.group.done.values[])
this.group.parent == orig(this.group.parent)
this.group.parent.name == orig(this.group.parent.name)
this.group.parent.name.toString == orig(this.group.parent.name.toString)
this.group.parent.effectif == orig(this.group.parent.effectif)
this.group.parent.links == orig(this.group.parent.links)
this.group.parent.classes == orig(this.group.parent.classes)
this.group.parent.done == orig(this.group.parent.done)
this.group.parent.parent == orig(this.group.parent.parent)
this.group.parent.children == orig(this.group.parent.children)
this.group.parent.children.getClass().getName() == orig(this.group.parent.children.getClass().getName())
this.group.parent.children[] == orig(this.group.parent.children[])
this.group.parent.children[].name == orig(this.group.parent.children[].name)
this.group.parent.children[].effectif == orig(this.group.parent.children[].effectif)
this.group.parent.children[].links == orig(this.group.parent.children[].links)
this.group.parent.children[].classes == orig(this.group.parent.children[].classes)
this.group.parent.children[].done == orig(this.group.parent.children[].done)
this.group.parent.children[].parent == orig(this.group.parent.children[].parent)
this.group.parent.children[].children == orig(this.group.parent.children[].children)
this.group.parent.children[].timeTable == orig(this.group.parent.children[].timeTable)
this.group.parent.timeTable == orig(this.group.parent.timeTable)
this.group.children == orig(this.group.children)
this.group.timeTable == orig(this.group.timeTable)
this.group.timeTable.slots == orig(this.group.timeTable.slots)
this.group.timeTable.slots[] == orig(this.group.timeTable.slots[])
this.group.timeTable.owner == orig(this.group.timeTable.owner)
this.group.timeTable.owner.getClass().getName() == orig(this.group.timeTable.owner.getClass().getName())
this.field == orig(this.field)
this.field.type == orig(this.field.type)
this.field.type.name == orig(this.field.type.name)
this.field.type.name.toString == orig(this.field.type.name.toString)
this.field.type.shortName == orig(this.field.type.shortName)
this.field.type.shortName.toString == orig(this.field.type.shortName.toString)
this.field.type.duration == orig(this.field.type.duration)
this.field.name == orig(this.field.name)
this.field.name.toString == orig(this.field.name.toString)
this.field.duration == orig(this.field.duration)
this.field.duration.begin == orig(this.field.duration.begin)
this.field.duration.end == orig(this.field.duration.end)
return != null
return.firstName != null
return.lastName != null
return.maxWeekWorkedHours has only one value
return.maxWeekWorkedHours != null
return.maxWeekWorkedHours.day == 1
return.maxWeekWorkedHours.hour == 1
return.maxWeekWorkedHours.min == 0
return.currentWeekWorkedHours != null
return.currentWeekWorkedHours.day one of { 0, 1 }
return.currentWeekWorkedHours.min one of { 0, 30 }
return.fields != null
return.fields[] elements != null
return.fields[].getClass().getName() elements == DATA.Field.class
return.fields[].getClass().getName() one of { [DATA.Field], [DATA.Field, DATA.Field, DATA.Field] }
return.students != null
return.timeTable != null
return.timeTable.slots != null
return.timeTable.slots[] elements != null
return.timeTable.owner != null
return.timeTable.owner.getClass().getName() == DATA.Teacher.class
size(return.fields[]) one of { 1, 3 }
===========================================================================
DATA.LinksList:::OBJECT
===========================================================================
DATA.LinksList.LinksList():::EXIT
===========================================================================
DATA.LinksList.getLinks(DATA.Field):::ENTER
arg0.type.duration == arg0.duration
arg0 != null
arg0.type != null
arg0.type.name != null
arg0.type.shortName != null
arg0.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
arg0.name != null
arg0.duration != null
arg0.duration.begin != null
arg0.duration.end != null
===========================================================================
DATA.LinksList.getLinks(DATA.Field):::EXIT
arg0.type == orig(arg0.type)
arg0.type.name == orig(arg0.type.name)
arg0.type.name.toString == orig(arg0.type.name.toString)
arg0.type.shortName == orig(arg0.type.shortName)
arg0.type.shortName.toString == orig(arg0.type.shortName.toString)
arg0.type.duration == arg0.duration
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.duration == orig(arg0.type.duration)
arg0.duration == orig(arg0.duration)
arg0.duration.begin == orig(arg0.duration.begin)
arg0.duration.end == orig(arg0.duration.end)
arg0.type != null
arg0.type.name != null
arg0.type.shortName != null
arg0.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
arg0.name != null
arg0.duration != null
arg0.duration.begin != null
arg0.duration.end != null
return != null
===========================================================================
DATA.LinksList.getLinks(DATA.Group):::ENTER
arg0 != null
arg0.name != null
arg0.effectif one of { 25, 100 }
arg0.links != null
arg0.classes != null
arg0.classes.keys != null
arg0.classes.keys[] elements != null
arg0.classes.keys[].getClass().getName() elements == DATA.Field.class
arg0.classes.keys[].getClass().getName() one of { [], [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field] }
arg0.classes.values != null
arg0.classes.values[] elements != null
arg0.classes.values[].getClass().getName() elements == DATA.Time.class
arg0.classes.values[].getClass().getName() one of { [], [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time] }
arg0.done != null
arg0.done.keys != null
arg0.done.keys[] elements != null
arg0.done.keys[].getClass().getName() elements == DATA.Field.class
arg0.done.keys[].getClass().getName() one of { [], [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field] }
arg0.done.values != null
arg0.done.values[] elements != null
arg0.done.values[].getClass().getName() elements == java.lang.Boolean.class
arg0.done.values[].getClass().getName() one of { [], [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean] }
arg0.parent.name has only one value
arg0.parent.name != null
arg0.parent.name.toString == "Lanip"
arg0.parent.effectif == 100
arg0.parent.links has only one value
arg0.parent.links != null
arg0.parent.classes has only one value
arg0.parent.classes != null
arg0.parent.done has only one value
arg0.parent.done != null
arg0.parent.parent == null
arg0.parent.children has only one value
arg0.parent.children != null
arg0.parent.children.getClass().getName() == DATA.Group[].class
arg0.parent.children[] contains no nulls and has only one value, of length 2
arg0.parent.children[] elements != null
arg0.parent.children[].getClass().getName() == [DATA.Group, DATA.Group]
arg0.parent.children[].getClass().getName() elements == DATA.Group.class
arg0.parent.children[].name contains no nulls and has only one value, of length 2
arg0.parent.children[].name elements != null
arg0.parent.children[].name.toString == [g46, g42]
arg0.parent.children[].name.toString elements one of { "g42", "g46" }
arg0.parent.children[].effectif == [25, 25]
arg0.parent.children[].effectif elements == 25
arg0.parent.children[].links contains no nulls and has only one value, of length 2
arg0.parent.children[].links elements != null
arg0.parent.children[].classes contains no nulls and has only one value, of length 2
arg0.parent.children[].classes elements has only one value
arg0.parent.children[].classes elements != null
arg0.parent.children[].done contains no nulls and has only one value, of length 2
arg0.parent.children[].done elements != null
arg0.parent.children[].parent contains no nulls and has only one value, of length 2
arg0.parent.children[].parent elements has only one value
arg0.parent.children[].parent elements != null
arg0.parent.children[].children contains only nulls and has only one value, of length 2
arg0.parent.children[].children elements == null
arg0.parent.children[].children.getClass().getName() == [null, null]
arg0.parent.children[].children.getClass().getName() elements == null
arg0.parent.children[].timeTable contains no nulls and has only one value, of length 2
arg0.parent.children[].timeTable elements != null
arg0.parent.timeTable has only one value
arg0.parent.timeTable != null
arg0.children.getClass().getName() == DATA.Group[].class
arg0.children[] contains no nulls and has only one value, of length 2
arg0.children[] elements != null
arg0.children[].getClass().getName() == [DATA.Group, DATA.Group]
arg0.children[].getClass().getName() elements == DATA.Group.class
arg0.children[].name contains no nulls and has only one value, of length 2
arg0.children[].name elements != null
arg0.children[].name.toString == [g46, g42]
arg0.children[].name.toString elements one of { "g42", "g46" }
arg0.children[].effectif == [25, 25]
arg0.children[].effectif elements == 25
arg0.children[].links contains no nulls and has only one value, of length 2
arg0.children[].links elements != null
arg0.children[].classes contains no nulls and has only one value, of length 2
arg0.children[].classes elements has only one value
arg0.children[].classes elements != null
arg0.children[].done contains no nulls and has only one value, of length 2
arg0.children[].done elements != null
arg0.children[].parent contains no nulls and has only one value, of length 2
arg0.children[].parent elements has only one value
arg0.children[].parent elements != null
arg0.children[].children contains only nulls and has only one value, of length 2
arg0.children[].children elements == null
arg0.children[].children.getClass().getName() == [null, null]
arg0.children[].children.getClass().getName() elements == null
arg0.children[].timeTable contains no nulls and has only one value, of length 2
arg0.children[].timeTable elements != null
arg0.timeTable != null
arg0.timeTable.slots != null
arg0.timeTable.slots[] elements != null
arg0.timeTable.owner != null
arg0.timeTable.owner.getClass().getName() == DATA.Group.class
DATA.WeekTable.minDelta has only one value
DATA.WeekTable.minDelta != null
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
size(arg0.classes.keys[]) one of { 0, 6 }
size(arg0.classes.keys[])-1 != 0
size(arg0.classes.values[]) one of { 0, 6 }
size(arg0.classes.values[])-1 != 0
size(arg0.done.keys[]) one of { 0, 6 }
size(arg0.done.keys[])-1 != 0
size(arg0.done.values[]) one of { 0, 6 }
size(arg0.done.values[])-1 != 0
size(arg0.parent.children[]) == 2
size(arg0.children[]) == 2
arg0 in arg0.children[].parent
arg0.children[].parent elements == arg0
arg0.effectif in arg0.parent.children[].effectif
arg0.parent.children[].effectif elements == arg0.effectif
arg0.classes in arg0.parent.children[].classes
arg0.parent.children[].classes elements == arg0.classes
arg0.parent in arg0.parent.children[].parent
arg0.parent.children[].parent elements == arg0.parent
arg0.parent.children.getClass().getName() in arg0.children[].getClass().getName()
arg0.parent.children.getClass().getName() in arg0.children[].children.getClass().getName()
arg0.parent.children.getClass().getName() != arg0.timeTable.owner.getClass().getName()
arg0.children.getClass().getName() in arg0.parent.children[].getClass().getName()
arg0.timeTable.owner.getClass().getName() in arg0.parent.children[].getClass().getName()
arg0.children.getClass().getName() in arg0.parent.children[].children.getClass().getName()
arg0.children.getClass().getName() != arg0.timeTable.owner.getClass().getName()
arg0.timeTable.owner.getClass().getName() in arg0.children[].getClass().getName()
===========================================================================
DATA.LinksList.getLinks(DATA.Group):::EXIT
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.effectif == orig(arg0.effectif)
arg0.links == orig(arg0.links)
arg0.classes == orig(arg0.classes)
arg0.classes.keys == orig(arg0.classes.keys)
arg0.classes.keys[] == orig(arg0.classes.keys[])
arg0.classes.values == orig(arg0.classes.values)
arg0.classes.values[] == orig(arg0.classes.values[])
arg0.done == orig(arg0.done)
arg0.done.keys == orig(arg0.done.keys)
arg0.done.keys[] == orig(arg0.done.keys[])
arg0.done.values == orig(arg0.done.values)
arg0.done.values[] == orig(arg0.done.values[])
arg0.parent == orig(arg0.parent)
arg0.parent.name == orig(arg0.parent.name)
arg0.parent.name.toString == orig(arg0.parent.name.toString)
arg0.parent.effectif == orig(arg0.parent.effectif)
arg0.parent.links == orig(arg0.parent.links)
arg0.parent.classes == orig(arg0.parent.classes)
arg0.parent.done == orig(arg0.parent.done)
arg0.parent.parent == orig(arg0.parent.parent)
arg0.parent.children == orig(arg0.parent.children)
arg0.parent.children.getClass().getName() == orig(arg0.parent.children.getClass().getName())
arg0.parent.children[] == orig(arg0.parent.children[])
arg0.parent.children[].name == orig(arg0.parent.children[].name)
arg0.parent.children[].effectif == orig(arg0.parent.children[].effectif)
arg0.parent.children[].links == orig(arg0.parent.children[].links)
arg0.parent.children[].classes == orig(arg0.parent.children[].classes)
arg0.parent.children[].done == orig(arg0.parent.children[].done)
arg0.parent.children[].parent == orig(arg0.parent.children[].parent)
arg0.parent.children[].children == orig(arg0.parent.children[].children)
arg0.parent.children[].timeTable == orig(arg0.parent.children[].timeTable)
arg0.parent.timeTable == orig(arg0.parent.timeTable)
arg0.children == orig(arg0.children)
arg0.children.getClass().getName() == orig(arg0.children.getClass().getName())
arg0.children[] == orig(arg0.children[])
arg0.children[].name == orig(arg0.children[].name)
arg0.children[].effectif == orig(arg0.children[].effectif)
arg0.children[].links == orig(arg0.children[].links)
arg0.children[].classes == orig(arg0.children[].classes)
arg0.children[].done == orig(arg0.children[].done)
arg0.children[].parent == orig(arg0.children[].parent)
arg0.children[].children == orig(arg0.children[].children)
arg0.children[].timeTable == orig(arg0.children[].timeTable)
arg0.timeTable == orig(arg0.timeTable)
arg0.timeTable.slots == orig(arg0.timeTable.slots)
arg0.timeTable.slots[] == orig(arg0.timeTable.slots[])
arg0.timeTable.owner == orig(arg0.timeTable.owner)
arg0.timeTable.owner.getClass().getName() == orig(arg0.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
arg0.name != null
arg0.effectif one of { 25, 100 }
arg0.links != null
arg0.classes != null
arg0.classes.keys != null
arg0.classes.keys[] elements != null
arg0.classes.keys[].getClass().getName() elements == DATA.Field.class
arg0.classes.keys[].getClass().getName() one of { [], [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field] }
arg0.classes.values != null
arg0.classes.values[] elements != null
arg0.classes.values[].getClass().getName() elements == DATA.Time.class
arg0.classes.values[].getClass().getName() one of { [], [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time] }
arg0.done != null
arg0.done.keys != null
arg0.done.keys[] elements != null
arg0.done.keys[].getClass().getName() elements == DATA.Field.class
arg0.done.keys[].getClass().getName() one of { [], [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field] }
arg0.done.values != null
arg0.done.values[] elements != null
arg0.done.values[].getClass().getName() elements == java.lang.Boolean.class
arg0.done.values[].getClass().getName() one of { [], [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean] }
arg0.parent.name has only one value
arg0.parent.name != null
arg0.parent.name.toString == "Lanip"
arg0.parent.effectif == 100
arg0.parent.links has only one value
arg0.parent.links != null
arg0.parent.classes has only one value
arg0.parent.classes != null
arg0.parent.done has only one value
arg0.parent.done != null
arg0.parent.parent == null
arg0.parent.children has only one value
arg0.parent.children != null
arg0.parent.children.getClass().getName() == DATA.Group[].class
arg0.parent.children[] contains no nulls and has only one value, of length 2
arg0.parent.children[] elements != null
arg0.parent.children[].getClass().getName() == [DATA.Group, DATA.Group]
arg0.parent.children[].getClass().getName() elements == DATA.Group.class
arg0.parent.children[].name contains no nulls and has only one value, of length 2
arg0.parent.children[].name elements != null
arg0.parent.children[].name.toString == [g46, g42]
arg0.parent.children[].name.toString elements one of { "g42", "g46" }
arg0.parent.children[].effectif == [25, 25]
arg0.parent.children[].effectif elements == 25
arg0.parent.children[].links contains no nulls and has only one value, of length 2
arg0.parent.children[].links elements != null
arg0.parent.children[].classes contains no nulls and has only one value, of length 2
arg0.parent.children[].classes elements has only one value
arg0.parent.children[].classes elements != null
arg0.parent.children[].done contains no nulls and has only one value, of length 2
arg0.parent.children[].done elements != null
arg0.parent.children[].parent contains no nulls and has only one value, of length 2
arg0.parent.children[].parent elements has only one value
arg0.parent.children[].parent elements != null
arg0.parent.children[].children contains only nulls and has only one value, of length 2
arg0.parent.children[].children elements == null
arg0.parent.children[].children.getClass().getName() == [null, null]
arg0.parent.children[].children.getClass().getName() elements == null
arg0.parent.children[].timeTable contains no nulls and has only one value, of length 2
arg0.parent.children[].timeTable elements != null
arg0.parent.timeTable has only one value
arg0.parent.timeTable != null
arg0.children.getClass().getName() == DATA.Group[].class
arg0.children[] contains no nulls and has only one value, of length 2
arg0.children[] elements != null
arg0.children[].getClass().getName() == [DATA.Group, DATA.Group]
arg0.children[].getClass().getName() elements == DATA.Group.class
arg0.children[].name contains no nulls and has only one value, of length 2
arg0.children[].name elements != null
arg0.children[].name.toString == [g46, g42]
arg0.children[].name.toString elements one of { "g42", "g46" }
arg0.children[].effectif == [25, 25]
arg0.children[].effectif elements == 25
arg0.children[].links contains no nulls and has only one value, of length 2
arg0.children[].links elements != null
arg0.children[].classes contains no nulls and has only one value, of length 2
arg0.children[].classes elements has only one value
arg0.children[].classes elements != null
arg0.children[].done contains no nulls and has only one value, of length 2
arg0.children[].done elements != null
arg0.children[].parent contains no nulls and has only one value, of length 2
arg0.children[].parent elements has only one value
arg0.children[].parent elements != null
arg0.children[].children contains only nulls and has only one value, of length 2
arg0.children[].children elements == null
arg0.children[].children.getClass().getName() == [null, null]
arg0.children[].children.getClass().getName() elements == null
arg0.children[].timeTable contains no nulls and has only one value, of length 2
arg0.children[].timeTable elements != null
arg0.timeTable != null
arg0.timeTable.slots != null
arg0.timeTable.slots[] elements != null
arg0.timeTable.owner != null
arg0.timeTable.owner.getClass().getName() == DATA.Group.class
DATA.WeekTable.minDelta has only one value
DATA.WeekTable.minDelta != null
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
return != null
size(arg0.classes.keys[]) one of { 0, 6 }
size(arg0.classes.keys[])-1 != 0
size(arg0.classes.values[]) one of { 0, 6 }
size(arg0.classes.values[])-1 != 0
size(arg0.done.keys[]) one of { 0, 6 }
size(arg0.done.keys[])-1 != 0
size(arg0.done.values[]) one of { 0, 6 }
size(arg0.done.values[])-1 != 0
size(arg0.parent.children[]) == 2
size(arg0.children[]) == 2
arg0.effectif in arg0.parent.children[].effectif
arg0.parent.children[].effectif elements == arg0.effectif
arg0.classes in arg0.parent.children[].classes
arg0.parent.children[].classes elements == arg0.classes
arg0.parent in arg0.parent.children[].parent
arg0.parent.children[].parent elements == arg0.parent
arg0.parent.children.getClass().getName() in arg0.children[].getClass().getName()
arg0.parent.children.getClass().getName() in arg0.children[].children.getClass().getName()
arg0.parent.children.getClass().getName() != arg0.timeTable.owner.getClass().getName()
arg0.children.getClass().getName() in arg0.parent.children[].getClass().getName()
arg0.timeTable.owner.getClass().getName() in arg0.parent.children[].getClass().getName()
arg0.children.getClass().getName() in arg0.parent.children[].children.getClass().getName()
arg0.children.getClass().getName() != arg0.timeTable.owner.getClass().getName()
arg0.timeTable.owner.getClass().getName() in arg0.children[].getClass().getName()
arg0.children[].parent elements == orig(arg0)
orig(arg0) in arg0.children[].parent
===========================================================================
DATA.Main.main(java.lang.String[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.lang.String[].class
arg0[] == []
arg0[].toString == []
===========================================================================
DATA.Main.main(java.lang.String[]):::EXIT
arg0[] == orig(arg0[])
arg0[] == []
arg0[].toString == []
===========================================================================
DATA.Slot:::OBJECT
this.begin.day == this.end.day
this.begin != null
this.begin.day >= 0
this.begin.min >= 0
this.end != null
this.end.min >= 0
this.begin.day <= this.begin.hour
this.begin.day < this.end.hour
this.begin.hour <= this.end.hour
===========================================================================
DATA.Slot.Slot(DATA.Time, DATA.Time):::ENTER
arg0.day == arg1.day
arg0 != null
arg0.day >= 0
arg0.min >= 0
arg1 != null
arg1.min >= 0
arg0.day <= arg0.hour
arg0.day < arg1.hour
arg0.hour <= arg1.hour
===========================================================================
DATA.Slot.Slot(DATA.Time, DATA.Time):::EXIT
this.begin == orig(arg0)
this.begin.day == arg0.day
this.begin.hour == arg0.hour
this.begin.min == arg0.min
this.end == orig(arg1)
this.end.day == arg0.day
this.end.hour == arg1.hour
this.end.min == arg1.min
arg0.day == arg1.day
arg0.day == orig(arg0.day)
arg0.day == orig(arg1.day)
arg0.hour == orig(arg0.hour)
arg0.min == orig(arg0.min)
arg1.hour == orig(arg1.hour)
arg1.min == orig(arg1.min)
arg0.day >= 0
arg0.min >= 0
arg1.min >= 0
arg0.day <= arg0.hour
arg0.day < arg1.hour
arg0.hour <= arg1.hour
===========================================================================
DATA.Slot.canFitIn(DATA.Slot):::ENTER
arg0.begin.day == arg0.end.day
arg0 != null
arg0.begin != null
arg0.begin.day >= 0
arg0.begin.min one of { 0, 30 }
arg0.end != null
arg0.end.min one of { 0, 30 }
this.begin.day < this.begin.hour
this.begin.day < arg0.begin.hour
this.begin.day < arg0.end.hour
this.begin.hour < this.end.hour
this.begin.hour != this.end.min
this.begin.hour > arg0.begin.day
this.begin.hour != arg0.begin.min
this.begin.hour != arg0.end.min
this.end.hour != this.end.min
this.end.hour > arg0.begin.day
this.end.hour != arg0.begin.min
this.end.hour != arg0.end.min
this.end.min != arg0.begin.hour
this.end.min != arg0.end.hour
this.end.min >= arg0.end.min
arg0.begin.day < arg0.begin.hour
arg0.begin.day < arg0.end.hour
arg0.begin.hour != arg0.begin.min
arg0.begin.hour < arg0.end.hour
arg0.begin.hour != arg0.end.min
arg0.begin.min != arg0.end.hour
arg0.end.hour != arg0.end.min
===========================================================================
DATA.Slot.canFitIn(DATA.Slot):::EXIT59
this.begin.day == arg0.begin.day
this.begin.day == arg0.end.day
this.begin.day == orig(arg0.begin.day)
this.begin.day == orig(arg0.end.day)
this.begin.min one of { 0, 30 }
this.end.min one of { 0, 30 }
return == true
this.begin.hour != this.begin.min
this.begin.hour >= arg0.begin.hour
this.begin.hour < arg0.end.hour
this.begin.min != this.end.hour
this.begin.min != arg0.begin.hour
this.begin.min >= arg0.begin.min
this.begin.min != arg0.end.hour
this.end.hour > arg0.begin.hour
this.end.hour <= arg0.end.hour
===========================================================================
DATA.Slot.canFitIn(DATA.Slot):::EXIT59;condition="return == true"
===========================================================================
DATA.Slot.canFitIn(DATA.Slot):::EXIT61
arg0.end.min == 0
return == false
this.begin.day >= arg0.end.min
this.begin.hour > arg0.end.min
this.begin.min >= arg0.end.min
this.end.hour > arg0.end.min
arg0.begin.day >= arg0.end.min
arg0.begin.hour > arg0.end.min
arg0.begin.min >= arg0.end.min
arg0.end.hour > arg0.end.min
===========================================================================
DATA.Slot.canFitIn(DATA.Slot):::EXIT61;condition="not(return == true)"
===========================================================================
DATA.Slot.canFitIn(DATA.Slot):::EXIT
this.begin == orig(this.begin)
this.begin.day == orig(this.begin.day)
this.begin.day == orig(this.end.day)
this.begin.hour == orig(this.begin.hour)
this.begin.min == orig(this.begin.min)
this.end == orig(this.end)
this.end.hour == orig(this.end.hour)
this.end.min == orig(this.end.min)
arg0.begin == orig(arg0.begin)
arg0.begin.day == arg0.end.day
arg0.begin.day == orig(arg0.begin.day)
arg0.begin.day == orig(arg0.end.day)
arg0.begin.hour == orig(arg0.begin.hour)
arg0.begin.min == orig(arg0.begin.min)
arg0.end == orig(arg0.end)
arg0.end.hour == orig(arg0.end.hour)
arg0.end.min == orig(arg0.end.min)
(return == false)  ==>  (arg0.begin.day >= arg0.end.min)
(return == false)  ==>  (arg0.begin.hour > arg0.end.min)
(return == false)  ==>  (arg0.begin.min >= arg0.end.min)
(return == false)  ==>  (arg0.end.hour > arg0.end.min)
(return == false)  ==>  (arg0.end.min == 0)
(return == false)  ==>  (this.begin.day >= arg0.end.min)
(return == false)  ==>  (this.begin.hour > arg0.end.min)
(return == false)  ==>  (this.begin.min >= arg0.end.min)
(return == false)  ==>  (this.end.hour > arg0.end.min)
(return == true)  ==>  (arg0.end.min one of { 0, 30 })
(return == true)  ==>  (this.begin.day == arg0.begin.day)
(return == true)  ==>  (this.begin.hour != this.begin.min)
(return == true)  ==>  (this.begin.hour < arg0.end.hour)
(return == true)  ==>  (this.begin.hour >= arg0.begin.hour)
(return == true)  ==>  (this.begin.min != arg0.begin.hour)
(return == true)  ==>  (this.begin.min != arg0.end.hour)
(return == true)  ==>  (this.begin.min != this.end.hour)
(return == true)  ==>  (this.begin.min >= arg0.begin.min)
(return == true)  ==>  (this.begin.min one of { 0, 30 })
(return == true)  ==>  (this.end.hour <= arg0.end.hour)
(return == true)  ==>  (this.end.hour > arg0.begin.hour)
(return == true)  ==>  (this.end.min one of { 0, 30 })
arg0.begin != null
arg0.begin.day >= 0
arg0.begin.min one of { 0, 30 }
arg0.end != null
arg0.end.min one of { 0, 30 }
this.begin.day < this.begin.hour
this.begin.day < arg0.begin.hour
this.begin.day < arg0.end.hour
this.begin.hour < this.end.hour
this.begin.hour != this.end.min
this.begin.hour > arg0.begin.day
this.begin.hour != arg0.begin.min
this.begin.hour != arg0.end.min
this.end.hour != this.end.min
this.end.hour > arg0.begin.day
this.end.hour != arg0.begin.min
this.end.hour != arg0.end.min
this.end.min != arg0.begin.hour
this.end.min != arg0.end.hour
this.end.min >= arg0.end.min
arg0.begin.day < arg0.begin.hour
arg0.begin.day < arg0.end.hour
arg0.begin.hour != arg0.begin.min
arg0.begin.hour < arg0.end.hour
arg0.begin.hour != arg0.end.min
arg0.begin.min != arg0.end.hour
arg0.end.hour != arg0.end.min
===========================================================================
DATA.Slot.canFitIn(DATA.Slot):::EXIT;condition="return == true"
this.begin.day == arg0.begin.day
this.begin.day == arg0.end.day
this.begin.day == orig(arg0.begin.day)
this.begin.day == orig(arg0.end.day)
this.begin.min one of { 0, 30 }
this.end.min one of { 0, 30 }
return == true
this.begin.hour != this.begin.min
this.begin.hour >= arg0.begin.hour
this.begin.hour < arg0.end.hour
this.begin.min != this.end.hour
this.begin.min != arg0.begin.hour
this.begin.min >= arg0.begin.min
this.begin.min != arg0.end.hour
this.end.hour > arg0.begin.hour
this.end.hour <= arg0.end.hour
===========================================================================
DATA.Slot.canFitIn(DATA.Slot):::EXIT;condition="not(return == true)"
arg0.end.min == 0
return == false
this.begin.day >= arg0.end.min
this.begin.hour > arg0.end.min
this.begin.min >= arg0.end.min
this.end.hour > arg0.end.min
arg0.begin.day >= arg0.end.min
arg0.begin.hour > arg0.end.min
arg0.begin.min >= arg0.end.min
arg0.end.hour > arg0.end.min
===========================================================================
DATA.Slot.canFitIn(java.util.ArrayList):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == DATA.Slot.class
this.begin.day < this.begin.hour
this.begin.hour < this.end.hour
this.begin.hour != this.end.min
this.end.hour != this.end.min
===========================================================================
DATA.Slot.canFitIn(java.util.ArrayList):::EXIT51
this.begin.min one of { 0, 30 }
this.end.min one of { 0, 30 }
return == true
this.begin.hour != this.begin.min
this.begin.min != this.end.hour
===========================================================================
DATA.Slot.canFitIn(java.util.ArrayList):::EXIT51;condition="return == true"
===========================================================================
DATA.Slot.canFitIn(java.util.ArrayList):::EXIT53
this.begin.day one of { 0, 3 }
this.begin.hour one of { 8, 10 }
this.end.hour one of { 9, 11, 12 }
arg0[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
return == false
orig(size(arg0[])) == 5
this.begin.day <= this.end.min
this.begin.min != this.end.min
===========================================================================
DATA.Slot.canFitIn(java.util.ArrayList):::EXIT53;condition="not(return == true)"
===========================================================================
DATA.Slot.canFitIn(java.util.ArrayList):::EXIT
this.begin == orig(this.begin)
this.begin.day == orig(this.begin.day)
this.begin.day == orig(this.end.day)
this.begin.hour == orig(this.begin.hour)
this.begin.min == orig(this.begin.min)
this.end == orig(this.end)
this.end.hour == orig(this.end.hour)
this.end.min == orig(this.end.min)
arg0[] == orig(arg0[])
(return == false)  ==>  (arg0[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot])
(return == false)  ==>  (orig(size(arg0[])) == 5)
(return == false)  ==>  (this.begin.day <= this.end.min)
(return == false)  ==>  (this.begin.day one of { 0, 3 })
(return == false)  ==>  (this.begin.hour one of { 8, 10 })
(return == false)  ==>  (this.begin.min != this.end.min)
(return == false)  ==>  (this.end.hour one of { 9, 11, 12 })
(return == true)  ==>  (this.begin.hour != this.begin.min)
(return == true)  ==>  (this.begin.min != this.end.hour)
(return == true)  ==>  (this.begin.min one of { 0, 30 })
(return == true)  ==>  (this.end.min one of { 0, 30 })
arg0[] elements != null
arg0[].getClass().getName() elements == DATA.Slot.class
this.begin.day < this.begin.hour
this.begin.hour < this.end.hour
this.begin.hour != this.end.min
this.end.hour != this.end.min
===========================================================================
DATA.Slot.canFitIn(java.util.ArrayList):::EXIT;condition="return == true"
this.begin.min one of { 0, 30 }
this.end.min one of { 0, 30 }
return == true
this.begin.hour != this.begin.min
this.begin.min != this.end.hour
===========================================================================
DATA.Slot.canFitIn(java.util.ArrayList):::EXIT;condition="not(return == true)"
this.begin.day one of { 0, 3 }
this.begin.hour one of { 8, 10 }
this.end.hour one of { 9, 11, 12 }
arg0[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
return == false
orig(size(arg0[])) == 5
this.begin.day <= this.end.min
this.begin.min != this.end.min
===========================================================================
DATA.Slot.clone():::ENTER
this.begin.min == this.end.min
this.begin.hour one of { 8, 14 }
this.begin.min == 0
this.end.hour one of { 12, 18 }
this.begin.day < this.begin.hour
this.begin.day >= this.begin.min
this.begin.hour > this.begin.min
this.begin.hour < this.end.hour
this.begin.min < this.end.hour
===========================================================================
DATA.Slot.clone():::EXIT
this.begin == orig(this.begin)
this.begin.day == return.begin.day
this.begin.day == return.end.day
this.begin.day == orig(this.begin.day)
this.begin.day == orig(this.end.day)
this.begin.hour == return.begin.hour
this.begin.hour == orig(this.begin.hour)
this.begin.min == this.end.min
this.begin.min == return.begin.min
this.begin.min == return.end.min
this.begin.min == orig(this.begin.min)
this.begin.min == orig(this.end.min)
this.end == orig(this.end)
this.end.hour == return.end.hour
this.end.hour == orig(this.end.hour)
this.begin.hour one of { 8, 14 }
this.begin.min == 0
this.end.hour one of { 12, 18 }
return != null
return.begin != null
return.end != null
this.begin.day < this.begin.hour
this.begin.day >= this.begin.min
this.begin.hour > this.begin.min
this.begin.hour < this.end.hour
this.begin.min < this.end.hour
===========================================================================
DATA.Slot.getBegin():::ENTER
this.begin.day < this.begin.hour
===========================================================================
DATA.Slot.getBegin():::EXIT
this.begin == return
this.begin.day == return.day
this.begin.hour == return.hour
this.begin.min == return.min
this.end == orig(this.end)
this.end.day == return.day
this.end.hour == orig(this.end.hour)
this.end.min == orig(this.end.min)
return == orig(this.begin)
return.day == orig(this.begin.day)
return.day == orig(this.end.day)
return.hour == orig(this.begin.hour)
return.min == orig(this.begin.min)
return != null
return.day >= 0
return.min >= 0
this.end.hour > return.day
this.end.hour >= return.hour
return.day < return.hour
===========================================================================
DATA.Slot.getDuration():::ENTER
this.begin.day < this.begin.hour
this.begin.hour < this.end.hour
this.begin.hour != this.end.min
this.end.hour != this.end.min
===========================================================================
DATA.Slot.getDuration():::EXIT
this.begin == orig(this.begin)
this.begin.day == orig(this.begin.day)
this.begin.day == orig(this.end.day)
this.begin.hour == orig(this.begin.hour)
this.begin.min == orig(this.begin.min)
this.end == orig(this.end)
this.end.hour == orig(this.end.hour)
this.end.min == orig(this.end.min)
return != null
return.day == 0
return.hour >= 0
return.min one of { 0, 30 }
this.begin.day < this.begin.hour
this.begin.day >= return.day
this.begin.hour < this.end.hour
this.begin.hour != this.end.min
this.begin.hour > return.day
this.begin.hour > return.hour
this.begin.hour != return.min
this.begin.min >= return.day
this.begin.min <= return.min
this.end.hour != this.end.min
this.end.hour > return.day
this.end.hour > return.hour
this.end.hour != return.min
this.end.min >= return.day
return.day <= return.hour
return.day <= return.min
return.hour != return.min
===========================================================================
DATA.Slot.getEnd():::ENTER
this.begin.min one of { 0, 30 }
this.end.min one of { 0, 30 }
this.begin.day < this.begin.hour
this.begin.hour != this.begin.min
this.begin.hour != this.end.min
this.begin.min != this.end.hour
this.end.hour != this.end.min
===========================================================================
DATA.Slot.getEnd():::EXIT
this.begin == orig(this.begin)
this.begin.day == return.day
this.begin.hour == orig(this.begin.hour)
this.begin.min == orig(this.begin.min)
this.end == return
this.end.day == return.day
this.end.hour == return.hour
this.end.min == return.min
return == orig(this.end)
return.day == orig(this.begin.day)
return.day == orig(this.end.day)
return.hour == orig(this.end.hour)
return.min == orig(this.end.min)
this.begin.min one of { 0, 30 }
return != null
return.day >= 0
return.min one of { 0, 30 }
this.begin.hour != this.begin.min
this.begin.hour > return.day
this.begin.hour <= return.hour
this.begin.hour != return.min
this.begin.min != return.hour
return.day < return.hour
return.hour != return.min
===========================================================================
DATA.Slot.intersection(DATA.Slot):::ENTER
this.begin.day == arg0.begin.day
this.begin.day == arg0.end.day
this.begin.min one of { 0, 30 }
this.end.min one of { 0, 30 }
arg0 != null
arg0.begin != null
arg0.begin.min one of { 0, 30 }
arg0.end != null
arg0.end.min one of { 0, 30 }
this.begin.day < this.begin.hour
this.begin.day < arg0.begin.hour
this.begin.day < arg0.end.hour
this.begin.hour != this.begin.min
this.begin.hour < this.end.hour
this.begin.hour != this.end.min
this.begin.hour != arg0.begin.min
this.begin.hour < arg0.end.hour
this.begin.hour != arg0.end.min
this.begin.min != this.end.hour
this.begin.min != arg0.begin.hour
this.begin.min != arg0.end.hour
this.end.hour != this.end.min
this.end.hour > arg0.begin.hour
this.end.hour != arg0.begin.min
this.end.hour <= arg0.end.hour
this.end.hour != arg0.end.min
this.end.min != arg0.begin.hour
this.end.min != arg0.end.hour
this.end.min >= arg0.end.min
arg0.begin.hour != arg0.begin.min
arg0.begin.hour < arg0.end.hour
arg0.begin.hour != arg0.end.min
arg0.begin.min != arg0.end.hour
arg0.end.hour != arg0.end.min
===========================================================================
DATA.Slot.intersection(DATA.Slot):::EXIT77
===========================================================================
DATA.Slot.intersection(DATA.Slot):::EXIT
this.begin == orig(this.begin)
this.begin.day == arg0.begin.day
this.begin.day == arg0.end.day
this.begin.day == return.begin.day
this.begin.day == return.end.day
this.begin.day == orig(this.begin.day)
this.begin.day == orig(this.end.day)
this.begin.day == orig(arg0.begin.day)
this.begin.day == orig(arg0.end.day)
this.begin.hour == orig(this.begin.hour)
this.begin.min == orig(this.begin.min)
this.end == orig(this.end)
this.end.hour == return.end.hour
this.end.hour == orig(this.end.hour)
this.end.min == return.end.min
this.end.min == orig(this.end.min)
arg0.begin == orig(arg0.begin)
arg0.begin.hour == orig(arg0.begin.hour)
arg0.begin.min == orig(arg0.begin.min)
arg0.end == orig(arg0.end)
arg0.end.hour == orig(arg0.end.hour)
arg0.end.min == orig(arg0.end.min)
this.begin.min one of { 0, 30 }
this.end.min one of { 0, 30 }
arg0.begin != null
arg0.begin.min one of { 0, 30 }
arg0.end != null
arg0.end.min one of { 0, 30 }
return != null
return.begin != null
return.begin.min one of { 0, 30 }
return.end != null
this.begin.day < this.begin.hour
this.begin.day < arg0.begin.hour
this.begin.day < arg0.end.hour
this.begin.day < return.begin.hour
this.begin.hour != this.begin.min
this.begin.hour < this.end.hour
this.begin.hour != this.end.min
this.begin.hour != arg0.begin.min
this.begin.hour < arg0.end.hour
this.begin.hour != arg0.end.min
this.begin.hour <= return.begin.hour
this.begin.hour != return.begin.min
this.begin.min != this.end.hour
this.begin.min != arg0.begin.hour
this.begin.min != arg0.end.hour
this.begin.min != return.begin.hour
this.begin.min <= return.begin.min
this.end.hour != this.end.min
this.end.hour > arg0.begin.hour
this.end.hour != arg0.begin.min
this.end.hour <= arg0.end.hour
this.end.hour != arg0.end.min
this.end.hour > return.begin.hour
this.end.hour != return.begin.min
this.end.min != arg0.begin.hour
this.end.min != arg0.end.hour
this.end.min >= arg0.end.min
this.end.min != return.begin.hour
arg0.begin.hour != arg0.begin.min
arg0.begin.hour < arg0.end.hour
arg0.begin.hour != arg0.end.min
arg0.begin.hour <= return.begin.hour
arg0.begin.hour != return.begin.min
arg0.begin.min != arg0.end.hour
arg0.begin.min != return.begin.hour
arg0.begin.min <= return.begin.min
arg0.end.hour != arg0.end.min
arg0.end.hour > return.begin.hour
arg0.end.hour != return.begin.min
arg0.end.min != return.begin.hour
return.begin.hour != return.begin.min
===========================================================================
DATA.Slot.intersects(DATA.Slot):::ENTER
arg0.begin.day == arg0.end.day
this.begin.min one of { 0, 30 }
this.end.min one of { 0, 30 }
arg0 != null
arg0.begin != null
arg0.begin.day >= 0
arg0.begin.min one of { 0, 30 }
arg0.end != null
arg0.end.min one of { 0, 30 }
this.begin.day < this.begin.hour
this.begin.day < arg0.begin.hour
this.begin.day < arg0.end.hour
this.begin.hour != this.begin.min
this.begin.hour < this.end.hour
this.begin.hour != this.end.min
this.begin.hour > arg0.begin.day
this.begin.hour != arg0.begin.min
this.begin.hour != arg0.end.min
this.begin.min != this.end.hour
this.begin.min != arg0.begin.hour
this.begin.min != arg0.end.hour
this.end.hour != this.end.min
this.end.hour > arg0.begin.day
this.end.hour != arg0.begin.min
this.end.hour != arg0.end.min
this.end.min != arg0.begin.hour
this.end.min != arg0.end.hour
arg0.begin.day < arg0.begin.hour
arg0.begin.day < arg0.end.hour
arg0.begin.hour != arg0.begin.min
arg0.begin.hour < arg0.end.hour
arg0.begin.hour != arg0.end.min
arg0.begin.min != arg0.end.hour
arg0.end.hour != arg0.end.min
===========================================================================
DATA.Slot.intersects(DATA.Slot):::EXIT
this.begin == orig(this.begin)
this.begin.day == orig(this.begin.day)
this.begin.day == orig(this.end.day)
this.begin.hour == orig(this.begin.hour)
this.begin.min == orig(this.begin.min)
this.end == orig(this.end)
this.end.hour == orig(this.end.hour)
this.end.min == orig(this.end.min)
arg0.begin == orig(arg0.begin)
arg0.begin.day == arg0.end.day
arg0.begin.day == orig(arg0.begin.day)
arg0.begin.day == orig(arg0.end.day)
arg0.begin.hour == orig(arg0.begin.hour)
arg0.begin.min == orig(arg0.begin.min)
arg0.end == orig(arg0.end)
arg0.end.hour == orig(arg0.end.hour)
arg0.end.min == orig(arg0.end.min)
(return == true)  ==>  (this.begin.day == arg0.begin.day)
(return == true)  ==>  (this.begin.hour < arg0.end.hour)
(return == true)  ==>  (this.end.hour <= arg0.end.hour)
(return == true)  ==>  (this.end.hour > arg0.begin.hour)
(return == true)  ==>  (this.end.min >= arg0.end.min)
this.begin.min one of { 0, 30 }
this.end.min one of { 0, 30 }
arg0.begin != null
arg0.begin.day >= 0
arg0.begin.min one of { 0, 30 }
arg0.end != null
arg0.end.min one of { 0, 30 }
this.begin.day < this.begin.hour
this.begin.day < arg0.begin.hour
this.begin.day < arg0.end.hour
this.begin.hour != this.begin.min
this.begin.hour < this.end.hour
this.begin.hour != this.end.min
this.begin.hour > arg0.begin.day
this.begin.hour != arg0.begin.min
this.begin.hour != arg0.end.min
this.begin.min != this.end.hour
this.begin.min != arg0.begin.hour
this.begin.min != arg0.end.hour
this.end.hour != this.end.min
this.end.hour > arg0.begin.day
this.end.hour != arg0.begin.min
this.end.hour != arg0.end.min
this.end.min != arg0.begin.hour
this.end.min != arg0.end.hour
arg0.begin.day < arg0.begin.hour
arg0.begin.day < arg0.end.hour
arg0.begin.hour != arg0.begin.min
arg0.begin.hour < arg0.end.hour
arg0.begin.hour != arg0.end.min
arg0.begin.min != arg0.end.hour
arg0.end.hour != arg0.end.min
===========================================================================
DATA.Slot.intersects(DATA.Slot):::EXIT;condition="return == true"
this.begin.day == arg0.begin.day
this.begin.day == arg0.end.day
this.begin.day == orig(arg0.begin.day)
this.begin.day == orig(arg0.end.day)
return == true
this.begin.hour < arg0.end.hour
this.end.hour > arg0.begin.hour
this.end.hour <= arg0.end.hour
this.end.min >= arg0.end.min
===========================================================================
DATA.Slot.intersects(DATA.Slot):::EXIT;condition="not(return == true)"
return == false
===========================================================================
DATA.Teacher:::OBJECT
this.maxWeekWorkedHours.day == this.maxWeekWorkedHours.hour
this.timeTable == this.timeTable.owner.timeTable
this.firstName != null
this.lastName != null
this.maxWeekWorkedHours has only one value
this.maxWeekWorkedHours != null
this.maxWeekWorkedHours.day == 1
this.maxWeekWorkedHours.min == 0
this.currentWeekWorkedHours != null
this.currentWeekWorkedHours.day one of { 0, 1 }
this.currentWeekWorkedHours.hour >= 0
this.currentWeekWorkedHours.min one of { 0, 30 }
this.fields != null
this.fields[] elements != null
this.fields[].getClass().getName() elements == DATA.Field.class
this.fields[].getClass().getName() one of { [DATA.Field], [DATA.Field, DATA.Field, DATA.Field] }
this.students != null
this.timeTable != null
this.timeTable.slots != null
this.timeTable.slots[] elements != null
this.timeTable.owner != null
this.timeTable.owner.getClass().getName() == DATA.Teacher.class
DATA.WeekTable.minDelta has only one value
DATA.WeekTable.minDelta != null
DATA.WeekTable.minDelta.day == 0
DATA.WeekTable.minDelta.hour == 0
DATA.WeekTable.minDelta.min == 1
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
DATA.WeekTable.defaultWeek.slots has only one value
DATA.WeekTable.defaultWeek.slots != null
DATA.WeekTable.defaultWeek.slots[] contains no nulls and has only one value, of length 9
DATA.WeekTable.defaultWeek.slots[] elements != null
DATA.WeekTable.defaultWeek.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
DATA.WeekTable.defaultWeek.slots[].getClass().getName() elements == DATA.Slot.class
DATA.WeekTable.defaultWeek.owner == null
size(this.fields[]) one of { 1, 3 }
size(DATA.WeekTable.defaultWeek.slots[]) == 9
this.maxWeekWorkedHours.day >= this.currentWeekWorkedHours.day
this.maxWeekWorkedHours.day != this.currentWeekWorkedHours.min
this.maxWeekWorkedHours.min <= this.currentWeekWorkedHours.day
this.maxWeekWorkedHours.min <= this.currentWeekWorkedHours.hour
this.maxWeekWorkedHours.min <= this.currentWeekWorkedHours.min
this.currentWeekWorkedHours.day <= this.currentWeekWorkedHours.hour
===========================================================================
DATA.Teacher.Teacher(int, java.lang.String, java.lang.String, DATA.Field[], DATA.Time):::ENTER
arg4.day == arg4.hour
arg3.getClass().getName() == DATA.Field[].class
arg3[].type.shortName.toString elements one of { "Amphith\351\342tre", "TD", "TP" }
arg4 has only one value
arg4.day == 1
arg4.min == 0
size(arg3[]) one of { 1, 3 }
===========================================================================
DATA.Teacher.Teacher(int, java.lang.String, java.lang.String, DATA.Field[], DATA.Time):::EXIT
this.firstName == orig(arg1)
this.lastName == orig(arg2)
this.maxWeekWorkedHours == orig(arg4)
this.maxWeekWorkedHours.day == arg4.day
this.maxWeekWorkedHours.hour == arg4.day
this.maxWeekWorkedHours.min == arg4.min
this.currentWeekWorkedHours.day == arg4.min
this.currentWeekWorkedHours.hour == arg4.min
this.currentWeekWorkedHours.min == arg4.min
arg1.toString == orig(arg1.toString)
arg2.toString == orig(arg2.toString)
arg3[] == orig(arg3[])
arg3[].type == orig(arg3[].type)
arg3[].type.name == orig(arg3[].type.name)
arg3[].type.shortName == orig(arg3[].type.shortName)
arg3[].type.duration == orig(arg3[].type.duration)
arg3[].name == orig(arg3[].name)
arg3[].duration == orig(arg3[].duration)
arg3[].duration.begin == orig(arg3[].duration.begin)
arg3[].duration.end == orig(arg3[].duration.end)
arg4.day == arg4.hour
arg4.day == orig(arg4.day)
arg4.day == orig(arg4.hour)
arg4.min == orig(arg4.min)
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg3[].type.shortName.toString elements one of { "Amphith\351\342tre", "TD", "TP" }
arg4.day == 1
arg4.min == 0
size(this.timeTable.slots[]) == 9
===========================================================================
DATA.Teacher.addLink(DATA.Link):::ENTER
this == arg0.teach
this.firstName == arg0.teach.firstName
this.lastName == arg0.teach.lastName
this.maxWeekWorkedHours == arg0.teach.maxWeekWorkedHours
this.maxWeekWorkedHours.min == this.currentWeekWorkedHours.day
this.currentWeekWorkedHours == arg0.teach.currentWeekWorkedHours
this.fields == arg0.teach.fields
this.students == arg0.teach.students
this.timeTable == arg0.teach.timeTable
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg0 != null
arg0.teach != null
arg0.teach.fields[] elements != null
arg0.teach.fields[].getClass().getName() elements == DATA.Field.class
arg0.teach.fields[].getClass().getName() one of { [DATA.Field], [DATA.Field, DATA.Field, DATA.Field] }
arg0.group != null
arg0.group.name != null
arg0.group.name.toString one of { "g2116", "g42", "g46" }
arg0.group.effectif == 25
arg0.group.links != null
arg0.group.classes has only one value
arg0.group.classes != null
arg0.group.done != null
arg0.group.parent has only one value
arg0.group.parent != null
arg0.group.children == null
arg0.group.timeTable != null
arg0.field != null
arg0.field.type != null
arg0.field.name != null
arg0.field.duration != null
size(this.timeTable.slots[]) == 9
size(arg0.teach.fields[]) one of { 1, 3 }
this.maxWeekWorkedHours.day != this.currentWeekWorkedHours.hour
===========================================================================
DATA.Teacher.addLink(DATA.Link):::EXIT67
===========================================================================
DATA.Teacher.addLink(DATA.Link):::EXIT67;condition="return == true"
===========================================================================
DATA.Teacher.addLink(DATA.Link):::EXIT
this.firstName == arg0.teach.firstName
this.firstName == orig(this.firstName)
this.firstName == orig(arg0.teach.firstName)
this.firstName.toString == orig(this.firstName.toString)
this.lastName == arg0.teach.lastName
this.lastName == orig(this.lastName)
this.lastName == orig(arg0.teach.lastName)
this.lastName.toString == orig(this.lastName.toString)
this.maxWeekWorkedHours == arg0.teach.maxWeekWorkedHours
this.maxWeekWorkedHours == orig(this.maxWeekWorkedHours)
this.maxWeekWorkedHours == orig(arg0.teach.maxWeekWorkedHours)
this.maxWeekWorkedHours.day == orig(this.maxWeekWorkedHours.day)
this.maxWeekWorkedHours.day == orig(this.maxWeekWorkedHours.hour)
this.maxWeekWorkedHours.min == orig(this.maxWeekWorkedHours.min)
this.maxWeekWorkedHours.min == orig(this.currentWeekWorkedHours.day)
this.currentWeekWorkedHours == arg0.teach.currentWeekWorkedHours
this.fields == arg0.teach.fields
this.fields == orig(this.fields)
this.fields == orig(arg0.teach.fields)
this.fields[] == orig(this.fields[])
this.students == arg0.teach.students
this.students == orig(this.students)
this.students == orig(arg0.teach.students)
this.timeTable == arg0.teach.timeTable
this.timeTable == orig(this.timeTable)
this.timeTable == orig(this.timeTable.owner.timeTable)
this.timeTable == orig(arg0.teach.timeTable)
this.timeTable.slots == orig(this.timeTable.slots)
this.timeTable.slots[] == orig(this.timeTable.slots[])
this.timeTable.owner == orig(this.timeTable.owner)
this.timeTable.owner.getClass().getName() == orig(this.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
arg0.teach == orig(this)
arg0.teach == orig(arg0.teach)
arg0.teach.firstName.toString == orig(arg0.teach.firstName.toString)
arg0.teach.lastName.toString == orig(arg0.teach.lastName.toString)
arg0.teach.fields[] == orig(arg0.teach.fields[])
arg0.group == orig(arg0.group)
arg0.group.name == orig(arg0.group.name)
arg0.group.name.toString == orig(arg0.group.name.toString)
arg0.group.effectif == orig(arg0.group.effectif)
arg0.group.links == orig(arg0.group.links)
arg0.group.classes == orig(arg0.group.classes)
arg0.group.done == orig(arg0.group.done)
arg0.group.parent == orig(arg0.group.parent)
arg0.group.children == orig(arg0.group.children)
arg0.group.timeTable == orig(arg0.group.timeTable)
arg0.field == orig(arg0.field)
arg0.field.type == orig(arg0.field.type)
arg0.field.name == orig(arg0.field.name)
arg0.field.name.toString == orig(arg0.field.name.toString)
arg0.field.duration == orig(arg0.field.duration)
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg0.teach != null
arg0.teach.fields[] elements != null
arg0.teach.fields[].getClass().getName() elements == DATA.Field.class
arg0.teach.fields[].getClass().getName() one of { [DATA.Field], [DATA.Field, DATA.Field, DATA.Field] }
arg0.group != null
arg0.group.name != null
arg0.group.name.toString one of { "g2116", "g42", "g46" }
arg0.group.effectif == 25
arg0.group.links != null
arg0.group.classes has only one value
arg0.group.classes != null
arg0.group.done != null
arg0.group.parent has only one value
arg0.group.parent != null
arg0.group.children == null
arg0.group.timeTable != null
arg0.field != null
arg0.field.type != null
arg0.field.name != null
arg0.field.duration != null
return == true
size(this.timeTable.slots[]) == 9
size(arg0.teach.fields[]) one of { 1, 3 }
this.maxWeekWorkedHours.day <= this.currentWeekWorkedHours.hour
this.maxWeekWorkedHours.day != orig(this.currentWeekWorkedHours.hour)
this.maxWeekWorkedHours.day != orig(this.currentWeekWorkedHours.min)
this.maxWeekWorkedHours.min < this.currentWeekWorkedHours.hour
this.maxWeekWorkedHours.min <= orig(this.currentWeekWorkedHours.hour)
this.maxWeekWorkedHours.min <= orig(this.currentWeekWorkedHours.min)
this.currentWeekWorkedHours.day % this.currentWeekWorkedHours.hour == 0
this.currentWeekWorkedHours.day <= orig(this.currentWeekWorkedHours.hour)
this.currentWeekWorkedHours.hour != this.currentWeekWorkedHours.min
this.currentWeekWorkedHours.hour != orig(this.currentWeekWorkedHours.hour)
this.currentWeekWorkedHours.hour != orig(this.currentWeekWorkedHours.min)
===========================================================================
DATA.Teacher.addLink(DATA.Link):::EXIT;condition="return == true"
===========================================================================
DATA.Teacher.addToCWWH(DATA.Time):::ENTER
this.maxWeekWorkedHours.min == this.currentWeekWorkedHours.day
this.maxWeekWorkedHours.min == arg0.day
this.firstName.toString one of { "Rainbow", "Rarity", "Twilight" }
this.lastName.toString one of { "", "Dash", "Sparkle" }
this.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field]
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg0 != null
arg0.hour one of { 2, 3, 4 }
arg0.min one of { 0, 30 }
size(this.fields[]) == 3
size(this.timeTable.slots[]) == 9
this.maxWeekWorkedHours.day != this.currentWeekWorkedHours.hour
this.maxWeekWorkedHours.day < arg0.hour
this.maxWeekWorkedHours.day != arg0.min
this.maxWeekWorkedHours.min < arg0.hour
this.maxWeekWorkedHours.min <= arg0.min
this.currentWeekWorkedHours.min != arg0.hour
this.currentWeekWorkedHours.min % arg0.hour == 0
this.currentWeekWorkedHours.min <= arg0.min
arg0.hour != arg0.min
arg0.min % arg0.hour == 0
===========================================================================
DATA.Teacher.addToCWWH(DATA.Time):::EXIT
this.firstName == return.firstName
this.firstName == orig(this.firstName)
this.firstName.toString == orig(this.firstName.toString)
this.lastName == return.lastName
this.lastName == orig(this.lastName)
this.lastName.toString == orig(this.lastName.toString)
this.maxWeekWorkedHours == return.maxWeekWorkedHours
this.maxWeekWorkedHours == orig(this.maxWeekWorkedHours)
this.maxWeekWorkedHours.day == return.maxWeekWorkedHours.day
this.maxWeekWorkedHours.day == return.maxWeekWorkedHours.hour
this.maxWeekWorkedHours.day == orig(this.maxWeekWorkedHours.day)
this.maxWeekWorkedHours.day == orig(this.maxWeekWorkedHours.hour)
this.maxWeekWorkedHours.min == arg0.day
this.currentWeekWorkedHours == return.currentWeekWorkedHours
this.currentWeekWorkedHours.day == arg0.day
this.currentWeekWorkedHours.hour == return.currentWeekWorkedHours.hour
this.currentWeekWorkedHours.min == return.currentWeekWorkedHours.min
this.fields == return.fields
this.fields == orig(this.fields)
this.fields[] == orig(this.fields[])
this.students == return.students
this.students == orig(this.students)
this.timeTable == return.timeTable
this.timeTable == orig(this.timeTable)
this.timeTable == orig(this.timeTable.owner.timeTable)
this.timeTable.slots == return.timeTable.slots
this.timeTable.slots == orig(this.timeTable.slots)
this.timeTable.slots[] == orig(this.timeTable.slots[])
this.timeTable.owner == return.timeTable.owner
this.timeTable.owner == orig(this.timeTable.owner)
this.timeTable.owner.getClass().getName() == return.timeTable.owner.getClass().getName()
this.timeTable.owner.getClass().getName() == orig(this.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
arg0.day == return.maxWeekWorkedHours.min
arg0.day == return.currentWeekWorkedHours.day
arg0.day == orig(this.maxWeekWorkedHours.min)
arg0.day == orig(this.currentWeekWorkedHours.day)
arg0.day == orig(arg0.day)
arg0.hour == orig(arg0.hour)
arg0.min == orig(arg0.min)
return == orig(this)
this.firstName.toString one of { "Rainbow", "Rarity", "Twilight" }
this.lastName.toString one of { "", "Dash", "Sparkle" }
this.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field]
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg0.day == 0
arg0.hour one of { 2, 3, 4 }
arg0.min one of { 0, 30 }
return != null
return.firstName.toString one of { "Rainbow", "Rarity", "Twilight" }
return.lastName.toString one of { "", "Dash", "Sparkle" }
return.fields[] elements != null
return.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field]
return.fields[].getClass().getName() elements == DATA.Field.class
return.timeTable.slots[] elements != null
return.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
return.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
size(this.fields[]) == 3
size(this.timeTable.slots[]) == 9
size(return.fields[]) == 3
size(return.timeTable.slots[]) == 9
this.maxWeekWorkedHours.day < this.currentWeekWorkedHours.hour
this.maxWeekWorkedHours.day < arg0.hour
this.maxWeekWorkedHours.day != arg0.min
this.maxWeekWorkedHours.day != orig(this.currentWeekWorkedHours.hour)
this.maxWeekWorkedHours.day != orig(this.currentWeekWorkedHours.min)
this.currentWeekWorkedHours.hour != this.currentWeekWorkedHours.min
this.currentWeekWorkedHours.hour > arg0.day
this.currentWeekWorkedHours.hour >= arg0.hour
this.currentWeekWorkedHours.hour != arg0.min
this.currentWeekWorkedHours.hour > orig(this.currentWeekWorkedHours.hour)
this.currentWeekWorkedHours.hour != orig(this.currentWeekWorkedHours.min)
this.currentWeekWorkedHours.min >= arg0.day
this.currentWeekWorkedHours.min != arg0.hour
this.currentWeekWorkedHours.min % arg0.hour == 0
this.currentWeekWorkedHours.min <= arg0.min
arg0.day < arg0.hour
arg0.day <= arg0.min
arg0.day <= orig(this.currentWeekWorkedHours.hour)
arg0.day <= orig(this.currentWeekWorkedHours.min)
arg0.hour != arg0.min
arg0.min % arg0.hour == 0
arg0.hour != orig(this.currentWeekWorkedHours.min)
orig(this.currentWeekWorkedHours.min) % arg0.hour == 0
arg0.min >= orig(this.currentWeekWorkedHours.min)
===========================================================================
DATA.Teacher.canTeach(DATA.Field, DATA.Group):::ENTER
arg0.type.duration == arg0.duration
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg0 != null
arg0.type != null
arg0.type.name != null
arg0.type.shortName != null
arg0.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
arg0.name != null
arg0.duration != null
arg0.duration.begin != null
arg0.duration.end != null
arg1 != null
arg1.name != null
arg1.name.toString one of { "g2116", "g42", "g46" }
arg1.effectif == 25
arg1.links != null
arg1.classes has only one value
arg1.classes != null
arg1.classes.keys has only one value
arg1.classes.keys != null
arg1.classes.keys[] contains no nulls and has only one value, of length 6
arg1.classes.keys[] elements != null
arg1.classes.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg1.classes.keys[].getClass().getName() elements == DATA.Field.class
arg1.classes.values has only one value
arg1.classes.values != null
arg1.classes.values[] contains no nulls and has only one value, of length 6
arg1.classes.values[] elements != null
arg1.classes.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
arg1.classes.values[].getClass().getName() elements == DATA.Time.class
arg1.done != null
arg1.done.keys != null
arg1.done.keys[] contains no nulls and has only one value, of length 6
arg1.done.keys[] elements != null
arg1.done.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg1.done.keys[].getClass().getName() elements == DATA.Field.class
arg1.done.values != null
arg1.done.values[] contains no nulls and has only one value, of length 6
arg1.done.values[] elements has only one value
arg1.done.values[] elements != null
arg1.done.values[].getClass().getName() == [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean]
arg1.done.values[].getClass().getName() elements == java.lang.Boolean.class
arg1.parent has only one value
arg1.parent != null
arg1.parent.name has only one value
arg1.parent.name != null
arg1.parent.name.toString == "Lanip"
arg1.parent.effectif == 100
arg1.parent.links has only one value
arg1.parent.links != null
arg1.parent.classes has only one value
arg1.parent.classes != null
arg1.parent.done has only one value
arg1.parent.done != null
arg1.parent.parent == null
arg1.parent.children has only one value
arg1.parent.children != null
arg1.parent.children.getClass().getName() == DATA.Group[].class
arg1.parent.children[] contains no nulls and has only one value, of length 2
arg1.parent.children[] elements != null
arg1.parent.children[].getClass().getName() == [DATA.Group, DATA.Group]
arg1.parent.children[].getClass().getName() elements == DATA.Group.class
arg1.parent.children[].name contains no nulls and has only one value, of length 2
arg1.parent.children[].name elements != null
arg1.parent.children[].name.toString == [g46, g42]
arg1.parent.children[].name.toString elements one of { "g42", "g46" }
arg1.parent.children[].effectif == [25, 25]
arg1.parent.children[].effectif elements == 25
arg1.parent.children[].links contains no nulls and has only one value, of length 2
arg1.parent.children[].links elements != null
arg1.parent.children[].classes contains no nulls and has only one value, of length 2
arg1.parent.children[].classes elements has only one value
arg1.parent.children[].classes elements != null
arg1.parent.children[].done contains no nulls and has only one value, of length 2
arg1.parent.children[].done elements != null
arg1.parent.children[].parent contains no nulls and has only one value, of length 2
arg1.parent.children[].parent elements has only one value
arg1.parent.children[].parent elements != null
arg1.parent.children[].children contains only nulls and has only one value, of length 2
arg1.parent.children[].children elements == null
arg1.parent.children[].children.getClass().getName() == [null, null]
arg1.parent.children[].children.getClass().getName() elements == null
arg1.parent.children[].timeTable contains no nulls and has only one value, of length 2
arg1.parent.children[].timeTable elements != null
arg1.parent.timeTable has only one value
arg1.parent.timeTable != null
arg1.children == null
arg1.timeTable != null
arg1.timeTable.slots != null
arg1.timeTable.slots[] elements != null
arg1.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
arg1.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg1.timeTable.owner != null
arg1.timeTable.owner.getClass().getName() == DATA.Group.class
size(this.timeTable.slots[]) == 9
size(arg1.classes.keys[]) == 6
size(arg1.classes.values[]) == 6
size(arg1.done.keys[]) == 6
size(arg1.done.values[]) == 6
size(arg1.parent.children[]) == 2
size(arg1.timeTable.slots[]) == 9
this.timeTable.owner.getClass().getName() != arg1.parent.children.getClass().getName()
this.timeTable.owner.getClass().getName() != arg1.timeTable.owner.getClass().getName()
arg1.effectif in arg1.parent.children[].effectif
arg1.parent.children[].effectif elements == arg1.effectif
arg1.classes in arg1.parent.children[].classes
arg1.parent.children[].classes elements == arg1.classes
arg1.parent in arg1.parent.children[].parent
arg1.parent.children[].parent elements == arg1.parent
arg1.parent.children.getClass().getName() != arg1.timeTable.owner.getClass().getName()
arg1.timeTable.owner.getClass().getName() in arg1.parent.children[].getClass().getName()
===========================================================================
DATA.Teacher.canTeach(DATA.Field, DATA.Group):::EXIT34
this.maxWeekWorkedHours.day == this.currentWeekWorkedHours.day
this.maxWeekWorkedHours.day == this.currentWeekWorkedHours.hour
this.maxWeekWorkedHours.day == orig(this.currentWeekWorkedHours.day)
this.maxWeekWorkedHours.day == orig(this.currentWeekWorkedHours.hour)
this.maxWeekWorkedHours.min == this.currentWeekWorkedHours.min
this.maxWeekWorkedHours.min == orig(this.currentWeekWorkedHours.min)
this.firstName has only one value
this.firstName.toString == "Apple"
this.lastName has only one value
this.lastName.toString == "Jack"
this.currentWeekWorkedHours has only one value
this.fields has only one value
this.fields[] contains no nulls and has only one value, of length 3
this.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field]
this.students has only one value
this.timeTable has only one value
this.timeTable.slots has only one value
this.timeTable.slots[] contains no nulls and has only one value, of length 9
this.timeTable.owner has only one value
arg0.type.name.toString one of { "Cours", "TD Conception" }
arg0.type.shortName.toString one of { "Amphith\351\342tre", "TD" }
arg0.name.toString one of { "Conception", "Physique" }
arg1.name.toString one of { "g2116", "g46" }
return == false
orig(this) has only one value
size(this.fields[]) == 3
===========================================================================
DATA.Teacher.canTeach(DATA.Field, DATA.Group):::EXIT34;condition="not(return == true)"
===========================================================================
DATA.Teacher.canTeach(DATA.Field, DATA.Group):::EXIT45
this.maxWeekWorkedHours.min == this.currentWeekWorkedHours.day
this.maxWeekWorkedHours.min == orig(this.currentWeekWorkedHours.day)
(return == false)  ==>  (arg1.name.toString one of { "g2116", "g46" })
(return == false)  ==>  (this.currentWeekWorkedHours.hour >= this.currentWeekWorkedHours.min)
(return == false)  ==>  (this.currentWeekWorkedHours.min == 0)
(return == false)  ==>  (this.maxWeekWorkedHours.day > this.currentWeekWorkedHours.min)
(return == false)  ==>  (this.maxWeekWorkedHours.min == this.currentWeekWorkedHours.min)
(return == true)  ==>  (arg1.name.toString one of { "g2116", "g42", "g46" })
(return == true)  ==>  (this.currentWeekWorkedHours.min one of { 0, 30 })
this.maxWeekWorkedHours.day != this.currentWeekWorkedHours.hour
===========================================================================
DATA.Teacher.canTeach(DATA.Field, DATA.Group):::EXIT45;condition="return == true"
===========================================================================
DATA.Teacher.canTeach(DATA.Field, DATA.Group):::EXIT45;condition="not(return == true)"
===========================================================================
DATA.Teacher.canTeach(DATA.Field, DATA.Group):::EXIT
this.firstName == orig(this.firstName)
this.firstName.toString == orig(this.firstName.toString)
this.lastName == orig(this.lastName)
this.lastName.toString == orig(this.lastName.toString)
this.maxWeekWorkedHours == orig(this.maxWeekWorkedHours)
this.maxWeekWorkedHours.day == orig(this.maxWeekWorkedHours.day)
this.maxWeekWorkedHours.day == orig(this.maxWeekWorkedHours.hour)
this.maxWeekWorkedHours.min == orig(this.maxWeekWorkedHours.min)
this.currentWeekWorkedHours == orig(this.currentWeekWorkedHours)
this.currentWeekWorkedHours.day == orig(this.currentWeekWorkedHours.day)
this.currentWeekWorkedHours.hour == orig(this.currentWeekWorkedHours.hour)
this.currentWeekWorkedHours.min == orig(this.currentWeekWorkedHours.min)
this.fields == orig(this.fields)
this.fields[] == orig(this.fields[])
this.students == orig(this.students)
this.timeTable == orig(this.timeTable)
this.timeTable == orig(this.timeTable.owner.timeTable)
this.timeTable.slots == orig(this.timeTable.slots)
this.timeTable.slots[] == orig(this.timeTable.slots[])
this.timeTable.owner == orig(this.timeTable.owner)
this.timeTable.owner.getClass().getName() == orig(this.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
arg0.type == orig(arg0.type)
arg0.type.name == orig(arg0.type.name)
arg0.type.name.toString == orig(arg0.type.name.toString)
arg0.type.shortName == orig(arg0.type.shortName)
arg0.type.shortName.toString == orig(arg0.type.shortName.toString)
arg0.type.duration == arg0.duration
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.duration == orig(arg0.type.duration)
arg0.duration == orig(arg0.duration)
arg0.duration.begin == orig(arg0.duration.begin)
arg0.duration.end == orig(arg0.duration.end)
arg1.name == orig(arg1.name)
arg1.name.toString == orig(arg1.name.toString)
arg1.effectif == orig(arg1.effectif)
arg1.links == orig(arg1.links)
arg1.classes == orig(arg1.classes)
arg1.classes.keys == orig(arg1.classes.keys)
arg1.classes.keys[] == orig(arg1.classes.keys[])
arg1.classes.values == orig(arg1.classes.values)
arg1.classes.values[] == orig(arg1.classes.values[])
arg1.done == orig(arg1.done)
arg1.done.keys == orig(arg1.done.keys)
arg1.done.keys[] == orig(arg1.done.keys[])
arg1.done.values == orig(arg1.done.values)
arg1.done.values[] == orig(arg1.done.values[])
arg1.parent == orig(arg1.parent)
arg1.parent.name == orig(arg1.parent.name)
arg1.parent.name.toString == orig(arg1.parent.name.toString)
arg1.parent.effectif == orig(arg1.parent.effectif)
arg1.parent.links == orig(arg1.parent.links)
arg1.parent.classes == orig(arg1.parent.classes)
arg1.parent.done == orig(arg1.parent.done)
arg1.parent.parent == orig(arg1.parent.parent)
arg1.parent.children == orig(arg1.parent.children)
arg1.parent.children.getClass().getName() == orig(arg1.parent.children.getClass().getName())
arg1.parent.children[] == orig(arg1.parent.children[])
arg1.parent.children[].name == orig(arg1.parent.children[].name)
arg1.parent.children[].effectif == orig(arg1.parent.children[].effectif)
arg1.parent.children[].links == orig(arg1.parent.children[].links)
arg1.parent.children[].classes == orig(arg1.parent.children[].classes)
arg1.parent.children[].done == orig(arg1.parent.children[].done)
arg1.parent.children[].parent == orig(arg1.parent.children[].parent)
arg1.parent.children[].children == orig(arg1.parent.children[].children)
arg1.parent.children[].timeTable == orig(arg1.parent.children[].timeTable)
arg1.parent.timeTable == orig(arg1.parent.timeTable)
arg1.children == orig(arg1.children)
arg1.timeTable == orig(arg1.timeTable)
arg1.timeTable.slots == orig(arg1.timeTable.slots)
arg1.timeTable.slots[] == orig(arg1.timeTable.slots[])
arg1.timeTable.owner == orig(arg1.timeTable.owner)
arg1.timeTable.owner.getClass().getName() == orig(arg1.timeTable.owner.getClass().getName())
(return == false)  ==>  (arg1.name.toString one of { "g2116", "g46" })
(return == false)  ==>  (this.currentWeekWorkedHours.day >= this.currentWeekWorkedHours.min)
(return == false)  ==>  (this.currentWeekWorkedHours.day one of { 0, 1 })
(return == false)  ==>  (this.currentWeekWorkedHours.hour >= this.currentWeekWorkedHours.min)
(return == false)  ==>  (this.currentWeekWorkedHours.min == 0)
(return == false)  ==>  (this.maxWeekWorkedHours.day > this.currentWeekWorkedHours.min)
(return == false)  ==>  (this.maxWeekWorkedHours.min == this.currentWeekWorkedHours.min)
(return == true)  ==>  (arg1.name.toString one of { "g2116", "g42", "g46" })
(return == true)  ==>  (this.currentWeekWorkedHours.day <= this.currentWeekWorkedHours.min)
(return == true)  ==>  (this.currentWeekWorkedHours.day == 0)
(return == true)  ==>  (this.currentWeekWorkedHours.min one of { 0, 30 })
(return == true)  ==>  (this.maxWeekWorkedHours.day != this.currentWeekWorkedHours.hour)
(return == true)  ==>  (this.maxWeekWorkedHours.day > this.currentWeekWorkedHours.day)
(return == true)  ==>  (this.maxWeekWorkedHours.min == this.currentWeekWorkedHours.day)
(this.currentWeekWorkedHours.day == 0)  <==>  (this.currentWeekWorkedHours.day <= this.currentWeekWorkedHours.min)
(this.currentWeekWorkedHours.day == 0)  <==>  (this.maxWeekWorkedHours.day != this.currentWeekWorkedHours.hour)
(this.currentWeekWorkedHours.day == 0)  <==>  (this.maxWeekWorkedHours.day > this.currentWeekWorkedHours.day)
(this.currentWeekWorkedHours.day == 0)  <==>  (this.maxWeekWorkedHours.min == this.currentWeekWorkedHours.day)
(this.currentWeekWorkedHours.day == 0)  ==>  (arg0.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" })
(this.currentWeekWorkedHours.day == 0)  ==>  (arg1.name.toString one of { "g2116", "g42", "g46" })
(this.currentWeekWorkedHours.day == 0)  ==>  (size(this.fields[]) one of { 1, 3 })
(this.currentWeekWorkedHours.day == 0)  ==>  (this.currentWeekWorkedHours.min one of { 0, 30 })
(this.currentWeekWorkedHours.day == 0)  ==>  (this.fields[].getClass().getName() one of { [DATA.Field], [DATA.Field, DATA.Field, DATA.Field] })
(this.currentWeekWorkedHours.day == 1)  <==>  (this.maxWeekWorkedHours.day == this.currentWeekWorkedHours.day)
(this.currentWeekWorkedHours.day == 1)  <==>  (this.maxWeekWorkedHours.day == this.currentWeekWorkedHours.hour)
(this.currentWeekWorkedHours.day == 1)  ==>  (arg0.name.toString one of { "Conception", "Physique" })
(this.currentWeekWorkedHours.day == 1)  ==>  (arg0.type.name.toString one of { "Cours", "TD Conception" })
(this.currentWeekWorkedHours.day == 1)  ==>  (arg0.type.shortName.toString one of { "Amphith\351\342tre", "TD" })
(this.currentWeekWorkedHours.day == 1)  ==>  (arg1.name.toString one of { "g2116", "g46" })
(this.currentWeekWorkedHours.day == 1)  ==>  (orig(this) has only one value)
(this.currentWeekWorkedHours.day == 1)  ==>  (return == false)
(this.currentWeekWorkedHours.day == 1)  ==>  (size(this.fields[]) == 3)
(this.currentWeekWorkedHours.day == 1)  ==>  (this.currentWeekWorkedHours has only one value)
(this.currentWeekWorkedHours.day == 1)  ==>  (this.currentWeekWorkedHours.hour == 1)
(this.currentWeekWorkedHours.day == 1)  ==>  (this.currentWeekWorkedHours.min == 0)
(this.currentWeekWorkedHours.day == 1)  ==>  (this.fields has only one value)
(this.currentWeekWorkedHours.day == 1)  ==>  (this.fields[] contains no nulls and has only one value, of length 3)
(this.currentWeekWorkedHours.day == 1)  ==>  (this.fields[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field])
(this.currentWeekWorkedHours.day == 1)  ==>  (this.firstName has only one value)
(this.currentWeekWorkedHours.day == 1)  ==>  (this.firstName.toString == "Apple")
(this.currentWeekWorkedHours.day == 1)  ==>  (this.lastName has only one value)
(this.currentWeekWorkedHours.day == 1)  ==>  (this.lastName.toString == "Jack")
(this.currentWeekWorkedHours.day == 1)  ==>  (this.maxWeekWorkedHours.min == this.currentWeekWorkedHours.min)
(this.currentWeekWorkedHours.day == 1)  ==>  (this.students has only one value)
(this.currentWeekWorkedHours.day == 1)  ==>  (this.timeTable has only one value)
(this.currentWeekWorkedHours.day == 1)  ==>  (this.timeTable.owner has only one value)
(this.currentWeekWorkedHours.day == 1)  ==>  (this.timeTable.slots has only one value)
(this.currentWeekWorkedHours.day == 1)  ==>  (this.timeTable.slots[] contains no nulls and has only one value, of length 9)
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg0.type != null
arg0.type.name != null
arg0.type.shortName != null
arg0.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
arg0.name != null
arg0.duration != null
arg0.duration.begin != null
arg0.duration.end != null
arg1.name != null
arg1.name.toString one of { "g2116", "g42", "g46" }
arg1.effectif == 25
arg1.links != null
arg1.classes has only one value
arg1.classes != null
arg1.classes.keys has only one value
arg1.classes.keys != null
arg1.classes.keys[] contains no nulls and has only one value, of length 6
arg1.classes.keys[] elements != null
arg1.classes.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg1.classes.keys[].getClass().getName() elements == DATA.Field.class
arg1.classes.values has only one value
arg1.classes.values != null
arg1.classes.values[] contains no nulls and has only one value, of length 6
arg1.classes.values[] elements != null
arg1.classes.values[].getClass().getName() == [DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time, DATA.Time]
arg1.classes.values[].getClass().getName() elements == DATA.Time.class
arg1.done != null
arg1.done.keys != null
arg1.done.keys[] contains no nulls and has only one value, of length 6
arg1.done.keys[] elements != null
arg1.done.keys[].getClass().getName() == [DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field, DATA.Field]
arg1.done.keys[].getClass().getName() elements == DATA.Field.class
arg1.done.values != null
arg1.done.values[] contains no nulls and has only one value, of length 6
arg1.done.values[] elements has only one value
arg1.done.values[] elements != null
arg1.done.values[].getClass().getName() == [java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean]
arg1.done.values[].getClass().getName() elements == java.lang.Boolean.class
arg1.parent has only one value
arg1.parent != null
arg1.parent.name has only one value
arg1.parent.name != null
arg1.parent.name.toString == "Lanip"
arg1.parent.effectif == 100
arg1.parent.links has only one value
arg1.parent.links != null
arg1.parent.classes has only one value
arg1.parent.classes != null
arg1.parent.done has only one value
arg1.parent.done != null
arg1.parent.parent == null
arg1.parent.children has only one value
arg1.parent.children != null
arg1.parent.children.getClass().getName() == DATA.Group[].class
arg1.parent.children[] contains no nulls and has only one value, of length 2
arg1.parent.children[] elements != null
arg1.parent.children[].getClass().getName() == [DATA.Group, DATA.Group]
arg1.parent.children[].getClass().getName() elements == DATA.Group.class
arg1.parent.children[].name contains no nulls and has only one value, of length 2
arg1.parent.children[].name elements != null
arg1.parent.children[].name.toString == [g46, g42]
arg1.parent.children[].name.toString elements one of { "g42", "g46" }
arg1.parent.children[].effectif == [25, 25]
arg1.parent.children[].effectif elements == 25
arg1.parent.children[].links contains no nulls and has only one value, of length 2
arg1.parent.children[].links elements != null
arg1.parent.children[].classes contains no nulls and has only one value, of length 2
arg1.parent.children[].classes elements has only one value
arg1.parent.children[].classes elements != null
arg1.parent.children[].done contains no nulls and has only one value, of length 2
arg1.parent.children[].done elements != null
arg1.parent.children[].parent contains no nulls and has only one value, of length 2
arg1.parent.children[].parent elements has only one value
arg1.parent.children[].parent elements != null
arg1.parent.children[].children contains only nulls and has only one value, of length 2
arg1.parent.children[].children elements == null
arg1.parent.children[].children.getClass().getName() == [null, null]
arg1.parent.children[].children.getClass().getName() elements == null
arg1.parent.children[].timeTable contains no nulls and has only one value, of length 2
arg1.parent.children[].timeTable elements != null
arg1.parent.timeTable has only one value
arg1.parent.timeTable != null
arg1.children == null
arg1.timeTable != null
arg1.timeTable.slots != null
arg1.timeTable.slots[] elements != null
arg1.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
arg1.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg1.timeTable.owner != null
arg1.timeTable.owner.getClass().getName() == DATA.Group.class
size(this.timeTable.slots[]) == 9
size(arg1.classes.keys[]) == 6
size(arg1.classes.values[]) == 6
size(arg1.done.keys[]) == 6
size(arg1.done.values[]) == 6
size(arg1.parent.children[]) == 2
size(arg1.timeTable.slots[]) == 9
this.timeTable.owner.getClass().getName() != arg1.parent.children.getClass().getName()
this.timeTable.owner.getClass().getName() != arg1.timeTable.owner.getClass().getName()
arg1.effectif in arg1.parent.children[].effectif
arg1.parent.children[].effectif elements == arg1.effectif
arg1.classes in arg1.parent.children[].classes
arg1.parent.children[].classes elements == arg1.classes
arg1.parent in arg1.parent.children[].parent
arg1.parent.children[].parent elements == arg1.parent
arg1.parent.children.getClass().getName() != arg1.timeTable.owner.getClass().getName()
arg1.timeTable.owner.getClass().getName() in arg1.parent.children[].getClass().getName()
===========================================================================
DATA.Teacher.canTeach(DATA.Field, DATA.Group):::EXIT;condition="return == true"
this.maxWeekWorkedHours.min == this.currentWeekWorkedHours.day
this.maxWeekWorkedHours.min == orig(this.currentWeekWorkedHours.day)
return == true
this.maxWeekWorkedHours.day != this.currentWeekWorkedHours.hour
===========================================================================
DATA.Teacher.canTeach(DATA.Field, DATA.Group):::EXIT;condition="not(return == true)"
this.maxWeekWorkedHours.min == this.currentWeekWorkedHours.min
this.maxWeekWorkedHours.min == orig(this.currentWeekWorkedHours.min)
arg1.name.toString one of { "g2116", "g46" }
return == false
===========================================================================
DATA.Teacher.getCWWH():::ENTER
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
size(this.timeTable.slots[]) == 9
===========================================================================
DATA.Teacher.getCWWH():::EXIT
this.firstName == orig(this.firstName)
this.firstName.toString == orig(this.firstName.toString)
this.lastName == orig(this.lastName)
this.lastName.toString == orig(this.lastName.toString)
this.maxWeekWorkedHours == orig(this.maxWeekWorkedHours)
this.maxWeekWorkedHours.day == orig(this.maxWeekWorkedHours.day)
this.maxWeekWorkedHours.day == orig(this.maxWeekWorkedHours.hour)
this.maxWeekWorkedHours.min == orig(this.maxWeekWorkedHours.min)
this.currentWeekWorkedHours == return
this.currentWeekWorkedHours.day == return.day
this.currentWeekWorkedHours.hour == return.hour
this.currentWeekWorkedHours.min == return.min
this.fields == orig(this.fields)
this.fields[] == orig(this.fields[])
this.students == orig(this.students)
this.timeTable == orig(this.timeTable)
this.timeTable == orig(this.timeTable.owner.timeTable)
this.timeTable.slots == orig(this.timeTable.slots)
this.timeTable.slots[] == orig(this.timeTable.slots[])
this.timeTable.owner == orig(this.timeTable.owner)
this.timeTable.owner.getClass().getName() == orig(this.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
return == orig(this.currentWeekWorkedHours)
return.day == orig(this.currentWeekWorkedHours.day)
return.hour == orig(this.currentWeekWorkedHours.hour)
return.min == orig(this.currentWeekWorkedHours.min)
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
return != null
return.day one of { 0, 1 }
return.hour >= 0
return.min one of { 0, 30 }
size(this.timeTable.slots[]) == 9
this.maxWeekWorkedHours.day >= return.day
this.maxWeekWorkedHours.day != return.min
this.maxWeekWorkedHours.min <= return.day
this.maxWeekWorkedHours.min <= return.hour
this.maxWeekWorkedHours.min <= return.min
return.day <= return.hour
===========================================================================
DATA.Teacher.getFields():::ENTER
this.maxWeekWorkedHours.min == this.currentWeekWorkedHours.day
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
size(this.timeTable.slots[]) == 9
this.maxWeekWorkedHours.day != this.currentWeekWorkedHours.hour
===========================================================================
DATA.Teacher.getFields():::EXIT
this.firstName == orig(this.firstName)
this.firstName.toString == orig(this.firstName.toString)
this.lastName == orig(this.lastName)
this.lastName.toString == orig(this.lastName.toString)
this.maxWeekWorkedHours == orig(this.maxWeekWorkedHours)
this.maxWeekWorkedHours.day == orig(this.maxWeekWorkedHours.day)
this.maxWeekWorkedHours.day == orig(this.maxWeekWorkedHours.hour)
this.maxWeekWorkedHours.min == this.currentWeekWorkedHours.day
this.maxWeekWorkedHours.min == orig(this.maxWeekWorkedHours.min)
this.maxWeekWorkedHours.min == orig(this.currentWeekWorkedHours.day)
this.currentWeekWorkedHours == orig(this.currentWeekWorkedHours)
this.currentWeekWorkedHours.hour == orig(this.currentWeekWorkedHours.hour)
this.currentWeekWorkedHours.min == orig(this.currentWeekWorkedHours.min)
this.fields == return
this.fields[] == orig(this.fields[])
this.students == orig(this.students)
this.timeTable == orig(this.timeTable)
this.timeTable == orig(this.timeTable.owner.timeTable)
this.timeTable.slots == orig(this.timeTable.slots)
this.timeTable.slots[] == orig(this.timeTable.slots[])
this.timeTable.owner == orig(this.timeTable.owner)
this.timeTable.owner.getClass().getName() == orig(this.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
return == orig(this.fields)
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
return != null
return[] elements != null
return[].getClass().getName() elements == DATA.Field.class
return[].getClass().getName() one of { [DATA.Field], [DATA.Field, DATA.Field, DATA.Field] }
size(this.timeTable.slots[]) == 9
size(return[]) one of { 1, 3 }
this.maxWeekWorkedHours.day != this.currentWeekWorkedHours.hour
===========================================================================
DATA.Teacher.getLinks():::ENTER
this.maxWeekWorkedHours.min == this.currentWeekWorkedHours.min
===========================================================================
DATA.Teacher.getLinks():::EXIT
this.firstName == orig(this.firstName)
this.firstName.toString == orig(this.firstName.toString)
this.lastName == orig(this.lastName)
this.lastName.toString == orig(this.lastName.toString)
this.maxWeekWorkedHours == orig(this.maxWeekWorkedHours)
this.maxWeekWorkedHours.day == orig(this.maxWeekWorkedHours.day)
this.maxWeekWorkedHours.day == orig(this.maxWeekWorkedHours.hour)
this.maxWeekWorkedHours.min == this.currentWeekWorkedHours.min
this.maxWeekWorkedHours.min == orig(this.maxWeekWorkedHours.min)
this.maxWeekWorkedHours.min == orig(this.currentWeekWorkedHours.min)
this.currentWeekWorkedHours == orig(this.currentWeekWorkedHours)
this.currentWeekWorkedHours.day == orig(this.currentWeekWorkedHours.day)
this.currentWeekWorkedHours.hour == orig(this.currentWeekWorkedHours.hour)
this.fields == orig(this.fields)
this.fields[] == orig(this.fields[])
this.students == return
this.timeTable == orig(this.timeTable)
this.timeTable == orig(this.timeTable.owner.timeTable)
this.timeTable.slots == orig(this.timeTable.slots)
this.timeTable.slots[] == orig(this.timeTable.slots[])
this.timeTable.owner == orig(this.timeTable.owner)
this.timeTable.owner.getClass().getName() == orig(this.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
return == orig(this.students)
return != null
===========================================================================
DATA.Teacher.getMWWH():::ENTER
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
size(this.timeTable.slots[]) == 9
===========================================================================
DATA.Teacher.getMWWH():::EXIT
this.firstName == orig(this.firstName)
this.firstName.toString == orig(this.firstName.toString)
this.lastName == orig(this.lastName)
this.lastName.toString == orig(this.lastName.toString)
this.maxWeekWorkedHours == return
this.maxWeekWorkedHours.day == return.day
this.maxWeekWorkedHours.hour == return.day
this.maxWeekWorkedHours.min == return.min
this.currentWeekWorkedHours == orig(this.currentWeekWorkedHours)
this.currentWeekWorkedHours.day == orig(this.currentWeekWorkedHours.day)
this.currentWeekWorkedHours.hour == orig(this.currentWeekWorkedHours.hour)
this.currentWeekWorkedHours.min == orig(this.currentWeekWorkedHours.min)
this.fields == orig(this.fields)
this.fields[] == orig(this.fields[])
this.students == orig(this.students)
this.timeTable == orig(this.timeTable)
this.timeTable == orig(this.timeTable.owner.timeTable)
this.timeTable.slots == orig(this.timeTable.slots)
this.timeTable.slots[] == orig(this.timeTable.slots[])
this.timeTable.owner == orig(this.timeTable.owner)
this.timeTable.owner.getClass().getName() == orig(this.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
return == orig(this.maxWeekWorkedHours)
return.day == return.hour
return.day == orig(this.maxWeekWorkedHours.day)
return.day == orig(this.maxWeekWorkedHours.hour)
return.min == orig(this.maxWeekWorkedHours.min)
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
return has only one value
return != null
return.day == 1
return.min == 0
size(this.timeTable.slots[]) == 9
this.currentWeekWorkedHours.day <= return.day
this.currentWeekWorkedHours.day >= return.min
this.currentWeekWorkedHours.hour >= return.min
this.currentWeekWorkedHours.min != return.day
this.currentWeekWorkedHours.min >= return.min
===========================================================================
DATA.Teacher.knows(DATA.Field):::ENTER
arg0.type.duration == arg0.duration
arg0 != null
arg0.type != null
arg0.type.name != null
arg0.type.shortName != null
arg0.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
arg0.name != null
arg0.duration != null
arg0.duration.begin != null
arg0.duration.end != null
===========================================================================
DATA.Teacher.knows(DATA.Field):::EXIT51
return == true
===========================================================================
DATA.Teacher.knows(DATA.Field):::EXIT51;condition="return == true"
===========================================================================
DATA.Teacher.knows(DATA.Field):::EXIT52
return == false
===========================================================================
DATA.Teacher.knows(DATA.Field):::EXIT52;condition="not(return == true)"
===========================================================================
DATA.Teacher.knows(DATA.Field):::EXIT
this.firstName == orig(this.firstName)
this.firstName.toString == orig(this.firstName.toString)
this.lastName == orig(this.lastName)
this.lastName.toString == orig(this.lastName.toString)
this.maxWeekWorkedHours == orig(this.maxWeekWorkedHours)
this.maxWeekWorkedHours.day == orig(this.maxWeekWorkedHours.day)
this.maxWeekWorkedHours.day == orig(this.maxWeekWorkedHours.hour)
this.maxWeekWorkedHours.min == orig(this.maxWeekWorkedHours.min)
this.currentWeekWorkedHours == orig(this.currentWeekWorkedHours)
this.currentWeekWorkedHours.day == orig(this.currentWeekWorkedHours.day)
this.currentWeekWorkedHours.hour == orig(this.currentWeekWorkedHours.hour)
this.currentWeekWorkedHours.min == orig(this.currentWeekWorkedHours.min)
this.fields == orig(this.fields)
this.fields[] == orig(this.fields[])
this.students == orig(this.students)
this.timeTable == orig(this.timeTable)
this.timeTable == orig(this.timeTable.owner.timeTable)
this.timeTable.slots == orig(this.timeTable.slots)
this.timeTable.slots[] == orig(this.timeTable.slots[])
this.timeTable.owner == orig(this.timeTable.owner)
this.timeTable.owner.getClass().getName() == orig(this.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
arg0.type == orig(arg0.type)
arg0.type.name == orig(arg0.type.name)
arg0.type.name.toString == orig(arg0.type.name.toString)
arg0.type.shortName == orig(arg0.type.shortName)
arg0.type.shortName.toString == orig(arg0.type.shortName.toString)
arg0.type.duration == arg0.duration
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.duration == orig(arg0.type.duration)
arg0.duration == orig(arg0.duration)
arg0.duration.begin == orig(arg0.duration.begin)
arg0.duration.end == orig(arg0.duration.end)
arg0.type != null
arg0.type.name != null
arg0.type.shortName != null
arg0.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
arg0.name != null
arg0.duration != null
arg0.duration.begin != null
arg0.duration.end != null
===========================================================================
DATA.Teacher.knows(DATA.Field):::EXIT;condition="return == true"
return == true
===========================================================================
DATA.Teacher.knows(DATA.Field):::EXIT;condition="not(return == true)"
return == false
===========================================================================
DATA.Teacher.setCWWH(DATA.Time):::ENTER
this.maxWeekWorkedHours.min == this.currentWeekWorkedHours.day
this.maxWeekWorkedHours.min == arg0.day
this.maxWeekWorkedHours.min == arg0.hour
this.maxWeekWorkedHours.min == arg0.min
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
size(this.timeTable.slots[]) == 9
===========================================================================
DATA.Teacher.setCWWH(DATA.Time):::EXIT
this.firstName == return.firstName
this.firstName == orig(this.firstName)
this.firstName.toString == orig(this.firstName.toString)
this.lastName == return.lastName
this.lastName == orig(this.lastName)
this.lastName.toString == orig(this.lastName.toString)
this.maxWeekWorkedHours == return.maxWeekWorkedHours
this.maxWeekWorkedHours == orig(this.maxWeekWorkedHours)
this.maxWeekWorkedHours.day == return.maxWeekWorkedHours.day
this.maxWeekWorkedHours.day == return.maxWeekWorkedHours.hour
this.maxWeekWorkedHours.day == orig(this.maxWeekWorkedHours.day)
this.maxWeekWorkedHours.day == orig(this.maxWeekWorkedHours.hour)
this.maxWeekWorkedHours.min == arg0.day
this.currentWeekWorkedHours == return.currentWeekWorkedHours
this.currentWeekWorkedHours == orig(arg0)
this.currentWeekWorkedHours.day == arg0.day
this.currentWeekWorkedHours.hour == arg0.day
this.currentWeekWorkedHours.min == arg0.day
this.fields == return.fields
this.fields == orig(this.fields)
this.fields[] == orig(this.fields[])
this.students == return.students
this.students == orig(this.students)
this.timeTable == return.timeTable
this.timeTable == orig(this.timeTable)
this.timeTable == orig(this.timeTable.owner.timeTable)
this.timeTable.slots == return.timeTable.slots
this.timeTable.slots == orig(this.timeTable.slots)
this.timeTable.slots[] == orig(this.timeTable.slots[])
this.timeTable.owner == return.timeTable.owner
this.timeTable.owner == orig(this.timeTable.owner)
this.timeTable.owner.getClass().getName() == return.timeTable.owner.getClass().getName()
this.timeTable.owner.getClass().getName() == orig(this.timeTable.owner.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
arg0.day == arg0.hour
arg0.day == arg0.min
arg0.day == return.maxWeekWorkedHours.min
arg0.day == return.currentWeekWorkedHours.day
arg0.day == return.currentWeekWorkedHours.hour
arg0.day == return.currentWeekWorkedHours.min
arg0.day == orig(this.maxWeekWorkedHours.min)
arg0.day == orig(this.currentWeekWorkedHours.day)
arg0.day == orig(arg0.day)
arg0.day == orig(arg0.hour)
arg0.day == orig(arg0.min)
return == orig(this)
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
arg0.day == 0
return.fields[].getClass().getName() elements == DATA.Field.class
return.fields[].getClass().getName() one of { [DATA.Field], [DATA.Field, DATA.Field, DATA.Field] }
return.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
return.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
size(this.timeTable.slots[]) == 9
size(return.fields[]) one of { 1, 3 }
size(return.timeTable.slots[]) == 9
===========================================================================
DATA.Time:::OBJECT
this.day >= 0
===========================================================================
DATA.Time.Time():::EXIT
this.day == this.hour
this.day == this.min
this.day == 0
===========================================================================
DATA.Time.Time(byte, byte, byte):::ENTER
arg0 >= 0
===========================================================================
DATA.Time.Time(byte, byte, byte):::EXIT
this.day >= orig(arg0)
this.min <= orig(arg2)
===========================================================================
DATA.Time.Time(int):::ENTER
arg0 >= 0
===========================================================================
DATA.Time.Time(int):::EXIT
this.hour >= 0
this.min >= 0
this.day <= this.hour
this.day <= orig(arg0)
this.hour <= orig(arg0)
this.min <= orig(arg0)
===========================================================================
DATA.Time.add(DATA.Time):::ENTER
this.hour >= 0
this.min >= 0
arg0 != null
arg0.day one of { 0, 1 }
arg0.hour >= 0
arg0.min >= 0
arg0.day <= arg0.hour
===========================================================================
DATA.Time.add(DATA.Time):::EXIT
this.day == orig(this.day)
this.hour == orig(this.hour)
this.min == orig(this.min)
arg0.day == orig(arg0.day)
arg0.hour == orig(arg0.hour)
arg0.min == orig(arg0.min)
this.hour >= 0
this.min >= 0
arg0.day one of { 0, 1 }
arg0.hour >= 0
arg0.min >= 0
return != null
return.day >= 0
return.min >= 0
this.day <= return.day
arg0.day <= arg0.hour
arg0.day <= return.day
===========================================================================
DATA.Time.clone():::ENTER
this.min == 0
this.day <= this.hour
this.day >= this.min
this.hour >= this.min
===========================================================================
DATA.Time.clone():::EXIT
this.day == return.day
this.day == orig(this.day)
this.hour == return.hour
this.hour == orig(this.hour)
this.min == return.min
this.min == orig(this.min)
this.min == 0
return != null
this.day <= this.hour
this.day >= this.min
this.hour >= this.min
===========================================================================
DATA.Time.divideBy(DATA.Time):::ENTER
this.day one of { 0, 1 }
this.hour >= 0
this.min one of { 0, 30 }
arg0 != null
arg0.day one of { 0, 1, 3 }
arg0.min >= 0
this.day <= this.hour
this.day <= arg0.day
this.day <= arg0.hour
arg0.day != arg0.min
===========================================================================
DATA.Time.divideBy(DATA.Time):::EXIT123
===========================================================================
DATA.Time.divideBy(DATA.Time):::EXIT
this.day == orig(this.day)
this.hour == orig(this.hour)
this.min == orig(this.min)
arg0.day == orig(arg0.day)
arg0.hour == orig(arg0.hour)
arg0.min == orig(arg0.min)
this.day one of { 0, 1 }
this.hour >= 0
this.min one of { 0, 30 }
arg0.day one of { 0, 1, 3 }
arg0.min >= 0
this.day <= this.hour
this.day <= arg0.day
this.day <= arg0.hour
arg0.day != arg0.min
===========================================================================
DATA.Time.divideBy(double):::ENTER
this.day one of { 0, 1 }
this.min one of { 0, 30 }
arg0 one of { 1.0, 3.0 }
this.day % this.hour == 0
this.day <= this.hour
this.hour != this.min
this.min % this.hour == 0
===========================================================================
DATA.Time.divideBy(double):::EXIT114
===========================================================================
DATA.Time.divideBy(double):::EXIT
this.day == orig(this.day)
this.hour == orig(this.hour)
this.min == orig(this.min)
this.day one of { 0, 1 }
this.min one of { 0, 30 }
return != null
return.day one of { 0, 1 }
return.hour >= 0
this.day % this.hour == 0
this.day <= this.hour
this.day >= return.day
this.day <= return.hour
this.day != return.min
this.hour != this.min
this.min % this.hour == 0
return.day % this.hour == 0
this.hour >= return.day
this.hour != return.min
this.min <= return.min
return.day <= return.hour
return.day != return.min
return.hour != return.min
===========================================================================
DATA.Time.equals(DATA.Time):::ENTER
this.min >= 0
arg0 != null
arg0.day >= 0
arg0.min one of { 0, 30 }
this.hour >= arg0.day
arg0.day <= arg0.hour
===========================================================================
DATA.Time.equals(DATA.Time):::EXIT
this.day == orig(this.day)
this.hour == orig(this.hour)
this.min == orig(this.min)
arg0.day == orig(arg0.day)
arg0.hour == orig(arg0.hour)
arg0.min == orig(arg0.min)
(return == true)  ==>  (arg0.day < arg0.hour)
(return == true)  ==>  (arg0.hour != arg0.min)
(return == true)  ==>  (this.day < arg0.hour)
(return == true)  ==>  (this.day < this.hour)
(return == true)  ==>  (this.day == arg0.day)
(return == true)  ==>  (this.hour != arg0.min)
(return == true)  ==>  (this.hour != this.min)
(return == true)  ==>  (this.hour == arg0.hour)
(return == true)  ==>  (this.hour > arg0.day)
(return == true)  ==>  (this.min != arg0.hour)
(return == true)  ==>  (this.min == arg0.min)
(return == true)  ==>  (this.min one of { 0, 30 })
this.min >= 0
arg0.day >= 0
arg0.min one of { 0, 30 }
this.hour >= arg0.day
arg0.day <= arg0.hour
===========================================================================
DATA.Time.equals(DATA.Time):::EXIT;condition="return == true"
this.day == arg0.day
this.day == orig(arg0.day)
this.hour == arg0.hour
this.hour == orig(arg0.hour)
this.min == arg0.min
this.min == orig(arg0.min)
this.min one of { 0, 30 }
return == true
this.day < this.hour
this.hour != this.min
===========================================================================
DATA.Time.equals(DATA.Time):::EXIT;condition="not(return == true)"
return == false
===========================================================================
DATA.Time.format():::ENTER
===========================================================================
DATA.Time.format():::EXIT
this.day >= orig(this.day)
this.min <= orig(this.min)
===========================================================================
DATA.Time.getDay():::ENTER
this.hour >= 0
this.min >= 0
this.day <= this.hour
===========================================================================
DATA.Time.getDay():::EXIT
this.day == return
this.hour == orig(this.hour)
this.min == orig(this.min)
return == orig(this.day)
this.hour >= 0
this.min >= 0
return >= 0
this.hour >= return
===========================================================================
DATA.Time.getMin():::ENTER
this.day one of { 0, 1 }
this.hour >= 0
this.min >= 0
this.day <= this.hour
===========================================================================
DATA.Time.getMin():::EXIT
this.day == orig(this.day)
this.hour == orig(this.hour)
this.min == return
return == orig(this.min)
this.day one of { 0, 1 }
this.hour >= 0
return >= 0
this.day <= this.hour
===========================================================================
DATA.Time.isLessThan(DATA.Time):::ENTER
this.min one of { 0, 30 }
arg0 != null
arg0.day >= 0
arg0.min one of { -30, 0, 30 }
this.day <= this.hour
this.hour >= arg0.day
===========================================================================
DATA.Time.isLessThan(DATA.Time):::EXIT
this.day == orig(this.day)
this.hour == orig(this.hour)
this.min == orig(this.min)
arg0.day == orig(arg0.day)
arg0.hour == orig(arg0.hour)
arg0.min == orig(arg0.min)
(return == false)  ==>  (arg0.min one of { -30, 0, 30 })
(return == false)  ==>  (this.day < this.hour)
(return == false)  ==>  (this.day >= arg0.day)
(return == false)  ==>  (this.hour != arg0.min)
(return == false)  ==>  (this.hour != this.min)
(return == false)  ==>  (this.hour > arg0.day)
(return == true)  ==>  (arg0.day <= arg0.hour)
(return == true)  ==>  (arg0.hour != arg0.min)
(return == true)  ==>  (arg0.min one of { 0, 30 })
(return == true)  ==>  (this.day < arg0.hour)
(return == true)  ==>  (this.day <= arg0.day)
(return == true)  ==>  (this.min != arg0.hour)
this.min one of { 0, 30 }
arg0.day >= 0
arg0.min one of { -30, 0, 30 }
this.day <= this.hour
this.hour >= arg0.day
===========================================================================
DATA.Time.isLessThan(DATA.Time):::EXIT;condition="return == true"
arg0.min one of { 0, 30 }
return == true
this.day <= arg0.day
this.day < arg0.hour
this.min != arg0.hour
arg0.day <= arg0.hour
arg0.hour != arg0.min
===========================================================================
DATA.Time.isLessThan(DATA.Time):::EXIT;condition="not(return == true)"
return == false
this.day < this.hour
this.day >= arg0.day
this.hour != this.min
this.hour > arg0.day
this.hour != arg0.min
===========================================================================
DATA.Time.isMoreThan(DATA.Time):::ENTER
this.min one of { 0, 30 }
arg0 != null
arg0.day >= 0
arg0.min one of { 0, 30 }
this.day <= this.hour
this.day <= arg0.hour
===========================================================================
DATA.Time.isMoreThan(DATA.Time):::EXIT
this.day == orig(this.day)
this.hour == orig(this.hour)
this.min == orig(this.min)
arg0.day == orig(arg0.day)
arg0.hour == orig(arg0.hour)
arg0.min == orig(arg0.min)
(return == false)  ==>  (this.day <= arg0.day)
(return == true)  ==>  (arg0.day <= arg0.hour)
(return == true)  ==>  (this.day < this.hour)
(return == true)  ==>  (this.day >= arg0.day)
(return == true)  ==>  (this.hour != arg0.hour)
(return == true)  ==>  (this.hour != arg0.min)
(return == true)  ==>  (this.hour != this.min)
(return == true)  ==>  (this.hour > arg0.day)
this.min one of { 0, 30 }
arg0.day >= 0
arg0.min one of { 0, 30 }
this.day <= this.hour
this.day <= arg0.hour
===========================================================================
DATA.Time.isMoreThan(DATA.Time):::EXIT;condition="return == true"
return == true
this.day < this.hour
this.day >= arg0.day
this.hour != this.min
this.hour > arg0.day
this.hour != arg0.hour
this.hour != arg0.min
arg0.day <= arg0.hour
===========================================================================
DATA.Time.isMoreThan(DATA.Time):::EXIT;condition="not(return == true)"
return == false
this.day <= arg0.day
===========================================================================
DATA.Time.isntLessThan(DATA.Time):::ENTER
this.hour >= 0
this.min >= 0
arg0 != null
arg0.day >= 0
arg0.hour >= 1
arg0.min one of { 0, 30 }
this.day <= this.hour
this.day < arg0.hour
this.hour >= arg0.day
arg0.day < arg0.hour
arg0.hour != arg0.min
===========================================================================
DATA.Time.isntLessThan(DATA.Time):::EXIT
this.day == orig(this.day)
this.hour == orig(this.hour)
this.min == orig(this.min)
arg0.day == orig(arg0.day)
arg0.hour == orig(arg0.hour)
arg0.min == orig(arg0.min)
(return == false)  ==>  (this.day <= arg0.day)
(return == true)  ==>  (this.day < this.hour)
(return == true)  ==>  (this.day >= arg0.day)
(return == true)  ==>  (this.hour != arg0.min)
(return == true)  ==>  (this.hour != this.min)
(return == true)  ==>  (this.hour > arg0.day)
(return == true)  ==>  (this.min != arg0.hour)
(return == true)  ==>  (this.min one of { 0, 30 })
this.hour >= 0
this.min >= 0
arg0.day >= 0
arg0.hour >= 1
arg0.min one of { 0, 30 }
this.day <= this.hour
this.day < arg0.hour
this.hour >= arg0.day
arg0.day < arg0.hour
arg0.hour != arg0.min
===========================================================================
DATA.Time.isntLessThan(DATA.Time):::EXIT;condition="return == true"
this.min one of { 0, 30 }
return == true
this.day < this.hour
this.day >= arg0.day
this.hour != this.min
this.hour > arg0.day
this.hour != arg0.min
this.min != arg0.hour
===========================================================================
DATA.Time.isntLessThan(DATA.Time):::EXIT;condition="not(return == true)"
return == false
this.day <= arg0.day
===========================================================================
DATA.Time.isntMoreThan(DATA.Time):::ENTER
this.min >= 0
arg0 != null
arg0.day >= 0
arg0.min one of { 0, 30 }
this.day < this.hour
this.day >= arg0.day
this.day < arg0.hour
this.hour > arg0.day
this.hour != arg0.min
arg0.day < arg0.hour
arg0.hour != arg0.min
===========================================================================
DATA.Time.isntMoreThan(DATA.Time):::EXIT
this.day == orig(this.day)
this.hour == orig(this.hour)
this.min == orig(this.min)
arg0.day == orig(arg0.day)
arg0.hour == orig(arg0.hour)
arg0.min == orig(arg0.min)
(return == false)  ==>  (this.hour != this.min)
(return == false)  ==>  (this.min != arg0.hour)
(return == true)  ==>  (this.day == arg0.day)
(return == true)  ==>  (this.hour <= arg0.hour)
(return == true)  ==>  (this.min >= arg0.min)
this.min >= 0
arg0.day >= 0
arg0.min one of { 0, 30 }
this.day < this.hour
this.day >= arg0.day
this.day < arg0.hour
this.hour > arg0.day
this.hour != arg0.min
arg0.day < arg0.hour
arg0.hour != arg0.min
===========================================================================
DATA.Time.isntMoreThan(DATA.Time):::EXIT;condition="return == true"
this.day == arg0.day
this.day == orig(arg0.day)
return == true
this.hour <= arg0.hour
this.min >= arg0.min
===========================================================================
DATA.Time.isntMoreThan(DATA.Time):::EXIT;condition="not(return == true)"
return == false
this.hour != this.min
this.min != arg0.hour
===========================================================================
DATA.Time.substract(DATA.Time):::ENTER
this.min >= 0
arg0 != null
arg0.day >= 0
arg0.hour >= 0
arg0.min >= 0
this.day <= this.hour
this.day >= arg0.day
this.hour != this.min
this.hour > arg0.day
arg0.day <= arg0.hour
===========================================================================
DATA.Time.substract(DATA.Time):::EXIT
this.day == orig(this.day)
this.hour == orig(this.hour)
this.min == orig(this.min)
arg0.day == orig(arg0.day)
arg0.hour == orig(arg0.hour)
arg0.min == orig(arg0.min)
this.min >= 0
arg0.day >= 0
arg0.hour >= 0
arg0.min >= 0
return != null
return.day one of { 0, 1 }
return.min one of { -30, 0, 30 }
this.day <= this.hour
this.day >= arg0.day
this.day >= return.day
this.hour != this.min
this.hour > arg0.day
return.day % this.hour == 0
this.hour >= return.day
this.hour != return.min
arg0.day <= arg0.hour
===========================================================================
DATA.Time.toMin():::ENTER
===========================================================================
DATA.Time.toMin():::EXIT
this.day == orig(this.day)
this.hour == orig(this.hour)
this.min == orig(this.min)
===========================================================================
DATA.Timeable:::OBJECT
this == this.timeTable.owner
this.getClass().getName() == this.timeTable.owner.getClass().getName()
this.timeTable == this.timeTable.owner.timeTable
this.timeTable != null
this.timeTable.slots != null
this.timeTable.slots[] elements != null
this.timeTable.owner != null
DATA.WeekTable.minDelta has only one value
DATA.WeekTable.minDelta != null
DATA.WeekTable.minDelta.day == 0
DATA.WeekTable.minDelta.hour == 0
DATA.WeekTable.minDelta.min == 1
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
DATA.WeekTable.defaultWeek.slots has only one value
DATA.WeekTable.defaultWeek.slots != null
DATA.WeekTable.defaultWeek.slots[] contains no nulls and has only one value, of length 9
DATA.WeekTable.defaultWeek.slots[] elements != null
DATA.WeekTable.defaultWeek.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
DATA.WeekTable.defaultWeek.slots[].getClass().getName() elements == DATA.Slot.class
DATA.WeekTable.defaultWeek.owner == null
size(DATA.WeekTable.defaultWeek.slots[]) == 9
===========================================================================
DATA.Timeable.Timeable():::EXIT
this.timeTable.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.timeTable.slots[].getClass().getName() elements == DATA.Slot.class
size(this.timeTable.slots[]) == 9
===========================================================================
DATA.Timeable.addLesson(DATA.Lesson):::ENTER
arg0.field.type == arg0.place.type
arg0.begin.day == arg0.end.day
arg0 != null
arg0.teacher != null
arg0.teacher.firstName != null
arg0.teacher.lastName != null
arg0.teacher.maxWeekWorkedHours has only one value
arg0.teacher.maxWeekWorkedHours != null
arg0.teacher.currentWeekWorkedHours != null
arg0.teacher.fields != null
arg0.teacher.fields[] elements != null
arg0.teacher.fields[].getClass().getName() elements == DATA.Field.class
arg0.teacher.fields[].getClass().getName() one of { [DATA.Field], [DATA.Field, DATA.Field, DATA.Field] }
arg0.teacher.students != null
arg0.teacher.timeTable != null
arg0.students != null
arg0.students.name != null
arg0.students.name.toString one of { "g2116", "g42", "g46" }
arg0.students.effectif == 25
arg0.students.links != null
arg0.students.classes has only one value
arg0.students.classes != null
arg0.students.done != null
arg0.students.parent has only one value
arg0.students.parent != null
arg0.students.children == null
arg0.students.timeTable != null
arg0.field != null
arg0.field.type != null
arg0.field.name != null
arg0.field.duration != null
arg0.place != null
arg0.place.coords != null
arg0.place.name != null
arg0.place.effectif one of { 25, 32, 100 }
arg0.place.timeTable != null
arg0.begin != null
arg0.begin.day >= 0
arg0.begin.min one of { 0, 30 }
arg0.end != null
arg0.end.min one of { 0, 30 }
size(arg0.teacher.fields[]) one of { 1, 3 }
arg0.students.effectif <= arg0.place.effectif
arg0.begin.day < arg0.begin.hour
arg0.begin.day < arg0.end.hour
arg0.begin.hour != arg0.begin.min
arg0.begin.hour < arg0.end.hour
arg0.begin.hour != arg0.end.min
arg0.begin.min != arg0.end.hour
arg0.end.hour != arg0.end.min
===========================================================================
DATA.Timeable.addLesson(DATA.Lesson):::EXIT
this.timeTable == orig(this.timeTable)
this.timeTable == orig(this.timeTable.owner.timeTable)
this.timeTable.slots == orig(this.timeTable.slots)
this.timeTable.owner == orig(this)
this.timeTable.owner == orig(this.timeTable.owner)
this.timeTable.owner.getClass().getName() == orig(this.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
arg0.teacher == orig(arg0.teacher)
arg0.teacher.firstName == orig(arg0.teacher.firstName)
arg0.teacher.firstName.toString == orig(arg0.teacher.firstName.toString)
arg0.teacher.lastName == orig(arg0.teacher.lastName)
arg0.teacher.lastName.toString == orig(arg0.teacher.lastName.toString)
arg0.teacher.maxWeekWorkedHours == orig(arg0.teacher.maxWeekWorkedHours)
arg0.teacher.currentWeekWorkedHours == orig(arg0.teacher.currentWeekWorkedHours)
arg0.teacher.fields == orig(arg0.teacher.fields)
arg0.teacher.fields[] == orig(arg0.teacher.fields[])
arg0.teacher.students == orig(arg0.teacher.students)
arg0.teacher.timeTable == orig(arg0.teacher.timeTable)
arg0.students == orig(arg0.students)
arg0.students.name == orig(arg0.students.name)
arg0.students.name.toString == orig(arg0.students.name.toString)
arg0.students.effectif == orig(arg0.students.effectif)
arg0.students.links == orig(arg0.students.links)
arg0.students.classes == orig(arg0.students.classes)
arg0.students.done == orig(arg0.students.done)
arg0.students.parent == orig(arg0.students.parent)
arg0.students.children == orig(arg0.students.children)
arg0.students.timeTable == orig(arg0.students.timeTable)
arg0.field == orig(arg0.field)
arg0.field.type == arg0.place.type
arg0.field.type == orig(arg0.field.type)
arg0.field.type == orig(arg0.place.type)
arg0.field.name == orig(arg0.field.name)
arg0.field.name.toString == orig(arg0.field.name.toString)
arg0.field.duration == orig(arg0.field.duration)
arg0.place == orig(arg0.place)
arg0.place.coords == orig(arg0.place.coords)
arg0.place.name == orig(arg0.place.name)
arg0.place.name.toString == orig(arg0.place.name.toString)
arg0.place.effectif == orig(arg0.place.effectif)
arg0.place.timeTable == orig(arg0.place.timeTable)
arg0.begin == orig(arg0.begin)
arg0.begin.day == arg0.end.day
arg0.begin.day == orig(arg0.begin.day)
arg0.begin.day == orig(arg0.end.day)
arg0.begin.hour == orig(arg0.begin.hour)
arg0.begin.min == orig(arg0.begin.min)
arg0.end == orig(arg0.end)
arg0.end.hour == orig(arg0.end.hour)
arg0.end.min == orig(arg0.end.min)
arg0.teacher != null
arg0.teacher.firstName != null
arg0.teacher.lastName != null
arg0.teacher.maxWeekWorkedHours has only one value
arg0.teacher.maxWeekWorkedHours != null
arg0.teacher.currentWeekWorkedHours != null
arg0.teacher.fields != null
arg0.teacher.fields[] elements != null
arg0.teacher.fields[].getClass().getName() elements == DATA.Field.class
arg0.teacher.fields[].getClass().getName() one of { [DATA.Field], [DATA.Field, DATA.Field, DATA.Field] }
arg0.teacher.students != null
arg0.teacher.timeTable != null
arg0.students != null
arg0.students.name != null
arg0.students.name.toString one of { "g2116", "g42", "g46" }
arg0.students.effectif == 25
arg0.students.links != null
arg0.students.classes has only one value
arg0.students.classes != null
arg0.students.done != null
arg0.students.parent has only one value
arg0.students.parent != null
arg0.students.children == null
arg0.students.timeTable != null
arg0.field != null
arg0.field.type != null
arg0.field.name != null
arg0.field.duration != null
arg0.place != null
arg0.place.coords != null
arg0.place.name != null
arg0.place.effectif one of { 25, 32, 100 }
arg0.place.timeTable != null
arg0.begin != null
arg0.begin.day >= 0
arg0.begin.min one of { 0, 30 }
arg0.end != null
arg0.end.min one of { 0, 30 }
return == true
size(arg0.teacher.fields[]) one of { 1, 3 }
arg0.students.effectif <= arg0.place.effectif
arg0.begin.day < arg0.begin.hour
arg0.begin.day < arg0.end.hour
arg0.begin.hour != arg0.begin.min
arg0.begin.hour < arg0.end.hour
arg0.begin.hour != arg0.end.min
arg0.begin.min != arg0.end.hour
arg0.end.hour != arg0.end.min
size(this.timeTable.slots[]) >= orig(size(this.timeTable.slots[]))
size(this.timeTable.slots[])-1 >= orig(size(this.timeTable.slots[]))-1
===========================================================================
DATA.Timeable.addLesson(DATA.Lesson):::EXIT;condition="return == true"
===========================================================================
DATA.Timeable.getAllFreeSlots(DATA.Time):::ENTER
arg0 != null
arg0.day == 0
arg0.hour one of { 1, 2, 4 }
arg0.min one of { 0, 30 }
arg0.day < arg0.hour
arg0.day <= arg0.min
arg0.hour != arg0.min
arg0.min % arg0.hour == 0
===========================================================================
DATA.Timeable.getAllFreeSlots(DATA.Time):::EXIT
this.timeTable == orig(this.timeTable)
this.timeTable == orig(this.timeTable.owner.timeTable)
this.timeTable.slots == orig(this.timeTable.slots)
this.timeTable.slots[] == orig(this.timeTable.slots[])
this.timeTable.owner == orig(this)
this.timeTable.owner == orig(this.timeTable.owner)
this.timeTable.owner.getClass().getName() == orig(this.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
arg0.day == orig(arg0.day)
arg0.hour == orig(arg0.hour)
arg0.min == orig(arg0.min)
arg0.day == 0
arg0.hour one of { 1, 2, 4 }
arg0.min one of { 0, 30 }
return != null
return[] elements != null
return[].getClass().getName() elements == DATA.Slot.class
arg0.day < arg0.hour
arg0.day <= arg0.min
arg0.hour != arg0.min
arg0.min % arg0.hour == 0
===========================================================================
DATA.Timeable.getWeekTable():::ENTER
this.timeTable.owner.getClass().getName() == DATA.Group.class
===========================================================================
DATA.Timeable.getWeekTable():::EXIT
this.timeTable == return
this.timeTable.slots == return.slots
this.timeTable.slots[] == orig(this.timeTable.slots[])
this.timeTable.owner == return.owner
this.timeTable.owner.getClass().getName() == return.owner.getClass().getName()
this.timeTable.owner.timeTable == return
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
return == return.owner.timeTable
return == orig(this.timeTable)
return == orig(this.timeTable.owner.timeTable)
return.slots == orig(this.timeTable.slots)
return.owner == orig(this)
return.owner == orig(this.timeTable.owner)
return.owner.getClass().getName() == orig(this.getClass().getName())
return.owner.getClass().getName() == orig(this.timeTable.owner.getClass().getName())
return != null
return.slots != null
return.slots[] elements != null
return.owner != null
return.owner.getClass().getName() == DATA.Group.class
===========================================================================
DATA.WeekTable:::CLASS
DATA.WeekTable.minDelta has only one value
DATA.WeekTable.minDelta != null
DATA.WeekTable.minDelta.day == 0
DATA.WeekTable.minDelta.hour == 0
DATA.WeekTable.minDelta.min == 1
DATA.WeekTable.defaultWeek.slots has only one value
DATA.WeekTable.defaultWeek.slots != null
DATA.WeekTable.defaultWeek.slots[] contains no nulls and has only one value, of length 9
DATA.WeekTable.defaultWeek.slots[] elements != null
DATA.WeekTable.defaultWeek.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
DATA.WeekTable.defaultWeek.slots[].getClass().getName() elements == DATA.Slot.class
DATA.WeekTable.defaultWeek.owner == null
size(DATA.WeekTable.defaultWeek.slots[]) == 9
===========================================================================
DATA.WeekTable:::OBJECT
this.slots == this.owner.timeTable.slots
this.owner == this.owner.timeTable.owner
this.owner.getClass().getName() == this.owner.timeTable.owner.getClass().getName()
this.slots != null
this.slots[] elements != null
this.owner.timeTable.slots != null
this.owner.timeTable.slots[] elements != null
this.owner.timeTable.owner != null
DATA.WeekTable.minDelta has only one value
DATA.WeekTable.minDelta != null
DATA.WeekTable.minDelta.day == 0
DATA.WeekTable.minDelta.hour == 0
DATA.WeekTable.minDelta.min == 1
DATA.WeekTable.defaultWeek.slots has only one value
DATA.WeekTable.defaultWeek.slots != null
DATA.WeekTable.defaultWeek.slots[] contains no nulls and has only one value, of length 9
DATA.WeekTable.defaultWeek.slots[] elements != null
DATA.WeekTable.defaultWeek.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
DATA.WeekTable.defaultWeek.slots[].getClass().getName() elements == DATA.Slot.class
DATA.WeekTable.defaultWeek.owner == null
size(DATA.WeekTable.defaultWeek.slots[]) == 9
===========================================================================
DATA.WeekTable.WeekTable(DATA.WeekTable, DATA.Timeable):::ENTER
arg0 has only one value
arg0 != null
arg0.slots has only one value
arg0.slots != null
arg0.slots[] contains no nulls and has only one value, of length 9
arg0.slots[] elements != null
arg0.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
arg0.slots[].getClass().getName() elements == DATA.Slot.class
arg0.owner == null
DATA.WeekTable.minDelta has only one value
DATA.WeekTable.minDelta != null
DATA.WeekTable.minDelta.day == 0
DATA.WeekTable.minDelta.hour == 0
DATA.WeekTable.minDelta.min == 1
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
DATA.WeekTable.defaultWeek.slots has only one value
DATA.WeekTable.defaultWeek.slots != null
DATA.WeekTable.defaultWeek.slots[] contains no nulls and has only one value, of length 9
DATA.WeekTable.defaultWeek.slots[] elements != null
DATA.WeekTable.defaultWeek.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
DATA.WeekTable.defaultWeek.slots[].getClass().getName() elements == DATA.Slot.class
DATA.WeekTable.defaultWeek.owner == null
arg1 != null
arg1.timeTable == null
size(arg0.slots[]) == 9
size(DATA.WeekTable.defaultWeek.slots[]) == 9
===========================================================================
DATA.WeekTable.WeekTable(DATA.WeekTable, DATA.Timeable):::EXIT
this.owner == orig(arg1)
this.owner.getClass().getName() == orig(arg1.getClass().getName())
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
arg0.slots == orig(arg0.slots)
arg0.slots[] == orig(arg0.slots[])
arg0.owner == orig(arg0.owner)
arg1.timeTable == orig(arg1.timeTable)
this.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.slots[].getClass().getName() elements == DATA.Slot.class
this.owner != null
this.owner.timeTable == null
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
arg0.slots has only one value
arg0.slots != null
arg0.slots[] contains no nulls and has only one value, of length 9
arg0.slots[] elements != null
arg0.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
arg0.slots[].getClass().getName() elements == DATA.Slot.class
arg0.owner == null
arg1.timeTable == null
size(this.slots[]) == 9
size(arg0.slots[]) == 9
===========================================================================
DATA.WeekTable.WeekTable(java.util.ArrayList, DATA.Timeable):::ENTER
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 9
arg0[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
arg0[].getClass().getName() elements == DATA.Slot.class
arg1 == null
DATA.WeekTable.minDelta has only one value
DATA.WeekTable.defaultWeek == null
size(arg0[]) == 9
===========================================================================
DATA.WeekTable.WeekTable(java.util.ArrayList, DATA.Timeable):::EXIT
this.slots == orig(arg0)
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
arg0[] == orig(arg0[])
this.slots has only one value
this.slots[] contains no nulls and has only one value, of length 9
this.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
this.slots[].getClass().getName() elements == DATA.Slot.class
this.owner == null
DATA.WeekTable.defaultWeek == null
arg0[] contains no nulls and has only one value, of length 9
arg0[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
arg0[].getClass().getName() elements == DATA.Slot.class
size(this.slots[]) == 9
===========================================================================
DATA.WeekTable.addLesson(DATA.Lesson):::ENTER
this == this.owner.timeTable
arg0.field.type == arg0.place.type
arg0.begin.day == arg0.end.day
this.owner != null
this.owner.timeTable != null
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
arg0 != null
arg0.teacher != null
arg0.teacher.firstName != null
arg0.teacher.lastName != null
arg0.teacher.maxWeekWorkedHours has only one value
arg0.teacher.maxWeekWorkedHours != null
arg0.teacher.currentWeekWorkedHours != null
arg0.teacher.fields != null
arg0.teacher.fields[] elements != null
arg0.teacher.fields[].getClass().getName() elements == DATA.Field.class
arg0.teacher.fields[].getClass().getName() one of { [DATA.Field], [DATA.Field, DATA.Field, DATA.Field] }
arg0.teacher.students != null
arg0.teacher.timeTable != null
arg0.students != null
arg0.students.name != null
arg0.students.name.toString one of { "g2116", "g42", "g46" }
arg0.students.effectif == 25
arg0.students.links != null
arg0.students.classes has only one value
arg0.students.classes != null
arg0.students.done != null
arg0.students.parent has only one value
arg0.students.parent != null
arg0.students.children == null
arg0.students.timeTable != null
arg0.field != null
arg0.field.type != null
arg0.field.name != null
arg0.field.duration != null
arg0.place != null
arg0.place.coords != null
arg0.place.name != null
arg0.place.effectif one of { 25, 32, 100 }
arg0.place.timeTable != null
arg0.begin != null
arg0.begin.day >= 0
arg0.begin.min one of { 0, 30 }
arg0.end != null
arg0.end.min one of { 0, 30 }
size(arg0.teacher.fields[]) one of { 1, 3 }
arg0.students.effectif <= arg0.place.effectif
arg0.begin.day < arg0.begin.hour
arg0.begin.day < arg0.end.hour
arg0.begin.hour != arg0.begin.min
arg0.begin.hour < arg0.end.hour
arg0.begin.hour != arg0.end.min
arg0.begin.min != arg0.end.hour
arg0.end.hour != arg0.end.min
===========================================================================
DATA.WeekTable.addLesson(DATA.Lesson):::EXIT135
===========================================================================
DATA.WeekTable.addLesson(DATA.Lesson):::EXIT135;condition="return == true"
===========================================================================
DATA.WeekTable.addLesson(DATA.Lesson):::EXIT
this.slots == orig(this.slots)
this.slots == orig(this.owner.timeTable.slots)
this.owner == orig(this.owner)
this.owner == orig(this.owner.timeTable.owner)
this.owner.getClass().getName() == orig(this.owner.getClass().getName())
this.owner.getClass().getName() == orig(this.owner.timeTable.owner.getClass().getName())
this.owner.timeTable == orig(this)
this.owner.timeTable == orig(this.owner.timeTable)
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
arg0.teacher == orig(arg0.teacher)
arg0.teacher.firstName == orig(arg0.teacher.firstName)
arg0.teacher.firstName.toString == orig(arg0.teacher.firstName.toString)
arg0.teacher.lastName == orig(arg0.teacher.lastName)
arg0.teacher.lastName.toString == orig(arg0.teacher.lastName.toString)
arg0.teacher.maxWeekWorkedHours == orig(arg0.teacher.maxWeekWorkedHours)
arg0.teacher.currentWeekWorkedHours == orig(arg0.teacher.currentWeekWorkedHours)
arg0.teacher.fields == orig(arg0.teacher.fields)
arg0.teacher.fields[] == orig(arg0.teacher.fields[])
arg0.teacher.students == orig(arg0.teacher.students)
arg0.teacher.timeTable == orig(arg0.teacher.timeTable)
arg0.students == orig(arg0.students)
arg0.students.name == orig(arg0.students.name)
arg0.students.name.toString == orig(arg0.students.name.toString)
arg0.students.effectif == orig(arg0.students.effectif)
arg0.students.links == orig(arg0.students.links)
arg0.students.classes == orig(arg0.students.classes)
arg0.students.done == orig(arg0.students.done)
arg0.students.parent == orig(arg0.students.parent)
arg0.students.children == orig(arg0.students.children)
arg0.students.timeTable == orig(arg0.students.timeTable)
arg0.field == orig(arg0.field)
arg0.field.type == arg0.place.type
arg0.field.type == orig(arg0.field.type)
arg0.field.type == orig(arg0.place.type)
arg0.field.name == orig(arg0.field.name)
arg0.field.name.toString == orig(arg0.field.name.toString)
arg0.field.duration == orig(arg0.field.duration)
arg0.place == orig(arg0.place)
arg0.place.coords == orig(arg0.place.coords)
arg0.place.name == orig(arg0.place.name)
arg0.place.name.toString == orig(arg0.place.name.toString)
arg0.place.effectif == orig(arg0.place.effectif)
arg0.place.timeTable == orig(arg0.place.timeTable)
arg0.begin == orig(arg0.begin)
arg0.begin.day == arg0.end.day
arg0.begin.day == orig(arg0.begin.day)
arg0.begin.day == orig(arg0.end.day)
arg0.begin.hour == orig(arg0.begin.hour)
arg0.begin.min == orig(arg0.begin.min)
arg0.end == orig(arg0.end)
arg0.end.hour == orig(arg0.end.hour)
arg0.end.min == orig(arg0.end.min)
this.owner != null
this.owner.timeTable != null
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
arg0.teacher != null
arg0.teacher.firstName != null
arg0.teacher.lastName != null
arg0.teacher.maxWeekWorkedHours has only one value
arg0.teacher.maxWeekWorkedHours != null
arg0.teacher.currentWeekWorkedHours != null
arg0.teacher.fields != null
arg0.teacher.fields[] elements != null
arg0.teacher.fields[].getClass().getName() elements == DATA.Field.class
arg0.teacher.fields[].getClass().getName() one of { [DATA.Field], [DATA.Field, DATA.Field, DATA.Field] }
arg0.teacher.students != null
arg0.teacher.timeTable != null
arg0.students != null
arg0.students.name != null
arg0.students.name.toString one of { "g2116", "g42", "g46" }
arg0.students.effectif == 25
arg0.students.links != null
arg0.students.classes has only one value
arg0.students.classes != null
arg0.students.done != null
arg0.students.parent has only one value
arg0.students.parent != null
arg0.students.children == null
arg0.students.timeTable != null
arg0.field != null
arg0.field.type != null
arg0.field.name != null
arg0.field.duration != null
arg0.place != null
arg0.place.coords != null
arg0.place.name != null
arg0.place.effectif one of { 25, 32, 100 }
arg0.place.timeTable != null
arg0.begin != null
arg0.begin.day >= 0
arg0.begin.min one of { 0, 30 }
arg0.end != null
arg0.end.min one of { 0, 30 }
return == true
size(arg0.teacher.fields[]) one of { 1, 3 }
arg0.students.effectif <= arg0.place.effectif
arg0.begin.day < arg0.begin.hour
arg0.begin.day < arg0.end.hour
arg0.begin.hour != arg0.begin.min
arg0.begin.hour < arg0.end.hour
arg0.begin.hour != arg0.end.min
arg0.begin.min != arg0.end.hour
arg0.end.hour != arg0.end.min
size(this.slots[]) >= orig(size(this.slots[]))
size(this.slots[])-1 >= orig(size(this.slots[]))-1
size(this.owner.timeTable.slots[]) >= orig(size(this.owner.timeTable.slots[]))
size(this.owner.timeTable.slots[])-1 >= orig(size(this.owner.timeTable.slots[]))-1
===========================================================================
DATA.WeekTable.addLesson(DATA.Lesson):::EXIT;condition="return == true"
===========================================================================
DATA.WeekTable.fieldHappensInDay(DATA.Field, byte):::ENTER
this == this.owner.timeTable
arg0.type.duration == arg0.duration
this.owner != null
this.owner.getClass().getName() == DATA.Group.class
this.owner.timeTable != null
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
arg0 != null
arg0.type != null
arg0.type.name != null
arg0.type.shortName != null
arg0.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
arg0.name != null
arg0.duration != null
arg0.duration.begin != null
arg0.duration.end != null
arg1 >= -1
===========================================================================
DATA.WeekTable.fieldHappensInDay(DATA.Field, byte):::EXIT100
return == false
===========================================================================
DATA.WeekTable.fieldHappensInDay(DATA.Field, byte):::EXIT100;condition="not(return == true)"
===========================================================================
DATA.WeekTable.fieldHappensInDay(DATA.Field, byte):::EXIT96
arg0.type.name.toString one of { "Cours", "TD" }
arg0.type.shortName.toString one of { "Amphith\351\342tre", "TD" }
arg0.name.toString one of { "Maths", "Physique" }
return == true
orig(arg1) one of { 0, 1 }
===========================================================================
DATA.WeekTable.fieldHappensInDay(DATA.Field, byte):::EXIT96;condition="return == true"
===========================================================================
DATA.WeekTable.fieldHappensInDay(DATA.Field, byte):::EXIT
this.slots == orig(this.slots)
this.slots == orig(this.owner.timeTable.slots)
this.slots[] == orig(this.slots[])
this.owner == orig(this.owner)
this.owner == orig(this.owner.timeTable.owner)
this.owner.getClass().getName() == orig(this.owner.getClass().getName())
this.owner.getClass().getName() == orig(this.owner.timeTable.owner.getClass().getName())
this.owner.timeTable == orig(this)
this.owner.timeTable == orig(this.owner.timeTable)
this.owner.timeTable.slots[] == orig(this.owner.timeTable.slots[])
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
arg0.type == orig(arg0.type)
arg0.type.name == orig(arg0.type.name)
arg0.type.name.toString == orig(arg0.type.name.toString)
arg0.type.shortName == orig(arg0.type.shortName)
arg0.type.shortName.toString == orig(arg0.type.shortName.toString)
arg0.type.duration == arg0.duration
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.duration == orig(arg0.type.duration)
arg0.duration == orig(arg0.duration)
arg0.duration.begin == orig(arg0.duration.begin)
arg0.duration.end == orig(arg0.duration.end)
(return == false)  ==>  (arg0.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" })
(return == false)  ==>  (orig(arg1) >= -1)
(return == true)  ==>  (arg0.name.toString one of { "Maths", "Physique" })
(return == true)  ==>  (arg0.type.name.toString one of { "Cours", "TD" })
(return == true)  ==>  (arg0.type.shortName.toString one of { "Amphith\351\342tre", "TD" })
(return == true)  ==>  (orig(arg1) one of { 0, 1 })
this.owner != null
this.owner.getClass().getName() == DATA.Group.class
this.owner.timeTable != null
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
arg0.type != null
arg0.type.name != null
arg0.type.shortName != null
arg0.type.shortName.toString one of { "Amphith\351\342tre", "TD", "TP" }
arg0.name != null
arg0.duration != null
arg0.duration.begin != null
arg0.duration.end != null
===========================================================================
DATA.WeekTable.fieldHappensInDay(DATA.Field, byte):::EXIT;condition="return == true"
arg0.type.name.toString one of { "Cours", "TD" }
arg0.type.shortName.toString one of { "Amphith\351\342tre", "TD" }
arg0.name.toString one of { "Maths", "Physique" }
return == true
orig(arg1) one of { 0, 1 }
===========================================================================
DATA.WeekTable.fieldHappensInDay(DATA.Field, byte):::EXIT;condition="not(return == true)"
return == false
===========================================================================
DATA.WeekTable.getAllFreeSlots(DATA.Time):::ENTER
this == this.owner.timeTable
this.owner != null
this.owner.timeTable != null
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
arg0 != null
arg0.day == 0
arg0.hour one of { 1, 2, 4 }
arg0.min one of { 0, 30 }
arg0.day < arg0.hour
arg0.day <= arg0.min
arg0.hour != arg0.min
arg0.min % arg0.hour == 0
===========================================================================
DATA.WeekTable.getAllFreeSlots(DATA.Time):::EXIT
this.slots == orig(this.slots)
this.slots == orig(this.owner.timeTable.slots)
this.slots[] == orig(this.slots[])
this.owner == orig(this.owner)
this.owner == orig(this.owner.timeTable.owner)
this.owner.getClass().getName() == orig(this.owner.getClass().getName())
this.owner.getClass().getName() == orig(this.owner.timeTable.owner.getClass().getName())
this.owner.timeTable == orig(this)
this.owner.timeTable == orig(this.owner.timeTable)
this.owner.timeTable.slots[] == orig(this.owner.timeTable.slots[])
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
arg0.day == orig(arg0.day)
arg0.hour == orig(arg0.hour)
arg0.min == orig(arg0.min)
this.owner != null
this.owner.timeTable != null
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
arg0.day == 0
arg0.hour one of { 1, 2, 4 }
arg0.min one of { 0, 30 }
return != null
return[] elements != null
return[].getClass().getName() elements == DATA.Slot.class
arg0.day < arg0.hour
arg0.day <= arg0.min
arg0.hour != arg0.min
arg0.min % arg0.hour == 0
===========================================================================
DATA.WeekTable.getDefault():::ENTER
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
===========================================================================
DATA.WeekTable.getDefault():::EXIT
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek == return
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
return.slots has only one value
return.slots != null
return.slots[] contains no nulls and has only one value, of length 9
return.slots[] elements != null
return.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
return.slots[].getClass().getName() elements == DATA.Slot.class
return.owner == null
size(return.slots[]) == 9
===========================================================================
DATA.WeekTable.getMWWH():::ENTER
===========================================================================
DATA.WeekTable.getMWWH():::EXIT207
DATA.WeekTable.defaultWeek == null
return == null
===========================================================================
DATA.WeekTable.getMWWH():::EXIT211
DATA.WeekTable.defaultWeek has only one value
return has only one value
===========================================================================
DATA.WeekTable.getMWWH():::EXIT
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
(DATA.WeekTable.defaultWeek == null)  <==>  (return == null)
(DATA.WeekTable.defaultWeek has only one value)  <==>  (return has only one value)
(DATA.WeekTable.defaultWeek has only one value)  ==>  (DATA.WeekTable.defaultWeek.owner == null)
(DATA.WeekTable.defaultWeek has only one value)  ==>  (DATA.WeekTable.defaultWeek.slots has only one value)
(DATA.WeekTable.defaultWeek has only one value)  ==>  (DATA.WeekTable.defaultWeek.slots[] contains no nulls and has only one value, of length 9)
(DATA.WeekTable.defaultWeek has only one value)  ==>  (DATA.WeekTable.defaultWeek.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot])
(DATA.WeekTable.defaultWeek has only one value)  ==>  (DATA.WeekTable.defaultWeek.slots[].getClass().getName() elements == DATA.Slot.class)
return.day == 1
return.hour == 12
return.min == 0
===========================================================================
DATA.WeekTable.getMinDelta():::ENTER
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
===========================================================================
DATA.WeekTable.getMinDelta():::EXIT
DATA.WeekTable.minDelta == return
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
return.day == return.hour
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
return.day == 0
return.min == 1
===========================================================================
DATA.WeekTable.getSlotsConcerning(DATA.Constrainable):::ENTER
this == this.owner.timeTable
this.owner.getClass().getName() == DATA.Group.class
DATA.WeekTable.defaultWeek has only one value
arg0.getClass().getName() == DATA.Field.class
this.owner.getClass().getName() != arg0.getClass().getName()
===========================================================================
DATA.WeekTable.getSlotsConcerning(DATA.Constrainable):::EXIT
this.slots == orig(this.slots)
this.slots == orig(this.owner.timeTable.slots)
this.slots[] == orig(this.slots[])
this.owner == orig(this.owner)
this.owner == orig(this.owner.timeTable.owner)
this.owner.getClass().getName() == orig(this.owner.getClass().getName())
this.owner.getClass().getName() == orig(this.owner.timeTable.owner.getClass().getName())
this.owner.timeTable == orig(this)
this.owner.timeTable == orig(this.owner.timeTable)
this.owner.timeTable.slots[] == orig(this.owner.timeTable.slots[])
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
this.owner.getClass().getName() == DATA.Group.class
DATA.WeekTable.defaultWeek has only one value
return[] == []
return[].getClass().getName() == []
this.owner.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
DATA.WeekTable.indexForTime(DATA.Time):::ENTER
this == this.owner.timeTable
this.owner != null
this.owner.timeTable != null
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
arg0 != null
arg0.day >= 0
arg0.min one of { 0, 30 }
arg0.day < arg0.hour
arg0.hour != arg0.min
===========================================================================
DATA.WeekTable.indexForTime(DATA.Time):::EXIT161
===========================================================================
DATA.WeekTable.indexForTime(DATA.Time):::EXIT
this.slots == orig(this.slots)
this.slots == orig(this.owner.timeTable.slots)
this.slots[] == orig(this.slots[])
this.owner == orig(this.owner)
this.owner == orig(this.owner.timeTable.owner)
this.owner.getClass().getName() == orig(this.owner.getClass().getName())
this.owner.getClass().getName() == orig(this.owner.timeTable.owner.getClass().getName())
this.owner.timeTable == orig(this)
this.owner.timeTable == orig(this.owner.timeTable)
this.owner.timeTable.slots[] == orig(this.owner.timeTable.slots[])
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.defaultWeek == orig(DATA.WeekTable.defaultWeek)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek.slots == orig(DATA.WeekTable.defaultWeek.slots)
DATA.WeekTable.defaultWeek.slots[] == orig(DATA.WeekTable.defaultWeek.slots[])
DATA.WeekTable.defaultWeek.owner == orig(DATA.WeekTable.defaultWeek.owner)
arg0.day == orig(arg0.day)
arg0.hour == orig(arg0.hour)
arg0.min == orig(arg0.min)
this.owner != null
this.owner.timeTable != null
DATA.WeekTable.defaultWeek has only one value
DATA.WeekTable.defaultWeek != null
arg0.day >= 0
arg0.min one of { 0, 30 }
return >= 0
arg0.day < arg0.hour
arg0.day <= return
arg0.hour != arg0.min
===========================================================================
DATA.WeekTable.setDefault(DATA.WeekTable):::ENTER
DATA.WeekTable.defaultWeek == null
arg0 has only one value
arg0.slots has only one value
arg0.slots[] contains no nulls and has only one value, of length 9
arg0.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
arg0.slots[].getClass().getName() elements == DATA.Slot.class
arg0.owner == null
size(arg0.slots[]) == 9
===========================================================================
DATA.WeekTable.setDefault(DATA.WeekTable):::EXIT
DATA.WeekTable.minDelta == orig(DATA.WeekTable.minDelta)
DATA.WeekTable.minDelta.day == orig(DATA.WeekTable.minDelta.day)
DATA.WeekTable.minDelta.hour == orig(DATA.WeekTable.minDelta.hour)
DATA.WeekTable.minDelta.min == orig(DATA.WeekTable.minDelta.min)
DATA.WeekTable.defaultWeek == orig(arg0)
arg0.slots == orig(arg0.slots)
arg0.slots[] == orig(arg0.slots[])
arg0.owner == orig(arg0.owner)
DATA.WeekTable.defaultWeek has only one value
arg0.slots has only one value
arg0.slots[] contains no nulls and has only one value, of length 9
arg0.slots[].getClass().getName() == [DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot, DATA.Slot]
arg0.slots[].getClass().getName() elements == DATA.Slot.class
arg0.owner == null
size(arg0.slots[]) == 9
Exiting Daikon.
