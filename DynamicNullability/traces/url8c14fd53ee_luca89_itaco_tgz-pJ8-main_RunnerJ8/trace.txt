Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 1 time.  Unmatched entries are ignored!
Unterminated calls:
  compilatore.JasminTarget.compilaFile(java.lang.String, boolean) : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

missing variables in newEnterExitRel:
  parent = main.ParserSpec$1.(main.ParserSpec):::ENTER
  child = main.ParserSpec$1.(main.ParserSpec):::EXIT
  parent.var_infos = [Ldaikon.VarInfo;@41636ffe
parent varinfos missing from parent_to_child_map:
   main.ParserSpec.this.auxNonTerminals[edu.tum.cup2.grammar.Grammar.serialVersionUID]
   main.ParserSpec.this.auxNonTerminals[edu.tum.cup2.grammar.Grammar.serialVersionUID-1]
   main.ParserSpec.this.auxNonTerminals[edu.tum.cup2.semantics.ParserInterface.serialVersionUID]
   main.ParserSpec.this.auxNonTerminals[edu.tum.cup2.semantics.ParserInterface.serialVersionUID-1]
   main.ParserSpec.this.auxNonTerminals[main.ParserSpec.this.productionCount]
   main.ParserSpec.this.auxNonTerminals[main.ParserSpec.this.productionCount-1]
   main.ParserSpec.this.precedences.list[edu.tum.cup2.grammar.Grammar.serialVersionUID]
   main.ParserSpec.this.precedences.list[edu.tum.cup2.grammar.Grammar.serialVersionUID-1]
   main.ParserSpec.this.precedences.list[edu.tum.cup2.semantics.ParserInterface.serialVersionUID]
   main.ParserSpec.this.precedences.list[edu.tum.cup2.semantics.ParserInterface.serialVersionUID-1]
   main.ParserSpec.this.precedences.list[main.ParserSpec.this.productionCount]
   main.ParserSpec.this.precedences.list[main.ParserSpec.this.productionCount-1]
   main.ParserSpec.this.grammar.terminals[edu.tum.cup2.grammar.Grammar.serialVersionUID]
   main.ParserSpec.this.grammar.terminals[edu.tum.cup2.grammar.Grammar.serialVersionUID-1]
   main.ParserSpec.this.grammar.nonTerminals[edu.tum.cup2.grammar.Grammar.serialVersionUID]
   main.ParserSpec.this.grammar.nonTerminals[edu.tum.cup2.grammar.Grammar.serialVersionUID-1]
   main.ParserSpec.this.grammar.productions[edu.tum.cup2.grammar.Grammar.serialVersionUID]
   main.ParserSpec.this.grammar.productions[edu.tum.cup2.grammar.Grammar.serialVersionUID-1]
   main.ParserSpec.this.auxiliaryProductions[edu.tum.cup2.grammar.Grammar.serialVersionUID]
   main.ParserSpec.this.auxiliaryProductions[edu.tum.cup2.grammar.Grammar.serialVersionUID-1]
   main.ParserSpec.this.grammar.terminals[edu.tum.cup2.semantics.ParserInterface.serialVersionUID]
   main.ParserSpec.this.grammar.terminals[edu.tum.cup2.semantics.ParserInterface.serialVersionUID-1]
   main.ParserSpec.this.grammar.terminals[main.ParserSpec.this.productionCount]
   main.ParserSpec.this.grammar.terminals[main.ParserSpec.this.productionCount-1]
   main.ParserSpec.this.grammar.nonTerminals[edu.tum.cup2.semantics.ParserInterface.serialVersionUID]
   main.ParserSpec.this.grammar.nonTerminals[edu.tum.cup2.semantics.ParserInterface.serialVersionUID-1]
   main.ParserSpec.this.grammar.nonTerminals[main.ParserSpec.this.productionCount]
   main.ParserSpec.this.grammar.nonTerminals[main.ParserSpec.this.productionCount-1]
   main.ParserSpec.this.grammar.productions[edu.tum.cup2.semantics.ParserInterface.serialVersionUID]
   main.ParserSpec.this.grammar.productions[edu.tum.cup2.semantics.ParserInterface.serialVersionUID-1]
   main.ParserSpec.this.grammar.productions[main.ParserSpec.this.productionCount]
   main.ParserSpec.this.grammar.productions[main.ParserSpec.this.productionCount-1]
   main.ParserSpec.this.auxiliaryProductions[edu.tum.cup2.semantics.ParserInterface.serialVersionUID]
   main.ParserSpec.this.auxiliaryProductions[edu.tum.cup2.semantics.ParserInterface.serialVersionUID-1]
   main.ParserSpec.this.auxiliaryProductions[main.ParserSpec.this.productionCount]
   main.ParserSpec.this.auxiliaryProductions[main.ParserSpec.this.productionCount-1]
rel.parent_to_child_map:
    main.ParserSpec.this => orig(main.ParserSpec.this)
    main.ParserSpec.this.isInit => orig(main.ParserSpec.this.isInit)
    main.ParserSpec.this.auxNonTerminals => orig(main.ParserSpec.this.auxNonTerminals)
    main.ParserSpec.this.auxNonTerminals[..] => orig(main.ParserSpec.this.auxNonTerminals[..])
    main.ParserSpec.this.auxNonTerminals[..].getClass().getName() => orig(main.ParserSpec.this.auxNonTerminals[..].getClass().getName())
    main.ParserSpec.this.symbolValueClasses => orig(main.ParserSpec.this.symbolValueClasses)
    main.ParserSpec.this.precedences => orig(main.ParserSpec.this.precedences)
    main.ParserSpec.this.precedences.list => orig(main.ParserSpec.this.precedences.list)
    main.ParserSpec.this.precedences.list[..] => orig(main.ParserSpec.this.precedences.list[..])
    main.ParserSpec.this.precedences.list[..].getClass().getName() => orig(main.ParserSpec.this.precedences.list[..].getClass().getName())
    main.ParserSpec.this.precedences.list.getClass().getName() => orig(main.ParserSpec.this.precedences.list.getClass().getName())
    main.ParserSpec.this.grammar => orig(main.ParserSpec.this.grammar)
    edu.tum.cup2.grammar.Grammar.serialVersionUID => edu.tum.cup2.grammar.Grammar.serialVersionUID
    main.ParserSpec.this.grammar.terminals => orig(main.ParserSpec.this.grammar.terminals)
    main.ParserSpec.this.grammar.terminals[..] => orig(main.ParserSpec.this.grammar.terminals[..])
    main.ParserSpec.this.grammar.terminals[..].getClass().getName() => orig(main.ParserSpec.this.grammar.terminals[..].getClass().getName())
    main.ParserSpec.this.grammar.nonTerminals => orig(main.ParserSpec.this.grammar.nonTerminals)
    main.ParserSpec.this.grammar.nonTerminals[..] => orig(main.ParserSpec.this.grammar.nonTerminals[..])
    main.ParserSpec.this.grammar.nonTerminals[..].getClass().getName() => orig(main.ParserSpec.this.grammar.nonTerminals[..].getClass().getName())
    main.ParserSpec.this.grammar.productions => orig(main.ParserSpec.this.grammar.productions)
    main.ParserSpec.this.grammar.productions[..] => orig(main.ParserSpec.this.grammar.productions[..])
    main.ParserSpec.this.grammar.productions[..].getClass().getName() => orig(main.ParserSpec.this.grammar.productions[..].getClass().getName())
    main.ParserSpec.this.grammarInterface => orig(main.ParserSpec.this.grammarInterface)
    edu.tum.cup2.semantics.ParserInterface.serialVersionUID => edu.tum.cup2.semantics.ParserInterface.serialVersionUID
    main.ParserSpec.this.productionCount => orig(main.ParserSpec.this.productionCount)
    main.ParserSpec.this.auxiliaryProductions => orig(main.ParserSpec.this.auxiliaryProductions)
    main.ParserSpec.this.auxiliaryProductions[..] => orig(main.ParserSpec.this.auxiliaryProductions[..])
    main.ParserSpec.this.auxiliaryProductions[..].getClass().getName() => orig(main.ParserSpec.this.auxiliaryProductions[..].getClass().getName())
    size(main.ParserSpec.this.auxNonTerminals[..]) => orig(size(main.ParserSpec.this.auxNonTerminals[..]))
    size(main.ParserSpec.this.auxNonTerminals[..])-1 => orig(size(main.ParserSpec.this.auxNonTerminals[..]))-1
    size(main.ParserSpec.this.precedences.list[..]) => orig(size(main.ParserSpec.this.precedences.list[..]))
    size(main.ParserSpec.this.precedences.list[..])-1 => orig(size(main.ParserSpec.this.precedences.list[..]))-1
    size(main.ParserSpec.this.grammar.terminals[..]) => orig(size(main.ParserSpec.this.grammar.terminals[..]))
    size(main.ParserSpec.this.grammar.terminals[..])-1 => orig(size(main.ParserSpec.this.grammar.terminals[..]))-1
    size(main.ParserSpec.this.grammar.nonTerminals[..]) => orig(size(main.ParserSpec.this.grammar.nonTerminals[..]))
    size(main.ParserSpec.this.grammar.nonTerminals[..])-1 => orig(size(main.ParserSpec.this.grammar.nonTerminals[..]))-1
    size(main.ParserSpec.this.grammar.productions[..]) => orig(size(main.ParserSpec.this.grammar.productions[..]))
    size(main.ParserSpec.this.grammar.productions[..])-1 => orig(size(main.ParserSpec.this.grammar.productions[..]))-1
    size(main.ParserSpec.this.auxiliaryProductions[..]) => orig(size(main.ParserSpec.this.auxiliaryProductions[..]))
    size(main.ParserSpec.this.auxiliaryProductions[..])-1 => orig(size(main.ParserSpec.this.auxiliaryProductions[..]))-1
child.var_infos:
    this
    main.ParserSpec.this
    main.ParserSpec.this.isInit
    main.ParserSpec.this.auxNonTerminals
    main.ParserSpec.this.auxNonTerminals[..]
    main.ParserSpec.this.auxNonTerminals[..].getClass().getName()
    main.ParserSpec.this.symbolValueClasses
    main.ParserSpec.this.precedences
    main.ParserSpec.this.precedences.list
    main.ParserSpec.this.precedences.list[..]
    main.ParserSpec.this.precedences.list[..].getClass().getName()
    main.ParserSpec.this.precedences.list.getClass().getName()
    main.ParserSpec.this.grammar
    edu.tum.cup2.grammar.Grammar.serialVersionUID
    main.ParserSpec.this.grammar.terminals
    main.ParserSpec.this.grammar.terminals[..]
    main.ParserSpec.this.grammar.terminals[..].getClass().getName()
    main.ParserSpec.this.grammar.nonTerminals
    main.ParserSpec.this.grammar.nonTerminals[..]
    main.ParserSpec.this.grammar.nonTerminals[..].getClass().getName()
    main.ParserSpec.this.grammar.productions
    main.ParserSpec.this.grammar.productions[..]
    main.ParserSpec.this.grammar.productions[..].getClass().getName()
    main.ParserSpec.this.grammarInterface
    edu.tum.cup2.semantics.ParserInterface.serialVersionUID
    main.ParserSpec.this.productionCount
    main.ParserSpec.this.auxiliaryProductions
    main.ParserSpec.this.auxiliaryProductions[..]
    main.ParserSpec.this.auxiliaryProductions[..].getClass().getName()
    this.method
    this.actionSubclass
    this.paramsCount
    this.returnsVoid
    this.parserInstance
    edu.tum.cup2.parser.LRParser.serialVersionUID
    this.parserInstance.DEBUG
    this.parserInstance.maxErrors
    this.parserInstance.table
    edu.tum.cup2.parser.tables.LRParsingTable.serialVersionUID
    this.parserInstance.table.grammar
    this.parserInstance.table.states
    this.parserInstance.table.states[..]
    this.parserInstance.table.states[..].getClass().getName()
    this.parserInstance.table.actionTable
    this.parserInstance.table.gotoTable
    this.parserInstance.table.erI
    this.parserInstance.stack
    this.parserInstance.valueStack
    this.parserInstance.tokenCountStack
    this.parserInstance.saveTokens
    this.parserInstance.parsedTokens
    this.parserInstance.parsedTokens[..]
    this.parserInstance.parsedTokens[..].getClass().getName()
    this.parserInstance.parsedTokens.getClass().getName()
    this.parserInstance.lastError_sync_size
    this.parserInstance.lastError_start_sync_size
    this.parserInstance.lastError_stateStack
    this.parserInstance.lastError_tokenCountStack
    this.parserInstance.dryRun_savedActions
    this.parserInstance.dryRun_savedActions[..]
    this.parserInstance.dryRun_savedActions[..].getClass().getName()
    this.parserInstance.dryRun_savedActions.getClass().getName()
    this.parserInstance.lastErrorInformation
    edu.tum.cup2.semantics.ErrorInformation.serialVersionUID
    this.parserInstance.lastErrorInformation.crashToken
    this.parserInstance.lastErrorInformation.poppedValues
    this.parserInstance.lastErrorInformation.poppedValues.getClass().getName()
    this.parserInstance.lastErrorInformation.poppedValues[..]
    this.parserInstance.lastErrorInformation.poppedValues[..].getClass().getName()
    this.parserInstance.lastErrorInformation.poppedTokens
    this.parserInstance.lastErrorInformation.poppedTokens.getClass().getName()
    this.parserInstance.lastErrorInformation.poppedTokens[..]
    this.parserInstance.lastErrorInformation.poppedTokens[..].getClass().getName()
    this.parserInstance.lastErrorInformation.poppedTokens[..].line
    this.parserInstance.lastErrorInformation.poppedTokens[..].column
    this.parserInstance.lastErrorInformation.poppedTokens[..].symbol
    this.parserInstance.lastErrorInformation.poppedTokens[..].symbol.getClass().getName()
    this.parserInstance.lastErrorInformation.poppedTokens[..].value
    this.parserInstance.lastErrorInformation.poppedTokens[..].value.getClass().getName()
    this.parserInstance.lastErrorInformation.poppedTokens[..].hasValue
    this.parserInstance.lastErrorInformation.readTokens
    this.parserInstance.lastErrorInformation.readTokens.getClass().getName()
    this.parserInstance.lastErrorInformation.readTokens[..]
    this.parserInstance.lastErrorInformation.readTokens[..].getClass().getName()
    this.parserInstance.lastErrorInformation.readTokens[..].line
    this.parserInstance.lastErrorInformation.readTokens[..].column
    this.parserInstance.lastErrorInformation.readTokens[..].symbol
    this.parserInstance.lastErrorInformation.readTokens[..].symbol.getClass().getName()
    this.parserInstance.lastErrorInformation.readTokens[..].value
    this.parserInstance.lastErrorInformation.readTokens[..].value.getClass().getName()
    this.parserInstance.lastErrorInformation.readTokens[..].hasValue
    this.parserInstance.lastErrorInformation.expectedTerminals
    this.parserInstance.lastErrorInformation.expectedTerminals.getClass().getName()
    this.parserInstance.lastErrorInformation.expectedTerminals[..]
    this.parserInstance.lastErrorInformation.expectedTerminals[..].getClass().getName()
    this.parserInstance.lastErrorInformation.recovered
    this.parserInstance.lastErrorInformation.beginLine
    this.parserInstance.lastErrorInformation.beginColumn
    this.parserInstance.lastErrorInformation.endLine
    this.parserInstance.lastErrorInformation.endColumn
    this.parserInstance.lastErrorInformation.proposals
    this.parserInstance.lastErrorInformation.proposals.getClass().getName()
    this.parserInstance.lastErrorInformation.proposals[..]
    this.parserInstance.lastErrorInformation.proposals[..].getClass().getName()
    this.parserInstance.lastErrorInformation.insertedValue
    this.parserInstance.lastErrorInformation.insertedValue.getClass().getName()
    this.parserInstance.input
    this.parserInstance.input.getClass().getName()
    this.parserInstance.currentToken
    this.parserInstance.currentToken.line
    this.parserInstance.currentToken.column
    edu.tum.cup2.semantics.SymbolValue.NoValue
    edu.tum.cup2.semantics.SymbolValue.NoValue.getClass().getName()
    this.parserInstance.currentToken.symbol
    this.parserInstance.currentToken.symbol.getClass().getName()
    this.parserInstance.currentToken.value
    this.parserInstance.currentToken.value.getClass().getName()
    this.parserInstance.currentToken.hasValue
    this.parserInstance.currentState
    edu.tum.cup2.parser.states.LRParserState.serialVersionUID
    this.parserInstance.currentState.id
    this.parserInstance.currentState.beginLine
    this.parserInstance.currentState.beginColumn
    this.parserInstance.observers
    this.parserInstance.observers[..]
    this.parserInstance.observers[..].getClass().getName()
    this.parserInstance.observers.getClass().getName()
    orig(main.ParserSpec.this)
    orig(main.ParserSpec.this.isInit)
    orig(main.ParserSpec.this.auxNonTerminals)
    orig(main.ParserSpec.this.auxNonTerminals[..])
    orig(main.ParserSpec.this.auxNonTerminals[..].getClass().getName())
    orig(main.ParserSpec.this.symbolValueClasses)
    orig(main.ParserSpec.this.precedences)
    orig(main.ParserSpec.this.precedences.list)
    orig(main.ParserSpec.this.precedences.list[..])
    orig(main.ParserSpec.this.precedences.list[..].getClass().getName())
    orig(main.ParserSpec.this.precedences.list.getClass().getName())
    orig(main.ParserSpec.this.grammar)
    orig(main.ParserSpec.this.grammar.terminals)
    orig(main.ParserSpec.this.grammar.terminals[..])
    orig(main.ParserSpec.this.grammar.terminals[..].getClass().getName())
    orig(main.ParserSpec.this.grammar.nonTerminals)
    orig(main.ParserSpec.this.grammar.nonTerminals[..])
    orig(main.ParserSpec.this.grammar.nonTerminals[..].getClass().getName())
    orig(main.ParserSpec.this.grammar.productions)
    orig(main.ParserSpec.this.grammar.productions[..])
    orig(main.ParserSpec.this.grammar.productions[..].getClass().getName())
    orig(main.ParserSpec.this.grammarInterface)
    orig(main.ParserSpec.this.productionCount)
    orig(main.ParserSpec.this.auxiliaryProductions)
    orig(main.ParserSpec.this.auxiliaryProductions[..])
    orig(main.ParserSpec.this.auxiliaryProductions[..].getClass().getName())
    size(main.ParserSpec.this.auxNonTerminals[..])
    size(main.ParserSpec.this.auxNonTerminals[..])-1
    size(main.ParserSpec.this.precedences.list[..])
    size(main.ParserSpec.this.precedences.list[..])-1
    size(main.ParserSpec.this.grammar.terminals[..])
    size(main.ParserSpec.this.grammar.terminals[..])-1
    size(main.ParserSpec.this.grammar.nonTerminals[..])
    size(main.ParserSpec.this.grammar.nonTerminals[..])-1
    size(main.ParserSpec.this.grammar.productions[..])
    size(main.ParserSpec.this.grammar.productions[..])-1
    size(main.ParserSpec.this.auxiliaryProductions[..])
    size(main.ParserSpec.this.auxiliaryProductions[..])-1
    size(this.parserInstance.table.states[..])
    size(this.parserInstance.table.states[..])-1
    size(this.parserInstance.parsedTokens[..])
    size(this.parserInstance.parsedTokens[..])-1
    size(this.parserInstance.dryRun_savedActions[..])
    size(this.parserInstance.dryRun_savedActions[..])-1
    size(this.parserInstance.lastErrorInformation.poppedValues[..])
    size(this.parserInstance.lastErrorInformation.poppedValues[..])-1
    size(this.parserInstance.lastErrorInformation.poppedTokens[..])
    size(this.parserInstance.lastErrorInformation.poppedTokens[..])-1
    size(this.parserInstance.lastErrorInformation.readTokens[..])
    size(this.parserInstance.lastErrorInformation.readTokens[..])-1
    size(this.parserInstance.lastErrorInformation.expectedTerminals[..])
    size(this.parserInstance.lastErrorInformation.expectedTerminals[..])-1
    size(this.parserInstance.lastErrorInformation.proposals[..])
    size(this.parserInstance.lastErrorInformation.proposals[..])-1
    size(this.parserInstance.observers[..])
    size(this.parserInstance.observers[..])-1
    orig(size(main.ParserSpec.this.auxNonTerminals[..]))
    orig(size(main.ParserSpec.this.auxNonTerminals[..]))-1
    orig(size(main.ParserSpec.this.precedences.list[..]))
    orig(size(main.ParserSpec.this.precedences.list[..]))-1
    orig(size(main.ParserSpec.this.grammar.terminals[..]))
    orig(size(main.ParserSpec.this.grammar.terminals[..]))-1
    orig(size(main.ParserSpec.this.grammar.nonTerminals[..]))
    orig(size(main.ParserSpec.this.grammar.nonTerminals[..]))-1
    orig(size(main.ParserSpec.this.grammar.productions[..]))
    orig(size(main.ParserSpec.this.grammar.productions[..]))-1
    orig(size(main.ParserSpec.this.auxiliaryProductions[..]))
    orig(size(main.ParserSpec.this.auxiliaryProductions[..]))-1
End of diagnostics for newEnterExitRel(main.ParserSpec$1.(main.ParserSpec):::ENTER, main.ParserSpec$1.(main.ParserSpec):::EXIT)
missing variables in newEnterExitRel:
  parent = main.ParserSpec$2.(main.ParserSpec):::ENTER
  child = main.ParserSpec$2.(main.ParserSpec):::EXIT
  parent.var_infos = [Ldaikon.VarInfo;@6be85b91
parent varinfos missing from parent_to_child_map:
   main.ParserSpec.this.auxNonTerminals[edu.tum.cup2.grammar.Grammar.serialVersionUID]
   main.ParserSpec.this.auxNonTerminals[edu.tum.cup2.grammar.Grammar.serialVersionUID-1]
   main.ParserSpec.this.auxNonTerminals[edu.tum.cup2.semantics.ParserInterface.serialVersionUID]
   main.ParserSpec.this.auxNonTerminals[edu.tum.cup2.semantics.ParserInterface.serialVersionUID-1]
   main.ParserSpec.this.auxNonTerminals[main.ParserSpec.this.productionCount]
   main.ParserSpec.this.auxNonTerminals[main.ParserSpec.this.productionCount-1]
   main.ParserSpec.this.precedences.list[edu.tum.cup2.grammar.Grammar.serialVersionUID]
   main.ParserSpec.this.precedences.list[edu.tum.cup2.grammar.Grammar.serialVersionUID-1]
   main.ParserSpec.this.precedences.list[edu.tum.cup2.semantics.ParserInterface.serialVersionUID]
   main.ParserSpec.this.precedences.list[edu.tum.cup2.semantics.ParserInterface.serialVersionUID-1]
   main.ParserSpec.this.precedences.list[main.ParserSpec.this.productionCount]
   main.ParserSpec.this.precedences.list[main.ParserSpec.this.productionCount-1]
   main.ParserSpec.this.grammar.terminals[edu.tum.cup2.grammar.Grammar.serialVersionUID]
   main.ParserSpec.this.grammar.terminals[edu.tum.cup2.grammar.Grammar.serialVersionUID-1]
   main.ParserSpec.this.grammar.nonTerminals[edu.tum.cup2.grammar.Grammar.serialVersionUID]
   main.ParserSpec.this.grammar.nonTerminals[edu.tum.cup2.grammar.Grammar.serialVersionUID-1]
   main.ParserSpec.this.grammar.productions[edu.tum.cup2.grammar.Grammar.serialVersionUID]
   main.ParserSpec.this.grammar.productions[edu.tum.cup2.grammar.Grammar.serialVersionUID-1]
   main.ParserSpec.this.auxiliaryProductions[edu.tum.cup2.grammar.Grammar.serialVersionUID]
   main.ParserSpec.this.auxiliaryProductions[edu.tum.cup2.grammar.Grammar.serialVersionUID-1]
   main.ParserSpec.this.grammar.terminals[edu.tum.cup2.semantics.ParserInterface.serialVersionUID]
   main.ParserSpec.this.grammar.terminals[edu.tum.cup2.semantics.ParserInterface.serialVersionUID-1]
   main.ParserSpec.this.grammar.terminals[main.ParserSpec.this.productionCount]
   main.ParserSpec.this.grammar.terminals[main.ParserSpec.this.productionCount-1]
   main.ParserSpec.this.grammar.nonTerminals[edu.tum.cup2.semantics.ParserInterface.serialVersionUID]
   main.ParserSpec.this.grammar.nonTerminals[edu.tum.cup2.semantics.ParserInterface.serialVersionUID-1]
   main.ParserSpec.this.grammar.nonTerminals[main.ParserSpec.this.productionCount]
   main.ParserSpec.this.grammar.nonTerminals[main.ParserSpec.this.productionCount-1]
   main.ParserSpec.this.grammar.productions[edu.tum.cup2.semantics.ParserInterface.serialVersionUID]
   main.ParserSpec.this.grammar.productions[edu.tum.cup2.semantics.ParserInterface.serialVersionUID-1]
   main.ParserSpec.this.grammar.productions[main.ParserSpec.this.productionCount]
   main.ParserSpec.this.grammar.productions[main.ParserSpec.this.productionCount-1]
   main.ParserSpec.this.auxiliaryProductions[edu.tum.cup2.semantics.ParserInterface.serialVersionUID]
   main.ParserSpec.this.auxiliaryProductions[edu.tum.cup2.semantics.ParserInterface.serialVersionUID-1]
   main.ParserSpec.this.auxiliaryProductions[main.ParserSpec.this.productionCount]
   main.ParserSpec.this.auxiliaryProductions[main.ParserSpec.this.productionCount-1]
rel.parent_to_child_map:
    main.ParserSpec.this => orig(main.ParserSpec.this)
    main.ParserSpec.this.isInit => orig(main.ParserSpec.this.isInit)
    main.ParserSpec.this.auxNonTerminals => orig(main.ParserSpec.this.auxNonTerminals)
    main.ParserSpec.this.auxNonTerminals[..] => orig(main.ParserSpec.this.auxNonTerminals[..])
    main.ParserSpec.this.auxNonTerminals[..].getClass().getName() => orig(main.ParserSpec.this.auxNonTerminals[..].getClass().getName())
    main.ParserSpec.this.symbolValueClasses => orig(main.ParserSpec.this.symbolValueClasses)
    main.ParserSpec.this.precedences => orig(main.ParserSpec.this.precedences)
    main.ParserSpec.this.precedences.list => orig(main.ParserSpec.this.precedences.list)
    main.ParserSpec.this.precedences.list[..] => orig(main.ParserSpec.this.precedences.list[..])
    main.ParserSpec.this.precedences.list[..].getClass().getName() => orig(main.ParserSpec.this.precedences.list[..].getClass().getName())
    main.ParserSpec.this.precedences.list.getClass().getName() => orig(main.ParserSpec.this.precedences.list.getClass().getName())
    main.ParserSpec.this.grammar => orig(main.ParserSpec.this.grammar)
    edu.tum.cup2.grammar.Grammar.serialVersionUID => edu.tum.cup2.grammar.Grammar.serialVersionUID
    main.ParserSpec.this.grammar.terminals => orig(main.ParserSpec.this.grammar.terminals)
    main.ParserSpec.this.grammar.terminals[..] => orig(main.ParserSpec.this.grammar.terminals[..])
    main.ParserSpec.this.grammar.terminals[..].getClass().getName() => orig(main.ParserSpec.this.grammar.terminals[..].getClass().getName())
    main.ParserSpec.this.grammar.nonTerminals => orig(main.ParserSpec.this.grammar.nonTerminals)
    main.ParserSpec.this.grammar.nonTerminals[..] => orig(main.ParserSpec.this.grammar.nonTerminals[..])
    main.ParserSpec.this.grammar.nonTerminals[..].getClass().getName() => orig(main.ParserSpec.this.grammar.nonTerminals[..].getClass().getName())
    main.ParserSpec.this.grammar.productions => orig(main.ParserSpec.this.grammar.productions)
    main.ParserSpec.this.grammar.productions[..] => orig(main.ParserSpec.this.grammar.productions[..])
    main.ParserSpec.this.grammar.productions[..].getClass().getName() => orig(main.ParserSpec.this.grammar.productions[..].getClass().getName())
    main.ParserSpec.this.grammarInterface => orig(main.ParserSpec.this.grammarInterface)
    edu.tum.cup2.semantics.ParserInterface.serialVersionUID => edu.tum.cup2.semantics.ParserInterface.serialVersionUID
    main.ParserSpec.this.productionCount => orig(main.ParserSpec.this.productionCount)
    main.ParserSpec.this.auxiliaryProductions => orig(main.ParserSpec.this.auxiliaryProductions)
    main.ParserSpec.this.auxiliaryProductions[..] => orig(main.ParserSpec.this.auxiliaryProductions[..])
    main.ParserSpec.this.auxiliaryProductions[..].getClass().getName() => orig(main.ParserSpec.this.auxiliaryProductions[..].getClass().getName())
    size(main.ParserSpec.this.auxNonTerminals[..]) => orig(size(main.ParserSpec.this.auxNonTerminals[..]))
    size(main.ParserSpec.this.auxNonTerminals[..])-1 => orig(size(main.ParserSpec.this.auxNonTerminals[..]))-1
    size(main.ParserSpec.this.precedences.list[..]) => orig(size(main.ParserSpec.this.precedences.list[..]))
    size(main.ParserSpec.this.precedences.list[..])-1 => orig(size(main.ParserSpec.this.precedences.list[..]))-1
    size(main.ParserSpec.this.grammar.terminals[..]) => orig(size(main.ParserSpec.this.grammar.terminals[..]))
    size(main.ParserSpec.this.grammar.terminals[..])-1 => orig(size(main.ParserSpec.this.grammar.terminals[..]))-1
    size(main.ParserSpec.this.grammar.nonTerminals[..]) => orig(size(main.ParserSpec.this.grammar.nonTerminals[..]))
    size(main.ParserSpec.this.grammar.nonTerminals[..])-1 => orig(size(main.ParserSpec.this.grammar.nonTerminals[..]))-1
    size(main.ParserSpec.this.grammar.productions[..]) => orig(size(main.ParserSpec.this.grammar.productions[..]))
    size(main.ParserSpec.this.grammar.productions[..])-1 => orig(size(main.ParserSpec.this.grammar.productions[..]))-1
    size(main.ParserSpec.this.auxiliaryProductions[..]) => orig(size(main.ParserSpec.this.auxiliaryProductions[..]))
    size(main.ParserSpec.this.auxiliaryProductions[..])-1 => orig(size(main.ParserSpec.this.auxiliaryProductions[..]))-1
child.var_infos:
    this
    main.ParserSpec.this
    main.ParserSpec.this.isInit
    main.ParserSpec.this.auxNonTerminals
    main.ParserSpec.this.auxNonTerminals[..]
    main.ParserSpec.this.auxNonTerminals[..].getClass().getName()
    main.ParserSpec.this.symbolValueClasses
    main.ParserSpec.this.precedences
    main.ParserSpec.this.precedences.list
    main.ParserSpec.this.precedences.list[..]
    main.ParserSpec.this.precedences.list[..].getClass().getName()
    main.ParserSpec.this.precedences.list.getClass().getName()
    main.ParserSpec.this.grammar
    edu.tum.cup2.grammar.Grammar.serialVersionUID
    main.ParserSpec.this.grammar.terminals
    main.ParserSpec.this.grammar.terminals[..]
    main.ParserSpec.this.grammar.terminals[..].getClass().getName()
    main.ParserSpec.this.grammar.nonTerminals
    main.ParserSpec.this.grammar.nonTerminals[..]
    main.ParserSpec.this.grammar.nonTerminals[..].getClass().getName()
    main.ParserSpec.this.grammar.productions
    main.ParserSpec.this.grammar.productions[..]
    main.ParserSpec.this.grammar.productions[..].getClass().getName()
    main.ParserSpec.this.grammarInterface
    edu.tum.cup2.semantics.ParserInterface.serialVersionUID
    main.ParserSpec.this.productionCount
    main.ParserSpec.this.auxiliaryProductions
    main.ParserSpec.this.auxiliaryProductions[..]
    main.ParserSpec.this.auxiliaryProductions[..].getClass().getName()
    this.method
    this.actionSubclass
    this.paramsCount
    this.returnsVoid
    this.parserInstance
    edu.tum.cup2.parser.LRParser.serialVersionUID
    this.parserInstance.DEBUG
    this.parserInstance.maxErrors
    this.parserInstance.table
    edu.tum.cup2.parser.tables.LRParsingTable.serialVersionUID
    this.parserInstance.table.grammar
    this.parserInstance.table.states
    this.parserInstance.table.states[..]
    this.parserInstance.table.states[..].getClass().getName()
    this.parserInstance.table.actionTable
    this.parserInstance.table.gotoTable
    this.parserInstance.table.erI
    this.parserInstance.stack
    this.parserInstance.valueStack
    this.parserInstance.tokenCountStack
    this.parserInstance.saveTokens
    this.parserInstance.parsedTokens
    this.parserInstance.parsedTokens[..]
    this.parserInstance.parsedTokens[..].getClass().getName()
    this.parserInstance.parsedTokens.getClass().getName()
    this.parserInstance.lastError_sync_size
    this.parserInstance.lastError_start_sync_size
    this.parserInstance.lastError_stateStack
    this.parserInstance.lastError_tokenCountStack
    this.parserInstance.dryRun_savedActions
    this.parserInstance.dryRun_savedActions[..]
    this.parserInstance.dryRun_savedActions[..].getClass().getName()
    this.parserInstance.dryRun_savedActions.getClass().getName()
    this.parserInstance.lastErrorInformation
    edu.tum.cup2.semantics.ErrorInformation.serialVersionUID
    this.parserInstance.lastErrorInformation.crashToken
    this.parserInstance.lastErrorInformation.poppedValues
    this.parserInstance.lastErrorInformation.poppedValues.getClass().getName()
    this.parserInstance.lastErrorInformation.poppedValues[..]
    this.parserInstance.lastErrorInformation.poppedValues[..].getClass().getName()
    this.parserInstance.lastErrorInformation.poppedTokens
    this.parserInstance.lastErrorInformation.poppedTokens.getClass().getName()
    this.parserInstance.lastErrorInformation.poppedTokens[..]
    this.parserInstance.lastErrorInformation.poppedTokens[..].getClass().getName()
    this.parserInstance.lastErrorInformation.poppedTokens[..].line
    this.parserInstance.lastErrorInformation.poppedTokens[..].column
    this.parserInstance.lastErrorInformation.poppedTokens[..].symbol
    this.parserInstance.lastErrorInformation.poppedTokens[..].symbol.getClass().getName()
    this.parserInstance.lastErrorInformation.poppedTokens[..].value
    this.parserInstance.lastErrorInformation.poppedTokens[..].value.getClass().getName()
    this.parserInstance.lastErrorInformation.poppedTokens[..].hasValue
    this.parserInstance.lastErrorInformation.readTokens
    this.parserInstance.lastErrorInformation.readTokens.getClass().getName()
    this.parserInstance.lastErrorInformation.readTokens[..]
    this.parserInstance.lastErrorInformation.readTokens[..].getClass().getName()
    this.parserInstance.lastErrorInformation.readTokens[..].line
    this.parserInstance.lastErrorInformation.readTokens[..].column
    this.parserInstance.lastErrorInformation.readTokens[..].symbol
    this.parserInstance.lastErrorInformation.readTokens[..].symbol.getClass().getName()
    this.parserInstance.lastErrorInformation.readTokens[..].value
    this.parserInstance.lastErrorInformation.readTokens[..].value.getClass().getName()
    this.parserInstance.lastErrorInformation.readTokens[..].hasValue
    this.parserInstance.lastErrorInformation.expectedTerminals
    this.parserInstance.lastErrorInformation.expectedTerminals.getClass().getName()
    this.parserInstance.lastErrorInformation.expectedTerminals[..]
    this.parserInstance.lastErrorInformation.expectedTerminals[..].getClass().getName()
    this.parserInstance.lastErrorInformation.recovered
    this.parserInstance.lastErrorInformation.beginLine
    this.parserInstance.lastErrorInformation.beginColumn
    this.parserInstance.lastErrorInformation.endLine
    this.parserInstance.lastErrorInformation.endColumn
    this.parserInstance.lastErrorInformation.proposals
    this.parserInstance.lastErrorInformation.proposals.getClass().getName()
    this.parserInstance.lastErrorInformation.proposals[..]
    this.parserInstance.lastErrorInformation.proposals[..].getClass().getName()
    this.parserInstance.lastErrorInformation.insertedValue
    this.parserInstance.lastErrorInformation.insertedValue.getClass().getName()
    this.parserInstance.input
    this.parserInstance.input.getClass().getName()
    this.parserInstance.currentToken
    this.parserInstance.currentToken.line
    this.parserInstance.currentToken.column
    edu.tum.cup2.semantics.SymbolValue.NoValue
    edu.tum.cup2.semantics.SymbolValue.NoValue.getClass().getName()
    this.parserInstance.currentToken.symbol
    this.parserInstance.currentToken.symbol.getClass().getName()
    this.parserInstance.currentToken.value
    this.parserInstance.currentToken.value.getClass().getName()
    this.parserInstance.currentToken.hasValue
    this.parserInstance.currentState
    edu.tum.cup2.parser.states.LRParserState.serialVersionUID
    this.parserInstance.currentState.id
    this.parserInstance.currentState.beginLine
    this.parserInstance.currentState.beginColumn
    this.parserInstance.observers
    this.parserInstance.observers[..]
    this.parserInstance.observers[..].getClass().getName()
    this.parserInstance.observers.getClass().getName()
    orig(main.ParserSpec.this)
    orig(main.ParserSpec.this.isInit)
    orig(main.ParserSpec.this.auxNonTerminals)
    orig(main.ParserSpec.this.auxNonTerminals[..])
    orig(main.ParserSpec.this.auxNonTerminals[..].getClass().getName())
    orig(main.ParserSpec.this.symbolValueClasses)
    orig(main.ParserSpec.this.precedences)
    orig(main.ParserSpec.this.precedences.list)
    orig(main.ParserSpec.this.precedences.list[..])
    orig(main.ParserSpec.this.precedences.list[..].getClass().getName())
    orig(main.ParserSpec.this.precedences.list.getClass().getName())
    orig(main.ParserSpec.this.grammar)
    orig(main.ParserSpec.this.grammar.terminals)
    orig(main.ParserSpec.this.grammar.terminals[..])
    orig(main.ParserSpec.this.grammar.terminals[..].getClass().getName())
    orig(main.ParserSpec.this.grammar.nonTerminals)
    orig(main.ParserSpec.this.grammar.nonTerminals[..])
    orig(main.ParserSpec.this.grammar.nonTerminals[..].getClass().getName())
    orig(main.ParserSpec.this.grammar.productions)
    orig(main.ParserSpec.this.grammar.productions[..])
    orig(main.ParserSpec.this.grammar.productions[..].getClass().getName())
    orig(main.ParserSpec.this.grammarInterface)
    orig(main.ParserSpec.this.productionCount)
    orig(main.ParserSpec.this.auxiliaryProductions)
    orig(main.ParserSpec.this.auxiliaryProductions[..])
    orig(main.ParserSpec.this.auxiliaryProductions[..].getClass().getName())
    size(main.ParserSpec.this.auxNonTerminals[..])
    size(main.ParserSpec.this.auxNonTerminals[..])-1
    size(main.ParserSpec.this.precedences.list[..])
    size(main.ParserSpec.this.precedences.list[..])-1
    size(main.ParserSpec.this.grammar.terminals[..])
    size(main.ParserSpec.this.grammar.terminals[..])-1
    size(main.ParserSpec.this.grammar.nonTerminals[..])
    size(main.ParserSpec.this.grammar.nonTerminals[..])-1
    size(main.ParserSpec.this.grammar.productions[..])
    size(main.ParserSpec.this.grammar.productions[..])-1
    size(main.ParserSpec.this.auxiliaryProductions[..])
    size(main.ParserSpec.this.auxiliaryProductions[..])-1
    size(this.parserInstance.table.states[..])
    size(this.parserInstance.table.states[..])-1
    size(this.parserInstance.parsedTokens[..])
    size(this.parserInstance.parsedTokens[..])-1
    size(this.parserInstance.dryRun_savedActions[..])
    size(this.parserInstance.dryRun_savedActions[..])-1
    size(this.parserInstance.lastErrorInformation.poppedValues[..])
    size(this.parserInstance.lastErrorInformation.poppedValues[..])-1
    size(this.parserInstance.lastErrorInformation.poppedTokens[..])
    size(this.parserInstance.lastErrorInformation.poppedTokens[..])-1
    size(this.parserInstance.lastErrorInformation.readTokens[..])
    size(this.parserInstance.lastErrorInformation.readTokens[..])-1
    size(this.parserInstance.lastErrorInformation.expectedTerminals[..])
    size(this.parserInstance.lastErrorInformation.expectedTerminals[..])-1
    size(this.parserInstance.lastErrorInformation.proposals[..])
    size(this.parserInstance.lastErrorInformation.proposals[..])-1
    size(this.parserInstance.observers[..])
    size(this.parserInstance.observers[..])-1
    orig(size(main.ParserSpec.this.auxNonTerminals[..]))
    orig(size(main.ParserSpec.this.auxNonTerminals[..]))-1
    orig(size(main.ParserSpec.this.precedences.list[..]))
    orig(size(main.ParserSpec.this.precedences.list[..]))-1
    orig(size(main.ParserSpec.this.grammar.terminals[..]))
    orig(size(main.ParserSpec.this.grammar.terminals[..]))-1
    orig(size(main.ParserSpec.this.grammar.nonTerminals[..]))
    orig(size(main.ParserSpec.this.grammar.nonTerminals[..]))-1
    orig(size(main.ParserSpec.this.grammar.productions[..]))
    orig(size(main.ParserSpec.this.grammar.productions[..]))-1
    orig(size(main.ParserSpec.this.auxiliaryProductions[..]))
    orig(size(main.ParserSpec.this.auxiliaryProductions[..]))-1
End of diagnostics for newEnterExitRel(main.ParserSpec$2.(main.ParserSpec):::ENTER, main.ParserSpec$2.(main.ParserSpec):::EXIT)
===========================================================================
edu.tum.cup2.generator.Automaton:::OBJECT
this has only one value
this.states has only one value
this.states != null
this.states.getClass().getName() == java.util.Collections$SynchronizedSet.class
this.edges has only one value
this.edges != null
this.edges.getClass().getName() == java.util.Collections$SynchronizedSet.class
this.startState has only one value
this.startState != null
this.startState.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
this.startState.items has only one value
this.startState.items != null
this.startState.items.getClass().getName() == java.util.HashSet.class
===========================================================================
edu.tum.cup2.generator.Automaton.Automaton(edu.tum.cup2.generator.states.State):::ENTER
arg0 has only one value
arg0.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
arg0.items has only one value
arg0.items.getClass().getName() == java.util.HashSet.class
===========================================================================
edu.tum.cup2.generator.Automaton.Automaton(edu.tum.cup2.generator.states.State):::EXIT
arg0.items == orig(arg0.items)
arg0.items.getClass().getName() == orig(arg0.items.getClass().getName())
arg0.items has only one value
arg0.items.getClass().getName() == java.util.HashSet.class
===========================================================================
edu.tum.cup2.generator.Automaton.getEdges():::ENTER
===========================================================================
edu.tum.cup2.generator.Automaton.getEdges():::EXIT
this.states == orig(this.states)
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.edges == orig(this.edges)
this.edges.getClass().getName() == orig(this.edges.getClass().getName())
this.startState == orig(this.startState)
this.startState.getClass().getName() == orig(this.startState.getClass().getName())
this.startState.items == orig(this.startState.items)
this.startState.items.getClass().getName() == orig(this.startState.items.getClass().getName())
return has only one value
return.getClass().getName() == java.util.Collections$SynchronizedSet.class
===========================================================================
edu.tum.cup2.generator.Automaton.getStartState():::ENTER
===========================================================================
edu.tum.cup2.generator.Automaton.getStartState():::EXIT
this.states == orig(this.states)
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.edges == orig(this.edges)
this.edges.getClass().getName() == orig(this.edges.getClass().getName())
this.startState == orig(this.startState)
this.startState.getClass().getName() == orig(this.startState.getClass().getName())
this.startState.items == orig(this.startState.items)
this.startState.items.getClass().getName() == orig(this.startState.items.getClass().getName())
return has only one value
return.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
return.items has only one value
return.items.getClass().getName() == java.util.HashSet.class
===========================================================================
edu.tum.cup2.generator.Automaton.getStates():::ENTER
===========================================================================
edu.tum.cup2.generator.Automaton.getStates():::EXIT
this.states == orig(this.states)
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.edges == orig(this.edges)
this.edges.getClass().getName() == orig(this.edges.getClass().getName())
this.startState == orig(this.startState)
this.startState.getClass().getName() == orig(this.startState.getClass().getName())
this.startState.items == orig(this.startState.items)
this.startState.items.getClass().getName() == orig(this.startState.items.getClass().getName())
return has only one value
return.getClass().getName() == java.util.Collections$SynchronizedSet.class
===========================================================================
edu.tum.cup2.generator.AutomatonFactory:::CLASS
===========================================================================
edu.tum.cup2.generator.AutomatonFactory:::OBJECT
this has only one value
this.getClass().getName() == edu.tum.cup2.generator.LALR1AutomatonFactory.class
this.ret.states has only one value
this.ret.states != null
this.ret.states.getClass().getName() == java.util.Collections$SynchronizedSet.class
this.ret.edges has only one value
this.ret.edges != null
this.ret.edges.getClass().getName() == java.util.Collections$SynchronizedSet.class
this.ret.startState has only one value
this.ret.startState != null
this.ret.startState.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
this.ret.startState.items has only one value
this.ret.startState.items != null
this.ret.startState.items.getClass().getName() == java.util.HashSet.class
this.grammarInfo.grammar has only one value
this.grammarInfo.grammar != null
this.grammarInfo.grammar.terminals has only one value
this.grammarInfo.grammar.terminals != null
this.grammarInfo.grammar.terminals[] contains no nulls and has only one value, of length 30
this.grammarInfo.grammar.terminals[] elements != null
this.grammarInfo.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.grammarInfo.grammar.nonTerminals has only one value
this.grammarInfo.grammar.nonTerminals != null
this.grammarInfo.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
this.grammarInfo.grammar.nonTerminals[] elements != null
this.grammarInfo.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.grammarInfo.grammar.productions has only one value
this.grammarInfo.grammar.productions != null
this.grammarInfo.grammar.productions[] contains no nulls and has only one value, of length 48
this.grammarInfo.grammar.productions[] elements != null
this.grammarInfo.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
this.grammarInfo.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
this.grammarInfo.nullableSet has only one value
this.grammarInfo.nullableSet != null
this.grammarInfo.firstSets has only one value
this.grammarInfo.firstSets != null
this.grammarInfo.firstSets.data has only one value
this.grammarInfo.firstSets.data != null
this.grammarInfo.firstSets.data.getClass().getName() == java.util.HashMap.class
this.grammarInfo.productionsStartingWith has only one value
this.grammarInfo.productionsStartingWith != null
this.grammarInfo.emptyTerminalsSet has only one value
this.grammarInfo.emptyTerminalsSet != null
this.grammarInfo.emptyTerminalsSet.data has only one value
this.grammarInfo.emptyTerminalsSet.data != null
this.grammarInfo.emptyTerminalsSet.data[] == [0, 0]
this.grammarInfo.emptyTerminalsSet.data[] elements == 0
this.grammarInfo.emptyTerminalsSet.indices has only one value
this.grammarInfo.emptyTerminalsSet.indices != null
this.grammarInfo.emptyTerminalsSet.indices.getClass().getName() == java.util.HashMap.class
this.grammarInfo.emptyTerminalsSet.terminals has only one value
this.grammarInfo.emptyTerminalsSet.terminals != null
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() == java.util.LinkedList.class
this.grammarInfo.emptyTerminalsSet.indexEpsilon == 0
edu.tum.cup2.generator.Verbosity.None has only one value
edu.tum.cup2.generator.Verbosity.None != null
edu.tum.cup2.generator.Verbosity.Sparse has only one value
edu.tum.cup2.generator.Verbosity.Sparse != null
edu.tum.cup2.generator.Verbosity.Verbose has only one value
edu.tum.cup2.generator.Verbosity.Verbose != null
edu.tum.cup2.generator.Verbosity.Detailled has only one value
edu.tum.cup2.generator.Verbosity.Detailled != null
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == 0
edu.tum.cup2.generator.Verbosity.$VALUES has only one value
edu.tum.cup2.generator.Verbosity.$VALUES != null
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == edu.tum.cup2.generator.Verbosity[].class
edu.tum.cup2.generator.Verbosity.$VALUES[] contains no nulls and has only one value, of length 4
edu.tum.cup2.generator.Verbosity.$VALUES[] elements != null
edu.tum.cup2.generator.Verbosity.$VALUES[].getClass().getName() == [edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity]
edu.tum.cup2.generator.Verbosity.$VALUES[].getClass().getName() elements == edu.tum.cup2.generator.Verbosity.class
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == [0, 1000, 100, 1]
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep elements >= 0
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == 1000
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == 100
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == 1
this.verbosity.statesCounterStep == 0
this.grammar.terminals has only one value
this.grammar.terminals != null
this.grammar.terminals[] contains no nulls and has only one value, of length 30
this.grammar.terminals[] elements != null
this.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.grammar.nonTerminals has only one value
this.grammar.nonTerminals != null
this.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
this.grammar.nonTerminals[] elements != null
this.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.grammar.productions has only one value
this.grammar.productions != null
this.grammar.productions[] contains no nulls and has only one value, of length 48
this.grammar.productions[] elements != null
this.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
this.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
this.generator.getClass().getName() == edu.tum.cup2.generator.LALR1Generator.class
this.generator.grammarInfo has only one value
this.generator.grammarInfo != null
this.generator.grammarInfo.grammar has only one value
this.generator.grammarInfo.grammar != null
this.generator.grammarInfo.nullableSet has only one value
this.generator.grammarInfo.nullableSet != null
this.generator.grammarInfo.firstSets has only one value
this.generator.grammarInfo.firstSets != null
this.generator.grammarInfo.productionsStartingWith has only one value
this.generator.grammarInfo.productionsStartingWith != null
this.generator.grammarInfo.emptyTerminalsSet has only one value
this.generator.grammarInfo.emptyTerminalsSet != null
this.generator.parsingTable == null
this.generator.automaton == null
edu.tum.cup2.generator.LRGenerator.numThreads == 4
this.generator.LOG_shortestWordFinder == false
this.generator.grammar has only one value
this.generator.grammar != null
this.generator.grammar.terminals has only one value
this.generator.grammar.terminals != null
this.generator.grammar.terminals[] contains no nulls and has only one value, of length 30
this.generator.grammar.terminals[] elements != null
this.generator.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.generator.grammar.nonTerminals has only one value
this.generator.grammar.nonTerminals != null
this.generator.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
this.generator.grammar.nonTerminals[] elements != null
this.generator.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.generator.grammar.productions has only one value
this.generator.grammar.productions != null
this.generator.grammar.productions[] contains no nulls and has only one value, of length 48
this.generator.grammar.productions[] elements != null
this.generator.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
this.generator.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
this.generator.precedences has only one value
this.generator.precedences != null
this.generator.precedences.list has only one value
this.generator.precedences.list != null
this.generator.precedences.list[] contains no nulls and has only one value, of length 1
this.generator.precedences.list[] elements has only one value
this.generator.precedences.list[] elements != null
this.generator.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
this.generator.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
this.generator.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
this.generator.verbosity has only one value
this.generator.verbosity != null
this.generator.verbosity.statesCounterStep == 0
this.generator.debugOut has only one value
this.generator.debugOut != null
this.queue[] elements has only one value
this.queue[] elements != null
this.queue[].getClass().getName() elements == edu.tum.cup2.generator.states.LR1State.class
this.queue[].getClass().getName() one of { [], [edu.tum.cup2.generator.states.LR1State] }
this.queue.getClass().getName() == java.util.LinkedList.class
this.state == null
this.stateKernel.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
this.stateKernel.items != null
this.stateKernel.items.getClass().getName() == java.util.HashSet.class
this.dfaEdges.getClass().getName() == java.util.Collections$SynchronizedSet.class
this.dfaStates.getClass().getName() == java.util.Collections$SynchronizedSet.class
this.statesCounterMsgStep == 0
this.statesCounterMsgNext == 0
this.iterationsCounter >= 0
this.debug == false
this.numThreads == 0
this.threadPool == null
this.state0.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
this.state0.items has only one value
this.state0.items != null
this.state0.items.getClass().getName() == java.util.HashSet.class
this.taskCount == 0
this.taskCountLock == null
this.shutDownThread == null
size(this.grammarInfo.grammar.terminals[]) == 30
size(this.grammarInfo.grammar.nonTerminals[]) == 16
size(this.grammarInfo.grammar.productions[]) == 48
size(this.grammarInfo.emptyTerminalsSet.data[]) == 2
size(edu.tum.cup2.generator.Verbosity.$VALUES[]) == 4
size(this.grammar.terminals[]) == 30
size(this.grammar.nonTerminals[]) == 16
size(this.grammar.productions[]) == 48
size(this.generator.grammar.terminals[]) == 30
size(this.generator.grammar.nonTerminals[]) == 16
size(this.generator.grammar.productions[]) == 48
size(this.generator.precedences.list[]) == 1
size(this.queue[]) one of { 0, 1 }
===========================================================================
edu.tum.cup2.generator.AutomatonFactory.AutomatonFactory():::EXIT
this.ret == null
this.grammarInfo == null
this.verbosity == null
this.debugOut == null
this.grammar == null
this.generator == null
this.queue == null
this.stateKernel == null
this.dfaEdges == null
this.dfaStates == null
this.iterationsCounter == 0
this.state0 == null
===========================================================================
edu.tum.cup2.generator.AutomatonFactory.initCreation():::ENTER
this.ret == null
this.grammarInfo has only one value
this.verbosity == null
this.debugOut == null
this.grammar == null
this.generator has only one value
this.queue == null
this.stateKernel == null
this.dfaEdges == null
this.dfaStates == null
this.iterationsCounter == 0
this.state0 == null
===========================================================================
edu.tum.cup2.generator.AutomatonFactory.initCreation():::EXIT
this.grammarInfo == orig(this.grammarInfo)
this.grammarInfo.grammar == orig(this.grammarInfo.grammar)
this.grammarInfo.grammar.terminals == orig(this.grammarInfo.grammar.terminals)
this.grammarInfo.grammar.terminals[] == orig(this.grammarInfo.grammar.terminals[])
this.grammarInfo.grammar.nonTerminals == orig(this.grammarInfo.grammar.nonTerminals)
this.grammarInfo.grammar.nonTerminals[] == orig(this.grammarInfo.grammar.nonTerminals[])
this.grammarInfo.grammar.productions == orig(this.grammarInfo.grammar.productions)
this.grammarInfo.grammar.productions[] == orig(this.grammarInfo.grammar.productions[])
this.grammarInfo.nullableSet == orig(this.grammarInfo.nullableSet)
this.grammarInfo.firstSets == orig(this.grammarInfo.firstSets)
this.grammarInfo.firstSets.data == orig(this.grammarInfo.firstSets.data)
this.grammarInfo.firstSets.data.getClass().getName() == orig(this.grammarInfo.firstSets.data.getClass().getName())
this.grammarInfo.productionsStartingWith == orig(this.grammarInfo.productionsStartingWith)
this.grammarInfo.emptyTerminalsSet == orig(this.grammarInfo.emptyTerminalsSet)
this.grammarInfo.emptyTerminalsSet.data == orig(this.grammarInfo.emptyTerminalsSet.data)
this.grammarInfo.emptyTerminalsSet.data[] == orig(this.grammarInfo.emptyTerminalsSet.data[])
this.grammarInfo.emptyTerminalsSet.indices == orig(this.grammarInfo.emptyTerminalsSet.indices)
this.grammarInfo.emptyTerminalsSet.indices.getClass().getName() == orig(this.grammarInfo.emptyTerminalsSet.indices.getClass().getName())
this.grammarInfo.emptyTerminalsSet.terminals == orig(this.grammarInfo.emptyTerminalsSet.terminals)
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() == orig(this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName())
this.grammarInfo.emptyTerminalsSet.indexEpsilon == orig(this.grammarInfo.emptyTerminalsSet.indexEpsilon)
edu.tum.cup2.generator.Verbosity.None == orig(edu.tum.cup2.generator.Verbosity.None)
edu.tum.cup2.generator.Verbosity.Sparse == orig(edu.tum.cup2.generator.Verbosity.Sparse)
edu.tum.cup2.generator.Verbosity.Verbose == orig(edu.tum.cup2.generator.Verbosity.Verbose)
edu.tum.cup2.generator.Verbosity.Detailled == orig(edu.tum.cup2.generator.Verbosity.Detailled)
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.None.statesCounterStep)
edu.tum.cup2.generator.Verbosity.$VALUES == orig(edu.tum.cup2.generator.Verbosity.$VALUES)
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == orig(edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName())
edu.tum.cup2.generator.Verbosity.$VALUES[] == orig(edu.tum.cup2.generator.Verbosity.$VALUES[])
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep)
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep)
this.generator == orig(this.generator)
this.generator.getClass().getName() == orig(this.generator.getClass().getName())
this.generator.grammarInfo == orig(this.generator.grammarInfo)
this.generator.grammarInfo.grammar == orig(this.generator.grammarInfo.grammar)
this.generator.grammarInfo.nullableSet == orig(this.generator.grammarInfo.nullableSet)
this.generator.grammarInfo.firstSets == orig(this.generator.grammarInfo.firstSets)
this.generator.grammarInfo.productionsStartingWith == orig(this.generator.grammarInfo.productionsStartingWith)
this.generator.grammarInfo.emptyTerminalsSet == orig(this.generator.grammarInfo.emptyTerminalsSet)
this.generator.parsingTable == orig(this.generator.parsingTable)
this.generator.automaton == orig(this.generator.automaton)
edu.tum.cup2.generator.LRGenerator.numThreads == orig(edu.tum.cup2.generator.LRGenerator.numThreads)
this.generator.LOG_shortestWordFinder == orig(this.generator.LOG_shortestWordFinder)
this.generator.grammar == orig(this.generator.grammar)
this.generator.grammar.terminals == orig(this.generator.grammar.terminals)
this.generator.grammar.terminals[] == orig(this.generator.grammar.terminals[])
this.generator.grammar.nonTerminals == orig(this.generator.grammar.nonTerminals)
this.generator.grammar.nonTerminals[] == orig(this.generator.grammar.nonTerminals[])
this.generator.grammar.productions == orig(this.generator.grammar.productions)
this.generator.grammar.productions[] == orig(this.generator.grammar.productions[])
this.generator.precedences == orig(this.generator.precedences)
this.generator.precedences.list == orig(this.generator.precedences.list)
this.generator.precedences.list[] == orig(this.generator.precedences.list[])
this.generator.precedences.list.getClass().getName() == orig(this.generator.precedences.list.getClass().getName())
this.generator.verbosity == orig(this.generator.verbosity)
this.generator.verbosity.statesCounterStep == orig(this.generator.verbosity.statesCounterStep)
this.generator.debugOut == orig(this.generator.debugOut)
this.state == orig(this.state)
this.stateKernel == orig(this.stateKernel)
this.statesCounterMsgStep == orig(this.statesCounterMsgStep)
this.statesCounterMsgNext == orig(this.statesCounterMsgNext)
this.iterationsCounter == orig(this.iterationsCounter)
this.debug == orig(this.debug)
this.numThreads == orig(this.numThreads)
this.threadPool == orig(this.threadPool)
this.taskCount == orig(this.taskCount)
this.taskCountLock == orig(this.taskCountLock)
this.shutDownThread == orig(this.shutDownThread)
this.ret has only one value
this.grammarInfo has only one value
this.verbosity has only one value
this.debugOut has only one value
this.grammar has only one value
this.generator has only one value
this.queue has only one value
this.queue[] contains no nulls and has only one value, of length 1
this.queue[].getClass().getName() == [edu.tum.cup2.generator.states.LR1State]
this.stateKernel == null
this.dfaEdges has only one value
this.dfaStates has only one value
this.iterationsCounter == 0
this.state0 has only one value
size(this.queue[]) == 1
===========================================================================
edu.tum.cup2.generator.AutomatonFactory.printDebugMessages():::ENTER
this.ret has only one value
this.ret != null
this.grammarInfo has only one value
this.grammarInfo != null
this.verbosity has only one value
this.verbosity != null
this.debugOut has only one value
this.debugOut != null
this.grammar has only one value
this.grammar != null
this.generator has only one value
this.generator != null
this.queue has only one value
this.queue != null
this.queue[] == []
this.queue[].getClass().getName() == []
this.stateKernel != null
this.dfaEdges has only one value
this.dfaEdges != null
this.dfaStates has only one value
this.dfaStates != null
this.state0 has only one value
this.state0 != null
===========================================================================
edu.tum.cup2.generator.AutomatonFactory.printDebugMessages():::EXIT
this.ret == orig(this.ret)
this.ret.states == orig(this.ret.states)
this.ret.states.getClass().getName() == orig(this.ret.states.getClass().getName())
this.ret.edges == orig(this.ret.edges)
this.ret.edges.getClass().getName() == orig(this.ret.edges.getClass().getName())
this.ret.startState == orig(this.ret.startState)
this.ret.startState.getClass().getName() == orig(this.ret.startState.getClass().getName())
this.ret.startState.items == orig(this.ret.startState.items)
this.ret.startState.items.getClass().getName() == orig(this.ret.startState.items.getClass().getName())
this.grammarInfo == orig(this.grammarInfo)
this.grammarInfo.grammar == orig(this.grammarInfo.grammar)
this.grammarInfo.grammar.terminals == orig(this.grammarInfo.grammar.terminals)
this.grammarInfo.grammar.terminals[] == orig(this.grammarInfo.grammar.terminals[])
this.grammarInfo.grammar.nonTerminals == orig(this.grammarInfo.grammar.nonTerminals)
this.grammarInfo.grammar.nonTerminals[] == orig(this.grammarInfo.grammar.nonTerminals[])
this.grammarInfo.grammar.productions == orig(this.grammarInfo.grammar.productions)
this.grammarInfo.grammar.productions[] == orig(this.grammarInfo.grammar.productions[])
this.grammarInfo.nullableSet == orig(this.grammarInfo.nullableSet)
this.grammarInfo.firstSets == orig(this.grammarInfo.firstSets)
this.grammarInfo.firstSets.data == orig(this.grammarInfo.firstSets.data)
this.grammarInfo.firstSets.data.getClass().getName() == orig(this.grammarInfo.firstSets.data.getClass().getName())
this.grammarInfo.productionsStartingWith == orig(this.grammarInfo.productionsStartingWith)
this.grammarInfo.emptyTerminalsSet == orig(this.grammarInfo.emptyTerminalsSet)
this.grammarInfo.emptyTerminalsSet.data == orig(this.grammarInfo.emptyTerminalsSet.data)
this.grammarInfo.emptyTerminalsSet.data[] == orig(this.grammarInfo.emptyTerminalsSet.data[])
this.grammarInfo.emptyTerminalsSet.indices == orig(this.grammarInfo.emptyTerminalsSet.indices)
this.grammarInfo.emptyTerminalsSet.indices.getClass().getName() == orig(this.grammarInfo.emptyTerminalsSet.indices.getClass().getName())
this.grammarInfo.emptyTerminalsSet.terminals == orig(this.grammarInfo.emptyTerminalsSet.terminals)
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() == orig(this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName())
this.grammarInfo.emptyTerminalsSet.indexEpsilon == orig(this.grammarInfo.emptyTerminalsSet.indexEpsilon)
this.verbosity == orig(this.verbosity)
edu.tum.cup2.generator.Verbosity.None == orig(edu.tum.cup2.generator.Verbosity.None)
edu.tum.cup2.generator.Verbosity.Sparse == orig(edu.tum.cup2.generator.Verbosity.Sparse)
edu.tum.cup2.generator.Verbosity.Verbose == orig(edu.tum.cup2.generator.Verbosity.Verbose)
edu.tum.cup2.generator.Verbosity.Detailled == orig(edu.tum.cup2.generator.Verbosity.Detailled)
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.None.statesCounterStep)
edu.tum.cup2.generator.Verbosity.$VALUES == orig(edu.tum.cup2.generator.Verbosity.$VALUES)
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == orig(edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName())
edu.tum.cup2.generator.Verbosity.$VALUES[] == orig(edu.tum.cup2.generator.Verbosity.$VALUES[])
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep)
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep)
this.verbosity.statesCounterStep == orig(this.verbosity.statesCounterStep)
this.debugOut == orig(this.debugOut)
this.grammar == orig(this.grammar)
this.grammar.terminals == orig(this.grammar.terminals)
this.grammar.terminals[] == orig(this.grammar.terminals[])
this.grammar.nonTerminals == orig(this.grammar.nonTerminals)
this.grammar.nonTerminals[] == orig(this.grammar.nonTerminals[])
this.grammar.productions == orig(this.grammar.productions)
this.grammar.productions[] == orig(this.grammar.productions[])
this.generator == orig(this.generator)
this.generator.getClass().getName() == orig(this.generator.getClass().getName())
this.generator.grammarInfo == orig(this.generator.grammarInfo)
this.generator.grammarInfo.grammar == orig(this.generator.grammarInfo.grammar)
this.generator.grammarInfo.nullableSet == orig(this.generator.grammarInfo.nullableSet)
this.generator.grammarInfo.firstSets == orig(this.generator.grammarInfo.firstSets)
this.generator.grammarInfo.productionsStartingWith == orig(this.generator.grammarInfo.productionsStartingWith)
this.generator.grammarInfo.emptyTerminalsSet == orig(this.generator.grammarInfo.emptyTerminalsSet)
this.generator.parsingTable == orig(this.generator.parsingTable)
this.generator.automaton == orig(this.generator.automaton)
edu.tum.cup2.generator.LRGenerator.numThreads == orig(edu.tum.cup2.generator.LRGenerator.numThreads)
this.generator.LOG_shortestWordFinder == orig(this.generator.LOG_shortestWordFinder)
this.generator.grammar == orig(this.generator.grammar)
this.generator.grammar.terminals == orig(this.generator.grammar.terminals)
this.generator.grammar.terminals[] == orig(this.generator.grammar.terminals[])
this.generator.grammar.nonTerminals == orig(this.generator.grammar.nonTerminals)
this.generator.grammar.nonTerminals[] == orig(this.generator.grammar.nonTerminals[])
this.generator.grammar.productions == orig(this.generator.grammar.productions)
this.generator.grammar.productions[] == orig(this.generator.grammar.productions[])
this.generator.precedences == orig(this.generator.precedences)
this.generator.precedences.list == orig(this.generator.precedences.list)
this.generator.precedences.list[] == orig(this.generator.precedences.list[])
this.generator.precedences.list.getClass().getName() == orig(this.generator.precedences.list.getClass().getName())
this.generator.verbosity == orig(this.generator.verbosity)
this.generator.verbosity.statesCounterStep == orig(this.generator.verbosity.statesCounterStep)
this.generator.debugOut == orig(this.generator.debugOut)
this.queue == orig(this.queue)
this.queue[] == orig(this.queue[])
this.queue.getClass().getName() == orig(this.queue.getClass().getName())
this.state == orig(this.state)
this.stateKernel == orig(this.stateKernel)
this.stateKernel.getClass().getName() == orig(this.stateKernel.getClass().getName())
this.stateKernel.items == orig(this.stateKernel.items)
this.stateKernel.items.getClass().getName() == orig(this.stateKernel.items.getClass().getName())
this.dfaEdges == orig(this.dfaEdges)
this.dfaEdges.getClass().getName() == orig(this.dfaEdges.getClass().getName())
this.dfaStates == orig(this.dfaStates)
this.dfaStates.getClass().getName() == orig(this.dfaStates.getClass().getName())
this.statesCounterMsgStep == orig(this.statesCounterMsgStep)
this.statesCounterMsgNext == orig(this.statesCounterMsgNext)
this.debug == orig(this.debug)
this.numThreads == orig(this.numThreads)
this.threadPool == orig(this.threadPool)
this.state0 == orig(this.state0)
this.state0.getClass().getName() == orig(this.state0.getClass().getName())
this.state0.items == orig(this.state0.items)
this.state0.items.getClass().getName() == orig(this.state0.items.getClass().getName())
this.taskCount == orig(this.taskCount)
this.taskCountLock == orig(this.taskCountLock)
this.shutDownThread == orig(this.shutDownThread)
this.ret has only one value
this.ret != null
this.grammarInfo has only one value
this.grammarInfo != null
this.verbosity has only one value
this.verbosity != null
this.debugOut has only one value
this.debugOut != null
this.grammar has only one value
this.grammar != null
this.generator has only one value
this.generator != null
this.queue has only one value
this.queue != null
this.queue[] == []
this.queue[].getClass().getName() == []
this.stateKernel != null
this.dfaEdges has only one value
this.dfaEdges != null
this.dfaStates has only one value
this.dfaStates != null
this.state0 has only one value
this.state0 != null
this.iterationsCounter - orig(this.iterationsCounter) - 1 == 0
===========================================================================
edu.tum.cup2.generator.AutomatonFactory.printDebugResult():::ENTER
this.ret has only one value
this.grammarInfo has only one value
this.verbosity has only one value
this.debugOut has only one value
this.grammar has only one value
this.generator has only one value
this.queue has only one value
this.queue[] == []
this.queue[].getClass().getName() == []
this.stateKernel has only one value
this.stateKernel.items has only one value
this.dfaEdges has only one value
this.dfaStates has only one value
this.iterationsCounter == 211
this.state0 has only one value
===========================================================================
edu.tum.cup2.generator.AutomatonFactory.printDebugResult():::EXIT
this.ret == orig(this.ret)
this.ret.states == orig(this.ret.states)
this.ret.states.getClass().getName() == orig(this.ret.states.getClass().getName())
this.ret.edges == orig(this.ret.edges)
this.ret.edges.getClass().getName() == orig(this.ret.edges.getClass().getName())
this.ret.startState == orig(this.ret.startState)
this.ret.startState.getClass().getName() == orig(this.ret.startState.getClass().getName())
this.ret.startState.items == orig(this.ret.startState.items)
this.ret.startState.items.getClass().getName() == orig(this.ret.startState.items.getClass().getName())
this.grammarInfo == orig(this.grammarInfo)
this.grammarInfo.grammar == orig(this.grammarInfo.grammar)
this.grammarInfo.grammar.terminals == orig(this.grammarInfo.grammar.terminals)
this.grammarInfo.grammar.terminals[] == orig(this.grammarInfo.grammar.terminals[])
this.grammarInfo.grammar.nonTerminals == orig(this.grammarInfo.grammar.nonTerminals)
this.grammarInfo.grammar.nonTerminals[] == orig(this.grammarInfo.grammar.nonTerminals[])
this.grammarInfo.grammar.productions == orig(this.grammarInfo.grammar.productions)
this.grammarInfo.grammar.productions[] == orig(this.grammarInfo.grammar.productions[])
this.grammarInfo.nullableSet == orig(this.grammarInfo.nullableSet)
this.grammarInfo.firstSets == orig(this.grammarInfo.firstSets)
this.grammarInfo.firstSets.data == orig(this.grammarInfo.firstSets.data)
this.grammarInfo.firstSets.data.getClass().getName() == orig(this.grammarInfo.firstSets.data.getClass().getName())
this.grammarInfo.productionsStartingWith == orig(this.grammarInfo.productionsStartingWith)
this.grammarInfo.emptyTerminalsSet == orig(this.grammarInfo.emptyTerminalsSet)
this.grammarInfo.emptyTerminalsSet.data == orig(this.grammarInfo.emptyTerminalsSet.data)
this.grammarInfo.emptyTerminalsSet.data[] == orig(this.grammarInfo.emptyTerminalsSet.data[])
this.grammarInfo.emptyTerminalsSet.indices == orig(this.grammarInfo.emptyTerminalsSet.indices)
this.grammarInfo.emptyTerminalsSet.indices.getClass().getName() == orig(this.grammarInfo.emptyTerminalsSet.indices.getClass().getName())
this.grammarInfo.emptyTerminalsSet.terminals == orig(this.grammarInfo.emptyTerminalsSet.terminals)
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() == orig(this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName())
this.grammarInfo.emptyTerminalsSet.indexEpsilon == orig(this.grammarInfo.emptyTerminalsSet.indexEpsilon)
this.verbosity == orig(this.verbosity)
edu.tum.cup2.generator.Verbosity.None == orig(edu.tum.cup2.generator.Verbosity.None)
edu.tum.cup2.generator.Verbosity.Sparse == orig(edu.tum.cup2.generator.Verbosity.Sparse)
edu.tum.cup2.generator.Verbosity.Verbose == orig(edu.tum.cup2.generator.Verbosity.Verbose)
edu.tum.cup2.generator.Verbosity.Detailled == orig(edu.tum.cup2.generator.Verbosity.Detailled)
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.None.statesCounterStep)
edu.tum.cup2.generator.Verbosity.$VALUES == orig(edu.tum.cup2.generator.Verbosity.$VALUES)
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == orig(edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName())
edu.tum.cup2.generator.Verbosity.$VALUES[] == orig(edu.tum.cup2.generator.Verbosity.$VALUES[])
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep)
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep)
this.verbosity.statesCounterStep == orig(this.verbosity.statesCounterStep)
this.debugOut == orig(this.debugOut)
this.grammar == orig(this.grammar)
this.grammar.terminals == orig(this.grammar.terminals)
this.grammar.terminals[] == orig(this.grammar.terminals[])
this.grammar.nonTerminals == orig(this.grammar.nonTerminals)
this.grammar.nonTerminals[] == orig(this.grammar.nonTerminals[])
this.grammar.productions == orig(this.grammar.productions)
this.grammar.productions[] == orig(this.grammar.productions[])
this.generator == orig(this.generator)
this.generator.getClass().getName() == orig(this.generator.getClass().getName())
this.generator.grammarInfo == orig(this.generator.grammarInfo)
this.generator.grammarInfo.grammar == orig(this.generator.grammarInfo.grammar)
this.generator.grammarInfo.nullableSet == orig(this.generator.grammarInfo.nullableSet)
this.generator.grammarInfo.firstSets == orig(this.generator.grammarInfo.firstSets)
this.generator.grammarInfo.productionsStartingWith == orig(this.generator.grammarInfo.productionsStartingWith)
this.generator.grammarInfo.emptyTerminalsSet == orig(this.generator.grammarInfo.emptyTerminalsSet)
this.generator.parsingTable == orig(this.generator.parsingTable)
this.generator.automaton == orig(this.generator.automaton)
edu.tum.cup2.generator.LRGenerator.numThreads == orig(edu.tum.cup2.generator.LRGenerator.numThreads)
this.generator.LOG_shortestWordFinder == orig(this.generator.LOG_shortestWordFinder)
this.generator.grammar == orig(this.generator.grammar)
this.generator.grammar.terminals == orig(this.generator.grammar.terminals)
this.generator.grammar.terminals[] == orig(this.generator.grammar.terminals[])
this.generator.grammar.nonTerminals == orig(this.generator.grammar.nonTerminals)
this.generator.grammar.nonTerminals[] == orig(this.generator.grammar.nonTerminals[])
this.generator.grammar.productions == orig(this.generator.grammar.productions)
this.generator.grammar.productions[] == orig(this.generator.grammar.productions[])
this.generator.precedences == orig(this.generator.precedences)
this.generator.precedences.list == orig(this.generator.precedences.list)
this.generator.precedences.list[] == orig(this.generator.precedences.list[])
this.generator.precedences.list.getClass().getName() == orig(this.generator.precedences.list.getClass().getName())
this.generator.verbosity == orig(this.generator.verbosity)
this.generator.verbosity.statesCounterStep == orig(this.generator.verbosity.statesCounterStep)
this.generator.debugOut == orig(this.generator.debugOut)
this.queue == orig(this.queue)
this.queue[] == orig(this.queue[])
this.queue.getClass().getName() == orig(this.queue.getClass().getName())
this.state == orig(this.state)
this.stateKernel == orig(this.stateKernel)
this.stateKernel.getClass().getName() == orig(this.stateKernel.getClass().getName())
this.stateKernel.items == orig(this.stateKernel.items)
this.stateKernel.items.getClass().getName() == orig(this.stateKernel.items.getClass().getName())
this.dfaEdges == orig(this.dfaEdges)
this.dfaEdges.getClass().getName() == orig(this.dfaEdges.getClass().getName())
this.dfaStates == orig(this.dfaStates)
this.dfaStates.getClass().getName() == orig(this.dfaStates.getClass().getName())
this.statesCounterMsgStep == orig(this.statesCounterMsgStep)
this.statesCounterMsgNext == orig(this.statesCounterMsgNext)
this.iterationsCounter == orig(this.iterationsCounter)
this.debug == orig(this.debug)
this.numThreads == orig(this.numThreads)
this.threadPool == orig(this.threadPool)
this.state0 == orig(this.state0)
this.state0.getClass().getName() == orig(this.state0.getClass().getName())
this.state0.items == orig(this.state0.items)
this.state0.items.getClass().getName() == orig(this.state0.items.getClass().getName())
this.taskCount == orig(this.taskCount)
this.taskCountLock == orig(this.taskCountLock)
this.shutDownThread == orig(this.shutDownThread)
this.ret has only one value
this.grammarInfo has only one value
this.verbosity has only one value
this.debugOut has only one value
this.grammar has only one value
this.generator has only one value
this.queue has only one value
this.queue[] == []
this.queue[].getClass().getName() == []
this.stateKernel has only one value
this.stateKernel.items has only one value
this.dfaEdges has only one value
this.dfaStates has only one value
this.iterationsCounter == 211
this.state0 has only one value
===========================================================================
edu.tum.cup2.generator.Edge:::OBJECT
this.src != null
this.src.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
this.src.items != null
this.src.items.getClass().getName() == java.util.HashSet.class
this.dest.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
this.dest.items != null
this.dest.items.getClass().getName() == java.util.HashSet.class
this.symbol != null
this.srcItem != null
this.srcItem.production != null
this.srcItem.production.id >= 0
this.srcItem.production.lhs != null
this.srcItem.production.rhs != null
this.srcItem.production.rhs[] elements != null
this.srcItem.production.rhsSizeWithoutEpsilon >= 1
this.srcItem.production.hashCode != 0
this.srcItem.position >= 0
this.srcItem.nextSymbol != null
this.srcItem.hashCode != 0
this.srcItem.shiftable == true
this.hashCache != 0
size(this.srcItem.production.rhs[]) >= 1
===========================================================================
edu.tum.cup2.generator.Edge.Edge(edu.tum.cup2.generator.states.State, edu.tum.cup2.grammar.Symbol, edu.tum.cup2.generator.states.State, edu.tum.cup2.generator.items.LR0Item):::ENTER
arg0 != null
arg0.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
arg0.items != null
arg0.items.getClass().getName() == java.util.HashSet.class
arg1 != null
arg2.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
arg2.items != null
arg2.items.getClass().getName() == java.util.HashSet.class
arg3 != null
arg3.production != null
arg3.production.lhs != null
arg3.production.rhs != null
arg3.production.rhs[] elements != null
arg3.production.rhsSizeWithoutEpsilon >= 1
arg3.production.hashCode != 0
arg3.position >= 0
arg3.nextSymbol != null
arg3.hashCode != 0
arg3.shiftable == true
size(arg3.production.rhs[]) >= 1
===========================================================================
edu.tum.cup2.generator.Edge.Edge(edu.tum.cup2.generator.states.State, edu.tum.cup2.grammar.Symbol, edu.tum.cup2.generator.states.State, edu.tum.cup2.generator.items.LR0Item):::EXIT
arg0.items == orig(arg0.items)
arg0.items.getClass().getName() == orig(arg0.items.getClass().getName())
arg2.items == orig(arg2.items)
arg2.items.getClass().getName() == orig(arg2.items.getClass().getName())
arg3.production == orig(arg3.production)
arg3.production.id == orig(arg3.production.id)
arg3.production.lhs == orig(arg3.production.lhs)
arg3.production.lhs.getClass().getName() == orig(arg3.production.lhs.getClass().getName())
arg3.production.rhs == orig(arg3.production.rhs)
arg3.production.rhs[] == orig(arg3.production.rhs[])
arg3.production.rhs.getClass().getName() == orig(arg3.production.rhs.getClass().getName())
arg3.production.reduceAction == orig(arg3.production.reduceAction)
arg3.production.lastTerminal == orig(arg3.production.lastTerminal)
arg3.production.lastTerminal.getClass().getName() == orig(arg3.production.lastTerminal.getClass().getName())
arg3.production.precTerminal == orig(arg3.production.precTerminal)
arg3.production.precTerminal.getClass().getName() == orig(arg3.production.precTerminal.getClass().getName())
arg3.production.rhsSizeWithoutEpsilon == orig(arg3.production.rhsSizeWithoutEpsilon)
arg3.production.hashCode == orig(arg3.production.hashCode)
arg3.position == orig(arg3.position)
arg3.nextSymbol == orig(arg3.nextSymbol)
arg3.nextSymbol.getClass().getName() == orig(arg3.nextSymbol.getClass().getName())
arg3.hashCode == orig(arg3.hashCode)
arg3.shiftable == orig(arg3.shiftable)
arg0.items != null
arg0.items.getClass().getName() == java.util.HashSet.class
arg2.items != null
arg2.items.getClass().getName() == java.util.HashSet.class
arg3.production != null
arg3.production.lhs != null
arg3.production.rhs != null
arg3.production.rhs[] elements != null
arg3.production.rhsSizeWithoutEpsilon >= 1
arg3.production.hashCode != 0
arg3.position >= 0
arg3.nextSymbol != null
arg3.hashCode != 0
arg3.shiftable == true
size(arg3.production.rhs[]) >= 1
===========================================================================
edu.tum.cup2.generator.Edge.getDest():::ENTER
this.dest != null
===========================================================================
edu.tum.cup2.generator.Edge.getDest():::EXIT
this.src == orig(this.src)
this.src.getClass().getName() == orig(this.src.getClass().getName())
this.src.items == orig(this.src.items)
this.src.items.getClass().getName() == orig(this.src.items.getClass().getName())
this.dest == orig(this.dest)
this.dest.getClass().getName() == orig(this.dest.getClass().getName())
this.dest.items == orig(this.dest.items)
this.dest.items.getClass().getName() == orig(this.dest.items.getClass().getName())
this.symbol == orig(this.symbol)
this.symbol.getClass().getName() == orig(this.symbol.getClass().getName())
this.srcItem == orig(this.srcItem)
this.srcItem.production == orig(this.srcItem.production)
this.srcItem.production.id == orig(this.srcItem.production.id)
this.srcItem.production.lhs == orig(this.srcItem.production.lhs)
this.srcItem.production.lhs.getClass().getName() == orig(this.srcItem.production.lhs.getClass().getName())
this.srcItem.production.rhs == orig(this.srcItem.production.rhs)
this.srcItem.production.rhs[] == orig(this.srcItem.production.rhs[])
this.srcItem.production.rhs.getClass().getName() == orig(this.srcItem.production.rhs.getClass().getName())
this.srcItem.production.reduceAction == orig(this.srcItem.production.reduceAction)
this.srcItem.production.lastTerminal == orig(this.srcItem.production.lastTerminal)
this.srcItem.production.lastTerminal.getClass().getName() == orig(this.srcItem.production.lastTerminal.getClass().getName())
this.srcItem.production.precTerminal == orig(this.srcItem.production.precTerminal)
this.srcItem.production.precTerminal.getClass().getName() == orig(this.srcItem.production.precTerminal.getClass().getName())
this.srcItem.production.rhsSizeWithoutEpsilon == orig(this.srcItem.production.rhsSizeWithoutEpsilon)
this.srcItem.production.hashCode == orig(this.srcItem.production.hashCode)
this.srcItem.position == orig(this.srcItem.position)
this.srcItem.nextSymbol == orig(this.srcItem.nextSymbol)
this.srcItem.nextSymbol.getClass().getName() == orig(this.srcItem.nextSymbol.getClass().getName())
this.srcItem.hashCode == orig(this.srcItem.hashCode)
this.srcItem.shiftable == orig(this.srcItem.shiftable)
this.hashCache == orig(this.hashCache)
this.dest != null
return != null
return.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
return.items != null
return.items.getClass().getName() == java.util.HashSet.class
===========================================================================
edu.tum.cup2.generator.Edge.getSrc():::ENTER
===========================================================================
edu.tum.cup2.generator.Edge.getSrc():::EXIT
this.src == orig(this.src)
this.src.getClass().getName() == orig(this.src.getClass().getName())
this.src.items == orig(this.src.items)
this.src.items.getClass().getName() == orig(this.src.items.getClass().getName())
this.dest == orig(this.dest)
this.dest.getClass().getName() == orig(this.dest.getClass().getName())
this.dest.items == orig(this.dest.items)
this.dest.items.getClass().getName() == orig(this.dest.items.getClass().getName())
this.symbol == orig(this.symbol)
this.symbol.getClass().getName() == orig(this.symbol.getClass().getName())
this.srcItem == orig(this.srcItem)
this.srcItem.production == orig(this.srcItem.production)
this.srcItem.production.id == orig(this.srcItem.production.id)
this.srcItem.production.lhs == orig(this.srcItem.production.lhs)
this.srcItem.production.lhs.getClass().getName() == orig(this.srcItem.production.lhs.getClass().getName())
this.srcItem.production.rhs == orig(this.srcItem.production.rhs)
this.srcItem.production.rhs[] == orig(this.srcItem.production.rhs[])
this.srcItem.production.rhs.getClass().getName() == orig(this.srcItem.production.rhs.getClass().getName())
this.srcItem.production.reduceAction == orig(this.srcItem.production.reduceAction)
this.srcItem.production.lastTerminal == orig(this.srcItem.production.lastTerminal)
this.srcItem.production.lastTerminal.getClass().getName() == orig(this.srcItem.production.lastTerminal.getClass().getName())
this.srcItem.production.precTerminal == orig(this.srcItem.production.precTerminal)
this.srcItem.production.precTerminal.getClass().getName() == orig(this.srcItem.production.precTerminal.getClass().getName())
this.srcItem.production.rhsSizeWithoutEpsilon == orig(this.srcItem.production.rhsSizeWithoutEpsilon)
this.srcItem.production.hashCode == orig(this.srcItem.production.hashCode)
this.srcItem.position == orig(this.srcItem.position)
this.srcItem.nextSymbol == orig(this.srcItem.nextSymbol)
this.srcItem.nextSymbol.getClass().getName() == orig(this.srcItem.nextSymbol.getClass().getName())
this.srcItem.hashCode == orig(this.srcItem.hashCode)
this.srcItem.shiftable == orig(this.srcItem.shiftable)
this.hashCache == orig(this.hashCache)
return != null
return.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
return.items != null
return.items.getClass().getName() == java.util.HashSet.class
===========================================================================
edu.tum.cup2.generator.Edge.getSrcItem():::ENTER
this.dest != null
this.symbol.getClass().getName() == main.ParserSpec$Terminals.class
this.srcItem.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
this.srcItem.production.rhs.getClass().getName() == java.util.ArrayList.class
this.srcItem.production.reduceAction != null
this.srcItem.production.lastTerminal != null
this.srcItem.production.lastTerminal.getClass().getName() == main.ParserSpec$Terminals.class
this.srcItem.production.precTerminal != null
this.srcItem.production.precTerminal.getClass().getName() == main.ParserSpec$Terminals.class
this.srcItem.nextSymbol.getClass().getName() == main.ParserSpec$Terminals.class
===========================================================================
edu.tum.cup2.generator.Edge.getSrcItem():::EXIT
this.src == orig(this.src)
this.src.getClass().getName() == orig(this.src.getClass().getName())
this.src.items == orig(this.src.items)
this.src.items.getClass().getName() == orig(this.src.items.getClass().getName())
this.dest == orig(this.dest)
this.dest.getClass().getName() == orig(this.dest.getClass().getName())
this.dest.items == orig(this.dest.items)
this.dest.items.getClass().getName() == orig(this.dest.items.getClass().getName())
this.symbol == orig(this.symbol)
this.symbol.getClass().getName() == orig(this.symbol.getClass().getName())
this.srcItem == orig(this.srcItem)
this.srcItem.production == orig(this.srcItem.production)
this.srcItem.production.id == orig(this.srcItem.production.id)
this.srcItem.production.lhs == orig(this.srcItem.production.lhs)
this.srcItem.production.lhs.getClass().getName() == orig(this.srcItem.production.lhs.getClass().getName())
this.srcItem.production.rhs == orig(this.srcItem.production.rhs)
this.srcItem.production.rhs[] == orig(this.srcItem.production.rhs[])
this.srcItem.production.rhs.getClass().getName() == orig(this.srcItem.production.rhs.getClass().getName())
this.srcItem.production.reduceAction == orig(this.srcItem.production.reduceAction)
this.srcItem.production.lastTerminal == orig(this.srcItem.production.lastTerminal)
this.srcItem.production.lastTerminal.getClass().getName() == orig(this.srcItem.production.lastTerminal.getClass().getName())
this.srcItem.production.precTerminal == orig(this.srcItem.production.precTerminal)
this.srcItem.production.precTerminal.getClass().getName() == orig(this.srcItem.production.precTerminal.getClass().getName())
this.srcItem.production.rhsSizeWithoutEpsilon == orig(this.srcItem.production.rhsSizeWithoutEpsilon)
this.srcItem.production.hashCode == orig(this.srcItem.production.hashCode)
this.srcItem.position == orig(this.srcItem.position)
this.srcItem.nextSymbol == orig(this.srcItem.nextSymbol)
this.srcItem.nextSymbol.getClass().getName() == orig(this.srcItem.nextSymbol.getClass().getName())
this.srcItem.hashCode == orig(this.srcItem.hashCode)
this.srcItem.shiftable == orig(this.srcItem.shiftable)
this.hashCache == orig(this.hashCache)
this.dest != null
this.symbol.getClass().getName() == main.ParserSpec$Terminals.class
this.srcItem.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
this.srcItem.production.rhs.getClass().getName() == java.util.ArrayList.class
this.srcItem.production.reduceAction != null
this.srcItem.production.lastTerminal != null
this.srcItem.production.lastTerminal.getClass().getName() == main.ParserSpec$Terminals.class
this.srcItem.production.precTerminal != null
this.srcItem.production.precTerminal.getClass().getName() == main.ParserSpec$Terminals.class
this.srcItem.nextSymbol.getClass().getName() == main.ParserSpec$Terminals.class
return != null
return.production != null
return.production.lhs != null
return.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
return.production.rhs != null
return.production.rhs[] elements != null
return.production.rhs.getClass().getName() == java.util.ArrayList.class
return.production.reduceAction != null
return.production.lastTerminal != null
return.production.lastTerminal.getClass().getName() == main.ParserSpec$Terminals.class
return.production.precTerminal != null
return.production.precTerminal.getClass().getName() == main.ParserSpec$Terminals.class
return.production.rhsSizeWithoutEpsilon >= 1
return.production.hashCode != 0
return.position >= 0
return.nextSymbol != null
return.nextSymbol.getClass().getName() == main.ParserSpec$Terminals.class
return.hashCode != 0
return.shiftable == true
size(return.production.rhs[]) >= 1
===========================================================================
edu.tum.cup2.generator.Edge.getSymbol():::ENTER
===========================================================================
edu.tum.cup2.generator.Edge.getSymbol():::EXIT
this.src == orig(this.src)
this.src.getClass().getName() == orig(this.src.getClass().getName())
this.src.items == orig(this.src.items)
this.src.items.getClass().getName() == orig(this.src.items.getClass().getName())
this.dest == orig(this.dest)
this.dest.getClass().getName() == orig(this.dest.getClass().getName())
this.dest.items == orig(this.dest.items)
this.dest.items.getClass().getName() == orig(this.dest.items.getClass().getName())
this.symbol == orig(this.symbol)
this.symbol.getClass().getName() == orig(this.symbol.getClass().getName())
this.srcItem == orig(this.srcItem)
this.srcItem.production == orig(this.srcItem.production)
this.srcItem.production.id == orig(this.srcItem.production.id)
this.srcItem.production.lhs == orig(this.srcItem.production.lhs)
this.srcItem.production.lhs.getClass().getName() == orig(this.srcItem.production.lhs.getClass().getName())
this.srcItem.production.rhs == orig(this.srcItem.production.rhs)
this.srcItem.production.rhs[] == orig(this.srcItem.production.rhs[])
this.srcItem.production.rhs.getClass().getName() == orig(this.srcItem.production.rhs.getClass().getName())
this.srcItem.production.reduceAction == orig(this.srcItem.production.reduceAction)
this.srcItem.production.lastTerminal == orig(this.srcItem.production.lastTerminal)
this.srcItem.production.lastTerminal.getClass().getName() == orig(this.srcItem.production.lastTerminal.getClass().getName())
this.srcItem.production.precTerminal == orig(this.srcItem.production.precTerminal)
this.srcItem.production.precTerminal.getClass().getName() == orig(this.srcItem.production.precTerminal.getClass().getName())
this.srcItem.production.rhsSizeWithoutEpsilon == orig(this.srcItem.production.rhsSizeWithoutEpsilon)
this.srcItem.production.hashCode == orig(this.srcItem.production.hashCode)
this.srcItem.position == orig(this.srcItem.position)
this.srcItem.nextSymbol == orig(this.srcItem.nextSymbol)
this.srcItem.nextSymbol.getClass().getName() == orig(this.srcItem.nextSymbol.getClass().getName())
this.srcItem.hashCode == orig(this.srcItem.hashCode)
this.srcItem.shiftable == orig(this.srcItem.shiftable)
this.hashCache == orig(this.hashCache)
return != null
===========================================================================
edu.tum.cup2.generator.Edge.hashCode():::ENTER
===========================================================================
edu.tum.cup2.generator.Edge.hashCode():::EXIT
this.src == orig(this.src)
this.src.getClass().getName() == orig(this.src.getClass().getName())
this.src.items == orig(this.src.items)
this.src.items.getClass().getName() == orig(this.src.items.getClass().getName())
this.dest == orig(this.dest)
this.dest.getClass().getName() == orig(this.dest.getClass().getName())
this.dest.items == orig(this.dest.items)
this.dest.items.getClass().getName() == orig(this.dest.items.getClass().getName())
this.symbol == orig(this.symbol)
this.symbol.getClass().getName() == orig(this.symbol.getClass().getName())
this.srcItem == orig(this.srcItem)
this.srcItem.production == orig(this.srcItem.production)
this.srcItem.production.id == orig(this.srcItem.production.id)
this.srcItem.production.lhs == orig(this.srcItem.production.lhs)
this.srcItem.production.lhs.getClass().getName() == orig(this.srcItem.production.lhs.getClass().getName())
this.srcItem.production.rhs == orig(this.srcItem.production.rhs)
this.srcItem.production.rhs[] == orig(this.srcItem.production.rhs[])
this.srcItem.production.rhs.getClass().getName() == orig(this.srcItem.production.rhs.getClass().getName())
this.srcItem.production.reduceAction == orig(this.srcItem.production.reduceAction)
this.srcItem.production.lastTerminal == orig(this.srcItem.production.lastTerminal)
this.srcItem.production.lastTerminal.getClass().getName() == orig(this.srcItem.production.lastTerminal.getClass().getName())
this.srcItem.production.precTerminal == orig(this.srcItem.production.precTerminal)
this.srcItem.production.precTerminal.getClass().getName() == orig(this.srcItem.production.precTerminal.getClass().getName())
this.srcItem.production.rhsSizeWithoutEpsilon == orig(this.srcItem.production.rhsSizeWithoutEpsilon)
this.srcItem.production.hashCode == orig(this.srcItem.production.hashCode)
this.srcItem.position == orig(this.srcItem.position)
this.srcItem.nextSymbol == orig(this.srcItem.nextSymbol)
this.srcItem.nextSymbol.getClass().getName() == orig(this.srcItem.nextSymbol.getClass().getName())
this.srcItem.hashCode == orig(this.srcItem.hashCode)
this.srcItem.shiftable == orig(this.srcItem.shiftable)
this.hashCache == orig(this.hashCache)
return != 0
===========================================================================
edu.tum.cup2.generator.Edge.isDestAccepting():::ENTER
this.srcItem.production.lastTerminal != null
this.srcItem.production.precTerminal != null
===========================================================================
edu.tum.cup2.generator.Edge.isDestAccepting():::EXIT
this.src == orig(this.src)
this.src.getClass().getName() == orig(this.src.getClass().getName())
this.src.items == orig(this.src.items)
this.src.items.getClass().getName() == orig(this.src.items.getClass().getName())
this.dest == orig(this.dest)
this.dest.getClass().getName() == orig(this.dest.getClass().getName())
this.dest.items == orig(this.dest.items)
this.dest.items.getClass().getName() == orig(this.dest.items.getClass().getName())
this.symbol == orig(this.symbol)
this.symbol.getClass().getName() == orig(this.symbol.getClass().getName())
this.srcItem == orig(this.srcItem)
this.srcItem.production == orig(this.srcItem.production)
this.srcItem.production.id == orig(this.srcItem.production.id)
this.srcItem.production.lhs == orig(this.srcItem.production.lhs)
this.srcItem.production.lhs.getClass().getName() == orig(this.srcItem.production.lhs.getClass().getName())
this.srcItem.production.rhs == orig(this.srcItem.production.rhs)
this.srcItem.production.rhs[] == orig(this.srcItem.production.rhs[])
this.srcItem.production.rhs.getClass().getName() == orig(this.srcItem.production.rhs.getClass().getName())
this.srcItem.production.reduceAction == orig(this.srcItem.production.reduceAction)
this.srcItem.production.lastTerminal == orig(this.srcItem.production.lastTerminal)
this.srcItem.production.lastTerminal.getClass().getName() == orig(this.srcItem.production.lastTerminal.getClass().getName())
this.srcItem.production.precTerminal == orig(this.srcItem.production.precTerminal)
this.srcItem.production.precTerminal.getClass().getName() == orig(this.srcItem.production.precTerminal.getClass().getName())
this.srcItem.production.rhsSizeWithoutEpsilon == orig(this.srcItem.production.rhsSizeWithoutEpsilon)
this.srcItem.production.hashCode == orig(this.srcItem.production.hashCode)
this.srcItem.position == orig(this.srcItem.position)
this.srcItem.nextSymbol == orig(this.srcItem.nextSymbol)
this.srcItem.nextSymbol.getClass().getName() == orig(this.srcItem.nextSymbol.getClass().getName())
this.srcItem.hashCode == orig(this.srcItem.hashCode)
this.srcItem.shiftable == orig(this.srcItem.shiftable)
this.hashCache == orig(this.hashCache)
(this.dest != null)  <==>  (return == false)
(this.dest != null)  <==>  (this.srcItem.nextSymbol.getClass().getName() == main.ParserSpec$Terminals.class)
(this.dest != null)  <==>  (this.srcItem.production.lastTerminal.getClass().getName() == main.ParserSpec$Terminals.class)
(this.dest != null)  <==>  (this.srcItem.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class)
(this.dest != null)  <==>  (this.srcItem.production.precTerminal.getClass().getName() == main.ParserSpec$Terminals.class)
(this.dest != null)  <==>  (this.srcItem.production.reduceAction != null)
(this.dest != null)  <==>  (this.srcItem.production.rhs.getClass().getName() == java.util.ArrayList.class)
(this.dest != null)  <==>  (this.symbol.getClass().getName() == main.ParserSpec$Terminals.class)
(this.dest != null)  ==>  (size(this.srcItem.production.rhs[]) >= 1)
(this.dest != null)  ==>  (this.dest.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class)
(this.dest != null)  ==>  (this.dest.items != null)
(this.dest != null)  ==>  (this.dest.items.getClass().getName() == java.util.HashSet.class)
(this.dest != null)  ==>  (this.srcItem.production.rhsSizeWithoutEpsilon >= 1)
(this.dest == null)  <==>  (return == true)
(this.dest == null)  <==>  (this.srcItem.nextSymbol.getClass().getName() == edu.tum.cup2.grammar.SpecialTerminals.class)
(this.dest == null)  <==>  (this.srcItem.production.id == 0)
(this.dest == null)  <==>  (this.srcItem.production.lastTerminal.getClass().getName() == edu.tum.cup2.grammar.SpecialTerminals.class)
(this.dest == null)  <==>  (this.srcItem.production.lhs.getClass().getName() == edu.tum.cup2.grammar.SpecialNonTerminals.class)
(this.dest == null)  <==>  (this.srcItem.production.precTerminal.getClass().getName() == edu.tum.cup2.grammar.SpecialTerminals.class)
(this.dest == null)  <==>  (this.srcItem.production.reduceAction == null)
(this.dest == null)  <==>  (this.srcItem.production.rhs.getClass().getName() == java.util.Arrays$ArrayList.class)
(this.dest == null)  <==>  (this.symbol.getClass().getName() == edu.tum.cup2.grammar.SpecialTerminals.class)
(this.dest == null)  ==>  (orig(this) has only one value)
(this.dest == null)  ==>  (size(this.srcItem.production.rhs[]) == 2)
(this.dest == null)  ==>  (this.hashCache == -1999867871)
(this.dest == null)  ==>  (this.src has only one value)
(this.dest == null)  ==>  (this.src.items has only one value)
(this.dest == null)  ==>  (this.srcItem has only one value)
(this.dest == null)  ==>  (this.srcItem.hashCode == -2128984587)
(this.dest == null)  ==>  (this.srcItem.nextSymbol has only one value)
(this.dest == null)  ==>  (this.srcItem.position == 1)
(this.dest == null)  ==>  (this.srcItem.production has only one value)
(this.dest == null)  ==>  (this.srcItem.production.hashCode == -2128984588)
(this.dest == null)  ==>  (this.srcItem.production.lastTerminal has only one value)
(this.dest == null)  ==>  (this.srcItem.production.lhs has only one value)
(this.dest == null)  ==>  (this.srcItem.production.precTerminal has only one value)
(this.dest == null)  ==>  (this.srcItem.production.rhs has only one value)
(this.dest == null)  ==>  (this.srcItem.production.rhsSizeWithoutEpsilon == 2)
(this.dest == null)  ==>  (this.srcItem.production.rhs[] contains no nulls and has only one value, of length 2)
(this.dest == null)  ==>  (this.srcItem.production.rhs[].getClass().getName() == [main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialTerminals])
(this.dest == null)  ==>  (this.symbol has only one value)
this.srcItem.production.lastTerminal != null
this.srcItem.production.precTerminal != null
===========================================================================
edu.tum.cup2.generator.Edge.isDestAccepting():::EXIT;condition="return == true"
this.src has only one value
this.src.items has only one value
this.dest == null
this.symbol has only one value
this.symbol.getClass().getName() == edu.tum.cup2.grammar.SpecialTerminals.class
this.srcItem has only one value
this.srcItem.production has only one value
this.srcItem.production.id == 0
this.srcItem.production.lhs has only one value
this.srcItem.production.lhs.getClass().getName() == edu.tum.cup2.grammar.SpecialNonTerminals.class
this.srcItem.production.rhs has only one value
this.srcItem.production.rhs[] contains no nulls and has only one value, of length 2
this.srcItem.production.rhs[].getClass().getName() == [main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.srcItem.production.rhs.getClass().getName() == java.util.Arrays$ArrayList.class
this.srcItem.production.reduceAction == null
this.srcItem.production.lastTerminal has only one value
this.srcItem.production.lastTerminal.getClass().getName() == edu.tum.cup2.grammar.SpecialTerminals.class
this.srcItem.production.precTerminal has only one value
this.srcItem.production.precTerminal.getClass().getName() == edu.tum.cup2.grammar.SpecialTerminals.class
this.srcItem.production.rhsSizeWithoutEpsilon == 2
this.srcItem.production.hashCode == -2128984588
this.srcItem.position == 1
this.srcItem.nextSymbol has only one value
this.srcItem.nextSymbol.getClass().getName() == edu.tum.cup2.grammar.SpecialTerminals.class
this.srcItem.hashCode == -2128984587
this.hashCache == -1999867871
return == true
orig(this) has only one value
size(this.srcItem.production.rhs[]) == 2
===========================================================================
edu.tum.cup2.generator.Edge.isDestAccepting():::EXIT;condition="not(return == true)"
this.dest != null
this.symbol.getClass().getName() == main.ParserSpec$Terminals.class
this.srcItem.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
this.srcItem.production.rhs.getClass().getName() == java.util.ArrayList.class
this.srcItem.production.reduceAction != null
this.srcItem.production.lastTerminal.getClass().getName() == main.ParserSpec$Terminals.class
this.srcItem.production.precTerminal.getClass().getName() == main.ParserSpec$Terminals.class
this.srcItem.nextSymbol.getClass().getName() == main.ParserSpec$Terminals.class
return == false
===========================================================================
edu.tum.cup2.generator.FirstSets:::OBJECT
this has only one value
this.data has only one value
this.data != null
this.data.getClass().getName() == java.util.HashMap.class
===========================================================================
edu.tum.cup2.generator.FirstSets.FirstSets(edu.tum.cup2.grammar.Grammar, edu.tum.cup2.generator.NullableSet):::ENTER
arg0 has only one value
arg0.terminals has only one value
arg0.terminals[] contains no nulls and has only one value, of length 30
arg0.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.nonTerminals has only one value
arg0.nonTerminals[] contains no nulls and has only one value, of length 16
arg0.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
arg0.productions has only one value
arg0.productions[] contains no nulls and has only one value, of length 48
arg0.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg1 has only one value
size(arg0.terminals[]) == 30
size(arg0.nonTerminals[]) == 16
size(arg0.productions[]) == 48
===========================================================================
edu.tum.cup2.generator.FirstSets.FirstSets(edu.tum.cup2.grammar.Grammar, edu.tum.cup2.generator.NullableSet):::EXIT
arg0.terminals == orig(arg0.terminals)
arg0.terminals[] == orig(arg0.terminals[])
arg0.nonTerminals == orig(arg0.nonTerminals)
arg0.nonTerminals[] == orig(arg0.nonTerminals[])
arg0.productions == orig(arg0.productions)
arg0.productions[] == orig(arg0.productions[])
arg0.terminals has only one value
arg0.terminals[] contains no nulls and has only one value, of length 30
arg0.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.nonTerminals has only one value
arg0.nonTerminals[] contains no nulls and has only one value, of length 16
arg0.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
arg0.productions has only one value
arg0.productions[] contains no nulls and has only one value, of length 48
arg0.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
size(arg0.terminals[]) == 30
size(arg0.nonTerminals[]) == 16
size(arg0.productions[]) == 48
===========================================================================
edu.tum.cup2.generator.FirstSets.get(edu.tum.cup2.grammar.Symbol):::ENTER
arg0 != null
===========================================================================
edu.tum.cup2.generator.FirstSets.get(edu.tum.cup2.grammar.Symbol):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
return != null
return.data != null
return.indices has only one value
return.indices != null
return.indices.getClass().getName() == java.util.HashMap.class
return.terminals has only one value
return.terminals != null
return.terminals.getClass().getName() == java.util.LinkedList.class
return.indexEpsilon == 0
size(return.data[]) == 2
===========================================================================
edu.tum.cup2.generator.Generator:::OBJECT
this has only one value
this.getClass().getName() == edu.tum.cup2.generator.LALR1Generator.class
this.grammar has only one value
this.grammar.terminals has only one value
this.grammar.terminals[] contains no nulls and has only one value, of length 30
this.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.grammar.nonTerminals has only one value
this.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
this.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.grammar.productions has only one value
this.grammar.productions[] contains no nulls and has only one value, of length 48
this.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
this.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
this.precedences has only one value
this.precedences.list has only one value
this.precedences.list[] contains no nulls and has only one value, of length 1
this.precedences.list[] elements has only one value
this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
this.verbosity has only one value
edu.tum.cup2.generator.Verbosity.None has only one value
edu.tum.cup2.generator.Verbosity.Sparse has only one value
edu.tum.cup2.generator.Verbosity.Verbose has only one value
edu.tum.cup2.generator.Verbosity.Detailled has only one value
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == 0
edu.tum.cup2.generator.Verbosity.$VALUES has only one value
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == edu.tum.cup2.generator.Verbosity[].class
edu.tum.cup2.generator.Verbosity.$VALUES[] contains no nulls and has only one value, of length 4
edu.tum.cup2.generator.Verbosity.$VALUES[].getClass().getName() == [edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity]
edu.tum.cup2.generator.Verbosity.$VALUES[].getClass().getName() elements == edu.tum.cup2.generator.Verbosity.class
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == [0, 1000, 100, 1]
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep elements >= 0
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == 1000
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == 100
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == 1
this.verbosity.statesCounterStep == 0
this.debugOut has only one value
size(this.grammar.terminals[]) == 30
size(this.grammar.nonTerminals[]) == 16
size(this.grammar.productions[]) == 48
size(this.precedences.list[]) == 1
size(edu.tum.cup2.generator.Verbosity.$VALUES[]) == 4
===========================================================================
edu.tum.cup2.generator.Generator.Generator(edu.tum.cup2.grammar.Grammar, edu.tum.cup2.precedences.Precedences, edu.tum.cup2.generator.Verbosity):::ENTER
arg0 has only one value
arg0.terminals has only one value
arg0.terminals[] contains no nulls and has only one value, of length 30
arg0.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.nonTerminals has only one value
arg0.nonTerminals[] contains no nulls and has only one value, of length 16
arg0.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
arg0.productions has only one value
arg0.productions[] contains no nulls and has only one value, of length 48
arg0.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg1 has only one value
arg1.list has only one value
arg1.list[] contains no nulls and has only one value, of length 1
arg1.list[] elements has only one value
arg1.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
arg1.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
arg1.list.getClass().getName() == java.util.Arrays$ArrayList.class
arg2 has only one value
edu.tum.cup2.generator.Verbosity.None has only one value
edu.tum.cup2.generator.Verbosity.Sparse has only one value
edu.tum.cup2.generator.Verbosity.Verbose has only one value
edu.tum.cup2.generator.Verbosity.Detailled has only one value
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == 0
edu.tum.cup2.generator.Verbosity.$VALUES has only one value
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == edu.tum.cup2.generator.Verbosity[].class
edu.tum.cup2.generator.Verbosity.$VALUES[] contains no nulls and has only one value, of length 4
edu.tum.cup2.generator.Verbosity.$VALUES[].getClass().getName() == [edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity]
edu.tum.cup2.generator.Verbosity.$VALUES[].getClass().getName() elements == edu.tum.cup2.generator.Verbosity.class
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == [0, 1000, 100, 1]
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == 1000
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == 100
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == 1
arg2.statesCounterStep == 0
size(arg0.terminals[]) == 30
size(arg0.nonTerminals[]) == 16
size(arg0.productions[]) == 48
size(arg1.list[]) == 1
size(edu.tum.cup2.generator.Verbosity.$VALUES[]) == 4
===========================================================================
edu.tum.cup2.generator.Generator.Generator(edu.tum.cup2.grammar.Grammar, edu.tum.cup2.precedences.Precedences, edu.tum.cup2.generator.Verbosity):::EXIT
edu.tum.cup2.generator.Verbosity.None == orig(edu.tum.cup2.generator.Verbosity.None)
edu.tum.cup2.generator.Verbosity.Sparse == orig(edu.tum.cup2.generator.Verbosity.Sparse)
edu.tum.cup2.generator.Verbosity.Verbose == orig(edu.tum.cup2.generator.Verbosity.Verbose)
edu.tum.cup2.generator.Verbosity.Detailled == orig(edu.tum.cup2.generator.Verbosity.Detailled)
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.None.statesCounterStep)
edu.tum.cup2.generator.Verbosity.$VALUES == orig(edu.tum.cup2.generator.Verbosity.$VALUES)
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == orig(edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName())
edu.tum.cup2.generator.Verbosity.$VALUES[] == orig(edu.tum.cup2.generator.Verbosity.$VALUES[])
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep)
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep)
arg0.terminals == orig(arg0.terminals)
arg0.terminals[] == orig(arg0.terminals[])
arg0.nonTerminals == orig(arg0.nonTerminals)
arg0.nonTerminals[] == orig(arg0.nonTerminals[])
arg0.productions == orig(arg0.productions)
arg0.productions[] == orig(arg0.productions[])
arg1.list == orig(arg1.list)
arg1.list[] == orig(arg1.list[])
arg1.list.getClass().getName() == orig(arg1.list.getClass().getName())
arg2.statesCounterStep == orig(arg2.statesCounterStep)
arg0.terminals has only one value
arg0.terminals[] contains no nulls and has only one value, of length 30
arg0.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.nonTerminals has only one value
arg0.nonTerminals[] contains no nulls and has only one value, of length 16
arg0.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
arg0.productions has only one value
arg0.productions[] contains no nulls and has only one value, of length 48
arg0.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg1.list has only one value
arg1.list[] contains no nulls and has only one value, of length 1
arg1.list[] elements has only one value
arg1.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
arg1.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
arg1.list.getClass().getName() == java.util.Arrays$ArrayList.class
arg2.statesCounterStep == 0
size(arg0.terminals[]) == 30
size(arg0.nonTerminals[]) == 16
size(arg0.productions[]) == 48
size(arg1.list[]) == 1
===========================================================================
edu.tum.cup2.generator.Generator.getDebugOut():::ENTER
===========================================================================
edu.tum.cup2.generator.Generator.getDebugOut():::EXIT
this.grammar == orig(this.grammar)
this.grammar.terminals == orig(this.grammar.terminals)
this.grammar.terminals[] == orig(this.grammar.terminals[])
this.grammar.nonTerminals == orig(this.grammar.nonTerminals)
this.grammar.nonTerminals[] == orig(this.grammar.nonTerminals[])
this.grammar.productions == orig(this.grammar.productions)
this.grammar.productions[] == orig(this.grammar.productions[])
this.precedences == orig(this.precedences)
this.precedences.list == orig(this.precedences.list)
this.precedences.list[] == orig(this.precedences.list[])
this.precedences.list.getClass().getName() == orig(this.precedences.list.getClass().getName())
this.verbosity == orig(this.verbosity)
edu.tum.cup2.generator.Verbosity.None == orig(edu.tum.cup2.generator.Verbosity.None)
edu.tum.cup2.generator.Verbosity.Sparse == orig(edu.tum.cup2.generator.Verbosity.Sparse)
edu.tum.cup2.generator.Verbosity.Verbose == orig(edu.tum.cup2.generator.Verbosity.Verbose)
edu.tum.cup2.generator.Verbosity.Detailled == orig(edu.tum.cup2.generator.Verbosity.Detailled)
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.None.statesCounterStep)
edu.tum.cup2.generator.Verbosity.$VALUES == orig(edu.tum.cup2.generator.Verbosity.$VALUES)
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == orig(edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName())
edu.tum.cup2.generator.Verbosity.$VALUES[] == orig(edu.tum.cup2.generator.Verbosity.$VALUES[])
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep)
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep)
this.verbosity.statesCounterStep == orig(this.verbosity.statesCounterStep)
this.debugOut == orig(this.debugOut)
return has only one value
===========================================================================
edu.tum.cup2.generator.Generator.getGrammar():::ENTER
===========================================================================
edu.tum.cup2.generator.Generator.getGrammar():::EXIT
this.grammar == orig(this.grammar)
this.grammar.terminals == orig(this.grammar.terminals)
this.grammar.terminals[] == orig(this.grammar.terminals[])
this.grammar.nonTerminals == orig(this.grammar.nonTerminals)
this.grammar.nonTerminals[] == orig(this.grammar.nonTerminals[])
this.grammar.productions == orig(this.grammar.productions)
this.grammar.productions[] == orig(this.grammar.productions[])
this.precedences == orig(this.precedences)
this.precedences.list == orig(this.precedences.list)
this.precedences.list[] == orig(this.precedences.list[])
this.precedences.list.getClass().getName() == orig(this.precedences.list.getClass().getName())
this.verbosity == orig(this.verbosity)
edu.tum.cup2.generator.Verbosity.None == orig(edu.tum.cup2.generator.Verbosity.None)
edu.tum.cup2.generator.Verbosity.Sparse == orig(edu.tum.cup2.generator.Verbosity.Sparse)
edu.tum.cup2.generator.Verbosity.Verbose == orig(edu.tum.cup2.generator.Verbosity.Verbose)
edu.tum.cup2.generator.Verbosity.Detailled == orig(edu.tum.cup2.generator.Verbosity.Detailled)
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.None.statesCounterStep)
edu.tum.cup2.generator.Verbosity.$VALUES == orig(edu.tum.cup2.generator.Verbosity.$VALUES)
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == orig(edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName())
edu.tum.cup2.generator.Verbosity.$VALUES[] == orig(edu.tum.cup2.generator.Verbosity.$VALUES[])
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep)
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep)
this.verbosity.statesCounterStep == orig(this.verbosity.statesCounterStep)
this.debugOut == orig(this.debugOut)
return has only one value
return.terminals has only one value
return.terminals[] contains no nulls and has only one value, of length 30
return.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
return.nonTerminals has only one value
return.nonTerminals[] contains no nulls and has only one value, of length 16
return.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
return.productions has only one value
return.productions[] contains no nulls and has only one value, of length 48
return.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
return.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
size(return.terminals[]) == 30
size(return.nonTerminals[]) == 16
size(return.productions[]) == 48
===========================================================================
edu.tum.cup2.generator.Generator.getVerbosity():::ENTER
===========================================================================
edu.tum.cup2.generator.Generator.getVerbosity():::EXIT
this.grammar == orig(this.grammar)
this.grammar.terminals == orig(this.grammar.terminals)
this.grammar.terminals[] == orig(this.grammar.terminals[])
this.grammar.nonTerminals == orig(this.grammar.nonTerminals)
this.grammar.nonTerminals[] == orig(this.grammar.nonTerminals[])
this.grammar.productions == orig(this.grammar.productions)
this.grammar.productions[] == orig(this.grammar.productions[])
this.precedences == orig(this.precedences)
this.precedences.list == orig(this.precedences.list)
this.precedences.list[] == orig(this.precedences.list[])
this.precedences.list.getClass().getName() == orig(this.precedences.list.getClass().getName())
this.verbosity == orig(this.verbosity)
edu.tum.cup2.generator.Verbosity.None == orig(edu.tum.cup2.generator.Verbosity.None)
edu.tum.cup2.generator.Verbosity.Sparse == orig(edu.tum.cup2.generator.Verbosity.Sparse)
edu.tum.cup2.generator.Verbosity.Verbose == orig(edu.tum.cup2.generator.Verbosity.Verbose)
edu.tum.cup2.generator.Verbosity.Detailled == orig(edu.tum.cup2.generator.Verbosity.Detailled)
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.None.statesCounterStep)
edu.tum.cup2.generator.Verbosity.$VALUES == orig(edu.tum.cup2.generator.Verbosity.$VALUES)
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == orig(edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName())
edu.tum.cup2.generator.Verbosity.$VALUES[] == orig(edu.tum.cup2.generator.Verbosity.$VALUES[])
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep)
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep)
this.verbosity.statesCounterStep == orig(this.verbosity.statesCounterStep)
this.debugOut == orig(this.debugOut)
return has only one value
return.statesCounterStep == 0
===========================================================================
edu.tum.cup2.generator.GrammarInfo:::OBJECT
this has only one value
this.grammar has only one value
this.grammar != null
this.grammar.terminals has only one value
this.grammar.terminals != null
this.grammar.terminals[] contains no nulls and has only one value, of length 30
this.grammar.terminals[] elements != null
this.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.grammar.nonTerminals has only one value
this.grammar.nonTerminals != null
this.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
this.grammar.nonTerminals[] elements != null
this.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.grammar.productions has only one value
this.grammar.productions != null
this.grammar.productions[] contains no nulls and has only one value, of length 48
this.grammar.productions[] elements != null
this.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
this.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
this.nullableSet has only one value
this.nullableSet != null
this.firstSets has only one value
this.firstSets != null
this.firstSets.data has only one value
this.firstSets.data != null
this.firstSets.data.getClass().getName() == java.util.HashMap.class
this.productionsStartingWith has only one value
this.productionsStartingWith != null
this.emptyTerminalsSet has only one value
this.emptyTerminalsSet != null
this.emptyTerminalsSet.data has only one value
this.emptyTerminalsSet.data != null
this.emptyTerminalsSet.data[] == [0, 0]
this.emptyTerminalsSet.data[] elements == 0
this.emptyTerminalsSet.indices has only one value
this.emptyTerminalsSet.indices != null
this.emptyTerminalsSet.indices.getClass().getName() == java.util.HashMap.class
this.emptyTerminalsSet.terminals has only one value
this.emptyTerminalsSet.terminals != null
this.emptyTerminalsSet.terminals.getClass().getName() == java.util.LinkedList.class
this.emptyTerminalsSet.indexEpsilon == 0
size(this.grammar.terminals[]) == 30
size(this.grammar.nonTerminals[]) == 16
size(this.grammar.productions[]) == 48
size(this.emptyTerminalsSet.data[]) == 2
===========================================================================
edu.tum.cup2.generator.GrammarInfo.GrammarInfo(edu.tum.cup2.grammar.Grammar):::ENTER
arg0 has only one value
arg0.terminals has only one value
arg0.terminals[] contains no nulls and has only one value, of length 30
arg0.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.nonTerminals has only one value
arg0.nonTerminals[] contains no nulls and has only one value, of length 16
arg0.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
arg0.productions has only one value
arg0.productions[] contains no nulls and has only one value, of length 48
arg0.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
size(arg0.terminals[]) == 30
size(arg0.nonTerminals[]) == 16
size(arg0.productions[]) == 48
===========================================================================
edu.tum.cup2.generator.GrammarInfo.GrammarInfo(edu.tum.cup2.grammar.Grammar):::EXIT
arg0.terminals == orig(arg0.terminals)
arg0.terminals[] == orig(arg0.terminals[])
arg0.nonTerminals == orig(arg0.nonTerminals)
arg0.nonTerminals[] == orig(arg0.nonTerminals[])
arg0.productions == orig(arg0.productions)
arg0.productions[] == orig(arg0.productions[])
arg0.terminals has only one value
arg0.terminals[] contains no nulls and has only one value, of length 30
arg0.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.nonTerminals has only one value
arg0.nonTerminals[] contains no nulls and has only one value, of length 16
arg0.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
arg0.productions has only one value
arg0.productions[] contains no nulls and has only one value, of length 48
arg0.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
size(arg0.terminals[]) == 30
size(arg0.nonTerminals[]) == 16
size(arg0.productions[]) == 48
===========================================================================
edu.tum.cup2.generator.GrammarInfo.getFirstSets():::ENTER
===========================================================================
edu.tum.cup2.generator.GrammarInfo.getFirstSets():::EXIT
this.grammar == orig(this.grammar)
this.grammar.terminals == orig(this.grammar.terminals)
this.grammar.terminals[] == orig(this.grammar.terminals[])
this.grammar.nonTerminals == orig(this.grammar.nonTerminals)
this.grammar.nonTerminals[] == orig(this.grammar.nonTerminals[])
this.grammar.productions == orig(this.grammar.productions)
this.grammar.productions[] == orig(this.grammar.productions[])
this.nullableSet == orig(this.nullableSet)
this.firstSets == orig(this.firstSets)
this.firstSets.data == orig(this.firstSets.data)
this.firstSets.data.getClass().getName() == orig(this.firstSets.data.getClass().getName())
this.productionsStartingWith == orig(this.productionsStartingWith)
this.emptyTerminalsSet == orig(this.emptyTerminalsSet)
this.emptyTerminalsSet.data == orig(this.emptyTerminalsSet.data)
this.emptyTerminalsSet.data[] == orig(this.emptyTerminalsSet.data[])
this.emptyTerminalsSet.indices == orig(this.emptyTerminalsSet.indices)
this.emptyTerminalsSet.indices.getClass().getName() == orig(this.emptyTerminalsSet.indices.getClass().getName())
this.emptyTerminalsSet.terminals == orig(this.emptyTerminalsSet.terminals)
this.emptyTerminalsSet.terminals.getClass().getName() == orig(this.emptyTerminalsSet.terminals.getClass().getName())
this.emptyTerminalsSet.indexEpsilon == orig(this.emptyTerminalsSet.indexEpsilon)
return has only one value
return != null
return.data has only one value
return.data != null
return.data.getClass().getName() == java.util.HashMap.class
===========================================================================
edu.tum.cup2.generator.GrammarInfo.getNullableSet():::ENTER
===========================================================================
edu.tum.cup2.generator.GrammarInfo.getNullableSet():::EXIT
this.grammar == orig(this.grammar)
this.grammar.terminals == orig(this.grammar.terminals)
this.grammar.terminals[] == orig(this.grammar.terminals[])
this.grammar.nonTerminals == orig(this.grammar.nonTerminals)
this.grammar.nonTerminals[] == orig(this.grammar.nonTerminals[])
this.grammar.productions == orig(this.grammar.productions)
this.grammar.productions[] == orig(this.grammar.productions[])
this.nullableSet == orig(this.nullableSet)
this.firstSets == orig(this.firstSets)
this.firstSets.data == orig(this.firstSets.data)
this.firstSets.data.getClass().getName() == orig(this.firstSets.data.getClass().getName())
this.productionsStartingWith == orig(this.productionsStartingWith)
this.emptyTerminalsSet == orig(this.emptyTerminalsSet)
this.emptyTerminalsSet.data == orig(this.emptyTerminalsSet.data)
this.emptyTerminalsSet.data[] == orig(this.emptyTerminalsSet.data[])
this.emptyTerminalsSet.indices == orig(this.emptyTerminalsSet.indices)
this.emptyTerminalsSet.indices.getClass().getName() == orig(this.emptyTerminalsSet.indices.getClass().getName())
this.emptyTerminalsSet.terminals == orig(this.emptyTerminalsSet.terminals)
this.emptyTerminalsSet.terminals.getClass().getName() == orig(this.emptyTerminalsSet.terminals.getClass().getName())
this.emptyTerminalsSet.indexEpsilon == orig(this.emptyTerminalsSet.indexEpsilon)
return has only one value
return != null
===========================================================================
edu.tum.cup2.generator.GrammarInfo.getProductionsFrom(edu.tum.cup2.grammar.NonTerminal):::ENTER
arg0 != null
arg0.getClass().getName() == main.ParserSpec$NonTerminals.class
===========================================================================
edu.tum.cup2.generator.GrammarInfo.getProductionsFrom(edu.tum.cup2.grammar.NonTerminal):::EXIT
this.grammar == orig(this.grammar)
this.grammar.terminals == orig(this.grammar.terminals)
this.grammar.terminals[] == orig(this.grammar.terminals[])
this.grammar.nonTerminals == orig(this.grammar.nonTerminals)
this.grammar.nonTerminals[] == orig(this.grammar.nonTerminals[])
this.grammar.productions == orig(this.grammar.productions)
this.grammar.productions[] == orig(this.grammar.productions[])
this.nullableSet == orig(this.nullableSet)
this.firstSets == orig(this.firstSets)
this.firstSets.data == orig(this.firstSets.data)
this.firstSets.data.getClass().getName() == orig(this.firstSets.data.getClass().getName())
this.productionsStartingWith == orig(this.productionsStartingWith)
this.emptyTerminalsSet == orig(this.emptyTerminalsSet)
this.emptyTerminalsSet.data == orig(this.emptyTerminalsSet.data)
this.emptyTerminalsSet.data[] == orig(this.emptyTerminalsSet.data[])
this.emptyTerminalsSet.indices == orig(this.emptyTerminalsSet.indices)
this.emptyTerminalsSet.indices.getClass().getName() == orig(this.emptyTerminalsSet.indices.getClass().getName())
this.emptyTerminalsSet.terminals == orig(this.emptyTerminalsSet.terminals)
this.emptyTerminalsSet.terminals.getClass().getName() == orig(this.emptyTerminalsSet.terminals.getClass().getName())
this.emptyTerminalsSet.indexEpsilon == orig(this.emptyTerminalsSet.indexEpsilon)
return != null
return[] elements != null
return[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
return.getClass().getName() == java.util.Collections$UnmodifiableList.class
===========================================================================
edu.tum.cup2.generator.GrammarInfo.getTerminalSet(edu.tum.cup2.grammar.Terminal):::ENTER
arg0 has only one value
arg0.getClass().getName() == edu.tum.cup2.grammar.SpecialTerminals.class
===========================================================================
edu.tum.cup2.generator.GrammarInfo.getTerminalSet(edu.tum.cup2.grammar.Terminal):::EXIT
this.grammar == orig(this.grammar)
this.grammar.terminals == orig(this.grammar.terminals)
this.grammar.terminals[] == orig(this.grammar.terminals[])
this.grammar.nonTerminals == orig(this.grammar.nonTerminals)
this.grammar.nonTerminals[] == orig(this.grammar.nonTerminals[])
this.grammar.productions == orig(this.grammar.productions)
this.grammar.productions[] == orig(this.grammar.productions[])
this.nullableSet == orig(this.nullableSet)
this.firstSets == orig(this.firstSets)
this.firstSets.data == orig(this.firstSets.data)
this.firstSets.data.getClass().getName() == orig(this.firstSets.data.getClass().getName())
this.productionsStartingWith == orig(this.productionsStartingWith)
this.emptyTerminalsSet == orig(this.emptyTerminalsSet)
this.emptyTerminalsSet.data == orig(this.emptyTerminalsSet.data)
this.emptyTerminalsSet.data[] == orig(this.emptyTerminalsSet.data[])
this.emptyTerminalsSet.indices == orig(this.emptyTerminalsSet.indices)
this.emptyTerminalsSet.indices.getClass().getName() == orig(this.emptyTerminalsSet.indices.getClass().getName())
this.emptyTerminalsSet.terminals == orig(this.emptyTerminalsSet.terminals)
this.emptyTerminalsSet.terminals.getClass().getName() == orig(this.emptyTerminalsSet.terminals.getClass().getName())
this.emptyTerminalsSet.indexEpsilon == orig(this.emptyTerminalsSet.indexEpsilon)
return has only one value
return.data has only one value
return.data[] == [4, 0]
return.data[] elements one of { 0, 4 }
return.indices has only one value
return.indices.getClass().getName() == java.util.HashMap.class
return.terminals has only one value
return.terminals.getClass().getName() == java.util.LinkedList.class
return.indexEpsilon == 0
size(return.data[]) == 2
===========================================================================
edu.tum.cup2.generator.LALR1AutomatonFactory$NumberedEdge:::OBJECT
this.srcState != null
this.symbol != null
this.srcItem != null
this.srcItem.kernel != null
this.srcItem.kernel.production != null
this.srcItem.kernel.position >= 0
this.srcItem.kernel.nextSymbol != null
this.srcItem.kernel.hashCode != 0
this.srcItem.kernel.shiftable == true
this.srcItem.lookaheads != null
this.srcItem.lookaheads.getClass().getName() == edu.tum.cup2.generator.terminals.EfficientTerminalSet.class
this.srcItem.nextLookaheads == null
this.srcItem.hashCode != 0
edu.tum.cup2.generator.LALR1AutomatonFactory.this has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.states has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.states != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.states.getClass().getName() == java.util.Collections$SynchronizedSet.class
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.edges has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.edges != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.edges.getClass().getName() == java.util.Collections$SynchronizedSet.class
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.startState has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.startState != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.startState.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.grammar has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.grammar != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.nullableSet has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.nullableSet != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.firstSets has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.firstSets != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.productionsStartingWith has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.productionsStartingWith != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.emptyTerminalsSet has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.emptyTerminalsSet != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.verbosity has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.verbosity != null
edu.tum.cup2.generator.Verbosity.None has only one value
edu.tum.cup2.generator.Verbosity.None != null
edu.tum.cup2.generator.Verbosity.Sparse has only one value
edu.tum.cup2.generator.Verbosity.Sparse != null
edu.tum.cup2.generator.Verbosity.Verbose has only one value
edu.tum.cup2.generator.Verbosity.Verbose != null
edu.tum.cup2.generator.Verbosity.Detailled has only one value
edu.tum.cup2.generator.Verbosity.Detailled != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.verbosity.statesCounterStep == 0
edu.tum.cup2.generator.Verbosity.$VALUES has only one value
edu.tum.cup2.generator.Verbosity.$VALUES != null
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == edu.tum.cup2.generator.Verbosity[].class
edu.tum.cup2.generator.Verbosity.$VALUES[] contains no nulls and has only one value, of length 4
edu.tum.cup2.generator.Verbosity.$VALUES[] elements != null
edu.tum.cup2.generator.Verbosity.$VALUES[].getClass().getName() == [edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity]
edu.tum.cup2.generator.Verbosity.$VALUES[].getClass().getName() elements == edu.tum.cup2.generator.Verbosity.class
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == [0, 1000, 100, 1]
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep elements >= 0
edu.tum.cup2.generator.LALR1AutomatonFactory.this.debugOut has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.debugOut != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.terminals has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.terminals != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.terminals[] contains no nulls and has only one value, of length 30
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.terminals[] elements != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.nonTerminals has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.nonTerminals != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.nonTerminals[] elements != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions[] contains no nulls and has only one value, of length 48
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions[] elements != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.getClass().getName() == edu.tum.cup2.generator.LALR1Generator.class
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.grammarInfo has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.grammarInfo != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.parsingTable == null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.automaton == null
edu.tum.cup2.generator.LRGenerator.numThreads == 4
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.LOG_shortestWordFinder == false
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.grammar has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.grammar != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.precedences has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.precedences != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.verbosity has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.verbosity != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.debugOut has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.debugOut != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue[] == []
edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue[].getClass().getName() == []
edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue.getClass().getName() == java.util.LinkedList.class
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state == null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel.items != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel.items.getClass().getName() == java.util.HashSet.class
edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaEdges has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaEdges != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaEdges.getClass().getName() == java.util.Collections$SynchronizedSet.class
edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaStates has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaStates != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaStates.getClass().getName() == java.util.Collections$SynchronizedSet.class
edu.tum.cup2.generator.LALR1AutomatonFactory.this.statesCounterMsgStep == 0
edu.tum.cup2.generator.LALR1AutomatonFactory.this.statesCounterMsgNext == 0
edu.tum.cup2.generator.LALR1AutomatonFactory.this.debug == false
edu.tum.cup2.generator.LALR1AutomatonFactory.this.numThreads == 0
edu.tum.cup2.generator.LALR1AutomatonFactory.this.threadPool == null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0 has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0 != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.items has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.items != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.items.getClass().getName() == java.util.HashSet.class
edu.tum.cup2.generator.LALR1AutomatonFactory.this.taskCount == 0
edu.tum.cup2.generator.LALR1AutomatonFactory.this.taskCountLock == null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.shutDownThread == null
size(edu.tum.cup2.generator.Verbosity.$VALUES[]) == 4
size(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.terminals[]) == 30
size(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.nonTerminals[]) == 16
size(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions[]) == 48
===========================================================================
edu.tum.cup2.generator.LALR1AutomatonFactory$NumberedEdge.NumberedEdge(edu.tum.cup2.generator.LALR1AutomatonFactory, java.lang.Integer, java.lang.Integer, edu.tum.cup2.grammar.Symbol, edu.tum.cup2.generator.items.LR1Item):::ENTER
edu.tum.cup2.generator.LALR1AutomatonFactory.this has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.states has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.states != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.states.getClass().getName() == java.util.Collections$SynchronizedSet.class
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.edges has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.edges != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.edges.getClass().getName() == java.util.Collections$SynchronizedSet.class
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.startState has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.startState != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.startState.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.grammar has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.grammar != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.nullableSet has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.nullableSet != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.firstSets has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.firstSets != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.productionsStartingWith has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.productionsStartingWith != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.emptyTerminalsSet has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.emptyTerminalsSet != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.verbosity has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.verbosity != null
edu.tum.cup2.generator.Verbosity.None has only one value
edu.tum.cup2.generator.Verbosity.None != null
edu.tum.cup2.generator.Verbosity.Sparse has only one value
edu.tum.cup2.generator.Verbosity.Sparse != null
edu.tum.cup2.generator.Verbosity.Verbose has only one value
edu.tum.cup2.generator.Verbosity.Verbose != null
edu.tum.cup2.generator.Verbosity.Detailled has only one value
edu.tum.cup2.generator.Verbosity.Detailled != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.verbosity.statesCounterStep == 0
edu.tum.cup2.generator.Verbosity.$VALUES has only one value
edu.tum.cup2.generator.Verbosity.$VALUES != null
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == edu.tum.cup2.generator.Verbosity[].class
edu.tum.cup2.generator.Verbosity.$VALUES[] contains no nulls and has only one value, of length 4
edu.tum.cup2.generator.Verbosity.$VALUES[] elements != null
edu.tum.cup2.generator.Verbosity.$VALUES[].getClass().getName() == [edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity]
edu.tum.cup2.generator.Verbosity.$VALUES[].getClass().getName() elements == edu.tum.cup2.generator.Verbosity.class
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == [0, 1000, 100, 1]
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep elements >= 0
edu.tum.cup2.generator.LALR1AutomatonFactory.this.debugOut has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.debugOut != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.terminals has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.terminals != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.terminals[] contains no nulls and has only one value, of length 30
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.terminals[] elements != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.nonTerminals has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.nonTerminals != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.nonTerminals[] elements != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions[] contains no nulls and has only one value, of length 48
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions[] elements != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.getClass().getName() == edu.tum.cup2.generator.LALR1Generator.class
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.grammarInfo has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.grammarInfo != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.parsingTable == null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.automaton == null
edu.tum.cup2.generator.LRGenerator.numThreads == 4
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.LOG_shortestWordFinder == false
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.grammar has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.grammar != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.precedences has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.precedences != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.verbosity has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.verbosity != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.debugOut has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.debugOut != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue[] == []
edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue[].getClass().getName() == []
edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue.getClass().getName() == java.util.LinkedList.class
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state == null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel.items != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel.items.getClass().getName() == java.util.HashSet.class
edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaEdges has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaEdges != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaEdges.getClass().getName() == java.util.Collections$SynchronizedSet.class
edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaStates has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaStates != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaStates.getClass().getName() == java.util.Collections$SynchronizedSet.class
edu.tum.cup2.generator.LALR1AutomatonFactory.this.statesCounterMsgStep == 0
edu.tum.cup2.generator.LALR1AutomatonFactory.this.statesCounterMsgNext == 0
edu.tum.cup2.generator.LALR1AutomatonFactory.this.iterationsCounter >= 1
edu.tum.cup2.generator.LALR1AutomatonFactory.this.debug == false
edu.tum.cup2.generator.LALR1AutomatonFactory.this.numThreads == 0
edu.tum.cup2.generator.LALR1AutomatonFactory.this.threadPool == null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0 has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0 != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.items has only one value
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.items != null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.items.getClass().getName() == java.util.HashSet.class
edu.tum.cup2.generator.LALR1AutomatonFactory.this.taskCount == 0
edu.tum.cup2.generator.LALR1AutomatonFactory.this.taskCountLock == null
edu.tum.cup2.generator.LALR1AutomatonFactory.this.shutDownThread == null
arg1 != null
arg3 != null
arg4 != null
arg4.kernel != null
arg4.kernel.production != null
arg4.kernel.position >= 0
arg4.kernel.nextSymbol != null
arg4.kernel.hashCode != 0
arg4.kernel.shiftable == true
arg4.lookaheads != null
arg4.lookaheads.getClass().getName() == edu.tum.cup2.generator.terminals.EfficientTerminalSet.class
arg4.nextLookaheads == null
arg4.hashCode != 0
size(edu.tum.cup2.generator.Verbosity.$VALUES[]) == 4
size(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.terminals[]) == 30
size(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.nonTerminals[]) == 16
size(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions[]) == 48
===========================================================================
edu.tum.cup2.generator.LALR1AutomatonFactory$NumberedEdge.NumberedEdge(edu.tum.cup2.generator.LALR1AutomatonFactory, java.lang.Integer, java.lang.Integer, edu.tum.cup2.grammar.Symbol, edu.tum.cup2.generator.items.LR1Item):::EXIT
edu.tum.cup2.generator.LALR1AutomatonFactory.this == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.states == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.states)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.states.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.states.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.edges == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.edges)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.edges.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.edges.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.startState == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.startState)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.startState.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.startState.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.grammar == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.grammar)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.nullableSet == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.nullableSet)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.firstSets == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.firstSets)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.productionsStartingWith == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.productionsStartingWith)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.emptyTerminalsSet == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.emptyTerminalsSet)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.verbosity == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.verbosity)
edu.tum.cup2.generator.Verbosity.None == orig(edu.tum.cup2.generator.Verbosity.None)
edu.tum.cup2.generator.Verbosity.Sparse == orig(edu.tum.cup2.generator.Verbosity.Sparse)
edu.tum.cup2.generator.Verbosity.Verbose == orig(edu.tum.cup2.generator.Verbosity.Verbose)
edu.tum.cup2.generator.Verbosity.Detailled == orig(edu.tum.cup2.generator.Verbosity.Detailled)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.verbosity.statesCounterStep == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.verbosity.statesCounterStep)
edu.tum.cup2.generator.Verbosity.$VALUES == orig(edu.tum.cup2.generator.Verbosity.$VALUES)
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == orig(edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName())
edu.tum.cup2.generator.Verbosity.$VALUES[] == orig(edu.tum.cup2.generator.Verbosity.$VALUES[])
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.debugOut == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.debugOut)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.terminals == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.terminals)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.terminals[] == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.terminals[])
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.nonTerminals == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.nonTerminals)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.nonTerminals[] == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.nonTerminals[])
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions[] == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions[])
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.grammarInfo == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.grammarInfo)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.parsingTable == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.parsingTable)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.automaton == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.automaton)
edu.tum.cup2.generator.LRGenerator.numThreads == orig(edu.tum.cup2.generator.LRGenerator.numThreads)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.LOG_shortestWordFinder == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.LOG_shortestWordFinder)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.grammar == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.grammar)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.precedences == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.precedences)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.verbosity == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.verbosity)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.debugOut == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.debugOut)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue[] == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue[])
edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.state)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel.items == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel.items)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel.items.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel.items.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaEdges == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaEdges)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaEdges.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaEdges.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaStates == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaStates)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaStates.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaStates.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.statesCounterMsgStep == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.statesCounterMsgStep)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.statesCounterMsgNext == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.statesCounterMsgNext)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.iterationsCounter == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.iterationsCounter)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.debug == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.debug)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.numThreads == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.numThreads)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.threadPool == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.threadPool)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0 == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.items == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.items)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.items.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.items.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.taskCount == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.taskCount)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.taskCountLock == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.taskCountLock)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.shutDownThread == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.shutDownThread)
arg4.kernel == orig(arg4.kernel)
arg4.kernel.production == orig(arg4.kernel.production)
arg4.kernel.position == orig(arg4.kernel.position)
arg4.kernel.nextSymbol == orig(arg4.kernel.nextSymbol)
arg4.kernel.nextSymbol.getClass().getName() == orig(arg4.kernel.nextSymbol.getClass().getName())
arg4.kernel.hashCode == orig(arg4.kernel.hashCode)
arg4.kernel.shiftable == orig(arg4.kernel.shiftable)
arg4.lookaheads == orig(arg4.lookaheads)
arg4.lookaheads.getClass().getName() == orig(arg4.lookaheads.getClass().getName())
arg4.nextLookaheads == orig(arg4.nextLookaheads)
arg4.hashCode == orig(arg4.hashCode)
arg4.kernel != null
arg4.kernel.production != null
arg4.kernel.position >= 0
arg4.kernel.nextSymbol != null
arg4.kernel.hashCode != 0
arg4.kernel.shiftable == true
arg4.lookaheads != null
arg4.lookaheads.getClass().getName() == edu.tum.cup2.generator.terminals.EfficientTerminalSet.class
arg4.nextLookaheads == null
arg4.hashCode != 0
===========================================================================
edu.tum.cup2.generator.LALR1AutomatonFactory$NumberedEdge.equals(java.lang.Object):::ENTER
this.destState != null
arg0 != null
arg0.getClass().getName() == edu.tum.cup2.generator.LALR1AutomatonFactory$NumberedEdge.class
===========================================================================
edu.tum.cup2.generator.LALR1AutomatonFactory$NumberedEdge.equals(java.lang.Object):::EXIT1
===========================================================================
edu.tum.cup2.generator.LALR1AutomatonFactory$NumberedEdge.equals(java.lang.Object):::EXIT1;condition="return == true"
===========================================================================
edu.tum.cup2.generator.LALR1AutomatonFactory$NumberedEdge.equals(java.lang.Object):::EXIT
this.srcState == orig(this.srcState)
this.destState == orig(this.destState)
this.symbol == orig(this.symbol)
this.symbol.getClass().getName() == orig(this.symbol.getClass().getName())
this.srcItem == orig(this.srcItem)
this.srcItem.kernel == orig(this.srcItem.kernel)
this.srcItem.kernel.production == orig(this.srcItem.kernel.production)
this.srcItem.kernel.position == orig(this.srcItem.kernel.position)
this.srcItem.kernel.nextSymbol == orig(this.srcItem.kernel.nextSymbol)
this.srcItem.kernel.nextSymbol.getClass().getName() == orig(this.srcItem.kernel.nextSymbol.getClass().getName())
this.srcItem.kernel.hashCode == orig(this.srcItem.kernel.hashCode)
this.srcItem.kernel.shiftable == orig(this.srcItem.kernel.shiftable)
this.srcItem.lookaheads == orig(this.srcItem.lookaheads)
this.srcItem.lookaheads.getClass().getName() == orig(this.srcItem.lookaheads.getClass().getName())
this.srcItem.nextLookaheads == orig(this.srcItem.nextLookaheads)
this.srcItem.hashCode == orig(this.srcItem.hashCode)
edu.tum.cup2.generator.LALR1AutomatonFactory.this == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.states == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.states)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.states.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.states.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.edges == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.edges)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.edges.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.edges.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.startState == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.startState)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.startState.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.startState.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.grammar == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.grammar)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.nullableSet == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.nullableSet)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.firstSets == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.firstSets)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.productionsStartingWith == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.productionsStartingWith)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.emptyTerminalsSet == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.emptyTerminalsSet)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.verbosity == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.verbosity)
edu.tum.cup2.generator.Verbosity.None == orig(edu.tum.cup2.generator.Verbosity.None)
edu.tum.cup2.generator.Verbosity.Sparse == orig(edu.tum.cup2.generator.Verbosity.Sparse)
edu.tum.cup2.generator.Verbosity.Verbose == orig(edu.tum.cup2.generator.Verbosity.Verbose)
edu.tum.cup2.generator.Verbosity.Detailled == orig(edu.tum.cup2.generator.Verbosity.Detailled)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.verbosity.statesCounterStep == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.verbosity.statesCounterStep)
edu.tum.cup2.generator.Verbosity.$VALUES == orig(edu.tum.cup2.generator.Verbosity.$VALUES)
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == orig(edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName())
edu.tum.cup2.generator.Verbosity.$VALUES[] == orig(edu.tum.cup2.generator.Verbosity.$VALUES[])
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.debugOut == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.debugOut)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.terminals == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.terminals)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.terminals[] == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.terminals[])
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.nonTerminals == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.nonTerminals)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.nonTerminals[] == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.nonTerminals[])
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions[] == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions[])
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.grammarInfo == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.grammarInfo)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.parsingTable == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.parsingTable)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.automaton == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.automaton)
edu.tum.cup2.generator.LRGenerator.numThreads == orig(edu.tum.cup2.generator.LRGenerator.numThreads)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.LOG_shortestWordFinder == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.LOG_shortestWordFinder)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.grammar == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.grammar)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.precedences == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.precedences)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.verbosity == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.verbosity)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.debugOut == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.debugOut)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue[] == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue[])
edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.state)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel.items == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel.items)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel.items.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel.items.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaEdges == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaEdges)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaEdges.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaEdges.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaStates == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaStates)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaStates.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaStates.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.statesCounterMsgStep == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.statesCounterMsgStep)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.statesCounterMsgNext == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.statesCounterMsgNext)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.iterationsCounter == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.iterationsCounter)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.debug == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.debug)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.numThreads == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.numThreads)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.threadPool == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.threadPool)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0 == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.items == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.items)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.items.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.items.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.taskCount == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.taskCount)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.taskCountLock == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.taskCountLock)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.shutDownThread == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.shutDownThread)
this.destState != null
return == true
===========================================================================
edu.tum.cup2.generator.LALR1AutomatonFactory$NumberedEdge.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
edu.tum.cup2.generator.LALR1AutomatonFactory$NumberedEdge.hashCode():::ENTER
===========================================================================
edu.tum.cup2.generator.LALR1AutomatonFactory$NumberedEdge.hashCode():::EXIT
this.srcState == orig(this.srcState)
this.destState == orig(this.destState)
this.symbol == orig(this.symbol)
this.symbol.getClass().getName() == orig(this.symbol.getClass().getName())
this.srcItem == orig(this.srcItem)
this.srcItem.kernel == orig(this.srcItem.kernel)
this.srcItem.kernel.production == orig(this.srcItem.kernel.production)
this.srcItem.kernel.position == orig(this.srcItem.kernel.position)
this.srcItem.kernel.nextSymbol == orig(this.srcItem.kernel.nextSymbol)
this.srcItem.kernel.nextSymbol.getClass().getName() == orig(this.srcItem.kernel.nextSymbol.getClass().getName())
this.srcItem.kernel.hashCode == orig(this.srcItem.kernel.hashCode)
this.srcItem.kernel.shiftable == orig(this.srcItem.kernel.shiftable)
this.srcItem.lookaheads == orig(this.srcItem.lookaheads)
this.srcItem.lookaheads.getClass().getName() == orig(this.srcItem.lookaheads.getClass().getName())
this.srcItem.nextLookaheads == orig(this.srcItem.nextLookaheads)
this.srcItem.hashCode == orig(this.srcItem.hashCode)
edu.tum.cup2.generator.LALR1AutomatonFactory.this == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.states == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.states)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.states.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.states.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.edges == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.edges)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.edges.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.edges.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.startState == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.startState)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.startState.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.ret.startState.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.grammar == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.grammar)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.nullableSet == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.nullableSet)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.firstSets == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.firstSets)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.productionsStartingWith == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.productionsStartingWith)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.emptyTerminalsSet == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammarInfo.emptyTerminalsSet)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.verbosity == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.verbosity)
edu.tum.cup2.generator.Verbosity.None == orig(edu.tum.cup2.generator.Verbosity.None)
edu.tum.cup2.generator.Verbosity.Sparse == orig(edu.tum.cup2.generator.Verbosity.Sparse)
edu.tum.cup2.generator.Verbosity.Verbose == orig(edu.tum.cup2.generator.Verbosity.Verbose)
edu.tum.cup2.generator.Verbosity.Detailled == orig(edu.tum.cup2.generator.Verbosity.Detailled)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.verbosity.statesCounterStep == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.verbosity.statesCounterStep)
edu.tum.cup2.generator.Verbosity.$VALUES == orig(edu.tum.cup2.generator.Verbosity.$VALUES)
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == orig(edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName())
edu.tum.cup2.generator.Verbosity.$VALUES[] == orig(edu.tum.cup2.generator.Verbosity.$VALUES[])
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.debugOut == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.debugOut)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.terminals == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.terminals)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.terminals[] == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.terminals[])
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.nonTerminals == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.nonTerminals)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.nonTerminals[] == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.nonTerminals[])
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions[] == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.grammar.productions[])
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.grammarInfo == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.grammarInfo)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.parsingTable == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.parsingTable)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.automaton == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.automaton)
edu.tum.cup2.generator.LRGenerator.numThreads == orig(edu.tum.cup2.generator.LRGenerator.numThreads)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.LOG_shortestWordFinder == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.LOG_shortestWordFinder)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.grammar == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.grammar)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.precedences == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.precedences)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.verbosity == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.verbosity)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.debugOut == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.generator.debugOut)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue[] == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue[])
edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.queue.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.state)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel.items == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel.items)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel.items.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.stateKernel.items.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaEdges == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaEdges)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaEdges.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaEdges.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaStates == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaStates)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaStates.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.dfaStates.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.statesCounterMsgStep == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.statesCounterMsgStep)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.statesCounterMsgNext == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.statesCounterMsgNext)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.iterationsCounter == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.iterationsCounter)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.debug == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.debug)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.numThreads == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.numThreads)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.threadPool == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.threadPool)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0 == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.items == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.items)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.items.getClass().getName() == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.state0.items.getClass().getName())
edu.tum.cup2.generator.LALR1AutomatonFactory.this.taskCount == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.taskCount)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.taskCountLock == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.taskCountLock)
edu.tum.cup2.generator.LALR1AutomatonFactory.this.shutDownThread == orig(edu.tum.cup2.generator.LALR1AutomatonFactory.this.shutDownThread)
===========================================================================
edu.tum.cup2.generator.LALR1AutomatonFactory:::CLASS
===========================================================================
edu.tum.cup2.generator.LALR1AutomatonFactory:::OBJECT
this has only one value
this.ret.states has only one value
this.ret.states.getClass().getName() == java.util.Collections$SynchronizedSet.class
this.ret.edges has only one value
this.ret.edges.getClass().getName() == java.util.Collections$SynchronizedSet.class
this.ret.startState has only one value
this.ret.startState.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
this.ret.startState.items has only one value
this.ret.startState.items.getClass().getName() == java.util.HashSet.class
this.grammarInfo.grammar has only one value
this.grammarInfo.grammar.terminals has only one value
this.grammarInfo.grammar.terminals[] contains no nulls and has only one value, of length 30
this.grammarInfo.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.grammarInfo.grammar.nonTerminals has only one value
this.grammarInfo.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
this.grammarInfo.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.grammarInfo.grammar.productions has only one value
this.grammarInfo.grammar.productions[] contains no nulls and has only one value, of length 48
this.grammarInfo.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
this.grammarInfo.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
this.grammarInfo.nullableSet has only one value
this.grammarInfo.firstSets has only one value
this.grammarInfo.firstSets.data has only one value
this.grammarInfo.firstSets.data.getClass().getName() == java.util.HashMap.class
this.grammarInfo.productionsStartingWith has only one value
this.grammarInfo.emptyTerminalsSet has only one value
this.grammarInfo.emptyTerminalsSet.data has only one value
this.grammarInfo.emptyTerminalsSet.data[] == [0, 0]
this.grammarInfo.emptyTerminalsSet.data[] elements == 0
this.grammarInfo.emptyTerminalsSet.indices has only one value
this.grammarInfo.emptyTerminalsSet.indices.getClass().getName() == java.util.HashMap.class
this.grammarInfo.emptyTerminalsSet.terminals has only one value
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() == java.util.LinkedList.class
this.grammarInfo.emptyTerminalsSet.indexEpsilon == 0
edu.tum.cup2.generator.Verbosity.None has only one value
edu.tum.cup2.generator.Verbosity.Sparse has only one value
edu.tum.cup2.generator.Verbosity.Verbose has only one value
edu.tum.cup2.generator.Verbosity.Detailled has only one value
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == 0
edu.tum.cup2.generator.Verbosity.$VALUES has only one value
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == edu.tum.cup2.generator.Verbosity[].class
edu.tum.cup2.generator.Verbosity.$VALUES[] contains no nulls and has only one value, of length 4
edu.tum.cup2.generator.Verbosity.$VALUES[].getClass().getName() == [edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity]
edu.tum.cup2.generator.Verbosity.$VALUES[].getClass().getName() elements == edu.tum.cup2.generator.Verbosity.class
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == [0, 1000, 100, 1]
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep elements >= 0
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == 1000
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == 100
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == 1
this.verbosity.statesCounterStep == 0
this.grammar.terminals has only one value
this.grammar.terminals[] contains no nulls and has only one value, of length 30
this.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.grammar.nonTerminals has only one value
this.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
this.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.grammar.productions has only one value
this.grammar.productions[] contains no nulls and has only one value, of length 48
this.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
this.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
this.generator.getClass().getName() == edu.tum.cup2.generator.LALR1Generator.class
this.generator.grammarInfo has only one value
this.generator.grammarInfo.grammar has only one value
this.generator.grammarInfo.nullableSet has only one value
this.generator.grammarInfo.firstSets has only one value
this.generator.grammarInfo.productionsStartingWith has only one value
this.generator.grammarInfo.emptyTerminalsSet has only one value
this.generator.parsingTable == null
this.generator.automaton == null
edu.tum.cup2.generator.LRGenerator.numThreads == 4
this.generator.LOG_shortestWordFinder == false
this.generator.grammar has only one value
this.generator.grammar.terminals has only one value
this.generator.grammar.terminals[] contains no nulls and has only one value, of length 30
this.generator.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.generator.grammar.nonTerminals has only one value
this.generator.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
this.generator.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.generator.grammar.productions has only one value
this.generator.grammar.productions[] contains no nulls and has only one value, of length 48
this.generator.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
this.generator.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
this.generator.precedences has only one value
this.generator.precedences.list has only one value
this.generator.precedences.list[] contains no nulls and has only one value, of length 1
this.generator.precedences.list[] elements has only one value
this.generator.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
this.generator.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
this.generator.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
this.generator.verbosity has only one value
this.generator.verbosity.statesCounterStep == 0
this.generator.debugOut has only one value
this.queue[] == []
this.queue[].getClass().getName() == []
this.queue.getClass().getName() == java.util.LinkedList.class
this.state == null
this.stateKernel.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
this.stateKernel.items has only one value
this.stateKernel.items.getClass().getName() == java.util.HashSet.class
this.dfaEdges.getClass().getName() == java.util.Collections$SynchronizedSet.class
this.dfaStates.getClass().getName() == java.util.Collections$SynchronizedSet.class
this.statesCounterMsgStep == 0
this.statesCounterMsgNext == 0
this.iterationsCounter one of { 0, 211 }
this.debug == false
this.numThreads == 0
this.threadPool == null
this.state0.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
this.state0.items has only one value
this.state0.items.getClass().getName() == java.util.HashSet.class
this.taskCount == 0
this.taskCountLock == null
this.shutDownThread == null
size(this.grammarInfo.grammar.terminals[]) == 30
size(this.grammarInfo.grammar.nonTerminals[]) == 16
size(this.grammarInfo.grammar.productions[]) == 48
size(this.grammarInfo.emptyTerminalsSet.data[]) == 2
size(edu.tum.cup2.generator.Verbosity.$VALUES[]) == 4
size(this.grammar.terminals[]) == 30
size(this.grammar.nonTerminals[]) == 16
size(this.grammar.productions[]) == 48
size(this.generator.grammar.terminals[]) == 30
size(this.generator.grammar.nonTerminals[]) == 16
size(this.generator.grammar.productions[]) == 48
size(this.generator.precedences.list[]) == 1
===========================================================================
edu.tum.cup2.generator.LALR1AutomatonFactory.LALR1AutomatonFactory():::EXIT
this.ret == null
this.grammarInfo == null
this.verbosity == null
this.debugOut == null
this.grammar == null
this.generator == null
this.queue == null
this.stateKernel == null
this.dfaEdges == null
this.dfaStates == null
this.iterationsCounter == 0
this.state0 == null
===========================================================================
edu.tum.cup2.generator.LALR1AutomatonFactory.createAutomaton(edu.tum.cup2.generator.LRGenerator, edu.tum.cup2.generator.GrammarInfo):::ENTER
this.ret == null
this.grammarInfo == null
this.verbosity == null
this.debugOut == null
this.grammar == null
this.generator == null
this.queue == null
this.stateKernel == null
this.dfaEdges == null
this.dfaStates == null
this.iterationsCounter == 0
this.state0 == null
arg0 has only one value
arg0.getClass().getName() == edu.tum.cup2.generator.LALR1Generator.class
arg0.grammarInfo has only one value
arg0.grammarInfo.grammar has only one value
arg0.grammarInfo.nullableSet has only one value
arg0.grammarInfo.firstSets has only one value
arg0.grammarInfo.productionsStartingWith has only one value
arg0.grammarInfo.emptyTerminalsSet has only one value
arg0.parsingTable == null
arg0.automaton == null
arg0.LOG_shortestWordFinder == false
arg0.grammar has only one value
arg0.grammar.terminals has only one value
arg0.grammar.terminals[] contains no nulls and has only one value, of length 30
arg0.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.grammar.nonTerminals has only one value
arg0.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
arg0.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
arg0.grammar.productions has only one value
arg0.grammar.productions[] contains no nulls and has only one value, of length 48
arg0.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg0.precedences has only one value
arg0.precedences.list has only one value
arg0.precedences.list[] contains no nulls and has only one value, of length 1
arg0.precedences.list[] elements has only one value
arg0.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
arg0.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
arg0.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
arg0.verbosity has only one value
arg0.verbosity.statesCounterStep == 0
arg0.debugOut has only one value
arg1 has only one value
arg1.grammar has only one value
arg1.grammar.terminals has only one value
arg1.grammar.terminals[] contains no nulls and has only one value, of length 30
arg1.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
arg1.grammar.nonTerminals has only one value
arg1.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
arg1.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
arg1.grammar.productions has only one value
arg1.grammar.productions[] contains no nulls and has only one value, of length 48
arg1.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg1.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg1.nullableSet has only one value
arg1.firstSets has only one value
arg1.firstSets.data has only one value
arg1.firstSets.data.getClass().getName() == java.util.HashMap.class
arg1.productionsStartingWith has only one value
arg1.emptyTerminalsSet has only one value
arg1.emptyTerminalsSet.data has only one value
arg1.emptyTerminalsSet.data[] == [0, 0]
arg1.emptyTerminalsSet.data[] elements == 0
arg1.emptyTerminalsSet.indices has only one value
arg1.emptyTerminalsSet.indices.getClass().getName() == java.util.HashMap.class
arg1.emptyTerminalsSet.terminals has only one value
arg1.emptyTerminalsSet.terminals.getClass().getName() == java.util.LinkedList.class
arg1.emptyTerminalsSet.indexEpsilon == 0
size(arg0.grammar.terminals[]) == 30
size(arg0.grammar.nonTerminals[]) == 16
size(arg0.grammar.productions[]) == 48
size(arg0.precedences.list[]) == 1
size(arg1.grammar.terminals[]) == 30
size(arg1.grammar.nonTerminals[]) == 16
size(arg1.grammar.productions[]) == 48
size(arg1.emptyTerminalsSet.data[]) == 2
===========================================================================
edu.tum.cup2.generator.LALR1AutomatonFactory.createAutomaton(edu.tum.cup2.generator.LRGenerator, edu.tum.cup2.generator.GrammarInfo):::EXIT
edu.tum.cup2.generator.Verbosity.None == orig(edu.tum.cup2.generator.Verbosity.None)
edu.tum.cup2.generator.Verbosity.Sparse == orig(edu.tum.cup2.generator.Verbosity.Sparse)
edu.tum.cup2.generator.Verbosity.Verbose == orig(edu.tum.cup2.generator.Verbosity.Verbose)
edu.tum.cup2.generator.Verbosity.Detailled == orig(edu.tum.cup2.generator.Verbosity.Detailled)
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.None.statesCounterStep)
edu.tum.cup2.generator.Verbosity.$VALUES == orig(edu.tum.cup2.generator.Verbosity.$VALUES)
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == orig(edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName())
edu.tum.cup2.generator.Verbosity.$VALUES[] == orig(edu.tum.cup2.generator.Verbosity.$VALUES[])
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep)
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep)
edu.tum.cup2.generator.LRGenerator.numThreads == orig(edu.tum.cup2.generator.LRGenerator.numThreads)
this.state == orig(this.state)
this.statesCounterMsgStep == orig(this.statesCounterMsgStep)
this.statesCounterMsgNext == orig(this.statesCounterMsgNext)
this.debug == orig(this.debug)
this.numThreads == orig(this.numThreads)
this.threadPool == orig(this.threadPool)
this.taskCount == orig(this.taskCount)
this.taskCountLock == orig(this.taskCountLock)
this.shutDownThread == orig(this.shutDownThread)
arg0.grammarInfo == orig(arg0.grammarInfo)
arg0.grammarInfo.grammar == orig(arg0.grammarInfo.grammar)
arg0.grammarInfo.nullableSet == orig(arg0.grammarInfo.nullableSet)
arg0.grammarInfo.firstSets == orig(arg0.grammarInfo.firstSets)
arg0.grammarInfo.productionsStartingWith == orig(arg0.grammarInfo.productionsStartingWith)
arg0.grammarInfo.emptyTerminalsSet == orig(arg0.grammarInfo.emptyTerminalsSet)
arg0.parsingTable == orig(arg0.parsingTable)
arg0.automaton == orig(arg0.automaton)
arg0.LOG_shortestWordFinder == orig(arg0.LOG_shortestWordFinder)
arg0.grammar == orig(arg0.grammar)
arg0.grammar.terminals == orig(arg0.grammar.terminals)
arg0.grammar.terminals[] == orig(arg0.grammar.terminals[])
arg0.grammar.nonTerminals == orig(arg0.grammar.nonTerminals)
arg0.grammar.nonTerminals[] == orig(arg0.grammar.nonTerminals[])
arg0.grammar.productions == orig(arg0.grammar.productions)
arg0.grammar.productions[] == orig(arg0.grammar.productions[])
arg0.precedences == orig(arg0.precedences)
arg0.precedences.list == orig(arg0.precedences.list)
arg0.precedences.list[] == orig(arg0.precedences.list[])
arg0.precedences.list.getClass().getName() == orig(arg0.precedences.list.getClass().getName())
arg0.verbosity == orig(arg0.verbosity)
arg0.verbosity.statesCounterStep == orig(arg0.verbosity.statesCounterStep)
arg0.debugOut == orig(arg0.debugOut)
arg1.grammar == orig(arg1.grammar)
arg1.grammar.terminals == orig(arg1.grammar.terminals)
arg1.grammar.terminals[] == orig(arg1.grammar.terminals[])
arg1.grammar.nonTerminals == orig(arg1.grammar.nonTerminals)
arg1.grammar.nonTerminals[] == orig(arg1.grammar.nonTerminals[])
arg1.grammar.productions == orig(arg1.grammar.productions)
arg1.grammar.productions[] == orig(arg1.grammar.productions[])
arg1.nullableSet == orig(arg1.nullableSet)
arg1.firstSets == orig(arg1.firstSets)
arg1.firstSets.data == orig(arg1.firstSets.data)
arg1.firstSets.data.getClass().getName() == orig(arg1.firstSets.data.getClass().getName())
arg1.productionsStartingWith == orig(arg1.productionsStartingWith)
arg1.emptyTerminalsSet == orig(arg1.emptyTerminalsSet)
arg1.emptyTerminalsSet.data == orig(arg1.emptyTerminalsSet.data)
arg1.emptyTerminalsSet.data[] == orig(arg1.emptyTerminalsSet.data[])
arg1.emptyTerminalsSet.indices == orig(arg1.emptyTerminalsSet.indices)
arg1.emptyTerminalsSet.indices.getClass().getName() == orig(arg1.emptyTerminalsSet.indices.getClass().getName())
arg1.emptyTerminalsSet.terminals == orig(arg1.emptyTerminalsSet.terminals)
arg1.emptyTerminalsSet.terminals.getClass().getName() == orig(arg1.emptyTerminalsSet.terminals.getClass().getName())
arg1.emptyTerminalsSet.indexEpsilon == orig(arg1.emptyTerminalsSet.indexEpsilon)
this.ret has only one value
this.grammarInfo has only one value
this.verbosity has only one value
this.debugOut has only one value
this.grammar has only one value
this.generator has only one value
this.queue has only one value
this.stateKernel has only one value
this.dfaEdges has only one value
this.dfaStates has only one value
this.iterationsCounter == 211
this.state0 has only one value
arg0.grammarInfo has only one value
arg0.grammarInfo.grammar has only one value
arg0.grammarInfo.nullableSet has only one value
arg0.grammarInfo.firstSets has only one value
arg0.grammarInfo.productionsStartingWith has only one value
arg0.grammarInfo.emptyTerminalsSet has only one value
arg0.parsingTable == null
arg0.automaton == null
arg0.LOG_shortestWordFinder == false
arg0.grammar has only one value
arg0.grammar.terminals has only one value
arg0.grammar.terminals[] contains no nulls and has only one value, of length 30
arg0.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.grammar.nonTerminals has only one value
arg0.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
arg0.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
arg0.grammar.productions has only one value
arg0.grammar.productions[] contains no nulls and has only one value, of length 48
arg0.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg0.precedences has only one value
arg0.precedences.list has only one value
arg0.precedences.list[] contains no nulls and has only one value, of length 1
arg0.precedences.list[] elements has only one value
arg0.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
arg0.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
arg0.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
arg0.verbosity has only one value
arg0.verbosity.statesCounterStep == 0
arg0.debugOut has only one value
arg1.grammar has only one value
arg1.grammar.terminals has only one value
arg1.grammar.terminals[] contains no nulls and has only one value, of length 30
arg1.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
arg1.grammar.nonTerminals has only one value
arg1.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
arg1.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
arg1.grammar.productions has only one value
arg1.grammar.productions[] contains no nulls and has only one value, of length 48
arg1.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg1.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg1.nullableSet has only one value
arg1.firstSets has only one value
arg1.firstSets.data has only one value
arg1.firstSets.data.getClass().getName() == java.util.HashMap.class
arg1.productionsStartingWith has only one value
arg1.emptyTerminalsSet has only one value
arg1.emptyTerminalsSet.data has only one value
arg1.emptyTerminalsSet.data[] == [0, 0]
arg1.emptyTerminalsSet.data[] elements == 0
arg1.emptyTerminalsSet.indices has only one value
arg1.emptyTerminalsSet.indices.getClass().getName() == java.util.HashMap.class
arg1.emptyTerminalsSet.terminals has only one value
arg1.emptyTerminalsSet.terminals.getClass().getName() == java.util.LinkedList.class
arg1.emptyTerminalsSet.indexEpsilon == 0
return has only one value
return.states has only one value
return.states.getClass().getName() == java.util.Collections$SynchronizedSet.class
return.edges has only one value
return.edges.getClass().getName() == java.util.Collections$SynchronizedSet.class
return.startState has only one value
return.startState.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
return.startState.items has only one value
return.startState.items.getClass().getName() == java.util.HashSet.class
size(arg0.grammar.terminals[]) == 30
size(arg0.grammar.nonTerminals[]) == 16
size(arg0.grammar.productions[]) == 48
size(arg0.precedences.list[]) == 1
size(arg1.grammar.terminals[]) == 30
size(arg1.grammar.nonTerminals[]) == 16
size(arg1.grammar.productions[]) == 48
size(arg1.emptyTerminalsSet.data[]) == 2
===========================================================================
edu.tum.cup2.generator.LALR1Generator:::CLASS
edu.tum.cup2.generator.LRGenerator.numThreads == 4
===========================================================================
edu.tum.cup2.generator.LALR1Generator:::OBJECT
this has only one value
this.grammarInfo has only one value
this.grammarInfo != null
this.grammarInfo.grammar has only one value
this.grammarInfo.grammar != null
this.grammarInfo.grammar.terminals has only one value
this.grammarInfo.grammar.terminals != null
this.grammarInfo.grammar.terminals[] contains no nulls and has only one value, of length 30
this.grammarInfo.grammar.terminals[] elements != null
this.grammarInfo.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.grammarInfo.grammar.nonTerminals has only one value
this.grammarInfo.grammar.nonTerminals != null
this.grammarInfo.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
this.grammarInfo.grammar.nonTerminals[] elements != null
this.grammarInfo.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.grammarInfo.grammar.productions has only one value
this.grammarInfo.grammar.productions != null
this.grammarInfo.grammar.productions[] contains no nulls and has only one value, of length 48
this.grammarInfo.grammar.productions[] elements != null
this.grammarInfo.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
this.grammarInfo.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
this.grammarInfo.nullableSet has only one value
this.grammarInfo.nullableSet != null
this.grammarInfo.firstSets has only one value
this.grammarInfo.firstSets != null
this.grammarInfo.firstSets.data has only one value
this.grammarInfo.firstSets.data != null
this.grammarInfo.firstSets.data.getClass().getName() == java.util.HashMap.class
this.grammarInfo.productionsStartingWith has only one value
this.grammarInfo.productionsStartingWith != null
this.grammarInfo.emptyTerminalsSet has only one value
this.grammarInfo.emptyTerminalsSet != null
this.grammarInfo.emptyTerminalsSet.data has only one value
this.grammarInfo.emptyTerminalsSet.data != null
this.grammarInfo.emptyTerminalsSet.data[] == [0, 0]
this.grammarInfo.emptyTerminalsSet.data[] elements == 0
this.grammarInfo.emptyTerminalsSet.indices has only one value
this.grammarInfo.emptyTerminalsSet.indices != null
this.grammarInfo.emptyTerminalsSet.indices.getClass().getName() == java.util.HashMap.class
this.grammarInfo.emptyTerminalsSet.terminals has only one value
this.grammarInfo.emptyTerminalsSet.terminals != null
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() == java.util.LinkedList.class
this.grammarInfo.emptyTerminalsSet.indexEpsilon == 0
this.parsingTable.grammar has only one value
this.parsingTable.grammar.terminals has only one value
this.parsingTable.grammar.terminals[] contains no nulls and has only one value, of length 30
this.parsingTable.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.parsingTable.grammar.nonTerminals has only one value
this.parsingTable.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
this.parsingTable.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.parsingTable.grammar.productions has only one value
this.parsingTable.grammar.productions[] contains no nulls and has only one value, of length 48
this.parsingTable.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
this.parsingTable.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
this.parsingTable.states has only one value
this.parsingTable.states[] contains no nulls and has only one value, of length 114
this.parsingTable.states[].getClass().getName() == [edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState]
this.parsingTable.states[].getClass().getName() elements == edu.tum.cup2.parser.states.LRParserState.class
this.parsingTable.actionTable has only one value
this.parsingTable.actionTable.parentTable has only one value
this.parsingTable.actionTable.table has only one value
this.parsingTable.gotoTable has only one value
this.parsingTable.gotoTable.parentTable has only one value
this.parsingTable.gotoTable.table has only one value
this.parsingTable.erI has only one value
this.automaton.states has only one value
this.automaton.states != null
this.automaton.states.getClass().getName() == java.util.Collections$SynchronizedSet.class
this.automaton.edges has only one value
this.automaton.edges != null
this.automaton.edges.getClass().getName() == java.util.Collections$SynchronizedSet.class
this.automaton.startState has only one value
this.automaton.startState != null
this.automaton.startState.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
this.automaton.startState.items has only one value
this.automaton.startState.items != null
this.automaton.startState.items.getClass().getName() == java.util.HashSet.class
this.LOG_shortestWordFinder == false
this.grammar has only one value
this.grammar != null
this.grammar.terminals has only one value
this.grammar.terminals != null
this.grammar.terminals[] contains no nulls and has only one value, of length 30
this.grammar.terminals[] elements != null
this.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.grammar.nonTerminals has only one value
this.grammar.nonTerminals != null
this.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
this.grammar.nonTerminals[] elements != null
this.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.grammar.productions has only one value
this.grammar.productions != null
this.grammar.productions[] contains no nulls and has only one value, of length 48
this.grammar.productions[] elements != null
this.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
this.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
this.precedences has only one value
this.precedences != null
this.precedences.list has only one value
this.precedences.list != null
this.precedences.list[] contains no nulls and has only one value, of length 1
this.precedences.list[] elements has only one value
this.precedences.list[] elements != null
this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
this.verbosity has only one value
this.verbosity != null
edu.tum.cup2.generator.Verbosity.None has only one value
edu.tum.cup2.generator.Verbosity.None != null
edu.tum.cup2.generator.Verbosity.Sparse has only one value
edu.tum.cup2.generator.Verbosity.Sparse != null
edu.tum.cup2.generator.Verbosity.Verbose has only one value
edu.tum.cup2.generator.Verbosity.Verbose != null
edu.tum.cup2.generator.Verbosity.Detailled has only one value
edu.tum.cup2.generator.Verbosity.Detailled != null
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == 0
edu.tum.cup2.generator.Verbosity.$VALUES has only one value
edu.tum.cup2.generator.Verbosity.$VALUES != null
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == edu.tum.cup2.generator.Verbosity[].class
edu.tum.cup2.generator.Verbosity.$VALUES[] contains no nulls and has only one value, of length 4
edu.tum.cup2.generator.Verbosity.$VALUES[] elements != null
edu.tum.cup2.generator.Verbosity.$VALUES[].getClass().getName() == [edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity]
edu.tum.cup2.generator.Verbosity.$VALUES[].getClass().getName() elements == edu.tum.cup2.generator.Verbosity.class
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == [0, 1000, 100, 1]
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep elements >= 0
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == 1000
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == 100
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == 1
this.verbosity.statesCounterStep == 0
this.debugOut has only one value
this.debugOut != null
size(this.grammarInfo.grammar.terminals[]) == 30
size(this.grammarInfo.grammar.nonTerminals[]) == 16
size(this.grammarInfo.grammar.productions[]) == 48
size(this.grammarInfo.emptyTerminalsSet.data[]) == 2
size(this.parsingTable.grammar.terminals[]) == 30
size(this.parsingTable.grammar.nonTerminals[]) == 16
size(this.parsingTable.grammar.productions[]) == 48
size(this.parsingTable.states[]) == 114
size(this.grammar.terminals[]) == 30
size(this.grammar.nonTerminals[]) == 16
size(this.grammar.productions[]) == 48
size(this.precedences.list[]) == 1
size(edu.tum.cup2.generator.Verbosity.$VALUES[]) == 4
===========================================================================
edu.tum.cup2.generator.LALR1Generator.LALR1Generator(edu.tum.cup2.spec.CUP2Specification):::ENTER
arg0 has only one value
arg0.getClass().getName() == main.ParserSpec.class
arg0.isInit == true
arg0.auxNonTerminals has only one value
arg0.auxNonTerminals[] == []
arg0.auxNonTerminals[].getClass().getName() == []
arg0.symbolValueClasses has only one value
arg0.precedences has only one value
arg0.precedences.list has only one value
arg0.precedences.list[] contains no nulls and has only one value, of length 1
arg0.precedences.list[] elements has only one value
arg0.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
arg0.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
arg0.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
arg0.grammar has only one value
arg0.grammar.terminals has only one value
arg0.grammar.terminals[] contains no nulls and has only one value, of length 29
arg0.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.grammar.nonTerminals has only one value
arg0.grammar.nonTerminals[] contains no nulls and has only one value, of length 15
arg0.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals]
arg0.grammar.nonTerminals[].getClass().getName() elements == main.ParserSpec.NonTerminals.class
arg0.grammar.productions has only one value
arg0.grammar.productions[] contains no nulls and has only one value, of length 47
arg0.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg0.grammarInterface has only one value
arg0.productionCount == 47
arg0.auxiliaryProductions has only one value
arg0.auxiliaryProductions[] == []
arg0.auxiliaryProductions[].getClass().getName() == []
size(arg0.precedences.list[]) == 1
size(arg0.grammar.terminals[]) == 29
size(arg0.grammar.nonTerminals[]) == 15
size(arg0.grammar.productions[]) == 47
===========================================================================
edu.tum.cup2.generator.LALR1Generator.LALR1Generator(edu.tum.cup2.spec.CUP2Specification):::EXIT
arg0.isInit == orig(arg0.isInit)
arg0.auxNonTerminals == orig(arg0.auxNonTerminals)
arg0.auxNonTerminals[] == orig(arg0.auxNonTerminals[])
arg0.symbolValueClasses == orig(arg0.symbolValueClasses)
arg0.precedences == orig(arg0.precedences)
arg0.precedences.list == orig(arg0.precedences.list)
arg0.precedences.list[] == orig(arg0.precedences.list[])
arg0.precedences.list.getClass().getName() == orig(arg0.precedences.list.getClass().getName())
arg0.grammar == orig(arg0.grammar)
arg0.grammar.terminals == orig(arg0.grammar.terminals)
arg0.grammar.terminals[] == orig(arg0.grammar.terminals[])
arg0.grammar.nonTerminals == orig(arg0.grammar.nonTerminals)
arg0.grammar.nonTerminals[] == orig(arg0.grammar.nonTerminals[])
arg0.grammar.productions == orig(arg0.grammar.productions)
arg0.grammar.productions[] == orig(arg0.grammar.productions[])
arg0.grammarInterface == orig(arg0.grammarInterface)
arg0.productionCount == orig(arg0.productionCount)
arg0.auxiliaryProductions == orig(arg0.auxiliaryProductions)
arg0.auxiliaryProductions[] == orig(arg0.auxiliaryProductions[])
this.parsingTable has only one value
this.automaton has only one value
arg0.isInit == true
arg0.auxNonTerminals has only one value
arg0.auxNonTerminals[] == []
arg0.auxNonTerminals[].getClass().getName() == []
arg0.symbolValueClasses has only one value
arg0.precedences has only one value
arg0.precedences.list has only one value
arg0.precedences.list[] contains no nulls and has only one value, of length 1
arg0.precedences.list[] elements has only one value
arg0.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
arg0.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
arg0.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
arg0.grammar has only one value
arg0.grammar.terminals has only one value
arg0.grammar.terminals[] contains no nulls and has only one value, of length 29
arg0.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.grammar.nonTerminals has only one value
arg0.grammar.nonTerminals[] contains no nulls and has only one value, of length 15
arg0.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals]
arg0.grammar.nonTerminals[].getClass().getName() elements == main.ParserSpec.NonTerminals.class
arg0.grammar.productions has only one value
arg0.grammar.productions[] contains no nulls and has only one value, of length 47
arg0.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg0.grammarInterface has only one value
arg0.productionCount == 47
arg0.auxiliaryProductions has only one value
arg0.auxiliaryProductions[] == []
arg0.auxiliaryProductions[].getClass().getName() == []
size(arg0.precedences.list[]) == 1
size(arg0.grammar.terminals[]) == 29
size(arg0.grammar.nonTerminals[]) == 15
size(arg0.grammar.productions[]) == 47
===========================================================================
edu.tum.cup2.generator.LALR1Generator.LALR1Generator(edu.tum.cup2.spec.CUP2Specification, edu.tum.cup2.generator.Verbosity):::ENTER
arg0 has only one value
arg0.getClass().getName() == main.ParserSpec.class
arg0.isInit == true
arg0.auxNonTerminals has only one value
arg0.auxNonTerminals[] == []
arg0.auxNonTerminals[].getClass().getName() == []
arg0.symbolValueClasses has only one value
arg0.precedences has only one value
arg0.precedences.list has only one value
arg0.precedences.list[] contains no nulls and has only one value, of length 1
arg0.precedences.list[] elements has only one value
arg0.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
arg0.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
arg0.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
arg0.grammar has only one value
arg0.grammar.terminals has only one value
arg0.grammar.terminals[] contains no nulls and has only one value, of length 29
arg0.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.grammar.nonTerminals has only one value
arg0.grammar.nonTerminals[] contains no nulls and has only one value, of length 15
arg0.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals]
arg0.grammar.nonTerminals[].getClass().getName() elements == main.ParserSpec.NonTerminals.class
arg0.grammar.productions has only one value
arg0.grammar.productions[] contains no nulls and has only one value, of length 47
arg0.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg0.grammarInterface has only one value
arg0.productionCount == 47
arg0.auxiliaryProductions has only one value
arg0.auxiliaryProductions[] == []
arg0.auxiliaryProductions[].getClass().getName() == []
arg1 has only one value
edu.tum.cup2.generator.Verbosity.None has only one value
edu.tum.cup2.generator.Verbosity.Sparse has only one value
edu.tum.cup2.generator.Verbosity.Verbose has only one value
edu.tum.cup2.generator.Verbosity.Detailled has only one value
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == 0
edu.tum.cup2.generator.Verbosity.$VALUES has only one value
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == edu.tum.cup2.generator.Verbosity[].class
edu.tum.cup2.generator.Verbosity.$VALUES[] contains no nulls and has only one value, of length 4
edu.tum.cup2.generator.Verbosity.$VALUES[].getClass().getName() == [edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity]
edu.tum.cup2.generator.Verbosity.$VALUES[].getClass().getName() elements == edu.tum.cup2.generator.Verbosity.class
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == [0, 1000, 100, 1]
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == 1000
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == 100
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == 1
arg1.statesCounterStep == 0
size(arg0.precedences.list[]) == 1
size(arg0.grammar.terminals[]) == 29
size(arg0.grammar.nonTerminals[]) == 15
size(arg0.grammar.productions[]) == 47
size(edu.tum.cup2.generator.Verbosity.$VALUES[]) == 4
===========================================================================
edu.tum.cup2.generator.LALR1Generator.LALR1Generator(edu.tum.cup2.spec.CUP2Specification, edu.tum.cup2.generator.Verbosity):::EXIT
edu.tum.cup2.generator.Verbosity.None == orig(edu.tum.cup2.generator.Verbosity.None)
edu.tum.cup2.generator.Verbosity.Sparse == orig(edu.tum.cup2.generator.Verbosity.Sparse)
edu.tum.cup2.generator.Verbosity.Verbose == orig(edu.tum.cup2.generator.Verbosity.Verbose)
edu.tum.cup2.generator.Verbosity.Detailled == orig(edu.tum.cup2.generator.Verbosity.Detailled)
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.None.statesCounterStep)
edu.tum.cup2.generator.Verbosity.$VALUES == orig(edu.tum.cup2.generator.Verbosity.$VALUES)
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == orig(edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName())
edu.tum.cup2.generator.Verbosity.$VALUES[] == orig(edu.tum.cup2.generator.Verbosity.$VALUES[])
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep)
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep)
arg0.isInit == orig(arg0.isInit)
arg0.auxNonTerminals == orig(arg0.auxNonTerminals)
arg0.auxNonTerminals[] == orig(arg0.auxNonTerminals[])
arg0.symbolValueClasses == orig(arg0.symbolValueClasses)
arg0.precedences == orig(arg0.precedences)
arg0.precedences.list == orig(arg0.precedences.list)
arg0.precedences.list[] == orig(arg0.precedences.list[])
arg0.precedences.list.getClass().getName() == orig(arg0.precedences.list.getClass().getName())
arg0.grammar == orig(arg0.grammar)
arg0.grammar.terminals == orig(arg0.grammar.terminals)
arg0.grammar.terminals[] == orig(arg0.grammar.terminals[])
arg0.grammar.nonTerminals == orig(arg0.grammar.nonTerminals)
arg0.grammar.nonTerminals[] == orig(arg0.grammar.nonTerminals[])
arg0.grammar.productions == orig(arg0.grammar.productions)
arg0.grammar.productions[] == orig(arg0.grammar.productions[])
arg0.grammarInterface == orig(arg0.grammarInterface)
arg0.productionCount == orig(arg0.productionCount)
arg0.auxiliaryProductions == orig(arg0.auxiliaryProductions)
arg0.auxiliaryProductions[] == orig(arg0.auxiliaryProductions[])
arg1.statesCounterStep == orig(arg1.statesCounterStep)
this.parsingTable has only one value
this.automaton has only one value
arg0.isInit == true
arg0.auxNonTerminals has only one value
arg0.auxNonTerminals[] == []
arg0.auxNonTerminals[].getClass().getName() == []
arg0.symbolValueClasses has only one value
arg0.precedences has only one value
arg0.precedences.list has only one value
arg0.precedences.list[] contains no nulls and has only one value, of length 1
arg0.precedences.list[] elements has only one value
arg0.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
arg0.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
arg0.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
arg0.grammar has only one value
arg0.grammar.terminals has only one value
arg0.grammar.terminals[] contains no nulls and has only one value, of length 29
arg0.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.grammar.nonTerminals has only one value
arg0.grammar.nonTerminals[] contains no nulls and has only one value, of length 15
arg0.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals]
arg0.grammar.nonTerminals[].getClass().getName() elements == main.ParserSpec.NonTerminals.class
arg0.grammar.productions has only one value
arg0.grammar.productions[] contains no nulls and has only one value, of length 47
arg0.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg0.grammarInterface has only one value
arg0.productionCount == 47
arg0.auxiliaryProductions has only one value
arg0.auxiliaryProductions[] == []
arg0.auxiliaryProductions[].getClass().getName() == []
arg1.statesCounterStep == 0
size(arg0.precedences.list[]) == 1
size(arg0.grammar.terminals[]) == 29
size(arg0.grammar.nonTerminals[]) == 15
size(arg0.grammar.productions[]) == 47
===========================================================================
edu.tum.cup2.generator.LALR1Generator.createAutomaton():::ENTER
this.parsingTable == null
this.automaton == null
===========================================================================
edu.tum.cup2.generator.LALR1Generator.createAutomaton():::EXIT
this.grammarInfo == orig(this.grammarInfo)
this.grammarInfo.grammar == orig(this.grammarInfo.grammar)
this.grammarInfo.grammar.terminals == orig(this.grammarInfo.grammar.terminals)
this.grammarInfo.grammar.terminals[] == orig(this.grammarInfo.grammar.terminals[])
this.grammarInfo.grammar.nonTerminals == orig(this.grammarInfo.grammar.nonTerminals)
this.grammarInfo.grammar.nonTerminals[] == orig(this.grammarInfo.grammar.nonTerminals[])
this.grammarInfo.grammar.productions == orig(this.grammarInfo.grammar.productions)
this.grammarInfo.grammar.productions[] == orig(this.grammarInfo.grammar.productions[])
this.grammarInfo.nullableSet == orig(this.grammarInfo.nullableSet)
this.grammarInfo.firstSets == orig(this.grammarInfo.firstSets)
this.grammarInfo.firstSets.data == orig(this.grammarInfo.firstSets.data)
this.grammarInfo.firstSets.data.getClass().getName() == orig(this.grammarInfo.firstSets.data.getClass().getName())
this.grammarInfo.productionsStartingWith == orig(this.grammarInfo.productionsStartingWith)
this.grammarInfo.emptyTerminalsSet == orig(this.grammarInfo.emptyTerminalsSet)
this.grammarInfo.emptyTerminalsSet.data == orig(this.grammarInfo.emptyTerminalsSet.data)
this.grammarInfo.emptyTerminalsSet.data[] == orig(this.grammarInfo.emptyTerminalsSet.data[])
this.grammarInfo.emptyTerminalsSet.indices == orig(this.grammarInfo.emptyTerminalsSet.indices)
this.grammarInfo.emptyTerminalsSet.indices.getClass().getName() == orig(this.grammarInfo.emptyTerminalsSet.indices.getClass().getName())
this.grammarInfo.emptyTerminalsSet.terminals == orig(this.grammarInfo.emptyTerminalsSet.terminals)
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() == orig(this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName())
this.grammarInfo.emptyTerminalsSet.indexEpsilon == orig(this.grammarInfo.emptyTerminalsSet.indexEpsilon)
this.parsingTable == orig(this.parsingTable)
this.automaton == orig(this.automaton)
edu.tum.cup2.generator.LRGenerator.numThreads == orig(edu.tum.cup2.generator.LRGenerator.numThreads)
this.LOG_shortestWordFinder == orig(this.LOG_shortestWordFinder)
this.grammar == orig(this.grammar)
this.grammar.terminals == orig(this.grammar.terminals)
this.grammar.terminals[] == orig(this.grammar.terminals[])
this.grammar.nonTerminals == orig(this.grammar.nonTerminals)
this.grammar.nonTerminals[] == orig(this.grammar.nonTerminals[])
this.grammar.productions == orig(this.grammar.productions)
this.grammar.productions[] == orig(this.grammar.productions[])
this.precedences == orig(this.precedences)
this.precedences.list == orig(this.precedences.list)
this.precedences.list[] == orig(this.precedences.list[])
this.precedences.list.getClass().getName() == orig(this.precedences.list.getClass().getName())
this.verbosity == orig(this.verbosity)
edu.tum.cup2.generator.Verbosity.None == orig(edu.tum.cup2.generator.Verbosity.None)
edu.tum.cup2.generator.Verbosity.Sparse == orig(edu.tum.cup2.generator.Verbosity.Sparse)
edu.tum.cup2.generator.Verbosity.Verbose == orig(edu.tum.cup2.generator.Verbosity.Verbose)
edu.tum.cup2.generator.Verbosity.Detailled == orig(edu.tum.cup2.generator.Verbosity.Detailled)
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.None.statesCounterStep)
edu.tum.cup2.generator.Verbosity.$VALUES == orig(edu.tum.cup2.generator.Verbosity.$VALUES)
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == orig(edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName())
edu.tum.cup2.generator.Verbosity.$VALUES[] == orig(edu.tum.cup2.generator.Verbosity.$VALUES[])
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep)
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep)
this.verbosity.statesCounterStep == orig(this.verbosity.statesCounterStep)
this.debugOut == orig(this.debugOut)
this.parsingTable == null
this.automaton == null
return has only one value
return.states has only one value
return.states.getClass().getName() == java.util.Collections$SynchronizedSet.class
return.edges has only one value
return.edges.getClass().getName() == java.util.Collections$SynchronizedSet.class
return.startState has only one value
return.startState.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
return.startState.items has only one value
return.startState.items.getClass().getName() == java.util.HashSet.class
===========================================================================
edu.tum.cup2.generator.LALR1Generator.createReduceActions(edu.tum.cup2.parser.tables.LRActionTable, edu.tum.cup2.generator.items.LR1Item, edu.tum.cup2.parser.states.LRParserState):::ENTER
this.parsingTable == null
this.automaton has only one value
this.automaton != null
arg0 has only one value
arg0 != null
arg0.parentTable has only one value
arg0.parentTable != null
arg0.parentTable.grammar has only one value
arg0.parentTable.grammar != null
arg0.parentTable.states has only one value
arg0.parentTable.states != null
arg0.parentTable.states[] contains no nulls and has only one value, of length 114
arg0.parentTable.states[] elements != null
arg0.parentTable.states[].getClass().getName() == [edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState]
arg0.parentTable.states[].getClass().getName() elements == edu.tum.cup2.parser.states.LRParserState.class
arg0.parentTable.actionTable has only one value
arg0.parentTable.actionTable != null
arg0.parentTable.gotoTable has only one value
arg0.parentTable.gotoTable != null
arg0.parentTable.erI has only one value
arg0.parentTable.erI != null
arg0.table has only one value
arg0.table != null
arg1 != null
arg1.kernel != null
arg1.kernel.production != null
arg1.kernel.position >= 1
arg1.kernel.nextSymbol == null
arg1.kernel.shiftable == false
arg1.lookaheads != null
arg1.lookaheads.getClass().getName() == edu.tum.cup2.generator.terminals.EfficientTerminalSet.class
arg1.nextLookaheads == null
arg2 != null
arg2.beginLine == -1
arg2.beginColumn == -1
size(arg0.parentTable.states[]) == 114
===========================================================================
edu.tum.cup2.generator.LALR1Generator.createReduceActions(edu.tum.cup2.parser.tables.LRActionTable, edu.tum.cup2.generator.items.LR1Item, edu.tum.cup2.parser.states.LRParserState):::EXIT
this.grammarInfo == orig(this.grammarInfo)
this.grammarInfo.grammar == orig(this.grammarInfo.grammar)
this.grammarInfo.grammar.terminals == orig(this.grammarInfo.grammar.terminals)
this.grammarInfo.grammar.terminals[] == orig(this.grammarInfo.grammar.terminals[])
this.grammarInfo.grammar.nonTerminals == orig(this.grammarInfo.grammar.nonTerminals)
this.grammarInfo.grammar.nonTerminals[] == orig(this.grammarInfo.grammar.nonTerminals[])
this.grammarInfo.grammar.productions == orig(this.grammarInfo.grammar.productions)
this.grammarInfo.grammar.productions[] == orig(this.grammarInfo.grammar.productions[])
this.grammarInfo.nullableSet == orig(this.grammarInfo.nullableSet)
this.grammarInfo.firstSets == orig(this.grammarInfo.firstSets)
this.grammarInfo.firstSets.data == orig(this.grammarInfo.firstSets.data)
this.grammarInfo.firstSets.data.getClass().getName() == orig(this.grammarInfo.firstSets.data.getClass().getName())
this.grammarInfo.productionsStartingWith == orig(this.grammarInfo.productionsStartingWith)
this.grammarInfo.emptyTerminalsSet == orig(this.grammarInfo.emptyTerminalsSet)
this.grammarInfo.emptyTerminalsSet.data == orig(this.grammarInfo.emptyTerminalsSet.data)
this.grammarInfo.emptyTerminalsSet.data[] == orig(this.grammarInfo.emptyTerminalsSet.data[])
this.grammarInfo.emptyTerminalsSet.indices == orig(this.grammarInfo.emptyTerminalsSet.indices)
this.grammarInfo.emptyTerminalsSet.indices.getClass().getName() == orig(this.grammarInfo.emptyTerminalsSet.indices.getClass().getName())
this.grammarInfo.emptyTerminalsSet.terminals == orig(this.grammarInfo.emptyTerminalsSet.terminals)
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() == orig(this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName())
this.grammarInfo.emptyTerminalsSet.indexEpsilon == orig(this.grammarInfo.emptyTerminalsSet.indexEpsilon)
this.parsingTable == orig(this.parsingTable)
this.automaton == orig(this.automaton)
this.automaton.states == orig(this.automaton.states)
this.automaton.states.getClass().getName() == orig(this.automaton.states.getClass().getName())
this.automaton.edges == orig(this.automaton.edges)
this.automaton.edges.getClass().getName() == orig(this.automaton.edges.getClass().getName())
this.automaton.startState == orig(this.automaton.startState)
this.automaton.startState.getClass().getName() == orig(this.automaton.startState.getClass().getName())
this.automaton.startState.items == orig(this.automaton.startState.items)
this.automaton.startState.items.getClass().getName() == orig(this.automaton.startState.items.getClass().getName())
edu.tum.cup2.generator.LRGenerator.numThreads == orig(edu.tum.cup2.generator.LRGenerator.numThreads)
this.LOG_shortestWordFinder == orig(this.LOG_shortestWordFinder)
this.grammar == orig(this.grammar)
this.grammar.terminals == orig(this.grammar.terminals)
this.grammar.terminals[] == orig(this.grammar.terminals[])
this.grammar.nonTerminals == orig(this.grammar.nonTerminals)
this.grammar.nonTerminals[] == orig(this.grammar.nonTerminals[])
this.grammar.productions == orig(this.grammar.productions)
this.grammar.productions[] == orig(this.grammar.productions[])
this.precedences == orig(this.precedences)
this.precedences.list == orig(this.precedences.list)
this.precedences.list[] == orig(this.precedences.list[])
this.precedences.list.getClass().getName() == orig(this.precedences.list.getClass().getName())
this.verbosity == orig(this.verbosity)
edu.tum.cup2.generator.Verbosity.None == orig(edu.tum.cup2.generator.Verbosity.None)
edu.tum.cup2.generator.Verbosity.Sparse == orig(edu.tum.cup2.generator.Verbosity.Sparse)
edu.tum.cup2.generator.Verbosity.Verbose == orig(edu.tum.cup2.generator.Verbosity.Verbose)
edu.tum.cup2.generator.Verbosity.Detailled == orig(edu.tum.cup2.generator.Verbosity.Detailled)
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.None.statesCounterStep)
edu.tum.cup2.generator.Verbosity.$VALUES == orig(edu.tum.cup2.generator.Verbosity.$VALUES)
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == orig(edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName())
edu.tum.cup2.generator.Verbosity.$VALUES[] == orig(edu.tum.cup2.generator.Verbosity.$VALUES[])
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep)
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep)
this.verbosity.statesCounterStep == orig(this.verbosity.statesCounterStep)
this.debugOut == orig(this.debugOut)
arg0.parentTable == orig(arg0.parentTable)
arg0.parentTable.grammar == orig(arg0.parentTable.grammar)
arg0.parentTable.states == orig(arg0.parentTable.states)
arg0.parentTable.states[] == orig(arg0.parentTable.states[])
arg0.parentTable.actionTable == orig(arg0.parentTable.actionTable)
arg0.parentTable.gotoTable == orig(arg0.parentTable.gotoTable)
arg0.parentTable.erI == orig(arg0.parentTable.erI)
arg0.table == orig(arg0.table)
arg1.kernel == orig(arg1.kernel)
arg1.kernel.production == orig(arg1.kernel.production)
arg1.kernel.position == orig(arg1.kernel.position)
arg1.kernel.nextSymbol == orig(arg1.kernel.nextSymbol)
arg1.kernel.hashCode == orig(arg1.kernel.hashCode)
arg1.kernel.shiftable == orig(arg1.kernel.shiftable)
arg1.lookaheads == orig(arg1.lookaheads)
arg1.lookaheads.getClass().getName() == orig(arg1.lookaheads.getClass().getName())
arg1.nextLookaheads == orig(arg1.nextLookaheads)
arg1.hashCode == orig(arg1.hashCode)
arg2.id == orig(arg2.id)
arg2.beginLine == orig(arg2.beginLine)
arg2.beginColumn == orig(arg2.beginColumn)
this.parsingTable == null
this.automaton has only one value
this.automaton != null
arg0.parentTable has only one value
arg0.parentTable != null
arg0.parentTable.grammar has only one value
arg0.parentTable.grammar != null
arg0.parentTable.states has only one value
arg0.parentTable.states != null
arg0.parentTable.states[] contains no nulls and has only one value, of length 114
arg0.parentTable.states[] elements != null
arg0.parentTable.states[].getClass().getName() == [edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState]
arg0.parentTable.states[].getClass().getName() elements == edu.tum.cup2.parser.states.LRParserState.class
arg0.parentTable.actionTable has only one value
arg0.parentTable.actionTable != null
arg0.parentTable.gotoTable has only one value
arg0.parentTable.gotoTable != null
arg0.parentTable.erI has only one value
arg0.parentTable.erI != null
arg0.table has only one value
arg0.table != null
arg1.kernel != null
arg1.kernel.production != null
arg1.kernel.position >= 1
arg1.kernel.nextSymbol == null
arg1.kernel.shiftable == false
arg1.lookaheads != null
arg1.lookaheads.getClass().getName() == edu.tum.cup2.generator.terminals.EfficientTerminalSet.class
arg1.nextLookaheads == null
arg2.beginLine == -1
arg2.beginColumn == -1
size(arg0.parentTable.states[]) == 114
===========================================================================
edu.tum.cup2.generator.LALR1Generator.createStartState():::ENTER
this.parsingTable == null
this.automaton == null
===========================================================================
edu.tum.cup2.generator.LALR1Generator.createStartState():::EXIT
this.grammarInfo == orig(this.grammarInfo)
this.grammarInfo.grammar == orig(this.grammarInfo.grammar)
this.grammarInfo.grammar.terminals == orig(this.grammarInfo.grammar.terminals)
this.grammarInfo.grammar.terminals[] == orig(this.grammarInfo.grammar.terminals[])
this.grammarInfo.grammar.nonTerminals == orig(this.grammarInfo.grammar.nonTerminals)
this.grammarInfo.grammar.nonTerminals[] == orig(this.grammarInfo.grammar.nonTerminals[])
this.grammarInfo.grammar.productions == orig(this.grammarInfo.grammar.productions)
this.grammarInfo.grammar.productions[] == orig(this.grammarInfo.grammar.productions[])
this.grammarInfo.nullableSet == orig(this.grammarInfo.nullableSet)
this.grammarInfo.firstSets == orig(this.grammarInfo.firstSets)
this.grammarInfo.firstSets.data == orig(this.grammarInfo.firstSets.data)
this.grammarInfo.firstSets.data.getClass().getName() == orig(this.grammarInfo.firstSets.data.getClass().getName())
this.grammarInfo.productionsStartingWith == orig(this.grammarInfo.productionsStartingWith)
this.grammarInfo.emptyTerminalsSet == orig(this.grammarInfo.emptyTerminalsSet)
this.grammarInfo.emptyTerminalsSet.data == orig(this.grammarInfo.emptyTerminalsSet.data)
this.grammarInfo.emptyTerminalsSet.data[] == orig(this.grammarInfo.emptyTerminalsSet.data[])
this.grammarInfo.emptyTerminalsSet.indices == orig(this.grammarInfo.emptyTerminalsSet.indices)
this.grammarInfo.emptyTerminalsSet.indices.getClass().getName() == orig(this.grammarInfo.emptyTerminalsSet.indices.getClass().getName())
this.grammarInfo.emptyTerminalsSet.terminals == orig(this.grammarInfo.emptyTerminalsSet.terminals)
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() == orig(this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName())
this.grammarInfo.emptyTerminalsSet.indexEpsilon == orig(this.grammarInfo.emptyTerminalsSet.indexEpsilon)
this.parsingTable == orig(this.parsingTable)
this.automaton == orig(this.automaton)
edu.tum.cup2.generator.LRGenerator.numThreads == orig(edu.tum.cup2.generator.LRGenerator.numThreads)
this.LOG_shortestWordFinder == orig(this.LOG_shortestWordFinder)
this.grammar == orig(this.grammar)
this.grammar.terminals == orig(this.grammar.terminals)
this.grammar.terminals[] == orig(this.grammar.terminals[])
this.grammar.nonTerminals == orig(this.grammar.nonTerminals)
this.grammar.nonTerminals[] == orig(this.grammar.nonTerminals[])
this.grammar.productions == orig(this.grammar.productions)
this.grammar.productions[] == orig(this.grammar.productions[])
this.precedences == orig(this.precedences)
this.precedences.list == orig(this.precedences.list)
this.precedences.list[] == orig(this.precedences.list[])
this.precedences.list.getClass().getName() == orig(this.precedences.list.getClass().getName())
this.verbosity == orig(this.verbosity)
edu.tum.cup2.generator.Verbosity.None == orig(edu.tum.cup2.generator.Verbosity.None)
edu.tum.cup2.generator.Verbosity.Sparse == orig(edu.tum.cup2.generator.Verbosity.Sparse)
edu.tum.cup2.generator.Verbosity.Verbose == orig(edu.tum.cup2.generator.Verbosity.Verbose)
edu.tum.cup2.generator.Verbosity.Detailled == orig(edu.tum.cup2.generator.Verbosity.Detailled)
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.None.statesCounterStep)
edu.tum.cup2.generator.Verbosity.$VALUES == orig(edu.tum.cup2.generator.Verbosity.$VALUES)
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == orig(edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName())
edu.tum.cup2.generator.Verbosity.$VALUES[] == orig(edu.tum.cup2.generator.Verbosity.$VALUES[])
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep)
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep)
this.verbosity.statesCounterStep == orig(this.verbosity.statesCounterStep)
this.debugOut == orig(this.debugOut)
this.parsingTable == null
this.automaton == null
return has only one value
return.kernel has only one value
return.kernel.hashCode == -2128984588
return.kernel.items has only one value
return.kernel.items.getClass().getName() == java.util.HashMap$KeySet.class
return.itemsWithKernels has only one value
return.hashCode == -2128984584
return.closureCache == null
return.items has only one value
return.items.getClass().getName() == java.util.HashSet.class
===========================================================================
edu.tum.cup2.generator.LRGenerator:::CLASS
edu.tum.cup2.generator.LRGenerator.numThreads == 4
===========================================================================
edu.tum.cup2.generator.LRGenerator:::OBJECT
this.grammarInfo.firstSets.data.getClass().getName() == this.grammarInfo.emptyTerminalsSet.indices.getClass().getName()
this.automaton.states.getClass().getName() == this.automaton.edges.getClass().getName()
this has only one value
this.getClass().getName() == edu.tum.cup2.generator.LALR1Generator.class
this.grammarInfo has only one value
this.grammarInfo != null
this.grammarInfo.grammar has only one value
this.grammarInfo.grammar != null
this.grammarInfo.grammar.terminals has only one value
this.grammarInfo.grammar.terminals != null
this.grammarInfo.grammar.terminals[] contains no nulls and has only one value, of length 30
this.grammarInfo.grammar.terminals[] elements != null
this.grammarInfo.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.grammarInfo.grammar.nonTerminals has only one value
this.grammarInfo.grammar.nonTerminals != null
this.grammarInfo.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
this.grammarInfo.grammar.nonTerminals[] elements != null
this.grammarInfo.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.grammarInfo.grammar.productions has only one value
this.grammarInfo.grammar.productions != null
this.grammarInfo.grammar.productions[] contains no nulls and has only one value, of length 48
this.grammarInfo.grammar.productions[] elements != null
this.grammarInfo.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
this.grammarInfo.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
this.grammarInfo.nullableSet has only one value
this.grammarInfo.nullableSet != null
this.grammarInfo.firstSets has only one value
this.grammarInfo.firstSets != null
this.grammarInfo.firstSets.data has only one value
this.grammarInfo.firstSets.data != null
this.grammarInfo.firstSets.data.getClass().getName() == java.util.HashMap.class
this.grammarInfo.productionsStartingWith has only one value
this.grammarInfo.productionsStartingWith != null
this.grammarInfo.emptyTerminalsSet has only one value
this.grammarInfo.emptyTerminalsSet != null
this.grammarInfo.emptyTerminalsSet.data has only one value
this.grammarInfo.emptyTerminalsSet.data != null
this.grammarInfo.emptyTerminalsSet.data[] == [0, 0]
this.grammarInfo.emptyTerminalsSet.data[] elements == 0
this.grammarInfo.emptyTerminalsSet.indices has only one value
this.grammarInfo.emptyTerminalsSet.indices != null
this.grammarInfo.emptyTerminalsSet.terminals has only one value
this.grammarInfo.emptyTerminalsSet.terminals != null
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() == java.util.LinkedList.class
this.grammarInfo.emptyTerminalsSet.indexEpsilon == 0
this.parsingTable.grammar has only one value
this.parsingTable.grammar.terminals has only one value
this.parsingTable.grammar.terminals[] contains no nulls and has only one value, of length 30
this.parsingTable.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.parsingTable.grammar.nonTerminals has only one value
this.parsingTable.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
this.parsingTable.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.parsingTable.grammar.productions has only one value
this.parsingTable.grammar.productions[] contains no nulls and has only one value, of length 48
this.parsingTable.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
this.parsingTable.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
this.parsingTable.states has only one value
this.parsingTable.states[] contains no nulls and has only one value, of length 114
this.parsingTable.states[].getClass().getName() == [edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState]
this.parsingTable.states[].getClass().getName() elements == edu.tum.cup2.parser.states.LRParserState.class
this.parsingTable.actionTable has only one value
this.parsingTable.actionTable.parentTable has only one value
this.parsingTable.actionTable.table has only one value
this.parsingTable.gotoTable has only one value
this.parsingTable.gotoTable.parentTable has only one value
this.parsingTable.gotoTable.table has only one value
this.parsingTable.erI has only one value
this.automaton has only one value
this.automaton != null
this.automaton.states has only one value
this.automaton.states != null
this.automaton.states.getClass().getName() == java.util.Collections$SynchronizedSet.class
this.automaton.edges has only one value
this.automaton.edges != null
this.automaton.startState has only one value
this.automaton.startState != null
this.automaton.startState.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
this.automaton.startState.items has only one value
this.automaton.startState.items != null
this.automaton.startState.items.getClass().getName() == java.util.HashSet.class
this.LOG_shortestWordFinder == false
this.grammar has only one value
this.grammar != null
this.grammar.terminals has only one value
this.grammar.terminals != null
this.grammar.terminals[] contains no nulls and has only one value, of length 30
this.grammar.terminals[] elements != null
this.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.grammar.nonTerminals has only one value
this.grammar.nonTerminals != null
this.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
this.grammar.nonTerminals[] elements != null
this.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.grammar.productions has only one value
this.grammar.productions != null
this.grammar.productions[] contains no nulls and has only one value, of length 48
this.grammar.productions[] elements != null
this.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
this.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
this.precedences has only one value
this.precedences != null
this.precedences.list has only one value
this.precedences.list != null
this.precedences.list[] contains no nulls and has only one value, of length 1
this.precedences.list[] elements has only one value
this.precedences.list[] elements != null
this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
this.verbosity has only one value
this.verbosity != null
edu.tum.cup2.generator.Verbosity.None has only one value
edu.tum.cup2.generator.Verbosity.None != null
edu.tum.cup2.generator.Verbosity.Sparse has only one value
edu.tum.cup2.generator.Verbosity.Sparse != null
edu.tum.cup2.generator.Verbosity.Verbose has only one value
edu.tum.cup2.generator.Verbosity.Verbose != null
edu.tum.cup2.generator.Verbosity.Detailled has only one value
edu.tum.cup2.generator.Verbosity.Detailled != null
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == 0
edu.tum.cup2.generator.Verbosity.$VALUES has only one value
edu.tum.cup2.generator.Verbosity.$VALUES != null
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == edu.tum.cup2.generator.Verbosity[].class
edu.tum.cup2.generator.Verbosity.$VALUES[] contains no nulls and has only one value, of length 4
edu.tum.cup2.generator.Verbosity.$VALUES[] elements != null
edu.tum.cup2.generator.Verbosity.$VALUES[].getClass().getName() == [edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity]
edu.tum.cup2.generator.Verbosity.$VALUES[].getClass().getName() elements == edu.tum.cup2.generator.Verbosity.class
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == [0, 1000, 100, 1]
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep elements >= 0
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == 1000
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == 100
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == 1
this.verbosity.statesCounterStep == 0
this.debugOut has only one value
this.debugOut != null
size(this.grammarInfo.grammar.terminals[]) == 30
size(this.grammarInfo.grammar.nonTerminals[]) == 16
size(this.grammarInfo.grammar.productions[]) == 48
size(this.grammarInfo.emptyTerminalsSet.data[]) == 2
size(this.parsingTable.grammar.terminals[]) == 30
size(this.parsingTable.grammar.nonTerminals[]) == 16
size(this.parsingTable.grammar.productions[]) == 48
size(this.parsingTable.states[]) == 114
size(this.grammar.terminals[]) == 30
size(this.grammar.nonTerminals[]) == 16
size(this.grammar.productions[]) == 48
size(this.precedences.list[]) == 1
size(edu.tum.cup2.generator.Verbosity.$VALUES[]) == 4
this.getClass().getName() != this.grammarInfo.firstSets.data.getClass().getName()
this.getClass().getName() != this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName()
this.getClass().getName() != this.automaton.states.getClass().getName()
this.getClass().getName() != this.automaton.startState.getClass().getName()
this.getClass().getName() != this.automaton.startState.items.getClass().getName()
this.getClass().getName() != this.precedences.list.getClass().getName()
this.getClass().getName() != edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName()
this.grammarInfo.firstSets.data.getClass().getName() != this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName()
this.grammarInfo.firstSets.data.getClass().getName() != this.automaton.states.getClass().getName()
this.grammarInfo.firstSets.data.getClass().getName() != this.automaton.startState.getClass().getName()
this.grammarInfo.firstSets.data.getClass().getName() != this.automaton.startState.items.getClass().getName()
this.grammarInfo.firstSets.data.getClass().getName() != this.precedences.list.getClass().getName()
this.grammarInfo.firstSets.data.getClass().getName() != edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName()
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() != this.automaton.states.getClass().getName()
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() != this.automaton.startState.getClass().getName()
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() != this.automaton.startState.items.getClass().getName()
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() != this.precedences.list.getClass().getName()
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() != edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName()
this.automaton.states.getClass().getName() != this.automaton.startState.getClass().getName()
this.automaton.states.getClass().getName() != this.automaton.startState.items.getClass().getName()
this.automaton.states.getClass().getName() != this.precedences.list.getClass().getName()
this.automaton.states.getClass().getName() != edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName()
this.automaton.startState.getClass().getName() != this.automaton.startState.items.getClass().getName()
this.automaton.startState.getClass().getName() != this.precedences.list.getClass().getName()
this.automaton.startState.getClass().getName() != edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName()
this.automaton.startState.items.getClass().getName() != this.precedences.list.getClass().getName()
this.automaton.startState.items.getClass().getName() != edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName()
this.precedences.list.getClass().getName() != edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName()
===========================================================================
edu.tum.cup2.generator.LRGenerator.LRGenerator(edu.tum.cup2.spec.CUP2Specification, edu.tum.cup2.generator.Verbosity, boolean):::ENTER
arg0 has only one value
arg0.getClass().getName() == main.ParserSpec.class
arg0.isInit == true
arg0.auxNonTerminals has only one value
arg0.auxNonTerminals[] == []
arg0.auxNonTerminals[].getClass().getName() == []
arg0.symbolValueClasses has only one value
arg0.precedences has only one value
arg0.precedences.list has only one value
arg0.precedences.list[] contains no nulls and has only one value, of length 1
arg0.precedences.list[] elements has only one value
arg0.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
arg0.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
arg0.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
arg0.grammar has only one value
arg0.grammar.terminals has only one value
arg0.grammar.terminals[] contains no nulls and has only one value, of length 29
arg0.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.grammar.nonTerminals has only one value
arg0.grammar.nonTerminals[] contains no nulls and has only one value, of length 15
arg0.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals]
arg0.grammar.nonTerminals[].getClass().getName() elements == main.ParserSpec.NonTerminals.class
arg0.grammar.productions has only one value
arg0.grammar.productions[] contains no nulls and has only one value, of length 47
arg0.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg0.grammarInterface has only one value
arg0.productionCount == 47
arg0.auxiliaryProductions has only one value
arg0.auxiliaryProductions[] == []
arg0.auxiliaryProductions[].getClass().getName() == []
arg1 has only one value
edu.tum.cup2.generator.Verbosity.None has only one value
edu.tum.cup2.generator.Verbosity.Sparse has only one value
edu.tum.cup2.generator.Verbosity.Verbose has only one value
edu.tum.cup2.generator.Verbosity.Detailled has only one value
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == 0
edu.tum.cup2.generator.Verbosity.$VALUES has only one value
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == edu.tum.cup2.generator.Verbosity[].class
edu.tum.cup2.generator.Verbosity.$VALUES[] contains no nulls and has only one value, of length 4
edu.tum.cup2.generator.Verbosity.$VALUES[].getClass().getName() == [edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity]
edu.tum.cup2.generator.Verbosity.$VALUES[].getClass().getName() elements == edu.tum.cup2.generator.Verbosity.class
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == [0, 1000, 100, 1]
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == 1000
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == 100
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == 1
arg1.statesCounterStep == 0
arg2 == true
size(arg0.precedences.list[]) == 1
size(arg0.grammar.terminals[]) == 29
size(arg0.grammar.nonTerminals[]) == 15
size(arg0.grammar.productions[]) == 47
size(edu.tum.cup2.generator.Verbosity.$VALUES[]) == 4
===========================================================================
edu.tum.cup2.generator.LRGenerator.LRGenerator(edu.tum.cup2.spec.CUP2Specification, edu.tum.cup2.generator.Verbosity, boolean):::EXIT
this.precedences.list.getClass().getName() == arg0.precedences.list.getClass().getName()
this.precedences.list.getClass().getName() == orig(arg0.precedences.list.getClass().getName())
edu.tum.cup2.generator.Verbosity.None == orig(edu.tum.cup2.generator.Verbosity.None)
edu.tum.cup2.generator.Verbosity.Sparse == orig(edu.tum.cup2.generator.Verbosity.Sparse)
edu.tum.cup2.generator.Verbosity.Verbose == orig(edu.tum.cup2.generator.Verbosity.Verbose)
edu.tum.cup2.generator.Verbosity.Detailled == orig(edu.tum.cup2.generator.Verbosity.Detailled)
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.None.statesCounterStep)
edu.tum.cup2.generator.Verbosity.$VALUES == orig(edu.tum.cup2.generator.Verbosity.$VALUES)
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == orig(edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName())
edu.tum.cup2.generator.Verbosity.$VALUES[] == orig(edu.tum.cup2.generator.Verbosity.$VALUES[])
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep)
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep)
arg0.isInit == orig(arg0.isInit)
arg0.auxNonTerminals == orig(arg0.auxNonTerminals)
arg0.auxNonTerminals[] == orig(arg0.auxNonTerminals[])
arg0.symbolValueClasses == orig(arg0.symbolValueClasses)
arg0.precedences == orig(arg0.precedences)
arg0.precedences.list == orig(arg0.precedences.list)
arg0.precedences.list[] == orig(arg0.precedences.list[])
arg0.grammar == orig(arg0.grammar)
arg0.grammar.terminals == orig(arg0.grammar.terminals)
arg0.grammar.terminals[] == orig(arg0.grammar.terminals[])
arg0.grammar.nonTerminals == orig(arg0.grammar.nonTerminals)
arg0.grammar.nonTerminals[] == orig(arg0.grammar.nonTerminals[])
arg0.grammar.productions == orig(arg0.grammar.productions)
arg0.grammar.productions[] == orig(arg0.grammar.productions[])
arg0.grammarInterface == orig(arg0.grammarInterface)
arg0.productionCount == orig(arg0.productionCount)
arg0.auxiliaryProductions == orig(arg0.auxiliaryProductions)
arg0.auxiliaryProductions[] == orig(arg0.auxiliaryProductions[])
arg1.statesCounterStep == orig(arg1.statesCounterStep)
this.parsingTable has only one value
arg0.isInit == true
arg0.auxNonTerminals has only one value
arg0.auxNonTerminals[] == []
arg0.auxNonTerminals[].getClass().getName() == []
arg0.symbolValueClasses has only one value
arg0.precedences has only one value
arg0.precedences.list has only one value
arg0.precedences.list[] contains no nulls and has only one value, of length 1
arg0.precedences.list[] elements has only one value
arg0.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
arg0.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
arg0.grammar has only one value
arg0.grammar.terminals has only one value
arg0.grammar.terminals[] contains no nulls and has only one value, of length 29
arg0.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.grammar.nonTerminals has only one value
arg0.grammar.nonTerminals[] contains no nulls and has only one value, of length 15
arg0.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals]
arg0.grammar.nonTerminals[].getClass().getName() elements == main.ParserSpec.NonTerminals.class
arg0.grammar.productions has only one value
arg0.grammar.productions[] contains no nulls and has only one value, of length 47
arg0.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg0.grammarInterface has only one value
arg0.productionCount == 47
arg0.auxiliaryProductions has only one value
arg0.auxiliaryProductions[] == []
arg0.auxiliaryProductions[].getClass().getName() == []
arg1.statesCounterStep == 0
size(arg0.precedences.list[]) == 1
size(arg0.grammar.terminals[]) == 29
size(arg0.grammar.nonTerminals[]) == 15
size(arg0.grammar.productions[]) == 47
===========================================================================
edu.tum.cup2.generator.LRGenerator.getParsingTable():::ENTER
this.parsingTable has only one value
===========================================================================
edu.tum.cup2.generator.LRGenerator.getParsingTable():::EXIT
this.grammarInfo == orig(this.grammarInfo)
this.grammarInfo.grammar == orig(this.grammarInfo.grammar)
this.grammarInfo.grammar.terminals == orig(this.grammarInfo.grammar.terminals)
this.grammarInfo.grammar.terminals[] == orig(this.grammarInfo.grammar.terminals[])
this.grammarInfo.grammar.nonTerminals == orig(this.grammarInfo.grammar.nonTerminals)
this.grammarInfo.grammar.nonTerminals[] == orig(this.grammarInfo.grammar.nonTerminals[])
this.grammarInfo.grammar.productions == orig(this.grammarInfo.grammar.productions)
this.grammarInfo.grammar.productions[] == orig(this.grammarInfo.grammar.productions[])
this.grammarInfo.nullableSet == orig(this.grammarInfo.nullableSet)
this.grammarInfo.firstSets == orig(this.grammarInfo.firstSets)
this.grammarInfo.firstSets.data == orig(this.grammarInfo.firstSets.data)
this.grammarInfo.firstSets.data.getClass().getName() == orig(this.grammarInfo.firstSets.data.getClass().getName())
this.grammarInfo.firstSets.data.getClass().getName() == orig(this.grammarInfo.emptyTerminalsSet.indices.getClass().getName())
this.grammarInfo.productionsStartingWith == orig(this.grammarInfo.productionsStartingWith)
this.grammarInfo.emptyTerminalsSet == orig(this.grammarInfo.emptyTerminalsSet)
this.grammarInfo.emptyTerminalsSet.data == orig(this.grammarInfo.emptyTerminalsSet.data)
this.grammarInfo.emptyTerminalsSet.data[] == orig(this.grammarInfo.emptyTerminalsSet.data[])
this.grammarInfo.emptyTerminalsSet.indices == orig(this.grammarInfo.emptyTerminalsSet.indices)
this.grammarInfo.emptyTerminalsSet.terminals == orig(this.grammarInfo.emptyTerminalsSet.terminals)
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() == orig(this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName())
this.grammarInfo.emptyTerminalsSet.indexEpsilon == orig(this.grammarInfo.emptyTerminalsSet.indexEpsilon)
this.parsingTable == orig(this.parsingTable)
this.parsingTable.grammar == orig(this.parsingTable.grammar)
this.parsingTable.grammar.terminals == orig(this.parsingTable.grammar.terminals)
this.parsingTable.grammar.terminals[] == orig(this.parsingTable.grammar.terminals[])
this.parsingTable.grammar.nonTerminals == orig(this.parsingTable.grammar.nonTerminals)
this.parsingTable.grammar.nonTerminals[] == orig(this.parsingTable.grammar.nonTerminals[])
this.parsingTable.grammar.productions == orig(this.parsingTable.grammar.productions)
this.parsingTable.grammar.productions[] == orig(this.parsingTable.grammar.productions[])
this.parsingTable.states == orig(this.parsingTable.states)
this.parsingTable.states[] == orig(this.parsingTable.states[])
this.parsingTable.actionTable == orig(this.parsingTable.actionTable)
this.parsingTable.actionTable.parentTable == orig(this.parsingTable.actionTable.parentTable)
this.parsingTable.actionTable.table == orig(this.parsingTable.actionTable.table)
this.parsingTable.gotoTable == orig(this.parsingTable.gotoTable)
this.parsingTable.gotoTable.parentTable == orig(this.parsingTable.gotoTable.parentTable)
this.parsingTable.gotoTable.table == orig(this.parsingTable.gotoTable.table)
this.parsingTable.erI == orig(this.parsingTable.erI)
this.automaton == orig(this.automaton)
this.automaton.states == orig(this.automaton.states)
this.automaton.states.getClass().getName() == orig(this.automaton.states.getClass().getName())
this.automaton.states.getClass().getName() == orig(this.automaton.edges.getClass().getName())
this.automaton.edges == orig(this.automaton.edges)
this.automaton.startState == orig(this.automaton.startState)
this.automaton.startState.getClass().getName() == orig(this.automaton.startState.getClass().getName())
this.automaton.startState.items == orig(this.automaton.startState.items)
this.automaton.startState.items.getClass().getName() == orig(this.automaton.startState.items.getClass().getName())
edu.tum.cup2.generator.LRGenerator.numThreads == orig(edu.tum.cup2.generator.LRGenerator.numThreads)
this.LOG_shortestWordFinder == orig(this.LOG_shortestWordFinder)
this.grammar == orig(this.grammar)
this.grammar.terminals == orig(this.grammar.terminals)
this.grammar.terminals[] == orig(this.grammar.terminals[])
this.grammar.nonTerminals == orig(this.grammar.nonTerminals)
this.grammar.nonTerminals[] == orig(this.grammar.nonTerminals[])
this.grammar.productions == orig(this.grammar.productions)
this.grammar.productions[] == orig(this.grammar.productions[])
this.precedences == orig(this.precedences)
this.precedences.list == orig(this.precedences.list)
this.precedences.list[] == orig(this.precedences.list[])
this.precedences.list.getClass().getName() == orig(this.precedences.list.getClass().getName())
this.verbosity == orig(this.verbosity)
edu.tum.cup2.generator.Verbosity.None == orig(edu.tum.cup2.generator.Verbosity.None)
edu.tum.cup2.generator.Verbosity.Sparse == orig(edu.tum.cup2.generator.Verbosity.Sparse)
edu.tum.cup2.generator.Verbosity.Verbose == orig(edu.tum.cup2.generator.Verbosity.Verbose)
edu.tum.cup2.generator.Verbosity.Detailled == orig(edu.tum.cup2.generator.Verbosity.Detailled)
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.None.statesCounterStep)
edu.tum.cup2.generator.Verbosity.$VALUES == orig(edu.tum.cup2.generator.Verbosity.$VALUES)
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == orig(edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName())
edu.tum.cup2.generator.Verbosity.$VALUES[] == orig(edu.tum.cup2.generator.Verbosity.$VALUES[])
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep)
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep)
this.verbosity.statesCounterStep == orig(this.verbosity.statesCounterStep)
this.debugOut == orig(this.debugOut)
this.parsingTable has only one value
return has only one value
return.grammar has only one value
return.grammar.terminals has only one value
return.grammar.terminals[] contains no nulls and has only one value, of length 30
return.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
return.grammar.nonTerminals has only one value
return.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
return.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
return.grammar.productions has only one value
return.grammar.productions[] contains no nulls and has only one value, of length 48
return.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
return.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
return.states has only one value
return.states[] contains no nulls and has only one value, of length 114
return.states[].getClass().getName() == [edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState]
return.states[].getClass().getName() elements == edu.tum.cup2.parser.states.LRParserState.class
return.actionTable has only one value
return.actionTable.parentTable has only one value
return.actionTable.table has only one value
return.gotoTable has only one value
return.gotoTable.parentTable has only one value
return.gotoTable.table has only one value
return.erI has only one value
size(return.grammar.terminals[]) == 30
size(return.grammar.nonTerminals[]) == 16
size(return.grammar.productions[]) == 48
size(return.states[]) == 114
===========================================================================
edu.tum.cup2.generator.LRGenerator.setReduceAction(edu.tum.cup2.parser.tables.LRActionTable, edu.tum.cup2.parser.actions.Reduce, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.grammar.Terminal):::ENTER
arg1.production.lastTerminal.getClass().getName() == arg1.production.precTerminal.getClass().getName()
this.parsingTable == null
arg0 has only one value
arg0 != null
arg0.parentTable has only one value
arg0.parentTable != null
arg0.parentTable.grammar has only one value
arg0.parentTable.grammar != null
arg0.parentTable.states has only one value
arg0.parentTable.states != null
arg0.parentTable.states[] contains no nulls and has only one value, of length 114
arg0.parentTable.states[] elements != null
arg0.parentTable.states[].getClass().getName() == [edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState]
arg0.parentTable.states[].getClass().getName() elements == edu.tum.cup2.parser.states.LRParserState.class
arg0.parentTable.actionTable has only one value
arg0.parentTable.actionTable != null
arg0.parentTable.gotoTable has only one value
arg0.parentTable.gotoTable != null
arg0.parentTable.erI has only one value
arg0.parentTable.erI != null
arg0.table has only one value
arg0.table != null
arg1 != null
arg1.production != null
arg1.production.lhs != null
arg1.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
arg1.production.rhs != null
arg1.production.rhs[] elements != null
arg1.production.rhs.getClass().getName() == java.util.ArrayList.class
arg1.production.reduceAction != null
arg1.production.rhsSizeWithoutEpsilon >= 0
arg1.production.hashCode != 0
arg2 != null
arg2.beginLine == -1
arg2.beginColumn == -1
arg3 != null
size(arg0.parentTable.states[]) == 114
size(arg1.production.rhs[]) >= 1
this.getClass().getName() != arg1.production.lhs.getClass().getName()
this.getClass().getName() != arg1.production.rhs.getClass().getName()
this.getClass().getName() != arg1.production.lastTerminal.getClass().getName()
this.getClass().getName() != arg3.getClass().getName()
this.grammarInfo.firstSets.data.getClass().getName() != arg1.production.lhs.getClass().getName()
this.grammarInfo.firstSets.data.getClass().getName() != arg1.production.rhs.getClass().getName()
this.grammarInfo.firstSets.data.getClass().getName() != arg1.production.lastTerminal.getClass().getName()
this.grammarInfo.firstSets.data.getClass().getName() != arg3.getClass().getName()
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() != arg1.production.lhs.getClass().getName()
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() != arg1.production.rhs.getClass().getName()
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() != arg1.production.lastTerminal.getClass().getName()
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() != arg3.getClass().getName()
this.automaton.states.getClass().getName() != arg1.production.lhs.getClass().getName()
this.automaton.states.getClass().getName() != arg1.production.rhs.getClass().getName()
this.automaton.states.getClass().getName() != arg1.production.lastTerminal.getClass().getName()
this.automaton.states.getClass().getName() != arg3.getClass().getName()
this.automaton.startState.getClass().getName() != arg1.production.lhs.getClass().getName()
this.automaton.startState.getClass().getName() != arg1.production.rhs.getClass().getName()
this.automaton.startState.getClass().getName() != arg1.production.lastTerminal.getClass().getName()
this.automaton.startState.getClass().getName() != arg3.getClass().getName()
this.automaton.startState.items.getClass().getName() != arg1.production.lhs.getClass().getName()
this.automaton.startState.items.getClass().getName() != arg1.production.rhs.getClass().getName()
this.automaton.startState.items.getClass().getName() != arg1.production.lastTerminal.getClass().getName()
this.automaton.startState.items.getClass().getName() != arg3.getClass().getName()
this.precedences.list.getClass().getName() != arg1.production.lhs.getClass().getName()
this.precedences.list.getClass().getName() != arg1.production.rhs.getClass().getName()
this.precedences.list.getClass().getName() != arg1.production.lastTerminal.getClass().getName()
this.precedences.list.getClass().getName() != arg3.getClass().getName()
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() != arg1.production.lhs.getClass().getName()
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() != arg1.production.rhs.getClass().getName()
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() != arg1.production.lastTerminal.getClass().getName()
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() != arg3.getClass().getName()
arg1.production.lhs.getClass().getName() != arg1.production.rhs.getClass().getName()
arg1.production.lhs.getClass().getName() != arg1.production.lastTerminal.getClass().getName()
arg1.production.lhs.getClass().getName() != arg3.getClass().getName()
arg1.production.rhs.getClass().getName() != arg1.production.lastTerminal.getClass().getName()
arg1.production.rhs.getClass().getName() != arg3.getClass().getName()
===========================================================================
edu.tum.cup2.generator.LRGenerator.setReduceAction(edu.tum.cup2.parser.tables.LRActionTable, edu.tum.cup2.parser.actions.Reduce, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.grammar.Terminal):::EXIT
this.grammarInfo == orig(this.grammarInfo)
this.grammarInfo.grammar == orig(this.grammarInfo.grammar)
this.grammarInfo.grammar.terminals == orig(this.grammarInfo.grammar.terminals)
this.grammarInfo.grammar.terminals[] == orig(this.grammarInfo.grammar.terminals[])
this.grammarInfo.grammar.nonTerminals == orig(this.grammarInfo.grammar.nonTerminals)
this.grammarInfo.grammar.nonTerminals[] == orig(this.grammarInfo.grammar.nonTerminals[])
this.grammarInfo.grammar.productions == orig(this.grammarInfo.grammar.productions)
this.grammarInfo.grammar.productions[] == orig(this.grammarInfo.grammar.productions[])
this.grammarInfo.nullableSet == orig(this.grammarInfo.nullableSet)
this.grammarInfo.firstSets == orig(this.grammarInfo.firstSets)
this.grammarInfo.firstSets.data == orig(this.grammarInfo.firstSets.data)
this.grammarInfo.firstSets.data.getClass().getName() == orig(this.grammarInfo.firstSets.data.getClass().getName())
this.grammarInfo.firstSets.data.getClass().getName() == orig(this.grammarInfo.emptyTerminalsSet.indices.getClass().getName())
this.grammarInfo.productionsStartingWith == orig(this.grammarInfo.productionsStartingWith)
this.grammarInfo.emptyTerminalsSet == orig(this.grammarInfo.emptyTerminalsSet)
this.grammarInfo.emptyTerminalsSet.data == orig(this.grammarInfo.emptyTerminalsSet.data)
this.grammarInfo.emptyTerminalsSet.data[] == orig(this.grammarInfo.emptyTerminalsSet.data[])
this.grammarInfo.emptyTerminalsSet.indices == orig(this.grammarInfo.emptyTerminalsSet.indices)
this.grammarInfo.emptyTerminalsSet.terminals == orig(this.grammarInfo.emptyTerminalsSet.terminals)
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() == orig(this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName())
this.grammarInfo.emptyTerminalsSet.indexEpsilon == orig(this.grammarInfo.emptyTerminalsSet.indexEpsilon)
this.parsingTable == orig(this.parsingTable)
this.automaton == orig(this.automaton)
this.automaton.states == orig(this.automaton.states)
this.automaton.states.getClass().getName() == orig(this.automaton.states.getClass().getName())
this.automaton.states.getClass().getName() == orig(this.automaton.edges.getClass().getName())
this.automaton.edges == orig(this.automaton.edges)
this.automaton.startState == orig(this.automaton.startState)
this.automaton.startState.getClass().getName() == orig(this.automaton.startState.getClass().getName())
this.automaton.startState.items == orig(this.automaton.startState.items)
this.automaton.startState.items.getClass().getName() == orig(this.automaton.startState.items.getClass().getName())
edu.tum.cup2.generator.LRGenerator.numThreads == orig(edu.tum.cup2.generator.LRGenerator.numThreads)
this.LOG_shortestWordFinder == orig(this.LOG_shortestWordFinder)
this.grammar == orig(this.grammar)
this.grammar.terminals == orig(this.grammar.terminals)
this.grammar.terminals[] == orig(this.grammar.terminals[])
this.grammar.nonTerminals == orig(this.grammar.nonTerminals)
this.grammar.nonTerminals[] == orig(this.grammar.nonTerminals[])
this.grammar.productions == orig(this.grammar.productions)
this.grammar.productions[] == orig(this.grammar.productions[])
this.precedences == orig(this.precedences)
this.precedences.list == orig(this.precedences.list)
this.precedences.list[] == orig(this.precedences.list[])
this.precedences.list.getClass().getName() == orig(this.precedences.list.getClass().getName())
this.verbosity == orig(this.verbosity)
edu.tum.cup2.generator.Verbosity.None == orig(edu.tum.cup2.generator.Verbosity.None)
edu.tum.cup2.generator.Verbosity.Sparse == orig(edu.tum.cup2.generator.Verbosity.Sparse)
edu.tum.cup2.generator.Verbosity.Verbose == orig(edu.tum.cup2.generator.Verbosity.Verbose)
edu.tum.cup2.generator.Verbosity.Detailled == orig(edu.tum.cup2.generator.Verbosity.Detailled)
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.None.statesCounterStep)
edu.tum.cup2.generator.Verbosity.$VALUES == orig(edu.tum.cup2.generator.Verbosity.$VALUES)
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == orig(edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName())
edu.tum.cup2.generator.Verbosity.$VALUES[] == orig(edu.tum.cup2.generator.Verbosity.$VALUES[])
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep)
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep)
this.verbosity.statesCounterStep == orig(this.verbosity.statesCounterStep)
this.debugOut == orig(this.debugOut)
arg0.parentTable == orig(arg0.parentTable)
arg0.parentTable.grammar == orig(arg0.parentTable.grammar)
arg0.parentTable.states == orig(arg0.parentTable.states)
arg0.parentTable.states[] == orig(arg0.parentTable.states[])
arg0.parentTable.actionTable == orig(arg0.parentTable.actionTable)
arg0.parentTable.gotoTable == orig(arg0.parentTable.gotoTable)
arg0.parentTable.erI == orig(arg0.parentTable.erI)
arg0.table == orig(arg0.table)
arg1.production == orig(arg1.production)
arg1.production.id == orig(arg1.production.id)
arg1.production.lhs == orig(arg1.production.lhs)
arg1.production.lhs.getClass().getName() == orig(arg1.production.lhs.getClass().getName())
arg1.production.rhs == orig(arg1.production.rhs)
arg1.production.rhs[] == orig(arg1.production.rhs[])
arg1.production.rhs.getClass().getName() == orig(arg1.production.rhs.getClass().getName())
arg1.production.reduceAction == orig(arg1.production.reduceAction)
arg1.production.lastTerminal == orig(arg1.production.lastTerminal)
arg1.production.lastTerminal.getClass().getName() == arg1.production.precTerminal.getClass().getName()
arg1.production.lastTerminal.getClass().getName() == orig(arg1.production.lastTerminal.getClass().getName())
arg1.production.lastTerminal.getClass().getName() == orig(arg1.production.precTerminal.getClass().getName())
arg1.production.precTerminal == orig(arg1.production.precTerminal)
arg1.production.rhsSizeWithoutEpsilon == orig(arg1.production.rhsSizeWithoutEpsilon)
arg1.production.hashCode == orig(arg1.production.hashCode)
arg2.id == orig(arg2.id)
arg2.beginLine == orig(arg2.beginLine)
arg2.beginColumn == orig(arg2.beginColumn)
this.parsingTable == null
arg0.parentTable has only one value
arg0.parentTable != null
arg0.parentTable.grammar has only one value
arg0.parentTable.grammar != null
arg0.parentTable.states has only one value
arg0.parentTable.states != null
arg0.parentTable.states[] contains no nulls and has only one value, of length 114
arg0.parentTable.states[] elements != null
arg0.parentTable.states[].getClass().getName() == [edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState]
arg0.parentTable.states[].getClass().getName() elements == edu.tum.cup2.parser.states.LRParserState.class
arg0.parentTable.actionTable has only one value
arg0.parentTable.actionTable != null
arg0.parentTable.gotoTable has only one value
arg0.parentTable.gotoTable != null
arg0.parentTable.erI has only one value
arg0.parentTable.erI != null
arg0.table has only one value
arg0.table != null
arg1.production != null
arg1.production.lhs != null
arg1.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
arg1.production.rhs != null
arg1.production.rhs[] elements != null
arg1.production.rhs.getClass().getName() == java.util.ArrayList.class
arg1.production.reduceAction != null
arg1.production.rhsSizeWithoutEpsilon >= 0
arg1.production.hashCode != 0
arg2.beginLine == -1
arg2.beginColumn == -1
size(arg0.parentTable.states[]) == 114
size(arg1.production.rhs[]) >= 1
this.grammarInfo.firstSets.data.getClass().getName() != arg1.production.lhs.getClass().getName()
this.grammarInfo.firstSets.data.getClass().getName() != arg1.production.rhs.getClass().getName()
this.grammarInfo.firstSets.data.getClass().getName() != arg1.production.lastTerminal.getClass().getName()
this.grammarInfo.firstSets.data.getClass().getName() != orig(this.getClass().getName())
this.grammarInfo.firstSets.data.getClass().getName() != orig(arg3.getClass().getName())
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() != arg1.production.lhs.getClass().getName()
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() != arg1.production.rhs.getClass().getName()
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() != arg1.production.lastTerminal.getClass().getName()
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() != orig(this.getClass().getName())
this.grammarInfo.emptyTerminalsSet.terminals.getClass().getName() != orig(arg3.getClass().getName())
this.automaton.states.getClass().getName() != arg1.production.lhs.getClass().getName()
this.automaton.states.getClass().getName() != arg1.production.rhs.getClass().getName()
this.automaton.states.getClass().getName() != arg1.production.lastTerminal.getClass().getName()
this.automaton.states.getClass().getName() != orig(this.getClass().getName())
this.automaton.states.getClass().getName() != orig(arg3.getClass().getName())
this.automaton.startState.getClass().getName() != arg1.production.lhs.getClass().getName()
this.automaton.startState.getClass().getName() != arg1.production.rhs.getClass().getName()
this.automaton.startState.getClass().getName() != arg1.production.lastTerminal.getClass().getName()
this.automaton.startState.getClass().getName() != orig(this.getClass().getName())
this.automaton.startState.getClass().getName() != orig(arg3.getClass().getName())
this.automaton.startState.items.getClass().getName() != arg1.production.lhs.getClass().getName()
this.automaton.startState.items.getClass().getName() != arg1.production.rhs.getClass().getName()
this.automaton.startState.items.getClass().getName() != arg1.production.lastTerminal.getClass().getName()
this.automaton.startState.items.getClass().getName() != orig(this.getClass().getName())
this.automaton.startState.items.getClass().getName() != orig(arg3.getClass().getName())
this.precedences.list.getClass().getName() != arg1.production.lhs.getClass().getName()
this.precedences.list.getClass().getName() != arg1.production.rhs.getClass().getName()
this.precedences.list.getClass().getName() != arg1.production.lastTerminal.getClass().getName()
this.precedences.list.getClass().getName() != orig(this.getClass().getName())
this.precedences.list.getClass().getName() != orig(arg3.getClass().getName())
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() != arg1.production.lhs.getClass().getName()
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() != arg1.production.rhs.getClass().getName()
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() != arg1.production.lastTerminal.getClass().getName()
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() != orig(this.getClass().getName())
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() != orig(arg3.getClass().getName())
arg1.production.lhs.getClass().getName() != arg1.production.rhs.getClass().getName()
arg1.production.lhs.getClass().getName() != arg1.production.lastTerminal.getClass().getName()
arg1.production.lhs.getClass().getName() != orig(this.getClass().getName())
arg1.production.lhs.getClass().getName() != orig(arg3.getClass().getName())
arg1.production.rhs.getClass().getName() != arg1.production.lastTerminal.getClass().getName()
arg1.production.rhs.getClass().getName() != orig(this.getClass().getName())
arg1.production.rhs.getClass().getName() != orig(arg3.getClass().getName())
arg1.production.lastTerminal.getClass().getName() != orig(this.getClass().getName())
===========================================================================
edu.tum.cup2.generator.NullableSet:::OBJECT
this has only one value
===========================================================================
edu.tum.cup2.generator.NullableSet.NullableSet(java.util.LinkedList):::ENTER
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 48
arg0[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
size(arg0[]) == 48
===========================================================================
edu.tum.cup2.generator.NullableSet.NullableSet(java.util.LinkedList):::EXIT
arg0[] == orig(arg0[])
arg0[] contains no nulls and has only one value, of length 48
arg0[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
===========================================================================
edu.tum.cup2.generator.Verbosity:::CLASS
edu.tum.cup2.generator.Verbosity.None has only one value
edu.tum.cup2.generator.Verbosity.Sparse has only one value
edu.tum.cup2.generator.Verbosity.Verbose has only one value
edu.tum.cup2.generator.Verbosity.Detailled has only one value
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == 0
edu.tum.cup2.generator.Verbosity.$VALUES has only one value
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == edu.tum.cup2.generator.Verbosity[].class
edu.tum.cup2.generator.Verbosity.$VALUES[] contains no nulls and has only one value, of length 4
edu.tum.cup2.generator.Verbosity.$VALUES[].getClass().getName() == [edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity, edu.tum.cup2.generator.Verbosity]
edu.tum.cup2.generator.Verbosity.$VALUES[].getClass().getName() elements == edu.tum.cup2.generator.Verbosity.class
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == [0, 1000, 100, 1]
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == 1000
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == 100
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == 1
size(edu.tum.cup2.generator.Verbosity.$VALUES[]) == 4
===========================================================================
edu.tum.cup2.generator.Verbosity:::OBJECT
this.statesCounterStep >= 0
===========================================================================
edu.tum.cup2.generator.Verbosity.Verbosity(java.lang.String, int, int):::ENTER
===========================================================================
edu.tum.cup2.generator.Verbosity.Verbosity(java.lang.String, int, int):::EXIT
arg0.toString == orig(arg0.toString)
===========================================================================
edu.tum.cup2.generator.Verbosity.getStatesCounterStep():::ENTER
this has only one value
this.statesCounterStep == 0
===========================================================================
edu.tum.cup2.generator.Verbosity.getStatesCounterStep():::EXIT
edu.tum.cup2.generator.Verbosity.None == orig(edu.tum.cup2.generator.Verbosity.None)
edu.tum.cup2.generator.Verbosity.Sparse == orig(edu.tum.cup2.generator.Verbosity.Sparse)
edu.tum.cup2.generator.Verbosity.Verbose == orig(edu.tum.cup2.generator.Verbosity.Verbose)
edu.tum.cup2.generator.Verbosity.Detailled == orig(edu.tum.cup2.generator.Verbosity.Detailled)
edu.tum.cup2.generator.Verbosity.None.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.None.statesCounterStep)
edu.tum.cup2.generator.Verbosity.$VALUES == orig(edu.tum.cup2.generator.Verbosity.$VALUES)
edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName() == orig(edu.tum.cup2.generator.Verbosity.$VALUES.getClass().getName())
edu.tum.cup2.generator.Verbosity.$VALUES[] == orig(edu.tum.cup2.generator.Verbosity.$VALUES[])
edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.$VALUES[].statesCounterStep)
edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Sparse.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Verbose.statesCounterStep)
edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep == orig(edu.tum.cup2.generator.Verbosity.Detailled.statesCounterStep)
this.statesCounterStep == orig(this.statesCounterStep)
this.statesCounterStep == 0
return == 0
===========================================================================
edu.tum.cup2.generator.items.LR0Item:::OBJECT
this.production != null
this.production.id >= 0
this.production.lhs != null
this.production.rhs != null
this.production.rhs[] elements != null
this.production.reduceAction.method != null
this.production.reduceAction.actionSubclass != null
this.production.reduceAction.paramsCount >= 0
this.production.reduceAction.returnsVoid == false
this.production.reduceAction.parserInstance == null
this.production.rhsSizeWithoutEpsilon >= 0
this.production.hashCode != 0
this.position >= 0
this.hashCode != 0
size(this.production.rhs[]) >= 1
===========================================================================
edu.tum.cup2.generator.items.LR0Item.LR0Item(edu.tum.cup2.grammar.Production, int):::ENTER
arg0 != null
arg0.lhs != null
arg0.rhs != null
arg0.rhs[] elements != null
arg0.reduceAction.method != null
arg0.reduceAction.actionSubclass != null
arg0.reduceAction.paramsCount >= 0
arg0.reduceAction.returnsVoid == false
arg0.reduceAction.parserInstance == null
arg0.rhsSizeWithoutEpsilon >= 0
arg0.hashCode != 0
arg1 >= 0
size(arg0.rhs[]) >= 1
===========================================================================
edu.tum.cup2.generator.items.LR0Item.LR0Item(edu.tum.cup2.grammar.Production, int):::EXIT
arg0.id == orig(arg0.id)
arg0.lhs == orig(arg0.lhs)
arg0.lhs.getClass().getName() == orig(arg0.lhs.getClass().getName())
arg0.rhs == orig(arg0.rhs)
arg0.rhs[] == orig(arg0.rhs[])
arg0.rhs.getClass().getName() == orig(arg0.rhs.getClass().getName())
arg0.reduceAction == orig(arg0.reduceAction)
arg0.reduceAction.method == orig(arg0.reduceAction.method)
arg0.reduceAction.actionSubclass == orig(arg0.reduceAction.actionSubclass)
arg0.reduceAction.paramsCount == orig(arg0.reduceAction.paramsCount)
arg0.reduceAction.returnsVoid == orig(arg0.reduceAction.returnsVoid)
arg0.reduceAction.parserInstance == orig(arg0.reduceAction.parserInstance)
arg0.lastTerminal == orig(arg0.lastTerminal)
arg0.lastTerminal.getClass().getName() == orig(arg0.lastTerminal.getClass().getName())
arg0.precTerminal == orig(arg0.precTerminal)
arg0.precTerminal.getClass().getName() == orig(arg0.precTerminal.getClass().getName())
arg0.rhsSizeWithoutEpsilon == orig(arg0.rhsSizeWithoutEpsilon)
arg0.hashCode == orig(arg0.hashCode)
arg0.lhs != null
arg0.rhs != null
arg0.rhs[] elements != null
arg0.reduceAction.method != null
arg0.reduceAction.actionSubclass != null
arg0.reduceAction.paramsCount >= 0
arg0.reduceAction.returnsVoid == false
arg0.reduceAction.parserInstance == null
arg0.rhsSizeWithoutEpsilon >= 0
arg0.hashCode != 0
size(arg0.rhs[]) >= 1
===========================================================================
edu.tum.cup2.generator.items.LR0Item.equals(java.lang.Object):::ENTER
this.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
this.production.rhs.getClass().getName() == java.util.ArrayList.class
this.production.reduceAction != null
arg0 != null
arg0.getClass().getName() == edu.tum.cup2.generator.items.LR0Item.class
===========================================================================
edu.tum.cup2.generator.items.LR0Item.equals(java.lang.Object):::EXIT3
===========================================================================
edu.tum.cup2.generator.items.LR0Item.equals(java.lang.Object):::EXIT3;condition="return == true"
===========================================================================
edu.tum.cup2.generator.items.LR0Item.equals(java.lang.Object):::EXIT
this.production == orig(this.production)
this.production.id == orig(this.production.id)
this.production.lhs == orig(this.production.lhs)
this.production.lhs.getClass().getName() == orig(this.production.lhs.getClass().getName())
this.production.rhs == orig(this.production.rhs)
this.production.rhs[] == orig(this.production.rhs[])
this.production.rhs.getClass().getName() == orig(this.production.rhs.getClass().getName())
this.production.reduceAction == orig(this.production.reduceAction)
this.production.reduceAction.method == orig(this.production.reduceAction.method)
this.production.reduceAction.actionSubclass == orig(this.production.reduceAction.actionSubclass)
this.production.reduceAction.paramsCount == orig(this.production.reduceAction.paramsCount)
this.production.reduceAction.returnsVoid == orig(this.production.reduceAction.returnsVoid)
this.production.reduceAction.parserInstance == orig(this.production.reduceAction.parserInstance)
this.production.lastTerminal == orig(this.production.lastTerminal)
this.production.lastTerminal.getClass().getName() == orig(this.production.lastTerminal.getClass().getName())
this.production.precTerminal == orig(this.production.precTerminal)
this.production.precTerminal.getClass().getName() == orig(this.production.precTerminal.getClass().getName())
this.production.rhsSizeWithoutEpsilon == orig(this.production.rhsSizeWithoutEpsilon)
this.production.hashCode == orig(this.production.hashCode)
this.position == orig(this.position)
this.nextSymbol == orig(this.nextSymbol)
this.nextSymbol.getClass().getName() == orig(this.nextSymbol.getClass().getName())
this.hashCode == orig(this.hashCode)
this.shiftable == orig(this.shiftable)
this.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
this.production.rhs.getClass().getName() == java.util.ArrayList.class
this.production.reduceAction != null
return == true
===========================================================================
edu.tum.cup2.generator.items.LR0Item.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
edu.tum.cup2.generator.items.LR0Item.getNextSymbol():::ENTER
===========================================================================
edu.tum.cup2.generator.items.LR0Item.getNextSymbol():::EXIT
this.production == orig(this.production)
this.production.id == orig(this.production.id)
this.production.lhs == orig(this.production.lhs)
this.production.lhs.getClass().getName() == orig(this.production.lhs.getClass().getName())
this.production.rhs == orig(this.production.rhs)
this.production.rhs[] == orig(this.production.rhs[])
this.production.rhs.getClass().getName() == orig(this.production.rhs.getClass().getName())
this.production.reduceAction == orig(this.production.reduceAction)
this.production.reduceAction.method == orig(this.production.reduceAction.method)
this.production.reduceAction.actionSubclass == orig(this.production.reduceAction.actionSubclass)
this.production.reduceAction.paramsCount == orig(this.production.reduceAction.paramsCount)
this.production.reduceAction.returnsVoid == orig(this.production.reduceAction.returnsVoid)
this.production.reduceAction.parserInstance == orig(this.production.reduceAction.parserInstance)
this.production.lastTerminal == orig(this.production.lastTerminal)
this.production.lastTerminal.getClass().getName() == orig(this.production.lastTerminal.getClass().getName())
this.production.precTerminal == orig(this.production.precTerminal)
this.production.precTerminal.getClass().getName() == orig(this.production.precTerminal.getClass().getName())
this.production.rhsSizeWithoutEpsilon == orig(this.production.rhsSizeWithoutEpsilon)
this.production.hashCode == orig(this.production.hashCode)
this.position == orig(this.position)
this.nextSymbol == orig(this.nextSymbol)
this.nextSymbol.getClass().getName() == orig(this.nextSymbol.getClass().getName())
this.hashCode == orig(this.hashCode)
this.shiftable == orig(this.shiftable)
===========================================================================
edu.tum.cup2.generator.items.LR0Item.getPosition():::ENTER
===========================================================================
edu.tum.cup2.generator.items.LR0Item.getPosition():::EXIT
this.production == orig(this.production)
this.production.id == orig(this.production.id)
this.production.lhs == orig(this.production.lhs)
this.production.lhs.getClass().getName() == orig(this.production.lhs.getClass().getName())
this.production.rhs == orig(this.production.rhs)
this.production.rhs[] == orig(this.production.rhs[])
this.production.rhs.getClass().getName() == orig(this.production.rhs.getClass().getName())
this.production.reduceAction == orig(this.production.reduceAction)
this.production.reduceAction.method == orig(this.production.reduceAction.method)
this.production.reduceAction.actionSubclass == orig(this.production.reduceAction.actionSubclass)
this.production.reduceAction.paramsCount == orig(this.production.reduceAction.paramsCount)
this.production.reduceAction.returnsVoid == orig(this.production.reduceAction.returnsVoid)
this.production.reduceAction.parserInstance == orig(this.production.reduceAction.parserInstance)
this.production.lastTerminal == orig(this.production.lastTerminal)
this.production.lastTerminal.getClass().getName() == orig(this.production.lastTerminal.getClass().getName())
this.production.precTerminal == orig(this.production.precTerminal)
this.production.precTerminal.getClass().getName() == orig(this.production.precTerminal.getClass().getName())
this.production.rhsSizeWithoutEpsilon == orig(this.production.rhsSizeWithoutEpsilon)
this.production.hashCode == orig(this.production.hashCode)
this.position == orig(this.position)
this.nextSymbol == orig(this.nextSymbol)
this.nextSymbol.getClass().getName() == orig(this.nextSymbol.getClass().getName())
this.hashCode == orig(this.hashCode)
this.shiftable == orig(this.shiftable)
return >= 0
===========================================================================
edu.tum.cup2.generator.items.LR0Item.getProduction():::ENTER
===========================================================================
edu.tum.cup2.generator.items.LR0Item.getProduction():::EXIT
this.production == orig(this.production)
this.production.id == orig(this.production.id)
this.production.lhs == orig(this.production.lhs)
this.production.lhs.getClass().getName() == orig(this.production.lhs.getClass().getName())
this.production.rhs == orig(this.production.rhs)
this.production.rhs[] == orig(this.production.rhs[])
this.production.rhs.getClass().getName() == orig(this.production.rhs.getClass().getName())
this.production.reduceAction == orig(this.production.reduceAction)
this.production.reduceAction.method == orig(this.production.reduceAction.method)
this.production.reduceAction.actionSubclass == orig(this.production.reduceAction.actionSubclass)
this.production.reduceAction.paramsCount == orig(this.production.reduceAction.paramsCount)
this.production.reduceAction.returnsVoid == orig(this.production.reduceAction.returnsVoid)
this.production.reduceAction.parserInstance == orig(this.production.reduceAction.parserInstance)
this.production.lastTerminal == orig(this.production.lastTerminal)
this.production.lastTerminal.getClass().getName() == orig(this.production.lastTerminal.getClass().getName())
this.production.precTerminal == orig(this.production.precTerminal)
this.production.precTerminal.getClass().getName() == orig(this.production.precTerminal.getClass().getName())
this.production.rhsSizeWithoutEpsilon == orig(this.production.rhsSizeWithoutEpsilon)
this.production.hashCode == orig(this.production.hashCode)
this.position == orig(this.position)
this.nextSymbol == orig(this.nextSymbol)
this.nextSymbol.getClass().getName() == orig(this.nextSymbol.getClass().getName())
this.hashCode == orig(this.hashCode)
this.shiftable == orig(this.shiftable)
return != null
return.lhs != null
return.rhs != null
return.rhs[] elements != null
return.reduceAction.method != null
return.reduceAction.actionSubclass != null
return.reduceAction.returnsVoid == false
return.reduceAction.parserInstance == null
return.hashCode != 0
size(return.rhs[]) >= 1
===========================================================================
edu.tum.cup2.generator.items.LR0Item.hashCode():::ENTER
===========================================================================
edu.tum.cup2.generator.items.LR0Item.hashCode():::EXIT
this.production == orig(this.production)
this.production.id == orig(this.production.id)
this.production.lhs == orig(this.production.lhs)
this.production.lhs.getClass().getName() == orig(this.production.lhs.getClass().getName())
this.production.rhs == orig(this.production.rhs)
this.production.rhs[] == orig(this.production.rhs[])
this.production.rhs.getClass().getName() == orig(this.production.rhs.getClass().getName())
this.production.reduceAction == orig(this.production.reduceAction)
this.production.reduceAction.method == orig(this.production.reduceAction.method)
this.production.reduceAction.actionSubclass == orig(this.production.reduceAction.actionSubclass)
this.production.reduceAction.paramsCount == orig(this.production.reduceAction.paramsCount)
this.production.reduceAction.returnsVoid == orig(this.production.reduceAction.returnsVoid)
this.production.reduceAction.parserInstance == orig(this.production.reduceAction.parserInstance)
this.production.lastTerminal == orig(this.production.lastTerminal)
this.production.lastTerminal.getClass().getName() == orig(this.production.lastTerminal.getClass().getName())
this.production.precTerminal == orig(this.production.precTerminal)
this.production.precTerminal.getClass().getName() == orig(this.production.precTerminal.getClass().getName())
this.production.rhsSizeWithoutEpsilon == orig(this.production.rhsSizeWithoutEpsilon)
this.production.hashCode == orig(this.production.hashCode)
this.position == orig(this.position)
this.nextSymbol == orig(this.nextSymbol)
this.nextSymbol.getClass().getName() == orig(this.nextSymbol.getClass().getName())
this.hashCode == orig(this.hashCode)
this.shiftable == orig(this.shiftable)
return != 0
===========================================================================
edu.tum.cup2.generator.items.LR0Item.isShiftable():::ENTER
===========================================================================
edu.tum.cup2.generator.items.LR0Item.isShiftable():::EXIT
this.production == orig(this.production)
this.production.id == orig(this.production.id)
this.production.lhs == orig(this.production.lhs)
this.production.lhs.getClass().getName() == orig(this.production.lhs.getClass().getName())
this.production.rhs == orig(this.production.rhs)
this.production.rhs[] == orig(this.production.rhs[])
this.production.rhs.getClass().getName() == orig(this.production.rhs.getClass().getName())
this.production.reduceAction == orig(this.production.reduceAction)
this.production.reduceAction.method == orig(this.production.reduceAction.method)
this.production.reduceAction.actionSubclass == orig(this.production.reduceAction.actionSubclass)
this.production.reduceAction.paramsCount == orig(this.production.reduceAction.paramsCount)
this.production.reduceAction.returnsVoid == orig(this.production.reduceAction.returnsVoid)
this.production.reduceAction.parserInstance == orig(this.production.reduceAction.parserInstance)
this.production.lastTerminal == orig(this.production.lastTerminal)
this.production.lastTerminal.getClass().getName() == orig(this.production.lastTerminal.getClass().getName())
this.production.precTerminal == orig(this.production.precTerminal)
this.production.precTerminal.getClass().getName() == orig(this.production.precTerminal.getClass().getName())
this.production.rhsSizeWithoutEpsilon == orig(this.production.rhsSizeWithoutEpsilon)
this.production.hashCode == orig(this.production.hashCode)
this.position == orig(this.position)
this.nextSymbol == orig(this.nextSymbol)
this.nextSymbol.getClass().getName() == orig(this.nextSymbol.getClass().getName())
this.hashCode == orig(this.hashCode)
this.shiftable == orig(this.shiftable)
(this.nextSymbol != null)  <==>  (return == true)
(this.nextSymbol != null)  <==>  (this.shiftable == true)
(this.nextSymbol != null)  ==>  (this.production.reduceAction.paramsCount >= 1)
(this.nextSymbol != null)  ==>  (this.production.rhsSizeWithoutEpsilon >= 1)
(this.nextSymbol == null)  <==>  (return == false)
(this.nextSymbol == null)  <==>  (this.shiftable == false)
(this.nextSymbol == null)  ==>  (this.position >= 1)
(this.nextSymbol == null)  ==>  (this.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class)
(this.nextSymbol == null)  ==>  (this.production.reduceAction != null)
(this.nextSymbol == null)  ==>  (this.production.rhs.getClass().getName() == java.util.ArrayList.class)
===========================================================================
edu.tum.cup2.generator.items.LR0Item.isShiftable():::EXIT;condition="return == true"
this.production.reduceAction.paramsCount >= 1
this.production.rhsSizeWithoutEpsilon >= 1
this.nextSymbol != null
this.shiftable == true
return == true
===========================================================================
edu.tum.cup2.generator.items.LR0Item.isShiftable():::EXIT;condition="not(return == true)"
this.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
this.production.rhs.getClass().getName() == java.util.ArrayList.class
this.production.reduceAction != null
this.position >= 1
this.nextSymbol == null
this.shiftable == false
return == false
===========================================================================
edu.tum.cup2.generator.items.LR1Item:::OBJECT
this.kernel != null
this.kernel.production != null
this.kernel.production.id >= 0
this.kernel.production.lhs != null
this.kernel.production.rhs != null
this.kernel.production.rhs[] elements != null
this.kernel.production.rhsSizeWithoutEpsilon >= 0
this.kernel.production.hashCode != 0
this.kernel.position >= 0
this.kernel.hashCode != 0
this.lookaheads != null
this.lookaheads.getClass().getName() == edu.tum.cup2.generator.terminals.EfficientTerminalSet.class
this.nextLookaheads.getClass().getName() == edu.tum.cup2.generator.terminals.EfficientTerminalSet.class
this.hashCode != 0
size(this.kernel.production.rhs[]) >= 1
===========================================================================
edu.tum.cup2.generator.items.LR1Item.LR1Item(edu.tum.cup2.generator.items.LR0Item, edu.tum.cup2.generator.terminals.TerminalSet):::ENTER
arg0 != null
arg0.production != null
arg0.production.lhs != null
arg0.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
arg0.production.rhs != null
arg0.production.rhs[] elements != null
arg0.production.rhs.getClass().getName() == java.util.ArrayList.class
arg0.production.reduceAction != null
arg0.production.hashCode != 0
arg0.position one of { 0, 1 }
arg0.hashCode != 0
arg1 != null
arg1.getClass().getName() == edu.tum.cup2.generator.terminals.EfficientTerminalSet.class
size(arg0.production.rhs[]) >= 1
===========================================================================
edu.tum.cup2.generator.items.LR1Item.LR1Item(edu.tum.cup2.generator.items.LR0Item, edu.tum.cup2.generator.terminals.TerminalSet):::EXIT
arg0.production == orig(arg0.production)
arg0.production.id == orig(arg0.production.id)
arg0.production.lhs == orig(arg0.production.lhs)
arg0.production.lhs.getClass().getName() == orig(arg0.production.lhs.getClass().getName())
arg0.production.rhs == orig(arg0.production.rhs)
arg0.production.rhs[] == orig(arg0.production.rhs[])
arg0.production.rhs.getClass().getName() == orig(arg0.production.rhs.getClass().getName())
arg0.production.reduceAction == orig(arg0.production.reduceAction)
arg0.production.lastTerminal == orig(arg0.production.lastTerminal)
arg0.production.lastTerminal.getClass().getName() == orig(arg0.production.lastTerminal.getClass().getName())
arg0.production.precTerminal == orig(arg0.production.precTerminal)
arg0.production.precTerminal.getClass().getName() == orig(arg0.production.precTerminal.getClass().getName())
arg0.production.rhsSizeWithoutEpsilon == orig(arg0.production.rhsSizeWithoutEpsilon)
arg0.production.hashCode == orig(arg0.production.hashCode)
arg0.position == orig(arg0.position)
arg0.nextSymbol == orig(arg0.nextSymbol)
arg0.nextSymbol.getClass().getName() == orig(arg0.nextSymbol.getClass().getName())
arg0.hashCode == orig(arg0.hashCode)
arg0.shiftable == orig(arg0.shiftable)
this.kernel.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
this.kernel.production.rhs.getClass().getName() == java.util.ArrayList.class
this.kernel.production.reduceAction != null
this.kernel.position one of { 0, 1 }
this.nextLookaheads == null
arg0.production != null
arg0.production.lhs != null
arg0.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
arg0.production.rhs != null
arg0.production.rhs[] elements != null
arg0.production.rhs.getClass().getName() == java.util.ArrayList.class
arg0.production.reduceAction != null
arg0.production.hashCode != 0
arg0.position one of { 0, 1 }
arg0.hashCode != 0
size(arg0.production.rhs[]) >= 1
===========================================================================
edu.tum.cup2.generator.items.LR1Item.LR1Item(edu.tum.cup2.grammar.Production, int, edu.tum.cup2.generator.terminals.TerminalSet):::ENTER
arg0 != null
arg0.lhs != null
arg0.rhs != null
arg0.rhs[] elements != null
arg0.reduceAction.method != null
arg0.reduceAction.actionSubclass != null
arg0.reduceAction.returnsVoid == false
arg0.reduceAction.parserInstance == null
arg0.hashCode != 0
arg1 >= 0
arg2 != null
arg2.getClass().getName() == edu.tum.cup2.generator.terminals.EfficientTerminalSet.class
size(arg0.rhs[]) >= 1
===========================================================================
edu.tum.cup2.generator.items.LR1Item.LR1Item(edu.tum.cup2.grammar.Production, int, edu.tum.cup2.generator.terminals.TerminalSet):::EXIT
arg0.id == orig(arg0.id)
arg0.lhs == orig(arg0.lhs)
arg0.lhs.getClass().getName() == orig(arg0.lhs.getClass().getName())
arg0.rhs == orig(arg0.rhs)
arg0.rhs[] == orig(arg0.rhs[])
arg0.rhs.getClass().getName() == orig(arg0.rhs.getClass().getName())
arg0.reduceAction == orig(arg0.reduceAction)
arg0.reduceAction.method == orig(arg0.reduceAction.method)
arg0.reduceAction.actionSubclass == orig(arg0.reduceAction.actionSubclass)
arg0.reduceAction.paramsCount == orig(arg0.reduceAction.paramsCount)
arg0.reduceAction.returnsVoid == orig(arg0.reduceAction.returnsVoid)
arg0.reduceAction.parserInstance == orig(arg0.reduceAction.parserInstance)
arg0.lastTerminal == orig(arg0.lastTerminal)
arg0.lastTerminal.getClass().getName() == orig(arg0.lastTerminal.getClass().getName())
arg0.precTerminal == orig(arg0.precTerminal)
arg0.precTerminal.getClass().getName() == orig(arg0.precTerminal.getClass().getName())
arg0.rhsSizeWithoutEpsilon == orig(arg0.rhsSizeWithoutEpsilon)
arg0.hashCode == orig(arg0.hashCode)
this.nextLookaheads == null
arg0.lhs != null
arg0.rhs != null
arg0.rhs[] elements != null
arg0.reduceAction.method != null
arg0.reduceAction.actionSubclass != null
arg0.reduceAction.returnsVoid == false
arg0.reduceAction.parserInstance == null
arg0.hashCode != 0
size(arg0.rhs[]) >= 1
===========================================================================
edu.tum.cup2.generator.items.LR1Item.computeNextLookaheadSymbols(edu.tum.cup2.generator.FirstSets, edu.tum.cup2.generator.NullableSet):::ENTER
this.kernel.nextSymbol != null
this.kernel.nextSymbol.getClass().getName() == main.ParserSpec$NonTerminals.class
this.kernel.shiftable == true
this.nextLookaheads == null
arg0 has only one value
arg0 != null
arg0.data has only one value
arg0.data != null
arg0.data.getClass().getName() == java.util.HashMap.class
arg1 has only one value
arg1 != null
===========================================================================
edu.tum.cup2.generator.items.LR1Item.computeNextLookaheadSymbols(edu.tum.cup2.generator.FirstSets, edu.tum.cup2.generator.NullableSet):::EXIT1
===========================================================================
edu.tum.cup2.generator.items.LR1Item.computeNextLookaheadSymbols(edu.tum.cup2.generator.FirstSets, edu.tum.cup2.generator.NullableSet):::EXIT2
this.kernel.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
this.kernel.production.rhs.getClass().getName() == java.util.ArrayList.class
this.kernel.production.reduceAction != null
this.kernel.production.lastTerminal.getClass().getName() == main.ParserSpec$Terminals.class
this.kernel.production.precTerminal.getClass().getName() == main.ParserSpec$Terminals.class
this.kernel.production.rhsSizeWithoutEpsilon one of { 1, 2, 3 }
this.kernel.position one of { 0, 1, 2 }
size(this.kernel.production.rhs[]) one of { 1, 2, 3 }
===========================================================================
edu.tum.cup2.generator.items.LR1Item.computeNextLookaheadSymbols(edu.tum.cup2.generator.FirstSets, edu.tum.cup2.generator.NullableSet):::EXIT
this.kernel == orig(this.kernel)
this.kernel.production == orig(this.kernel.production)
this.kernel.production.id == orig(this.kernel.production.id)
this.kernel.production.lhs == orig(this.kernel.production.lhs)
this.kernel.production.lhs.getClass().getName() == orig(this.kernel.production.lhs.getClass().getName())
this.kernel.production.rhs == orig(this.kernel.production.rhs)
this.kernel.production.rhs[] == orig(this.kernel.production.rhs[])
this.kernel.production.rhs.getClass().getName() == orig(this.kernel.production.rhs.getClass().getName())
this.kernel.production.reduceAction == orig(this.kernel.production.reduceAction)
this.kernel.production.lastTerminal == orig(this.kernel.production.lastTerminal)
this.kernel.production.lastTerminal.getClass().getName() == orig(this.kernel.production.lastTerminal.getClass().getName())
this.kernel.production.precTerminal == orig(this.kernel.production.precTerminal)
this.kernel.production.precTerminal.getClass().getName() == orig(this.kernel.production.precTerminal.getClass().getName())
this.kernel.production.rhsSizeWithoutEpsilon == orig(this.kernel.production.rhsSizeWithoutEpsilon)
this.kernel.production.hashCode == orig(this.kernel.production.hashCode)
this.kernel.position == orig(this.kernel.position)
this.kernel.nextSymbol == orig(this.kernel.nextSymbol)
this.kernel.nextSymbol.getClass().getName() == orig(this.kernel.nextSymbol.getClass().getName())
this.kernel.hashCode == orig(this.kernel.hashCode)
this.kernel.shiftable == orig(this.kernel.shiftable)
this.lookaheads == orig(this.lookaheads)
this.lookaheads.getClass().getName() == orig(this.lookaheads.getClass().getName())
this.nextLookaheads == orig(this.nextLookaheads)
this.hashCode == orig(this.hashCode)
arg0.data == orig(arg0.data)
arg0.data.getClass().getName() == orig(arg0.data.getClass().getName())
this.kernel.nextSymbol != null
this.kernel.nextSymbol.getClass().getName() == main.ParserSpec$NonTerminals.class
this.kernel.shiftable == true
this.nextLookaheads == null
arg0.data has only one value
arg0.data != null
arg0.data.getClass().getName() == java.util.HashMap.class
return != null
return.getClass().getName() == edu.tum.cup2.generator.terminals.EfficientTerminalSet.class
===========================================================================
edu.tum.cup2.generator.items.LR1Item.equals(java.lang.Object):::ENTER
this.kernel.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
this.kernel.production.rhs.getClass().getName() == java.util.ArrayList.class
this.kernel.production.reduceAction != null
this.kernel.production.lastTerminal.getClass().getName() == main.ParserSpec$Terminals.class
this.kernel.production.precTerminal.getClass().getName() == main.ParserSpec$Terminals.class
this.kernel.production.rhsSizeWithoutEpsilon >= 1
this.kernel.position one of { 1, 2, 4 }
this.nextLookaheads == null
arg0 != null
arg0.getClass().getName() == edu.tum.cup2.generator.items.LR1Item.class
===========================================================================
edu.tum.cup2.generator.items.LR1Item.equals(java.lang.Object):::EXIT3
===========================================================================
edu.tum.cup2.generator.items.LR1Item.equals(java.lang.Object):::EXIT3;condition="return == true"
===========================================================================
edu.tum.cup2.generator.items.LR1Item.equals(java.lang.Object):::EXIT
this.kernel == orig(this.kernel)
this.kernel.production == orig(this.kernel.production)
this.kernel.production.id == orig(this.kernel.production.id)
this.kernel.production.lhs == orig(this.kernel.production.lhs)
this.kernel.production.lhs.getClass().getName() == orig(this.kernel.production.lhs.getClass().getName())
this.kernel.production.rhs == orig(this.kernel.production.rhs)
this.kernel.production.rhs[] == orig(this.kernel.production.rhs[])
this.kernel.production.rhs.getClass().getName() == orig(this.kernel.production.rhs.getClass().getName())
this.kernel.production.reduceAction == orig(this.kernel.production.reduceAction)
this.kernel.production.lastTerminal == orig(this.kernel.production.lastTerminal)
this.kernel.production.lastTerminal.getClass().getName() == orig(this.kernel.production.lastTerminal.getClass().getName())
this.kernel.production.precTerminal == orig(this.kernel.production.precTerminal)
this.kernel.production.precTerminal.getClass().getName() == orig(this.kernel.production.precTerminal.getClass().getName())
this.kernel.production.rhsSizeWithoutEpsilon == orig(this.kernel.production.rhsSizeWithoutEpsilon)
this.kernel.production.hashCode == orig(this.kernel.production.hashCode)
this.kernel.position == orig(this.kernel.position)
this.kernel.nextSymbol == orig(this.kernel.nextSymbol)
this.kernel.nextSymbol.getClass().getName() == orig(this.kernel.nextSymbol.getClass().getName())
this.kernel.hashCode == orig(this.kernel.hashCode)
this.kernel.shiftable == orig(this.kernel.shiftable)
this.lookaheads == orig(this.lookaheads)
this.lookaheads.getClass().getName() == orig(this.lookaheads.getClass().getName())
this.nextLookaheads == orig(this.nextLookaheads)
this.hashCode == orig(this.hashCode)
this.kernel.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
this.kernel.production.rhs.getClass().getName() == java.util.ArrayList.class
this.kernel.production.reduceAction != null
this.kernel.production.lastTerminal.getClass().getName() == main.ParserSpec$Terminals.class
this.kernel.production.precTerminal.getClass().getName() == main.ParserSpec$Terminals.class
this.kernel.production.rhsSizeWithoutEpsilon >= 1
this.kernel.position one of { 1, 2, 4 }
this.nextLookaheads == null
return == true
===========================================================================
edu.tum.cup2.generator.items.LR1Item.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
edu.tum.cup2.generator.items.LR1Item.getLR0Kernel():::ENTER
===========================================================================
edu.tum.cup2.generator.items.LR1Item.getLR0Kernel():::EXIT
this.kernel == orig(this.kernel)
this.kernel.production == orig(this.kernel.production)
this.kernel.production.id == orig(this.kernel.production.id)
this.kernel.production.lhs == orig(this.kernel.production.lhs)
this.kernel.production.lhs.getClass().getName() == orig(this.kernel.production.lhs.getClass().getName())
this.kernel.production.rhs == orig(this.kernel.production.rhs)
this.kernel.production.rhs[] == orig(this.kernel.production.rhs[])
this.kernel.production.rhs.getClass().getName() == orig(this.kernel.production.rhs.getClass().getName())
this.kernel.production.reduceAction == orig(this.kernel.production.reduceAction)
this.kernel.production.lastTerminal == orig(this.kernel.production.lastTerminal)
this.kernel.production.lastTerminal.getClass().getName() == orig(this.kernel.production.lastTerminal.getClass().getName())
this.kernel.production.precTerminal == orig(this.kernel.production.precTerminal)
this.kernel.production.precTerminal.getClass().getName() == orig(this.kernel.production.precTerminal.getClass().getName())
this.kernel.production.rhsSizeWithoutEpsilon == orig(this.kernel.production.rhsSizeWithoutEpsilon)
this.kernel.production.hashCode == orig(this.kernel.production.hashCode)
this.kernel.position == orig(this.kernel.position)
this.kernel.nextSymbol == orig(this.kernel.nextSymbol)
this.kernel.nextSymbol.getClass().getName() == orig(this.kernel.nextSymbol.getClass().getName())
this.kernel.hashCode == orig(this.kernel.hashCode)
this.kernel.shiftable == orig(this.kernel.shiftable)
this.lookaheads == orig(this.lookaheads)
this.lookaheads.getClass().getName() == orig(this.lookaheads.getClass().getName())
this.nextLookaheads == orig(this.nextLookaheads)
this.nextLookaheads.getClass().getName() == orig(this.nextLookaheads.getClass().getName())
this.hashCode == orig(this.hashCode)
return != null
return.production != null
return.production.lhs != null
return.production.rhs != null
return.production.rhs[] elements != null
return.production.hashCode != 0
return.position >= 0
return.hashCode != 0
size(return.production.rhs[]) >= 1
===========================================================================
edu.tum.cup2.generator.items.LR1Item.getLookaheads():::ENTER
this.nextLookaheads == null
===========================================================================
edu.tum.cup2.generator.items.LR1Item.getLookaheads():::EXIT
this.kernel == orig(this.kernel)
this.kernel.production == orig(this.kernel.production)
this.kernel.production.id == orig(this.kernel.production.id)
this.kernel.production.lhs == orig(this.kernel.production.lhs)
this.kernel.production.lhs.getClass().getName() == orig(this.kernel.production.lhs.getClass().getName())
this.kernel.production.rhs == orig(this.kernel.production.rhs)
this.kernel.production.rhs[] == orig(this.kernel.production.rhs[])
this.kernel.production.rhs.getClass().getName() == orig(this.kernel.production.rhs.getClass().getName())
this.kernel.production.reduceAction == orig(this.kernel.production.reduceAction)
this.kernel.production.lastTerminal == orig(this.kernel.production.lastTerminal)
this.kernel.production.lastTerminal.getClass().getName() == orig(this.kernel.production.lastTerminal.getClass().getName())
this.kernel.production.precTerminal == orig(this.kernel.production.precTerminal)
this.kernel.production.precTerminal.getClass().getName() == orig(this.kernel.production.precTerminal.getClass().getName())
this.kernel.production.rhsSizeWithoutEpsilon == orig(this.kernel.production.rhsSizeWithoutEpsilon)
this.kernel.production.hashCode == orig(this.kernel.production.hashCode)
this.kernel.position == orig(this.kernel.position)
this.kernel.nextSymbol == orig(this.kernel.nextSymbol)
this.kernel.nextSymbol.getClass().getName() == orig(this.kernel.nextSymbol.getClass().getName())
this.kernel.hashCode == orig(this.kernel.hashCode)
this.kernel.shiftable == orig(this.kernel.shiftable)
this.lookaheads == orig(this.lookaheads)
this.lookaheads.getClass().getName() == orig(this.lookaheads.getClass().getName())
this.nextLookaheads == orig(this.nextLookaheads)
this.hashCode == orig(this.hashCode)
this.nextLookaheads == null
return != null
return.getClass().getName() == edu.tum.cup2.generator.terminals.EfficientTerminalSet.class
===========================================================================
edu.tum.cup2.generator.items.LR1Item.getNextLookaheads(edu.tum.cup2.generator.FirstSets, edu.tum.cup2.generator.NullableSet):::ENTER
this.kernel.nextSymbol != null
this.kernel.nextSymbol.getClass().getName() == main.ParserSpec$NonTerminals.class
this.kernel.shiftable == true
this.nextLookaheads == null
arg0 has only one value
arg0 != null
arg0.data has only one value
arg0.data != null
arg0.data.getClass().getName() == java.util.HashMap.class
arg1 has only one value
arg1 != null
===========================================================================
edu.tum.cup2.generator.items.LR1Item.getNextLookaheads(edu.tum.cup2.generator.FirstSets, edu.tum.cup2.generator.NullableSet):::EXIT
this.kernel == orig(this.kernel)
this.kernel.production == orig(this.kernel.production)
this.kernel.production.id == orig(this.kernel.production.id)
this.kernel.production.lhs == orig(this.kernel.production.lhs)
this.kernel.production.lhs.getClass().getName() == orig(this.kernel.production.lhs.getClass().getName())
this.kernel.production.rhs == orig(this.kernel.production.rhs)
this.kernel.production.rhs[] == orig(this.kernel.production.rhs[])
this.kernel.production.rhs.getClass().getName() == orig(this.kernel.production.rhs.getClass().getName())
this.kernel.production.reduceAction == orig(this.kernel.production.reduceAction)
this.kernel.production.lastTerminal == orig(this.kernel.production.lastTerminal)
this.kernel.production.lastTerminal.getClass().getName() == orig(this.kernel.production.lastTerminal.getClass().getName())
this.kernel.production.precTerminal == orig(this.kernel.production.precTerminal)
this.kernel.production.precTerminal.getClass().getName() == orig(this.kernel.production.precTerminal.getClass().getName())
this.kernel.production.rhsSizeWithoutEpsilon == orig(this.kernel.production.rhsSizeWithoutEpsilon)
this.kernel.production.hashCode == orig(this.kernel.production.hashCode)
this.kernel.position == orig(this.kernel.position)
this.kernel.nextSymbol == orig(this.kernel.nextSymbol)
this.kernel.nextSymbol.getClass().getName() == orig(this.kernel.nextSymbol.getClass().getName())
this.kernel.hashCode == orig(this.kernel.hashCode)
this.kernel.shiftable == orig(this.kernel.shiftable)
this.lookaheads == orig(this.lookaheads)
this.lookaheads.getClass().getName() == orig(this.lookaheads.getClass().getName())
this.hashCode == orig(this.hashCode)
arg0.data == orig(arg0.data)
arg0.data.getClass().getName() == orig(arg0.data.getClass().getName())
this.kernel.nextSymbol != null
this.kernel.nextSymbol.getClass().getName() == main.ParserSpec$NonTerminals.class
this.kernel.shiftable == true
this.nextLookaheads != null
arg0.data has only one value
arg0.data != null
arg0.data.getClass().getName() == java.util.HashMap.class
return != null
return.getClass().getName() == edu.tum.cup2.generator.terminals.EfficientTerminalSet.class
===========================================================================
edu.tum.cup2.generator.items.LR1Item.getNextSymbol():::ENTER
this.nextLookaheads == null
===========================================================================
edu.tum.cup2.generator.items.LR1Item.getNextSymbol():::EXIT
this.kernel == orig(this.kernel)
this.kernel.production == orig(this.kernel.production)
this.kernel.production.id == orig(this.kernel.production.id)
this.kernel.production.lhs == orig(this.kernel.production.lhs)
this.kernel.production.lhs.getClass().getName() == orig(this.kernel.production.lhs.getClass().getName())
this.kernel.production.rhs == orig(this.kernel.production.rhs)
this.kernel.production.rhs[] == orig(this.kernel.production.rhs[])
this.kernel.production.rhs.getClass().getName() == orig(this.kernel.production.rhs.getClass().getName())
this.kernel.production.reduceAction == orig(this.kernel.production.reduceAction)
this.kernel.production.lastTerminal == orig(this.kernel.production.lastTerminal)
this.kernel.production.lastTerminal.getClass().getName() == orig(this.kernel.production.lastTerminal.getClass().getName())
this.kernel.production.precTerminal == orig(this.kernel.production.precTerminal)
this.kernel.production.precTerminal.getClass().getName() == orig(this.kernel.production.precTerminal.getClass().getName())
this.kernel.production.rhsSizeWithoutEpsilon == orig(this.kernel.production.rhsSizeWithoutEpsilon)
this.kernel.production.hashCode == orig(this.kernel.production.hashCode)
this.kernel.position == orig(this.kernel.position)
this.kernel.nextSymbol == orig(this.kernel.nextSymbol)
this.kernel.nextSymbol.getClass().getName() == orig(this.kernel.nextSymbol.getClass().getName())
this.kernel.hashCode == orig(this.kernel.hashCode)
this.kernel.shiftable == orig(this.kernel.shiftable)
this.lookaheads == orig(this.lookaheads)
this.lookaheads.getClass().getName() == orig(this.lookaheads.getClass().getName())
this.nextLookaheads == orig(this.nextLookaheads)
this.hashCode == orig(this.hashCode)
this.nextLookaheads == null
===========================================================================
edu.tum.cup2.generator.items.LR1Item.getProduction():::ENTER
this.kernel.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
this.kernel.production.rhs.getClass().getName() == java.util.ArrayList.class
this.kernel.production.reduceAction != null
this.kernel.position >= 1
this.kernel.nextSymbol == null
this.kernel.shiftable == false
this.nextLookaheads == null
===========================================================================
edu.tum.cup2.generator.items.LR1Item.getProduction():::EXIT
this.kernel == orig(this.kernel)
this.kernel.production == orig(this.kernel.production)
this.kernel.production.id == orig(this.kernel.production.id)
this.kernel.production.lhs == orig(this.kernel.production.lhs)
this.kernel.production.lhs.getClass().getName() == orig(this.kernel.production.lhs.getClass().getName())
this.kernel.production.rhs == orig(this.kernel.production.rhs)
this.kernel.production.rhs[] == orig(this.kernel.production.rhs[])
this.kernel.production.rhs.getClass().getName() == orig(this.kernel.production.rhs.getClass().getName())
this.kernel.production.reduceAction == orig(this.kernel.production.reduceAction)
this.kernel.production.lastTerminal == orig(this.kernel.production.lastTerminal)
this.kernel.production.lastTerminal.getClass().getName() == orig(this.kernel.production.lastTerminal.getClass().getName())
this.kernel.production.precTerminal == orig(this.kernel.production.precTerminal)
this.kernel.production.precTerminal.getClass().getName() == orig(this.kernel.production.precTerminal.getClass().getName())
this.kernel.production.rhsSizeWithoutEpsilon == orig(this.kernel.production.rhsSizeWithoutEpsilon)
this.kernel.production.hashCode == orig(this.kernel.production.hashCode)
this.kernel.position == orig(this.kernel.position)
this.kernel.nextSymbol == orig(this.kernel.nextSymbol)
this.kernel.hashCode == orig(this.kernel.hashCode)
this.kernel.shiftable == orig(this.kernel.shiftable)
this.lookaheads == orig(this.lookaheads)
this.lookaheads.getClass().getName() == orig(this.lookaheads.getClass().getName())
this.nextLookaheads == orig(this.nextLookaheads)
this.hashCode == orig(this.hashCode)
this.kernel.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
this.kernel.production.rhs.getClass().getName() == java.util.ArrayList.class
this.kernel.production.reduceAction != null
this.kernel.position >= 1
this.kernel.nextSymbol == null
this.kernel.shiftable == false
this.nextLookaheads == null
return != null
return.lhs != null
return.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
return.rhs != null
return.rhs[] elements != null
return.rhs.getClass().getName() == java.util.ArrayList.class
return.reduceAction != null
return.reduceAction.method != null
return.reduceAction.actionSubclass != null
return.reduceAction.paramsCount >= 0
return.reduceAction.returnsVoid == false
return.reduceAction.parserInstance == null
return.rhsSizeWithoutEpsilon >= 0
size(return.rhs[]) >= 1
===========================================================================
edu.tum.cup2.generator.items.LR1Item.hashCode():::ENTER
===========================================================================
edu.tum.cup2.generator.items.LR1Item.hashCode():::EXIT
this.kernel == orig(this.kernel)
this.kernel.production == orig(this.kernel.production)
this.kernel.production.id == orig(this.kernel.production.id)
this.kernel.production.lhs == orig(this.kernel.production.lhs)
this.kernel.production.lhs.getClass().getName() == orig(this.kernel.production.lhs.getClass().getName())
this.kernel.production.rhs == orig(this.kernel.production.rhs)
this.kernel.production.rhs[] == orig(this.kernel.production.rhs[])
this.kernel.production.rhs.getClass().getName() == orig(this.kernel.production.rhs.getClass().getName())
this.kernel.production.reduceAction == orig(this.kernel.production.reduceAction)
this.kernel.production.lastTerminal == orig(this.kernel.production.lastTerminal)
this.kernel.production.lastTerminal.getClass().getName() == orig(this.kernel.production.lastTerminal.getClass().getName())
this.kernel.production.precTerminal == orig(this.kernel.production.precTerminal)
this.kernel.production.precTerminal.getClass().getName() == orig(this.kernel.production.precTerminal.getClass().getName())
this.kernel.production.rhsSizeWithoutEpsilon == orig(this.kernel.production.rhsSizeWithoutEpsilon)
this.kernel.production.hashCode == orig(this.kernel.production.hashCode)
this.kernel.position == orig(this.kernel.position)
this.kernel.nextSymbol == orig(this.kernel.nextSymbol)
this.kernel.nextSymbol.getClass().getName() == orig(this.kernel.nextSymbol.getClass().getName())
this.kernel.hashCode == orig(this.kernel.hashCode)
this.kernel.shiftable == orig(this.kernel.shiftable)
this.lookaheads == orig(this.lookaheads)
this.lookaheads.getClass().getName() == orig(this.lookaheads.getClass().getName())
this.nextLookaheads == orig(this.nextLookaheads)
this.nextLookaheads.getClass().getName() == orig(this.nextLookaheads.getClass().getName())
this.hashCode == orig(this.hashCode)
return != 0
===========================================================================
edu.tum.cup2.generator.items.LR1Item.isShiftable():::ENTER
this.nextLookaheads == null
===========================================================================
edu.tum.cup2.generator.items.LR1Item.isShiftable():::EXIT
this.kernel == orig(this.kernel)
this.kernel.production == orig(this.kernel.production)
this.kernel.production.id == orig(this.kernel.production.id)
this.kernel.production.lhs == orig(this.kernel.production.lhs)
this.kernel.production.lhs.getClass().getName() == orig(this.kernel.production.lhs.getClass().getName())
this.kernel.production.rhs == orig(this.kernel.production.rhs)
this.kernel.production.rhs[] == orig(this.kernel.production.rhs[])
this.kernel.production.rhs.getClass().getName() == orig(this.kernel.production.rhs.getClass().getName())
this.kernel.production.reduceAction == orig(this.kernel.production.reduceAction)
this.kernel.production.lastTerminal == orig(this.kernel.production.lastTerminal)
this.kernel.production.lastTerminal.getClass().getName() == orig(this.kernel.production.lastTerminal.getClass().getName())
this.kernel.production.precTerminal == orig(this.kernel.production.precTerminal)
this.kernel.production.precTerminal.getClass().getName() == orig(this.kernel.production.precTerminal.getClass().getName())
this.kernel.production.rhsSizeWithoutEpsilon == orig(this.kernel.production.rhsSizeWithoutEpsilon)
this.kernel.production.hashCode == orig(this.kernel.production.hashCode)
this.kernel.position == orig(this.kernel.position)
this.kernel.nextSymbol == orig(this.kernel.nextSymbol)
this.kernel.nextSymbol.getClass().getName() == orig(this.kernel.nextSymbol.getClass().getName())
this.kernel.hashCode == orig(this.kernel.hashCode)
this.kernel.shiftable == orig(this.kernel.shiftable)
this.lookaheads == orig(this.lookaheads)
this.lookaheads.getClass().getName() == orig(this.lookaheads.getClass().getName())
this.nextLookaheads == orig(this.nextLookaheads)
this.hashCode == orig(this.hashCode)
(this.kernel.nextSymbol != null)  <==>  (return == true)
(this.kernel.nextSymbol != null)  <==>  (this.kernel.shiftable == true)
(this.kernel.nextSymbol != null)  ==>  (this.kernel.production.rhsSizeWithoutEpsilon >= 1)
(this.kernel.nextSymbol == null)  <==>  (return == false)
(this.kernel.nextSymbol == null)  <==>  (this.kernel.shiftable == false)
(this.kernel.nextSymbol == null)  ==>  (this.kernel.position >= 1)
(this.kernel.nextSymbol == null)  ==>  (this.kernel.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class)
(this.kernel.nextSymbol == null)  ==>  (this.kernel.production.reduceAction != null)
(this.kernel.nextSymbol == null)  ==>  (this.kernel.production.rhs.getClass().getName() == java.util.ArrayList.class)
this.nextLookaheads == null
===========================================================================
edu.tum.cup2.generator.items.LR1Item.isShiftable():::EXIT;condition="return == true"
this.kernel.production.rhsSizeWithoutEpsilon >= 1
this.kernel.nextSymbol != null
this.kernel.shiftable == true
return == true
===========================================================================
edu.tum.cup2.generator.items.LR1Item.isShiftable():::EXIT;condition="not(return == true)"
this.kernel.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
this.kernel.production.rhs.getClass().getName() == java.util.ArrayList.class
this.kernel.production.reduceAction != null
this.kernel.position >= 1
this.kernel.nextSymbol == null
this.kernel.shiftable == false
return == false
===========================================================================
edu.tum.cup2.generator.items.LR1Item.merge(edu.tum.cup2.generator.items.LR1Item):::ENTER
this.kernel.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
this.kernel.production.rhs.getClass().getName() == java.util.ArrayList.class
this.kernel.production.reduceAction != null
this.kernel.production.lastTerminal.getClass().getName() == main.ParserSpec$Terminals.class
this.kernel.production.precTerminal.getClass().getName() == main.ParserSpec$Terminals.class
this.kernel.production.rhsSizeWithoutEpsilon >= 1
this.kernel.position >= 1
arg0 != null
arg0.kernel != null
arg0.kernel.production != null
arg0.kernel.position >= 1
arg0.kernel.hashCode != 0
arg0.lookaheads != null
arg0.lookaheads.getClass().getName() == edu.tum.cup2.generator.terminals.EfficientTerminalSet.class
arg0.nextLookaheads == null
arg0.hashCode != 0
===========================================================================
edu.tum.cup2.generator.items.LR1Item.merge(edu.tum.cup2.generator.items.LR1Item):::EXIT
this.kernel == orig(this.kernel)
this.kernel.production == orig(this.kernel.production)
this.kernel.production.id == orig(this.kernel.production.id)
this.kernel.production.lhs == orig(this.kernel.production.lhs)
this.kernel.production.lhs.getClass().getName() == orig(this.kernel.production.lhs.getClass().getName())
this.kernel.production.rhs == orig(this.kernel.production.rhs)
this.kernel.production.rhs[] == orig(this.kernel.production.rhs[])
this.kernel.production.rhs.getClass().getName() == orig(this.kernel.production.rhs.getClass().getName())
this.kernel.production.reduceAction == orig(this.kernel.production.reduceAction)
this.kernel.production.lastTerminal == orig(this.kernel.production.lastTerminal)
this.kernel.production.lastTerminal.getClass().getName() == orig(this.kernel.production.lastTerminal.getClass().getName())
this.kernel.production.precTerminal == orig(this.kernel.production.precTerminal)
this.kernel.production.precTerminal.getClass().getName() == orig(this.kernel.production.precTerminal.getClass().getName())
this.kernel.production.rhsSizeWithoutEpsilon == orig(this.kernel.production.rhsSizeWithoutEpsilon)
this.kernel.production.hashCode == orig(this.kernel.production.hashCode)
this.kernel.position == orig(this.kernel.position)
this.kernel.nextSymbol == orig(this.kernel.nextSymbol)
this.kernel.nextSymbol.getClass().getName() == orig(this.kernel.nextSymbol.getClass().getName())
this.kernel.hashCode == orig(this.kernel.hashCode)
this.kernel.shiftable == orig(this.kernel.shiftable)
this.lookaheads == orig(this.lookaheads)
this.lookaheads.getClass().getName() == orig(this.lookaheads.getClass().getName())
this.nextLookaheads == orig(this.nextLookaheads)
this.nextLookaheads.getClass().getName() == orig(this.nextLookaheads.getClass().getName())
this.hashCode == orig(this.hashCode)
arg0.kernel == orig(arg0.kernel)
arg0.kernel.production == orig(arg0.kernel.production)
arg0.kernel.position == orig(arg0.kernel.position)
arg0.kernel.nextSymbol == orig(arg0.kernel.nextSymbol)
arg0.kernel.nextSymbol.getClass().getName() == orig(arg0.kernel.nextSymbol.getClass().getName())
arg0.kernel.hashCode == orig(arg0.kernel.hashCode)
arg0.kernel.shiftable == orig(arg0.kernel.shiftable)
arg0.lookaheads == orig(arg0.lookaheads)
arg0.lookaheads.getClass().getName() == orig(arg0.lookaheads.getClass().getName())
arg0.nextLookaheads == orig(arg0.nextLookaheads)
arg0.hashCode == orig(arg0.hashCode)
this.kernel.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
this.kernel.production.rhs.getClass().getName() == java.util.ArrayList.class
this.kernel.production.reduceAction != null
this.kernel.production.lastTerminal.getClass().getName() == main.ParserSpec$Terminals.class
this.kernel.production.precTerminal.getClass().getName() == main.ParserSpec$Terminals.class
this.kernel.production.rhsSizeWithoutEpsilon >= 1
this.kernel.position >= 1
arg0.kernel != null
arg0.kernel.production != null
arg0.kernel.position >= 1
arg0.kernel.hashCode != 0
arg0.lookaheads != null
arg0.lookaheads.getClass().getName() == edu.tum.cup2.generator.terminals.EfficientTerminalSet.class
arg0.nextLookaheads == null
arg0.hashCode != 0
return != null
return.kernel != null
return.kernel.production != null
return.kernel.position >= 1
return.kernel.hashCode != 0
return.lookaheads != null
return.lookaheads.getClass().getName() == edu.tum.cup2.generator.terminals.EfficientTerminalSet.class
return.nextLookaheads == null
return.hashCode != 0
===========================================================================
edu.tum.cup2.generator.items.LR1Item.shift():::ENTER
this.kernel.production.rhsSizeWithoutEpsilon >= 1
this.kernel.nextSymbol != null
this.kernel.shiftable == true
this.nextLookaheads == null
===========================================================================
edu.tum.cup2.generator.items.LR1Item.shift():::EXIT
this.kernel == orig(this.kernel)
this.kernel.production == orig(this.kernel.production)
this.kernel.production.id == orig(this.kernel.production.id)
this.kernel.production.lhs == orig(this.kernel.production.lhs)
this.kernel.production.lhs.getClass().getName() == orig(this.kernel.production.lhs.getClass().getName())
this.kernel.production.rhs == orig(this.kernel.production.rhs)
this.kernel.production.rhs[] == orig(this.kernel.production.rhs[])
this.kernel.production.rhs.getClass().getName() == orig(this.kernel.production.rhs.getClass().getName())
this.kernel.production.reduceAction == orig(this.kernel.production.reduceAction)
this.kernel.production.lastTerminal == orig(this.kernel.production.lastTerminal)
this.kernel.production.lastTerminal.getClass().getName() == orig(this.kernel.production.lastTerminal.getClass().getName())
this.kernel.production.precTerminal == orig(this.kernel.production.precTerminal)
this.kernel.production.precTerminal.getClass().getName() == orig(this.kernel.production.precTerminal.getClass().getName())
this.kernel.production.rhsSizeWithoutEpsilon == orig(this.kernel.production.rhsSizeWithoutEpsilon)
this.kernel.production.hashCode == orig(this.kernel.production.hashCode)
this.kernel.position == orig(this.kernel.position)
this.kernel.nextSymbol == orig(this.kernel.nextSymbol)
this.kernel.nextSymbol.getClass().getName() == orig(this.kernel.nextSymbol.getClass().getName())
this.kernel.hashCode == orig(this.kernel.hashCode)
this.kernel.shiftable == orig(this.kernel.shiftable)
this.lookaheads == orig(this.lookaheads)
this.lookaheads.getClass().getName() == orig(this.lookaheads.getClass().getName())
this.nextLookaheads == orig(this.nextLookaheads)
this.hashCode == orig(this.hashCode)
this.kernel.production.rhsSizeWithoutEpsilon >= 1
this.kernel.nextSymbol != null
this.kernel.shiftable == true
this.nextLookaheads == null
return != null
return.kernel != null
return.kernel.production != null
return.kernel.position >= 1
return.kernel.hashCode != 0
return.lookaheads != null
return.lookaheads.getClass().getName() == edu.tum.cup2.generator.terminals.EfficientTerminalSet.class
return.nextLookaheads == null
return.hashCode != 0
===========================================================================
edu.tum.cup2.generator.states.LR0State:::OBJECT
this.hashCode != 0
this.items != null
this.items.getClass().getName() == java.util.HashMap$KeySet.class
===========================================================================
edu.tum.cup2.generator.states.LR0State.LR0State(java.util.Collection):::ENTER
arg0 != null
arg0.getClass().getName() == java.util.HashMap$KeySet.class
===========================================================================
edu.tum.cup2.generator.states.LR0State.LR0State(java.util.Collection):::EXIT
===========================================================================
edu.tum.cup2.generator.states.LR0State.equals(java.lang.Object):::ENTER
arg0 != null
arg0.getClass().getName() == edu.tum.cup2.generator.states.LR0State.class
===========================================================================
edu.tum.cup2.generator.states.LR0State.equals(java.lang.Object):::EXIT3
===========================================================================
edu.tum.cup2.generator.states.LR0State.equals(java.lang.Object):::EXIT3;condition="return == true"
===========================================================================
edu.tum.cup2.generator.states.LR0State.equals(java.lang.Object):::EXIT
this.hashCode == orig(this.hashCode)
this.items == orig(this.items)
this.items.getClass().getName() == orig(this.items.getClass().getName())
return == true
===========================================================================
edu.tum.cup2.generator.states.LR0State.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
edu.tum.cup2.generator.states.LR0State.hashCode():::ENTER
===========================================================================
edu.tum.cup2.generator.states.LR0State.hashCode():::EXIT
this.hashCode == orig(this.hashCode)
this.items == orig(this.items)
this.items.getClass().getName() == orig(this.items.getClass().getName())
return != 0
===========================================================================
edu.tum.cup2.generator.states.LR1State:::OBJECT
this.kernel != null
this.kernel.hashCode != 0
this.kernel.items != null
this.kernel.items.getClass().getName() == java.util.HashMap$KeySet.class
this.itemsWithKernels != null
this.hashCode != 0
this.closureCache.kernel != null
this.closureCache.kernel.hashCode != 0
this.closureCache.kernel.items != null
this.closureCache.kernel.items.getClass().getName() == java.util.HashMap$KeySet.class
this.closureCache.itemsWithKernels != null
this.closureCache.hashCode != 0
this.closureCache.closureCache == null
this.closureCache.items != null
this.closureCache.items.getClass().getName() == java.util.HashSet.class
this.items != null
this.items.getClass().getName() == java.util.HashSet.class
===========================================================================
edu.tum.cup2.generator.states.LR1State.LR1State(java.util.HashSet):::ENTER
arg0 != null
===========================================================================
edu.tum.cup2.generator.states.LR1State.LR1State(java.util.HashSet):::EXIT
this.closureCache == null
===========================================================================
edu.tum.cup2.generator.states.LR1State.closure(edu.tum.cup2.generator.GrammarInfo):::ENTER
arg0 has only one value
arg0 != null
arg0.grammar has only one value
arg0.grammar != null
arg0.grammar.terminals has only one value
arg0.grammar.terminals != null
arg0.grammar.terminals[] contains no nulls and has only one value, of length 30
arg0.grammar.terminals[] elements != null
arg0.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.grammar.nonTerminals has only one value
arg0.grammar.nonTerminals != null
arg0.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
arg0.grammar.nonTerminals[] elements != null
arg0.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
arg0.grammar.productions has only one value
arg0.grammar.productions != null
arg0.grammar.productions[] contains no nulls and has only one value, of length 48
arg0.grammar.productions[] elements != null
arg0.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg0.nullableSet has only one value
arg0.nullableSet != null
arg0.firstSets has only one value
arg0.firstSets != null
arg0.firstSets.data has only one value
arg0.firstSets.data != null
arg0.firstSets.data.getClass().getName() == java.util.HashMap.class
arg0.productionsStartingWith has only one value
arg0.productionsStartingWith != null
arg0.emptyTerminalsSet has only one value
arg0.emptyTerminalsSet != null
arg0.emptyTerminalsSet.data has only one value
arg0.emptyTerminalsSet.data != null
arg0.emptyTerminalsSet.data[] == [0, 0]
arg0.emptyTerminalsSet.data[] elements == 0
arg0.emptyTerminalsSet.indices has only one value
arg0.emptyTerminalsSet.indices != null
arg0.emptyTerminalsSet.indices.getClass().getName() == java.util.HashMap.class
arg0.emptyTerminalsSet.terminals has only one value
arg0.emptyTerminalsSet.terminals != null
arg0.emptyTerminalsSet.terminals.getClass().getName() == java.util.LinkedList.class
arg0.emptyTerminalsSet.indexEpsilon == 0
size(arg0.grammar.terminals[]) == 30
size(arg0.grammar.nonTerminals[]) == 16
size(arg0.grammar.productions[]) == 48
size(arg0.emptyTerminalsSet.data[]) == 2
===========================================================================
edu.tum.cup2.generator.states.LR1State.closure(edu.tum.cup2.generator.GrammarInfo):::EXIT
this.kernel == orig(this.kernel)
this.kernel.hashCode == orig(this.kernel.hashCode)
this.kernel.items == orig(this.kernel.items)
this.kernel.items.getClass().getName() == orig(this.kernel.items.getClass().getName())
this.itemsWithKernels == orig(this.itemsWithKernels)
this.hashCode == orig(this.hashCode)
this.closureCache.kernel == orig(this.closureCache.kernel)
this.closureCache.kernel.hashCode == orig(this.closureCache.kernel.hashCode)
this.closureCache.kernel.items == orig(this.closureCache.kernel.items)
this.closureCache.kernel.items.getClass().getName() == orig(this.closureCache.kernel.items.getClass().getName())
this.closureCache.itemsWithKernels == orig(this.closureCache.itemsWithKernels)
this.closureCache.hashCode == orig(this.closureCache.hashCode)
this.closureCache.closureCache == orig(this.closureCache.closureCache)
this.closureCache.items == orig(this.closureCache.items)
this.closureCache.items.getClass().getName() == orig(this.closureCache.items.getClass().getName())
this.items == orig(this.items)
this.items.getClass().getName() == orig(this.items.getClass().getName())
arg0.grammar == orig(arg0.grammar)
arg0.grammar.terminals == orig(arg0.grammar.terminals)
arg0.grammar.terminals[] == orig(arg0.grammar.terminals[])
arg0.grammar.nonTerminals == orig(arg0.grammar.nonTerminals)
arg0.grammar.nonTerminals[] == orig(arg0.grammar.nonTerminals[])
arg0.grammar.productions == orig(arg0.grammar.productions)
arg0.grammar.productions[] == orig(arg0.grammar.productions[])
arg0.nullableSet == orig(arg0.nullableSet)
arg0.firstSets == orig(arg0.firstSets)
arg0.firstSets.data == orig(arg0.firstSets.data)
arg0.firstSets.data.getClass().getName() == orig(arg0.firstSets.data.getClass().getName())
arg0.productionsStartingWith == orig(arg0.productionsStartingWith)
arg0.emptyTerminalsSet == orig(arg0.emptyTerminalsSet)
arg0.emptyTerminalsSet.data == orig(arg0.emptyTerminalsSet.data)
arg0.emptyTerminalsSet.data[] == orig(arg0.emptyTerminalsSet.data[])
arg0.emptyTerminalsSet.indices == orig(arg0.emptyTerminalsSet.indices)
arg0.emptyTerminalsSet.indices.getClass().getName() == orig(arg0.emptyTerminalsSet.indices.getClass().getName())
arg0.emptyTerminalsSet.terminals == orig(arg0.emptyTerminalsSet.terminals)
arg0.emptyTerminalsSet.terminals.getClass().getName() == orig(arg0.emptyTerminalsSet.terminals.getClass().getName())
arg0.emptyTerminalsSet.indexEpsilon == orig(arg0.emptyTerminalsSet.indexEpsilon)
this.closureCache != null
arg0.grammar has only one value
arg0.grammar != null
arg0.grammar.terminals has only one value
arg0.grammar.terminals != null
arg0.grammar.terminals[] contains no nulls and has only one value, of length 30
arg0.grammar.terminals[] elements != null
arg0.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.grammar.nonTerminals has only one value
arg0.grammar.nonTerminals != null
arg0.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
arg0.grammar.nonTerminals[] elements != null
arg0.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
arg0.grammar.productions has only one value
arg0.grammar.productions != null
arg0.grammar.productions[] contains no nulls and has only one value, of length 48
arg0.grammar.productions[] elements != null
arg0.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg0.nullableSet has only one value
arg0.nullableSet != null
arg0.firstSets has only one value
arg0.firstSets != null
arg0.firstSets.data has only one value
arg0.firstSets.data != null
arg0.firstSets.data.getClass().getName() == java.util.HashMap.class
arg0.productionsStartingWith has only one value
arg0.productionsStartingWith != null
arg0.emptyTerminalsSet has only one value
arg0.emptyTerminalsSet != null
arg0.emptyTerminalsSet.data has only one value
arg0.emptyTerminalsSet.data != null
arg0.emptyTerminalsSet.data[] == [0, 0]
arg0.emptyTerminalsSet.data[] elements == 0
arg0.emptyTerminalsSet.indices has only one value
arg0.emptyTerminalsSet.indices != null
arg0.emptyTerminalsSet.indices.getClass().getName() == java.util.HashMap.class
arg0.emptyTerminalsSet.terminals has only one value
arg0.emptyTerminalsSet.terminals != null
arg0.emptyTerminalsSet.terminals.getClass().getName() == java.util.LinkedList.class
arg0.emptyTerminalsSet.indexEpsilon == 0
return != null
return.kernel != null
return.kernel.hashCode != 0
return.kernel.items != null
return.kernel.items.getClass().getName() == java.util.HashMap$KeySet.class
return.itemsWithKernels != null
return.hashCode != 0
return.closureCache == null
return.items != null
return.items.getClass().getName() == java.util.HashSet.class
size(arg0.grammar.terminals[]) == 30
size(arg0.grammar.nonTerminals[]) == 16
size(arg0.grammar.productions[]) == 48
size(arg0.emptyTerminalsSet.data[]) == 2
===========================================================================
edu.tum.cup2.generator.states.LR1State.closureItems(edu.tum.cup2.generator.GrammarInfo):::ENTER
this.closureCache == null
arg0 has only one value
arg0 != null
arg0.grammar has only one value
arg0.grammar != null
arg0.grammar.terminals has only one value
arg0.grammar.terminals != null
arg0.grammar.terminals[] contains no nulls and has only one value, of length 30
arg0.grammar.terminals[] elements != null
arg0.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.grammar.nonTerminals has only one value
arg0.grammar.nonTerminals != null
arg0.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
arg0.grammar.nonTerminals[] elements != null
arg0.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
arg0.grammar.productions has only one value
arg0.grammar.productions != null
arg0.grammar.productions[] contains no nulls and has only one value, of length 48
arg0.grammar.productions[] elements != null
arg0.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg0.nullableSet has only one value
arg0.nullableSet != null
arg0.firstSets has only one value
arg0.firstSets != null
arg0.firstSets.data has only one value
arg0.firstSets.data != null
arg0.firstSets.data.getClass().getName() == java.util.HashMap.class
arg0.productionsStartingWith has only one value
arg0.productionsStartingWith != null
arg0.emptyTerminalsSet has only one value
arg0.emptyTerminalsSet != null
arg0.emptyTerminalsSet.data has only one value
arg0.emptyTerminalsSet.data != null
arg0.emptyTerminalsSet.data[] == [0, 0]
arg0.emptyTerminalsSet.data[] elements == 0
arg0.emptyTerminalsSet.indices has only one value
arg0.emptyTerminalsSet.indices != null
arg0.emptyTerminalsSet.indices.getClass().getName() == java.util.HashMap.class
arg0.emptyTerminalsSet.terminals has only one value
arg0.emptyTerminalsSet.terminals != null
arg0.emptyTerminalsSet.terminals.getClass().getName() == java.util.LinkedList.class
arg0.emptyTerminalsSet.indexEpsilon == 0
size(arg0.grammar.terminals[]) == 30
size(arg0.grammar.nonTerminals[]) == 16
size(arg0.grammar.productions[]) == 48
size(arg0.emptyTerminalsSet.data[]) == 2
===========================================================================
edu.tum.cup2.generator.states.LR1State.closureItems(edu.tum.cup2.generator.GrammarInfo):::EXIT
this.kernel == orig(this.kernel)
this.kernel.hashCode == orig(this.kernel.hashCode)
this.kernel.items == orig(this.kernel.items)
this.kernel.items.getClass().getName() == orig(this.kernel.items.getClass().getName())
this.itemsWithKernels == orig(this.itemsWithKernels)
this.hashCode == orig(this.hashCode)
this.closureCache == orig(this.closureCache)
this.items == orig(this.items)
this.items.getClass().getName() == orig(this.items.getClass().getName())
arg0.grammar == orig(arg0.grammar)
arg0.grammar.terminals == orig(arg0.grammar.terminals)
arg0.grammar.terminals[] == orig(arg0.grammar.terminals[])
arg0.grammar.nonTerminals == orig(arg0.grammar.nonTerminals)
arg0.grammar.nonTerminals[] == orig(arg0.grammar.nonTerminals[])
arg0.grammar.productions == orig(arg0.grammar.productions)
arg0.grammar.productions[] == orig(arg0.grammar.productions[])
arg0.nullableSet == orig(arg0.nullableSet)
arg0.firstSets == orig(arg0.firstSets)
arg0.firstSets.data == orig(arg0.firstSets.data)
arg0.firstSets.data.getClass().getName() == orig(arg0.firstSets.data.getClass().getName())
arg0.productionsStartingWith == orig(arg0.productionsStartingWith)
arg0.emptyTerminalsSet == orig(arg0.emptyTerminalsSet)
arg0.emptyTerminalsSet.data == orig(arg0.emptyTerminalsSet.data)
arg0.emptyTerminalsSet.data[] == orig(arg0.emptyTerminalsSet.data[])
arg0.emptyTerminalsSet.indices == orig(arg0.emptyTerminalsSet.indices)
arg0.emptyTerminalsSet.indices.getClass().getName() == orig(arg0.emptyTerminalsSet.indices.getClass().getName())
arg0.emptyTerminalsSet.terminals == orig(arg0.emptyTerminalsSet.terminals)
arg0.emptyTerminalsSet.terminals.getClass().getName() == orig(arg0.emptyTerminalsSet.terminals.getClass().getName())
arg0.emptyTerminalsSet.indexEpsilon == orig(arg0.emptyTerminalsSet.indexEpsilon)
this.closureCache == null
arg0.grammar has only one value
arg0.grammar != null
arg0.grammar.terminals has only one value
arg0.grammar.terminals != null
arg0.grammar.terminals[] contains no nulls and has only one value, of length 30
arg0.grammar.terminals[] elements != null
arg0.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.grammar.nonTerminals has only one value
arg0.grammar.nonTerminals != null
arg0.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
arg0.grammar.nonTerminals[] elements != null
arg0.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
arg0.grammar.productions has only one value
arg0.grammar.productions != null
arg0.grammar.productions[] contains no nulls and has only one value, of length 48
arg0.grammar.productions[] elements != null
arg0.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg0.nullableSet has only one value
arg0.nullableSet != null
arg0.firstSets has only one value
arg0.firstSets != null
arg0.firstSets.data has only one value
arg0.firstSets.data != null
arg0.firstSets.data.getClass().getName() == java.util.HashMap.class
arg0.productionsStartingWith has only one value
arg0.productionsStartingWith != null
arg0.emptyTerminalsSet has only one value
arg0.emptyTerminalsSet != null
arg0.emptyTerminalsSet.data has only one value
arg0.emptyTerminalsSet.data != null
arg0.emptyTerminalsSet.data[] == [0, 0]
arg0.emptyTerminalsSet.data[] elements == 0
arg0.emptyTerminalsSet.indices has only one value
arg0.emptyTerminalsSet.indices != null
arg0.emptyTerminalsSet.indices.getClass().getName() == java.util.HashMap.class
arg0.emptyTerminalsSet.terminals has only one value
arg0.emptyTerminalsSet.terminals != null
arg0.emptyTerminalsSet.terminals.getClass().getName() == java.util.LinkedList.class
arg0.emptyTerminalsSet.indexEpsilon == 0
return != null
size(arg0.grammar.terminals[]) == 30
size(arg0.grammar.nonTerminals[]) == 16
size(arg0.grammar.productions[]) == 48
size(arg0.emptyTerminalsSet.data[]) == 2
===========================================================================
edu.tum.cup2.generator.states.LR1State.equals(java.lang.Object):::ENTER
arg0 != null
arg0.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
===========================================================================
edu.tum.cup2.generator.states.LR1State.equals(java.lang.Object):::EXIT1
this.closureCache != null
return == false
orig(arg0) has only one value
===========================================================================
edu.tum.cup2.generator.states.LR1State.equals(java.lang.Object):::EXIT1;condition="not(return == true)"
===========================================================================
edu.tum.cup2.generator.states.LR1State.equals(java.lang.Object):::EXIT2
return == false
===========================================================================
edu.tum.cup2.generator.states.LR1State.equals(java.lang.Object):::EXIT2;condition="not(return == true)"
===========================================================================
edu.tum.cup2.generator.states.LR1State.equals(java.lang.Object):::EXIT3
this.closureCache.kernel has only one value
this.closureCache.kernel.hashCode == -1240986936
this.closureCache.kernel.items has only one value
this.closureCache.itemsWithKernels has only one value
this.closureCache.hashCode == -732137754
this.closureCache.items has only one value
return == true
===========================================================================
edu.tum.cup2.generator.states.LR1State.equals(java.lang.Object):::EXIT3;condition="return == true"
===========================================================================
edu.tum.cup2.generator.states.LR1State.equals(java.lang.Object):::EXIT
this.kernel == orig(this.kernel)
this.kernel.hashCode == orig(this.kernel.hashCode)
this.kernel.items == orig(this.kernel.items)
this.kernel.items.getClass().getName() == orig(this.kernel.items.getClass().getName())
this.itemsWithKernels == orig(this.itemsWithKernels)
this.hashCode == orig(this.hashCode)
this.closureCache == orig(this.closureCache)
this.closureCache.kernel == orig(this.closureCache.kernel)
this.closureCache.kernel.hashCode == orig(this.closureCache.kernel.hashCode)
this.closureCache.kernel.items == orig(this.closureCache.kernel.items)
this.closureCache.kernel.items.getClass().getName() == orig(this.closureCache.kernel.items.getClass().getName())
this.closureCache.itemsWithKernels == orig(this.closureCache.itemsWithKernels)
this.closureCache.hashCode == orig(this.closureCache.hashCode)
this.closureCache.closureCache == orig(this.closureCache.closureCache)
this.closureCache.items == orig(this.closureCache.items)
this.closureCache.items.getClass().getName() == orig(this.closureCache.items.getClass().getName())
this.items == orig(this.items)
this.items.getClass().getName() == orig(this.items.getClass().getName())
(return == true)  ==>  (this.closureCache.hashCode == -732137754)
(return == true)  ==>  (this.closureCache.items has only one value)
(return == true)  ==>  (this.closureCache.itemsWithKernels has only one value)
(return == true)  ==>  (this.closureCache.kernel has only one value)
(return == true)  ==>  (this.closureCache.kernel.hashCode == -1240986936)
(return == true)  ==>  (this.closureCache.kernel.items has only one value)
===========================================================================
edu.tum.cup2.generator.states.LR1State.equals(java.lang.Object):::EXIT;condition="return == true"
this.closureCache.kernel has only one value
this.closureCache.kernel.hashCode == -1240986936
this.closureCache.kernel.items has only one value
this.closureCache.itemsWithKernels has only one value
this.closureCache.hashCode == -732137754
this.closureCache.items has only one value
return == true
===========================================================================
edu.tum.cup2.generator.states.LR1State.equals(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
edu.tum.cup2.generator.states.LR1State.getItemByLR0Kernel(edu.tum.cup2.generator.items.LR0Item):::ENTER
this.closureCache == null
arg0 != null
arg0.production != null
arg0.production.lhs != null
arg0.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
arg0.production.rhs != null
arg0.production.rhs[] elements != null
arg0.production.rhs.getClass().getName() == java.util.ArrayList.class
arg0.production.reduceAction != null
arg0.production.lastTerminal.getClass().getName() == main.ParserSpec$Terminals.class
arg0.production.precTerminal.getClass().getName() == main.ParserSpec$Terminals.class
arg0.production.rhsSizeWithoutEpsilon >= 1
arg0.production.hashCode != 0
arg0.position >= 1
arg0.hashCode != 0
size(arg0.production.rhs[]) >= 1
===========================================================================
edu.tum.cup2.generator.states.LR1State.getItemByLR0Kernel(edu.tum.cup2.generator.items.LR0Item):::EXIT
this.kernel == orig(this.kernel)
this.kernel.hashCode == orig(this.kernel.hashCode)
this.kernel.items == orig(this.kernel.items)
this.kernel.items.getClass().getName() == orig(this.kernel.items.getClass().getName())
this.itemsWithKernels == orig(this.itemsWithKernels)
this.hashCode == orig(this.hashCode)
this.closureCache == orig(this.closureCache)
this.items == orig(this.items)
this.items.getClass().getName() == orig(this.items.getClass().getName())
arg0.production == orig(arg0.production)
arg0.production.id == orig(arg0.production.id)
arg0.production.lhs == orig(arg0.production.lhs)
arg0.production.lhs.getClass().getName() == orig(arg0.production.lhs.getClass().getName())
arg0.production.rhs == orig(arg0.production.rhs)
arg0.production.rhs[] == orig(arg0.production.rhs[])
arg0.production.rhs.getClass().getName() == orig(arg0.production.rhs.getClass().getName())
arg0.production.reduceAction == orig(arg0.production.reduceAction)
arg0.production.lastTerminal == orig(arg0.production.lastTerminal)
arg0.production.lastTerminal.getClass().getName() == orig(arg0.production.lastTerminal.getClass().getName())
arg0.production.precTerminal == orig(arg0.production.precTerminal)
arg0.production.precTerminal.getClass().getName() == orig(arg0.production.precTerminal.getClass().getName())
arg0.production.rhsSizeWithoutEpsilon == orig(arg0.production.rhsSizeWithoutEpsilon)
arg0.production.hashCode == orig(arg0.production.hashCode)
arg0.position == orig(arg0.position)
arg0.nextSymbol == orig(arg0.nextSymbol)
arg0.nextSymbol.getClass().getName() == orig(arg0.nextSymbol.getClass().getName())
arg0.hashCode == orig(arg0.hashCode)
arg0.shiftable == orig(arg0.shiftable)
this.closureCache == null
arg0.production != null
arg0.production.lhs != null
arg0.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
arg0.production.rhs != null
arg0.production.rhs[] elements != null
arg0.production.rhs.getClass().getName() == java.util.ArrayList.class
arg0.production.reduceAction != null
arg0.production.lastTerminal.getClass().getName() == main.ParserSpec$Terminals.class
arg0.production.precTerminal.getClass().getName() == main.ParserSpec$Terminals.class
arg0.production.rhsSizeWithoutEpsilon >= 1
arg0.production.hashCode != 0
arg0.position >= 1
arg0.hashCode != 0
return != null
return.kernel != null
return.kernel.production != null
return.kernel.position >= 1
return.kernel.hashCode != 0
return.lookaheads != null
return.lookaheads.getClass().getName() == edu.tum.cup2.generator.terminals.EfficientTerminalSet.class
return.nextLookaheads == null
return.hashCode != 0
size(arg0.production.rhs[]) >= 1
===========================================================================
edu.tum.cup2.generator.states.LR1State.getLR0Kernel():::ENTER
this.closureCache == null
===========================================================================
edu.tum.cup2.generator.states.LR1State.getLR0Kernel():::EXIT
this.kernel == orig(this.kernel)
this.kernel.hashCode == orig(this.kernel.hashCode)
this.kernel.items == orig(this.kernel.items)
this.kernel.items.getClass().getName() == orig(this.kernel.items.getClass().getName())
this.itemsWithKernels == orig(this.itemsWithKernels)
this.hashCode == orig(this.hashCode)
this.closureCache == orig(this.closureCache)
this.items == orig(this.items)
this.items.getClass().getName() == orig(this.items.getClass().getName())
this.closureCache == null
return != null
return.hashCode != 0
return.items != null
return.items.getClass().getName() == java.util.HashMap$KeySet.class
===========================================================================
edu.tum.cup2.generator.states.LR1State.goTo(edu.tum.cup2.grammar.Symbol):::ENTER
this.closureCache == null
arg0 != null
===========================================================================
edu.tum.cup2.generator.states.LR1State.goTo(edu.tum.cup2.grammar.Symbol):::EXIT
this.kernel == orig(this.kernel)
this.kernel.hashCode == orig(this.kernel.hashCode)
this.kernel.items == orig(this.kernel.items)
this.kernel.items.getClass().getName() == orig(this.kernel.items.getClass().getName())
this.itemsWithKernels == orig(this.itemsWithKernels)
this.hashCode == orig(this.hashCode)
this.closureCache == orig(this.closureCache)
this.items == orig(this.items)
this.items.getClass().getName() == orig(this.items.getClass().getName())
this.closureCache == null
return != null
return.kernel != null
return.kernel.hashCode != 0
return.kernel.items != null
return.kernel.items.getClass().getName() == java.util.HashMap$KeySet.class
return.itemsWithKernels != null
return.hashCode != 0
return.closureCache == null
return.items != null
return.items.getClass().getName() == java.util.HashSet.class
===========================================================================
edu.tum.cup2.generator.states.LR1State.hashCode():::ENTER
===========================================================================
edu.tum.cup2.generator.states.LR1State.hashCode():::EXIT
this.kernel == orig(this.kernel)
this.kernel.hashCode == orig(this.kernel.hashCode)
this.kernel.items == orig(this.kernel.items)
this.kernel.items.getClass().getName() == orig(this.kernel.items.getClass().getName())
this.itemsWithKernels == orig(this.itemsWithKernels)
this.hashCode == orig(this.hashCode)
this.closureCache == orig(this.closureCache)
this.closureCache.kernel == orig(this.closureCache.kernel)
this.closureCache.kernel.hashCode == orig(this.closureCache.kernel.hashCode)
this.closureCache.kernel.items == orig(this.closureCache.kernel.items)
this.closureCache.kernel.items.getClass().getName() == orig(this.closureCache.kernel.items.getClass().getName())
this.closureCache.itemsWithKernels == orig(this.closureCache.itemsWithKernels)
this.closureCache.hashCode == orig(this.closureCache.hashCode)
this.closureCache.closureCache == orig(this.closureCache.closureCache)
this.closureCache.items == orig(this.closureCache.items)
this.closureCache.items.getClass().getName() == orig(this.closureCache.items.getClass().getName())
this.items == orig(this.items)
this.items.getClass().getName() == orig(this.items.getClass().getName())
return != 0
===========================================================================
edu.tum.cup2.generator.states.LR1State.merge(edu.tum.cup2.generator.states.LR1State):::ENTER
arg0 != null
arg0.kernel != null
arg0.kernel.hashCode != 0
arg0.kernel.items != null
arg0.kernel.items.getClass().getName() == java.util.HashMap$KeySet.class
arg0.itemsWithKernels != null
arg0.hashCode != 0
arg0.closureCache == null
arg0.items != null
arg0.items.getClass().getName() == java.util.HashSet.class
===========================================================================
edu.tum.cup2.generator.states.LR1State.merge(edu.tum.cup2.generator.states.LR1State):::EXIT
this.kernel == orig(this.kernel)
this.kernel.hashCode == orig(this.kernel.hashCode)
this.kernel.items == orig(this.kernel.items)
this.kernel.items.getClass().getName() == orig(this.kernel.items.getClass().getName())
this.itemsWithKernels == orig(this.itemsWithKernels)
this.hashCode == orig(this.hashCode)
this.closureCache == orig(this.closureCache)
this.closureCache.kernel == orig(this.closureCache.kernel)
this.closureCache.kernel.hashCode == orig(this.closureCache.kernel.hashCode)
this.closureCache.kernel.items == orig(this.closureCache.kernel.items)
this.closureCache.kernel.items.getClass().getName() == orig(this.closureCache.kernel.items.getClass().getName())
this.closureCache.itemsWithKernels == orig(this.closureCache.itemsWithKernels)
this.closureCache.hashCode == orig(this.closureCache.hashCode)
this.closureCache.closureCache == orig(this.closureCache.closureCache)
this.closureCache.items == orig(this.closureCache.items)
this.closureCache.items.getClass().getName() == orig(this.closureCache.items.getClass().getName())
this.items == orig(this.items)
this.items.getClass().getName() == orig(this.items.getClass().getName())
arg0.kernel == orig(arg0.kernel)
arg0.kernel.hashCode == orig(arg0.kernel.hashCode)
arg0.kernel.items == orig(arg0.kernel.items)
arg0.kernel.items.getClass().getName() == orig(arg0.kernel.items.getClass().getName())
arg0.itemsWithKernels == orig(arg0.itemsWithKernels)
arg0.hashCode == orig(arg0.hashCode)
arg0.closureCache == orig(arg0.closureCache)
arg0.items == orig(arg0.items)
arg0.items.getClass().getName() == orig(arg0.items.getClass().getName())
arg0.kernel != null
arg0.kernel.hashCode != 0
arg0.kernel.items != null
arg0.kernel.items.getClass().getName() == java.util.HashMap$KeySet.class
arg0.itemsWithKernels != null
arg0.hashCode != 0
arg0.closureCache == null
arg0.items != null
arg0.items.getClass().getName() == java.util.HashSet.class
return != null
return.kernel != null
return.kernel.hashCode != 0
return.kernel.items != null
return.kernel.items.getClass().getName() == java.util.HashMap$KeySet.class
return.itemsWithKernels != null
return.hashCode != 0
return.closureCache == null
return.items != null
return.items.getClass().getName() == java.util.HashSet.class
===========================================================================
edu.tum.cup2.generator.states.State:::OBJECT
this.items != null
===========================================================================
edu.tum.cup2.generator.states.State.State(java.util.Collection):::ENTER
arg0 != null
===========================================================================
edu.tum.cup2.generator.states.State.State(java.util.Collection):::EXIT
===========================================================================
edu.tum.cup2.generator.states.State.getItems():::ENTER
this.getClass().getName() == edu.tum.cup2.generator.states.LR1State.class
this.items.getClass().getName() == java.util.HashSet.class
===========================================================================
edu.tum.cup2.generator.states.State.getItems():::EXIT
this.items == orig(this.items)
this.items.getClass().getName() == orig(this.items.getClass().getName())
this.items.getClass().getName() == java.util.HashSet.class
return != null
return.iterator != null
return.iterator.getClass().getName() == java.util.HashMap$KeyIterator.class
return.array == null
return.currentIndex == -1
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet:::OBJECT
this.data != null
this.indices != null
this.indices.getClass().getName() == java.util.HashMap.class
this.terminals has only one value
this.terminals != null
this.terminals.getClass().getName() == java.util.LinkedList.class
this.indexEpsilon == 0
size(this.data[]) == 2
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.EfficientTerminalSet(java.util.Collection):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.util.LinkedList.class
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.EfficientTerminalSet(java.util.Collection):::EXIT
this.data[] == [0, 0]
this.data[] elements == 0
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.EfficientTerminalSet(java.util.Collection, java.util.Map, int[]):::ENTER
arg0 has only one value
arg0 != null
arg0.getClass().getName() == java.util.LinkedList.class
arg1 != null
arg1.getClass().getName() == java.util.HashMap.class
arg2 != null
size(arg2[]) == 2
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.EfficientTerminalSet(java.util.Collection, java.util.Map, int[]):::EXIT
arg2[] == orig(arg2[])
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.contains(edu.tum.cup2.grammar.Terminal):::ENTER
this.indices has only one value
arg0 != null
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.contains(edu.tum.cup2.grammar.Terminal):::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.indices == orig(this.indices)
this.indices.getClass().getName() == orig(this.indices.getClass().getName())
this.terminals == orig(this.terminals)
this.terminals.getClass().getName() == orig(this.terminals.getClass().getName())
this.indexEpsilon == orig(this.indexEpsilon)
this.indices has only one value
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.contains(edu.tum.cup2.grammar.Terminal):::EXIT;condition="return == true"
return == true
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.contains(edu.tum.cup2.grammar.Terminal):::EXIT;condition="not(return == true)"
return == false
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.empty():::ENTER
this.indices has only one value
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.empty():::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.indices == orig(this.indices)
this.indices.getClass().getName() == orig(this.indices.getClass().getName())
this.terminals == orig(this.terminals)
this.terminals.getClass().getName() == orig(this.terminals.getClass().getName())
this.indexEpsilon == orig(this.indexEpsilon)
this.indices has only one value
return != null
return.data != null
return.data[] == [0, 0]
return.data[] elements == 0
return.indices has only one value
return.indices != null
return.indices.getClass().getName() == java.util.HashMap.class
return.terminals has only one value
return.terminals != null
return.terminals.getClass().getName() == java.util.LinkedList.class
return.indexEpsilon == 0
size(return.data[]) == 2
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.equals(edu.tum.cup2.generator.terminals.EfficientTerminalSet):::ENTER
arg0 != null
arg0.data != null
arg0.indices != null
arg0.indices.getClass().getName() == java.util.HashMap.class
arg0.terminals has only one value
arg0.terminals != null
arg0.terminals.getClass().getName() == java.util.LinkedList.class
arg0.indexEpsilon == 0
size(arg0.data[]) == 2
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.equals(edu.tum.cup2.generator.terminals.EfficientTerminalSet):::EXIT1
return == false
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.equals(edu.tum.cup2.generator.terminals.EfficientTerminalSet):::EXIT1;condition="not(return == true)"
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.equals(edu.tum.cup2.generator.terminals.EfficientTerminalSet):::EXIT2
return == true
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.equals(edu.tum.cup2.generator.terminals.EfficientTerminalSet):::EXIT2;condition="return == true"
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.equals(edu.tum.cup2.generator.terminals.EfficientTerminalSet):::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.indices == orig(this.indices)
this.indices.getClass().getName() == orig(this.indices.getClass().getName())
this.terminals == orig(this.terminals)
this.terminals.getClass().getName() == orig(this.terminals.getClass().getName())
this.indexEpsilon == orig(this.indexEpsilon)
arg0.data == orig(arg0.data)
arg0.data[] == orig(arg0.data[])
arg0.indices == orig(arg0.indices)
arg0.indices.getClass().getName() == orig(arg0.indices.getClass().getName())
arg0.terminals == orig(arg0.terminals)
arg0.terminals.getClass().getName() == orig(arg0.terminals.getClass().getName())
arg0.indexEpsilon == orig(arg0.indexEpsilon)
arg0.data != null
arg0.indices != null
arg0.indices.getClass().getName() == java.util.HashMap.class
arg0.terminals has only one value
arg0.terminals != null
arg0.terminals.getClass().getName() == java.util.LinkedList.class
arg0.indexEpsilon == 0
size(arg0.data[]) == 2
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.equals(edu.tum.cup2.generator.terminals.EfficientTerminalSet):::EXIT;condition="return == true"
return == true
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.equals(edu.tum.cup2.generator.terminals.EfficientTerminalSet):::EXIT;condition="not(return == true)"
return == false
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.equals(java.lang.Object):::ENTER
this.indices has only one value
arg0 != null
arg0.getClass().getName() == edu.tum.cup2.generator.terminals.EfficientTerminalSet.class
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.equals(java.lang.Object):::EXIT1
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.equals(java.lang.Object):::EXIT1;condition="return == true"
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.equals(java.lang.Object):::EXIT1;condition="not(return == true)"
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.equals(java.lang.Object):::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.indices == orig(this.indices)
this.indices.getClass().getName() == orig(this.indices.getClass().getName())
this.terminals == orig(this.terminals)
this.terminals.getClass().getName() == orig(this.terminals.getClass().getName())
this.indexEpsilon == orig(this.indexEpsilon)
this.indices has only one value
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.equals(java.lang.Object):::EXIT;condition="return == true"
return == true
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.equals(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.getBit(int):::ENTER
arg0 >= 0
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.getBit(int):::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.indices == orig(this.indices)
this.indices.getClass().getName() == orig(this.indices.getClass().getName())
this.terminals == orig(this.terminals)
this.terminals.getClass().getName() == orig(this.terminals.getClass().getName())
this.indexEpsilon == orig(this.indexEpsilon)
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.getBit(int):::EXIT;condition="return == true"
return == true
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.getBit(int):::EXIT;condition="not(return == true)"
return == false
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.getTerminals():::ENTER
this.indices has only one value
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.getTerminals():::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.indices == orig(this.indices)
this.indices.getClass().getName() == orig(this.indices.getClass().getName())
this.terminals == orig(this.terminals)
this.terminals.getClass().getName() == orig(this.terminals.getClass().getName())
this.indexEpsilon == orig(this.indexEpsilon)
this.indices has only one value
return != null
return.getClass().getName() == java.util.HashSet.class
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.hashCode():::ENTER
this.indices has only one value
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.hashCode():::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.indices == orig(this.indices)
this.indices.getClass().getName() == orig(this.indices.getClass().getName())
this.terminals == orig(this.terminals)
this.terminals.getClass().getName() == orig(this.terminals.getClass().getName())
this.indexEpsilon == orig(this.indexEpsilon)
this.indices has only one value
return != 0
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.plus(edu.tum.cup2.grammar.Terminal):::ENTER
this.data[] elements >= 0
this.data[] sorted by >=
arg0 != null
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.plus(edu.tum.cup2.grammar.Terminal):::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.indices == orig(this.indices)
this.indices.getClass().getName() == orig(this.indices.getClass().getName())
this.terminals == orig(this.terminals)
this.terminals.getClass().getName() == orig(this.terminals.getClass().getName())
this.indexEpsilon == orig(this.indexEpsilon)
this.data[] elements >= 0
this.data[] sorted by >=
return != null
return.data != null
return.indices != null
return.indices.getClass().getName() == java.util.HashMap.class
return.terminals has only one value
return.terminals != null
return.terminals.getClass().getName() == java.util.LinkedList.class
return.indexEpsilon == 0
size(return.data[]) == 2
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.plusAll(edu.tum.cup2.generator.terminals.EfficientTerminalSet):::ENTER
arg0 != null
arg0.data != null
arg0.indices != null
arg0.indices.getClass().getName() == java.util.HashMap.class
arg0.terminals has only one value
arg0.terminals != null
arg0.terminals.getClass().getName() == java.util.LinkedList.class
arg0.indexEpsilon == 0
size(arg0.data[]) == 2
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.plusAll(edu.tum.cup2.generator.terminals.EfficientTerminalSet):::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.indices == orig(this.indices)
this.indices.getClass().getName() == orig(this.indices.getClass().getName())
this.terminals == orig(this.terminals)
this.terminals.getClass().getName() == orig(this.terminals.getClass().getName())
this.indexEpsilon == orig(this.indexEpsilon)
arg0.data == orig(arg0.data)
arg0.data[] == orig(arg0.data[])
arg0.indices == orig(arg0.indices)
arg0.indices.getClass().getName() == orig(arg0.indices.getClass().getName())
arg0.terminals == orig(arg0.terminals)
arg0.terminals.getClass().getName() == orig(arg0.terminals.getClass().getName())
arg0.indexEpsilon == orig(arg0.indexEpsilon)
arg0.data != null
arg0.indices != null
arg0.indices.getClass().getName() == java.util.HashMap.class
arg0.terminals has only one value
arg0.terminals != null
arg0.terminals.getClass().getName() == java.util.LinkedList.class
arg0.indexEpsilon == 0
return != null
return.data != null
return.indices != null
return.indices.getClass().getName() == java.util.HashMap.class
return.terminals has only one value
return.terminals != null
return.terminals.getClass().getName() == java.util.LinkedList.class
return.indexEpsilon == 0
size(arg0.data[]) == 2
size(return.data[]) == 2
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.plusAll(edu.tum.cup2.generator.terminals.TerminalSet):::ENTER
this.indices has only one value
arg0 != null
arg0.getClass().getName() == edu.tum.cup2.generator.terminals.EfficientTerminalSet.class
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.plusAll(edu.tum.cup2.generator.terminals.TerminalSet):::EXIT1
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.plusAll(edu.tum.cup2.generator.terminals.TerminalSet):::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.indices == orig(this.indices)
this.indices.getClass().getName() == orig(this.indices.getClass().getName())
this.terminals == orig(this.terminals)
this.terminals.getClass().getName() == orig(this.terminals.getClass().getName())
this.indexEpsilon == orig(this.indexEpsilon)
this.indices has only one value
return != null
return.getClass().getName() == edu.tum.cup2.generator.terminals.EfficientTerminalSet.class
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.plusAllExceptEpsilon(edu.tum.cup2.generator.terminals.EfficientTerminalSet):::ENTER
this.indices has only one value
arg0 != null
arg0.data != null
arg0.indices has only one value
arg0.indices != null
arg0.indices.getClass().getName() == java.util.HashMap.class
arg0.terminals has only one value
arg0.terminals != null
arg0.terminals.getClass().getName() == java.util.LinkedList.class
arg0.indexEpsilon == 0
size(arg0.data[]) == 2
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.plusAllExceptEpsilon(edu.tum.cup2.generator.terminals.EfficientTerminalSet):::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.indices == orig(this.indices)
this.indices.getClass().getName() == orig(this.indices.getClass().getName())
this.terminals == orig(this.terminals)
this.terminals.getClass().getName() == orig(this.terminals.getClass().getName())
this.indexEpsilon == orig(this.indexEpsilon)
arg0.data == orig(arg0.data)
arg0.data[] == orig(arg0.data[])
arg0.indices == orig(arg0.indices)
arg0.indices.getClass().getName() == orig(arg0.indices.getClass().getName())
arg0.terminals == orig(arg0.terminals)
arg0.terminals.getClass().getName() == orig(arg0.terminals.getClass().getName())
arg0.indexEpsilon == orig(arg0.indexEpsilon)
this.indices has only one value
arg0.data != null
arg0.indices has only one value
arg0.indices != null
arg0.indices.getClass().getName() == java.util.HashMap.class
arg0.terminals has only one value
arg0.terminals != null
arg0.terminals.getClass().getName() == java.util.LinkedList.class
arg0.indexEpsilon == 0
return != null
return.data != null
return.indices has only one value
return.indices != null
return.indices.getClass().getName() == java.util.HashMap.class
return.terminals has only one value
return.terminals != null
return.terminals.getClass().getName() == java.util.LinkedList.class
return.indexEpsilon == 0
size(arg0.data[]) == 2
size(return.data[]) == 2
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.setBit(int, boolean):::ENTER
arg0 >= 0
===========================================================================
edu.tum.cup2.generator.terminals.EfficientTerminalSet.setBit(int, boolean):::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.indices == orig(this.indices)
this.indices.getClass().getName() == orig(this.indices.getClass().getName())
this.terminals == orig(this.terminals)
this.terminals.getClass().getName() == orig(this.terminals.getClass().getName())
this.indexEpsilon == orig(this.indexEpsilon)
return != null
return.data != null
return.indices != null
return.indices.getClass().getName() == java.util.HashMap.class
return.terminals has only one value
return.terminals != null
return.terminals.getClass().getName() == java.util.LinkedList.class
return.indexEpsilon == 0
size(return.data[]) == 2
===========================================================================
edu.tum.cup2.grammar.Grammar:::CLASS
===========================================================================
edu.tum.cup2.grammar.Grammar:::OBJECT
this.terminals != null
this.terminals[] elements != null
this.terminals[].getClass().getName() one of { [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals], [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals] }
this.nonTerminals != null
this.nonTerminals[] elements != null
this.nonTerminals[].getClass().getName() one of { [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals], [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals] }
this.productions != null
this.productions[] elements != null
this.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
this.productions[].getClass().getName() one of { [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production], [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production] }
size(this.terminals[]) one of { 29, 30 }
size(this.nonTerminals[]) one of { 15, 16 }
size(this.productions[]) one of { 47, 48 }
===========================================================================
edu.tum.cup2.grammar.Grammar.Grammar(java.util.LinkedList, java.util.LinkedList, java.util.LinkedList):::ENTER
arg0[].getClass().getName() one of { [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals], [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals] }
arg1[].getClass().getName() one of { [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals], [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals] }
arg2[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg2[].getClass().getName() one of { [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production], [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production] }
size(arg0[]) one of { 29, 30 }
size(arg1[]) one of { 15, 16 }
size(arg2[]) one of { 47, 48 }
===========================================================================
edu.tum.cup2.grammar.Grammar.Grammar(java.util.LinkedList, java.util.LinkedList, java.util.LinkedList):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg2[] == orig(arg2[])
arg0[].getClass().getName() one of { [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals], [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals] }
arg1[].getClass().getName() one of { [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals], [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals] }
arg2[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg2[].getClass().getName() one of { [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production], [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production] }
===========================================================================
edu.tum.cup2.grammar.Grammar.extendByAuxStartProduction():::ENTER
this has only one value
this.terminals has only one value
this.terminals[] contains no nulls and has only one value, of length 29
this.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals]
this.nonTerminals has only one value
this.nonTerminals[] contains no nulls and has only one value, of length 15
this.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals]
this.nonTerminals[].getClass().getName() elements == main.ParserSpec.NonTerminals.class
this.productions has only one value
this.productions[] contains no nulls and has only one value, of length 47
this.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
size(this.terminals[]) == 29
size(this.nonTerminals[]) == 15
size(this.productions[]) == 47
===========================================================================
edu.tum.cup2.grammar.Grammar.extendByAuxStartProduction():::EXIT2
===========================================================================
edu.tum.cup2.grammar.Grammar.extendByAuxStartProduction():::EXIT
this.terminals == orig(this.terminals)
this.terminals[] == orig(this.terminals[])
this.nonTerminals == orig(this.nonTerminals)
this.nonTerminals[] == orig(this.nonTerminals[])
this.productions == orig(this.productions)
this.productions[] == orig(this.productions[])
this.terminals has only one value
this.terminals[] contains no nulls and has only one value, of length 29
this.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals]
this.nonTerminals has only one value
this.nonTerminals[] contains no nulls and has only one value, of length 15
this.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals]
this.nonTerminals[].getClass().getName() elements == main.ParserSpec.NonTerminals.class
this.productions has only one value
this.productions[] contains no nulls and has only one value, of length 47
this.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
return has only one value
return.terminals has only one value
return.terminals[] contains no nulls and has only one value, of length 30
return.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
return.nonTerminals has only one value
return.nonTerminals[] contains no nulls and has only one value, of length 16
return.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
return.productions has only one value
return.productions[] contains no nulls and has only one value, of length 48
return.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
return.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
size(this.terminals[]) == 29
size(this.nonTerminals[]) == 15
size(this.productions[]) == 47
size(return.terminals[]) == 30
size(return.nonTerminals[]) == 16
size(return.productions[]) == 48
===========================================================================
edu.tum.cup2.grammar.Grammar.getNonTerminals():::ENTER
this has only one value
this.terminals has only one value
this.terminals[] contains no nulls and has only one value, of length 30
this.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.nonTerminals has only one value
this.nonTerminals[] contains no nulls and has only one value, of length 16
this.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.productions has only one value
this.productions[] contains no nulls and has only one value, of length 48
this.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
size(this.terminals[]) == 30
size(this.nonTerminals[]) == 16
size(this.productions[]) == 48
===========================================================================
edu.tum.cup2.grammar.Grammar.getNonTerminals():::EXIT
this.terminals == orig(this.terminals)
this.terminals[] == orig(this.terminals[])
this.nonTerminals == orig(this.nonTerminals)
this.nonTerminals[] == orig(this.nonTerminals[])
this.productions == orig(this.productions)
this.productions[] == orig(this.productions[])
this.terminals has only one value
this.terminals[] contains no nulls and has only one value, of length 30
this.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.nonTerminals has only one value
this.nonTerminals[] contains no nulls and has only one value, of length 16
this.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.productions has only one value
this.productions[] contains no nulls and has only one value, of length 48
this.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
return has only one value
return[] contains no nulls and has only one value, of length 16
return[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
size(this.terminals[]) == 30
size(this.nonTerminals[]) == 16
size(this.productions[]) == 48
size(return[]) == 16
===========================================================================
edu.tum.cup2.grammar.Grammar.getProductions():::ENTER
this has only one value
this.terminals has only one value
this.terminals[] contains no nulls and has only one value, of length 30
this.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.nonTerminals has only one value
this.nonTerminals[] contains no nulls and has only one value, of length 16
this.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.productions has only one value
this.productions[] contains no nulls and has only one value, of length 48
this.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
size(this.terminals[]) == 30
size(this.nonTerminals[]) == 16
size(this.productions[]) == 48
===========================================================================
edu.tum.cup2.grammar.Grammar.getProductions():::EXIT
this.terminals == orig(this.terminals)
this.terminals[] == orig(this.terminals[])
this.nonTerminals == orig(this.nonTerminals)
this.nonTerminals[] == orig(this.nonTerminals[])
this.productions == orig(this.productions)
this.productions[] == orig(this.productions[])
this.terminals has only one value
this.terminals[] contains no nulls and has only one value, of length 30
this.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.nonTerminals has only one value
this.nonTerminals[] contains no nulls and has only one value, of length 16
this.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.productions has only one value
this.productions[] contains no nulls and has only one value, of length 48
this.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
return has only one value
return != null
return[] contains no nulls and has only one value, of length 48
return[] elements != null
return[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
return[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
size(this.terminals[]) == 30
size(this.nonTerminals[]) == 16
size(this.productions[]) == 48
size(return[]) == 48
===========================================================================
edu.tum.cup2.grammar.Grammar.getStartProduction():::ENTER
this has only one value
this.terminals has only one value
this.terminals[] contains no nulls and has only one value, of length 30
this.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.nonTerminals has only one value
this.nonTerminals[] contains no nulls and has only one value, of length 16
this.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.productions has only one value
this.productions[] contains no nulls and has only one value, of length 48
this.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
size(this.terminals[]) == 30
size(this.nonTerminals[]) == 16
size(this.productions[]) == 48
===========================================================================
edu.tum.cup2.grammar.Grammar.getStartProduction():::EXIT
this.terminals == orig(this.terminals)
this.terminals[] == orig(this.terminals[])
this.nonTerminals == orig(this.nonTerminals)
this.nonTerminals[] == orig(this.nonTerminals[])
this.productions == orig(this.productions)
this.productions[] == orig(this.productions[])
this.terminals has only one value
this.terminals[] contains no nulls and has only one value, of length 30
this.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.nonTerminals has only one value
this.nonTerminals[] contains no nulls and has only one value, of length 16
this.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.productions has only one value
this.productions[] contains no nulls and has only one value, of length 48
this.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
return has only one value
return.id == 0
return.lhs has only one value
return.lhs.getClass().getName() == edu.tum.cup2.grammar.SpecialNonTerminals.class
return.rhs has only one value
return.rhs[] contains no nulls and has only one value, of length 2
return.rhs[].getClass().getName() == [main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialTerminals]
return.rhs.getClass().getName() == java.util.Arrays$ArrayList.class
return.reduceAction == null
return.lastTerminal has only one value
return.lastTerminal.getClass().getName() == edu.tum.cup2.grammar.SpecialTerminals.class
return.precTerminal has only one value
return.precTerminal.getClass().getName() == edu.tum.cup2.grammar.SpecialTerminals.class
return.rhsSizeWithoutEpsilon == 2
return.hashCode == -2128984588
size(this.terminals[]) == 30
size(this.nonTerminals[]) == 16
size(this.productions[]) == 48
size(return.rhs[]) == 2
===========================================================================
edu.tum.cup2.grammar.Grammar.getTerminals():::ENTER
this has only one value
this.terminals has only one value
this.terminals[] contains no nulls and has only one value, of length 30
this.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.nonTerminals has only one value
this.nonTerminals[] contains no nulls and has only one value, of length 16
this.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.productions has only one value
this.productions[] contains no nulls and has only one value, of length 48
this.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
size(this.terminals[]) == 30
size(this.nonTerminals[]) == 16
size(this.productions[]) == 48
===========================================================================
edu.tum.cup2.grammar.Grammar.getTerminals():::EXIT
this.terminals == orig(this.terminals)
this.terminals[] == orig(this.terminals[])
this.nonTerminals == orig(this.nonTerminals)
this.nonTerminals[] == orig(this.nonTerminals[])
this.productions == orig(this.productions)
this.productions[] == orig(this.productions[])
this.terminals has only one value
this.terminals[] contains no nulls and has only one value, of length 30
this.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.nonTerminals has only one value
this.nonTerminals[] contains no nulls and has only one value, of length 16
this.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.productions has only one value
this.productions[] contains no nulls and has only one value, of length 48
this.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
return has only one value
return[] contains no nulls and has only one value, of length 30
return[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
size(this.terminals[]) == 30
size(this.nonTerminals[]) == 16
size(this.productions[]) == 48
size(return[]) == 30
===========================================================================
edu.tum.cup2.grammar.Production:::CLASS
===========================================================================
edu.tum.cup2.grammar.Production:::OBJECT
this.id >= 0
this.lhs != null
this.rhs != null
this.rhs[] elements != null
this.reduceAction.method != null
this.reduceAction.actionSubclass != null
this.reduceAction.paramsCount >= 0
this.reduceAction.returnsVoid == false
this.reduceAction.parserInstance == null
this.rhsSizeWithoutEpsilon >= 0
size(this.rhs[]) >= 1
===========================================================================
edu.tum.cup2.grammar.Production.Production(int, edu.tum.cup2.grammar.NonTerminal, edu.tum.cup2.grammar.Symbol[]):::ENTER
arg0 == 0
arg1 has only one value
arg1.getClass().getName() == edu.tum.cup2.grammar.SpecialNonTerminals.class
arg2 has only one value
arg2.getClass().getName() == edu.tum.cup2.grammar.Symbol[].class
arg2[] contains no nulls and has only one value, of length 2
size(arg2[]) == 2
===========================================================================
edu.tum.cup2.grammar.Production.Production(int, edu.tum.cup2.grammar.NonTerminal, edu.tum.cup2.grammar.Symbol[]):::EXIT
arg2[] == orig(arg2[])
this.id == 0
this.lhs has only one value
this.lhs.getClass().getName() == edu.tum.cup2.grammar.SpecialNonTerminals.class
this.rhs has only one value
this.rhs[] contains no nulls and has only one value, of length 2
this.rhs[].getClass().getName() == [main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.rhs.getClass().getName() == java.util.Arrays$ArrayList.class
this.reduceAction == null
this.lastTerminal has only one value
this.lastTerminal.getClass().getName() == edu.tum.cup2.grammar.SpecialTerminals.class
this.precTerminal has only one value
this.precTerminal.getClass().getName() == edu.tum.cup2.grammar.SpecialTerminals.class
this.rhsSizeWithoutEpsilon == 2
this.hashCode == -2128984588
arg2[] contains no nulls and has only one value, of length 2
size(this.rhs[]) == 2
===========================================================================
edu.tum.cup2.grammar.Production.Production(int, edu.tum.cup2.grammar.NonTerminal, java.util.List, edu.tum.cup2.semantics.Action, edu.tum.cup2.grammar.Terminal):::ENTER
arg1 != null
arg2 != null
arg2[] elements != null
arg3.method != null
arg3.actionSubclass != null
arg3.returnsVoid == false
arg3.parserInstance == null
arg4 == null
size(arg2[]) >= 1
===========================================================================
edu.tum.cup2.grammar.Production.Production(int, edu.tum.cup2.grammar.NonTerminal, java.util.List, edu.tum.cup2.semantics.Action, edu.tum.cup2.grammar.Terminal):::EXIT
arg2[] == orig(arg2[])
arg3.method == orig(arg3.method)
arg3.actionSubclass == orig(arg3.actionSubclass)
arg3.paramsCount == orig(arg3.paramsCount)
arg3.returnsVoid == orig(arg3.returnsVoid)
arg3.parserInstance == orig(arg3.parserInstance)
arg2[] elements != null
arg3.method != null
arg3.actionSubclass != null
arg3.returnsVoid == false
arg3.parserInstance == null
===========================================================================
edu.tum.cup2.grammar.Production.computeHashcode():::ENTER
this.hashCode == 0
===========================================================================
edu.tum.cup2.grammar.Production.computeHashcode():::EXIT
this.id == orig(this.id)
this.lhs == orig(this.lhs)
this.lhs.getClass().getName() == orig(this.lhs.getClass().getName())
this.rhs == orig(this.rhs)
this.rhs[] == orig(this.rhs[])
this.rhs.getClass().getName() == orig(this.rhs.getClass().getName())
this.reduceAction == orig(this.reduceAction)
this.reduceAction.method == orig(this.reduceAction.method)
this.reduceAction.actionSubclass == orig(this.reduceAction.actionSubclass)
this.reduceAction.paramsCount == orig(this.reduceAction.paramsCount)
this.reduceAction.returnsVoid == orig(this.reduceAction.returnsVoid)
this.reduceAction.parserInstance == orig(this.reduceAction.parserInstance)
this.lastTerminal == orig(this.lastTerminal)
this.lastTerminal.getClass().getName() == orig(this.lastTerminal.getClass().getName())
this.precTerminal == orig(this.precTerminal)
this.precTerminal.getClass().getName() == orig(this.precTerminal.getClass().getName())
this.rhsSizeWithoutEpsilon == orig(this.rhsSizeWithoutEpsilon)
this.hashCode != orig(this.hashCode)
===========================================================================
edu.tum.cup2.grammar.Production.equals(java.lang.Object):::ENTER
this.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
this.rhs.getClass().getName() == java.util.ArrayList.class
this.reduceAction != null
this.hashCode != 0
arg0 != null
arg0.getClass().getName() == edu.tum.cup2.grammar.Production.class
===========================================================================
edu.tum.cup2.grammar.Production.equals(java.lang.Object):::EXIT3
===========================================================================
edu.tum.cup2.grammar.Production.equals(java.lang.Object):::EXIT3;condition="return == true"
===========================================================================
edu.tum.cup2.grammar.Production.equals(java.lang.Object):::EXIT
this.id == orig(this.id)
this.lhs == orig(this.lhs)
this.lhs.getClass().getName() == orig(this.lhs.getClass().getName())
this.rhs == orig(this.rhs)
this.rhs[] == orig(this.rhs[])
this.rhs.getClass().getName() == orig(this.rhs.getClass().getName())
this.reduceAction == orig(this.reduceAction)
this.reduceAction.method == orig(this.reduceAction.method)
this.reduceAction.actionSubclass == orig(this.reduceAction.actionSubclass)
this.reduceAction.paramsCount == orig(this.reduceAction.paramsCount)
this.reduceAction.returnsVoid == orig(this.reduceAction.returnsVoid)
this.reduceAction.parserInstance == orig(this.reduceAction.parserInstance)
this.lastTerminal == orig(this.lastTerminal)
this.lastTerminal.getClass().getName() == orig(this.lastTerminal.getClass().getName())
this.precTerminal == orig(this.precTerminal)
this.precTerminal.getClass().getName() == orig(this.precTerminal.getClass().getName())
this.rhsSizeWithoutEpsilon == orig(this.rhsSizeWithoutEpsilon)
this.hashCode == orig(this.hashCode)
this.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
this.rhs.getClass().getName() == java.util.ArrayList.class
this.reduceAction != null
this.hashCode != 0
return == true
===========================================================================
edu.tum.cup2.grammar.Production.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
edu.tum.cup2.grammar.Production.getLHS():::ENTER
this.hashCode != 0
===========================================================================
edu.tum.cup2.grammar.Production.getLHS():::EXIT
this.id == orig(this.id)
this.lhs == orig(this.lhs)
this.lhs.getClass().getName() == orig(this.lhs.getClass().getName())
this.rhs == orig(this.rhs)
this.rhs[] == orig(this.rhs[])
this.rhs.getClass().getName() == orig(this.rhs.getClass().getName())
this.reduceAction == orig(this.reduceAction)
this.reduceAction.method == orig(this.reduceAction.method)
this.reduceAction.actionSubclass == orig(this.reduceAction.actionSubclass)
this.reduceAction.paramsCount == orig(this.reduceAction.paramsCount)
this.reduceAction.returnsVoid == orig(this.reduceAction.returnsVoid)
this.reduceAction.parserInstance == orig(this.reduceAction.parserInstance)
this.lastTerminal == orig(this.lastTerminal)
this.lastTerminal.getClass().getName() == orig(this.lastTerminal.getClass().getName())
this.precTerminal == orig(this.precTerminal)
this.precTerminal.getClass().getName() == orig(this.precTerminal.getClass().getName())
this.rhsSizeWithoutEpsilon == orig(this.rhsSizeWithoutEpsilon)
this.hashCode == orig(this.hashCode)
this.hashCode != 0
return != null
===========================================================================
edu.tum.cup2.grammar.Production.getRHS():::ENTER
this.hashCode != 0
===========================================================================
edu.tum.cup2.grammar.Production.getRHS():::EXIT
this.id == orig(this.id)
this.lhs == orig(this.lhs)
this.lhs.getClass().getName() == orig(this.lhs.getClass().getName())
this.rhs == orig(this.rhs)
this.rhs[] == orig(this.rhs[])
this.rhs.getClass().getName() == orig(this.rhs.getClass().getName())
this.reduceAction == orig(this.reduceAction)
this.reduceAction.method == orig(this.reduceAction.method)
this.reduceAction.actionSubclass == orig(this.reduceAction.actionSubclass)
this.reduceAction.paramsCount == orig(this.reduceAction.paramsCount)
this.reduceAction.returnsVoid == orig(this.reduceAction.returnsVoid)
this.reduceAction.parserInstance == orig(this.reduceAction.parserInstance)
this.lastTerminal == orig(this.lastTerminal)
this.lastTerminal.getClass().getName() == orig(this.lastTerminal.getClass().getName())
this.precTerminal == orig(this.precTerminal)
this.precTerminal.getClass().getName() == orig(this.precTerminal.getClass().getName())
this.rhsSizeWithoutEpsilon == orig(this.rhsSizeWithoutEpsilon)
this.hashCode == orig(this.hashCode)
this.hashCode != 0
return != null
return[] elements != null
size(return[]) >= 1
===========================================================================
edu.tum.cup2.grammar.Production.hashCode():::ENTER
this.hashCode != 0
===========================================================================
edu.tum.cup2.grammar.Production.hashCode():::EXIT
this.id == orig(this.id)
this.lhs == orig(this.lhs)
this.lhs.getClass().getName() == orig(this.lhs.getClass().getName())
this.rhs == orig(this.rhs)
this.rhs[] == orig(this.rhs[])
this.rhs.getClass().getName() == orig(this.rhs.getClass().getName())
this.reduceAction == orig(this.reduceAction)
this.reduceAction.method == orig(this.reduceAction.method)
this.reduceAction.actionSubclass == orig(this.reduceAction.actionSubclass)
this.reduceAction.paramsCount == orig(this.reduceAction.paramsCount)
this.reduceAction.returnsVoid == orig(this.reduceAction.returnsVoid)
this.reduceAction.parserInstance == orig(this.reduceAction.parserInstance)
this.lastTerminal == orig(this.lastTerminal)
this.lastTerminal.getClass().getName() == orig(this.lastTerminal.getClass().getName())
this.precTerminal == orig(this.precTerminal)
this.precTerminal.getClass().getName() == orig(this.precTerminal.getClass().getName())
this.rhsSizeWithoutEpsilon == orig(this.rhsSizeWithoutEpsilon)
this.hashCode == orig(this.hashCode)
this.hashCode != 0
return != 0
===========================================================================
edu.tum.cup2.grammar.SpecialNonTerminals:::OBJECT
this has only one value
===========================================================================
edu.tum.cup2.grammar.SpecialNonTerminals.SpecialNonTerminals(java.lang.String, int):::ENTER
arg0 has only one value
arg0.toString == "StartLHS"
arg1 == 0
===========================================================================
edu.tum.cup2.grammar.SpecialNonTerminals.SpecialNonTerminals(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "StartLHS"
===========================================================================
edu.tum.cup2.grammar.SpecialTerminals:::CLASS
edu.tum.cup2.grammar.SpecialTerminals.Epsilon has only one value
edu.tum.cup2.grammar.SpecialTerminals.EndOfInputStream has only one value
edu.tum.cup2.grammar.SpecialTerminals.Placeholder has only one value
edu.tum.cup2.grammar.SpecialTerminals.$a has only one value
edu.tum.cup2.grammar.SpecialTerminals.WholeRow has only one value
edu.tum.cup2.grammar.SpecialTerminals.Error has only one value
edu.tum.cup2.grammar.SpecialTerminals.$VALUES has only one value
edu.tum.cup2.grammar.SpecialTerminals.$VALUES.getClass().getName() == edu.tum.cup2.grammar.SpecialTerminals[].class
edu.tum.cup2.grammar.SpecialTerminals.$VALUES[] contains no nulls and has only one value, of length 6
edu.tum.cup2.grammar.SpecialTerminals.$VALUES[].getClass().getName() == [edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
edu.tum.cup2.grammar.SpecialTerminals.$VALUES[].getClass().getName() elements == edu.tum.cup2.grammar.SpecialTerminals.class
size(edu.tum.cup2.grammar.SpecialTerminals.$VALUES[]) == 6
===========================================================================
edu.tum.cup2.grammar.SpecialTerminals:::OBJECT
===========================================================================
edu.tum.cup2.grammar.SpecialTerminals.SpecialTerminals(java.lang.String, int):::ENTER
===========================================================================
edu.tum.cup2.grammar.SpecialTerminals.SpecialTerminals(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
===========================================================================
edu.tum.cup2.grammar.SpecialTerminals.values():::ENTER
===========================================================================
edu.tum.cup2.grammar.SpecialTerminals.values():::EXIT
edu.tum.cup2.grammar.SpecialTerminals.Epsilon == orig(edu.tum.cup2.grammar.SpecialTerminals.Epsilon)
edu.tum.cup2.grammar.SpecialTerminals.EndOfInputStream == orig(edu.tum.cup2.grammar.SpecialTerminals.EndOfInputStream)
edu.tum.cup2.grammar.SpecialTerminals.Placeholder == orig(edu.tum.cup2.grammar.SpecialTerminals.Placeholder)
edu.tum.cup2.grammar.SpecialTerminals.$a == orig(edu.tum.cup2.grammar.SpecialTerminals.$a)
edu.tum.cup2.grammar.SpecialTerminals.WholeRow == orig(edu.tum.cup2.grammar.SpecialTerminals.WholeRow)
edu.tum.cup2.grammar.SpecialTerminals.Error == orig(edu.tum.cup2.grammar.SpecialTerminals.Error)
edu.tum.cup2.grammar.SpecialTerminals.$VALUES == orig(edu.tum.cup2.grammar.SpecialTerminals.$VALUES)
edu.tum.cup2.grammar.SpecialTerminals.$VALUES.getClass().getName() == return.getClass().getName()
edu.tum.cup2.grammar.SpecialTerminals.$VALUES.getClass().getName() == orig(edu.tum.cup2.grammar.SpecialTerminals.$VALUES.getClass().getName())
edu.tum.cup2.grammar.SpecialTerminals.$VALUES[] == orig(edu.tum.cup2.grammar.SpecialTerminals.$VALUES[])
return[] contains no nulls and has only one value, of length 6
size(return[]) == 6
===========================================================================
edu.tum.cup2.parser.LRParser:::CLASS
===========================================================================
edu.tum.cup2.parser.LRParser:::OBJECT
this has only one value
this.DEBUG == false
this.maxErrors == -2147483648
this.table has only one value
this.table.grammar has only one value
this.table.grammar.terminals has only one value
this.table.grammar.terminals[] contains no nulls and has only one value, of length 30
this.table.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.table.grammar.nonTerminals has only one value
this.table.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
this.table.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.table.grammar.productions has only one value
this.table.grammar.productions[] contains no nulls and has only one value, of length 48
this.table.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
this.table.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
this.table.states has only one value
this.table.states[] contains no nulls and has only one value, of length 114
this.table.states[].getClass().getName() == [edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState]
this.table.states[].getClass().getName() elements == edu.tum.cup2.parser.states.LRParserState.class
this.table.actionTable has only one value
this.table.actionTable.parentTable has only one value
this.table.actionTable.table has only one value
this.table.gotoTable has only one value
this.table.gotoTable.parentTable has only one value
this.table.gotoTable.table has only one value
this.table.erI has only one value
this.stack == null
this.valueStack == null
this.tokenCountStack == null
this.saveTokens == false
this.parsedTokens == null
this.lastError_sync_size == 0
this.lastError_start_sync_size == 0
this.lastError_stateStack == null
this.lastError_tokenCountStack == null
this.dryRun_savedActions == null
this.lastErrorInformation == null
this.input == null
this.currentToken == null
this.currentState == null
this.observers has only one value
this.observers[] == []
this.observers[].getClass().getName() == []
this.observers.getClass().getName() == java.util.ArrayList.class
size(this.table.grammar.terminals[]) == 30
size(this.table.grammar.nonTerminals[]) == 16
size(this.table.grammar.productions[]) == 48
size(this.table.states[]) == 114
===========================================================================
edu.tum.cup2.parser.LRParser.LRParser(edu.tum.cup2.parser.tables.LRParsingTable):::ENTER
arg0 has only one value
arg0.grammar has only one value
arg0.grammar.terminals has only one value
arg0.grammar.terminals[] contains no nulls and has only one value, of length 30
arg0.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.grammar.nonTerminals has only one value
arg0.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
arg0.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
arg0.grammar.productions has only one value
arg0.grammar.productions[] contains no nulls and has only one value, of length 48
arg0.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg0.states has only one value
arg0.states[] contains no nulls and has only one value, of length 114
arg0.states[].getClass().getName() == [edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState]
arg0.states[].getClass().getName() elements == edu.tum.cup2.parser.states.LRParserState.class
arg0.actionTable has only one value
arg0.actionTable.parentTable has only one value
arg0.actionTable.table has only one value
arg0.gotoTable has only one value
arg0.gotoTable.parentTable has only one value
arg0.gotoTable.table has only one value
arg0.erI has only one value
size(arg0.grammar.terminals[]) == 30
size(arg0.grammar.nonTerminals[]) == 16
size(arg0.grammar.productions[]) == 48
size(arg0.states[]) == 114
===========================================================================
edu.tum.cup2.parser.LRParser.LRParser(edu.tum.cup2.parser.tables.LRParsingTable):::EXIT
arg0.grammar == orig(arg0.grammar)
arg0.grammar.terminals == orig(arg0.grammar.terminals)
arg0.grammar.terminals[] == orig(arg0.grammar.terminals[])
arg0.grammar.nonTerminals == orig(arg0.grammar.nonTerminals)
arg0.grammar.nonTerminals[] == orig(arg0.grammar.nonTerminals[])
arg0.grammar.productions == orig(arg0.grammar.productions)
arg0.grammar.productions[] == orig(arg0.grammar.productions[])
arg0.states == orig(arg0.states)
arg0.states[] == orig(arg0.states[])
arg0.actionTable == orig(arg0.actionTable)
arg0.actionTable.parentTable == orig(arg0.actionTable.parentTable)
arg0.actionTable.table == orig(arg0.actionTable.table)
arg0.gotoTable == orig(arg0.gotoTable)
arg0.gotoTable.parentTable == orig(arg0.gotoTable.parentTable)
arg0.gotoTable.table == orig(arg0.gotoTable.table)
arg0.erI == orig(arg0.erI)
arg0.grammar has only one value
arg0.grammar.terminals has only one value
arg0.grammar.terminals[] contains no nulls and has only one value, of length 30
arg0.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.grammar.nonTerminals has only one value
arg0.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
arg0.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
arg0.grammar.productions has only one value
arg0.grammar.productions[] contains no nulls and has only one value, of length 48
arg0.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg0.states has only one value
arg0.states[] contains no nulls and has only one value, of length 114
arg0.states[].getClass().getName() == [edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState]
arg0.states[].getClass().getName() elements == edu.tum.cup2.parser.states.LRParserState.class
arg0.actionTable has only one value
arg0.actionTable.parentTable has only one value
arg0.actionTable.table has only one value
arg0.gotoTable has only one value
arg0.gotoTable.parentTable has only one value
arg0.gotoTable.table has only one value
arg0.erI has only one value
size(arg0.grammar.terminals[]) == 30
size(arg0.grammar.nonTerminals[]) == 16
size(arg0.grammar.productions[]) == 48
size(arg0.states[]) == 114
===========================================================================
edu.tum.cup2.parser.actions.Accept:::CLASS
===========================================================================
edu.tum.cup2.parser.actions.Accept:::OBJECT
this has only one value
===========================================================================
edu.tum.cup2.parser.actions.Accept.Accept():::EXIT
===========================================================================
edu.tum.cup2.parser.actions.Reduce:::CLASS
===========================================================================
edu.tum.cup2.parser.actions.Reduce:::OBJECT
this.production != null
this.production.lhs != null
this.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
this.production.rhs != null
this.production.rhs[] elements != null
this.production.rhs.getClass().getName() == java.util.ArrayList.class
this.production.reduceAction != null
this.production.reduceAction.method != null
this.production.reduceAction.actionSubclass != null
this.production.reduceAction.paramsCount >= 0
this.production.reduceAction.returnsVoid == false
this.production.reduceAction.parserInstance == null
this.production.rhsSizeWithoutEpsilon >= 0
size(this.production.rhs[]) >= 1
===========================================================================
edu.tum.cup2.parser.actions.Reduce.Reduce(edu.tum.cup2.grammar.Production):::ENTER
arg0 != null
arg0.lhs != null
arg0.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
arg0.rhs != null
arg0.rhs[] elements != null
arg0.rhs.getClass().getName() == java.util.ArrayList.class
arg0.reduceAction != null
arg0.reduceAction.method != null
arg0.reduceAction.actionSubclass != null
arg0.reduceAction.paramsCount >= 0
arg0.reduceAction.returnsVoid == false
arg0.reduceAction.parserInstance == null
arg0.rhsSizeWithoutEpsilon >= 0
size(arg0.rhs[]) >= 1
===========================================================================
edu.tum.cup2.parser.actions.Reduce.Reduce(edu.tum.cup2.grammar.Production):::EXIT
arg0.id == orig(arg0.id)
arg0.lhs == orig(arg0.lhs)
arg0.lhs.getClass().getName() == orig(arg0.lhs.getClass().getName())
arg0.rhs == orig(arg0.rhs)
arg0.rhs[] == orig(arg0.rhs[])
arg0.rhs.getClass().getName() == orig(arg0.rhs.getClass().getName())
arg0.reduceAction == orig(arg0.reduceAction)
arg0.reduceAction.method == orig(arg0.reduceAction.method)
arg0.reduceAction.actionSubclass == orig(arg0.reduceAction.actionSubclass)
arg0.reduceAction.paramsCount == orig(arg0.reduceAction.paramsCount)
arg0.reduceAction.returnsVoid == orig(arg0.reduceAction.returnsVoid)
arg0.reduceAction.parserInstance == orig(arg0.reduceAction.parserInstance)
arg0.lastTerminal == orig(arg0.lastTerminal)
arg0.lastTerminal.getClass().getName() == orig(arg0.lastTerminal.getClass().getName())
arg0.precTerminal == orig(arg0.precTerminal)
arg0.precTerminal.getClass().getName() == orig(arg0.precTerminal.getClass().getName())
arg0.rhsSizeWithoutEpsilon == orig(arg0.rhsSizeWithoutEpsilon)
arg0.hashCode == orig(arg0.hashCode)
arg0.lhs != null
arg0.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
arg0.rhs != null
arg0.rhs[] elements != null
arg0.rhs.getClass().getName() == java.util.ArrayList.class
arg0.reduceAction != null
arg0.reduceAction.method != null
arg0.reduceAction.actionSubclass != null
arg0.reduceAction.paramsCount >= 0
arg0.reduceAction.returnsVoid == false
arg0.reduceAction.parserInstance == null
arg0.rhsSizeWithoutEpsilon >= 0
size(arg0.rhs[]) >= 1
===========================================================================
edu.tum.cup2.parser.actions.Shift:::CLASS
===========================================================================
edu.tum.cup2.parser.actions.Shift:::OBJECT
this.state != null
this.state.beginLine == -1
this.state.beginColumn == -1
this.production != null
this.production.lhs != null
this.production.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
this.production.rhs != null
this.production.rhs[] elements != null
this.production.rhs.getClass().getName() == java.util.ArrayList.class
this.production.reduceAction != null
this.production.reduceAction.method != null
this.production.reduceAction.actionSubclass != null
this.production.reduceAction.returnsVoid == false
this.production.reduceAction.parserInstance == null
this.production.lastTerminal != null
this.production.lastTerminal.getClass().getName() == main.ParserSpec$Terminals.class
this.production.precTerminal != null
this.production.precTerminal.getClass().getName() == main.ParserSpec$Terminals.class
this.production.rhsSizeWithoutEpsilon >= 1
this.position >= 1
size(this.production.rhs[]) >= 1
===========================================================================
edu.tum.cup2.parser.actions.Shift.Shift(edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.grammar.Production, int):::ENTER
arg0 != null
arg0.beginLine == -1
arg0.beginColumn == -1
arg1 != null
arg1.lhs != null
arg1.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
arg1.rhs != null
arg1.rhs[] elements != null
arg1.rhs.getClass().getName() == java.util.ArrayList.class
arg1.reduceAction != null
arg1.reduceAction.method != null
arg1.reduceAction.actionSubclass != null
arg1.reduceAction.returnsVoid == false
arg1.reduceAction.parserInstance == null
arg1.lastTerminal != null
arg1.lastTerminal.getClass().getName() == main.ParserSpec$Terminals.class
arg1.precTerminal != null
arg1.precTerminal.getClass().getName() == main.ParserSpec$Terminals.class
arg1.rhsSizeWithoutEpsilon >= 1
arg2 >= 1
size(arg1.rhs[]) >= 1
===========================================================================
edu.tum.cup2.parser.actions.Shift.Shift(edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.grammar.Production, int):::EXIT
arg0.id == orig(arg0.id)
arg0.beginLine == orig(arg0.beginLine)
arg0.beginColumn == orig(arg0.beginColumn)
arg1.id == orig(arg1.id)
arg1.lhs == orig(arg1.lhs)
arg1.lhs.getClass().getName() == orig(arg1.lhs.getClass().getName())
arg1.rhs == orig(arg1.rhs)
arg1.rhs[] == orig(arg1.rhs[])
arg1.rhs.getClass().getName() == orig(arg1.rhs.getClass().getName())
arg1.reduceAction == orig(arg1.reduceAction)
arg1.reduceAction.method == orig(arg1.reduceAction.method)
arg1.reduceAction.actionSubclass == orig(arg1.reduceAction.actionSubclass)
arg1.reduceAction.paramsCount == orig(arg1.reduceAction.paramsCount)
arg1.reduceAction.returnsVoid == orig(arg1.reduceAction.returnsVoid)
arg1.reduceAction.parserInstance == orig(arg1.reduceAction.parserInstance)
arg1.lastTerminal == orig(arg1.lastTerminal)
arg1.lastTerminal.getClass().getName() == orig(arg1.lastTerminal.getClass().getName())
arg1.precTerminal == orig(arg1.precTerminal)
arg1.precTerminal.getClass().getName() == orig(arg1.precTerminal.getClass().getName())
arg1.rhsSizeWithoutEpsilon == orig(arg1.rhsSizeWithoutEpsilon)
arg1.hashCode == orig(arg1.hashCode)
arg0.beginLine == -1
arg0.beginColumn == -1
arg1.lhs != null
arg1.lhs.getClass().getName() == main.ParserSpec$NonTerminals.class
arg1.rhs != null
arg1.rhs[] elements != null
arg1.rhs.getClass().getName() == java.util.ArrayList.class
arg1.reduceAction != null
arg1.reduceAction.method != null
arg1.reduceAction.actionSubclass != null
arg1.reduceAction.returnsVoid == false
arg1.reduceAction.parserInstance == null
arg1.lastTerminal != null
arg1.lastTerminal.getClass().getName() == main.ParserSpec$Terminals.class
arg1.precTerminal != null
arg1.precTerminal.getClass().getName() == main.ParserSpec$Terminals.class
arg1.rhsSizeWithoutEpsilon >= 1
size(arg1.rhs[]) >= 1
===========================================================================
edu.tum.cup2.parser.states.LRParserState:::CLASS
===========================================================================
edu.tum.cup2.parser.states.LRParserState:::OBJECT
this.id >= 0
this.beginLine == -1
this.beginColumn == -1
===========================================================================
edu.tum.cup2.parser.states.LRParserState.LRParserState(int):::ENTER
===========================================================================
edu.tum.cup2.parser.states.LRParserState.LRParserState(int):::EXIT
===========================================================================
edu.tum.cup2.parser.states.LRParserState.equals(java.lang.Object):::ENTER
arg0 != null
arg0.getClass().getName() == edu.tum.cup2.parser.states.LRParserState.class
===========================================================================
edu.tum.cup2.parser.states.LRParserState.equals(java.lang.Object):::EXIT1
===========================================================================
edu.tum.cup2.parser.states.LRParserState.equals(java.lang.Object):::EXIT1;condition="return == true"
===========================================================================
edu.tum.cup2.parser.states.LRParserState.equals(java.lang.Object):::EXIT
this.id == orig(this.id)
this.beginLine == orig(this.beginLine)
this.beginColumn == orig(this.beginColumn)
return == true
===========================================================================
edu.tum.cup2.parser.states.LRParserState.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
edu.tum.cup2.parser.states.LRParserState.getID():::ENTER
===========================================================================
edu.tum.cup2.parser.states.LRParserState.getID():::EXIT
this.id == orig(this.id)
this.beginLine == orig(this.beginLine)
this.beginColumn == orig(this.beginColumn)
return >= 0
===========================================================================
edu.tum.cup2.parser.tables.LRActionTable:::CLASS
===========================================================================
edu.tum.cup2.parser.tables.LRActionTable:::OBJECT
this has only one value
this.parentTable has only one value
this.parentTable != null
this.parentTable.grammar has only one value
this.parentTable.grammar != null
this.parentTable.grammar.terminals has only one value
this.parentTable.grammar.terminals != null
this.parentTable.grammar.terminals[] contains no nulls and has only one value, of length 30
this.parentTable.grammar.terminals[] elements != null
this.parentTable.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.parentTable.grammar.nonTerminals has only one value
this.parentTable.grammar.nonTerminals != null
this.parentTable.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
this.parentTable.grammar.nonTerminals[] elements != null
this.parentTable.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.parentTable.grammar.productions has only one value
this.parentTable.grammar.productions != null
this.parentTable.grammar.productions[] contains no nulls and has only one value, of length 48
this.parentTable.grammar.productions[] elements != null
this.parentTable.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
this.parentTable.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
this.parentTable.states has only one value
this.parentTable.states != null
this.parentTable.states[] contains no nulls and has only one value, of length 114
this.parentTable.states[] elements != null
this.parentTable.states[].getClass().getName() == [edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState]
this.parentTable.states[].getClass().getName() elements == edu.tum.cup2.parser.states.LRParserState.class
this.parentTable.actionTable.parentTable has only one value
this.parentTable.actionTable.parentTable != null
this.parentTable.actionTable.table has only one value
this.parentTable.actionTable.table != null
this.parentTable.gotoTable.parentTable has only one value
this.parentTable.gotoTable.parentTable != null
this.parentTable.gotoTable.table has only one value
this.parentTable.gotoTable.table != null
this.parentTable.erI has only one value
this.parentTable.erI != null
this.table has only one value
this.table != null
size(this.parentTable.grammar.terminals[]) == 30
size(this.parentTable.grammar.nonTerminals[]) == 16
size(this.parentTable.grammar.productions[]) == 48
size(this.parentTable.states[]) == 114
===========================================================================
edu.tum.cup2.parser.tables.LRActionTable.LRActionTable(edu.tum.cup2.parser.tables.LRParsingTable):::ENTER
arg0 has only one value
arg0.grammar has only one value
arg0.grammar.terminals has only one value
arg0.grammar.terminals[] contains no nulls and has only one value, of length 30
arg0.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.grammar.nonTerminals has only one value
arg0.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
arg0.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
arg0.grammar.productions has only one value
arg0.grammar.productions[] contains no nulls and has only one value, of length 48
arg0.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg0.states has only one value
arg0.states[] contains no nulls and has only one value, of length 114
arg0.states[].getClass().getName() == [edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState]
arg0.states[].getClass().getName() elements == edu.tum.cup2.parser.states.LRParserState.class
arg0.actionTable == null
arg0.gotoTable == null
arg0.erI has only one value
size(arg0.grammar.terminals[]) == 30
size(arg0.grammar.nonTerminals[]) == 16
size(arg0.grammar.productions[]) == 48
size(arg0.states[]) == 114
===========================================================================
edu.tum.cup2.parser.tables.LRActionTable.LRActionTable(edu.tum.cup2.parser.tables.LRParsingTable):::EXIT
arg0.grammar == orig(arg0.grammar)
arg0.grammar.terminals == orig(arg0.grammar.terminals)
arg0.grammar.terminals[] == orig(arg0.grammar.terminals[])
arg0.grammar.nonTerminals == orig(arg0.grammar.nonTerminals)
arg0.grammar.nonTerminals[] == orig(arg0.grammar.nonTerminals[])
arg0.grammar.productions == orig(arg0.grammar.productions)
arg0.grammar.productions[] == orig(arg0.grammar.productions[])
arg0.states == orig(arg0.states)
arg0.states[] == orig(arg0.states[])
arg0.actionTable == orig(arg0.actionTable)
arg0.gotoTable == orig(arg0.gotoTable)
arg0.erI == orig(arg0.erI)
this.parentTable.actionTable == null
this.parentTable.gotoTable == null
arg0.grammar has only one value
arg0.grammar.terminals has only one value
arg0.grammar.terminals[] contains no nulls and has only one value, of length 30
arg0.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.grammar.nonTerminals has only one value
arg0.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
arg0.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
arg0.grammar.productions has only one value
arg0.grammar.productions[] contains no nulls and has only one value, of length 48
arg0.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg0.states has only one value
arg0.states[] contains no nulls and has only one value, of length 114
arg0.states[].getClass().getName() == [edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState]
arg0.states[].getClass().getName() elements == edu.tum.cup2.parser.states.LRParserState.class
arg0.actionTable == null
arg0.gotoTable == null
arg0.erI has only one value
size(arg0.grammar.terminals[]) == 30
size(arg0.grammar.nonTerminals[]) == 16
size(arg0.grammar.productions[]) == 48
size(arg0.states[]) == 114
===========================================================================
edu.tum.cup2.parser.tables.LRActionTable.getWithNull(edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.grammar.Terminal):::ENTER
this.parentTable.actionTable has only one value
this.parentTable.actionTable != null
this.parentTable.gotoTable has only one value
this.parentTable.gotoTable != null
arg0 != null
arg0.beginLine == -1
arg0.beginColumn == -1
arg1 != null
===========================================================================
edu.tum.cup2.parser.tables.LRActionTable.getWithNull(edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.grammar.Terminal):::EXIT3
===========================================================================
edu.tum.cup2.parser.tables.LRActionTable.getWithNull(edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.grammar.Terminal):::EXIT
this.parentTable == orig(this.parentTable)
this.parentTable.grammar == orig(this.parentTable.grammar)
this.parentTable.grammar.terminals == orig(this.parentTable.grammar.terminals)
this.parentTable.grammar.terminals[] == orig(this.parentTable.grammar.terminals[])
this.parentTable.grammar.nonTerminals == orig(this.parentTable.grammar.nonTerminals)
this.parentTable.grammar.nonTerminals[] == orig(this.parentTable.grammar.nonTerminals[])
this.parentTable.grammar.productions == orig(this.parentTable.grammar.productions)
this.parentTable.grammar.productions[] == orig(this.parentTable.grammar.productions[])
this.parentTable.states == orig(this.parentTable.states)
this.parentTable.states[] == orig(this.parentTable.states[])
this.parentTable.actionTable == orig(this.parentTable.actionTable)
this.parentTable.actionTable.parentTable == orig(this.parentTable.actionTable.parentTable)
this.parentTable.actionTable.table == orig(this.parentTable.actionTable.table)
this.parentTable.gotoTable == orig(this.parentTable.gotoTable)
this.parentTable.gotoTable.parentTable == orig(this.parentTable.gotoTable.parentTable)
this.parentTable.gotoTable.table == orig(this.parentTable.gotoTable.table)
this.parentTable.erI == orig(this.parentTable.erI)
this.table == orig(this.table)
arg0.id == orig(arg0.id)
arg0.beginLine == orig(arg0.beginLine)
arg0.beginColumn == orig(arg0.beginColumn)
this.parentTable.actionTable has only one value
this.parentTable.actionTable != null
this.parentTable.gotoTable has only one value
this.parentTable.gotoTable != null
arg0.beginLine == -1
arg0.beginColumn == -1
return == null
===========================================================================
edu.tum.cup2.parser.tables.LRActionTable.set(edu.tum.cup2.parser.actions.LRAction, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.grammar.Terminal):::ENTER
this.parentTable.actionTable has only one value
this.parentTable.actionTable != null
this.parentTable.gotoTable has only one value
this.parentTable.gotoTable != null
arg0 != null
arg1 != null
arg1.id >= 0
arg1.beginLine == -1
arg1.beginColumn == -1
arg2 != null
===========================================================================
edu.tum.cup2.parser.tables.LRActionTable.set(edu.tum.cup2.parser.actions.LRAction, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.grammar.Terminal):::EXIT
this.parentTable == orig(this.parentTable)
this.parentTable.grammar == orig(this.parentTable.grammar)
this.parentTable.grammar.terminals == orig(this.parentTable.grammar.terminals)
this.parentTable.grammar.terminals[] == orig(this.parentTable.grammar.terminals[])
this.parentTable.grammar.nonTerminals == orig(this.parentTable.grammar.nonTerminals)
this.parentTable.grammar.nonTerminals[] == orig(this.parentTable.grammar.nonTerminals[])
this.parentTable.grammar.productions == orig(this.parentTable.grammar.productions)
this.parentTable.grammar.productions[] == orig(this.parentTable.grammar.productions[])
this.parentTable.states == orig(this.parentTable.states)
this.parentTable.states[] == orig(this.parentTable.states[])
this.parentTable.actionTable == orig(this.parentTable.actionTable)
this.parentTable.actionTable.parentTable == orig(this.parentTable.actionTable.parentTable)
this.parentTable.actionTable.table == orig(this.parentTable.actionTable.table)
this.parentTable.gotoTable == orig(this.parentTable.gotoTable)
this.parentTable.gotoTable.parentTable == orig(this.parentTable.gotoTable.parentTable)
this.parentTable.gotoTable.table == orig(this.parentTable.gotoTable.table)
this.parentTable.erI == orig(this.parentTable.erI)
this.table == orig(this.table)
arg1.id == orig(arg1.id)
arg1.beginLine == orig(arg1.beginLine)
arg1.beginColumn == orig(arg1.beginColumn)
this.parentTable.actionTable has only one value
this.parentTable.actionTable != null
this.parentTable.gotoTable has only one value
this.parentTable.gotoTable != null
arg1.id >= 0
arg1.beginLine == -1
arg1.beginColumn == -1
===========================================================================
edu.tum.cup2.parser.tables.LRGoToTable:::CLASS
===========================================================================
edu.tum.cup2.parser.tables.LRGoToTable:::OBJECT
this has only one value
this.parentTable has only one value
this.parentTable != null
this.parentTable.grammar has only one value
this.parentTable.grammar != null
this.parentTable.grammar.terminals has only one value
this.parentTable.grammar.terminals != null
this.parentTable.grammar.terminals[] contains no nulls and has only one value, of length 30
this.parentTable.grammar.terminals[] elements != null
this.parentTable.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.parentTable.grammar.nonTerminals has only one value
this.parentTable.grammar.nonTerminals != null
this.parentTable.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
this.parentTable.grammar.nonTerminals[] elements != null
this.parentTable.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.parentTable.grammar.productions has only one value
this.parentTable.grammar.productions != null
this.parentTable.grammar.productions[] contains no nulls and has only one value, of length 48
this.parentTable.grammar.productions[] elements != null
this.parentTable.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
this.parentTable.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
this.parentTable.states has only one value
this.parentTable.states != null
this.parentTable.states[] contains no nulls and has only one value, of length 114
this.parentTable.states[] elements != null
this.parentTable.states[].getClass().getName() == [edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState]
this.parentTable.states[].getClass().getName() elements == edu.tum.cup2.parser.states.LRParserState.class
this.parentTable.actionTable has only one value
this.parentTable.actionTable != null
this.parentTable.actionTable.parentTable has only one value
this.parentTable.actionTable.parentTable != null
this.parentTable.actionTable.table has only one value
this.parentTable.actionTable.table != null
this.parentTable.gotoTable.parentTable has only one value
this.parentTable.gotoTable.parentTable != null
this.parentTable.gotoTable.table has only one value
this.parentTable.gotoTable.table != null
this.parentTable.erI has only one value
this.parentTable.erI != null
this.table has only one value
this.table != null
size(this.parentTable.grammar.terminals[]) == 30
size(this.parentTable.grammar.nonTerminals[]) == 16
size(this.parentTable.grammar.productions[]) == 48
size(this.parentTable.states[]) == 114
===========================================================================
edu.tum.cup2.parser.tables.LRGoToTable.LRGoToTable(edu.tum.cup2.parser.tables.LRParsingTable):::ENTER
arg0 has only one value
arg0.grammar has only one value
arg0.grammar.terminals has only one value
arg0.grammar.terminals[] contains no nulls and has only one value, of length 30
arg0.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.grammar.nonTerminals has only one value
arg0.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
arg0.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
arg0.grammar.productions has only one value
arg0.grammar.productions[] contains no nulls and has only one value, of length 48
arg0.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg0.states has only one value
arg0.states[] contains no nulls and has only one value, of length 114
arg0.states[].getClass().getName() == [edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState]
arg0.states[].getClass().getName() elements == edu.tum.cup2.parser.states.LRParserState.class
arg0.actionTable has only one value
arg0.actionTable.parentTable has only one value
arg0.actionTable.table has only one value
arg0.gotoTable == null
arg0.erI has only one value
size(arg0.grammar.terminals[]) == 30
size(arg0.grammar.nonTerminals[]) == 16
size(arg0.grammar.productions[]) == 48
size(arg0.states[]) == 114
===========================================================================
edu.tum.cup2.parser.tables.LRGoToTable.LRGoToTable(edu.tum.cup2.parser.tables.LRParsingTable):::EXIT
arg0.grammar == orig(arg0.grammar)
arg0.grammar.terminals == orig(arg0.grammar.terminals)
arg0.grammar.terminals[] == orig(arg0.grammar.terminals[])
arg0.grammar.nonTerminals == orig(arg0.grammar.nonTerminals)
arg0.grammar.nonTerminals[] == orig(arg0.grammar.nonTerminals[])
arg0.grammar.productions == orig(arg0.grammar.productions)
arg0.grammar.productions[] == orig(arg0.grammar.productions[])
arg0.states == orig(arg0.states)
arg0.states[] == orig(arg0.states[])
arg0.actionTable == orig(arg0.actionTable)
arg0.actionTable.parentTable == orig(arg0.actionTable.parentTable)
arg0.actionTable.table == orig(arg0.actionTable.table)
arg0.gotoTable == orig(arg0.gotoTable)
arg0.erI == orig(arg0.erI)
this.parentTable.gotoTable == null
arg0.grammar has only one value
arg0.grammar.terminals has only one value
arg0.grammar.terminals[] contains no nulls and has only one value, of length 30
arg0.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.grammar.nonTerminals has only one value
arg0.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
arg0.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
arg0.grammar.productions has only one value
arg0.grammar.productions[] contains no nulls and has only one value, of length 48
arg0.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg0.states has only one value
arg0.states[] contains no nulls and has only one value, of length 114
arg0.states[].getClass().getName() == [edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState]
arg0.states[].getClass().getName() elements == edu.tum.cup2.parser.states.LRParserState.class
arg0.actionTable has only one value
arg0.actionTable.parentTable has only one value
arg0.actionTable.table has only one value
arg0.gotoTable == null
arg0.erI has only one value
size(arg0.grammar.terminals[]) == 30
size(arg0.grammar.nonTerminals[]) == 16
size(arg0.grammar.productions[]) == 48
size(arg0.states[]) == 114
===========================================================================
edu.tum.cup2.parser.tables.LRGoToTable.set(edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.grammar.NonTerminal):::ENTER
this.parentTable.gotoTable has only one value
this.parentTable.gotoTable != null
arg0 != null
arg0.beginLine == -1
arg0.beginColumn == -1
arg1 != null
arg1.id >= 0
arg1.beginLine == -1
arg1.beginColumn == -1
arg2 != null
arg2.getClass().getName() == main.ParserSpec$NonTerminals.class
===========================================================================
edu.tum.cup2.parser.tables.LRGoToTable.set(edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.grammar.NonTerminal):::EXIT
this.parentTable == orig(this.parentTable)
this.parentTable.grammar == orig(this.parentTable.grammar)
this.parentTable.grammar.terminals == orig(this.parentTable.grammar.terminals)
this.parentTable.grammar.terminals[] == orig(this.parentTable.grammar.terminals[])
this.parentTable.grammar.nonTerminals == orig(this.parentTable.grammar.nonTerminals)
this.parentTable.grammar.nonTerminals[] == orig(this.parentTable.grammar.nonTerminals[])
this.parentTable.grammar.productions == orig(this.parentTable.grammar.productions)
this.parentTable.grammar.productions[] == orig(this.parentTable.grammar.productions[])
this.parentTable.states == orig(this.parentTable.states)
this.parentTable.states[] == orig(this.parentTable.states[])
this.parentTable.actionTable == orig(this.parentTable.actionTable)
this.parentTable.actionTable.parentTable == orig(this.parentTable.actionTable.parentTable)
this.parentTable.actionTable.table == orig(this.parentTable.actionTable.table)
this.parentTable.gotoTable == orig(this.parentTable.gotoTable)
this.parentTable.gotoTable.parentTable == orig(this.parentTable.gotoTable.parentTable)
this.parentTable.gotoTable.table == orig(this.parentTable.gotoTable.table)
this.parentTable.erI == orig(this.parentTable.erI)
this.table == orig(this.table)
arg0.id == orig(arg0.id)
arg0.beginLine == orig(arg0.beginLine)
arg0.beginColumn == orig(arg0.beginColumn)
arg1.id == orig(arg1.id)
arg1.beginLine == orig(arg1.beginLine)
arg1.beginColumn == orig(arg1.beginColumn)
this.parentTable.gotoTable has only one value
this.parentTable.gotoTable != null
arg0.beginLine == -1
arg0.beginColumn == -1
arg1.id >= 0
arg1.beginLine == -1
arg1.beginColumn == -1
===========================================================================
edu.tum.cup2.parser.tables.LRParsingTable:::CLASS
===========================================================================
edu.tum.cup2.parser.tables.LRParsingTable:::OBJECT
this has only one value
this.grammar has only one value
this.grammar.terminals has only one value
this.grammar.terminals[] contains no nulls and has only one value, of length 30
this.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
this.grammar.nonTerminals has only one value
this.grammar.nonTerminals[] contains no nulls and has only one value, of length 16
this.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
this.grammar.productions has only one value
this.grammar.productions[] contains no nulls and has only one value, of length 48
this.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
this.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
this.states has only one value
this.states[] contains no nulls and has only one value, of length 114
this.states[].getClass().getName() == [edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState]
this.states[].getClass().getName() elements == edu.tum.cup2.parser.states.LRParserState.class
this.actionTable has only one value
this.actionTable.parentTable has only one value
this.actionTable.parentTable.grammar has only one value
this.actionTable.parentTable.states has only one value
this.actionTable.parentTable.states[] contains no nulls and has only one value, of length 114
this.actionTable.parentTable.states[].getClass().getName() == [edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState]
this.actionTable.parentTable.states[].getClass().getName() elements == edu.tum.cup2.parser.states.LRParserState.class
this.actionTable.parentTable.actionTable has only one value
this.actionTable.parentTable.gotoTable has only one value
this.actionTable.parentTable.erI has only one value
this.actionTable.table has only one value
this.gotoTable has only one value
this.gotoTable.parentTable has only one value
this.gotoTable.parentTable.grammar has only one value
this.gotoTable.parentTable.states has only one value
this.gotoTable.parentTable.states[] contains no nulls and has only one value, of length 114
this.gotoTable.parentTable.states[].getClass().getName() == [edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState]
this.gotoTable.parentTable.states[].getClass().getName() elements == edu.tum.cup2.parser.states.LRParserState.class
this.gotoTable.parentTable.actionTable has only one value
this.gotoTable.parentTable.gotoTable has only one value
this.gotoTable.parentTable.erI has only one value
this.gotoTable.table has only one value
this.erI has only one value
size(this.grammar.terminals[]) == 30
size(this.grammar.nonTerminals[]) == 16
size(this.grammar.productions[]) == 48
size(this.states[]) == 114
size(this.actionTable.parentTable.states[]) == 114
size(this.gotoTable.parentTable.states[]) == 114
===========================================================================
edu.tum.cup2.parser.tables.LRParsingTable.LRParsingTable(edu.tum.cup2.grammar.Grammar, edu.tum.cup2.semantics.ParserInterface, int):::ENTER
arg0 has only one value
arg0.terminals has only one value
arg0.terminals[] contains no nulls and has only one value, of length 30
arg0.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.nonTerminals has only one value
arg0.nonTerminals[] contains no nulls and has only one value, of length 16
arg0.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
arg0.productions has only one value
arg0.productions[] contains no nulls and has only one value, of length 48
arg0.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
arg1 has only one value
arg2 == 114
size(arg0.terminals[]) == 30
size(arg0.nonTerminals[]) == 16
size(arg0.productions[]) == 48
===========================================================================
edu.tum.cup2.parser.tables.LRParsingTable.LRParsingTable(edu.tum.cup2.grammar.Grammar, edu.tum.cup2.semantics.ParserInterface, int):::EXIT
arg0.terminals == orig(arg0.terminals)
arg0.terminals[] == orig(arg0.terminals[])
arg0.nonTerminals == orig(arg0.nonTerminals)
arg0.nonTerminals[] == orig(arg0.nonTerminals[])
arg0.productions == orig(arg0.productions)
arg0.productions[] == orig(arg0.productions[])
arg0.terminals has only one value
arg0.terminals[] contains no nulls and has only one value, of length 30
arg0.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals, edu.tum.cup2.grammar.SpecialTerminals]
arg0.nonTerminals has only one value
arg0.nonTerminals[] contains no nulls and has only one value, of length 16
arg0.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, edu.tum.cup2.grammar.SpecialNonTerminals]
arg0.productions has only one value
arg0.productions[] contains no nulls and has only one value, of length 48
arg0.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
arg0.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
size(arg0.terminals[]) == 30
size(arg0.nonTerminals[]) == 16
size(arg0.productions[]) == 48
===========================================================================
edu.tum.cup2.parser.tables.LRParsingTable.getActionTable():::ENTER
===========================================================================
edu.tum.cup2.parser.tables.LRParsingTable.getActionTable():::EXIT
this.grammar == orig(this.grammar)
this.grammar.terminals == orig(this.grammar.terminals)
this.grammar.terminals[] == orig(this.grammar.terminals[])
this.grammar.nonTerminals == orig(this.grammar.nonTerminals)
this.grammar.nonTerminals[] == orig(this.grammar.nonTerminals[])
this.grammar.productions == orig(this.grammar.productions)
this.grammar.productions[] == orig(this.grammar.productions[])
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.actionTable == orig(this.actionTable)
this.actionTable.parentTable == orig(this.actionTable.parentTable)
this.actionTable.parentTable.grammar == orig(this.actionTable.parentTable.grammar)
this.actionTable.parentTable.states == orig(this.actionTable.parentTable.states)
this.actionTable.parentTable.states[] == orig(this.actionTable.parentTable.states[])
this.actionTable.parentTable.actionTable == orig(this.actionTable.parentTable.actionTable)
this.actionTable.parentTable.gotoTable == orig(this.actionTable.parentTable.gotoTable)
this.actionTable.parentTable.erI == orig(this.actionTable.parentTable.erI)
this.actionTable.table == orig(this.actionTable.table)
this.gotoTable == orig(this.gotoTable)
this.gotoTable.parentTable == orig(this.gotoTable.parentTable)
this.gotoTable.parentTable.grammar == orig(this.gotoTable.parentTable.grammar)
this.gotoTable.parentTable.states == orig(this.gotoTable.parentTable.states)
this.gotoTable.parentTable.states[] == orig(this.gotoTable.parentTable.states[])
this.gotoTable.parentTable.actionTable == orig(this.gotoTable.parentTable.actionTable)
this.gotoTable.parentTable.gotoTable == orig(this.gotoTable.parentTable.gotoTable)
this.gotoTable.parentTable.erI == orig(this.gotoTable.parentTable.erI)
this.gotoTable.table == orig(this.gotoTable.table)
this.erI == orig(this.erI)
return has only one value
return.parentTable has only one value
return.parentTable.grammar has only one value
return.parentTable.states has only one value
return.parentTable.states[] contains no nulls and has only one value, of length 114
return.parentTable.states[].getClass().getName() == [edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState]
return.parentTable.states[].getClass().getName() elements == edu.tum.cup2.parser.states.LRParserState.class
return.parentTable.actionTable has only one value
return.parentTable.gotoTable has only one value
return.parentTable.erI has only one value
return.table has only one value
size(return.parentTable.states[]) == 114
===========================================================================
edu.tum.cup2.parser.tables.LRParsingTable.getGotoTable():::ENTER
===========================================================================
edu.tum.cup2.parser.tables.LRParsingTable.getGotoTable():::EXIT
this.grammar == orig(this.grammar)
this.grammar.terminals == orig(this.grammar.terminals)
this.grammar.terminals[] == orig(this.grammar.terminals[])
this.grammar.nonTerminals == orig(this.grammar.nonTerminals)
this.grammar.nonTerminals[] == orig(this.grammar.nonTerminals[])
this.grammar.productions == orig(this.grammar.productions)
this.grammar.productions[] == orig(this.grammar.productions[])
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.actionTable == orig(this.actionTable)
this.actionTable.parentTable == orig(this.actionTable.parentTable)
this.actionTable.parentTable.grammar == orig(this.actionTable.parentTable.grammar)
this.actionTable.parentTable.states == orig(this.actionTable.parentTable.states)
this.actionTable.parentTable.states[] == orig(this.actionTable.parentTable.states[])
this.actionTable.parentTable.actionTable == orig(this.actionTable.parentTable.actionTable)
this.actionTable.parentTable.gotoTable == orig(this.actionTable.parentTable.gotoTable)
this.actionTable.parentTable.erI == orig(this.actionTable.parentTable.erI)
this.actionTable.table == orig(this.actionTable.table)
this.gotoTable == orig(this.gotoTable)
this.gotoTable.parentTable == orig(this.gotoTable.parentTable)
this.gotoTable.parentTable.grammar == orig(this.gotoTable.parentTable.grammar)
this.gotoTable.parentTable.states == orig(this.gotoTable.parentTable.states)
this.gotoTable.parentTable.states[] == orig(this.gotoTable.parentTable.states[])
this.gotoTable.parentTable.actionTable == orig(this.gotoTable.parentTable.actionTable)
this.gotoTable.parentTable.gotoTable == orig(this.gotoTable.parentTable.gotoTable)
this.gotoTable.parentTable.erI == orig(this.gotoTable.parentTable.erI)
this.gotoTable.table == orig(this.gotoTable.table)
this.erI == orig(this.erI)
return has only one value
return.parentTable has only one value
return.parentTable.grammar has only one value
return.parentTable.states has only one value
return.parentTable.states[] contains no nulls and has only one value, of length 114
return.parentTable.states[].getClass().getName() == [edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.parser.states.LRParserState]
return.parentTable.states[].getClass().getName() elements == edu.tum.cup2.parser.states.LRParserState.class
return.parentTable.actionTable has only one value
return.parentTable.gotoTable has only one value
return.parentTable.erI has only one value
return.table has only one value
size(return.parentTable.states[]) == 114
===========================================================================
edu.tum.cup2.parser.tables.LRParsingTable.getStates():::ENTER
===========================================================================
edu.tum.cup2.parser.tables.LRParsingTable.getStates():::EXIT
this.grammar == orig(this.grammar)
this.grammar.terminals == orig(this.grammar.terminals)
this.grammar.terminals[] == orig(this.grammar.terminals[])
this.grammar.nonTerminals == orig(this.grammar.nonTerminals)
this.grammar.nonTerminals[] == orig(this.grammar.nonTerminals[])
this.grammar.productions == orig(this.grammar.productions)
this.grammar.productions[] == orig(this.grammar.productions[])
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.actionTable == orig(this.actionTable)
this.actionTable.parentTable == orig(this.actionTable.parentTable)
this.actionTable.parentTable.grammar == orig(this.actionTable.parentTable.grammar)
this.actionTable.parentTable.states == orig(this.actionTable.parentTable.states)
this.actionTable.parentTable.states[] == orig(this.actionTable.parentTable.states[])
this.actionTable.parentTable.actionTable == orig(this.actionTable.parentTable.actionTable)
this.actionTable.parentTable.gotoTable == orig(this.actionTable.parentTable.gotoTable)
this.actionTable.parentTable.erI == orig(this.actionTable.parentTable.erI)
this.actionTable.table == orig(this.actionTable.table)
this.gotoTable == orig(this.gotoTable)
this.gotoTable.parentTable == orig(this.gotoTable.parentTable)
this.gotoTable.parentTable.grammar == orig(this.gotoTable.parentTable.grammar)
this.gotoTable.parentTable.states == orig(this.gotoTable.parentTable.states)
this.gotoTable.parentTable.states[] == orig(this.gotoTable.parentTable.states[])
this.gotoTable.parentTable.actionTable == orig(this.gotoTable.parentTable.actionTable)
this.gotoTable.parentTable.gotoTable == orig(this.gotoTable.parentTable.gotoTable)
this.gotoTable.parentTable.erI == orig(this.gotoTable.parentTable.erI)
this.gotoTable.table == orig(this.gotoTable.table)
this.erI == orig(this.erI)
return has only one value
return.iterator has only one value
return.iterator.getClass().getName() == java.util.LinkedList$ListItr.class
return.array == null
return.currentIndex == -1
===========================================================================
edu.tum.cup2.parser.tables.StateSymbolKey:::CLASS
===========================================================================
edu.tum.cup2.parser.tables.StateSymbolKey:::OBJECT
this.state != null
this.state.id >= 0
this.state.beginLine == -1
this.state.beginColumn == -1
this.symbol != null
this.hashCode >= 0
===========================================================================
edu.tum.cup2.parser.tables.StateSymbolKey.StateSymbolKey(edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.grammar.Symbol):::ENTER
arg0 != null
arg0.id >= 0
arg0.beginLine == -1
arg0.beginColumn == -1
arg1 != null
===========================================================================
edu.tum.cup2.parser.tables.StateSymbolKey.StateSymbolKey(edu.tum.cup2.parser.states.LRParserState, edu.tum.cup2.grammar.Symbol):::EXIT
arg0.id == orig(arg0.id)
arg0.beginLine == orig(arg0.beginLine)
arg0.beginColumn == orig(arg0.beginColumn)
arg0.id >= 0
arg0.beginLine == -1
arg0.beginColumn == -1
===========================================================================
edu.tum.cup2.parser.tables.StateSymbolKey.equals(java.lang.Object):::ENTER
this.symbol has only one value
this.symbol.getClass().getName() == main.ParserSpec$Terminals.class
arg0 != null
arg0.getClass().getName() == edu.tum.cup2.parser.tables.StateSymbolKey.class
===========================================================================
edu.tum.cup2.parser.tables.StateSymbolKey.equals(java.lang.Object):::EXIT1
===========================================================================
edu.tum.cup2.parser.tables.StateSymbolKey.equals(java.lang.Object):::EXIT1;condition="not(return == true)"
===========================================================================
edu.tum.cup2.parser.tables.StateSymbolKey.equals(java.lang.Object):::EXIT
this.state == orig(this.state)
this.state.id == orig(this.state.id)
this.state.beginLine == orig(this.state.beginLine)
this.state.beginColumn == orig(this.state.beginColumn)
this.symbol == orig(this.symbol)
this.symbol.getClass().getName() == orig(this.symbol.getClass().getName())
this.hashCode == orig(this.hashCode)
this.symbol has only one value
this.symbol.getClass().getName() == main.ParserSpec$Terminals.class
return == false
===========================================================================
edu.tum.cup2.parser.tables.StateSymbolKey.equals(java.lang.Object):::EXIT;condition="not(return == true)"
===========================================================================
edu.tum.cup2.parser.tables.StateSymbolKey.hashCode():::ENTER
===========================================================================
edu.tum.cup2.parser.tables.StateSymbolKey.hashCode():::EXIT
this.state == orig(this.state)
this.state.id == orig(this.state.id)
this.state.beginLine == orig(this.state.beginLine)
this.state.beginColumn == orig(this.state.beginColumn)
this.symbol == orig(this.symbol)
this.symbol.getClass().getName() == orig(this.symbol.getClass().getName())
this.hashCode == orig(this.hashCode)
===========================================================================
edu.tum.cup2.precedences.Associativity:::OBJECT
this has only one value
this.getClass().getName() == edu.tum.cup2.precedences.LeftAssociativity.class
this.terminals has only one value
this.terminals[] contains no nulls and has only one value, of length 1
this.terminals[] elements has only one value
this.terminals[].getClass().getName() == [edu.tum.cup2.grammar.SpecialTerminals]
this.terminals[].getClass().getName() elements == edu.tum.cup2.grammar.SpecialTerminals.class
this.terminals.getClass().getName() == java.util.Arrays$ArrayList.class
size(this.terminals[]) == 1
===========================================================================
edu.tum.cup2.precedences.Associativity.Associativity(java.util.List):::ENTER
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
arg0[].getClass().getName() == [edu.tum.cup2.grammar.SpecialTerminals]
arg0[].getClass().getName() elements == edu.tum.cup2.grammar.SpecialTerminals.class
arg0.getClass().getName() == java.util.Arrays$ArrayList.class
size(arg0[]) == 1
===========================================================================
edu.tum.cup2.precedences.Associativity.Associativity(java.util.List):::EXIT
arg0[] == orig(arg0[])
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
arg0[].getClass().getName() == [edu.tum.cup2.grammar.SpecialTerminals]
arg0[].getClass().getName() elements == edu.tum.cup2.grammar.SpecialTerminals.class
===========================================================================
edu.tum.cup2.precedences.LeftAssociativity:::OBJECT
this has only one value
this.terminals has only one value
this.terminals[] contains no nulls and has only one value, of length 1
this.terminals[] elements has only one value
this.terminals[].getClass().getName() == [edu.tum.cup2.grammar.SpecialTerminals]
this.terminals[].getClass().getName() elements == edu.tum.cup2.grammar.SpecialTerminals.class
this.terminals.getClass().getName() == java.util.Arrays$ArrayList.class
size(this.terminals[]) == 1
===========================================================================
edu.tum.cup2.precedences.LeftAssociativity.LeftAssociativity(java.util.List):::ENTER
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
arg0[].getClass().getName() == [edu.tum.cup2.grammar.SpecialTerminals]
arg0[].getClass().getName() elements == edu.tum.cup2.grammar.SpecialTerminals.class
arg0.getClass().getName() == java.util.Arrays$ArrayList.class
size(arg0[]) == 1
===========================================================================
edu.tum.cup2.precedences.LeftAssociativity.LeftAssociativity(java.util.List):::EXIT
arg0[] == orig(arg0[])
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
arg0[].getClass().getName() == [edu.tum.cup2.grammar.SpecialTerminals]
arg0[].getClass().getName() elements == edu.tum.cup2.grammar.SpecialTerminals.class
===========================================================================
edu.tum.cup2.precedences.Precedences:::OBJECT
this has only one value
this.list has only one value
this.list[] contains no nulls and has only one value, of length 1
this.list[] elements has only one value
this.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
this.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
this.list.getClass().getName() == java.util.Arrays$ArrayList.class
size(this.list[]) == 1
===========================================================================
edu.tum.cup2.precedences.Precedences.Precedences(java.util.List):::ENTER
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
arg0[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
arg0[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
arg0.getClass().getName() == java.util.Arrays$ArrayList.class
size(arg0[]) == 1
===========================================================================
edu.tum.cup2.precedences.Precedences.Precedences(java.util.List):::EXIT
arg0[] == orig(arg0[])
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
arg0[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
arg0[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
===========================================================================
edu.tum.cup2.semantics.Action:::OBJECT
this.paramsCount >= 0
this.returnsVoid == false
this.parserInstance == null
===========================================================================
edu.tum.cup2.semantics.Action.Action():::EXIT
this.method != null
this.actionSubclass != null
===========================================================================
edu.tum.cup2.semantics.Action.init(java.lang.Class):::ENTER
this.method == null
this.actionSubclass == null
this.paramsCount == 0
arg0 != null
===========================================================================
edu.tum.cup2.semantics.Action.init(java.lang.Class):::EXIT2
===========================================================================
edu.tum.cup2.semantics.Action.init(java.lang.Class):::EXIT
this.returnsVoid == orig(this.returnsVoid)
this.parserInstance == orig(this.parserInstance)
this.method != null
this.actionSubclass != null
this.paramsCount >= orig(this.paramsCount)
===========================================================================
edu.tum.cup2.semantics.ParserInterface:::CLASS
===========================================================================
edu.tum.cup2.semantics.ParserInterface:::OBJECT
this has only one value
===========================================================================
edu.tum.cup2.semantics.ParserInterface.ParserInterface():::EXIT
===========================================================================
edu.tum.cup2.semantics.SymbolValueClasses:::OBJECT
this has only one value
===========================================================================
edu.tum.cup2.semantics.SymbolValueClasses.SymbolValueClasses():::EXIT
===========================================================================
edu.tum.cup2.spec.CUP2Specification$1:::OBJECT
this has only one value
edu.tum.cup2.spec.CUP2Specification.this has only one value
edu.tum.cup2.spec.CUP2Specification.this.getClass().getName() == main.ParserSpec.class
edu.tum.cup2.spec.CUP2Specification.this.isInit == true
edu.tum.cup2.spec.CUP2Specification.this.auxNonTerminals has only one value
edu.tum.cup2.spec.CUP2Specification.this.auxNonTerminals != null
edu.tum.cup2.spec.CUP2Specification.this.auxNonTerminals[] == []
edu.tum.cup2.spec.CUP2Specification.this.auxNonTerminals[].getClass().getName() == []
edu.tum.cup2.spec.CUP2Specification.this.symbolValueClasses has only one value
edu.tum.cup2.spec.CUP2Specification.this.symbolValueClasses != null
edu.tum.cup2.spec.CUP2Specification.this.precedences has only one value
edu.tum.cup2.spec.CUP2Specification.this.precedences != null
edu.tum.cup2.spec.CUP2Specification.this.precedences.list has only one value
edu.tum.cup2.spec.CUP2Specification.this.precedences.list != null
edu.tum.cup2.spec.CUP2Specification.this.precedences.list[] contains no nulls and has only one value, of length 1
edu.tum.cup2.spec.CUP2Specification.this.precedences.list[] elements has only one value
edu.tum.cup2.spec.CUP2Specification.this.precedences.list[] elements != null
edu.tum.cup2.spec.CUP2Specification.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
edu.tum.cup2.spec.CUP2Specification.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
edu.tum.cup2.spec.CUP2Specification.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
edu.tum.cup2.spec.CUP2Specification.this.grammar == null
edu.tum.cup2.spec.CUP2Specification.this.grammarInterface has only one value
edu.tum.cup2.spec.CUP2Specification.this.grammarInterface != null
edu.tum.cup2.spec.CUP2Specification.this.productionCount == 47
edu.tum.cup2.spec.CUP2Specification.this.auxiliaryProductions has only one value
edu.tum.cup2.spec.CUP2Specification.this.auxiliaryProductions != null
edu.tum.cup2.spec.CUP2Specification.this.auxiliaryProductions[] == []
edu.tum.cup2.spec.CUP2Specification.this.auxiliaryProductions[].getClass().getName() == []
size(edu.tum.cup2.spec.CUP2Specification.this.precedences.list[]) == 1
===========================================================================
edu.tum.cup2.spec.CUP2Specification$1.(edu.tum.cup2.spec.CUP2Specification):::ENTER
edu.tum.cup2.spec.CUP2Specification.this has only one value
edu.tum.cup2.spec.CUP2Specification.this.getClass().getName() == main.ParserSpec.class
edu.tum.cup2.spec.CUP2Specification.this.isInit == true
edu.tum.cup2.spec.CUP2Specification.this.auxNonTerminals has only one value
edu.tum.cup2.spec.CUP2Specification.this.auxNonTerminals[] == []
edu.tum.cup2.spec.CUP2Specification.this.auxNonTerminals[].getClass().getName() == []
edu.tum.cup2.spec.CUP2Specification.this.symbolValueClasses has only one value
edu.tum.cup2.spec.CUP2Specification.this.precedences has only one value
edu.tum.cup2.spec.CUP2Specification.this.precedences.list has only one value
edu.tum.cup2.spec.CUP2Specification.this.precedences.list[] contains no nulls and has only one value, of length 1
edu.tum.cup2.spec.CUP2Specification.this.precedences.list[] elements has only one value
edu.tum.cup2.spec.CUP2Specification.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
edu.tum.cup2.spec.CUP2Specification.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
edu.tum.cup2.spec.CUP2Specification.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
edu.tum.cup2.spec.CUP2Specification.this.grammar == null
edu.tum.cup2.spec.CUP2Specification.this.grammarInterface has only one value
edu.tum.cup2.spec.CUP2Specification.this.productionCount == 47
edu.tum.cup2.spec.CUP2Specification.this.auxiliaryProductions has only one value
edu.tum.cup2.spec.CUP2Specification.this.auxiliaryProductions[] == []
edu.tum.cup2.spec.CUP2Specification.this.auxiliaryProductions[].getClass().getName() == []
size(edu.tum.cup2.spec.CUP2Specification.this.precedences.list[]) == 1
===========================================================================
edu.tum.cup2.spec.CUP2Specification$1.(edu.tum.cup2.spec.CUP2Specification):::EXIT
edu.tum.cup2.spec.CUP2Specification.this == orig(edu.tum.cup2.spec.CUP2Specification.this)
edu.tum.cup2.spec.CUP2Specification.this.getClass().getName() == orig(edu.tum.cup2.spec.CUP2Specification.this.getClass().getName())
edu.tum.cup2.spec.CUP2Specification.this.isInit == orig(edu.tum.cup2.spec.CUP2Specification.this.isInit)
edu.tum.cup2.spec.CUP2Specification.this.auxNonTerminals == orig(edu.tum.cup2.spec.CUP2Specification.this.auxNonTerminals)
edu.tum.cup2.spec.CUP2Specification.this.auxNonTerminals[] == orig(edu.tum.cup2.spec.CUP2Specification.this.auxNonTerminals[])
edu.tum.cup2.spec.CUP2Specification.this.symbolValueClasses == orig(edu.tum.cup2.spec.CUP2Specification.this.symbolValueClasses)
edu.tum.cup2.spec.CUP2Specification.this.precedences == orig(edu.tum.cup2.spec.CUP2Specification.this.precedences)
edu.tum.cup2.spec.CUP2Specification.this.precedences.list == orig(edu.tum.cup2.spec.CUP2Specification.this.precedences.list)
edu.tum.cup2.spec.CUP2Specification.this.precedences.list[] == orig(edu.tum.cup2.spec.CUP2Specification.this.precedences.list[])
edu.tum.cup2.spec.CUP2Specification.this.precedences.list.getClass().getName() == orig(edu.tum.cup2.spec.CUP2Specification.this.precedences.list.getClass().getName())
edu.tum.cup2.spec.CUP2Specification.this.grammar == orig(edu.tum.cup2.spec.CUP2Specification.this.grammar)
edu.tum.cup2.spec.CUP2Specification.this.grammarInterface == orig(edu.tum.cup2.spec.CUP2Specification.this.grammarInterface)
edu.tum.cup2.spec.CUP2Specification.this.productionCount == orig(edu.tum.cup2.spec.CUP2Specification.this.productionCount)
edu.tum.cup2.spec.CUP2Specification.this.auxiliaryProductions == orig(edu.tum.cup2.spec.CUP2Specification.this.auxiliaryProductions)
edu.tum.cup2.spec.CUP2Specification.this.auxiliaryProductions[] == orig(edu.tum.cup2.spec.CUP2Specification.this.auxiliaryProductions[])
===========================================================================
edu.tum.cup2.spec.CUP2Specification$1.compare(edu.tum.cup2.grammar.Terminal, edu.tum.cup2.grammar.Terminal):::ENTER
arg0 != null
arg0.getClass().getName() == main.ParserSpec$Terminals.class
arg1 != null
arg1.getClass().getName() == main.ParserSpec$Terminals.class
===========================================================================
edu.tum.cup2.spec.CUP2Specification$1.compare(edu.tum.cup2.grammar.Terminal, edu.tum.cup2.grammar.Terminal):::EXIT
edu.tum.cup2.spec.CUP2Specification.this == orig(edu.tum.cup2.spec.CUP2Specification.this)
edu.tum.cup2.spec.CUP2Specification.this.getClass().getName() == orig(edu.tum.cup2.spec.CUP2Specification.this.getClass().getName())
edu.tum.cup2.spec.CUP2Specification.this.isInit == orig(edu.tum.cup2.spec.CUP2Specification.this.isInit)
edu.tum.cup2.spec.CUP2Specification.this.auxNonTerminals == orig(edu.tum.cup2.spec.CUP2Specification.this.auxNonTerminals)
edu.tum.cup2.spec.CUP2Specification.this.auxNonTerminals[] == orig(edu.tum.cup2.spec.CUP2Specification.this.auxNonTerminals[])
edu.tum.cup2.spec.CUP2Specification.this.symbolValueClasses == orig(edu.tum.cup2.spec.CUP2Specification.this.symbolValueClasses)
edu.tum.cup2.spec.CUP2Specification.this.precedences == orig(edu.tum.cup2.spec.CUP2Specification.this.precedences)
edu.tum.cup2.spec.CUP2Specification.this.precedences.list == orig(edu.tum.cup2.spec.CUP2Specification.this.precedences.list)
edu.tum.cup2.spec.CUP2Specification.this.precedences.list[] == orig(edu.tum.cup2.spec.CUP2Specification.this.precedences.list[])
edu.tum.cup2.spec.CUP2Specification.this.precedences.list.getClass().getName() == orig(edu.tum.cup2.spec.CUP2Specification.this.precedences.list.getClass().getName())
edu.tum.cup2.spec.CUP2Specification.this.grammar == orig(edu.tum.cup2.spec.CUP2Specification.this.grammar)
edu.tum.cup2.spec.CUP2Specification.this.grammarInterface == orig(edu.tum.cup2.spec.CUP2Specification.this.grammarInterface)
edu.tum.cup2.spec.CUP2Specification.this.productionCount == orig(edu.tum.cup2.spec.CUP2Specification.this.productionCount)
edu.tum.cup2.spec.CUP2Specification.this.auxiliaryProductions == orig(edu.tum.cup2.spec.CUP2Specification.this.auxiliaryProductions)
edu.tum.cup2.spec.CUP2Specification.this.auxiliaryProductions[] == orig(edu.tum.cup2.spec.CUP2Specification.this.auxiliaryProductions[])
return == -1
===========================================================================
edu.tum.cup2.spec.CUP2Specification:::OBJECT
this has only one value
this.getClass().getName() == main.ParserSpec.class
this.auxNonTerminals has only one value
this.auxNonTerminals != null
this.auxNonTerminals[] == []
this.auxNonTerminals[].getClass().getName() == []
this.precedences.list has only one value
this.precedences.list != null
this.precedences.list[] contains no nulls and has only one value, of length 1
this.precedences.list[] elements has only one value
this.precedences.list[] elements != null
this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
this.grammar.terminals has only one value
this.grammar.terminals[] contains no nulls and has only one value, of length 29
this.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals]
this.grammar.nonTerminals has only one value
this.grammar.nonTerminals[] contains no nulls and has only one value, of length 15
this.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals]
this.grammar.nonTerminals[].getClass().getName() elements == main.ParserSpec.NonTerminals.class
this.grammar.productions has only one value
this.grammar.productions[] contains no nulls and has only one value, of length 47
this.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
this.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
this.productionCount >= 0
this.auxiliaryProductions[] == []
this.auxiliaryProductions[].getClass().getName() == []
size(this.precedences.list[]) == 1
size(this.grammar.terminals[]) == 29
size(this.grammar.nonTerminals[]) == 15
size(this.grammar.productions[]) == 47
===========================================================================
edu.tum.cup2.spec.CUP2Specification.CUP2Specification():::EXIT
this.isInit == false
this.symbolValueClasses == null
this.precedences has only one value
this.grammar == null
this.grammarInterface has only one value
this.productionCount == 0
this.auxiliaryProductions has only one value
===========================================================================
edu.tum.cup2.spec.CUP2Specification.checkAction(edu.tum.cup2.semantics.Action, int, java.util.List, edu.tum.cup2.semantics.SymbolValueClasses):::ENTER
this.isInit == true
this.symbolValueClasses has only one value
this.symbolValueClasses != null
this.precedences has only one value
this.precedences != null
this.grammar == null
this.grammarInterface has only one value
this.grammarInterface != null
this.auxiliaryProductions has only one value
this.auxiliaryProductions != null
arg0 != null
arg0.method != null
arg0.actionSubclass != null
arg0.returnsVoid == false
arg0.parserInstance == null
arg1 >= 1
arg2 != null
arg2[] elements != null
arg2.getClass().getName() == java.util.ArrayList.class
arg3 has only one value
arg3 != null
size(arg2[]) >= 1
===========================================================================
edu.tum.cup2.spec.CUP2Specification.checkAction(edu.tum.cup2.semantics.Action, int, java.util.List, edu.tum.cup2.semantics.SymbolValueClasses):::EXIT
this.isInit == orig(this.isInit)
this.auxNonTerminals == orig(this.auxNonTerminals)
this.auxNonTerminals[] == orig(this.auxNonTerminals[])
this.symbolValueClasses == orig(this.symbolValueClasses)
this.precedences == orig(this.precedences)
this.precedences.list == orig(this.precedences.list)
this.precedences.list[] == orig(this.precedences.list[])
this.precedences.list.getClass().getName() == orig(this.precedences.list.getClass().getName())
this.grammar == orig(this.grammar)
this.grammarInterface == orig(this.grammarInterface)
this.productionCount == orig(this.productionCount)
this.auxiliaryProductions == orig(this.auxiliaryProductions)
this.auxiliaryProductions[] == orig(this.auxiliaryProductions[])
arg0.method == orig(arg0.method)
arg0.actionSubclass == orig(arg0.actionSubclass)
arg0.paramsCount == orig(arg0.paramsCount)
arg0.returnsVoid == orig(arg0.returnsVoid)
arg0.parserInstance == orig(arg0.parserInstance)
arg2[] == orig(arg2[])
this.isInit == true
this.symbolValueClasses has only one value
this.symbolValueClasses != null
this.precedences has only one value
this.precedences != null
this.grammar == null
this.grammarInterface has only one value
this.grammarInterface != null
this.auxiliaryProductions has only one value
this.auxiliaryProductions != null
arg0.method != null
arg0.actionSubclass != null
arg0.returnsVoid == false
arg0.parserInstance == null
arg2[] elements != null
===========================================================================
edu.tum.cup2.spec.CUP2Specification.getGrammar():::ENTER
this.isInit == true
this.symbolValueClasses has only one value
this.precedences has only one value
this.grammar has only one value
this.grammarInterface has only one value
this.productionCount == 47
this.auxiliaryProductions has only one value
===========================================================================
edu.tum.cup2.spec.CUP2Specification.getGrammar():::EXIT
this.isInit == orig(this.isInit)
this.auxNonTerminals == orig(this.auxNonTerminals)
this.auxNonTerminals[] == orig(this.auxNonTerminals[])
this.symbolValueClasses == orig(this.symbolValueClasses)
this.precedences == orig(this.precedences)
this.precedences.list == orig(this.precedences.list)
this.precedences.list[] == orig(this.precedences.list[])
this.precedences.list.getClass().getName() == orig(this.precedences.list.getClass().getName())
this.grammar == orig(this.grammar)
this.grammar.terminals == orig(this.grammar.terminals)
this.grammar.terminals[] == orig(this.grammar.terminals[])
this.grammar.nonTerminals == orig(this.grammar.nonTerminals)
this.grammar.nonTerminals[] == orig(this.grammar.nonTerminals[])
this.grammar.productions == orig(this.grammar.productions)
this.grammar.productions[] == orig(this.grammar.productions[])
this.grammarInterface == orig(this.grammarInterface)
this.productionCount == orig(this.productionCount)
this.auxiliaryProductions == orig(this.auxiliaryProductions)
this.auxiliaryProductions[] == orig(this.auxiliaryProductions[])
this.isInit == true
this.symbolValueClasses has only one value
this.precedences has only one value
this.grammar has only one value
this.grammarInterface has only one value
this.productionCount == 47
this.auxiliaryProductions has only one value
return has only one value
return.terminals has only one value
return.terminals[] contains no nulls and has only one value, of length 29
return.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals]
return.nonTerminals has only one value
return.nonTerminals[] contains no nulls and has only one value, of length 15
return.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals]
return.nonTerminals[].getClass().getName() elements == main.ParserSpec.NonTerminals.class
return.productions has only one value
return.productions[] contains no nulls and has only one value, of length 47
return.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
return.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
size(return.terminals[]) == 29
size(return.nonTerminals[]) == 15
size(return.productions[]) == 47
===========================================================================
edu.tum.cup2.spec.CUP2Specification.getNonTerminals():::ENTER
this.isInit == true
this.symbolValueClasses has only one value
this.precedences has only one value
this.grammar == null
this.grammarInterface has only one value
this.productionCount == 47
this.auxiliaryProductions has only one value
===========================================================================
edu.tum.cup2.spec.CUP2Specification.getNonTerminals():::EXIT
this.isInit == orig(this.isInit)
this.auxNonTerminals == orig(this.auxNonTerminals)
this.auxNonTerminals[] == orig(this.auxNonTerminals[])
this.symbolValueClasses == orig(this.symbolValueClasses)
this.precedences == orig(this.precedences)
this.precedences.list == orig(this.precedences.list)
this.precedences.list[] == orig(this.precedences.list[])
this.precedences.list.getClass().getName() == orig(this.precedences.list.getClass().getName())
this.grammar == orig(this.grammar)
this.grammarInterface == orig(this.grammarInterface)
this.productionCount == orig(this.productionCount)
this.auxiliaryProductions == orig(this.auxiliaryProductions)
this.auxiliaryProductions[] == orig(this.auxiliaryProductions[])
this.isInit == true
this.symbolValueClasses has only one value
this.precedences has only one value
this.grammar == null
this.grammarInterface has only one value
this.productionCount == 47
this.auxiliaryProductions has only one value
return has only one value
return.getClass().getName() == edu.tum.cup2.grammar.NonTerminal[].class
return[] contains no nulls and has only one value, of length 15
size(return[]) == 15
===========================================================================
edu.tum.cup2.spec.CUP2Specification.getParserInterface():::ENTER
this.isInit == true
this.symbolValueClasses has only one value
this.precedences has only one value
this.grammar has only one value
this.grammarInterface has only one value
this.productionCount == 47
this.auxiliaryProductions has only one value
===========================================================================
edu.tum.cup2.spec.CUP2Specification.getParserInterface():::EXIT
this.isInit == orig(this.isInit)
this.auxNonTerminals == orig(this.auxNonTerminals)
this.auxNonTerminals[] == orig(this.auxNonTerminals[])
this.symbolValueClasses == orig(this.symbolValueClasses)
this.precedences == orig(this.precedences)
this.precedences.list == orig(this.precedences.list)
this.precedences.list[] == orig(this.precedences.list[])
this.precedences.list.getClass().getName() == orig(this.precedences.list.getClass().getName())
this.grammar == orig(this.grammar)
this.grammar.terminals == orig(this.grammar.terminals)
this.grammar.terminals[] == orig(this.grammar.terminals[])
this.grammar.nonTerminals == orig(this.grammar.nonTerminals)
this.grammar.nonTerminals[] == orig(this.grammar.nonTerminals[])
this.grammar.productions == orig(this.grammar.productions)
this.grammar.productions[] == orig(this.grammar.productions[])
this.grammarInterface == orig(this.grammarInterface)
this.productionCount == orig(this.productionCount)
this.auxiliaryProductions == orig(this.auxiliaryProductions)
this.auxiliaryProductions[] == orig(this.auxiliaryProductions[])
this.isInit == true
this.symbolValueClasses has only one value
this.precedences has only one value
this.grammar has only one value
this.grammarInterface has only one value
this.productionCount == 47
this.auxiliaryProductions has only one value
return has only one value
===========================================================================
edu.tum.cup2.spec.CUP2Specification.getPrecedences():::ENTER
this.isInit == true
this.symbolValueClasses has only one value
this.precedences has only one value
this.grammar has only one value
this.grammarInterface has only one value
this.productionCount == 47
this.auxiliaryProductions has only one value
===========================================================================
edu.tum.cup2.spec.CUP2Specification.getPrecedences():::EXIT
this.isInit == orig(this.isInit)
this.auxNonTerminals == orig(this.auxNonTerminals)
this.auxNonTerminals[] == orig(this.auxNonTerminals[])
this.symbolValueClasses == orig(this.symbolValueClasses)
this.precedences == orig(this.precedences)
this.precedences.list == orig(this.precedences.list)
this.precedences.list[] == orig(this.precedences.list[])
this.precedences.list.getClass().getName() == orig(this.precedences.list.getClass().getName())
this.grammar == orig(this.grammar)
this.grammar.terminals == orig(this.grammar.terminals)
this.grammar.terminals[] == orig(this.grammar.terminals[])
this.grammar.nonTerminals == orig(this.grammar.nonTerminals)
this.grammar.nonTerminals[] == orig(this.grammar.nonTerminals[])
this.grammar.productions == orig(this.grammar.productions)
this.grammar.productions[] == orig(this.grammar.productions[])
this.grammarInterface == orig(this.grammarInterface)
this.productionCount == orig(this.productionCount)
this.auxiliaryProductions == orig(this.auxiliaryProductions)
this.auxiliaryProductions[] == orig(this.auxiliaryProductions[])
this.isInit == true
this.symbolValueClasses has only one value
this.precedences has only one value
this.grammar has only one value
this.grammarInterface has only one value
this.productionCount == 47
this.auxiliaryProductions has only one value
return has only one value
return.list has only one value
return.list[] contains no nulls and has only one value, of length 1
return.list[] elements has only one value
return.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
return.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
return.list.getClass().getName() == java.util.Arrays$ArrayList.class
size(return.list[]) == 1
===========================================================================
edu.tum.cup2.spec.CUP2Specification.getTerminals():::ENTER
this.isInit == true
this.symbolValueClasses has only one value
this.precedences has only one value
this.grammar == null
this.grammarInterface has only one value
this.productionCount == 47
this.auxiliaryProductions has only one value
===========================================================================
edu.tum.cup2.spec.CUP2Specification.getTerminals():::EXIT
this.isInit == orig(this.isInit)
this.auxNonTerminals == orig(this.auxNonTerminals)
this.auxNonTerminals[] == orig(this.auxNonTerminals[])
this.symbolValueClasses == orig(this.symbolValueClasses)
this.precedences == orig(this.precedences)
this.precedences.list == orig(this.precedences.list)
this.precedences.list[] == orig(this.precedences.list[])
this.precedences.list.getClass().getName() == orig(this.precedences.list.getClass().getName())
this.grammar == orig(this.grammar)
this.grammarInterface == orig(this.grammarInterface)
this.productionCount == orig(this.productionCount)
this.auxiliaryProductions == orig(this.auxiliaryProductions)
this.auxiliaryProductions[] == orig(this.auxiliaryProductions[])
this.isInit == true
this.symbolValueClasses has only one value
this.precedences has only one value
this.grammar == null
this.grammarInterface has only one value
this.productionCount == 47
this.auxiliaryProductions has only one value
return has only one value
return.getClass().getName() == edu.tum.cup2.grammar.Terminal[].class
return[] contains no nulls and has only one value, of length 28
size(return[]) == 28
===========================================================================
edu.tum.cup2.spec.CUP2Specification.grammar(edu.tum.cup2.grammar.Production[][]):::ENTER
this.isInit == true
this.symbolValueClasses has only one value
this.precedences has only one value
this.grammar == null
this.grammarInterface has only one value
this.productionCount == 47
this.auxiliaryProductions has only one value
arg0 has only one value
arg0.getClass().getName() == edu.tum.cup2.grammar.Production[][].class
arg0[] contains no nulls and has only one value, of length 15
size(arg0[]) == 15
===========================================================================
edu.tum.cup2.spec.CUP2Specification.grammar(edu.tum.cup2.grammar.Production[][]):::EXIT
this.isInit == orig(this.isInit)
this.auxNonTerminals == orig(this.auxNonTerminals)
this.auxNonTerminals[] == orig(this.auxNonTerminals[])
this.symbolValueClasses == orig(this.symbolValueClasses)
this.precedences == orig(this.precedences)
this.precedences.list == orig(this.precedences.list)
this.precedences.list[] == orig(this.precedences.list[])
this.precedences.list.getClass().getName() == orig(this.precedences.list.getClass().getName())
this.grammarInterface == orig(this.grammarInterface)
this.productionCount == orig(this.productionCount)
this.auxiliaryProductions == orig(this.auxiliaryProductions)
this.auxiliaryProductions[] == orig(this.auxiliaryProductions[])
arg0[] == orig(arg0[])
this.isInit == true
this.symbolValueClasses has only one value
this.precedences has only one value
this.grammar has only one value
this.grammarInterface has only one value
this.productionCount == 47
this.auxiliaryProductions has only one value
arg0[] contains no nulls and has only one value, of length 15
===========================================================================
edu.tum.cup2.spec.CUP2Specification.init():::ENTER
this.precedences has only one value
this.precedences != null
this.grammar == null
this.grammarInterface has only one value
this.grammarInterface != null
this.auxiliaryProductions has only one value
this.auxiliaryProductions != null
===========================================================================
edu.tum.cup2.spec.CUP2Specification.init():::EXIT
this.auxNonTerminals == orig(this.auxNonTerminals)
this.auxNonTerminals[] == orig(this.auxNonTerminals[])
this.precedences == orig(this.precedences)
this.precedences.list == orig(this.precedences.list)
this.precedences.list[] == orig(this.precedences.list[])
this.precedences.list.getClass().getName() == orig(this.precedences.list.getClass().getName())
this.grammar == orig(this.grammar)
this.grammarInterface == orig(this.grammarInterface)
this.productionCount == orig(this.productionCount)
this.auxiliaryProductions == orig(this.auxiliaryProductions)
this.auxiliaryProductions[] == orig(this.auxiliaryProductions[])
this.isInit == true
this.symbolValueClasses has only one value
this.symbolValueClasses != null
this.precedences has only one value
this.precedences != null
this.grammar == null
this.grammarInterface has only one value
this.grammarInterface != null
this.auxiliaryProductions has only one value
this.auxiliaryProductions != null
===========================================================================
edu.tum.cup2.spec.CUP2Specification.left(edu.tum.cup2.grammar.Terminal[]):::ENTER
this.isInit == false
this.symbolValueClasses == null
this.precedences == null
this.grammar == null
this.grammarInterface == null
this.productionCount == 0
this.auxiliaryProductions == null
arg0 has only one value
arg0.getClass().getName() == edu.tum.cup2.grammar.Terminal[].class
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
size(arg0[]) == 1
===========================================================================
edu.tum.cup2.spec.CUP2Specification.left(edu.tum.cup2.grammar.Terminal[]):::EXIT
this.isInit == orig(this.isInit)
this.auxNonTerminals == orig(this.auxNonTerminals)
this.auxNonTerminals[] == orig(this.auxNonTerminals[])
this.symbolValueClasses == orig(this.symbolValueClasses)
this.precedences == orig(this.precedences)
this.grammar == orig(this.grammar)
this.grammarInterface == orig(this.grammarInterface)
this.productionCount == orig(this.productionCount)
this.auxiliaryProductions == orig(this.auxiliaryProductions)
arg0[] == orig(arg0[])
this.isInit == false
this.symbolValueClasses == null
this.precedences == null
this.grammar == null
this.grammarInterface == null
this.productionCount == 0
this.auxiliaryProductions == null
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
return has only one value
return.terminals has only one value
return.terminals[] contains no nulls and has only one value, of length 1
return.terminals[] elements has only one value
return.terminals[].getClass().getName() == [edu.tum.cup2.grammar.SpecialTerminals]
return.terminals[].getClass().getName() elements == edu.tum.cup2.grammar.SpecialTerminals.class
return.terminals.getClass().getName() == java.util.Arrays$ArrayList.class
size(return.terminals[]) == 1
===========================================================================
edu.tum.cup2.spec.CUP2Specification.prod(edu.tum.cup2.grammar.NonTerminal, edu.tum.cup2.spec.util.RHSItem[]):::ENTER
this.precedences has only one value
this.precedences != null
this.grammar == null
this.grammarInterface has only one value
this.grammarInterface != null
this.auxiliaryProductions has only one value
this.auxiliaryProductions != null
arg0 != null
arg0.getClass().getName() == main.ParserSpec$NonTerminals.class
arg1 != null
arg1.getClass().getName() == edu.tum.cup2.spec.util.RHSItem[].class
arg1[] elements != null
===========================================================================
edu.tum.cup2.spec.CUP2Specification.prod(edu.tum.cup2.grammar.NonTerminal, edu.tum.cup2.spec.util.RHSItem[]):::EXIT
this.auxNonTerminals == orig(this.auxNonTerminals)
this.auxNonTerminals[] == orig(this.auxNonTerminals[])
this.precedences == orig(this.precedences)
this.precedences.list == orig(this.precedences.list)
this.precedences.list[] == orig(this.precedences.list[])
this.precedences.list.getClass().getName() == orig(this.precedences.list.getClass().getName())
this.grammar == orig(this.grammar)
this.grammarInterface == orig(this.grammarInterface)
this.auxiliaryProductions == orig(this.auxiliaryProductions)
this.auxiliaryProductions[] == orig(this.auxiliaryProductions[])
arg1[] == orig(arg1[])
this.isInit == true
this.symbolValueClasses has only one value
this.symbolValueClasses != null
this.precedences has only one value
this.precedences != null
this.grammar == null
this.grammarInterface has only one value
this.grammarInterface != null
this.auxiliaryProductions has only one value
this.auxiliaryProductions != null
arg1[] elements != null
return != null
return.getClass().getName() == edu.tum.cup2.grammar.Production[].class
return[] elements != null
return[].id sorted by <
return[].lhs elements != null
return[].lhs elements are equal
return[].lhs.getClass().getName() elements == main.ParserSpec.NonTerminals.class
return[].rhs elements != null
return[].rhs.getClass().getName() elements == java.util.ArrayList.class
return[].reduceAction elements != null
return[].reduceAction.method elements != null
return[].reduceAction.actionSubclass elements != null
return[].reduceAction.returnsVoid elements == false
return[].reduceAction.parserInstance elements == null
size(return[]) >= 2
this.productionCount > orig(this.productionCount)
===========================================================================
edu.tum.cup2.spec.CUP2Specification.rhs(edu.tum.cup2.grammar.Symbol[]):::ENTER
this.precedences has only one value
this.precedences != null
this.grammar == null
this.grammarInterface has only one value
this.grammarInterface != null
this.auxiliaryProductions has only one value
this.auxiliaryProductions != null
arg0 != null
arg0.getClass().getName() == edu.tum.cup2.grammar.Symbol[].class
arg0[] elements != null
===========================================================================
edu.tum.cup2.spec.CUP2Specification.rhs(edu.tum.cup2.grammar.Symbol[]):::EXIT
this.isInit == orig(this.isInit)
this.auxNonTerminals == orig(this.auxNonTerminals)
this.auxNonTerminals[] == orig(this.auxNonTerminals[])
this.symbolValueClasses == orig(this.symbolValueClasses)
this.precedences == orig(this.precedences)
this.precedences.list == orig(this.precedences.list)
this.precedences.list[] == orig(this.precedences.list[])
this.precedences.list.getClass().getName() == orig(this.precedences.list.getClass().getName())
this.grammar == orig(this.grammar)
this.grammarInterface == orig(this.grammarInterface)
this.productionCount == orig(this.productionCount)
this.auxiliaryProductions == orig(this.auxiliaryProductions)
this.auxiliaryProductions[] == orig(this.auxiliaryProductions[])
arg0[] == orig(arg0[])
this.precedences has only one value
this.precedences != null
this.grammar == null
this.grammarInterface has only one value
this.grammarInterface != null
this.auxiliaryProductions has only one value
this.auxiliaryProductions != null
arg0[] elements != null
return != null
return.symbols != null
return.symbols[] elements != null
return.symbols.getClass().getName() == java.util.Arrays$ArrayList.class
return.precedence == null
size(return.symbols[]) >= 1
===========================================================================
edu.tum.cup2.spec.util.RHSSymbols:::OBJECT
this.symbols != null
this.symbols[] elements != null
this.symbols.getClass().getName() == java.util.Arrays$ArrayList.class
this.precedence == null
size(this.symbols[]) >= 1
===========================================================================
edu.tum.cup2.spec.util.RHSSymbols.RHSSymbols(edu.tum.cup2.grammar.Symbol[]):::ENTER
arg0 != null
arg0.getClass().getName() == edu.tum.cup2.grammar.Symbol[].class
arg0[] elements != null
===========================================================================
edu.tum.cup2.spec.util.RHSSymbols.RHSSymbols(edu.tum.cup2.grammar.Symbol[]):::EXIT
===========================================================================
edu.tum.cup2.spec.util.RHSSymbols.getPrecedence():::ENTER
===========================================================================
edu.tum.cup2.spec.util.RHSSymbols.getPrecedence():::EXIT
this.symbols == orig(this.symbols)
this.symbols[] == orig(this.symbols[])
this.symbols.getClass().getName() == orig(this.symbols.getClass().getName())
this.precedence == orig(this.precedence)
return == null
===========================================================================
edu.tum.cup2.spec.util.RHSSymbols.getSymbols():::ENTER
===========================================================================
edu.tum.cup2.spec.util.RHSSymbols.getSymbols():::EXIT
this.symbols == orig(this.symbols)
this.symbols[] == orig(this.symbols[])
this.symbols.getClass().getName() == orig(this.symbols.getClass().getName())
this.precedence == orig(this.precedence)
return != null
return[] elements != null
return.getClass().getName() == java.util.Arrays$ArrayList.class
size(return[]) >= 1
===========================================================================
edu.tum.cup2.util.ArrayTools:::OBJECT
this has only one value
===========================================================================
edu.tum.cup2.util.ArrayTools.ArrayTools():::EXIT
===========================================================================
edu.tum.cup2.util.ArrayTools.toHashSet(java.lang.Object[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == edu.tum.cup2.generator.items.LR1Item[].class
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
size(arg0[]) == 1
===========================================================================
edu.tum.cup2.util.ArrayTools.toHashSet(java.lang.Object[]):::EXIT
arg0[] == orig(arg0[])
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
return has only one value
===========================================================================
edu.tum.cup2.util.ArrayTools.toLinkedList(java.lang.Object[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == edu.tum.cup2.grammar.NonTerminal[].class
arg0[] contains no nulls and has only one value, of length 15
size(arg0[]) == 15
===========================================================================
edu.tum.cup2.util.ArrayTools.toLinkedList(java.lang.Object[]):::EXIT
arg0[] == orig(arg0[])
arg0[] contains no nulls and has only one value, of length 15
return has only one value
return[] contains no nulls and has only one value, of length 15
return[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals]
return[].getClass().getName() elements == main.ParserSpec.NonTerminals.class
size(return[]) == 15
===========================================================================
edu.tum.cup2.util.CollectionTools.map():::EXIT
return.getClass().getName() == java.util.HashMap.class
===========================================================================
edu.tum.cup2.util.CollectionTools.set():::EXIT
return != null
return.getClass().getName() == java.util.HashSet.class
===========================================================================
edu.tum.cup2.util.It:::OBJECT
this.array[] elements != null
this.currentIndex >= -1
===========================================================================
edu.tum.cup2.util.It.It(java.lang.Object[]):::ENTER
arg0 != null
arg0[] elements != null
size(arg0[]) >= 2
===========================================================================
edu.tum.cup2.util.It.It(java.lang.Object[]):::EXIT
arg0[] == orig(arg0[])
this.iterator == null
this.array != null
this.currentIndex == -1
arg0[] elements != null
===========================================================================
edu.tum.cup2.util.It.It(java.util.Collection):::ENTER
arg0 != null
===========================================================================
edu.tum.cup2.util.It.It(java.util.Collection):::EXIT
this.iterator != null
this.array == null
this.currentIndex == -1
===========================================================================
edu.tum.cup2.util.It.hasNext():::ENTER
===========================================================================
edu.tum.cup2.util.It.hasNext():::EXIT1
(return == false)  ==>  (this.currentIndex >= 0)
(return == false)  ==>  (this.iterator.getClass().getName() == java.util.HashMap$KeyIterator.class)
(return == true)  ==>  (this.currentIndex >= -1)
this.iterator != null
this.array == null
===========================================================================
edu.tum.cup2.util.It.hasNext():::EXIT1;condition="return == true"
===========================================================================
edu.tum.cup2.util.It.hasNext():::EXIT1;condition="not(return == true)"
===========================================================================
edu.tum.cup2.util.It.hasNext():::EXIT2
(return == false)  ==>  (this.currentIndex >= 1)
(return == true)  ==>  (this.currentIndex >= -1)
this.iterator == null
this.array != null
===========================================================================
edu.tum.cup2.util.It.hasNext():::EXIT2;condition="return == true"
===========================================================================
edu.tum.cup2.util.It.hasNext():::EXIT2;condition="not(return == true)"
this.currentIndex >= 1
===========================================================================
edu.tum.cup2.util.It.hasNext():::EXIT
this.iterator == orig(this.iterator)
this.iterator.getClass().getName() == orig(this.iterator.getClass().getName())
this.array == orig(this.array)
this.array.getClass().getName() == orig(this.array.getClass().getName())
this.array[] == orig(this.array[])
this.currentIndex == orig(this.currentIndex)
(return == false)  ==>  (this.currentIndex >= 0)
(return == false)  ==>  (this.iterator.getClass().getName() == java.util.HashMap$KeyIterator.class)
(return == true)  ==>  (this.currentIndex >= -1)
(this.iterator != null)  <==>  (this.array == null)
(this.iterator == null)  <==>  (this.array != null)
(this.iterator == null)  ==>  (this.array[] elements != null)
===========================================================================
edu.tum.cup2.util.It.hasNext():::EXIT;condition="return == true"
return == true
===========================================================================
edu.tum.cup2.util.It.hasNext():::EXIT;condition="not(return == true)"
this.iterator.getClass().getName() == java.util.HashMap$KeyIterator.class
this.currentIndex >= 0
return == false
===========================================================================
edu.tum.cup2.util.It.iterator():::ENTER
this.iterator.getClass().getName() == java.util.HashMap$KeyIterator.class
this.currentIndex == -1
===========================================================================
edu.tum.cup2.util.It.iterator():::EXIT
this.iterator == orig(this.iterator)
this.iterator.getClass().getName() == orig(this.iterator.getClass().getName())
this.array == orig(this.array)
this.array.getClass().getName() == orig(this.array.getClass().getName())
this.array[] == orig(this.array[])
this.currentIndex == orig(this.currentIndex)
this.iterator.getClass().getName() == java.util.HashMap$KeyIterator.class
this.currentIndex == -1
return != null
return.getClass().getName() == edu.tum.cup2.util.It.class
===========================================================================
edu.tum.cup2.util.It.next():::ENTER
===========================================================================
edu.tum.cup2.util.It.next():::EXIT1
this.iterator != null
this.array == null
===========================================================================
edu.tum.cup2.util.It.next():::EXIT2
this.iterator == null
this.array != null
===========================================================================
edu.tum.cup2.util.It.next():::EXIT
this.iterator == orig(this.iterator)
this.iterator.getClass().getName() == orig(this.iterator.getClass().getName())
this.array == orig(this.array)
this.array.getClass().getName() == orig(this.array.getClass().getName())
this.array[] == orig(this.array[])
(this.iterator != null)  <==>  (this.array == null)
(this.iterator == null)  <==>  (this.array != null)
(this.iterator == null)  ==>  (this.array[] elements != null)
this.currentIndex >= 0
return != null
this.currentIndex - orig(this.currentIndex) - 1 == 0
===========================================================================
edu.tum.cup2.util.Reflection.checkAction(edu.tum.cup2.semantics.Action, int, java.util.List, edu.tum.cup2.semantics.SymbolValueClasses):::ENTER
arg0 != null
arg0.method != null
arg0.actionSubclass != null
arg0.returnsVoid == false
arg0.parserInstance == null
arg1 >= 1
arg2 != null
arg2[] elements != null
arg2.getClass().getName() == java.util.ArrayList.class
arg3 has only one value
arg3 != null
size(arg2[]) >= 1
===========================================================================
edu.tum.cup2.util.Reflection.checkAction(edu.tum.cup2.semantics.Action, int, java.util.List, edu.tum.cup2.semantics.SymbolValueClasses):::EXIT
arg0.method == orig(arg0.method)
arg0.actionSubclass == orig(arg0.actionSubclass)
arg0.paramsCount == orig(arg0.paramsCount)
arg0.returnsVoid == orig(arg0.returnsVoid)
arg0.parserInstance == orig(arg0.parserInstance)
arg2[] == orig(arg2[])
arg0.method != null
arg0.actionSubclass != null
arg0.returnsVoid == false
arg0.parserInstance == null
arg2[] elements != null
===========================================================================
edu.tum.cup2.util.Reflection.checkParamsOfAction(java.lang.reflect.Method, int, java.util.List, edu.tum.cup2.semantics.SymbolValueClasses):::ENTER
arg0 != null
arg1 >= 1
arg2 != null
arg2[] elements != null
arg2.getClass().getName() == java.util.ArrayList.class
arg3 has only one value
arg3 != null
size(arg2[]) >= 1
===========================================================================
edu.tum.cup2.util.Reflection.checkParamsOfAction(java.lang.reflect.Method, int, java.util.List, edu.tum.cup2.semantics.SymbolValueClasses):::EXIT
arg2[] == orig(arg2[])
arg2[] elements != null
===========================================================================
edu.tum.cup2.util.Reflection.getEnumElements(java.lang.String):::ENTER
arg0.toString one of { "NonTerminals", "Terminals" }
===========================================================================
edu.tum.cup2.util.Reflection.getEnumElements(java.lang.String):::EXIT1
===========================================================================
edu.tum.cup2.util.Reflection.getEnumElements(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString one of { "NonTerminals", "Terminals" }
size(return[]) one of { 15, 28 }
===========================================================================
edu.tum.cup2.util.Reflection.getFieldValueFromObject(java.lang.Object, java.lang.String):::ENTER
arg0 != null
arg0.getClass().getName() == main.ParserSpec$Terminals.class
arg1 has only one value
arg1 != null
arg1.toString == "insert"
===========================================================================
edu.tum.cup2.util.Reflection.getFieldValueFromObject(java.lang.Object, java.lang.String):::EXIT3
===========================================================================
edu.tum.cup2.util.Reflection.getFieldValueFromObject(java.lang.Object, java.lang.String):::EXIT
arg1.toString == orig(arg1.toString)
arg1.toString == "insert"
return == null
===========================================================================
edu.tum.cup2.util.Reflection.getNonTerminals():::EXIT1
===========================================================================
edu.tum.cup2.util.Reflection.getNonTerminals():::EXIT
return.getClass().getName() == edu.tum.cup2.grammar.NonTerminal[].class
return[] contains no nulls and has only one value, of length 15
size(return[]) == 15
===========================================================================
edu.tum.cup2.util.Reflection.getSpecClass():::EXIT1
===========================================================================
edu.tum.cup2.util.Reflection.getSpecClass():::EXIT
return has only one value
===========================================================================
edu.tum.cup2.util.Reflection.getSymbolByName(java.lang.String, edu.tum.cup2.grammar.Terminal[], edu.tum.cup2.grammar.NonTerminal[]):::ENTER
arg0 != null
arg1 has only one value
arg1 != null
arg1.getClass().getName() == edu.tum.cup2.grammar.Terminal[].class
arg1[] contains no nulls and has only one value, of length 28
arg1[] elements != null
arg2 has only one value
arg2 != null
arg2.getClass().getName() == edu.tum.cup2.grammar.NonTerminal[].class
arg2[] contains no nulls and has only one value, of length 15
arg2[] elements != null
size(arg1[]) == 28
size(arg2[]) == 15
arg1.getClass().getName() != arg2.getClass().getName()
===========================================================================
edu.tum.cup2.util.Reflection.getSymbolByName(java.lang.String, edu.tum.cup2.grammar.Terminal[], edu.tum.cup2.grammar.NonTerminal[]):::EXIT1
arg0.toString one of { "IDENTIFICATORE", "NUMERO_INTERO", "STRINGA" }
return.getClass().getName() == main.ParserSpec$Terminals.class
===========================================================================
edu.tum.cup2.util.Reflection.getSymbolByName(java.lang.String, edu.tum.cup2.grammar.Terminal[], edu.tum.cup2.grammar.NonTerminal[]):::EXIT2
return.getClass().getName() == main.ParserSpec$NonTerminals.class
===========================================================================
edu.tum.cup2.util.Reflection.getSymbolByName(java.lang.String, edu.tum.cup2.grammar.Terminal[], edu.tum.cup2.grammar.NonTerminal[]):::EXIT
arg0.toString == orig(arg0.toString)
arg1[] == orig(arg1[])
arg2[] == orig(arg2[])
arg1[] contains no nulls and has only one value, of length 28
arg1[] elements != null
arg2[] contains no nulls and has only one value, of length 15
arg2[] elements != null
return != null
return.getClass().getName() != orig(arg1.getClass().getName())
return.getClass().getName() != orig(arg2.getClass().getName())
===========================================================================
edu.tum.cup2.util.Reflection.getSymbolValueClasses(edu.tum.cup2.grammar.Terminal[], edu.tum.cup2.grammar.NonTerminal[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == edu.tum.cup2.grammar.Terminal[].class
arg0[] contains no nulls and has only one value, of length 28
arg1 has only one value
arg1.getClass().getName() == edu.tum.cup2.grammar.NonTerminal[].class
arg1[] contains no nulls and has only one value, of length 15
size(arg0[]) == 28
size(arg1[]) == 15
===========================================================================
edu.tum.cup2.util.Reflection.getSymbolValueClasses(edu.tum.cup2.grammar.Terminal[], edu.tum.cup2.grammar.NonTerminal[]):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg0[] contains no nulls and has only one value, of length 28
arg1[] contains no nulls and has only one value, of length 15
return has only one value
===========================================================================
edu.tum.cup2.util.Reflection.getSymbolValueClasses(edu.tum.cup2.grammar.Terminal[], edu.tum.cup2.grammar.NonTerminal[], java.lang.Class):::ENTER
arg0 has only one value
arg0.getClass().getName() == edu.tum.cup2.grammar.Terminal[].class
arg0[] contains no nulls and has only one value, of length 28
arg1 has only one value
arg1.getClass().getName() == edu.tum.cup2.grammar.NonTerminal[].class
arg1[] contains no nulls and has only one value, of length 15
arg2 has only one value
size(arg0[]) == 28
size(arg1[]) == 15
===========================================================================
edu.tum.cup2.util.Reflection.getSymbolValueClasses(edu.tum.cup2.grammar.Terminal[], edu.tum.cup2.grammar.NonTerminal[], java.lang.Class):::EXIT1
===========================================================================
edu.tum.cup2.util.Reflection.getSymbolValueClasses(edu.tum.cup2.grammar.Terminal[], edu.tum.cup2.grammar.NonTerminal[], java.lang.Class):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg0[] contains no nulls and has only one value, of length 28
arg1[] contains no nulls and has only one value, of length 15
return has only one value
===========================================================================
edu.tum.cup2.util.Reflection.getTerminals():::EXIT1
===========================================================================
edu.tum.cup2.util.Reflection.getTerminals():::EXIT
return.getClass().getName() == edu.tum.cup2.grammar.Terminal[].class
return[] contains no nulls and has only one value, of length 28
size(return[]) == 28
===========================================================================
edu.tum.cup2.util.Reflection.resolvePrimitiveTypes(java.lang.Class):::ENTER
arg0 != null
===========================================================================
edu.tum.cup2.util.Reflection.resolvePrimitiveTypes(java.lang.Class):::EXIT2
===========================================================================
edu.tum.cup2.util.Reflection.resolvePrimitiveTypes(java.lang.Class):::EXIT
return == orig(arg0)
return != null
===========================================================================
main.FileItaco:::OBJECT
this has only one value
this.itacoLogger has only one value
this.baseNomeFile.toString == "prova"
this.directory.toString == "."
===========================================================================
main.FileItaco.FileItaco(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "./prova.ita"
===========================================================================
main.FileItaco.FileItaco(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
this.baseNomeFile has only one value
this.directory has only one value
arg0.toString == "./prova.ita"
===========================================================================
main.FileItaco.esegui():::ENTER
this.baseNomeFile has only one value
this.directory has only one value
===========================================================================
main.FileItaco.esegui():::EXIT167
===========================================================================
main.FileItaco.esegui():::EXIT167;condition="not(return == true)"
===========================================================================
main.FileItaco.esegui():::EXIT
this.itacoLogger == orig(this.itacoLogger)
this.baseNomeFile == orig(this.baseNomeFile)
this.baseNomeFile.toString == orig(this.baseNomeFile.toString)
this.directory == orig(this.directory)
this.directory.toString == orig(this.directory.toString)
this.baseNomeFile has only one value
this.directory has only one value
return == false
===========================================================================
main.FileItaco.esegui():::EXIT;condition="not(return == true)"
===========================================================================
main.FileItaco.fileSalvato():::ENTER
this.baseNomeFile has only one value
this.directory has only one value
===========================================================================
main.FileItaco.fileSalvato():::EXIT
this.itacoLogger == orig(this.itacoLogger)
this.baseNomeFile == orig(this.baseNomeFile)
this.baseNomeFile.toString == orig(this.baseNomeFile.toString)
this.directory == orig(this.directory)
this.directory.toString == orig(this.directory.toString)
this.baseNomeFile has only one value
this.directory has only one value
return == true
===========================================================================
main.FileItaco.fileSalvato():::EXIT;condition="return == true"
===========================================================================
main.FileItaco.getPercorsoFile():::ENTER
this.baseNomeFile has only one value
this.directory has only one value
===========================================================================
main.FileItaco.getPercorsoFile():::EXIT
this.itacoLogger == orig(this.itacoLogger)
this.baseNomeFile == orig(this.baseNomeFile)
this.baseNomeFile.toString == orig(this.baseNomeFile.toString)
this.directory == orig(this.directory)
this.directory.toString == orig(this.directory.toString)
this.baseNomeFile has only one value
this.directory has only one value
return has only one value
return.toString == "./prova.ita"
===========================================================================
main.FileItaco.setPercorsoFile(java.lang.String):::ENTER
this.baseNomeFile == null
this.directory == null
arg0 has only one value
arg0.toString == "./prova.ita"
===========================================================================
main.FileItaco.setPercorsoFile(java.lang.String):::EXIT
this.itacoLogger == orig(this.itacoLogger)
arg0.toString == orig(arg0.toString)
this.baseNomeFile has only one value
this.directory has only one value
arg0.toString == "./prova.ita"
===========================================================================
main.ParserSpec$1:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == false
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses == null
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 0
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 2
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$10:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 8
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 2
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$10.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 8
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$10.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$11:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 10
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 1
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$11.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 10
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$11.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$12:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 10
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 2
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$12.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 10
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$12.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$13:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 10
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 2
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$13.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 10
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$13.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$14:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 10
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 1
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$14.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 10
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$14.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$15:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 14
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 2
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$15.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 14
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$15.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$16:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 14
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 2
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$16.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 14
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$16.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$17:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 14
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 1
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$17.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 14
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$17.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$18:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 14
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 1
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$18.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 14
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$18.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$19:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 14
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 2
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$19.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 14
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$19.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$1.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == false
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses == null
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 0
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$1.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$2:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == false
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses == null
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 0
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 1
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$20:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 14
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 3
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$20.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 14
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$20.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$21:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 14
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 1
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$21.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 14
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$21.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$22:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 14
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 1
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$22.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 14
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$22.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$23:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 14
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 2
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$23.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 14
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$23.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$24:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 14
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 2
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$24.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 14
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$24.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$25:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 24
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 2
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$25.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 24
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$25.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$26:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 24
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 3
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$26.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 24
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$26.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$27:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 24
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 2
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$27.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 24
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$27.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$28:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 27
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 2
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$28.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 27
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$28.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$29:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 27
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 2
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$29.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 27
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$29.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$2.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == false
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses == null
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 0
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$2.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$3:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 2
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 4
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$30:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 27
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 2
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$30.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 27
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$30.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$31:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 30
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 2
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$31.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 30
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$31.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$32:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 30
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 2
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$32.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 30
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$32.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$33:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 30
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 1
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$33.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 30
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$33.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$34:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 33
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 2
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$34.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 33
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$34.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$35:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 33
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 2
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$35.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 33
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$35.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$36:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 33
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 1
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$36.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 33
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$36.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$37:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 36
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 1
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$37.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 36
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$37.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$38:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 36
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 1
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$38.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 36
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$38.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$39:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 36
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 1
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$39.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 36
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$39.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$3.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 2
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$3.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$4:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 2
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 3
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$40:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 36
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 2
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$40.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 36
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$40.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$41:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 36
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 2
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$41.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 36
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$41.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$42:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 41
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 0
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$42.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 41
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$42.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$43:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 41
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 1
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$43.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 41
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$43.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$44:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 43
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 2
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$44.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 43
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$44.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$45:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 43
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 1
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$45.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 43
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$45.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$46:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 45
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 1
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$46.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 45
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$46.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$47:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 45
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 1
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$47.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 45
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$47.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$4.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 2
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$4.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$5:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 4
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 0
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$5.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 4
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$5.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$6:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 4
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 1
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$6.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 4
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$6.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$7:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 6
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 1
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$7.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 6
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$7.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$8:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 6
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 2
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$8.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 6
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$8.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$9:::OBJECT
this has only one value
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 8
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
this.method has only one value
this.actionSubclass has only one value
this.paramsCount == 1
this.returnsVoid == false
this.parserInstance == null
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$9.(main.ParserSpec):::ENTER
main.ParserSpec.this has only one value
main.ParserSpec.this.isInit == true
main.ParserSpec.this.auxNonTerminals has only one value
main.ParserSpec.this.auxNonTerminals[] == []
main.ParserSpec.this.auxNonTerminals[].getClass().getName() == []
main.ParserSpec.this.symbolValueClasses has only one value
main.ParserSpec.this.precedences has only one value
main.ParserSpec.this.precedences.list has only one value
main.ParserSpec.this.precedences.list[] contains no nulls and has only one value, of length 1
main.ParserSpec.this.precedences.list[] elements has only one value
main.ParserSpec.this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
main.ParserSpec.this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
main.ParserSpec.this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
main.ParserSpec.this.grammar == null
main.ParserSpec.this.grammarInterface has only one value
main.ParserSpec.this.productionCount == 8
main.ParserSpec.this.auxiliaryProductions has only one value
main.ParserSpec.this.auxiliaryProductions[] == []
main.ParserSpec.this.auxiliaryProductions[].getClass().getName() == []
size(main.ParserSpec.this.precedences.list[]) == 1
===========================================================================
main.ParserSpec$9.(main.ParserSpec):::EXIT
main.ParserSpec.this == orig(main.ParserSpec.this)
main.ParserSpec.this.isInit == orig(main.ParserSpec.this.isInit)
main.ParserSpec.this.auxNonTerminals == orig(main.ParserSpec.this.auxNonTerminals)
main.ParserSpec.this.auxNonTerminals[] == orig(main.ParserSpec.this.auxNonTerminals[])
main.ParserSpec.this.symbolValueClasses == orig(main.ParserSpec.this.symbolValueClasses)
main.ParserSpec.this.precedences == orig(main.ParserSpec.this.precedences)
main.ParserSpec.this.precedences.list == orig(main.ParserSpec.this.precedences.list)
main.ParserSpec.this.precedences.list[] == orig(main.ParserSpec.this.precedences.list[])
main.ParserSpec.this.precedences.list.getClass().getName() == orig(main.ParserSpec.this.precedences.list.getClass().getName())
main.ParserSpec.this.grammar == orig(main.ParserSpec.this.grammar)
main.ParserSpec.this.grammarInterface == orig(main.ParserSpec.this.grammarInterface)
main.ParserSpec.this.productionCount == orig(main.ParserSpec.this.productionCount)
main.ParserSpec.this.auxiliaryProductions == orig(main.ParserSpec.this.auxiliaryProductions)
main.ParserSpec.this.auxiliaryProductions[] == orig(main.ParserSpec.this.auxiliaryProductions[])
===========================================================================
main.ParserSpec$NonTerminals:::CLASS
main.ParserSpec$NonTerminals.S has only one value
main.ParserSpec$NonTerminals.Z has only one value
main.ParserSpec$NonTerminals.N has only one value
main.ParserSpec$NonTerminals.I has only one value
main.ParserSpec$NonTerminals.E has only one value
main.ParserSpec$NonTerminals.T has only one value
main.ParserSpec$NonTerminals.F has only one value
main.ParserSpec$NonTerminals.B has only one value
main.ParserSpec$NonTerminals.C has only one value
main.ParserSpec$NonTerminals.A has only one value
main.ParserSpec$NonTerminals.A2 has only one value
main.ParserSpec$NonTerminals.R has only one value
main.ParserSpec$NonTerminals.W has only one value
main.ParserSpec$NonTerminals.W2 has only one value
main.ParserSpec$NonTerminals.U has only one value
main.ParserSpec$NonTerminals.$VALUES has only one value
main.ParserSpec$NonTerminals.$VALUES.getClass().getName() == main.ParserSpec$NonTerminals[].class
main.ParserSpec$NonTerminals.$VALUES[] contains no nulls and has only one value, of length 15
main.ParserSpec$NonTerminals.$VALUES[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals]
main.ParserSpec$NonTerminals.$VALUES[].getClass().getName() elements == main.ParserSpec.NonTerminals.class
size(main.ParserSpec$NonTerminals.$VALUES[]) == 15
===========================================================================
main.ParserSpec$NonTerminals:::OBJECT
===========================================================================
main.ParserSpec$NonTerminals.NonTerminals(java.lang.String, int):::ENTER
arg0 != null
===========================================================================
main.ParserSpec$NonTerminals.NonTerminals(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
===========================================================================
main.ParserSpec$NonTerminals.values():::ENTER
===========================================================================
main.ParserSpec$NonTerminals.values():::EXIT
main.ParserSpec$NonTerminals.S == orig(main.ParserSpec$NonTerminals.S)
main.ParserSpec$NonTerminals.Z == orig(main.ParserSpec$NonTerminals.Z)
main.ParserSpec$NonTerminals.N == orig(main.ParserSpec$NonTerminals.N)
main.ParserSpec$NonTerminals.I == orig(main.ParserSpec$NonTerminals.I)
main.ParserSpec$NonTerminals.E == orig(main.ParserSpec$NonTerminals.E)
main.ParserSpec$NonTerminals.T == orig(main.ParserSpec$NonTerminals.T)
main.ParserSpec$NonTerminals.F == orig(main.ParserSpec$NonTerminals.F)
main.ParserSpec$NonTerminals.B == orig(main.ParserSpec$NonTerminals.B)
main.ParserSpec$NonTerminals.C == orig(main.ParserSpec$NonTerminals.C)
main.ParserSpec$NonTerminals.A == orig(main.ParserSpec$NonTerminals.A)
main.ParserSpec$NonTerminals.A2 == orig(main.ParserSpec$NonTerminals.A2)
main.ParserSpec$NonTerminals.R == orig(main.ParserSpec$NonTerminals.R)
main.ParserSpec$NonTerminals.W == orig(main.ParserSpec$NonTerminals.W)
main.ParserSpec$NonTerminals.W2 == orig(main.ParserSpec$NonTerminals.W2)
main.ParserSpec$NonTerminals.U == orig(main.ParserSpec$NonTerminals.U)
main.ParserSpec$NonTerminals.$VALUES == orig(main.ParserSpec$NonTerminals.$VALUES)
main.ParserSpec$NonTerminals.$VALUES.getClass().getName() == return.getClass().getName()
main.ParserSpec$NonTerminals.$VALUES.getClass().getName() == orig(main.ParserSpec$NonTerminals.$VALUES.getClass().getName())
main.ParserSpec$NonTerminals.$VALUES[] == orig(main.ParserSpec$NonTerminals.$VALUES[])
return has only one value
return[] contains no nulls and has only one value, of length 15
size(return[]) == 15
===========================================================================
main.ParserSpec$Terminals:::CLASS
main.ParserSpec$Terminals.SE has only one value
main.ParserSpec$Terminals.ALTRIMENTI has only one value
main.ParserSpec$Terminals.FINCHE has only one value
main.ParserSpec$Terminals.INTERO has only one value
main.ParserSpec$Terminals.PARENTESI_QUADRA_APERTA has only one value
main.ParserSpec$Terminals.PARENTESI_QUADRA_CHIUSA has only one value
main.ParserSpec$Terminals.DUE_PUNTI has only one value
main.ParserSpec$Terminals.PUNTO has only one value
main.ParserSpec$Terminals.VIRGOLA has only one value
main.ParserSpec$Terminals.PARENTESI_TONDA_APERTA has only one value
main.ParserSpec$Terminals.PARENTESI_TONDA_CHIUSA has only one value
main.ParserSpec$Terminals.UGUALE has only one value
main.ParserSpec$Terminals.LEGGI has only one value
main.ParserSpec$Terminals.SCRIVI has only one value
main.ParserSpec$Terminals.IDENTIFICATORE has only one value
main.ParserSpec$Terminals.NUMERO_INTERO has only one value
main.ParserSpec$Terminals.SOMMA has only one value
main.ParserSpec$Terminals.SOTTRAZIONE has only one value
main.ParserSpec$Terminals.PRODOTTO has only one value
main.ParserSpec$Terminals.DIVISIONE has only one value
main.ParserSpec$Terminals.ASSEGNAZIONE has only one value
main.ParserSpec$Terminals.STRINGA has only one value
main.ParserSpec$Terminals.MINORE has only one value
main.ParserSpec$Terminals.MAGGIORE has only one value
main.ParserSpec$Terminals.VETTORE has only one value
main.ParserSpec$Terminals.FUNZIONE has only one value
main.ParserSpec$Terminals.PIPE has only one value
main.ParserSpec$Terminals.PUNTO_VIRGOLA has only one value
main.ParserSpec$Terminals.$VALUES has only one value
main.ParserSpec$Terminals.$VALUES.getClass().getName() == main.ParserSpec$Terminals[].class
main.ParserSpec$Terminals.$VALUES[] contains no nulls and has only one value, of length 28
main.ParserSpec$Terminals.$VALUES[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals]
main.ParserSpec$Terminals.$VALUES[].getClass().getName() elements == main.ParserSpec.Terminals.class
size(main.ParserSpec$Terminals.$VALUES[]) == 28
===========================================================================
main.ParserSpec$Terminals:::OBJECT
===========================================================================
main.ParserSpec$Terminals.Terminals(java.lang.String, int):::ENTER
arg0 != null
===========================================================================
main.ParserSpec$Terminals.Terminals(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
===========================================================================
main.ParserSpec$Terminals.values():::ENTER
===========================================================================
main.ParserSpec$Terminals.values():::EXIT
main.ParserSpec$Terminals.SE == orig(main.ParserSpec$Terminals.SE)
main.ParserSpec$Terminals.ALTRIMENTI == orig(main.ParserSpec$Terminals.ALTRIMENTI)
main.ParserSpec$Terminals.FINCHE == orig(main.ParserSpec$Terminals.FINCHE)
main.ParserSpec$Terminals.INTERO == orig(main.ParserSpec$Terminals.INTERO)
main.ParserSpec$Terminals.PARENTESI_QUADRA_APERTA == orig(main.ParserSpec$Terminals.PARENTESI_QUADRA_APERTA)
main.ParserSpec$Terminals.PARENTESI_QUADRA_CHIUSA == orig(main.ParserSpec$Terminals.PARENTESI_QUADRA_CHIUSA)
main.ParserSpec$Terminals.DUE_PUNTI == orig(main.ParserSpec$Terminals.DUE_PUNTI)
main.ParserSpec$Terminals.PUNTO == orig(main.ParserSpec$Terminals.PUNTO)
main.ParserSpec$Terminals.VIRGOLA == orig(main.ParserSpec$Terminals.VIRGOLA)
main.ParserSpec$Terminals.PARENTESI_TONDA_APERTA == orig(main.ParserSpec$Terminals.PARENTESI_TONDA_APERTA)
main.ParserSpec$Terminals.PARENTESI_TONDA_CHIUSA == orig(main.ParserSpec$Terminals.PARENTESI_TONDA_CHIUSA)
main.ParserSpec$Terminals.UGUALE == orig(main.ParserSpec$Terminals.UGUALE)
main.ParserSpec$Terminals.LEGGI == orig(main.ParserSpec$Terminals.LEGGI)
main.ParserSpec$Terminals.SCRIVI == orig(main.ParserSpec$Terminals.SCRIVI)
main.ParserSpec$Terminals.IDENTIFICATORE == orig(main.ParserSpec$Terminals.IDENTIFICATORE)
main.ParserSpec$Terminals.NUMERO_INTERO == orig(main.ParserSpec$Terminals.NUMERO_INTERO)
main.ParserSpec$Terminals.SOMMA == orig(main.ParserSpec$Terminals.SOMMA)
main.ParserSpec$Terminals.SOTTRAZIONE == orig(main.ParserSpec$Terminals.SOTTRAZIONE)
main.ParserSpec$Terminals.PRODOTTO == orig(main.ParserSpec$Terminals.PRODOTTO)
main.ParserSpec$Terminals.DIVISIONE == orig(main.ParserSpec$Terminals.DIVISIONE)
main.ParserSpec$Terminals.ASSEGNAZIONE == orig(main.ParserSpec$Terminals.ASSEGNAZIONE)
main.ParserSpec$Terminals.STRINGA == orig(main.ParserSpec$Terminals.STRINGA)
main.ParserSpec$Terminals.MINORE == orig(main.ParserSpec$Terminals.MINORE)
main.ParserSpec$Terminals.MAGGIORE == orig(main.ParserSpec$Terminals.MAGGIORE)
main.ParserSpec$Terminals.VETTORE == orig(main.ParserSpec$Terminals.VETTORE)
main.ParserSpec$Terminals.FUNZIONE == orig(main.ParserSpec$Terminals.FUNZIONE)
main.ParserSpec$Terminals.PIPE == orig(main.ParserSpec$Terminals.PIPE)
main.ParserSpec$Terminals.PUNTO_VIRGOLA == orig(main.ParserSpec$Terminals.PUNTO_VIRGOLA)
main.ParserSpec$Terminals.$VALUES == orig(main.ParserSpec$Terminals.$VALUES)
main.ParserSpec$Terminals.$VALUES.getClass().getName() == return.getClass().getName()
main.ParserSpec$Terminals.$VALUES.getClass().getName() == orig(main.ParserSpec$Terminals.$VALUES.getClass().getName())
main.ParserSpec$Terminals.$VALUES[] == orig(main.ParserSpec$Terminals.$VALUES[])
return has only one value
return[] contains no nulls and has only one value, of length 28
size(return[]) == 28
===========================================================================
main.ParserSpec:::OBJECT
this has only one value
this.isInit == true
this.auxNonTerminals has only one value
this.auxNonTerminals[] == []
this.auxNonTerminals[].getClass().getName() == []
this.symbolValueClasses has only one value
this.precedences has only one value
this.precedences.list has only one value
this.precedences.list[] contains no nulls and has only one value, of length 1
this.precedences.list[] elements has only one value
this.precedences.list[].getClass().getName() == [edu.tum.cup2.precedences.LeftAssociativity]
this.precedences.list[].getClass().getName() elements == edu.tum.cup2.precedences.LeftAssociativity.class
this.precedences.list.getClass().getName() == java.util.Arrays$ArrayList.class
this.grammar has only one value
this.grammar.terminals has only one value
this.grammar.terminals[] contains no nulls and has only one value, of length 29
this.grammar.terminals[].getClass().getName() == [main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, main.ParserSpec.Terminals, edu.tum.cup2.grammar.SpecialTerminals]
this.grammar.nonTerminals has only one value
this.grammar.nonTerminals[] contains no nulls and has only one value, of length 15
this.grammar.nonTerminals[].getClass().getName() == [main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals, main.ParserSpec.NonTerminals]
this.grammar.nonTerminals[].getClass().getName() elements == main.ParserSpec.NonTerminals.class
this.grammar.productions has only one value
this.grammar.productions[] contains no nulls and has only one value, of length 47
this.grammar.productions[].getClass().getName() == [edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production, edu.tum.cup2.grammar.Production]
this.grammar.productions[].getClass().getName() elements == edu.tum.cup2.grammar.Production.class
this.grammarInterface has only one value
this.productionCount == 47
this.auxiliaryProductions has only one value
this.auxiliaryProductions[] == []
this.auxiliaryProductions[].getClass().getName() == []
size(this.precedences.list[]) == 1
size(this.grammar.terminals[]) == 29
size(this.grammar.nonTerminals[]) == 15
size(this.grammar.productions[]) == 47
===========================================================================
main.ParserSpec.ParserSpec():::EXIT
===========================================================================
main.Runner.main(java.lang.String[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.lang.String[].class
arg0[] == []
arg0[].toString == []
===========================================================================
main.Runner.main(java.lang.String[]):::EXIT
arg0[] == orig(arg0[])
arg0[] == []
arg0[].toString == []
===========================================================================
main.Scanner:::CLASS
===========================================================================
main.Scanner.zzUnpackAction():::ENTER
===========================================================================
main.Scanner.zzUnpackAction():::EXIT
return has only one value
return[] == [0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 3, 3, 3, 3, 3, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 1, 3, 3, 3, 25, 3, 3, 3, 3, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 36, 3, 3, 3, 3, 3, 3, 37, 38, 39, 3, 3, 3, 3, 40, 3, 41, 3, 42]
size(return[]) == 89
===========================================================================
main.Scanner.zzUnpackAction(java.lang.String, int, int[]):::ENTER
arg0 has only one value
arg0.toString == "\002\000\001\001\003\002\001\003\002\004\001\005\006\003\001\006\001\007\001\010\001\t\001\n\001\013\001\014\001\r\001\016\001\017\001\020\001\021\001\022\001\023\001\024\001\025\001\026\002\027\001\030\001\001\003\003\001\031\004\003\001\032\001\033\001\034\001\035\001\036\001\037\001 \001!\001\"\001#\017\003\001$\006\003\001%\001&\001'\004\003\001(\001\003\001)\001\003\001*"
arg1 == 0
arg2 has only one value
arg2[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
arg2[] elements == 0
size(arg2[]) == 89
===========================================================================
main.Scanner.zzUnpackAction(java.lang.String, int, int[]):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "\002\000\001\001\003\002\001\003\002\004\001\005\006\003\001\006\001\007\001\010\001\t\001\n\001\013\001\014\001\r\001\016\001\017\001\020\001\021\001\022\001\023\001\024\001\025\001\026\002\027\001\030\001\001\003\003\001\031\004\003\001\032\001\033\001\034\001\035\001\036\001\037\001 \001!\001\"\001#\017\003\001$\006\003\001%\001&\001'\004\003\001(\001\003\001)\001\003\001*"
arg2[] == [0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 3, 3, 3, 3, 3, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 1, 3, 3, 3, 25, 3, 3, 3, 3, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 36, 3, 3, 3, 3, 3, 3, 37, 38, 39, 3, 3, 3, 3, 40, 3, 41, 3, 42]
return == 89
===========================================================================
main.Scanner.zzUnpackAttribute():::ENTER
===========================================================================
main.Scanner.zzUnpackAttribute():::EXIT
return has only one value
return[] == [0, 0, 9, 1, 9, 1, 1, 9, 1, 9, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 1, 1, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
return[] elements one of { 0, 1, 9 }
size(return[]) == 89
===========================================================================
main.Scanner.zzUnpackAttribute(java.lang.String, int, int[]):::ENTER
arg0 has only one value
arg0.toString == "\002\000\001\t\001\001\001\t\002\001\001\t\001\001\001\t\006\001\t\t\001\001\006\t\002\001\002\t\t\001\n\t\"\001"
arg1 == 0
arg2 has only one value
arg2[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
arg2[] elements == 0
size(arg2[]) == 89
===========================================================================
main.Scanner.zzUnpackAttribute(java.lang.String, int, int[]):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "\002\000\001\t\001\001\001\t\002\001\001\t\001\001\001\t\006\001\t\t\001\001\006\t\002\001\002\t\t\001\n\t\"\001"
arg2[] == [0, 0, 9, 1, 9, 1, 1, 9, 1, 9, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 1, 1, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
arg2[] elements one of { 0, 1, 9 }
return == 89
===========================================================================
main.Scanner.zzUnpackCMap(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "\t\006\001\003\001\002\001\000\001\003\001\001\016\006\004\000\001\003\001\000\001\t\001\004\001\005\002\000\001\n\001\036\001\037\001)\001(\001\"\001&\001#\001*\001\007\t\010\001\035\001%\001,\001+\001'\002\000\032\005\001 \001\013\001!\001\000\001\005\001\000\001\014\001-\001\027\001\005\001\022\001\026\001\031\001\030\001\020\002\005\001\r\001\021\001\023\001\024\002\005\001\017\001\025\001\016\001\033\001\032\003\005\001\034\001\000\001$\002\000!\006\002\000\004\005\004\000\001\005\002\000\001\006\007\000\001\005\004\000\001\005\005\000\027\005\001\000\037\005\001\000\u013f\005\031\000r\005\004\000\014\005\016\000\005\005\t\000\001\005\021\000X\006\005\000\023\006\n\000\001\005\013\000\001\005\001\000\003\005\001\000\001\005\001\000\024\005\001\000,\005\001\000&\005\001\000\005\005\004\000\202\005\001\000\004\006\003\000E\005\001\000&\005\002\000\002\005\006\000\020\005!\000&\005\002\000\001\005\007\000'\005\t\000\021\006\001\000\027\006\001\000\003\006\001\000\001\006\001\000\002\006\001\000\001\006\013\000\033\005\005\000\003\005\r\000\004\006\014\000\006\006\013\000\032\005\005\000\013\005\016\006\007\000\n\006\004\000\002\005\001\006c\005\001\000\001\005\010\006\001\000\006\006\002\005\002\006\001\000\004\006\002\005\n\006\003\005\002\000\001\005\017\000\001\006\001\005\001\006\036\005\033\006\002\000\003\0050\000&\005\013\006\001\005\u014f\000\003\0066\005\002\000\001\006\001\005\020\006\002\000\001\005\004\006\003\000\n\005\002\006\002\000\n\006\021\000\003\006\001\000\010\005\002\000\002\005\002\000\026\005\001\000\007\005\001\000\001\005\003\000\004\005\002\000\001\006\001\005\007\006\002\000\002\006\002\000\003\006\t\000\001\006\004\000\002\005\001\000\003\005\002\006\002\000\n\006\004\005\r\000\003\006\001\000\006\005\004\000\002\005\002\000\026\005\001\000\007\005\001\000\002\005\001\000\002\005\001\000\002\005\002\000\001\006\001\000\005\006\004\000\002\006\002\000\003\006\013\000\004\005\001\000\001\005\007\000\014\006\003\005\014\000\003\006\001\000\t\005\001\000\003\005\001\000\026\005\001\000\007\005\001\000\002\005\001\000\005\005\002\000\001\006\001\005\010\006\001\000\003\006\001\000\003\006\002\000\001\005\017\000\002\005\002\006\002\000\n\006\001\000\001\005\017\000\003\006\001\000\010\005\002\000\002\005\002\000\026\005\001\000\007\005\001\000\002\005\001\000\005\005\002\000\001\006\001\005\006\006\003\000\002\006\002\000\003\006\010\000\002\006\004\000\002\005\001\000\003\005\004\000\n\006\001\000\001\005\020\000\001\006\001\005\001\000\006\005\003\000\003\005\001\000\004\005\003\000\002\005\001\000\001\005\001\000\002\005\003\000\002\005\003\000\003\005\003\000\010\005\001\000\003\005\004\000\005\006\003\000\003\006\001\000\004\006\t\000\001\006\017\000\t\006\t\000\001\005\007\000\003\006\001\000\010\005\001\000\003\005\001\000\027\005\001\000\n\005\001\000\005\005\004\000\007\006\001\000\003\006\001\000\004\006\007\000\002\006\t\000\002\005\004\000\n\006\022\000\002\006\001\000\010\005\001\000\003\005\001\000\027\005\001\000\n\005\001\000\005\005\002\000\001\006\001\005\007\006\001\000\003\006\001\000\004\006\007\000\002\006\007\000\001\005\001\000\002\005\004\000\n\006\022\000\002\006\001\000\010\005\001\000\003\005\001\000\027\005\001\000\020\005\004\000\006\006\002\000\003\006\001\000\004\006\t\000\001\006\010\000\002\005\004\000\n\006\022\000\002\006\001\000\022\005\003\000\030\005\001\000\t\005\001\000\001\005\002\000\007\005\003\000\001\006\004\000\006\006\001\000\001\006\001\000\010\006\022\000\002\006\r\0000\005\001\006\002\005\007\006\004\000\010\005\010\006\001\000\n\006'\000\002\005\001\000\001\005\002\000\002\005\001\000\001\005\002\000\001\005\006\000\004\005\001\000\007\005\001\000\003\005\001\000\001\005\001\000\001\005\002\000\002\005\001\000\004\005\001\006\002\005\006\006\001\000\002\006\001\005\002\000\005\005\001\000\001\005\001\000\006\006\002\000\n\006\002\000\002\005\"\000\001\005\027\000\002\006\006\000\n\006\013\000\001\006\001\000\001\006\001\000\001\006\004\000\002\006\010\005\001\000\"\005\006\000\024\006\001\000\002\006\004\005\004\000\010\006\001\000$\006\t\000\001\0069\000\"\005\001\000\005\005\001\000\002\005\001\000\007\006\003\000\004\006\006\000\n\006\006\000\006\005\004\006F\000&\005\n\000)\005\007\000Z\005\005\000D\005\005\000R\005\006\000\007\005\001\000?\005\001\000\001\005\001\000\004\005\002\000\007\005\001\000\001\005\001\000\004\005\002\000'\005\001\000\001\005\001\000\004\005\002\000\037\005\001\000\001\005\001\000\004\005\002\000\007\005\001\000\001\005\001\000\004\005\002\000\007\005\001\000\007\005\001\000\027\005\001\000\037\005\001\000\001\005\001\000\004\005\002\000\007\005\001\000'\005\001\000\023\005\016\000\t\006.\000U\005\014\000\u026c\005\002\000\010\005\n\000\032\005\005\000K\005\003\000\003\005\017\000\r\005\001\000\004\005\003\006\013\000\022\005\003\006\013\000\022\005\002\006\014\000\r\005\001\000\003\005\001\000\002\006\014\0004\005 \006\003\000\001\005\003\000\002\005\001\006\002\000\n\006!\000\003\006\002\000\n\006\006\000X\005\010\000)\005\001\006V\000\035\005\003\000\014\006\004\000\014\006\n\000\n\006\036\005\002\000\005\005\u038b\000l\005\224\000\234\005\004\000Z\005\006\000\026\005\002\000\006\005\002\000&\005\002\000\006\005\002\000\010\005\001\000\001\005\001\000\001\005\001\000\001\005\001\000\037\005\002\0005\005\001\000\007\005\001\000\001\005\003\000\003\005\001\000\007\005\003\000\004\005\002\000\006\005\004\000\r\005\005\000\003\005\001\000\007\005\017\000\004\006\032\000\005\006\020\000\002\005\023\000\001\005\013\000\004\006\006\000\006\006\001\000\001\005\r\000\001\005 \000\022\005\036\000\r\006\004\000\001\006\003\000\006\006\027\000\001\005\004\000\001\005\002\000\n\005\001\000\001\005\003\000\005\005\006\000\001\005\001\000\001\005\001\000\001\005\001\000\004\005\001\000\003\005\001\000\007\005\003\000\003\005\005\000\005\005\026\000$\005\u0e81\000\003\005\031\000\t\005\006\006\001\000\005\005\002\000\005\005\004\000V\005\002\000\002\006\002\000\003\005\001\000_\005\005\000(\005\004\000^\005\021\000\030\0058\000\020\005\u0200\000\u19b6\005J\000\u51a6\005Z\000\u048d\005\u0773\000\u2ba4\005\u215c\000\u012e\005\002\000;\005\225\000\007\005\014\000\005\005\005\000\001\005\001\006\n\005\001\000\r\005\001\000\005\005\001\000\001\005\001\000\002\005\001\000\002\005\001\000l\005!\000\u016b\005\022\000@\005\002\0006\005(\000\r\005\003\000\020\006\020\000\004\006\017\000\002\005\030\000\003\005\031\000\001\005\006\000\005\005\001\000\207\005\002\000\001\006\004\000\001\005\013\000\n\006\007\000\032\005\004\000\001\005\001\000\032\005\n\000Z\005\003\000\006\005\002\000\006\005\002\000\006\005\002\000\003\005\003\000\002\005\003\000\002\005\022\000\003\006\004\000"
===========================================================================
main.Scanner.zzUnpackCMap(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "\t\006\001\003\001\002\001\000\001\003\001\001\016\006\004\000\001\003\001\000\001\t\001\004\001\005\002\000\001\n\001\036\001\037\001)\001(\001\"\001&\001#\001*\001\007\t\010\001\035\001%\001,\001+\001'\002\000\032\005\001 \001\013\001!\001\000\001\005\001\000\001\014\001-\001\027\001\005\001\022\001\026\001\031\001\030\001\020\002\005\001\r\001\021\001\023\001\024\002\005\001\017\001\025\001\016\001\033\001\032\003\005\001\034\001\000\001$\002\000!\006\002\000\004\005\004\000\001\005\002\000\001\006\007\000\001\005\004\000\001\005\005\000\027\005\001\000\037\005\001\000\u013f\005\031\000r\005\004\000\014\005\016\000\005\005\t\000\001\005\021\000X\006\005\000\023\006\n\000\001\005\013\000\001\005\001\000\003\005\001\000\001\005\001\000\024\005\001\000,\005\001\000&\005\001\000\005\005\004\000\202\005\001\000\004\006\003\000E\005\001\000&\005\002\000\002\005\006\000\020\005!\000&\005\002\000\001\005\007\000'\005\t\000\021\006\001\000\027\006\001\000\003\006\001\000\001\006\001\000\002\006\001\000\001\006\013\000\033\005\005\000\003\005\r\000\004\006\014\000\006\006\013\000\032\005\005\000\013\005\016\006\007\000\n\006\004\000\002\005\001\006c\005\001\000\001\005\010\006\001\000\006\006\002\005\002\006\001\000\004\006\002\005\n\006\003\005\002\000\001\005\017\000\001\006\001\005\001\006\036\005\033\006\002\000\003\0050\000&\005\013\006\001\005\u014f\000\003\0066\005\002\000\001\006\001\005\020\006\002\000\001\005\004\006\003\000\n\005\002\006\002\000\n\006\021\000\003\006\001\000\010\005\002\000\002\005\002\000\026\005\001\000\007\005\001\000\001\005\003\000\004\005\002\000\001\006\001\005\007\006\002\000\002\006\002\000\003\006\t\000\001\006\004\000\002\005\001\000\003\005\002\006\002\000\n\006\004\005\r\000\003\006\001\000\006\005\004\000\002\005\002\000\026\005\001\000\007\005\001\000\002\005\001\000\002\005\001\000\002\005\002\000\001\006\001\000\005\006\004\000\002\006\002\000\003\006\013\000\004\005\001\000\001\005\007\000\014\006\003\005\014\000\003\006\001\000\t\005\001\000\003\005\001\000\026\005\001\000\007\005\001\000\002\005\001\000\005\005\002\000\001\006\001\005\010\006\001\000\003\006\001\000\003\006\002\000\001\005\017\000\002\005\002\006\002\000\n\006\001\000\001\005\017\000\003\006\001\000\010\005\002\000\002\005\002\000\026\005\001\000\007\005\001\000\002\005\001\000\005\005\002\000\001\006\001\005\006\006\003\000\002\006\002\000\003\006\010\000\002\006\004\000\002\005\001\000\003\005\004\000\n\006\001\000\001\005\020\000\001\006\001\005\001\000\006\005\003\000\003\005\001\000\004\005\003\000\002\005\001\000\001\005\001\000\002\005\003\000\002\005\003\000\003\005\003\000\010\005\001\000\003\005\004\000\005\006\003\000\003\006\001\000\004\006\t\000\001\006\017\000\t\006\t\000\001\005\007\000\003\006\001\000\010\005\001\000\003\005\001\000\027\005\001\000\n\005\001\000\005\005\004\000\007\006\001\000\003\006\001\000\004\006\007\000\002\006\t\000\002\005\004\000\n\006\022\000\002\006\001\000\010\005\001\000\003\005\001\000\027\005\001\000\n\005\001\000\005\005\002\000\001\006\001\005\007\006\001\000\003\006\001\000\004\006\007\000\002\006\007\000\001\005\001\000\002\005\004\000\n\006\022\000\002\006\001\000\010\005\001\000\003\005\001\000\027\005\001\000\020\005\004\000\006\006\002\000\003\006\001\000\004\006\t\000\001\006\010\000\002\005\004\000\n\006\022\000\002\006\001\000\022\005\003\000\030\005\001\000\t\005\001\000\001\005\002\000\007\005\003\000\001\006\004\000\006\006\001\000\001\006\001\000\010\006\022\000\002\006\r\0000\005\001\006\002\005\007\006\004\000\010\005\010\006\001\000\n\006'\000\002\005\001\000\001\005\002\000\002\005\001\000\001\005\002\000\001\005\006\000\004\005\001\000\007\005\001\000\003\005\001\000\001\005\001\000\001\005\002\000\002\005\001\000\004\005\001\006\002\005\006\006\001\000\002\006\001\005\002\000\005\005\001\000\001\005\001\000\006\006\002\000\n\006\002\000\002\005\"\000\001\005\027\000\002\006\006\000\n\006\013\000\001\006\001\000\001\006\001\000\001\006\004\000\002\006\010\005\001\000\"\005\006\000\024\006\001\000\002\006\004\005\004\000\010\006\001\000$\006\t\000\001\0069\000\"\005\001\000\005\005\001\000\002\005\001\000\007\006\003\000\004\006\006\000\n\006\006\000\006\005\004\006F\000&\005\n\000)\005\007\000Z\005\005\000D\005\005\000R\005\006\000\007\005\001\000?\005\001\000\001\005\001\000\004\005\002\000\007\005\001\000\001\005\001\000\004\005\002\000'\005\001\000\001\005\001\000\004\005\002\000\037\005\001\000\001\005\001\000\004\005\002\000\007\005\001\000\001\005\001\000\004\005\002\000\007\005\001\000\007\005\001\000\027\005\001\000\037\005\001\000\001\005\001\000\004\005\002\000\007\005\001\000'\005\001\000\023\005\016\000\t\006.\000U\005\014\000\u026c\005\002\000\010\005\n\000\032\005\005\000K\005\003\000\003\005\017\000\r\005\001\000\004\005\003\006\013\000\022\005\003\006\013\000\022\005\002\006\014\000\r\005\001\000\003\005\001\000\002\006\014\0004\005 \006\003\000\001\005\003\000\002\005\001\006\002\000\n\006!\000\003\006\002\000\n\006\006\000X\005\010\000)\005\001\006V\000\035\005\003\000\014\006\004\000\014\006\n\000\n\006\036\005\002\000\005\005\u038b\000l\005\224\000\234\005\004\000Z\005\006\000\026\005\002\000\006\005\002\000&\005\002\000\006\005\002\000\010\005\001\000\001\005\001\000\001\005\001\000\001\005\001\000\037\005\002\0005\005\001\000\007\005\001\000\001\005\003\000\003\005\001\000\007\005\003\000\004\005\002\000\006\005\004\000\r\005\005\000\003\005\001\000\007\005\017\000\004\006\032\000\005\006\020\000\002\005\023\000\001\005\013\000\004\006\006\000\006\006\001\000\001\005\r\000\001\005 \000\022\005\036\000\r\006\004\000\001\006\003\000\006\006\027\000\001\005\004\000\001\005\002\000\n\005\001\000\001\005\003\000\005\005\006\000\001\005\001\000\001\005\001\000\001\005\001\000\004\005\001\000\003\005\001\000\007\005\003\000\003\005\005\000\005\005\026\000$\005\u0e81\000\003\005\031\000\t\005\006\006\001\000\005\005\002\000\005\005\004\000V\005\002\000\002\006\002\000\003\005\001\000_\005\005\000(\005\004\000^\005\021\000\030\0058\000\020\005\u0200\000\u19b6\005J\000\u51a6\005Z\000\u048d\005\u0773\000\u2ba4\005\u215c\000\u012e\005\002\000;\005\225\000\007\005\014\000\005\005\005\000\001\005\001\006\n\005\001\000\r\005\001\000\005\005\001\000\001\005\001\000\002\005\001\000\002\005\001\000l\005!\000\u016b\005\022\000@\005\002\0006\005(\000\r\005\003\000\020\006\020\000\004\006\017\000\002\005\030\000\003\005\031\000\001\005\006\000\005\005\001\000\207\005\002\000\001\006\004\000\001\005\013\000\n\006\007\000\032\005\004\000\001\005\001\000\032\005\n\000Z\005\003\000\006\005\002\000\006\005\002\000\006\005\002\000\003\005\003\000\002\005\003\000\002\005\022\000\003\006\004\000"
return has only one value
return[] == [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 2, 0, 3, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 3, 0, 9, 4, 5, 0, 0, 10, 30, 31, 41, 40, 34, 38, 35, 42, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 29, 37, 44, 43, 39, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 32, 11, 33, 0, 5, 0, 12, 45, 23, 5, 18, 22, 25, 24, 16, 5, 5, 13, 17, 19, 20, 5, 5, 15, 21, 14, 27, 26, 5, 5, 5, 28, 0, 36, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 5, 5, 0, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 6, 6, 6, 6, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 6, 6, 6, 0, 6, 0, 6, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 6, 6, 6, 6, 6, 6, 6, 6, 0, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 0, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 5, 6, 6, 6, 6, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 0, 5, 0, 0, 0, 5, 5, 5, 5, 0, 0, 6, 5, 6, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 0, 0, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 5, 5, 0, 5, 5, 5, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 0, 5, 5, 0, 5, 5, 0, 0, 6, 0, 6, 6, 6, 6, 6, 0, 0, 0, 0, 6, 6, 0, 0, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 0, 5, 5, 5, 5, 5, 0, 0, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 0, 6, 6, 6, 0, 6, 6, 6, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 0, 5, 5, 5, 5, 5, 0, 0, 6, 5, 6, 6, 6, 6, 6, 6, 0, 0, 0, 6, 6, 0, 0, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 5, 5, 0, 5, 5, 5, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 5, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 5, 5, 5, 0, 5, 5, 5, 5, 0, 0, 0, 5, 5, 0, 5, 0, 5, 5, 0, 0, 0, 5, 5, 0, 0, 0, 5, 5, 5, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 0, 0, 0, 0, 6, 6, 6, 6, 6, 0, 0, 0, 6, 6, 6, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 0, 6, 6, 6, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 0, 0, 6, 5, 6, 6, 6, 6, 6, 6, 6, 0, 6, 6, 6, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 5, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 6, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 0, 6, 0, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 5, 0, 0, 5, 5, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 0, 5, 0, 5, 0, 0, 5, 5, 0, 5, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 6, 6, 0, 6, 6, 5, 0, 0, 5, 5, 5, 5, 5, 0, 5, 0, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 6, 0, 0, 0, 0, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 6, 6, 5, 5, 5, 5, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 0, 5, 5, 0, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 0, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 5, 0, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 0, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 0, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 5, 0, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 0, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 5, 0, 0, 0, 5, 5, 6, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 0, 5, 0, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 0, 5, 0, 0, 0, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 6, 0, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 0, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 6, 6, 0, 0, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 0, 5, 0, 5, 5, 0, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 6, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 0, 0, 0, 5, 5, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0]
return[] elements >= 0
size(return[]) == 65536
===========================================================================
main.Scanner.zzUnpackRowMap():::ENTER
===========================================================================
main.Scanner.zzUnpackRowMap():::EXIT
return has only one value
return[] == [0, 46, 92, 138, 92, 184, 230, 92, 276, 92, 322, 368, 414, 460, 506, 552, 92, 92, 92, 92, 92, 92, 92, 92, 92, 598, 92, 92, 92, 92, 92, 92, 644, 690, 92, 92, 736, 782, 828, 874, 230, 920, 966, 1012, 1058, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 1104, 1150, 1196, 1242, 1288, 1334, 1380, 1426, 1472, 1518, 1564, 1610, 1656, 1702, 1748, 230, 1794, 1840, 1886, 1932, 1978, 2024, 230, 230, 230, 2070, 2116, 2162, 2208, 230, 2254, 230, 2300, 230]
size(return[]) == 89
===========================================================================
main.Scanner.zzUnpackRowMap(java.lang.String, int, int[]):::ENTER
arg0 has only one value
arg0.toString == "\000\000\000.\000\\\000\212\000\\\000\270\000\346\000\\\000\u0114\000\\\000\u0142\000\u0170\000\u019e\000\u01cc\000\u01fa\000\u0228\000\\\000\\\000\\\000\\\000\\\000\\\000\\\000\\\000\\\000\u0256\000\\\000\\\000\\\000\\\000\\\000\\\000\u0284\000\u02b2\000\\\000\\\000\u02e0\000\u030e\000\u033c\000\u036a\000\346\000\u0398\000\u03c6\000\u03f4\000\u0422\000\\\000\\\000\\\000\\\000\\\000\\\000\\\000\\\000\\\000\\\000\u0450\000\u047e\000\u04ac\000\u04da\000\u0508\000\u0536\000\u0564\000\u0592\000\u05c0\000\u05ee\000\u061c\000\u064a\000\u0678\000\u06a6\000\u06d4\000\346\000\u0702\000\u0730\000\u075e\000\u078c\000\u07ba\000\u07e8\000\346\000\346\000\346\000\u0816\000\u0844\000\u0872\000\u08a0\000\346\000\u08ce\000\346\000\u08fc\000\346"
arg1 == 0
arg2 has only one value
arg2[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
arg2[] elements == 0
size(arg2[]) == 89
===========================================================================
main.Scanner.zzUnpackRowMap(java.lang.String, int, int[]):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "\000\000\000.\000\\\000\212\000\\\000\270\000\346\000\\\000\u0114\000\\\000\u0142\000\u0170\000\u019e\000\u01cc\000\u01fa\000\u0228\000\\\000\\\000\\\000\\\000\\\000\\\000\\\000\\\000\\\000\u0256\000\\\000\\\000\\\000\\\000\\\000\\\000\u0284\000\u02b2\000\\\000\\\000\u02e0\000\u030e\000\u033c\000\u036a\000\346\000\u0398\000\u03c6\000\u03f4\000\u0422\000\\\000\\\000\\\000\\\000\\\000\\\000\\\000\\\000\\\000\\\000\u0450\000\u047e\000\u04ac\000\u04da\000\u0508\000\u0536\000\u0564\000\u0592\000\u05c0\000\u05ee\000\u061c\000\u064a\000\u0678\000\u06a6\000\u06d4\000\346\000\u0702\000\u0730\000\u075e\000\u078c\000\u07ba\000\u07e8\000\346\000\346\000\346\000\u0816\000\u0844\000\u0872\000\u08a0\000\346\000\u08ce\000\346\000\u08fc\000\346"
arg2[] == [0, 46, 92, 138, 92, 184, 230, 92, 276, 92, 322, 368, 414, 460, 506, 552, 92, 92, 92, 92, 92, 92, 92, 92, 92, 598, 92, 92, 92, 92, 92, 92, 644, 690, 92, 92, 736, 782, 828, 874, 230, 920, 966, 1012, 1058, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 1104, 1150, 1196, 1242, 1288, 1334, 1380, 1426, 1472, 1518, 1564, 1610, 1656, 1702, 1748, 230, 1794, 1840, 1886, 1932, 1978, 2024, 230, 230, 230, 2070, 2116, 2162, 2208, 230, 2254, 230, 2300, 230]
return == 89
===========================================================================
main.Scanner.zzUnpackTrans():::ENTER
===========================================================================
main.Scanner.zzUnpackTrans():::EXIT
return has only one value
return[] == [2, 3, 4, 4, 5, 6, 2, 7, 8, 9, 2, 2, 10, 11, 6, 6, 12, 6, 6, 6, 6, 13, 14, 6, 6, 6, 15, 6, 6, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 6, 32, 33, 34, 32, 32, 32, 32, 32, 32, 35, 32, 36, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, 8, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 37, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 38, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 39, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 40, 6, 6, 6, 6, 41, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 42, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 43, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 44, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, 32, -1, -1, 32, 32, 32, 32, 32, 32, -1, 32, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, -1, 46, 46, 46, 46, 46, 46, 47, 48, 49, 46, 46, 50, 51, 46, 46, 46, 52, 46, 46, 53, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 54, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 55, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 56, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 57, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 58, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 59, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 60, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 61, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 62, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 63, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 64, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 65, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 66, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 68, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 69, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 70, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 71, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 72, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 73, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 74, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 6, 75, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 76, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 6, 77, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 78, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 79, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 6, 80, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 81, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 82, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 83, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 84, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 85, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 86, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 87, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 88, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6]
return[] elements >= -1
size(return[]) == 2346
===========================================================================
main.Scanner.zzUnpackTrans(java.lang.String, int, int[]):::ENTER
arg0 has only one value
arg0.toString == "\001\003\001\004\002\005\001\006\001\007\001\003\001\010\001\t\001\n\002\003\001\013\001\014\002\007\001\r\004\007\001\016\001\017\003\007\001\020\002\007\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001 \001\007\001!\001\"\001#\006!\001$\001!\001%\"!0\000\001\005+\000\001\006\001\004\001\005+\006\005\000\004\007\003\000\021\007\020\000\001\007\007\000\002\t*\000\004\007\003\000\001\007\001&\017\007\020\000\001\007\005\000\004\007\003\000\006\007\001'\n\007\020\000\001\007\005\000\004\007\003\000\007\007\001(\t\007\020\000\001\007\005\000\004\007\003\000\006\007\001)\004\007\001*\005\007\020\000\001\007\005\000\004\007\003\000\004\007\001+\n\007\001,\001\007\020\000\001\007\005\000\004\007\003\000\006\007\001-\n\007\020\000\001\007'\000\001.\006\000\001!\002\000\006!\001\000\001!\001\000\"!\002\000\001#+\000\002/\001\000\006/\0010\0011\0012\002/\0013\0014\003/\0015\002/\0016\026/\0017\005\000\004\007\003\000\002\007\0018\016\007\020\000\001\007\005\000\004\007\003\000\r\007\0019\003\007\020\000\001\007\005\000\004\007\003\000\002\007\001:\016\007\020\000\001\007\005\000\004\007\003\000\003\007\001;\r\007\020\000\001\007\005\000\004\007\003\000\007\007\001<\t\007\020\000\001\007\005\000\004\007\003\000\007\007\001=\t\007\020\000\001\007\005\000\004\007\003\000\002\007\001>\016\007\020\000\001\007\005\000\004\007\003\000\003\007\001?\r\007\020\000\001\007\005\000\004\007\003\000\r\007\001@\003\007\020\000\001\007\005\000\004\007\003\000\006\007\001A\n\007\020\000\001\007\005\000\004\007\003\000\004\007\001B\014\007\020\000\001\007\005\000\004\007\003\000\013\007\001C\005\007\020\000\001\007\005\000\004\007\003\000\020\007\001D\020\000\001\007\005\000\004\007\003\000\002\007\001E\016\007\020\000\001\007\005\000\004\007\003\000\004\007\001F\014\007\020\000\001\007\005\000\004\007\003\000\004\007\001G\014\007\020\000\001\007\005\000\004\007\003\000\003\007\001H\r\007\020\000\001\007\005\000\004\007\003\000\016\007\001I\002\007\020\000\001\007\005\000\004\007\003\000\014\007\001J\004\007\020\000\001\007\005\000\004\007\003\000\004\007\001K\014\007\020\000\001\007\005\000\004\007\003\000\010\007\001L\010\007\020\000\001\007\005\000\004\007\003\000\005\007\001M\013\007\020\000\001\007\005\000\004\007\003\000\010\007\001N\010\007\020\000\001\007\005\000\004\007\003\000\004\007\001O\014\007\020\000\001\007\005\000\004\007\003\000\006\007\001P\n\007\020\000\001\007\005\000\004\007\003\000\010\007\001Q\010\007\020\000\001\007\005\000\004\007\003\000\003\007\001R\r\007\020\000\001\007\005\000\004\007\003\000\006\007\001S\n\007\020\000\001\007\005\000\004\007\003\000\007\007\001T\t\007\020\000\001\007\005\000\004\007\003\000\006\007\001U\n\007\020\000\001\007\005\000\004\007\003\000\007\007\001V\t\007\020\000\001\007\005\000\004\007\003\000\006\007\001W\n\007\020\000\001\007\005\000\004\007\003\000\002\007\001X\016\007\020\000\001\007\005\000\004\007\003\000\004\007\001Y\014\007\020\000\001\007"
arg1 == 0
arg2 has only one value
arg2[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
arg2[] elements == 0
size(arg2[]) == 2346
===========================================================================
main.Scanner.zzUnpackTrans(java.lang.String, int, int[]):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "\001\003\001\004\002\005\001\006\001\007\001\003\001\010\001\t\001\n\002\003\001\013\001\014\002\007\001\r\004\007\001\016\001\017\003\007\001\020\002\007\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001 \001\007\001!\001\"\001#\006!\001$\001!\001%\"!0\000\001\005+\000\001\006\001\004\001\005+\006\005\000\004\007\003\000\021\007\020\000\001\007\007\000\002\t*\000\004\007\003\000\001\007\001&\017\007\020\000\001\007\005\000\004\007\003\000\006\007\001'\n\007\020\000\001\007\005\000\004\007\003\000\007\007\001(\t\007\020\000\001\007\005\000\004\007\003\000\006\007\001)\004\007\001*\005\007\020\000\001\007\005\000\004\007\003\000\004\007\001+\n\007\001,\001\007\020\000\001\007\005\000\004\007\003\000\006\007\001-\n\007\020\000\001\007'\000\001.\006\000\001!\002\000\006!\001\000\001!\001\000\"!\002\000\001#+\000\002/\001\000\006/\0010\0011\0012\002/\0013\0014\003/\0015\002/\0016\026/\0017\005\000\004\007\003\000\002\007\0018\016\007\020\000\001\007\005\000\004\007\003\000\r\007\0019\003\007\020\000\001\007\005\000\004\007\003\000\002\007\001:\016\007\020\000\001\007\005\000\004\007\003\000\003\007\001;\r\007\020\000\001\007\005\000\004\007\003\000\007\007\001<\t\007\020\000\001\007\005\000\004\007\003\000\007\007\001=\t\007\020\000\001\007\005\000\004\007\003\000\002\007\001>\016\007\020\000\001\007\005\000\004\007\003\000\003\007\001?\r\007\020\000\001\007\005\000\004\007\003\000\r\007\001@\003\007\020\000\001\007\005\000\004\007\003\000\006\007\001A\n\007\020\000\001\007\005\000\004\007\003\000\004\007\001B\014\007\020\000\001\007\005\000\004\007\003\000\013\007\001C\005\007\020\000\001\007\005\000\004\007\003\000\020\007\001D\020\000\001\007\005\000\004\007\003\000\002\007\001E\016\007\020\000\001\007\005\000\004\007\003\000\004\007\001F\014\007\020\000\001\007\005\000\004\007\003\000\004\007\001G\014\007\020\000\001\007\005\000\004\007\003\000\003\007\001H\r\007\020\000\001\007\005\000\004\007\003\000\016\007\001I\002\007\020\000\001\007\005\000\004\007\003\000\014\007\001J\004\007\020\000\001\007\005\000\004\007\003\000\004\007\001K\014\007\020\000\001\007\005\000\004\007\003\000\010\007\001L\010\007\020\000\001\007\005\000\004\007\003\000\005\007\001M\013\007\020\000\001\007\005\000\004\007\003\000\010\007\001N\010\007\020\000\001\007\005\000\004\007\003\000\004\007\001O\014\007\020\000\001\007\005\000\004\007\003\000\006\007\001P\n\007\020\000\001\007\005\000\004\007\003\000\010\007\001Q\010\007\020\000\001\007\005\000\004\007\003\000\003\007\001R\r\007\020\000\001\007\005\000\004\007\003\000\006\007\001S\n\007\020\000\001\007\005\000\004\007\003\000\007\007\001T\t\007\020\000\001\007\005\000\004\007\003\000\006\007\001U\n\007\020\000\001\007\005\000\004\007\003\000\007\007\001V\t\007\020\000\001\007\005\000\004\007\003\000\006\007\001W\n\007\020\000\001\007\005\000\004\007\003\000\002\007\001X\016\007\020\000\001\007\005\000\004\007\003\000\004\007\001Y\014\007\020\000\001\007"
arg2[] == [2, 3, 4, 4, 5, 6, 2, 7, 8, 9, 2, 2, 10, 11, 6, 6, 12, 6, 6, 6, 6, 13, 14, 6, 6, 6, 15, 6, 6, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 6, 32, 33, 34, 32, 32, 32, 32, 32, 32, 35, 32, 36, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, 8, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 37, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 38, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 39, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 40, 6, 6, 6, 6, 41, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 42, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 43, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 44, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, 32, -1, -1, 32, 32, 32, 32, 32, 32, -1, 32, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, -1, 46, 46, 46, 46, 46, 46, 47, 48, 49, 46, 46, 50, 51, 46, 46, 46, 52, 46, 46, 53, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 54, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 55, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 56, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 57, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 58, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 59, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 60, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 61, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 62, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 63, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 64, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 65, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 66, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 68, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 69, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 70, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 71, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 72, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 73, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 74, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 6, 75, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 76, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 6, 77, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 78, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 79, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 6, 80, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 81, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 82, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 83, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 84, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6, 85, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 6, 86, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 87, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 88, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6]
arg2[] elements >= -1
return == 2346
Exiting Daikon.
