Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

===========================================================================
BitTutte:::CLASS
BitTutte.line has only one value
BitTutte.line != null
BitTutte.line[] == []
BitTutte.line[].getClass().getName() == []
BitTutte.line.getClass().getName() == java.util.ArrayList.class
===========================================================================
BitTutte:::OBJECT
this.global_timer != null
this.global_timer.gtod == true
this.status_flag == false
this.write_tree == false
this.resize_stats == 0
this.num_steps >= 0
this.num_bicomps >= 0
this.num_cycles >= 0
this.num_disbicomps == 0
this.num_trees >= 0
this.num_completed == 0
this.old_num_steps == 0
this.tree_id >= 2
this.reduce_multicycles == true
this.reduce_multiedges == true
this.use_add_contract == false
this.split_threshold == 0
this.smallGraphThreshold == 5
this.cache != null
this.cache.data != null
this.cache.data.getClass().getName() == java.util.HashMap.class
this.cache.delete_prop == 0.5
this.cache.acesses >= 0
this.cache.misses >= 0
this.edgeSelection != null
this.edgeSelection.getClass().getName() == selection.HeuristicCollection.class
this.totalWork >= 0
this.workDone >= 0
this.cache.data.getClass().getName() != this.edgeSelection.getClass().getName()
this.cache.data.getClass().getName() != BitTutte.line.getClass().getName()
this.edgeSelection.getClass().getName() != BitTutte.line.getClass().getName()
===========================================================================
BitTutte.BitTutte(java.lang.String):::ENTER
arg0 == null
===========================================================================
BitTutte.BitTutte(java.lang.String):::EXIT
this.num_steps >= 1
this.totalWork is a power of 2
===========================================================================
BitTutte.debug(java.lang.Object):::ENTER
arg0 != null
this.cache.data.getClass().getName() != arg0.getClass().getName()
this.edgeSelection.getClass().getName() != arg0.getClass().getName()
BitTutte.line.getClass().getName() != arg0.getClass().getName()
===========================================================================
BitTutte.debug(java.lang.Object):::EXIT
this.global_timer == orig(this.global_timer)
this.global_timer.start == orig(this.global_timer.start)
this.global_timer.gtod == orig(this.global_timer.gtod)
this.status_flag == orig(this.status_flag)
this.write_tree == orig(this.write_tree)
this.resize_stats == orig(this.resize_stats)
this.num_steps == orig(this.num_steps)
this.num_bicomps == orig(this.num_bicomps)
this.num_cycles == orig(this.num_cycles)
this.num_disbicomps == orig(this.num_disbicomps)
this.num_trees == orig(this.num_trees)
this.num_completed == orig(this.num_completed)
this.old_num_steps == orig(this.old_num_steps)
this.tree_id == orig(this.tree_id)
this.reduce_multicycles == orig(this.reduce_multicycles)
this.reduce_multiedges == orig(this.reduce_multiedges)
this.use_add_contract == orig(this.use_add_contract)
this.split_threshold == orig(this.split_threshold)
this.smallGraphThreshold == orig(this.smallGraphThreshold)
this.cache == orig(this.cache)
this.cache.data == orig(this.cache.data)
this.cache.data.getClass().getName() == orig(this.cache.data.getClass().getName())
this.cache.delete_prop == orig(this.cache.delete_prop)
this.cache.acesses == orig(this.cache.acesses)
this.cache.misses == orig(this.cache.misses)
this.edgeSelection == orig(this.edgeSelection)
this.edgeSelection.getClass().getName() == orig(this.edgeSelection.getClass().getName())
this.totalWork == orig(this.totalWork)
this.workDone == orig(this.workDone)
BitTutte.line == orig(BitTutte.line)
BitTutte.line[] == orig(BitTutte.line[])
BitTutte.line.getClass().getName() == orig(BitTutte.line.getClass().getName())
this.cache.data.getClass().getName() != orig(arg0.getClass().getName())
this.edgeSelection.getClass().getName() != orig(arg0.getClass().getName())
BitTutte.line.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
BitTutte.main(java.lang.String[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.lang.String[].class
arg0[] == []
arg0[].toString == []
===========================================================================
BitTutte.main(java.lang.String[]):::EXIT
BitTutte.line == orig(BitTutte.line)
BitTutte.line[] == orig(BitTutte.line[])
BitTutte.line.getClass().getName() == orig(BitTutte.line.getClass().getName())
arg0[] == orig(arg0[])
arg0[] == []
arg0[].toString == []
===========================================================================
BitTutte.pow(long, long):::ENTER
this.num_bicomps one of { 0, 1, 3 }
this.num_cycles one of { 0, 2, 3 }
this.num_trees one of { 0, 1, 3 }
this.cache.acesses one of { 0, 1, 3 }
this.cache.misses one of { 0, 1, 3 }
arg0 == 2
===========================================================================
BitTutte.pow(long, long):::EXIT
this.global_timer == orig(this.global_timer)
this.global_timer.start == orig(this.global_timer.start)
this.global_timer.gtod == orig(this.global_timer.gtod)
this.status_flag == orig(this.status_flag)
this.write_tree == orig(this.write_tree)
this.resize_stats == orig(this.resize_stats)
this.num_steps == orig(this.num_steps)
this.num_bicomps == orig(this.num_bicomps)
this.num_cycles == orig(this.num_cycles)
this.num_disbicomps == orig(this.num_disbicomps)
this.num_trees == orig(this.num_trees)
this.num_completed == orig(this.num_completed)
this.old_num_steps == orig(this.old_num_steps)
this.tree_id == orig(this.tree_id)
this.reduce_multicycles == orig(this.reduce_multicycles)
this.reduce_multiedges == orig(this.reduce_multiedges)
this.use_add_contract == orig(this.use_add_contract)
this.split_threshold == orig(this.split_threshold)
this.smallGraphThreshold == orig(this.smallGraphThreshold)
this.cache == orig(this.cache)
this.cache.data == orig(this.cache.data)
this.cache.data.getClass().getName() == orig(this.cache.data.getClass().getName())
this.cache.delete_prop == orig(this.cache.delete_prop)
this.cache.acesses == orig(this.cache.acesses)
this.cache.misses == orig(this.cache.misses)
this.edgeSelection == orig(this.edgeSelection)
this.edgeSelection.getClass().getName() == orig(this.edgeSelection.getClass().getName())
this.totalWork == orig(this.totalWork)
this.workDone == orig(this.workDone)
BitTutte.line == orig(BitTutte.line)
BitTutte.line[] == orig(BitTutte.line[])
BitTutte.line.getClass().getName() == orig(BitTutte.line.getClass().getName())
this.num_bicomps one of { 0, 1, 3 }
this.num_cycles one of { 0, 2, 3 }
this.num_trees one of { 0, 1, 3 }
this.cache.acesses one of { 0, 1, 3 }
this.cache.misses one of { 0, 1, 3 }
return is a power of 2
===========================================================================
BitTutte.reduce_cycle(polynomial.FactorPoly, graph.Graph):::ENTER
BitTutte.line.getClass().getName() == arg1.datae.visited.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datae.lowlink.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datae.dfsnum.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datae.cstack.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datac.visited.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datac.lowlink.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datac.dfsnum.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datac.cstack.getClass().getName()
this.num_steps >= 1
this.num_cycles >= 1
this.totalWork is a power of 2
arg0 != null
arg0.xterms != null
arg0.xterms.getClass().getName() == polynomial.YTerms[].class
arg0.xterms[] elements != null
arg0.xterms[].getClass().getName() == [polynomial.YTerms, polynomial.YTerms]
arg0.xterms[].getClass().getName() elements == polynomial.YTerms.class
arg0.xterms[].ymin == [1, 0]
arg0.xterms[].ymin elements one of { 0, 1 }
arg0.xterms[].ymin sorted by >
arg0.xterms[].ymax == [0, 0]
arg0.xterms[].ymax elements == 0
arg0.xterms[].fpadding == [0, 0]
arg0.xterms[].fpadding elements == 0
arg0.xterms[].bpadding == [0, 1]
arg0.xterms[].bpadding elements one of { 0, 1 }
arg0.xterms[].bpadding sorted by <
arg0.xterms[].coefficients.getClass().getName() == [null, java.math.BigInteger[]]
arg0.nxterms == 2
arg1 != null
arg1.graph != null
arg1.graph.numMultiEdges >= 0
arg1.graph.edges != null
arg1.graph.vertices != null
arg1.graph.vertices[] elements != 0
arg1.graph.vertices[] elements >= -1
arg1.graph.startVertex >= 0
arg1.nartics == 1
arg1.ncomponents one of { 1, 2 }
arg1.label[] == [0, 268435456, 4, 65, 272631840, 67108872, 129]
arg1.datae != null
arg1.datae.vindex == 0
arg1.datae.visited != null
arg1.datae.visited[] == []
arg1.datae.visited[].getClass().getName() == []
arg1.datae.lowlink != null
arg1.datae.lowlink[] == []
arg1.datae.lowlink[].getClass().getName() == []
arg1.datae.dfsnum != null
arg1.datae.dfsnum[] == []
arg1.datae.dfsnum[].getClass().getName() == []
arg1.datae.cstack != null
arg1.datae.cstack[] == []
arg1.datae.cstack[].getClass().getName() == []
arg1.datac != null
arg1.datac.visited != null
arg1.datac.visited[] elements != null
arg1.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg1.datac.lowlink != null
arg1.datac.lowlink[] elements != null
arg1.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg1.datac.dfsnum != null
arg1.datac.dfsnum[] elements != null
arg1.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg1.datac.cstack != null
arg1.datac.cstack[] == []
arg1.datac.cstack[].getClass().getName() == []
size(arg0.xterms[]) == 2
size(arg1.label[]) == 7
this.cache.data.getClass().getName() != arg0.xterms.getClass().getName()
this.edgeSelection.getClass().getName() != arg0.xterms.getClass().getName()
BitTutte.line.getClass().getName() != arg0.xterms.getClass().getName()
===========================================================================
BitTutte.reduce_cycle(polynomial.FactorPoly, graph.Graph):::EXIT
this.global_timer == orig(this.global_timer)
this.global_timer.start == orig(this.global_timer.start)
this.global_timer.gtod == orig(this.global_timer.gtod)
this.status_flag == orig(this.status_flag)
this.write_tree == orig(this.write_tree)
this.resize_stats == orig(this.resize_stats)
this.num_steps == orig(this.num_steps)
this.num_bicomps == orig(this.num_bicomps)
this.num_cycles == orig(this.num_cycles)
this.num_disbicomps == orig(this.num_disbicomps)
this.num_trees == orig(this.num_trees)
this.num_completed == orig(this.num_completed)
this.old_num_steps == orig(this.old_num_steps)
this.tree_id == orig(this.tree_id)
this.reduce_multicycles == orig(this.reduce_multicycles)
this.reduce_multiedges == orig(this.reduce_multiedges)
this.use_add_contract == orig(this.use_add_contract)
this.split_threshold == orig(this.split_threshold)
this.smallGraphThreshold == orig(this.smallGraphThreshold)
this.cache == orig(this.cache)
this.cache.data == orig(this.cache.data)
this.cache.data.getClass().getName() == orig(this.cache.data.getClass().getName())
this.cache.delete_prop == orig(this.cache.delete_prop)
this.cache.acesses == orig(this.cache.acesses)
this.cache.misses == orig(this.cache.misses)
this.edgeSelection == orig(this.edgeSelection)
this.edgeSelection.getClass().getName() == orig(this.edgeSelection.getClass().getName())
this.totalWork == orig(this.totalWork)
this.workDone == orig(this.workDone)
BitTutte.line == orig(BitTutte.line)
BitTutte.line[] == orig(BitTutte.line[])
BitTutte.line.getClass().getName() == arg1.datae.visited.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datae.lowlink.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datae.dfsnum.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datae.cstack.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datac.visited.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datac.lowlink.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datac.dfsnum.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datac.cstack.getClass().getName()
BitTutte.line.getClass().getName() == orig(BitTutte.line.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg1.datae.visited.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg1.datae.lowlink.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg1.datae.dfsnum.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg1.datae.cstack.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg1.datac.visited.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg1.datac.lowlink.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg1.datac.dfsnum.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg1.datac.cstack.getClass().getName())
arg0.xterms == orig(arg0.xterms)
arg0.xterms.getClass().getName() == return.xterms.getClass().getName()
arg0.xterms.getClass().getName() == orig(arg0.xterms.getClass().getName())
arg0.xterms[] == orig(arg0.xterms[])
arg0.xterms[].ymin == orig(arg0.xterms[].ymin)
arg0.xterms[].ymax == orig(arg0.xterms[].ymax)
arg0.xterms[].fpadding == orig(arg0.xterms[].fpadding)
arg0.xterms[].bpadding == orig(arg0.xterms[].bpadding)
arg0.xterms[].coefficients == orig(arg0.xterms[].coefficients)
arg0.nxterms == orig(arg0.nxterms)
arg1.graph == orig(arg1.graph)
arg1.graph.numEdges == orig(arg1.graph.numEdges)
arg1.graph.domainSize == orig(arg1.graph.domainSize)
arg1.graph.numMultiEdges == orig(arg1.graph.numMultiEdges)
arg1.graph.edges == orig(arg1.graph.edges)
arg1.graph.edges[] == orig(arg1.graph.edges[])
arg1.graph.numVertices == orig(arg1.graph.numVertices)
arg1.graph.vertices == orig(arg1.graph.vertices)
arg1.graph.vertices[] == orig(arg1.graph.vertices[])
arg1.graph.startVertex == orig(arg1.graph.startVertex)
arg1.nartics == orig(arg1.nartics)
arg1.ncomponents == orig(arg1.ncomponents)
arg1.label == orig(arg1.label)
arg1.label[] == orig(arg1.label[])
arg1.datae == orig(arg1.datae)
arg1.datae.vindex == orig(arg1.datae.vindex)
arg1.datae.visited == orig(arg1.datae.visited)
arg1.datae.visited[] == orig(arg1.datae.visited[])
arg1.datae.lowlink == orig(arg1.datae.lowlink)
arg1.datae.lowlink[] == orig(arg1.datae.lowlink[])
arg1.datae.dfsnum == orig(arg1.datae.dfsnum)
arg1.datae.dfsnum[] == orig(arg1.datae.dfsnum[])
arg1.datae.cstack == orig(arg1.datae.cstack)
arg1.datae.cstack[] == orig(arg1.datae.cstack[])
arg1.datac == orig(arg1.datac)
arg1.datac.vindex == orig(arg1.datac.vindex)
arg1.datac.visited == orig(arg1.datac.visited)
arg1.datac.visited[] == orig(arg1.datac.visited[])
arg1.datac.lowlink == orig(arg1.datac.lowlink)
arg1.datac.lowlink[] == orig(arg1.datac.lowlink[])
arg1.datac.dfsnum == orig(arg1.datac.dfsnum)
arg1.datac.dfsnum[] == orig(arg1.datac.dfsnum[])
arg1.datac.cstack == orig(arg1.datac.cstack)
arg1.datac.cstack[] == orig(arg1.datac.cstack[])
this.num_steps >= 1
this.num_cycles >= 1
this.totalWork is a power of 2
arg0.xterms != null
arg0.xterms.getClass().getName() == polynomial.YTerms[].class
arg0.xterms[] elements != null
arg0.xterms[].getClass().getName() == [polynomial.YTerms, polynomial.YTerms]
arg0.xterms[].getClass().getName() elements == polynomial.YTerms.class
arg0.xterms[].ymin == [1, 0]
arg0.xterms[].ymin elements one of { 0, 1 }
arg0.xterms[].ymin sorted by >
arg0.xterms[].ymax == [0, 0]
arg0.xterms[].ymax elements == 0
arg0.xterms[].fpadding == [0, 0]
arg0.xterms[].fpadding elements == 0
arg0.xterms[].bpadding == [0, 1]
arg0.xterms[].bpadding elements one of { 0, 1 }
arg0.xterms[].bpadding sorted by <
arg0.xterms[].coefficients.getClass().getName() == [null, java.math.BigInteger[]]
arg0.nxterms == 2
arg1.graph != null
arg1.graph.numMultiEdges >= 0
arg1.graph.edges != null
arg1.graph.vertices != null
arg1.graph.vertices[] elements != 0
arg1.graph.vertices[] elements >= -1
arg1.graph.startVertex >= 0
arg1.nartics == 1
arg1.ncomponents one of { 1, 2 }
arg1.label[] == [0, 268435456, 4, 65, 272631840, 67108872, 129]
arg1.datae != null
arg1.datae.vindex == 0
arg1.datae.visited != null
arg1.datae.visited[] == []
arg1.datae.visited[].getClass().getName() == []
arg1.datae.lowlink != null
arg1.datae.lowlink[] == []
arg1.datae.lowlink[].getClass().getName() == []
arg1.datae.dfsnum != null
arg1.datae.dfsnum[] == []
arg1.datae.dfsnum[].getClass().getName() == []
arg1.datae.cstack != null
arg1.datae.cstack[] == []
arg1.datae.cstack[].getClass().getName() == []
arg1.datac != null
arg1.datac.visited != null
arg1.datac.visited[] elements != null
arg1.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg1.datac.lowlink != null
arg1.datac.lowlink[] elements != null
arg1.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg1.datac.dfsnum != null
arg1.datac.dfsnum[] elements != null
arg1.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg1.datac.cstack != null
arg1.datac.cstack[] == []
arg1.datac.cstack[].getClass().getName() == []
return != null
return.xterms != null
return.xterms[] elements != null
return.xterms[].getClass().getName() elements == polynomial.YTerms.class
return.xterms[].ymin elements one of { 0, 1 }
return.xterms[].ymax elements >= 0
return.xterms[].ymax sorted by >=
return.xterms[].fpadding elements one of { 0, 1 }
return.xterms[].fpadding sorted by >=
return.xterms[].bpadding elements >= 0
size(arg0.xterms[]) == 2
size(arg1.label[]) == 7
this.cache.data.getClass().getName() != arg0.xterms.getClass().getName()
this.edgeSelection.getClass().getName() != arg0.xterms.getClass().getName()
BitTutte.line.getClass().getName() != arg0.xterms.getClass().getName()
===========================================================================
BitTutte.reduce_loops(graph.Graph):::ENTER
BitTutte.line.getClass().getName() == arg0.datae.visited.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datae.lowlink.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datae.dfsnum.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datae.cstack.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datac.visited.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datac.lowlink.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datac.dfsnum.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datac.cstack.getClass().getName()
this.num_steps >= 1
this.totalWork is a power of 2
arg0 != null
arg0.graph != null
arg0.graph.numMultiEdges >= 0
arg0.graph.edges != null
arg0.graph.vertices != null
arg0.graph.vertices[] elements != 0
arg0.graph.vertices[] elements >= -1
arg0.graph.startVertex one of { 0, 1, 2 }
arg0.ncomponents >= 1
arg0.label == null
arg0.datae != null
arg0.datae.vindex == 0
arg0.datae.visited != null
arg0.datae.visited[] == []
arg0.datae.visited[].getClass().getName() == []
arg0.datae.lowlink != null
arg0.datae.lowlink[] == []
arg0.datae.lowlink[].getClass().getName() == []
arg0.datae.dfsnum != null
arg0.datae.dfsnum[] == []
arg0.datae.dfsnum[].getClass().getName() == []
arg0.datae.cstack != null
arg0.datae.cstack[] == []
arg0.datae.cstack[].getClass().getName() == []
arg0.datac != null
arg0.datac.visited != null
arg0.datac.visited[] elements != null
arg0.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg0.datac.lowlink != null
arg0.datac.lowlink[] elements != null
arg0.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.dfsnum != null
arg0.datac.dfsnum[] elements != null
arg0.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.cstack != null
arg0.datac.cstack[] == []
arg0.datac.cstack[].getClass().getName() == []
===========================================================================
BitTutte.reduce_loops(graph.Graph):::EXIT
this.global_timer == orig(this.global_timer)
this.global_timer.start == orig(this.global_timer.start)
this.global_timer.gtod == orig(this.global_timer.gtod)
this.status_flag == orig(this.status_flag)
this.write_tree == orig(this.write_tree)
this.resize_stats == orig(this.resize_stats)
this.num_steps == orig(this.num_steps)
this.num_bicomps == orig(this.num_bicomps)
this.num_cycles == orig(this.num_cycles)
this.num_disbicomps == orig(this.num_disbicomps)
this.num_trees == orig(this.num_trees)
this.num_completed == orig(this.num_completed)
this.old_num_steps == orig(this.old_num_steps)
this.tree_id == orig(this.tree_id)
this.reduce_multicycles == orig(this.reduce_multicycles)
this.reduce_multiedges == orig(this.reduce_multiedges)
this.use_add_contract == orig(this.use_add_contract)
this.split_threshold == orig(this.split_threshold)
this.smallGraphThreshold == orig(this.smallGraphThreshold)
this.cache == orig(this.cache)
this.cache.data == orig(this.cache.data)
this.cache.data.getClass().getName() == orig(this.cache.data.getClass().getName())
this.cache.delete_prop == orig(this.cache.delete_prop)
this.cache.acesses == orig(this.cache.acesses)
this.cache.misses == orig(this.cache.misses)
this.edgeSelection == orig(this.edgeSelection)
this.edgeSelection.getClass().getName() == orig(this.edgeSelection.getClass().getName())
this.totalWork == orig(this.totalWork)
this.workDone == orig(this.workDone)
BitTutte.line == orig(BitTutte.line)
BitTutte.line[] == orig(BitTutte.line[])
BitTutte.line.getClass().getName() == arg0.datae.visited.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datae.lowlink.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datae.dfsnum.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datae.cstack.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datac.visited.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datac.lowlink.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datac.dfsnum.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datac.cstack.getClass().getName()
BitTutte.line.getClass().getName() == orig(BitTutte.line.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg0.datae.visited.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg0.datae.lowlink.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg0.datae.dfsnum.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg0.datae.cstack.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg0.datac.visited.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg0.datac.lowlink.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg0.datac.dfsnum.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg0.datac.cstack.getClass().getName())
arg0.graph == orig(arg0.graph)
arg0.graph.domainSize == orig(arg0.graph.domainSize)
arg0.graph.edges == orig(arg0.graph.edges)
arg0.graph.numVertices == orig(arg0.graph.numVertices)
arg0.graph.vertices == orig(arg0.graph.vertices)
arg0.graph.vertices[] == orig(arg0.graph.vertices[])
arg0.graph.startVertex == orig(arg0.graph.startVertex)
arg0.nartics == orig(arg0.nartics)
arg0.ncomponents == orig(arg0.ncomponents)
arg0.label == orig(arg0.label)
arg0.datae == orig(arg0.datae)
arg0.datae.vindex == orig(arg0.datae.vindex)
arg0.datae.visited == orig(arg0.datae.visited)
arg0.datae.visited[] == orig(arg0.datae.visited[])
arg0.datae.lowlink == orig(arg0.datae.lowlink)
arg0.datae.lowlink[] == orig(arg0.datae.lowlink[])
arg0.datae.dfsnum == orig(arg0.datae.dfsnum)
arg0.datae.dfsnum[] == orig(arg0.datae.dfsnum[])
arg0.datae.cstack == orig(arg0.datae.cstack)
arg0.datae.cstack[] == orig(arg0.datae.cstack[])
arg0.datac == orig(arg0.datac)
arg0.datac.vindex == orig(arg0.datac.vindex)
arg0.datac.visited == orig(arg0.datac.visited)
arg0.datac.visited[] == orig(arg0.datac.visited[])
arg0.datac.lowlink == orig(arg0.datac.lowlink)
arg0.datac.lowlink[] == orig(arg0.datac.lowlink[])
arg0.datac.dfsnum == orig(arg0.datac.dfsnum)
arg0.datac.dfsnum[] == orig(arg0.datac.dfsnum[])
arg0.datac.cstack == orig(arg0.datac.cstack)
arg0.datac.cstack[] == orig(arg0.datac.cstack[])
size(arg0.graph.edges[]) == orig(size(arg0.graph.edges[]))
this.num_steps >= 1
this.totalWork is a power of 2
arg0.graph != null
arg0.graph.numMultiEdges >= 0
arg0.graph.edges != null
arg0.graph.vertices != null
arg0.graph.vertices[] elements != 0
arg0.graph.vertices[] elements >= -1
arg0.graph.startVertex one of { 0, 1, 2 }
arg0.ncomponents >= 1
arg0.label == null
arg0.datae != null
arg0.datae.vindex == 0
arg0.datae.visited != null
arg0.datae.visited[] == []
arg0.datae.visited[].getClass().getName() == []
arg0.datae.lowlink != null
arg0.datae.lowlink[] == []
arg0.datae.lowlink[].getClass().getName() == []
arg0.datae.dfsnum != null
arg0.datae.dfsnum[] == []
arg0.datae.dfsnum[].getClass().getName() == []
arg0.datae.cstack != null
arg0.datae.cstack[] == []
arg0.datae.cstack[].getClass().getName() == []
arg0.datac != null
arg0.datac.visited != null
arg0.datac.visited[] elements != null
arg0.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg0.datac.lowlink != null
arg0.datac.lowlink[] elements != null
arg0.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.dfsnum != null
arg0.datac.dfsnum[] elements != null
arg0.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.cstack != null
arg0.datac.cstack[] == []
arg0.datac.cstack[].getClass().getName() == []
return >= 0
arg0.graph.numEdges <= orig(arg0.graph.numEdges)
arg0.graph.numMultiEdges <= orig(arg0.graph.numMultiEdges)
===========================================================================
BitTutte.reduce_tree(polynomial.FactorPoly, graph.Graph):::ENTER
BitTutte.line.getClass().getName() == arg1.datae.visited.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datae.lowlink.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datae.dfsnum.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datae.cstack.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datac.visited.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datac.lowlink.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datac.dfsnum.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datac.cstack.getClass().getName()
this.num_steps >= 1
this.num_trees >= 1
this.totalWork is a power of 2
arg0 != null
arg0.xterms != null
arg0.xterms.getClass().getName() == polynomial.YTerms[].class
arg0.xterms[] elements != null
arg0.xterms[].getClass().getName() == [polynomial.YTerms, polynomial.YTerms]
arg0.xterms[].getClass().getName() elements == polynomial.YTerms.class
arg0.xterms[].ymin == [1, 0]
arg0.xterms[].ymin elements one of { 0, 1 }
arg0.xterms[].ymin sorted by >
arg0.xterms[].ymax == [0, 0]
arg0.xterms[].ymax elements == 0
arg0.xterms[].fpadding == [0, 0]
arg0.xterms[].fpadding elements == 0
arg0.xterms[].bpadding == [0, 1]
arg0.xterms[].bpadding elements one of { 0, 1 }
arg0.xterms[].bpadding sorted by <
arg0.xterms[].coefficients.getClass().getName() == [null, java.math.BigInteger[]]
arg0.nxterms == 2
arg1 != null
arg1.graph != null
arg1.graph.numEdges >= 0
arg1.graph.numMultiEdges >= 0
arg1.graph.edges != null
arg1.graph.vertices != null
arg1.graph.vertices[] elements != 0
arg1.graph.vertices[] elements >= -1
arg1.graph.startVertex one of { 0, 1, 2 }
arg1.nartics == 0
arg1.ncomponents == 99
arg1.label == null
arg1.datae != null
arg1.datae.visited != null
arg1.datae.visited[] elements != null
arg1.datae.visited[].getClass().getName() elements == java.lang.Boolean.class
arg1.datae.lowlink != null
arg1.datae.lowlink[] elements != null
arg1.datae.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg1.datae.dfsnum != null
arg1.datae.dfsnum[] elements != null
arg1.datae.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg1.datae.cstack != null
arg1.datae.cstack[] == []
arg1.datae.cstack[].getClass().getName() == []
arg1.datac != null
arg1.datac.visited != null
arg1.datac.visited[] elements != null
arg1.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg1.datac.lowlink != null
arg1.datac.lowlink[] elements != null
arg1.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg1.datac.dfsnum != null
arg1.datac.dfsnum[] elements != null
arg1.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg1.datac.cstack != null
arg1.datac.cstack[] == []
arg1.datac.cstack[].getClass().getName() == []
size(arg0.xterms[]) == 2
this.cache.data.getClass().getName() != arg0.xterms.getClass().getName()
this.edgeSelection.getClass().getName() != arg0.xterms.getClass().getName()
BitTutte.line.getClass().getName() != arg0.xterms.getClass().getName()
===========================================================================
BitTutte.reduce_tree(polynomial.FactorPoly, graph.Graph):::EXIT
this.global_timer == orig(this.global_timer)
this.global_timer.start == orig(this.global_timer.start)
this.global_timer.gtod == orig(this.global_timer.gtod)
this.status_flag == orig(this.status_flag)
this.write_tree == orig(this.write_tree)
this.resize_stats == orig(this.resize_stats)
this.num_steps == orig(this.num_steps)
this.num_bicomps == orig(this.num_bicomps)
this.num_cycles == orig(this.num_cycles)
this.num_disbicomps == orig(this.num_disbicomps)
this.num_trees == orig(this.num_trees)
this.num_completed == orig(this.num_completed)
this.old_num_steps == orig(this.old_num_steps)
this.tree_id == orig(this.tree_id)
this.reduce_multicycles == orig(this.reduce_multicycles)
this.reduce_multiedges == orig(this.reduce_multiedges)
this.use_add_contract == orig(this.use_add_contract)
this.split_threshold == orig(this.split_threshold)
this.smallGraphThreshold == orig(this.smallGraphThreshold)
this.cache == orig(this.cache)
this.cache.data == orig(this.cache.data)
this.cache.data.getClass().getName() == orig(this.cache.data.getClass().getName())
this.cache.delete_prop == orig(this.cache.delete_prop)
this.cache.acesses == orig(this.cache.acesses)
this.cache.misses == orig(this.cache.misses)
this.edgeSelection == orig(this.edgeSelection)
this.edgeSelection.getClass().getName() == orig(this.edgeSelection.getClass().getName())
this.totalWork == orig(this.totalWork)
this.workDone == orig(this.workDone)
BitTutte.line == orig(BitTutte.line)
BitTutte.line[] == orig(BitTutte.line[])
BitTutte.line.getClass().getName() == arg1.datae.visited.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datae.lowlink.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datae.dfsnum.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datae.cstack.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datac.visited.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datac.lowlink.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datac.dfsnum.getClass().getName()
BitTutte.line.getClass().getName() == arg1.datac.cstack.getClass().getName()
BitTutte.line.getClass().getName() == orig(BitTutte.line.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg1.datae.visited.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg1.datae.lowlink.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg1.datae.dfsnum.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg1.datae.cstack.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg1.datac.visited.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg1.datac.lowlink.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg1.datac.dfsnum.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg1.datac.cstack.getClass().getName())
arg0.xterms == orig(arg0.xterms)
arg0.xterms.getClass().getName() == return.xterms.getClass().getName()
arg0.xterms.getClass().getName() == orig(arg0.xterms.getClass().getName())
arg0.xterms[] == orig(arg0.xterms[])
arg0.xterms[].ymin == orig(arg0.xterms[].ymin)
arg0.xterms[].ymax == orig(arg0.xterms[].ymax)
arg0.xterms[].fpadding == orig(arg0.xterms[].fpadding)
arg0.xterms[].bpadding == orig(arg0.xterms[].bpadding)
arg0.xterms[].coefficients == orig(arg0.xterms[].coefficients)
arg0.nxterms == orig(arg0.nxterms)
arg1.graph == orig(arg1.graph)
arg1.graph.numEdges == orig(arg1.graph.numEdges)
arg1.graph.domainSize == orig(arg1.graph.domainSize)
arg1.graph.numMultiEdges == orig(arg1.graph.numMultiEdges)
arg1.graph.edges == orig(arg1.graph.edges)
arg1.graph.edges[] == orig(arg1.graph.edges[])
arg1.graph.numVertices == orig(arg1.graph.numVertices)
arg1.graph.vertices == orig(arg1.graph.vertices)
arg1.graph.vertices[] == orig(arg1.graph.vertices[])
arg1.graph.startVertex == orig(arg1.graph.startVertex)
arg1.nartics == orig(arg1.nartics)
arg1.ncomponents == orig(arg1.ncomponents)
arg1.label == orig(arg1.label)
arg1.datae == orig(arg1.datae)
arg1.datae.vindex == orig(arg1.datae.vindex)
arg1.datae.visited == orig(arg1.datae.visited)
arg1.datae.visited[] == orig(arg1.datae.visited[])
arg1.datae.lowlink == orig(arg1.datae.lowlink)
arg1.datae.lowlink[] == orig(arg1.datae.lowlink[])
arg1.datae.dfsnum == orig(arg1.datae.dfsnum)
arg1.datae.dfsnum[] == orig(arg1.datae.dfsnum[])
arg1.datae.cstack == orig(arg1.datae.cstack)
arg1.datae.cstack[] == orig(arg1.datae.cstack[])
arg1.datac == orig(arg1.datac)
arg1.datac.vindex == orig(arg1.datac.vindex)
arg1.datac.visited == orig(arg1.datac.visited)
arg1.datac.visited[] == orig(arg1.datac.visited[])
arg1.datac.lowlink == orig(arg1.datac.lowlink)
arg1.datac.lowlink[] == orig(arg1.datac.lowlink[])
arg1.datac.dfsnum == orig(arg1.datac.dfsnum)
arg1.datac.dfsnum[] == orig(arg1.datac.dfsnum[])
arg1.datac.cstack == orig(arg1.datac.cstack)
arg1.datac.cstack[] == orig(arg1.datac.cstack[])
this.num_steps >= 1
this.num_trees >= 1
this.totalWork is a power of 2
arg0.xterms != null
arg0.xterms.getClass().getName() == polynomial.YTerms[].class
arg0.xterms[] elements != null
arg0.xterms[].getClass().getName() == [polynomial.YTerms, polynomial.YTerms]
arg0.xterms[].getClass().getName() elements == polynomial.YTerms.class
arg0.xterms[].ymin == [1, 0]
arg0.xterms[].ymin elements one of { 0, 1 }
arg0.xterms[].ymin sorted by >
arg0.xterms[].ymax == [0, 0]
arg0.xterms[].ymax elements == 0
arg0.xterms[].fpadding == [0, 0]
arg0.xterms[].fpadding elements == 0
arg0.xterms[].bpadding == [0, 1]
arg0.xterms[].bpadding elements one of { 0, 1 }
arg0.xterms[].bpadding sorted by <
arg0.xterms[].coefficients.getClass().getName() == [null, java.math.BigInteger[]]
arg0.nxterms == 2
arg1.graph != null
arg1.graph.numEdges >= 0
arg1.graph.numMultiEdges >= 0
arg1.graph.edges != null
arg1.graph.vertices != null
arg1.graph.vertices[] elements != 0
arg1.graph.vertices[] elements >= -1
arg1.graph.startVertex one of { 0, 1, 2 }
arg1.nartics == 0
arg1.ncomponents == 99
arg1.label == null
arg1.datae != null
arg1.datae.visited != null
arg1.datae.visited[] elements != null
arg1.datae.visited[].getClass().getName() elements == java.lang.Boolean.class
arg1.datae.lowlink != null
arg1.datae.lowlink[] elements != null
arg1.datae.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg1.datae.dfsnum != null
arg1.datae.dfsnum[] elements != null
arg1.datae.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg1.datae.cstack != null
arg1.datae.cstack[] == []
arg1.datae.cstack[].getClass().getName() == []
arg1.datac != null
arg1.datac.visited != null
arg1.datac.visited[] elements != null
arg1.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg1.datac.lowlink != null
arg1.datac.lowlink[] elements != null
arg1.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg1.datac.dfsnum != null
arg1.datac.dfsnum[] elements != null
arg1.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg1.datac.cstack != null
arg1.datac.cstack[] == []
arg1.datac.cstack[].getClass().getName() == []
return != null
return.xterms != null
return.xterms[] elements != null
return.xterms[].getClass().getName() elements == polynomial.YTerms.class
return.xterms[].ymin elements one of { 0, 1, 2 }
return.xterms[].ymax elements >= 0
return.xterms[].fpadding elements one of { 0, 1, 2 }
return.xterms[].bpadding elements >= 0
size(arg0.xterms[]) == 2
this.cache.data.getClass().getName() != arg0.xterms.getClass().getName()
this.edgeSelection.getClass().getName() != arg0.xterms.getClass().getName()
BitTutte.line.getClass().getName() != arg0.xterms.getClass().getName()
===========================================================================
BitTutte.tutte(graph.Graph, int):::ENTER
BitTutte.line.getClass().getName() == arg0.datae.visited.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datae.lowlink.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datae.dfsnum.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datae.cstack.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datac.visited.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datac.lowlink.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datac.dfsnum.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datac.cstack.getClass().getName()
this.totalWork is a power of 2
arg0 != null
arg0.graph != null
arg0.graph.numMultiEdges >= 0
arg0.graph.edges != null
arg0.graph.vertices != null
arg0.graph.vertices[] elements != 0
arg0.graph.vertices[] elements >= -1
arg0.graph.startVertex one of { 0, 1, 2 }
arg0.ncomponents >= 1
arg0.label == null
arg0.datae != null
arg0.datae.vindex == 0
arg0.datae.visited != null
arg0.datae.visited[] == []
arg0.datae.visited[].getClass().getName() == []
arg0.datae.lowlink != null
arg0.datae.lowlink[] == []
arg0.datae.lowlink[].getClass().getName() == []
arg0.datae.dfsnum != null
arg0.datae.dfsnum[] == []
arg0.datae.dfsnum[].getClass().getName() == []
arg0.datae.cstack != null
arg0.datae.cstack[] == []
arg0.datae.cstack[].getClass().getName() == []
arg0.datac != null
arg0.datac.visited != null
arg0.datac.visited[] elements != null
arg0.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg0.datac.lowlink != null
arg0.datac.lowlink[] elements != null
arg0.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.dfsnum != null
arg0.datac.dfsnum[] elements != null
arg0.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.cstack != null
arg0.datac.cstack[] == []
arg0.datac.cstack[].getClass().getName() == []
arg1 >= 1
===========================================================================
BitTutte.tutte(graph.Graph, int):::EXIT416
===========================================================================
BitTutte.tutte(graph.Graph, int):::EXIT
this.global_timer == orig(this.global_timer)
this.global_timer.start == orig(this.global_timer.start)
this.global_timer.gtod == orig(this.global_timer.gtod)
this.status_flag == orig(this.status_flag)
this.write_tree == orig(this.write_tree)
this.resize_stats == orig(this.resize_stats)
this.num_disbicomps == orig(this.num_disbicomps)
this.num_completed == orig(this.num_completed)
this.old_num_steps == orig(this.old_num_steps)
this.reduce_multicycles == orig(this.reduce_multicycles)
this.reduce_multiedges == orig(this.reduce_multiedges)
this.use_add_contract == orig(this.use_add_contract)
this.split_threshold == orig(this.split_threshold)
this.smallGraphThreshold == orig(this.smallGraphThreshold)
this.cache == orig(this.cache)
this.cache.data == orig(this.cache.data)
this.cache.data.getClass().getName() == orig(this.cache.data.getClass().getName())
this.cache.delete_prop == orig(this.cache.delete_prop)
this.edgeSelection == orig(this.edgeSelection)
this.edgeSelection.getClass().getName() == orig(this.edgeSelection.getClass().getName())
this.totalWork == orig(this.totalWork)
BitTutte.line == orig(BitTutte.line)
BitTutte.line[] == orig(BitTutte.line[])
BitTutte.line.getClass().getName() == arg0.datae.visited.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datae.lowlink.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datae.dfsnum.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datae.cstack.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datac.visited.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datac.lowlink.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datac.dfsnum.getClass().getName()
BitTutte.line.getClass().getName() == arg0.datac.cstack.getClass().getName()
BitTutte.line.getClass().getName() == orig(BitTutte.line.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg0.datae.visited.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg0.datae.lowlink.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg0.datae.dfsnum.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg0.datae.cstack.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg0.datac.visited.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg0.datac.lowlink.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg0.datac.dfsnum.getClass().getName())
BitTutte.line.getClass().getName() == orig(arg0.datac.cstack.getClass().getName())
arg0.graph == orig(arg0.graph)
arg0.graph.domainSize == orig(arg0.graph.domainSize)
arg0.graph.edges == orig(arg0.graph.edges)
arg0.graph.numVertices == orig(arg0.graph.numVertices)
arg0.graph.vertices == orig(arg0.graph.vertices)
arg0.graph.vertices[] == orig(arg0.graph.vertices[])
arg0.graph.startVertex == orig(arg0.graph.startVertex)
arg0.datae == orig(arg0.datae)
arg0.datae.cstack[] == orig(arg0.datae.cstack[])
arg0.datac == orig(arg0.datac)
arg0.datac.vindex == orig(arg0.datac.vindex)
arg0.datac.visited[] == orig(arg0.datac.visited[])
arg0.datac.cstack[] == orig(arg0.datac.cstack[])
size(arg0.graph.edges[]) == orig(size(arg0.graph.edges[]))
size(arg0.datac.lowlink[]) == orig(size(arg0.datac.lowlink[]))
size(arg0.datac.dfsnum[]) == orig(size(arg0.datac.dfsnum[]))
this.num_steps >= 1
this.totalWork is a power of 2
arg0.graph != null
arg0.graph.numEdges >= 0
arg0.graph.numMultiEdges >= 0
arg0.graph.edges != null
arg0.graph.vertices != null
arg0.graph.vertices[] elements != 0
arg0.graph.vertices[] elements >= -1
arg0.graph.startVertex one of { 0, 1, 2 }
arg0.nartics one of { 0, 1 }
arg0.ncomponents one of { 1, 2, 99 }
arg0.label[] == [0, 268435456, 4, 65, 272631840, 67108872, 129]
arg0.datae != null
arg0.datae.vindex >= 0
arg0.datae.visited != null
arg0.datae.visited[] elements != null
arg0.datae.visited[].getClass().getName() elements == java.lang.Boolean.class
arg0.datae.lowlink != null
arg0.datae.lowlink[] elements != null
arg0.datae.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg0.datae.dfsnum != null
arg0.datae.dfsnum[] elements != null
arg0.datae.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg0.datae.cstack != null
arg0.datae.cstack[] == []
arg0.datae.cstack[].getClass().getName() == []
arg0.datac != null
arg0.datac.visited != null
arg0.datac.visited[] elements != null
arg0.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg0.datac.lowlink != null
arg0.datac.lowlink[] elements != null
arg0.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.dfsnum != null
arg0.datac.dfsnum[] elements != null
arg0.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.cstack != null
arg0.datac.cstack[] == []
arg0.datac.cstack[].getClass().getName() == []
return != null
return.xterms != null
return.xterms.getClass().getName() == polynomial.YTerms[].class
return.xterms[] elements != null
return.xterms[].getClass().getName() elements == polynomial.YTerms.class
return.xterms[].ymin elements >= 0
return.xterms[].ymax elements >= 0
return.xterms[].fpadding elements one of { 0, 1, 2 }
return.xterms[].bpadding elements >= 0
size(arg0.label[]) == 7
size(arg0.datae.visited[])-1 != 0
size(arg0.datae.lowlink[])-1 != 0
size(arg0.datae.dfsnum[])-1 != 0
this.num_steps > orig(this.num_steps)
this.num_bicomps >= orig(this.num_bicomps)
this.num_cycles >= orig(this.num_cycles)
this.num_trees >= orig(this.num_trees)
this.tree_id >= orig(this.tree_id)
this.cache.data.getClass().getName() != return.xterms.getClass().getName()
this.cache.acesses >= orig(this.cache.acesses)
this.cache.misses >= orig(this.cache.misses)
this.edgeSelection.getClass().getName() != return.xterms.getClass().getName()
this.workDone >= orig(this.workDone)
BitTutte.line.getClass().getName() != return.xterms.getClass().getName()
arg0.graph.numEdges <= orig(arg0.graph.numEdges)
arg0.graph.numMultiEdges <= orig(arg0.graph.numMultiEdges)
arg0.nartics <= orig(arg0.nartics)
arg0.ncomponents >= orig(arg0.ncomponents)
arg0.datae.vindex >= orig(arg0.datae.vindex)
size(arg0.datae.visited[]) >= orig(size(arg0.datae.visited[]))
size(arg0.datae.visited[])-1 != orig(size(arg0.datae.visited[]))
size(arg0.datae.visited[])-1 >= orig(size(arg0.datae.visited[]))-1
size(arg0.datae.lowlink[]) >= orig(size(arg0.datae.lowlink[]))
size(arg0.datae.lowlink[])-1 != orig(size(arg0.datae.lowlink[]))
size(arg0.datae.lowlink[])-1 >= orig(size(arg0.datae.lowlink[]))-1
size(arg0.datae.dfsnum[]) >= orig(size(arg0.datae.dfsnum[]))
size(arg0.datae.dfsnum[])-1 != orig(size(arg0.datae.dfsnum[]))
size(arg0.datae.dfsnum[])-1 >= orig(size(arg0.datae.dfsnum[]))-1
===========================================================================
MyTimer:::OBJECT
this.gtod == true
===========================================================================
MyTimer.MyTimer():::EXIT
===========================================================================
MyTimer.MyTimer(boolean):::ENTER
arg0 == true
===========================================================================
MyTimer.MyTimer(boolean):::EXIT
===========================================================================
graph.AdjacencyMatrix$EdgeIterable:::OBJECT
this.vertex >= 0
graph.AdjacencyMatrix.this.numEdges >= 0
graph.AdjacencyMatrix.this.numMultiEdges >= 0
graph.AdjacencyMatrix.this.edges != null
graph.AdjacencyMatrix.this.vertices != null
graph.AdjacencyMatrix.this.vertices[] elements != 0
graph.AdjacencyMatrix.this.vertices[] elements >= -1
graph.AdjacencyMatrix.this.startVertex >= 0
size(graph.AdjacencyMatrix.this.edges[]) >= 2
===========================================================================
graph.AdjacencyMatrix$EdgeIterable.EdgeIterable(graph.AdjacencyMatrix, int):::ENTER
graph.AdjacencyMatrix.this != null
graph.AdjacencyMatrix.this.numEdges >= 0
graph.AdjacencyMatrix.this.numMultiEdges >= 0
graph.AdjacencyMatrix.this.edges != null
graph.AdjacencyMatrix.this.vertices != null
graph.AdjacencyMatrix.this.vertices[] elements != 0
graph.AdjacencyMatrix.this.vertices[] elements >= -1
graph.AdjacencyMatrix.this.startVertex >= 0
arg1 >= 0
===========================================================================
graph.AdjacencyMatrix$EdgeIterable.EdgeIterable(graph.AdjacencyMatrix, int):::EXIT
graph.AdjacencyMatrix.this == orig(graph.AdjacencyMatrix.this)
graph.AdjacencyMatrix.this.numEdges == orig(graph.AdjacencyMatrix.this.numEdges)
graph.AdjacencyMatrix.this.domainSize == orig(graph.AdjacencyMatrix.this.domainSize)
graph.AdjacencyMatrix.this.numMultiEdges == orig(graph.AdjacencyMatrix.this.numMultiEdges)
graph.AdjacencyMatrix.this.edges == orig(graph.AdjacencyMatrix.this.edges)
graph.AdjacencyMatrix.this.edges[] == orig(graph.AdjacencyMatrix.this.edges[])
graph.AdjacencyMatrix.this.numVertices == orig(graph.AdjacencyMatrix.this.numVertices)
graph.AdjacencyMatrix.this.vertices == orig(graph.AdjacencyMatrix.this.vertices)
graph.AdjacencyMatrix.this.vertices[] == orig(graph.AdjacencyMatrix.this.vertices[])
graph.AdjacencyMatrix.this.startVertex == orig(graph.AdjacencyMatrix.this.startVertex)
===========================================================================
graph.AdjacencyMatrix$EdgeIterable.iterator():::ENTER
===========================================================================
graph.AdjacencyMatrix$EdgeIterable.iterator():::EXIT
this.vertex == orig(this.vertex)
graph.AdjacencyMatrix.this == orig(graph.AdjacencyMatrix.this)
graph.AdjacencyMatrix.this.numEdges == orig(graph.AdjacencyMatrix.this.numEdges)
graph.AdjacencyMatrix.this.domainSize == orig(graph.AdjacencyMatrix.this.domainSize)
graph.AdjacencyMatrix.this.numMultiEdges == orig(graph.AdjacencyMatrix.this.numMultiEdges)
graph.AdjacencyMatrix.this.edges == orig(graph.AdjacencyMatrix.this.edges)
graph.AdjacencyMatrix.this.edges[] == orig(graph.AdjacencyMatrix.this.edges[])
graph.AdjacencyMatrix.this.numVertices == orig(graph.AdjacencyMatrix.this.numVertices)
graph.AdjacencyMatrix.this.vertices == orig(graph.AdjacencyMatrix.this.vertices)
graph.AdjacencyMatrix.this.vertices[] == orig(graph.AdjacencyMatrix.this.vertices[])
graph.AdjacencyMatrix.this.startVertex == orig(graph.AdjacencyMatrix.this.startVertex)
return != null
return.getClass().getName() == graph.AdjacencyMatrix$EdgeIterator.class
===========================================================================
graph.AdjacencyMatrix$EdgeIterator:::OBJECT
this.edges != null
this.next.first != null
this.next.first.getClass().getName() == java.lang.Integer.class
this.next.second != null
this.next.second.getClass().getName() == java.lang.Integer.class
this.startBit >= 0
this.currBit >= 0
this.dest >= 0
graph.AdjacencyMatrix.this.numEdges >= 0
graph.AdjacencyMatrix.this.numMultiEdges >= 0
graph.AdjacencyMatrix.this.edges != null
graph.AdjacencyMatrix.this.vertices != null
graph.AdjacencyMatrix.this.vertices[] elements != 0
graph.AdjacencyMatrix.this.vertices[] elements >= -1
graph.AdjacencyMatrix.this.startVertex >= 0
size(this.edges[]) >= 2
size(graph.AdjacencyMatrix.this.edges[]) >= 2
===========================================================================
graph.AdjacencyMatrix$EdgeIterator.EdgeIterator(graph.AdjacencyMatrix, int[], int):::ENTER
graph.AdjacencyMatrix.this != null
graph.AdjacencyMatrix.this.numEdges >= 0
graph.AdjacencyMatrix.this.numMultiEdges >= 0
graph.AdjacencyMatrix.this.edges != null
graph.AdjacencyMatrix.this.vertices != null
graph.AdjacencyMatrix.this.vertices[] elements != 0
graph.AdjacencyMatrix.this.vertices[] elements >= -1
graph.AdjacencyMatrix.this.startVertex >= 0
arg1 != null
arg2 >= 0
===========================================================================
graph.AdjacencyMatrix$EdgeIterator.EdgeIterator(graph.AdjacencyMatrix, int[], int):::EXIT
graph.AdjacencyMatrix.this == orig(graph.AdjacencyMatrix.this)
graph.AdjacencyMatrix.this.numEdges == orig(graph.AdjacencyMatrix.this.numEdges)
graph.AdjacencyMatrix.this.domainSize == orig(graph.AdjacencyMatrix.this.domainSize)
graph.AdjacencyMatrix.this.numMultiEdges == orig(graph.AdjacencyMatrix.this.numMultiEdges)
graph.AdjacencyMatrix.this.edges == orig(graph.AdjacencyMatrix.this.edges)
graph.AdjacencyMatrix.this.edges[] == orig(graph.AdjacencyMatrix.this.edges[])
graph.AdjacencyMatrix.this.numVertices == orig(graph.AdjacencyMatrix.this.numVertices)
graph.AdjacencyMatrix.this.vertices == orig(graph.AdjacencyMatrix.this.vertices)
graph.AdjacencyMatrix.this.vertices[] == orig(graph.AdjacencyMatrix.this.vertices[])
graph.AdjacencyMatrix.this.startVertex == orig(graph.AdjacencyMatrix.this.startVertex)
arg1[] == orig(arg1[])
this.dest >= 1
===========================================================================
graph.AdjacencyMatrix$EdgeIterator.findNextEdge():::ENTER
===========================================================================
graph.AdjacencyMatrix$EdgeIterator.findNextEdge():::EXIT512
this.next == null
===========================================================================
graph.AdjacencyMatrix$EdgeIterator.findNextEdge():::EXIT533
this.next != null
graph.AdjacencyMatrix.this.numEdges >= 1
this.currBit > orig(this.currBit)
this.dest > orig(this.dest)
===========================================================================
graph.AdjacencyMatrix$EdgeIterator.findNextEdge():::EXIT
this.edges == orig(this.edges)
this.edges[] == orig(this.edges[])
this.next.first.getClass().getName() == orig(this.next.first.getClass().getName())
this.next.second.getClass().getName() == orig(this.next.second.getClass().getName())
this.startBit == orig(this.startBit)
this.endBit == orig(this.endBit)
graph.AdjacencyMatrix.this == orig(graph.AdjacencyMatrix.this)
graph.AdjacencyMatrix.this.numEdges == orig(graph.AdjacencyMatrix.this.numEdges)
graph.AdjacencyMatrix.this.domainSize == orig(graph.AdjacencyMatrix.this.domainSize)
graph.AdjacencyMatrix.this.numMultiEdges == orig(graph.AdjacencyMatrix.this.numMultiEdges)
graph.AdjacencyMatrix.this.edges == orig(graph.AdjacencyMatrix.this.edges)
graph.AdjacencyMatrix.this.edges[] == orig(graph.AdjacencyMatrix.this.edges[])
graph.AdjacencyMatrix.this.numVertices == orig(graph.AdjacencyMatrix.this.numVertices)
graph.AdjacencyMatrix.this.vertices == orig(graph.AdjacencyMatrix.this.vertices)
graph.AdjacencyMatrix.this.vertices[] == orig(graph.AdjacencyMatrix.this.vertices[])
graph.AdjacencyMatrix.this.startVertex == orig(graph.AdjacencyMatrix.this.startVertex)
(this.next != null)  ==>  (graph.AdjacencyMatrix.this.numEdges >= 1)
(this.next != null)  ==>  (this.currBit > orig(this.currBit))
(this.next != null)  ==>  (this.dest > orig(this.dest))
(this.next != null)  ==>  (this.dest >= 1)
(this.next != null)  ==>  (this.next.first != null)
(this.next != null)  ==>  (this.next.first.getClass().getName() == java.lang.Integer.class)
(this.next != null)  ==>  (this.next.first.getClass().getName() == orig(this.next.first.getClass().getName()))
(this.next != null)  ==>  (this.next.second != null)
(this.next != null)  ==>  (this.next.second.getClass().getName() == java.lang.Integer.class)
(this.next != null)  ==>  (this.next.second.getClass().getName() == orig(this.next.second.getClass().getName()))
this.dest >= 1
this.currBit >= orig(this.currBit)
this.dest >= orig(this.dest)
===========================================================================
graph.AdjacencyMatrix$EdgeIterator.hasNext():::ENTER
this.dest >= 1
===========================================================================
graph.AdjacencyMatrix$EdgeIterator.hasNext():::EXIT
this.edges == orig(this.edges)
this.edges[] == orig(this.edges[])
this.next == orig(this.next)
this.next.first == orig(this.next.first)
this.next.first.getClass().getName() == orig(this.next.first.getClass().getName())
this.next.second == orig(this.next.second)
this.next.second.getClass().getName() == orig(this.next.second.getClass().getName())
this.startBit == orig(this.startBit)
this.endBit == orig(this.endBit)
this.currBit == orig(this.currBit)
this.dest == orig(this.dest)
graph.AdjacencyMatrix.this == orig(graph.AdjacencyMatrix.this)
graph.AdjacencyMatrix.this.numEdges == orig(graph.AdjacencyMatrix.this.numEdges)
graph.AdjacencyMatrix.this.domainSize == orig(graph.AdjacencyMatrix.this.domainSize)
graph.AdjacencyMatrix.this.numMultiEdges == orig(graph.AdjacencyMatrix.this.numMultiEdges)
graph.AdjacencyMatrix.this.edges == orig(graph.AdjacencyMatrix.this.edges)
graph.AdjacencyMatrix.this.edges[] == orig(graph.AdjacencyMatrix.this.edges[])
graph.AdjacencyMatrix.this.numVertices == orig(graph.AdjacencyMatrix.this.numVertices)
graph.AdjacencyMatrix.this.vertices == orig(graph.AdjacencyMatrix.this.vertices)
graph.AdjacencyMatrix.this.vertices[] == orig(graph.AdjacencyMatrix.this.vertices[])
graph.AdjacencyMatrix.this.startVertex == orig(graph.AdjacencyMatrix.this.startVertex)
(this.next != null)  <==>  (return == true)
(this.next != null)  ==>  (graph.AdjacencyMatrix.this.numEdges >= 1)
(this.next != null)  ==>  (this.dest >= 1)
(this.next != null)  ==>  (this.next.first != null)
(this.next != null)  ==>  (this.next.first.getClass().getName() == java.lang.Integer.class)
(this.next != null)  ==>  (this.next.second != null)
(this.next != null)  ==>  (this.next.second.getClass().getName() == java.lang.Integer.class)
(this.next == null)  <==>  (return == false)
this.dest >= 1
===========================================================================
graph.AdjacencyMatrix$EdgeIterator.hasNext():::EXIT;condition="return == true"
this.next != null
graph.AdjacencyMatrix.this.numEdges >= 1
return == true
===========================================================================
graph.AdjacencyMatrix$EdgeIterator.hasNext():::EXIT;condition="not(return == true)"
this.next == null
return == false
===========================================================================
graph.AdjacencyMatrix$EdgeIterator.next():::ENTER
this.next != null
this.dest >= 1
graph.AdjacencyMatrix.this.numEdges >= 1
===========================================================================
graph.AdjacencyMatrix$EdgeIterator.next():::EXIT
this.edges == orig(this.edges)
this.edges[] == orig(this.edges[])
this.next.first.getClass().getName() == orig(this.next.first.getClass().getName())
this.next.second.getClass().getName() == orig(this.next.second.getClass().getName())
this.startBit == orig(this.startBit)
this.endBit == orig(this.endBit)
graph.AdjacencyMatrix.this == orig(graph.AdjacencyMatrix.this)
graph.AdjacencyMatrix.this.numEdges == orig(graph.AdjacencyMatrix.this.numEdges)
graph.AdjacencyMatrix.this.domainSize == orig(graph.AdjacencyMatrix.this.domainSize)
graph.AdjacencyMatrix.this.numMultiEdges == orig(graph.AdjacencyMatrix.this.numMultiEdges)
graph.AdjacencyMatrix.this.edges == orig(graph.AdjacencyMatrix.this.edges)
graph.AdjacencyMatrix.this.edges[] == orig(graph.AdjacencyMatrix.this.edges[])
graph.AdjacencyMatrix.this.numVertices == orig(graph.AdjacencyMatrix.this.numVertices)
graph.AdjacencyMatrix.this.vertices == orig(graph.AdjacencyMatrix.this.vertices)
graph.AdjacencyMatrix.this.vertices[] == orig(graph.AdjacencyMatrix.this.vertices[])
graph.AdjacencyMatrix.this.startVertex == orig(graph.AdjacencyMatrix.this.startVertex)
this.dest >= 2
graph.AdjacencyMatrix.this.numEdges >= 1
return != null
return.first != null
return.first.getClass().getName() == java.lang.Integer.class
return.second != null
return.second.getClass().getName() == java.lang.Integer.class
this.currBit >= orig(this.currBit)
this.dest >= orig(this.dest)
===========================================================================
graph.AdjacencyMatrix$VertexIterable:::OBJECT
graph.AdjacencyMatrix.this.numEdges >= 0
graph.AdjacencyMatrix.this.numMultiEdges >= 0
graph.AdjacencyMatrix.this.edges != null
graph.AdjacencyMatrix.this.vertices != null
graph.AdjacencyMatrix.this.vertices[] elements != 0
graph.AdjacencyMatrix.this.vertices[] elements >= -1
graph.AdjacencyMatrix.this.startVertex >= 0
size(graph.AdjacencyMatrix.this.edges[]) >= 2
===========================================================================
graph.AdjacencyMatrix$VertexIterable.VertexIterable(graph.AdjacencyMatrix):::ENTER
graph.AdjacencyMatrix.this != null
graph.AdjacencyMatrix.this.numMultiEdges >= 0
graph.AdjacencyMatrix.this.edges != null
graph.AdjacencyMatrix.this.vertices != null
graph.AdjacencyMatrix.this.vertices[] elements != 0
graph.AdjacencyMatrix.this.vertices[] elements >= -1
graph.AdjacencyMatrix.this.startVertex >= 0
===========================================================================
graph.AdjacencyMatrix$VertexIterable.VertexIterable(graph.AdjacencyMatrix):::EXIT
graph.AdjacencyMatrix.this == orig(graph.AdjacencyMatrix.this)
graph.AdjacencyMatrix.this.numEdges == orig(graph.AdjacencyMatrix.this.numEdges)
graph.AdjacencyMatrix.this.domainSize == orig(graph.AdjacencyMatrix.this.domainSize)
graph.AdjacencyMatrix.this.numMultiEdges == orig(graph.AdjacencyMatrix.this.numMultiEdges)
graph.AdjacencyMatrix.this.edges == orig(graph.AdjacencyMatrix.this.edges)
graph.AdjacencyMatrix.this.edges[] == orig(graph.AdjacencyMatrix.this.edges[])
graph.AdjacencyMatrix.this.numVertices == orig(graph.AdjacencyMatrix.this.numVertices)
graph.AdjacencyMatrix.this.vertices == orig(graph.AdjacencyMatrix.this.vertices)
graph.AdjacencyMatrix.this.vertices[] == orig(graph.AdjacencyMatrix.this.vertices[])
graph.AdjacencyMatrix.this.startVertex == orig(graph.AdjacencyMatrix.this.startVertex)
===========================================================================
graph.AdjacencyMatrix$VertexIterable.iterator():::ENTER
===========================================================================
graph.AdjacencyMatrix$VertexIterable.iterator():::EXIT
graph.AdjacencyMatrix.this == orig(graph.AdjacencyMatrix.this)
graph.AdjacencyMatrix.this.numEdges == orig(graph.AdjacencyMatrix.this.numEdges)
graph.AdjacencyMatrix.this.domainSize == orig(graph.AdjacencyMatrix.this.domainSize)
graph.AdjacencyMatrix.this.numMultiEdges == orig(graph.AdjacencyMatrix.this.numMultiEdges)
graph.AdjacencyMatrix.this.edges == orig(graph.AdjacencyMatrix.this.edges)
graph.AdjacencyMatrix.this.edges[] == orig(graph.AdjacencyMatrix.this.edges[])
graph.AdjacencyMatrix.this.numVertices == orig(graph.AdjacencyMatrix.this.numVertices)
graph.AdjacencyMatrix.this.vertices == orig(graph.AdjacencyMatrix.this.vertices)
graph.AdjacencyMatrix.this.vertices[] == orig(graph.AdjacencyMatrix.this.vertices[])
graph.AdjacencyMatrix.this.startVertex == orig(graph.AdjacencyMatrix.this.startVertex)
return != null
return.getClass().getName() == graph.AdjacencyMatrix$VertexIterator.class
===========================================================================
graph.AdjacencyMatrix$VertexIterator:::OBJECT
this.vertices != null
this.vertices[] elements != 0
this.vertices[] elements >= -1
this.nextIndex >= -1
graph.AdjacencyMatrix.this.numEdges >= 0
graph.AdjacencyMatrix.this.numMultiEdges >= 0
graph.AdjacencyMatrix.this.edges != null
graph.AdjacencyMatrix.this.vertices != null
graph.AdjacencyMatrix.this.vertices[] elements != 0
graph.AdjacencyMatrix.this.vertices[] elements >= -1
graph.AdjacencyMatrix.this.startVertex >= 0
size(graph.AdjacencyMatrix.this.edges[]) >= 2
===========================================================================
graph.AdjacencyMatrix$VertexIterator.VertexIterator(graph.AdjacencyMatrix, int[]):::ENTER
graph.AdjacencyMatrix.this != null
graph.AdjacencyMatrix.this.numMultiEdges >= 0
graph.AdjacencyMatrix.this.edges != null
graph.AdjacencyMatrix.this.vertices != null
graph.AdjacencyMatrix.this.vertices[] elements != 0
graph.AdjacencyMatrix.this.vertices[] elements >= -1
graph.AdjacencyMatrix.this.startVertex >= 0
arg1 != null
arg1[] elements != 0
arg1[] elements >= -1
===========================================================================
graph.AdjacencyMatrix$VertexIterator.VertexIterator(graph.AdjacencyMatrix, int[]):::EXIT
graph.AdjacencyMatrix.this == orig(graph.AdjacencyMatrix.this)
graph.AdjacencyMatrix.this.numEdges == orig(graph.AdjacencyMatrix.this.numEdges)
graph.AdjacencyMatrix.this.domainSize == orig(graph.AdjacencyMatrix.this.domainSize)
graph.AdjacencyMatrix.this.numMultiEdges == orig(graph.AdjacencyMatrix.this.numMultiEdges)
graph.AdjacencyMatrix.this.edges == orig(graph.AdjacencyMatrix.this.edges)
graph.AdjacencyMatrix.this.edges[] == orig(graph.AdjacencyMatrix.this.edges[])
graph.AdjacencyMatrix.this.numVertices == orig(graph.AdjacencyMatrix.this.numVertices)
graph.AdjacencyMatrix.this.vertices == orig(graph.AdjacencyMatrix.this.vertices)
graph.AdjacencyMatrix.this.vertices[] == orig(graph.AdjacencyMatrix.this.vertices[])
graph.AdjacencyMatrix.this.startVertex == orig(graph.AdjacencyMatrix.this.startVertex)
arg1[] == orig(arg1[])
this.nextIndex >= 0
arg1[] elements != 0
arg1[] elements >= -1
===========================================================================
graph.AdjacencyMatrix$VertexIterator.hasNext():::ENTER
===========================================================================
graph.AdjacencyMatrix$VertexIterator.hasNext():::EXIT
this.vertices == orig(this.vertices)
this.vertices[] == orig(this.vertices[])
this.nextIndex == orig(this.nextIndex)
graph.AdjacencyMatrix.this == orig(graph.AdjacencyMatrix.this)
graph.AdjacencyMatrix.this.numEdges == orig(graph.AdjacencyMatrix.this.numEdges)
graph.AdjacencyMatrix.this.domainSize == orig(graph.AdjacencyMatrix.this.domainSize)
graph.AdjacencyMatrix.this.numMultiEdges == orig(graph.AdjacencyMatrix.this.numMultiEdges)
graph.AdjacencyMatrix.this.edges == orig(graph.AdjacencyMatrix.this.edges)
graph.AdjacencyMatrix.this.edges[] == orig(graph.AdjacencyMatrix.this.edges[])
graph.AdjacencyMatrix.this.numVertices == orig(graph.AdjacencyMatrix.this.numVertices)
graph.AdjacencyMatrix.this.vertices == orig(graph.AdjacencyMatrix.this.vertices)
graph.AdjacencyMatrix.this.vertices[] == orig(graph.AdjacencyMatrix.this.vertices[])
graph.AdjacencyMatrix.this.startVertex == orig(graph.AdjacencyMatrix.this.startVertex)
(this.nextIndex == -1)  <==>  (return == false)
(this.nextIndex >= 0)  <==>  (return == true)
===========================================================================
graph.AdjacencyMatrix$VertexIterator.hasNext():::EXIT;condition="return == true"
this.nextIndex >= 0
return == true
===========================================================================
graph.AdjacencyMatrix$VertexIterator.hasNext():::EXIT;condition="not(return == true)"
this.nextIndex == -1
return == false
===========================================================================
graph.AdjacencyMatrix$VertexIterator.next():::ENTER
this.nextIndex >= 0
===========================================================================
graph.AdjacencyMatrix$VertexIterator.next():::EXIT
this.vertices == orig(this.vertices)
this.vertices[] == orig(this.vertices[])
graph.AdjacencyMatrix.this == orig(graph.AdjacencyMatrix.this)
graph.AdjacencyMatrix.this.numEdges == orig(graph.AdjacencyMatrix.this.numEdges)
graph.AdjacencyMatrix.this.domainSize == orig(graph.AdjacencyMatrix.this.domainSize)
graph.AdjacencyMatrix.this.numMultiEdges == orig(graph.AdjacencyMatrix.this.numMultiEdges)
graph.AdjacencyMatrix.this.edges == orig(graph.AdjacencyMatrix.this.edges)
graph.AdjacencyMatrix.this.edges[] == orig(graph.AdjacencyMatrix.this.edges[])
graph.AdjacencyMatrix.this.numVertices == orig(graph.AdjacencyMatrix.this.numVertices)
graph.AdjacencyMatrix.this.vertices == orig(graph.AdjacencyMatrix.this.vertices)
graph.AdjacencyMatrix.this.vertices[] == orig(graph.AdjacencyMatrix.this.vertices[])
graph.AdjacencyMatrix.this.startVertex == orig(graph.AdjacencyMatrix.this.startVertex)
this.nextIndex != 0
return != null
this.nextIndex != orig(this.nextIndex)
===========================================================================
graph.AdjacencyMatrix:::CLASS
===========================================================================
graph.AdjacencyMatrix:::OBJECT
this.numEdges >= 0
this.numMultiEdges >= 0
this.edges != null
this.vertices != null
this.vertices[] elements != 0
this.vertices[] elements >= -1
this.startVertex >= 0
size(this.edges[]) >= 2
===========================================================================
graph.AdjacencyMatrix.AdjacencyMatrix(graph.AdjacencyMatrix):::ENTER
arg0 != null
arg0.numMultiEdges >= 0
arg0.edges != null
arg0.vertices != null
arg0.vertices[] elements != 0
arg0.vertices[] elements >= -1
arg0.startVertex one of { 0, 1, 2 }
===========================================================================
graph.AdjacencyMatrix.AdjacencyMatrix(graph.AdjacencyMatrix):::EXIT
arg0.numEdges == orig(arg0.numEdges)
arg0.domainSize == orig(arg0.domainSize)
arg0.numMultiEdges == orig(arg0.numMultiEdges)
arg0.edges == orig(arg0.edges)
arg0.edges[] == orig(arg0.edges[])
arg0.numVertices == orig(arg0.numVertices)
arg0.vertices == orig(arg0.vertices)
arg0.vertices[] == orig(arg0.vertices[])
arg0.startVertex == orig(arg0.startVertex)
this.startVertex one of { 0, 1, 2 }
arg0.numMultiEdges >= 0
arg0.edges != null
arg0.vertices != null
arg0.vertices[] elements != 0
arg0.vertices[] elements >= -1
arg0.startVertex one of { 0, 1, 2 }
===========================================================================
graph.AdjacencyMatrix.AdjacencyMatrix(int):::ENTER
===========================================================================
graph.AdjacencyMatrix.AdjacencyMatrix(int):::EXIT
this.numEdges == 0
this.numMultiEdges == 0
this.edges[] elements == 0
this.startVertex == 0
===========================================================================
graph.AdjacencyMatrix.addEdge(int, int, int):::ENTER
this.startVertex one of { 0, 1, 2 }
arg0 >= 0
arg1 >= 0
arg2 >= 1
===========================================================================
graph.AdjacencyMatrix.addEdge(int, int, int):::EXIT
this.domainSize == orig(this.domainSize)
this.edges == orig(this.edges)
this.numVertices == orig(this.numVertices)
this.vertices == orig(this.vertices)
this.vertices[] == orig(this.vertices[])
this.startVertex == orig(this.startVertex)
size(this.edges[]) == orig(size(this.edges[]))
(return == false)  <==>  (arg2 == orig(arg2))
(return == false)  ==>  (arg2 >= 1)
(return == false)  ==>  (this.numEdges >= 1)
(return == true)  <==>  (arg2 > orig(arg2))
(return == true)  ==>  (orig(arg2) one of { 1, 2 })
(return == true)  ==>  (this.numMultiEdges > orig(this.numMultiEdges))
(return == true)  ==>  (this.numMultiEdges >= 1)
this.numEdges >= 1
this.startVertex one of { 0, 1, 2 }
this.numEdges > orig(this.numEdges)
this.numMultiEdges >= orig(this.numMultiEdges)
===========================================================================
graph.AdjacencyMatrix.addEdge(int, int, int):::EXIT;condition="return == true"
this.numMultiEdges >= 1
return == true
orig(arg2) one of { 1, 2 }
this.numMultiEdges > orig(this.numMultiEdges)
===========================================================================
graph.AdjacencyMatrix.addEdge(int, int, int):::EXIT;condition="not(return == true)"
return == false
===========================================================================
graph.AdjacencyMatrix.clear(int):::ENTER
arg0 >= 0
===========================================================================
graph.AdjacencyMatrix.clear(int):::EXIT261
===========================================================================
graph.AdjacencyMatrix.clear(int):::EXIT
this.domainSize == orig(this.domainSize)
this.edges == orig(this.edges)
this.vertices == orig(this.vertices)
size(this.edges[]) == orig(size(this.edges[]))
size(this.vertices[]) == orig(size(this.vertices[]))
this.numEdges <= orig(this.numEdges)
this.numMultiEdges <= orig(this.numMultiEdges)
this.edges[] <= orig(this.edges[]) (elementwise)
this.numVertices - orig(this.numVertices) + 1 == 0
this.startVertex >= orig(this.startVertex)
===========================================================================
graph.AdjacencyMatrix.contractEdge(int, int):::ENTER
this.startVertex one of { 0, 1, 2 }
arg0 >= 0
arg1 >= 1
===========================================================================
graph.AdjacencyMatrix.contractEdge(int, int):::EXIT
this.numEdges == orig(this.numEdges)
this.domainSize == orig(this.domainSize)
this.edges == orig(this.edges)
this.vertices == orig(this.vertices)
this.startVertex == orig(this.startVertex)
size(this.edges[]) == orig(size(this.edges[]))
size(this.vertices[]) == orig(size(this.vertices[]))
this.startVertex one of { 0, 1, 2 }
this.numMultiEdges >= orig(this.numMultiEdges)
this.numVertices - orig(this.numVertices) + 1 == 0
===========================================================================
graph.AdjacencyMatrix.domainSize():::ENTER
===========================================================================
graph.AdjacencyMatrix.domainSize():::EXIT
this.numEdges == orig(this.numEdges)
this.domainSize == orig(this.domainSize)
this.numMultiEdges == orig(this.numMultiEdges)
this.edges == orig(this.edges)
this.edges[] == orig(this.edges[])
this.numVertices == orig(this.numVertices)
this.vertices == orig(this.vertices)
this.vertices[] == orig(this.vertices[])
this.startVertex == orig(this.startVertex)
===========================================================================
graph.AdjacencyMatrix.edges(int):::ENTER
arg0 >= 0
===========================================================================
graph.AdjacencyMatrix.edges(int):::EXIT
this.numEdges == orig(this.numEdges)
this.domainSize == orig(this.domainSize)
this.numMultiEdges == orig(this.numMultiEdges)
this.edges == orig(this.edges)
this.edges[] == orig(this.edges[])
this.numVertices == orig(this.numVertices)
this.vertices == orig(this.vertices)
this.vertices[] == orig(this.vertices[])
this.startVertex == orig(this.startVertex)
return != null
return.getClass().getName() == graph.AdjacencyMatrix$EdgeIterable.class
===========================================================================
graph.AdjacencyMatrix.hashCode(int[]):::ENTER
this.startVertex one of { 0, 1, 2 }
arg0 != null
===========================================================================
graph.AdjacencyMatrix.hashCode(int[]):::EXIT
this.numEdges == orig(this.numEdges)
this.domainSize == orig(this.domainSize)
this.numMultiEdges == orig(this.numMultiEdges)
this.edges == orig(this.edges)
this.edges[] == orig(this.edges[])
this.numVertices == orig(this.numVertices)
this.vertices == orig(this.vertices)
this.vertices[] == orig(this.vertices[])
this.startVertex == orig(this.startVertex)
arg0[] == orig(arg0[])
this.startVertex one of { 0, 1, 2 }
===========================================================================
graph.AdjacencyMatrix.label(util.Label):::ENTER
this.startVertex one of { 0, 1, 2 }
arg0 != null
arg0.to != null
arg0.to[] elements >= 0
arg0.from != null
arg0.from[] elements >= 0
===========================================================================
graph.AdjacencyMatrix.label(util.Label):::EXIT
this.numEdges == orig(this.numEdges)
this.domainSize == orig(this.domainSize)
this.numMultiEdges == orig(this.numMultiEdges)
this.edges == orig(this.edges)
this.edges[] == orig(this.edges[])
this.numVertices == orig(this.numVertices)
this.vertices == orig(this.vertices)
this.vertices[] == orig(this.vertices[])
this.startVertex == orig(this.startVertex)
arg0.to == orig(arg0.to)
arg0.to[] == orig(arg0.to[])
arg0.from == orig(arg0.from)
arg0.from[] == orig(arg0.from[])
arg0.oldDomain == orig(arg0.oldDomain)
arg0.newDomain == orig(arg0.newDomain)
this.startVertex one of { 0, 1, 2 }
arg0.to != null
arg0.to[] elements >= 0
arg0.from != null
arg0.from[] elements >= 0
return != null
===========================================================================
graph.AdjacencyMatrix.numEdges():::ENTER
this.startVertex one of { 0, 1, 2 }
===========================================================================
graph.AdjacencyMatrix.numEdges():::EXIT
this.numEdges == orig(this.numEdges)
this.domainSize == orig(this.domainSize)
this.numMultiEdges == orig(this.numMultiEdges)
this.edges == orig(this.edges)
this.edges[] == orig(this.edges[])
this.numVertices == orig(this.numVertices)
this.vertices == orig(this.vertices)
this.vertices[] == orig(this.vertices[])
this.startVertex == orig(this.startVertex)
this.startVertex one of { 0, 1, 2 }
return >= 0
===========================================================================
graph.AdjacencyMatrix.numEdges(int):::ENTER
arg0 >= 0
===========================================================================
graph.AdjacencyMatrix.numEdges(int):::EXIT
this.numEdges == orig(this.numEdges)
this.domainSize == orig(this.domainSize)
this.numMultiEdges == orig(this.numMultiEdges)
this.edges == orig(this.edges)
this.edges[] == orig(this.edges[])
this.numVertices == orig(this.numVertices)
this.vertices == orig(this.vertices)
this.vertices[] == orig(this.vertices[])
this.startVertex == orig(this.startVertex)
return >= 0
===========================================================================
graph.AdjacencyMatrix.numEdges(int, int):::ENTER
arg0 >= 0
arg1 >= 0
===========================================================================
graph.AdjacencyMatrix.numEdges(int, int):::EXIT175
===========================================================================
graph.AdjacencyMatrix.numEdges(int, int):::EXIT180
===========================================================================
graph.AdjacencyMatrix.numEdges(int, int):::EXIT
this.numEdges == orig(this.numEdges)
this.domainSize == orig(this.domainSize)
this.numMultiEdges == orig(this.numMultiEdges)
this.edges == orig(this.edges)
this.edges[] == orig(this.edges[])
this.numVertices == orig(this.numVertices)
this.vertices == orig(this.vertices)
this.vertices[] == orig(this.vertices[])
this.startVertex == orig(this.startVertex)
return >= 0
===========================================================================
graph.AdjacencyMatrix.numUnderlyingEdges():::ENTER
===========================================================================
graph.AdjacencyMatrix.numUnderlyingEdges():::EXIT
this.numEdges == orig(this.numEdges)
this.domainSize == orig(this.domainSize)
this.numMultiEdges == orig(this.numMultiEdges)
this.edges == orig(this.edges)
this.edges[] == orig(this.edges[])
this.numVertices == orig(this.numVertices)
this.vertices == orig(this.vertices)
this.vertices[] == orig(this.vertices[])
this.startVertex == orig(this.startVertex)
return >= 0
===========================================================================
graph.AdjacencyMatrix.numUnderlyingEdges(int):::ENTER
this.startVertex one of { 0, 1, 2 }
arg0 >= 0
===========================================================================
graph.AdjacencyMatrix.numUnderlyingEdges(int):::EXIT
this.numEdges == orig(this.numEdges)
this.domainSize == orig(this.domainSize)
this.numMultiEdges == orig(this.numMultiEdges)
this.edges == orig(this.edges)
this.edges[] == orig(this.edges[])
this.numVertices == orig(this.numVertices)
this.vertices == orig(this.vertices)
this.vertices[] == orig(this.vertices[])
this.startVertex == orig(this.startVertex)
this.startVertex one of { 0, 1, 2 }
return one of { 2, 3, 4 }
===========================================================================
graph.AdjacencyMatrix.numVertices():::ENTER
===========================================================================
graph.AdjacencyMatrix.numVertices():::EXIT
this.numEdges == orig(this.numEdges)
this.domainSize == orig(this.domainSize)
this.numMultiEdges == orig(this.numMultiEdges)
this.edges == orig(this.edges)
this.edges[] == orig(this.edges[])
this.numVertices == orig(this.numVertices)
this.vertices == orig(this.vertices)
this.vertices[] == orig(this.vertices[])
this.startVertex == orig(this.startVertex)
===========================================================================
graph.AdjacencyMatrix.remove(graph.AdjacencyMatrix):::ENTER
this.startVertex one of { 0, 1, 2 }
arg0 != null
arg0.numMultiEdges >= 0
arg0.edges != null
arg0.vertices != null
arg0.vertices[] elements != 0
arg0.vertices[] elements >= -1
arg0.startVertex >= 0
===========================================================================
graph.AdjacencyMatrix.remove(graph.AdjacencyMatrix):::EXIT
this.domainSize == orig(this.domainSize)
this.edges == orig(this.edges)
this.numVertices == orig(this.numVertices)
this.vertices == orig(this.vertices)
this.vertices[] == orig(this.vertices[])
this.startVertex == orig(this.startVertex)
arg0.numEdges == orig(arg0.numEdges)
arg0.domainSize == orig(arg0.domainSize)
arg0.numMultiEdges == orig(arg0.numMultiEdges)
arg0.edges == orig(arg0.edges)
arg0.edges[] == orig(arg0.edges[])
arg0.numVertices == orig(arg0.numVertices)
arg0.vertices == orig(arg0.vertices)
arg0.vertices[] == orig(arg0.vertices[])
arg0.startVertex == orig(arg0.startVertex)
size(this.edges[]) == orig(size(this.edges[]))
this.numMultiEdges one of { 0, 1, 2 }
this.edges[] elements >= 0
this.startVertex one of { 0, 1, 2 }
arg0.numMultiEdges >= 0
arg0.edges != null
arg0.vertices != null
arg0.vertices[] elements != 0
arg0.vertices[] elements >= -1
arg0.startVertex >= 0
this.numEdges < orig(this.numEdges)
this.numMultiEdges <= orig(this.numMultiEdges)
===========================================================================
graph.AdjacencyMatrix.removeAllEdges(int, int):::ENTER
this.startVertex one of { 0, 1, 2 }
arg0 >= 0
arg1 >= 0
===========================================================================
graph.AdjacencyMatrix.removeAllEdges(int, int):::EXIT
this.domainSize == orig(this.domainSize)
this.edges == orig(this.edges)
this.numVertices == orig(this.numVertices)
this.vertices == orig(this.vertices)
this.vertices[] == orig(this.vertices[])
this.startVertex == orig(this.startVertex)
size(this.edges[]) == orig(size(this.edges[]))
this.startVertex one of { 0, 1, 2 }
return >= 0
this.numEdges <= orig(this.numEdges)
this.numMultiEdges <= orig(this.numMultiEdges)
===========================================================================
graph.AdjacencyMatrix.removeEdge(int, int, int):::ENTER
this.startVertex one of { 0, 1, 2 }
arg0 >= 0
arg1 >= 0
arg2 >= 1
===========================================================================
graph.AdjacencyMatrix.removeEdge(int, int, int):::EXIT312
this.numEdges == orig(this.numEdges)
this.numMultiEdges == orig(this.numMultiEdges)
this.edges[] == orig(this.edges[])
return == false
===========================================================================
graph.AdjacencyMatrix.removeEdge(int, int, int):::EXIT312;condition="not(return == true)"
===========================================================================
graph.AdjacencyMatrix.removeEdge(int, int, int):::EXIT331
return == true
this.numEdges < orig(this.numEdges)
===========================================================================
graph.AdjacencyMatrix.removeEdge(int, int, int):::EXIT331;condition="return == true"
===========================================================================
graph.AdjacencyMatrix.removeEdge(int, int, int):::EXIT
this.domainSize == orig(this.domainSize)
this.edges == orig(this.edges)
this.numVertices == orig(this.numVertices)
this.vertices == orig(this.vertices)
this.vertices[] == orig(this.vertices[])
this.startVertex == orig(this.startVertex)
size(this.edges[]) == orig(size(this.edges[]))
(return == false)  <==>  (this.numEdges == orig(this.numEdges))
(return == false)  ==>  (this.edges[] == orig(this.edges[]))
(return == false)  ==>  (this.numMultiEdges == orig(this.numMultiEdges))
(return == true)  <==>  (this.numEdges < orig(this.numEdges))
this.startVertex one of { 0, 1, 2 }
this.numEdges <= orig(this.numEdges)
this.numMultiEdges <= orig(this.numMultiEdges)
===========================================================================
graph.AdjacencyMatrix.removeEdge(int, int, int):::EXIT;condition="return == true"
return == true
this.numEdges < orig(this.numEdges)
===========================================================================
graph.AdjacencyMatrix.removeEdge(int, int, int):::EXIT;condition="not(return == true)"
this.numEdges == orig(this.numEdges)
this.numMultiEdges == orig(this.numMultiEdges)
this.edges[] == orig(this.edges[])
return == false
===========================================================================
graph.AdjacencyMatrix.setValue(int, int, int):::ENTER
this.startVertex one of { 0, 1, 2 }
arg0 >= 0
arg1 >= 0
arg2 >= 0
===========================================================================
graph.AdjacencyMatrix.setValue(int, int, int):::EXIT
this.numEdges == orig(this.numEdges)
this.domainSize == orig(this.domainSize)
this.numMultiEdges == orig(this.numMultiEdges)
this.edges == orig(this.edges)
this.numVertices == orig(this.numVertices)
this.vertices == orig(this.vertices)
this.vertices[] == orig(this.vertices[])
this.startVertex == orig(this.startVertex)
size(this.edges[]) == orig(size(this.edges[]))
this.startVertex one of { 0, 1, 2 }
===========================================================================
graph.AdjacencyMatrix.setValue(int, int, int, int, int[]):::ENTER
arg0 >= 0
arg1 >= 0
arg2 >= 0
arg4 != null
===========================================================================
graph.AdjacencyMatrix.setValue(int, int, int, int, int[]):::EXIT
===========================================================================
graph.AdjacencyMatrix.vertices():::ENTER
===========================================================================
graph.AdjacencyMatrix.vertices():::EXIT
this.numEdges == orig(this.numEdges)
this.domainSize == orig(this.domainSize)
this.numMultiEdges == orig(this.numMultiEdges)
this.edges == orig(this.edges)
this.edges[] == orig(this.edges[])
this.numVertices == orig(this.numVertices)
this.vertices == orig(this.vertices)
this.vertices[] == orig(this.vertices[])
this.startVertex == orig(this.startVertex)
return != null
return.getClass().getName() == graph.AdjacencyMatrix$VertexIterable.class
===========================================================================
graph.BCDat:::OBJECT
this.vindex >= 0
this.visited != null
this.visited[] elements != null
this.visited[].getClass().getName() elements == java.lang.Boolean.class
this.visited.getClass().getName() == java.util.ArrayList.class
this.lowlink != null
this.lowlink[] elements != null
this.lowlink[].getClass().getName() elements == java.lang.Integer.class
this.lowlink.getClass().getName() == java.util.ArrayList.class
this.dfsnum != null
this.dfsnum[] elements != null
this.dfsnum[].getClass().getName() elements == java.lang.Integer.class
this.dfsnum.getClass().getName() == java.util.ArrayList.class
this.cstack != null
this.cstack[] == []
this.cstack[].getClass().getName() == []
this.cstack.getClass().getName() == java.util.ArrayList.class
size(this.visited[])-1 != 0
size(this.lowlink[])-1 != 0
size(this.dfsnum[])-1 != 0
===========================================================================
graph.BCDat.BCDat():::EXIT
this.vindex == 0
this.visited[] == []
this.visited[].getClass().getName() == []
this.lowlink[] == []
this.lowlink[].getClass().getName() == []
this.dfsnum[] == []
this.dfsnum[].getClass().getName() == []
===========================================================================
graph.BCDat.reset(int):::ENTER
===========================================================================
graph.BCDat.reset(int):::EXIT
this.visited.getClass().getName() == orig(this.visited.getClass().getName())
this.lowlink.getClass().getName() == orig(this.lowlink.getClass().getName())
this.dfsnum.getClass().getName() == orig(this.dfsnum.getClass().getName())
this.cstack[] == orig(this.cstack[])
this.cstack.getClass().getName() == orig(this.cstack.getClass().getName())
this.vindex == 0
this.visited[] elements has only one value
this.lowlink[] elements has only one value
this.dfsnum[] elements has only one value
this.vindex <= orig(this.vindex)
orig(size(this.visited[])) % size(this.visited[]) == 0
size(this.visited[]) >= orig(size(this.visited[]))
size(this.visited[])-1 != orig(size(this.visited[]))
size(this.visited[])-1 % orig(size(this.visited[]))-1 == 0
size(this.visited[])-1 >= orig(size(this.visited[]))-1
orig(size(this.lowlink[])) % size(this.lowlink[]) == 0
size(this.lowlink[]) >= orig(size(this.lowlink[]))
size(this.lowlink[])-1 != orig(size(this.lowlink[]))
size(this.lowlink[])-1 % orig(size(this.lowlink[]))-1 == 0
size(this.lowlink[])-1 >= orig(size(this.lowlink[]))-1
orig(size(this.dfsnum[])) % size(this.dfsnum[]) == 0
size(this.dfsnum[]) >= orig(size(this.dfsnum[]))
size(this.dfsnum[])-1 != orig(size(this.dfsnum[]))
size(this.dfsnum[])-1 % orig(size(this.dfsnum[]))-1 == 0
size(this.dfsnum[])-1 >= orig(size(this.dfsnum[]))-1
===========================================================================
graph.Graph:::OBJECT
this.graph != null
this.graph.numEdges >= 0
this.graph.numMultiEdges >= 0
this.graph.edges != null
this.graph.vertices != null
this.graph.vertices[] elements != 0
this.graph.vertices[] elements >= -1
this.graph.startVertex >= 0
this.nartics >= 0
this.ncomponents >= 0
this.datae != null
this.datae.vindex >= 0
this.datae.visited != null
this.datae.visited[] elements != null
this.datae.visited[].getClass().getName() elements == java.lang.Boolean.class
this.datae.visited.getClass().getName() == java.util.ArrayList.class
this.datae.lowlink != null
this.datae.lowlink[] elements != null
this.datae.lowlink[].getClass().getName() elements == java.lang.Integer.class
this.datae.lowlink.getClass().getName() == java.util.ArrayList.class
this.datae.dfsnum != null
this.datae.dfsnum[] elements != null
this.datae.dfsnum[].getClass().getName() elements == java.lang.Integer.class
this.datae.dfsnum.getClass().getName() == java.util.ArrayList.class
this.datae.cstack != null
this.datae.cstack[] elements != null
this.datae.cstack[].getClass().getName() elements == util.Triple.class
this.datae.cstack.getClass().getName() == java.util.ArrayList.class
this.datac != null
this.datac.vindex >= 0
this.datac.visited != null
this.datac.visited[] elements != null
this.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
this.datac.visited.getClass().getName() == java.util.ArrayList.class
this.datac.lowlink != null
this.datac.lowlink[] elements != null
this.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
this.datac.lowlink.getClass().getName() == java.util.ArrayList.class
this.datac.dfsnum != null
this.datac.dfsnum[] elements != null
this.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
this.datac.dfsnum.getClass().getName() == java.util.ArrayList.class
this.datac.cstack != null
this.datac.cstack[] == []
this.datac.cstack[].getClass().getName() == []
this.datac.cstack.getClass().getName() == java.util.ArrayList.class
size(this.graph.edges[]) >= 2
size(this.datae.visited[])-1 != 0
size(this.datae.lowlink[])-1 != 0
size(this.datae.dfsnum[])-1 != 0
size(this.datac.visited[])-1 != 0
size(this.datac.lowlink[])-1 != 0
size(this.datac.dfsnum[])-1 != 0
===========================================================================
graph.Graph.Graph(graph.AdjacencyMatrix):::ENTER
arg0 != null
arg0.numMultiEdges >= 0
arg0.edges != null
arg0.vertices != null
arg0.vertices[] elements != 0
arg0.vertices[] elements >= -1
arg0.startVertex one of { 0, 1, 2 }
===========================================================================
graph.Graph.Graph(graph.AdjacencyMatrix):::EXIT
arg0.numEdges == orig(arg0.numEdges)
arg0.domainSize == orig(arg0.domainSize)
arg0.numMultiEdges == orig(arg0.numMultiEdges)
arg0.edges == orig(arg0.edges)
arg0.edges[] == orig(arg0.edges[])
arg0.numVertices == orig(arg0.numVertices)
arg0.vertices == orig(arg0.vertices)
arg0.vertices[] == orig(arg0.vertices[])
arg0.startVertex == orig(arg0.startVertex)
this.graph.startVertex one of { 0, 1, 2 }
this.ncomponents >= 1
this.label == null
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
arg0.numMultiEdges >= 0
arg0.edges != null
arg0.vertices != null
arg0.vertices[] elements != 0
arg0.vertices[] elements >= -1
arg0.startVertex one of { 0, 1, 2 }
===========================================================================
graph.Graph.Graph(graph.Graph):::ENTER
arg0 != null
arg0.graph != null
arg0.graph.numMultiEdges >= 0
arg0.graph.edges != null
arg0.graph.vertices != null
arg0.graph.vertices[] elements != 0
arg0.graph.vertices[] elements >= -1
arg0.graph.startVertex one of { 0, 1, 2 }
arg0.ncomponents >= 1
arg0.datae != null
arg0.datae.vindex == 0
arg0.datae.visited != null
arg0.datae.visited[] == []
arg0.datae.visited[].getClass().getName() == []
arg0.datae.visited.getClass().getName() == java.util.ArrayList.class
arg0.datae.lowlink != null
arg0.datae.lowlink[] == []
arg0.datae.lowlink[].getClass().getName() == []
arg0.datae.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datae.dfsnum != null
arg0.datae.dfsnum[] == []
arg0.datae.dfsnum[].getClass().getName() == []
arg0.datae.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datae.cstack != null
arg0.datae.cstack[] == []
arg0.datae.cstack[].getClass().getName() == []
arg0.datae.cstack.getClass().getName() == java.util.ArrayList.class
arg0.datac != null
arg0.datac.visited != null
arg0.datac.visited[] elements != null
arg0.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg0.datac.visited.getClass().getName() == java.util.ArrayList.class
arg0.datac.lowlink != null
arg0.datac.lowlink[] elements != null
arg0.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datac.dfsnum != null
arg0.datac.dfsnum[] elements != null
arg0.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datac.cstack != null
arg0.datac.cstack[] == []
arg0.datac.cstack[].getClass().getName() == []
arg0.datac.cstack.getClass().getName() == java.util.ArrayList.class
===========================================================================
graph.Graph.Graph(graph.Graph):::EXIT
arg0.graph == orig(arg0.graph)
arg0.graph.numEdges == orig(arg0.graph.numEdges)
arg0.graph.domainSize == orig(arg0.graph.domainSize)
arg0.graph.numMultiEdges == orig(arg0.graph.numMultiEdges)
arg0.graph.edges == orig(arg0.graph.edges)
arg0.graph.edges[] == orig(arg0.graph.edges[])
arg0.graph.numVertices == orig(arg0.graph.numVertices)
arg0.graph.vertices == orig(arg0.graph.vertices)
arg0.graph.vertices[] == orig(arg0.graph.vertices[])
arg0.graph.startVertex == orig(arg0.graph.startVertex)
arg0.nartics == orig(arg0.nartics)
arg0.ncomponents == orig(arg0.ncomponents)
arg0.label == orig(arg0.label)
arg0.label[] == orig(arg0.label[])
arg0.datae == orig(arg0.datae)
arg0.datae.vindex == orig(arg0.datae.vindex)
arg0.datae.visited == orig(arg0.datae.visited)
arg0.datae.visited[] == orig(arg0.datae.visited[])
arg0.datae.visited.getClass().getName() == orig(arg0.datae.visited.getClass().getName())
arg0.datae.lowlink == orig(arg0.datae.lowlink)
arg0.datae.lowlink[] == orig(arg0.datae.lowlink[])
arg0.datae.lowlink.getClass().getName() == orig(arg0.datae.lowlink.getClass().getName())
arg0.datae.dfsnum == orig(arg0.datae.dfsnum)
arg0.datae.dfsnum[] == orig(arg0.datae.dfsnum[])
arg0.datae.dfsnum.getClass().getName() == orig(arg0.datae.dfsnum.getClass().getName())
arg0.datae.cstack == orig(arg0.datae.cstack)
arg0.datae.cstack[] == orig(arg0.datae.cstack[])
arg0.datae.cstack.getClass().getName() == orig(arg0.datae.cstack.getClass().getName())
arg0.datac == orig(arg0.datac)
arg0.datac.vindex == orig(arg0.datac.vindex)
arg0.datac.visited == orig(arg0.datac.visited)
arg0.datac.visited[] == orig(arg0.datac.visited[])
arg0.datac.visited.getClass().getName() == orig(arg0.datac.visited.getClass().getName())
arg0.datac.lowlink == orig(arg0.datac.lowlink)
arg0.datac.lowlink[] == orig(arg0.datac.lowlink[])
arg0.datac.lowlink.getClass().getName() == orig(arg0.datac.lowlink.getClass().getName())
arg0.datac.dfsnum == orig(arg0.datac.dfsnum)
arg0.datac.dfsnum[] == orig(arg0.datac.dfsnum[])
arg0.datac.dfsnum.getClass().getName() == orig(arg0.datac.dfsnum.getClass().getName())
arg0.datac.cstack == orig(arg0.datac.cstack)
arg0.datac.cstack[] == orig(arg0.datac.cstack[])
arg0.datac.cstack.getClass().getName() == orig(arg0.datac.cstack.getClass().getName())
this.graph.startVertex one of { 0, 1, 2 }
this.ncomponents >= 1
this.label == null
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
arg0.graph != null
arg0.graph.numMultiEdges >= 0
arg0.graph.edges != null
arg0.graph.vertices != null
arg0.graph.vertices[] elements != 0
arg0.graph.vertices[] elements >= -1
arg0.graph.startVertex one of { 0, 1, 2 }
arg0.ncomponents >= 1
arg0.datae != null
arg0.datae.vindex == 0
arg0.datae.visited != null
arg0.datae.visited[] == []
arg0.datae.visited[].getClass().getName() == []
arg0.datae.visited.getClass().getName() == java.util.ArrayList.class
arg0.datae.lowlink != null
arg0.datae.lowlink[] == []
arg0.datae.lowlink[].getClass().getName() == []
arg0.datae.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datae.dfsnum != null
arg0.datae.dfsnum[] == []
arg0.datae.dfsnum[].getClass().getName() == []
arg0.datae.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datae.cstack != null
arg0.datae.cstack[] == []
arg0.datae.cstack[].getClass().getName() == []
arg0.datae.cstack.getClass().getName() == java.util.ArrayList.class
arg0.datac != null
arg0.datac.visited != null
arg0.datac.visited[] elements != null
arg0.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg0.datac.visited.getClass().getName() == java.util.ArrayList.class
arg0.datac.lowlink != null
arg0.datac.lowlink[] elements != null
arg0.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datac.dfsnum != null
arg0.datac.dfsnum[] elements != null
arg0.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datac.cstack != null
arg0.datac.cstack[] == []
arg0.datac.cstack[].getClass().getName() == []
arg0.datac.cstack.getClass().getName() == java.util.ArrayList.class
===========================================================================
graph.Graph.Graph(int):::ENTER
===========================================================================
graph.Graph.Graph(int):::EXIT
this.graph.numEdges == 0
this.graph.numMultiEdges == 0
this.graph.edges[] elements == 0
this.graph.startVertex == 0
this.nartics == 0
this.ncomponents == 0
this.label == null
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
this.datac.vindex == 0
this.datac.visited[] == []
this.datac.visited[].getClass().getName() == []
this.datac.lowlink[] == []
this.datac.lowlink[].getClass().getName() == []
this.datac.dfsnum[] == []
this.datac.dfsnum[].getClass().getName() == []
===========================================================================
graph.Graph.addEdge(int, int, int):::ENTER
this.graph.startVertex == 0
this.label == null
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
this.datac.visited[] elements has only one value
arg0 >= 0
arg1 >= 0
arg2 == 1
===========================================================================
graph.Graph.addEdge(int, int, int):::EXIT
this.graph == orig(this.graph)
this.graph.domainSize == orig(this.graph.domainSize)
this.graph.edges == orig(this.graph.edges)
this.graph.numVertices == orig(this.graph.numVertices)
this.graph.vertices == orig(this.graph.vertices)
this.graph.vertices[] == orig(this.graph.vertices[])
this.graph.startVertex == orig(this.graph.startVertex)
this.label == orig(this.label)
this.datae == orig(this.datae)
this.datae.vindex == orig(this.datae.vindex)
this.datae.visited == orig(this.datae.visited)
this.datae.visited[] == orig(this.datae.visited[])
this.datae.visited.getClass().getName() == orig(this.datae.visited.getClass().getName())
this.datae.lowlink == orig(this.datae.lowlink)
this.datae.lowlink[] == orig(this.datae.lowlink[])
this.datae.lowlink.getClass().getName() == orig(this.datae.lowlink.getClass().getName())
this.datae.dfsnum == orig(this.datae.dfsnum)
this.datae.dfsnum[] == orig(this.datae.dfsnum[])
this.datae.dfsnum.getClass().getName() == orig(this.datae.dfsnum.getClass().getName())
this.datae.cstack == orig(this.datae.cstack)
this.datae.cstack[] == orig(this.datae.cstack[])
this.datae.cstack.getClass().getName() == orig(this.datae.cstack.getClass().getName())
this.datac == orig(this.datac)
this.datac.visited.getClass().getName() == orig(this.datac.visited.getClass().getName())
this.datac.lowlink.getClass().getName() == orig(this.datac.lowlink.getClass().getName())
this.datac.dfsnum.getClass().getName() == orig(this.datac.dfsnum.getClass().getName())
this.datac.cstack[] == orig(this.datac.cstack[])
this.datac.cstack.getClass().getName() == orig(this.datac.cstack.getClass().getName())
size(this.graph.edges[]) == orig(size(this.graph.edges[]))
this.graph.numEdges >= 1
this.graph.startVertex == 0
this.ncomponents >= 1
this.label == null
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
this.datac.visited[] elements has only one value
this.graph.numEdges - orig(this.graph.numEdges) - 1 == 0
this.graph.numMultiEdges >= orig(this.graph.numMultiEdges)
orig(this.datac.vindex) % this.datac.vindex == 0
this.datac.vindex >= orig(this.datac.vindex)
orig(size(this.datac.visited[])) % size(this.datac.visited[]) == 0
size(this.datac.visited[]) >= orig(size(this.datac.visited[]))
size(this.datac.visited[])-1 != orig(size(this.datac.visited[]))
size(this.datac.visited[])-1 % orig(size(this.datac.visited[]))-1 == 0
size(this.datac.visited[])-1 >= orig(size(this.datac.visited[]))-1
orig(size(this.datac.lowlink[])) % size(this.datac.lowlink[]) == 0
size(this.datac.lowlink[]) >= orig(size(this.datac.lowlink[]))
size(this.datac.lowlink[])-1 != orig(size(this.datac.lowlink[]))
size(this.datac.lowlink[])-1 % orig(size(this.datac.lowlink[]))-1 == 0
size(this.datac.lowlink[])-1 >= orig(size(this.datac.lowlink[]))-1
orig(size(this.datac.dfsnum[])) % size(this.datac.dfsnum[]) == 0
size(this.datac.dfsnum[]) >= orig(size(this.datac.dfsnum[]))
size(this.datac.dfsnum[])-1 != orig(size(this.datac.dfsnum[]))
size(this.datac.dfsnum[])-1 % orig(size(this.datac.dfsnum[]))-1 == 0
size(this.datac.dfsnum[])-1 >= orig(size(this.datac.dfsnum[]))-1
===========================================================================
graph.Graph.biconnect(int, int, graph.BCDat):::ENTER
this.ncomponents >= 1
this.label == null
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
arg0 >= 0
arg1 >= 0
arg2 != null
arg2.vindex >= 0
arg2.visited != null
arg2.visited[] elements != null
arg2.visited[].getClass().getName() elements == java.lang.Boolean.class
arg2.visited.getClass().getName() == java.util.ArrayList.class
arg2.lowlink != null
arg2.lowlink[] elements != null
arg2.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg2.lowlink.getClass().getName() == java.util.ArrayList.class
arg2.dfsnum != null
arg2.dfsnum[] elements != null
arg2.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg2.dfsnum.getClass().getName() == java.util.ArrayList.class
arg2.cstack != null
arg2.cstack[] == []
arg2.cstack[].getClass().getName() == []
arg2.cstack.getClass().getName() == java.util.ArrayList.class
===========================================================================
graph.Graph.biconnect(int, int, graph.BCDat):::EXIT
this.graph == orig(this.graph)
this.graph.numEdges == orig(this.graph.numEdges)
this.graph.domainSize == orig(this.graph.domainSize)
this.graph.numMultiEdges == orig(this.graph.numMultiEdges)
this.graph.edges == orig(this.graph.edges)
this.graph.edges[] == orig(this.graph.edges[])
this.graph.numVertices == orig(this.graph.numVertices)
this.graph.vertices == orig(this.graph.vertices)
this.graph.vertices[] == orig(this.graph.vertices[])
this.graph.startVertex == orig(this.graph.startVertex)
this.ncomponents == orig(this.ncomponents)
this.label == orig(this.label)
this.datae == orig(this.datae)
this.datae.vindex == orig(this.datae.vindex)
this.datae.visited == orig(this.datae.visited)
this.datae.visited[] == orig(this.datae.visited[])
this.datae.visited.getClass().getName() == orig(this.datae.visited.getClass().getName())
this.datae.lowlink == orig(this.datae.lowlink)
this.datae.lowlink[] == orig(this.datae.lowlink[])
this.datae.lowlink.getClass().getName() == orig(this.datae.lowlink.getClass().getName())
this.datae.dfsnum == orig(this.datae.dfsnum)
this.datae.dfsnum[] == orig(this.datae.dfsnum[])
this.datae.dfsnum.getClass().getName() == orig(this.datae.dfsnum.getClass().getName())
this.datae.cstack == orig(this.datae.cstack)
this.datae.cstack[] == orig(this.datae.cstack[])
this.datae.cstack.getClass().getName() == orig(this.datae.cstack.getClass().getName())
this.datac == orig(this.datac)
this.datac.visited == orig(this.datac.visited)
this.datac.visited.getClass().getName() == orig(this.datac.visited.getClass().getName())
this.datac.lowlink == orig(this.datac.lowlink)
this.datac.lowlink.getClass().getName() == orig(this.datac.lowlink.getClass().getName())
this.datac.dfsnum == orig(this.datac.dfsnum)
this.datac.dfsnum.getClass().getName() == orig(this.datac.dfsnum.getClass().getName())
this.datac.cstack == orig(this.datac.cstack)
this.datac.cstack[] == orig(this.datac.cstack[])
this.datac.cstack.getClass().getName() == orig(this.datac.cstack.getClass().getName())
arg2.visited == orig(arg2.visited)
arg2.visited.getClass().getName() == orig(arg2.visited.getClass().getName())
arg2.lowlink == orig(arg2.lowlink)
arg2.lowlink.getClass().getName() == orig(arg2.lowlink.getClass().getName())
arg2.dfsnum == orig(arg2.dfsnum)
arg2.dfsnum.getClass().getName() == orig(arg2.dfsnum.getClass().getName())
arg2.cstack == orig(arg2.cstack)
arg2.cstack[] == orig(arg2.cstack[])
arg2.cstack.getClass().getName() == orig(arg2.cstack.getClass().getName())
size(this.datac.visited[]) == orig(size(this.datac.visited[]))
size(this.datac.lowlink[]) == orig(size(this.datac.lowlink[]))
size(this.datac.dfsnum[]) == orig(size(this.datac.dfsnum[]))
size(arg2.visited[]) == orig(size(arg2.visited[]))
size(arg2.lowlink[]) == orig(size(arg2.lowlink[]))
size(arg2.dfsnum[]) == orig(size(arg2.dfsnum[]))
this.ncomponents >= 1
this.label == null
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
this.datac.vindex >= 1
arg2.vindex >= 1
arg2.visited != null
arg2.visited[] elements != null
arg2.visited[].getClass().getName() elements == java.lang.Boolean.class
arg2.visited.getClass().getName() == java.util.ArrayList.class
arg2.lowlink != null
arg2.lowlink[] elements != null
arg2.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg2.lowlink.getClass().getName() == java.util.ArrayList.class
arg2.dfsnum != null
arg2.dfsnum[] elements != null
arg2.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg2.dfsnum.getClass().getName() == java.util.ArrayList.class
arg2.cstack != null
arg2.cstack[] == []
arg2.cstack[].getClass().getName() == []
arg2.cstack.getClass().getName() == java.util.ArrayList.class
this.nartics >= orig(this.nartics)
this.datac.vindex > orig(this.datac.vindex)
arg2.vindex > orig(arg2.vindex)
===========================================================================
graph.Graph.checkBiConnectivity():::ENTER
this.label == null
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
===========================================================================
graph.Graph.checkBiConnectivity():::EXIT
this.graph == orig(this.graph)
this.graph.numEdges == orig(this.graph.numEdges)
this.graph.domainSize == orig(this.graph.domainSize)
this.graph.numMultiEdges == orig(this.graph.numMultiEdges)
this.graph.edges == orig(this.graph.edges)
this.graph.edges[] == orig(this.graph.edges[])
this.graph.numVertices == orig(this.graph.numVertices)
this.graph.vertices == orig(this.graph.vertices)
this.graph.vertices[] == orig(this.graph.vertices[])
this.graph.startVertex == orig(this.graph.startVertex)
this.label == orig(this.label)
this.datae == orig(this.datae)
this.datae.vindex == orig(this.datae.vindex)
this.datae.visited == orig(this.datae.visited)
this.datae.visited[] == orig(this.datae.visited[])
this.datae.visited.getClass().getName() == orig(this.datae.visited.getClass().getName())
this.datae.lowlink == orig(this.datae.lowlink)
this.datae.lowlink[] == orig(this.datae.lowlink[])
this.datae.lowlink.getClass().getName() == orig(this.datae.lowlink.getClass().getName())
this.datae.dfsnum == orig(this.datae.dfsnum)
this.datae.dfsnum[] == orig(this.datae.dfsnum[])
this.datae.dfsnum.getClass().getName() == orig(this.datae.dfsnum.getClass().getName())
this.datae.cstack == orig(this.datae.cstack)
this.datae.cstack[] == orig(this.datae.cstack[])
this.datae.cstack.getClass().getName() == orig(this.datae.cstack.getClass().getName())
this.datac == orig(this.datac)
this.datac.visited.getClass().getName() == orig(this.datac.visited.getClass().getName())
this.datac.lowlink.getClass().getName() == orig(this.datac.lowlink.getClass().getName())
this.datac.dfsnum.getClass().getName() == orig(this.datac.dfsnum.getClass().getName())
this.datac.cstack[] == orig(this.datac.cstack[])
this.datac.cstack.getClass().getName() == orig(this.datac.cstack.getClass().getName())
this.ncomponents >= 1
this.label == null
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
orig(size(this.datac.visited[])) % size(this.datac.visited[]) == 0
size(this.datac.visited[]) >= orig(size(this.datac.visited[]))
size(this.datac.visited[])-1 != orig(size(this.datac.visited[]))
size(this.datac.visited[])-1 % orig(size(this.datac.visited[]))-1 == 0
size(this.datac.visited[])-1 >= orig(size(this.datac.visited[]))-1
orig(size(this.datac.lowlink[])) % size(this.datac.lowlink[]) == 0
size(this.datac.lowlink[]) >= orig(size(this.datac.lowlink[]))
size(this.datac.lowlink[])-1 != orig(size(this.datac.lowlink[]))
size(this.datac.lowlink[])-1 % orig(size(this.datac.lowlink[]))-1 == 0
size(this.datac.lowlink[])-1 >= orig(size(this.datac.lowlink[]))-1
orig(size(this.datac.dfsnum[])) % size(this.datac.dfsnum[]) == 0
size(this.datac.dfsnum[]) >= orig(size(this.datac.dfsnum[]))
size(this.datac.dfsnum[])-1 != orig(size(this.datac.dfsnum[]))
size(this.datac.dfsnum[])-1 % orig(size(this.datac.dfsnum[]))-1 == 0
size(this.datac.dfsnum[])-1 >= orig(size(this.datac.dfsnum[]))-1
===========================================================================
graph.Graph.contractEdge(util.Triple):::ENTER
this.graph.startVertex one of { 0, 1, 2 }
this.nartics == 1
this.ncomponents == 1
this.label == null
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
arg0 != null
arg0.first != null
arg0.first.getClass().getName() == java.lang.Integer.class
arg0.second != null
arg0.second.getClass().getName() == java.lang.Integer.class
arg0.third != null
arg0.third.getClass().getName() == java.lang.Integer.class
===========================================================================
graph.Graph.contractEdge(util.Triple):::EXIT
this.graph == orig(this.graph)
this.graph.domainSize == orig(this.graph.domainSize)
this.graph.edges == orig(this.graph.edges)
this.graph.vertices == orig(this.graph.vertices)
this.graph.startVertex == orig(this.graph.startVertex)
this.nartics == orig(this.nartics)
this.ncomponents == orig(this.ncomponents)
this.label == orig(this.label)
this.datae == orig(this.datae)
this.datae.vindex == orig(this.datae.vindex)
this.datae.visited == orig(this.datae.visited)
this.datae.visited[] == orig(this.datae.visited[])
this.datae.visited.getClass().getName() == orig(this.datae.visited.getClass().getName())
this.datae.lowlink == orig(this.datae.lowlink)
this.datae.lowlink[] == orig(this.datae.lowlink[])
this.datae.lowlink.getClass().getName() == orig(this.datae.lowlink.getClass().getName())
this.datae.dfsnum == orig(this.datae.dfsnum)
this.datae.dfsnum[] == orig(this.datae.dfsnum[])
this.datae.dfsnum.getClass().getName() == orig(this.datae.dfsnum.getClass().getName())
this.datae.cstack == orig(this.datae.cstack)
this.datae.cstack[] == orig(this.datae.cstack[])
this.datae.cstack.getClass().getName() == orig(this.datae.cstack.getClass().getName())
this.datac == orig(this.datac)
this.datac.visited.getClass().getName() == orig(this.datac.visited.getClass().getName())
this.datac.lowlink.getClass().getName() == orig(this.datac.lowlink.getClass().getName())
this.datac.dfsnum.getClass().getName() == orig(this.datac.dfsnum.getClass().getName())
this.datac.cstack[] == orig(this.datac.cstack[])
this.datac.cstack.getClass().getName() == orig(this.datac.cstack.getClass().getName())
arg0.first == orig(arg0.first)
arg0.first.getClass().getName() == orig(arg0.first.getClass().getName())
arg0.second == orig(arg0.second)
arg0.second.getClass().getName() == orig(arg0.second.getClass().getName())
arg0.third == orig(arg0.third)
arg0.third.getClass().getName() == orig(arg0.third.getClass().getName())
size(this.graph.edges[]) == orig(size(this.graph.edges[]))
size(this.graph.vertices[]) == orig(size(this.graph.vertices[]))
size(this.datac.visited[]) == orig(size(this.datac.visited[]))
size(this.datac.lowlink[]) == orig(size(this.datac.lowlink[]))
size(this.datac.dfsnum[]) == orig(size(this.datac.dfsnum[]))
this.graph.startVertex one of { 0, 1, 2 }
this.nartics == 1
this.ncomponents == 1
this.label == null
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
arg0.first != null
arg0.first.getClass().getName() == java.lang.Integer.class
arg0.second != null
arg0.second.getClass().getName() == java.lang.Integer.class
arg0.third != null
arg0.third.getClass().getName() == java.lang.Integer.class
this.graph.numEdges < orig(this.graph.numEdges)
this.graph.numMultiEdges >= orig(this.graph.numMultiEdges)
this.graph.numVertices - orig(this.graph.numVertices) + 1 == 0
this.datac.vindex - orig(this.datac.vindex) + 1 == 0
===========================================================================
graph.Graph.domainSize():::ENTER
this.graph.startVertex one of { 0, 1, 2 }
this.nartics >= 1
this.ncomponents one of { 1, 2, 3 }
this.label == null
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
===========================================================================
graph.Graph.domainSize():::EXIT
this.graph == orig(this.graph)
this.graph.numEdges == orig(this.graph.numEdges)
this.graph.domainSize == orig(this.graph.domainSize)
this.graph.numMultiEdges == orig(this.graph.numMultiEdges)
this.graph.edges == orig(this.graph.edges)
this.graph.edges[] == orig(this.graph.edges[])
this.graph.numVertices == orig(this.graph.numVertices)
this.graph.vertices == orig(this.graph.vertices)
this.graph.vertices[] == orig(this.graph.vertices[])
this.graph.startVertex == orig(this.graph.startVertex)
this.nartics == orig(this.nartics)
this.ncomponents == orig(this.ncomponents)
this.label == orig(this.label)
this.datae == orig(this.datae)
this.datae.vindex == orig(this.datae.vindex)
this.datae.visited == orig(this.datae.visited)
this.datae.visited[] == orig(this.datae.visited[])
this.datae.visited.getClass().getName() == orig(this.datae.visited.getClass().getName())
this.datae.lowlink == orig(this.datae.lowlink)
this.datae.lowlink[] == orig(this.datae.lowlink[])
this.datae.lowlink.getClass().getName() == orig(this.datae.lowlink.getClass().getName())
this.datae.dfsnum == orig(this.datae.dfsnum)
this.datae.dfsnum[] == orig(this.datae.dfsnum[])
this.datae.dfsnum.getClass().getName() == orig(this.datae.dfsnum.getClass().getName())
this.datae.cstack == orig(this.datae.cstack)
this.datae.cstack[] == orig(this.datae.cstack[])
this.datae.cstack.getClass().getName() == orig(this.datae.cstack.getClass().getName())
this.datac == orig(this.datac)
this.datac.vindex == orig(this.datac.vindex)
this.datac.visited == orig(this.datac.visited)
this.datac.visited[] == orig(this.datac.visited[])
this.datac.visited.getClass().getName() == orig(this.datac.visited.getClass().getName())
this.datac.lowlink == orig(this.datac.lowlink)
this.datac.lowlink[] == orig(this.datac.lowlink[])
this.datac.lowlink.getClass().getName() == orig(this.datac.lowlink.getClass().getName())
this.datac.dfsnum == orig(this.datac.dfsnum)
this.datac.dfsnum[] == orig(this.datac.dfsnum[])
this.datac.dfsnum.getClass().getName() == orig(this.datac.dfsnum.getClass().getName())
this.datac.cstack == orig(this.datac.cstack)
this.datac.cstack[] == orig(this.datac.cstack[])
this.datac.cstack.getClass().getName() == orig(this.datac.cstack.getClass().getName())
this.graph.startVertex one of { 0, 1, 2 }
this.nartics >= 1
this.ncomponents one of { 1, 2, 3 }
this.label == null
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
===========================================================================
graph.Graph.edges(int):::ENTER
this.nartics one of { 0, 1 }
this.ncomponents one of { 1, 2, 99 }
this.label[] elements >= 0
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
arg0 >= 0
===========================================================================
graph.Graph.edges(int):::EXIT
this.graph == orig(this.graph)
this.graph.numEdges == orig(this.graph.numEdges)
this.graph.domainSize == orig(this.graph.domainSize)
this.graph.numMultiEdges == orig(this.graph.numMultiEdges)
this.graph.edges == orig(this.graph.edges)
this.graph.edges[] == orig(this.graph.edges[])
this.graph.numVertices == orig(this.graph.numVertices)
this.graph.vertices == orig(this.graph.vertices)
this.graph.vertices[] == orig(this.graph.vertices[])
this.graph.startVertex == orig(this.graph.startVertex)
this.nartics == orig(this.nartics)
this.ncomponents == orig(this.ncomponents)
this.label == orig(this.label)
this.label[] == orig(this.label[])
this.datae == orig(this.datae)
this.datae.vindex == orig(this.datae.vindex)
this.datae.visited == orig(this.datae.visited)
this.datae.visited[] == orig(this.datae.visited[])
this.datae.visited.getClass().getName() == orig(this.datae.visited.getClass().getName())
this.datae.lowlink == orig(this.datae.lowlink)
this.datae.lowlink[] == orig(this.datae.lowlink[])
this.datae.lowlink.getClass().getName() == orig(this.datae.lowlink.getClass().getName())
this.datae.dfsnum == orig(this.datae.dfsnum)
this.datae.dfsnum[] == orig(this.datae.dfsnum[])
this.datae.dfsnum.getClass().getName() == orig(this.datae.dfsnum.getClass().getName())
this.datae.cstack == orig(this.datae.cstack)
this.datae.cstack[] == orig(this.datae.cstack[])
this.datae.cstack.getClass().getName() == orig(this.datae.cstack.getClass().getName())
this.datac == orig(this.datac)
this.datac.vindex == orig(this.datac.vindex)
this.datac.visited == orig(this.datac.visited)
this.datac.visited[] == orig(this.datac.visited[])
this.datac.visited.getClass().getName() == orig(this.datac.visited.getClass().getName())
this.datac.lowlink == orig(this.datac.lowlink)
this.datac.lowlink[] == orig(this.datac.lowlink[])
this.datac.lowlink.getClass().getName() == orig(this.datac.lowlink.getClass().getName())
this.datac.dfsnum == orig(this.datac.dfsnum)
this.datac.dfsnum[] == orig(this.datac.dfsnum[])
this.datac.dfsnum.getClass().getName() == orig(this.datac.dfsnum.getClass().getName())
this.datac.cstack == orig(this.datac.cstack)
this.datac.cstack[] == orig(this.datac.cstack[])
this.datac.cstack.getClass().getName() == orig(this.datac.cstack.getClass().getName())
this.nartics one of { 0, 1 }
this.ncomponents one of { 1, 2, 99 }
this.label[] elements >= 0
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
return != null
return.getClass().getName() == graph.AdjacencyMatrix$EdgeIterable.class
===========================================================================
graph.Graph.extractBiconnectedComponents(java.util.List):::ENTER
this.graph.startVertex one of { 0, 1, 2 }
this.ncomponents >= 1
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
arg0 != null
arg0[] == []
arg0[].getClass().getName() == []
arg0.getClass().getName() == java.util.ArrayList.class
===========================================================================
graph.Graph.extractBiconnectedComponents(java.util.List):::EXIT
this.graph == orig(this.graph)
this.graph.numEdges == orig(this.graph.numEdges)
this.graph.domainSize == orig(this.graph.domainSize)
this.graph.numMultiEdges == orig(this.graph.numMultiEdges)
this.graph.edges == orig(this.graph.edges)
this.graph.edges[] == orig(this.graph.edges[])
this.graph.numVertices == orig(this.graph.numVertices)
this.graph.vertices == orig(this.graph.vertices)
this.graph.vertices[] == orig(this.graph.vertices[])
this.graph.startVertex == orig(this.graph.startVertex)
this.nartics == orig(this.nartics)
this.ncomponents == orig(this.ncomponents)
this.label == orig(this.label)
this.label[] == orig(this.label[])
this.datae == orig(this.datae)
this.datae.visited.getClass().getName() == orig(this.datae.visited.getClass().getName())
this.datae.lowlink.getClass().getName() == orig(this.datae.lowlink.getClass().getName())
this.datae.dfsnum.getClass().getName() == orig(this.datae.dfsnum.getClass().getName())
this.datae.cstack[] == orig(this.datae.cstack[])
this.datae.cstack.getClass().getName() == orig(this.datae.cstack.getClass().getName())
this.datac == orig(this.datac)
this.datac.vindex == orig(this.datac.vindex)
this.datac.visited == orig(this.datac.visited)
this.datac.visited[] == orig(this.datac.visited[])
this.datac.visited.getClass().getName() == orig(this.datac.visited.getClass().getName())
this.datac.lowlink == orig(this.datac.lowlink)
this.datac.lowlink[] == orig(this.datac.lowlink[])
this.datac.lowlink.getClass().getName() == orig(this.datac.lowlink.getClass().getName())
this.datac.dfsnum == orig(this.datac.dfsnum)
this.datac.dfsnum[] == orig(this.datac.dfsnum[])
this.datac.dfsnum.getClass().getName() == orig(this.datac.dfsnum.getClass().getName())
this.datac.cstack == orig(this.datac.cstack)
this.datac.cstack[] == orig(this.datac.cstack[])
this.datac.cstack.getClass().getName() == orig(this.datac.cstack.getClass().getName())
this.graph.startVertex one of { 0, 1, 2 }
this.ncomponents >= 1
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
arg0[] elements != null
arg0[].getClass().getName() elements == graph.Graph.class
arg0[].getClass().getName() one of { [], [graph.Graph] }
this.datae.vindex > orig(this.datae.vindex)
size(this.datae.visited[])-1 > orig(size(this.datae.visited[]))
size(this.datae.lowlink[])-1 > orig(size(this.datae.lowlink[]))
size(this.datae.dfsnum[])-1 > orig(size(this.datae.dfsnum[]))
size(arg0[])-1 <= orig(size(arg0[]))
size(arg0[])-1 >= orig(size(arg0[]))-1
===========================================================================
graph.Graph.extract_biconnect(util.Triple, graph.BCDat):::ENTER
this.graph.startVertex one of { 0, 1, 2 }
this.ncomponents >= 1
arg0 != null
arg0.first != null
arg0.first.getClass().getName() == java.lang.Integer.class
arg0.second != null
arg0.second.getClass().getName() == java.lang.Integer.class
arg0.third != null
arg0.third.getClass().getName() == java.lang.Integer.class
arg1 != null
arg1.visited != null
arg1.visited[] elements != null
arg1.visited[].getClass().getName() elements == java.lang.Boolean.class
arg1.visited.getClass().getName() == java.util.ArrayList.class
arg1.lowlink != null
arg1.lowlink[] elements != null
arg1.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg1.lowlink.getClass().getName() == java.util.ArrayList.class
arg1.dfsnum != null
arg1.dfsnum[] elements != null
arg1.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg1.dfsnum.getClass().getName() == java.util.ArrayList.class
arg1.cstack != null
arg1.cstack[] elements != null
arg1.cstack[].getClass().getName() elements == util.Triple.class
arg1.cstack.getClass().getName() == java.util.ArrayList.class
===========================================================================
graph.Graph.extract_biconnect(util.Triple, graph.BCDat):::EXIT
this.graph == orig(this.graph)
this.graph.numEdges == orig(this.graph.numEdges)
this.graph.domainSize == orig(this.graph.domainSize)
this.graph.numMultiEdges == orig(this.graph.numMultiEdges)
this.graph.edges == orig(this.graph.edges)
this.graph.edges[] == orig(this.graph.edges[])
this.graph.numVertices == orig(this.graph.numVertices)
this.graph.vertices == orig(this.graph.vertices)
this.graph.vertices[] == orig(this.graph.vertices[])
this.graph.startVertex == orig(this.graph.startVertex)
this.nartics == orig(this.nartics)
this.ncomponents == orig(this.ncomponents)
this.label == orig(this.label)
this.label[] == orig(this.label[])
this.datae == orig(this.datae)
this.datae.vindex == orig(this.datae.vindex)
this.datae.visited == orig(this.datae.visited)
this.datae.visited[] == orig(this.datae.visited[])
this.datae.visited.getClass().getName() == orig(this.datae.visited.getClass().getName())
this.datae.lowlink == orig(this.datae.lowlink)
this.datae.lowlink[] == orig(this.datae.lowlink[])
this.datae.lowlink.getClass().getName() == orig(this.datae.lowlink.getClass().getName())
this.datae.dfsnum == orig(this.datae.dfsnum)
this.datae.dfsnum[] == orig(this.datae.dfsnum[])
this.datae.dfsnum.getClass().getName() == orig(this.datae.dfsnum.getClass().getName())
this.datae.cstack == orig(this.datae.cstack)
this.datae.cstack.getClass().getName() == orig(this.datae.cstack.getClass().getName())
this.datac == orig(this.datac)
this.datac.vindex == orig(this.datac.vindex)
this.datac.visited == orig(this.datac.visited)
this.datac.visited[] == orig(this.datac.visited[])
this.datac.visited.getClass().getName() == orig(this.datac.visited.getClass().getName())
this.datac.lowlink == orig(this.datac.lowlink)
this.datac.lowlink[] == orig(this.datac.lowlink[])
this.datac.lowlink.getClass().getName() == orig(this.datac.lowlink.getClass().getName())
this.datac.dfsnum == orig(this.datac.dfsnum)
this.datac.dfsnum[] == orig(this.datac.dfsnum[])
this.datac.dfsnum.getClass().getName() == orig(this.datac.dfsnum.getClass().getName())
this.datac.cstack == orig(this.datac.cstack)
this.datac.cstack[] == orig(this.datac.cstack[])
this.datac.cstack.getClass().getName() == orig(this.datac.cstack.getClass().getName())
arg0.first == orig(arg0.first)
arg0.first.getClass().getName() == orig(arg0.first.getClass().getName())
arg0.second == orig(arg0.second)
arg0.second.getClass().getName() == orig(arg0.second.getClass().getName())
arg0.third == orig(arg0.third)
arg0.third.getClass().getName() == orig(arg0.third.getClass().getName())
arg1.vindex == orig(arg1.vindex)
arg1.visited == orig(arg1.visited)
arg1.visited[] == orig(arg1.visited[])
arg1.visited.getClass().getName() == orig(arg1.visited.getClass().getName())
arg1.lowlink == orig(arg1.lowlink)
arg1.lowlink[] == orig(arg1.lowlink[])
arg1.lowlink.getClass().getName() == orig(arg1.lowlink.getClass().getName())
arg1.dfsnum == orig(arg1.dfsnum)
arg1.dfsnum[] == orig(arg1.dfsnum[])
arg1.dfsnum.getClass().getName() == orig(arg1.dfsnum.getClass().getName())
arg1.cstack == orig(arg1.cstack)
arg1.cstack.getClass().getName() == orig(arg1.cstack.getClass().getName())
this.graph.startVertex one of { 0, 1, 2 }
this.ncomponents >= 1
arg0.first != null
arg0.first.getClass().getName() == java.lang.Integer.class
arg0.second != null
arg0.second.getClass().getName() == java.lang.Integer.class
arg0.third != null
arg0.third.getClass().getName() == java.lang.Integer.class
arg1.visited != null
arg1.visited[] elements != null
arg1.visited[].getClass().getName() elements == java.lang.Boolean.class
arg1.visited.getClass().getName() == java.util.ArrayList.class
arg1.lowlink != null
arg1.lowlink[] elements != null
arg1.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg1.lowlink.getClass().getName() == java.util.ArrayList.class
arg1.dfsnum != null
arg1.dfsnum[] elements != null
arg1.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg1.dfsnum.getClass().getName() == java.util.ArrayList.class
arg1.cstack != null
arg1.cstack[] elements != null
arg1.cstack[].getClass().getName() elements == util.Triple.class
arg1.cstack.getClass().getName() == java.util.ArrayList.class
return != null
return.graph != null
return.graph.numMultiEdges >= 0
return.graph.edges != null
return.graph.vertices != null
return.graph.vertices[] elements != 0
return.graph.vertices[] elements >= -1
return.graph.startVertex >= 0
return.nartics == 1
return.ncomponents == 1
return.label == null
return.datae != null
return.datae.vindex == 0
return.datae.visited != null
return.datae.visited[] == []
return.datae.visited[].getClass().getName() == []
return.datae.visited.getClass().getName() == java.util.ArrayList.class
return.datae.lowlink != null
return.datae.lowlink[] == []
return.datae.lowlink[].getClass().getName() == []
return.datae.lowlink.getClass().getName() == java.util.ArrayList.class
return.datae.dfsnum != null
return.datae.dfsnum[] == []
return.datae.dfsnum[].getClass().getName() == []
return.datae.dfsnum.getClass().getName() == java.util.ArrayList.class
return.datae.cstack != null
return.datae.cstack[] == []
return.datae.cstack[].getClass().getName() == []
return.datae.cstack.getClass().getName() == java.util.ArrayList.class
return.datac != null
return.datac.visited != null
return.datac.visited[] elements != null
return.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
return.datac.visited.getClass().getName() == java.util.ArrayList.class
return.datac.lowlink != null
return.datac.lowlink[] elements != null
return.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
return.datac.lowlink.getClass().getName() == java.util.ArrayList.class
return.datac.dfsnum != null
return.datac.dfsnum[] elements != null
return.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
return.datac.dfsnum.getClass().getName() == java.util.ArrayList.class
return.datac.cstack != null
return.datac.cstack[] == []
return.datac.cstack[].getClass().getName() == []
return.datac.cstack.getClass().getName() == java.util.ArrayList.class
size(this.datae.cstack[]) < orig(size(this.datae.cstack[]))-1
size(arg1.cstack[]) < orig(size(arg1.cstack[]))-1
===========================================================================
graph.Graph.extract_biconnects(int, int, java.util.List, graph.BCDat):::ENTER
this.graph.startVertex one of { 0, 1, 2 }
this.ncomponents >= 1
arg0 >= 0
arg1 >= 0
arg2 != null
arg2[] elements != null
arg2[].getClass().getName() elements == graph.Graph.class
arg2[].getClass().getName() one of { [], [graph.Graph] }
arg2.getClass().getName() == java.util.ArrayList.class
arg3 != null
arg3.vindex >= 0
arg3.visited != null
arg3.visited[] elements != null
arg3.visited[].getClass().getName() elements == java.lang.Boolean.class
arg3.visited.getClass().getName() == java.util.ArrayList.class
arg3.lowlink != null
arg3.lowlink[] elements != null
arg3.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg3.lowlink.getClass().getName() == java.util.ArrayList.class
arg3.dfsnum != null
arg3.dfsnum[] elements != null
arg3.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg3.dfsnum.getClass().getName() == java.util.ArrayList.class
arg3.cstack != null
arg3.cstack[] elements != null
arg3.cstack[].getClass().getName() elements == util.Triple.class
arg3.cstack.getClass().getName() == java.util.ArrayList.class
size(arg2[]) one of { 0, 1 }
===========================================================================
graph.Graph.extract_biconnects(int, int, java.util.List, graph.BCDat):::EXIT
this.graph == orig(this.graph)
this.graph.numEdges == orig(this.graph.numEdges)
this.graph.domainSize == orig(this.graph.domainSize)
this.graph.numMultiEdges == orig(this.graph.numMultiEdges)
this.graph.edges == orig(this.graph.edges)
this.graph.edges[] == orig(this.graph.edges[])
this.graph.numVertices == orig(this.graph.numVertices)
this.graph.vertices == orig(this.graph.vertices)
this.graph.vertices[] == orig(this.graph.vertices[])
this.graph.startVertex == orig(this.graph.startVertex)
this.nartics == orig(this.nartics)
this.ncomponents == orig(this.ncomponents)
this.label == orig(this.label)
this.label[] == orig(this.label[])
this.datae == orig(this.datae)
this.datae.visited == orig(this.datae.visited)
this.datae.visited.getClass().getName() == orig(this.datae.visited.getClass().getName())
this.datae.lowlink == orig(this.datae.lowlink)
this.datae.lowlink.getClass().getName() == orig(this.datae.lowlink.getClass().getName())
this.datae.dfsnum == orig(this.datae.dfsnum)
this.datae.dfsnum.getClass().getName() == orig(this.datae.dfsnum.getClass().getName())
this.datae.cstack == orig(this.datae.cstack)
this.datae.cstack.getClass().getName() == orig(this.datae.cstack.getClass().getName())
this.datac == orig(this.datac)
this.datac.vindex == orig(this.datac.vindex)
this.datac.visited == orig(this.datac.visited)
this.datac.visited[] == orig(this.datac.visited[])
this.datac.visited.getClass().getName() == orig(this.datac.visited.getClass().getName())
this.datac.lowlink == orig(this.datac.lowlink)
this.datac.lowlink[] == orig(this.datac.lowlink[])
this.datac.lowlink.getClass().getName() == orig(this.datac.lowlink.getClass().getName())
this.datac.dfsnum == orig(this.datac.dfsnum)
this.datac.dfsnum[] == orig(this.datac.dfsnum[])
this.datac.dfsnum.getClass().getName() == orig(this.datac.dfsnum.getClass().getName())
this.datac.cstack == orig(this.datac.cstack)
this.datac.cstack[] == orig(this.datac.cstack[])
this.datac.cstack.getClass().getName() == orig(this.datac.cstack.getClass().getName())
arg3.visited == orig(arg3.visited)
arg3.visited.getClass().getName() == orig(arg3.visited.getClass().getName())
arg3.lowlink == orig(arg3.lowlink)
arg3.lowlink.getClass().getName() == orig(arg3.lowlink.getClass().getName())
arg3.dfsnum == orig(arg3.dfsnum)
arg3.dfsnum.getClass().getName() == orig(arg3.dfsnum.getClass().getName())
arg3.cstack == orig(arg3.cstack)
arg3.cstack.getClass().getName() == orig(arg3.cstack.getClass().getName())
size(this.datae.visited[]) == orig(size(this.datae.visited[]))
size(this.datae.lowlink[]) == orig(size(this.datae.lowlink[]))
size(this.datae.dfsnum[]) == orig(size(this.datae.dfsnum[]))
size(arg3.visited[]) == orig(size(arg3.visited[]))
size(arg3.lowlink[]) == orig(size(arg3.lowlink[]))
size(arg3.dfsnum[]) == orig(size(arg3.dfsnum[]))
this.graph.startVertex one of { 0, 1, 2 }
this.ncomponents >= 1
arg2[] elements != null
arg2[].getClass().getName() elements == graph.Graph.class
arg2[].getClass().getName() one of { [], [graph.Graph] }
arg3.visited != null
arg3.visited[] elements != null
arg3.visited[].getClass().getName() elements == java.lang.Boolean.class
arg3.visited.getClass().getName() == java.util.ArrayList.class
arg3.lowlink != null
arg3.lowlink[] elements != null
arg3.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg3.lowlink.getClass().getName() == java.util.ArrayList.class
arg3.dfsnum != null
arg3.dfsnum[] elements != null
arg3.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg3.dfsnum.getClass().getName() == java.util.ArrayList.class
arg3.cstack != null
arg3.cstack[] elements != null
arg3.cstack[].getClass().getName() elements == util.Triple.class
arg3.cstack.getClass().getName() == java.util.ArrayList.class
this.datae.vindex > orig(this.datae.vindex)
arg3.vindex > orig(arg3.vindex)
size(this.datae.cstack[]) >= orig(size(this.datae.cstack[]))
size(this.datae.cstack[])-1 >= orig(size(this.datae.cstack[]))-1
size(arg2[])-1 <= orig(size(arg2[]))
size(arg2[])-1 >= orig(size(arg2[]))-1
size(arg3.cstack[]) >= orig(size(arg3.cstack[]))
size(arg3.cstack[])-1 >= orig(size(arg3.cstack[]))-1
===========================================================================
graph.Graph.hashCode():::ENTER
this.graph.startVertex one of { 0, 1, 2 }
this.ncomponents one of { 1, 2, 3 }
this.label == null
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
===========================================================================
graph.Graph.hashCode():::EXIT
this.graph == orig(this.graph)
this.graph.numEdges == orig(this.graph.numEdges)
this.graph.domainSize == orig(this.graph.domainSize)
this.graph.numMultiEdges == orig(this.graph.numMultiEdges)
this.graph.edges == orig(this.graph.edges)
this.graph.edges[] == orig(this.graph.edges[])
this.graph.numVertices == orig(this.graph.numVertices)
this.graph.vertices == orig(this.graph.vertices)
this.graph.vertices[] == orig(this.graph.vertices[])
this.graph.startVertex == orig(this.graph.startVertex)
this.nartics == orig(this.nartics)
this.ncomponents == orig(this.ncomponents)
this.datae == orig(this.datae)
this.datae.vindex == orig(this.datae.vindex)
this.datae.visited == orig(this.datae.visited)
this.datae.visited[] == orig(this.datae.visited[])
this.datae.visited.getClass().getName() == orig(this.datae.visited.getClass().getName())
this.datae.lowlink == orig(this.datae.lowlink)
this.datae.lowlink[] == orig(this.datae.lowlink[])
this.datae.lowlink.getClass().getName() == orig(this.datae.lowlink.getClass().getName())
this.datae.dfsnum == orig(this.datae.dfsnum)
this.datae.dfsnum[] == orig(this.datae.dfsnum[])
this.datae.dfsnum.getClass().getName() == orig(this.datae.dfsnum.getClass().getName())
this.datae.cstack == orig(this.datae.cstack)
this.datae.cstack[] == orig(this.datae.cstack[])
this.datae.cstack.getClass().getName() == orig(this.datae.cstack.getClass().getName())
this.datac == orig(this.datac)
this.datac.vindex == orig(this.datac.vindex)
this.datac.visited == orig(this.datac.visited)
this.datac.visited[] == orig(this.datac.visited[])
this.datac.visited.getClass().getName() == orig(this.datac.visited.getClass().getName())
this.datac.lowlink == orig(this.datac.lowlink)
this.datac.lowlink[] == orig(this.datac.lowlink[])
this.datac.lowlink.getClass().getName() == orig(this.datac.lowlink.getClass().getName())
this.datac.dfsnum == orig(this.datac.dfsnum)
this.datac.dfsnum[] == orig(this.datac.dfsnum[])
this.datac.dfsnum.getClass().getName() == orig(this.datac.dfsnum.getClass().getName())
this.datac.cstack == orig(this.datac.cstack)
this.datac.cstack[] == orig(this.datac.cstack[])
this.datac.cstack.getClass().getName() == orig(this.datac.cstack.getClass().getName())
this.graph.startVertex one of { 0, 1, 2 }
this.ncomponents one of { 1, 2, 3 }
this.label != null
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
===========================================================================
graph.Graph.isBiconnected():::ENTER
this.graph.startVertex one of { 0, 1, 2 }
this.ncomponents >= 1
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
===========================================================================
graph.Graph.isBiconnected():::EXIT
this.graph == orig(this.graph)
this.graph.numEdges == orig(this.graph.numEdges)
this.graph.domainSize == orig(this.graph.domainSize)
this.graph.numMultiEdges == orig(this.graph.numMultiEdges)
this.graph.edges == orig(this.graph.edges)
this.graph.edges[] == orig(this.graph.edges[])
this.graph.numVertices == orig(this.graph.numVertices)
this.graph.vertices == orig(this.graph.vertices)
this.graph.vertices[] == orig(this.graph.vertices[])
this.graph.startVertex == orig(this.graph.startVertex)
this.nartics == orig(this.nartics)
this.ncomponents == orig(this.ncomponents)
this.label == orig(this.label)
this.label[] == orig(this.label[])
this.datae == orig(this.datae)
this.datae.vindex == orig(this.datae.vindex)
this.datae.visited == orig(this.datae.visited)
this.datae.visited[] == orig(this.datae.visited[])
this.datae.visited.getClass().getName() == orig(this.datae.visited.getClass().getName())
this.datae.lowlink == orig(this.datae.lowlink)
this.datae.lowlink[] == orig(this.datae.lowlink[])
this.datae.lowlink.getClass().getName() == orig(this.datae.lowlink.getClass().getName())
this.datae.dfsnum == orig(this.datae.dfsnum)
this.datae.dfsnum[] == orig(this.datae.dfsnum[])
this.datae.dfsnum.getClass().getName() == orig(this.datae.dfsnum.getClass().getName())
this.datae.cstack == orig(this.datae.cstack)
this.datae.cstack[] == orig(this.datae.cstack[])
this.datae.cstack.getClass().getName() == orig(this.datae.cstack.getClass().getName())
this.datac == orig(this.datac)
this.datac.vindex == orig(this.datac.vindex)
this.datac.visited == orig(this.datac.visited)
this.datac.visited[] == orig(this.datac.visited[])
this.datac.visited.getClass().getName() == orig(this.datac.visited.getClass().getName())
this.datac.lowlink == orig(this.datac.lowlink)
this.datac.lowlink[] == orig(this.datac.lowlink[])
this.datac.lowlink.getClass().getName() == orig(this.datac.lowlink.getClass().getName())
this.datac.dfsnum == orig(this.datac.dfsnum)
this.datac.dfsnum[] == orig(this.datac.dfsnum[])
this.datac.dfsnum.getClass().getName() == orig(this.datac.dfsnum.getClass().getName())
this.datac.cstack == orig(this.datac.cstack)
this.datac.cstack[] == orig(this.datac.cstack[])
this.datac.cstack.getClass().getName() == orig(this.datac.cstack.getClass().getName())
(return == true)  ==>  (this.label[] elements >= 0)
(return == true)  ==>  (this.nartics == 1)
(return == true)  ==>  (this.ncomponents == 1)
this.graph.startVertex one of { 0, 1, 2 }
this.ncomponents >= 1
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
===========================================================================
graph.Graph.isBiconnected():::EXIT;condition="return == true"
this.nartics == 1
this.ncomponents == 1
this.label[] elements >= 0
return == true
===========================================================================
graph.Graph.isBiconnected():::EXIT;condition="not(return == true)"
return == false
===========================================================================
graph.Graph.isMulticycle():::ENTER
this.ncomponents >= 1
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
===========================================================================
graph.Graph.isMulticycle():::EXIT
this.graph == orig(this.graph)
this.graph.numEdges == orig(this.graph.numEdges)
this.graph.domainSize == orig(this.graph.domainSize)
this.graph.numMultiEdges == orig(this.graph.numMultiEdges)
this.graph.edges == orig(this.graph.edges)
this.graph.edges[] == orig(this.graph.edges[])
this.graph.numVertices == orig(this.graph.numVertices)
this.graph.vertices == orig(this.graph.vertices)
this.graph.vertices[] == orig(this.graph.vertices[])
this.graph.startVertex == orig(this.graph.startVertex)
this.nartics == orig(this.nartics)
this.ncomponents == orig(this.ncomponents)
this.label == orig(this.label)
this.label[] == orig(this.label[])
this.datae == orig(this.datae)
this.datae.vindex == orig(this.datae.vindex)
this.datae.visited == orig(this.datae.visited)
this.datae.visited[] == orig(this.datae.visited[])
this.datae.visited.getClass().getName() == orig(this.datae.visited.getClass().getName())
this.datae.lowlink == orig(this.datae.lowlink)
this.datae.lowlink[] == orig(this.datae.lowlink[])
this.datae.lowlink.getClass().getName() == orig(this.datae.lowlink.getClass().getName())
this.datae.dfsnum == orig(this.datae.dfsnum)
this.datae.dfsnum[] == orig(this.datae.dfsnum[])
this.datae.dfsnum.getClass().getName() == orig(this.datae.dfsnum.getClass().getName())
this.datae.cstack == orig(this.datae.cstack)
this.datae.cstack[] == orig(this.datae.cstack[])
this.datae.cstack.getClass().getName() == orig(this.datae.cstack.getClass().getName())
this.datac == orig(this.datac)
this.datac.vindex == orig(this.datac.vindex)
this.datac.visited == orig(this.datac.visited)
this.datac.visited[] == orig(this.datac.visited[])
this.datac.visited.getClass().getName() == orig(this.datac.visited.getClass().getName())
this.datac.lowlink == orig(this.datac.lowlink)
this.datac.lowlink[] == orig(this.datac.lowlink[])
this.datac.lowlink.getClass().getName() == orig(this.datac.lowlink.getClass().getName())
this.datac.dfsnum == orig(this.datac.dfsnum)
this.datac.dfsnum[] == orig(this.datac.dfsnum[])
this.datac.dfsnum.getClass().getName() == orig(this.datac.dfsnum.getClass().getName())
this.datac.cstack == orig(this.datac.cstack)
this.datac.cstack[] == orig(this.datac.cstack[])
this.datac.cstack.getClass().getName() == orig(this.datac.cstack.getClass().getName())
(return == false)  ==>  (this.graph.startVertex one of { 0, 1, 2 })
(return == true)  ==>  (size(this.label[]) == 7)
(return == true)  ==>  (this.label[] == [0, 268435456, 4, 65, 272631840, 67108872, 129])
(return == true)  ==>  (this.nartics == 1)
(return == true)  ==>  (this.ncomponents one of { 1, 2 })
this.ncomponents >= 1
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
===========================================================================
graph.Graph.isMulticycle():::EXIT;condition="return == true"
this.nartics == 1
this.ncomponents one of { 1, 2 }
this.label[] == [0, 268435456, 4, 65, 272631840, 67108872, 129]
return == true
size(this.label[]) == 7
===========================================================================
graph.Graph.isMulticycle():::EXIT;condition="not(return == true)"
this.graph.startVertex one of { 0, 1, 2 }
return == false
===========================================================================
graph.Graph.isMultitree():::ENTER
this.graph.startVertex one of { 0, 1, 2 }
this.ncomponents >= 1
this.label == null
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
===========================================================================
graph.Graph.isMultitree():::EXIT
this.graph == orig(this.graph)
this.graph.numEdges == orig(this.graph.numEdges)
this.graph.domainSize == orig(this.graph.domainSize)
this.graph.numMultiEdges == orig(this.graph.numMultiEdges)
this.graph.edges == orig(this.graph.edges)
this.graph.edges[] == orig(this.graph.edges[])
this.graph.numVertices == orig(this.graph.numVertices)
this.graph.vertices == orig(this.graph.vertices)
this.graph.vertices[] == orig(this.graph.vertices[])
this.graph.startVertex == orig(this.graph.startVertex)
this.nartics == orig(this.nartics)
this.ncomponents == orig(this.ncomponents)
this.label == orig(this.label)
this.datae == orig(this.datae)
this.datae.vindex == orig(this.datae.vindex)
this.datae.visited == orig(this.datae.visited)
this.datae.visited[] == orig(this.datae.visited[])
this.datae.visited.getClass().getName() == orig(this.datae.visited.getClass().getName())
this.datae.lowlink == orig(this.datae.lowlink)
this.datae.lowlink[] == orig(this.datae.lowlink[])
this.datae.lowlink.getClass().getName() == orig(this.datae.lowlink.getClass().getName())
this.datae.dfsnum == orig(this.datae.dfsnum)
this.datae.dfsnum[] == orig(this.datae.dfsnum[])
this.datae.dfsnum.getClass().getName() == orig(this.datae.dfsnum.getClass().getName())
this.datae.cstack == orig(this.datae.cstack)
this.datae.cstack[] == orig(this.datae.cstack[])
this.datae.cstack.getClass().getName() == orig(this.datae.cstack.getClass().getName())
this.datac == orig(this.datac)
this.datac.vindex == orig(this.datac.vindex)
this.datac.visited == orig(this.datac.visited)
this.datac.visited[] == orig(this.datac.visited[])
this.datac.visited.getClass().getName() == orig(this.datac.visited.getClass().getName())
this.datac.lowlink == orig(this.datac.lowlink)
this.datac.lowlink[] == orig(this.datac.lowlink[])
this.datac.lowlink.getClass().getName() == orig(this.datac.lowlink.getClass().getName())
this.datac.dfsnum == orig(this.datac.dfsnum)
this.datac.dfsnum[] == orig(this.datac.dfsnum[])
this.datac.dfsnum.getClass().getName() == orig(this.datac.dfsnum.getClass().getName())
this.datac.cstack == orig(this.datac.cstack)
this.datac.cstack[] == orig(this.datac.cstack[])
this.datac.cstack.getClass().getName() == orig(this.datac.cstack.getClass().getName())
(return == false)  ==>  (this.datae.dfsnum[] == [])
(return == false)  ==>  (this.datae.dfsnum[].getClass().getName() == [])
(return == false)  ==>  (this.datae.lowlink[] == [])
(return == false)  ==>  (this.datae.lowlink[].getClass().getName() == [])
(return == false)  ==>  (this.datae.vindex == 0)
(return == false)  ==>  (this.datae.visited[] == [])
(return == false)  ==>  (this.datae.visited[].getClass().getName() == [])
(return == false)  ==>  (this.ncomponents one of { 1, 2, 3 })
(return == true)  ==>  (this.datae.dfsnum[].getClass().getName() elements == java.lang.Integer.class)
(return == true)  ==>  (this.datae.lowlink[].getClass().getName() elements == java.lang.Integer.class)
(return == true)  ==>  (this.datae.visited[].getClass().getName() elements == java.lang.Boolean.class)
(return == true)  ==>  (this.ncomponents >= 2)
this.graph.startVertex one of { 0, 1, 2 }
this.ncomponents >= 1
this.label == null
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
===========================================================================
graph.Graph.isMultitree():::EXIT;condition="return == true"
this.ncomponents >= 2
return == true
===========================================================================
graph.Graph.isMultitree():::EXIT;condition="not(return == true)"
this.ncomponents one of { 1, 2, 3 }
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
return == false
===========================================================================
graph.Graph.label(util.Label):::ENTER
this.graph.startVertex one of { 0, 1, 2 }
this.nartics >= 1
this.ncomponents one of { 1, 2, 3 }
this.label == null
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
arg0 != null
arg0.to != null
arg0.to[] elements >= 0
arg0.from != null
arg0.from[] elements >= 0
===========================================================================
graph.Graph.label(util.Label):::EXIT
this.graph == orig(this.graph)
this.graph.numEdges == orig(this.graph.numEdges)
this.graph.domainSize == orig(this.graph.domainSize)
this.graph.numMultiEdges == orig(this.graph.numMultiEdges)
this.graph.edges == orig(this.graph.edges)
this.graph.edges[] == orig(this.graph.edges[])
this.graph.numVertices == orig(this.graph.numVertices)
this.graph.vertices == orig(this.graph.vertices)
this.graph.vertices[] == orig(this.graph.vertices[])
this.graph.startVertex == orig(this.graph.startVertex)
this.nartics == orig(this.nartics)
this.ncomponents == orig(this.ncomponents)
this.label == orig(this.label)
this.datae == orig(this.datae)
this.datae.vindex == orig(this.datae.vindex)
this.datae.visited == orig(this.datae.visited)
this.datae.visited[] == orig(this.datae.visited[])
this.datae.visited.getClass().getName() == orig(this.datae.visited.getClass().getName())
this.datae.lowlink == orig(this.datae.lowlink)
this.datae.lowlink[] == orig(this.datae.lowlink[])
this.datae.lowlink.getClass().getName() == orig(this.datae.lowlink.getClass().getName())
this.datae.dfsnum == orig(this.datae.dfsnum)
this.datae.dfsnum[] == orig(this.datae.dfsnum[])
this.datae.dfsnum.getClass().getName() == orig(this.datae.dfsnum.getClass().getName())
this.datae.cstack == orig(this.datae.cstack)
this.datae.cstack[] == orig(this.datae.cstack[])
this.datae.cstack.getClass().getName() == orig(this.datae.cstack.getClass().getName())
this.datac == orig(this.datac)
this.datac.vindex == orig(this.datac.vindex)
this.datac.visited == orig(this.datac.visited)
this.datac.visited[] == orig(this.datac.visited[])
this.datac.visited.getClass().getName() == orig(this.datac.visited.getClass().getName())
this.datac.lowlink == orig(this.datac.lowlink)
this.datac.lowlink[] == orig(this.datac.lowlink[])
this.datac.lowlink.getClass().getName() == orig(this.datac.lowlink.getClass().getName())
this.datac.dfsnum == orig(this.datac.dfsnum)
this.datac.dfsnum[] == orig(this.datac.dfsnum[])
this.datac.dfsnum.getClass().getName() == orig(this.datac.dfsnum.getClass().getName())
this.datac.cstack == orig(this.datac.cstack)
this.datac.cstack[] == orig(this.datac.cstack[])
this.datac.cstack.getClass().getName() == orig(this.datac.cstack.getClass().getName())
arg0.to == orig(arg0.to)
arg0.to[] == orig(arg0.to[])
arg0.from == orig(arg0.from)
arg0.from[] == orig(arg0.from[])
arg0.oldDomain == orig(arg0.oldDomain)
arg0.newDomain == orig(arg0.newDomain)
this.graph.startVertex one of { 0, 1, 2 }
this.nartics >= 1
this.ncomponents one of { 1, 2, 3 }
this.label == null
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
arg0.to != null
arg0.to[] elements >= 0
arg0.from != null
arg0.from[] elements >= 0
return != null
===========================================================================
graph.Graph.numEdges():::ENTER
this.graph.startVertex one of { 0, 1, 2 }
this.ncomponents >= 1
this.label[] == [0, 268435456, 4, 65, 272631840, 67108872, 129]
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
size(this.label[]) == 7
===========================================================================
graph.Graph.numEdges():::EXIT
this.graph == orig(this.graph)
this.graph.numEdges == orig(this.graph.numEdges)
this.graph.domainSize == orig(this.graph.domainSize)
this.graph.numMultiEdges == orig(this.graph.numMultiEdges)
this.graph.edges == orig(this.graph.edges)
this.graph.edges[] == orig(this.graph.edges[])
this.graph.numVertices == orig(this.graph.numVertices)
this.graph.vertices == orig(this.graph.vertices)
this.graph.vertices[] == orig(this.graph.vertices[])
this.graph.startVertex == orig(this.graph.startVertex)
this.nartics == orig(this.nartics)
this.ncomponents == orig(this.ncomponents)
this.label == orig(this.label)
this.label[] == orig(this.label[])
this.datae == orig(this.datae)
this.datae.vindex == orig(this.datae.vindex)
this.datae.visited == orig(this.datae.visited)
this.datae.visited[] == orig(this.datae.visited[])
this.datae.visited.getClass().getName() == orig(this.datae.visited.getClass().getName())
this.datae.lowlink == orig(this.datae.lowlink)
this.datae.lowlink[] == orig(this.datae.lowlink[])
this.datae.lowlink.getClass().getName() == orig(this.datae.lowlink.getClass().getName())
this.datae.dfsnum == orig(this.datae.dfsnum)
this.datae.dfsnum[] == orig(this.datae.dfsnum[])
this.datae.dfsnum.getClass().getName() == orig(this.datae.dfsnum.getClass().getName())
this.datae.cstack == orig(this.datae.cstack)
this.datae.cstack[] == orig(this.datae.cstack[])
this.datae.cstack.getClass().getName() == orig(this.datae.cstack.getClass().getName())
this.datac == orig(this.datac)
this.datac.vindex == orig(this.datac.vindex)
this.datac.visited == orig(this.datac.visited)
this.datac.visited[] == orig(this.datac.visited[])
this.datac.visited.getClass().getName() == orig(this.datac.visited.getClass().getName())
this.datac.lowlink == orig(this.datac.lowlink)
this.datac.lowlink[] == orig(this.datac.lowlink[])
this.datac.lowlink.getClass().getName() == orig(this.datac.lowlink.getClass().getName())
this.datac.dfsnum == orig(this.datac.dfsnum)
this.datac.dfsnum[] == orig(this.datac.dfsnum[])
this.datac.dfsnum.getClass().getName() == orig(this.datac.dfsnum.getClass().getName())
this.datac.cstack == orig(this.datac.cstack)
this.datac.cstack[] == orig(this.datac.cstack[])
this.datac.cstack.getClass().getName() == orig(this.datac.cstack.getClass().getName())
this.graph.startVertex one of { 0, 1, 2 }
this.ncomponents >= 1
this.label[] == [0, 268435456, 4, 65, 272631840, 67108872, 129]
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
return >= 0
size(this.label[]) == 7
===========================================================================
graph.Graph.numEdges(int):::ENTER
this.nartics == 0
this.ncomponents == 0
this.label == null
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
this.datac.vindex == 0
this.datac.visited[] == []
this.datac.visited[].getClass().getName() == []
this.datac.lowlink[] == []
this.datac.lowlink[].getClass().getName() == []
this.datac.dfsnum[] == []
this.datac.dfsnum[].getClass().getName() == []
arg0 >= 0
===========================================================================
graph.Graph.numEdges(int):::EXIT
this.graph == orig(this.graph)
this.graph.numEdges == orig(this.graph.numEdges)
this.graph.domainSize == orig(this.graph.domainSize)
this.graph.numMultiEdges == orig(this.graph.numMultiEdges)
this.graph.edges == orig(this.graph.edges)
this.graph.edges[] == orig(this.graph.edges[])
this.graph.numVertices == orig(this.graph.numVertices)
this.graph.vertices == orig(this.graph.vertices)
this.graph.vertices[] == orig(this.graph.vertices[])
this.graph.startVertex == orig(this.graph.startVertex)
this.nartics == orig(this.nartics)
this.ncomponents == orig(this.ncomponents)
this.label == orig(this.label)
this.datae == orig(this.datae)
this.datae.vindex == orig(this.datae.vindex)
this.datae.visited == orig(this.datae.visited)
this.datae.visited[] == orig(this.datae.visited[])
this.datae.visited.getClass().getName() == orig(this.datae.visited.getClass().getName())
this.datae.lowlink == orig(this.datae.lowlink)
this.datae.lowlink[] == orig(this.datae.lowlink[])
this.datae.lowlink.getClass().getName() == orig(this.datae.lowlink.getClass().getName())
this.datae.dfsnum == orig(this.datae.dfsnum)
this.datae.dfsnum[] == orig(this.datae.dfsnum[])
this.datae.dfsnum.getClass().getName() == orig(this.datae.dfsnum.getClass().getName())
this.datae.cstack == orig(this.datae.cstack)
this.datae.cstack[] == orig(this.datae.cstack[])
this.datae.cstack.getClass().getName() == orig(this.datae.cstack.getClass().getName())
this.datac == orig(this.datac)
this.datac.vindex == orig(this.datac.vindex)
this.datac.visited == orig(this.datac.visited)
this.datac.visited[] == orig(this.datac.visited[])
this.datac.visited.getClass().getName() == orig(this.datac.visited.getClass().getName())
this.datac.lowlink == orig(this.datac.lowlink)
this.datac.lowlink[] == orig(this.datac.lowlink[])
this.datac.lowlink.getClass().getName() == orig(this.datac.lowlink.getClass().getName())
this.datac.dfsnum == orig(this.datac.dfsnum)
this.datac.dfsnum[] == orig(this.datac.dfsnum[])
this.datac.dfsnum.getClass().getName() == orig(this.datac.dfsnum.getClass().getName())
this.datac.cstack == orig(this.datac.cstack)
this.datac.cstack[] == orig(this.datac.cstack[])
this.datac.cstack.getClass().getName() == orig(this.datac.cstack.getClass().getName())
this.nartics == 0
this.ncomponents == 0
this.label == null
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
this.datac.vindex == 0
this.datac.visited[] == []
this.datac.visited[].getClass().getName() == []
this.datac.lowlink[] == []
this.datac.lowlink[].getClass().getName() == []
this.datac.dfsnum[] == []
this.datac.dfsnum[].getClass().getName() == []
return >= 0
===========================================================================
graph.Graph.numEdges(int, int):::ENTER
this.graph.startVertex one of { 0, 1, 2 }
this.nartics >= 1
this.ncomponents one of { 1, 2, 3 }
this.label == null
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
arg0 >= 0
arg1 >= 0
===========================================================================
graph.Graph.numEdges(int, int):::EXIT
this.graph == orig(this.graph)
this.graph.numEdges == orig(this.graph.numEdges)
this.graph.domainSize == orig(this.graph.domainSize)
this.graph.numMultiEdges == orig(this.graph.numMultiEdges)
this.graph.edges == orig(this.graph.edges)
this.graph.edges[] == orig(this.graph.edges[])
this.graph.numVertices == orig(this.graph.numVertices)
this.graph.vertices == orig(this.graph.vertices)
this.graph.vertices[] == orig(this.graph.vertices[])
this.graph.startVertex == orig(this.graph.startVertex)
this.nartics == orig(this.nartics)
this.ncomponents == orig(this.ncomponents)
this.label == orig(this.label)
this.datae == orig(this.datae)
this.datae.vindex == orig(this.datae.vindex)
this.datae.visited == orig(this.datae.visited)
this.datae.visited[] == orig(this.datae.visited[])
this.datae.visited.getClass().getName() == orig(this.datae.visited.getClass().getName())
this.datae.lowlink == orig(this.datae.lowlink)
this.datae.lowlink[] == orig(this.datae.lowlink[])
this.datae.lowlink.getClass().getName() == orig(this.datae.lowlink.getClass().getName())
this.datae.dfsnum == orig(this.datae.dfsnum)
this.datae.dfsnum[] == orig(this.datae.dfsnum[])
this.datae.dfsnum.getClass().getName() == orig(this.datae.dfsnum.getClass().getName())
this.datae.cstack == orig(this.datae.cstack)
this.datae.cstack[] == orig(this.datae.cstack[])
this.datae.cstack.getClass().getName() == orig(this.datae.cstack.getClass().getName())
this.datac == orig(this.datac)
this.datac.vindex == orig(this.datac.vindex)
this.datac.visited == orig(this.datac.visited)
this.datac.visited[] == orig(this.datac.visited[])
this.datac.visited.getClass().getName() == orig(this.datac.visited.getClass().getName())
this.datac.lowlink == orig(this.datac.lowlink)
this.datac.lowlink[] == orig(this.datac.lowlink[])
this.datac.lowlink.getClass().getName() == orig(this.datac.lowlink.getClass().getName())
this.datac.dfsnum == orig(this.datac.dfsnum)
this.datac.dfsnum[] == orig(this.datac.dfsnum[])
this.datac.dfsnum.getClass().getName() == orig(this.datac.dfsnum.getClass().getName())
this.datac.cstack == orig(this.datac.cstack)
this.datac.cstack[] == orig(this.datac.cstack[])
this.datac.cstack.getClass().getName() == orig(this.datac.cstack.getClass().getName())
this.graph.startVertex one of { 0, 1, 2 }
this.nartics >= 1
this.ncomponents one of { 1, 2, 3 }
this.label == null
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
return >= 0
===========================================================================
graph.Graph.numUnderlyingEdges(int):::ENTER
this.graph.startVertex one of { 0, 1, 2 }
this.nartics == 1
this.ncomponents == 1
this.label[] elements >= 0
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
arg0 >= 0
===========================================================================
graph.Graph.numUnderlyingEdges(int):::EXIT
this.graph == orig(this.graph)
this.graph.numEdges == orig(this.graph.numEdges)
this.graph.domainSize == orig(this.graph.domainSize)
this.graph.numMultiEdges == orig(this.graph.numMultiEdges)
this.graph.edges == orig(this.graph.edges)
this.graph.edges[] == orig(this.graph.edges[])
this.graph.numVertices == orig(this.graph.numVertices)
this.graph.vertices == orig(this.graph.vertices)
this.graph.vertices[] == orig(this.graph.vertices[])
this.graph.startVertex == orig(this.graph.startVertex)
this.nartics == orig(this.nartics)
this.ncomponents == orig(this.ncomponents)
this.label == orig(this.label)
this.label[] == orig(this.label[])
this.datae == orig(this.datae)
this.datae.vindex == orig(this.datae.vindex)
this.datae.visited == orig(this.datae.visited)
this.datae.visited[] == orig(this.datae.visited[])
this.datae.visited.getClass().getName() == orig(this.datae.visited.getClass().getName())
this.datae.lowlink == orig(this.datae.lowlink)
this.datae.lowlink[] == orig(this.datae.lowlink[])
this.datae.lowlink.getClass().getName() == orig(this.datae.lowlink.getClass().getName())
this.datae.dfsnum == orig(this.datae.dfsnum)
this.datae.dfsnum[] == orig(this.datae.dfsnum[])
this.datae.dfsnum.getClass().getName() == orig(this.datae.dfsnum.getClass().getName())
this.datae.cstack == orig(this.datae.cstack)
this.datae.cstack[] == orig(this.datae.cstack[])
this.datae.cstack.getClass().getName() == orig(this.datae.cstack.getClass().getName())
this.datac == orig(this.datac)
this.datac.vindex == orig(this.datac.vindex)
this.datac.visited == orig(this.datac.visited)
this.datac.visited[] == orig(this.datac.visited[])
this.datac.visited.getClass().getName() == orig(this.datac.visited.getClass().getName())
this.datac.lowlink == orig(this.datac.lowlink)
this.datac.lowlink[] == orig(this.datac.lowlink[])
this.datac.lowlink.getClass().getName() == orig(this.datac.lowlink.getClass().getName())
this.datac.dfsnum == orig(this.datac.dfsnum)
this.datac.dfsnum[] == orig(this.datac.dfsnum[])
this.datac.dfsnum.getClass().getName() == orig(this.datac.dfsnum.getClass().getName())
this.datac.cstack == orig(this.datac.cstack)
this.datac.cstack[] == orig(this.datac.cstack[])
this.datac.cstack.getClass().getName() == orig(this.datac.cstack.getClass().getName())
this.graph.startVertex one of { 0, 1, 2 }
this.nartics == 1
this.ncomponents == 1
this.label[] elements >= 0
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
return one of { 2, 3, 4 }
===========================================================================
graph.Graph.numVertices():::ENTER
this.graph.startVertex one of { 0, 1, 2 }
this.ncomponents >= 1
this.label[] elements >= 0
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
===========================================================================
graph.Graph.numVertices():::EXIT
this.graph == orig(this.graph)
this.graph.numEdges == orig(this.graph.numEdges)
this.graph.domainSize == orig(this.graph.domainSize)
this.graph.numMultiEdges == orig(this.graph.numMultiEdges)
this.graph.edges == orig(this.graph.edges)
this.graph.edges[] == orig(this.graph.edges[])
this.graph.numVertices == orig(this.graph.numVertices)
this.graph.vertices == orig(this.graph.vertices)
this.graph.vertices[] == orig(this.graph.vertices[])
this.graph.startVertex == orig(this.graph.startVertex)
this.nartics == orig(this.nartics)
this.ncomponents == orig(this.ncomponents)
this.label == orig(this.label)
this.label[] == orig(this.label[])
this.datae == orig(this.datae)
this.datae.vindex == orig(this.datae.vindex)
this.datae.visited == orig(this.datae.visited)
this.datae.visited[] == orig(this.datae.visited[])
this.datae.visited.getClass().getName() == orig(this.datae.visited.getClass().getName())
this.datae.lowlink == orig(this.datae.lowlink)
this.datae.lowlink[] == orig(this.datae.lowlink[])
this.datae.lowlink.getClass().getName() == orig(this.datae.lowlink.getClass().getName())
this.datae.dfsnum == orig(this.datae.dfsnum)
this.datae.dfsnum[] == orig(this.datae.dfsnum[])
this.datae.dfsnum.getClass().getName() == orig(this.datae.dfsnum.getClass().getName())
this.datae.cstack == orig(this.datae.cstack)
this.datae.cstack[] == orig(this.datae.cstack[])
this.datae.cstack.getClass().getName() == orig(this.datae.cstack.getClass().getName())
this.datac == orig(this.datac)
this.datac.vindex == orig(this.datac.vindex)
this.datac.visited == orig(this.datac.visited)
this.datac.visited[] == orig(this.datac.visited[])
this.datac.visited.getClass().getName() == orig(this.datac.visited.getClass().getName())
this.datac.lowlink == orig(this.datac.lowlink)
this.datac.lowlink[] == orig(this.datac.lowlink[])
this.datac.lowlink.getClass().getName() == orig(this.datac.lowlink.getClass().getName())
this.datac.dfsnum == orig(this.datac.dfsnum)
this.datac.dfsnum[] == orig(this.datac.dfsnum[])
this.datac.dfsnum.getClass().getName() == orig(this.datac.dfsnum.getClass().getName())
this.datac.cstack == orig(this.datac.cstack)
this.datac.cstack[] == orig(this.datac.cstack[])
this.datac.cstack.getClass().getName() == orig(this.datac.cstack.getClass().getName())
this.graph.startVertex one of { 0, 1, 2 }
this.ncomponents >= 1
this.label[] elements >= 0
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
===========================================================================
graph.Graph.removeAllEdges(int, int):::ENTER
this.graph.startVertex one of { 0, 1, 2 }
this.ncomponents >= 1
this.label == null
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
arg0 >= 0
arg1 >= 0
===========================================================================
graph.Graph.removeAllEdges(int, int):::EXIT
this.graph == orig(this.graph)
this.graph.domainSize == orig(this.graph.domainSize)
this.graph.edges == orig(this.graph.edges)
this.graph.numVertices == orig(this.graph.numVertices)
this.graph.vertices == orig(this.graph.vertices)
this.graph.vertices[] == orig(this.graph.vertices[])
this.graph.startVertex == orig(this.graph.startVertex)
this.nartics == orig(this.nartics)
this.ncomponents == orig(this.ncomponents)
this.label == orig(this.label)
this.datae == orig(this.datae)
this.datae.vindex == orig(this.datae.vindex)
this.datae.visited == orig(this.datae.visited)
this.datae.visited[] == orig(this.datae.visited[])
this.datae.visited.getClass().getName() == orig(this.datae.visited.getClass().getName())
this.datae.lowlink == orig(this.datae.lowlink)
this.datae.lowlink[] == orig(this.datae.lowlink[])
this.datae.lowlink.getClass().getName() == orig(this.datae.lowlink.getClass().getName())
this.datae.dfsnum == orig(this.datae.dfsnum)
this.datae.dfsnum[] == orig(this.datae.dfsnum[])
this.datae.dfsnum.getClass().getName() == orig(this.datae.dfsnum.getClass().getName())
this.datae.cstack == orig(this.datae.cstack)
this.datae.cstack[] == orig(this.datae.cstack[])
this.datae.cstack.getClass().getName() == orig(this.datae.cstack.getClass().getName())
this.datac == orig(this.datac)
this.datac.vindex == orig(this.datac.vindex)
this.datac.visited == orig(this.datac.visited)
this.datac.visited[] == orig(this.datac.visited[])
this.datac.visited.getClass().getName() == orig(this.datac.visited.getClass().getName())
this.datac.lowlink == orig(this.datac.lowlink)
this.datac.lowlink[] == orig(this.datac.lowlink[])
this.datac.lowlink.getClass().getName() == orig(this.datac.lowlink.getClass().getName())
this.datac.dfsnum == orig(this.datac.dfsnum)
this.datac.dfsnum[] == orig(this.datac.dfsnum[])
this.datac.dfsnum.getClass().getName() == orig(this.datac.dfsnum.getClass().getName())
this.datac.cstack == orig(this.datac.cstack)
this.datac.cstack[] == orig(this.datac.cstack[])
this.datac.cstack.getClass().getName() == orig(this.datac.cstack.getClass().getName())
size(this.graph.edges[]) == orig(size(this.graph.edges[]))
this.graph.startVertex one of { 0, 1, 2 }
this.ncomponents >= 1
this.label == null
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
return >= 0
this.graph.numEdges <= orig(this.graph.numEdges)
this.graph.numMultiEdges <= orig(this.graph.numMultiEdges)
===========================================================================
graph.Graph.removeEdge(util.Triple):::ENTER
this.graph.startVertex one of { 0, 1, 2 }
this.nartics == 1
this.ncomponents == 1
this.label[] elements >= 0
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
arg0 != null
arg0.first != null
arg0.first.getClass().getName() == java.lang.Integer.class
arg0.second != null
arg0.second.getClass().getName() == java.lang.Integer.class
arg0.third != null
arg0.third.getClass().getName() == java.lang.Integer.class
===========================================================================
graph.Graph.removeEdge(util.Triple):::EXIT84
===========================================================================
graph.Graph.removeEdge(util.Triple):::EXIT84;condition="return == true"
===========================================================================
graph.Graph.removeEdge(util.Triple):::EXIT
this.graph == orig(this.graph)
this.graph.domainSize == orig(this.graph.domainSize)
this.graph.edges == orig(this.graph.edges)
this.graph.numVertices == orig(this.graph.numVertices)
this.graph.vertices == orig(this.graph.vertices)
this.graph.vertices[] == orig(this.graph.vertices[])
this.graph.startVertex == orig(this.graph.startVertex)
this.ncomponents == orig(this.ncomponents)
this.datae == orig(this.datae)
this.datae.vindex == orig(this.datae.vindex)
this.datae.visited == orig(this.datae.visited)
this.datae.visited[] == orig(this.datae.visited[])
this.datae.visited.getClass().getName() == orig(this.datae.visited.getClass().getName())
this.datae.lowlink == orig(this.datae.lowlink)
this.datae.lowlink[] == orig(this.datae.lowlink[])
this.datae.lowlink.getClass().getName() == orig(this.datae.lowlink.getClass().getName())
this.datae.dfsnum == orig(this.datae.dfsnum)
this.datae.dfsnum[] == orig(this.datae.dfsnum[])
this.datae.dfsnum.getClass().getName() == orig(this.datae.dfsnum.getClass().getName())
this.datae.cstack == orig(this.datae.cstack)
this.datae.cstack[] == orig(this.datae.cstack[])
this.datae.cstack.getClass().getName() == orig(this.datae.cstack.getClass().getName())
this.datac == orig(this.datac)
this.datac.vindex == orig(this.datac.vindex)
this.datac.visited[] == orig(this.datac.visited[])
this.datac.visited.getClass().getName() == orig(this.datac.visited.getClass().getName())
this.datac.lowlink.getClass().getName() == orig(this.datac.lowlink.getClass().getName())
this.datac.dfsnum.getClass().getName() == orig(this.datac.dfsnum.getClass().getName())
this.datac.cstack[] == orig(this.datac.cstack[])
this.datac.cstack.getClass().getName() == orig(this.datac.cstack.getClass().getName())
arg0.first == orig(arg0.first)
arg0.first.getClass().getName() == orig(arg0.first.getClass().getName())
arg0.second == orig(arg0.second)
arg0.second.getClass().getName() == orig(arg0.second.getClass().getName())
arg0.third == orig(arg0.third)
arg0.third.getClass().getName() == orig(arg0.third.getClass().getName())
size(this.graph.edges[]) == orig(size(this.graph.edges[]))
size(this.datac.lowlink[]) == orig(size(this.datac.lowlink[]))
size(this.datac.dfsnum[]) == orig(size(this.datac.dfsnum[]))
this.graph.startVertex one of { 0, 1, 2 }
this.nartics one of { 1, 3, 5 }
this.ncomponents == 1
this.label == null
this.datae.vindex == 0
this.datae.visited[] == []
this.datae.visited[].getClass().getName() == []
this.datae.lowlink[] == []
this.datae.lowlink[].getClass().getName() == []
this.datae.dfsnum[] == []
this.datae.dfsnum[].getClass().getName() == []
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
arg0.first != null
arg0.first.getClass().getName() == java.lang.Integer.class
arg0.second != null
arg0.second.getClass().getName() == java.lang.Integer.class
arg0.third != null
arg0.third.getClass().getName() == java.lang.Integer.class
return == true
this.graph.numEdges < orig(this.graph.numEdges)
this.graph.numMultiEdges <= orig(this.graph.numMultiEdges)
this.graph.edges[] < orig(this.graph.edges[]) (lexically)
this.graph.edges[] <= orig(this.graph.edges[]) (lexically)
this.nartics >= orig(this.nartics)
===========================================================================
graph.Graph.removeEdge(util.Triple):::EXIT;condition="return == true"
===========================================================================
graph.Graph.removeGraphs(java.util.List):::ENTER
this.graph.startVertex one of { 0, 1, 2 }
this.ncomponents >= 1
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == graph.Graph.class
arg0[].getClass().getName() one of { [], [graph.Graph] }
arg0.getClass().getName() == java.util.ArrayList.class
size(arg0[]) one of { 0, 1 }
===========================================================================
graph.Graph.removeGraphs(java.util.List):::EXIT
this.graph == orig(this.graph)
this.graph.domainSize == orig(this.graph.domainSize)
this.graph.edges == orig(this.graph.edges)
this.graph.numVertices == orig(this.graph.numVertices)
this.graph.vertices == orig(this.graph.vertices)
this.graph.vertices[] == orig(this.graph.vertices[])
this.graph.startVertex == orig(this.graph.startVertex)
this.datae == orig(this.datae)
this.datae.vindex == orig(this.datae.vindex)
this.datae.visited == orig(this.datae.visited)
this.datae.visited[] == orig(this.datae.visited[])
this.datae.visited.getClass().getName() == orig(this.datae.visited.getClass().getName())
this.datae.lowlink == orig(this.datae.lowlink)
this.datae.lowlink[] == orig(this.datae.lowlink[])
this.datae.lowlink.getClass().getName() == orig(this.datae.lowlink.getClass().getName())
this.datae.dfsnum == orig(this.datae.dfsnum)
this.datae.dfsnum[] == orig(this.datae.dfsnum[])
this.datae.dfsnum.getClass().getName() == orig(this.datae.dfsnum.getClass().getName())
this.datae.cstack == orig(this.datae.cstack)
this.datae.cstack[] == orig(this.datae.cstack[])
this.datae.cstack.getClass().getName() == orig(this.datae.cstack.getClass().getName())
this.datac == orig(this.datac)
this.datac.vindex == orig(this.datac.vindex)
this.datac.visited == orig(this.datac.visited)
this.datac.visited[] == orig(this.datac.visited[])
this.datac.visited.getClass().getName() == orig(this.datac.visited.getClass().getName())
this.datac.lowlink == orig(this.datac.lowlink)
this.datac.lowlink[] == orig(this.datac.lowlink[])
this.datac.lowlink.getClass().getName() == orig(this.datac.lowlink.getClass().getName())
this.datac.dfsnum == orig(this.datac.dfsnum)
this.datac.dfsnum[] == orig(this.datac.dfsnum[])
this.datac.dfsnum.getClass().getName() == orig(this.datac.dfsnum.getClass().getName())
this.datac.cstack == orig(this.datac.cstack)
this.datac.cstack[] == orig(this.datac.cstack[])
this.datac.cstack.getClass().getName() == orig(this.datac.cstack.getClass().getName())
arg0[] == orig(arg0[])
size(this.graph.edges[]) == orig(size(this.graph.edges[]))
this.graph.startVertex one of { 0, 1, 2 }
this.nartics == 0
this.ncomponents == 99
this.label == null
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
arg0[] elements != null
arg0[].getClass().getName() elements == graph.Graph.class
arg0[].getClass().getName() one of { [], [graph.Graph] }
this.graph.numEdges <= orig(this.graph.numEdges)
this.graph.numMultiEdges <= orig(this.graph.numMultiEdges)
this.nartics <= orig(this.nartics)
this.ncomponents > orig(this.ncomponents)
===========================================================================
graph.Graph.vertices():::ENTER
this.ncomponents >= 1
this.label[] elements >= 0
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
===========================================================================
graph.Graph.vertices():::EXIT
this.graph == orig(this.graph)
this.graph.numEdges == orig(this.graph.numEdges)
this.graph.domainSize == orig(this.graph.domainSize)
this.graph.numMultiEdges == orig(this.graph.numMultiEdges)
this.graph.edges == orig(this.graph.edges)
this.graph.edges[] == orig(this.graph.edges[])
this.graph.numVertices == orig(this.graph.numVertices)
this.graph.vertices == orig(this.graph.vertices)
this.graph.vertices[] == orig(this.graph.vertices[])
this.graph.startVertex == orig(this.graph.startVertex)
this.nartics == orig(this.nartics)
this.ncomponents == orig(this.ncomponents)
this.label == orig(this.label)
this.label[] == orig(this.label[])
this.datae == orig(this.datae)
this.datae.vindex == orig(this.datae.vindex)
this.datae.visited == orig(this.datae.visited)
this.datae.visited[] == orig(this.datae.visited[])
this.datae.visited.getClass().getName() == orig(this.datae.visited.getClass().getName())
this.datae.lowlink == orig(this.datae.lowlink)
this.datae.lowlink[] == orig(this.datae.lowlink[])
this.datae.lowlink.getClass().getName() == orig(this.datae.lowlink.getClass().getName())
this.datae.dfsnum == orig(this.datae.dfsnum)
this.datae.dfsnum[] == orig(this.datae.dfsnum[])
this.datae.dfsnum.getClass().getName() == orig(this.datae.dfsnum.getClass().getName())
this.datae.cstack == orig(this.datae.cstack)
this.datae.cstack[] == orig(this.datae.cstack[])
this.datae.cstack.getClass().getName() == orig(this.datae.cstack.getClass().getName())
this.datac == orig(this.datac)
this.datac.vindex == orig(this.datac.vindex)
this.datac.visited == orig(this.datac.visited)
this.datac.visited[] == orig(this.datac.visited[])
this.datac.visited.getClass().getName() == orig(this.datac.visited.getClass().getName())
this.datac.lowlink == orig(this.datac.lowlink)
this.datac.lowlink[] == orig(this.datac.lowlink[])
this.datac.lowlink.getClass().getName() == orig(this.datac.lowlink.getClass().getName())
this.datac.dfsnum == orig(this.datac.dfsnum)
this.datac.dfsnum[] == orig(this.datac.dfsnum[])
this.datac.dfsnum.getClass().getName() == orig(this.datac.dfsnum.getClass().getName())
this.datac.cstack == orig(this.datac.cstack)
this.datac.cstack[] == orig(this.datac.cstack[])
this.datac.cstack.getClass().getName() == orig(this.datac.cstack.getClass().getName())
this.ncomponents >= 1
this.label[] elements >= 0
this.datae.cstack[] == []
this.datae.cstack[].getClass().getName() == []
return != null
return.getClass().getName() == graph.AdjacencyMatrix$VertexIterable.class
===========================================================================
graph.Hash.finalise(util.Triple):::ENTER
arg0 != null
arg0.first != null
arg0.first.getClass().getName() == java.lang.Integer.class
arg0.second != null
arg0.second.getClass().getName() == java.lang.Integer.class
arg0.third != null
arg0.third.getClass().getName() == java.lang.Integer.class
===========================================================================
graph.Hash.finalise(util.Triple):::EXIT
arg0.first.getClass().getName() == orig(arg0.first.getClass().getName())
arg0.second.getClass().getName() == orig(arg0.second.getClass().getName())
arg0.third.getClass().getName() == orig(arg0.third.getClass().getName())
arg0.first != null
arg0.first.getClass().getName() == java.lang.Integer.class
arg0.second != null
arg0.second.getClass().getName() == java.lang.Integer.class
arg0.third != null
arg0.third.getClass().getName() == java.lang.Integer.class
return != null
return.first != null
return.first.getClass().getName() == java.lang.Integer.class
return.second != null
return.second.getClass().getName() == java.lang.Integer.class
return.third != null
return.third.getClass().getName() == java.lang.Integer.class
===========================================================================
graph.Hash.hashcode(int[]):::ENTER
arg0 != null
===========================================================================
graph.Hash.hashcode(int[]):::EXIT
arg0[] == orig(arg0[])
===========================================================================
graph.Hash.mix(util.Triple):::ENTER
arg0 != null
arg0.first != null
arg0.first.getClass().getName() == java.lang.Integer.class
arg0.second != null
arg0.second.getClass().getName() == java.lang.Integer.class
arg0.third != null
arg0.third.getClass().getName() == java.lang.Integer.class
===========================================================================
graph.Hash.mix(util.Triple):::EXIT
arg0.first.getClass().getName() == orig(arg0.first.getClass().getName())
arg0.second.getClass().getName() == orig(arg0.second.getClass().getName())
arg0.third.getClass().getName() == orig(arg0.third.getClass().getName())
arg0.first != null
arg0.first.getClass().getName() == java.lang.Integer.class
arg0.second != null
arg0.second.getClass().getName() == java.lang.Integer.class
arg0.third != null
arg0.third.getClass().getName() == java.lang.Integer.class
return != null
return.first != null
return.first.getClass().getName() == java.lang.Integer.class
return.second != null
return.second.getClass().getName() == java.lang.Integer.class
return.third != null
return.third.getClass().getName() == java.lang.Integer.class
===========================================================================
graph.Hash.rot(int, int):::ENTER
===========================================================================
graph.Hash.rot(int, int):::EXIT
===========================================================================
polynomial.FactorPoly:::CLASS
===========================================================================
polynomial.FactorPoly:::OBJECT
this.xterms.getClass().getName() == polynomial.YTerms[].class
this.xterms[] elements != null
this.xterms[].getClass().getName() elements == polynomial.YTerms.class
this.xterms[].ymin elements >= 0
this.xterms[].ymax elements >= 0
this.xterms[].fpadding elements >= 0
this.xterms[].bpadding elements >= 0
this.nxterms >= 0
size(this.xterms[]) >= 1
===========================================================================
polynomial.FactorPoly.FactorPoly():::EXIT
this.xterms != null
this.xterms[].getClass().getName() == [polynomial.YTerms, polynomial.YTerms, polynomial.YTerms, polynomial.YTerms, polynomial.YTerms]
this.xterms[].ymin == [1, 1, 1, 1, 1]
this.xterms[].ymin elements == 1
this.xterms[].ymax == [0, 0, 0, 0, 0]
this.xterms[].ymax elements == 0
this.xterms[].fpadding == [0, 0, 0, 0, 0]
this.xterms[].fpadding elements == 0
this.xterms[].bpadding == [0, 0, 0, 0, 0]
this.xterms[].bpadding elements == 0
this.xterms[].coefficients contains only nulls and has only one value, of length 5
this.xterms[].coefficients elements == null
this.xterms[].coefficients.getClass().getName() == [null, null, null, null, null]
this.xterms[].coefficients.getClass().getName() elements == null
this.nxterms == 5
size(this.xterms[]) == 5
===========================================================================
polynomial.FactorPoly.FactorPoly(polynomial.FactorPoly):::ENTER
arg0 != null
arg0.xterms != null
arg0.xterms.getClass().getName() == polynomial.YTerms[].class
arg0.xterms[] elements != null
arg0.xterms[].getClass().getName() elements == polynomial.YTerms.class
arg0.xterms[].ymin elements one of { 0, 1, 2 }
arg0.xterms[].ymax elements >= 0
arg0.xterms[].fpadding elements one of { 0, 1, 2 }
arg0.xterms[].bpadding elements >= 0
===========================================================================
polynomial.FactorPoly.FactorPoly(polynomial.FactorPoly):::EXIT
arg0.xterms == orig(arg0.xterms)
arg0.xterms.getClass().getName() == orig(arg0.xterms.getClass().getName())
arg0.xterms[] == orig(arg0.xterms[])
arg0.xterms[].ymin == orig(arg0.xterms[].ymin)
arg0.xterms[].ymax == orig(arg0.xterms[].ymax)
arg0.xterms[].fpadding == orig(arg0.xterms[].fpadding)
arg0.xterms[].bpadding == orig(arg0.xterms[].bpadding)
arg0.xterms[].coefficients == orig(arg0.xterms[].coefficients)
arg0.nxterms == orig(arg0.nxterms)
this.xterms != null
this.xterms[].ymin elements one of { 0, 1, 2 }
this.xterms[].fpadding elements one of { 0, 1, 2 }
arg0.xterms != null
arg0.xterms.getClass().getName() == polynomial.YTerms[].class
arg0.xterms[] elements != null
arg0.xterms[].getClass().getName() elements == polynomial.YTerms.class
arg0.xterms[].ymin elements one of { 0, 1, 2 }
arg0.xterms[].ymax elements >= 0
arg0.xterms[].fpadding elements one of { 0, 1, 2 }
arg0.xterms[].bpadding elements >= 0
===========================================================================
polynomial.FactorPoly.FactorPoly(polynomial.XYTerm):::ENTER
arg0 != null
arg0.xpower one of { 0, 1 }
arg0.ypower >= 0
arg0.ypowerend >= 0
===========================================================================
polynomial.FactorPoly.FactorPoly(polynomial.XYTerm):::EXIT
arg0.xpower == orig(arg0.xpower)
arg0.ypower == orig(arg0.ypower)
arg0.ypowerend == orig(arg0.ypowerend)
this.xterms != null
this.xterms[].getClass().getName() one of { [polynomial.YTerms], [polynomial.YTerms, polynomial.YTerms] }
this.xterms[].ymin sorted by >
this.xterms[].ymax elements are equal
this.xterms[].fpadding elements one of { 0, 1 }
this.xterms[].fpadding one of { [0], [0, 0], [1] }
this.xterms[].fpadding elements are equal
this.xterms[].bpadding elements one of { 0, 1 }
this.xterms[].bpadding one of { [0, 1], [1] }
this.xterms[].bpadding sorted by <
this.xterms[].coefficients.getClass().getName() one of { [null, java.math.BigInteger[]], [java.math.BigInteger[]] }
this.nxterms one of { 1, 2 }
arg0.xpower one of { 0, 1 }
arg0.ypower >= 0
arg0.ypowerend >= 0
size(this.xterms[]) one of { 1, 2 }
===========================================================================
polynomial.FactorPoly.add(polynomial.FactorPoly):::ENTER
this.xterms != null
this.xterms[].ymin elements one of { 0, 1, 2 }
this.xterms[].fpadding elements one of { 0, 1, 2 }
arg0 != null
arg0.xterms != null
arg0.xterms.getClass().getName() == polynomial.YTerms[].class
arg0.xterms[] elements != null
arg0.xterms[].getClass().getName() elements == polynomial.YTerms.class
arg0.xterms[].ymin elements >= 0
arg0.xterms[].ymax elements >= 0
arg0.xterms[].fpadding elements >= 0
arg0.xterms[].bpadding elements >= 0
===========================================================================
polynomial.FactorPoly.add(polynomial.FactorPoly):::EXIT
this.xterms.getClass().getName() == orig(this.xterms.getClass().getName())
arg0.xterms == orig(arg0.xterms)
arg0.xterms.getClass().getName() == orig(arg0.xterms.getClass().getName())
arg0.xterms[] == orig(arg0.xterms[])
arg0.xterms[].ymin == orig(arg0.xterms[].ymin)
arg0.xterms[].ymax == orig(arg0.xterms[].ymax)
arg0.xterms[].fpadding == orig(arg0.xterms[].fpadding)
arg0.xterms[].bpadding == orig(arg0.xterms[].bpadding)
arg0.xterms[].coefficients == orig(arg0.xterms[].coefficients)
arg0.nxterms == orig(arg0.nxterms)
this.xterms != null
this.xterms[].ymin elements one of { 0, 1, 2 }
this.xterms[].fpadding elements one of { 0, 1, 2 }
arg0.xterms != null
arg0.xterms.getClass().getName() == polynomial.YTerms[].class
arg0.xterms[] elements != null
arg0.xterms[].getClass().getName() elements == polynomial.YTerms.class
arg0.xterms[].ymin elements >= 0
arg0.xterms[].ymax elements >= 0
arg0.xterms[].fpadding elements >= 0
arg0.xterms[].bpadding elements >= 0
this.xterms[].ymax >= orig(this.xterms[].ymax) (lexically)
this.nxterms >= orig(this.nxterms)
size(this.xterms[]) >= orig(size(this.xterms[]))
size(this.xterms[])-1 >= orig(size(this.xterms[]))-1
===========================================================================
polynomial.FactorPoly.add(polynomial.XYTerm):::ENTER
this.xterms != null
this.xterms[].getClass().getName() one of { [polynomial.YTerms], [polynomial.YTerms, polynomial.YTerms] }
this.xterms[].ymin elements one of { 0, 1 }
this.xterms[].ymin one of { [1], [1, 0], [1, 1] }
this.xterms[].ymin sorted by >=
this.xterms[].ymax elements == 0
this.xterms[].ymax one of { [0], [0, 0] }
this.xterms[].fpadding elements == 0
this.xterms[].fpadding one of { [0], [0, 0] }
this.xterms[].bpadding elements one of { 0, 1 }
this.xterms[].bpadding one of { [0], [0, 0], [0, 1] }
this.xterms[].bpadding sorted by <=
this.nxterms one of { 1, 2 }
arg0 != null
arg0.xpower one of { 0, 1 }
arg0.ypower >= 0
arg0.ypowerend >= 0
size(this.xterms[]) one of { 1, 2 }
===========================================================================
polynomial.FactorPoly.add(polynomial.XYTerm):::EXIT
this.xterms.getClass().getName() == orig(this.xterms.getClass().getName())
this.nxterms == orig(this.nxterms)
arg0.xpower == orig(arg0.xpower)
arg0.ypower == orig(arg0.ypower)
arg0.ypowerend == orig(arg0.ypowerend)
size(this.xterms[]) == orig(size(this.xterms[]))
this.xterms != null
this.xterms[].getClass().getName() one of { [polynomial.YTerms], [polynomial.YTerms, polynomial.YTerms] }
this.xterms[].ymin sorted by >
this.xterms[].ymax sorted by >=
this.xterms[].fpadding elements one of { 0, 1 }
this.xterms[].fpadding sorted by >=
this.nxterms one of { 1, 2 }
arg0.xpower one of { 0, 1 }
arg0.ypower >= 0
arg0.ypowerend >= 0
size(this.xterms[]) one of { 1, 2 }
this.xterms[].ymax >= orig(this.xterms[].ymax) (elementwise)
this.xterms[].fpadding >= orig(this.xterms[].fpadding) (elementwise)
this.xterms[].bpadding > orig(this.xterms[].bpadding) (lexically)
this.xterms[].bpadding >= orig(this.xterms[].bpadding) (elementwise)
===========================================================================
polynomial.FactorPoly.clone(polynomial.FactorPoly):::ENTER
this.xterms == null
this.nxterms == 0
arg0 != null
arg0.xterms != null
arg0.xterms.getClass().getName() == polynomial.YTerms[].class
arg0.xterms[] elements != null
arg0.xterms[].getClass().getName() elements == polynomial.YTerms.class
arg0.xterms[].ymin elements one of { 0, 1, 2 }
arg0.xterms[].ymax elements >= 0
arg0.xterms[].fpadding elements one of { 0, 1, 2 }
arg0.xterms[].bpadding elements >= 0
===========================================================================
polynomial.FactorPoly.clone(polynomial.FactorPoly):::EXIT
arg0.xterms == orig(arg0.xterms)
arg0.xterms.getClass().getName() == orig(arg0.xterms.getClass().getName())
arg0.xterms[] == orig(arg0.xterms[])
arg0.xterms[].ymin == orig(arg0.xterms[].ymin)
arg0.xterms[].ymax == orig(arg0.xterms[].ymax)
arg0.xterms[].fpadding == orig(arg0.xterms[].fpadding)
arg0.xterms[].bpadding == orig(arg0.xterms[].bpadding)
arg0.xterms[].coefficients == orig(arg0.xterms[].coefficients)
arg0.nxterms == orig(arg0.nxterms)
this.xterms != null
this.xterms[].ymin elements one of { 0, 1, 2 }
this.xterms[].fpadding elements one of { 0, 1, 2 }
arg0.xterms != null
arg0.xterms.getClass().getName() == polynomial.YTerms[].class
arg0.xterms[] elements != null
arg0.xterms[].getClass().getName() elements == polynomial.YTerms.class
arg0.xterms[].ymin elements one of { 0, 1, 2 }
arg0.xterms[].ymax elements >= 0
arg0.xterms[].fpadding elements one of { 0, 1, 2 }
arg0.xterms[].bpadding elements >= 0
this.nxterms > orig(this.nxterms)
===========================================================================
polynomial.FactorPoly.resize_xterms(int):::ENTER
this.xterms != null
this.xterms[].ymin elements one of { 0, 1, 2 }
this.xterms[].fpadding elements one of { 0, 1, 2 }
this.nxterms >= 1
arg0 >= 1
===========================================================================
polynomial.FactorPoly.resize_xterms(int):::EXIT269
this.xterms == orig(this.xterms)
this.xterms[] == orig(this.xterms[])
this.xterms[].ymin == orig(this.xterms[].ymin)
this.xterms[].ymax == orig(this.xterms[].ymax)
this.xterms[].fpadding == orig(this.xterms[].fpadding)
this.xterms[].bpadding == orig(this.xterms[].bpadding)
this.xterms[].coefficients == orig(this.xterms[].coefficients)
this.nxterms == orig(this.nxterms)
===========================================================================
polynomial.FactorPoly.resize_xterms(int):::EXIT283
===========================================================================
polynomial.FactorPoly.resize_xterms(int):::EXIT
this.xterms.getClass().getName() == orig(this.xterms.getClass().getName())
this.xterms != null
this.xterms[].ymin elements one of { 0, 1, 2 }
this.xterms[].fpadding elements one of { 0, 1, 2 }
this.nxterms >= 1
this.xterms[].ymin >= orig(this.xterms[].ymin) (lexically)
this.xterms[].ymax >= orig(this.xterms[].ymax) (lexically)
this.xterms[].fpadding >= orig(this.xterms[].fpadding) (lexically)
this.xterms[].bpadding >= orig(this.xterms[].bpadding) (lexically)
this.nxterms >= orig(this.nxterms)
size(this.xterms[]) >= orig(size(this.xterms[]))
size(this.xterms[])-1 >= orig(size(this.xterms[]))-1
===========================================================================
polynomial.FactorPoly.swap(polynomial.FactorPoly):::ENTER
this.xterms != null
this.xterms[].ymin elements one of { 0, 1, 2 }
this.xterms[].fpadding elements one of { 0, 1 }
arg0 != null
arg0.xterms != null
arg0.xterms.getClass().getName() == polynomial.YTerms[].class
arg0.xterms[] elements != null
arg0.xterms[].getClass().getName() elements == polynomial.YTerms.class
arg0.xterms[].ymin elements one of { 0, 1, 2 }
arg0.xterms[].ymax elements >= 0
arg0.xterms[].fpadding elements one of { 0, 1, 2 }
arg0.xterms[].bpadding elements >= 0
===========================================================================
polynomial.FactorPoly.swap(polynomial.FactorPoly):::EXIT
this.xterms.getClass().getName() == orig(this.xterms.getClass().getName())
arg0.xterms.getClass().getName() == orig(arg0.xterms.getClass().getName())
this.xterms != null
this.xterms[].ymin elements one of { 0, 1, 2 }
this.xterms[].fpadding elements one of { 0, 1, 2 }
arg0.xterms != null
arg0.xterms.getClass().getName() == polynomial.YTerms[].class
arg0.xterms[] elements != null
arg0.xterms[].getClass().getName() elements == polynomial.YTerms.class
arg0.xterms[].ymin elements one of { 0, 1, 2 }
arg0.xterms[].ymax elements >= 0
arg0.xterms[].fpadding elements one of { 0, 1 }
arg0.xterms[].bpadding elements >= 0
this.nxterms > orig(this.nxterms)
arg0.nxterms < orig(arg0.nxterms)
size(this.xterms[])-1 > orig(size(this.xterms[]))
size(arg0.xterms[]) < orig(size(arg0.xterms[]))-1
===========================================================================
polynomial.FactorPoly.times(polynomial.FactorPoly):::ENTER
this.xterms != null
this.xterms[].ymin elements one of { 0, 1, 2 }
this.xterms[].fpadding elements one of { 0, 1, 2 }
arg0 != null
arg0.xterms != null
arg0.xterms.getClass().getName() == polynomial.YTerms[].class
arg0.xterms[] elements != null
arg0.xterms[].getClass().getName() elements == polynomial.YTerms.class
arg0.xterms[].ymin elements >= 0
arg0.xterms[].ymax elements >= 0
arg0.xterms[].ymax sorted by >=
arg0.xterms[].fpadding elements one of { 0, 1 }
arg0.xterms[].fpadding sorted by >=
arg0.xterms[].bpadding elements >= 0
===========================================================================
polynomial.FactorPoly.times(polynomial.FactorPoly):::EXIT
this.xterms.getClass().getName() == orig(this.xterms.getClass().getName())
arg0.xterms == orig(arg0.xterms)
arg0.xterms.getClass().getName() == orig(arg0.xterms.getClass().getName())
arg0.xterms[] == orig(arg0.xterms[])
arg0.xterms[].ymin == orig(arg0.xterms[].ymin)
arg0.xterms[].ymax == orig(arg0.xterms[].ymax)
arg0.xterms[].fpadding == orig(arg0.xterms[].fpadding)
arg0.xterms[].bpadding == orig(arg0.xterms[].bpadding)
arg0.xterms[].coefficients == orig(arg0.xterms[].coefficients)
arg0.nxterms == orig(arg0.nxterms)
this.xterms != null
this.xterms[].fpadding elements one of { 0, 1, 2 }
arg0.xterms != null
arg0.xterms.getClass().getName() == polynomial.YTerms[].class
arg0.xterms[] elements != null
arg0.xterms[].getClass().getName() elements == polynomial.YTerms.class
arg0.xterms[].ymin elements >= 0
arg0.xterms[].ymax elements >= 0
arg0.xterms[].ymax sorted by >=
arg0.xterms[].fpadding elements one of { 0, 1 }
arg0.xterms[].fpadding sorted by >=
arg0.xterms[].bpadding elements >= 0
this.nxterms >= orig(this.nxterms)
size(this.xterms[]) >= orig(size(this.xterms[]))
size(this.xterms[])-1 != orig(size(this.xterms[]))
size(this.xterms[])-1 >= orig(size(this.xterms[]))-1
===========================================================================
polynomial.FactorPoly.times(polynomial.XYTerm):::ENTER
this.xterms != null
this.xterms[].fpadding elements one of { 0, 1, 2 }
arg0 != null
arg0.xpower >= 0
arg0.ypower == 0
arg0.ypowerend >= 0
===========================================================================
polynomial.FactorPoly.times(polynomial.XYTerm):::EXIT
this.xterms.getClass().getName() == orig(this.xterms.getClass().getName())
arg0.xpower == orig(arg0.xpower)
arg0.ypower == orig(arg0.ypower)
arg0.ypowerend == orig(arg0.ypowerend)
this.xterms != null
this.nxterms >= 1
arg0.xpower >= 0
arg0.ypower == 0
arg0.ypowerend >= 0
this.nxterms >= orig(this.nxterms)
size(this.xterms[]) >= orig(size(this.xterms[]))
size(this.xterms[])-1 != orig(size(this.xterms[]))
size(this.xterms[])-1 >= orig(size(this.xterms[]))-1
===========================================================================
polynomial.FactorPoly.timesnew(polynomial.FactorPoly):::ENTER
this.xterms != null
this.xterms[].ymin elements one of { 0, 1, 2 }
this.xterms[].fpadding elements one of { 0, 1, 2 }
arg0 != null
arg0.xterms != null
arg0.xterms.getClass().getName() == polynomial.YTerms[].class
arg0.xterms[] elements != null
arg0.xterms[].getClass().getName() == [polynomial.YTerms]
arg0.xterms[].getClass().getName() elements == polynomial.YTerms.class
arg0.xterms[].ymin elements >= 0
arg0.xterms[].ymax elements >= 0
arg0.xterms[].fpadding elements one of { 0, 1 }
arg0.xterms[].fpadding one of { [0], [1] }
arg0.xterms[].bpadding == [1]
arg0.xterms[].bpadding elements == 1
arg0.xterms[].coefficients elements != null
arg0.xterms[].coefficients.getClass().getName() == [java.math.BigInteger[]]
arg0.xterms[].coefficients.getClass().getName() elements == java.math.BigInteger[].class
arg0.nxterms == 1
size(arg0.xterms[]) == 1
===========================================================================
polynomial.FactorPoly.timesnew(polynomial.FactorPoly):::EXIT
this.xterms == orig(this.xterms)
this.xterms.getClass().getName() == orig(this.xterms.getClass().getName())
this.xterms[] == orig(this.xterms[])
this.xterms[].ymin == orig(this.xterms[].ymin)
this.xterms[].ymax == orig(this.xterms[].ymax)
this.xterms[].fpadding == orig(this.xterms[].fpadding)
this.xterms[].bpadding == orig(this.xterms[].bpadding)
this.xterms[].coefficients == orig(this.xterms[].coefficients)
this.nxterms == orig(this.nxterms)
arg0.xterms == orig(arg0.xterms)
arg0.xterms.getClass().getName() == orig(arg0.xterms.getClass().getName())
arg0.xterms[] == orig(arg0.xterms[])
arg0.xterms[].ymin == orig(arg0.xterms[].ymin)
arg0.xterms[].ymax == orig(arg0.xterms[].ymax)
arg0.xterms[].fpadding == orig(arg0.xterms[].fpadding)
arg0.xterms[].bpadding == orig(arg0.xterms[].bpadding)
arg0.xterms[].coefficients == orig(arg0.xterms[].coefficients)
arg0.nxterms == orig(arg0.nxterms)
this.xterms != null
this.xterms[].ymin elements one of { 0, 1, 2 }
this.xterms[].fpadding elements one of { 0, 1, 2 }
arg0.xterms != null
arg0.xterms.getClass().getName() == polynomial.YTerms[].class
arg0.xterms[] elements != null
arg0.xterms[].getClass().getName() == [polynomial.YTerms]
arg0.xterms[].getClass().getName() elements == polynomial.YTerms.class
arg0.xterms[].ymin elements >= 0
arg0.xterms[].ymax elements >= 0
arg0.xterms[].fpadding elements one of { 0, 1 }
arg0.xterms[].fpadding one of { [0], [1] }
arg0.xterms[].bpadding == [1]
arg0.xterms[].bpadding elements == 1
arg0.xterms[].coefficients elements != null
arg0.xterms[].coefficients.getClass().getName() == [java.math.BigInteger[]]
arg0.xterms[].coefficients.getClass().getName() elements == java.math.BigInteger[].class
arg0.nxterms == 1
return != null
return.xterms != null
return.xterms.getClass().getName() == polynomial.YTerms[].class
return.xterms[] elements != null
return.xterms[].getClass().getName() elements == polynomial.YTerms.class
return.xterms[].ymin elements >= 0
return.xterms[].ymax elements >= 0
return.xterms[].fpadding elements one of { 0, 1, 2 }
return.xterms[].bpadding elements >= 0
size(arg0.xterms[]) == 1
===========================================================================
polynomial.FactorPoly.toString():::ENTER
this.xterms != null
this.xterms[].fpadding elements one of { 0, 1, 2 }
===========================================================================
polynomial.FactorPoly.toString():::EXIT
this.xterms == orig(this.xterms)
this.xterms.getClass().getName() == orig(this.xterms.getClass().getName())
this.xterms[] == orig(this.xterms[])
this.xterms[].ymin == orig(this.xterms[].ymin)
this.xterms[].ymax == orig(this.xterms[].ymax)
this.xterms[].fpadding == orig(this.xterms[].fpadding)
this.xterms[].bpadding == orig(this.xterms[].bpadding)
this.xterms[].coefficients == orig(this.xterms[].coefficients)
this.nxterms == orig(this.nxterms)
this.xterms != null
this.xterms[].fpadding elements one of { 0, 1, 2 }
return != null
===========================================================================
polynomial.X:::OBJECT
this.xpower == 1
this.ypower == 0
this.ypowerend == 0
===========================================================================
polynomial.X.X(int):::ENTER
arg0 == 1
===========================================================================
polynomial.X.X(int):::EXIT
===========================================================================
polynomial.XYTerm:::OBJECT
this.xpower >= 0
this.ypower >= 0
this.ypowerend >= 0
===========================================================================
polynomial.XYTerm.XYTerm(int, int):::ENTER
arg0 >= 0
arg1 >= 0
===========================================================================
polynomial.XYTerm.XYTerm(int, int):::EXIT
===========================================================================
polynomial.XYTerm.XYTerm(int, int, int):::ENTER
arg0 == 0
arg1 >= 0
===========================================================================
polynomial.XYTerm.XYTerm(int, int, int):::EXIT
this.xpower == 0
===========================================================================
polynomial.Y:::OBJECT
this.xpower == 0
this.ypower >= 0
this.ypowerend >= 0
===========================================================================
polynomial.Y.Y(int):::ENTER
arg0 >= 0
===========================================================================
polynomial.Y.Y(int):::EXIT
===========================================================================
polynomial.Y.Y(int, int):::ENTER
arg0 >= 0
===========================================================================
polynomial.Y.Y(int, int):::EXIT
===========================================================================
polynomial.YTerms:::OBJECT
this.ymin >= 0
this.ymax >= 0
this.fpadding >= 0
this.bpadding >= 0
this.coefficients.getClass().getName() == java.math.BigInteger[].class
this.coefficients[] elements != null
this.coefficients[].getClass().getName() elements == java.math.BigInteger.class
size(this.coefficients[]) >= 2
===========================================================================
polynomial.YTerms.YTerms():::EXIT
this.ymin == 1
this.ymax == 0
this.fpadding == 0
this.bpadding == 0
this.coefficients == null
===========================================================================
polynomial.YTerms.YTerms(int, int):::ENTER
arg0 one of { 0, 1, 2 }
arg1 >= 1
===========================================================================
polynomial.YTerms.YTerms(int, int):::EXIT
this.ymin one of { 0, 1, 2 }
this.ymax >= 1
this.fpadding one of { 0, 1, 2 }
this.coefficients != null
this.coefficients[] elements has only one value
===========================================================================
polynomial.YTerms.YTerms(polynomial.YTerms):::ENTER
arg0 != null
arg0.ymin >= 0
arg0.ymax >= 0
arg0.fpadding one of { 0, 1, 2 }
arg0.bpadding >= 0
arg0.coefficients.getClass().getName() == java.math.BigInteger[].class
arg0.coefficients[] elements != null
arg0.coefficients[].getClass().getName() elements == java.math.BigInteger.class
size(arg0.coefficients[]) >= 2
===========================================================================
polynomial.YTerms.YTerms(polynomial.YTerms):::EXIT
arg0.ymin == orig(arg0.ymin)
arg0.ymax == orig(arg0.ymax)
arg0.fpadding == orig(arg0.fpadding)
arg0.bpadding == orig(arg0.bpadding)
arg0.coefficients == orig(arg0.coefficients)
arg0.coefficients.getClass().getName() == orig(arg0.coefficients.getClass().getName())
arg0.coefficients[] == orig(arg0.coefficients[])
this.fpadding one of { 0, 1, 2 }
arg0.ymin >= 0
arg0.ymax >= 0
arg0.fpadding one of { 0, 1, 2 }
arg0.bpadding >= 0
arg0.coefficients.getClass().getName() == java.math.BigInteger[].class
arg0.coefficients[] elements != null
arg0.coefficients[].getClass().getName() elements == java.math.BigInteger.class
size(arg0.coefficients[]) >= 2
===========================================================================
polynomial.YTerms.add(polynomial.XYTerm):::ENTER
this.ymin == 1
this.ymax == 0
this.fpadding == 0
this.bpadding == 0
this.coefficients == null
arg0 != null
arg0.xpower one of { 0, 1 }
arg0.ypower >= 0
arg0.ypowerend >= 0
===========================================================================
polynomial.YTerms.add(polynomial.XYTerm):::EXIT
arg0.xpower == orig(arg0.xpower)
arg0.ypower == orig(arg0.ypower)
arg0.ypowerend == orig(arg0.ypowerend)
this.fpadding one of { 0, 1 }
this.bpadding >= 1
this.coefficients != null
arg0.xpower one of { 0, 1 }
arg0.ypower >= 0
arg0.ypowerend >= 0
this.ymax >= orig(this.ymax)
this.fpadding >= orig(this.fpadding)
this.bpadding > orig(this.bpadding)
===========================================================================
polynomial.YTerms.add(polynomial.YTerms):::ENTER
this.ymin one of { 0, 1, 2 }
this.fpadding one of { 0, 1, 2 }
arg0 != null
arg0.ymin >= 0
arg0.ymax >= 0
arg0.fpadding >= 0
arg0.bpadding >= 0
arg0.coefficients != null
arg0.coefficients.getClass().getName() == java.math.BigInteger[].class
arg0.coefficients[] elements != null
arg0.coefficients[].getClass().getName() elements == java.math.BigInteger.class
size(arg0.coefficients[]) >= 2
===========================================================================
polynomial.YTerms.add(polynomial.YTerms):::EXIT
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
arg0.ymin == orig(arg0.ymin)
arg0.ymax == orig(arg0.ymax)
arg0.fpadding == orig(arg0.fpadding)
arg0.bpadding == orig(arg0.bpadding)
arg0.coefficients == orig(arg0.coefficients)
arg0.coefficients.getClass().getName() == orig(arg0.coefficients.getClass().getName())
arg0.coefficients[] == orig(arg0.coefficients[])
this.ymin one of { 0, 1, 2 }
this.fpadding one of { 0, 1, 2 }
this.coefficients != null
arg0.ymin >= 0
arg0.ymax >= 0
arg0.fpadding >= 0
arg0.bpadding >= 0
arg0.coefficients != null
arg0.coefficients.getClass().getName() == java.math.BigInteger[].class
arg0.coefficients[] elements != null
arg0.coefficients[].getClass().getName() elements == java.math.BigInteger.class
size(arg0.coefficients[]) >= 2
this.ymax >= orig(this.ymax)
size(this.coefficients[]) >= orig(size(this.coefficients[]))
size(this.coefficients[])-1 != orig(size(this.coefficients[]))
size(this.coefficients[])-1 >= orig(size(this.coefficients[]))-1
===========================================================================
polynomial.YTerms.alloc(int, int):::ENTER
this.fpadding one of { 0, 1, 2 }
arg0 >= 0
arg1 >= 0
===========================================================================
polynomial.YTerms.alloc(int, int):::EXIT
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
this.bpadding >= 1
this.coefficients != null
this.coefficients[] elements has only one value
this.ymax >= orig(this.ymax)
this.bpadding > orig(this.bpadding)
size(this.coefficients[])-1 > orig(size(this.coefficients[]))
===========================================================================
polynomial.YTerms.clone(polynomial.YTerms):::ENTER
this.ymin == 0
this.ymax == 0
this.fpadding == 0
this.bpadding == 0
this.coefficients == null
arg0 != null
arg0.ymin >= 0
arg0.ymax >= 0
arg0.fpadding one of { 0, 1, 2 }
arg0.bpadding >= 0
arg0.coefficients.getClass().getName() == java.math.BigInteger[].class
arg0.coefficients[] elements != null
arg0.coefficients[].getClass().getName() elements == java.math.BigInteger.class
size(arg0.coefficients[]) >= 2
===========================================================================
polynomial.YTerms.clone(polynomial.YTerms):::EXIT
arg0.ymin == orig(arg0.ymin)
arg0.ymax == orig(arg0.ymax)
arg0.fpadding == orig(arg0.fpadding)
arg0.bpadding == orig(arg0.bpadding)
arg0.coefficients == orig(arg0.coefficients)
arg0.coefficients.getClass().getName() == orig(arg0.coefficients.getClass().getName())
arg0.coefficients[] == orig(arg0.coefficients[])
this.fpadding one of { 0, 1, 2 }
arg0.ymin >= 0
arg0.ymax >= 0
arg0.fpadding one of { 0, 1, 2 }
arg0.bpadding >= 0
arg0.coefficients.getClass().getName() == java.math.BigInteger[].class
arg0.coefficients[] elements != null
arg0.coefficients[].getClass().getName() elements == java.math.BigInteger.class
size(arg0.coefficients[]) >= 2
this.ymin >= orig(this.ymin)
this.ymax >= orig(this.ymax)
this.fpadding >= orig(this.fpadding)
this.bpadding >= orig(this.bpadding)
===========================================================================
polynomial.YTerms.get(int):::ENTER
this.coefficients != null
arg0 >= 0
===========================================================================
polynomial.YTerms.get(int):::EXIT
this.ymin == orig(this.ymin)
this.ymax == orig(this.ymax)
this.fpadding == orig(this.fpadding)
this.bpadding == orig(this.bpadding)
this.coefficients == orig(this.coefficients)
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
this.coefficients[] == orig(this.coefficients[])
this.coefficients != null
return != null
===========================================================================
polynomial.YTerms.is_empty():::ENTER
===========================================================================
polynomial.YTerms.is_empty():::EXIT
this.ymin == orig(this.ymin)
this.ymax == orig(this.ymax)
this.fpadding == orig(this.fpadding)
this.bpadding == orig(this.bpadding)
this.coefficients == orig(this.coefficients)
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
this.coefficients[] == orig(this.coefficients[])
(this.coefficients != null)  <==>  (return == false)
(this.coefficients != null)  ==>  (size(this.coefficients[]) >= 2)
(this.coefficients != null)  ==>  (this.coefficients.getClass().getName() == java.math.BigInteger[].class)
(this.coefficients != null)  ==>  (this.coefficients[] elements != null)
(this.coefficients != null)  ==>  (this.coefficients[].getClass().getName() elements == java.math.BigInteger.class)
(this.coefficients == null)  <==>  (return == true)
(this.coefficients == null)  ==>  (this.bpadding == 0)
(this.coefficients == null)  ==>  (this.fpadding == 0)
(this.coefficients == null)  ==>  (this.ymax == 0)
(this.coefficients == null)  ==>  (this.ymin == 1)
===========================================================================
polynomial.YTerms.is_empty():::EXIT;condition="return == true"
this.ymin == 1
this.ymax == 0
this.fpadding == 0
this.bpadding == 0
this.coefficients == null
return == true
===========================================================================
polynomial.YTerms.is_empty():::EXIT;condition="not(return == true)"
this.coefficients != null
return == false
===========================================================================
polynomial.YTerms.resize(int, int):::ENTER
this.ymin one of { 0, 1, 2 }
this.fpadding one of { 0, 1, 2 }
arg0 >= 0
arg1 >= 0
===========================================================================
polynomial.YTerms.resize(int, int):::EXIT
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
this.fpadding one of { 0, 1, 2 }
this.coefficients != null
this.ymax >= orig(this.ymax)
size(this.coefficients[]) >= orig(size(this.coefficients[]))
size(this.coefficients[])-1 != orig(size(this.coefficients[]))
size(this.coefficients[])-1 >= orig(size(this.coefficients[]))-1
===========================================================================
polynomial.YTerms.set(int, java.math.BigInteger):::ENTER
this.fpadding one of { 0, 1, 2 }
this.coefficients != null
arg0 >= 0
arg1 != null
===========================================================================
polynomial.YTerms.set(int, java.math.BigInteger):::EXIT
this.ymin == orig(this.ymin)
this.ymax == orig(this.ymax)
this.fpadding == orig(this.fpadding)
this.bpadding == orig(this.bpadding)
this.coefficients == orig(this.coefficients)
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
size(this.coefficients[]) == orig(size(this.coefficients[]))
this.fpadding one of { 0, 1, 2 }
this.coefficients != null
===========================================================================
polynomial.YTerms.size():::ENTER
this.fpadding one of { 0, 1, 2 }
this.coefficients != null
===========================================================================
polynomial.YTerms.size():::EXIT234
===========================================================================
polynomial.YTerms.size():::EXIT
this.ymin == orig(this.ymin)
this.ymax == orig(this.ymax)
this.fpadding == orig(this.fpadding)
this.bpadding == orig(this.bpadding)
this.coefficients == orig(this.coefficients)
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
this.coefficients[] == orig(this.coefficients[])
this.fpadding one of { 0, 1, 2 }
this.coefficients != null
return >= 1
===========================================================================
polynomial.YTerms.swap(polynomial.YTerms):::ENTER
this.ymin one of { 0, 1 }
this.ymax one of { 0, 1, 4 }
this.fpadding one of { 0, 1 }
this.bpadding one of { 0, 1, 4 }
arg0 != null
arg0.ymin one of { 0, 1, 2 }
arg0.ymax >= 0
arg0.fpadding one of { 0, 1, 2 }
arg0.bpadding >= 0
arg0.coefficients.getClass().getName() == java.math.BigInteger[].class
arg0.coefficients[] elements != null
arg0.coefficients[].getClass().getName() elements == java.math.BigInteger.class
size(this.coefficients[]) one of { 2, 3, 9 }
size(arg0.coefficients[]) >= 2
===========================================================================
polynomial.YTerms.swap(polynomial.YTerms):::EXIT
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
arg0.coefficients.getClass().getName() == orig(arg0.coefficients.getClass().getName())
this.ymin one of { 0, 1, 2 }
this.fpadding one of { 0, 1, 2 }
arg0.ymin one of { 0, 1 }
arg0.ymax one of { 0, 1, 4 }
arg0.fpadding one of { 0, 1 }
arg0.bpadding one of { 0, 1, 4 }
arg0.coefficients.getClass().getName() == java.math.BigInteger[].class
arg0.coefficients[] elements != null
arg0.coefficients[].getClass().getName() elements == java.math.BigInteger.class
size(arg0.coefficients[]) one of { 2, 3, 9 }
this.ymax >= orig(this.ymax)
this.fpadding >= orig(this.fpadding)
this.bpadding >= orig(this.bpadding)
arg0.ymax <= orig(arg0.ymax)
arg0.fpadding <= orig(arg0.fpadding)
arg0.bpadding <= orig(arg0.bpadding)
size(this.coefficients[])-1 > orig(size(this.coefficients[]))
size(arg0.coefficients[]) < orig(size(arg0.coefficients[]))-1
===========================================================================
polynomial.YTerms.times(polynomial.XYTerm):::ENTER
this.fpadding one of { 0, 1, 2 }
arg0 != null
arg0.xpower >= 0
arg0.ypower == 0
arg0.ypowerend >= 0
===========================================================================
polynomial.YTerms.times(polynomial.XYTerm):::EXIT146
this.ymax == orig(this.ymax)
this.fpadding == orig(this.fpadding)
this.bpadding == orig(this.bpadding)
this.coefficients == orig(this.coefficients)
this.ymin == 1
this.ymax == 0
this.fpadding == 0
this.bpadding == 0
this.coefficients == null
===========================================================================
polynomial.YTerms.times(polynomial.XYTerm):::EXIT192
this.bpadding >= 1
this.coefficients != null
orig(this.coefficients) != null
===========================================================================
polynomial.YTerms.times(polynomial.XYTerm):::EXIT
this.ymin == orig(this.ymin)
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
arg0.xpower == orig(arg0.xpower)
arg0.ypower == orig(arg0.ypower)
arg0.ypowerend == orig(arg0.ypowerend)
(this.bpadding == 0)  <==>  (orig(this.coefficients) == null)
(this.bpadding == 0)  <==>  (this.coefficients == null)
(this.bpadding == 0)  ==>  (orig(this.bpadding) == 0)
(this.bpadding == 0)  ==>  (orig(this.fpadding) == 0)
(this.bpadding == 0)  ==>  (orig(this.ymax) == 0)
(this.bpadding == 0)  ==>  (this.bpadding == orig(this.bpadding))
(this.bpadding == 0)  ==>  (this.coefficients == orig(this.coefficients))
(this.bpadding == 0)  ==>  (this.fpadding == 0)
(this.bpadding == 0)  ==>  (this.fpadding == orig(this.fpadding))
(this.bpadding == 0)  ==>  (this.ymax == 0)
(this.bpadding == 0)  ==>  (this.ymax == orig(this.ymax))
(this.bpadding == 0)  ==>  (this.ymin == 1)
arg0.xpower >= 0
arg0.ypower == 0
arg0.ypowerend >= 0
this.ymax >= orig(this.ymax)
this.fpadding >= orig(this.fpadding)
this.bpadding >= orig(this.bpadding)
size(this.coefficients[]) >= orig(size(this.coefficients[]))
size(this.coefficients[])-1 != orig(size(this.coefficients[]))
size(this.coefficients[])-1 >= orig(size(this.coefficients[]))-1
===========================================================================
polynomial.YTerms.times(polynomial.YTerms):::ENTER
this.ymin one of { 0, 1, 2 }
this.fpadding one of { 0, 1, 2 }
arg0 != null
arg0.ymin >= 0
arg0.ymax >= 0
arg0.fpadding one of { 0, 1 }
arg0.bpadding >= 0
arg0.coefficients != null
arg0.coefficients.getClass().getName() == java.math.BigInteger[].class
arg0.coefficients[] elements != null
arg0.coefficients[].getClass().getName() elements == java.math.BigInteger.class
size(arg0.coefficients[]) >= 2
===========================================================================
polynomial.YTerms.times(polynomial.YTerms):::EXIT200
this.ymin == orig(this.ymin)
this.ymax == orig(this.ymax)
this.fpadding == orig(this.fpadding)
this.bpadding == orig(this.bpadding)
this.coefficients == orig(this.coefficients)
this.ymin == 1
this.ymax == 0
this.fpadding == 0
this.bpadding == 0
this.coefficients == null
===========================================================================
polynomial.YTerms.times(polynomial.YTerms):::EXIT224
this.coefficients != null
orig(this.coefficients) != null
===========================================================================
polynomial.YTerms.times(polynomial.YTerms):::EXIT
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
arg0.ymin == orig(arg0.ymin)
arg0.ymax == orig(arg0.ymax)
arg0.fpadding == orig(arg0.fpadding)
arg0.bpadding == orig(arg0.bpadding)
arg0.coefficients == orig(arg0.coefficients)
arg0.coefficients.getClass().getName() == orig(arg0.coefficients.getClass().getName())
arg0.coefficients[] == orig(arg0.coefficients[])
(this.coefficients != null)  <==>  (orig(this.coefficients) != null)
(this.coefficients != null)  ==>  (orig(size(this.coefficients[])) >= 2)
(this.coefficients != null)  ==>  (orig(this.coefficients[]) elements != null)
(this.coefficients != null)  ==>  (orig(this.coefficients[].getClass().getName()) elements == java.math.BigInteger.class)
(this.coefficients != null)  ==>  (orig(this.fpadding) one of { 0, 1, 2 })
(this.coefficients != null)  ==>  (orig(this.ymin) one of { 0, 1, 2 })
(this.coefficients != null)  ==>  (size(this.coefficients[]) >= 2)
(this.coefficients != null)  ==>  (size(this.coefficients[]) >= orig(size(this.coefficients[])))
(this.coefficients != null)  ==>  (size(this.coefficients[])-1 != orig(size(this.coefficients[])))
(this.coefficients != null)  ==>  (size(this.coefficients[])-1 >= orig(size(this.coefficients[]))-1)
(this.coefficients != null)  ==>  (this.coefficients.getClass().getName() == java.math.BigInteger[].class)
(this.coefficients != null)  ==>  (this.coefficients[] elements != null)
(this.coefficients != null)  ==>  (this.coefficients[].getClass().getName() elements == java.math.BigInteger.class)
(this.coefficients != null)  ==>  (this.fpadding one of { 0, 1, 2 })
(this.coefficients == null)  <==>  (orig(this.coefficients) == null)
(this.coefficients == null)  ==>  (orig(this.bpadding) == 0)
(this.coefficients == null)  ==>  (orig(this.fpadding) == 0)
(this.coefficients == null)  ==>  (orig(this.ymax) == 0)
(this.coefficients == null)  ==>  (orig(this.ymin) == 1)
(this.coefficients == null)  ==>  (this.bpadding == 0)
(this.coefficients == null)  ==>  (this.bpadding == orig(this.bpadding))
(this.coefficients == null)  ==>  (this.coefficients == orig(this.coefficients))
(this.coefficients == null)  ==>  (this.fpadding == 0)
(this.coefficients == null)  ==>  (this.fpadding == orig(this.fpadding))
(this.coefficients == null)  ==>  (this.ymax == 0)
(this.coefficients == null)  ==>  (this.ymax == orig(this.ymax))
(this.coefficients == null)  ==>  (this.ymin == 1)
(this.coefficients == null)  ==>  (this.ymin == orig(this.ymin))
this.fpadding one of { 0, 1, 2 }
arg0.ymin >= 0
arg0.ymax >= 0
arg0.fpadding one of { 0, 1 }
arg0.bpadding >= 0
arg0.coefficients != null
arg0.coefficients.getClass().getName() == java.math.BigInteger[].class
arg0.coefficients[] elements != null
arg0.coefficients[].getClass().getName() elements == java.math.BigInteger.class
size(arg0.coefficients[]) >= 2
this.ymin >= orig(this.ymin)
this.ymax >= orig(this.ymax)
this.fpadding >= orig(this.fpadding)
this.bpadding >= orig(this.bpadding)
size(this.coefficients[]) >= orig(size(this.coefficients[]))
size(this.coefficients[])-1 != orig(size(this.coefficients[]))
size(this.coefficients[])-1 >= orig(size(this.coefficients[]))-1
===========================================================================
selection.HeuristicCollection:::CLASS
===========================================================================
selection.HeuristicCollection:::OBJECT
this.edge_selection_heuristic == 6
===========================================================================
selection.HeuristicCollection.HeuristicCollection(int):::ENTER
arg0 == 6
===========================================================================
selection.HeuristicCollection.HeuristicCollection(int):::EXIT
===========================================================================
selection.HeuristicCollection.select_edge(graph.Graph, boolean):::ENTER
arg0 != null
arg0.graph != null
arg0.graph.numMultiEdges >= 0
arg0.graph.edges != null
arg0.graph.vertices != null
arg0.graph.vertices[] elements >= -1
arg0.graph.startVertex one of { 0, 1, 2 }
arg0.nartics == 1
arg0.ncomponents == 1
arg0.label[] elements >= 0
arg0.datae != null
arg0.datae.vindex == 0
arg0.datae.visited != null
arg0.datae.visited[] == []
arg0.datae.visited[].getClass().getName() == []
arg0.datae.visited.getClass().getName() == java.util.ArrayList.class
arg0.datae.lowlink != null
arg0.datae.lowlink[] == []
arg0.datae.lowlink[].getClass().getName() == []
arg0.datae.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datae.dfsnum != null
arg0.datae.dfsnum[] == []
arg0.datae.dfsnum[].getClass().getName() == []
arg0.datae.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datae.cstack != null
arg0.datae.cstack[] == []
arg0.datae.cstack[].getClass().getName() == []
arg0.datae.cstack.getClass().getName() == java.util.ArrayList.class
arg0.datac != null
arg0.datac.visited != null
arg0.datac.visited[] elements != null
arg0.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg0.datac.visited.getClass().getName() == java.util.ArrayList.class
arg0.datac.lowlink != null
arg0.datac.lowlink[] elements != null
arg0.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datac.dfsnum != null
arg0.datac.dfsnum[] elements != null
arg0.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datac.cstack != null
arg0.datac.cstack[] == []
arg0.datac.cstack[].getClass().getName() == []
arg0.datac.cstack.getClass().getName() == java.util.ArrayList.class
arg1 == true
===========================================================================
selection.HeuristicCollection.select_edge(graph.Graph, boolean):::EXIT148
===========================================================================
selection.HeuristicCollection.select_edge(graph.Graph, boolean):::EXIT
this.edge_selection_heuristic == orig(this.edge_selection_heuristic)
arg0.graph == orig(arg0.graph)
arg0.graph.numEdges == orig(arg0.graph.numEdges)
arg0.graph.domainSize == orig(arg0.graph.domainSize)
arg0.graph.numMultiEdges == orig(arg0.graph.numMultiEdges)
arg0.graph.edges == orig(arg0.graph.edges)
arg0.graph.edges[] == orig(arg0.graph.edges[])
arg0.graph.numVertices == orig(arg0.graph.numVertices)
arg0.graph.vertices == orig(arg0.graph.vertices)
arg0.graph.vertices[] == orig(arg0.graph.vertices[])
arg0.graph.startVertex == orig(arg0.graph.startVertex)
arg0.nartics == orig(arg0.nartics)
arg0.ncomponents == orig(arg0.ncomponents)
arg0.label == orig(arg0.label)
arg0.label[] == orig(arg0.label[])
arg0.datae == orig(arg0.datae)
arg0.datae.vindex == orig(arg0.datae.vindex)
arg0.datae.visited == orig(arg0.datae.visited)
arg0.datae.visited[] == orig(arg0.datae.visited[])
arg0.datae.visited.getClass().getName() == orig(arg0.datae.visited.getClass().getName())
arg0.datae.lowlink == orig(arg0.datae.lowlink)
arg0.datae.lowlink[] == orig(arg0.datae.lowlink[])
arg0.datae.lowlink.getClass().getName() == orig(arg0.datae.lowlink.getClass().getName())
arg0.datae.dfsnum == orig(arg0.datae.dfsnum)
arg0.datae.dfsnum[] == orig(arg0.datae.dfsnum[])
arg0.datae.dfsnum.getClass().getName() == orig(arg0.datae.dfsnum.getClass().getName())
arg0.datae.cstack == orig(arg0.datae.cstack)
arg0.datae.cstack[] == orig(arg0.datae.cstack[])
arg0.datae.cstack.getClass().getName() == orig(arg0.datae.cstack.getClass().getName())
arg0.datac == orig(arg0.datac)
arg0.datac.vindex == orig(arg0.datac.vindex)
arg0.datac.visited == orig(arg0.datac.visited)
arg0.datac.visited[] == orig(arg0.datac.visited[])
arg0.datac.visited.getClass().getName() == orig(arg0.datac.visited.getClass().getName())
arg0.datac.lowlink == orig(arg0.datac.lowlink)
arg0.datac.lowlink[] == orig(arg0.datac.lowlink[])
arg0.datac.lowlink.getClass().getName() == orig(arg0.datac.lowlink.getClass().getName())
arg0.datac.dfsnum == orig(arg0.datac.dfsnum)
arg0.datac.dfsnum[] == orig(arg0.datac.dfsnum[])
arg0.datac.dfsnum.getClass().getName() == orig(arg0.datac.dfsnum.getClass().getName())
arg0.datac.cstack == orig(arg0.datac.cstack)
arg0.datac.cstack[] == orig(arg0.datac.cstack[])
arg0.datac.cstack.getClass().getName() == orig(arg0.datac.cstack.getClass().getName())
arg0.graph != null
arg0.graph.numMultiEdges >= 0
arg0.graph.edges != null
arg0.graph.vertices != null
arg0.graph.vertices[] elements >= -1
arg0.graph.startVertex one of { 0, 1, 2 }
arg0.nartics == 1
arg0.ncomponents == 1
arg0.label[] elements >= 0
arg0.datae != null
arg0.datae.vindex == 0
arg0.datae.visited != null
arg0.datae.visited[] == []
arg0.datae.visited[].getClass().getName() == []
arg0.datae.visited.getClass().getName() == java.util.ArrayList.class
arg0.datae.lowlink != null
arg0.datae.lowlink[] == []
arg0.datae.lowlink[].getClass().getName() == []
arg0.datae.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datae.dfsnum != null
arg0.datae.dfsnum[] == []
arg0.datae.dfsnum[].getClass().getName() == []
arg0.datae.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datae.cstack != null
arg0.datae.cstack[] == []
arg0.datae.cstack[].getClass().getName() == []
arg0.datae.cstack.getClass().getName() == java.util.ArrayList.class
arg0.datac != null
arg0.datac.visited != null
arg0.datac.visited[] elements != null
arg0.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg0.datac.visited.getClass().getName() == java.util.ArrayList.class
arg0.datac.lowlink != null
arg0.datac.lowlink[] elements != null
arg0.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datac.dfsnum != null
arg0.datac.dfsnum[] elements != null
arg0.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datac.cstack != null
arg0.datac.cstack[] == []
arg0.datac.cstack[].getClass().getName() == []
arg0.datac.cstack.getClass().getName() == java.util.ArrayList.class
return != null
return.first != null
return.first.getClass().getName() == java.lang.Integer.class
return.second != null
return.second.getClass().getName() == java.lang.Integer.class
return.third != null
return.third.getClass().getName() == java.lang.Integer.class
===========================================================================
util.Cache:::CLASS
===========================================================================
util.Cache:::OBJECT
this.data != null
this.data.getClass().getName() == java.util.HashMap.class
this.delete_prop == 0.5
this.acesses >= 0
this.misses >= 0
===========================================================================
util.Cache.Cache():::EXIT
this.acesses == 0
this.misses == 0
===========================================================================
util.Cache.add(graph.Graph, polynomial.FactorPoly):::ENTER
this.acesses >= 1
this.misses >= 1
arg0 != null
arg0.graph != null
arg0.graph.numMultiEdges >= 0
arg0.graph.edges != null
arg0.graph.vertices != null
arg0.graph.vertices[] elements >= -1
arg0.graph.startVertex one of { 0, 1, 2 }
arg0.ncomponents one of { 1, 2, 3 }
arg0.label == null
arg0.datae != null
arg0.datae.vindex == 0
arg0.datae.visited != null
arg0.datae.visited[] == []
arg0.datae.visited[].getClass().getName() == []
arg0.datae.visited.getClass().getName() == java.util.ArrayList.class
arg0.datae.lowlink != null
arg0.datae.lowlink[] == []
arg0.datae.lowlink[].getClass().getName() == []
arg0.datae.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datae.dfsnum != null
arg0.datae.dfsnum[] == []
arg0.datae.dfsnum[].getClass().getName() == []
arg0.datae.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datae.cstack != null
arg0.datae.cstack[] == []
arg0.datae.cstack[].getClass().getName() == []
arg0.datae.cstack.getClass().getName() == java.util.ArrayList.class
arg0.datac != null
arg0.datac.visited != null
arg0.datac.visited[] elements != null
arg0.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg0.datac.visited.getClass().getName() == java.util.ArrayList.class
arg0.datac.lowlink != null
arg0.datac.lowlink[] elements != null
arg0.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datac.dfsnum != null
arg0.datac.dfsnum[] elements != null
arg0.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datac.cstack != null
arg0.datac.cstack[] == []
arg0.datac.cstack[].getClass().getName() == []
arg0.datac.cstack.getClass().getName() == java.util.ArrayList.class
arg1 != null
arg1.xterms != null
arg1.xterms.getClass().getName() == polynomial.YTerms[].class
arg1.xterms[] elements != null
arg1.xterms[].getClass().getName() elements == polynomial.YTerms.class
arg1.xterms[].ymin elements one of { 0, 1, 2 }
arg1.xterms[].ymax elements >= 0
arg1.xterms[].fpadding elements one of { 0, 1, 2 }
arg1.xterms[].bpadding elements >= 0
===========================================================================
util.Cache.add(graph.Graph, polynomial.FactorPoly):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.delete_prop == orig(this.delete_prop)
this.acesses == orig(this.acesses)
this.misses == orig(this.misses)
arg0.graph == orig(arg0.graph)
arg0.graph.numEdges == orig(arg0.graph.numEdges)
arg0.graph.domainSize == orig(arg0.graph.domainSize)
arg0.graph.numMultiEdges == orig(arg0.graph.numMultiEdges)
arg0.graph.edges == orig(arg0.graph.edges)
arg0.graph.edges[] == orig(arg0.graph.edges[])
arg0.graph.numVertices == orig(arg0.graph.numVertices)
arg0.graph.vertices == orig(arg0.graph.vertices)
arg0.graph.vertices[] == orig(arg0.graph.vertices[])
arg0.graph.startVertex == orig(arg0.graph.startVertex)
arg0.nartics == orig(arg0.nartics)
arg0.ncomponents == orig(arg0.ncomponents)
arg0.label == orig(arg0.label)
arg0.datae == orig(arg0.datae)
arg0.datae.vindex == orig(arg0.datae.vindex)
arg0.datae.visited == orig(arg0.datae.visited)
arg0.datae.visited[] == orig(arg0.datae.visited[])
arg0.datae.visited.getClass().getName() == orig(arg0.datae.visited.getClass().getName())
arg0.datae.lowlink == orig(arg0.datae.lowlink)
arg0.datae.lowlink[] == orig(arg0.datae.lowlink[])
arg0.datae.lowlink.getClass().getName() == orig(arg0.datae.lowlink.getClass().getName())
arg0.datae.dfsnum == orig(arg0.datae.dfsnum)
arg0.datae.dfsnum[] == orig(arg0.datae.dfsnum[])
arg0.datae.dfsnum.getClass().getName() == orig(arg0.datae.dfsnum.getClass().getName())
arg0.datae.cstack == orig(arg0.datae.cstack)
arg0.datae.cstack[] == orig(arg0.datae.cstack[])
arg0.datae.cstack.getClass().getName() == orig(arg0.datae.cstack.getClass().getName())
arg0.datac == orig(arg0.datac)
arg0.datac.vindex == orig(arg0.datac.vindex)
arg0.datac.visited == orig(arg0.datac.visited)
arg0.datac.visited[] == orig(arg0.datac.visited[])
arg0.datac.visited.getClass().getName() == orig(arg0.datac.visited.getClass().getName())
arg0.datac.lowlink == orig(arg0.datac.lowlink)
arg0.datac.lowlink[] == orig(arg0.datac.lowlink[])
arg0.datac.lowlink.getClass().getName() == orig(arg0.datac.lowlink.getClass().getName())
arg0.datac.dfsnum == orig(arg0.datac.dfsnum)
arg0.datac.dfsnum[] == orig(arg0.datac.dfsnum[])
arg0.datac.dfsnum.getClass().getName() == orig(arg0.datac.dfsnum.getClass().getName())
arg0.datac.cstack == orig(arg0.datac.cstack)
arg0.datac.cstack[] == orig(arg0.datac.cstack[])
arg0.datac.cstack.getClass().getName() == orig(arg0.datac.cstack.getClass().getName())
arg1.xterms == orig(arg1.xterms)
arg1.xterms.getClass().getName() == orig(arg1.xterms.getClass().getName())
arg1.xterms[] == orig(arg1.xterms[])
arg1.xterms[].ymin == orig(arg1.xterms[].ymin)
arg1.xterms[].ymax == orig(arg1.xterms[].ymax)
arg1.xterms[].fpadding == orig(arg1.xterms[].fpadding)
arg1.xterms[].bpadding == orig(arg1.xterms[].bpadding)
arg1.xterms[].coefficients == orig(arg1.xterms[].coefficients)
arg1.nxterms == orig(arg1.nxterms)
this.acesses >= 1
this.misses >= 1
arg0.graph != null
arg0.graph.numMultiEdges >= 0
arg0.graph.edges != null
arg0.graph.vertices != null
arg0.graph.vertices[] elements >= -1
arg0.graph.startVertex one of { 0, 1, 2 }
arg0.ncomponents one of { 1, 2, 3 }
arg0.label == null
arg0.datae != null
arg0.datae.vindex == 0
arg0.datae.visited != null
arg0.datae.visited[] == []
arg0.datae.visited[].getClass().getName() == []
arg0.datae.visited.getClass().getName() == java.util.ArrayList.class
arg0.datae.lowlink != null
arg0.datae.lowlink[] == []
arg0.datae.lowlink[].getClass().getName() == []
arg0.datae.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datae.dfsnum != null
arg0.datae.dfsnum[] == []
arg0.datae.dfsnum[].getClass().getName() == []
arg0.datae.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datae.cstack != null
arg0.datae.cstack[] == []
arg0.datae.cstack[].getClass().getName() == []
arg0.datae.cstack.getClass().getName() == java.util.ArrayList.class
arg0.datac != null
arg0.datac.visited != null
arg0.datac.visited[] elements != null
arg0.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg0.datac.visited.getClass().getName() == java.util.ArrayList.class
arg0.datac.lowlink != null
arg0.datac.lowlink[] elements != null
arg0.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datac.dfsnum != null
arg0.datac.dfsnum[] elements != null
arg0.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datac.cstack != null
arg0.datac.cstack[] == []
arg0.datac.cstack[].getClass().getName() == []
arg0.datac.cstack.getClass().getName() == java.util.ArrayList.class
arg1.xterms != null
arg1.xterms.getClass().getName() == polynomial.YTerms[].class
arg1.xterms[] elements != null
arg1.xterms[].getClass().getName() elements == polynomial.YTerms.class
arg1.xterms[].ymin elements one of { 0, 1, 2 }
arg1.xterms[].ymax elements >= 0
arg1.xterms[].fpadding elements one of { 0, 1, 2 }
arg1.xterms[].bpadding elements >= 0
===========================================================================
util.Cache.get(graph.Graph):::ENTER
arg0 != null
arg0.graph != null
arg0.graph.numMultiEdges >= 0
arg0.graph.edges != null
arg0.graph.vertices != null
arg0.graph.vertices[] elements >= -1
arg0.graph.startVertex one of { 0, 1, 2 }
arg0.ncomponents one of { 1, 2, 3 }
arg0.label == null
arg0.datae != null
arg0.datae.vindex == 0
arg0.datae.visited != null
arg0.datae.visited[] == []
arg0.datae.visited[].getClass().getName() == []
arg0.datae.visited.getClass().getName() == java.util.ArrayList.class
arg0.datae.lowlink != null
arg0.datae.lowlink[] == []
arg0.datae.lowlink[].getClass().getName() == []
arg0.datae.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datae.dfsnum != null
arg0.datae.dfsnum[] == []
arg0.datae.dfsnum[].getClass().getName() == []
arg0.datae.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datae.cstack != null
arg0.datae.cstack[] == []
arg0.datae.cstack[].getClass().getName() == []
arg0.datae.cstack.getClass().getName() == java.util.ArrayList.class
arg0.datac != null
arg0.datac.visited != null
arg0.datac.visited[] elements != null
arg0.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg0.datac.visited.getClass().getName() == java.util.ArrayList.class
arg0.datac.lowlink != null
arg0.datac.lowlink[] elements != null
arg0.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datac.dfsnum != null
arg0.datac.dfsnum[] elements != null
arg0.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datac.cstack != null
arg0.datac.cstack[] == []
arg0.datac.cstack[].getClass().getName() == []
arg0.datac.cstack.getClass().getName() == java.util.ArrayList.class
===========================================================================
util.Cache.get(graph.Graph):::EXIT63
===========================================================================
util.Cache.get(graph.Graph):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.delete_prop == orig(this.delete_prop)
arg0.graph == orig(arg0.graph)
arg0.graph.numEdges == orig(arg0.graph.numEdges)
arg0.graph.domainSize == orig(arg0.graph.domainSize)
arg0.graph.numMultiEdges == orig(arg0.graph.numMultiEdges)
arg0.graph.edges == orig(arg0.graph.edges)
arg0.graph.edges[] == orig(arg0.graph.edges[])
arg0.graph.numVertices == orig(arg0.graph.numVertices)
arg0.graph.vertices == orig(arg0.graph.vertices)
arg0.graph.vertices[] == orig(arg0.graph.vertices[])
arg0.graph.startVertex == orig(arg0.graph.startVertex)
arg0.nartics == orig(arg0.nartics)
arg0.ncomponents == orig(arg0.ncomponents)
arg0.datae == orig(arg0.datae)
arg0.datae.vindex == orig(arg0.datae.vindex)
arg0.datae.visited == orig(arg0.datae.visited)
arg0.datae.visited[] == orig(arg0.datae.visited[])
arg0.datae.visited.getClass().getName() == orig(arg0.datae.visited.getClass().getName())
arg0.datae.lowlink == orig(arg0.datae.lowlink)
arg0.datae.lowlink[] == orig(arg0.datae.lowlink[])
arg0.datae.lowlink.getClass().getName() == orig(arg0.datae.lowlink.getClass().getName())
arg0.datae.dfsnum == orig(arg0.datae.dfsnum)
arg0.datae.dfsnum[] == orig(arg0.datae.dfsnum[])
arg0.datae.dfsnum.getClass().getName() == orig(arg0.datae.dfsnum.getClass().getName())
arg0.datae.cstack == orig(arg0.datae.cstack)
arg0.datae.cstack[] == orig(arg0.datae.cstack[])
arg0.datae.cstack.getClass().getName() == orig(arg0.datae.cstack.getClass().getName())
arg0.datac == orig(arg0.datac)
arg0.datac.vindex == orig(arg0.datac.vindex)
arg0.datac.visited == orig(arg0.datac.visited)
arg0.datac.visited[] == orig(arg0.datac.visited[])
arg0.datac.visited.getClass().getName() == orig(arg0.datac.visited.getClass().getName())
arg0.datac.lowlink == orig(arg0.datac.lowlink)
arg0.datac.lowlink[] == orig(arg0.datac.lowlink[])
arg0.datac.lowlink.getClass().getName() == orig(arg0.datac.lowlink.getClass().getName())
arg0.datac.dfsnum == orig(arg0.datac.dfsnum)
arg0.datac.dfsnum[] == orig(arg0.datac.dfsnum[])
arg0.datac.dfsnum.getClass().getName() == orig(arg0.datac.dfsnum.getClass().getName())
arg0.datac.cstack == orig(arg0.datac.cstack)
arg0.datac.cstack[] == orig(arg0.datac.cstack[])
arg0.datac.cstack.getClass().getName() == orig(arg0.datac.cstack.getClass().getName())
this.acesses >= 1
this.misses >= 1
arg0.graph != null
arg0.graph.numMultiEdges >= 0
arg0.graph.edges != null
arg0.graph.vertices != null
arg0.graph.vertices[] elements >= -1
arg0.graph.startVertex one of { 0, 1, 2 }
arg0.ncomponents one of { 1, 2, 3 }
arg0.label != null
arg0.datae != null
arg0.datae.vindex == 0
arg0.datae.visited != null
arg0.datae.visited[] == []
arg0.datae.visited[].getClass().getName() == []
arg0.datae.visited.getClass().getName() == java.util.ArrayList.class
arg0.datae.lowlink != null
arg0.datae.lowlink[] == []
arg0.datae.lowlink[].getClass().getName() == []
arg0.datae.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datae.dfsnum != null
arg0.datae.dfsnum[] == []
arg0.datae.dfsnum[].getClass().getName() == []
arg0.datae.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datae.cstack != null
arg0.datae.cstack[] == []
arg0.datae.cstack[].getClass().getName() == []
arg0.datae.cstack.getClass().getName() == java.util.ArrayList.class
arg0.datac != null
arg0.datac.visited != null
arg0.datac.visited[] elements != null
arg0.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg0.datac.visited.getClass().getName() == java.util.ArrayList.class
arg0.datac.lowlink != null
arg0.datac.lowlink[] elements != null
arg0.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datac.dfsnum != null
arg0.datac.dfsnum[] elements != null
arg0.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datac.cstack != null
arg0.datac.cstack[] == []
arg0.datac.cstack[].getClass().getName() == []
arg0.datac.cstack.getClass().getName() == java.util.ArrayList.class
return == null
this.acesses - orig(this.acesses) - 1 == 0
this.misses - orig(this.misses) - 1 == 0
===========================================================================
util.Debug:::CLASS
util.Debug.debug == false
===========================================================================
util.Debug.debug(java.lang.Object):::ENTER
arg0 != null
===========================================================================
util.Debug.debug(java.lang.Object):::EXIT
util.Debug.debug == orig(util.Debug.debug)
===========================================================================
util.Isomorphism.canonicalLabel(graph.Graph):::ENTER
arg0 != null
arg0.graph != null
arg0.graph.numMultiEdges >= 0
arg0.graph.edges != null
arg0.graph.vertices != null
arg0.graph.vertices[] elements != 0
arg0.graph.vertices[] elements >= -1
arg0.graph.startVertex one of { 0, 1, 2 }
arg0.ncomponents one of { 1, 2, 3 }
arg0.label == null
arg0.datae != null
arg0.datae.vindex == 0
arg0.datae.visited != null
arg0.datae.visited[] == []
arg0.datae.visited[].getClass().getName() == []
arg0.datae.visited.getClass().getName() == java.util.ArrayList.class
arg0.datae.lowlink != null
arg0.datae.lowlink[] == []
arg0.datae.lowlink[].getClass().getName() == []
arg0.datae.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datae.dfsnum != null
arg0.datae.dfsnum[] == []
arg0.datae.dfsnum[].getClass().getName() == []
arg0.datae.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datae.cstack != null
arg0.datae.cstack[] == []
arg0.datae.cstack[].getClass().getName() == []
arg0.datae.cstack.getClass().getName() == java.util.ArrayList.class
arg0.datac != null
arg0.datac.visited != null
arg0.datac.visited[] elements != null
arg0.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg0.datac.visited.getClass().getName() == java.util.ArrayList.class
arg0.datac.lowlink != null
arg0.datac.lowlink[] elements != null
arg0.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datac.dfsnum != null
arg0.datac.dfsnum[] elements != null
arg0.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datac.cstack != null
arg0.datac.cstack[] == []
arg0.datac.cstack[].getClass().getName() == []
arg0.datac.cstack.getClass().getName() == java.util.ArrayList.class
===========================================================================
util.Isomorphism.canonicalLabel(graph.Graph):::EXIT
arg0.graph == orig(arg0.graph)
arg0.graph.numEdges == orig(arg0.graph.numEdges)
arg0.graph.domainSize == orig(arg0.graph.domainSize)
arg0.graph.numMultiEdges == orig(arg0.graph.numMultiEdges)
arg0.graph.edges == orig(arg0.graph.edges)
arg0.graph.edges[] == orig(arg0.graph.edges[])
arg0.graph.numVertices == orig(arg0.graph.numVertices)
arg0.graph.vertices == orig(arg0.graph.vertices)
arg0.graph.vertices[] == orig(arg0.graph.vertices[])
arg0.graph.startVertex == orig(arg0.graph.startVertex)
arg0.nartics == orig(arg0.nartics)
arg0.ncomponents == orig(arg0.ncomponents)
arg0.label == orig(arg0.label)
arg0.datae == orig(arg0.datae)
arg0.datae.vindex == orig(arg0.datae.vindex)
arg0.datae.visited == orig(arg0.datae.visited)
arg0.datae.visited[] == orig(arg0.datae.visited[])
arg0.datae.visited.getClass().getName() == orig(arg0.datae.visited.getClass().getName())
arg0.datae.lowlink == orig(arg0.datae.lowlink)
arg0.datae.lowlink[] == orig(arg0.datae.lowlink[])
arg0.datae.lowlink.getClass().getName() == orig(arg0.datae.lowlink.getClass().getName())
arg0.datae.dfsnum == orig(arg0.datae.dfsnum)
arg0.datae.dfsnum[] == orig(arg0.datae.dfsnum[])
arg0.datae.dfsnum.getClass().getName() == orig(arg0.datae.dfsnum.getClass().getName())
arg0.datae.cstack == orig(arg0.datae.cstack)
arg0.datae.cstack[] == orig(arg0.datae.cstack[])
arg0.datae.cstack.getClass().getName() == orig(arg0.datae.cstack.getClass().getName())
arg0.datac == orig(arg0.datac)
arg0.datac.vindex == orig(arg0.datac.vindex)
arg0.datac.visited == orig(arg0.datac.visited)
arg0.datac.visited[] == orig(arg0.datac.visited[])
arg0.datac.visited.getClass().getName() == orig(arg0.datac.visited.getClass().getName())
arg0.datac.lowlink == orig(arg0.datac.lowlink)
arg0.datac.lowlink[] == orig(arg0.datac.lowlink[])
arg0.datac.lowlink.getClass().getName() == orig(arg0.datac.lowlink.getClass().getName())
arg0.datac.dfsnum == orig(arg0.datac.dfsnum)
arg0.datac.dfsnum[] == orig(arg0.datac.dfsnum[])
arg0.datac.dfsnum.getClass().getName() == orig(arg0.datac.dfsnum.getClass().getName())
arg0.datac.cstack == orig(arg0.datac.cstack)
arg0.datac.cstack[] == orig(arg0.datac.cstack[])
arg0.datac.cstack.getClass().getName() == orig(arg0.datac.cstack.getClass().getName())
arg0.graph != null
arg0.graph.numMultiEdges >= 0
arg0.graph.edges != null
arg0.graph.vertices != null
arg0.graph.vertices[] elements != 0
arg0.graph.vertices[] elements >= -1
arg0.graph.startVertex one of { 0, 1, 2 }
arg0.ncomponents one of { 1, 2, 3 }
arg0.label == null
arg0.datae != null
arg0.datae.vindex == 0
arg0.datae.visited != null
arg0.datae.visited[] == []
arg0.datae.visited[].getClass().getName() == []
arg0.datae.visited.getClass().getName() == java.util.ArrayList.class
arg0.datae.lowlink != null
arg0.datae.lowlink[] == []
arg0.datae.lowlink[].getClass().getName() == []
arg0.datae.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datae.dfsnum != null
arg0.datae.dfsnum[] == []
arg0.datae.dfsnum[].getClass().getName() == []
arg0.datae.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datae.cstack != null
arg0.datae.cstack[] == []
arg0.datae.cstack[].getClass().getName() == []
arg0.datae.cstack.getClass().getName() == java.util.ArrayList.class
arg0.datac != null
arg0.datac.visited != null
arg0.datac.visited[] elements != null
arg0.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg0.datac.visited.getClass().getName() == java.util.ArrayList.class
arg0.datac.lowlink != null
arg0.datac.lowlink[] elements != null
arg0.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datac.dfsnum != null
arg0.datac.dfsnum[] elements != null
arg0.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datac.cstack != null
arg0.datac.cstack[] == []
arg0.datac.cstack[].getClass().getName() == []
arg0.datac.cstack.getClass().getName() == java.util.ArrayList.class
return != null
===========================================================================
util.Isomorphism.d(int, java.util.Set, graph.Graph):::ENTER
arg0 >= 0
arg1 != null
arg1.getClass().getName() == java.util.TreeSet.class
arg2 != null
arg2.graph != null
arg2.graph.numMultiEdges >= 0
arg2.graph.edges != null
arg2.graph.vertices != null
arg2.graph.vertices[] elements != 0
arg2.graph.vertices[] elements >= -1
arg2.graph.startVertex one of { 0, 1, 2 }
arg2.nartics >= 1
arg2.ncomponents one of { 1, 2, 3 }
arg2.label == null
arg2.datae != null
arg2.datae.vindex == 0
arg2.datae.visited != null
arg2.datae.visited[] == []
arg2.datae.visited[].getClass().getName() == []
arg2.datae.visited.getClass().getName() == java.util.ArrayList.class
arg2.datae.lowlink != null
arg2.datae.lowlink[] == []
arg2.datae.lowlink[].getClass().getName() == []
arg2.datae.lowlink.getClass().getName() == java.util.ArrayList.class
arg2.datae.dfsnum != null
arg2.datae.dfsnum[] == []
arg2.datae.dfsnum[].getClass().getName() == []
arg2.datae.dfsnum.getClass().getName() == java.util.ArrayList.class
arg2.datae.cstack != null
arg2.datae.cstack[] == []
arg2.datae.cstack[].getClass().getName() == []
arg2.datae.cstack.getClass().getName() == java.util.ArrayList.class
arg2.datac != null
arg2.datac.visited != null
arg2.datac.visited[] elements != null
arg2.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg2.datac.visited.getClass().getName() == java.util.ArrayList.class
arg2.datac.lowlink != null
arg2.datac.lowlink[] elements != null
arg2.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg2.datac.lowlink.getClass().getName() == java.util.ArrayList.class
arg2.datac.dfsnum != null
arg2.datac.dfsnum[] elements != null
arg2.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg2.datac.dfsnum.getClass().getName() == java.util.ArrayList.class
arg2.datac.cstack != null
arg2.datac.cstack[] == []
arg2.datac.cstack[].getClass().getName() == []
arg2.datac.cstack.getClass().getName() == java.util.ArrayList.class
===========================================================================
util.Isomorphism.d(int, java.util.Set, graph.Graph):::EXIT
arg2.graph == orig(arg2.graph)
arg2.graph.numEdges == orig(arg2.graph.numEdges)
arg2.graph.domainSize == orig(arg2.graph.domainSize)
arg2.graph.numMultiEdges == orig(arg2.graph.numMultiEdges)
arg2.graph.edges == orig(arg2.graph.edges)
arg2.graph.edges[] == orig(arg2.graph.edges[])
arg2.graph.numVertices == orig(arg2.graph.numVertices)
arg2.graph.vertices == orig(arg2.graph.vertices)
arg2.graph.vertices[] == orig(arg2.graph.vertices[])
arg2.graph.startVertex == orig(arg2.graph.startVertex)
arg2.nartics == orig(arg2.nartics)
arg2.ncomponents == orig(arg2.ncomponents)
arg2.label == orig(arg2.label)
arg2.datae == orig(arg2.datae)
arg2.datae.vindex == orig(arg2.datae.vindex)
arg2.datae.visited == orig(arg2.datae.visited)
arg2.datae.visited[] == orig(arg2.datae.visited[])
arg2.datae.visited.getClass().getName() == orig(arg2.datae.visited.getClass().getName())
arg2.datae.lowlink == orig(arg2.datae.lowlink)
arg2.datae.lowlink[] == orig(arg2.datae.lowlink[])
arg2.datae.lowlink.getClass().getName() == orig(arg2.datae.lowlink.getClass().getName())
arg2.datae.dfsnum == orig(arg2.datae.dfsnum)
arg2.datae.dfsnum[] == orig(arg2.datae.dfsnum[])
arg2.datae.dfsnum.getClass().getName() == orig(arg2.datae.dfsnum.getClass().getName())
arg2.datae.cstack == orig(arg2.datae.cstack)
arg2.datae.cstack[] == orig(arg2.datae.cstack[])
arg2.datae.cstack.getClass().getName() == orig(arg2.datae.cstack.getClass().getName())
arg2.datac == orig(arg2.datac)
arg2.datac.vindex == orig(arg2.datac.vindex)
arg2.datac.visited == orig(arg2.datac.visited)
arg2.datac.visited[] == orig(arg2.datac.visited[])
arg2.datac.visited.getClass().getName() == orig(arg2.datac.visited.getClass().getName())
arg2.datac.lowlink == orig(arg2.datac.lowlink)
arg2.datac.lowlink[] == orig(arg2.datac.lowlink[])
arg2.datac.lowlink.getClass().getName() == orig(arg2.datac.lowlink.getClass().getName())
arg2.datac.dfsnum == orig(arg2.datac.dfsnum)
arg2.datac.dfsnum[] == orig(arg2.datac.dfsnum[])
arg2.datac.dfsnum.getClass().getName() == orig(arg2.datac.dfsnum.getClass().getName())
arg2.datac.cstack == orig(arg2.datac.cstack)
arg2.datac.cstack[] == orig(arg2.datac.cstack[])
arg2.datac.cstack.getClass().getName() == orig(arg2.datac.cstack.getClass().getName())
arg2.graph != null
arg2.graph.numMultiEdges >= 0
arg2.graph.edges != null
arg2.graph.vertices != null
arg2.graph.vertices[] elements != 0
arg2.graph.vertices[] elements >= -1
arg2.graph.startVertex one of { 0, 1, 2 }
arg2.nartics >= 1
arg2.ncomponents one of { 1, 2, 3 }
arg2.label == null
arg2.datae != null
arg2.datae.vindex == 0
arg2.datae.visited != null
arg2.datae.visited[] == []
arg2.datae.visited[].getClass().getName() == []
arg2.datae.visited.getClass().getName() == java.util.ArrayList.class
arg2.datae.lowlink != null
arg2.datae.lowlink[] == []
arg2.datae.lowlink[].getClass().getName() == []
arg2.datae.lowlink.getClass().getName() == java.util.ArrayList.class
arg2.datae.dfsnum != null
arg2.datae.dfsnum[] == []
arg2.datae.dfsnum[].getClass().getName() == []
arg2.datae.dfsnum.getClass().getName() == java.util.ArrayList.class
arg2.datae.cstack != null
arg2.datae.cstack[] == []
arg2.datae.cstack[].getClass().getName() == []
arg2.datae.cstack.getClass().getName() == java.util.ArrayList.class
arg2.datac != null
arg2.datac.visited != null
arg2.datac.visited[] elements != null
arg2.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg2.datac.visited.getClass().getName() == java.util.ArrayList.class
arg2.datac.lowlink != null
arg2.datac.lowlink[] elements != null
arg2.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg2.datac.lowlink.getClass().getName() == java.util.ArrayList.class
arg2.datac.dfsnum != null
arg2.datac.dfsnum[] elements != null
arg2.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg2.datac.dfsnum.getClass().getName() == java.util.ArrayList.class
arg2.datac.cstack != null
arg2.datac.cstack[] == []
arg2.datac.cstack[].getClass().getName() == []
arg2.datac.cstack.getClass().getName() == java.util.ArrayList.class
return >= 0
===========================================================================
util.Isomorphism.discrete(java.util.List):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == java.util.TreeSet.class
arg0.getClass().getName() == java.util.ArrayList.class
===========================================================================
util.Isomorphism.discrete(java.util.List):::EXIT241
return == false
===========================================================================
util.Isomorphism.discrete(java.util.List):::EXIT241;condition="not(return == true)"
===========================================================================
util.Isomorphism.discrete(java.util.List):::EXIT244
return == true
===========================================================================
util.Isomorphism.discrete(java.util.List):::EXIT244;condition="return == true"
===========================================================================
util.Isomorphism.discrete(java.util.List):::EXIT
arg0[] == orig(arg0[])
arg0[] elements != null
arg0[].getClass().getName() elements == java.util.TreeSet.class
===========================================================================
util.Isomorphism.discrete(java.util.List):::EXIT;condition="return == true"
return == true
===========================================================================
util.Isomorphism.discrete(java.util.List):::EXIT;condition="not(return == true)"
return == false
===========================================================================
util.Isomorphism.equitableRefinement(graph.Graph, java.util.List, java.util.List):::ENTER
arg0 != null
arg0.graph != null
arg0.graph.numMultiEdges >= 0
arg0.graph.edges != null
arg0.graph.vertices != null
arg0.graph.vertices[] elements != 0
arg0.graph.vertices[] elements >= -1
arg0.graph.startVertex one of { 0, 1, 2 }
arg0.nartics >= 1
arg0.ncomponents one of { 1, 2, 3 }
arg0.label == null
arg0.datae != null
arg0.datae.vindex == 0
arg0.datae.visited != null
arg0.datae.visited[] == []
arg0.datae.visited[].getClass().getName() == []
arg0.datae.visited.getClass().getName() == java.util.ArrayList.class
arg0.datae.lowlink != null
arg0.datae.lowlink[] == []
arg0.datae.lowlink[].getClass().getName() == []
arg0.datae.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datae.dfsnum != null
arg0.datae.dfsnum[] == []
arg0.datae.dfsnum[].getClass().getName() == []
arg0.datae.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datae.cstack != null
arg0.datae.cstack[] == []
arg0.datae.cstack[].getClass().getName() == []
arg0.datae.cstack.getClass().getName() == java.util.ArrayList.class
arg0.datac != null
arg0.datac.visited != null
arg0.datac.visited[] elements != null
arg0.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg0.datac.visited.getClass().getName() == java.util.ArrayList.class
arg0.datac.lowlink != null
arg0.datac.lowlink[] elements != null
arg0.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datac.dfsnum != null
arg0.datac.dfsnum[] elements != null
arg0.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datac.cstack != null
arg0.datac.cstack[] == []
arg0.datac.cstack[].getClass().getName() == []
arg0.datac.cstack.getClass().getName() == java.util.ArrayList.class
arg1 != null
arg1[] elements != null
arg1[].getClass().getName() elements == java.util.TreeSet.class
arg1.getClass().getName() == java.util.ArrayList.class
arg2 != null
arg2[] elements != null
arg2[].getClass().getName() == [java.util.TreeSet]
arg2[].getClass().getName() elements == java.util.TreeSet.class
arg2.getClass().getName() == java.util.ArrayList.class
size(arg2[]) == 1
===========================================================================
util.Isomorphism.equitableRefinement(graph.Graph, java.util.List, java.util.List):::EXIT
arg0.graph == orig(arg0.graph)
arg0.graph.numEdges == orig(arg0.graph.numEdges)
arg0.graph.domainSize == orig(arg0.graph.domainSize)
arg0.graph.numMultiEdges == orig(arg0.graph.numMultiEdges)
arg0.graph.edges == orig(arg0.graph.edges)
arg0.graph.edges[] == orig(arg0.graph.edges[])
arg0.graph.numVertices == orig(arg0.graph.numVertices)
arg0.graph.vertices == orig(arg0.graph.vertices)
arg0.graph.vertices[] == orig(arg0.graph.vertices[])
arg0.graph.startVertex == orig(arg0.graph.startVertex)
arg0.nartics == orig(arg0.nartics)
arg0.ncomponents == orig(arg0.ncomponents)
arg0.label == orig(arg0.label)
arg0.datae == orig(arg0.datae)
arg0.datae.vindex == orig(arg0.datae.vindex)
arg0.datae.visited == orig(arg0.datae.visited)
arg0.datae.visited[] == orig(arg0.datae.visited[])
arg0.datae.visited.getClass().getName() == orig(arg0.datae.visited.getClass().getName())
arg0.datae.lowlink == orig(arg0.datae.lowlink)
arg0.datae.lowlink[] == orig(arg0.datae.lowlink[])
arg0.datae.lowlink.getClass().getName() == orig(arg0.datae.lowlink.getClass().getName())
arg0.datae.dfsnum == orig(arg0.datae.dfsnum)
arg0.datae.dfsnum[] == orig(arg0.datae.dfsnum[])
arg0.datae.dfsnum.getClass().getName() == orig(arg0.datae.dfsnum.getClass().getName())
arg0.datae.cstack == orig(arg0.datae.cstack)
arg0.datae.cstack[] == orig(arg0.datae.cstack[])
arg0.datae.cstack.getClass().getName() == orig(arg0.datae.cstack.getClass().getName())
arg0.datac == orig(arg0.datac)
arg0.datac.vindex == orig(arg0.datac.vindex)
arg0.datac.visited == orig(arg0.datac.visited)
arg0.datac.visited[] == orig(arg0.datac.visited[])
arg0.datac.visited.getClass().getName() == orig(arg0.datac.visited.getClass().getName())
arg0.datac.lowlink == orig(arg0.datac.lowlink)
arg0.datac.lowlink[] == orig(arg0.datac.lowlink[])
arg0.datac.lowlink.getClass().getName() == orig(arg0.datac.lowlink.getClass().getName())
arg0.datac.dfsnum == orig(arg0.datac.dfsnum)
arg0.datac.dfsnum[] == orig(arg0.datac.dfsnum[])
arg0.datac.dfsnum.getClass().getName() == orig(arg0.datac.dfsnum.getClass().getName())
arg0.datac.cstack == orig(arg0.datac.cstack)
arg0.datac.cstack[] == orig(arg0.datac.cstack[])
arg0.datac.cstack.getClass().getName() == orig(arg0.datac.cstack.getClass().getName())
arg0.graph != null
arg0.graph.numMultiEdges >= 0
arg0.graph.edges != null
arg0.graph.vertices != null
arg0.graph.vertices[] elements != 0
arg0.graph.vertices[] elements >= -1
arg0.graph.startVertex one of { 0, 1, 2 }
arg0.nartics >= 1
arg0.ncomponents one of { 1, 2, 3 }
arg0.label == null
arg0.datae != null
arg0.datae.vindex == 0
arg0.datae.visited != null
arg0.datae.visited[] == []
arg0.datae.visited[].getClass().getName() == []
arg0.datae.visited.getClass().getName() == java.util.ArrayList.class
arg0.datae.lowlink != null
arg0.datae.lowlink[] == []
arg0.datae.lowlink[].getClass().getName() == []
arg0.datae.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datae.dfsnum != null
arg0.datae.dfsnum[] == []
arg0.datae.dfsnum[].getClass().getName() == []
arg0.datae.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datae.cstack != null
arg0.datae.cstack[] == []
arg0.datae.cstack[].getClass().getName() == []
arg0.datae.cstack.getClass().getName() == java.util.ArrayList.class
arg0.datac != null
arg0.datac.visited != null
arg0.datac.visited[] elements != null
arg0.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg0.datac.visited.getClass().getName() == java.util.ArrayList.class
arg0.datac.lowlink != null
arg0.datac.lowlink[] elements != null
arg0.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datac.dfsnum != null
arg0.datac.dfsnum[] elements != null
arg0.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datac.cstack != null
arg0.datac.cstack[] == []
arg0.datac.cstack[].getClass().getName() == []
arg0.datac.cstack.getClass().getName() == java.util.ArrayList.class
arg1[] elements != null
arg1[].getClass().getName() elements == java.util.TreeSet.class
arg2[] elements != null
arg2[].getClass().getName() elements == java.util.TreeSet.class
return != null
return[] elements != null
return[].getClass().getName() elements == java.util.TreeSet.class
return.getClass().getName() == java.util.ArrayList.class
size(arg1[])-1 >= orig(size(arg1[]))-1
size(arg2[])-1 >= orig(size(arg2[]))-1
===========================================================================
util.Isomorphism.greaterThan(int[], int[]):::ENTER
arg0 != null
arg0[] elements >= 0
arg1 != null
arg1[] elements >= 0
===========================================================================
util.Isomorphism.greaterThan(int[], int[]):::EXIT135
===========================================================================
util.Isomorphism.greaterThan(int[], int[]):::EXIT135;condition="not(return == true)"
===========================================================================
util.Isomorphism.greaterThan(int[], int[]):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg0[] elements >= 0
arg1[] elements >= 0
return == false
===========================================================================
util.Isomorphism.greaterThan(int[], int[]):::EXIT;condition="not(return == true)"
===========================================================================
util.Isomorphism.greaterthan(long, long):::ENTER
arg0 >= 0
arg1 >= 0
===========================================================================
util.Isomorphism.greaterthan(long, long):::EXIT
return == false
===========================================================================
util.Isomorphism.greaterthan(long, long):::EXIT;condition="not(return == true)"
===========================================================================
util.Isomorphism.insert(int, java.lang.Object, java.util.List):::ENTER
arg0 >= 0
arg1 != null
arg1.getClass().getName() == java.util.TreeSet.class
arg2 != null
arg2[] elements != null
arg2[].getClass().getName() elements == java.util.TreeSet.class
arg2.getClass().getName() == java.util.ArrayList.class
size(arg2[]) >= 1
===========================================================================
util.Isomorphism.insert(int, java.lang.Object, java.util.List):::EXIT270
===========================================================================
util.Isomorphism.insert(int, java.lang.Object, java.util.List):::EXIT
size(arg2[])-1 == orig(size(arg2[]))
arg2[] elements != null
arg2[].getClass().getName() elements == java.util.TreeSet.class
===========================================================================
util.Isomorphism.lessthan(long, long):::ENTER
arg0 >= 0
arg1 >= 0
===========================================================================
util.Isomorphism.lessthan(long, long):::EXIT
return == false
===========================================================================
util.Isomorphism.lessthan(long, long):::EXIT;condition="not(return == true)"
===========================================================================
util.Isomorphism.partitionToMatrix(java.util.List, int, graph.Graph):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == java.util.TreeSet.class
arg0.getClass().getName() == java.util.ArrayList.class
arg2 != null
arg2.graph != null
arg2.graph.numMultiEdges >= 0
arg2.graph.edges != null
arg2.graph.vertices != null
arg2.graph.vertices[] elements != 0
arg2.graph.vertices[] elements >= -1
arg2.graph.startVertex one of { 0, 1, 2 }
arg2.nartics >= 1
arg2.ncomponents one of { 1, 2, 3 }
arg2.label == null
arg2.datae != null
arg2.datae.vindex == 0
arg2.datae.visited != null
arg2.datae.visited[] == []
arg2.datae.visited[].getClass().getName() == []
arg2.datae.visited.getClass().getName() == java.util.ArrayList.class
arg2.datae.lowlink != null
arg2.datae.lowlink[] == []
arg2.datae.lowlink[].getClass().getName() == []
arg2.datae.lowlink.getClass().getName() == java.util.ArrayList.class
arg2.datae.dfsnum != null
arg2.datae.dfsnum[] == []
arg2.datae.dfsnum[].getClass().getName() == []
arg2.datae.dfsnum.getClass().getName() == java.util.ArrayList.class
arg2.datae.cstack != null
arg2.datae.cstack[] == []
arg2.datae.cstack[].getClass().getName() == []
arg2.datae.cstack.getClass().getName() == java.util.ArrayList.class
arg2.datac != null
arg2.datac.visited != null
arg2.datac.visited[] elements != null
arg2.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg2.datac.visited.getClass().getName() == java.util.ArrayList.class
arg2.datac.lowlink != null
arg2.datac.lowlink[] elements != null
arg2.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg2.datac.lowlink.getClass().getName() == java.util.ArrayList.class
arg2.datac.dfsnum != null
arg2.datac.dfsnum[] elements != null
arg2.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg2.datac.dfsnum.getClass().getName() == java.util.ArrayList.class
arg2.datac.cstack != null
arg2.datac.cstack[] == []
arg2.datac.cstack[].getClass().getName() == []
arg2.datac.cstack.getClass().getName() == java.util.ArrayList.class
===========================================================================
util.Isomorphism.partitionToMatrix(java.util.List, int, graph.Graph):::EXIT
arg0[] == orig(arg0[])
arg2.graph == orig(arg2.graph)
arg2.graph.numEdges == orig(arg2.graph.numEdges)
arg2.graph.domainSize == orig(arg2.graph.domainSize)
arg2.graph.numMultiEdges == orig(arg2.graph.numMultiEdges)
arg2.graph.edges == orig(arg2.graph.edges)
arg2.graph.edges[] == orig(arg2.graph.edges[])
arg2.graph.numVertices == orig(arg2.graph.numVertices)
arg2.graph.vertices == orig(arg2.graph.vertices)
arg2.graph.vertices[] == orig(arg2.graph.vertices[])
arg2.graph.startVertex == orig(arg2.graph.startVertex)
arg2.nartics == orig(arg2.nartics)
arg2.ncomponents == orig(arg2.ncomponents)
arg2.label == orig(arg2.label)
arg2.datae == orig(arg2.datae)
arg2.datae.vindex == orig(arg2.datae.vindex)
arg2.datae.visited == orig(arg2.datae.visited)
arg2.datae.visited[] == orig(arg2.datae.visited[])
arg2.datae.visited.getClass().getName() == orig(arg2.datae.visited.getClass().getName())
arg2.datae.lowlink == orig(arg2.datae.lowlink)
arg2.datae.lowlink[] == orig(arg2.datae.lowlink[])
arg2.datae.lowlink.getClass().getName() == orig(arg2.datae.lowlink.getClass().getName())
arg2.datae.dfsnum == orig(arg2.datae.dfsnum)
arg2.datae.dfsnum[] == orig(arg2.datae.dfsnum[])
arg2.datae.dfsnum.getClass().getName() == orig(arg2.datae.dfsnum.getClass().getName())
arg2.datae.cstack == orig(arg2.datae.cstack)
arg2.datae.cstack[] == orig(arg2.datae.cstack[])
arg2.datae.cstack.getClass().getName() == orig(arg2.datae.cstack.getClass().getName())
arg2.datac == orig(arg2.datac)
arg2.datac.vindex == orig(arg2.datac.vindex)
arg2.datac.visited == orig(arg2.datac.visited)
arg2.datac.visited[] == orig(arg2.datac.visited[])
arg2.datac.visited.getClass().getName() == orig(arg2.datac.visited.getClass().getName())
arg2.datac.lowlink == orig(arg2.datac.lowlink)
arg2.datac.lowlink[] == orig(arg2.datac.lowlink[])
arg2.datac.lowlink.getClass().getName() == orig(arg2.datac.lowlink.getClass().getName())
arg2.datac.dfsnum == orig(arg2.datac.dfsnum)
arg2.datac.dfsnum[] == orig(arg2.datac.dfsnum[])
arg2.datac.dfsnum.getClass().getName() == orig(arg2.datac.dfsnum.getClass().getName())
arg2.datac.cstack == orig(arg2.datac.cstack)
arg2.datac.cstack[] == orig(arg2.datac.cstack[])
arg2.datac.cstack.getClass().getName() == orig(arg2.datac.cstack.getClass().getName())
arg0[] elements != null
arg0[].getClass().getName() elements == java.util.TreeSet.class
arg2.graph != null
arg2.graph.numMultiEdges >= 0
arg2.graph.edges != null
arg2.graph.vertices != null
arg2.graph.vertices[] elements != 0
arg2.graph.vertices[] elements >= -1
arg2.graph.startVertex one of { 0, 1, 2 }
arg2.nartics >= 1
arg2.ncomponents one of { 1, 2, 3 }
arg2.label == null
arg2.datae != null
arg2.datae.vindex == 0
arg2.datae.visited != null
arg2.datae.visited[] == []
arg2.datae.visited[].getClass().getName() == []
arg2.datae.visited.getClass().getName() == java.util.ArrayList.class
arg2.datae.lowlink != null
arg2.datae.lowlink[] == []
arg2.datae.lowlink[].getClass().getName() == []
arg2.datae.lowlink.getClass().getName() == java.util.ArrayList.class
arg2.datae.dfsnum != null
arg2.datae.dfsnum[] == []
arg2.datae.dfsnum[].getClass().getName() == []
arg2.datae.dfsnum.getClass().getName() == java.util.ArrayList.class
arg2.datae.cstack != null
arg2.datae.cstack[] == []
arg2.datae.cstack[].getClass().getName() == []
arg2.datae.cstack.getClass().getName() == java.util.ArrayList.class
arg2.datac != null
arg2.datac.visited != null
arg2.datac.visited[] elements != null
arg2.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg2.datac.visited.getClass().getName() == java.util.ArrayList.class
arg2.datac.lowlink != null
arg2.datac.lowlink[] elements != null
arg2.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg2.datac.lowlink.getClass().getName() == java.util.ArrayList.class
arg2.datac.dfsnum != null
arg2.datac.dfsnum[] elements != null
arg2.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg2.datac.dfsnum.getClass().getName() == java.util.ArrayList.class
arg2.datac.cstack != null
arg2.datac.cstack[] == []
arg2.datac.cstack[].getClass().getName() == []
arg2.datac.cstack.getClass().getName() == java.util.ArrayList.class
return != null
===========================================================================
util.Isomorphism.searchTree(graph.Graph, java.util.List, util.Triple):::ENTER
arg0 != null
arg0.graph != null
arg0.graph.numMultiEdges >= 0
arg0.graph.edges != null
arg0.graph.vertices != null
arg0.graph.vertices[] elements != 0
arg0.graph.vertices[] elements >= -1
arg0.graph.startVertex one of { 0, 1, 2 }
arg0.nartics >= 1
arg0.ncomponents one of { 1, 2, 3 }
arg0.label == null
arg0.datae != null
arg0.datae.vindex == 0
arg0.datae.visited != null
arg0.datae.visited[] == []
arg0.datae.visited[].getClass().getName() == []
arg0.datae.visited.getClass().getName() == java.util.ArrayList.class
arg0.datae.lowlink != null
arg0.datae.lowlink[] == []
arg0.datae.lowlink[].getClass().getName() == []
arg0.datae.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datae.dfsnum != null
arg0.datae.dfsnum[] == []
arg0.datae.dfsnum[].getClass().getName() == []
arg0.datae.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datae.cstack != null
arg0.datae.cstack[] == []
arg0.datae.cstack[].getClass().getName() == []
arg0.datae.cstack.getClass().getName() == java.util.ArrayList.class
arg0.datac != null
arg0.datac.visited != null
arg0.datac.visited[] elements != null
arg0.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg0.datac.visited.getClass().getName() == java.util.ArrayList.class
arg0.datac.lowlink != null
arg0.datac.lowlink[] elements != null
arg0.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datac.dfsnum != null
arg0.datac.dfsnum[] elements != null
arg0.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datac.cstack != null
arg0.datac.cstack[] == []
arg0.datac.cstack[].getClass().getName() == []
arg0.datac.cstack.getClass().getName() == java.util.ArrayList.class
arg1 != null
arg1[] elements != null
arg1[].getClass().getName() elements == java.util.TreeSet.class
arg1.getClass().getName() == java.util.ArrayList.class
arg2.first != null
arg2.first.getClass().getName() == java.util.ArrayList.class
arg2.second != null
arg2.second.getClass().getName() == int[].class
arg2.third != null
arg2.third.getClass().getName() == int[].class
===========================================================================
util.Isomorphism.searchTree(graph.Graph, java.util.List, util.Triple):::EXIT123
arg0.graph.numMultiEdges one of { 0, 1, 2 }
===========================================================================
util.Isomorphism.searchTree(graph.Graph, java.util.List, util.Triple):::EXIT66
orig(arg2) == null
===========================================================================
util.Isomorphism.searchTree(graph.Graph, java.util.List, util.Triple):::EXIT72
arg0.graph.numMultiEdges one of { 0, 1, 2 }
orig(arg2) != null
===========================================================================
util.Isomorphism.searchTree(graph.Graph, java.util.List, util.Triple):::EXIT
arg0.graph == orig(arg0.graph)
arg0.graph.numEdges == orig(arg0.graph.numEdges)
arg0.graph.domainSize == orig(arg0.graph.domainSize)
arg0.graph.numMultiEdges == orig(arg0.graph.numMultiEdges)
arg0.graph.edges == orig(arg0.graph.edges)
arg0.graph.edges[] == orig(arg0.graph.edges[])
arg0.graph.numVertices == orig(arg0.graph.numVertices)
arg0.graph.vertices == orig(arg0.graph.vertices)
arg0.graph.vertices[] == orig(arg0.graph.vertices[])
arg0.graph.startVertex == orig(arg0.graph.startVertex)
arg0.nartics == orig(arg0.nartics)
arg0.ncomponents == orig(arg0.ncomponents)
arg0.label == orig(arg0.label)
arg0.datae == orig(arg0.datae)
arg0.datae.vindex == orig(arg0.datae.vindex)
arg0.datae.visited == orig(arg0.datae.visited)
arg0.datae.visited[] == orig(arg0.datae.visited[])
arg0.datae.visited.getClass().getName() == orig(arg0.datae.visited.getClass().getName())
arg0.datae.lowlink == orig(arg0.datae.lowlink)
arg0.datae.lowlink[] == orig(arg0.datae.lowlink[])
arg0.datae.lowlink.getClass().getName() == orig(arg0.datae.lowlink.getClass().getName())
arg0.datae.dfsnum == orig(arg0.datae.dfsnum)
arg0.datae.dfsnum[] == orig(arg0.datae.dfsnum[])
arg0.datae.dfsnum.getClass().getName() == orig(arg0.datae.dfsnum.getClass().getName())
arg0.datae.cstack == orig(arg0.datae.cstack)
arg0.datae.cstack[] == orig(arg0.datae.cstack[])
arg0.datae.cstack.getClass().getName() == orig(arg0.datae.cstack.getClass().getName())
arg0.datac == orig(arg0.datac)
arg0.datac.vindex == orig(arg0.datac.vindex)
arg0.datac.visited == orig(arg0.datac.visited)
arg0.datac.visited[] == orig(arg0.datac.visited[])
arg0.datac.visited.getClass().getName() == orig(arg0.datac.visited.getClass().getName())
arg0.datac.lowlink == orig(arg0.datac.lowlink)
arg0.datac.lowlink[] == orig(arg0.datac.lowlink[])
arg0.datac.lowlink.getClass().getName() == orig(arg0.datac.lowlink.getClass().getName())
arg0.datac.dfsnum == orig(arg0.datac.dfsnum)
arg0.datac.dfsnum[] == orig(arg0.datac.dfsnum[])
arg0.datac.dfsnum.getClass().getName() == orig(arg0.datac.dfsnum.getClass().getName())
arg0.datac.cstack == orig(arg0.datac.cstack)
arg0.datac.cstack[] == orig(arg0.datac.cstack[])
arg0.datac.cstack.getClass().getName() == orig(arg0.datac.cstack.getClass().getName())
arg1[] == orig(arg1[])
arg2.first == orig(arg2.first)
arg2.first.getClass().getName() == orig(arg2.first.getClass().getName())
arg2.second == orig(arg2.second)
arg2.second.getClass().getName() == orig(arg2.second.getClass().getName())
arg2.third == orig(arg2.third)
arg2.third.getClass().getName() == orig(arg2.third.getClass().getName())
arg0.graph != null
arg0.graph.numMultiEdges >= 0
arg0.graph.edges != null
arg0.graph.vertices != null
arg0.graph.vertices[] elements != 0
arg0.graph.vertices[] elements >= -1
arg0.graph.startVertex one of { 0, 1, 2 }
arg0.nartics >= 1
arg0.ncomponents one of { 1, 2, 3 }
arg0.label == null
arg0.datae != null
arg0.datae.vindex == 0
arg0.datae.visited != null
arg0.datae.visited[] == []
arg0.datae.visited[].getClass().getName() == []
arg0.datae.visited.getClass().getName() == java.util.ArrayList.class
arg0.datae.lowlink != null
arg0.datae.lowlink[] == []
arg0.datae.lowlink[].getClass().getName() == []
arg0.datae.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datae.dfsnum != null
arg0.datae.dfsnum[] == []
arg0.datae.dfsnum[].getClass().getName() == []
arg0.datae.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datae.cstack != null
arg0.datae.cstack[] == []
arg0.datae.cstack[].getClass().getName() == []
arg0.datae.cstack.getClass().getName() == java.util.ArrayList.class
arg0.datac != null
arg0.datac.visited != null
arg0.datac.visited[] elements != null
arg0.datac.visited[].getClass().getName() elements == java.lang.Boolean.class
arg0.datac.visited.getClass().getName() == java.util.ArrayList.class
arg0.datac.lowlink != null
arg0.datac.lowlink[] elements != null
arg0.datac.lowlink[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.lowlink.getClass().getName() == java.util.ArrayList.class
arg0.datac.dfsnum != null
arg0.datac.dfsnum[] elements != null
arg0.datac.dfsnum[].getClass().getName() elements == java.lang.Integer.class
arg0.datac.dfsnum.getClass().getName() == java.util.ArrayList.class
arg0.datac.cstack != null
arg0.datac.cstack[] == []
arg0.datac.cstack[].getClass().getName() == []
arg0.datac.cstack.getClass().getName() == java.util.ArrayList.class
arg1[] elements != null
arg1[].getClass().getName() elements == java.util.TreeSet.class
arg2.first != null
arg2.first.getClass().getName() == java.util.ArrayList.class
arg2.second != null
arg2.second.getClass().getName() == int[].class
arg2.third != null
arg2.third.getClass().getName() == int[].class
return != null
return.first != null
return.first.getClass().getName() == java.util.ArrayList.class
return.second != null
return.second.getClass().getName() == int[].class
return.third != null
return.third.getClass().getName() == int[].class
===========================================================================
util.Label:::OBJECT
this.to != null
this.to[] elements >= 0
this.from != null
this.from[] elements >= 0
===========================================================================
util.Label.Label(int, int):::ENTER
===========================================================================
util.Label.Label(int, int):::EXIT
this.to[] elements == 0
this.from[] elements == 0
===========================================================================
util.Label.newDomain():::ENTER
===========================================================================
util.Label.newDomain():::EXIT
this.to == orig(this.to)
this.to[] == orig(this.to[])
this.from == orig(this.from)
this.from[] == orig(this.from[])
this.oldDomain == orig(this.oldDomain)
this.newDomain == orig(this.newDomain)
===========================================================================
util.Label.oldName(int):::ENTER
arg0 >= 0
===========================================================================
util.Label.oldName(int):::EXIT
this.to == orig(this.to)
this.to[] == orig(this.to[])
this.from == orig(this.from)
this.from[] == orig(this.from[])
this.oldDomain == orig(this.oldDomain)
this.newDomain == orig(this.newDomain)
return >= 0
===========================================================================
util.Label.set(int, int):::ENTER
arg0 >= 0
arg1 >= 0
===========================================================================
util.Label.set(int, int):::EXIT
this.to == orig(this.to)
this.from == orig(this.from)
this.oldDomain == orig(this.oldDomain)
this.newDomain == orig(this.newDomain)
size(this.to[]) == orig(size(this.to[]))
size(this.from[]) == orig(size(this.from[]))
this.to[] >= orig(this.to[]) (elementwise)
this.from[] >= orig(this.from[]) (elementwise)
===========================================================================
util.Pair:::OBJECT
this.first != null
this.first.getClass().getName() == java.lang.Integer.class
this.second != null
this.second.getClass().getName() == java.lang.Integer.class
===========================================================================
util.Pair.Pair(java.lang.Comparable, java.lang.Comparable):::ENTER
arg0 != null
arg0.getClass().getName() == java.lang.Integer.class
arg1 != null
arg1.getClass().getName() == java.lang.Integer.class
===========================================================================
util.Pair.Pair(java.lang.Comparable, java.lang.Comparable):::EXIT
===========================================================================
util.Pair.first():::ENTER
===========================================================================
util.Pair.first():::EXIT
this.first == orig(this.first)
this.first.getClass().getName() == orig(this.first.getClass().getName())
this.second == orig(this.second)
this.second.getClass().getName() == orig(this.second.getClass().getName())
return != null
return.getClass().getName() == java.lang.Integer.class
===========================================================================
util.Pair.second():::ENTER
===========================================================================
util.Pair.second():::EXIT
this.first == orig(this.first)
this.first.getClass().getName() == orig(this.first.getClass().getName())
this.second == orig(this.second)
this.second.getClass().getName() == orig(this.second.getClass().getName())
return != null
return.getClass().getName() == java.lang.Integer.class
===========================================================================
util.Triple:::OBJECT
this.first != null
this.second != null
this.third != null
===========================================================================
util.Triple.Triple(java.lang.Object, java.lang.Object, java.lang.Object):::ENTER
arg0 != null
arg1 != null
arg2 != null
===========================================================================
util.Triple.Triple(java.lang.Object, java.lang.Object, java.lang.Object):::EXIT
Exiting Daikon.
