Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

===========================================================================
Arrow:::OBJECT
this.from != null
this.from.khovanovNodeCode != null
this.from.tensorProduct != null
this.from.tensorProduct.getClass().getName() == BasisElement[].class
this.from.tensorProduct[] elements != null
this.from.outArrows != null
this.from.outArrows[] elements != null
this.from.outArrows[].getClass().getName() elements == Arrow.class
this.from.inArrows != null
this.from.inArrows[] elements != null
this.from.inArrows[].getClass().getName() elements == Arrow.class
this.from.isIsolated == false
this.from.isDeleted == false
this.to != null
this.to.khovanovNodeCode != null
this.to.tensorProduct != null
this.to.tensorProduct.getClass().getName() == BasisElement[].class
this.to.tensorProduct[] elements != null
this.to.outArrows != null
this.to.outArrows[] elements != null
this.to.outArrows[].getClass().getName() elements == Arrow.class
this.to.inArrows != null
this.to.inArrows[] elements != null
this.to.inArrows[].getClass().getName() elements == Arrow.class
this.to.isIsolated == false
this.to.isDeleted == false
this.deleted == false
size(this.from.tensorProduct[]) one of { 1, 2 }
size(this.from.inArrows[]) one of { 0, 1, 2 }
size(this.to.tensorProduct[]) one of { 1, 2, 3 }
===========================================================================
Arrow.Arrow(Tensor, Tensor):::ENTER
arg0 != null
arg0.khovanovNodeCode != null
arg0.tensorProduct != null
arg0.tensorProduct.getClass().getName() == BasisElement[].class
arg0.tensorProduct[] elements != null
arg0.outArrows != null
arg0.outArrows[] elements != null
arg0.outArrows[].getClass().getName() elements == Arrow.class
arg0.inArrows != null
arg0.inArrows[] elements != null
arg0.inArrows[].getClass().getName() elements == Arrow.class
arg0.isIsolated == false
arg0.isDeleted == false
arg1 != null
arg1.khovanovNodeCode != null
arg1.tensorProduct != null
arg1.tensorProduct.getClass().getName() == BasisElement[].class
arg1.tensorProduct[] elements != null
arg1.outArrows != null
arg1.outArrows[] == []
arg1.outArrows[].getClass().getName() == []
arg1.inArrows != null
arg1.inArrows[] elements != null
arg1.inArrows[].getClass().getName() elements == Arrow.class
arg1.isIsolated == false
arg1.isDeleted == false
size(arg0.tensorProduct[]) one of { 1, 2 }
size(arg0.inArrows[]) one of { 0, 1, 2 }
size(arg1.tensorProduct[]) one of { 1, 2, 3 }
size(arg1.inArrows[]) one of { 0, 1, 2 }
===========================================================================
Arrow.Arrow(Tensor, Tensor):::EXIT
arg0.khovanovNodeCode == orig(arg0.khovanovNodeCode)
arg0.khovanovNodeCode.toString == orig(arg0.khovanovNodeCode.toString)
arg0.tensorProduct == orig(arg0.tensorProduct)
arg0.tensorProduct.getClass().getName() == orig(arg0.tensorProduct.getClass().getName())
arg0.tensorProduct[] == orig(arg0.tensorProduct[])
arg0.outArrows == orig(arg0.outArrows)
arg0.outArrows[] == orig(arg0.outArrows[])
arg0.inArrows == orig(arg0.inArrows)
arg0.inArrows[] == orig(arg0.inArrows[])
arg0.isIsolated == orig(arg0.isIsolated)
arg0.isDeleted == orig(arg0.isDeleted)
arg1.khovanovNodeCode == orig(arg1.khovanovNodeCode)
arg1.khovanovNodeCode.toString == orig(arg1.khovanovNodeCode.toString)
arg1.tensorProduct == orig(arg1.tensorProduct)
arg1.tensorProduct.getClass().getName() == orig(arg1.tensorProduct.getClass().getName())
arg1.tensorProduct[] == orig(arg1.tensorProduct[])
arg1.outArrows == orig(arg1.outArrows)
arg1.outArrows[] == orig(arg1.outArrows[])
arg1.inArrows == orig(arg1.inArrows)
arg1.inArrows[] == orig(arg1.inArrows[])
arg1.isIsolated == orig(arg1.isIsolated)
arg1.isDeleted == orig(arg1.isDeleted)
this.to.outArrows[] == []
this.to.outArrows[].getClass().getName() == []
arg0.khovanovNodeCode != null
arg0.tensorProduct != null
arg0.tensorProduct.getClass().getName() == BasisElement[].class
arg0.tensorProduct[] elements != null
arg0.outArrows != null
arg0.outArrows[] elements != null
arg0.outArrows[].getClass().getName() elements == Arrow.class
arg0.inArrows != null
arg0.inArrows[] elements != null
arg0.inArrows[].getClass().getName() elements == Arrow.class
arg0.isIsolated == false
arg0.isDeleted == false
arg1.khovanovNodeCode != null
arg1.tensorProduct != null
arg1.tensorProduct.getClass().getName() == BasisElement[].class
arg1.tensorProduct[] elements != null
arg1.outArrows != null
arg1.outArrows[] == []
arg1.outArrows[].getClass().getName() == []
arg1.inArrows != null
arg1.inArrows[] elements != null
arg1.inArrows[].getClass().getName() elements == Arrow.class
arg1.isIsolated == false
arg1.isDeleted == false
size(this.to.inArrows[]) one of { 0, 1, 2 }
size(arg0.tensorProduct[]) one of { 1, 2 }
size(arg0.inArrows[]) one of { 0, 1, 2 }
size(arg1.tensorProduct[]) one of { 1, 2, 3 }
size(arg1.inArrows[]) one of { 0, 1, 2 }
===========================================================================
Arrow.toString():::ENTER
size(this.from.outArrows[]) >= 1
size(this.to.inArrows[]) one of { 1, 2, 3 }
===========================================================================
Arrow.toString():::EXIT
this.from == orig(this.from)
this.from.khovanovNodeCode == orig(this.from.khovanovNodeCode)
this.from.khovanovNodeCode.toString == orig(this.from.khovanovNodeCode.toString)
this.from.tensorProduct == orig(this.from.tensorProduct)
this.from.tensorProduct.getClass().getName() == orig(this.from.tensorProduct.getClass().getName())
this.from.tensorProduct[] == orig(this.from.tensorProduct[])
this.from.outArrows == orig(this.from.outArrows)
this.from.outArrows[] == orig(this.from.outArrows[])
this.from.inArrows == orig(this.from.inArrows)
this.from.inArrows[] == orig(this.from.inArrows[])
this.from.isIsolated == orig(this.from.isIsolated)
this.from.isDeleted == orig(this.from.isDeleted)
this.to == orig(this.to)
this.to.khovanovNodeCode == orig(this.to.khovanovNodeCode)
this.to.khovanovNodeCode.toString == orig(this.to.khovanovNodeCode.toString)
this.to.tensorProduct == orig(this.to.tensorProduct)
this.to.tensorProduct.getClass().getName() == orig(this.to.tensorProduct.getClass().getName())
this.to.tensorProduct[] == orig(this.to.tensorProduct[])
this.to.outArrows == orig(this.to.outArrows)
this.to.outArrows[] == orig(this.to.outArrows[])
this.to.inArrows == orig(this.to.inArrows)
this.to.inArrows[] == orig(this.to.inArrows[])
this.to.isIsolated == orig(this.to.isIsolated)
this.to.isDeleted == orig(this.to.isDeleted)
this.deleted == orig(this.deleted)
return != null
size(this.from.outArrows[]) >= 1
size(this.to.inArrows[]) one of { 1, 2, 3 }
===========================================================================
Crossing:::OBJECT
this.overstrand != null
this.understrand != null
this.understrand[] elements >= 1
size(this.overstrand[]) == 2
size(this.understrand[]) == 2
===========================================================================
Crossing.Crossing(int, int, int, int, boolean):::ENTER
arg2 one of { 2, 4, 6 }
arg3 one of { 1, 3, 5 }
arg0 != arg1
arg0 != arg2
arg0 != arg3
arg1 != arg2
arg1 != arg3
arg2 != arg3
===========================================================================
Crossing.Crossing(int, int, int, int, boolean):::EXIT
this.posneg == orig(arg4)
this.understrand[] one of { [2, 3], [4, 5], [6, 1] }
orig(arg0) in this.overstrand[]
orig(arg1) in this.overstrand[]
orig(arg2) in this.understrand[]
orig(arg3) in this.understrand[]
===========================================================================
Crossing.get1st():::ENTER
this.overstrand[] one of { [3, 4], [4, 3], [5, 6] }
this.understrand[] one of { [2, 3], [6, 1] }
===========================================================================
Crossing.get1st():::EXIT
this.overstrand == orig(this.overstrand)
this.overstrand[] == orig(this.overstrand[])
this.understrand == orig(this.understrand)
this.understrand[] == orig(this.understrand[])
this.posneg == orig(this.posneg)
this.overstrand[] one of { [3, 4], [4, 3], [5, 6] }
this.understrand[] one of { [2, 3], [6, 1] }
return one of { 3, 4, 5 }
return in this.overstrand[]
===========================================================================
Crossing.get2nd():::ENTER
this.overstrand[] one of { [3, 4], [4, 3], [5, 6] }
this.understrand[] one of { [2, 3], [6, 1] }
===========================================================================
Crossing.get2nd():::EXIT
this.overstrand == orig(this.overstrand)
this.overstrand[] == orig(this.overstrand[])
this.understrand == orig(this.understrand)
this.understrand[] == orig(this.understrand[])
this.posneg == orig(this.posneg)
this.overstrand[] one of { [3, 4], [4, 3], [5, 6] }
this.understrand[] one of { [2, 3], [6, 1] }
return one of { 3, 4, 6 }
return in this.overstrand[]
===========================================================================
Crossing.get3rd():::ENTER
this.overstrand[] one of { [3, 4], [4, 3], [5, 6] }
this.understrand[] one of { [2, 3], [6, 1] }
===========================================================================
Crossing.get3rd():::EXIT
this.overstrand == orig(this.overstrand)
this.overstrand[] == orig(this.overstrand[])
this.understrand == orig(this.understrand)
this.understrand[] == orig(this.understrand[])
this.posneg == orig(this.posneg)
this.overstrand[] one of { [3, 4], [4, 3], [5, 6] }
this.understrand[] one of { [2, 3], [6, 1] }
return one of { 2, 6 }
return in this.understrand[]
===========================================================================
Crossing.get4th():::ENTER
this.overstrand[] one of { [3, 4], [4, 3], [5, 6] }
this.understrand[] one of { [2, 3], [6, 1] }
===========================================================================
Crossing.get4th():::EXIT
this.overstrand == orig(this.overstrand)
this.overstrand[] == orig(this.overstrand[])
this.understrand == orig(this.understrand)
this.understrand[] == orig(this.understrand[])
this.posneg == orig(this.posneg)
this.overstrand[] one of { [3, 4], [4, 3], [5, 6] }
this.understrand[] one of { [2, 3], [6, 1] }
return one of { 1, 3 }
this.overstrand[] elements > return
return in this.understrand[]
===========================================================================
Crossing.getMaxVertex():::ENTER
this.overstrand[] one of { [1, 2], [3, 4], [5, 6] }
this.understrand[] one of { [2, 3], [4, 5], [6, 1] }
this.posneg == true
===========================================================================
Crossing.getMaxVertex():::EXIT
this.overstrand == orig(this.overstrand)
this.overstrand[] == orig(this.overstrand[])
this.understrand == orig(this.understrand)
this.understrand[] == orig(this.understrand[])
this.posneg == orig(this.posneg)
this.overstrand[] one of { [1, 2], [3, 4], [5, 6] }
this.understrand[] one of { [2, 3], [4, 5], [6, 1] }
this.posneg == true
return one of { 5, 6 }
===========================================================================
Crossing.getOneSmoothing():::ENTER
===========================================================================
Crossing.getOneSmoothing():::EXIT50
this.overstrand[] one of { [1, 2], [3, 4], [5, 6] }
this.understrand[] one of { [2, 3], [4, 5], [6, 1] }
this.posneg == true
return.one one of { 1, 3, 5 }
return.two one of { 2, 4, 6 }
return.three one of { 2, 4, 6 }
return.four one of { 1, 3, 5 }
return.reorder == true
return.three in this.overstrand[]
return.four in this.understrand[]
===========================================================================
Crossing.getOneSmoothing():::EXIT52
this.overstrand[] one of { [3, 4], [4, 3], [5, 6] }
this.understrand[] one of { [1, 6], [3, 2], [6, 1] }
this.posneg == false
return.one one of { 3, 4, 5 }
return.two one of { 1, 2, 6 }
return.three one of { 1, 3, 6 }
return.four one of { 3, 4, 6 }
return.reorder == false
return.four in this.overstrand[]
return.three in this.understrand[]
===========================================================================
Crossing.getOneSmoothing():::EXIT
this.overstrand == orig(this.overstrand)
this.overstrand[] == orig(this.overstrand[])
this.understrand == orig(this.understrand)
this.understrand[] == orig(this.understrand[])
this.posneg == orig(this.posneg)
(this.posneg == false)  <==>  (return.reorder == false)
(this.posneg == false)  ==>  (return.four in this.overstrand[])
(this.posneg == false)  ==>  (return.four one of { 3, 4, 6 })
(this.posneg == false)  ==>  (return.one one of { 3, 4, 5 })
(this.posneg == false)  ==>  (return.three in this.understrand[])
(this.posneg == false)  ==>  (return.three one of { 1, 3, 6 })
(this.posneg == false)  ==>  (return.two one of { 1, 2, 6 })
(this.posneg == false)  ==>  (this.overstrand[] one of { [3, 4], [4, 3], [5, 6] })
(this.posneg == false)  ==>  (this.understrand[] one of { [1, 6], [3, 2], [6, 1] })
(this.posneg == true)  <==>  (return.reorder == true)
(this.posneg == true)  ==>  (return.four in this.understrand[])
(this.posneg == true)  ==>  (return.four one of { 1, 3, 5 })
(this.posneg == true)  ==>  (return.one one of { 1, 3, 5 })
(this.posneg == true)  ==>  (return.three in this.overstrand[])
(this.posneg == true)  ==>  (return.three one of { 2, 4, 6 })
(this.posneg == true)  ==>  (return.two one of { 2, 4, 6 })
(this.posneg == true)  ==>  (this.overstrand[] one of { [1, 2], [3, 4], [5, 6] })
(this.posneg == true)  ==>  (this.understrand[] one of { [2, 3], [4, 5], [6, 1] })
return.one in this.overstrand[]
return.two in this.understrand[]
return.one != return.two
return.one != return.three
return.one != return.four
return.two != return.three
return.two != return.four
return.three != return.four
===========================================================================
Crossing.getSign():::ENTER
this.overstrand[] one of { [3, 4], [4, 3], [5, 6] }
this.understrand[] one of { [2, 3], [6, 1] }
===========================================================================
Crossing.getSign():::EXIT
this.overstrand == orig(this.overstrand)
this.overstrand[] == orig(this.overstrand[])
this.understrand == orig(this.understrand)
this.understrand[] == orig(this.understrand[])
this.posneg == return
return == orig(this.posneg)
(this.overstrand[] == [4, 3])  <==>  (return == false)
(this.overstrand[] == [4, 3])  ==>  (orig(this) has only one value)
(this.overstrand[] == [4, 3])  ==>  (this.overstrand has only one value)
(this.overstrand[] == [4, 3])  ==>  (this.overstrand[] elements one of { 3, 4 })
(this.overstrand[] == [4, 3])  ==>  (this.understrand has only one value)
(this.overstrand[] == [4, 3])  ==>  (this.understrand[] == [6, 1])
(this.overstrand[] == [4, 3])  ==>  (this.understrand[] elements one of { 1, 6 })
(this.overstrand[] one of { [3, 4], [5, 6] })  <==>  (return == true)
(this.overstrand[] one of { [3, 4], [5, 6] })  ==>  (this.understrand[] one of { [2, 3], [6, 1] })
this.overstrand[] one of { [3, 4], [4, 3], [5, 6] }
this.understrand[] one of { [2, 3], [6, 1] }
===========================================================================
Crossing.getSign():::EXIT;condition="return == true"
this.overstrand[] one of { [3, 4], [5, 6] }
return == true
===========================================================================
Crossing.getSign():::EXIT;condition="not(return == true)"
this.overstrand has only one value
this.overstrand[] == [4, 3]
this.overstrand[] elements one of { 3, 4 }
this.understrand has only one value
this.understrand[] == [6, 1]
this.understrand[] elements one of { 1, 6 }
return == false
orig(this) has only one value
===========================================================================
Crossing.getZeroSmoothing():::ENTER
===========================================================================
Crossing.getZeroSmoothing():::EXIT43
this.overstrand[] one of { [1, 2], [3, 4], [5, 6] }
this.understrand[] one of { [2, 3], [4, 5], [6, 1] }
this.posneg == true
return.one one of { 1, 3, 5 }
return.two one of { 1, 3, 5 }
return.three one of { 2, 4, 6 }
return.four one of { 2, 4, 6 }
return.reorder == false
return.four in this.overstrand[]
return.three in this.understrand[]
===========================================================================
Crossing.getZeroSmoothing():::EXIT45
this.overstrand[] one of { [3, 4], [4, 3], [5, 6] }
this.understrand[] one of { [1, 6], [3, 2], [6, 1] }
this.posneg == false
return.one one of { 3, 4, 5 }
return.two one of { 1, 3, 6 }
return.three one of { 3, 4, 6 }
return.four one of { 1, 2, 6 }
return.reorder == true
return.three in this.overstrand[]
return.four in this.understrand[]
===========================================================================
Crossing.getZeroSmoothing():::EXIT
this.overstrand == orig(this.overstrand)
this.overstrand[] == orig(this.overstrand[])
this.understrand == orig(this.understrand)
this.understrand[] == orig(this.understrand[])
this.posneg == orig(this.posneg)
(this.posneg == false)  <==>  (return.reorder == true)
(this.posneg == false)  ==>  (return.four in this.understrand[])
(this.posneg == false)  ==>  (return.four one of { 1, 2, 6 })
(this.posneg == false)  ==>  (return.one one of { 3, 4, 5 })
(this.posneg == false)  ==>  (return.three in this.overstrand[])
(this.posneg == false)  ==>  (return.three one of { 3, 4, 6 })
(this.posneg == false)  ==>  (return.two one of { 1, 3, 6 })
(this.posneg == false)  ==>  (this.overstrand[] one of { [3, 4], [4, 3], [5, 6] })
(this.posneg == false)  ==>  (this.understrand[] one of { [1, 6], [3, 2], [6, 1] })
(this.posneg == true)  <==>  (return.reorder == false)
(this.posneg == true)  ==>  (return.four in this.overstrand[])
(this.posneg == true)  ==>  (return.four one of { 2, 4, 6 })
(this.posneg == true)  ==>  (return.one one of { 1, 3, 5 })
(this.posneg == true)  ==>  (return.three in this.understrand[])
(this.posneg == true)  ==>  (return.three one of { 2, 4, 6 })
(this.posneg == true)  ==>  (return.two one of { 1, 3, 5 })
(this.posneg == true)  ==>  (this.overstrand[] one of { [1, 2], [3, 4], [5, 6] })
(this.posneg == true)  ==>  (this.understrand[] one of { [2, 3], [4, 5], [6, 1] })
return.one in this.overstrand[]
return.two in this.understrand[]
return.one != return.two
return.one != return.three
return.one != return.four
return.two != return.three
return.two != return.four
return.three != return.four
===========================================================================
Crossing.swapOverstrand():::ENTER
this.overstrand[] elements one of { 3, 4 }
this.overstrand[] one of { [3, 4], [4, 3] }
this.understrand[] == [6, 1]
this.understrand[] elements one of { 1, 6 }
===========================================================================
Crossing.swapOverstrand():::EXIT
this.overstrand == orig(this.overstrand)
this.understrand == orig(this.understrand)
this.understrand[] == orig(this.understrand[])
this.posneg == orig(this.posneg)
size(this.overstrand[]) == orig(size(this.overstrand[]))
this.overstrand[] elements one of { 3, 4 }
this.overstrand[] one of { [3, 4], [4, 3] }
this.understrand[] == [6, 1]
this.understrand[] elements one of { 1, 6 }
this.overstrand[] is the reverse of orig(this.overstrand[])
===========================================================================
Crossing.swapSign():::ENTER
this.overstrand[] one of { [4, 3], [5, 6] }
this.understrand[] one of { [3, 2], [6, 1] }
this.posneg == true
===========================================================================
Crossing.swapSign():::EXIT
this.overstrand == orig(this.overstrand)
this.overstrand[] == orig(this.overstrand[])
this.understrand == orig(this.understrand)
this.understrand[] == orig(this.understrand[])
this.overstrand[] one of { [4, 3], [5, 6] }
this.understrand[] one of { [3, 2], [6, 1] }
this.posneg == false
===========================================================================
Crossing.swapUnderstrand():::ENTER
this.overstrand[] one of { [3, 4], [5, 6] }
this.understrand[] one of { [2, 3], [6, 1] }
===========================================================================
Crossing.swapUnderstrand():::EXIT
this.overstrand == orig(this.overstrand)
this.overstrand[] == orig(this.overstrand[])
this.understrand == orig(this.understrand)
this.posneg == orig(this.posneg)
size(this.understrand[]) == orig(size(this.understrand[]))
this.overstrand[] one of { [3, 4], [5, 6] }
this.understrand[] one of { [1, 6], [3, 2] }
this.understrand[] is the reverse of orig(this.understrand[])
===========================================================================
KhovanovMap:::OBJECT
this.theKnot.crossings.getClass().getName() == this.theKnot.leftknot.crossings.getClass().getName()
this.theKnot.crossings.getClass().getName() == this.theKnot.rightknot.crossings.getClass().getName()
this.theKnot.vertices.getClass().getName() == this.theKnot.leftknot.vertices.getClass().getName()
this.theKnot.vertices.getClass().getName() == this.theKnot.rightknot.vertices.getClass().getName()
size(this.theKnot.crossings[]) == size(this.rows[])-1
size(this.theKnot.crossings[])-1 == size(this.theKnot.leftknot.crossings[])
size(this.theKnot.crossings[])-1 == size(this.theKnot.rightknot.crossings[])
size(this.theKnot.vertices[]) == size(this.theKnot.leftknot.vertices[])
size(this.theKnot.vertices[]) == size(this.theKnot.rightknot.vertices[])
this has only one value
this.theKnot has only one value
this.theKnot != null
this.theKnot.crossings has only one value
this.theKnot.crossings != null
this.theKnot.crossings.getClass().getName() == Crossing[].class
this.theKnot.crossings[] contains no nulls and has only one value, of length 3
this.theKnot.crossings[] elements != null
this.theKnot.crossings[].getClass().getName() == [Crossing, Crossing, Crossing]
this.theKnot.crossings[].getClass().getName() elements == Crossing.class
this.theKnot.crossings[].overstrand contains no nulls and has only one value, of length 3
this.theKnot.crossings[].understrand contains no nulls and has only one value, of length 3
this.theKnot.crossings[].understrand sorted by >
this.theKnot.crossings[].posneg == [1, 1, 1]
this.theKnot.crossings[].posneg elements == true
this.theKnot.crossings[].posneg elements != null
this.theKnot.vertices has only one value
this.theKnot.vertices != null
this.theKnot.vertices.getClass().getName() == Vertex[].class
this.theKnot.vertices[] contains no nulls and has only one value, of length 6
this.theKnot.vertices[] elements != null
this.theKnot.vertices[].getClass().getName() == [Vertex, Vertex, Vertex, Vertex, Vertex, Vertex]
this.theKnot.vertices[].getClass().getName() elements == Vertex.class
this.theKnot.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
this.theKnot.vertices[].numberOfVertex elements >= 1
this.theKnot.vertices[].numberOfVertex sorted by <
this.theKnot.vertices[].from contains no nulls and has only one value, of length 6
this.theKnot.vertices[].from elements != null
this.theKnot.vertices[].to contains no nulls and has only one value, of length 6
this.theKnot.vertices[].to elements != null
this.theKnot.vertices[].visited == [1, 1, 1, 1, 1, 1]
this.theKnot.vertices[].visited elements == true
this.theKnot.vertices[].visited elements != null
this.theKnot.binarycode has only one value
this.theKnot.binarycode != null
this.theKnot.binarycode.toString == ""
this.theKnot.leftknot has only one value
this.theKnot.leftknot != null
this.theKnot.leftknot.crossings has only one value
this.theKnot.leftknot.crossings != null
this.theKnot.leftknot.crossings[] contains no nulls and has only one value, of length 2
this.theKnot.leftknot.crossings[] elements != null
this.theKnot.leftknot.crossings[].getClass().getName() == [Crossing, Crossing]
this.theKnot.leftknot.crossings[].getClass().getName() elements == Crossing.class
this.theKnot.leftknot.crossings[].overstrand contains no nulls and has only one value, of length 2
this.theKnot.leftknot.crossings[].overstrand sorted by >
this.theKnot.leftknot.crossings[].understrand contains no nulls and has only one value, of length 2
this.theKnot.leftknot.crossings[].understrand sorted by >
this.theKnot.leftknot.crossings[].posneg == [1, 1]
this.theKnot.leftknot.crossings[].posneg elements == true
this.theKnot.leftknot.crossings[].posneg elements != null
this.theKnot.leftknot.vertices has only one value
this.theKnot.leftknot.vertices != null
this.theKnot.leftknot.vertices[] contains no nulls and has only one value, of length 6
this.theKnot.leftknot.vertices[] elements != null
this.theKnot.leftknot.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
this.theKnot.leftknot.vertices[].numberOfVertex elements >= 1
this.theKnot.leftknot.vertices[].numberOfVertex sorted by <
this.theKnot.leftknot.vertices[].from contains no nulls and has only one value, of length 6
this.theKnot.leftknot.vertices[].from elements != null
this.theKnot.leftknot.vertices[].to contains no nulls and has only one value, of length 6
this.theKnot.leftknot.vertices[].to elements != null
this.theKnot.leftknot.vertices[].visited == [1, 1, 1, 1, 1, 1]
this.theKnot.leftknot.vertices[].visited elements == true
this.theKnot.leftknot.vertices[].visited elements != null
this.theKnot.leftknot.binarycode has only one value
this.theKnot.leftknot.binarycode != null
this.theKnot.leftknot.binarycode.toString == "0"
this.theKnot.leftknot.leftknot has only one value
this.theKnot.leftknot.leftknot != null
this.theKnot.leftknot.rightknot has only one value
this.theKnot.leftknot.rightknot != null
this.theKnot.leftknot.numcircles == 0
this.theKnot.leftknot.seifertCircles has only one value
this.theKnot.leftknot.seifertCircles != null
this.theKnot.leftknot.seifertCircles[] contains no nulls and has only one value, of length 2
this.theKnot.leftknot.seifertCircles[] elements != null
this.theKnot.leftknot.seifertCircles[].getClass().getName() == [SeifertCircle, SeifertCircle]
this.theKnot.leftknot.seifertCircles[].getClass().getName() elements == SeifertCircle.class
this.theKnot.leftknot.smoothing has only one value
this.theKnot.leftknot.smoothing != null
this.theKnot.rightknot has only one value
this.theKnot.rightknot != null
this.theKnot.rightknot.crossings has only one value
this.theKnot.rightknot.crossings != null
this.theKnot.rightknot.crossings[] contains no nulls and has only one value, of length 2
this.theKnot.rightknot.crossings[] elements != null
this.theKnot.rightknot.crossings[].overstrand contains no nulls and has only one value, of length 2
this.theKnot.rightknot.crossings[].overstrand sorted by <
this.theKnot.rightknot.crossings[].understrand contains no nulls and has only one value, of length 2
this.theKnot.rightknot.crossings[].understrand sorted by <
this.theKnot.rightknot.crossings[].posneg == [0, 0]
this.theKnot.rightknot.crossings[].posneg elements == false
this.theKnot.rightknot.vertices has only one value
this.theKnot.rightknot.vertices != null
this.theKnot.rightknot.vertices[] contains no nulls and has only one value, of length 6
this.theKnot.rightknot.vertices[] elements != null
this.theKnot.rightknot.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
this.theKnot.rightknot.vertices[].numberOfVertex elements >= 1
this.theKnot.rightknot.vertices[].numberOfVertex sorted by <
this.theKnot.rightknot.vertices[].from contains no nulls and has only one value, of length 6
this.theKnot.rightknot.vertices[].from elements != null
this.theKnot.rightknot.vertices[].to contains no nulls and has only one value, of length 6
this.theKnot.rightknot.vertices[].to elements != null
this.theKnot.rightknot.vertices[].visited == [1, 1, 1, 1, 1, 1]
this.theKnot.rightknot.vertices[].visited elements == true
this.theKnot.rightknot.vertices[].visited elements != null
this.theKnot.rightknot.binarycode has only one value
this.theKnot.rightknot.binarycode != null
this.theKnot.rightknot.binarycode.toString == "1"
this.theKnot.rightknot.leftknot has only one value
this.theKnot.rightknot.leftknot != null
this.theKnot.rightknot.rightknot has only one value
this.theKnot.rightknot.rightknot != null
this.theKnot.rightknot.numcircles == 0
this.theKnot.rightknot.seifertCircles has only one value
this.theKnot.rightknot.seifertCircles != null
this.theKnot.rightknot.seifertCircles[] contains no nulls and has only one value, of length 1
this.theKnot.rightknot.seifertCircles[] elements has only one value
this.theKnot.rightknot.seifertCircles[] elements != null
this.theKnot.rightknot.seifertCircles[].getClass().getName() == [SeifertCircle]
this.theKnot.rightknot.seifertCircles[].getClass().getName() elements == SeifertCircle.class
this.theKnot.rightknot.smoothing has only one value
this.theKnot.rightknot.smoothing != null
this.theKnot.numcircles == 0
this.theKnot.seifertCircles has only one value
this.theKnot.seifertCircles != null
this.theKnot.seifertCircles[] contains no nulls and has only one value, of length 1
this.theKnot.seifertCircles[] elements has only one value
this.theKnot.seifertCircles[] elements != null
this.theKnot.seifertCircles[].getClass().getName() == [SeifertCircle]
this.theKnot.seifertCircles[].getClass().getName() elements == SeifertCircle.class
this.theKnot.smoothing == null
this.resolvedKnots == null
this.rows has only one value
this.rows != null
this.rows.getClass().getName() == KhovanovRow[].class
this.rows[] contains no nulls and has only one value, of length 4
this.rows[] elements != null
this.rows[].getClass().getName() == [KhovanovRow, KhovanovRow, KhovanovRow, KhovanovRow]
this.rows[].getClass().getName() elements == KhovanovRow.class
this.rows[].nodes contains no nulls and has only one value, of length 4
this.rows[].nodes elements != null
this.rows[].nodes.getClass().getName() == [KhovanovMapNode[], KhovanovMapNode[], KhovanovMapNode[], KhovanovMapNode[]]
this.rows[].nodes.getClass().getName() elements == KhovanovMapNode[].class
this.rows[].index elements >= 0
this.maps == null
size(this.theKnot.vertices[]) == 6
size(this.theKnot.leftknot.seifertCircles[]) == 2
size(this.theKnot.rightknot.seifertCircles[]) == 1
size(this.theKnot.seifertCircles[]) == 1
size(this.rows[]) == 4
this.theKnot.crossings.getClass().getName() != this.theKnot.vertices.getClass().getName()
this.theKnot.crossings.getClass().getName() != this.rows.getClass().getName()
this.theKnot.vertices.getClass().getName() != this.rows.getClass().getName()
size(this.theKnot.vertices[]) in this.theKnot.vertices[].numberOfVertex
this.theKnot.vertices[].numberOfVertex elements <= size(this.theKnot.vertices[])
size(this.theKnot.vertices[])-1 in this.theKnot.vertices[].numberOfVertex
size(this.theKnot.vertices[]) in this.theKnot.leftknot.vertices[].numberOfVertex
this.theKnot.leftknot.vertices[].numberOfVertex elements <= size(this.theKnot.vertices[])
size(this.theKnot.vertices[])-1 in this.theKnot.leftknot.vertices[].numberOfVertex
size(this.theKnot.vertices[]) in this.theKnot.rightknot.vertices[].numberOfVertex
this.theKnot.rightknot.vertices[].numberOfVertex elements <= size(this.theKnot.vertices[])
size(this.theKnot.vertices[])-1 in this.theKnot.rightknot.vertices[].numberOfVertex
this.rows[].index elements <= size(this.theKnot.crossings[])
===========================================================================
KhovanovMap.KhovanovMap(Knot):::ENTER
arg0.crossings.getClass().getName() == arg0.leftknot.crossings.getClass().getName()
arg0.crossings.getClass().getName() == arg0.rightknot.crossings.getClass().getName()
arg0.vertices.getClass().getName() == arg0.leftknot.vertices.getClass().getName()
arg0.vertices.getClass().getName() == arg0.rightknot.vertices.getClass().getName()
size(arg0.crossings[])-1 == size(arg0.leftknot.crossings[])
size(arg0.crossings[])-1 == size(arg0.rightknot.crossings[])
size(arg0.vertices[]) == size(arg0.leftknot.vertices[])
size(arg0.vertices[]) == size(arg0.rightknot.vertices[])
arg0 has only one value
arg0.crossings has only one value
arg0.crossings.getClass().getName() == Crossing[].class
arg0.crossings[] contains no nulls and has only one value, of length 3
arg0.crossings[].getClass().getName() == [Crossing, Crossing, Crossing]
arg0.crossings[].getClass().getName() elements == Crossing.class
arg0.crossings[].overstrand contains no nulls and has only one value, of length 3
arg0.crossings[].understrand contains no nulls and has only one value, of length 3
arg0.crossings[].posneg == [1, 1, 1]
arg0.crossings[].posneg elements == true
arg0.vertices has only one value
arg0.vertices.getClass().getName() == Vertex[].class
arg0.vertices[] contains no nulls and has only one value, of length 6
arg0.vertices[].getClass().getName() == [Vertex, Vertex, Vertex, Vertex, Vertex, Vertex]
arg0.vertices[].getClass().getName() elements == Vertex.class
arg0.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
arg0.vertices[].from contains no nulls and has only one value, of length 6
arg0.vertices[].to contains no nulls and has only one value, of length 6
arg0.vertices[].visited == [1, 1, 1, 1, 1, 1]
arg0.vertices[].visited elements == true
arg0.binarycode has only one value
arg0.binarycode.toString == ""
arg0.leftknot has only one value
arg0.leftknot.crossings has only one value
arg0.leftknot.crossings[] contains no nulls and has only one value, of length 2
arg0.leftknot.crossings[].getClass().getName() == [Crossing, Crossing]
arg0.leftknot.crossings[].getClass().getName() elements == Crossing.class
arg0.leftknot.crossings[].overstrand contains no nulls and has only one value, of length 2
arg0.leftknot.crossings[].understrand contains no nulls and has only one value, of length 2
arg0.leftknot.crossings[].posneg == [1, 1]
arg0.leftknot.crossings[].posneg elements == true
arg0.leftknot.vertices has only one value
arg0.leftknot.vertices[] contains no nulls and has only one value, of length 6
arg0.leftknot.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
arg0.leftknot.vertices[].from contains no nulls and has only one value, of length 6
arg0.leftknot.vertices[].to contains no nulls and has only one value, of length 6
arg0.leftknot.vertices[].visited == [1, 1, 1, 1, 1, 1]
arg0.leftknot.vertices[].visited elements == true
arg0.leftknot.binarycode has only one value
arg0.leftknot.binarycode.toString == "0"
arg0.leftknot.leftknot has only one value
arg0.leftknot.rightknot has only one value
arg0.leftknot.numcircles == 0
arg0.leftknot.seifertCircles has only one value
arg0.leftknot.seifertCircles[] contains no nulls and has only one value, of length 2
arg0.leftknot.seifertCircles[].getClass().getName() == [SeifertCircle, SeifertCircle]
arg0.leftknot.seifertCircles[].getClass().getName() elements == SeifertCircle.class
arg0.leftknot.smoothing has only one value
arg0.rightknot has only one value
arg0.rightknot.crossings has only one value
arg0.rightknot.crossings[] contains no nulls and has only one value, of length 2
arg0.rightknot.crossings[].overstrand contains no nulls and has only one value, of length 2
arg0.rightknot.crossings[].understrand contains no nulls and has only one value, of length 2
arg0.rightknot.crossings[].posneg == [0, 0]
arg0.rightknot.crossings[].posneg elements == false
arg0.rightknot.vertices has only one value
arg0.rightknot.vertices[] contains no nulls and has only one value, of length 6
arg0.rightknot.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
arg0.rightknot.vertices[].from contains no nulls and has only one value, of length 6
arg0.rightknot.vertices[].to contains no nulls and has only one value, of length 6
arg0.rightknot.vertices[].visited == [1, 1, 1, 1, 1, 1]
arg0.rightknot.vertices[].visited elements == true
arg0.rightknot.binarycode has only one value
arg0.rightknot.binarycode.toString == "1"
arg0.rightknot.leftknot has only one value
arg0.rightknot.rightknot has only one value
arg0.rightknot.numcircles == 0
arg0.rightknot.seifertCircles has only one value
arg0.rightknot.seifertCircles[] contains no nulls and has only one value, of length 1
arg0.rightknot.seifertCircles[] elements has only one value
arg0.rightknot.seifertCircles[].getClass().getName() == [SeifertCircle]
arg0.rightknot.seifertCircles[].getClass().getName() elements == SeifertCircle.class
arg0.rightknot.smoothing has only one value
arg0.numcircles == 0
arg0.seifertCircles has only one value
arg0.seifertCircles[] contains no nulls and has only one value, of length 1
arg0.seifertCircles[] elements has only one value
arg0.seifertCircles[].getClass().getName() == [SeifertCircle]
arg0.seifertCircles[].getClass().getName() elements == SeifertCircle.class
arg0.smoothing == null
size(arg0.crossings[]) == 3
size(arg0.vertices[]) == 6
size(arg0.leftknot.seifertCircles[]) == 2
size(arg0.rightknot.seifertCircles[]) == 1
size(arg0.seifertCircles[]) == 1
size(arg0.vertices[]) in arg0.vertices[].numberOfVertex
size(arg0.vertices[])-1 in arg0.vertices[].numberOfVertex
size(arg0.vertices[]) in arg0.leftknot.vertices[].numberOfVertex
size(arg0.vertices[])-1 in arg0.leftknot.vertices[].numberOfVertex
size(arg0.vertices[]) in arg0.rightknot.vertices[].numberOfVertex
size(arg0.vertices[])-1 in arg0.rightknot.vertices[].numberOfVertex
===========================================================================
KhovanovMap.KhovanovMap(Knot):::EXIT
this.theKnot == orig(arg0)
this.theKnot.crossings == arg0.crossings
this.theKnot.crossings.getClass().getName() == arg0.crossings.getClass().getName()
this.theKnot.crossings[] == arg0.crossings[]
this.theKnot.vertices == arg0.vertices
this.theKnot.vertices.getClass().getName() == arg0.vertices.getClass().getName()
this.theKnot.vertices[] == arg0.vertices[]
this.theKnot.binarycode == arg0.binarycode
this.theKnot.leftknot == arg0.leftknot
this.theKnot.leftknot.crossings == arg0.leftknot.crossings
this.theKnot.leftknot.crossings.getClass().getName() == arg0.crossings.getClass().getName()
this.theKnot.leftknot.crossings[] == arg0.leftknot.crossings[]
this.theKnot.leftknot.vertices == arg0.leftknot.vertices
this.theKnot.leftknot.vertices.getClass().getName() == arg0.vertices.getClass().getName()
this.theKnot.leftknot.vertices[] == arg0.leftknot.vertices[]
this.theKnot.leftknot.binarycode == arg0.leftknot.binarycode
this.theKnot.leftknot.leftknot == arg0.leftknot.leftknot
this.theKnot.leftknot.rightknot == arg0.leftknot.rightknot
this.theKnot.leftknot.seifertCircles == arg0.leftknot.seifertCircles
this.theKnot.leftknot.smoothing == arg0.leftknot.smoothing
this.theKnot.rightknot == arg0.rightknot
this.theKnot.rightknot.crossings == arg0.rightknot.crossings
this.theKnot.rightknot.crossings.getClass().getName() == arg0.crossings.getClass().getName()
this.theKnot.rightknot.crossings[] == arg0.rightknot.crossings[]
this.theKnot.rightknot.vertices == arg0.rightknot.vertices
this.theKnot.rightknot.vertices.getClass().getName() == arg0.vertices.getClass().getName()
this.theKnot.rightknot.vertices[] == arg0.rightknot.vertices[]
this.theKnot.rightknot.binarycode == arg0.rightknot.binarycode
this.theKnot.rightknot.leftknot == arg0.rightknot.leftknot
this.theKnot.rightknot.rightknot == arg0.rightknot.rightknot
this.theKnot.rightknot.seifertCircles == arg0.rightknot.seifertCircles
this.theKnot.rightknot.smoothing == arg0.rightknot.smoothing
this.theKnot.seifertCircles == arg0.seifertCircles
arg0.crossings == orig(arg0.crossings)
arg0.crossings.getClass().getName() == arg0.leftknot.crossings.getClass().getName()
arg0.crossings.getClass().getName() == arg0.rightknot.crossings.getClass().getName()
arg0.crossings.getClass().getName() == orig(arg0.crossings.getClass().getName())
arg0.crossings.getClass().getName() == orig(arg0.leftknot.crossings.getClass().getName())
arg0.crossings.getClass().getName() == orig(arg0.rightknot.crossings.getClass().getName())
arg0.crossings[] == orig(arg0.crossings[])
arg0.crossings[].overstrand == orig(arg0.crossings[].overstrand)
arg0.crossings[].understrand == orig(arg0.crossings[].understrand)
arg0.crossings[].posneg == orig(arg0.crossings[].posneg)
arg0.vertices == orig(arg0.vertices)
arg0.vertices.getClass().getName() == arg0.leftknot.vertices.getClass().getName()
arg0.vertices.getClass().getName() == arg0.rightknot.vertices.getClass().getName()
arg0.vertices.getClass().getName() == orig(arg0.vertices.getClass().getName())
arg0.vertices.getClass().getName() == orig(arg0.leftknot.vertices.getClass().getName())
arg0.vertices.getClass().getName() == orig(arg0.rightknot.vertices.getClass().getName())
arg0.vertices[] == orig(arg0.vertices[])
arg0.vertices[].numberOfVertex == orig(arg0.vertices[].numberOfVertex)
arg0.vertices[].from == orig(arg0.vertices[].from)
arg0.vertices[].to == orig(arg0.vertices[].to)
arg0.vertices[].visited == orig(arg0.vertices[].visited)
arg0.binarycode == orig(arg0.binarycode)
arg0.binarycode.toString == orig(arg0.binarycode.toString)
arg0.leftknot == orig(arg0.leftknot)
arg0.leftknot.crossings == orig(arg0.leftknot.crossings)
arg0.leftknot.crossings[] == orig(arg0.leftknot.crossings[])
arg0.leftknot.crossings[].overstrand == orig(arg0.leftknot.crossings[].overstrand)
arg0.leftknot.crossings[].understrand == orig(arg0.leftknot.crossings[].understrand)
arg0.leftknot.crossings[].posneg == orig(arg0.leftknot.crossings[].posneg)
arg0.leftknot.vertices == orig(arg0.leftknot.vertices)
arg0.leftknot.vertices[] == orig(arg0.leftknot.vertices[])
arg0.leftknot.vertices[].numberOfVertex == orig(arg0.leftknot.vertices[].numberOfVertex)
arg0.leftknot.vertices[].from == orig(arg0.leftknot.vertices[].from)
arg0.leftknot.vertices[].to == orig(arg0.leftknot.vertices[].to)
arg0.leftknot.vertices[].visited == orig(arg0.leftknot.vertices[].visited)
arg0.leftknot.binarycode == orig(arg0.leftknot.binarycode)
arg0.leftknot.binarycode.toString == orig(arg0.leftknot.binarycode.toString)
arg0.leftknot.leftknot == orig(arg0.leftknot.leftknot)
arg0.leftknot.rightknot == orig(arg0.leftknot.rightknot)
arg0.leftknot.numcircles == orig(arg0.leftknot.numcircles)
arg0.leftknot.seifertCircles == orig(arg0.leftknot.seifertCircles)
arg0.leftknot.seifertCircles[] == orig(arg0.leftknot.seifertCircles[])
arg0.leftknot.smoothing == orig(arg0.leftknot.smoothing)
arg0.rightknot == orig(arg0.rightknot)
arg0.rightknot.crossings == orig(arg0.rightknot.crossings)
arg0.rightknot.crossings[] == orig(arg0.rightknot.crossings[])
arg0.rightknot.crossings[].overstrand == orig(arg0.rightknot.crossings[].overstrand)
arg0.rightknot.crossings[].understrand == orig(arg0.rightknot.crossings[].understrand)
arg0.rightknot.crossings[].posneg == orig(arg0.rightknot.crossings[].posneg)
arg0.rightknot.vertices == orig(arg0.rightknot.vertices)
arg0.rightknot.vertices[] == orig(arg0.rightknot.vertices[])
arg0.rightknot.vertices[].numberOfVertex == orig(arg0.rightknot.vertices[].numberOfVertex)
arg0.rightknot.vertices[].from == orig(arg0.rightknot.vertices[].from)
arg0.rightknot.vertices[].to == orig(arg0.rightknot.vertices[].to)
arg0.rightknot.vertices[].visited == orig(arg0.rightknot.vertices[].visited)
arg0.rightknot.binarycode == orig(arg0.rightknot.binarycode)
arg0.rightknot.binarycode.toString == orig(arg0.rightknot.binarycode.toString)
arg0.rightknot.leftknot == orig(arg0.rightknot.leftknot)
arg0.rightknot.rightknot == orig(arg0.rightknot.rightknot)
arg0.rightknot.numcircles == orig(arg0.rightknot.numcircles)
arg0.rightknot.seifertCircles == orig(arg0.rightknot.seifertCircles)
arg0.rightknot.seifertCircles[] == orig(arg0.rightknot.seifertCircles[])
arg0.rightknot.smoothing == orig(arg0.rightknot.smoothing)
arg0.numcircles == orig(arg0.numcircles)
arg0.seifertCircles == orig(arg0.seifertCircles)
arg0.seifertCircles[] == orig(arg0.seifertCircles[])
arg0.smoothing == orig(arg0.smoothing)
size(this.theKnot.leftknot.crossings[]) == size(arg0.crossings[])-1
size(this.theKnot.leftknot.vertices[]) == size(arg0.vertices[])
size(this.theKnot.rightknot.crossings[]) == size(arg0.crossings[])-1
size(this.theKnot.rightknot.vertices[]) == size(arg0.vertices[])
size(this.rows[])-1 == size(arg0.crossings[])
size(arg0.crossings[])-1 == size(arg0.leftknot.crossings[])
size(arg0.crossings[])-1 == size(arg0.rightknot.crossings[])
size(arg0.crossings[])-1 == orig(size(arg0.leftknot.crossings[]))
size(arg0.crossings[])-1 == orig(size(arg0.rightknot.crossings[]))
size(arg0.vertices[]) == size(arg0.leftknot.vertices[])
size(arg0.vertices[]) == size(arg0.rightknot.vertices[])
size(arg0.vertices[]) == orig(size(arg0.leftknot.vertices[]))
size(arg0.vertices[]) == orig(size(arg0.rightknot.vertices[]))
this.rows[].index == [1, 3, 3, 1]
this.rows[].index elements one of { 1, 3 }
arg0.crossings has only one value
arg0.crossings.getClass().getName() == Crossing[].class
arg0.crossings[] contains no nulls and has only one value, of length 3
arg0.crossings[].getClass().getName() == [Crossing, Crossing, Crossing]
arg0.crossings[].getClass().getName() elements == Crossing.class
arg0.crossings[].overstrand contains no nulls and has only one value, of length 3
arg0.crossings[].understrand contains no nulls and has only one value, of length 3
arg0.crossings[].posneg == [1, 1, 1]
arg0.crossings[].posneg elements == true
arg0.vertices has only one value
arg0.vertices.getClass().getName() == Vertex[].class
arg0.vertices[] contains no nulls and has only one value, of length 6
arg0.vertices[].getClass().getName() == [Vertex, Vertex, Vertex, Vertex, Vertex, Vertex]
arg0.vertices[].getClass().getName() elements == Vertex.class
arg0.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
arg0.vertices[].from contains no nulls and has only one value, of length 6
arg0.vertices[].to contains no nulls and has only one value, of length 6
arg0.vertices[].visited == [1, 1, 1, 1, 1, 1]
arg0.vertices[].visited elements == true
arg0.binarycode has only one value
arg0.binarycode.toString == ""
arg0.leftknot has only one value
arg0.leftknot.crossings has only one value
arg0.leftknot.crossings[] contains no nulls and has only one value, of length 2
arg0.leftknot.crossings[].getClass().getName() == [Crossing, Crossing]
arg0.leftknot.crossings[].getClass().getName() elements == Crossing.class
arg0.leftknot.crossings[].overstrand contains no nulls and has only one value, of length 2
arg0.leftknot.crossings[].understrand contains no nulls and has only one value, of length 2
arg0.leftknot.crossings[].posneg == [1, 1]
arg0.leftknot.crossings[].posneg elements == true
arg0.leftknot.vertices has only one value
arg0.leftknot.vertices[] contains no nulls and has only one value, of length 6
arg0.leftknot.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
arg0.leftknot.vertices[].from contains no nulls and has only one value, of length 6
arg0.leftknot.vertices[].to contains no nulls and has only one value, of length 6
arg0.leftknot.vertices[].visited == [1, 1, 1, 1, 1, 1]
arg0.leftknot.vertices[].visited elements == true
arg0.leftknot.binarycode has only one value
arg0.leftknot.binarycode.toString == "0"
arg0.leftknot.leftknot has only one value
arg0.leftknot.rightknot has only one value
arg0.leftknot.numcircles == 0
arg0.leftknot.seifertCircles has only one value
arg0.leftknot.seifertCircles[] contains no nulls and has only one value, of length 2
arg0.leftknot.seifertCircles[].getClass().getName() == [SeifertCircle, SeifertCircle]
arg0.leftknot.seifertCircles[].getClass().getName() elements == SeifertCircle.class
arg0.leftknot.smoothing has only one value
arg0.rightknot has only one value
arg0.rightknot.crossings has only one value
arg0.rightknot.crossings[] contains no nulls and has only one value, of length 2
arg0.rightknot.crossings[].overstrand contains no nulls and has only one value, of length 2
arg0.rightknot.crossings[].understrand contains no nulls and has only one value, of length 2
arg0.rightknot.crossings[].posneg == [0, 0]
arg0.rightknot.crossings[].posneg elements == false
arg0.rightknot.vertices has only one value
arg0.rightknot.vertices[] contains no nulls and has only one value, of length 6
arg0.rightknot.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
arg0.rightknot.vertices[].from contains no nulls and has only one value, of length 6
arg0.rightknot.vertices[].to contains no nulls and has only one value, of length 6
arg0.rightknot.vertices[].visited == [1, 1, 1, 1, 1, 1]
arg0.rightknot.vertices[].visited elements == true
arg0.rightknot.binarycode has only one value
arg0.rightknot.binarycode.toString == "1"
arg0.rightknot.leftknot has only one value
arg0.rightknot.rightknot has only one value
arg0.rightknot.numcircles == 0
arg0.rightknot.seifertCircles has only one value
arg0.rightknot.seifertCircles[] contains no nulls and has only one value, of length 1
arg0.rightknot.seifertCircles[] elements has only one value
arg0.rightknot.seifertCircles[].getClass().getName() == [SeifertCircle]
arg0.rightknot.seifertCircles[].getClass().getName() elements == SeifertCircle.class
arg0.rightknot.smoothing has only one value
arg0.numcircles == 0
arg0.seifertCircles has only one value
arg0.seifertCircles[] contains no nulls and has only one value, of length 1
arg0.seifertCircles[] elements has only one value
arg0.seifertCircles[].getClass().getName() == [SeifertCircle]
arg0.seifertCircles[].getClass().getName() elements == SeifertCircle.class
arg0.smoothing == null
size(arg0.vertices[]) == 6
size(arg0.leftknot.seifertCircles[]) == 2
size(arg0.rightknot.seifertCircles[]) == 1
size(arg0.seifertCircles[]) == 1
size(arg0.vertices[]) in this.theKnot.vertices[].numberOfVertex
size(arg0.vertices[])-1 in this.theKnot.vertices[].numberOfVertex
size(arg0.vertices[]) in this.theKnot.leftknot.vertices[].numberOfVertex
size(arg0.vertices[])-1 in this.theKnot.leftknot.vertices[].numberOfVertex
size(arg0.vertices[]) in this.theKnot.rightknot.vertices[].numberOfVertex
size(arg0.vertices[])-1 in this.theKnot.rightknot.vertices[].numberOfVertex
size(arg0.crossings[]) in this.rows[].index
size(arg0.leftknot.crossings[])-1 in this.rows[].index
size(arg0.vertices[]) in arg0.vertices[].numberOfVertex
size(arg0.vertices[])-1 in arg0.vertices[].numberOfVertex
size(arg0.vertices[]) in arg0.leftknot.vertices[].numberOfVertex
size(arg0.vertices[])-1 in arg0.leftknot.vertices[].numberOfVertex
size(arg0.vertices[]) in arg0.rightknot.vertices[].numberOfVertex
size(arg0.vertices[])-1 in arg0.rightknot.vertices[].numberOfVertex
===========================================================================
KhovanovMap.debug():::ENTER
this.rows[].index == [1, 3, 3, 1]
this.rows[].index elements one of { 1, 3 }
size(this.theKnot.crossings[]) in this.rows[].index
size(this.theKnot.leftknot.crossings[])-1 in this.rows[].index
===========================================================================
KhovanovMap.debug():::EXIT
this.theKnot == orig(this.theKnot)
this.theKnot.crossings == orig(this.theKnot.crossings)
this.theKnot.crossings.getClass().getName() == orig(this.theKnot.crossings.getClass().getName())
this.theKnot.crossings.getClass().getName() == orig(this.theKnot.leftknot.crossings.getClass().getName())
this.theKnot.crossings.getClass().getName() == orig(this.theKnot.rightknot.crossings.getClass().getName())
this.theKnot.crossings[] == orig(this.theKnot.crossings[])
this.theKnot.crossings[].overstrand == orig(this.theKnot.crossings[].overstrand)
this.theKnot.crossings[].understrand == orig(this.theKnot.crossings[].understrand)
this.theKnot.crossings[].posneg == orig(this.theKnot.crossings[].posneg)
this.theKnot.vertices == orig(this.theKnot.vertices)
this.theKnot.vertices.getClass().getName() == orig(this.theKnot.vertices.getClass().getName())
this.theKnot.vertices.getClass().getName() == orig(this.theKnot.leftknot.vertices.getClass().getName())
this.theKnot.vertices.getClass().getName() == orig(this.theKnot.rightknot.vertices.getClass().getName())
this.theKnot.vertices[] == orig(this.theKnot.vertices[])
this.theKnot.vertices[].numberOfVertex == orig(this.theKnot.vertices[].numberOfVertex)
this.theKnot.vertices[].from == orig(this.theKnot.vertices[].from)
this.theKnot.vertices[].to == orig(this.theKnot.vertices[].to)
this.theKnot.vertices[].visited == orig(this.theKnot.vertices[].visited)
this.theKnot.binarycode == orig(this.theKnot.binarycode)
this.theKnot.binarycode.toString == orig(this.theKnot.binarycode.toString)
this.theKnot.leftknot == orig(this.theKnot.leftknot)
this.theKnot.leftknot.crossings == orig(this.theKnot.leftknot.crossings)
this.theKnot.leftknot.crossings[] == orig(this.theKnot.leftknot.crossings[])
this.theKnot.leftknot.crossings[].overstrand == orig(this.theKnot.leftknot.crossings[].overstrand)
this.theKnot.leftknot.crossings[].understrand == orig(this.theKnot.leftknot.crossings[].understrand)
this.theKnot.leftknot.crossings[].posneg == orig(this.theKnot.leftknot.crossings[].posneg)
this.theKnot.leftknot.vertices == orig(this.theKnot.leftknot.vertices)
this.theKnot.leftknot.vertices[] == orig(this.theKnot.leftknot.vertices[])
this.theKnot.leftknot.vertices[].numberOfVertex == orig(this.theKnot.leftknot.vertices[].numberOfVertex)
this.theKnot.leftknot.vertices[].from == orig(this.theKnot.leftknot.vertices[].from)
this.theKnot.leftknot.vertices[].to == orig(this.theKnot.leftknot.vertices[].to)
this.theKnot.leftknot.vertices[].visited == orig(this.theKnot.leftknot.vertices[].visited)
this.theKnot.leftknot.binarycode == orig(this.theKnot.leftknot.binarycode)
this.theKnot.leftknot.binarycode.toString == orig(this.theKnot.leftknot.binarycode.toString)
this.theKnot.leftknot.leftknot == orig(this.theKnot.leftknot.leftknot)
this.theKnot.leftknot.rightknot == orig(this.theKnot.leftknot.rightknot)
this.theKnot.leftknot.numcircles == orig(this.theKnot.leftknot.numcircles)
this.theKnot.leftknot.seifertCircles == orig(this.theKnot.leftknot.seifertCircles)
this.theKnot.leftknot.seifertCircles[] == orig(this.theKnot.leftknot.seifertCircles[])
this.theKnot.leftknot.smoothing == orig(this.theKnot.leftknot.smoothing)
this.theKnot.rightknot == orig(this.theKnot.rightknot)
this.theKnot.rightknot.crossings == orig(this.theKnot.rightknot.crossings)
this.theKnot.rightknot.crossings[] == orig(this.theKnot.rightknot.crossings[])
this.theKnot.rightknot.crossings[].overstrand == orig(this.theKnot.rightknot.crossings[].overstrand)
this.theKnot.rightknot.crossings[].understrand == orig(this.theKnot.rightknot.crossings[].understrand)
this.theKnot.rightknot.crossings[].posneg == orig(this.theKnot.rightknot.crossings[].posneg)
this.theKnot.rightknot.vertices == orig(this.theKnot.rightknot.vertices)
this.theKnot.rightknot.vertices[] == orig(this.theKnot.rightknot.vertices[])
this.theKnot.rightknot.vertices[].numberOfVertex == orig(this.theKnot.rightknot.vertices[].numberOfVertex)
this.theKnot.rightknot.vertices[].from == orig(this.theKnot.rightknot.vertices[].from)
this.theKnot.rightknot.vertices[].to == orig(this.theKnot.rightknot.vertices[].to)
this.theKnot.rightknot.vertices[].visited == orig(this.theKnot.rightknot.vertices[].visited)
this.theKnot.rightknot.binarycode == orig(this.theKnot.rightknot.binarycode)
this.theKnot.rightknot.binarycode.toString == orig(this.theKnot.rightknot.binarycode.toString)
this.theKnot.rightknot.leftknot == orig(this.theKnot.rightknot.leftknot)
this.theKnot.rightknot.rightknot == orig(this.theKnot.rightknot.rightknot)
this.theKnot.rightknot.numcircles == orig(this.theKnot.rightknot.numcircles)
this.theKnot.rightknot.seifertCircles == orig(this.theKnot.rightknot.seifertCircles)
this.theKnot.rightknot.seifertCircles[] == orig(this.theKnot.rightknot.seifertCircles[])
this.theKnot.rightknot.smoothing == orig(this.theKnot.rightknot.smoothing)
this.theKnot.numcircles == orig(this.theKnot.numcircles)
this.theKnot.seifertCircles == orig(this.theKnot.seifertCircles)
this.theKnot.seifertCircles[] == orig(this.theKnot.seifertCircles[])
this.theKnot.smoothing == orig(this.theKnot.smoothing)
this.resolvedKnots == orig(this.resolvedKnots)
this.rows == orig(this.rows)
this.rows.getClass().getName() == orig(this.rows.getClass().getName())
this.rows[] == orig(this.rows[])
this.rows[].nodes == orig(this.rows[].nodes)
this.rows[].index == orig(this.rows[].index)
this.maps == orig(this.maps)
size(this.theKnot.crossings[]) == orig(size(this.rows[]))-1
size(this.theKnot.crossings[])-1 == orig(size(this.theKnot.leftknot.crossings[]))
size(this.theKnot.crossings[])-1 == orig(size(this.theKnot.rightknot.crossings[]))
size(this.theKnot.vertices[]) == orig(size(this.theKnot.leftknot.vertices[]))
size(this.theKnot.vertices[]) == orig(size(this.theKnot.rightknot.vertices[]))
this.rows[].index == [1, 3, 3, 1]
this.rows[].index elements one of { 1, 3 }
size(this.theKnot.crossings[]) in this.rows[].index
size(this.theKnot.leftknot.crossings[])-1 in this.rows[].index
===========================================================================
KhovanovMap.fillResolvedKnots(Knot):::ENTER
this.theKnot.crossings.getClass().getName() == arg0.crossings.getClass().getName()
this.theKnot.crossings.getClass().getName() == arg0.leftknot.crossings.getClass().getName()
this.theKnot.vertices.getClass().getName() == arg0.vertices.getClass().getName()
this.theKnot.vertices.getClass().getName() == arg0.leftknot.vertices.getClass().getName()
this.theKnot.vertices[].getClass().getName() == arg0.leftknot.vertices[].getClass().getName()
arg0.leftknot.crossings.getClass().getName() == arg0.rightknot.crossings.getClass().getName()
arg0.leftknot.vertices.getClass().getName() == arg0.rightknot.vertices.getClass().getName()
size(this.theKnot.vertices[]) == size(arg0.vertices[])
size(this.theKnot.vertices[]) == size(arg0.leftknot.vertices[])
size(arg0.crossings[])-1 == size(arg0.leftknot.crossings[])
size(arg0.leftknot.crossings[]) == size(arg0.rightknot.crossings[])
size(arg0.leftknot.vertices[]) == size(arg0.rightknot.vertices[])
arg0 != null
arg0.crossings != null
arg0.crossings[] elements != null
arg0.crossings[].getClass().getName() elements == Crossing.class
arg0.crossings[].posneg elements are equal
arg0.vertices != null
arg0.vertices[] elements != null
arg0.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
arg0.vertices[].numberOfVertex elements >= 1
arg0.vertices[].numberOfVertex sorted by <
arg0.vertices[].from elements != null
arg0.vertices[].to elements != null
arg0.vertices[].visited == [1, 1, 1, 1, 1, 1]
arg0.vertices[].visited elements == true
arg0.vertices[].visited elements != null
arg0.binarycode != null
arg0.leftknot.crossings.getClass().getName() == Crossing[].class
arg0.leftknot.crossings[].getClass().getName() elements == Crossing.class
arg0.leftknot.crossings[].overstrand sorted by >
arg0.leftknot.crossings[].understrand sorted by >
arg0.leftknot.crossings[].posneg elements are equal
arg0.leftknot.vertices.getClass().getName() == Vertex[].class
arg0.leftknot.vertices[].getClass().getName() == [Vertex, Vertex, Vertex, Vertex, Vertex, Vertex]
arg0.leftknot.vertices[].getClass().getName() elements == Vertex.class
arg0.leftknot.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
arg0.leftknot.vertices[].numberOfVertex elements >= 1
arg0.leftknot.vertices[].numberOfVertex sorted by <
arg0.leftknot.vertices[].visited == [1, 1, 1, 1, 1, 1]
arg0.leftknot.vertices[].visited elements == true
arg0.leftknot.numcircles == 0
arg0.leftknot.seifertCircles[].getClass().getName() elements == SeifertCircle.class
arg0.leftknot.seifertCircles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
arg0.rightknot.crossings[].overstrand sorted by <
arg0.rightknot.crossings[].understrand sorted by <
arg0.rightknot.crossings[].posneg elements == false
arg0.rightknot.crossings[].posneg one of { [], [0], [0, 0] }
arg0.rightknot.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
arg0.rightknot.vertices[].numberOfVertex elements >= 1
arg0.rightknot.vertices[].numberOfVertex sorted by <
arg0.rightknot.vertices[].visited == [1, 1, 1, 1, 1, 1]
arg0.rightknot.vertices[].visited elements == true
arg0.rightknot.numcircles == 0
arg0.rightknot.seifertCircles[].getClass().getName() elements == SeifertCircle.class
arg0.numcircles == 0
arg0.seifertCircles != null
arg0.seifertCircles[] elements != null
arg0.seifertCircles[].getClass().getName() elements == SeifertCircle.class
arg0.smoothing.two >= 1
arg0.smoothing.four >= 1
size(arg0.leftknot.crossings[]) one of { 0, 1, 2 }
size(arg0.leftknot.vertices[]) == 6
size(arg0.leftknot.seifertCircles[]) one of { 1, 2 }
size(arg0.rightknot.seifertCircles[]) one of { 1, 2, 3 }
size(arg0.seifertCircles[]) one of { 1, 2, 3 }
this.theKnot.crossings.getClass().getName() != arg0.leftknot.vertices.getClass().getName()
this.theKnot.vertices.getClass().getName() != arg0.leftknot.crossings.getClass().getName()
this.theKnot.vertices[].getClass().getName() == arg0.leftknot.vertices[].getClass().getName() (elementwise)
arg0.smoothing.one in this.theKnot.vertices[].numberOfVertex
arg0.smoothing.two in this.theKnot.vertices[].numberOfVertex
arg0.smoothing.three in this.theKnot.vertices[].numberOfVertex
arg0.smoothing.four in this.theKnot.vertices[].numberOfVertex
size(arg0.leftknot.vertices[]) in this.theKnot.vertices[].numberOfVertex
this.theKnot.vertices[].numberOfVertex elements <= size(arg0.leftknot.vertices[])
size(arg0.leftknot.vertices[])-1 in this.theKnot.vertices[].numberOfVertex
this.theKnot.vertices[arg0.smoothing.one] in this.theKnot.vertices[].from
this.theKnot.vertices[arg0.smoothing.one-1] in this.theKnot.vertices[].from
this.theKnot.vertices[arg0.smoothing.two-1] in this.theKnot.vertices[].from
this.theKnot.vertices[arg0.smoothing.three-1] in this.theKnot.vertices[].from
this.theKnot.vertices[arg0.smoothing.four-1] in this.theKnot.vertices[].from
this.theKnot.vertices[arg0.smoothing.one] in this.theKnot.vertices[].to
this.theKnot.vertices[arg0.smoothing.one-1] in this.theKnot.vertices[].to
this.theKnot.vertices[arg0.smoothing.two-1] in this.theKnot.vertices[].to
this.theKnot.vertices[arg0.smoothing.three-1] in this.theKnot.vertices[].to
this.theKnot.vertices[arg0.smoothing.four-1] in this.theKnot.vertices[].to
arg0.smoothing.one in this.theKnot.leftknot.vertices[].numberOfVertex
arg0.smoothing.two in this.theKnot.leftknot.vertices[].numberOfVertex
arg0.smoothing.three in this.theKnot.leftknot.vertices[].numberOfVertex
arg0.smoothing.four in this.theKnot.leftknot.vertices[].numberOfVertex
size(arg0.leftknot.vertices[]) in this.theKnot.leftknot.vertices[].numberOfVertex
this.theKnot.leftknot.vertices[].numberOfVertex elements <= size(arg0.leftknot.vertices[])
size(arg0.leftknot.vertices[])-1 in this.theKnot.leftknot.vertices[].numberOfVertex
this.theKnot.leftknot.vertices[arg0.smoothing.one] in this.theKnot.leftknot.vertices[].from
this.theKnot.leftknot.vertices[arg0.smoothing.one-1] in this.theKnot.leftknot.vertices[].from
this.theKnot.leftknot.vertices[arg0.smoothing.two-1] in this.theKnot.leftknot.vertices[].from
this.theKnot.leftknot.vertices[arg0.smoothing.three-1] in this.theKnot.leftknot.vertices[].from
this.theKnot.leftknot.vertices[arg0.smoothing.four-1] in this.theKnot.leftknot.vertices[].from
this.theKnot.leftknot.vertices[arg0.smoothing.one] in this.theKnot.leftknot.vertices[].to
this.theKnot.leftknot.vertices[arg0.smoothing.one-1] in this.theKnot.leftknot.vertices[].to
this.theKnot.leftknot.vertices[arg0.smoothing.two-1] in this.theKnot.leftknot.vertices[].to
this.theKnot.leftknot.vertices[arg0.smoothing.three-1] in this.theKnot.leftknot.vertices[].to
this.theKnot.leftknot.vertices[arg0.smoothing.four-1] in this.theKnot.leftknot.vertices[].to
arg0.smoothing.one in this.theKnot.rightknot.vertices[].numberOfVertex
arg0.smoothing.two in this.theKnot.rightknot.vertices[].numberOfVertex
arg0.smoothing.three in this.theKnot.rightknot.vertices[].numberOfVertex
arg0.smoothing.four in this.theKnot.rightknot.vertices[].numberOfVertex
size(arg0.leftknot.vertices[]) in this.theKnot.rightknot.vertices[].numberOfVertex
this.theKnot.rightknot.vertices[].numberOfVertex elements <= size(arg0.leftknot.vertices[])
size(arg0.leftknot.vertices[])-1 in this.theKnot.rightknot.vertices[].numberOfVertex
this.theKnot.rightknot.vertices[arg0.smoothing.one] in this.theKnot.rightknot.vertices[].from
this.theKnot.rightknot.vertices[arg0.smoothing.one-1] in this.theKnot.rightknot.vertices[].from
this.theKnot.rightknot.vertices[arg0.smoothing.two-1] in this.theKnot.rightknot.vertices[].from
this.theKnot.rightknot.vertices[arg0.smoothing.three-1] in this.theKnot.rightknot.vertices[].from
this.theKnot.rightknot.vertices[arg0.smoothing.four-1] in this.theKnot.rightknot.vertices[].from
this.theKnot.rightknot.vertices[arg0.smoothing.one] in this.theKnot.rightknot.vertices[].to
this.theKnot.rightknot.vertices[arg0.smoothing.one-1] in this.theKnot.rightknot.vertices[].to
this.theKnot.rightknot.vertices[arg0.smoothing.two-1] in this.theKnot.rightknot.vertices[].to
this.theKnot.rightknot.vertices[arg0.smoothing.three-1] in this.theKnot.rightknot.vertices[].to
this.theKnot.rightknot.vertices[arg0.smoothing.four-1] in this.theKnot.rightknot.vertices[].to
this.rows.getClass().getName() != arg0.leftknot.crossings.getClass().getName()
this.rows.getClass().getName() != arg0.leftknot.vertices.getClass().getName()
arg0.smoothing.one in arg0.vertices[].numberOfVertex
arg0.smoothing.two in arg0.vertices[].numberOfVertex
arg0.smoothing.three in arg0.vertices[].numberOfVertex
arg0.smoothing.four in arg0.vertices[].numberOfVertex
arg0.vertices[].numberOfVertex elements <= size(this.theKnot.vertices[])
size(this.theKnot.vertices[]) in arg0.vertices[].numberOfVertex
size(this.theKnot.vertices[])-1 in arg0.vertices[].numberOfVertex
arg0.vertices[].numberOfVertex elements <= size(arg0.leftknot.vertices[])
size(arg0.leftknot.vertices[]) in arg0.vertices[].numberOfVertex
size(arg0.leftknot.vertices[])-1 in arg0.vertices[].numberOfVertex
arg0.vertices[arg0.smoothing.one] in arg0.vertices[].from
arg0.vertices[arg0.smoothing.one-1] in arg0.vertices[].from
arg0.vertices[arg0.smoothing.two-1] in arg0.vertices[].from
arg0.vertices[arg0.smoothing.three-1] in arg0.vertices[].from
arg0.vertices[arg0.smoothing.four-1] in arg0.vertices[].from
arg0.vertices[arg0.smoothing.one] in arg0.vertices[].to
arg0.vertices[arg0.smoothing.one-1] in arg0.vertices[].to
arg0.vertices[arg0.smoothing.two-1] in arg0.vertices[].to
arg0.vertices[arg0.smoothing.three-1] in arg0.vertices[].to
arg0.vertices[arg0.smoothing.four-1] in arg0.vertices[].to
arg0.leftknot.crossings.getClass().getName() != arg0.leftknot.vertices.getClass().getName()
arg0.smoothing.one in arg0.leftknot.vertices[].numberOfVertex
arg0.smoothing.two in arg0.leftknot.vertices[].numberOfVertex
arg0.smoothing.three in arg0.leftknot.vertices[].numberOfVertex
arg0.smoothing.four in arg0.leftknot.vertices[].numberOfVertex
arg0.leftknot.vertices[].numberOfVertex elements <= size(this.theKnot.vertices[])
size(this.theKnot.vertices[]) in arg0.leftknot.vertices[].numberOfVertex
size(this.theKnot.vertices[])-1 in arg0.leftknot.vertices[].numberOfVertex
arg0.leftknot.vertices[].numberOfVertex elements <= size(arg0.leftknot.vertices[])
size(arg0.leftknot.vertices[]) in arg0.leftknot.vertices[].numberOfVertex
size(arg0.leftknot.vertices[])-1 in arg0.leftknot.vertices[].numberOfVertex
arg0.leftknot.vertices[arg0.smoothing.one] in arg0.leftknot.vertices[].from
arg0.leftknot.vertices[arg0.smoothing.one-1] in arg0.leftknot.vertices[].from
arg0.leftknot.vertices[arg0.smoothing.two] in arg0.leftknot.vertices[].from
arg0.leftknot.vertices[arg0.smoothing.two-1] in arg0.leftknot.vertices[].from
arg0.leftknot.vertices[arg0.smoothing.three-1] in arg0.leftknot.vertices[].from
arg0.leftknot.vertices[arg0.smoothing.four-1] in arg0.leftknot.vertices[].from
arg0.leftknot.vertices[arg0.smoothing.one] in arg0.leftknot.vertices[].to
arg0.leftknot.vertices[arg0.smoothing.one-1] in arg0.leftknot.vertices[].to
arg0.leftknot.vertices[arg0.smoothing.two] in arg0.leftknot.vertices[].to
arg0.leftknot.vertices[arg0.smoothing.two-1] in arg0.leftknot.vertices[].to
arg0.leftknot.vertices[arg0.smoothing.three-1] in arg0.leftknot.vertices[].to
arg0.leftknot.vertices[arg0.smoothing.four-1] in arg0.leftknot.vertices[].to
arg0.smoothing.one in arg0.rightknot.vertices[].numberOfVertex
arg0.smoothing.two in arg0.rightknot.vertices[].numberOfVertex
arg0.smoothing.three in arg0.rightknot.vertices[].numberOfVertex
arg0.smoothing.four in arg0.rightknot.vertices[].numberOfVertex
arg0.rightknot.vertices[].numberOfVertex elements <= size(this.theKnot.vertices[])
size(this.theKnot.vertices[]) in arg0.rightknot.vertices[].numberOfVertex
size(this.theKnot.vertices[])-1 in arg0.rightknot.vertices[].numberOfVertex
arg0.rightknot.vertices[].numberOfVertex elements <= size(arg0.leftknot.vertices[])
size(arg0.leftknot.vertices[]) in arg0.rightknot.vertices[].numberOfVertex
size(arg0.leftknot.vertices[])-1 in arg0.rightknot.vertices[].numberOfVertex
arg0.rightknot.vertices[arg0.smoothing.one] in arg0.rightknot.vertices[].from
arg0.rightknot.vertices[arg0.smoothing.one-1] in arg0.rightknot.vertices[].from
arg0.rightknot.vertices[arg0.smoothing.two] in arg0.rightknot.vertices[].from
arg0.rightknot.vertices[arg0.smoothing.two-1] in arg0.rightknot.vertices[].from
arg0.rightknot.vertices[arg0.smoothing.three-1] in arg0.rightknot.vertices[].from
arg0.rightknot.vertices[arg0.smoothing.four-1] in arg0.rightknot.vertices[].from
arg0.rightknot.vertices[arg0.smoothing.one] in arg0.rightknot.vertices[].to
arg0.rightknot.vertices[arg0.smoothing.one-1] in arg0.rightknot.vertices[].to
arg0.rightknot.vertices[arg0.smoothing.two] in arg0.rightknot.vertices[].to
arg0.rightknot.vertices[arg0.smoothing.two-1] in arg0.rightknot.vertices[].to
arg0.rightknot.vertices[arg0.smoothing.three-1] in arg0.rightknot.vertices[].to
arg0.rightknot.vertices[arg0.smoothing.four-1] in arg0.rightknot.vertices[].to
arg0.smoothing.one != arg0.smoothing.two
arg0.smoothing.one != arg0.smoothing.three
arg0.smoothing.one != arg0.smoothing.four
arg0.smoothing.one <= size(this.theKnot.vertices[])-1
arg0.smoothing.two != arg0.smoothing.three
arg0.smoothing.two != arg0.smoothing.four
arg0.smoothing.two <= size(this.theKnot.vertices[])
arg0.smoothing.three != arg0.smoothing.four
arg0.smoothing.three <= size(this.theKnot.vertices[])
arg0.smoothing.three != size(this.theKnot.vertices[])-1
arg0.smoothing.four <= size(this.theKnot.vertices[])
size(this.theKnot.crossings[]) >= size(arg0.crossings[])
size(this.theKnot.crossings[])-1 >= size(arg0.crossings[])-1
size(this.theKnot.crossings[])-1 >= size(arg0.leftknot.crossings[])
size(this.theKnot.leftknot.crossings[])-1 >= size(arg0.leftknot.crossings[])-1
===========================================================================
KhovanovMap.fillResolvedKnots(Knot):::EXIT
this.theKnot == orig(this.theKnot)
this.theKnot.crossings == orig(this.theKnot.crossings)
this.theKnot.crossings.getClass().getName() == arg0.crossings.getClass().getName()
this.theKnot.crossings[] == orig(this.theKnot.crossings[])
this.theKnot.crossings[].overstrand == orig(this.theKnot.crossings[].overstrand)
this.theKnot.crossings[].understrand == orig(this.theKnot.crossings[].understrand)
this.theKnot.crossings[].posneg == orig(this.theKnot.crossings[].posneg)
this.theKnot.vertices == orig(this.theKnot.vertices)
this.theKnot.vertices.getClass().getName() == arg0.vertices.getClass().getName()
this.theKnot.vertices[] == orig(this.theKnot.vertices[])
this.theKnot.vertices[].numberOfVertex == orig(this.theKnot.vertices[].numberOfVertex)
this.theKnot.vertices[].from == orig(this.theKnot.vertices[].from)
this.theKnot.vertices[].to == orig(this.theKnot.vertices[].to)
this.theKnot.vertices[].visited == orig(this.theKnot.vertices[].visited)
this.theKnot.binarycode == orig(this.theKnot.binarycode)
this.theKnot.binarycode.toString == orig(this.theKnot.binarycode.toString)
this.theKnot.leftknot == orig(this.theKnot.leftknot)
this.theKnot.leftknot.crossings == orig(this.theKnot.leftknot.crossings)
this.theKnot.leftknot.crossings.getClass().getName() == arg0.crossings.getClass().getName()
this.theKnot.leftknot.crossings[] == orig(this.theKnot.leftknot.crossings[])
this.theKnot.leftknot.crossings[].overstrand == orig(this.theKnot.leftknot.crossings[].overstrand)
this.theKnot.leftknot.crossings[].understrand == orig(this.theKnot.leftknot.crossings[].understrand)
this.theKnot.leftknot.crossings[].posneg == orig(this.theKnot.leftknot.crossings[].posneg)
this.theKnot.leftknot.vertices == orig(this.theKnot.leftknot.vertices)
this.theKnot.leftknot.vertices.getClass().getName() == arg0.vertices.getClass().getName()
this.theKnot.leftknot.vertices[] == orig(this.theKnot.leftknot.vertices[])
this.theKnot.leftknot.vertices[].numberOfVertex == orig(this.theKnot.leftknot.vertices[].numberOfVertex)
this.theKnot.leftknot.vertices[].from == orig(this.theKnot.leftknot.vertices[].from)
this.theKnot.leftknot.vertices[].to == orig(this.theKnot.leftknot.vertices[].to)
this.theKnot.leftknot.vertices[].visited == orig(this.theKnot.leftknot.vertices[].visited)
this.theKnot.leftknot.binarycode == orig(this.theKnot.leftknot.binarycode)
this.theKnot.leftknot.binarycode.toString == orig(this.theKnot.leftknot.binarycode.toString)
this.theKnot.leftknot.leftknot == orig(this.theKnot.leftknot.leftknot)
this.theKnot.leftknot.rightknot == orig(this.theKnot.leftknot.rightknot)
this.theKnot.leftknot.numcircles == orig(this.theKnot.leftknot.numcircles)
this.theKnot.leftknot.seifertCircles == orig(this.theKnot.leftknot.seifertCircles)
this.theKnot.leftknot.seifertCircles[] == orig(this.theKnot.leftknot.seifertCircles[])
this.theKnot.leftknot.smoothing == orig(this.theKnot.leftknot.smoothing)
this.theKnot.rightknot == orig(this.theKnot.rightknot)
this.theKnot.rightknot.crossings == orig(this.theKnot.rightknot.crossings)
this.theKnot.rightknot.crossings.getClass().getName() == arg0.crossings.getClass().getName()
this.theKnot.rightknot.crossings[] == orig(this.theKnot.rightknot.crossings[])
this.theKnot.rightknot.crossings[].overstrand == orig(this.theKnot.rightknot.crossings[].overstrand)
this.theKnot.rightknot.crossings[].understrand == orig(this.theKnot.rightknot.crossings[].understrand)
this.theKnot.rightknot.crossings[].posneg == orig(this.theKnot.rightknot.crossings[].posneg)
this.theKnot.rightknot.vertices == orig(this.theKnot.rightknot.vertices)
this.theKnot.rightknot.vertices.getClass().getName() == arg0.vertices.getClass().getName()
this.theKnot.rightknot.vertices[] == orig(this.theKnot.rightknot.vertices[])
this.theKnot.rightknot.vertices[].numberOfVertex == orig(this.theKnot.rightknot.vertices[].numberOfVertex)
this.theKnot.rightknot.vertices[].from == orig(this.theKnot.rightknot.vertices[].from)
this.theKnot.rightknot.vertices[].to == orig(this.theKnot.rightknot.vertices[].to)
this.theKnot.rightknot.vertices[].visited == orig(this.theKnot.rightknot.vertices[].visited)
this.theKnot.rightknot.binarycode == orig(this.theKnot.rightknot.binarycode)
this.theKnot.rightknot.binarycode.toString == orig(this.theKnot.rightknot.binarycode.toString)
this.theKnot.rightknot.leftknot == orig(this.theKnot.rightknot.leftknot)
this.theKnot.rightknot.rightknot == orig(this.theKnot.rightknot.rightknot)
this.theKnot.rightknot.numcircles == orig(this.theKnot.rightknot.numcircles)
this.theKnot.rightknot.seifertCircles == orig(this.theKnot.rightknot.seifertCircles)
this.theKnot.rightknot.seifertCircles[] == orig(this.theKnot.rightknot.seifertCircles[])
this.theKnot.rightknot.smoothing == orig(this.theKnot.rightknot.smoothing)
this.theKnot.numcircles == orig(this.theKnot.numcircles)
this.theKnot.seifertCircles == orig(this.theKnot.seifertCircles)
this.theKnot.seifertCircles[] == orig(this.theKnot.seifertCircles[])
this.theKnot.smoothing == orig(this.theKnot.smoothing)
this.resolvedKnots == orig(this.resolvedKnots)
this.rows == orig(this.rows)
this.rows.getClass().getName() == orig(this.rows.getClass().getName())
this.rows[] == orig(this.rows[])
this.rows[].nodes == orig(this.rows[].nodes)
this.maps == orig(this.maps)
arg0.crossings == orig(arg0.crossings)
arg0.crossings.getClass().getName() == arg0.leftknot.crossings.getClass().getName()
arg0.crossings.getClass().getName() == orig(this.theKnot.crossings.getClass().getName())
arg0.crossings.getClass().getName() == orig(this.theKnot.leftknot.crossings.getClass().getName())
arg0.crossings.getClass().getName() == orig(this.theKnot.rightknot.crossings.getClass().getName())
arg0.crossings.getClass().getName() == orig(arg0.crossings.getClass().getName())
arg0.crossings[] == orig(arg0.crossings[])
arg0.crossings[].overstrand == orig(arg0.crossings[].overstrand)
arg0.crossings[].understrand == orig(arg0.crossings[].understrand)
arg0.crossings[].posneg == orig(arg0.crossings[].posneg)
arg0.vertices == orig(arg0.vertices)
arg0.vertices.getClass().getName() == arg0.leftknot.vertices.getClass().getName()
arg0.vertices.getClass().getName() == orig(this.theKnot.vertices.getClass().getName())
arg0.vertices.getClass().getName() == orig(this.theKnot.leftknot.vertices.getClass().getName())
arg0.vertices.getClass().getName() == orig(this.theKnot.rightknot.vertices.getClass().getName())
arg0.vertices.getClass().getName() == orig(arg0.vertices.getClass().getName())
arg0.vertices[] == orig(arg0.vertices[])
arg0.vertices[].getClass().getName() == arg0.leftknot.vertices[].getClass().getName()
arg0.vertices[].numberOfVertex == orig(arg0.vertices[].numberOfVertex)
arg0.vertices[].from == orig(arg0.vertices[].from)
arg0.vertices[].to == orig(arg0.vertices[].to)
arg0.vertices[].visited == orig(arg0.vertices[].visited)
arg0.binarycode == orig(arg0.binarycode)
arg0.binarycode.toString == orig(arg0.binarycode.toString)
arg0.leftknot == orig(arg0.leftknot)
arg0.leftknot.crossings == orig(arg0.leftknot.crossings)
arg0.leftknot.crossings.getClass().getName() == arg0.rightknot.crossings.getClass().getName()
arg0.leftknot.crossings.getClass().getName() == orig(arg0.leftknot.crossings.getClass().getName())
arg0.leftknot.crossings.getClass().getName() == orig(arg0.rightknot.crossings.getClass().getName())
arg0.leftknot.crossings[] == orig(arg0.leftknot.crossings[])
arg0.leftknot.crossings[].overstrand == orig(arg0.leftknot.crossings[].overstrand)
arg0.leftknot.crossings[].understrand == orig(arg0.leftknot.crossings[].understrand)
arg0.leftknot.crossings[].posneg == orig(arg0.leftknot.crossings[].posneg)
arg0.leftknot.vertices == orig(arg0.leftknot.vertices)
arg0.leftknot.vertices.getClass().getName() == arg0.rightknot.vertices.getClass().getName()
arg0.leftknot.vertices.getClass().getName() == orig(arg0.leftknot.vertices.getClass().getName())
arg0.leftknot.vertices.getClass().getName() == orig(arg0.rightknot.vertices.getClass().getName())
arg0.leftknot.vertices[] == orig(arg0.leftknot.vertices[])
arg0.leftknot.vertices[].numberOfVertex == orig(arg0.leftknot.vertices[].numberOfVertex)
arg0.leftknot.vertices[].from == orig(arg0.leftknot.vertices[].from)
arg0.leftknot.vertices[].to == orig(arg0.leftknot.vertices[].to)
arg0.leftknot.vertices[].visited == orig(arg0.leftknot.vertices[].visited)
arg0.leftknot.binarycode == orig(arg0.leftknot.binarycode)
arg0.leftknot.binarycode.toString == orig(arg0.leftknot.binarycode.toString)
arg0.leftknot.leftknot == orig(arg0.leftknot.leftknot)
arg0.leftknot.rightknot == orig(arg0.leftknot.rightknot)
arg0.leftknot.numcircles == orig(arg0.leftknot.numcircles)
arg0.leftknot.seifertCircles == orig(arg0.leftknot.seifertCircles)
arg0.leftknot.seifertCircles[] == orig(arg0.leftknot.seifertCircles[])
arg0.leftknot.smoothing == orig(arg0.leftknot.smoothing)
arg0.rightknot == orig(arg0.rightknot)
arg0.rightknot.crossings == orig(arg0.rightknot.crossings)
arg0.rightknot.crossings[] == orig(arg0.rightknot.crossings[])
arg0.rightknot.crossings[].overstrand == orig(arg0.rightknot.crossings[].overstrand)
arg0.rightknot.crossings[].understrand == orig(arg0.rightknot.crossings[].understrand)
arg0.rightknot.crossings[].posneg == orig(arg0.rightknot.crossings[].posneg)
arg0.rightknot.vertices == orig(arg0.rightknot.vertices)
arg0.rightknot.vertices[] == orig(arg0.rightknot.vertices[])
arg0.rightknot.vertices[].numberOfVertex == orig(arg0.rightknot.vertices[].numberOfVertex)
arg0.rightknot.vertices[].from == orig(arg0.rightknot.vertices[].from)
arg0.rightknot.vertices[].to == orig(arg0.rightknot.vertices[].to)
arg0.rightknot.vertices[].visited == orig(arg0.rightknot.vertices[].visited)
arg0.rightknot.binarycode == orig(arg0.rightknot.binarycode)
arg0.rightknot.binarycode.toString == orig(arg0.rightknot.binarycode.toString)
arg0.rightknot.leftknot == orig(arg0.rightknot.leftknot)
arg0.rightknot.rightknot == orig(arg0.rightknot.rightknot)
arg0.rightknot.numcircles == orig(arg0.rightknot.numcircles)
arg0.rightknot.seifertCircles == orig(arg0.rightknot.seifertCircles)
arg0.rightknot.seifertCircles[] == orig(arg0.rightknot.seifertCircles[])
arg0.rightknot.smoothing == orig(arg0.rightknot.smoothing)
arg0.numcircles == orig(arg0.numcircles)
arg0.seifertCircles == orig(arg0.seifertCircles)
arg0.seifertCircles[] == orig(arg0.seifertCircles[])
arg0.smoothing == orig(arg0.smoothing)
arg0.smoothing.one == orig(arg0.smoothing.one)
arg0.smoothing.two == orig(arg0.smoothing.two)
arg0.smoothing.three == orig(arg0.smoothing.three)
arg0.smoothing.four == orig(arg0.smoothing.four)
arg0.smoothing.reorder == orig(arg0.smoothing.reorder)
size(this.theKnot.crossings[]) == orig(size(this.rows[]))-1
size(this.theKnot.crossings[])-1 == orig(size(this.theKnot.leftknot.crossings[]))
size(this.theKnot.crossings[])-1 == orig(size(this.theKnot.rightknot.crossings[]))
size(this.theKnot.vertices[]) == size(arg0.vertices[])
size(this.theKnot.leftknot.vertices[]) == size(arg0.vertices[])
size(this.theKnot.rightknot.vertices[]) == size(arg0.vertices[])
size(arg0.crossings[])-1 == size(arg0.leftknot.crossings[])
size(arg0.vertices[]) == size(arg0.leftknot.vertices[])
size(arg0.vertices[]) == orig(size(this.theKnot.vertices[]))
size(arg0.vertices[]) == orig(size(this.theKnot.leftknot.vertices[]))
size(arg0.vertices[]) == orig(size(this.theKnot.rightknot.vertices[]))
size(arg0.leftknot.crossings[]) == size(arg0.rightknot.crossings[])
size(arg0.leftknot.crossings[]) == orig(size(arg0.rightknot.crossings[]))
size(arg0.leftknot.vertices[]) == size(arg0.rightknot.vertices[])
size(arg0.leftknot.vertices[]) == orig(size(arg0.rightknot.vertices[]))
arg0.crossings != null
arg0.crossings.getClass().getName() == Crossing[].class
arg0.crossings[] elements != null
arg0.crossings[].getClass().getName() elements == Crossing.class
arg0.crossings[].posneg elements are equal
arg0.vertices != null
arg0.vertices.getClass().getName() == Vertex[].class
arg0.vertices[] elements != null
arg0.vertices[].getClass().getName() == [Vertex, Vertex, Vertex, Vertex, Vertex, Vertex]
arg0.vertices[].getClass().getName() elements == Vertex.class
arg0.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
arg0.vertices[].numberOfVertex elements >= 1
arg0.vertices[].numberOfVertex sorted by <
arg0.vertices[].from elements != null
arg0.vertices[].to elements != null
arg0.vertices[].visited == [1, 1, 1, 1, 1, 1]
arg0.vertices[].visited elements == true
arg0.vertices[].visited elements != null
arg0.binarycode != null
arg0.leftknot.crossings.getClass().getName() == Crossing[].class
arg0.leftknot.crossings[].getClass().getName() elements == Crossing.class
arg0.leftknot.crossings[].overstrand sorted by >
arg0.leftknot.crossings[].understrand sorted by >
arg0.leftknot.crossings[].posneg elements are equal
arg0.leftknot.vertices.getClass().getName() == Vertex[].class
arg0.leftknot.vertices[].getClass().getName() == [Vertex, Vertex, Vertex, Vertex, Vertex, Vertex]
arg0.leftknot.vertices[].getClass().getName() elements == Vertex.class
arg0.leftknot.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
arg0.leftknot.vertices[].numberOfVertex elements >= 1
arg0.leftknot.vertices[].numberOfVertex sorted by <
arg0.leftknot.vertices[].visited == [1, 1, 1, 1, 1, 1]
arg0.leftknot.vertices[].visited elements == true
arg0.leftknot.numcircles == 0
arg0.leftknot.seifertCircles[].getClass().getName() elements == SeifertCircle.class
arg0.leftknot.seifertCircles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
arg0.rightknot.crossings[].overstrand sorted by <
arg0.rightknot.crossings[].understrand sorted by <
arg0.rightknot.crossings[].posneg elements == false
arg0.rightknot.crossings[].posneg one of { [], [0], [0, 0] }
arg0.rightknot.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
arg0.rightknot.vertices[].numberOfVertex elements >= 1
arg0.rightknot.vertices[].numberOfVertex sorted by <
arg0.rightknot.vertices[].visited == [1, 1, 1, 1, 1, 1]
arg0.rightknot.vertices[].visited elements == true
arg0.rightknot.numcircles == 0
arg0.rightknot.seifertCircles[].getClass().getName() elements == SeifertCircle.class
arg0.numcircles == 0
arg0.seifertCircles != null
arg0.seifertCircles[] elements != null
arg0.seifertCircles[].getClass().getName() elements == SeifertCircle.class
arg0.smoothing.two >= 1
arg0.smoothing.four >= 1
size(arg0.vertices[]) == 6
size(arg0.leftknot.crossings[]) one of { 0, 1, 2 }
size(arg0.leftknot.vertices[]) == 6
size(arg0.leftknot.seifertCircles[]) one of { 1, 2 }
size(arg0.rightknot.seifertCircles[]) one of { 1, 2, 3 }
size(arg0.seifertCircles[]) one of { 1, 2, 3 }
arg0.smoothing.one in this.theKnot.vertices[].numberOfVertex
arg0.smoothing.two in this.theKnot.vertices[].numberOfVertex
arg0.smoothing.three in this.theKnot.vertices[].numberOfVertex
arg0.smoothing.four in this.theKnot.vertices[].numberOfVertex
size(arg0.vertices[]) in this.theKnot.vertices[].numberOfVertex
this.theKnot.vertices[].numberOfVertex elements <= size(arg0.vertices[])
size(arg0.vertices[])-1 in this.theKnot.vertices[].numberOfVertex
size(arg0.leftknot.vertices[]) in this.theKnot.vertices[].numberOfVertex
this.theKnot.vertices[].numberOfVertex elements <= size(arg0.leftknot.vertices[])
size(arg0.leftknot.vertices[])-1 in this.theKnot.vertices[].numberOfVertex
this.theKnot.vertices[arg0.smoothing.one] in this.theKnot.vertices[].from
this.theKnot.vertices[arg0.smoothing.one-1] in this.theKnot.vertices[].from
this.theKnot.vertices[arg0.smoothing.two-1] in this.theKnot.vertices[].from
this.theKnot.vertices[arg0.smoothing.three-1] in this.theKnot.vertices[].from
this.theKnot.vertices[arg0.smoothing.four-1] in this.theKnot.vertices[].from
this.theKnot.vertices[arg0.smoothing.one] in this.theKnot.vertices[].to
this.theKnot.vertices[arg0.smoothing.one-1] in this.theKnot.vertices[].to
this.theKnot.vertices[arg0.smoothing.two-1] in this.theKnot.vertices[].to
this.theKnot.vertices[arg0.smoothing.three-1] in this.theKnot.vertices[].to
this.theKnot.vertices[arg0.smoothing.four-1] in this.theKnot.vertices[].to
arg0.smoothing.one in this.theKnot.leftknot.vertices[].numberOfVertex
arg0.smoothing.two in this.theKnot.leftknot.vertices[].numberOfVertex
arg0.smoothing.three in this.theKnot.leftknot.vertices[].numberOfVertex
arg0.smoothing.four in this.theKnot.leftknot.vertices[].numberOfVertex
size(arg0.vertices[]) in this.theKnot.leftknot.vertices[].numberOfVertex
this.theKnot.leftknot.vertices[].numberOfVertex elements <= size(arg0.vertices[])
size(arg0.vertices[])-1 in this.theKnot.leftknot.vertices[].numberOfVertex
size(arg0.leftknot.vertices[]) in this.theKnot.leftknot.vertices[].numberOfVertex
this.theKnot.leftknot.vertices[].numberOfVertex elements <= size(arg0.leftknot.vertices[])
size(arg0.leftknot.vertices[])-1 in this.theKnot.leftknot.vertices[].numberOfVertex
this.theKnot.leftknot.vertices[arg0.smoothing.one] in this.theKnot.leftknot.vertices[].from
this.theKnot.leftknot.vertices[arg0.smoothing.one-1] in this.theKnot.leftknot.vertices[].from
this.theKnot.leftknot.vertices[arg0.smoothing.two-1] in this.theKnot.leftknot.vertices[].from
this.theKnot.leftknot.vertices[arg0.smoothing.three-1] in this.theKnot.leftknot.vertices[].from
this.theKnot.leftknot.vertices[arg0.smoothing.four-1] in this.theKnot.leftknot.vertices[].from
this.theKnot.leftknot.vertices[arg0.smoothing.one] in this.theKnot.leftknot.vertices[].to
this.theKnot.leftknot.vertices[arg0.smoothing.one-1] in this.theKnot.leftknot.vertices[].to
this.theKnot.leftknot.vertices[arg0.smoothing.two-1] in this.theKnot.leftknot.vertices[].to
this.theKnot.leftknot.vertices[arg0.smoothing.three-1] in this.theKnot.leftknot.vertices[].to
this.theKnot.leftknot.vertices[arg0.smoothing.four-1] in this.theKnot.leftknot.vertices[].to
arg0.smoothing.one in this.theKnot.rightknot.vertices[].numberOfVertex
arg0.smoothing.two in this.theKnot.rightknot.vertices[].numberOfVertex
arg0.smoothing.three in this.theKnot.rightknot.vertices[].numberOfVertex
arg0.smoothing.four in this.theKnot.rightknot.vertices[].numberOfVertex
size(arg0.vertices[]) in this.theKnot.rightknot.vertices[].numberOfVertex
this.theKnot.rightknot.vertices[].numberOfVertex elements <= size(arg0.vertices[])
size(arg0.vertices[])-1 in this.theKnot.rightknot.vertices[].numberOfVertex
size(arg0.leftknot.vertices[]) in this.theKnot.rightknot.vertices[].numberOfVertex
this.theKnot.rightknot.vertices[].numberOfVertex elements <= size(arg0.leftknot.vertices[])
size(arg0.leftknot.vertices[])-1 in this.theKnot.rightknot.vertices[].numberOfVertex
this.theKnot.rightknot.vertices[arg0.smoothing.one] in this.theKnot.rightknot.vertices[].from
this.theKnot.rightknot.vertices[arg0.smoothing.one-1] in this.theKnot.rightknot.vertices[].from
this.theKnot.rightknot.vertices[arg0.smoothing.two-1] in this.theKnot.rightknot.vertices[].from
this.theKnot.rightknot.vertices[arg0.smoothing.three-1] in this.theKnot.rightknot.vertices[].from
this.theKnot.rightknot.vertices[arg0.smoothing.four-1] in this.theKnot.rightknot.vertices[].from
this.theKnot.rightknot.vertices[arg0.smoothing.one] in this.theKnot.rightknot.vertices[].to
this.theKnot.rightknot.vertices[arg0.smoothing.one-1] in this.theKnot.rightknot.vertices[].to
this.theKnot.rightknot.vertices[arg0.smoothing.two-1] in this.theKnot.rightknot.vertices[].to
this.theKnot.rightknot.vertices[arg0.smoothing.three-1] in this.theKnot.rightknot.vertices[].to
this.theKnot.rightknot.vertices[arg0.smoothing.four-1] in this.theKnot.rightknot.vertices[].to
this.rows.getClass().getName() != arg0.crossings.getClass().getName()
this.rows.getClass().getName() != arg0.vertices.getClass().getName()
this.rows.getClass().getName() != arg0.leftknot.crossings.getClass().getName()
this.rows.getClass().getName() != arg0.leftknot.vertices.getClass().getName()
this.rows[].index > orig(this.rows[].index) (lexically)
this.rows[].index >= orig(this.rows[].index) (elementwise)
size(this.theKnot.leftknot.crossings[])-1 in this.rows[].index
this.rows[].index elements >= size(arg0.leftknot.crossings[])-1
arg0.crossings.getClass().getName() != arg0.vertices.getClass().getName()
arg0.crossings.getClass().getName() != arg0.leftknot.vertices.getClass().getName()
arg0.vertices.getClass().getName() != arg0.leftknot.crossings.getClass().getName()
arg0.vertices[].getClass().getName() == arg0.leftknot.vertices[].getClass().getName() (elementwise)
arg0.smoothing.one in arg0.vertices[].numberOfVertex
arg0.smoothing.two in arg0.vertices[].numberOfVertex
arg0.smoothing.three in arg0.vertices[].numberOfVertex
arg0.smoothing.four in arg0.vertices[].numberOfVertex
arg0.vertices[].numberOfVertex elements <= size(arg0.vertices[])
size(arg0.vertices[]) in arg0.vertices[].numberOfVertex
size(arg0.vertices[])-1 in arg0.vertices[].numberOfVertex
arg0.vertices[].numberOfVertex elements <= size(arg0.leftknot.vertices[])
size(arg0.leftknot.vertices[]) in arg0.vertices[].numberOfVertex
size(arg0.leftknot.vertices[])-1 in arg0.vertices[].numberOfVertex
arg0.vertices[arg0.smoothing.one] in arg0.vertices[].from
arg0.vertices[arg0.smoothing.one-1] in arg0.vertices[].from
arg0.vertices[arg0.smoothing.two-1] in arg0.vertices[].from
arg0.vertices[arg0.smoothing.three-1] in arg0.vertices[].from
arg0.vertices[arg0.smoothing.four-1] in arg0.vertices[].from
arg0.vertices[arg0.smoothing.one] in arg0.vertices[].to
arg0.vertices[arg0.smoothing.one-1] in arg0.vertices[].to
arg0.vertices[arg0.smoothing.two-1] in arg0.vertices[].to
arg0.vertices[arg0.smoothing.three-1] in arg0.vertices[].to
arg0.vertices[arg0.smoothing.four-1] in arg0.vertices[].to
arg0.leftknot.crossings.getClass().getName() != arg0.leftknot.vertices.getClass().getName()
arg0.smoothing.one in arg0.leftknot.vertices[].numberOfVertex
arg0.smoothing.two in arg0.leftknot.vertices[].numberOfVertex
arg0.smoothing.three in arg0.leftknot.vertices[].numberOfVertex
arg0.smoothing.four in arg0.leftknot.vertices[].numberOfVertex
arg0.leftknot.vertices[].numberOfVertex elements <= size(arg0.vertices[])
size(arg0.vertices[]) in arg0.leftknot.vertices[].numberOfVertex
size(arg0.vertices[])-1 in arg0.leftknot.vertices[].numberOfVertex
arg0.leftknot.vertices[].numberOfVertex elements <= size(arg0.leftknot.vertices[])
size(arg0.leftknot.vertices[]) in arg0.leftknot.vertices[].numberOfVertex
size(arg0.leftknot.vertices[])-1 in arg0.leftknot.vertices[].numberOfVertex
arg0.leftknot.vertices[arg0.smoothing.one] in arg0.leftknot.vertices[].from
arg0.leftknot.vertices[arg0.smoothing.one-1] in arg0.leftknot.vertices[].from
arg0.leftknot.vertices[arg0.smoothing.two] in arg0.leftknot.vertices[].from
arg0.leftknot.vertices[arg0.smoothing.two-1] in arg0.leftknot.vertices[].from
arg0.leftknot.vertices[arg0.smoothing.three-1] in arg0.leftknot.vertices[].from
arg0.leftknot.vertices[arg0.smoothing.four-1] in arg0.leftknot.vertices[].from
arg0.leftknot.vertices[arg0.smoothing.one] in arg0.leftknot.vertices[].to
arg0.leftknot.vertices[arg0.smoothing.one-1] in arg0.leftknot.vertices[].to
arg0.leftknot.vertices[arg0.smoothing.two] in arg0.leftknot.vertices[].to
arg0.leftknot.vertices[arg0.smoothing.two-1] in arg0.leftknot.vertices[].to
arg0.leftknot.vertices[arg0.smoothing.three-1] in arg0.leftknot.vertices[].to
arg0.leftknot.vertices[arg0.smoothing.four-1] in arg0.leftknot.vertices[].to
arg0.smoothing.one in arg0.rightknot.vertices[].numberOfVertex
arg0.smoothing.two in arg0.rightknot.vertices[].numberOfVertex
arg0.smoothing.three in arg0.rightknot.vertices[].numberOfVertex
arg0.smoothing.four in arg0.rightknot.vertices[].numberOfVertex
arg0.rightknot.vertices[].numberOfVertex elements <= size(arg0.vertices[])
size(arg0.vertices[]) in arg0.rightknot.vertices[].numberOfVertex
size(arg0.vertices[])-1 in arg0.rightknot.vertices[].numberOfVertex
arg0.rightknot.vertices[].numberOfVertex elements <= size(arg0.leftknot.vertices[])
size(arg0.leftknot.vertices[]) in arg0.rightknot.vertices[].numberOfVertex
size(arg0.leftknot.vertices[])-1 in arg0.rightknot.vertices[].numberOfVertex
arg0.rightknot.vertices[arg0.smoothing.one] in arg0.rightknot.vertices[].from
arg0.rightknot.vertices[arg0.smoothing.one-1] in arg0.rightknot.vertices[].from
arg0.rightknot.vertices[arg0.smoothing.two] in arg0.rightknot.vertices[].from
arg0.rightknot.vertices[arg0.smoothing.two-1] in arg0.rightknot.vertices[].from
arg0.rightknot.vertices[arg0.smoothing.three-1] in arg0.rightknot.vertices[].from
arg0.rightknot.vertices[arg0.smoothing.four-1] in arg0.rightknot.vertices[].from
arg0.rightknot.vertices[arg0.smoothing.one] in arg0.rightknot.vertices[].to
arg0.rightknot.vertices[arg0.smoothing.one-1] in arg0.rightknot.vertices[].to
arg0.rightknot.vertices[arg0.smoothing.two] in arg0.rightknot.vertices[].to
arg0.rightknot.vertices[arg0.smoothing.two-1] in arg0.rightknot.vertices[].to
arg0.rightknot.vertices[arg0.smoothing.three-1] in arg0.rightknot.vertices[].to
arg0.rightknot.vertices[arg0.smoothing.four-1] in arg0.rightknot.vertices[].to
arg0.smoothing.one != arg0.smoothing.two
arg0.smoothing.one != arg0.smoothing.three
arg0.smoothing.one != arg0.smoothing.four
arg0.smoothing.one <= size(arg0.vertices[])-1
arg0.smoothing.two != arg0.smoothing.three
arg0.smoothing.two != arg0.smoothing.four
arg0.smoothing.two <= size(arg0.vertices[])
arg0.smoothing.three != arg0.smoothing.four
arg0.smoothing.three <= size(arg0.vertices[])
arg0.smoothing.three != size(arg0.vertices[])-1
arg0.smoothing.four <= size(arg0.vertices[])
orig(this.rows[].index) elements <= size(this.theKnot.crossings[])
size(this.theKnot.crossings[]) >= size(arg0.crossings[])
size(this.theKnot.crossings[])-1 >= size(arg0.crossings[])-1
size(this.theKnot.crossings[])-1 >= size(arg0.leftknot.crossings[])
size(this.theKnot.leftknot.crossings[])-1 >= size(arg0.leftknot.crossings[])-1
===========================================================================
KhovanovMap.findNode(java.lang.String):::ENTER
this.rows[].index == [1, 3, 3, 1]
this.rows[].index elements one of { 1, 3 }
arg0 != null
size(this.theKnot.crossings[]) in this.rows[].index
size(this.theKnot.leftknot.crossings[])-1 in this.rows[].index
this.rows[].index elements >= size(this.theKnot.leftknot.crossings[])-1
===========================================================================
KhovanovMap.findNode(java.lang.String):::EXIT
this.theKnot == orig(this.theKnot)
this.theKnot.crossings == orig(this.theKnot.crossings)
this.theKnot.crossings.getClass().getName() == orig(this.theKnot.crossings.getClass().getName())
this.theKnot.crossings.getClass().getName() == orig(this.theKnot.leftknot.crossings.getClass().getName())
this.theKnot.crossings.getClass().getName() == orig(this.theKnot.rightknot.crossings.getClass().getName())
this.theKnot.crossings[] == orig(this.theKnot.crossings[])
this.theKnot.crossings[].overstrand == orig(this.theKnot.crossings[].overstrand)
this.theKnot.crossings[].understrand == orig(this.theKnot.crossings[].understrand)
this.theKnot.crossings[].posneg == orig(this.theKnot.crossings[].posneg)
this.theKnot.vertices == orig(this.theKnot.vertices)
this.theKnot.vertices.getClass().getName() == orig(this.theKnot.vertices.getClass().getName())
this.theKnot.vertices.getClass().getName() == orig(this.theKnot.leftknot.vertices.getClass().getName())
this.theKnot.vertices.getClass().getName() == orig(this.theKnot.rightknot.vertices.getClass().getName())
this.theKnot.vertices[] == orig(this.theKnot.vertices[])
this.theKnot.vertices[].numberOfVertex == orig(this.theKnot.vertices[].numberOfVertex)
this.theKnot.vertices[].from == orig(this.theKnot.vertices[].from)
this.theKnot.vertices[].to == orig(this.theKnot.vertices[].to)
this.theKnot.vertices[].visited == orig(this.theKnot.vertices[].visited)
this.theKnot.binarycode == orig(this.theKnot.binarycode)
this.theKnot.binarycode.toString == orig(this.theKnot.binarycode.toString)
this.theKnot.leftknot == orig(this.theKnot.leftknot)
this.theKnot.leftknot.crossings == orig(this.theKnot.leftknot.crossings)
this.theKnot.leftknot.crossings[] == orig(this.theKnot.leftknot.crossings[])
this.theKnot.leftknot.crossings[].overstrand == orig(this.theKnot.leftknot.crossings[].overstrand)
this.theKnot.leftknot.crossings[].understrand == orig(this.theKnot.leftknot.crossings[].understrand)
this.theKnot.leftknot.crossings[].posneg == orig(this.theKnot.leftknot.crossings[].posneg)
this.theKnot.leftknot.vertices == orig(this.theKnot.leftknot.vertices)
this.theKnot.leftknot.vertices[] == orig(this.theKnot.leftknot.vertices[])
this.theKnot.leftknot.vertices[].numberOfVertex == orig(this.theKnot.leftknot.vertices[].numberOfVertex)
this.theKnot.leftknot.vertices[].from == orig(this.theKnot.leftknot.vertices[].from)
this.theKnot.leftknot.vertices[].to == orig(this.theKnot.leftknot.vertices[].to)
this.theKnot.leftknot.vertices[].visited == orig(this.theKnot.leftknot.vertices[].visited)
this.theKnot.leftknot.binarycode == orig(this.theKnot.leftknot.binarycode)
this.theKnot.leftknot.binarycode.toString == orig(this.theKnot.leftknot.binarycode.toString)
this.theKnot.leftknot.leftknot == orig(this.theKnot.leftknot.leftknot)
this.theKnot.leftknot.rightknot == orig(this.theKnot.leftknot.rightknot)
this.theKnot.leftknot.numcircles == orig(this.theKnot.leftknot.numcircles)
this.theKnot.leftknot.seifertCircles == orig(this.theKnot.leftknot.seifertCircles)
this.theKnot.leftknot.seifertCircles[] == orig(this.theKnot.leftknot.seifertCircles[])
this.theKnot.leftknot.smoothing == orig(this.theKnot.leftknot.smoothing)
this.theKnot.rightknot == orig(this.theKnot.rightknot)
this.theKnot.rightknot.crossings == orig(this.theKnot.rightknot.crossings)
this.theKnot.rightknot.crossings[] == orig(this.theKnot.rightknot.crossings[])
this.theKnot.rightknot.crossings[].overstrand == orig(this.theKnot.rightknot.crossings[].overstrand)
this.theKnot.rightknot.crossings[].understrand == orig(this.theKnot.rightknot.crossings[].understrand)
this.theKnot.rightknot.crossings[].posneg == orig(this.theKnot.rightknot.crossings[].posneg)
this.theKnot.rightknot.vertices == orig(this.theKnot.rightknot.vertices)
this.theKnot.rightknot.vertices[] == orig(this.theKnot.rightknot.vertices[])
this.theKnot.rightknot.vertices[].numberOfVertex == orig(this.theKnot.rightknot.vertices[].numberOfVertex)
this.theKnot.rightknot.vertices[].from == orig(this.theKnot.rightknot.vertices[].from)
this.theKnot.rightknot.vertices[].to == orig(this.theKnot.rightknot.vertices[].to)
this.theKnot.rightknot.vertices[].visited == orig(this.theKnot.rightknot.vertices[].visited)
this.theKnot.rightknot.binarycode == orig(this.theKnot.rightknot.binarycode)
this.theKnot.rightknot.binarycode.toString == orig(this.theKnot.rightknot.binarycode.toString)
this.theKnot.rightknot.leftknot == orig(this.theKnot.rightknot.leftknot)
this.theKnot.rightknot.rightknot == orig(this.theKnot.rightknot.rightknot)
this.theKnot.rightknot.numcircles == orig(this.theKnot.rightknot.numcircles)
this.theKnot.rightknot.seifertCircles == orig(this.theKnot.rightknot.seifertCircles)
this.theKnot.rightknot.seifertCircles[] == orig(this.theKnot.rightknot.seifertCircles[])
this.theKnot.rightknot.smoothing == orig(this.theKnot.rightknot.smoothing)
this.theKnot.numcircles == orig(this.theKnot.numcircles)
this.theKnot.seifertCircles == orig(this.theKnot.seifertCircles)
this.theKnot.seifertCircles[] == orig(this.theKnot.seifertCircles[])
this.theKnot.smoothing == orig(this.theKnot.smoothing)
this.resolvedKnots == orig(this.resolvedKnots)
this.rows == orig(this.rows)
this.rows.getClass().getName() == orig(this.rows.getClass().getName())
this.rows[] == orig(this.rows[])
this.rows[].nodes == orig(this.rows[].nodes)
this.rows[].index == orig(this.rows[].index)
this.maps == orig(this.maps)
arg0.toString == orig(arg0.toString)
return.outMaps.getClass().getName() == return.inMaps.getClass().getName()
size(this.theKnot.crossings[]) == orig(size(this.rows[]))-1
size(this.theKnot.crossings[])-1 == orig(size(this.theKnot.leftknot.crossings[]))
size(this.theKnot.crossings[])-1 == orig(size(this.theKnot.rightknot.crossings[]))
size(this.theKnot.vertices[]) == orig(size(this.theKnot.leftknot.vertices[]))
size(this.theKnot.vertices[]) == orig(size(this.theKnot.rightknot.vertices[]))
this.rows[].index == [1, 3, 3, 1]
this.rows[].index elements one of { 1, 3 }
return != null
return.binarycode != null
return.circles != null
return.circles[] elements != null
return.circles[].getClass().getName() elements == SeifertCircle.class
return.outMaps != null
return.outMaps.getClass().getName() == DMap[].class
return.outMaps[] elements == null
return.outMaps[].getClass().getName() elements == null
return.inMaps != null
return.outcount == 0
return.incount one of { 0, 1, 2 }
return.basis != null
return.basis.getClass().getName() == Tensor[].class
return.basis[] elements != null
return.basis[].getClass().getName() elements == Tensor.class
return.basis[].khovanovNodeCode elements != null
return.basis[].khovanovNodeCode elements are equal
return.basis[].tensorProduct elements != null
return.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
return.basis[].outArrows elements != null
return.basis[].inArrows elements != null
return.basis[].isIsolated elements == false
return.basis[].isIsolated one of { [0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
return.basis[].isDeleted elements == false
return.basis[].isDeleted one of { [0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
return.tensorcount == 0
size(return.circles[]) one of { 1, 2, 3 }
size(return.outMaps[]) one of { 0, 1, 2 }
size(return.inMaps[]) one of { 1, 2, 3 }
size(return.basis[]) one of { 2, 4, 8 }
return.inMaps[return.incount] == null
this.theKnot.crossings.getClass().getName() != return.outMaps.getClass().getName()
this.theKnot.crossings.getClass().getName() != return.basis.getClass().getName()
this.theKnot.vertices.getClass().getName() != return.outMaps.getClass().getName()
this.theKnot.vertices.getClass().getName() != return.basis.getClass().getName()
this.rows.getClass().getName() != return.outMaps.getClass().getName()
this.rows.getClass().getName() != return.basis.getClass().getName()
size(this.theKnot.crossings[]) in this.rows[].index
size(this.theKnot.leftknot.crossings[])-1 in this.rows[].index
this.rows[].index elements >= size(this.theKnot.leftknot.crossings[])-1
return.basis[].khovanovNodeCode elements == return.binarycode
return.binarycode in return.basis[].khovanovNodeCode
return.outMaps.getClass().getName() != return.basis.getClass().getName()
return.incount <= size(return.inMaps[])-1
===========================================================================
KhovanovMap.main(java.lang.String[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.lang.String[].class
arg0[] == []
arg0[].toString == []
===========================================================================
KhovanovMap.main(java.lang.String[]):::EXIT
arg0[] == orig(arg0[])
arg0[] == []
arg0[].toString == []
===========================================================================
KhovanovMap.setMaps():::ENTER
this.rows[].index == [1, 3, 3, 1]
this.rows[].index elements one of { 1, 3 }
size(this.theKnot.crossings[]) in this.rows[].index
size(this.theKnot.leftknot.crossings[])-1 in this.rows[].index
===========================================================================
KhovanovMap.setMaps():::EXIT
this.theKnot == orig(this.theKnot)
this.theKnot.crossings == orig(this.theKnot.crossings)
this.theKnot.crossings.getClass().getName() == orig(this.theKnot.crossings.getClass().getName())
this.theKnot.crossings.getClass().getName() == orig(this.theKnot.leftknot.crossings.getClass().getName())
this.theKnot.crossings.getClass().getName() == orig(this.theKnot.rightknot.crossings.getClass().getName())
this.theKnot.crossings[] == orig(this.theKnot.crossings[])
this.theKnot.crossings[].overstrand == orig(this.theKnot.crossings[].overstrand)
this.theKnot.crossings[].understrand == orig(this.theKnot.crossings[].understrand)
this.theKnot.crossings[].posneg == orig(this.theKnot.crossings[].posneg)
this.theKnot.vertices == orig(this.theKnot.vertices)
this.theKnot.vertices.getClass().getName() == orig(this.theKnot.vertices.getClass().getName())
this.theKnot.vertices.getClass().getName() == orig(this.theKnot.leftknot.vertices.getClass().getName())
this.theKnot.vertices.getClass().getName() == orig(this.theKnot.rightknot.vertices.getClass().getName())
this.theKnot.vertices[] == orig(this.theKnot.vertices[])
this.theKnot.vertices[].numberOfVertex == orig(this.theKnot.vertices[].numberOfVertex)
this.theKnot.vertices[].from == orig(this.theKnot.vertices[].from)
this.theKnot.vertices[].to == orig(this.theKnot.vertices[].to)
this.theKnot.vertices[].visited == orig(this.theKnot.vertices[].visited)
this.theKnot.binarycode == orig(this.theKnot.binarycode)
this.theKnot.binarycode.toString == orig(this.theKnot.binarycode.toString)
this.theKnot.leftknot == orig(this.theKnot.leftknot)
this.theKnot.leftknot.crossings == orig(this.theKnot.leftknot.crossings)
this.theKnot.leftknot.crossings[] == orig(this.theKnot.leftknot.crossings[])
this.theKnot.leftknot.crossings[].overstrand == orig(this.theKnot.leftknot.crossings[].overstrand)
this.theKnot.leftknot.crossings[].understrand == orig(this.theKnot.leftknot.crossings[].understrand)
this.theKnot.leftknot.crossings[].posneg == orig(this.theKnot.leftknot.crossings[].posneg)
this.theKnot.leftknot.vertices == orig(this.theKnot.leftknot.vertices)
this.theKnot.leftknot.vertices[] == orig(this.theKnot.leftknot.vertices[])
this.theKnot.leftknot.vertices[].numberOfVertex == orig(this.theKnot.leftknot.vertices[].numberOfVertex)
this.theKnot.leftknot.vertices[].from == orig(this.theKnot.leftknot.vertices[].from)
this.theKnot.leftknot.vertices[].to == orig(this.theKnot.leftknot.vertices[].to)
this.theKnot.leftknot.vertices[].visited == orig(this.theKnot.leftknot.vertices[].visited)
this.theKnot.leftknot.binarycode == orig(this.theKnot.leftknot.binarycode)
this.theKnot.leftknot.binarycode.toString == orig(this.theKnot.leftknot.binarycode.toString)
this.theKnot.leftknot.leftknot == orig(this.theKnot.leftknot.leftknot)
this.theKnot.leftknot.rightknot == orig(this.theKnot.leftknot.rightknot)
this.theKnot.leftknot.numcircles == orig(this.theKnot.leftknot.numcircles)
this.theKnot.leftknot.seifertCircles == orig(this.theKnot.leftknot.seifertCircles)
this.theKnot.leftknot.seifertCircles[] == orig(this.theKnot.leftknot.seifertCircles[])
this.theKnot.leftknot.smoothing == orig(this.theKnot.leftknot.smoothing)
this.theKnot.rightknot == orig(this.theKnot.rightknot)
this.theKnot.rightknot.crossings == orig(this.theKnot.rightknot.crossings)
this.theKnot.rightknot.crossings[] == orig(this.theKnot.rightknot.crossings[])
this.theKnot.rightknot.crossings[].overstrand == orig(this.theKnot.rightknot.crossings[].overstrand)
this.theKnot.rightknot.crossings[].understrand == orig(this.theKnot.rightknot.crossings[].understrand)
this.theKnot.rightknot.crossings[].posneg == orig(this.theKnot.rightknot.crossings[].posneg)
this.theKnot.rightknot.vertices == orig(this.theKnot.rightknot.vertices)
this.theKnot.rightknot.vertices[] == orig(this.theKnot.rightknot.vertices[])
this.theKnot.rightknot.vertices[].numberOfVertex == orig(this.theKnot.rightknot.vertices[].numberOfVertex)
this.theKnot.rightknot.vertices[].from == orig(this.theKnot.rightknot.vertices[].from)
this.theKnot.rightknot.vertices[].to == orig(this.theKnot.rightknot.vertices[].to)
this.theKnot.rightknot.vertices[].visited == orig(this.theKnot.rightknot.vertices[].visited)
this.theKnot.rightknot.binarycode == orig(this.theKnot.rightknot.binarycode)
this.theKnot.rightknot.binarycode.toString == orig(this.theKnot.rightknot.binarycode.toString)
this.theKnot.rightknot.leftknot == orig(this.theKnot.rightknot.leftknot)
this.theKnot.rightknot.rightknot == orig(this.theKnot.rightknot.rightknot)
this.theKnot.rightknot.numcircles == orig(this.theKnot.rightknot.numcircles)
this.theKnot.rightknot.seifertCircles == orig(this.theKnot.rightknot.seifertCircles)
this.theKnot.rightknot.seifertCircles[] == orig(this.theKnot.rightknot.seifertCircles[])
this.theKnot.rightknot.smoothing == orig(this.theKnot.rightknot.smoothing)
this.theKnot.numcircles == orig(this.theKnot.numcircles)
this.theKnot.seifertCircles == orig(this.theKnot.seifertCircles)
this.theKnot.seifertCircles[] == orig(this.theKnot.seifertCircles[])
this.theKnot.smoothing == orig(this.theKnot.smoothing)
this.resolvedKnots == orig(this.resolvedKnots)
this.rows == orig(this.rows)
this.rows.getClass().getName() == orig(this.rows.getClass().getName())
this.rows[] == orig(this.rows[])
this.rows[].nodes == orig(this.rows[].nodes)
this.rows[].index == orig(this.rows[].index)
this.maps == orig(this.maps)
size(this.theKnot.crossings[]) == orig(size(this.rows[]))-1
size(this.theKnot.crossings[])-1 == orig(size(this.theKnot.leftknot.crossings[]))
size(this.theKnot.crossings[])-1 == orig(size(this.theKnot.rightknot.crossings[]))
size(this.theKnot.vertices[]) == orig(size(this.theKnot.leftknot.vertices[]))
size(this.theKnot.vertices[]) == orig(size(this.theKnot.rightknot.vertices[]))
this.rows[].index == [1, 3, 3, 1]
this.rows[].index elements one of { 1, 3 }
size(this.theKnot.crossings[]) in this.rows[].index
size(this.theKnot.leftknot.crossings[])-1 in this.rows[].index
===========================================================================
KhovanovMapNode:::OBJECT
this.binarycode != null
this.circles != null
this.circles[] elements != null
this.circles[].getClass().getName() elements == SeifertCircle.class
this.outMaps != null
this.outMaps.getClass().getName() == DMap[].class
this.inMaps != null
this.inMaps.getClass().getName() == DMap[].class
this.outcount >= 0
this.incount >= 0
this.basis != null
this.basis.getClass().getName() == Tensor[].class
this.basis[].khovanovNodeCode elements != null
this.basis[].khovanovNodeCode elements are equal
this.basis[].tensorProduct elements != null
this.basis[].outArrows elements != null
this.basis[].inArrows elements != null
this.basis[].isIsolated elements == false
this.basis[].isIsolated one of { [0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
this.basis[].isDeleted elements == false
this.basis[].isDeleted one of { [0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
this.tensorcount == 0
size(this.circles[]) one of { 1, 2, 3 }
size(this.basis[]) one of { 2, 4, 8 }
===========================================================================
KhovanovMapNode.KhovanovMapNode(java.lang.String, java.util.ArrayList):::ENTER
arg1[].getClass().getName() elements == SeifertCircle.class
size(arg1[]) one of { 1, 2, 3 }
===========================================================================
KhovanovMapNode.KhovanovMapNode(java.lang.String, java.util.ArrayList):::EXIT
arg0.toString == orig(arg0.toString)
arg1[] == orig(arg1[])
this.outMaps[] elements == null
this.outMaps[].getClass().getName() elements == null
this.inMaps[] elements == null
this.inMaps[].getClass().getName() elements == null
this.outcount == 0
this.incount == 0
this.basis[].getClass().getName() elements == Tensor.class
this.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
arg1[].getClass().getName() elements == SeifertCircle.class
===========================================================================
KhovanovMapNode.addInMap(DMap):::ENTER
this.outMaps[] elements == null
this.outMaps[].getClass().getName() elements == null
this.outcount == 0
this.incount one of { 0, 1, 2 }
this.basis[] elements != null
this.basis[].getClass().getName() elements == Tensor.class
this.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
arg0 != null
size(this.outMaps[]) one of { 0, 1, 2 }
size(this.inMaps[]) one of { 1, 2, 3 }
===========================================================================
KhovanovMapNode.addInMap(DMap):::EXIT
this.binarycode == orig(this.binarycode)
this.binarycode.toString == orig(this.binarycode.toString)
this.circles == orig(this.circles)
this.circles[] == orig(this.circles[])
this.outMaps == orig(this.outMaps)
this.outMaps.getClass().getName() == orig(this.outMaps.getClass().getName())
this.outMaps[] == orig(this.outMaps[])
this.inMaps == orig(this.inMaps)
this.inMaps.getClass().getName() == orig(this.inMaps.getClass().getName())
this.outcount == orig(this.outcount)
this.basis == orig(this.basis)
this.basis.getClass().getName() == orig(this.basis.getClass().getName())
this.basis[] == orig(this.basis[])
this.basis[].khovanovNodeCode == orig(this.basis[].khovanovNodeCode)
this.basis[].tensorProduct == orig(this.basis[].tensorProduct)
this.basis[].outArrows == orig(this.basis[].outArrows)
this.basis[].inArrows == orig(this.basis[].inArrows)
this.basis[].isIsolated == orig(this.basis[].isIsolated)
this.basis[].isDeleted == orig(this.basis[].isDeleted)
this.tensorcount == orig(this.tensorcount)
size(this.inMaps[]) == orig(size(this.inMaps[]))
this.outMaps[] elements == null
this.outMaps[].getClass().getName() elements == null
this.outcount == 0
this.incount one of { 1, 2, 3 }
this.basis[] elements != null
this.basis[].getClass().getName() elements == Tensor.class
this.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
size(this.outMaps[]) one of { 0, 1, 2 }
size(this.inMaps[]) one of { 1, 2, 3 }
this.incount > orig(this.incount)
===========================================================================
KhovanovMapNode.addOutMap(DMap):::ENTER
this.circles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
this.inMaps[] elements != null
this.outcount one of { 0, 1, 2 }
this.incount one of { 0, 1, 2 }
this.basis[] elements != null
this.basis[].getClass().getName() elements == Tensor.class
this.basis[].getClass().getName() one of { [Tensor, Tensor], [Tensor, Tensor, Tensor, Tensor] }
this.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
this.basis[].tensorProduct.getClass().getName() one of { [BasisElement[], BasisElement[]], [BasisElement[], BasisElement[], BasisElement[], BasisElement[]] }
this.basis[].isIsolated one of { [0, 0], [0, 0, 0, 0] }
this.basis[].isDeleted one of { [0, 0], [0, 0, 0, 0] }
arg0 != null
size(this.circles[]) one of { 1, 2 }
size(this.outMaps[]) one of { 1, 2, 3 }
size(this.inMaps[]) one of { 0, 1, 2 }
size(this.basis[]) one of { 2, 4 }
===========================================================================
KhovanovMapNode.addOutMap(DMap):::EXIT
this.binarycode == orig(this.binarycode)
this.binarycode.toString == orig(this.binarycode.toString)
this.circles == orig(this.circles)
this.circles[] == orig(this.circles[])
this.outMaps == orig(this.outMaps)
this.outMaps.getClass().getName() == orig(this.outMaps.getClass().getName())
this.inMaps == orig(this.inMaps)
this.inMaps.getClass().getName() == orig(this.inMaps.getClass().getName())
this.inMaps[] == orig(this.inMaps[])
this.incount == orig(this.incount)
this.basis == orig(this.basis)
this.basis.getClass().getName() == orig(this.basis.getClass().getName())
this.basis[] == orig(this.basis[])
this.basis[].khovanovNodeCode == orig(this.basis[].khovanovNodeCode)
this.basis[].tensorProduct == orig(this.basis[].tensorProduct)
this.basis[].outArrows == orig(this.basis[].outArrows)
this.basis[].inArrows == orig(this.basis[].inArrows)
this.basis[].isIsolated == orig(this.basis[].isIsolated)
this.basis[].isDeleted == orig(this.basis[].isDeleted)
this.tensorcount == orig(this.tensorcount)
size(this.outMaps[]) == orig(size(this.outMaps[]))
this.circles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
this.inMaps[] elements != null
this.outcount one of { 1, 2, 3 }
this.incount one of { 0, 1, 2 }
this.basis[] elements != null
this.basis[].getClass().getName() elements == Tensor.class
this.basis[].getClass().getName() one of { [Tensor, Tensor], [Tensor, Tensor, Tensor, Tensor] }
this.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
this.basis[].tensorProduct.getClass().getName() one of { [BasisElement[], BasisElement[]], [BasisElement[], BasisElement[], BasisElement[], BasisElement[]] }
this.basis[].isIsolated one of { [0, 0], [0, 0, 0, 0] }
this.basis[].isDeleted one of { [0, 0], [0, 0, 0, 0] }
size(this.circles[]) one of { 1, 2 }
size(this.outMaps[]) one of { 1, 2, 3 }
size(this.inMaps[]) one of { 0, 1, 2 }
size(this.basis[]) one of { 2, 4 }
this.outcount > orig(this.outcount)
===========================================================================
KhovanovMapNode.containsCircle(SeifertCircle):::ENTER
this.circles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
this.outcount one of { 0, 1 }
this.incount one of { 0, 1, 2 }
this.basis[] elements != null
this.basis[].getClass().getName() elements == Tensor.class
this.basis[].getClass().getName() one of { [Tensor, Tensor], [Tensor, Tensor, Tensor, Tensor] }
this.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
this.basis[].tensorProduct.getClass().getName() one of { [BasisElement[], BasisElement[]], [BasisElement[], BasisElement[], BasisElement[], BasisElement[]] }
this.basis[].isIsolated one of { [0, 0], [0, 0, 0, 0] }
this.basis[].isDeleted one of { [0, 0], [0, 0, 0, 0] }
arg0 != null
arg0.minEdge one of { 1, 2, 3 }
arg0.code != null
arg0.vplus != null
arg0.vplus.getClass().getName() == Vplus.class
arg0.vminus != null
arg0.vminus.getClass().getName() == Vminus.class
size(this.circles[]) one of { 1, 2 }
size(this.outMaps[]) one of { 1, 2 }
size(this.inMaps[]) one of { 1, 2 }
size(this.basis[]) one of { 2, 4 }
===========================================================================
KhovanovMapNode.containsCircle(SeifertCircle):::EXIT86
this.binarycode.toString one of { "011", "101", "110" }
this.circles[].getClass().getName() == [SeifertCircle, SeifertCircle]
this.outMaps[] == [null]
this.outMaps[] elements == null
this.outMaps[].getClass().getName() == [null]
this.outMaps[].getClass().getName() elements == null
this.inMaps[].getClass().getName() == [SplitMap, SplitMap]
this.inMaps[].getClass().getName() elements == SplitMap.class
this.outcount == 0
this.incount == 2
this.basis[].getClass().getName() == [Tensor, Tensor, Tensor, Tensor]
this.basis[].khovanovNodeCode.toString elements one of { "011", "101", "110" }
this.basis[].tensorProduct.getClass().getName() == [BasisElement[], BasisElement[], BasisElement[], BasisElement[]]
this.basis[].isIsolated == [0, 0, 0, 0]
this.basis[].isDeleted == [0, 0, 0, 0]
arg0.code.toString one of { "14", "25", "36" }
return == true
size(this.circles[]) == 2
size(this.outMaps[]) == 1
size(this.inMaps[]) == 2
size(this.basis[]) == 4
===========================================================================
KhovanovMapNode.containsCircle(SeifertCircle):::EXIT86;condition="return == true"
===========================================================================
KhovanovMapNode.containsCircle(SeifertCircle):::EXIT88
return == false
===========================================================================
KhovanovMapNode.containsCircle(SeifertCircle):::EXIT88;condition="not(return == true)"
===========================================================================
KhovanovMapNode.containsCircle(SeifertCircle):::EXIT
this.binarycode == orig(this.binarycode)
this.binarycode.toString == orig(this.binarycode.toString)
this.circles == orig(this.circles)
this.circles[] == orig(this.circles[])
this.outMaps == orig(this.outMaps)
this.outMaps.getClass().getName() == orig(this.outMaps.getClass().getName())
this.outMaps[] == orig(this.outMaps[])
this.inMaps == orig(this.inMaps)
this.inMaps.getClass().getName() == orig(this.inMaps.getClass().getName())
this.inMaps[] == orig(this.inMaps[])
this.outcount == orig(this.outcount)
this.incount == orig(this.incount)
this.basis == orig(this.basis)
this.basis.getClass().getName() == orig(this.basis.getClass().getName())
this.basis[] == orig(this.basis[])
this.basis[].khovanovNodeCode == orig(this.basis[].khovanovNodeCode)
this.basis[].tensorProduct == orig(this.basis[].tensorProduct)
this.basis[].outArrows == orig(this.basis[].outArrows)
this.basis[].inArrows == orig(this.basis[].inArrows)
this.basis[].isIsolated == orig(this.basis[].isIsolated)
this.basis[].isDeleted == orig(this.basis[].isDeleted)
this.tensorcount == orig(this.tensorcount)
arg0.minEdge == orig(arg0.minEdge)
arg0.code == orig(arg0.code)
arg0.code.toString == orig(arg0.code.toString)
arg0.vplus == orig(arg0.vplus)
arg0.vplus.getClass().getName() == orig(arg0.vplus.getClass().getName())
arg0.vminus == orig(arg0.vminus)
arg0.vminus.getClass().getName() == orig(arg0.vminus.getClass().getName())
(return == false)  ==>  (size(this.basis[]) one of { 2, 4 })
(return == false)  ==>  (size(this.circles[]) one of { 1, 2 })
(return == false)  ==>  (size(this.inMaps[]) one of { 1, 2 })
(return == false)  ==>  (size(this.outMaps[]) one of { 1, 2 })
(return == false)  ==>  (this.basis[].getClass().getName() one of { [Tensor, Tensor], [Tensor, Tensor, Tensor, Tensor] })
(return == false)  ==>  (this.basis[].isDeleted one of { [0, 0], [0, 0, 0, 0] })
(return == false)  ==>  (this.basis[].isIsolated one of { [0, 0], [0, 0, 0, 0] })
(return == false)  ==>  (this.basis[].tensorProduct.getClass().getName() one of { [BasisElement[], BasisElement[]], [BasisElement[], BasisElement[], BasisElement[], BasisElement[]] })
(return == false)  ==>  (this.circles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] })
(return == false)  ==>  (this.incount one of { 0, 1, 2 })
(return == false)  ==>  (this.outcount one of { 0, 1 })
(return == true)  ==>  (arg0.code.toString one of { "14", "25", "36" })
(return == true)  ==>  (size(this.basis[]) == 4)
(return == true)  ==>  (size(this.circles[]) == 2)
(return == true)  ==>  (size(this.inMaps[]) == 2)
(return == true)  ==>  (size(this.outMaps[]) == 1)
(return == true)  ==>  (this.basis[].getClass().getName() == [Tensor, Tensor, Tensor, Tensor])
(return == true)  ==>  (this.basis[].isDeleted == [0, 0, 0, 0])
(return == true)  ==>  (this.basis[].isIsolated == [0, 0, 0, 0])
(return == true)  ==>  (this.basis[].khovanovNodeCode.toString elements one of { "011", "101", "110" })
(return == true)  ==>  (this.basis[].tensorProduct.getClass().getName() == [BasisElement[], BasisElement[], BasisElement[], BasisElement[]])
(return == true)  ==>  (this.binarycode.toString one of { "011", "101", "110" })
(return == true)  ==>  (this.circles[].getClass().getName() == [SeifertCircle, SeifertCircle])
(return == true)  ==>  (this.inMaps[].getClass().getName() == [SplitMap, SplitMap])
(return == true)  ==>  (this.inMaps[].getClass().getName() elements == SplitMap.class)
(return == true)  ==>  (this.incount == 2)
(return == true)  ==>  (this.outMaps[] == [null])
(return == true)  ==>  (this.outMaps[] elements == null)
(return == true)  ==>  (this.outMaps[].getClass().getName() == [null])
(return == true)  ==>  (this.outMaps[].getClass().getName() elements == null)
(return == true)  ==>  (this.outcount == 0)
this.circles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
this.outcount one of { 0, 1 }
this.incount one of { 0, 1, 2 }
this.basis[] elements != null
this.basis[].getClass().getName() elements == Tensor.class
this.basis[].getClass().getName() one of { [Tensor, Tensor], [Tensor, Tensor, Tensor, Tensor] }
this.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
this.basis[].tensorProduct.getClass().getName() one of { [BasisElement[], BasisElement[]], [BasisElement[], BasisElement[], BasisElement[], BasisElement[]] }
this.basis[].isIsolated one of { [0, 0], [0, 0, 0, 0] }
this.basis[].isDeleted one of { [0, 0], [0, 0, 0, 0] }
arg0.minEdge one of { 1, 2, 3 }
arg0.code != null
arg0.vplus != null
arg0.vplus.getClass().getName() == Vplus.class
arg0.vminus != null
arg0.vminus.getClass().getName() == Vminus.class
size(this.circles[]) one of { 1, 2 }
size(this.outMaps[]) one of { 1, 2 }
size(this.inMaps[]) one of { 1, 2 }
size(this.basis[]) one of { 2, 4 }
===========================================================================
KhovanovMapNode.containsCircle(SeifertCircle):::EXIT;condition="return == true"
this.binarycode.toString one of { "011", "101", "110" }
this.circles[].getClass().getName() == [SeifertCircle, SeifertCircle]
this.outMaps[] == [null]
this.outMaps[] elements == null
this.outMaps[].getClass().getName() == [null]
this.outMaps[].getClass().getName() elements == null
this.inMaps[].getClass().getName() == [SplitMap, SplitMap]
this.inMaps[].getClass().getName() elements == SplitMap.class
this.outcount == 0
this.incount == 2
this.basis[].getClass().getName() == [Tensor, Tensor, Tensor, Tensor]
this.basis[].khovanovNodeCode.toString elements one of { "011", "101", "110" }
this.basis[].tensorProduct.getClass().getName() == [BasisElement[], BasisElement[], BasisElement[], BasisElement[]]
this.basis[].isIsolated == [0, 0, 0, 0]
this.basis[].isDeleted == [0, 0, 0, 0]
arg0.code.toString one of { "14", "25", "36" }
return == true
size(this.circles[]) == 2
size(this.outMaps[]) == 1
size(this.inMaps[]) == 2
size(this.basis[]) == 4
===========================================================================
KhovanovMapNode.containsCircle(SeifertCircle):::EXIT;condition="not(return == true)"
return == false
===========================================================================
KhovanovMapNode.findCircleMatch(SeifertCircle):::ENTER
this.circles[].getClass().getName() one of { [SeifertCircle, SeifertCircle], [SeifertCircle, SeifertCircle, SeifertCircle] }
this.outcount one of { 0, 1, 2 }
this.incount one of { 0, 1, 2 }
this.basis[] elements != null
this.basis[].getClass().getName() elements == Tensor.class
this.basis[].getClass().getName() one of { [Tensor, Tensor, Tensor, Tensor], [Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor] }
this.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
this.basis[].tensorProduct.getClass().getName() one of { [BasisElement[], BasisElement[], BasisElement[], BasisElement[]], [BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[]] }
this.basis[].isIsolated one of { [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
this.basis[].isDeleted one of { [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
arg0 != null
arg0.minEdge one of { 1, 2 }
arg0.code != null
arg0.vplus != null
arg0.vplus.getClass().getName() == Vplus.class
arg0.vminus != null
arg0.vminus.getClass().getName() == Vminus.class
size(this.circles[]) one of { 2, 3 }
size(this.outMaps[]) one of { 0, 1, 3 }
size(this.inMaps[]) one of { 0, 2, 3 }
size(this.basis[]) one of { 4, 8 }
===========================================================================
KhovanovMapNode.findCircleMatch(SeifertCircle):::EXIT
this.binarycode == orig(this.binarycode)
this.binarycode.toString == orig(this.binarycode.toString)
this.circles == orig(this.circles)
this.circles[] == orig(this.circles[])
this.outMaps == orig(this.outMaps)
this.outMaps.getClass().getName() == orig(this.outMaps.getClass().getName())
this.outMaps[] == orig(this.outMaps[])
this.inMaps == orig(this.inMaps)
this.inMaps.getClass().getName() == orig(this.inMaps.getClass().getName())
this.inMaps[] == orig(this.inMaps[])
this.outcount == orig(this.outcount)
this.incount == orig(this.incount)
this.basis == orig(this.basis)
this.basis.getClass().getName() == orig(this.basis.getClass().getName())
this.basis[] == orig(this.basis[])
this.basis[].khovanovNodeCode == orig(this.basis[].khovanovNodeCode)
this.basis[].tensorProduct == orig(this.basis[].tensorProduct)
this.basis[].outArrows == orig(this.basis[].outArrows)
this.basis[].inArrows == orig(this.basis[].inArrows)
this.basis[].isIsolated == orig(this.basis[].isIsolated)
this.basis[].isDeleted == orig(this.basis[].isDeleted)
this.tensorcount == orig(this.tensorcount)
arg0.minEdge == orig(arg0.minEdge)
arg0.code == orig(arg0.code)
arg0.code.toString == orig(arg0.code.toString)
arg0.vplus == orig(arg0.vplus)
arg0.vplus.getClass().getName() == orig(arg0.vplus.getClass().getName())
arg0.vminus == orig(arg0.vminus)
arg0.vminus.getClass().getName() == orig(arg0.vminus.getClass().getName())
this.circles[].getClass().getName() one of { [SeifertCircle, SeifertCircle], [SeifertCircle, SeifertCircle, SeifertCircle] }
this.outcount one of { 0, 1, 2 }
this.incount one of { 0, 1, 2 }
this.basis[] elements != null
this.basis[].getClass().getName() elements == Tensor.class
this.basis[].getClass().getName() one of { [Tensor, Tensor, Tensor, Tensor], [Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor] }
this.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
this.basis[].tensorProduct.getClass().getName() one of { [BasisElement[], BasisElement[], BasisElement[], BasisElement[]], [BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[]] }
this.basis[].isIsolated one of { [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
this.basis[].isDeleted one of { [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
arg0.minEdge one of { 1, 2 }
arg0.code != null
arg0.vplus != null
arg0.vplus.getClass().getName() == Vplus.class
arg0.vminus != null
arg0.vminus.getClass().getName() == Vminus.class
return != null
return[] elements has only one value
return[] elements != null
return[].getClass().getName() elements == SeifertCircle.class
return[].getClass().getName() one of { [], [SeifertCircle] }
size(this.circles[]) one of { 2, 3 }
size(this.outMaps[]) one of { 0, 1, 3 }
size(this.inMaps[]) one of { 0, 2, 3 }
size(this.basis[]) one of { 4, 8 }
size(return[]) one of { 0, 1 }
===========================================================================
KhovanovMapNode.findDifferentCircles(KhovanovMapNode):::ENTER
this.circles[].getClass().getName() one of { [SeifertCircle, SeifertCircle], [SeifertCircle, SeifertCircle, SeifertCircle] }
this.outcount one of { 0, 1, 2 }
this.incount one of { 0, 1, 2 }
this.basis[] elements != null
this.basis[].getClass().getName() elements == Tensor.class
this.basis[].getClass().getName() one of { [Tensor, Tensor, Tensor, Tensor], [Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor] }
this.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
this.basis[].tensorProduct.getClass().getName() one of { [BasisElement[], BasisElement[], BasisElement[], BasisElement[]], [BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[]] }
this.basis[].isIsolated one of { [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
this.basis[].isDeleted one of { [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
arg0 != null
arg0.binarycode != null
arg0.circles != null
arg0.circles[] elements != null
arg0.circles[].getClass().getName() elements == SeifertCircle.class
arg0.circles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
arg0.outMaps != null
arg0.outMaps.getClass().getName() == DMap[].class
arg0.inMaps != null
arg0.inMaps.getClass().getName() == DMap[].class
arg0.outcount one of { 0, 1 }
arg0.incount one of { 0, 1, 2 }
arg0.basis != null
arg0.basis.getClass().getName() == Tensor[].class
arg0.basis[] elements != null
arg0.basis[].getClass().getName() elements == Tensor.class
arg0.basis[].getClass().getName() one of { [Tensor, Tensor], [Tensor, Tensor, Tensor, Tensor] }
arg0.basis[].khovanovNodeCode elements != null
arg0.basis[].khovanovNodeCode elements are equal
arg0.basis[].tensorProduct elements != null
arg0.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
arg0.basis[].tensorProduct.getClass().getName() one of { [BasisElement[], BasisElement[]], [BasisElement[], BasisElement[], BasisElement[], BasisElement[]] }
arg0.basis[].outArrows elements != null
arg0.basis[].inArrows elements != null
arg0.basis[].isIsolated elements == false
arg0.basis[].isIsolated one of { [0, 0], [0, 0, 0, 0] }
arg0.basis[].isDeleted elements == false
arg0.basis[].isDeleted one of { [0, 0], [0, 0, 0, 0] }
arg0.tensorcount == 0
size(this.circles[]) one of { 2, 3 }
size(this.outMaps[]) one of { 0, 1, 3 }
size(this.inMaps[]) one of { 0, 2, 3 }
size(this.basis[]) one of { 4, 8 }
size(arg0.circles[]) one of { 1, 2 }
size(arg0.outMaps[]) one of { 1, 2 }
size(arg0.inMaps[]) one of { 1, 2 }
size(arg0.basis[]) one of { 2, 4 }
===========================================================================
KhovanovMapNode.findDifferentCircles(KhovanovMapNode):::EXIT
this.binarycode == orig(this.binarycode)
this.binarycode.toString == orig(this.binarycode.toString)
this.circles == orig(this.circles)
this.circles[] == orig(this.circles[])
this.outMaps == orig(this.outMaps)
this.outMaps.getClass().getName() == orig(this.outMaps.getClass().getName())
this.outMaps[] == orig(this.outMaps[])
this.inMaps == orig(this.inMaps)
this.inMaps.getClass().getName() == orig(this.inMaps.getClass().getName())
this.inMaps[] == orig(this.inMaps[])
this.outcount == orig(this.outcount)
this.incount == orig(this.incount)
this.basis == orig(this.basis)
this.basis.getClass().getName() == orig(this.basis.getClass().getName())
this.basis[] == orig(this.basis[])
this.basis[].khovanovNodeCode == orig(this.basis[].khovanovNodeCode)
this.basis[].tensorProduct == orig(this.basis[].tensorProduct)
this.basis[].outArrows == orig(this.basis[].outArrows)
this.basis[].inArrows == orig(this.basis[].inArrows)
this.basis[].isIsolated == orig(this.basis[].isIsolated)
this.basis[].isDeleted == orig(this.basis[].isDeleted)
this.tensorcount == orig(this.tensorcount)
arg0.binarycode == orig(arg0.binarycode)
arg0.binarycode.toString == orig(arg0.binarycode.toString)
arg0.circles == orig(arg0.circles)
arg0.circles[] == orig(arg0.circles[])
arg0.outMaps == orig(arg0.outMaps)
arg0.outMaps.getClass().getName() == orig(arg0.outMaps.getClass().getName())
arg0.outMaps[] == orig(arg0.outMaps[])
arg0.inMaps == orig(arg0.inMaps)
arg0.inMaps.getClass().getName() == orig(arg0.inMaps.getClass().getName())
arg0.inMaps[] == orig(arg0.inMaps[])
arg0.outcount == orig(arg0.outcount)
arg0.incount == orig(arg0.incount)
arg0.basis == orig(arg0.basis)
arg0.basis.getClass().getName() == orig(arg0.basis.getClass().getName())
arg0.basis[] == orig(arg0.basis[])
arg0.basis[].khovanovNodeCode == orig(arg0.basis[].khovanovNodeCode)
arg0.basis[].tensorProduct == orig(arg0.basis[].tensorProduct)
arg0.basis[].outArrows == orig(arg0.basis[].outArrows)
arg0.basis[].inArrows == orig(arg0.basis[].inArrows)
arg0.basis[].isIsolated == orig(arg0.basis[].isIsolated)
arg0.basis[].isDeleted == orig(arg0.basis[].isDeleted)
arg0.tensorcount == orig(arg0.tensorcount)
this.circles[].getClass().getName() one of { [SeifertCircle, SeifertCircle], [SeifertCircle, SeifertCircle, SeifertCircle] }
this.outcount one of { 0, 1, 2 }
this.incount one of { 0, 1, 2 }
this.basis[] elements != null
this.basis[].getClass().getName() elements == Tensor.class
this.basis[].getClass().getName() one of { [Tensor, Tensor, Tensor, Tensor], [Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor] }
this.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
this.basis[].tensorProduct.getClass().getName() one of { [BasisElement[], BasisElement[], BasisElement[], BasisElement[]], [BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[]] }
this.basis[].isIsolated one of { [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
this.basis[].isDeleted one of { [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
arg0.binarycode != null
arg0.circles != null
arg0.circles[] elements != null
arg0.circles[].getClass().getName() elements == SeifertCircle.class
arg0.circles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
arg0.outMaps != null
arg0.outMaps.getClass().getName() == DMap[].class
arg0.inMaps != null
arg0.inMaps.getClass().getName() == DMap[].class
arg0.outcount one of { 0, 1 }
arg0.incount one of { 0, 1, 2 }
arg0.basis != null
arg0.basis.getClass().getName() == Tensor[].class
arg0.basis[] elements != null
arg0.basis[].getClass().getName() elements == Tensor.class
arg0.basis[].getClass().getName() one of { [Tensor, Tensor], [Tensor, Tensor, Tensor, Tensor] }
arg0.basis[].khovanovNodeCode elements != null
arg0.basis[].khovanovNodeCode elements are equal
arg0.basis[].tensorProduct elements != null
arg0.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
arg0.basis[].tensorProduct.getClass().getName() one of { [BasisElement[], BasisElement[]], [BasisElement[], BasisElement[], BasisElement[], BasisElement[]] }
arg0.basis[].outArrows elements != null
arg0.basis[].inArrows elements != null
arg0.basis[].isIsolated elements == false
arg0.basis[].isIsolated one of { [0, 0], [0, 0, 0, 0] }
arg0.basis[].isDeleted elements == false
arg0.basis[].isDeleted one of { [0, 0], [0, 0, 0, 0] }
arg0.tensorcount == 0
return != null
return[] elements != null
return[].getClass().getName() == [SeifertCircle, SeifertCircle]
return[].getClass().getName() elements == SeifertCircle.class
size(this.circles[]) one of { 2, 3 }
size(this.outMaps[]) one of { 0, 1, 3 }
size(this.inMaps[]) one of { 0, 2, 3 }
size(this.basis[]) one of { 4, 8 }
size(arg0.circles[]) one of { 1, 2 }
size(arg0.outMaps[]) one of { 1, 2 }
size(arg0.inMaps[]) one of { 1, 2 }
size(arg0.basis[]) one of { 2, 4 }
size(return[]) == 2
===========================================================================
KhovanovMapNode.getBasis():::ENTER
this.outcount one of { 0, 1, 2 }
this.incount one of { 0, 1, 2 }
this.basis[] elements != null
this.basis[].getClass().getName() elements == Tensor.class
this.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
===========================================================================
KhovanovMapNode.getBasis():::EXIT
this.binarycode == orig(this.binarycode)
this.binarycode.toString == orig(this.binarycode.toString)
this.circles == orig(this.circles)
this.circles[] == orig(this.circles[])
this.outMaps == orig(this.outMaps)
this.outMaps.getClass().getName() == orig(this.outMaps.getClass().getName())
this.outMaps[] == orig(this.outMaps[])
this.inMaps == orig(this.inMaps)
this.inMaps.getClass().getName() == orig(this.inMaps.getClass().getName())
this.inMaps[] == orig(this.inMaps[])
this.outcount == orig(this.outcount)
this.incount == orig(this.incount)
this.basis == orig(this.basis)
this.basis.getClass().getName() == orig(this.basis.getClass().getName())
this.basis[] == orig(this.basis[])
this.basis[].khovanovNodeCode == orig(this.basis[].khovanovNodeCode)
this.basis[].tensorProduct == orig(this.basis[].tensorProduct)
this.basis[].outArrows == orig(this.basis[].outArrows)
this.basis[].inArrows == orig(this.basis[].inArrows)
this.basis[].isIsolated == orig(this.basis[].isIsolated)
this.basis[].isDeleted == orig(this.basis[].isDeleted)
this.tensorcount == orig(this.tensorcount)
this.outcount one of { 0, 1, 2 }
this.incount one of { 0, 1, 2 }
this.basis[] elements != null
this.basis[].getClass().getName() elements == Tensor.class
this.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
return != null
return.getClass().getName() == Tensor[].class
return[] elements != null
return[].khovanovNodeCode elements != null
return[].khovanovNodeCode elements are equal
return[].tensorProduct elements != null
return[].tensorProduct.getClass().getName() elements == BasisElement[].class
return[].outArrows elements != null
return[].inArrows elements != null
return[].isIsolated elements == false
return[].isIsolated one of { [0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
return[].isDeleted elements == false
return[].isDeleted one of { [0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
size(return[]) one of { 2, 4, 8 }
===========================================================================
KhovanovMapNode.getBinCode():::ENTER
this.outcount one of { 0, 1, 2 }
this.incount one of { 0, 1, 2 }
this.basis[] elements != null
this.basis[].getClass().getName() elements == Tensor.class
this.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
===========================================================================
KhovanovMapNode.getBinCode():::EXIT
this.binarycode == orig(this.binarycode)
this.binarycode.toString == orig(this.binarycode.toString)
this.circles == orig(this.circles)
this.circles[] == orig(this.circles[])
this.outMaps == orig(this.outMaps)
this.outMaps.getClass().getName() == orig(this.outMaps.getClass().getName())
this.outMaps[] == orig(this.outMaps[])
this.inMaps == orig(this.inMaps)
this.inMaps.getClass().getName() == orig(this.inMaps.getClass().getName())
this.inMaps[] == orig(this.inMaps[])
this.outcount == orig(this.outcount)
this.incount == orig(this.incount)
this.basis == orig(this.basis)
this.basis.getClass().getName() == orig(this.basis.getClass().getName())
this.basis[] == orig(this.basis[])
this.basis[].khovanovNodeCode == orig(this.basis[].khovanovNodeCode)
this.basis[].tensorProduct == orig(this.basis[].tensorProduct)
this.basis[].outArrows == orig(this.basis[].outArrows)
this.basis[].inArrows == orig(this.basis[].inArrows)
this.basis[].isIsolated == orig(this.basis[].isIsolated)
this.basis[].isDeleted == orig(this.basis[].isDeleted)
this.tensorcount == orig(this.tensorcount)
this.outcount one of { 0, 1, 2 }
this.incount one of { 0, 1, 2 }
this.basis[] elements != null
this.basis[].getClass().getName() elements == Tensor.class
this.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
return != null
===========================================================================
KhovanovMapNode.getCircles():::ENTER
this.circles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
this.outcount one of { 0, 1 }
this.incount one of { 0, 1, 2 }
this.basis[] elements != null
this.basis[].getClass().getName() elements == Tensor.class
this.basis[].getClass().getName() one of { [Tensor, Tensor], [Tensor, Tensor, Tensor, Tensor] }
this.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
this.basis[].tensorProduct.getClass().getName() one of { [BasisElement[], BasisElement[]], [BasisElement[], BasisElement[], BasisElement[], BasisElement[]] }
this.basis[].isIsolated one of { [0, 0], [0, 0, 0, 0] }
this.basis[].isDeleted one of { [0, 0], [0, 0, 0, 0] }
size(this.circles[]) one of { 1, 2 }
size(this.outMaps[]) one of { 1, 2 }
size(this.inMaps[]) one of { 1, 2 }
size(this.basis[]) one of { 2, 4 }
===========================================================================
KhovanovMapNode.getCircles():::EXIT
this.binarycode == orig(this.binarycode)
this.binarycode.toString == orig(this.binarycode.toString)
this.circles == orig(this.circles)
this.circles[] == orig(this.circles[])
this.outMaps == orig(this.outMaps)
this.outMaps.getClass().getName() == orig(this.outMaps.getClass().getName())
this.outMaps[] == orig(this.outMaps[])
this.inMaps == orig(this.inMaps)
this.inMaps.getClass().getName() == orig(this.inMaps.getClass().getName())
this.inMaps[] == orig(this.inMaps[])
this.outcount == orig(this.outcount)
this.incount == orig(this.incount)
this.basis == orig(this.basis)
this.basis.getClass().getName() == orig(this.basis.getClass().getName())
this.basis[] == orig(this.basis[])
this.basis[].khovanovNodeCode == orig(this.basis[].khovanovNodeCode)
this.basis[].tensorProduct == orig(this.basis[].tensorProduct)
this.basis[].outArrows == orig(this.basis[].outArrows)
this.basis[].inArrows == orig(this.basis[].inArrows)
this.basis[].isIsolated == orig(this.basis[].isIsolated)
this.basis[].isDeleted == orig(this.basis[].isDeleted)
this.tensorcount == orig(this.tensorcount)
this.circles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
this.outcount one of { 0, 1 }
this.incount one of { 0, 1, 2 }
this.basis[] elements != null
this.basis[].getClass().getName() elements == Tensor.class
this.basis[].getClass().getName() one of { [Tensor, Tensor], [Tensor, Tensor, Tensor, Tensor] }
this.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
this.basis[].tensorProduct.getClass().getName() one of { [BasisElement[], BasisElement[]], [BasisElement[], BasisElement[], BasisElement[], BasisElement[]] }
this.basis[].isIsolated one of { [0, 0], [0, 0, 0, 0] }
this.basis[].isDeleted one of { [0, 0], [0, 0, 0, 0] }
return != null
return[] elements != null
return[].getClass().getName() elements == SeifertCircle.class
return[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
size(this.circles[]) one of { 1, 2 }
size(this.outMaps[]) one of { 1, 2 }
size(this.inMaps[]) one of { 1, 2 }
size(this.basis[]) one of { 2, 4 }
size(return[]) one of { 1, 2 }
===========================================================================
KhovanovMapNode.makeBasis():::ENTER
this.outMaps[] elements == null
this.outMaps[].getClass().getName() elements == null
this.inMaps[] elements == null
this.inMaps[].getClass().getName() elements == null
this.outcount == 0
this.incount == 0
this.basis[] elements == null
this.basis[].getClass().getName() elements == null
this.basis[].tensorProduct.getClass().getName() elements == daikon.chicory.NonsensicalObject.class
===========================================================================
KhovanovMapNode.makeBasis():::EXIT
this.binarycode == orig(this.binarycode)
this.binarycode.toString == orig(this.binarycode.toString)
this.circles == orig(this.circles)
this.circles[] == orig(this.circles[])
this.outMaps == orig(this.outMaps)
this.outMaps.getClass().getName() == orig(this.outMaps.getClass().getName())
this.outMaps[] == orig(this.outMaps[])
this.inMaps == orig(this.inMaps)
this.inMaps.getClass().getName() == orig(this.inMaps.getClass().getName())
this.inMaps[] == orig(this.inMaps[])
this.outcount == orig(this.outcount)
this.incount == orig(this.incount)
this.basis == orig(this.basis)
this.basis.getClass().getName() == orig(this.basis.getClass().getName())
this.tensorcount == orig(this.tensorcount)
size(this.basis[]) == orig(size(this.basis[]))
this.outMaps[] elements == null
this.outMaps[].getClass().getName() elements == null
this.inMaps[] elements == null
this.inMaps[].getClass().getName() elements == null
this.outcount == 0
this.incount == 0
this.basis[].getClass().getName() elements == Tensor.class
this.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
===========================================================================
KhovanovMapNode.nthOccurrence(java.lang.String, char, int):::ENTER
arg0 != null
arg1 == 48
arg2 one of { 1, 2, 3 }
===========================================================================
KhovanovMapNode.nthOccurrence(java.lang.String, char, int):::EXIT
arg0.toString == orig(arg0.toString)
return one of { 0, 1, 2 }
===========================================================================
KhovanovMapNode.numCircles():::ENTER
this.outcount one of { 0, 1, 2 }
this.incount one of { 0, 1, 2 }
this.basis[] elements != null
this.basis[].getClass().getName() elements == Tensor.class
this.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
===========================================================================
KhovanovMapNode.numCircles():::EXIT
this.binarycode == orig(this.binarycode)
this.binarycode.toString == orig(this.binarycode.toString)
this.circles == orig(this.circles)
this.circles[] == orig(this.circles[])
this.outMaps == orig(this.outMaps)
this.outMaps.getClass().getName() == orig(this.outMaps.getClass().getName())
this.outMaps[] == orig(this.outMaps[])
this.inMaps == orig(this.inMaps)
this.inMaps.getClass().getName() == orig(this.inMaps.getClass().getName())
this.inMaps[] == orig(this.inMaps[])
this.outcount == orig(this.outcount)
this.incount == orig(this.incount)
this.basis == orig(this.basis)
this.basis.getClass().getName() == orig(this.basis.getClass().getName())
this.basis[] == orig(this.basis[])
this.basis[].khovanovNodeCode == orig(this.basis[].khovanovNodeCode)
this.basis[].tensorProduct == orig(this.basis[].tensorProduct)
this.basis[].outArrows == orig(this.basis[].outArrows)
this.basis[].inArrows == orig(this.basis[].inArrows)
this.basis[].isIsolated == orig(this.basis[].isIsolated)
this.basis[].isDeleted == orig(this.basis[].isDeleted)
this.tensorcount == orig(this.tensorcount)
this.outcount one of { 0, 1, 2 }
this.incount one of { 0, 1, 2 }
this.basis[] elements != null
this.basis[].getClass().getName() elements == Tensor.class
this.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
return one of { 1, 2, 3 }
===========================================================================
KhovanovMapNode.outMaps():::ENTER
this.outMaps[] elements == null
this.outMaps[].getClass().getName() elements == null
this.outcount == 0
this.basis[].getClass().getName() elements == Tensor.class
this.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
===========================================================================
KhovanovMapNode.outMaps():::EXIT
this.binarycode == orig(this.binarycode)
this.binarycode.toString == orig(this.binarycode.toString)
this.circles == orig(this.circles)
this.circles[] == orig(this.circles[])
this.outMaps == orig(this.outMaps)
this.outMaps.getClass().getName() == orig(this.outMaps.getClass().getName())
this.outMaps[] == orig(this.outMaps[])
this.inMaps == orig(this.inMaps)
this.inMaps.getClass().getName() == orig(this.inMaps.getClass().getName())
this.inMaps[] == orig(this.inMaps[])
this.outcount == orig(this.outcount)
this.incount == orig(this.incount)
this.basis == orig(this.basis)
this.basis.getClass().getName() == orig(this.basis.getClass().getName())
this.basis[] == orig(this.basis[])
this.basis[].khovanovNodeCode == orig(this.basis[].khovanovNodeCode)
this.basis[].tensorProduct == orig(this.basis[].tensorProduct)
this.basis[].outArrows == orig(this.basis[].outArrows)
this.basis[].inArrows == orig(this.basis[].inArrows)
this.basis[].isIsolated == orig(this.basis[].isIsolated)
this.basis[].isDeleted == orig(this.basis[].isDeleted)
this.tensorcount == orig(this.tensorcount)
this.outMaps[] elements == null
this.outMaps[].getClass().getName() elements == null
this.outcount == 0
this.basis[].getClass().getName() elements == Tensor.class
this.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
return.getClass().getName() == java.lang.String[].class
===========================================================================
KhovanovMapNode.toString():::ENTER
this.basis[].getClass().getName() elements == Tensor.class
this.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
===========================================================================
KhovanovMapNode.toString():::EXIT
this.binarycode == orig(this.binarycode)
this.binarycode.toString == orig(this.binarycode.toString)
this.circles == orig(this.circles)
this.circles[] == orig(this.circles[])
this.outMaps == orig(this.outMaps)
this.outMaps.getClass().getName() == orig(this.outMaps.getClass().getName())
this.outMaps[] == orig(this.outMaps[])
this.inMaps == orig(this.inMaps)
this.inMaps.getClass().getName() == orig(this.inMaps.getClass().getName())
this.inMaps[] == orig(this.inMaps[])
this.outcount == orig(this.outcount)
this.incount == orig(this.incount)
this.basis == orig(this.basis)
this.basis.getClass().getName() == orig(this.basis.getClass().getName())
this.basis[] == orig(this.basis[])
this.basis[].khovanovNodeCode == orig(this.basis[].khovanovNodeCode)
this.basis[].tensorProduct == orig(this.basis[].tensorProduct)
this.basis[].outArrows == orig(this.basis[].outArrows)
this.basis[].inArrows == orig(this.basis[].inArrows)
this.basis[].isIsolated == orig(this.basis[].isIsolated)
this.basis[].isDeleted == orig(this.basis[].isDeleted)
this.tensorcount == orig(this.tensorcount)
this.basis[].getClass().getName() elements == Tensor.class
this.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
===========================================================================
KhovanovRow:::OBJECT
this.nodes != null
this.nodes.getClass().getName() == KhovanovMapNode[].class
this.nodes[].binarycode elements != null
this.nodes[].circles elements != null
this.nodes[].outMaps elements != null
this.nodes[].inMaps elements != null
this.nodes[].outcount elements >= 0
this.nodes[].outcount sorted by >=
this.nodes[].incount elements >= 0
this.nodes[].basis elements != null
this.nodes[].tensorcount elements == 0
this.nodes[].tensorcount one of { [0], [0, 0, 0] }
this.index >= 0
size(this.nodes[]) one of { 1, 3 }
===========================================================================
KhovanovRow.KhovanovRow(int):::ENTER
arg0 one of { 1, 3 }
===========================================================================
KhovanovRow.KhovanovRow(int):::EXIT
orig(arg0) == size(this.nodes[])
this.nodes[this.index] == this.nodes[orig(arg0)-1]
this.nodes[] elements == null
this.nodes[].getClass().getName() elements == null
this.nodes[].getClass().getName() one of { [null], [null, null, null] }
this.nodes[].outMaps.getClass().getName() elements == daikon.chicory.NonsensicalObject.class
this.nodes[].outMaps.getClass().getName() one of { [daikon.chicory.NonsensicalObject], [daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject] }
this.nodes[].inMaps.getClass().getName() elements == daikon.chicory.NonsensicalObject.class
this.nodes[].inMaps.getClass().getName() one of { [daikon.chicory.NonsensicalObject], [daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject] }
this.nodes[].basis.getClass().getName() elements == daikon.chicory.NonsensicalObject.class
this.nodes[].basis.getClass().getName() one of { [daikon.chicory.NonsensicalObject], [daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject] }
this.index == 0
this.nodes[] elements == this.nodes[this.index]
===========================================================================
KhovanovRow.add(KhovanovMapNode):::ENTER
arg0.outMaps.getClass().getName() == arg0.inMaps.getClass().getName()
this.index one of { 0, 1, 2 }
arg0.circles[].getClass().getName() elements == SeifertCircle.class
arg0.outMaps.getClass().getName() == DMap[].class
arg0.outMaps[] elements == null
arg0.outMaps[].getClass().getName() elements == null
arg0.inMaps[] elements == null
arg0.inMaps[].getClass().getName() elements == null
arg0.outcount == 0
arg0.incount == 0
arg0.basis.getClass().getName() == Tensor[].class
arg0.basis[].getClass().getName() elements == Tensor.class
arg0.basis[].khovanovNodeCode elements are equal
arg0.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
arg0.basis[].isIsolated elements == false
arg0.basis[].isIsolated one of { [0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
arg0.basis[].isDeleted elements == false
arg0.basis[].isDeleted one of { [0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
arg0.tensorcount == 0
size(arg0.circles[]) one of { 1, 2, 3 }
size(arg0.basis[]) one of { 2, 4, 8 }
this.nodes[this.index] == null
this.nodes.getClass().getName() != arg0.outMaps.getClass().getName()
this.nodes.getClass().getName() != arg0.basis.getClass().getName()
this.index <= size(this.nodes[])-1
arg0.outMaps.getClass().getName() != arg0.basis.getClass().getName()
size(arg0.circles[]) != size(arg0.outMaps[])
size(arg0.circles[]) >= size(arg0.outMaps[])-1
size(arg0.circles[]) >= size(arg0.inMaps[])
size(arg0.inMaps[]) % size(arg0.circles[]) == 0
size(arg0.circles[]) <= size(arg0.basis[])-1
size(arg0.circles[])-1 != size(arg0.outMaps[])-1
size(arg0.circles[])-1 != size(arg0.inMaps[])
size(arg0.circles[])-1 >= size(arg0.inMaps[])-1
size(arg0.outMaps[]) != size(arg0.inMaps[])
size(arg0.outMaps[]) + size(arg0.inMaps[]) - 3 == 0
size(arg0.outMaps[]) <= size(arg0.basis[])
size(arg0.outMaps[])-1 != size(arg0.inMaps[])-1
size(arg0.outMaps[])-1 <= size(arg0.basis[])-1
size(arg0.inMaps[]) <= size(arg0.basis[])-1
===========================================================================
KhovanovRow.add(KhovanovMapNode):::EXIT
this.nodes == orig(this.nodes)
this.nodes.getClass().getName() == orig(this.nodes.getClass().getName())
arg0.binarycode == orig(arg0.binarycode)
arg0.binarycode.toString == orig(arg0.binarycode.toString)
arg0.circles == orig(arg0.circles)
arg0.circles[] == orig(arg0.circles[])
arg0.outMaps == orig(arg0.outMaps)
arg0.outMaps.getClass().getName() == arg0.inMaps.getClass().getName()
arg0.outMaps.getClass().getName() == orig(arg0.outMaps.getClass().getName())
arg0.outMaps.getClass().getName() == orig(arg0.inMaps.getClass().getName())
arg0.outMaps[] == orig(arg0.outMaps[])
arg0.inMaps == orig(arg0.inMaps)
arg0.inMaps[] == orig(arg0.inMaps[])
arg0.outcount == orig(arg0.outcount)
arg0.incount == orig(arg0.incount)
arg0.basis == orig(arg0.basis)
arg0.basis.getClass().getName() == orig(arg0.basis.getClass().getName())
arg0.basis[] == orig(arg0.basis[])
arg0.basis[].khovanovNodeCode == orig(arg0.basis[].khovanovNodeCode)
arg0.basis[].tensorProduct == orig(arg0.basis[].tensorProduct)
arg0.basis[].outArrows == orig(arg0.basis[].outArrows)
arg0.basis[].inArrows == orig(arg0.basis[].inArrows)
arg0.basis[].isIsolated == orig(arg0.basis[].isIsolated)
arg0.basis[].isDeleted == orig(arg0.basis[].isDeleted)
arg0.tensorcount == orig(arg0.tensorcount)
orig(arg0) == this.nodes[this.index-1]
orig(arg0) == this.nodes[orig(this.index)]
size(this.nodes[]) == orig(size(this.nodes[]))
orig(this.nodes[post(this.index)-1]) == orig(this.nodes[this.index])
this.nodes[].outcount elements == 0
this.nodes[].outcount one of { [0], [0, 0, 0] }
this.nodes[].incount elements == 0
this.nodes[].incount one of { [0], [0, 0, 0] }
this.index one of { 1, 2, 3 }
arg0.circles[].getClass().getName() elements == SeifertCircle.class
arg0.outMaps.getClass().getName() == DMap[].class
arg0.outMaps[] elements == null
arg0.outMaps[].getClass().getName() elements == null
arg0.inMaps[] elements == null
arg0.inMaps[].getClass().getName() elements == null
arg0.outcount == 0
arg0.incount == 0
arg0.basis.getClass().getName() == Tensor[].class
arg0.basis[].getClass().getName() elements == Tensor.class
arg0.basis[].khovanovNodeCode elements are equal
arg0.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
arg0.basis[].isIsolated elements == false
arg0.basis[].isIsolated one of { [0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
arg0.basis[].isDeleted elements == false
arg0.basis[].isDeleted one of { [0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
arg0.tensorcount == 0
size(arg0.circles[]) one of { 1, 2, 3 }
size(arg0.basis[]) one of { 2, 4, 8 }
this.nodes.getClass().getName() != arg0.outMaps.getClass().getName()
this.nodes.getClass().getName() != arg0.basis.getClass().getName()
arg0.outMaps.getClass().getName() in this.nodes[].outMaps.getClass().getName()
arg0.outMaps.getClass().getName() in this.nodes[].inMaps.getClass().getName()
arg0.basis.getClass().getName() in this.nodes[].basis.getClass().getName()
this.index > orig(this.index)
this.index <= size(this.nodes[])
arg0.outMaps.getClass().getName() != arg0.basis.getClass().getName()
orig(this.index) <= size(this.nodes[])-1
size(arg0.circles[]) != size(arg0.outMaps[])
size(arg0.circles[]) >= size(arg0.outMaps[])-1
size(arg0.circles[]) >= size(arg0.inMaps[])
size(arg0.inMaps[]) % size(arg0.circles[]) == 0
size(arg0.circles[]) <= size(arg0.basis[])-1
size(arg0.circles[])-1 != size(arg0.outMaps[])-1
size(arg0.circles[])-1 != size(arg0.inMaps[])
size(arg0.circles[])-1 >= size(arg0.inMaps[])-1
size(arg0.outMaps[]) != size(arg0.inMaps[])
size(arg0.outMaps[]) + size(arg0.inMaps[]) - 3 == 0
size(arg0.outMaps[]) <= size(arg0.basis[])
size(arg0.outMaps[])-1 != size(arg0.inMaps[])-1
size(arg0.outMaps[])-1 <= size(arg0.basis[])-1
size(arg0.inMaps[]) <= size(arg0.basis[])-1
===========================================================================
KhovanovRow.findNode(java.lang.String):::ENTER
this.index == size(this.nodes[])
this.nodes[] elements != null
this.nodes[].getClass().getName() elements == KhovanovMapNode.class
this.nodes[].getClass().getName() one of { [KhovanovMapNode], [KhovanovMapNode, KhovanovMapNode, KhovanovMapNode] }
this.nodes[].outMaps.getClass().getName() elements == DMap[].class
this.nodes[].outMaps.getClass().getName() one of { [DMap[]], [DMap[], DMap[], DMap[]] }
this.nodes[].inMaps.getClass().getName() elements == DMap[].class
this.nodes[].inMaps.getClass().getName() one of { [DMap[]], [DMap[], DMap[], DMap[]] }
this.nodes[].outcount elements == 0
this.nodes[].outcount one of { [0], [0, 0, 0] }
this.nodes[].incount elements one of { 0, 1, 2 }
this.nodes[].basis.getClass().getName() elements == Tensor[].class
this.nodes[].basis.getClass().getName() one of { [Tensor[]], [Tensor[], Tensor[], Tensor[]] }
this.index one of { 1, 3 }
arg0 != null
===========================================================================
KhovanovRow.findNode(java.lang.String):::EXIT
this.nodes == orig(this.nodes)
this.nodes.getClass().getName() == orig(this.nodes.getClass().getName())
this.nodes[] == orig(this.nodes[])
this.nodes[].binarycode == orig(this.nodes[].binarycode)
this.nodes[].circles == orig(this.nodes[].circles)
this.nodes[].outMaps == orig(this.nodes[].outMaps)
this.nodes[].inMaps == orig(this.nodes[].inMaps)
this.nodes[].outcount == orig(this.nodes[].outcount)
this.nodes[].incount == orig(this.nodes[].incount)
this.nodes[].basis == orig(this.nodes[].basis)
this.nodes[].tensorcount == orig(this.nodes[].tensorcount)
this.index == orig(this.index)
this.index == size(this.nodes[])
this.index == orig(size(this.nodes[]))
arg0.toString == orig(arg0.toString)
return.outMaps.getClass().getName() == return.inMaps.getClass().getName()
size(return.circles[]) == size(return.inMaps[])
this.nodes[] elements != null
this.nodes[].getClass().getName() elements == KhovanovMapNode.class
this.nodes[].getClass().getName() one of { [KhovanovMapNode], [KhovanovMapNode, KhovanovMapNode, KhovanovMapNode] }
this.nodes[].outMaps.getClass().getName() elements == DMap[].class
this.nodes[].outMaps.getClass().getName() one of { [DMap[]], [DMap[], DMap[], DMap[]] }
this.nodes[].inMaps.getClass().getName() elements == DMap[].class
this.nodes[].inMaps.getClass().getName() one of { [DMap[]], [DMap[], DMap[], DMap[]] }
this.nodes[].outcount elements == 0
this.nodes[].outcount one of { [0], [0, 0, 0] }
this.nodes[].incount elements one of { 0, 1, 2 }
this.nodes[].basis.getClass().getName() elements == Tensor[].class
this.nodes[].basis.getClass().getName() one of { [Tensor[]], [Tensor[], Tensor[], Tensor[]] }
this.index one of { 1, 3 }
return != null
return.binarycode != null
return.circles != null
return.circles[] elements != null
return.circles[].getClass().getName() elements == SeifertCircle.class
return.outMaps != null
return.outMaps.getClass().getName() == DMap[].class
return.outMaps[] elements == null
return.outMaps[].getClass().getName() elements == null
return.inMaps != null
return.outcount == 0
return.incount one of { 0, 1, 2 }
return.basis != null
return.basis.getClass().getName() == Tensor[].class
return.basis[] elements != null
return.basis[].getClass().getName() elements == Tensor.class
return.basis[].khovanovNodeCode elements != null
return.basis[].khovanovNodeCode elements are equal
return.basis[].tensorProduct elements != null
return.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
return.basis[].outArrows elements != null
return.basis[].inArrows elements != null
return.basis[].isIsolated elements == false
return.basis[].isIsolated one of { [0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
return.basis[].isDeleted elements == false
return.basis[].isDeleted one of { [0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
return.tensorcount == 0
size(return.circles[]) one of { 1, 2, 3 }
size(return.outMaps[]) one of { 0, 1, 2 }
size(return.basis[]) one of { 2, 4, 8 }
return.inMaps[return.incount] == null
this.nodes.getClass().getName() != return.outMaps.getClass().getName()
this.nodes.getClass().getName() != return.basis.getClass().getName()
return in this.nodes[]
return.outMaps.getClass().getName() in this.nodes[].outMaps.getClass().getName()
return.outMaps.getClass().getName() in this.nodes[].inMaps.getClass().getName()
return.incount in this.nodes[].incount
this.nodes[].incount elements >= return.incount
this.nodes[].incount elements <= size(return.circles[])
this.nodes[].incount elements <= size(return.basis[])-1
return.basis.getClass().getName() in this.nodes[].basis.getClass().getName()
return.outMaps.getClass().getName() != return.basis.getClass().getName()
return.incount <= size(return.circles[])-1
return.incount < size(return.basis[])-1
size(return.circles[]) != size(return.outMaps[])
size(return.circles[]) >= size(return.outMaps[])-1
size(return.circles[]) <= size(return.basis[])-1
size(return.circles[])-1 != size(return.outMaps[])-1
size(return.outMaps[]) <= size(return.basis[])
size(return.outMaps[]) != size(return.basis[])-1
size(return.outMaps[])-1 <= size(return.basis[])-1
===========================================================================
KhovanovRow.nthNode(int):::ENTER
this.index == size(this.nodes[])
this.nodes[].getClass().getName() elements == KhovanovMapNode.class
this.nodes[].getClass().getName() one of { [KhovanovMapNode], [KhovanovMapNode, KhovanovMapNode, KhovanovMapNode] }
this.nodes[].outMaps.getClass().getName() elements == DMap[].class
this.nodes[].outMaps.getClass().getName() one of { [DMap[]], [DMap[], DMap[], DMap[]] }
this.nodes[].inMaps.getClass().getName() elements == DMap[].class
this.nodes[].inMaps.getClass().getName() one of { [DMap[]], [DMap[], DMap[], DMap[]] }
this.nodes[].outcount elements one of { 0, 1, 2 }
this.nodes[].incount elements are equal
this.nodes[].basis.getClass().getName() elements == Tensor[].class
this.nodes[].basis.getClass().getName() one of { [Tensor[]], [Tensor[], Tensor[], Tensor[]] }
this.index one of { 1, 3 }
arg0 one of { 0, 1, 2 }
arg0 <= size(this.nodes[])-1
===========================================================================
KhovanovRow.nthNode(int):::EXIT
this.nodes == orig(this.nodes)
this.nodes.getClass().getName() == orig(this.nodes.getClass().getName())
this.nodes[] == orig(this.nodes[])
this.nodes[].binarycode == orig(this.nodes[].binarycode)
this.nodes[].circles == orig(this.nodes[].circles)
this.nodes[].outMaps == orig(this.nodes[].outMaps)
this.nodes[].inMaps == orig(this.nodes[].inMaps)
this.nodes[].outcount == orig(this.nodes[].outcount)
this.nodes[].incount == orig(this.nodes[].incount)
this.nodes[].basis == orig(this.nodes[].basis)
this.nodes[].tensorcount == orig(this.nodes[].tensorcount)
this.index == orig(this.index)
this.index == size(this.nodes[])
this.index == orig(size(this.nodes[]))
return == this.nodes[orig(arg0)]
return == orig(this.nodes[post(arg0)])
return == orig(this.nodes[arg0])
return.outMaps.getClass().getName() == return.inMaps.getClass().getName()
return.incount == size(return.inMaps[])
this.nodes[].getClass().getName() elements == KhovanovMapNode.class
this.nodes[].getClass().getName() one of { [KhovanovMapNode], [KhovanovMapNode, KhovanovMapNode, KhovanovMapNode] }
this.nodes[].outMaps.getClass().getName() elements == DMap[].class
this.nodes[].outMaps.getClass().getName() one of { [DMap[]], [DMap[], DMap[], DMap[]] }
this.nodes[].inMaps.getClass().getName() elements == DMap[].class
this.nodes[].inMaps.getClass().getName() one of { [DMap[]], [DMap[], DMap[], DMap[]] }
this.nodes[].outcount elements one of { 0, 1, 2 }
this.nodes[].incount elements are equal
this.nodes[].basis.getClass().getName() elements == Tensor[].class
this.nodes[].basis.getClass().getName() one of { [Tensor[]], [Tensor[], Tensor[], Tensor[]] }
this.index one of { 1, 3 }
return.circles[].getClass().getName() elements == SeifertCircle.class
return.outMaps.getClass().getName() == DMap[].class
return.outMaps[] elements == null
return.outMaps[].getClass().getName() elements == null
return.outcount == 0
return.basis.getClass().getName() == Tensor[].class
return.basis[].getClass().getName() elements == Tensor.class
return.basis[].khovanovNodeCode elements are equal
return.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
return.basis[].isIsolated elements == false
return.basis[].isIsolated one of { [0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
return.basis[].isDeleted elements == false
return.basis[].isDeleted one of { [0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
return.tensorcount == 0
size(return.circles[]) one of { 1, 2, 3 }
size(return.basis[]) one of { 2, 4, 8 }
this.nodes.getClass().getName() != return.outMaps.getClass().getName()
this.nodes.getClass().getName() != return.basis.getClass().getName()
return.outMaps.getClass().getName() in this.nodes[].outMaps.getClass().getName()
return.outMaps.getClass().getName() in this.nodes[].inMaps.getClass().getName()
this.nodes[].outcount elements <= size(return.outMaps[])
this.nodes[].outcount elements <= size(return.basis[])
return.incount in this.nodes[].incount
this.nodes[].incount elements == return.incount
this.nodes[].incount elements <= size(return.circles[])
this.nodes[].incount elements <= size(return.basis[])-1
return.basis.getClass().getName() in this.nodes[].basis.getClass().getName()
return.outMaps.getClass().getName() != return.basis.getClass().getName()
return.incount % size(return.circles[]) == 0
return.incount <= size(return.circles[])
return.incount != size(return.circles[])-1
return.incount != size(return.outMaps[])
return.incount + size(return.outMaps[]) - 3 == 0
return.incount <= size(return.basis[])-1
orig(arg0) <= size(this.nodes[])-1
size(return.circles[]) != size(return.outMaps[])
size(return.circles[]) >= size(return.outMaps[])-1
size(return.circles[]) <= size(return.basis[])-1
size(return.circles[])-1 != size(return.outMaps[])-1
size(return.circles[])-1 >= size(return.inMaps[])-1
size(return.outMaps[]) <= size(return.basis[])
size(return.outMaps[])-1 != size(return.inMaps[])-1
size(return.outMaps[])-1 <= size(return.basis[])-1
===========================================================================
KhovanovRow.size():::ENTER
this.index == size(this.nodes[])
this.nodes[] elements != null
this.nodes[].getClass().getName() elements == KhovanovMapNode.class
this.nodes[].getClass().getName() one of { [KhovanovMapNode], [KhovanovMapNode, KhovanovMapNode, KhovanovMapNode] }
this.nodes[].outMaps.getClass().getName() elements == DMap[].class
this.nodes[].outMaps.getClass().getName() one of { [DMap[]], [DMap[], DMap[], DMap[]] }
this.nodes[].inMaps.getClass().getName() elements == DMap[].class
this.nodes[].inMaps.getClass().getName() one of { [DMap[]], [DMap[], DMap[], DMap[]] }
this.nodes[].incount elements are equal
this.nodes[].basis.getClass().getName() elements == Tensor[].class
this.nodes[].basis.getClass().getName() one of { [Tensor[]], [Tensor[], Tensor[], Tensor[]] }
this.index one of { 1, 3 }
===========================================================================
KhovanovRow.size():::EXIT
this.nodes == orig(this.nodes)
this.nodes.getClass().getName() == orig(this.nodes.getClass().getName())
this.nodes[] == orig(this.nodes[])
this.nodes[].binarycode == orig(this.nodes[].binarycode)
this.nodes[].circles == orig(this.nodes[].circles)
this.nodes[].outMaps == orig(this.nodes[].outMaps)
this.nodes[].inMaps == orig(this.nodes[].inMaps)
this.nodes[].outcount == orig(this.nodes[].outcount)
this.nodes[].incount == orig(this.nodes[].incount)
this.nodes[].basis == orig(this.nodes[].basis)
this.nodes[].tensorcount == orig(this.nodes[].tensorcount)
this.index == return
return == orig(this.index)
return == size(this.nodes[])
return == orig(size(this.nodes[]))
this.nodes[] elements != null
this.nodes[].getClass().getName() elements == KhovanovMapNode.class
this.nodes[].getClass().getName() one of { [KhovanovMapNode], [KhovanovMapNode, KhovanovMapNode, KhovanovMapNode] }
this.nodes[].outMaps.getClass().getName() elements == DMap[].class
this.nodes[].outMaps.getClass().getName() one of { [DMap[]], [DMap[], DMap[], DMap[]] }
this.nodes[].inMaps.getClass().getName() elements == DMap[].class
this.nodes[].inMaps.getClass().getName() one of { [DMap[]], [DMap[], DMap[], DMap[]] }
this.nodes[].incount elements are equal
this.nodes[].basis.getClass().getName() elements == Tensor[].class
this.nodes[].basis.getClass().getName() one of { [Tensor[]], [Tensor[], Tensor[], Tensor[]] }
return one of { 1, 3 }
===========================================================================
KhovanovRow.toString():::ENTER
this.nodes[].getClass().getName() elements == KhovanovMapNode.class
this.nodes[].getClass().getName() one of { [KhovanovMapNode], [KhovanovMapNode, KhovanovMapNode, KhovanovMapNode] }
this.nodes[].outMaps.getClass().getName() elements == DMap[].class
this.nodes[].outMaps.getClass().getName() one of { [DMap[]], [DMap[], DMap[], DMap[]] }
this.nodes[].inMaps.getClass().getName() elements == DMap[].class
this.nodes[].inMaps.getClass().getName() one of { [DMap[]], [DMap[], DMap[], DMap[]] }
this.nodes[].outcount elements are equal
this.nodes[].incount elements are equal
this.nodes[].basis.getClass().getName() elements == Tensor[].class
this.nodes[].basis.getClass().getName() one of { [Tensor[]], [Tensor[], Tensor[], Tensor[]] }
this.index one of { 1, 3 }
===========================================================================
KhovanovRow.toString():::EXIT
this.nodes == orig(this.nodes)
this.nodes.getClass().getName() == orig(this.nodes.getClass().getName())
this.nodes[] == orig(this.nodes[])
this.nodes[].binarycode == orig(this.nodes[].binarycode)
this.nodes[].circles == orig(this.nodes[].circles)
this.nodes[].outMaps == orig(this.nodes[].outMaps)
this.nodes[].inMaps == orig(this.nodes[].inMaps)
this.nodes[].outcount == orig(this.nodes[].outcount)
this.nodes[].incount == orig(this.nodes[].incount)
this.nodes[].basis == orig(this.nodes[].basis)
this.nodes[].tensorcount == orig(this.nodes[].tensorcount)
this.index == orig(this.index)
this.nodes[].getClass().getName() elements == KhovanovMapNode.class
this.nodes[].getClass().getName() one of { [KhovanovMapNode], [KhovanovMapNode, KhovanovMapNode, KhovanovMapNode] }
this.nodes[].outMaps.getClass().getName() elements == DMap[].class
this.nodes[].outMaps.getClass().getName() one of { [DMap[]], [DMap[], DMap[], DMap[]] }
this.nodes[].inMaps.getClass().getName() elements == DMap[].class
this.nodes[].inMaps.getClass().getName() one of { [DMap[]], [DMap[], DMap[], DMap[]] }
this.nodes[].outcount elements are equal
this.nodes[].incount elements are equal
this.nodes[].basis.getClass().getName() elements == Tensor[].class
this.nodes[].basis.getClass().getName() one of { [Tensor[]], [Tensor[], Tensor[], Tensor[]] }
this.index one of { 1, 3 }
===========================================================================
Knot:::OBJECT
this.crossings.getClass().getName() == this.leftknot.crossings.getClass().getName()
this.crossings.getClass().getName() == this.leftknot.leftknot.crossings.getClass().getName()
this.vertices.getClass().getName() == this.leftknot.vertices.getClass().getName()
this.vertices.getClass().getName() == this.leftknot.leftknot.vertices.getClass().getName()
this.vertices[].getClass().getName() == this.leftknot.vertices[].getClass().getName()
this.vertices[].getClass().getName() == this.leftknot.leftknot.vertices[].getClass().getName()
this.leftknot.crossings.getClass().getName() == this.leftknot.leftknot.crossings.getClass().getName()
this.leftknot.crossings.getClass().getName() == this.rightknot.crossings.getClass().getName()
this.leftknot.vertices.getClass().getName() == this.leftknot.leftknot.vertices.getClass().getName()
this.leftknot.vertices.getClass().getName() == this.rightknot.vertices.getClass().getName()
this.leftknot.vertices[].getClass().getName() == this.leftknot.leftknot.vertices[].getClass().getName()
this.leftknot.leftknot.crossings.getClass().getName() == this.leftknot.rightknot.crossings.getClass().getName()
this.leftknot.leftknot.crossings.getClass().getName() == this.rightknot.leftknot.crossings.getClass().getName()
this.leftknot.leftknot.crossings.getClass().getName() == this.rightknot.rightknot.crossings.getClass().getName()
this.leftknot.leftknot.vertices.getClass().getName() == this.leftknot.rightknot.vertices.getClass().getName()
this.leftknot.leftknot.vertices.getClass().getName() == this.rightknot.leftknot.vertices.getClass().getName()
this.leftknot.leftknot.vertices.getClass().getName() == this.rightknot.rightknot.vertices.getClass().getName()
this.leftknot.smoothing.one == this.rightknot.smoothing.one
size(this.vertices[]) == size(this.leftknot.vertices[])
size(this.vertices[]) == size(this.leftknot.leftknot.vertices[])
size(this.leftknot.vertices[]) == size(this.leftknot.leftknot.vertices[])
size(this.leftknot.vertices[]) == size(this.rightknot.vertices[])
size(this.leftknot.leftknot.vertices[]) == size(this.leftknot.rightknot.vertices[])
size(this.leftknot.leftknot.vertices[]) == size(this.rightknot.leftknot.vertices[])
size(this.leftknot.leftknot.vertices[]) == size(this.rightknot.rightknot.vertices[])
this.leftknot.leftknot.vertices[this.leftknot.smoothing.two-1] == this.leftknot.leftknot.vertices[this.rightknot.smoothing.two]
this.leftknot.leftknot.vertices[this.rightknot.smoothing.two-1] == this.leftknot.leftknot.vertices[this.smoothing.one]
this.leftknot.leftknot.vertices[this.rightknot.smoothing.four-1] == this.leftknot.leftknot.vertices[this.smoothing.four]
this.leftknot.rightknot.vertices[this.leftknot.smoothing.two-1] == this.leftknot.rightknot.vertices[this.rightknot.smoothing.two]
this.leftknot.rightknot.vertices[this.rightknot.smoothing.two-1] == this.leftknot.rightknot.vertices[this.smoothing.one]
this.leftknot.rightknot.vertices[this.rightknot.smoothing.four-1] == this.leftknot.rightknot.vertices[this.smoothing.four]
this.rightknot.leftknot.vertices[this.leftknot.smoothing.two-1] == this.rightknot.leftknot.vertices[this.rightknot.smoothing.two]
this.rightknot.rightknot.vertices[this.leftknot.smoothing.two-1] == this.rightknot.rightknot.vertices[this.rightknot.smoothing.two]
this.rightknot.leftknot.vertices[this.rightknot.smoothing.two-1] == this.rightknot.leftknot.vertices[this.smoothing.one]
this.rightknot.leftknot.vertices[this.rightknot.smoothing.four-1] == this.rightknot.leftknot.vertices[this.smoothing.four]
this.rightknot.rightknot.vertices[this.rightknot.smoothing.two-1] == this.rightknot.rightknot.vertices[this.smoothing.one]
this.rightknot.rightknot.vertices[this.rightknot.smoothing.four-1] == this.rightknot.rightknot.vertices[this.smoothing.four]
this.crossings != null
this.crossings.getClass().getName() == Crossing[].class
this.crossings[] elements != null
this.crossings[].getClass().getName() elements == Crossing.class
this.crossings[].posneg elements are equal
this.vertices != null
this.vertices.getClass().getName() == Vertex[].class
this.vertices[] elements != null
this.vertices[].getClass().getName() == [Vertex, Vertex, Vertex, Vertex, Vertex, Vertex]
this.vertices[].getClass().getName() elements == Vertex.class
this.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
this.vertices[].numberOfVertex elements >= 1
this.vertices[].numberOfVertex sorted by <
this.vertices[].from elements != null
this.vertices[].from.numberOfVertex elements >= 1
this.vertices[].from.from elements != null
this.vertices[].from.to elements != null
this.vertices[].from.visited one of { [0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1] }
this.vertices[].from.visited elements are equal
this.vertices[].to elements != null
this.vertices[].to.numberOfVertex elements >= 1
this.vertices[].to.from elements != null
this.vertices[].to.to elements != null
this.vertices[].to.visited one of { [0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1] }
this.vertices[].to.visited elements are equal
this.vertices[].visited one of { [0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1] }
this.vertices[].visited elements are equal
this.binarycode != null
this.leftknot.crossings != null
this.leftknot.crossings.getClass().getName() == Crossing[].class
this.leftknot.crossings[] elements != null
this.leftknot.crossings[].getClass().getName() elements == Crossing.class
this.leftknot.crossings[].overstrand sorted by >
this.leftknot.crossings[].understrand sorted by >
this.leftknot.crossings[].posneg elements are equal
this.leftknot.vertices != null
this.leftknot.vertices.getClass().getName() == Vertex[].class
this.leftknot.vertices[] elements != null
this.leftknot.vertices[].getClass().getName() == [Vertex, Vertex, Vertex, Vertex, Vertex, Vertex]
this.leftknot.vertices[].getClass().getName() elements == Vertex.class
this.leftknot.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
this.leftknot.vertices[].numberOfVertex elements >= 1
this.leftknot.vertices[].numberOfVertex sorted by <
this.leftknot.vertices[].from elements != null
this.leftknot.vertices[].to elements != null
this.leftknot.vertices[].visited == [1, 1, 1, 1, 1, 1]
this.leftknot.vertices[].visited elements == true
this.leftknot.vertices[].visited elements != null
this.leftknot.binarycode != null
this.leftknot.leftknot.crossings != null
this.leftknot.leftknot.crossings.getClass().getName() == Crossing[].class
this.leftknot.leftknot.crossings[] elements has only one value
this.leftknot.leftknot.crossings[] elements != null
this.leftknot.leftknot.crossings[].getClass().getName() elements == Crossing.class
this.leftknot.leftknot.crossings[].getClass().getName() one of { [], [Crossing] }
this.leftknot.leftknot.crossings[].overstrand elements has only one value
this.leftknot.leftknot.crossings[].understrand elements has only one value
this.leftknot.leftknot.crossings[].posneg elements == true
this.leftknot.leftknot.crossings[].posneg one of { [], [1] }
this.leftknot.leftknot.crossings[].posneg elements != null
this.leftknot.leftknot.vertices != null
this.leftknot.leftknot.vertices.getClass().getName() == Vertex[].class
this.leftknot.leftknot.vertices[] elements != null
this.leftknot.leftknot.vertices[].getClass().getName() == [Vertex, Vertex, Vertex, Vertex, Vertex, Vertex]
this.leftknot.leftknot.vertices[].getClass().getName() elements == Vertex.class
this.leftknot.leftknot.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
this.leftknot.leftknot.vertices[].numberOfVertex elements >= 1
this.leftknot.leftknot.vertices[].numberOfVertex sorted by <
this.leftknot.leftknot.vertices[].from elements != null
this.leftknot.leftknot.vertices[].to elements != null
this.leftknot.leftknot.vertices[].visited == [1, 1, 1, 1, 1, 1]
this.leftknot.leftknot.vertices[].visited elements == true
this.leftknot.leftknot.vertices[].visited elements != null
this.leftknot.leftknot.binarycode != null
this.leftknot.leftknot.binarycode.toString one of { "00", "000", "100" }
this.leftknot.leftknot.numcircles == 0
this.leftknot.leftknot.seifertCircles != null
this.leftknot.leftknot.seifertCircles[] elements != null
this.leftknot.leftknot.seifertCircles[].getClass().getName() elements == SeifertCircle.class
this.leftknot.leftknot.seifertCircles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
this.leftknot.leftknot.smoothing != null
this.leftknot.rightknot.crossings != null
this.leftknot.rightknot.crossings[] elements has only one value
this.leftknot.rightknot.crossings[] elements != null
this.leftknot.rightknot.crossings[].getClass().getName() elements == Crossing.class
this.leftknot.rightknot.crossings[].getClass().getName() one of { [], [Crossing] }
this.leftknot.rightknot.crossings[].overstrand elements has only one value
this.leftknot.rightknot.crossings[].understrand elements has only one value
this.leftknot.rightknot.crossings[].posneg elements == false
this.leftknot.rightknot.crossings[].posneg one of { [], [0] }
this.leftknot.rightknot.vertices != null
this.leftknot.rightknot.vertices[] elements != null
this.leftknot.rightknot.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
this.leftknot.rightknot.vertices[].numberOfVertex elements >= 1
this.leftknot.rightknot.vertices[].numberOfVertex sorted by <
this.leftknot.rightknot.vertices[].from elements != null
this.leftknot.rightknot.vertices[].to elements != null
this.leftknot.rightknot.vertices[].visited == [1, 1, 1, 1, 1, 1]
this.leftknot.rightknot.vertices[].visited elements == true
this.leftknot.rightknot.vertices[].visited elements != null
this.leftknot.rightknot.binarycode != null
this.leftknot.rightknot.binarycode.toString one of { "001", "01", "101" }
this.leftknot.rightknot.numcircles == 0
this.leftknot.rightknot.seifertCircles != null
this.leftknot.rightknot.seifertCircles[] elements != null
this.leftknot.rightknot.seifertCircles[].getClass().getName() elements == SeifertCircle.class
this.leftknot.rightknot.seifertCircles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
this.leftknot.rightknot.smoothing != null
this.leftknot.numcircles == 0
this.leftknot.seifertCircles != null
this.leftknot.seifertCircles[] elements != null
this.leftknot.seifertCircles[].getClass().getName() elements == SeifertCircle.class
this.leftknot.seifertCircles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
this.leftknot.smoothing != null
this.leftknot.smoothing.three >= 2
this.rightknot.crossings != null
this.rightknot.crossings[] elements != null
this.rightknot.crossings[].getClass().getName() elements == Crossing.class
this.rightknot.crossings[].overstrand sorted by <
this.rightknot.crossings[].understrand sorted by <
this.rightknot.crossings[].posneg elements == false
this.rightknot.crossings[].posneg one of { [], [0], [0, 0] }
this.rightknot.vertices != null
this.rightknot.vertices[] elements != null
this.rightknot.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
this.rightknot.vertices[].numberOfVertex elements >= 1
this.rightknot.vertices[].numberOfVertex sorted by <
this.rightknot.vertices[].from elements != null
this.rightknot.vertices[].to elements != null
this.rightknot.vertices[].visited == [1, 1, 1, 1, 1, 1]
this.rightknot.vertices[].visited elements == true
this.rightknot.vertices[].visited elements != null
this.rightknot.binarycode != null
this.rightknot.leftknot.crossings != null
this.rightknot.leftknot.crossings[] elements has only one value
this.rightknot.leftknot.crossings[] elements != null
this.rightknot.leftknot.crossings[].getClass().getName() elements == Crossing.class
this.rightknot.leftknot.crossings[].getClass().getName() one of { [], [Crossing] }
this.rightknot.leftknot.crossings[].overstrand elements has only one value
this.rightknot.leftknot.crossings[].understrand elements has only one value
this.rightknot.leftknot.crossings[].posneg elements == false
this.rightknot.leftknot.crossings[].posneg one of { [], [0] }
this.rightknot.leftknot.vertices != null
this.rightknot.leftknot.vertices[] elements != null
this.rightknot.leftknot.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
this.rightknot.leftknot.vertices[].numberOfVertex elements >= 1
this.rightknot.leftknot.vertices[].numberOfVertex sorted by <
this.rightknot.leftknot.vertices[].from elements != null
this.rightknot.leftknot.vertices[].to elements != null
this.rightknot.leftknot.vertices[].visited == [1, 1, 1, 1, 1, 1]
this.rightknot.leftknot.vertices[].visited elements == true
this.rightknot.leftknot.vertices[].visited elements != null
this.rightknot.leftknot.binarycode != null
this.rightknot.leftknot.binarycode.toString one of { "010", "10", "110" }
this.rightknot.leftknot.numcircles == 0
this.rightknot.leftknot.seifertCircles != null
this.rightknot.leftknot.seifertCircles[] elements != null
this.rightknot.leftknot.seifertCircles[].getClass().getName() elements == SeifertCircle.class
this.rightknot.leftknot.seifertCircles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
this.rightknot.leftknot.smoothing != null
this.rightknot.rightknot.crossings != null
this.rightknot.rightknot.crossings[] elements has only one value
this.rightknot.rightknot.crossings[] elements != null
this.rightknot.rightknot.crossings[].getClass().getName() elements == Crossing.class
this.rightknot.rightknot.crossings[].getClass().getName() one of { [], [Crossing] }
this.rightknot.rightknot.crossings[].overstrand elements has only one value
this.rightknot.rightknot.crossings[].understrand elements has only one value
this.rightknot.rightknot.crossings[].posneg elements == false
this.rightknot.rightknot.crossings[].posneg one of { [], [0] }
this.rightknot.rightknot.vertices != null
this.rightknot.rightknot.vertices[] elements != null
this.rightknot.rightknot.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
this.rightknot.rightknot.vertices[].numberOfVertex elements >= 1
this.rightknot.rightknot.vertices[].numberOfVertex sorted by <
this.rightknot.rightknot.vertices[].from elements != null
this.rightknot.rightknot.vertices[].to elements != null
this.rightknot.rightknot.vertices[].visited == [1, 1, 1, 1, 1, 1]
this.rightknot.rightknot.vertices[].visited elements == true
this.rightknot.rightknot.vertices[].visited elements != null
this.rightknot.rightknot.binarycode != null
this.rightknot.rightknot.binarycode.toString one of { "011", "11", "111" }
this.rightknot.rightknot.numcircles == 0
this.rightknot.rightknot.seifertCircles != null
this.rightknot.rightknot.seifertCircles[] elements != null
this.rightknot.rightknot.seifertCircles[].getClass().getName() elements == SeifertCircle.class
this.rightknot.rightknot.seifertCircles[].getClass().getName() one of { [SeifertCircle, SeifertCircle], [SeifertCircle, SeifertCircle, SeifertCircle] }
this.rightknot.rightknot.smoothing != null
this.rightknot.numcircles == 0
this.rightknot.seifertCircles != null
this.rightknot.seifertCircles[] elements != null
this.rightknot.seifertCircles[].getClass().getName() elements == SeifertCircle.class
this.rightknot.smoothing != null
this.rightknot.smoothing.three >= 1
this.numcircles == 0
this.seifertCircles != null
this.seifertCircles[] elements != null
this.seifertCircles[].getClass().getName() elements == SeifertCircle.class
this.smoothing.two >= 1
this.smoothing.four >= 1
size(this.vertices[]) == 6
size(this.leftknot.crossings[]) one of { 0, 1, 2 }
size(this.leftknot.vertices[]) == 6
size(this.leftknot.leftknot.crossings[]) one of { 0, 1 }
size(this.leftknot.leftknot.vertices[]) == 6
size(this.leftknot.leftknot.seifertCircles[]) one of { 1, 2 }
size(this.leftknot.rightknot.crossings[]) one of { 0, 1 }
size(this.leftknot.rightknot.seifertCircles[]) one of { 1, 2 }
size(this.leftknot.seifertCircles[]) one of { 1, 2 }
size(this.rightknot.crossings[]) one of { 0, 1, 2 }
size(this.rightknot.leftknot.crossings[]) one of { 0, 1 }
size(this.rightknot.leftknot.seifertCircles[]) one of { 1, 2 }
size(this.rightknot.rightknot.crossings[]) one of { 0, 1 }
size(this.rightknot.rightknot.seifertCircles[]) one of { 2, 3 }
size(this.rightknot.seifertCircles[]) one of { 1, 2, 3 }
this.crossings.getClass().getName() != this.vertices.getClass().getName()
this.crossings.getClass().getName() != this.leftknot.vertices.getClass().getName()
this.crossings.getClass().getName() != this.leftknot.leftknot.vertices.getClass().getName()
this.vertices.getClass().getName() != this.leftknot.crossings.getClass().getName()
this.vertices.getClass().getName() != this.leftknot.leftknot.crossings.getClass().getName()
this.vertices[].getClass().getName() == this.leftknot.vertices[].getClass().getName() (elementwise)
this.vertices[].getClass().getName() == this.leftknot.leftknot.vertices[].getClass().getName() (elementwise)
this.leftknot.smoothing.one in this.vertices[].numberOfVertex
this.leftknot.smoothing.two in this.vertices[].numberOfVertex
this.leftknot.smoothing.three in this.vertices[].numberOfVertex
this.leftknot.smoothing.four in this.vertices[].numberOfVertex
this.rightknot.smoothing.two in this.vertices[].numberOfVertex
this.rightknot.smoothing.three in this.vertices[].numberOfVertex
this.rightknot.smoothing.four in this.vertices[].numberOfVertex
this.smoothing.one in this.vertices[].numberOfVertex
this.smoothing.two in this.vertices[].numberOfVertex
this.smoothing.three in this.vertices[].numberOfVertex
this.smoothing.four in this.vertices[].numberOfVertex
size(this.vertices[]) in this.vertices[].numberOfVertex
this.vertices[].numberOfVertex elements <= size(this.vertices[])
size(this.vertices[])-1 in this.vertices[].numberOfVertex
size(this.leftknot.vertices[]) in this.vertices[].numberOfVertex
this.vertices[].numberOfVertex elements <= size(this.leftknot.vertices[])
size(this.leftknot.vertices[])-1 in this.vertices[].numberOfVertex
size(this.leftknot.leftknot.vertices[]) in this.vertices[].numberOfVertex
this.vertices[].numberOfVertex elements <= size(this.leftknot.leftknot.vertices[])
size(this.leftknot.leftknot.vertices[])-1 in this.vertices[].numberOfVertex
this.vertices[this.leftknot.smoothing.one] in this.vertices[].from
this.vertices[this.leftknot.smoothing.one-1] in this.vertices[].from
this.vertices[this.leftknot.smoothing.two-1] in this.vertices[].from
this.vertices[this.leftknot.smoothing.three-1] in this.vertices[].from
this.vertices[this.leftknot.smoothing.four-1] in this.vertices[].from
this.vertices[this.rightknot.smoothing.two-1] in this.vertices[].from
this.vertices[this.rightknot.smoothing.three-1] in this.vertices[].from
this.vertices[this.rightknot.smoothing.four-1] in this.vertices[].from
this.vertices[this.smoothing.one] in this.vertices[].from
this.vertices[this.smoothing.one-1] in this.vertices[].from
this.vertices[this.smoothing.two-1] in this.vertices[].from
this.vertices[this.smoothing.three-1] in this.vertices[].from
this.vertices[this.smoothing.four-1] in this.vertices[].from
this.leftknot.smoothing.one in this.vertices[].from.numberOfVertex
this.leftknot.smoothing.two in this.vertices[].from.numberOfVertex
this.leftknot.smoothing.three in this.vertices[].from.numberOfVertex
this.leftknot.smoothing.four in this.vertices[].from.numberOfVertex
this.rightknot.smoothing.two in this.vertices[].from.numberOfVertex
this.rightknot.smoothing.three in this.vertices[].from.numberOfVertex
this.rightknot.smoothing.four in this.vertices[].from.numberOfVertex
this.smoothing.one in this.vertices[].from.numberOfVertex
this.smoothing.two in this.vertices[].from.numberOfVertex
this.smoothing.three in this.vertices[].from.numberOfVertex
this.smoothing.four in this.vertices[].from.numberOfVertex
size(this.vertices[]) in this.vertices[].from.numberOfVertex
this.vertices[].from.numberOfVertex elements <= size(this.vertices[])
size(this.vertices[])-1 in this.vertices[].from.numberOfVertex
size(this.leftknot.vertices[]) in this.vertices[].from.numberOfVertex
this.vertices[].from.numberOfVertex elements <= size(this.leftknot.vertices[])
size(this.leftknot.vertices[])-1 in this.vertices[].from.numberOfVertex
size(this.leftknot.leftknot.vertices[]) in this.vertices[].from.numberOfVertex
this.vertices[].from.numberOfVertex elements <= size(this.leftknot.leftknot.vertices[])
size(this.leftknot.leftknot.vertices[])-1 in this.vertices[].from.numberOfVertex
this.vertices[this.leftknot.smoothing.one] in this.vertices[].from.from
this.vertices[this.leftknot.smoothing.one-1] in this.vertices[].from.from
this.vertices[this.leftknot.smoothing.two-1] in this.vertices[].from.from
this.vertices[this.leftknot.smoothing.three-1] in this.vertices[].from.from
this.vertices[this.leftknot.smoothing.four-1] in this.vertices[].from.from
this.vertices[this.rightknot.smoothing.two-1] in this.vertices[].from.from
this.vertices[this.rightknot.smoothing.three-1] in this.vertices[].from.from
this.vertices[this.rightknot.smoothing.four-1] in this.vertices[].from.from
this.vertices[this.smoothing.one] in this.vertices[].from.from
this.vertices[this.smoothing.one-1] in this.vertices[].from.from
this.vertices[this.smoothing.two-1] in this.vertices[].from.from
this.vertices[this.smoothing.three-1] in this.vertices[].from.from
this.vertices[this.smoothing.four-1] in this.vertices[].from.from
this.vertices[this.leftknot.smoothing.one] in this.vertices[].from.to
this.vertices[this.leftknot.smoothing.one-1] in this.vertices[].from.to
this.vertices[this.leftknot.smoothing.two-1] in this.vertices[].from.to
this.vertices[this.leftknot.smoothing.three-1] in this.vertices[].from.to
this.vertices[this.leftknot.smoothing.four-1] in this.vertices[].from.to
this.vertices[this.rightknot.smoothing.two-1] in this.vertices[].from.to
this.vertices[this.rightknot.smoothing.three-1] in this.vertices[].from.to
this.vertices[this.rightknot.smoothing.four-1] in this.vertices[].from.to
this.vertices[this.smoothing.one] in this.vertices[].from.to
this.vertices[this.smoothing.one-1] in this.vertices[].from.to
this.vertices[this.smoothing.two-1] in this.vertices[].from.to
this.vertices[this.smoothing.three-1] in this.vertices[].from.to
this.vertices[this.smoothing.four-1] in this.vertices[].from.to
this.vertices[this.leftknot.smoothing.one] in this.vertices[].to
this.vertices[this.leftknot.smoothing.one-1] in this.vertices[].to
this.vertices[this.leftknot.smoothing.two-1] in this.vertices[].to
this.vertices[this.leftknot.smoothing.three-1] in this.vertices[].to
this.vertices[this.leftknot.smoothing.four-1] in this.vertices[].to
this.vertices[this.rightknot.smoothing.two-1] in this.vertices[].to
this.vertices[this.rightknot.smoothing.three-1] in this.vertices[].to
this.vertices[this.rightknot.smoothing.four-1] in this.vertices[].to
this.vertices[this.smoothing.one] in this.vertices[].to
this.vertices[this.smoothing.one-1] in this.vertices[].to
this.vertices[this.smoothing.two-1] in this.vertices[].to
this.vertices[this.smoothing.three-1] in this.vertices[].to
this.vertices[this.smoothing.four-1] in this.vertices[].to
this.leftknot.smoothing.one in this.vertices[].to.numberOfVertex
this.leftknot.smoothing.two in this.vertices[].to.numberOfVertex
this.leftknot.smoothing.three in this.vertices[].to.numberOfVertex
this.leftknot.smoothing.four in this.vertices[].to.numberOfVertex
this.rightknot.smoothing.two in this.vertices[].to.numberOfVertex
this.rightknot.smoothing.three in this.vertices[].to.numberOfVertex
this.rightknot.smoothing.four in this.vertices[].to.numberOfVertex
this.smoothing.one in this.vertices[].to.numberOfVertex
this.smoothing.two in this.vertices[].to.numberOfVertex
this.smoothing.three in this.vertices[].to.numberOfVertex
this.smoothing.four in this.vertices[].to.numberOfVertex
size(this.vertices[]) in this.vertices[].to.numberOfVertex
this.vertices[].to.numberOfVertex elements <= size(this.vertices[])
size(this.vertices[])-1 in this.vertices[].to.numberOfVertex
size(this.leftknot.vertices[]) in this.vertices[].to.numberOfVertex
this.vertices[].to.numberOfVertex elements <= size(this.leftknot.vertices[])
size(this.leftknot.vertices[])-1 in this.vertices[].to.numberOfVertex
size(this.leftknot.leftknot.vertices[]) in this.vertices[].to.numberOfVertex
this.vertices[].to.numberOfVertex elements <= size(this.leftknot.leftknot.vertices[])
size(this.leftknot.leftknot.vertices[])-1 in this.vertices[].to.numberOfVertex
this.vertices[this.leftknot.smoothing.one] in this.vertices[].to.from
this.vertices[this.leftknot.smoothing.one-1] in this.vertices[].to.from
this.vertices[this.leftknot.smoothing.two-1] in this.vertices[].to.from
this.vertices[this.leftknot.smoothing.three-1] in this.vertices[].to.from
this.vertices[this.leftknot.smoothing.four-1] in this.vertices[].to.from
this.vertices[this.rightknot.smoothing.two-1] in this.vertices[].to.from
this.vertices[this.rightknot.smoothing.three-1] in this.vertices[].to.from
this.vertices[this.rightknot.smoothing.four-1] in this.vertices[].to.from
this.vertices[this.smoothing.one] in this.vertices[].to.from
this.vertices[this.smoothing.one-1] in this.vertices[].to.from
this.vertices[this.smoothing.two-1] in this.vertices[].to.from
this.vertices[this.smoothing.three-1] in this.vertices[].to.from
this.vertices[this.smoothing.four-1] in this.vertices[].to.from
this.vertices[this.leftknot.smoothing.one] in this.vertices[].to.to
this.vertices[this.leftknot.smoothing.one-1] in this.vertices[].to.to
this.vertices[this.leftknot.smoothing.two-1] in this.vertices[].to.to
this.vertices[this.leftknot.smoothing.three-1] in this.vertices[].to.to
this.vertices[this.leftknot.smoothing.four-1] in this.vertices[].to.to
this.vertices[this.rightknot.smoothing.two-1] in this.vertices[].to.to
this.vertices[this.rightknot.smoothing.three-1] in this.vertices[].to.to
this.vertices[this.rightknot.smoothing.four-1] in this.vertices[].to.to
this.vertices[this.smoothing.one] in this.vertices[].to.to
this.vertices[this.smoothing.one-1] in this.vertices[].to.to
this.vertices[this.smoothing.two-1] in this.vertices[].to.to
this.vertices[this.smoothing.three-1] in this.vertices[].to.to
this.vertices[this.smoothing.four-1] in this.vertices[].to.to
this.leftknot.crossings.getClass().getName() != this.leftknot.vertices.getClass().getName()
this.leftknot.crossings.getClass().getName() != this.leftknot.leftknot.vertices.getClass().getName()
this.leftknot.vertices.getClass().getName() != this.leftknot.leftknot.crossings.getClass().getName()
this.leftknot.vertices[].getClass().getName() == this.leftknot.leftknot.vertices[].getClass().getName() (elementwise)
this.leftknot.smoothing.one in this.leftknot.vertices[].numberOfVertex
this.leftknot.smoothing.two in this.leftknot.vertices[].numberOfVertex
this.leftknot.smoothing.three in this.leftknot.vertices[].numberOfVertex
this.leftknot.smoothing.four in this.leftknot.vertices[].numberOfVertex
this.rightknot.smoothing.two in this.leftknot.vertices[].numberOfVertex
this.rightknot.smoothing.three in this.leftknot.vertices[].numberOfVertex
this.rightknot.smoothing.four in this.leftknot.vertices[].numberOfVertex
this.smoothing.one in this.leftknot.vertices[].numberOfVertex
this.smoothing.two in this.leftknot.vertices[].numberOfVertex
this.smoothing.three in this.leftknot.vertices[].numberOfVertex
this.smoothing.four in this.leftknot.vertices[].numberOfVertex
size(this.vertices[]) in this.leftknot.vertices[].numberOfVertex
this.leftknot.vertices[].numberOfVertex elements <= size(this.vertices[])
size(this.vertices[])-1 in this.leftknot.vertices[].numberOfVertex
size(this.leftknot.vertices[]) in this.leftknot.vertices[].numberOfVertex
this.leftknot.vertices[].numberOfVertex elements <= size(this.leftknot.vertices[])
size(this.leftknot.vertices[])-1 in this.leftknot.vertices[].numberOfVertex
size(this.leftknot.leftknot.vertices[]) in this.leftknot.vertices[].numberOfVertex
this.leftknot.vertices[].numberOfVertex elements <= size(this.leftknot.leftknot.vertices[])
size(this.leftknot.leftknot.vertices[])-1 in this.leftknot.vertices[].numberOfVertex
this.leftknot.vertices[this.leftknot.smoothing.one] in this.leftknot.vertices[].from
this.leftknot.vertices[this.leftknot.smoothing.one-1] in this.leftknot.vertices[].from
this.leftknot.vertices[this.leftknot.smoothing.two-1] in this.leftknot.vertices[].from
this.leftknot.vertices[this.leftknot.smoothing.three-1] in this.leftknot.vertices[].from
this.leftknot.vertices[this.leftknot.smoothing.four-1] in this.leftknot.vertices[].from
this.leftknot.vertices[this.rightknot.smoothing.two-1] in this.leftknot.vertices[].from
this.leftknot.vertices[this.rightknot.smoothing.three-1] in this.leftknot.vertices[].from
this.leftknot.vertices[this.rightknot.smoothing.four-1] in this.leftknot.vertices[].from
this.leftknot.vertices[this.smoothing.one] in this.leftknot.vertices[].from
this.leftknot.vertices[this.smoothing.one-1] in this.leftknot.vertices[].from
this.leftknot.vertices[this.smoothing.two] in this.leftknot.vertices[].from
this.leftknot.vertices[this.smoothing.two-1] in this.leftknot.vertices[].from
this.leftknot.vertices[this.smoothing.three-1] in this.leftknot.vertices[].from
this.leftknot.vertices[this.smoothing.four-1] in this.leftknot.vertices[].from
this.leftknot.vertices[this.leftknot.smoothing.one] in this.leftknot.vertices[].to
this.leftknot.vertices[this.leftknot.smoothing.one-1] in this.leftknot.vertices[].to
this.leftknot.vertices[this.leftknot.smoothing.two-1] in this.leftknot.vertices[].to
this.leftknot.vertices[this.leftknot.smoothing.three-1] in this.leftknot.vertices[].to
this.leftknot.vertices[this.leftknot.smoothing.four-1] in this.leftknot.vertices[].to
this.leftknot.vertices[this.rightknot.smoothing.two-1] in this.leftknot.vertices[].to
this.leftknot.vertices[this.rightknot.smoothing.three-1] in this.leftknot.vertices[].to
this.leftknot.vertices[this.rightknot.smoothing.four-1] in this.leftknot.vertices[].to
this.leftknot.vertices[this.smoothing.one] in this.leftknot.vertices[].to
this.leftknot.vertices[this.smoothing.one-1] in this.leftknot.vertices[].to
this.leftknot.vertices[this.smoothing.two] in this.leftknot.vertices[].to
this.leftknot.vertices[this.smoothing.two-1] in this.leftknot.vertices[].to
this.leftknot.vertices[this.smoothing.three-1] in this.leftknot.vertices[].to
this.leftknot.vertices[this.smoothing.four-1] in this.leftknot.vertices[].to
this.leftknot.leftknot.crossings.getClass().getName() != this.leftknot.leftknot.vertices.getClass().getName()
this.leftknot.smoothing.one in this.leftknot.leftknot.vertices[].numberOfVertex
this.leftknot.smoothing.two in this.leftknot.leftknot.vertices[].numberOfVertex
this.leftknot.smoothing.three in this.leftknot.leftknot.vertices[].numberOfVertex
this.leftknot.smoothing.four in this.leftknot.leftknot.vertices[].numberOfVertex
this.rightknot.smoothing.two in this.leftknot.leftknot.vertices[].numberOfVertex
this.rightknot.smoothing.three in this.leftknot.leftknot.vertices[].numberOfVertex
this.rightknot.smoothing.four in this.leftknot.leftknot.vertices[].numberOfVertex
this.leftknot.leftknot.vertices[].numberOfVertex elements >= this.smoothing.one
this.smoothing.one in this.leftknot.leftknot.vertices[].numberOfVertex
this.smoothing.two in this.leftknot.leftknot.vertices[].numberOfVertex
this.smoothing.three in this.leftknot.leftknot.vertices[].numberOfVertex
this.smoothing.four in this.leftknot.leftknot.vertices[].numberOfVertex
size(this.vertices[]) in this.leftknot.leftknot.vertices[].numberOfVertex
this.leftknot.leftknot.vertices[].numberOfVertex elements <= size(this.vertices[])
size(this.vertices[])-1 in this.leftknot.leftknot.vertices[].numberOfVertex
size(this.leftknot.vertices[]) in this.leftknot.leftknot.vertices[].numberOfVertex
this.leftknot.leftknot.vertices[].numberOfVertex elements <= size(this.leftknot.vertices[])
size(this.leftknot.vertices[])-1 in this.leftknot.leftknot.vertices[].numberOfVertex
size(this.leftknot.leftknot.vertices[]) in this.leftknot.leftknot.vertices[].numberOfVertex
this.leftknot.leftknot.vertices[].numberOfVertex elements <= size(this.leftknot.leftknot.vertices[])
size(this.leftknot.leftknot.vertices[])-1 in this.leftknot.leftknot.vertices[].numberOfVertex
this.leftknot.leftknot.vertices[this.leftknot.smoothing.one] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[this.leftknot.smoothing.one-1] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[this.leftknot.smoothing.two] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[this.leftknot.smoothing.three-1] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[this.leftknot.smoothing.four-1] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[this.rightknot.smoothing.two] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[this.rightknot.smoothing.two-1] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[this.rightknot.smoothing.three-1] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[this.rightknot.smoothing.four-1] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[this.smoothing.one] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[this.smoothing.one-1] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[this.smoothing.two] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[this.smoothing.two-1] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[this.smoothing.three] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[this.smoothing.three-1] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[this.smoothing.four] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[this.smoothing.four-1] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[this.leftknot.smoothing.one] in this.leftknot.leftknot.vertices[].to
this.leftknot.leftknot.vertices[this.leftknot.smoothing.one-1] in this.leftknot.leftknot.vertices[].to
this.leftknot.leftknot.vertices[this.leftknot.smoothing.two] in this.leftknot.leftknot.vertices[].to
this.leftknot.leftknot.vertices[this.leftknot.smoothing.three-1] in this.leftknot.leftknot.vertices[].to
this.leftknot.leftknot.vertices[this.leftknot.smoothing.four-1] in this.leftknot.leftknot.vertices[].to
this.leftknot.leftknot.vertices[this.rightknot.smoothing.two] in this.leftknot.leftknot.vertices[].to
this.leftknot.leftknot.vertices[this.rightknot.smoothing.two-1] in this.leftknot.leftknot.vertices[].to
this.leftknot.leftknot.vertices[this.rightknot.smoothing.three-1] in this.leftknot.leftknot.vertices[].to
this.leftknot.leftknot.vertices[this.rightknot.smoothing.four-1] in this.leftknot.leftknot.vertices[].to
this.leftknot.leftknot.vertices[this.smoothing.one] in this.leftknot.leftknot.vertices[].to
this.leftknot.leftknot.vertices[this.smoothing.one-1] in this.leftknot.leftknot.vertices[].to
this.leftknot.leftknot.vertices[this.smoothing.two] in this.leftknot.leftknot.vertices[].to
this.leftknot.leftknot.vertices[this.smoothing.two-1] in this.leftknot.leftknot.vertices[].to
this.leftknot.leftknot.vertices[this.smoothing.three] in this.leftknot.leftknot.vertices[].to
this.leftknot.leftknot.vertices[this.smoothing.three-1] in this.leftknot.leftknot.vertices[].to
this.leftknot.leftknot.vertices[this.smoothing.four] in this.leftknot.leftknot.vertices[].to
this.leftknot.leftknot.vertices[this.smoothing.four-1] in this.leftknot.leftknot.vertices[].to
this.leftknot.smoothing.one in this.leftknot.rightknot.vertices[].numberOfVertex
this.leftknot.smoothing.two in this.leftknot.rightknot.vertices[].numberOfVertex
this.leftknot.smoothing.three in this.leftknot.rightknot.vertices[].numberOfVertex
this.leftknot.smoothing.four in this.leftknot.rightknot.vertices[].numberOfVertex
this.rightknot.smoothing.two in this.leftknot.rightknot.vertices[].numberOfVertex
this.rightknot.smoothing.three in this.leftknot.rightknot.vertices[].numberOfVertex
this.rightknot.smoothing.four in this.leftknot.rightknot.vertices[].numberOfVertex
this.leftknot.rightknot.vertices[].numberOfVertex elements >= this.smoothing.one
this.smoothing.one in this.leftknot.rightknot.vertices[].numberOfVertex
this.smoothing.two in this.leftknot.rightknot.vertices[].numberOfVertex
this.smoothing.three in this.leftknot.rightknot.vertices[].numberOfVertex
this.smoothing.four in this.leftknot.rightknot.vertices[].numberOfVertex
size(this.vertices[]) in this.leftknot.rightknot.vertices[].numberOfVertex
this.leftknot.rightknot.vertices[].numberOfVertex elements <= size(this.vertices[])
size(this.vertices[])-1 in this.leftknot.rightknot.vertices[].numberOfVertex
size(this.leftknot.vertices[]) in this.leftknot.rightknot.vertices[].numberOfVertex
this.leftknot.rightknot.vertices[].numberOfVertex elements <= size(this.leftknot.vertices[])
size(this.leftknot.vertices[])-1 in this.leftknot.rightknot.vertices[].numberOfVertex
size(this.leftknot.leftknot.vertices[]) in this.leftknot.rightknot.vertices[].numberOfVertex
this.leftknot.rightknot.vertices[].numberOfVertex elements <= size(this.leftknot.leftknot.vertices[])
size(this.leftknot.leftknot.vertices[])-1 in this.leftknot.rightknot.vertices[].numberOfVertex
this.leftknot.rightknot.vertices[this.leftknot.smoothing.one] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[this.leftknot.smoothing.one-1] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[this.leftknot.smoothing.two] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[this.leftknot.smoothing.three-1] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[this.leftknot.smoothing.four-1] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[this.rightknot.smoothing.two] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[this.rightknot.smoothing.two-1] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[this.rightknot.smoothing.three-1] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[this.rightknot.smoothing.four-1] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[this.smoothing.one] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[this.smoothing.one-1] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[this.smoothing.two] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[this.smoothing.two-1] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[this.smoothing.three] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[this.smoothing.three-1] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[this.smoothing.four] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[this.smoothing.four-1] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[this.leftknot.smoothing.one] in this.leftknot.rightknot.vertices[].to
this.leftknot.rightknot.vertices[this.leftknot.smoothing.one-1] in this.leftknot.rightknot.vertices[].to
this.leftknot.rightknot.vertices[this.leftknot.smoothing.two] in this.leftknot.rightknot.vertices[].to
this.leftknot.rightknot.vertices[this.leftknot.smoothing.three-1] in this.leftknot.rightknot.vertices[].to
this.leftknot.rightknot.vertices[this.leftknot.smoothing.four-1] in this.leftknot.rightknot.vertices[].to
this.leftknot.rightknot.vertices[this.rightknot.smoothing.two] in this.leftknot.rightknot.vertices[].to
this.leftknot.rightknot.vertices[this.rightknot.smoothing.two-1] in this.leftknot.rightknot.vertices[].to
this.leftknot.rightknot.vertices[this.rightknot.smoothing.three-1] in this.leftknot.rightknot.vertices[].to
this.leftknot.rightknot.vertices[this.rightknot.smoothing.four-1] in this.leftknot.rightknot.vertices[].to
this.leftknot.rightknot.vertices[this.smoothing.one] in this.leftknot.rightknot.vertices[].to
this.leftknot.rightknot.vertices[this.smoothing.one-1] in this.leftknot.rightknot.vertices[].to
this.leftknot.rightknot.vertices[this.smoothing.two] in this.leftknot.rightknot.vertices[].to
this.leftknot.rightknot.vertices[this.smoothing.two-1] in this.leftknot.rightknot.vertices[].to
this.leftknot.rightknot.vertices[this.smoothing.three] in this.leftknot.rightknot.vertices[].to
this.leftknot.rightknot.vertices[this.smoothing.three-1] in this.leftknot.rightknot.vertices[].to
this.leftknot.rightknot.vertices[this.smoothing.four] in this.leftknot.rightknot.vertices[].to
this.leftknot.rightknot.vertices[this.smoothing.four-1] in this.leftknot.rightknot.vertices[].to
this.leftknot.smoothing.one != this.leftknot.smoothing.two
this.leftknot.smoothing.one != this.leftknot.smoothing.three
this.leftknot.smoothing.one != this.leftknot.smoothing.four
this.leftknot.smoothing.one in this.rightknot.vertices[].numberOfVertex
this.leftknot.smoothing.one in this.rightknot.leftknot.vertices[].numberOfVertex
this.leftknot.smoothing.one in this.rightknot.rightknot.vertices[].numberOfVertex
this.leftknot.smoothing.one != this.rightknot.smoothing.two
this.leftknot.smoothing.one != this.rightknot.smoothing.three
this.leftknot.smoothing.one != this.rightknot.smoothing.four
this.leftknot.smoothing.one != this.smoothing.one
this.leftknot.smoothing.one >= this.smoothing.two
this.leftknot.smoothing.one != this.smoothing.three
this.leftknot.smoothing.one <= size(this.vertices[])-1
this.leftknot.smoothing.one <= size(this.leftknot.vertices[])-1
this.leftknot.smoothing.one <= size(this.leftknot.leftknot.vertices[])-1
this.leftknot.smoothing.two != this.leftknot.smoothing.three
this.leftknot.smoothing.two != this.leftknot.smoothing.four
this.leftknot.smoothing.two in this.rightknot.vertices[].numberOfVertex
this.leftknot.smoothing.two in this.rightknot.leftknot.vertices[].numberOfVertex
this.leftknot.smoothing.two in this.rightknot.rightknot.vertices[].numberOfVertex
this.leftknot.smoothing.two != this.rightknot.smoothing.two
this.leftknot.smoothing.two != this.smoothing.one
this.leftknot.smoothing.two != this.smoothing.two
this.leftknot.smoothing.two <= size(this.vertices[])
this.leftknot.smoothing.two <= size(this.leftknot.vertices[])
this.leftknot.smoothing.two <= size(this.leftknot.leftknot.vertices[])-1
this.leftknot.smoothing.three != this.leftknot.smoothing.four
this.leftknot.smoothing.three in this.rightknot.vertices[].numberOfVertex
this.leftknot.smoothing.three in this.rightknot.leftknot.vertices[].numberOfVertex
this.leftknot.smoothing.three in this.rightknot.rightknot.vertices[].numberOfVertex
this.leftknot.smoothing.three != this.rightknot.smoothing.three
this.leftknot.smoothing.three != this.smoothing.one
this.leftknot.smoothing.three != this.smoothing.two
this.leftknot.smoothing.three <= size(this.vertices[])
this.leftknot.smoothing.three != size(this.vertices[])-1
this.leftknot.smoothing.three <= size(this.leftknot.vertices[])
this.leftknot.smoothing.three != size(this.leftknot.vertices[])-1
this.leftknot.smoothing.three <= size(this.leftknot.leftknot.vertices[])
this.leftknot.smoothing.three != size(this.leftknot.leftknot.vertices[])-1
this.leftknot.smoothing.four in this.rightknot.vertices[].numberOfVertex
this.leftknot.smoothing.four in this.rightknot.leftknot.vertices[].numberOfVertex
this.leftknot.smoothing.four in this.rightknot.rightknot.vertices[].numberOfVertex
this.leftknot.smoothing.four != this.rightknot.smoothing.four
this.leftknot.smoothing.four != this.smoothing.one
this.leftknot.smoothing.four != this.smoothing.two
this.leftknot.smoothing.four != this.smoothing.four
this.leftknot.smoothing.four <= size(this.vertices[])
this.leftknot.smoothing.four != size(this.vertices[])-1
this.leftknot.smoothing.four <= size(this.leftknot.vertices[])
this.leftknot.smoothing.four != size(this.leftknot.vertices[])-1
this.leftknot.smoothing.four <= size(this.leftknot.leftknot.vertices[])
this.leftknot.smoothing.four != size(this.leftknot.leftknot.vertices[])-1
this.rightknot.smoothing.two in this.rightknot.vertices[].numberOfVertex
this.rightknot.smoothing.three in this.rightknot.vertices[].numberOfVertex
this.rightknot.smoothing.four in this.rightknot.vertices[].numberOfVertex
this.smoothing.one in this.rightknot.vertices[].numberOfVertex
this.smoothing.two in this.rightknot.vertices[].numberOfVertex
this.smoothing.three in this.rightknot.vertices[].numberOfVertex
this.smoothing.four in this.rightknot.vertices[].numberOfVertex
size(this.vertices[]) in this.rightknot.vertices[].numberOfVertex
this.rightknot.vertices[].numberOfVertex elements <= size(this.vertices[])
size(this.vertices[])-1 in this.rightknot.vertices[].numberOfVertex
size(this.leftknot.vertices[]) in this.rightknot.vertices[].numberOfVertex
this.rightknot.vertices[].numberOfVertex elements <= size(this.leftknot.vertices[])
size(this.leftknot.vertices[])-1 in this.rightknot.vertices[].numberOfVertex
size(this.leftknot.leftknot.vertices[]) in this.rightknot.vertices[].numberOfVertex
this.rightknot.vertices[].numberOfVertex elements <= size(this.leftknot.leftknot.vertices[])
size(this.leftknot.leftknot.vertices[])-1 in this.rightknot.vertices[].numberOfVertex
this.rightknot.vertices[this.leftknot.smoothing.one] in this.rightknot.vertices[].from
this.rightknot.vertices[this.leftknot.smoothing.one-1] in this.rightknot.vertices[].from
this.rightknot.vertices[this.leftknot.smoothing.two-1] in this.rightknot.vertices[].from
this.rightknot.vertices[this.leftknot.smoothing.three-1] in this.rightknot.vertices[].from
this.rightknot.vertices[this.leftknot.smoothing.four-1] in this.rightknot.vertices[].from
this.rightknot.vertices[this.rightknot.smoothing.two-1] in this.rightknot.vertices[].from
this.rightknot.vertices[this.rightknot.smoothing.three-1] in this.rightknot.vertices[].from
this.rightknot.vertices[this.rightknot.smoothing.four-1] in this.rightknot.vertices[].from
this.rightknot.vertices[this.smoothing.one] in this.rightknot.vertices[].from
this.rightknot.vertices[this.smoothing.one-1] in this.rightknot.vertices[].from
this.rightknot.vertices[this.smoothing.two] in this.rightknot.vertices[].from
this.rightknot.vertices[this.smoothing.two-1] in this.rightknot.vertices[].from
this.rightknot.vertices[this.smoothing.three-1] in this.rightknot.vertices[].from
this.rightknot.vertices[this.smoothing.four-1] in this.rightknot.vertices[].from
this.rightknot.vertices[this.leftknot.smoothing.one] in this.rightknot.vertices[].to
this.rightknot.vertices[this.leftknot.smoothing.one-1] in this.rightknot.vertices[].to
this.rightknot.vertices[this.leftknot.smoothing.two-1] in this.rightknot.vertices[].to
this.rightknot.vertices[this.leftknot.smoothing.three-1] in this.rightknot.vertices[].to
this.rightknot.vertices[this.leftknot.smoothing.four-1] in this.rightknot.vertices[].to
this.rightknot.vertices[this.rightknot.smoothing.two-1] in this.rightknot.vertices[].to
this.rightknot.vertices[this.rightknot.smoothing.three-1] in this.rightknot.vertices[].to
this.rightknot.vertices[this.rightknot.smoothing.four-1] in this.rightknot.vertices[].to
this.rightknot.vertices[this.smoothing.one] in this.rightknot.vertices[].to
this.rightknot.vertices[this.smoothing.one-1] in this.rightknot.vertices[].to
this.rightknot.vertices[this.smoothing.two] in this.rightknot.vertices[].to
this.rightknot.vertices[this.smoothing.two-1] in this.rightknot.vertices[].to
this.rightknot.vertices[this.smoothing.three-1] in this.rightknot.vertices[].to
this.rightknot.vertices[this.smoothing.four-1] in this.rightknot.vertices[].to
this.rightknot.smoothing.two in this.rightknot.leftknot.vertices[].numberOfVertex
this.rightknot.smoothing.three in this.rightknot.leftknot.vertices[].numberOfVertex
this.rightknot.smoothing.four in this.rightknot.leftknot.vertices[].numberOfVertex
this.rightknot.leftknot.vertices[].numberOfVertex elements >= this.smoothing.one
this.smoothing.one in this.rightknot.leftknot.vertices[].numberOfVertex
this.smoothing.two in this.rightknot.leftknot.vertices[].numberOfVertex
this.smoothing.three in this.rightknot.leftknot.vertices[].numberOfVertex
this.smoothing.four in this.rightknot.leftknot.vertices[].numberOfVertex
size(this.vertices[]) in this.rightknot.leftknot.vertices[].numberOfVertex
this.rightknot.leftknot.vertices[].numberOfVertex elements <= size(this.vertices[])
size(this.vertices[])-1 in this.rightknot.leftknot.vertices[].numberOfVertex
size(this.leftknot.vertices[]) in this.rightknot.leftknot.vertices[].numberOfVertex
this.rightknot.leftknot.vertices[].numberOfVertex elements <= size(this.leftknot.vertices[])
size(this.leftknot.vertices[])-1 in this.rightknot.leftknot.vertices[].numberOfVertex
size(this.leftknot.leftknot.vertices[]) in this.rightknot.leftknot.vertices[].numberOfVertex
this.rightknot.leftknot.vertices[].numberOfVertex elements <= size(this.leftknot.leftknot.vertices[])
size(this.leftknot.leftknot.vertices[])-1 in this.rightknot.leftknot.vertices[].numberOfVertex
this.rightknot.leftknot.vertices[this.leftknot.smoothing.one] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[this.leftknot.smoothing.one-1] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[this.leftknot.smoothing.two] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[this.leftknot.smoothing.three-1] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[this.leftknot.smoothing.four-1] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[this.rightknot.smoothing.two] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[this.rightknot.smoothing.two-1] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[this.rightknot.smoothing.three-1] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[this.rightknot.smoothing.four-1] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[this.smoothing.one] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[this.smoothing.one-1] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[this.smoothing.two] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[this.smoothing.two-1] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[this.smoothing.three] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[this.smoothing.three-1] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[this.smoothing.four] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[this.smoothing.four-1] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[this.leftknot.smoothing.one] in this.rightknot.leftknot.vertices[].to
this.rightknot.leftknot.vertices[this.leftknot.smoothing.one-1] in this.rightknot.leftknot.vertices[].to
this.rightknot.leftknot.vertices[this.leftknot.smoothing.two] in this.rightknot.leftknot.vertices[].to
this.rightknot.leftknot.vertices[this.leftknot.smoothing.three-1] in this.rightknot.leftknot.vertices[].to
this.rightknot.leftknot.vertices[this.leftknot.smoothing.four-1] in this.rightknot.leftknot.vertices[].to
this.rightknot.leftknot.vertices[this.rightknot.smoothing.two] in this.rightknot.leftknot.vertices[].to
this.rightknot.leftknot.vertices[this.rightknot.smoothing.two-1] in this.rightknot.leftknot.vertices[].to
this.rightknot.leftknot.vertices[this.rightknot.smoothing.three-1] in this.rightknot.leftknot.vertices[].to
this.rightknot.leftknot.vertices[this.rightknot.smoothing.four-1] in this.rightknot.leftknot.vertices[].to
this.rightknot.leftknot.vertices[this.smoothing.one] in this.rightknot.leftknot.vertices[].to
this.rightknot.leftknot.vertices[this.smoothing.one-1] in this.rightknot.leftknot.vertices[].to
this.rightknot.leftknot.vertices[this.smoothing.two] in this.rightknot.leftknot.vertices[].to
this.rightknot.leftknot.vertices[this.smoothing.two-1] in this.rightknot.leftknot.vertices[].to
this.rightknot.leftknot.vertices[this.smoothing.three] in this.rightknot.leftknot.vertices[].to
this.rightknot.leftknot.vertices[this.smoothing.three-1] in this.rightknot.leftknot.vertices[].to
this.rightknot.leftknot.vertices[this.smoothing.four] in this.rightknot.leftknot.vertices[].to
this.rightknot.leftknot.vertices[this.smoothing.four-1] in this.rightknot.leftknot.vertices[].to
this.rightknot.smoothing.two in this.rightknot.rightknot.vertices[].numberOfVertex
this.rightknot.smoothing.three in this.rightknot.rightknot.vertices[].numberOfVertex
this.rightknot.smoothing.four in this.rightknot.rightknot.vertices[].numberOfVertex
this.rightknot.rightknot.vertices[].numberOfVertex elements >= this.smoothing.one
this.smoothing.one in this.rightknot.rightknot.vertices[].numberOfVertex
this.smoothing.two in this.rightknot.rightknot.vertices[].numberOfVertex
this.smoothing.three in this.rightknot.rightknot.vertices[].numberOfVertex
this.smoothing.four in this.rightknot.rightknot.vertices[].numberOfVertex
size(this.vertices[]) in this.rightknot.rightknot.vertices[].numberOfVertex
this.rightknot.rightknot.vertices[].numberOfVertex elements <= size(this.vertices[])
size(this.vertices[])-1 in this.rightknot.rightknot.vertices[].numberOfVertex
size(this.leftknot.vertices[]) in this.rightknot.rightknot.vertices[].numberOfVertex
this.rightknot.rightknot.vertices[].numberOfVertex elements <= size(this.leftknot.vertices[])
size(this.leftknot.vertices[])-1 in this.rightknot.rightknot.vertices[].numberOfVertex
size(this.leftknot.leftknot.vertices[]) in this.rightknot.rightknot.vertices[].numberOfVertex
this.rightknot.rightknot.vertices[].numberOfVertex elements <= size(this.leftknot.leftknot.vertices[])
size(this.leftknot.leftknot.vertices[])-1 in this.rightknot.rightknot.vertices[].numberOfVertex
this.rightknot.rightknot.vertices[this.leftknot.smoothing.one] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[this.leftknot.smoothing.one-1] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[this.leftknot.smoothing.two] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[this.leftknot.smoothing.three-1] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[this.leftknot.smoothing.four-1] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[this.rightknot.smoothing.two] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[this.rightknot.smoothing.two-1] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[this.rightknot.smoothing.three-1] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[this.rightknot.smoothing.four-1] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[this.smoothing.one] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[this.smoothing.one-1] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[this.smoothing.two] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[this.smoothing.two-1] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[this.smoothing.three] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[this.smoothing.three-1] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[this.smoothing.four] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[this.smoothing.four-1] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[this.leftknot.smoothing.one] in this.rightknot.rightknot.vertices[].to
this.rightknot.rightknot.vertices[this.leftknot.smoothing.one-1] in this.rightknot.rightknot.vertices[].to
this.rightknot.rightknot.vertices[this.leftknot.smoothing.two] in this.rightknot.rightknot.vertices[].to
this.rightknot.rightknot.vertices[this.leftknot.smoothing.three-1] in this.rightknot.rightknot.vertices[].to
this.rightknot.rightknot.vertices[this.leftknot.smoothing.four-1] in this.rightknot.rightknot.vertices[].to
this.rightknot.rightknot.vertices[this.rightknot.smoothing.two] in this.rightknot.rightknot.vertices[].to
this.rightknot.rightknot.vertices[this.rightknot.smoothing.two-1] in this.rightknot.rightknot.vertices[].to
this.rightknot.rightknot.vertices[this.rightknot.smoothing.three-1] in this.rightknot.rightknot.vertices[].to
this.rightknot.rightknot.vertices[this.rightknot.smoothing.four-1] in this.rightknot.rightknot.vertices[].to
this.rightknot.rightknot.vertices[this.smoothing.one] in this.rightknot.rightknot.vertices[].to
this.rightknot.rightknot.vertices[this.smoothing.one-1] in this.rightknot.rightknot.vertices[].to
this.rightknot.rightknot.vertices[this.smoothing.two] in this.rightknot.rightknot.vertices[].to
this.rightknot.rightknot.vertices[this.smoothing.two-1] in this.rightknot.rightknot.vertices[].to
this.rightknot.rightknot.vertices[this.smoothing.three] in this.rightknot.rightknot.vertices[].to
this.rightknot.rightknot.vertices[this.smoothing.three-1] in this.rightknot.rightknot.vertices[].to
this.rightknot.rightknot.vertices[this.smoothing.four] in this.rightknot.rightknot.vertices[].to
this.rightknot.rightknot.vertices[this.smoothing.four-1] in this.rightknot.rightknot.vertices[].to
this.rightknot.smoothing.two != this.rightknot.smoothing.three
this.rightknot.smoothing.two != this.rightknot.smoothing.four
this.rightknot.smoothing.two != this.smoothing.one
this.rightknot.smoothing.two != this.smoothing.two
this.rightknot.smoothing.two <= size(this.vertices[])
this.rightknot.smoothing.two != size(this.vertices[])-1
this.rightknot.smoothing.two <= size(this.leftknot.vertices[])
this.rightknot.smoothing.two != size(this.leftknot.vertices[])-1
this.rightknot.smoothing.two < size(this.leftknot.leftknot.vertices[])-1
this.rightknot.smoothing.three != this.rightknot.smoothing.four
this.rightknot.smoothing.three != this.smoothing.one
this.rightknot.smoothing.three != this.smoothing.two
this.rightknot.smoothing.three <= size(this.vertices[])
this.rightknot.smoothing.three != size(this.vertices[])-1
this.rightknot.smoothing.three <= size(this.leftknot.vertices[])
this.rightknot.smoothing.three != size(this.leftknot.vertices[])-1
size(this.leftknot.leftknot.vertices[]) % this.rightknot.smoothing.three == 0
this.rightknot.smoothing.three <= size(this.leftknot.leftknot.vertices[])
this.rightknot.smoothing.three != size(this.leftknot.leftknot.vertices[])-1
this.rightknot.smoothing.four != this.smoothing.one
this.rightknot.smoothing.four != this.smoothing.two
this.rightknot.smoothing.four <= size(this.vertices[])
this.rightknot.smoothing.four <= size(this.leftknot.vertices[])
this.rightknot.smoothing.four <= size(this.leftknot.leftknot.vertices[])
this.smoothing.one != this.smoothing.two
this.smoothing.one != this.smoothing.three
this.smoothing.one != this.smoothing.four
this.smoothing.one <= size(this.vertices[])-1
this.smoothing.one <= size(this.leftknot.vertices[])-1
this.smoothing.one < size(this.leftknot.leftknot.vertices[])-1
this.smoothing.two != this.smoothing.three
this.smoothing.two != this.smoothing.four
this.smoothing.two <= size(this.vertices[])
this.smoothing.two <= size(this.leftknot.vertices[])-1
this.smoothing.two <= size(this.leftknot.leftknot.vertices[])-1
this.smoothing.three != this.smoothing.four
this.smoothing.three <= size(this.vertices[])
this.smoothing.three != size(this.vertices[])-1
this.smoothing.three <= size(this.leftknot.vertices[])
this.smoothing.three != size(this.leftknot.vertices[])-1
this.smoothing.three < size(this.leftknot.leftknot.vertices[])-1
this.smoothing.four <= size(this.vertices[])
this.smoothing.four <= size(this.leftknot.vertices[])
this.smoothing.four <= size(this.leftknot.leftknot.vertices[])-1
===========================================================================
Knot.Knot(Crossing[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == Crossing[].class
arg0[] contains no nulls and has only one value, of length 3
arg0[].overstrand contains no nulls and has only one value, of length 3
arg0[].understrand contains no nulls and has only one value, of length 3
arg0[].posneg == [1, 1, 1]
arg0[].posneg elements == true
size(arg0[]) == 3
===========================================================================
Knot.Knot(Crossing[]):::EXIT
this.crossings == orig(arg0)
this.crossings.getClass().getName() == orig(arg0.getClass().getName())
arg0[] == orig(arg0[])
arg0[].overstrand == orig(arg0[].overstrand)
arg0[].understrand == orig(arg0[].understrand)
arg0[].posneg == orig(arg0[].posneg)
this.crossings has only one value
this.crossings[] contains no nulls and has only one value, of length 3
this.crossings[].getClass().getName() == [Crossing, Crossing, Crossing]
this.crossings[].overstrand contains no nulls and has only one value, of length 3
this.crossings[].understrand contains no nulls and has only one value, of length 3
this.crossings[].posneg == [1, 1, 1]
this.crossings[].posneg elements == true
this.vertices has only one value
this.vertices[] contains no nulls and has only one value, of length 6
this.vertices[].from contains no nulls and has only one value, of length 6
this.vertices[].from.numberOfVertex == [6, 1, 2, 3, 4, 5]
this.vertices[].from.from contains no nulls and has only one value, of length 6
this.vertices[].from.to contains no nulls and has only one value, of length 6
this.vertices[].from.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].from.visited elements == true
this.vertices[].to contains no nulls and has only one value, of length 6
this.vertices[].to.numberOfVertex == [2, 3, 4, 5, 6, 1]
this.vertices[].to.from contains no nulls and has only one value, of length 6
this.vertices[].to.to contains no nulls and has only one value, of length 6
this.vertices[].to.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].to.visited elements == true
this.vertices[].visited == [1, 1, 1, 1, 1, 1]
this.vertices[].visited elements == true
this.binarycode has only one value
this.binarycode.toString == ""
this.leftknot == null
this.rightknot == null
this.seifertCircles has only one value
this.seifertCircles[] contains no nulls and has only one value, of length 1
this.seifertCircles[] elements has only one value
this.seifertCircles[].getClass().getName() == [SeifertCircle]
this.smoothing == null
arg0[] contains no nulls and has only one value, of length 3
arg0[].overstrand contains no nulls and has only one value, of length 3
arg0[].understrand contains no nulls and has only one value, of length 3
arg0[].posneg == [1, 1, 1]
arg0[].posneg elements == true
size(this.crossings[]) == 3
size(this.seifertCircles[]) == 1
===========================================================================
Knot.Knot(Crossing[], java.lang.String, Smoothing, Vertex[]):::ENTER
arg0 != null
arg0.getClass().getName() == Crossing[].class
arg0[] elements != null
arg0[].overstrand sorted by <
arg0[].understrand sorted by >
arg0[].posneg elements are equal
arg1 != null
arg2 != null
arg2.two >= 1
arg2.four >= 1
arg3 != null
arg3.getClass().getName() == Vertex[].class
arg3[] elements != null
arg3[].numberOfVertex == [1, 2, 3, 4, 5, 6]
arg3[].numberOfVertex elements >= 1
arg3[].numberOfVertex sorted by <
arg3[].from elements != null
arg3[].from.numberOfVertex elements >= 1
arg3[].from.from elements != null
arg3[].from.to elements != null
arg3[].from.visited == [1, 1, 1, 1, 1, 1]
arg3[].from.visited elements == true
arg3[].from.visited elements != null
arg3[].to elements != null
arg3[].to.numberOfVertex elements >= 1
arg3[].to.from elements != null
arg3[].to.to elements != null
arg3[].to.visited == [1, 1, 1, 1, 1, 1]
arg3[].to.visited elements == true
arg3[].to.visited elements != null
arg3[].visited == [1, 1, 1, 1, 1, 1]
arg3[].visited elements == true
arg3[].visited elements != null
size(arg0[]) one of { 0, 1, 2 }
size(arg3[]) == 6
arg0.getClass().getName() != arg3.getClass().getName()
arg2.one != arg2.two
arg2.one != arg2.three
arg2.one != arg2.four
arg2.one in arg3[].numberOfVertex
arg2.one in arg3[].from.numberOfVertex
arg2.one in arg3[].to.numberOfVertex
arg2.one <= size(arg3[])-1
arg2.two != arg2.three
arg2.two != arg2.four
arg2.two in arg3[].numberOfVertex
arg2.two in arg3[].from.numberOfVertex
arg2.two in arg3[].to.numberOfVertex
arg2.two <= size(arg3[])
arg2.three != arg2.four
arg2.three in arg3[].numberOfVertex
arg2.three in arg3[].from.numberOfVertex
arg2.three in arg3[].to.numberOfVertex
arg2.three <= size(arg3[])
arg2.three != size(arg3[])-1
arg2.four in arg3[].numberOfVertex
arg2.four in arg3[].from.numberOfVertex
arg2.four in arg3[].to.numberOfVertex
arg2.four <= size(arg3[])
arg3[].numberOfVertex elements <= size(arg3[])
size(arg3[]) in arg3[].numberOfVertex
size(arg3[])-1 in arg3[].numberOfVertex
arg3[arg2.one] in arg3[].from
arg3[arg2.one-1] in arg3[].from
arg3[arg2.two-1] in arg3[].from
arg3[arg2.three-1] in arg3[].from
arg3[arg2.four-1] in arg3[].from
arg3[].from.numberOfVertex elements <= size(arg3[])
size(arg3[]) in arg3[].from.numberOfVertex
size(arg3[])-1 in arg3[].from.numberOfVertex
arg3[arg2.one] in arg3[].from.from
arg3[arg2.one-1] in arg3[].from.from
arg3[arg2.two-1] in arg3[].from.from
arg3[arg2.three-1] in arg3[].from.from
arg3[arg2.four-1] in arg3[].from.from
arg3[arg2.one] in arg3[].from.to
arg3[arg2.one-1] in arg3[].from.to
arg3[arg2.two-1] in arg3[].from.to
arg3[arg2.three-1] in arg3[].from.to
arg3[arg2.four-1] in arg3[].from.to
arg3[arg2.one] in arg3[].to
arg3[arg2.one-1] in arg3[].to
arg3[arg2.two-1] in arg3[].to
arg3[arg2.three-1] in arg3[].to
arg3[arg2.four-1] in arg3[].to
arg3[].to.numberOfVertex elements <= size(arg3[])
size(arg3[]) in arg3[].to.numberOfVertex
size(arg3[])-1 in arg3[].to.numberOfVertex
arg3[arg2.one] in arg3[].to.from
arg3[arg2.one-1] in arg3[].to.from
arg3[arg2.two-1] in arg3[].to.from
arg3[arg2.three-1] in arg3[].to.from
arg3[arg2.four-1] in arg3[].to.from
arg3[arg2.one] in arg3[].to.to
arg3[arg2.one-1] in arg3[].to.to
arg3[arg2.two-1] in arg3[].to.to
arg3[arg2.three-1] in arg3[].to.to
arg3[arg2.four-1] in arg3[].to.to
===========================================================================
Knot.Knot(Crossing[], java.lang.String, Smoothing, Vertex[]):::EXIT
this.crossings.getClass().getName() == orig(arg0.getClass().getName())
this.vertices.getClass().getName() == orig(arg3.getClass().getName())
this.binarycode == orig(arg1)
this.smoothing == orig(arg2)
this.smoothing.one == arg2.one
this.smoothing.two == arg2.two
this.smoothing.three == arg2.three
this.smoothing.four == arg2.four
this.smoothing.reorder == arg2.reorder
arg0[] == orig(arg0[])
arg0[].overstrand == orig(arg0[].overstrand)
arg0[].understrand == orig(arg0[].understrand)
arg0[].posneg == orig(arg0[].posneg)
arg1.toString == orig(arg1.toString)
arg2.one == orig(arg2.one)
arg2.two == orig(arg2.two)
arg2.three == orig(arg2.three)
arg2.four == orig(arg2.four)
arg2.reorder == orig(arg2.reorder)
arg3[] == orig(arg3[])
arg3[].numberOfVertex == orig(arg3[].numberOfVertex)
arg3[].from == orig(arg3[].from)
arg3[].from.numberOfVertex == orig(arg3[].from.numberOfVertex)
arg3[].from.from == orig(arg3[].from.from)
arg3[].from.to == orig(arg3[].from.to)
arg3[].from.visited == orig(arg3[].from.visited)
arg3[].to == orig(arg3[].to)
arg3[].to.numberOfVertex == orig(arg3[].to.numberOfVertex)
arg3[].to.from == orig(arg3[].to.from)
arg3[].to.to == orig(arg3[].to.to)
arg3[].to.visited == orig(arg3[].to.visited)
arg3[].visited == orig(arg3[].visited)
size(this.vertices[]) == orig(size(arg3[]))
this.vertices[].from.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].from.visited elements == true
this.vertices[].from.visited elements != null
this.vertices[].to.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].to.visited elements == true
this.vertices[].to.visited elements != null
this.vertices[].visited == [1, 1, 1, 1, 1, 1]
this.vertices[].visited elements == true
this.vertices[].visited elements != null
this.leftknot == null
this.rightknot == null
this.smoothing != null
arg0[] elements != null
arg0[].overstrand sorted by <
arg0[].understrand sorted by >
arg0[].posneg elements are equal
arg2.two >= 1
arg2.four >= 1
arg3[] elements != null
arg3[].numberOfVertex == [1, 2, 3, 4, 5, 6]
arg3[].numberOfVertex elements >= 1
arg3[].numberOfVertex sorted by <
arg3[].from elements != null
arg3[].from.numberOfVertex elements >= 1
arg3[].from.from elements != null
arg3[].from.to elements != null
arg3[].from.visited == [1, 1, 1, 1, 1, 1]
arg3[].from.visited elements == true
arg3[].from.visited elements != null
arg3[].to elements != null
arg3[].to.numberOfVertex elements >= 1
arg3[].to.from elements != null
arg3[].to.to elements != null
arg3[].to.visited == [1, 1, 1, 1, 1, 1]
arg3[].to.visited elements == true
arg3[].to.visited elements != null
arg3[].visited == [1, 1, 1, 1, 1, 1]
arg3[].visited elements == true
arg3[].visited elements != null
size(this.crossings[]) one of { 0, 1, 2 }
size(this.seifertCircles[]) one of { 1, 2, 3 }
arg2.one in this.vertices[].numberOfVertex
arg2.two in this.vertices[].numberOfVertex
arg2.three in this.vertices[].numberOfVertex
arg2.four in this.vertices[].numberOfVertex
size(arg3[])-1 in this.vertices[].numberOfVertex
this.vertices[arg2.one] in this.vertices[].from
this.vertices[arg2.one-1] in this.vertices[].from
this.vertices[arg2.two-1] in this.vertices[].from
this.vertices[arg2.three-1] in this.vertices[].from
this.vertices[arg2.four-1] in this.vertices[].from
arg2.one in this.vertices[].from.numberOfVertex
arg2.two in this.vertices[].from.numberOfVertex
arg2.three in this.vertices[].from.numberOfVertex
arg2.four in this.vertices[].from.numberOfVertex
size(arg3[])-1 in this.vertices[].from.numberOfVertex
this.vertices[arg2.one] in this.vertices[].from.from
this.vertices[arg2.one-1] in this.vertices[].from.from
this.vertices[arg2.two-1] in this.vertices[].from.from
this.vertices[arg2.three-1] in this.vertices[].from.from
this.vertices[arg2.four-1] in this.vertices[].from.from
this.vertices[arg2.one] in this.vertices[].from.to
this.vertices[arg2.one-1] in this.vertices[].from.to
this.vertices[arg2.two-1] in this.vertices[].from.to
this.vertices[arg2.three-1] in this.vertices[].from.to
this.vertices[arg2.four-1] in this.vertices[].from.to
this.vertices[arg2.one] in this.vertices[].to
this.vertices[arg2.one-1] in this.vertices[].to
this.vertices[arg2.two-1] in this.vertices[].to
this.vertices[arg2.three-1] in this.vertices[].to
this.vertices[arg2.four-1] in this.vertices[].to
arg2.one in this.vertices[].to.numberOfVertex
arg2.two in this.vertices[].to.numberOfVertex
arg2.three in this.vertices[].to.numberOfVertex
arg2.four in this.vertices[].to.numberOfVertex
size(arg3[])-1 in this.vertices[].to.numberOfVertex
this.vertices[arg2.one] in this.vertices[].to.from
this.vertices[arg2.one-1] in this.vertices[].to.from
this.vertices[arg2.two-1] in this.vertices[].to.from
this.vertices[arg2.three-1] in this.vertices[].to.from
this.vertices[arg2.four-1] in this.vertices[].to.from
this.vertices[arg2.one] in this.vertices[].to.to
this.vertices[arg2.one-1] in this.vertices[].to.to
this.vertices[arg2.two-1] in this.vertices[].to.to
this.vertices[arg2.three-1] in this.vertices[].to.to
this.vertices[arg2.four-1] in this.vertices[].to.to
arg2.one != arg2.two
arg2.one != arg2.three
arg2.one != arg2.four
arg2.one in arg3[].numberOfVertex
arg2.one in arg3[].from.numberOfVertex
arg2.one in arg3[].to.numberOfVertex
arg2.one <= size(arg3[])-1
arg2.two != arg2.three
arg2.two != arg2.four
arg2.two in arg3[].numberOfVertex
arg2.two in arg3[].from.numberOfVertex
arg2.two in arg3[].to.numberOfVertex
arg2.two <= size(this.vertices[])
arg2.three != arg2.four
arg2.three in arg3[].numberOfVertex
arg2.three in arg3[].from.numberOfVertex
arg2.three in arg3[].to.numberOfVertex
arg2.three <= size(this.vertices[])
arg2.three != size(arg3[])-1
arg2.four in arg3[].numberOfVertex
arg2.four in arg3[].from.numberOfVertex
arg2.four in arg3[].to.numberOfVertex
arg2.four <= size(this.vertices[])
arg3[].numberOfVertex elements <= size(this.vertices[])
size(this.vertices[]) in arg3[].numberOfVertex
size(arg3[])-1 in arg3[].numberOfVertex
arg3[arg2.one] in arg3[].from
arg3[arg2.one-1] in arg3[].from
arg3[arg2.two-1] in arg3[].from
arg3[arg2.three-1] in arg3[].from
arg3[arg2.four-1] in arg3[].from
arg3[].from.numberOfVertex elements <= size(this.vertices[])
size(this.vertices[]) in arg3[].from.numberOfVertex
size(arg3[])-1 in arg3[].from.numberOfVertex
arg3[arg2.one] in arg3[].from.from
arg3[arg2.one-1] in arg3[].from.from
arg3[arg2.two-1] in arg3[].from.from
arg3[arg2.three-1] in arg3[].from.from
arg3[arg2.four-1] in arg3[].from.from
arg3[arg2.one] in arg3[].from.to
arg3[arg2.one-1] in arg3[].from.to
arg3[arg2.two-1] in arg3[].from.to
arg3[arg2.three-1] in arg3[].from.to
arg3[arg2.four-1] in arg3[].from.to
arg3[arg2.one] in arg3[].to
arg3[arg2.one-1] in arg3[].to
arg3[arg2.two-1] in arg3[].to
arg3[arg2.three-1] in arg3[].to
arg3[arg2.four-1] in arg3[].to
arg3[].to.numberOfVertex elements <= size(this.vertices[])
size(this.vertices[]) in arg3[].to.numberOfVertex
size(arg3[])-1 in arg3[].to.numberOfVertex
arg3[arg2.one] in arg3[].to.from
arg3[arg2.one-1] in arg3[].to.from
arg3[arg2.two-1] in arg3[].to.from
arg3[arg2.three-1] in arg3[].to.from
arg3[arg2.four-1] in arg3[].to.from
arg3[arg2.one] in arg3[].to.to
arg3[arg2.one-1] in arg3[].to.to
arg3[arg2.two-1] in arg3[].to.to
arg3[arg2.three-1] in arg3[].to.to
arg3[arg2.four-1] in arg3[].to.to
===========================================================================
Knot.getBinCode():::ENTER
this.crossings[] == []
this.crossings[].getClass().getName() == []
this.crossings[].overstrand == []
this.crossings[].understrand == []
this.crossings[].posneg == []
this.vertices[].from.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].from.visited elements == true
this.vertices[].from.visited elements != null
this.vertices[].to.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].to.visited elements == true
this.vertices[].to.visited elements != null
this.vertices[].visited == [1, 1, 1, 1, 1, 1]
this.vertices[].visited elements == true
this.vertices[].visited elements != null
this.leftknot == null
this.rightknot == null
this.smoothing != null
this.smoothing.one one of { 3, 4 }
this.smoothing.two one of { 1, 6 }
size(this.seifertCircles[]) one of { 1, 2, 3 }
this.smoothing.one < size(this.vertices[])-1
this.smoothing.two != size(this.vertices[])-1
this.smoothing.four != size(this.vertices[])-1
===========================================================================
Knot.getBinCode():::EXIT
this.crossings == orig(this.crossings)
this.crossings.getClass().getName() == orig(this.crossings.getClass().getName())
this.crossings[] == orig(this.crossings[])
this.crossings[].overstrand == orig(this.crossings[].overstrand)
this.crossings[].understrand == orig(this.crossings[].understrand)
this.crossings[].posneg == orig(this.crossings[].posneg)
this.vertices == orig(this.vertices)
this.vertices.getClass().getName() == orig(this.vertices.getClass().getName())
this.vertices[] == orig(this.vertices[])
this.vertices[].numberOfVertex == orig(this.vertices[].numberOfVertex)
this.vertices[].from == orig(this.vertices[].from)
this.vertices[].from.numberOfVertex == orig(this.vertices[].from.numberOfVertex)
this.vertices[].from.from == orig(this.vertices[].from.from)
this.vertices[].from.to == orig(this.vertices[].from.to)
this.vertices[].from.visited == orig(this.vertices[].from.visited)
this.vertices[].to == orig(this.vertices[].to)
this.vertices[].to.numberOfVertex == orig(this.vertices[].to.numberOfVertex)
this.vertices[].to.from == orig(this.vertices[].to.from)
this.vertices[].to.to == orig(this.vertices[].to.to)
this.vertices[].to.visited == orig(this.vertices[].to.visited)
this.vertices[].visited == orig(this.vertices[].visited)
this.binarycode == return
this.binarycode.toString == orig(this.binarycode.toString)
this.leftknot == orig(this.leftknot)
this.rightknot == orig(this.rightknot)
this.numcircles == orig(this.numcircles)
this.seifertCircles == orig(this.seifertCircles)
this.seifertCircles[] == orig(this.seifertCircles[])
this.smoothing == orig(this.smoothing)
this.smoothing.one == orig(this.smoothing.one)
this.smoothing.two == orig(this.smoothing.two)
this.smoothing.three == orig(this.smoothing.three)
this.smoothing.four == orig(this.smoothing.four)
this.smoothing.reorder == orig(this.smoothing.reorder)
return == orig(this.binarycode)
this.crossings[] == []
this.crossings[].getClass().getName() == []
this.crossings[].overstrand == []
this.crossings[].understrand == []
this.crossings[].posneg == []
this.vertices[].from.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].from.visited elements == true
this.vertices[].from.visited elements != null
this.vertices[].to.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].to.visited elements == true
this.vertices[].to.visited elements != null
this.vertices[].visited == [1, 1, 1, 1, 1, 1]
this.vertices[].visited elements == true
this.vertices[].visited elements != null
this.leftknot == null
this.rightknot == null
this.smoothing != null
this.smoothing.one one of { 3, 4 }
this.smoothing.two one of { 1, 6 }
return != null
size(this.seifertCircles[]) one of { 1, 2, 3 }
this.smoothing.one < size(this.vertices[])-1
this.smoothing.two != size(this.vertices[])-1
this.smoothing.four != size(this.vertices[])-1
===========================================================================
Knot.getCircles():::ENTER
this.crossings[] == []
this.crossings[].getClass().getName() == []
this.crossings[].overstrand == []
this.crossings[].understrand == []
this.crossings[].posneg == []
this.vertices[].from.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].from.visited elements == true
this.vertices[].to.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].to.visited elements == true
this.vertices[].visited == [1, 1, 1, 1, 1, 1]
this.vertices[].visited elements == true
this.leftknot == null
this.rightknot == null
this.smoothing.one one of { 3, 4 }
this.smoothing.two one of { 1, 6 }
size(this.seifertCircles[]) one of { 1, 2, 3 }
this.smoothing.one < size(this.vertices[])-1
this.smoothing.two != size(this.vertices[])-1
this.smoothing.four != size(this.vertices[])-1
===========================================================================
Knot.getCircles():::EXIT
this.crossings == orig(this.crossings)
this.crossings.getClass().getName() == orig(this.crossings.getClass().getName())
this.crossings[] == orig(this.crossings[])
this.crossings[].overstrand == orig(this.crossings[].overstrand)
this.crossings[].understrand == orig(this.crossings[].understrand)
this.crossings[].posneg == orig(this.crossings[].posneg)
this.vertices == orig(this.vertices)
this.vertices.getClass().getName() == orig(this.vertices.getClass().getName())
this.vertices[] == orig(this.vertices[])
this.vertices[].numberOfVertex == orig(this.vertices[].numberOfVertex)
this.vertices[].from == orig(this.vertices[].from)
this.vertices[].from.numberOfVertex == orig(this.vertices[].from.numberOfVertex)
this.vertices[].from.from == orig(this.vertices[].from.from)
this.vertices[].from.to == orig(this.vertices[].from.to)
this.vertices[].from.visited == orig(this.vertices[].from.visited)
this.vertices[].to == orig(this.vertices[].to)
this.vertices[].to.numberOfVertex == orig(this.vertices[].to.numberOfVertex)
this.vertices[].to.from == orig(this.vertices[].to.from)
this.vertices[].to.to == orig(this.vertices[].to.to)
this.vertices[].to.visited == orig(this.vertices[].to.visited)
this.vertices[].visited == orig(this.vertices[].visited)
this.binarycode == orig(this.binarycode)
this.binarycode.toString == orig(this.binarycode.toString)
this.leftknot == orig(this.leftknot)
this.rightknot == orig(this.rightknot)
this.numcircles == orig(this.numcircles)
this.seifertCircles == return
this.seifertCircles[] == orig(this.seifertCircles[])
this.smoothing == orig(this.smoothing)
this.smoothing.one == orig(this.smoothing.one)
this.smoothing.two == orig(this.smoothing.two)
this.smoothing.three == orig(this.smoothing.three)
this.smoothing.four == orig(this.smoothing.four)
this.smoothing.reorder == orig(this.smoothing.reorder)
return == orig(this.seifertCircles)
this.crossings[] == []
this.crossings[].getClass().getName() == []
this.crossings[].overstrand == []
this.crossings[].understrand == []
this.crossings[].posneg == []
this.vertices[].from.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].from.visited elements == true
this.vertices[].to.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].to.visited elements == true
this.vertices[].visited == [1, 1, 1, 1, 1, 1]
this.vertices[].visited elements == true
this.leftknot == null
this.rightknot == null
this.smoothing.one one of { 3, 4 }
this.smoothing.two one of { 1, 6 }
return[].getClass().getName() elements == SeifertCircle.class
size(this.seifertCircles[]) one of { 1, 2, 3 }
size(return[]) one of { 1, 2, 3 }
this.smoothing.one < size(this.vertices[])-1
this.smoothing.two != size(this.vertices[])-1
this.smoothing.four != size(this.vertices[])-1
===========================================================================
Knot.getLeftKnot():::ENTER
this.vertices[].from.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].from.visited elements == true
this.vertices[].from.visited elements != null
this.vertices[].to.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].to.visited elements == true
this.vertices[].to.visited elements != null
this.vertices[].visited == [1, 1, 1, 1, 1, 1]
this.vertices[].visited elements == true
this.vertices[].visited elements != null
size(this.seifertCircles[]) one of { 1, 2, 3 }
===========================================================================
Knot.getLeftKnot():::EXIT
this.crossings == orig(this.crossings)
this.crossings.getClass().getName() == return.crossings.getClass().getName()
this.crossings.getClass().getName() == return.leftknot.crossings.getClass().getName()
this.crossings.getClass().getName() == orig(this.crossings.getClass().getName())
this.crossings[] == orig(this.crossings[])
this.crossings[].overstrand == orig(this.crossings[].overstrand)
this.crossings[].understrand == orig(this.crossings[].understrand)
this.crossings[].posneg == orig(this.crossings[].posneg)
this.vertices == orig(this.vertices)
this.vertices.getClass().getName() == return.vertices.getClass().getName()
this.vertices.getClass().getName() == return.leftknot.vertices.getClass().getName()
this.vertices.getClass().getName() == orig(this.vertices.getClass().getName())
this.vertices[] == orig(this.vertices[])
this.vertices[].getClass().getName() == return.vertices[].getClass().getName()
this.vertices[].getClass().getName() == return.leftknot.vertices[].getClass().getName()
this.vertices[].numberOfVertex == orig(this.vertices[].numberOfVertex)
this.vertices[].from == orig(this.vertices[].from)
this.vertices[].from.numberOfVertex == orig(this.vertices[].from.numberOfVertex)
this.vertices[].from.from == orig(this.vertices[].from.from)
this.vertices[].from.to == orig(this.vertices[].from.to)
this.vertices[].from.visited == orig(this.vertices[].from.visited)
this.vertices[].to == orig(this.vertices[].to)
this.vertices[].to.numberOfVertex == orig(this.vertices[].to.numberOfVertex)
this.vertices[].to.from == orig(this.vertices[].to.from)
this.vertices[].to.to == orig(this.vertices[].to.to)
this.vertices[].to.visited == orig(this.vertices[].to.visited)
this.vertices[].visited == orig(this.vertices[].visited)
this.binarycode == orig(this.binarycode)
this.binarycode.toString == orig(this.binarycode.toString)
this.leftknot == return
this.leftknot.crossings == return.crossings
this.leftknot.crossings.getClass().getName() == return.crossings.getClass().getName()
this.leftknot.crossings[] == orig(this.leftknot.crossings[])
this.leftknot.crossings[].overstrand == orig(this.leftknot.crossings[].overstrand)
this.leftknot.crossings[].understrand == orig(this.leftknot.crossings[].understrand)
this.leftknot.crossings[].posneg == orig(this.leftknot.crossings[].posneg)
this.leftknot.vertices == return.vertices
this.leftknot.vertices.getClass().getName() == return.vertices.getClass().getName()
this.leftknot.vertices[] == return.vertices[]
this.leftknot.vertices[].numberOfVertex == orig(this.leftknot.vertices[].numberOfVertex)
this.leftknot.vertices[].from == orig(this.leftknot.vertices[].from)
this.leftknot.vertices[].to == orig(this.leftknot.vertices[].to)
this.leftknot.vertices[].visited == orig(this.leftknot.vertices[].visited)
this.leftknot.binarycode == return.binarycode
this.leftknot.binarycode.toString == orig(this.leftknot.binarycode.toString)
this.leftknot.leftknot == return.leftknot
this.leftknot.leftknot.crossings == return.leftknot.crossings
this.leftknot.leftknot.crossings.getClass().getName() == return.leftknot.crossings.getClass().getName()
this.leftknot.leftknot.crossings[] == orig(this.leftknot.leftknot.crossings[])
this.leftknot.leftknot.crossings[].overstrand == orig(this.leftknot.leftknot.crossings[].overstrand)
this.leftknot.leftknot.crossings[].understrand == orig(this.leftknot.leftknot.crossings[].understrand)
this.leftknot.leftknot.crossings[].posneg == orig(this.leftknot.leftknot.crossings[].posneg)
this.leftknot.leftknot.vertices == return.leftknot.vertices
this.leftknot.leftknot.vertices.getClass().getName() == return.leftknot.vertices.getClass().getName()
this.leftknot.leftknot.vertices[] == return.leftknot.vertices[]
this.leftknot.leftknot.vertices[].numberOfVertex == orig(this.leftknot.leftknot.vertices[].numberOfVertex)
this.leftknot.leftknot.vertices[].from == orig(this.leftknot.leftknot.vertices[].from)
this.leftknot.leftknot.vertices[].to == orig(this.leftknot.leftknot.vertices[].to)
this.leftknot.leftknot.vertices[].visited == orig(this.leftknot.leftknot.vertices[].visited)
this.leftknot.leftknot.binarycode == return.leftknot.binarycode
this.leftknot.leftknot.binarycode.toString == orig(this.leftknot.leftknot.binarycode.toString)
this.leftknot.leftknot.leftknot == return.leftknot.leftknot
this.leftknot.leftknot.rightknot == return.leftknot.rightknot
this.leftknot.leftknot.numcircles == orig(this.leftknot.leftknot.numcircles)
this.leftknot.leftknot.seifertCircles == return.leftknot.seifertCircles
this.leftknot.leftknot.seifertCircles[] == orig(this.leftknot.leftknot.seifertCircles[])
this.leftknot.leftknot.smoothing == return.leftknot.smoothing
this.leftknot.rightknot == return.rightknot
this.leftknot.rightknot.crossings == return.rightknot.crossings
this.leftknot.rightknot.crossings.getClass().getName() == return.leftknot.crossings.getClass().getName()
this.leftknot.rightknot.crossings[] == orig(this.leftknot.rightknot.crossings[])
this.leftknot.rightknot.crossings[].overstrand == orig(this.leftknot.rightknot.crossings[].overstrand)
this.leftknot.rightknot.crossings[].understrand == orig(this.leftknot.rightknot.crossings[].understrand)
this.leftknot.rightknot.crossings[].posneg == orig(this.leftknot.rightknot.crossings[].posneg)
this.leftknot.rightknot.vertices == return.rightknot.vertices
this.leftknot.rightknot.vertices.getClass().getName() == return.leftknot.vertices.getClass().getName()
this.leftknot.rightknot.vertices[] == return.rightknot.vertices[]
this.leftknot.rightknot.vertices[].numberOfVertex == orig(this.leftknot.rightknot.vertices[].numberOfVertex)
this.leftknot.rightknot.vertices[].from == orig(this.leftknot.rightknot.vertices[].from)
this.leftknot.rightknot.vertices[].to == orig(this.leftknot.rightknot.vertices[].to)
this.leftknot.rightknot.vertices[].visited == orig(this.leftknot.rightknot.vertices[].visited)
this.leftknot.rightknot.binarycode == return.rightknot.binarycode
this.leftknot.rightknot.binarycode.toString == orig(this.leftknot.rightknot.binarycode.toString)
this.leftknot.rightknot.leftknot == return.rightknot.leftknot
this.leftknot.rightknot.rightknot == return.rightknot.rightknot
this.leftknot.rightknot.numcircles == orig(this.leftknot.rightknot.numcircles)
this.leftknot.rightknot.seifertCircles == return.rightknot.seifertCircles
this.leftknot.rightknot.seifertCircles[] == orig(this.leftknot.rightknot.seifertCircles[])
this.leftknot.rightknot.smoothing == return.rightknot.smoothing
this.leftknot.numcircles == orig(this.leftknot.numcircles)
this.leftknot.seifertCircles == return.seifertCircles
this.leftknot.seifertCircles[] == orig(this.leftknot.seifertCircles[])
this.leftknot.smoothing == return.smoothing
this.leftknot.smoothing.one == return.smoothing.one
this.leftknot.smoothing.two == return.smoothing.two
this.leftknot.smoothing.three == return.smoothing.three
this.leftknot.smoothing.four == return.smoothing.four
this.leftknot.smoothing.reorder == return.smoothing.reorder
this.rightknot == orig(this.rightknot)
this.rightknot.crossings == orig(this.rightknot.crossings)
this.rightknot.crossings.getClass().getName() == return.crossings.getClass().getName()
this.rightknot.crossings[] == orig(this.rightknot.crossings[])
this.rightknot.crossings[].overstrand == orig(this.rightknot.crossings[].overstrand)
this.rightknot.crossings[].understrand == orig(this.rightknot.crossings[].understrand)
this.rightknot.crossings[].posneg == orig(this.rightknot.crossings[].posneg)
this.rightknot.vertices == orig(this.rightknot.vertices)
this.rightknot.vertices.getClass().getName() == return.vertices.getClass().getName()
this.rightknot.vertices[] == orig(this.rightknot.vertices[])
this.rightknot.vertices[].numberOfVertex == orig(this.rightknot.vertices[].numberOfVertex)
this.rightknot.vertices[].from == orig(this.rightknot.vertices[].from)
this.rightknot.vertices[].to == orig(this.rightknot.vertices[].to)
this.rightknot.vertices[].visited == orig(this.rightknot.vertices[].visited)
this.rightknot.binarycode == orig(this.rightknot.binarycode)
this.rightknot.binarycode.toString == orig(this.rightknot.binarycode.toString)
this.rightknot.leftknot == orig(this.rightknot.leftknot)
this.rightknot.leftknot.crossings == orig(this.rightknot.leftknot.crossings)
this.rightknot.leftknot.crossings.getClass().getName() == return.leftknot.crossings.getClass().getName()
this.rightknot.leftknot.crossings[] == orig(this.rightknot.leftknot.crossings[])
this.rightknot.leftknot.crossings[].overstrand == orig(this.rightknot.leftknot.crossings[].overstrand)
this.rightknot.leftknot.crossings[].understrand == orig(this.rightknot.leftknot.crossings[].understrand)
this.rightknot.leftknot.crossings[].posneg == orig(this.rightknot.leftknot.crossings[].posneg)
this.rightknot.leftknot.vertices == orig(this.rightknot.leftknot.vertices)
this.rightknot.leftknot.vertices.getClass().getName() == return.leftknot.vertices.getClass().getName()
this.rightknot.leftknot.vertices[] == orig(this.rightknot.leftknot.vertices[])
this.rightknot.leftknot.vertices[].numberOfVertex == orig(this.rightknot.leftknot.vertices[].numberOfVertex)
this.rightknot.leftknot.vertices[].from == orig(this.rightknot.leftknot.vertices[].from)
this.rightknot.leftknot.vertices[].to == orig(this.rightknot.leftknot.vertices[].to)
this.rightknot.leftknot.vertices[].visited == orig(this.rightknot.leftknot.vertices[].visited)
this.rightknot.leftknot.binarycode == orig(this.rightknot.leftknot.binarycode)
this.rightknot.leftknot.binarycode.toString == orig(this.rightknot.leftknot.binarycode.toString)
this.rightknot.leftknot.leftknot == orig(this.rightknot.leftknot.leftknot)
this.rightknot.leftknot.rightknot == orig(this.rightknot.leftknot.rightknot)
this.rightknot.leftknot.numcircles == orig(this.rightknot.leftknot.numcircles)
this.rightknot.leftknot.seifertCircles == orig(this.rightknot.leftknot.seifertCircles)
this.rightknot.leftknot.seifertCircles[] == orig(this.rightknot.leftknot.seifertCircles[])
this.rightknot.leftknot.smoothing == orig(this.rightknot.leftknot.smoothing)
this.rightknot.rightknot == orig(this.rightknot.rightknot)
this.rightknot.rightknot.crossings == orig(this.rightknot.rightknot.crossings)
this.rightknot.rightknot.crossings.getClass().getName() == return.leftknot.crossings.getClass().getName()
this.rightknot.rightknot.crossings[] == orig(this.rightknot.rightknot.crossings[])
this.rightknot.rightknot.crossings[].overstrand == orig(this.rightknot.rightknot.crossings[].overstrand)
this.rightknot.rightknot.crossings[].understrand == orig(this.rightknot.rightknot.crossings[].understrand)
this.rightknot.rightknot.crossings[].posneg == orig(this.rightknot.rightknot.crossings[].posneg)
this.rightknot.rightknot.vertices == orig(this.rightknot.rightknot.vertices)
this.rightknot.rightknot.vertices.getClass().getName() == return.leftknot.vertices.getClass().getName()
this.rightknot.rightknot.vertices[] == orig(this.rightknot.rightknot.vertices[])
this.rightknot.rightknot.vertices[].numberOfVertex == orig(this.rightknot.rightknot.vertices[].numberOfVertex)
this.rightknot.rightknot.vertices[].from == orig(this.rightknot.rightknot.vertices[].from)
this.rightknot.rightknot.vertices[].to == orig(this.rightknot.rightknot.vertices[].to)
this.rightknot.rightknot.vertices[].visited == orig(this.rightknot.rightknot.vertices[].visited)
this.rightknot.rightknot.binarycode == orig(this.rightknot.rightknot.binarycode)
this.rightknot.rightknot.binarycode.toString == orig(this.rightknot.rightknot.binarycode.toString)
this.rightknot.rightknot.leftknot == orig(this.rightknot.rightknot.leftknot)
this.rightknot.rightknot.rightknot == orig(this.rightknot.rightknot.rightknot)
this.rightknot.rightknot.numcircles == orig(this.rightknot.rightknot.numcircles)
this.rightknot.rightknot.seifertCircles == orig(this.rightknot.rightknot.seifertCircles)
this.rightknot.rightknot.seifertCircles[] == orig(this.rightknot.rightknot.seifertCircles[])
this.rightknot.rightknot.smoothing == orig(this.rightknot.rightknot.smoothing)
this.rightknot.numcircles == orig(this.rightknot.numcircles)
this.rightknot.seifertCircles == orig(this.rightknot.seifertCircles)
this.rightknot.seifertCircles[] == orig(this.rightknot.seifertCircles[])
this.rightknot.smoothing == orig(this.rightknot.smoothing)
this.rightknot.smoothing.one == return.smoothing.one
this.rightknot.smoothing.two == orig(this.rightknot.smoothing.two)
this.rightknot.smoothing.three == orig(this.rightknot.smoothing.three)
this.rightknot.smoothing.four == orig(this.rightknot.smoothing.four)
this.rightknot.smoothing.reorder == orig(this.rightknot.smoothing.reorder)
this.numcircles == orig(this.numcircles)
this.seifertCircles == orig(this.seifertCircles)
this.seifertCircles[] == orig(this.seifertCircles[])
this.smoothing == orig(this.smoothing)
this.smoothing.one == orig(this.smoothing.one)
this.smoothing.two == orig(this.smoothing.two)
this.smoothing.three == orig(this.smoothing.three)
this.smoothing.four == orig(this.smoothing.four)
this.smoothing.reorder == orig(this.smoothing.reorder)
return == orig(this.leftknot)
return.crossings == orig(this.leftknot.crossings)
return.crossings.getClass().getName() == return.leftknot.crossings.getClass().getName()
return.crossings.getClass().getName() == orig(this.leftknot.crossings.getClass().getName())
return.crossings.getClass().getName() == orig(this.rightknot.crossings.getClass().getName())
return.vertices == orig(this.leftknot.vertices)
return.vertices.getClass().getName() == return.leftknot.vertices.getClass().getName()
return.vertices.getClass().getName() == orig(this.leftknot.vertices.getClass().getName())
return.vertices.getClass().getName() == orig(this.rightknot.vertices.getClass().getName())
return.vertices[] == orig(this.leftknot.vertices[])
return.vertices[].getClass().getName() == return.leftknot.vertices[].getClass().getName()
return.binarycode == orig(this.leftknot.binarycode)
return.leftknot == orig(this.leftknot.leftknot)
return.leftknot.crossings == orig(this.leftknot.leftknot.crossings)
return.leftknot.crossings.getClass().getName() == return.rightknot.crossings.getClass().getName()
return.leftknot.crossings.getClass().getName() == orig(this.leftknot.leftknot.crossings.getClass().getName())
return.leftknot.crossings.getClass().getName() == orig(this.leftknot.rightknot.crossings.getClass().getName())
return.leftknot.crossings.getClass().getName() == orig(this.rightknot.leftknot.crossings.getClass().getName())
return.leftknot.crossings.getClass().getName() == orig(this.rightknot.rightknot.crossings.getClass().getName())
return.leftknot.vertices == orig(this.leftknot.leftknot.vertices)
return.leftknot.vertices.getClass().getName() == return.rightknot.vertices.getClass().getName()
return.leftknot.vertices.getClass().getName() == orig(this.leftknot.leftknot.vertices.getClass().getName())
return.leftknot.vertices.getClass().getName() == orig(this.leftknot.rightknot.vertices.getClass().getName())
return.leftknot.vertices.getClass().getName() == orig(this.rightknot.leftknot.vertices.getClass().getName())
return.leftknot.vertices.getClass().getName() == orig(this.rightknot.rightknot.vertices.getClass().getName())
return.leftknot.vertices[] == orig(this.leftknot.leftknot.vertices[])
return.leftknot.binarycode == orig(this.leftknot.leftknot.binarycode)
return.leftknot.leftknot == orig(this.leftknot.leftknot.leftknot)
return.leftknot.rightknot == orig(this.leftknot.leftknot.rightknot)
return.leftknot.seifertCircles == orig(this.leftknot.leftknot.seifertCircles)
return.leftknot.smoothing == orig(this.leftknot.leftknot.smoothing)
return.rightknot == orig(this.leftknot.rightknot)
return.rightknot.crossings == orig(this.leftknot.rightknot.crossings)
return.rightknot.vertices == orig(this.leftknot.rightknot.vertices)
return.rightknot.vertices[] == orig(this.leftknot.rightknot.vertices[])
return.rightknot.binarycode == orig(this.leftknot.rightknot.binarycode)
return.rightknot.leftknot == orig(this.leftknot.rightknot.leftknot)
return.rightknot.rightknot == orig(this.leftknot.rightknot.rightknot)
return.rightknot.seifertCircles == orig(this.leftknot.rightknot.seifertCircles)
return.rightknot.smoothing == orig(this.leftknot.rightknot.smoothing)
return.seifertCircles == orig(this.leftknot.seifertCircles)
return.smoothing == orig(this.leftknot.smoothing)
return.smoothing.one == orig(this.leftknot.smoothing.one)
return.smoothing.one == orig(this.rightknot.smoothing.one)
return.smoothing.two == orig(this.leftknot.smoothing.two)
return.smoothing.three == orig(this.leftknot.smoothing.three)
return.smoothing.four == orig(this.leftknot.smoothing.four)
return.smoothing.reorder == orig(this.leftknot.smoothing.reorder)
size(this.vertices[]) == size(return.vertices[])
size(this.vertices[]) == size(return.leftknot.vertices[])
size(this.leftknot.rightknot.vertices[]) == size(return.leftknot.vertices[])
size(this.rightknot.vertices[]) == size(return.vertices[])
size(this.rightknot.leftknot.vertices[]) == size(return.leftknot.vertices[])
size(this.rightknot.rightknot.vertices[]) == size(return.leftknot.vertices[])
size(return.vertices[]) == size(return.leftknot.vertices[])
size(return.vertices[]) == orig(size(this.rightknot.vertices[]))
size(return.leftknot.vertices[]) == size(return.rightknot.vertices[])
size(return.leftknot.vertices[]) == orig(size(this.leftknot.rightknot.vertices[]))
size(return.leftknot.vertices[]) == orig(size(this.rightknot.leftknot.vertices[]))
size(return.leftknot.vertices[]) == orig(size(this.rightknot.rightknot.vertices[]))
this.leftknot.leftknot.vertices[this.leftknot.smoothing.two-1] == return.leftknot.vertices[this.rightknot.smoothing.two]
this.leftknot.leftknot.vertices[return.smoothing.two-1] == return.leftknot.vertices[this.rightknot.smoothing.two]
this.leftknot.leftknot.vertices[orig(this.leftknot.smoothing.two)-1] == return.leftknot.vertices[this.rightknot.smoothing.two]
this.leftknot.rightknot.vertices[this.leftknot.smoothing.two-1] == return.rightknot.vertices[this.rightknot.smoothing.two]
this.leftknot.rightknot.vertices[return.smoothing.two-1] == return.rightknot.vertices[this.rightknot.smoothing.two]
this.leftknot.rightknot.vertices[orig(this.leftknot.smoothing.two)-1] == return.rightknot.vertices[this.rightknot.smoothing.two]
return.leftknot.vertices[this.leftknot.smoothing.two-1] == return.leftknot.vertices[this.rightknot.smoothing.two]
return.rightknot.vertices[this.leftknot.smoothing.two-1] == return.rightknot.vertices[this.rightknot.smoothing.two]
orig(this.leftknot.leftknot.vertices[post(this.leftknot.smoothing.two)-1]) == return.leftknot.vertices[this.rightknot.smoothing.two]
orig(this.leftknot.rightknot.vertices[post(this.leftknot.smoothing.two)-1]) == return.rightknot.vertices[this.rightknot.smoothing.two]
orig(this.rightknot.leftknot.vertices[post(this.leftknot.smoothing.two)-1]) == this.rightknot.leftknot.vertices[this.rightknot.smoothing.two]
orig(this.rightknot.rightknot.vertices[post(this.leftknot.smoothing.two)-1]) == this.rightknot.rightknot.vertices[this.rightknot.smoothing.two]
this.rightknot.leftknot.vertices[this.rightknot.smoothing.two] == this.rightknot.leftknot.vertices[return.smoothing.two-1]
this.rightknot.leftknot.vertices[this.rightknot.smoothing.two] == this.rightknot.leftknot.vertices[orig(this.leftknot.smoothing.two)-1]
this.rightknot.leftknot.vertices[this.rightknot.smoothing.two] == orig(this.rightknot.leftknot.vertices[post(return.smoothing.two)-1])
this.rightknot.leftknot.vertices[this.rightknot.smoothing.two] == orig(this.rightknot.leftknot.vertices[this.leftknot.smoothing.two-1])
this.rightknot.rightknot.vertices[this.rightknot.smoothing.two] == this.rightknot.rightknot.vertices[return.smoothing.two-1]
this.rightknot.rightknot.vertices[this.rightknot.smoothing.two] == this.rightknot.rightknot.vertices[orig(this.leftknot.smoothing.two)-1]
this.rightknot.rightknot.vertices[this.rightknot.smoothing.two] == orig(this.rightknot.rightknot.vertices[post(return.smoothing.two)-1])
this.rightknot.rightknot.vertices[this.rightknot.smoothing.two] == orig(this.rightknot.rightknot.vertices[this.leftknot.smoothing.two-1])
return.leftknot.vertices[this.rightknot.smoothing.two] == return.leftknot.vertices[return.smoothing.two-1]
return.leftknot.vertices[this.rightknot.smoothing.two] == return.leftknot.vertices[orig(this.leftknot.smoothing.two)-1]
return.leftknot.vertices[this.rightknot.smoothing.two] == orig(this.leftknot.leftknot.vertices[post(return.smoothing.two)-1])
return.leftknot.vertices[this.rightknot.smoothing.two] == orig(this.leftknot.leftknot.vertices[this.leftknot.smoothing.two-1])
return.leftknot.vertices[this.rightknot.smoothing.two-1] == return.leftknot.vertices[this.smoothing.one]
return.rightknot.vertices[this.rightknot.smoothing.two] == return.rightknot.vertices[return.smoothing.two-1]
return.rightknot.vertices[this.rightknot.smoothing.two] == return.rightknot.vertices[orig(this.leftknot.smoothing.two)-1]
return.rightknot.vertices[this.rightknot.smoothing.two] == orig(this.leftknot.rightknot.vertices[post(return.smoothing.two)-1])
return.rightknot.vertices[this.rightknot.smoothing.two] == orig(this.leftknot.rightknot.vertices[this.leftknot.smoothing.two-1])
return.rightknot.vertices[this.rightknot.smoothing.two-1] == return.rightknot.vertices[this.smoothing.one]
return.leftknot.vertices[this.rightknot.smoothing.four-1] == return.leftknot.vertices[this.smoothing.four]
return.rightknot.vertices[this.rightknot.smoothing.four-1] == return.rightknot.vertices[this.smoothing.four]
this.vertices[].from.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].from.visited elements == true
this.vertices[].from.visited elements != null
this.vertices[].to.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].to.visited elements == true
this.vertices[].to.visited elements != null
this.vertices[].visited == [1, 1, 1, 1, 1, 1]
this.vertices[].visited elements == true
this.vertices[].visited elements != null
return.crossings != null
return.crossings.getClass().getName() == Crossing[].class
return.crossings[] elements != null
return.crossings[].getClass().getName() elements == Crossing.class
return.crossings[].overstrand sorted by >
return.crossings[].understrand sorted by >
return.crossings[].posneg elements are equal
return.vertices != null
return.vertices.getClass().getName() == Vertex[].class
return.vertices[] elements != null
return.vertices[].getClass().getName() == [Vertex, Vertex, Vertex, Vertex, Vertex, Vertex]
return.vertices[].getClass().getName() elements == Vertex.class
return.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
return.vertices[].numberOfVertex elements >= 1
return.vertices[].numberOfVertex sorted by <
return.vertices[].from elements != null
return.vertices[].to elements != null
return.vertices[].visited == [1, 1, 1, 1, 1, 1]
return.vertices[].visited elements == true
return.vertices[].visited elements != null
return.binarycode != null
return.leftknot.crossings.getClass().getName() == Crossing[].class
return.leftknot.crossings[] elements has only one value
return.leftknot.crossings[].getClass().getName() elements == Crossing.class
return.leftknot.crossings[].getClass().getName() one of { [], [Crossing] }
return.leftknot.crossings[].overstrand elements has only one value
return.leftknot.crossings[].understrand elements has only one value
return.leftknot.crossings[].posneg elements == true
return.leftknot.crossings[].posneg one of { [], [1] }
return.leftknot.vertices.getClass().getName() == Vertex[].class
return.leftknot.vertices[].getClass().getName() == [Vertex, Vertex, Vertex, Vertex, Vertex, Vertex]
return.leftknot.vertices[].getClass().getName() elements == Vertex.class
return.leftknot.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
return.leftknot.vertices[].numberOfVertex elements >= 1
return.leftknot.vertices[].visited == [1, 1, 1, 1, 1, 1]
return.leftknot.vertices[].visited elements == true
return.leftknot.binarycode.toString one of { "00", "000", "100" }
return.leftknot.numcircles == 0
return.leftknot.seifertCircles[].getClass().getName() elements == SeifertCircle.class
return.leftknot.seifertCircles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
return.rightknot.crossings[] elements has only one value
return.rightknot.crossings[].getClass().getName() elements == Crossing.class
return.rightknot.crossings[].getClass().getName() one of { [], [Crossing] }
return.rightknot.crossings[].overstrand elements has only one value
return.rightknot.crossings[].understrand elements has only one value
return.rightknot.crossings[].posneg elements == false
return.rightknot.crossings[].posneg one of { [], [0] }
return.rightknot.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
return.rightknot.vertices[].numberOfVertex elements >= 1
return.rightknot.vertices[].visited == [1, 1, 1, 1, 1, 1]
return.rightknot.vertices[].visited elements == true
return.rightknot.binarycode.toString one of { "001", "01", "101" }
return.rightknot.numcircles == 0
return.rightknot.seifertCircles[].getClass().getName() elements == SeifertCircle.class
return.rightknot.seifertCircles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
return.numcircles == 0
return.seifertCircles != null
return.seifertCircles[] elements != null
return.seifertCircles[].getClass().getName() elements == SeifertCircle.class
return.seifertCircles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
return.smoothing != null
size(this.seifertCircles[]) one of { 1, 2, 3 }
size(return.crossings[]) one of { 0, 1, 2 }
size(return.vertices[]) == 6
size(return.leftknot.crossings[]) one of { 0, 1 }
size(return.leftknot.vertices[]) == 6
size(return.leftknot.seifertCircles[]) one of { 1, 2 }
size(return.rightknot.crossings[]) one of { 0, 1 }
size(return.rightknot.seifertCircles[]) one of { 1, 2 }
size(return.seifertCircles[]) one of { 1, 2 }
this.crossings.getClass().getName() != return.vertices.getClass().getName()
this.vertices.getClass().getName() != return.crossings.getClass().getName()
this.vertices[].getClass().getName() == return.vertices[].getClass().getName() (elementwise)
this.vertices[].getClass().getName() == return.leftknot.vertices[].getClass().getName() (elementwise)
return.smoothing.one in this.vertices[].numberOfVertex
return.smoothing.two in this.vertices[].numberOfVertex
return.smoothing.three in this.vertices[].numberOfVertex
return.smoothing.four in this.vertices[].numberOfVertex
size(return.vertices[]) in this.vertices[].numberOfVertex
this.vertices[].numberOfVertex elements <= size(return.vertices[])
size(return.vertices[])-1 in this.vertices[].numberOfVertex
size(return.leftknot.vertices[]) in this.vertices[].numberOfVertex
size(return.leftknot.vertices[])-1 in this.vertices[].numberOfVertex
this.vertices[return.smoothing.one] in this.vertices[].from
this.vertices[return.smoothing.one-1] in this.vertices[].from
this.vertices[return.smoothing.two-1] in this.vertices[].from
this.vertices[return.smoothing.three-1] in this.vertices[].from
this.vertices[return.smoothing.four-1] in this.vertices[].from
return.smoothing.one in this.vertices[].from.numberOfVertex
return.smoothing.two in this.vertices[].from.numberOfVertex
return.smoothing.three in this.vertices[].from.numberOfVertex
return.smoothing.four in this.vertices[].from.numberOfVertex
size(return.vertices[]) in this.vertices[].from.numberOfVertex
this.vertices[].from.numberOfVertex elements <= size(return.vertices[])
size(return.vertices[])-1 in this.vertices[].from.numberOfVertex
size(return.leftknot.vertices[]) in this.vertices[].from.numberOfVertex
size(return.leftknot.vertices[])-1 in this.vertices[].from.numberOfVertex
this.vertices[return.smoothing.one] in this.vertices[].from.from
this.vertices[return.smoothing.one-1] in this.vertices[].from.from
this.vertices[return.smoothing.two-1] in this.vertices[].from.from
this.vertices[return.smoothing.three-1] in this.vertices[].from.from
this.vertices[return.smoothing.four-1] in this.vertices[].from.from
this.vertices[return.smoothing.one] in this.vertices[].from.to
this.vertices[return.smoothing.one-1] in this.vertices[].from.to
this.vertices[return.smoothing.two-1] in this.vertices[].from.to
this.vertices[return.smoothing.three-1] in this.vertices[].from.to
this.vertices[return.smoothing.four-1] in this.vertices[].from.to
this.vertices[return.smoothing.one] in this.vertices[].to
this.vertices[return.smoothing.one-1] in this.vertices[].to
this.vertices[return.smoothing.two-1] in this.vertices[].to
this.vertices[return.smoothing.three-1] in this.vertices[].to
this.vertices[return.smoothing.four-1] in this.vertices[].to
return.smoothing.one in this.vertices[].to.numberOfVertex
return.smoothing.two in this.vertices[].to.numberOfVertex
return.smoothing.three in this.vertices[].to.numberOfVertex
return.smoothing.four in this.vertices[].to.numberOfVertex
size(return.vertices[]) in this.vertices[].to.numberOfVertex
this.vertices[].to.numberOfVertex elements <= size(return.vertices[])
size(return.vertices[])-1 in this.vertices[].to.numberOfVertex
size(return.leftknot.vertices[]) in this.vertices[].to.numberOfVertex
size(return.leftknot.vertices[])-1 in this.vertices[].to.numberOfVertex
this.vertices[return.smoothing.one] in this.vertices[].to.from
this.vertices[return.smoothing.one-1] in this.vertices[].to.from
this.vertices[return.smoothing.two-1] in this.vertices[].to.from
this.vertices[return.smoothing.three-1] in this.vertices[].to.from
this.vertices[return.smoothing.four-1] in this.vertices[].to.from
this.vertices[return.smoothing.one] in this.vertices[].to.to
this.vertices[return.smoothing.one-1] in this.vertices[].to.to
this.vertices[return.smoothing.two-1] in this.vertices[].to.to
this.vertices[return.smoothing.three-1] in this.vertices[].to.to
this.vertices[return.smoothing.four-1] in this.vertices[].to.to
return.smoothing.one in this.leftknot.vertices[].numberOfVertex
return.smoothing.two in this.leftknot.vertices[].numberOfVertex
return.smoothing.three in this.leftknot.vertices[].numberOfVertex
return.smoothing.four in this.leftknot.vertices[].numberOfVertex
size(return.vertices[]) in this.leftknot.vertices[].numberOfVertex
this.leftknot.vertices[].numberOfVertex elements <= size(return.vertices[])
size(return.vertices[])-1 in this.leftknot.vertices[].numberOfVertex
size(return.leftknot.vertices[]) in this.leftknot.vertices[].numberOfVertex
size(return.leftknot.vertices[])-1 in this.leftknot.vertices[].numberOfVertex
return.vertices[this.rightknot.smoothing.two-1] in this.leftknot.vertices[].from
return.vertices[this.rightknot.smoothing.three-1] in this.leftknot.vertices[].from
return.vertices[this.rightknot.smoothing.four-1] in this.leftknot.vertices[].from
return.vertices[this.smoothing.one] in this.leftknot.vertices[].from
return.vertices[this.smoothing.one-1] in this.leftknot.vertices[].from
return.vertices[this.smoothing.two] in this.leftknot.vertices[].from
return.vertices[this.smoothing.two-1] in this.leftknot.vertices[].from
return.vertices[this.smoothing.three-1] in this.leftknot.vertices[].from
return.vertices[this.smoothing.four-1] in this.leftknot.vertices[].from
return.vertices[return.smoothing.one] in this.leftknot.vertices[].from
return.vertices[return.smoothing.one-1] in this.leftknot.vertices[].from
return.vertices[return.smoothing.two-1] in this.leftknot.vertices[].from
return.vertices[return.smoothing.three-1] in this.leftknot.vertices[].from
return.vertices[return.smoothing.four-1] in this.leftknot.vertices[].from
return.vertices[this.rightknot.smoothing.two-1] in this.leftknot.vertices[].to
return.vertices[this.rightknot.smoothing.three-1] in this.leftknot.vertices[].to
return.vertices[this.rightknot.smoothing.four-1] in this.leftknot.vertices[].to
return.vertices[this.smoothing.one] in this.leftknot.vertices[].to
return.vertices[this.smoothing.one-1] in this.leftknot.vertices[].to
return.vertices[this.smoothing.two] in this.leftknot.vertices[].to
return.vertices[this.smoothing.two-1] in this.leftknot.vertices[].to
return.vertices[this.smoothing.three-1] in this.leftknot.vertices[].to
return.vertices[this.smoothing.four-1] in this.leftknot.vertices[].to
return.vertices[return.smoothing.one] in this.leftknot.vertices[].to
return.vertices[return.smoothing.one-1] in this.leftknot.vertices[].to
return.vertices[return.smoothing.two-1] in this.leftknot.vertices[].to
return.vertices[return.smoothing.three-1] in this.leftknot.vertices[].to
return.vertices[return.smoothing.four-1] in this.leftknot.vertices[].to
return.smoothing.one in this.leftknot.leftknot.vertices[].numberOfVertex
return.smoothing.two in this.leftknot.leftknot.vertices[].numberOfVertex
return.smoothing.three in this.leftknot.leftknot.vertices[].numberOfVertex
return.smoothing.four in this.leftknot.leftknot.vertices[].numberOfVertex
size(return.vertices[]) in this.leftknot.leftknot.vertices[].numberOfVertex
size(return.vertices[])-1 in this.leftknot.leftknot.vertices[].numberOfVertex
size(return.leftknot.vertices[]) in this.leftknot.leftknot.vertices[].numberOfVertex
size(return.leftknot.vertices[])-1 in this.leftknot.leftknot.vertices[].numberOfVertex
return.leftknot.vertices[this.rightknot.smoothing.two] in this.leftknot.leftknot.vertices[].from
return.leftknot.vertices[this.rightknot.smoothing.two-1] in this.leftknot.leftknot.vertices[].from
return.leftknot.vertices[this.rightknot.smoothing.three-1] in this.leftknot.leftknot.vertices[].from
return.leftknot.vertices[this.rightknot.smoothing.four-1] in this.leftknot.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.one] in this.leftknot.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.one-1] in this.leftknot.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.two] in this.leftknot.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.two-1] in this.leftknot.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.three] in this.leftknot.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.three-1] in this.leftknot.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.four] in this.leftknot.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.four-1] in this.leftknot.leftknot.vertices[].from
return.leftknot.vertices[return.smoothing.one] in this.leftknot.leftknot.vertices[].from
return.leftknot.vertices[return.smoothing.one-1] in this.leftknot.leftknot.vertices[].from
return.leftknot.vertices[return.smoothing.two] in this.leftknot.leftknot.vertices[].from
return.leftknot.vertices[return.smoothing.three-1] in this.leftknot.leftknot.vertices[].from
return.leftknot.vertices[return.smoothing.four-1] in this.leftknot.leftknot.vertices[].from
return.leftknot.vertices[this.rightknot.smoothing.two] in this.leftknot.leftknot.vertices[].to
return.leftknot.vertices[this.rightknot.smoothing.two-1] in this.leftknot.leftknot.vertices[].to
return.leftknot.vertices[this.rightknot.smoothing.three-1] in this.leftknot.leftknot.vertices[].to
return.leftknot.vertices[this.rightknot.smoothing.four-1] in this.leftknot.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.one] in this.leftknot.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.one-1] in this.leftknot.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.two] in this.leftknot.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.two-1] in this.leftknot.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.three] in this.leftknot.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.three-1] in this.leftknot.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.four] in this.leftknot.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.four-1] in this.leftknot.leftknot.vertices[].to
return.leftknot.vertices[return.smoothing.one] in this.leftknot.leftknot.vertices[].to
return.leftknot.vertices[return.smoothing.one-1] in this.leftknot.leftknot.vertices[].to
return.leftknot.vertices[return.smoothing.two] in this.leftknot.leftknot.vertices[].to
return.leftknot.vertices[return.smoothing.three-1] in this.leftknot.leftknot.vertices[].to
return.leftknot.vertices[return.smoothing.four-1] in this.leftknot.leftknot.vertices[].to
return.smoothing.one in this.leftknot.rightknot.vertices[].numberOfVertex
return.smoothing.two in this.leftknot.rightknot.vertices[].numberOfVertex
return.smoothing.three in this.leftknot.rightknot.vertices[].numberOfVertex
return.smoothing.four in this.leftknot.rightknot.vertices[].numberOfVertex
size(return.vertices[]) in this.leftknot.rightknot.vertices[].numberOfVertex
size(return.vertices[])-1 in this.leftknot.rightknot.vertices[].numberOfVertex
size(return.leftknot.vertices[]) in this.leftknot.rightknot.vertices[].numberOfVertex
size(return.leftknot.vertices[])-1 in this.leftknot.rightknot.vertices[].numberOfVertex
return.rightknot.vertices[this.rightknot.smoothing.two] in this.leftknot.rightknot.vertices[].from
return.rightknot.vertices[this.rightknot.smoothing.two-1] in this.leftknot.rightknot.vertices[].from
return.rightknot.vertices[this.rightknot.smoothing.three-1] in this.leftknot.rightknot.vertices[].from
return.rightknot.vertices[this.rightknot.smoothing.four-1] in this.leftknot.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.one] in this.leftknot.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.one-1] in this.leftknot.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.two] in this.leftknot.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.two-1] in this.leftknot.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.three] in this.leftknot.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.three-1] in this.leftknot.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.four] in this.leftknot.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.four-1] in this.leftknot.rightknot.vertices[].from
return.rightknot.vertices[return.smoothing.one] in this.leftknot.rightknot.vertices[].from
return.rightknot.vertices[return.smoothing.one-1] in this.leftknot.rightknot.vertices[].from
return.rightknot.vertices[return.smoothing.two] in this.leftknot.rightknot.vertices[].from
return.rightknot.vertices[return.smoothing.three-1] in this.leftknot.rightknot.vertices[].from
return.rightknot.vertices[return.smoothing.four-1] in this.leftknot.rightknot.vertices[].from
return.rightknot.vertices[this.rightknot.smoothing.two] in this.leftknot.rightknot.vertices[].to
return.rightknot.vertices[this.rightknot.smoothing.two-1] in this.leftknot.rightknot.vertices[].to
return.rightknot.vertices[this.rightknot.smoothing.three-1] in this.leftknot.rightknot.vertices[].to
return.rightknot.vertices[this.rightknot.smoothing.four-1] in this.leftknot.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.one] in this.leftknot.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.one-1] in this.leftknot.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.two] in this.leftknot.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.two-1] in this.leftknot.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.three] in this.leftknot.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.three-1] in this.leftknot.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.four] in this.leftknot.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.four-1] in this.leftknot.rightknot.vertices[].to
return.rightknot.vertices[return.smoothing.one] in this.leftknot.rightknot.vertices[].to
return.rightknot.vertices[return.smoothing.one-1] in this.leftknot.rightknot.vertices[].to
return.rightknot.vertices[return.smoothing.two] in this.leftknot.rightknot.vertices[].to
return.rightknot.vertices[return.smoothing.three-1] in this.leftknot.rightknot.vertices[].to
return.rightknot.vertices[return.smoothing.four-1] in this.leftknot.rightknot.vertices[].to
return.smoothing.one in this.rightknot.vertices[].numberOfVertex
return.smoothing.two in this.rightknot.vertices[].numberOfVertex
return.smoothing.three in this.rightknot.vertices[].numberOfVertex
return.smoothing.four in this.rightknot.vertices[].numberOfVertex
size(return.vertices[]) in this.rightknot.vertices[].numberOfVertex
this.rightknot.vertices[].numberOfVertex elements <= size(return.vertices[])
size(return.vertices[])-1 in this.rightknot.vertices[].numberOfVertex
size(return.leftknot.vertices[]) in this.rightknot.vertices[].numberOfVertex
size(return.leftknot.vertices[])-1 in this.rightknot.vertices[].numberOfVertex
this.rightknot.vertices[return.smoothing.one] in this.rightknot.vertices[].from
this.rightknot.vertices[return.smoothing.one-1] in this.rightknot.vertices[].from
this.rightknot.vertices[return.smoothing.two-1] in this.rightknot.vertices[].from
this.rightknot.vertices[return.smoothing.three-1] in this.rightknot.vertices[].from
this.rightknot.vertices[return.smoothing.four-1] in this.rightknot.vertices[].from
this.rightknot.vertices[return.smoothing.one] in this.rightknot.vertices[].to
this.rightknot.vertices[return.smoothing.one-1] in this.rightknot.vertices[].to
this.rightknot.vertices[return.smoothing.two-1] in this.rightknot.vertices[].to
this.rightknot.vertices[return.smoothing.three-1] in this.rightknot.vertices[].to
this.rightknot.vertices[return.smoothing.four-1] in this.rightknot.vertices[].to
return.smoothing.one in this.rightknot.leftknot.vertices[].numberOfVertex
return.smoothing.two in this.rightknot.leftknot.vertices[].numberOfVertex
return.smoothing.three in this.rightknot.leftknot.vertices[].numberOfVertex
return.smoothing.four in this.rightknot.leftknot.vertices[].numberOfVertex
size(return.vertices[]) in this.rightknot.leftknot.vertices[].numberOfVertex
size(return.vertices[])-1 in this.rightknot.leftknot.vertices[].numberOfVertex
size(return.leftknot.vertices[]) in this.rightknot.leftknot.vertices[].numberOfVertex
size(return.leftknot.vertices[])-1 in this.rightknot.leftknot.vertices[].numberOfVertex
this.rightknot.leftknot.vertices[return.smoothing.one] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[return.smoothing.one-1] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[return.smoothing.two] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[return.smoothing.three-1] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[return.smoothing.four-1] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[return.smoothing.one] in this.rightknot.leftknot.vertices[].to
this.rightknot.leftknot.vertices[return.smoothing.one-1] in this.rightknot.leftknot.vertices[].to
this.rightknot.leftknot.vertices[return.smoothing.two] in this.rightknot.leftknot.vertices[].to
this.rightknot.leftknot.vertices[return.smoothing.three-1] in this.rightknot.leftknot.vertices[].to
this.rightknot.leftknot.vertices[return.smoothing.four-1] in this.rightknot.leftknot.vertices[].to
return.smoothing.one in this.rightknot.rightknot.vertices[].numberOfVertex
return.smoothing.two in this.rightknot.rightknot.vertices[].numberOfVertex
return.smoothing.three in this.rightknot.rightknot.vertices[].numberOfVertex
return.smoothing.four in this.rightknot.rightknot.vertices[].numberOfVertex
size(return.vertices[]) in this.rightknot.rightknot.vertices[].numberOfVertex
size(return.vertices[])-1 in this.rightknot.rightknot.vertices[].numberOfVertex
size(return.leftknot.vertices[]) in this.rightknot.rightknot.vertices[].numberOfVertex
size(return.leftknot.vertices[])-1 in this.rightknot.rightknot.vertices[].numberOfVertex
this.rightknot.rightknot.vertices[return.smoothing.one] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[return.smoothing.one-1] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[return.smoothing.two] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[return.smoothing.three-1] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[return.smoothing.four-1] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[return.smoothing.one] in this.rightknot.rightknot.vertices[].to
this.rightknot.rightknot.vertices[return.smoothing.one-1] in this.rightknot.rightknot.vertices[].to
this.rightknot.rightknot.vertices[return.smoothing.two] in this.rightknot.rightknot.vertices[].to
this.rightknot.rightknot.vertices[return.smoothing.three-1] in this.rightknot.rightknot.vertices[].to
this.rightknot.rightknot.vertices[return.smoothing.four-1] in this.rightknot.rightknot.vertices[].to
this.rightknot.smoothing.two in return.vertices[].numberOfVertex
this.rightknot.smoothing.two in return.leftknot.vertices[].numberOfVertex
this.rightknot.smoothing.two in return.rightknot.vertices[].numberOfVertex
this.rightknot.smoothing.two != return.smoothing.one
this.rightknot.smoothing.two != return.smoothing.two
this.rightknot.smoothing.two <= size(return.vertices[])
this.rightknot.smoothing.two != size(return.vertices[])-1
this.rightknot.smoothing.three in return.vertices[].numberOfVertex
this.rightknot.smoothing.three in return.leftknot.vertices[].numberOfVertex
this.rightknot.smoothing.three in return.rightknot.vertices[].numberOfVertex
this.rightknot.smoothing.three != return.smoothing.one
this.rightknot.smoothing.three != return.smoothing.three
this.rightknot.smoothing.three <= size(return.vertices[])
this.rightknot.smoothing.three != size(return.vertices[])-1
size(return.leftknot.vertices[]) % this.rightknot.smoothing.three == 0
this.rightknot.smoothing.four in return.vertices[].numberOfVertex
this.rightknot.smoothing.four in return.leftknot.vertices[].numberOfVertex
this.rightknot.smoothing.four in return.rightknot.vertices[].numberOfVertex
this.rightknot.smoothing.four != return.smoothing.one
this.rightknot.smoothing.four != return.smoothing.four
this.rightknot.smoothing.four <= size(return.vertices[])
this.smoothing.one in return.vertices[].numberOfVertex
this.smoothing.one in return.leftknot.vertices[].numberOfVertex
this.smoothing.one in return.rightknot.vertices[].numberOfVertex
this.smoothing.one != return.smoothing.one
this.smoothing.one != return.smoothing.two
this.smoothing.one != return.smoothing.three
this.smoothing.one != return.smoothing.four
this.smoothing.one <= size(return.vertices[])-1
this.smoothing.two in return.vertices[].numberOfVertex
this.smoothing.two in return.leftknot.vertices[].numberOfVertex
this.smoothing.two in return.rightknot.vertices[].numberOfVertex
this.smoothing.two <= return.smoothing.one
this.smoothing.two != return.smoothing.two
this.smoothing.two != return.smoothing.three
this.smoothing.two != return.smoothing.four
this.smoothing.two <= size(return.vertices[])-1
this.smoothing.three in return.vertices[].numberOfVertex
this.smoothing.three in return.leftknot.vertices[].numberOfVertex
this.smoothing.three in return.rightknot.vertices[].numberOfVertex
this.smoothing.three != return.smoothing.one
this.smoothing.three <= size(return.vertices[])
this.smoothing.three != size(return.vertices[])-1
this.smoothing.four in return.vertices[].numberOfVertex
this.smoothing.four in return.leftknot.vertices[].numberOfVertex
this.smoothing.four in return.rightknot.vertices[].numberOfVertex
this.smoothing.four != return.smoothing.four
this.smoothing.four <= size(return.vertices[])
return.crossings.getClass().getName() != return.vertices.getClass().getName()
return.vertices[].getClass().getName() == return.leftknot.vertices[].getClass().getName() (elementwise)
return.smoothing.one in return.vertices[].numberOfVertex
return.smoothing.two in return.vertices[].numberOfVertex
return.smoothing.three in return.vertices[].numberOfVertex
return.smoothing.four in return.vertices[].numberOfVertex
return.vertices[].numberOfVertex elements <= size(this.vertices[])
size(this.vertices[]) in return.vertices[].numberOfVertex
size(this.vertices[])-1 in return.vertices[].numberOfVertex
return.vertices[].numberOfVertex elements <= size(return.vertices[])
size(return.vertices[]) in return.vertices[].numberOfVertex
size(return.vertices[])-1 in return.vertices[].numberOfVertex
size(return.leftknot.vertices[]) in return.vertices[].numberOfVertex
size(return.leftknot.vertices[])-1 in return.vertices[].numberOfVertex
return.vertices[this.rightknot.smoothing.two-1] in return.vertices[].from
return.vertices[this.rightknot.smoothing.three-1] in return.vertices[].from
return.vertices[this.rightknot.smoothing.four-1] in return.vertices[].from
return.vertices[this.smoothing.one] in return.vertices[].from
return.vertices[this.smoothing.one-1] in return.vertices[].from
return.vertices[this.smoothing.two] in return.vertices[].from
return.vertices[this.smoothing.two-1] in return.vertices[].from
return.vertices[this.smoothing.three-1] in return.vertices[].from
return.vertices[this.smoothing.four-1] in return.vertices[].from
return.vertices[return.smoothing.one] in return.vertices[].from
return.vertices[return.smoothing.one-1] in return.vertices[].from
return.vertices[return.smoothing.two-1] in return.vertices[].from
return.vertices[return.smoothing.three-1] in return.vertices[].from
return.vertices[return.smoothing.four-1] in return.vertices[].from
return.vertices[this.rightknot.smoothing.two-1] in return.vertices[].to
return.vertices[this.rightknot.smoothing.three-1] in return.vertices[].to
return.vertices[this.rightknot.smoothing.four-1] in return.vertices[].to
return.vertices[this.smoothing.one] in return.vertices[].to
return.vertices[this.smoothing.one-1] in return.vertices[].to
return.vertices[this.smoothing.two] in return.vertices[].to
return.vertices[this.smoothing.two-1] in return.vertices[].to
return.vertices[this.smoothing.three-1] in return.vertices[].to
return.vertices[this.smoothing.four-1] in return.vertices[].to
return.vertices[return.smoothing.one] in return.vertices[].to
return.vertices[return.smoothing.one-1] in return.vertices[].to
return.vertices[return.smoothing.two-1] in return.vertices[].to
return.vertices[return.smoothing.three-1] in return.vertices[].to
return.vertices[return.smoothing.four-1] in return.vertices[].to
return.smoothing.one in return.leftknot.vertices[].numberOfVertex
return.smoothing.two in return.leftknot.vertices[].numberOfVertex
return.smoothing.three in return.leftknot.vertices[].numberOfVertex
return.smoothing.four in return.leftknot.vertices[].numberOfVertex
size(this.vertices[]) in return.leftknot.vertices[].numberOfVertex
size(this.vertices[])-1 in return.leftknot.vertices[].numberOfVertex
size(return.vertices[]) in return.leftknot.vertices[].numberOfVertex
size(return.vertices[])-1 in return.leftknot.vertices[].numberOfVertex
size(return.leftknot.vertices[]) in return.leftknot.vertices[].numberOfVertex
size(return.leftknot.vertices[])-1 in return.leftknot.vertices[].numberOfVertex
return.leftknot.vertices[this.rightknot.smoothing.two] in return.leftknot.vertices[].from
return.leftknot.vertices[this.rightknot.smoothing.two-1] in return.leftknot.vertices[].from
return.leftknot.vertices[this.rightknot.smoothing.three-1] in return.leftknot.vertices[].from
return.leftknot.vertices[this.rightknot.smoothing.four-1] in return.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.one] in return.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.one-1] in return.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.two] in return.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.two-1] in return.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.three] in return.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.three-1] in return.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.four] in return.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.four-1] in return.leftknot.vertices[].from
return.leftknot.vertices[return.smoothing.one] in return.leftknot.vertices[].from
return.leftknot.vertices[return.smoothing.one-1] in return.leftknot.vertices[].from
return.leftknot.vertices[return.smoothing.two] in return.leftknot.vertices[].from
return.leftknot.vertices[return.smoothing.three-1] in return.leftknot.vertices[].from
return.leftknot.vertices[return.smoothing.four-1] in return.leftknot.vertices[].from
return.leftknot.vertices[this.rightknot.smoothing.two] in return.leftknot.vertices[].to
return.leftknot.vertices[this.rightknot.smoothing.two-1] in return.leftknot.vertices[].to
return.leftknot.vertices[this.rightknot.smoothing.three-1] in return.leftknot.vertices[].to
return.leftknot.vertices[this.rightknot.smoothing.four-1] in return.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.one] in return.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.one-1] in return.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.two] in return.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.two-1] in return.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.three] in return.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.three-1] in return.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.four] in return.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.four-1] in return.leftknot.vertices[].to
return.leftknot.vertices[return.smoothing.one] in return.leftknot.vertices[].to
return.leftknot.vertices[return.smoothing.one-1] in return.leftknot.vertices[].to
return.leftknot.vertices[return.smoothing.two] in return.leftknot.vertices[].to
return.leftknot.vertices[return.smoothing.three-1] in return.leftknot.vertices[].to
return.leftknot.vertices[return.smoothing.four-1] in return.leftknot.vertices[].to
return.smoothing.one in return.rightknot.vertices[].numberOfVertex
return.smoothing.two in return.rightknot.vertices[].numberOfVertex
return.smoothing.three in return.rightknot.vertices[].numberOfVertex
return.smoothing.four in return.rightknot.vertices[].numberOfVertex
size(this.vertices[]) in return.rightknot.vertices[].numberOfVertex
size(this.vertices[])-1 in return.rightknot.vertices[].numberOfVertex
size(return.vertices[]) in return.rightknot.vertices[].numberOfVertex
size(return.vertices[])-1 in return.rightknot.vertices[].numberOfVertex
size(return.leftknot.vertices[]) in return.rightknot.vertices[].numberOfVertex
size(return.leftknot.vertices[])-1 in return.rightknot.vertices[].numberOfVertex
return.rightknot.vertices[this.rightknot.smoothing.two] in return.rightknot.vertices[].from
return.rightknot.vertices[this.rightknot.smoothing.two-1] in return.rightknot.vertices[].from
return.rightknot.vertices[this.rightknot.smoothing.three-1] in return.rightknot.vertices[].from
return.rightknot.vertices[this.rightknot.smoothing.four-1] in return.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.one] in return.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.one-1] in return.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.two] in return.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.two-1] in return.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.three] in return.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.three-1] in return.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.four] in return.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.four-1] in return.rightknot.vertices[].from
return.rightknot.vertices[return.smoothing.one] in return.rightknot.vertices[].from
return.rightknot.vertices[return.smoothing.one-1] in return.rightknot.vertices[].from
return.rightknot.vertices[return.smoothing.two] in return.rightknot.vertices[].from
return.rightknot.vertices[return.smoothing.three-1] in return.rightknot.vertices[].from
return.rightknot.vertices[return.smoothing.four-1] in return.rightknot.vertices[].from
return.rightknot.vertices[this.rightknot.smoothing.two] in return.rightknot.vertices[].to
return.rightknot.vertices[this.rightknot.smoothing.two-1] in return.rightknot.vertices[].to
return.rightknot.vertices[this.rightknot.smoothing.three-1] in return.rightknot.vertices[].to
return.rightknot.vertices[this.rightknot.smoothing.four-1] in return.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.one] in return.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.one-1] in return.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.two] in return.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.two-1] in return.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.three] in return.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.three-1] in return.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.four] in return.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.four-1] in return.rightknot.vertices[].to
return.rightknot.vertices[return.smoothing.one] in return.rightknot.vertices[].to
return.rightknot.vertices[return.smoothing.one-1] in return.rightknot.vertices[].to
return.rightknot.vertices[return.smoothing.two] in return.rightknot.vertices[].to
return.rightknot.vertices[return.smoothing.three-1] in return.rightknot.vertices[].to
return.rightknot.vertices[return.smoothing.four-1] in return.rightknot.vertices[].to
return.smoothing.one != return.smoothing.two
return.smoothing.one != return.smoothing.three
return.smoothing.one != return.smoothing.four
return.smoothing.one <= size(this.vertices[])-1
return.smoothing.one <= size(return.vertices[])-1
return.smoothing.two != return.smoothing.three
return.smoothing.two != return.smoothing.four
return.smoothing.two <= size(this.vertices[])
return.smoothing.two <= size(return.vertices[])
return.smoothing.three != return.smoothing.four
return.smoothing.three <= size(this.vertices[])
return.smoothing.three != size(this.vertices[])-1
return.smoothing.three <= size(return.vertices[])
return.smoothing.three != size(return.vertices[])-1
return.smoothing.four <= size(this.vertices[])
return.smoothing.four != size(this.vertices[])-1
return.smoothing.four <= size(return.vertices[])
return.smoothing.four != size(return.vertices[])-1
===========================================================================
Knot.getRightKnot():::ENTER
this.crossings.getClass().getName() == this.rightknot.crossings.getClass().getName()
this.vertices.getClass().getName() == this.rightknot.vertices.getClass().getName()
size(this.vertices[]) == size(this.rightknot.vertices[])
this.vertices[].from.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].from.visited elements == true
this.vertices[].to.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].to.visited elements == true
this.vertices[].visited == [1, 1, 1, 1, 1, 1]
this.vertices[].visited elements == true
this.seifertCircles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
this.smoothing.one one of { 1, 5 }
size(this.crossings[]) one of { 1, 2, 3 }
size(this.seifertCircles[]) one of { 1, 2 }
this.vertices[this.smoothing.two] in this.vertices[].from
this.vertices[this.smoothing.two] in this.vertices[].from.from
this.vertices[this.smoothing.two] in this.vertices[].from.to
this.vertices[this.smoothing.two] in this.vertices[].to
this.vertices[this.smoothing.two] in this.vertices[].to.from
this.vertices[this.smoothing.two] in this.vertices[].to.to
this.smoothing.two + this.smoothing.three + this.smoothing.four - 11 == 0
===========================================================================
Knot.getRightKnot():::EXIT
this.crossings == orig(this.crossings)
this.crossings.getClass().getName() == this.rightknot.crossings.getClass().getName()
this.crossings.getClass().getName() == return.crossings.getClass().getName()
this.crossings.getClass().getName() == return.leftknot.crossings.getClass().getName()
this.crossings.getClass().getName() == orig(this.crossings.getClass().getName())
this.crossings.getClass().getName() == orig(this.leftknot.crossings.getClass().getName())
this.crossings.getClass().getName() == orig(this.rightknot.crossings.getClass().getName())
this.crossings[] == orig(this.crossings[])
this.crossings[].overstrand == orig(this.crossings[].overstrand)
this.crossings[].understrand == orig(this.crossings[].understrand)
this.crossings[].posneg == orig(this.crossings[].posneg)
this.vertices == orig(this.vertices)
this.vertices.getClass().getName() == this.rightknot.vertices.getClass().getName()
this.vertices.getClass().getName() == return.vertices.getClass().getName()
this.vertices.getClass().getName() == return.leftknot.vertices.getClass().getName()
this.vertices.getClass().getName() == orig(this.vertices.getClass().getName())
this.vertices.getClass().getName() == orig(this.leftknot.vertices.getClass().getName())
this.vertices.getClass().getName() == orig(this.rightknot.vertices.getClass().getName())
this.vertices[] == orig(this.vertices[])
this.vertices[].getClass().getName() == return.leftknot.vertices[].getClass().getName()
this.vertices[].numberOfVertex == orig(this.vertices[].numberOfVertex)
this.vertices[].from == orig(this.vertices[].from)
this.vertices[].from.numberOfVertex == orig(this.vertices[].from.numberOfVertex)
this.vertices[].from.from == orig(this.vertices[].from.from)
this.vertices[].from.to == orig(this.vertices[].from.to)
this.vertices[].from.visited == orig(this.vertices[].from.visited)
this.vertices[].to == orig(this.vertices[].to)
this.vertices[].to.numberOfVertex == orig(this.vertices[].to.numberOfVertex)
this.vertices[].to.from == orig(this.vertices[].to.from)
this.vertices[].to.to == orig(this.vertices[].to.to)
this.vertices[].to.visited == orig(this.vertices[].to.visited)
this.vertices[].visited == orig(this.vertices[].visited)
this.binarycode == orig(this.binarycode)
this.binarycode.toString == orig(this.binarycode.toString)
this.leftknot == orig(this.leftknot)
this.leftknot.crossings == orig(this.leftknot.crossings)
this.leftknot.crossings[] == orig(this.leftknot.crossings[])
this.leftknot.crossings[].overstrand == orig(this.leftknot.crossings[].overstrand)
this.leftknot.crossings[].understrand == orig(this.leftknot.crossings[].understrand)
this.leftknot.crossings[].posneg == orig(this.leftknot.crossings[].posneg)
this.leftknot.vertices == orig(this.leftknot.vertices)
this.leftknot.vertices[] == orig(this.leftknot.vertices[])
this.leftknot.vertices[].numberOfVertex == orig(this.leftknot.vertices[].numberOfVertex)
this.leftknot.vertices[].from == orig(this.leftknot.vertices[].from)
this.leftknot.vertices[].to == orig(this.leftknot.vertices[].to)
this.leftknot.vertices[].visited == orig(this.leftknot.vertices[].visited)
this.leftknot.binarycode == orig(this.leftknot.binarycode)
this.leftknot.binarycode.toString == orig(this.leftknot.binarycode.toString)
this.leftknot.leftknot == orig(this.leftknot.leftknot)
this.leftknot.leftknot.crossings == orig(this.leftknot.leftknot.crossings)
this.leftknot.leftknot.crossings.getClass().getName() == return.leftknot.crossings.getClass().getName()
this.leftknot.leftknot.crossings[] == orig(this.leftknot.leftknot.crossings[])
this.leftknot.leftknot.crossings[].overstrand == orig(this.leftknot.leftknot.crossings[].overstrand)
this.leftknot.leftknot.crossings[].understrand == orig(this.leftknot.leftknot.crossings[].understrand)
this.leftknot.leftknot.crossings[].posneg == orig(this.leftknot.leftknot.crossings[].posneg)
this.leftknot.leftknot.vertices == orig(this.leftknot.leftknot.vertices)
this.leftknot.leftknot.vertices.getClass().getName() == return.leftknot.vertices.getClass().getName()
this.leftknot.leftknot.vertices[] == orig(this.leftknot.leftknot.vertices[])
this.leftknot.leftknot.vertices[].numberOfVertex == orig(this.leftknot.leftknot.vertices[].numberOfVertex)
this.leftknot.leftknot.vertices[].from == orig(this.leftknot.leftknot.vertices[].from)
this.leftknot.leftknot.vertices[].to == orig(this.leftknot.leftknot.vertices[].to)
this.leftknot.leftknot.vertices[].visited == orig(this.leftknot.leftknot.vertices[].visited)
this.leftknot.leftknot.binarycode == orig(this.leftknot.leftknot.binarycode)
this.leftknot.leftknot.binarycode.toString == orig(this.leftknot.leftknot.binarycode.toString)
this.leftknot.leftknot.leftknot == orig(this.leftknot.leftknot.leftknot)
this.leftknot.leftknot.rightknot == orig(this.leftknot.leftknot.rightknot)
this.leftknot.leftknot.numcircles == orig(this.leftknot.leftknot.numcircles)
this.leftknot.leftknot.seifertCircles == orig(this.leftknot.leftknot.seifertCircles)
this.leftknot.leftknot.seifertCircles[] == orig(this.leftknot.leftknot.seifertCircles[])
this.leftknot.leftknot.smoothing == orig(this.leftknot.leftknot.smoothing)
this.leftknot.rightknot == orig(this.leftknot.rightknot)
this.leftknot.rightknot.crossings == orig(this.leftknot.rightknot.crossings)
this.leftknot.rightknot.crossings.getClass().getName() == return.leftknot.crossings.getClass().getName()
this.leftknot.rightknot.crossings[] == orig(this.leftknot.rightknot.crossings[])
this.leftknot.rightknot.crossings[].overstrand == orig(this.leftknot.rightknot.crossings[].overstrand)
this.leftknot.rightknot.crossings[].understrand == orig(this.leftknot.rightknot.crossings[].understrand)
this.leftknot.rightknot.crossings[].posneg == orig(this.leftknot.rightknot.crossings[].posneg)
this.leftknot.rightknot.vertices == orig(this.leftknot.rightknot.vertices)
this.leftknot.rightknot.vertices.getClass().getName() == return.leftknot.vertices.getClass().getName()
this.leftknot.rightknot.vertices[] == orig(this.leftknot.rightknot.vertices[])
this.leftknot.rightknot.vertices[].numberOfVertex == orig(this.leftknot.rightknot.vertices[].numberOfVertex)
this.leftknot.rightknot.vertices[].from == orig(this.leftknot.rightknot.vertices[].from)
this.leftknot.rightknot.vertices[].to == orig(this.leftknot.rightknot.vertices[].to)
this.leftknot.rightknot.vertices[].visited == orig(this.leftknot.rightknot.vertices[].visited)
this.leftknot.rightknot.binarycode == orig(this.leftknot.rightknot.binarycode)
this.leftknot.rightknot.binarycode.toString == orig(this.leftknot.rightknot.binarycode.toString)
this.leftknot.rightknot.leftknot == orig(this.leftknot.rightknot.leftknot)
this.leftknot.rightknot.rightknot == orig(this.leftknot.rightknot.rightknot)
this.leftknot.rightknot.numcircles == orig(this.leftknot.rightknot.numcircles)
this.leftknot.rightknot.seifertCircles == orig(this.leftknot.rightknot.seifertCircles)
this.leftknot.rightknot.seifertCircles[] == orig(this.leftknot.rightknot.seifertCircles[])
this.leftknot.rightknot.smoothing == orig(this.leftknot.rightknot.smoothing)
this.leftknot.numcircles == orig(this.leftknot.numcircles)
this.leftknot.seifertCircles == orig(this.leftknot.seifertCircles)
this.leftknot.seifertCircles[] == orig(this.leftknot.seifertCircles[])
this.leftknot.smoothing == orig(this.leftknot.smoothing)
this.leftknot.smoothing.one == return.smoothing.one
this.leftknot.smoothing.two == orig(this.leftknot.smoothing.two)
this.leftknot.smoothing.three == orig(this.leftknot.smoothing.three)
this.leftknot.smoothing.four == orig(this.leftknot.smoothing.four)
this.leftknot.smoothing.reorder == orig(this.leftknot.smoothing.reorder)
this.rightknot == return
this.rightknot.crossings == return.crossings
this.rightknot.crossings[] == orig(this.rightknot.crossings[])
this.rightknot.crossings[].overstrand == orig(this.rightknot.crossings[].overstrand)
this.rightknot.crossings[].understrand == orig(this.rightknot.crossings[].understrand)
this.rightknot.crossings[].posneg == orig(this.rightknot.crossings[].posneg)
this.rightknot.vertices == return.vertices
this.rightknot.vertices[] == return.vertices[]
this.rightknot.vertices[].numberOfVertex == orig(this.rightknot.vertices[].numberOfVertex)
this.rightknot.vertices[].from == orig(this.rightknot.vertices[].from)
this.rightknot.vertices[].to == orig(this.rightknot.vertices[].to)
this.rightknot.vertices[].visited == orig(this.rightknot.vertices[].visited)
this.rightknot.binarycode == return.binarycode
this.rightknot.binarycode.toString == orig(this.rightknot.binarycode.toString)
this.rightknot.leftknot == return.leftknot
this.rightknot.leftknot.crossings == return.leftknot.crossings
this.rightknot.leftknot.crossings.getClass().getName() == return.leftknot.crossings.getClass().getName()
this.rightknot.leftknot.crossings[] == orig(this.rightknot.leftknot.crossings[])
this.rightknot.leftknot.crossings[].overstrand == orig(this.rightknot.leftknot.crossings[].overstrand)
this.rightknot.leftknot.crossings[].understrand == orig(this.rightknot.leftknot.crossings[].understrand)
this.rightknot.leftknot.crossings[].posneg == orig(this.rightknot.leftknot.crossings[].posneg)
this.rightknot.leftknot.vertices == return.leftknot.vertices
this.rightknot.leftknot.vertices.getClass().getName() == return.leftknot.vertices.getClass().getName()
this.rightknot.leftknot.vertices[] == return.leftknot.vertices[]
this.rightknot.leftknot.vertices[].numberOfVertex == orig(this.rightknot.leftknot.vertices[].numberOfVertex)
this.rightknot.leftknot.vertices[].from == orig(this.rightknot.leftknot.vertices[].from)
this.rightknot.leftknot.vertices[].to == orig(this.rightknot.leftknot.vertices[].to)
this.rightknot.leftknot.vertices[].visited == orig(this.rightknot.leftknot.vertices[].visited)
this.rightknot.leftknot.binarycode == return.leftknot.binarycode
this.rightknot.leftknot.binarycode.toString == orig(this.rightknot.leftknot.binarycode.toString)
this.rightknot.leftknot.leftknot == return.leftknot.leftknot
this.rightknot.leftknot.rightknot == return.leftknot.rightknot
this.rightknot.leftknot.numcircles == orig(this.rightknot.leftknot.numcircles)
this.rightknot.leftknot.seifertCircles == return.leftknot.seifertCircles
this.rightknot.leftknot.seifertCircles[] == orig(this.rightknot.leftknot.seifertCircles[])
this.rightknot.leftknot.smoothing == return.leftknot.smoothing
this.rightknot.rightknot == return.rightknot
this.rightknot.rightknot.crossings == return.rightknot.crossings
this.rightknot.rightknot.crossings.getClass().getName() == return.leftknot.crossings.getClass().getName()
this.rightknot.rightknot.crossings[] == orig(this.rightknot.rightknot.crossings[])
this.rightknot.rightknot.crossings[].overstrand == orig(this.rightknot.rightknot.crossings[].overstrand)
this.rightknot.rightknot.crossings[].understrand == orig(this.rightknot.rightknot.crossings[].understrand)
this.rightknot.rightknot.crossings[].posneg == orig(this.rightknot.rightknot.crossings[].posneg)
this.rightknot.rightknot.vertices == return.rightknot.vertices
this.rightknot.rightknot.vertices.getClass().getName() == return.leftknot.vertices.getClass().getName()
this.rightknot.rightknot.vertices[] == return.rightknot.vertices[]
this.rightknot.rightknot.vertices[].numberOfVertex == orig(this.rightknot.rightknot.vertices[].numberOfVertex)
this.rightknot.rightknot.vertices[].from == orig(this.rightknot.rightknot.vertices[].from)
this.rightknot.rightknot.vertices[].to == orig(this.rightknot.rightknot.vertices[].to)
this.rightknot.rightknot.vertices[].visited == orig(this.rightknot.rightknot.vertices[].visited)
this.rightknot.rightknot.binarycode == return.rightknot.binarycode
this.rightknot.rightknot.binarycode.toString == orig(this.rightknot.rightknot.binarycode.toString)
this.rightknot.rightknot.leftknot == return.rightknot.leftknot
this.rightknot.rightknot.rightknot == return.rightknot.rightknot
this.rightknot.rightknot.numcircles == orig(this.rightknot.rightknot.numcircles)
this.rightknot.rightknot.seifertCircles == return.rightknot.seifertCircles
this.rightknot.rightknot.seifertCircles[] == orig(this.rightknot.rightknot.seifertCircles[])
this.rightknot.rightknot.smoothing == return.rightknot.smoothing
this.rightknot.numcircles == orig(this.rightknot.numcircles)
this.rightknot.seifertCircles == return.seifertCircles
this.rightknot.seifertCircles[] == orig(this.rightknot.seifertCircles[])
this.rightknot.smoothing == return.smoothing
this.rightknot.smoothing.one == return.smoothing.one
this.rightknot.smoothing.two == return.smoothing.two
this.rightknot.smoothing.three == return.smoothing.three
this.rightknot.smoothing.four == return.smoothing.four
this.rightknot.smoothing.reorder == return.smoothing.reorder
this.numcircles == orig(this.numcircles)
this.seifertCircles == orig(this.seifertCircles)
this.seifertCircles[] == orig(this.seifertCircles[])
this.smoothing == orig(this.smoothing)
this.smoothing.one == orig(this.smoothing.one)
this.smoothing.two == orig(this.smoothing.two)
this.smoothing.three == orig(this.smoothing.three)
this.smoothing.four == orig(this.smoothing.four)
this.smoothing.reorder == orig(this.smoothing.reorder)
return == orig(this.rightknot)
return.crossings == orig(this.rightknot.crossings)
return.vertices == orig(this.rightknot.vertices)
return.vertices[] == orig(this.rightknot.vertices[])
return.binarycode == orig(this.rightknot.binarycode)
return.leftknot == orig(this.rightknot.leftknot)
return.leftknot.crossings == orig(this.rightknot.leftknot.crossings)
return.leftknot.crossings.getClass().getName() == return.rightknot.crossings.getClass().getName()
return.leftknot.crossings.getClass().getName() == orig(this.leftknot.leftknot.crossings.getClass().getName())
return.leftknot.crossings.getClass().getName() == orig(this.leftknot.rightknot.crossings.getClass().getName())
return.leftknot.crossings.getClass().getName() == orig(this.rightknot.leftknot.crossings.getClass().getName())
return.leftknot.crossings.getClass().getName() == orig(this.rightknot.rightknot.crossings.getClass().getName())
return.leftknot.vertices == orig(this.rightknot.leftknot.vertices)
return.leftknot.vertices.getClass().getName() == return.rightknot.vertices.getClass().getName()
return.leftknot.vertices.getClass().getName() == orig(this.leftknot.leftknot.vertices.getClass().getName())
return.leftknot.vertices.getClass().getName() == orig(this.leftknot.rightknot.vertices.getClass().getName())
return.leftknot.vertices.getClass().getName() == orig(this.rightknot.leftknot.vertices.getClass().getName())
return.leftknot.vertices.getClass().getName() == orig(this.rightknot.rightknot.vertices.getClass().getName())
return.leftknot.vertices[] == orig(this.rightknot.leftknot.vertices[])
return.leftknot.binarycode == orig(this.rightknot.leftknot.binarycode)
return.leftknot.leftknot == orig(this.rightknot.leftknot.leftknot)
return.leftknot.rightknot == orig(this.rightknot.leftknot.rightknot)
return.leftknot.seifertCircles == orig(this.rightknot.leftknot.seifertCircles)
return.leftknot.smoothing == orig(this.rightknot.leftknot.smoothing)
return.rightknot == orig(this.rightknot.rightknot)
return.rightknot.crossings == orig(this.rightknot.rightknot.crossings)
return.rightknot.vertices == orig(this.rightknot.rightknot.vertices)
return.rightknot.vertices[] == orig(this.rightknot.rightknot.vertices[])
return.rightknot.binarycode == orig(this.rightknot.rightknot.binarycode)
return.rightknot.leftknot == orig(this.rightknot.rightknot.leftknot)
return.rightknot.rightknot == orig(this.rightknot.rightknot.rightknot)
return.rightknot.seifertCircles == orig(this.rightknot.rightknot.seifertCircles)
return.rightknot.smoothing == orig(this.rightknot.rightknot.smoothing)
return.seifertCircles == orig(this.rightknot.seifertCircles)
return.smoothing == orig(this.rightknot.smoothing)
return.smoothing.one == orig(this.leftknot.smoothing.one)
return.smoothing.one == orig(this.rightknot.smoothing.one)
return.smoothing.two == orig(this.rightknot.smoothing.two)
return.smoothing.three == orig(this.rightknot.smoothing.three)
return.smoothing.four == orig(this.rightknot.smoothing.four)
return.smoothing.reorder == orig(this.rightknot.smoothing.reorder)
size(this.vertices[]) == size(this.rightknot.vertices[])
size(this.vertices[]) == size(return.vertices[])
size(this.vertices[]) == size(return.leftknot.vertices[])
size(this.vertices[]) == orig(size(this.leftknot.vertices[]))
size(this.vertices[]) == orig(size(this.rightknot.vertices[]))
size(this.leftknot.leftknot.vertices[]) == size(return.leftknot.vertices[])
size(this.leftknot.rightknot.vertices[]) == size(return.leftknot.vertices[])
size(this.rightknot.rightknot.vertices[]) == size(return.leftknot.vertices[])
size(return.leftknot.vertices[]) == size(return.rightknot.vertices[])
size(return.leftknot.vertices[]) == orig(size(this.leftknot.leftknot.vertices[]))
size(return.leftknot.vertices[]) == orig(size(this.leftknot.rightknot.vertices[]))
size(return.leftknot.vertices[]) == orig(size(this.rightknot.rightknot.vertices[]))
this.leftknot.leftknot.vertices[this.leftknot.smoothing.two-1] == this.leftknot.leftknot.vertices[return.smoothing.two]
this.leftknot.leftknot.vertices[this.smoothing.one] == this.leftknot.leftknot.vertices[return.smoothing.two-1]
this.leftknot.leftknot.vertices[this.smoothing.four] == this.leftknot.leftknot.vertices[return.smoothing.four-1]
this.leftknot.leftknot.vertices[return.smoothing.two] == this.leftknot.leftknot.vertices[orig(this.leftknot.smoothing.two)-1]
this.leftknot.leftknot.vertices[return.smoothing.two] == orig(this.leftknot.leftknot.vertices[post(this.leftknot.smoothing.two)-1])
this.leftknot.leftknot.vertices[return.smoothing.two] == orig(this.leftknot.leftknot.vertices[this.leftknot.smoothing.two-1])
this.leftknot.rightknot.vertices[this.leftknot.smoothing.two-1] == this.leftknot.rightknot.vertices[return.smoothing.two]
this.leftknot.rightknot.vertices[this.smoothing.one] == this.leftknot.rightknot.vertices[return.smoothing.two-1]
this.leftknot.rightknot.vertices[this.smoothing.four] == this.leftknot.rightknot.vertices[return.smoothing.four-1]
this.leftknot.rightknot.vertices[return.smoothing.two] == this.leftknot.rightknot.vertices[orig(this.leftknot.smoothing.two)-1]
this.leftknot.rightknot.vertices[return.smoothing.two] == orig(this.leftknot.rightknot.vertices[post(this.leftknot.smoothing.two)-1])
this.leftknot.rightknot.vertices[return.smoothing.two] == orig(this.leftknot.rightknot.vertices[this.leftknot.smoothing.two-1])
this.rightknot.leftknot.vertices[this.leftknot.smoothing.two-1] == return.leftknot.vertices[return.smoothing.two]
this.rightknot.rightknot.vertices[this.leftknot.smoothing.two-1] == return.rightknot.vertices[return.smoothing.two]
return.leftknot.vertices[this.leftknot.smoothing.two-1] == return.leftknot.vertices[return.smoothing.two]
return.rightknot.vertices[this.leftknot.smoothing.two-1] == return.rightknot.vertices[return.smoothing.two]
orig(this.rightknot.leftknot.vertices[post(this.leftknot.smoothing.two)-1]) == return.leftknot.vertices[return.smoothing.two]
orig(this.rightknot.rightknot.vertices[post(this.leftknot.smoothing.two)-1]) == return.rightknot.vertices[return.smoothing.two]
this.rightknot.leftknot.vertices[orig(this.leftknot.smoothing.two)-1] == return.leftknot.vertices[return.smoothing.two]
this.rightknot.rightknot.vertices[orig(this.leftknot.smoothing.two)-1] == return.rightknot.vertices[return.smoothing.two]
return.leftknot.vertices[this.smoothing.one] == return.leftknot.vertices[return.smoothing.two-1]
return.rightknot.vertices[this.smoothing.one] == return.rightknot.vertices[return.smoothing.two-1]
return.leftknot.vertices[this.smoothing.four] == return.leftknot.vertices[return.smoothing.four-1]
return.rightknot.vertices[this.smoothing.four] == return.rightknot.vertices[return.smoothing.four-1]
return.leftknot.vertices[return.smoothing.two] == return.leftknot.vertices[orig(this.leftknot.smoothing.two)-1]
return.leftknot.vertices[return.smoothing.two] == orig(this.rightknot.leftknot.vertices[this.leftknot.smoothing.two-1])
return.rightknot.vertices[return.smoothing.two] == return.rightknot.vertices[orig(this.leftknot.smoothing.two)-1]
return.rightknot.vertices[return.smoothing.two] == orig(this.rightknot.rightknot.vertices[this.leftknot.smoothing.two-1])
this.vertices[].from.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].from.visited elements == true
this.vertices[].to.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].to.visited elements == true
this.vertices[].visited == [1, 1, 1, 1, 1, 1]
this.vertices[].visited elements == true
this.seifertCircles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
this.smoothing.one one of { 1, 5 }
return.crossings[].getClass().getName() elements == Crossing.class
return.crossings[].overstrand sorted by <
return.crossings[].understrand sorted by <
return.crossings[].posneg elements == false
return.crossings[].posneg one of { [], [0], [0, 0] }
return.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
return.vertices[].numberOfVertex elements >= 1
return.vertices[].numberOfVertex sorted by <
return.vertices[].visited == [1, 1, 1, 1, 1, 1]
return.vertices[].visited elements == true
return.leftknot.crossings.getClass().getName() == Crossing[].class
return.leftknot.crossings[] elements has only one value
return.leftknot.crossings[].getClass().getName() elements == Crossing.class
return.leftknot.crossings[].getClass().getName() one of { [], [Crossing] }
return.leftknot.crossings[].overstrand elements has only one value
return.leftknot.crossings[].understrand elements has only one value
return.leftknot.crossings[].posneg elements == false
return.leftknot.crossings[].posneg one of { [], [0] }
return.leftknot.vertices.getClass().getName() == Vertex[].class
return.leftknot.vertices[].getClass().getName() == [Vertex, Vertex, Vertex, Vertex, Vertex, Vertex]
return.leftknot.vertices[].getClass().getName() elements == Vertex.class
return.leftknot.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
return.leftknot.vertices[].numberOfVertex elements >= 1
return.leftknot.vertices[].visited == [1, 1, 1, 1, 1, 1]
return.leftknot.vertices[].visited elements == true
return.leftknot.binarycode.toString one of { "010", "10", "110" }
return.leftknot.numcircles == 0
return.leftknot.seifertCircles[].getClass().getName() elements == SeifertCircle.class
return.leftknot.seifertCircles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
return.rightknot.crossings[] elements has only one value
return.rightknot.crossings[].getClass().getName() elements == Crossing.class
return.rightknot.crossings[].getClass().getName() one of { [], [Crossing] }
return.rightknot.crossings[].overstrand elements has only one value
return.rightknot.crossings[].understrand elements has only one value
return.rightknot.crossings[].posneg elements == false
return.rightknot.crossings[].posneg one of { [], [0] }
return.rightknot.vertices[].numberOfVertex == [1, 2, 3, 4, 5, 6]
return.rightknot.vertices[].numberOfVertex elements >= 1
return.rightknot.vertices[].visited == [1, 1, 1, 1, 1, 1]
return.rightknot.vertices[].visited elements == true
return.rightknot.binarycode.toString one of { "011", "11", "111" }
return.rightknot.numcircles == 0
return.rightknot.seifertCircles[].getClass().getName() elements == SeifertCircle.class
return.rightknot.seifertCircles[].getClass().getName() one of { [SeifertCircle, SeifertCircle], [SeifertCircle, SeifertCircle, SeifertCircle] }
return.numcircles == 0
return.seifertCircles[].getClass().getName() elements == SeifertCircle.class
size(this.crossings[]) one of { 1, 2, 3 }
size(this.seifertCircles[]) one of { 1, 2 }
size(return.crossings[]) one of { 0, 1, 2 }
size(return.leftknot.crossings[]) one of { 0, 1 }
size(return.leftknot.vertices[]) == 6
size(return.leftknot.seifertCircles[]) one of { 1, 2 }
size(return.rightknot.crossings[]) one of { 0, 1 }
size(return.rightknot.seifertCircles[]) one of { 2, 3 }
size(return.seifertCircles[]) one of { 1, 2, 3 }
this.vertices[].getClass().getName() == return.leftknot.vertices[].getClass().getName() (elementwise)
return.smoothing.one in this.vertices[].numberOfVertex
return.smoothing.two in this.vertices[].numberOfVertex
return.smoothing.three in this.vertices[].numberOfVertex
return.smoothing.four in this.vertices[].numberOfVertex
size(return.leftknot.vertices[]) in this.vertices[].numberOfVertex
size(return.leftknot.vertices[])-1 in this.vertices[].numberOfVertex
this.vertices[this.smoothing.two] in this.vertices[].from
this.vertices[return.smoothing.one] in this.vertices[].from
this.vertices[return.smoothing.one-1] in this.vertices[].from
this.vertices[return.smoothing.two-1] in this.vertices[].from
this.vertices[return.smoothing.three-1] in this.vertices[].from
this.vertices[return.smoothing.four-1] in this.vertices[].from
return.smoothing.one in this.vertices[].from.numberOfVertex
return.smoothing.two in this.vertices[].from.numberOfVertex
return.smoothing.three in this.vertices[].from.numberOfVertex
return.smoothing.four in this.vertices[].from.numberOfVertex
size(return.leftknot.vertices[]) in this.vertices[].from.numberOfVertex
size(return.leftknot.vertices[])-1 in this.vertices[].from.numberOfVertex
this.vertices[this.smoothing.two] in this.vertices[].from.from
this.vertices[return.smoothing.one] in this.vertices[].from.from
this.vertices[return.smoothing.one-1] in this.vertices[].from.from
this.vertices[return.smoothing.two-1] in this.vertices[].from.from
this.vertices[return.smoothing.three-1] in this.vertices[].from.from
this.vertices[return.smoothing.four-1] in this.vertices[].from.from
this.vertices[this.smoothing.two] in this.vertices[].from.to
this.vertices[return.smoothing.one] in this.vertices[].from.to
this.vertices[return.smoothing.one-1] in this.vertices[].from.to
this.vertices[return.smoothing.two-1] in this.vertices[].from.to
this.vertices[return.smoothing.three-1] in this.vertices[].from.to
this.vertices[return.smoothing.four-1] in this.vertices[].from.to
this.vertices[this.smoothing.two] in this.vertices[].to
this.vertices[return.smoothing.one] in this.vertices[].to
this.vertices[return.smoothing.one-1] in this.vertices[].to
this.vertices[return.smoothing.two-1] in this.vertices[].to
this.vertices[return.smoothing.three-1] in this.vertices[].to
this.vertices[return.smoothing.four-1] in this.vertices[].to
return.smoothing.one in this.vertices[].to.numberOfVertex
return.smoothing.two in this.vertices[].to.numberOfVertex
return.smoothing.three in this.vertices[].to.numberOfVertex
return.smoothing.four in this.vertices[].to.numberOfVertex
size(return.leftknot.vertices[]) in this.vertices[].to.numberOfVertex
size(return.leftknot.vertices[])-1 in this.vertices[].to.numberOfVertex
this.vertices[this.smoothing.two] in this.vertices[].to.from
this.vertices[return.smoothing.one] in this.vertices[].to.from
this.vertices[return.smoothing.one-1] in this.vertices[].to.from
this.vertices[return.smoothing.two-1] in this.vertices[].to.from
this.vertices[return.smoothing.three-1] in this.vertices[].to.from
this.vertices[return.smoothing.four-1] in this.vertices[].to.from
this.vertices[this.smoothing.two] in this.vertices[].to.to
this.vertices[return.smoothing.one] in this.vertices[].to.to
this.vertices[return.smoothing.one-1] in this.vertices[].to.to
this.vertices[return.smoothing.two-1] in this.vertices[].to.to
this.vertices[return.smoothing.three-1] in this.vertices[].to.to
this.vertices[return.smoothing.four-1] in this.vertices[].to.to
return.smoothing.one in this.leftknot.vertices[].numberOfVertex
return.smoothing.two in this.leftknot.vertices[].numberOfVertex
return.smoothing.three in this.leftknot.vertices[].numberOfVertex
return.smoothing.four in this.leftknot.vertices[].numberOfVertex
size(return.leftknot.vertices[]) in this.leftknot.vertices[].numberOfVertex
size(return.leftknot.vertices[])-1 in this.leftknot.vertices[].numberOfVertex
this.leftknot.vertices[return.smoothing.one] in this.leftknot.vertices[].from
this.leftknot.vertices[return.smoothing.one-1] in this.leftknot.vertices[].from
this.leftknot.vertices[return.smoothing.two-1] in this.leftknot.vertices[].from
this.leftknot.vertices[return.smoothing.three-1] in this.leftknot.vertices[].from
this.leftknot.vertices[return.smoothing.four-1] in this.leftknot.vertices[].from
this.leftknot.vertices[return.smoothing.one] in this.leftknot.vertices[].to
this.leftknot.vertices[return.smoothing.one-1] in this.leftknot.vertices[].to
this.leftknot.vertices[return.smoothing.two-1] in this.leftknot.vertices[].to
this.leftknot.vertices[return.smoothing.three-1] in this.leftknot.vertices[].to
this.leftknot.vertices[return.smoothing.four-1] in this.leftknot.vertices[].to
return.smoothing.one in this.leftknot.leftknot.vertices[].numberOfVertex
return.smoothing.two in this.leftknot.leftknot.vertices[].numberOfVertex
return.smoothing.three in this.leftknot.leftknot.vertices[].numberOfVertex
return.smoothing.four in this.leftknot.leftknot.vertices[].numberOfVertex
size(return.leftknot.vertices[]) in this.leftknot.leftknot.vertices[].numberOfVertex
size(return.leftknot.vertices[])-1 in this.leftknot.leftknot.vertices[].numberOfVertex
this.leftknot.leftknot.vertices[return.smoothing.one] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[return.smoothing.one-1] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[return.smoothing.two] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[return.smoothing.two-1] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[return.smoothing.three-1] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[return.smoothing.four-1] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[return.smoothing.one] in this.leftknot.leftknot.vertices[].to
this.leftknot.leftknot.vertices[return.smoothing.one-1] in this.leftknot.leftknot.vertices[].to
this.leftknot.leftknot.vertices[return.smoothing.two] in this.leftknot.leftknot.vertices[].to
this.leftknot.leftknot.vertices[return.smoothing.two-1] in this.leftknot.leftknot.vertices[].to
this.leftknot.leftknot.vertices[return.smoothing.three-1] in this.leftknot.leftknot.vertices[].to
this.leftknot.leftknot.vertices[return.smoothing.four-1] in this.leftknot.leftknot.vertices[].to
return.smoothing.one in this.leftknot.rightknot.vertices[].numberOfVertex
return.smoothing.two in this.leftknot.rightknot.vertices[].numberOfVertex
return.smoothing.three in this.leftknot.rightknot.vertices[].numberOfVertex
return.smoothing.four in this.leftknot.rightknot.vertices[].numberOfVertex
size(return.leftknot.vertices[]) in this.leftknot.rightknot.vertices[].numberOfVertex
size(return.leftknot.vertices[])-1 in this.leftknot.rightknot.vertices[].numberOfVertex
this.leftknot.rightknot.vertices[return.smoothing.one] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[return.smoothing.one-1] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[return.smoothing.two] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[return.smoothing.two-1] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[return.smoothing.three-1] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[return.smoothing.four-1] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[return.smoothing.one] in this.leftknot.rightknot.vertices[].to
this.leftknot.rightknot.vertices[return.smoothing.one-1] in this.leftknot.rightknot.vertices[].to
this.leftknot.rightknot.vertices[return.smoothing.two] in this.leftknot.rightknot.vertices[].to
this.leftknot.rightknot.vertices[return.smoothing.two-1] in this.leftknot.rightknot.vertices[].to
this.leftknot.rightknot.vertices[return.smoothing.three-1] in this.leftknot.rightknot.vertices[].to
this.leftknot.rightknot.vertices[return.smoothing.four-1] in this.leftknot.rightknot.vertices[].to
this.leftknot.smoothing.two in return.vertices[].numberOfVertex
this.leftknot.smoothing.two in return.leftknot.vertices[].numberOfVertex
this.leftknot.smoothing.two in return.rightknot.vertices[].numberOfVertex
this.leftknot.smoothing.two != return.smoothing.one
this.leftknot.smoothing.two != return.smoothing.two
this.leftknot.smoothing.three in return.vertices[].numberOfVertex
this.leftknot.smoothing.three in return.leftknot.vertices[].numberOfVertex
this.leftknot.smoothing.three in return.rightknot.vertices[].numberOfVertex
this.leftknot.smoothing.three != return.smoothing.one
this.leftknot.smoothing.three != return.smoothing.three
this.leftknot.smoothing.four in return.vertices[].numberOfVertex
this.leftknot.smoothing.four in return.leftknot.vertices[].numberOfVertex
this.leftknot.smoothing.four in return.rightknot.vertices[].numberOfVertex
this.leftknot.smoothing.four != return.smoothing.one
this.leftknot.smoothing.four != return.smoothing.four
return.smoothing.one in this.rightknot.vertices[].numberOfVertex
return.smoothing.two in this.rightknot.vertices[].numberOfVertex
return.smoothing.three in this.rightknot.vertices[].numberOfVertex
return.smoothing.four in this.rightknot.vertices[].numberOfVertex
size(return.leftknot.vertices[]) in this.rightknot.vertices[].numberOfVertex
size(return.leftknot.vertices[])-1 in this.rightknot.vertices[].numberOfVertex
return.vertices[this.leftknot.smoothing.two-1] in this.rightknot.vertices[].from
return.vertices[this.leftknot.smoothing.three-1] in this.rightknot.vertices[].from
return.vertices[this.leftknot.smoothing.four-1] in this.rightknot.vertices[].from
return.vertices[this.smoothing.one] in this.rightknot.vertices[].from
return.vertices[this.smoothing.one-1] in this.rightknot.vertices[].from
return.vertices[this.smoothing.two] in this.rightknot.vertices[].from
return.vertices[this.smoothing.two-1] in this.rightknot.vertices[].from
return.vertices[this.smoothing.three-1] in this.rightknot.vertices[].from
return.vertices[this.smoothing.four-1] in this.rightknot.vertices[].from
return.vertices[return.smoothing.one] in this.rightknot.vertices[].from
return.vertices[return.smoothing.one-1] in this.rightknot.vertices[].from
return.vertices[return.smoothing.two-1] in this.rightknot.vertices[].from
return.vertices[return.smoothing.three-1] in this.rightknot.vertices[].from
return.vertices[return.smoothing.four-1] in this.rightknot.vertices[].from
return.vertices[this.leftknot.smoothing.two-1] in this.rightknot.vertices[].to
return.vertices[this.leftknot.smoothing.three-1] in this.rightknot.vertices[].to
return.vertices[this.leftknot.smoothing.four-1] in this.rightknot.vertices[].to
return.vertices[this.smoothing.one] in this.rightknot.vertices[].to
return.vertices[this.smoothing.one-1] in this.rightknot.vertices[].to
return.vertices[this.smoothing.two] in this.rightknot.vertices[].to
return.vertices[this.smoothing.two-1] in this.rightknot.vertices[].to
return.vertices[this.smoothing.three-1] in this.rightknot.vertices[].to
return.vertices[this.smoothing.four-1] in this.rightknot.vertices[].to
return.vertices[return.smoothing.one] in this.rightknot.vertices[].to
return.vertices[return.smoothing.one-1] in this.rightknot.vertices[].to
return.vertices[return.smoothing.two-1] in this.rightknot.vertices[].to
return.vertices[return.smoothing.three-1] in this.rightknot.vertices[].to
return.vertices[return.smoothing.four-1] in this.rightknot.vertices[].to
return.smoothing.one in this.rightknot.leftknot.vertices[].numberOfVertex
return.smoothing.two in this.rightknot.leftknot.vertices[].numberOfVertex
return.smoothing.three in this.rightknot.leftknot.vertices[].numberOfVertex
return.smoothing.four in this.rightknot.leftknot.vertices[].numberOfVertex
size(return.leftknot.vertices[]) in this.rightknot.leftknot.vertices[].numberOfVertex
size(return.leftknot.vertices[])-1 in this.rightknot.leftknot.vertices[].numberOfVertex
return.leftknot.vertices[this.leftknot.smoothing.two] in this.rightknot.leftknot.vertices[].from
return.leftknot.vertices[this.leftknot.smoothing.three-1] in this.rightknot.leftknot.vertices[].from
return.leftknot.vertices[this.leftknot.smoothing.four-1] in this.rightknot.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.one] in this.rightknot.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.one-1] in this.rightknot.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.two] in this.rightknot.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.two-1] in this.rightknot.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.three] in this.rightknot.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.three-1] in this.rightknot.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.four] in this.rightknot.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.four-1] in this.rightknot.leftknot.vertices[].from
return.leftknot.vertices[return.smoothing.one] in this.rightknot.leftknot.vertices[].from
return.leftknot.vertices[return.smoothing.one-1] in this.rightknot.leftknot.vertices[].from
return.leftknot.vertices[return.smoothing.two] in this.rightknot.leftknot.vertices[].from
return.leftknot.vertices[return.smoothing.two-1] in this.rightknot.leftknot.vertices[].from
return.leftknot.vertices[return.smoothing.three-1] in this.rightknot.leftknot.vertices[].from
return.leftknot.vertices[return.smoothing.four-1] in this.rightknot.leftknot.vertices[].from
return.leftknot.vertices[this.leftknot.smoothing.two] in this.rightknot.leftknot.vertices[].to
return.leftknot.vertices[this.leftknot.smoothing.three-1] in this.rightknot.leftknot.vertices[].to
return.leftknot.vertices[this.leftknot.smoothing.four-1] in this.rightknot.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.one] in this.rightknot.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.one-1] in this.rightknot.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.two] in this.rightknot.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.two-1] in this.rightknot.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.three] in this.rightknot.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.three-1] in this.rightknot.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.four] in this.rightknot.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.four-1] in this.rightknot.leftknot.vertices[].to
return.leftknot.vertices[return.smoothing.one] in this.rightknot.leftknot.vertices[].to
return.leftknot.vertices[return.smoothing.one-1] in this.rightknot.leftknot.vertices[].to
return.leftknot.vertices[return.smoothing.two] in this.rightknot.leftknot.vertices[].to
return.leftknot.vertices[return.smoothing.two-1] in this.rightknot.leftknot.vertices[].to
return.leftknot.vertices[return.smoothing.three-1] in this.rightknot.leftknot.vertices[].to
return.leftknot.vertices[return.smoothing.four-1] in this.rightknot.leftknot.vertices[].to
return.smoothing.one in this.rightknot.rightknot.vertices[].numberOfVertex
return.smoothing.two in this.rightknot.rightknot.vertices[].numberOfVertex
return.smoothing.three in this.rightknot.rightknot.vertices[].numberOfVertex
return.smoothing.four in this.rightknot.rightknot.vertices[].numberOfVertex
size(return.leftknot.vertices[]) in this.rightknot.rightknot.vertices[].numberOfVertex
size(return.leftknot.vertices[])-1 in this.rightknot.rightknot.vertices[].numberOfVertex
return.rightknot.vertices[this.leftknot.smoothing.two] in this.rightknot.rightknot.vertices[].from
return.rightknot.vertices[this.leftknot.smoothing.three-1] in this.rightknot.rightknot.vertices[].from
return.rightknot.vertices[this.leftknot.smoothing.four-1] in this.rightknot.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.one] in this.rightknot.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.one-1] in this.rightknot.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.two] in this.rightknot.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.two-1] in this.rightknot.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.three] in this.rightknot.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.three-1] in this.rightknot.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.four] in this.rightknot.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.four-1] in this.rightknot.rightknot.vertices[].from
return.rightknot.vertices[return.smoothing.one] in this.rightknot.rightknot.vertices[].from
return.rightknot.vertices[return.smoothing.one-1] in this.rightknot.rightknot.vertices[].from
return.rightknot.vertices[return.smoothing.two] in this.rightknot.rightknot.vertices[].from
return.rightknot.vertices[return.smoothing.two-1] in this.rightknot.rightknot.vertices[].from
return.rightknot.vertices[return.smoothing.three-1] in this.rightknot.rightknot.vertices[].from
return.rightknot.vertices[return.smoothing.four-1] in this.rightknot.rightknot.vertices[].from
return.rightknot.vertices[this.leftknot.smoothing.two] in this.rightknot.rightknot.vertices[].to
return.rightknot.vertices[this.leftknot.smoothing.three-1] in this.rightknot.rightknot.vertices[].to
return.rightknot.vertices[this.leftknot.smoothing.four-1] in this.rightknot.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.one] in this.rightknot.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.one-1] in this.rightknot.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.two] in this.rightknot.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.two-1] in this.rightknot.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.three] in this.rightknot.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.three-1] in this.rightknot.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.four] in this.rightknot.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.four-1] in this.rightknot.rightknot.vertices[].to
return.rightknot.vertices[return.smoothing.one] in this.rightknot.rightknot.vertices[].to
return.rightknot.vertices[return.smoothing.one-1] in this.rightknot.rightknot.vertices[].to
return.rightknot.vertices[return.smoothing.two] in this.rightknot.rightknot.vertices[].to
return.rightknot.vertices[return.smoothing.two-1] in this.rightknot.rightknot.vertices[].to
return.rightknot.vertices[return.smoothing.three-1] in this.rightknot.rightknot.vertices[].to
return.rightknot.vertices[return.smoothing.four-1] in this.rightknot.rightknot.vertices[].to
this.smoothing.one in return.vertices[].numberOfVertex
this.smoothing.one in return.leftknot.vertices[].numberOfVertex
this.smoothing.one in return.rightknot.vertices[].numberOfVertex
this.smoothing.two in return.vertices[].numberOfVertex
this.smoothing.two in return.leftknot.vertices[].numberOfVertex
this.smoothing.two in return.rightknot.vertices[].numberOfVertex
this.smoothing.three in return.vertices[].numberOfVertex
this.smoothing.three in return.leftknot.vertices[].numberOfVertex
this.smoothing.three in return.rightknot.vertices[].numberOfVertex
this.smoothing.four in return.vertices[].numberOfVertex
this.smoothing.four in return.leftknot.vertices[].numberOfVertex
this.smoothing.four in return.rightknot.vertices[].numberOfVertex
return.smoothing.one in return.vertices[].numberOfVertex
return.smoothing.two in return.vertices[].numberOfVertex
return.smoothing.three in return.vertices[].numberOfVertex
return.smoothing.four in return.vertices[].numberOfVertex
return.vertices[].numberOfVertex elements <= size(this.vertices[])
size(this.vertices[]) in return.vertices[].numberOfVertex
size(this.vertices[])-1 in return.vertices[].numberOfVertex
size(return.leftknot.vertices[]) in return.vertices[].numberOfVertex
size(return.leftknot.vertices[])-1 in return.vertices[].numberOfVertex
return.vertices[this.leftknot.smoothing.two-1] in return.vertices[].from
return.vertices[this.leftknot.smoothing.three-1] in return.vertices[].from
return.vertices[this.leftknot.smoothing.four-1] in return.vertices[].from
return.vertices[this.smoothing.one] in return.vertices[].from
return.vertices[this.smoothing.one-1] in return.vertices[].from
return.vertices[this.smoothing.two] in return.vertices[].from
return.vertices[this.smoothing.two-1] in return.vertices[].from
return.vertices[this.smoothing.three-1] in return.vertices[].from
return.vertices[this.smoothing.four-1] in return.vertices[].from
return.vertices[return.smoothing.one] in return.vertices[].from
return.vertices[return.smoothing.one-1] in return.vertices[].from
return.vertices[return.smoothing.two-1] in return.vertices[].from
return.vertices[return.smoothing.three-1] in return.vertices[].from
return.vertices[return.smoothing.four-1] in return.vertices[].from
return.vertices[this.leftknot.smoothing.two-1] in return.vertices[].to
return.vertices[this.leftknot.smoothing.three-1] in return.vertices[].to
return.vertices[this.leftknot.smoothing.four-1] in return.vertices[].to
return.vertices[this.smoothing.one] in return.vertices[].to
return.vertices[this.smoothing.one-1] in return.vertices[].to
return.vertices[this.smoothing.two] in return.vertices[].to
return.vertices[this.smoothing.two-1] in return.vertices[].to
return.vertices[this.smoothing.three-1] in return.vertices[].to
return.vertices[this.smoothing.four-1] in return.vertices[].to
return.vertices[return.smoothing.one] in return.vertices[].to
return.vertices[return.smoothing.one-1] in return.vertices[].to
return.vertices[return.smoothing.two-1] in return.vertices[].to
return.vertices[return.smoothing.three-1] in return.vertices[].to
return.vertices[return.smoothing.four-1] in return.vertices[].to
return.smoothing.one in return.leftknot.vertices[].numberOfVertex
return.smoothing.two in return.leftknot.vertices[].numberOfVertex
return.smoothing.three in return.leftknot.vertices[].numberOfVertex
return.smoothing.four in return.leftknot.vertices[].numberOfVertex
size(this.vertices[]) in return.leftknot.vertices[].numberOfVertex
size(this.vertices[])-1 in return.leftknot.vertices[].numberOfVertex
size(return.leftknot.vertices[]) in return.leftknot.vertices[].numberOfVertex
size(return.leftknot.vertices[])-1 in return.leftknot.vertices[].numberOfVertex
return.leftknot.vertices[this.leftknot.smoothing.two] in return.leftknot.vertices[].from
return.leftknot.vertices[this.leftknot.smoothing.three-1] in return.leftknot.vertices[].from
return.leftknot.vertices[this.leftknot.smoothing.four-1] in return.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.one] in return.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.one-1] in return.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.two] in return.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.two-1] in return.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.three] in return.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.three-1] in return.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.four] in return.leftknot.vertices[].from
return.leftknot.vertices[this.smoothing.four-1] in return.leftknot.vertices[].from
return.leftknot.vertices[return.smoothing.one] in return.leftknot.vertices[].from
return.leftknot.vertices[return.smoothing.one-1] in return.leftknot.vertices[].from
return.leftknot.vertices[return.smoothing.two] in return.leftknot.vertices[].from
return.leftknot.vertices[return.smoothing.two-1] in return.leftknot.vertices[].from
return.leftknot.vertices[return.smoothing.three-1] in return.leftknot.vertices[].from
return.leftknot.vertices[return.smoothing.four-1] in return.leftknot.vertices[].from
return.leftknot.vertices[this.leftknot.smoothing.two] in return.leftknot.vertices[].to
return.leftknot.vertices[this.leftknot.smoothing.three-1] in return.leftknot.vertices[].to
return.leftknot.vertices[this.leftknot.smoothing.four-1] in return.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.one] in return.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.one-1] in return.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.two] in return.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.two-1] in return.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.three] in return.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.three-1] in return.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.four] in return.leftknot.vertices[].to
return.leftknot.vertices[this.smoothing.four-1] in return.leftknot.vertices[].to
return.leftknot.vertices[return.smoothing.one] in return.leftknot.vertices[].to
return.leftknot.vertices[return.smoothing.one-1] in return.leftknot.vertices[].to
return.leftknot.vertices[return.smoothing.two] in return.leftknot.vertices[].to
return.leftknot.vertices[return.smoothing.two-1] in return.leftknot.vertices[].to
return.leftknot.vertices[return.smoothing.three-1] in return.leftknot.vertices[].to
return.leftknot.vertices[return.smoothing.four-1] in return.leftknot.vertices[].to
return.smoothing.one in return.rightknot.vertices[].numberOfVertex
return.smoothing.two in return.rightknot.vertices[].numberOfVertex
return.smoothing.three in return.rightknot.vertices[].numberOfVertex
return.smoothing.four in return.rightknot.vertices[].numberOfVertex
size(this.vertices[]) in return.rightknot.vertices[].numberOfVertex
size(this.vertices[])-1 in return.rightknot.vertices[].numberOfVertex
size(return.leftknot.vertices[]) in return.rightknot.vertices[].numberOfVertex
size(return.leftknot.vertices[])-1 in return.rightknot.vertices[].numberOfVertex
return.rightknot.vertices[this.leftknot.smoothing.two] in return.rightknot.vertices[].from
return.rightknot.vertices[this.leftknot.smoothing.three-1] in return.rightknot.vertices[].from
return.rightknot.vertices[this.leftknot.smoothing.four-1] in return.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.one] in return.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.one-1] in return.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.two] in return.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.two-1] in return.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.three] in return.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.three-1] in return.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.four] in return.rightknot.vertices[].from
return.rightknot.vertices[this.smoothing.four-1] in return.rightknot.vertices[].from
return.rightknot.vertices[return.smoothing.one] in return.rightknot.vertices[].from
return.rightknot.vertices[return.smoothing.one-1] in return.rightknot.vertices[].from
return.rightknot.vertices[return.smoothing.two] in return.rightknot.vertices[].from
return.rightknot.vertices[return.smoothing.two-1] in return.rightknot.vertices[].from
return.rightknot.vertices[return.smoothing.three-1] in return.rightknot.vertices[].from
return.rightknot.vertices[return.smoothing.four-1] in return.rightknot.vertices[].from
return.rightknot.vertices[this.leftknot.smoothing.two] in return.rightknot.vertices[].to
return.rightknot.vertices[this.leftknot.smoothing.three-1] in return.rightknot.vertices[].to
return.rightknot.vertices[this.leftknot.smoothing.four-1] in return.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.one] in return.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.one-1] in return.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.two] in return.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.two-1] in return.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.three] in return.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.three-1] in return.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.four] in return.rightknot.vertices[].to
return.rightknot.vertices[this.smoothing.four-1] in return.rightknot.vertices[].to
return.rightknot.vertices[return.smoothing.one] in return.rightknot.vertices[].to
return.rightknot.vertices[return.smoothing.one-1] in return.rightknot.vertices[].to
return.rightknot.vertices[return.smoothing.two] in return.rightknot.vertices[].to
return.rightknot.vertices[return.smoothing.two-1] in return.rightknot.vertices[].to
return.rightknot.vertices[return.smoothing.three-1] in return.rightknot.vertices[].to
return.rightknot.vertices[return.smoothing.four-1] in return.rightknot.vertices[].to
return.smoothing.one != return.smoothing.two
return.smoothing.one != return.smoothing.three
return.smoothing.one != return.smoothing.four
return.smoothing.one <= size(this.vertices[])-1
return.smoothing.two != return.smoothing.three
return.smoothing.two != return.smoothing.four
return.smoothing.two <= size(this.vertices[])
return.smoothing.two != size(this.vertices[])-1
return.smoothing.three != return.smoothing.four
return.smoothing.three <= size(this.vertices[])
return.smoothing.three != size(this.vertices[])-1
return.smoothing.four <= size(this.vertices[])
this.smoothing.two + this.smoothing.three + this.smoothing.four - 11 == 0
===========================================================================
Knot.makeCircles():::ENTER
this.vertices[].from.visited == [0, 0, 0, 0, 0, 0]
this.vertices[].from.visited elements == false
this.vertices[].to.visited == [0, 0, 0, 0, 0, 0]
this.vertices[].to.visited elements == false
this.vertices[].visited == [0, 0, 0, 0, 0, 0]
this.vertices[].visited elements == false
this.leftknot == null
this.rightknot == null
this.seifertCircles[] == []
this.seifertCircles[].getClass().getName() == []
===========================================================================
Knot.makeCircles():::EXIT
this.crossings == orig(this.crossings)
this.crossings.getClass().getName() == orig(this.crossings.getClass().getName())
this.crossings[] == orig(this.crossings[])
this.crossings[].overstrand == orig(this.crossings[].overstrand)
this.crossings[].understrand == orig(this.crossings[].understrand)
this.crossings[].posneg == orig(this.crossings[].posneg)
this.vertices == orig(this.vertices)
this.vertices.getClass().getName() == orig(this.vertices.getClass().getName())
this.vertices[] == orig(this.vertices[])
this.vertices[].numberOfVertex == orig(this.vertices[].numberOfVertex)
this.vertices[].from == orig(this.vertices[].from)
this.vertices[].from.numberOfVertex == orig(this.vertices[].from.numberOfVertex)
this.vertices[].from.from == orig(this.vertices[].from.from)
this.vertices[].from.to == orig(this.vertices[].from.to)
this.vertices[].to == orig(this.vertices[].to)
this.vertices[].to.numberOfVertex == orig(this.vertices[].to.numberOfVertex)
this.vertices[].to.from == orig(this.vertices[].to.from)
this.vertices[].to.to == orig(this.vertices[].to.to)
this.binarycode == orig(this.binarycode)
this.binarycode.toString == orig(this.binarycode.toString)
this.leftknot == orig(this.leftknot)
this.rightknot == orig(this.rightknot)
this.numcircles == orig(this.numcircles)
this.seifertCircles == orig(this.seifertCircles)
this.smoothing == orig(this.smoothing)
this.smoothing.one == orig(this.smoothing.one)
this.smoothing.two == orig(this.smoothing.two)
this.smoothing.three == orig(this.smoothing.three)
this.smoothing.four == orig(this.smoothing.four)
this.smoothing.reorder == orig(this.smoothing.reorder)
this.vertices[].from.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].from.visited elements == true
this.vertices[].from.visited elements != null
this.vertices[].to.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].to.visited elements == true
this.vertices[].to.visited elements != null
this.vertices[].visited == [1, 1, 1, 1, 1, 1]
this.vertices[].visited elements == true
this.vertices[].visited elements != null
this.leftknot == null
this.rightknot == null
size(this.seifertCircles[]) one of { 1, 2, 3 }
size(this.seifertCircles[])-1 >= orig(size(this.seifertCircles[]))
===========================================================================
Knot.numCrossings():::ENTER
this.crossings.getClass().getName() == this.leftknot.rightknot.crossings.getClass().getName()
this.crossings.getClass().getName() == this.rightknot.crossings.getClass().getName()
this.crossings.getClass().getName() == this.rightknot.leftknot.crossings.getClass().getName()
this.crossings.getClass().getName() == this.rightknot.rightknot.crossings.getClass().getName()
this.vertices.getClass().getName() == this.leftknot.rightknot.vertices.getClass().getName()
this.vertices.getClass().getName() == this.rightknot.vertices.getClass().getName()
this.vertices.getClass().getName() == this.rightknot.leftknot.vertices.getClass().getName()
this.vertices.getClass().getName() == this.rightknot.rightknot.vertices.getClass().getName()
this.leftknot.smoothing.two == this.rightknot.smoothing.four
this.leftknot.smoothing.two == size(this.vertices[])-1
this.leftknot.smoothing.two == size(this.leftknot.vertices[])-1
this.leftknot.smoothing.two == size(this.leftknot.leftknot.vertices[])-1
this.leftknot.smoothing.two == size(this.leftknot.rightknot.vertices[])-1
this.leftknot.smoothing.two == size(this.rightknot.vertices[])-1
this.leftknot.smoothing.two == size(this.rightknot.leftknot.vertices[])-1
this.leftknot.smoothing.two == size(this.rightknot.rightknot.vertices[])-1
this.leftknot.smoothing.three == this.rightknot.smoothing.two
this.leftknot.smoothing.four == this.rightknot.smoothing.three
size(this.crossings[])-1 == size(this.leftknot.crossings[])
size(this.crossings[])-1 == size(this.rightknot.crossings[])
size(this.vertices[]) == size(this.leftknot.rightknot.vertices[])
size(this.vertices[]) == size(this.rightknot.vertices[])
size(this.vertices[]) == size(this.rightknot.leftknot.vertices[])
size(this.vertices[]) == size(this.rightknot.rightknot.vertices[])
size(this.leftknot.crossings[])-1 == size(this.leftknot.leftknot.crossings[])
size(this.leftknot.crossings[])-1 == size(this.leftknot.rightknot.crossings[])
size(this.leftknot.crossings[])-1 == size(this.rightknot.leftknot.crossings[])
size(this.leftknot.crossings[])-1 == size(this.rightknot.rightknot.crossings[])
this.vertices[this.leftknot.smoothing.one] == this.vertices[this.leftknot.smoothing.four-1]
this.vertices[this.leftknot.smoothing.one] == this.vertices[this.rightknot.smoothing.three-1]
this.vertices[this.leftknot.smoothing.two-1] == this.vertices[this.leftknot.smoothing.three]
this.vertices[this.leftknot.smoothing.three] == this.vertices[this.rightknot.smoothing.four-1]
this.leftknot.vertices[this.leftknot.smoothing.one] == this.leftknot.vertices[this.leftknot.smoothing.four-1]
this.leftknot.vertices[this.leftknot.smoothing.one] == this.leftknot.vertices[this.rightknot.smoothing.three-1]
this.leftknot.vertices[this.leftknot.smoothing.two-1] == this.leftknot.vertices[this.leftknot.smoothing.three]
this.leftknot.vertices[this.leftknot.smoothing.three] == this.leftknot.vertices[this.rightknot.smoothing.four-1]
this.leftknot.leftknot.vertices[this.leftknot.smoothing.one] == this.leftknot.leftknot.vertices[this.leftknot.smoothing.four-1]
this.leftknot.leftknot.vertices[this.leftknot.smoothing.one] == this.leftknot.leftknot.vertices[this.rightknot.smoothing.three-1]
this.leftknot.leftknot.vertices[this.leftknot.smoothing.two-1] == this.leftknot.leftknot.vertices[this.leftknot.smoothing.three]
this.leftknot.leftknot.vertices[this.leftknot.smoothing.three] == this.leftknot.leftknot.vertices[this.rightknot.smoothing.four-1]
this.leftknot.rightknot.vertices[this.leftknot.smoothing.one] == this.leftknot.rightknot.vertices[this.leftknot.smoothing.four-1]
this.leftknot.rightknot.vertices[this.leftknot.smoothing.one] == this.leftknot.rightknot.vertices[this.rightknot.smoothing.three-1]
this.leftknot.rightknot.vertices[this.leftknot.smoothing.two-1] == this.leftknot.rightknot.vertices[this.leftknot.smoothing.three]
this.leftknot.rightknot.vertices[this.leftknot.smoothing.three] == this.leftknot.rightknot.vertices[this.rightknot.smoothing.four-1]
this.rightknot.vertices[this.leftknot.smoothing.one] == this.rightknot.vertices[this.leftknot.smoothing.four-1]
this.rightknot.vertices[this.leftknot.smoothing.one] == this.rightknot.vertices[this.rightknot.smoothing.three-1]
this.rightknot.leftknot.vertices[this.leftknot.smoothing.one] == this.rightknot.leftknot.vertices[this.leftknot.smoothing.four-1]
this.rightknot.leftknot.vertices[this.leftknot.smoothing.one] == this.rightknot.leftknot.vertices[this.rightknot.smoothing.three-1]
this.rightknot.rightknot.vertices[this.leftknot.smoothing.one] == this.rightknot.rightknot.vertices[this.leftknot.smoothing.four-1]
this.rightknot.rightknot.vertices[this.leftknot.smoothing.one] == this.rightknot.rightknot.vertices[this.rightknot.smoothing.three-1]
this.rightknot.vertices[this.leftknot.smoothing.two-1] == this.rightknot.vertices[this.leftknot.smoothing.three]
this.rightknot.leftknot.vertices[this.leftknot.smoothing.two-1] == this.rightknot.leftknot.vertices[this.leftknot.smoothing.three]
this.rightknot.rightknot.vertices[this.leftknot.smoothing.two-1] == this.rightknot.rightknot.vertices[this.leftknot.smoothing.three]
this.rightknot.vertices[this.leftknot.smoothing.three] == this.rightknot.vertices[this.rightknot.smoothing.four-1]
this.rightknot.leftknot.vertices[this.leftknot.smoothing.three] == this.rightknot.leftknot.vertices[this.rightknot.smoothing.four-1]
this.rightknot.rightknot.vertices[this.leftknot.smoothing.three] == this.rightknot.rightknot.vertices[this.rightknot.smoothing.four-1]
this has only one value
this.crossings has only one value
this.crossings[] contains no nulls and has only one value, of length 3
this.crossings[].getClass().getName() == [Crossing, Crossing, Crossing]
this.crossings[].overstrand contains no nulls and has only one value, of length 3
this.crossings[].understrand contains no nulls and has only one value, of length 3
this.crossings[].posneg == [1, 1, 1]
this.crossings[].posneg elements == true
this.vertices has only one value
this.vertices[] contains no nulls and has only one value, of length 6
this.vertices[].from contains no nulls and has only one value, of length 6
this.vertices[].from.numberOfVertex == [6, 1, 2, 3, 4, 5]
this.vertices[].from.from contains no nulls and has only one value, of length 6
this.vertices[].from.to contains no nulls and has only one value, of length 6
this.vertices[].from.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].from.visited elements == true
this.vertices[].to contains no nulls and has only one value, of length 6
this.vertices[].to.numberOfVertex == [2, 3, 4, 5, 6, 1]
this.vertices[].to.from contains no nulls and has only one value, of length 6
this.vertices[].to.to contains no nulls and has only one value, of length 6
this.vertices[].to.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].to.visited elements == true
this.vertices[].visited == [1, 1, 1, 1, 1, 1]
this.vertices[].visited elements == true
this.binarycode has only one value
this.binarycode.toString == ""
this.leftknot has only one value
this.leftknot.crossings has only one value
this.leftknot.crossings[] contains no nulls and has only one value, of length 2
this.leftknot.crossings[].getClass().getName() == [Crossing, Crossing]
this.leftknot.crossings[].overstrand contains no nulls and has only one value, of length 2
this.leftknot.crossings[].understrand contains no nulls and has only one value, of length 2
this.leftknot.crossings[].posneg == [1, 1]
this.leftknot.crossings[].posneg elements == true
this.leftknot.vertices has only one value
this.leftknot.vertices[] contains no nulls and has only one value, of length 6
this.leftknot.vertices[].from contains no nulls and has only one value, of length 6
this.leftknot.vertices[].to contains no nulls and has only one value, of length 6
this.leftknot.binarycode has only one value
this.leftknot.binarycode.toString == "0"
this.leftknot.leftknot has only one value
this.leftknot.leftknot.crossings has only one value
this.leftknot.leftknot.crossings[] contains no nulls and has only one value, of length 1
this.leftknot.leftknot.crossings[].getClass().getName() == [Crossing]
this.leftknot.leftknot.crossings[].overstrand contains no nulls and has only one value, of length 1
this.leftknot.leftknot.crossings[].understrand contains no nulls and has only one value, of length 1
this.leftknot.leftknot.crossings[].posneg == [1]
this.leftknot.leftknot.vertices has only one value
this.leftknot.leftknot.vertices[] contains no nulls and has only one value, of length 6
this.leftknot.leftknot.vertices[].from contains no nulls and has only one value, of length 6
this.leftknot.leftknot.vertices[].to contains no nulls and has only one value, of length 6
this.leftknot.leftknot.binarycode has only one value
this.leftknot.leftknot.binarycode.toString == "00"
this.leftknot.leftknot.leftknot has only one value
this.leftknot.leftknot.rightknot has only one value
this.leftknot.leftknot.seifertCircles has only one value
this.leftknot.leftknot.seifertCircles[] contains no nulls and has only one value, of length 1
this.leftknot.leftknot.seifertCircles[] elements has only one value
this.leftknot.leftknot.seifertCircles[].getClass().getName() == [SeifertCircle]
this.leftknot.leftknot.smoothing has only one value
this.leftknot.rightknot has only one value
this.leftknot.rightknot.crossings has only one value
this.leftknot.rightknot.crossings[] contains no nulls and has only one value, of length 1
this.leftknot.rightknot.crossings[].overstrand contains no nulls and has only one value, of length 1
this.leftknot.rightknot.crossings[].understrand contains no nulls and has only one value, of length 1
this.leftknot.rightknot.crossings[].posneg == [0]
this.leftknot.rightknot.vertices has only one value
this.leftknot.rightknot.vertices[] contains no nulls and has only one value, of length 6
this.leftknot.rightknot.vertices[].from contains no nulls and has only one value, of length 6
this.leftknot.rightknot.vertices[].to contains no nulls and has only one value, of length 6
this.leftknot.rightknot.binarycode has only one value
this.leftknot.rightknot.binarycode.toString == "01"
this.leftknot.rightknot.leftknot has only one value
this.leftknot.rightknot.rightknot has only one value
this.leftknot.rightknot.seifertCircles has only one value
this.leftknot.rightknot.seifertCircles[] contains no nulls and has only one value, of length 1
this.leftknot.rightknot.seifertCircles[] elements has only one value
this.leftknot.rightknot.seifertCircles[].getClass().getName() == [SeifertCircle]
this.leftknot.rightknot.smoothing has only one value
this.leftknot.seifertCircles has only one value
this.leftknot.seifertCircles[] contains no nulls and has only one value, of length 2
this.leftknot.seifertCircles[].getClass().getName() == [SeifertCircle, SeifertCircle]
this.leftknot.smoothing has only one value
this.leftknot.smoothing.one == 1
this.leftknot.smoothing.three == 4
this.leftknot.smoothing.four == 2
this.leftknot.smoothing.reorder == false
this.rightknot has only one value
this.rightknot.crossings has only one value
this.rightknot.crossings[] contains no nulls and has only one value, of length 2
this.rightknot.crossings[].overstrand contains no nulls and has only one value, of length 2
this.rightknot.crossings[].understrand contains no nulls and has only one value, of length 2
this.rightknot.crossings[].posneg == [0, 0]
this.rightknot.vertices has only one value
this.rightknot.vertices[] contains no nulls and has only one value, of length 6
this.rightknot.vertices[].from contains no nulls and has only one value, of length 6
this.rightknot.vertices[].to contains no nulls and has only one value, of length 6
this.rightknot.binarycode has only one value
this.rightknot.binarycode.toString == "1"
this.rightknot.leftknot has only one value
this.rightknot.leftknot.crossings has only one value
this.rightknot.leftknot.crossings[] contains no nulls and has only one value, of length 1
this.rightknot.leftknot.crossings[].overstrand contains no nulls and has only one value, of length 1
this.rightknot.leftknot.crossings[].understrand contains no nulls and has only one value, of length 1
this.rightknot.leftknot.crossings[].posneg == [0]
this.rightknot.leftknot.vertices has only one value
this.rightknot.leftknot.vertices[] contains no nulls and has only one value, of length 6
this.rightknot.leftknot.vertices[].from contains no nulls and has only one value, of length 6
this.rightknot.leftknot.vertices[].to contains no nulls and has only one value, of length 6
this.rightknot.leftknot.binarycode has only one value
this.rightknot.leftknot.binarycode.toString == "10"
this.rightknot.leftknot.leftknot has only one value
this.rightknot.leftknot.rightknot has only one value
this.rightknot.leftknot.seifertCircles has only one value
this.rightknot.leftknot.seifertCircles[] contains no nulls and has only one value, of length 1
this.rightknot.leftknot.seifertCircles[] elements has only one value
this.rightknot.leftknot.seifertCircles[].getClass().getName() == [SeifertCircle]
this.rightknot.leftknot.smoothing has only one value
this.rightknot.rightknot has only one value
this.rightknot.rightknot.crossings has only one value
this.rightknot.rightknot.crossings[] contains no nulls and has only one value, of length 1
this.rightknot.rightknot.crossings[].overstrand contains no nulls and has only one value, of length 1
this.rightknot.rightknot.crossings[].understrand contains no nulls and has only one value, of length 1
this.rightknot.rightknot.crossings[].posneg == [0]
this.rightknot.rightknot.vertices has only one value
this.rightknot.rightknot.vertices[] contains no nulls and has only one value, of length 6
this.rightknot.rightknot.vertices[].from contains no nulls and has only one value, of length 6
this.rightknot.rightknot.vertices[].to contains no nulls and has only one value, of length 6
this.rightknot.rightknot.binarycode has only one value
this.rightknot.rightknot.binarycode.toString == "11"
this.rightknot.rightknot.leftknot has only one value
this.rightknot.rightknot.rightknot has only one value
this.rightknot.rightknot.seifertCircles has only one value
this.rightknot.rightknot.seifertCircles[] contains no nulls and has only one value, of length 2
this.rightknot.rightknot.seifertCircles[].getClass().getName() == [SeifertCircle, SeifertCircle]
this.rightknot.rightknot.smoothing has only one value
this.rightknot.seifertCircles has only one value
this.rightknot.seifertCircles[] contains no nulls and has only one value, of length 1
this.rightknot.seifertCircles[] elements has only one value
this.rightknot.seifertCircles[].getClass().getName() == [SeifertCircle]
this.rightknot.smoothing has only one value
this.rightknot.smoothing.reorder == true
this.seifertCircles has only one value
this.seifertCircles[] contains no nulls and has only one value, of length 1
this.seifertCircles[] elements has only one value
this.seifertCircles[].getClass().getName() == [SeifertCircle]
this.smoothing == null
size(this.crossings[]) == 3
size(this.leftknot.leftknot.seifertCircles[]) == 1
size(this.leftknot.rightknot.seifertCircles[]) == 1
size(this.leftknot.seifertCircles[]) == 2
size(this.rightknot.leftknot.seifertCircles[]) == 1
size(this.rightknot.rightknot.seifertCircles[]) == 2
size(this.rightknot.seifertCircles[]) == 1
size(this.seifertCircles[]) == 1
this.vertices[this.leftknot.smoothing.one] has only one value
this.vertices[this.leftknot.smoothing.one-1] has only one value
this.vertices[this.leftknot.smoothing.two] has only one value
this.vertices[this.leftknot.smoothing.three] has only one value
this.vertices[this.leftknot.smoothing.three-1] has only one value
this.vertices[this.leftknot.smoothing.four] has only one value
this.leftknot.vertices[this.leftknot.smoothing.one] has only one value
this.leftknot.vertices[this.leftknot.smoothing.one-1] has only one value
this.leftknot.vertices[this.leftknot.smoothing.two] has only one value
this.leftknot.vertices[this.leftknot.smoothing.three] has only one value
this.leftknot.vertices[this.leftknot.smoothing.three-1] has only one value
this.leftknot.vertices[this.leftknot.smoothing.four] has only one value
this.leftknot.leftknot.vertices[this.leftknot.smoothing.one] has only one value
this.leftknot.leftknot.vertices[this.leftknot.smoothing.one-1] has only one value
this.leftknot.leftknot.vertices[this.leftknot.smoothing.two] has only one value
this.leftknot.leftknot.vertices[this.leftknot.smoothing.three] has only one value
this.leftknot.leftknot.vertices[this.leftknot.smoothing.three-1] has only one value
this.leftknot.leftknot.vertices[this.leftknot.smoothing.four] has only one value
this.leftknot.rightknot.vertices[this.leftknot.smoothing.one] has only one value
this.leftknot.rightknot.vertices[this.leftknot.smoothing.one-1] has only one value
this.leftknot.rightknot.vertices[this.leftknot.smoothing.two] has only one value
this.leftknot.rightknot.vertices[this.leftknot.smoothing.three] has only one value
this.leftknot.rightknot.vertices[this.leftknot.smoothing.three-1] has only one value
this.leftknot.rightknot.vertices[this.leftknot.smoothing.four] has only one value
this.rightknot.vertices[this.leftknot.smoothing.one] has only one value
this.rightknot.vertices[this.leftknot.smoothing.one-1] has only one value
this.rightknot.leftknot.vertices[this.leftknot.smoothing.one] has only one value
this.rightknot.leftknot.vertices[this.leftknot.smoothing.one-1] has only one value
this.rightknot.rightknot.vertices[this.leftknot.smoothing.one] has only one value
this.rightknot.rightknot.vertices[this.leftknot.smoothing.one-1] has only one value
this.rightknot.vertices[this.leftknot.smoothing.two] has only one value
this.rightknot.leftknot.vertices[this.leftknot.smoothing.two] has only one value
this.rightknot.rightknot.vertices[this.leftknot.smoothing.two] has only one value
this.rightknot.vertices[this.leftknot.smoothing.three] has only one value
this.rightknot.vertices[this.leftknot.smoothing.three-1] has only one value
this.rightknot.leftknot.vertices[this.leftknot.smoothing.three] has only one value
this.rightknot.leftknot.vertices[this.leftknot.smoothing.three-1] has only one value
this.rightknot.rightknot.vertices[this.leftknot.smoothing.three] has only one value
this.rightknot.rightknot.vertices[this.leftknot.smoothing.three-1] has only one value
this.rightknot.vertices[this.leftknot.smoothing.four] has only one value
this.rightknot.leftknot.vertices[this.leftknot.smoothing.four] has only one value
this.rightknot.rightknot.vertices[this.leftknot.smoothing.four] has only one value
this.vertices[this.leftknot.smoothing.two] in this.vertices[].from
this.vertices[this.leftknot.smoothing.three] in this.vertices[].from
this.vertices[this.leftknot.smoothing.four] in this.vertices[].from
this.vertices[this.leftknot.smoothing.two] in this.vertices[].from.from
this.vertices[this.leftknot.smoothing.three] in this.vertices[].from.from
this.vertices[this.leftknot.smoothing.four] in this.vertices[].from.from
this.vertices[this.leftknot.smoothing.two] in this.vertices[].from.to
this.vertices[this.leftknot.smoothing.three] in this.vertices[].from.to
this.vertices[this.leftknot.smoothing.four] in this.vertices[].from.to
this.vertices[this.leftknot.smoothing.two] in this.vertices[].to
this.vertices[this.leftknot.smoothing.three] in this.vertices[].to
this.vertices[this.leftknot.smoothing.four] in this.vertices[].to
this.vertices[this.leftknot.smoothing.two] in this.vertices[].to.from
this.vertices[this.leftknot.smoothing.three] in this.vertices[].to.from
this.vertices[this.leftknot.smoothing.four] in this.vertices[].to.from
this.vertices[this.leftknot.smoothing.two] in this.vertices[].to.to
this.vertices[this.leftknot.smoothing.three] in this.vertices[].to.to
this.vertices[this.leftknot.smoothing.four] in this.vertices[].to.to
this.leftknot.vertices[this.leftknot.smoothing.two] in this.leftknot.vertices[].from
this.leftknot.vertices[this.leftknot.smoothing.three] in this.leftknot.vertices[].from
this.leftknot.vertices[this.leftknot.smoothing.four] in this.leftknot.vertices[].from
this.leftknot.vertices[this.leftknot.smoothing.two] in this.leftknot.vertices[].to
this.leftknot.vertices[this.leftknot.smoothing.three] in this.leftknot.vertices[].to
this.leftknot.vertices[this.leftknot.smoothing.four] in this.leftknot.vertices[].to
this.leftknot.leftknot.vertices[this.leftknot.smoothing.three] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[this.leftknot.smoothing.four] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[this.leftknot.smoothing.three] in this.leftknot.leftknot.vertices[].to
this.leftknot.leftknot.vertices[this.leftknot.smoothing.four] in this.leftknot.leftknot.vertices[].to
this.leftknot.rightknot.vertices[this.leftknot.smoothing.three] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[this.leftknot.smoothing.four] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[this.leftknot.smoothing.three] in this.leftknot.rightknot.vertices[].to
this.leftknot.rightknot.vertices[this.leftknot.smoothing.four] in this.leftknot.rightknot.vertices[].to
this.rightknot.vertices[this.leftknot.smoothing.two] in this.rightknot.vertices[].from
this.rightknot.vertices[this.leftknot.smoothing.three] in this.rightknot.vertices[].from
this.rightknot.vertices[this.leftknot.smoothing.four] in this.rightknot.vertices[].from
this.rightknot.vertices[this.leftknot.smoothing.two] in this.rightknot.vertices[].to
this.rightknot.vertices[this.leftknot.smoothing.three] in this.rightknot.vertices[].to
this.rightknot.vertices[this.leftknot.smoothing.four] in this.rightknot.vertices[].to
this.rightknot.leftknot.vertices[this.leftknot.smoothing.three] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[this.leftknot.smoothing.four] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[this.leftknot.smoothing.three] in this.rightknot.leftknot.vertices[].to
this.rightknot.leftknot.vertices[this.leftknot.smoothing.four] in this.rightknot.leftknot.vertices[].to
this.rightknot.rightknot.vertices[this.leftknot.smoothing.three] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[this.leftknot.smoothing.four] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[this.leftknot.smoothing.three] in this.rightknot.rightknot.vertices[].to
this.rightknot.rightknot.vertices[this.leftknot.smoothing.four] in this.rightknot.rightknot.vertices[].to
===========================================================================
Knot.numCrossings():::EXIT
this.crossings == orig(this.crossings)
this.crossings.getClass().getName() == this.leftknot.rightknot.crossings.getClass().getName()
this.crossings.getClass().getName() == this.rightknot.crossings.getClass().getName()
this.crossings.getClass().getName() == this.rightknot.leftknot.crossings.getClass().getName()
this.crossings.getClass().getName() == this.rightknot.rightknot.crossings.getClass().getName()
this.crossings.getClass().getName() == orig(this.crossings.getClass().getName())
this.crossings.getClass().getName() == orig(this.leftknot.crossings.getClass().getName())
this.crossings.getClass().getName() == orig(this.leftknot.leftknot.crossings.getClass().getName())
this.crossings.getClass().getName() == orig(this.leftknot.rightknot.crossings.getClass().getName())
this.crossings.getClass().getName() == orig(this.rightknot.crossings.getClass().getName())
this.crossings.getClass().getName() == orig(this.rightknot.leftknot.crossings.getClass().getName())
this.crossings.getClass().getName() == orig(this.rightknot.rightknot.crossings.getClass().getName())
this.crossings[] == orig(this.crossings[])
this.crossings[].overstrand == orig(this.crossings[].overstrand)
this.crossings[].understrand == orig(this.crossings[].understrand)
this.crossings[].posneg == orig(this.crossings[].posneg)
this.vertices == orig(this.vertices)
this.vertices.getClass().getName() == this.leftknot.rightknot.vertices.getClass().getName()
this.vertices.getClass().getName() == this.rightknot.vertices.getClass().getName()
this.vertices.getClass().getName() == this.rightknot.leftknot.vertices.getClass().getName()
this.vertices.getClass().getName() == this.rightknot.rightknot.vertices.getClass().getName()
this.vertices.getClass().getName() == orig(this.vertices.getClass().getName())
this.vertices.getClass().getName() == orig(this.leftknot.vertices.getClass().getName())
this.vertices.getClass().getName() == orig(this.leftknot.leftknot.vertices.getClass().getName())
this.vertices.getClass().getName() == orig(this.leftknot.rightknot.vertices.getClass().getName())
this.vertices.getClass().getName() == orig(this.rightknot.vertices.getClass().getName())
this.vertices.getClass().getName() == orig(this.rightknot.leftknot.vertices.getClass().getName())
this.vertices.getClass().getName() == orig(this.rightknot.rightknot.vertices.getClass().getName())
this.vertices[] == orig(this.vertices[])
this.vertices[].numberOfVertex == orig(this.vertices[].numberOfVertex)
this.vertices[].from == orig(this.vertices[].from)
this.vertices[].from.numberOfVertex == orig(this.vertices[].from.numberOfVertex)
this.vertices[].from.from == orig(this.vertices[].from.from)
this.vertices[].from.to == orig(this.vertices[].from.to)
this.vertices[].from.visited == orig(this.vertices[].from.visited)
this.vertices[].to == orig(this.vertices[].to)
this.vertices[].to.numberOfVertex == orig(this.vertices[].to.numberOfVertex)
this.vertices[].to.from == orig(this.vertices[].to.from)
this.vertices[].to.to == orig(this.vertices[].to.to)
this.vertices[].to.visited == orig(this.vertices[].to.visited)
this.vertices[].visited == orig(this.vertices[].visited)
this.binarycode == orig(this.binarycode)
this.binarycode.toString == orig(this.binarycode.toString)
this.leftknot == orig(this.leftknot)
this.leftknot.crossings == orig(this.leftknot.crossings)
this.leftknot.crossings[] == orig(this.leftknot.crossings[])
this.leftknot.crossings[].overstrand == orig(this.leftknot.crossings[].overstrand)
this.leftknot.crossings[].understrand == orig(this.leftknot.crossings[].understrand)
this.leftknot.crossings[].posneg == orig(this.leftknot.crossings[].posneg)
this.leftknot.vertices == orig(this.leftknot.vertices)
this.leftknot.vertices[] == orig(this.leftknot.vertices[])
this.leftknot.vertices[].numberOfVertex == orig(this.leftknot.vertices[].numberOfVertex)
this.leftknot.vertices[].from == orig(this.leftknot.vertices[].from)
this.leftknot.vertices[].to == orig(this.leftknot.vertices[].to)
this.leftknot.vertices[].visited == orig(this.leftknot.vertices[].visited)
this.leftknot.binarycode == orig(this.leftknot.binarycode)
this.leftknot.binarycode.toString == orig(this.leftknot.binarycode.toString)
this.leftknot.leftknot == orig(this.leftknot.leftknot)
this.leftknot.leftknot.crossings == orig(this.leftknot.leftknot.crossings)
this.leftknot.leftknot.crossings[] == orig(this.leftknot.leftknot.crossings[])
this.leftknot.leftknot.crossings[].overstrand == orig(this.leftknot.leftknot.crossings[].overstrand)
this.leftknot.leftknot.crossings[].understrand == orig(this.leftknot.leftknot.crossings[].understrand)
this.leftknot.leftknot.crossings[].posneg == orig(this.leftknot.leftknot.crossings[].posneg)
this.leftknot.leftknot.vertices == orig(this.leftknot.leftknot.vertices)
this.leftknot.leftknot.vertices[] == orig(this.leftknot.leftknot.vertices[])
this.leftknot.leftknot.vertices[].numberOfVertex == orig(this.leftknot.leftknot.vertices[].numberOfVertex)
this.leftknot.leftknot.vertices[].from == orig(this.leftknot.leftknot.vertices[].from)
this.leftknot.leftknot.vertices[].to == orig(this.leftknot.leftknot.vertices[].to)
this.leftknot.leftknot.vertices[].visited == orig(this.leftknot.leftknot.vertices[].visited)
this.leftknot.leftknot.binarycode == orig(this.leftknot.leftknot.binarycode)
this.leftknot.leftknot.binarycode.toString == orig(this.leftknot.leftknot.binarycode.toString)
this.leftknot.leftknot.leftknot == orig(this.leftknot.leftknot.leftknot)
this.leftknot.leftknot.rightknot == orig(this.leftknot.leftknot.rightknot)
this.leftknot.leftknot.numcircles == orig(this.leftknot.leftknot.numcircles)
this.leftknot.leftknot.seifertCircles == orig(this.leftknot.leftknot.seifertCircles)
this.leftknot.leftknot.seifertCircles[] == orig(this.leftknot.leftknot.seifertCircles[])
this.leftknot.leftknot.smoothing == orig(this.leftknot.leftknot.smoothing)
this.leftknot.rightknot == orig(this.leftknot.rightknot)
this.leftknot.rightknot.crossings == orig(this.leftknot.rightknot.crossings)
this.leftknot.rightknot.crossings[] == orig(this.leftknot.rightknot.crossings[])
this.leftknot.rightknot.crossings[].overstrand == orig(this.leftknot.rightknot.crossings[].overstrand)
this.leftknot.rightknot.crossings[].understrand == orig(this.leftknot.rightknot.crossings[].understrand)
this.leftknot.rightknot.crossings[].posneg == orig(this.leftknot.rightknot.crossings[].posneg)
this.leftknot.rightknot.vertices == orig(this.leftknot.rightknot.vertices)
this.leftknot.rightknot.vertices[] == orig(this.leftknot.rightknot.vertices[])
this.leftknot.rightknot.vertices[].numberOfVertex == orig(this.leftknot.rightknot.vertices[].numberOfVertex)
this.leftknot.rightknot.vertices[].from == orig(this.leftknot.rightknot.vertices[].from)
this.leftknot.rightknot.vertices[].to == orig(this.leftknot.rightknot.vertices[].to)
this.leftknot.rightknot.vertices[].visited == orig(this.leftknot.rightknot.vertices[].visited)
this.leftknot.rightknot.binarycode == orig(this.leftknot.rightknot.binarycode)
this.leftknot.rightknot.binarycode.toString == orig(this.leftknot.rightknot.binarycode.toString)
this.leftknot.rightknot.leftknot == orig(this.leftknot.rightknot.leftknot)
this.leftknot.rightknot.rightknot == orig(this.leftknot.rightknot.rightknot)
this.leftknot.rightknot.numcircles == orig(this.leftknot.rightknot.numcircles)
this.leftknot.rightknot.seifertCircles == orig(this.leftknot.rightknot.seifertCircles)
this.leftknot.rightknot.seifertCircles[] == orig(this.leftknot.rightknot.seifertCircles[])
this.leftknot.rightknot.smoothing == orig(this.leftknot.rightknot.smoothing)
this.leftknot.numcircles == orig(this.leftknot.numcircles)
this.leftknot.seifertCircles == orig(this.leftknot.seifertCircles)
this.leftknot.seifertCircles[] == orig(this.leftknot.seifertCircles[])
this.leftknot.smoothing == orig(this.leftknot.smoothing)
this.leftknot.smoothing.one == orig(this.leftknot.smoothing.one)
this.leftknot.smoothing.one == orig(this.rightknot.smoothing.one)
this.leftknot.smoothing.two == this.rightknot.smoothing.four
this.leftknot.smoothing.two == orig(this.leftknot.smoothing.two)
this.leftknot.smoothing.two == orig(this.rightknot.smoothing.four)
this.leftknot.smoothing.two == size(this.vertices[])-1
this.leftknot.smoothing.two == size(this.leftknot.vertices[])-1
this.leftknot.smoothing.two == size(this.leftknot.leftknot.vertices[])-1
this.leftknot.smoothing.two == size(this.leftknot.rightknot.vertices[])-1
this.leftknot.smoothing.two == size(this.rightknot.vertices[])-1
this.leftknot.smoothing.two == size(this.rightknot.leftknot.vertices[])-1
this.leftknot.smoothing.two == size(this.rightknot.rightknot.vertices[])-1
this.leftknot.smoothing.two == orig(size(this.vertices[]))-1
this.leftknot.smoothing.two == orig(size(this.leftknot.vertices[]))-1
this.leftknot.smoothing.two == orig(size(this.leftknot.leftknot.vertices[]))-1
this.leftknot.smoothing.two == orig(size(this.leftknot.rightknot.vertices[]))-1
this.leftknot.smoothing.two == orig(size(this.rightknot.vertices[]))-1
this.leftknot.smoothing.two == orig(size(this.rightknot.leftknot.vertices[]))-1
this.leftknot.smoothing.two == orig(size(this.rightknot.rightknot.vertices[]))-1
this.leftknot.smoothing.three == this.rightknot.smoothing.two
this.leftknot.smoothing.three == orig(this.leftknot.smoothing.three)
this.leftknot.smoothing.three == orig(this.rightknot.smoothing.two)
this.leftknot.smoothing.four == this.rightknot.smoothing.three
this.leftknot.smoothing.four == orig(this.leftknot.smoothing.four)
this.leftknot.smoothing.four == orig(this.rightknot.smoothing.three)
this.leftknot.smoothing.reorder == orig(this.leftknot.smoothing.reorder)
this.rightknot == orig(this.rightknot)
this.rightknot.crossings == orig(this.rightknot.crossings)
this.rightknot.crossings[] == orig(this.rightknot.crossings[])
this.rightknot.crossings[].overstrand == orig(this.rightknot.crossings[].overstrand)
this.rightknot.crossings[].understrand == orig(this.rightknot.crossings[].understrand)
this.rightknot.crossings[].posneg == orig(this.rightknot.crossings[].posneg)
this.rightknot.vertices == orig(this.rightknot.vertices)
this.rightknot.vertices[] == orig(this.rightknot.vertices[])
this.rightknot.vertices[].numberOfVertex == orig(this.rightknot.vertices[].numberOfVertex)
this.rightknot.vertices[].from == orig(this.rightknot.vertices[].from)
this.rightknot.vertices[].to == orig(this.rightknot.vertices[].to)
this.rightknot.vertices[].visited == orig(this.rightknot.vertices[].visited)
this.rightknot.binarycode == orig(this.rightknot.binarycode)
this.rightknot.binarycode.toString == orig(this.rightknot.binarycode.toString)
this.rightknot.leftknot == orig(this.rightknot.leftknot)
this.rightknot.leftknot.crossings == orig(this.rightknot.leftknot.crossings)
this.rightknot.leftknot.crossings[] == orig(this.rightknot.leftknot.crossings[])
this.rightknot.leftknot.crossings[].overstrand == orig(this.rightknot.leftknot.crossings[].overstrand)
this.rightknot.leftknot.crossings[].understrand == orig(this.rightknot.leftknot.crossings[].understrand)
this.rightknot.leftknot.crossings[].posneg == orig(this.rightknot.leftknot.crossings[].posneg)
this.rightknot.leftknot.vertices == orig(this.rightknot.leftknot.vertices)
this.rightknot.leftknot.vertices[] == orig(this.rightknot.leftknot.vertices[])
this.rightknot.leftknot.vertices[].numberOfVertex == orig(this.rightknot.leftknot.vertices[].numberOfVertex)
this.rightknot.leftknot.vertices[].from == orig(this.rightknot.leftknot.vertices[].from)
this.rightknot.leftknot.vertices[].to == orig(this.rightknot.leftknot.vertices[].to)
this.rightknot.leftknot.vertices[].visited == orig(this.rightknot.leftknot.vertices[].visited)
this.rightknot.leftknot.binarycode == orig(this.rightknot.leftknot.binarycode)
this.rightknot.leftknot.binarycode.toString == orig(this.rightknot.leftknot.binarycode.toString)
this.rightknot.leftknot.leftknot == orig(this.rightknot.leftknot.leftknot)
this.rightknot.leftknot.rightknot == orig(this.rightknot.leftknot.rightknot)
this.rightknot.leftknot.numcircles == orig(this.rightknot.leftknot.numcircles)
this.rightknot.leftknot.seifertCircles == orig(this.rightknot.leftknot.seifertCircles)
this.rightknot.leftknot.seifertCircles[] == orig(this.rightknot.leftknot.seifertCircles[])
this.rightknot.leftknot.smoothing == orig(this.rightknot.leftknot.smoothing)
this.rightknot.rightknot == orig(this.rightknot.rightknot)
this.rightknot.rightknot.crossings == orig(this.rightknot.rightknot.crossings)
this.rightknot.rightknot.crossings[] == orig(this.rightknot.rightknot.crossings[])
this.rightknot.rightknot.crossings[].overstrand == orig(this.rightknot.rightknot.crossings[].overstrand)
this.rightknot.rightknot.crossings[].understrand == orig(this.rightknot.rightknot.crossings[].understrand)
this.rightknot.rightknot.crossings[].posneg == orig(this.rightknot.rightknot.crossings[].posneg)
this.rightknot.rightknot.vertices == orig(this.rightknot.rightknot.vertices)
this.rightknot.rightknot.vertices[] == orig(this.rightknot.rightknot.vertices[])
this.rightknot.rightknot.vertices[].numberOfVertex == orig(this.rightknot.rightknot.vertices[].numberOfVertex)
this.rightknot.rightknot.vertices[].from == orig(this.rightknot.rightknot.vertices[].from)
this.rightknot.rightknot.vertices[].to == orig(this.rightknot.rightknot.vertices[].to)
this.rightknot.rightknot.vertices[].visited == orig(this.rightknot.rightknot.vertices[].visited)
this.rightknot.rightknot.binarycode == orig(this.rightknot.rightknot.binarycode)
this.rightknot.rightknot.binarycode.toString == orig(this.rightknot.rightknot.binarycode.toString)
this.rightknot.rightknot.leftknot == orig(this.rightknot.rightknot.leftknot)
this.rightknot.rightknot.rightknot == orig(this.rightknot.rightknot.rightknot)
this.rightknot.rightknot.numcircles == orig(this.rightknot.rightknot.numcircles)
this.rightknot.rightknot.seifertCircles == orig(this.rightknot.rightknot.seifertCircles)
this.rightknot.rightknot.seifertCircles[] == orig(this.rightknot.rightknot.seifertCircles[])
this.rightknot.rightknot.smoothing == orig(this.rightknot.rightknot.smoothing)
this.rightknot.numcircles == orig(this.rightknot.numcircles)
this.rightknot.seifertCircles == orig(this.rightknot.seifertCircles)
this.rightknot.seifertCircles[] == orig(this.rightknot.seifertCircles[])
this.rightknot.smoothing == orig(this.rightknot.smoothing)
this.rightknot.smoothing.reorder == orig(this.rightknot.smoothing.reorder)
this.numcircles == orig(this.numcircles)
this.seifertCircles == orig(this.seifertCircles)
this.seifertCircles[] == orig(this.seifertCircles[])
this.smoothing == orig(this.smoothing)
return == size(this.crossings[])
return == orig(size(this.crossings[]))
size(this.crossings[])-1 == size(this.leftknot.crossings[])
size(this.crossings[])-1 == size(this.rightknot.crossings[])
size(this.crossings[])-1 == orig(size(this.leftknot.crossings[]))
size(this.crossings[])-1 == orig(size(this.rightknot.crossings[]))
size(this.vertices[]) == size(this.leftknot.rightknot.vertices[])
size(this.vertices[]) == size(this.rightknot.vertices[])
size(this.vertices[]) == size(this.rightknot.leftknot.vertices[])
size(this.vertices[]) == size(this.rightknot.rightknot.vertices[])
size(this.vertices[]) == orig(size(this.leftknot.vertices[]))
size(this.vertices[]) == orig(size(this.leftknot.leftknot.vertices[]))
size(this.vertices[]) == orig(size(this.leftknot.rightknot.vertices[]))
size(this.vertices[]) == orig(size(this.rightknot.vertices[]))
size(this.vertices[]) == orig(size(this.rightknot.leftknot.vertices[]))
size(this.vertices[]) == orig(size(this.rightknot.rightknot.vertices[]))
size(this.leftknot.crossings[])-1 == size(this.leftknot.leftknot.crossings[])
size(this.leftknot.crossings[])-1 == size(this.leftknot.rightknot.crossings[])
size(this.leftknot.crossings[])-1 == size(this.rightknot.leftknot.crossings[])
size(this.leftknot.crossings[])-1 == size(this.rightknot.rightknot.crossings[])
size(this.leftknot.crossings[])-1 == orig(size(this.leftknot.leftknot.crossings[]))
size(this.leftknot.crossings[])-1 == orig(size(this.leftknot.rightknot.crossings[]))
size(this.leftknot.crossings[])-1 == orig(size(this.rightknot.leftknot.crossings[]))
size(this.leftknot.crossings[])-1 == orig(size(this.rightknot.rightknot.crossings[]))
this.vertices[this.leftknot.smoothing.one] == this.vertices[this.leftknot.smoothing.four-1]
this.vertices[this.leftknot.smoothing.one] == this.vertices[this.rightknot.smoothing.three-1]
this.vertices[this.leftknot.smoothing.one] == this.vertices[orig(this.leftknot.smoothing.four)-1]
this.vertices[this.leftknot.smoothing.one] == this.vertices[orig(this.rightknot.smoothing.three)-1]
this.vertices[this.leftknot.smoothing.one] == orig(this.vertices[post(this.leftknot.smoothing.four)-1])
this.vertices[this.leftknot.smoothing.one] == orig(this.vertices[post(this.rightknot.smoothing.three)-1])
this.vertices[this.leftknot.smoothing.one] == orig(this.vertices[this.leftknot.smoothing.four-1])
this.vertices[this.leftknot.smoothing.one] == orig(this.vertices[this.rightknot.smoothing.three-1])
this.vertices[this.leftknot.smoothing.two-1] == this.vertices[this.leftknot.smoothing.three]
this.vertices[this.leftknot.smoothing.three] == this.vertices[this.rightknot.smoothing.four-1]
this.vertices[this.leftknot.smoothing.three] == this.vertices[orig(this.leftknot.smoothing.two)-1]
this.vertices[this.leftknot.smoothing.three] == this.vertices[orig(this.rightknot.smoothing.four)-1]
this.vertices[this.leftknot.smoothing.three] == orig(this.vertices[post(this.leftknot.smoothing.two)-1])
this.vertices[this.leftknot.smoothing.three] == orig(this.vertices[post(this.rightknot.smoothing.four)-1])
this.vertices[this.leftknot.smoothing.three] == orig(this.vertices[this.leftknot.smoothing.two-1])
this.vertices[this.leftknot.smoothing.three] == orig(this.vertices[this.rightknot.smoothing.four-1])
this.leftknot.vertices[this.leftknot.smoothing.one] == this.leftknot.vertices[this.leftknot.smoothing.four-1]
this.leftknot.vertices[this.leftknot.smoothing.one] == this.leftknot.vertices[this.rightknot.smoothing.three-1]
this.leftknot.vertices[this.leftknot.smoothing.one] == this.leftknot.vertices[orig(this.leftknot.smoothing.four)-1]
this.leftknot.vertices[this.leftknot.smoothing.one] == this.leftknot.vertices[orig(this.rightknot.smoothing.three)-1]
this.leftknot.vertices[this.leftknot.smoothing.one] == orig(this.leftknot.vertices[post(this.leftknot.smoothing.four)-1])
this.leftknot.vertices[this.leftknot.smoothing.one] == orig(this.leftknot.vertices[post(this.rightknot.smoothing.three)-1])
this.leftknot.vertices[this.leftknot.smoothing.one] == orig(this.leftknot.vertices[this.leftknot.smoothing.four-1])
this.leftknot.vertices[this.leftknot.smoothing.one] == orig(this.leftknot.vertices[this.rightknot.smoothing.three-1])
this.leftknot.vertices[this.leftknot.smoothing.two-1] == this.leftknot.vertices[this.leftknot.smoothing.three]
this.leftknot.vertices[this.leftknot.smoothing.three] == this.leftknot.vertices[this.rightknot.smoothing.four-1]
this.leftknot.vertices[this.leftknot.smoothing.three] == this.leftknot.vertices[orig(this.leftknot.smoothing.two)-1]
this.leftknot.vertices[this.leftknot.smoothing.three] == this.leftknot.vertices[orig(this.rightknot.smoothing.four)-1]
this.leftknot.vertices[this.leftknot.smoothing.three] == orig(this.leftknot.vertices[post(this.leftknot.smoothing.two)-1])
this.leftknot.vertices[this.leftknot.smoothing.three] == orig(this.leftknot.vertices[post(this.rightknot.smoothing.four)-1])
this.leftknot.vertices[this.leftknot.smoothing.three] == orig(this.leftknot.vertices[this.leftknot.smoothing.two-1])
this.leftknot.vertices[this.leftknot.smoothing.three] == orig(this.leftknot.vertices[this.rightknot.smoothing.four-1])
this.leftknot.leftknot.vertices[this.leftknot.smoothing.one] == this.leftknot.leftknot.vertices[this.leftknot.smoothing.four-1]
this.leftknot.leftknot.vertices[this.leftknot.smoothing.one] == this.leftknot.leftknot.vertices[this.rightknot.smoothing.three-1]
this.leftknot.leftknot.vertices[this.leftknot.smoothing.one] == this.leftknot.leftknot.vertices[orig(this.leftknot.smoothing.four)-1]
this.leftknot.leftknot.vertices[this.leftknot.smoothing.one] == this.leftknot.leftknot.vertices[orig(this.rightknot.smoothing.three)-1]
this.leftknot.leftknot.vertices[this.leftknot.smoothing.one] == orig(this.leftknot.leftknot.vertices[post(this.leftknot.smoothing.four)-1])
this.leftknot.leftknot.vertices[this.leftknot.smoothing.one] == orig(this.leftknot.leftknot.vertices[post(this.rightknot.smoothing.three)-1])
this.leftknot.leftknot.vertices[this.leftknot.smoothing.one] == orig(this.leftknot.leftknot.vertices[this.leftknot.smoothing.four-1])
this.leftknot.leftknot.vertices[this.leftknot.smoothing.one] == orig(this.leftknot.leftknot.vertices[this.rightknot.smoothing.three-1])
this.leftknot.leftknot.vertices[this.leftknot.smoothing.two-1] == this.leftknot.leftknot.vertices[this.leftknot.smoothing.three]
this.leftknot.leftknot.vertices[this.leftknot.smoothing.three] == this.leftknot.leftknot.vertices[this.rightknot.smoothing.four-1]
this.leftknot.leftknot.vertices[this.leftknot.smoothing.three] == this.leftknot.leftknot.vertices[orig(this.leftknot.smoothing.two)-1]
this.leftknot.leftknot.vertices[this.leftknot.smoothing.three] == this.leftknot.leftknot.vertices[orig(this.rightknot.smoothing.four)-1]
this.leftknot.leftknot.vertices[this.leftknot.smoothing.three] == orig(this.leftknot.leftknot.vertices[post(this.leftknot.smoothing.two)-1])
this.leftknot.leftknot.vertices[this.leftknot.smoothing.three] == orig(this.leftknot.leftknot.vertices[post(this.rightknot.smoothing.four)-1])
this.leftknot.leftknot.vertices[this.leftknot.smoothing.three] == orig(this.leftknot.leftknot.vertices[this.leftknot.smoothing.two-1])
this.leftknot.leftknot.vertices[this.leftknot.smoothing.three] == orig(this.leftknot.leftknot.vertices[this.rightknot.smoothing.four-1])
this.leftknot.rightknot.vertices[this.leftknot.smoothing.one] == this.leftknot.rightknot.vertices[this.leftknot.smoothing.four-1]
this.leftknot.rightknot.vertices[this.leftknot.smoothing.one] == this.leftknot.rightknot.vertices[this.rightknot.smoothing.three-1]
this.leftknot.rightknot.vertices[this.leftknot.smoothing.one] == this.leftknot.rightknot.vertices[orig(this.leftknot.smoothing.four)-1]
this.leftknot.rightknot.vertices[this.leftknot.smoothing.one] == this.leftknot.rightknot.vertices[orig(this.rightknot.smoothing.three)-1]
this.leftknot.rightknot.vertices[this.leftknot.smoothing.one] == orig(this.leftknot.rightknot.vertices[post(this.leftknot.smoothing.four)-1])
this.leftknot.rightknot.vertices[this.leftknot.smoothing.one] == orig(this.leftknot.rightknot.vertices[post(this.rightknot.smoothing.three)-1])
this.leftknot.rightknot.vertices[this.leftknot.smoothing.one] == orig(this.leftknot.rightknot.vertices[this.leftknot.smoothing.four-1])
this.leftknot.rightknot.vertices[this.leftknot.smoothing.one] == orig(this.leftknot.rightknot.vertices[this.rightknot.smoothing.three-1])
this.leftknot.rightknot.vertices[this.leftknot.smoothing.two-1] == this.leftknot.rightknot.vertices[this.leftknot.smoothing.three]
this.leftknot.rightknot.vertices[this.leftknot.smoothing.three] == this.leftknot.rightknot.vertices[this.rightknot.smoothing.four-1]
this.leftknot.rightknot.vertices[this.leftknot.smoothing.three] == this.leftknot.rightknot.vertices[orig(this.leftknot.smoothing.two)-1]
this.leftknot.rightknot.vertices[this.leftknot.smoothing.three] == this.leftknot.rightknot.vertices[orig(this.rightknot.smoothing.four)-1]
this.leftknot.rightknot.vertices[this.leftknot.smoothing.three] == orig(this.leftknot.rightknot.vertices[post(this.leftknot.smoothing.two)-1])
this.leftknot.rightknot.vertices[this.leftknot.smoothing.three] == orig(this.leftknot.rightknot.vertices[post(this.rightknot.smoothing.four)-1])
this.leftknot.rightknot.vertices[this.leftknot.smoothing.three] == orig(this.leftknot.rightknot.vertices[this.leftknot.smoothing.two-1])
this.leftknot.rightknot.vertices[this.leftknot.smoothing.three] == orig(this.leftknot.rightknot.vertices[this.rightknot.smoothing.four-1])
this.rightknot.vertices[this.leftknot.smoothing.one] == this.rightknot.vertices[this.leftknot.smoothing.four-1]
this.rightknot.vertices[this.leftknot.smoothing.one] == orig(this.rightknot.vertices[post(this.leftknot.smoothing.four)-1])
this.rightknot.vertices[this.leftknot.smoothing.one] == this.rightknot.vertices[this.rightknot.smoothing.three-1]
this.rightknot.vertices[this.leftknot.smoothing.one] == this.rightknot.vertices[orig(this.leftknot.smoothing.four)-1]
this.rightknot.vertices[this.leftknot.smoothing.one] == this.rightknot.vertices[orig(this.rightknot.smoothing.three)-1]
this.rightknot.vertices[this.leftknot.smoothing.one] == orig(this.rightknot.vertices[post(this.rightknot.smoothing.three)-1])
this.rightknot.vertices[this.leftknot.smoothing.one] == orig(this.rightknot.vertices[this.leftknot.smoothing.four-1])
this.rightknot.vertices[this.leftknot.smoothing.one] == orig(this.rightknot.vertices[this.rightknot.smoothing.three-1])
this.rightknot.leftknot.vertices[this.leftknot.smoothing.one] == this.rightknot.leftknot.vertices[this.leftknot.smoothing.four-1]
this.rightknot.leftknot.vertices[this.leftknot.smoothing.one] == orig(this.rightknot.leftknot.vertices[post(this.leftknot.smoothing.four)-1])
this.rightknot.leftknot.vertices[this.leftknot.smoothing.one] == this.rightknot.leftknot.vertices[this.rightknot.smoothing.three-1]
this.rightknot.leftknot.vertices[this.leftknot.smoothing.one] == this.rightknot.leftknot.vertices[orig(this.leftknot.smoothing.four)-1]
this.rightknot.leftknot.vertices[this.leftknot.smoothing.one] == this.rightknot.leftknot.vertices[orig(this.rightknot.smoothing.three)-1]
this.rightknot.leftknot.vertices[this.leftknot.smoothing.one] == orig(this.rightknot.leftknot.vertices[post(this.rightknot.smoothing.three)-1])
this.rightknot.leftknot.vertices[this.leftknot.smoothing.one] == orig(this.rightknot.leftknot.vertices[this.leftknot.smoothing.four-1])
this.rightknot.leftknot.vertices[this.leftknot.smoothing.one] == orig(this.rightknot.leftknot.vertices[this.rightknot.smoothing.three-1])
this.rightknot.rightknot.vertices[this.leftknot.smoothing.one] == this.rightknot.rightknot.vertices[this.leftknot.smoothing.four-1]
this.rightknot.rightknot.vertices[this.leftknot.smoothing.one] == orig(this.rightknot.rightknot.vertices[post(this.leftknot.smoothing.four)-1])
this.rightknot.rightknot.vertices[this.leftknot.smoothing.one] == this.rightknot.rightknot.vertices[this.rightknot.smoothing.three-1]
this.rightknot.rightknot.vertices[this.leftknot.smoothing.one] == this.rightknot.rightknot.vertices[orig(this.leftknot.smoothing.four)-1]
this.rightknot.rightknot.vertices[this.leftknot.smoothing.one] == this.rightknot.rightknot.vertices[orig(this.rightknot.smoothing.three)-1]
this.rightknot.rightknot.vertices[this.leftknot.smoothing.one] == orig(this.rightknot.rightknot.vertices[post(this.rightknot.smoothing.three)-1])
this.rightknot.rightknot.vertices[this.leftknot.smoothing.one] == orig(this.rightknot.rightknot.vertices[this.leftknot.smoothing.four-1])
this.rightknot.rightknot.vertices[this.leftknot.smoothing.one] == orig(this.rightknot.rightknot.vertices[this.rightknot.smoothing.three-1])
this.rightknot.vertices[this.leftknot.smoothing.two-1] == this.rightknot.vertices[this.leftknot.smoothing.three]
this.rightknot.leftknot.vertices[this.leftknot.smoothing.two-1] == this.rightknot.leftknot.vertices[this.leftknot.smoothing.three]
this.rightknot.rightknot.vertices[this.leftknot.smoothing.two-1] == this.rightknot.rightknot.vertices[this.leftknot.smoothing.three]
orig(this.rightknot.vertices[post(this.leftknot.smoothing.two)-1]) == this.rightknot.vertices[this.leftknot.smoothing.three]
orig(this.rightknot.leftknot.vertices[post(this.leftknot.smoothing.two)-1]) == this.rightknot.leftknot.vertices[this.leftknot.smoothing.three]
orig(this.rightknot.rightknot.vertices[post(this.leftknot.smoothing.two)-1]) == this.rightknot.rightknot.vertices[this.leftknot.smoothing.three]
this.rightknot.vertices[this.leftknot.smoothing.three] == this.rightknot.vertices[this.rightknot.smoothing.four-1]
this.rightknot.vertices[this.leftknot.smoothing.three] == this.rightknot.vertices[orig(this.leftknot.smoothing.two)-1]
this.rightknot.vertices[this.leftknot.smoothing.three] == this.rightknot.vertices[orig(this.rightknot.smoothing.four)-1]
this.rightknot.vertices[this.leftknot.smoothing.three] == orig(this.rightknot.vertices[post(this.rightknot.smoothing.four)-1])
this.rightknot.vertices[this.leftknot.smoothing.three] == orig(this.rightknot.vertices[this.leftknot.smoothing.two-1])
this.rightknot.vertices[this.leftknot.smoothing.three] == orig(this.rightknot.vertices[this.rightknot.smoothing.four-1])
this.rightknot.leftknot.vertices[this.leftknot.smoothing.three] == this.rightknot.leftknot.vertices[this.rightknot.smoothing.four-1]
this.rightknot.leftknot.vertices[this.leftknot.smoothing.three] == this.rightknot.leftknot.vertices[orig(this.leftknot.smoothing.two)-1]
this.rightknot.leftknot.vertices[this.leftknot.smoothing.three] == this.rightknot.leftknot.vertices[orig(this.rightknot.smoothing.four)-1]
this.rightknot.leftknot.vertices[this.leftknot.smoothing.three] == orig(this.rightknot.leftknot.vertices[post(this.rightknot.smoothing.four)-1])
this.rightknot.leftknot.vertices[this.leftknot.smoothing.three] == orig(this.rightknot.leftknot.vertices[this.leftknot.smoothing.two-1])
this.rightknot.leftknot.vertices[this.leftknot.smoothing.three] == orig(this.rightknot.leftknot.vertices[this.rightknot.smoothing.four-1])
this.rightknot.rightknot.vertices[this.leftknot.smoothing.three] == this.rightknot.rightknot.vertices[this.rightknot.smoothing.four-1]
this.rightknot.rightknot.vertices[this.leftknot.smoothing.three] == this.rightknot.rightknot.vertices[orig(this.leftknot.smoothing.two)-1]
this.rightknot.rightknot.vertices[this.leftknot.smoothing.three] == this.rightknot.rightknot.vertices[orig(this.rightknot.smoothing.four)-1]
this.rightknot.rightknot.vertices[this.leftknot.smoothing.three] == orig(this.rightknot.rightknot.vertices[post(this.rightknot.smoothing.four)-1])
this.rightknot.rightknot.vertices[this.leftknot.smoothing.three] == orig(this.rightknot.rightknot.vertices[this.leftknot.smoothing.two-1])
this.rightknot.rightknot.vertices[this.leftknot.smoothing.three] == orig(this.rightknot.rightknot.vertices[this.rightknot.smoothing.four-1])
this.crossings has only one value
this.crossings[] contains no nulls and has only one value, of length 3
this.crossings[].getClass().getName() == [Crossing, Crossing, Crossing]
this.crossings[].overstrand contains no nulls and has only one value, of length 3
this.crossings[].understrand contains no nulls and has only one value, of length 3
this.crossings[].posneg == [1, 1, 1]
this.crossings[].posneg elements == true
this.vertices has only one value
this.vertices[] contains no nulls and has only one value, of length 6
this.vertices[].from contains no nulls and has only one value, of length 6
this.vertices[].from.numberOfVertex == [6, 1, 2, 3, 4, 5]
this.vertices[].from.from contains no nulls and has only one value, of length 6
this.vertices[].from.to contains no nulls and has only one value, of length 6
this.vertices[].from.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].from.visited elements == true
this.vertices[].to contains no nulls and has only one value, of length 6
this.vertices[].to.numberOfVertex == [2, 3, 4, 5, 6, 1]
this.vertices[].to.from contains no nulls and has only one value, of length 6
this.vertices[].to.to contains no nulls and has only one value, of length 6
this.vertices[].to.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].to.visited elements == true
this.vertices[].visited == [1, 1, 1, 1, 1, 1]
this.vertices[].visited elements == true
this.binarycode has only one value
this.binarycode.toString == ""
this.leftknot has only one value
this.leftknot.crossings has only one value
this.leftknot.crossings[] contains no nulls and has only one value, of length 2
this.leftknot.crossings[].getClass().getName() == [Crossing, Crossing]
this.leftknot.crossings[].overstrand contains no nulls and has only one value, of length 2
this.leftknot.crossings[].understrand contains no nulls and has only one value, of length 2
this.leftknot.crossings[].posneg == [1, 1]
this.leftknot.crossings[].posneg elements == true
this.leftknot.vertices has only one value
this.leftknot.vertices[] contains no nulls and has only one value, of length 6
this.leftknot.vertices[].from contains no nulls and has only one value, of length 6
this.leftknot.vertices[].to contains no nulls and has only one value, of length 6
this.leftknot.binarycode has only one value
this.leftknot.binarycode.toString == "0"
this.leftknot.leftknot has only one value
this.leftknot.leftknot.crossings has only one value
this.leftknot.leftknot.crossings[] contains no nulls and has only one value, of length 1
this.leftknot.leftknot.crossings[].getClass().getName() == [Crossing]
this.leftknot.leftknot.crossings[].overstrand contains no nulls and has only one value, of length 1
this.leftknot.leftknot.crossings[].understrand contains no nulls and has only one value, of length 1
this.leftknot.leftknot.crossings[].posneg == [1]
this.leftknot.leftknot.vertices has only one value
this.leftknot.leftknot.vertices[] contains no nulls and has only one value, of length 6
this.leftknot.leftknot.vertices[].from contains no nulls and has only one value, of length 6
this.leftknot.leftknot.vertices[].to contains no nulls and has only one value, of length 6
this.leftknot.leftknot.binarycode has only one value
this.leftknot.leftknot.binarycode.toString == "00"
this.leftknot.leftknot.leftknot has only one value
this.leftknot.leftknot.rightknot has only one value
this.leftknot.leftknot.seifertCircles has only one value
this.leftknot.leftknot.seifertCircles[] contains no nulls and has only one value, of length 1
this.leftknot.leftknot.seifertCircles[] elements has only one value
this.leftknot.leftknot.seifertCircles[].getClass().getName() == [SeifertCircle]
this.leftknot.leftknot.smoothing has only one value
this.leftknot.rightknot has only one value
this.leftknot.rightknot.crossings has only one value
this.leftknot.rightknot.crossings[] contains no nulls and has only one value, of length 1
this.leftknot.rightknot.crossings[].overstrand contains no nulls and has only one value, of length 1
this.leftknot.rightknot.crossings[].understrand contains no nulls and has only one value, of length 1
this.leftknot.rightknot.crossings[].posneg == [0]
this.leftknot.rightknot.vertices has only one value
this.leftknot.rightknot.vertices[] contains no nulls and has only one value, of length 6
this.leftknot.rightknot.vertices[].from contains no nulls and has only one value, of length 6
this.leftknot.rightknot.vertices[].to contains no nulls and has only one value, of length 6
this.leftknot.rightknot.binarycode has only one value
this.leftknot.rightknot.binarycode.toString == "01"
this.leftknot.rightknot.leftknot has only one value
this.leftknot.rightknot.rightknot has only one value
this.leftknot.rightknot.seifertCircles has only one value
this.leftknot.rightknot.seifertCircles[] contains no nulls and has only one value, of length 1
this.leftknot.rightknot.seifertCircles[] elements has only one value
this.leftknot.rightknot.seifertCircles[].getClass().getName() == [SeifertCircle]
this.leftknot.rightknot.smoothing has only one value
this.leftknot.seifertCircles has only one value
this.leftknot.seifertCircles[] contains no nulls and has only one value, of length 2
this.leftknot.seifertCircles[].getClass().getName() == [SeifertCircle, SeifertCircle]
this.leftknot.smoothing has only one value
this.leftknot.smoothing.one == 1
this.leftknot.smoothing.three == 4
this.leftknot.smoothing.four == 2
this.leftknot.smoothing.reorder == false
this.rightknot has only one value
this.rightknot.crossings has only one value
this.rightknot.crossings[] contains no nulls and has only one value, of length 2
this.rightknot.crossings[].overstrand contains no nulls and has only one value, of length 2
this.rightknot.crossings[].understrand contains no nulls and has only one value, of length 2
this.rightknot.crossings[].posneg == [0, 0]
this.rightknot.vertices has only one value
this.rightknot.vertices[] contains no nulls and has only one value, of length 6
this.rightknot.vertices[].from contains no nulls and has only one value, of length 6
this.rightknot.vertices[].to contains no nulls and has only one value, of length 6
this.rightknot.binarycode has only one value
this.rightknot.binarycode.toString == "1"
this.rightknot.leftknot has only one value
this.rightknot.leftknot.crossings has only one value
this.rightknot.leftknot.crossings[] contains no nulls and has only one value, of length 1
this.rightknot.leftknot.crossings[].overstrand contains no nulls and has only one value, of length 1
this.rightknot.leftknot.crossings[].understrand contains no nulls and has only one value, of length 1
this.rightknot.leftknot.crossings[].posneg == [0]
this.rightknot.leftknot.vertices has only one value
this.rightknot.leftknot.vertices[] contains no nulls and has only one value, of length 6
this.rightknot.leftknot.vertices[].from contains no nulls and has only one value, of length 6
this.rightknot.leftknot.vertices[].to contains no nulls and has only one value, of length 6
this.rightknot.leftknot.binarycode has only one value
this.rightknot.leftknot.binarycode.toString == "10"
this.rightknot.leftknot.leftknot has only one value
this.rightknot.leftknot.rightknot has only one value
this.rightknot.leftknot.seifertCircles has only one value
this.rightknot.leftknot.seifertCircles[] contains no nulls and has only one value, of length 1
this.rightknot.leftknot.seifertCircles[] elements has only one value
this.rightknot.leftknot.seifertCircles[].getClass().getName() == [SeifertCircle]
this.rightknot.leftknot.smoothing has only one value
this.rightknot.rightknot has only one value
this.rightknot.rightknot.crossings has only one value
this.rightknot.rightknot.crossings[] contains no nulls and has only one value, of length 1
this.rightknot.rightknot.crossings[].overstrand contains no nulls and has only one value, of length 1
this.rightknot.rightknot.crossings[].understrand contains no nulls and has only one value, of length 1
this.rightknot.rightknot.crossings[].posneg == [0]
this.rightknot.rightknot.vertices has only one value
this.rightknot.rightknot.vertices[] contains no nulls and has only one value, of length 6
this.rightknot.rightknot.vertices[].from contains no nulls and has only one value, of length 6
this.rightknot.rightknot.vertices[].to contains no nulls and has only one value, of length 6
this.rightknot.rightknot.binarycode has only one value
this.rightknot.rightknot.binarycode.toString == "11"
this.rightknot.rightknot.leftknot has only one value
this.rightknot.rightknot.rightknot has only one value
this.rightknot.rightknot.seifertCircles has only one value
this.rightknot.rightknot.seifertCircles[] contains no nulls and has only one value, of length 2
this.rightknot.rightknot.seifertCircles[].getClass().getName() == [SeifertCircle, SeifertCircle]
this.rightknot.rightknot.smoothing has only one value
this.rightknot.seifertCircles has only one value
this.rightknot.seifertCircles[] contains no nulls and has only one value, of length 1
this.rightknot.seifertCircles[] elements has only one value
this.rightknot.seifertCircles[].getClass().getName() == [SeifertCircle]
this.rightknot.smoothing has only one value
this.rightknot.smoothing.reorder == true
this.seifertCircles has only one value
this.seifertCircles[] contains no nulls and has only one value, of length 1
this.seifertCircles[] elements has only one value
this.seifertCircles[].getClass().getName() == [SeifertCircle]
this.smoothing == null
return == 3
size(this.leftknot.leftknot.seifertCircles[]) == 1
size(this.leftknot.rightknot.seifertCircles[]) == 1
size(this.leftknot.seifertCircles[]) == 2
size(this.rightknot.leftknot.seifertCircles[]) == 1
size(this.rightknot.rightknot.seifertCircles[]) == 2
size(this.rightknot.seifertCircles[]) == 1
size(this.seifertCircles[]) == 1
this.crossings[return-1] has only one value
this.vertices[this.leftknot.smoothing.one] has only one value
this.vertices[this.leftknot.smoothing.one-1] has only one value
this.vertices[this.leftknot.smoothing.two] has only one value
this.vertices[this.leftknot.smoothing.three] has only one value
this.vertices[this.leftknot.smoothing.three-1] has only one value
this.vertices[this.leftknot.smoothing.four] has only one value
this.leftknot.vertices[this.leftknot.smoothing.one] has only one value
this.leftknot.vertices[this.leftknot.smoothing.one-1] has only one value
this.leftknot.vertices[this.leftknot.smoothing.two] has only one value
this.leftknot.vertices[this.leftknot.smoothing.three] has only one value
this.leftknot.vertices[this.leftknot.smoothing.three-1] has only one value
this.leftknot.vertices[this.leftknot.smoothing.four] has only one value
this.leftknot.leftknot.vertices[this.leftknot.smoothing.one] has only one value
this.leftknot.leftknot.vertices[this.leftknot.smoothing.one-1] has only one value
this.leftknot.leftknot.vertices[this.leftknot.smoothing.two] has only one value
this.leftknot.leftknot.vertices[this.leftknot.smoothing.three] has only one value
this.leftknot.leftknot.vertices[this.leftknot.smoothing.three-1] has only one value
this.leftknot.leftknot.vertices[this.leftknot.smoothing.four] has only one value
this.leftknot.rightknot.vertices[this.leftknot.smoothing.one] has only one value
this.leftknot.rightknot.vertices[this.leftknot.smoothing.one-1] has only one value
this.leftknot.rightknot.vertices[this.leftknot.smoothing.two] has only one value
this.leftknot.rightknot.vertices[this.leftknot.smoothing.three] has only one value
this.leftknot.rightknot.vertices[this.leftknot.smoothing.three-1] has only one value
this.leftknot.rightknot.vertices[this.leftknot.smoothing.four] has only one value
this.rightknot.vertices[this.leftknot.smoothing.one] has only one value
this.rightknot.vertices[this.leftknot.smoothing.one-1] has only one value
this.rightknot.leftknot.vertices[this.leftknot.smoothing.one] has only one value
this.rightknot.leftknot.vertices[this.leftknot.smoothing.one-1] has only one value
this.rightknot.rightknot.vertices[this.leftknot.smoothing.one] has only one value
this.rightknot.rightknot.vertices[this.leftknot.smoothing.one-1] has only one value
this.rightknot.vertices[this.leftknot.smoothing.two] has only one value
this.rightknot.leftknot.vertices[this.leftknot.smoothing.two] has only one value
this.rightknot.rightknot.vertices[this.leftknot.smoothing.two] has only one value
this.rightknot.vertices[this.leftknot.smoothing.three] has only one value
this.rightknot.vertices[this.leftknot.smoothing.three-1] has only one value
this.rightknot.leftknot.vertices[this.leftknot.smoothing.three] has only one value
this.rightknot.leftknot.vertices[this.leftknot.smoothing.three-1] has only one value
this.rightknot.rightknot.vertices[this.leftknot.smoothing.three] has only one value
this.rightknot.rightknot.vertices[this.leftknot.smoothing.three-1] has only one value
this.rightknot.vertices[this.leftknot.smoothing.four] has only one value
this.rightknot.leftknot.vertices[this.leftknot.smoothing.four] has only one value
this.rightknot.rightknot.vertices[this.leftknot.smoothing.four] has only one value
this.vertices[this.leftknot.smoothing.two] in this.vertices[].from
this.vertices[this.leftknot.smoothing.three] in this.vertices[].from
this.vertices[this.leftknot.smoothing.four] in this.vertices[].from
this.vertices[this.leftknot.smoothing.two] in this.vertices[].from.from
this.vertices[this.leftknot.smoothing.three] in this.vertices[].from.from
this.vertices[this.leftknot.smoothing.four] in this.vertices[].from.from
this.vertices[this.leftknot.smoothing.two] in this.vertices[].from.to
this.vertices[this.leftknot.smoothing.three] in this.vertices[].from.to
this.vertices[this.leftknot.smoothing.four] in this.vertices[].from.to
this.vertices[this.leftknot.smoothing.two] in this.vertices[].to
this.vertices[this.leftknot.smoothing.three] in this.vertices[].to
this.vertices[this.leftknot.smoothing.four] in this.vertices[].to
this.vertices[this.leftknot.smoothing.two] in this.vertices[].to.from
this.vertices[this.leftknot.smoothing.three] in this.vertices[].to.from
this.vertices[this.leftknot.smoothing.four] in this.vertices[].to.from
this.vertices[this.leftknot.smoothing.two] in this.vertices[].to.to
this.vertices[this.leftknot.smoothing.three] in this.vertices[].to.to
this.vertices[this.leftknot.smoothing.four] in this.vertices[].to.to
this.leftknot.vertices[this.leftknot.smoothing.two] in this.leftknot.vertices[].from
this.leftknot.vertices[this.leftknot.smoothing.three] in this.leftknot.vertices[].from
this.leftknot.vertices[this.leftknot.smoothing.four] in this.leftknot.vertices[].from
this.leftknot.vertices[this.leftknot.smoothing.two] in this.leftknot.vertices[].to
this.leftknot.vertices[this.leftknot.smoothing.three] in this.leftknot.vertices[].to
this.leftknot.vertices[this.leftknot.smoothing.four] in this.leftknot.vertices[].to
this.leftknot.leftknot.vertices[this.leftknot.smoothing.three] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[this.leftknot.smoothing.four] in this.leftknot.leftknot.vertices[].from
this.leftknot.leftknot.vertices[this.leftknot.smoothing.three] in this.leftknot.leftknot.vertices[].to
this.leftknot.leftknot.vertices[this.leftknot.smoothing.four] in this.leftknot.leftknot.vertices[].to
this.leftknot.rightknot.vertices[this.leftknot.smoothing.three] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[this.leftknot.smoothing.four] in this.leftknot.rightknot.vertices[].from
this.leftknot.rightknot.vertices[this.leftknot.smoothing.three] in this.leftknot.rightknot.vertices[].to
this.leftknot.rightknot.vertices[this.leftknot.smoothing.four] in this.leftknot.rightknot.vertices[].to
this.rightknot.vertices[this.leftknot.smoothing.two] in this.rightknot.vertices[].from
this.rightknot.vertices[this.leftknot.smoothing.three] in this.rightknot.vertices[].from
this.rightknot.vertices[this.leftknot.smoothing.four] in this.rightknot.vertices[].from
this.rightknot.vertices[this.leftknot.smoothing.two] in this.rightknot.vertices[].to
this.rightknot.vertices[this.leftknot.smoothing.three] in this.rightknot.vertices[].to
this.rightknot.vertices[this.leftknot.smoothing.four] in this.rightknot.vertices[].to
this.rightknot.leftknot.vertices[this.leftknot.smoothing.three] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[this.leftknot.smoothing.four] in this.rightknot.leftknot.vertices[].from
this.rightknot.leftknot.vertices[this.leftknot.smoothing.three] in this.rightknot.leftknot.vertices[].to
this.rightknot.leftknot.vertices[this.leftknot.smoothing.four] in this.rightknot.leftknot.vertices[].to
this.rightknot.rightknot.vertices[this.leftknot.smoothing.three] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[this.leftknot.smoothing.four] in this.rightknot.rightknot.vertices[].from
this.rightknot.rightknot.vertices[this.leftknot.smoothing.three] in this.rightknot.rightknot.vertices[].to
this.rightknot.rightknot.vertices[this.leftknot.smoothing.four] in this.rightknot.rightknot.vertices[].to
===========================================================================
Knot.resolveknot():::ENTER
this.vertices[].from.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].from.visited elements == true
this.vertices[].from.visited elements != null
this.vertices[].to.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].to.visited elements == true
this.vertices[].to.visited elements != null
this.vertices[].visited == [1, 1, 1, 1, 1, 1]
this.vertices[].visited elements == true
this.vertices[].visited elements != null
this.leftknot == null
this.rightknot == null
size(this.seifertCircles[]) one of { 1, 2, 3 }
===========================================================================
Knot.resolveknot():::EXIT155
this.leftknot == orig(this.leftknot)
this.rightknot == orig(this.rightknot)
this.crossings[] == []
this.crossings[].getClass().getName() == []
this.crossings[].overstrand == []
this.crossings[].understrand == []
this.crossings[].posneg == []
this.leftknot == null
this.rightknot == null
this.smoothing.one one of { 3, 4 }
this.smoothing.two one of { 1, 6 }
this.smoothing.one < size(this.vertices[])-1
this.smoothing.two != size(this.vertices[])-1
this.smoothing.four != size(this.vertices[])-1
===========================================================================
Knot.resolveknot():::EXIT171
this.crossings.getClass().getName() == this.rightknot.crossings.getClass().getName()
this.vertices.getClass().getName() == this.rightknot.vertices.getClass().getName()
size(this.vertices[]) == size(this.rightknot.vertices[])
this.seifertCircles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
this.smoothing.one one of { 1, 5 }
size(this.crossings[]) one of { 1, 2, 3 }
size(this.seifertCircles[]) one of { 1, 2 }
this.vertices[this.smoothing.two] in this.vertices[].from
this.vertices[this.smoothing.two] in this.vertices[].from.from
this.vertices[this.smoothing.two] in this.vertices[].from.to
this.vertices[this.smoothing.two] in this.vertices[].to
this.vertices[this.smoothing.two] in this.vertices[].to.from
this.vertices[this.smoothing.two] in this.vertices[].to.to
this.smoothing.two + this.smoothing.three + this.smoothing.four - 11 == 0
===========================================================================
Knot.resolveknot():::EXIT
this.crossings == orig(this.crossings)
this.crossings.getClass().getName() == orig(this.crossings.getClass().getName())
this.crossings[] == orig(this.crossings[])
this.crossings[].overstrand == orig(this.crossings[].overstrand)
this.crossings[].understrand == orig(this.crossings[].understrand)
this.crossings[].posneg == orig(this.crossings[].posneg)
this.vertices == orig(this.vertices)
this.vertices.getClass().getName() == orig(this.vertices.getClass().getName())
this.vertices[] == orig(this.vertices[])
this.vertices[].numberOfVertex == orig(this.vertices[].numberOfVertex)
this.vertices[].from == orig(this.vertices[].from)
this.vertices[].from.numberOfVertex == orig(this.vertices[].from.numberOfVertex)
this.vertices[].from.from == orig(this.vertices[].from.from)
this.vertices[].from.to == orig(this.vertices[].from.to)
this.vertices[].from.visited == orig(this.vertices[].from.visited)
this.vertices[].to == orig(this.vertices[].to)
this.vertices[].to.numberOfVertex == orig(this.vertices[].to.numberOfVertex)
this.vertices[].to.from == orig(this.vertices[].to.from)
this.vertices[].to.to == orig(this.vertices[].to.to)
this.vertices[].to.visited == orig(this.vertices[].to.visited)
this.vertices[].visited == orig(this.vertices[].visited)
this.binarycode == orig(this.binarycode)
this.binarycode.toString == orig(this.binarycode.toString)
this.numcircles == orig(this.numcircles)
this.seifertCircles == orig(this.seifertCircles)
this.seifertCircles[] == orig(this.seifertCircles[])
this.smoothing == orig(this.smoothing)
this.smoothing.one == orig(this.smoothing.one)
this.smoothing.two == orig(this.smoothing.two)
this.smoothing.three == orig(this.smoothing.three)
this.smoothing.four == orig(this.smoothing.four)
this.smoothing.reorder == orig(this.smoothing.reorder)
(this.leftknot == null)  <==>  (this.rightknot == null)
(this.leftknot == null)  <==>  (this.smoothing.one one of { 3, 4 })
(this.leftknot == null)  ==>  (size(this.seifertCircles[]) one of { 1, 2, 3 })
(this.leftknot == null)  ==>  (this.crossings[] == [])
(this.leftknot == null)  ==>  (this.crossings[].getClass().getName() == [])
(this.leftknot == null)  ==>  (this.crossings[].overstrand == [])
(this.leftknot == null)  ==>  (this.crossings[].posneg == [])
(this.leftknot == null)  ==>  (this.crossings[].understrand == [])
(this.leftknot == null)  ==>  (this.leftknot == orig(this.leftknot))
(this.leftknot == null)  ==>  (this.rightknot == orig(this.rightknot))
(this.leftknot == null)  ==>  (this.smoothing.four != size(this.vertices[])-1)
(this.leftknot == null)  ==>  (this.smoothing.one < size(this.vertices[])-1)
(this.leftknot == null)  ==>  (this.smoothing.two != size(this.vertices[])-1)
(this.leftknot == null)  ==>  (this.smoothing.two one of { 1, 6 })
this.vertices[].from.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].from.visited elements == true
this.vertices[].from.visited elements != null
this.vertices[].to.visited == [1, 1, 1, 1, 1, 1]
this.vertices[].to.visited elements == true
this.vertices[].to.visited elements != null
this.vertices[].visited == [1, 1, 1, 1, 1, 1]
this.vertices[].visited elements == true
this.vertices[].visited elements != null
size(this.seifertCircles[]) one of { 1, 2, 3 }
===========================================================================
MergeMap:::OBJECT
this.fromNode has only one value
this.fromNode != null
this.fromNode.binarycode has only one value
this.fromNode.binarycode != null
this.fromNode.binarycode.toString == "000"
this.fromNode.circles has only one value
this.fromNode.circles != null
this.fromNode.circles[] contains no nulls and has only one value, of length 2
this.fromNode.circles[] elements != null
this.fromNode.circles[].getClass().getName() == [SeifertCircle, SeifertCircle]
this.fromNode.circles[].getClass().getName() elements == SeifertCircle.class
this.fromNode.outMaps has only one value
this.fromNode.outMaps != null
this.fromNode.outMaps.getClass().getName() == DMap[].class
this.fromNode.inMaps has only one value
this.fromNode.inMaps != null
this.fromNode.inMaps.getClass().getName() == DMap[].class
this.fromNode.inMaps[] == []
this.fromNode.inMaps[].getClass().getName() == []
this.fromNode.outcount one of { 0, 1, 2 }
this.fromNode.incount == 0
this.fromNode.basis has only one value
this.fromNode.basis != null
this.fromNode.basis.getClass().getName() == Tensor[].class
this.fromNode.basis[] contains no nulls and has only one value, of length 4
this.fromNode.basis[] elements != null
this.fromNode.basis[].getClass().getName() == [Tensor, Tensor, Tensor, Tensor]
this.fromNode.basis[].getClass().getName() elements == Tensor.class
this.fromNode.basis[].khovanovNodeCode contains no nulls and has only one value, of length 4
this.fromNode.basis[].khovanovNodeCode elements has only one value
this.fromNode.basis[].khovanovNodeCode elements != null
this.fromNode.basis[].khovanovNodeCode.toString == [000, 000, 000, 000]
this.fromNode.basis[].khovanovNodeCode.toString elements == "000"
this.fromNode.basis[].tensorProduct contains no nulls and has only one value, of length 4
this.fromNode.basis[].tensorProduct elements != null
this.fromNode.basis[].tensorProduct.getClass().getName() == [BasisElement[], BasisElement[], BasisElement[], BasisElement[]]
this.fromNode.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
this.fromNode.basis[].outArrows contains no nulls and has only one value, of length 4
this.fromNode.basis[].outArrows elements != null
this.fromNode.basis[].inArrows contains no nulls and has only one value, of length 4
this.fromNode.basis[].inArrows elements != null
this.fromNode.basis[].isIsolated == [0, 0, 0, 0]
this.fromNode.basis[].isIsolated elements == false
this.fromNode.basis[].isDeleted == [0, 0, 0, 0]
this.fromNode.basis[].isDeleted elements == false
this.fromNode.tensorcount == 0
this.toNode != null
this.toNode.binarycode != null
this.toNode.binarycode.toString one of { "001", "010", "100" }
this.toNode.circles != null
this.toNode.circles[] elements != null
this.toNode.circles[].getClass().getName() == [SeifertCircle]
this.toNode.circles[].getClass().getName() elements == SeifertCircle.class
this.toNode.outMaps != null
this.toNode.outMaps.getClass().getName() == DMap[].class
this.toNode.outMaps[] contains only nulls and has only one value, of length 2
this.toNode.outMaps[] elements == null
this.toNode.outMaps[].getClass().getName() == [null, null]
this.toNode.outMaps[].getClass().getName() elements == null
this.toNode.inMaps != null
this.toNode.inMaps.getClass().getName() == DMap[].class
this.toNode.inMaps[] == [null]
this.toNode.inMaps[] elements == null
this.toNode.inMaps[].getClass().getName() == [null]
this.toNode.inMaps[].getClass().getName() elements == null
this.toNode.outcount == 0
this.toNode.incount == 0
this.toNode.basis != null
this.toNode.basis.getClass().getName() == Tensor[].class
this.toNode.basis[] elements != null
this.toNode.basis[].getClass().getName() == [Tensor, Tensor]
this.toNode.basis[].getClass().getName() elements == Tensor.class
this.toNode.basis[].khovanovNodeCode elements != null
this.toNode.basis[].khovanovNodeCode elements are equal
this.toNode.basis[].khovanovNodeCode.toString elements one of { "001", "010", "100" }
this.toNode.basis[].tensorProduct elements != null
this.toNode.basis[].tensorProduct.getClass().getName() == [BasisElement[], BasisElement[]]
this.toNode.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
this.toNode.basis[].outArrows elements != null
this.toNode.basis[].inArrows elements != null
this.toNode.basis[].isIsolated == [0, 0]
this.toNode.basis[].isIsolated elements == false
this.toNode.basis[].isDeleted == [0, 0]
this.toNode.basis[].isDeleted elements == false
this.toNode.tensorcount == 0
this.fromCircles != null
this.fromCircles[] contains no nulls and has only one value, of length 2
this.fromCircles[] elements != null
this.fromCircles[].getClass().getName() == [SeifertCircle, SeifertCircle]
this.fromCircles[].getClass().getName() elements == SeifertCircle.class
this.toCircle != null
this.toCircle.minEdge == 1
this.toCircle.code != null
this.toCircle.code.toString one of { "146253", "152463", "153624" }
this.toCircle.vplus != null
this.toCircle.vplus.getClass().getName() == Vplus.class
this.toCircle.vminus != null
this.toCircle.vminus.getClass().getName() == Vminus.class
size(this.fromNode.circles[]) == 2
size(this.fromNode.outMaps[]) == 3
size(this.fromNode.basis[]) == 4
size(this.toNode.circles[]) == 1
size(this.toNode.outMaps[]) == 2
size(this.toNode.inMaps[]) == 1
size(this.toNode.basis[]) == 2
size(this.fromCircles[]) == 2
this.fromNode.outMaps[this.fromNode.outcount] == null
===========================================================================
MergeMap.MergeMap(KhovanovMapNode, KhovanovMapNode, java.util.ArrayList, SeifertCircle):::ENTER
arg0.outMaps.getClass().getName() == arg0.inMaps.getClass().getName()
arg0.outMaps.getClass().getName() == arg1.outMaps.getClass().getName()
arg0.outMaps.getClass().getName() == arg1.inMaps.getClass().getName()
arg0.basis.getClass().getName() == arg1.basis.getClass().getName()
arg0 has only one value
arg0.binarycode has only one value
arg0.binarycode.toString == "000"
arg0.circles has only one value
arg0.circles[] contains no nulls and has only one value, of length 2
arg0.circles[].getClass().getName() == [SeifertCircle, SeifertCircle]
arg0.circles[].getClass().getName() elements == SeifertCircle.class
arg0.outMaps has only one value
arg0.outMaps.getClass().getName() == DMap[].class
arg0.inMaps has only one value
arg0.inMaps[] == []
arg0.inMaps[].getClass().getName() == []
arg0.outcount one of { 0, 1, 2 }
arg0.incount == 0
arg0.basis has only one value
arg0.basis.getClass().getName() == Tensor[].class
arg0.basis[] contains no nulls and has only one value, of length 4
arg0.basis[].getClass().getName() == [Tensor, Tensor, Tensor, Tensor]
arg0.basis[].getClass().getName() elements == Tensor.class
arg0.basis[].khovanovNodeCode contains no nulls and has only one value, of length 4
arg0.basis[].khovanovNodeCode elements has only one value
arg0.basis[].khovanovNodeCode.toString == [000, 000, 000, 000]
arg0.basis[].khovanovNodeCode.toString elements == "000"
arg0.basis[].tensorProduct contains no nulls and has only one value, of length 4
arg0.basis[].tensorProduct.getClass().getName() == [BasisElement[], BasisElement[], BasisElement[], BasisElement[]]
arg0.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
arg0.basis[].outArrows contains no nulls and has only one value, of length 4
arg0.basis[].inArrows contains no nulls and has only one value, of length 4
arg0.basis[].isIsolated == [0, 0, 0, 0]
arg0.basis[].isIsolated elements == false
arg0.basis[].isDeleted == [0, 0, 0, 0]
arg0.basis[].isDeleted elements == false
arg0.tensorcount == 0
arg1.binarycode.toString one of { "001", "010", "100" }
arg1.circles[].getClass().getName() == [SeifertCircle]
arg1.circles[].getClass().getName() elements == SeifertCircle.class
arg1.outMaps[] contains only nulls and has only one value, of length 2
arg1.outMaps[] elements == null
arg1.outMaps[].getClass().getName() == [null, null]
arg1.outMaps[].getClass().getName() elements == null
arg1.inMaps[] == [null]
arg1.inMaps[] elements == null
arg1.inMaps[].getClass().getName() == [null]
arg1.inMaps[].getClass().getName() elements == null
arg1.outcount == 0
arg1.incount == 0
arg1.basis[].getClass().getName() == [Tensor, Tensor]
arg1.basis[].getClass().getName() elements == Tensor.class
arg1.basis[].khovanovNodeCode elements are equal
arg1.basis[].khovanovNodeCode.toString elements one of { "001", "010", "100" }
arg1.basis[].tensorProduct.getClass().getName() == [BasisElement[], BasisElement[]]
arg1.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
arg1.basis[].isIsolated == [0, 0]
arg1.basis[].isIsolated elements == false
arg1.basis[].isDeleted == [0, 0]
arg1.basis[].isDeleted elements == false
arg1.tensorcount == 0
arg2[] contains no nulls and has only one value, of length 2
arg2[].getClass().getName() == [SeifertCircle, SeifertCircle]
arg2[].getClass().getName() elements == SeifertCircle.class
arg3.minEdge == 1
arg3.code.toString one of { "146253", "152463", "153624" }
arg3.vplus.getClass().getName() == Vplus.class
arg3.vminus.getClass().getName() == Vminus.class
size(arg0.circles[]) == 2
size(arg0.outMaps[]) == 3
size(arg0.basis[]) == 4
size(arg1.circles[]) == 1
size(arg1.outMaps[]) == 2
size(arg1.inMaps[]) == 1
size(arg1.basis[]) == 2
size(arg2[]) == 2
arg0.outMaps[arg0.outcount] == null
arg0.basis[].khovanovNodeCode elements == arg0.binarycode
arg0.binarycode in arg0.basis[].khovanovNodeCode
arg1.basis[].khovanovNodeCode elements == arg1.binarycode
arg1.binarycode in arg1.basis[].khovanovNodeCode
===========================================================================
MergeMap.MergeMap(KhovanovMapNode, KhovanovMapNode, java.util.ArrayList, SeifertCircle):::EXIT
this.fromNode == orig(arg0)
this.fromNode.binarycode == arg0.binarycode
this.fromNode.circles == arg0.circles
this.fromNode.outMaps == arg0.outMaps
this.fromNode.outMaps.getClass().getName() == arg0.outMaps.getClass().getName()
this.fromNode.outMaps[] == arg0.outMaps[]
this.fromNode.inMaps == arg0.inMaps
this.fromNode.inMaps.getClass().getName() == arg0.outMaps.getClass().getName()
this.fromNode.outcount == arg0.outcount
this.fromNode.basis == arg0.basis
this.fromNode.basis.getClass().getName() == arg0.basis.getClass().getName()
this.toNode == orig(arg1)
this.toNode.binarycode == arg1.binarycode
this.toNode.circles == arg1.circles
this.toNode.outMaps == arg1.outMaps
this.toNode.outMaps.getClass().getName() == arg0.outMaps.getClass().getName()
this.toNode.inMaps == arg1.inMaps
this.toNode.inMaps.getClass().getName() == arg0.outMaps.getClass().getName()
this.toNode.basis == arg1.basis
this.toNode.basis.getClass().getName() == arg0.basis.getClass().getName()
this.fromCircles == orig(arg2)
this.toCircle == orig(arg3)
this.toCircle.minEdge == arg3.minEdge
this.toCircle.code == arg3.code
this.toCircle.vplus == arg3.vplus
this.toCircle.vplus.getClass().getName() == arg3.vplus.getClass().getName()
this.toCircle.vminus == arg3.vminus
this.toCircle.vminus.getClass().getName() == arg3.vminus.getClass().getName()
arg0.binarycode == orig(arg0.binarycode)
arg0.binarycode.toString == orig(arg0.binarycode.toString)
arg0.circles == orig(arg0.circles)
arg0.circles[] == orig(arg0.circles[])
arg0.outMaps == orig(arg0.outMaps)
arg0.outMaps.getClass().getName() == arg0.inMaps.getClass().getName()
arg0.outMaps.getClass().getName() == arg1.outMaps.getClass().getName()
arg0.outMaps.getClass().getName() == arg1.inMaps.getClass().getName()
arg0.outMaps.getClass().getName() == orig(arg0.outMaps.getClass().getName())
arg0.outMaps.getClass().getName() == orig(arg0.inMaps.getClass().getName())
arg0.outMaps.getClass().getName() == orig(arg1.outMaps.getClass().getName())
arg0.outMaps.getClass().getName() == orig(arg1.inMaps.getClass().getName())
arg0.outMaps[] == orig(arg0.outMaps[])
arg0.inMaps == orig(arg0.inMaps)
arg0.inMaps[] == orig(arg0.inMaps[])
arg0.outcount == orig(arg0.outcount)
arg0.incount == orig(arg0.incount)
arg0.basis == orig(arg0.basis)
arg0.basis.getClass().getName() == arg1.basis.getClass().getName()
arg0.basis.getClass().getName() == orig(arg0.basis.getClass().getName())
arg0.basis.getClass().getName() == orig(arg1.basis.getClass().getName())
arg0.basis[] == orig(arg0.basis[])
arg0.basis[].khovanovNodeCode == orig(arg0.basis[].khovanovNodeCode)
arg0.basis[].tensorProduct == orig(arg0.basis[].tensorProduct)
arg0.basis[].outArrows == orig(arg0.basis[].outArrows)
arg0.basis[].inArrows == orig(arg0.basis[].inArrows)
arg0.basis[].isIsolated == orig(arg0.basis[].isIsolated)
arg0.basis[].isDeleted == orig(arg0.basis[].isDeleted)
arg0.tensorcount == orig(arg0.tensorcount)
arg1.binarycode == orig(arg1.binarycode)
arg1.binarycode.toString == orig(arg1.binarycode.toString)
arg1.circles == orig(arg1.circles)
arg1.circles[] == orig(arg1.circles[])
arg1.outMaps == orig(arg1.outMaps)
arg1.outMaps[] == orig(arg1.outMaps[])
arg1.inMaps == orig(arg1.inMaps)
arg1.inMaps[] == orig(arg1.inMaps[])
arg1.outcount == orig(arg1.outcount)
arg1.incount == orig(arg1.incount)
arg1.basis == orig(arg1.basis)
arg1.basis[] == orig(arg1.basis[])
arg1.basis[].khovanovNodeCode == orig(arg1.basis[].khovanovNodeCode)
arg1.basis[].tensorProduct == orig(arg1.basis[].tensorProduct)
arg1.basis[].outArrows == orig(arg1.basis[].outArrows)
arg1.basis[].inArrows == orig(arg1.basis[].inArrows)
arg1.basis[].isIsolated == orig(arg1.basis[].isIsolated)
arg1.basis[].isDeleted == orig(arg1.basis[].isDeleted)
arg1.tensorcount == orig(arg1.tensorcount)
arg2[] == orig(arg2[])
arg3.minEdge == orig(arg3.minEdge)
arg3.code == orig(arg3.code)
arg3.code.toString == orig(arg3.code.toString)
arg3.vplus == orig(arg3.vplus)
arg3.vplus.getClass().getName() == orig(arg3.vplus.getClass().getName())
arg3.vminus == orig(arg3.vminus)
arg3.vminus.getClass().getName() == orig(arg3.vminus.getClass().getName())
arg0.binarycode has only one value
arg0.binarycode.toString == "000"
arg0.circles has only one value
arg0.circles[] contains no nulls and has only one value, of length 2
arg0.circles[].getClass().getName() == [SeifertCircle, SeifertCircle]
arg0.circles[].getClass().getName() elements == SeifertCircle.class
arg0.outMaps has only one value
arg0.outMaps.getClass().getName() == DMap[].class
arg0.inMaps has only one value
arg0.inMaps[] == []
arg0.inMaps[].getClass().getName() == []
arg0.outcount one of { 0, 1, 2 }
arg0.incount == 0
arg0.basis has only one value
arg0.basis.getClass().getName() == Tensor[].class
arg0.basis[] contains no nulls and has only one value, of length 4
arg0.basis[].getClass().getName() == [Tensor, Tensor, Tensor, Tensor]
arg0.basis[].getClass().getName() elements == Tensor.class
arg0.basis[].khovanovNodeCode contains no nulls and has only one value, of length 4
arg0.basis[].khovanovNodeCode elements has only one value
arg0.basis[].khovanovNodeCode.toString == [000, 000, 000, 000]
arg0.basis[].khovanovNodeCode.toString elements == "000"
arg0.basis[].tensorProduct contains no nulls and has only one value, of length 4
arg0.basis[].tensorProduct.getClass().getName() == [BasisElement[], BasisElement[], BasisElement[], BasisElement[]]
arg0.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
arg0.basis[].outArrows contains no nulls and has only one value, of length 4
arg0.basis[].inArrows contains no nulls and has only one value, of length 4
arg0.basis[].isIsolated == [0, 0, 0, 0]
arg0.basis[].isIsolated elements == false
arg0.basis[].isDeleted == [0, 0, 0, 0]
arg0.basis[].isDeleted elements == false
arg0.tensorcount == 0
arg1.binarycode.toString one of { "001", "010", "100" }
arg1.circles[].getClass().getName() == [SeifertCircle]
arg1.circles[].getClass().getName() elements == SeifertCircle.class
arg1.outMaps[] contains only nulls and has only one value, of length 2
arg1.outMaps[] elements == null
arg1.outMaps[].getClass().getName() == [null, null]
arg1.outMaps[].getClass().getName() elements == null
arg1.inMaps[] == [null]
arg1.inMaps[] elements == null
arg1.inMaps[].getClass().getName() == [null]
arg1.inMaps[].getClass().getName() elements == null
arg1.outcount == 0
arg1.incount == 0
arg1.basis[].getClass().getName() == [Tensor, Tensor]
arg1.basis[].getClass().getName() elements == Tensor.class
arg1.basis[].khovanovNodeCode elements are equal
arg1.basis[].khovanovNodeCode.toString elements one of { "001", "010", "100" }
arg1.basis[].tensorProduct.getClass().getName() == [BasisElement[], BasisElement[]]
arg1.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
arg1.basis[].isIsolated == [0, 0]
arg1.basis[].isIsolated elements == false
arg1.basis[].isDeleted == [0, 0]
arg1.basis[].isDeleted elements == false
arg1.tensorcount == 0
arg2[] contains no nulls and has only one value, of length 2
arg2[].getClass().getName() == [SeifertCircle, SeifertCircle]
arg2[].getClass().getName() elements == SeifertCircle.class
arg3.minEdge == 1
arg3.code.toString one of { "146253", "152463", "153624" }
arg3.vplus.getClass().getName() == Vplus.class
arg3.vminus.getClass().getName() == Vminus.class
size(arg0.circles[]) == 2
size(arg0.outMaps[]) == 3
size(arg0.basis[]) == 4
size(arg1.circles[]) == 1
size(arg1.outMaps[]) == 2
size(arg1.inMaps[]) == 1
size(arg1.basis[]) == 2
arg0.outMaps[arg0.outcount] == null
arg0.binarycode in this.fromNode.basis[].khovanovNodeCode
this.fromNode.basis[].khovanovNodeCode elements == arg0.binarycode
arg1.binarycode in this.toNode.basis[].khovanovNodeCode
this.toNode.basis[].khovanovNodeCode elements == arg1.binarycode
arg0.basis[].khovanovNodeCode elements == arg0.binarycode
arg0.binarycode in arg0.basis[].khovanovNodeCode
arg1.basis[].khovanovNodeCode elements == arg1.binarycode
arg1.binarycode in arg1.basis[].khovanovNodeCode
===========================================================================
MergeMap.addTensorArrows():::ENTER
this.fromNode.outMaps.getClass().getName() == this.fromNode.inMaps.getClass().getName()
this.fromNode.outMaps.getClass().getName() == this.toNode.outMaps.getClass().getName()
this.fromNode.outMaps.getClass().getName() == this.toNode.inMaps.getClass().getName()
this.fromNode.basis.getClass().getName() == this.toNode.basis.getClass().getName()
this.fromNode.basis[].khovanovNodeCode elements == this.fromNode.binarycode
this.fromNode.binarycode in this.fromNode.basis[].khovanovNodeCode
this.toNode.basis[].khovanovNodeCode elements == this.toNode.binarycode
this.toNode.binarycode in this.toNode.basis[].khovanovNodeCode
===========================================================================
MergeMap.addTensorArrows():::EXIT
this.fromNode == orig(this.fromNode)
this.fromNode.binarycode == orig(this.fromNode.binarycode)
this.fromNode.binarycode.toString == orig(this.fromNode.binarycode.toString)
this.fromNode.circles == orig(this.fromNode.circles)
this.fromNode.circles[] == orig(this.fromNode.circles[])
this.fromNode.outMaps == orig(this.fromNode.outMaps)
this.fromNode.outMaps.getClass().getName() == this.fromNode.inMaps.getClass().getName()
this.fromNode.outMaps.getClass().getName() == this.toNode.outMaps.getClass().getName()
this.fromNode.outMaps.getClass().getName() == this.toNode.inMaps.getClass().getName()
this.fromNode.outMaps.getClass().getName() == orig(this.fromNode.outMaps.getClass().getName())
this.fromNode.outMaps.getClass().getName() == orig(this.fromNode.inMaps.getClass().getName())
this.fromNode.outMaps.getClass().getName() == orig(this.toNode.outMaps.getClass().getName())
this.fromNode.outMaps.getClass().getName() == orig(this.toNode.inMaps.getClass().getName())
this.fromNode.outMaps[] == orig(this.fromNode.outMaps[])
this.fromNode.inMaps == orig(this.fromNode.inMaps)
this.fromNode.inMaps[] == orig(this.fromNode.inMaps[])
this.fromNode.outcount == orig(this.fromNode.outcount)
this.fromNode.incount == orig(this.fromNode.incount)
this.fromNode.basis == orig(this.fromNode.basis)
this.fromNode.basis.getClass().getName() == this.toNode.basis.getClass().getName()
this.fromNode.basis.getClass().getName() == orig(this.fromNode.basis.getClass().getName())
this.fromNode.basis.getClass().getName() == orig(this.toNode.basis.getClass().getName())
this.fromNode.basis[] == orig(this.fromNode.basis[])
this.fromNode.basis[].khovanovNodeCode == orig(this.fromNode.basis[].khovanovNodeCode)
this.fromNode.basis[].tensorProduct == orig(this.fromNode.basis[].tensorProduct)
this.fromNode.basis[].outArrows == orig(this.fromNode.basis[].outArrows)
this.fromNode.basis[].inArrows == orig(this.fromNode.basis[].inArrows)
this.fromNode.basis[].isIsolated == orig(this.fromNode.basis[].isIsolated)
this.fromNode.basis[].isDeleted == orig(this.fromNode.basis[].isDeleted)
this.fromNode.tensorcount == orig(this.fromNode.tensorcount)
this.toNode == orig(this.toNode)
this.toNode.binarycode == orig(this.toNode.binarycode)
this.toNode.binarycode.toString == orig(this.toNode.binarycode.toString)
this.toNode.circles == orig(this.toNode.circles)
this.toNode.circles[] == orig(this.toNode.circles[])
this.toNode.outMaps == orig(this.toNode.outMaps)
this.toNode.outMaps[] == orig(this.toNode.outMaps[])
this.toNode.inMaps == orig(this.toNode.inMaps)
this.toNode.inMaps[] == orig(this.toNode.inMaps[])
this.toNode.outcount == orig(this.toNode.outcount)
this.toNode.incount == orig(this.toNode.incount)
this.toNode.basis == orig(this.toNode.basis)
this.toNode.basis[] == orig(this.toNode.basis[])
this.toNode.basis[].khovanovNodeCode == orig(this.toNode.basis[].khovanovNodeCode)
this.toNode.basis[].tensorProduct == orig(this.toNode.basis[].tensorProduct)
this.toNode.basis[].outArrows == orig(this.toNode.basis[].outArrows)
this.toNode.basis[].inArrows == orig(this.toNode.basis[].inArrows)
this.toNode.basis[].isIsolated == orig(this.toNode.basis[].isIsolated)
this.toNode.basis[].isDeleted == orig(this.toNode.basis[].isDeleted)
this.toNode.tensorcount == orig(this.toNode.tensorcount)
this.fromCircles == orig(this.fromCircles)
this.fromCircles[] == orig(this.fromCircles[])
this.toCircle == orig(this.toCircle)
this.toCircle.minEdge == orig(this.toCircle.minEdge)
this.toCircle.code == orig(this.toCircle.code)
this.toCircle.code.toString == orig(this.toCircle.code.toString)
this.toCircle.vplus == orig(this.toCircle.vplus)
this.toCircle.vplus.getClass().getName() == orig(this.toCircle.vplus.getClass().getName())
this.toCircle.vminus == orig(this.toCircle.vminus)
this.toCircle.vminus.getClass().getName() == orig(this.toCircle.vminus.getClass().getName())
this.fromNode.basis[].khovanovNodeCode elements == this.fromNode.binarycode
this.fromNode.binarycode in this.fromNode.basis[].khovanovNodeCode
this.toNode.basis[].khovanovNodeCode elements == this.toNode.binarycode
this.toNode.binarycode in this.toNode.basis[].khovanovNodeCode
===========================================================================
MergeMap.toString():::ENTER
===========================================================================
MergeMap.toString():::EXIT
this.fromNode == orig(this.fromNode)
this.fromNode.binarycode == orig(this.fromNode.binarycode)
this.fromNode.binarycode.toString == orig(this.fromNode.binarycode.toString)
this.fromNode.circles == orig(this.fromNode.circles)
this.fromNode.circles[] == orig(this.fromNode.circles[])
this.fromNode.outMaps == orig(this.fromNode.outMaps)
this.fromNode.outMaps.getClass().getName() == orig(this.fromNode.outMaps.getClass().getName())
this.fromNode.outMaps[] == orig(this.fromNode.outMaps[])
this.fromNode.inMaps == orig(this.fromNode.inMaps)
this.fromNode.inMaps.getClass().getName() == orig(this.fromNode.inMaps.getClass().getName())
this.fromNode.inMaps[] == orig(this.fromNode.inMaps[])
this.fromNode.outcount == orig(this.fromNode.outcount)
this.fromNode.incount == orig(this.fromNode.incount)
this.fromNode.basis == orig(this.fromNode.basis)
this.fromNode.basis.getClass().getName() == orig(this.fromNode.basis.getClass().getName())
this.fromNode.basis[] == orig(this.fromNode.basis[])
this.fromNode.basis[].khovanovNodeCode == orig(this.fromNode.basis[].khovanovNodeCode)
this.fromNode.basis[].tensorProduct == orig(this.fromNode.basis[].tensorProduct)
this.fromNode.basis[].outArrows == orig(this.fromNode.basis[].outArrows)
this.fromNode.basis[].inArrows == orig(this.fromNode.basis[].inArrows)
this.fromNode.basis[].isIsolated == orig(this.fromNode.basis[].isIsolated)
this.fromNode.basis[].isDeleted == orig(this.fromNode.basis[].isDeleted)
this.fromNode.tensorcount == orig(this.fromNode.tensorcount)
this.toNode == orig(this.toNode)
this.toNode.binarycode == orig(this.toNode.binarycode)
this.toNode.binarycode.toString == orig(this.toNode.binarycode.toString)
this.toNode.circles == orig(this.toNode.circles)
this.toNode.circles[] == orig(this.toNode.circles[])
this.toNode.outMaps == orig(this.toNode.outMaps)
this.toNode.outMaps.getClass().getName() == orig(this.toNode.outMaps.getClass().getName())
this.toNode.outMaps[] == orig(this.toNode.outMaps[])
this.toNode.inMaps == orig(this.toNode.inMaps)
this.toNode.inMaps.getClass().getName() == orig(this.toNode.inMaps.getClass().getName())
this.toNode.inMaps[] == orig(this.toNode.inMaps[])
this.toNode.outcount == orig(this.toNode.outcount)
this.toNode.incount == orig(this.toNode.incount)
this.toNode.basis == orig(this.toNode.basis)
this.toNode.basis.getClass().getName() == orig(this.toNode.basis.getClass().getName())
this.toNode.basis[] == orig(this.toNode.basis[])
this.toNode.basis[].khovanovNodeCode == orig(this.toNode.basis[].khovanovNodeCode)
this.toNode.basis[].tensorProduct == orig(this.toNode.basis[].tensorProduct)
this.toNode.basis[].outArrows == orig(this.toNode.basis[].outArrows)
this.toNode.basis[].inArrows == orig(this.toNode.basis[].inArrows)
this.toNode.basis[].isIsolated == orig(this.toNode.basis[].isIsolated)
this.toNode.basis[].isDeleted == orig(this.toNode.basis[].isDeleted)
this.toNode.tensorcount == orig(this.toNode.tensorcount)
this.fromCircles == orig(this.fromCircles)
this.fromCircles[] == orig(this.fromCircles[])
this.toCircle == orig(this.toCircle)
this.toCircle.minEdge == orig(this.toCircle.minEdge)
this.toCircle.code == orig(this.toCircle.code)
this.toCircle.code.toString == orig(this.toCircle.code.toString)
this.toCircle.vplus == orig(this.toCircle.vplus)
this.toCircle.vplus.getClass().getName() == orig(this.toCircle.vplus.getClass().getName())
this.toCircle.vminus == orig(this.toCircle.vminus)
this.toCircle.vminus.getClass().getName() == orig(this.toCircle.vminus.getClass().getName())
return.toString one of { "MERGE [12] From 000 to 001", "MERGE [12] From 000 to 010", "MERGE [12] From 000 to 100" }
===========================================================================
SeifertCircle:::OBJECT
this.minEdge >= 0
this.code != null
this.vplus != null
this.vplus.getClass().getName() == Vplus.class
this.vminus != null
this.vminus.getClass().getName() == Vminus.class
this.vplus.getClass().getName() != this.vminus.getClass().getName()
===========================================================================
SeifertCircle.SeifertCircle(java.lang.String):::ENTER
arg0 != null
===========================================================================
SeifertCircle.SeifertCircle(java.lang.String):::EXIT
this.code == orig(arg0)
arg0.toString == orig(arg0.toString)
===========================================================================
SeifertCircle.compareTo(SeifertCircle):::ENTER
this.vplus.getClass().getName() == arg0.vplus.getClass().getName()
this.vminus.getClass().getName() == arg0.vminus.getClass().getName()
this.minEdge one of { 1, 2, 3 }
arg0 != null
arg0.minEdge one of { 1, 2, 3 }
arg0.code != null
arg0.vplus != null
arg0.vminus != null
===========================================================================
SeifertCircle.compareTo(SeifertCircle):::EXIT18
this.minEdge == arg0.minEdge
this.minEdge == orig(arg0.minEdge)
this.code.toString one of { "14", "25", "36" }
arg0.code.toString one of { "14", "25", "36" }
return == 0
===========================================================================
SeifertCircle.compareTo(SeifertCircle):::EXIT20
return == 1
===========================================================================
SeifertCircle.compareTo(SeifertCircle):::EXIT
this.minEdge == orig(this.minEdge)
this.code == orig(this.code)
this.code.toString == orig(this.code.toString)
this.vplus == orig(this.vplus)
this.vplus.getClass().getName() == arg0.vplus.getClass().getName()
this.vplus.getClass().getName() == orig(this.vplus.getClass().getName())
this.vplus.getClass().getName() == orig(arg0.vplus.getClass().getName())
this.vminus == orig(this.vminus)
this.vminus.getClass().getName() == arg0.vminus.getClass().getName()
this.vminus.getClass().getName() == orig(this.vminus.getClass().getName())
this.vminus.getClass().getName() == orig(arg0.vminus.getClass().getName())
arg0.minEdge == orig(arg0.minEdge)
arg0.code == orig(arg0.code)
arg0.code.toString == orig(arg0.code.toString)
arg0.vplus == orig(arg0.vplus)
arg0.vminus == orig(arg0.vminus)
(return == 0)  ==>  (arg0.code.toString one of { "14", "25", "36" })
(return == 0)  ==>  (this.code.toString one of { "14", "25", "36" })
(return == 0)  ==>  (this.minEdge == arg0.minEdge)
this.minEdge one of { 1, 2, 3 }
arg0.minEdge one of { 1, 2, 3 }
arg0.code != null
arg0.vplus != null
arg0.vminus != null
return one of { 0, 1 }
===========================================================================
SeifertCircle.findMinEdge():::ENTER
this.minEdge == 0
===========================================================================
SeifertCircle.findMinEdge():::EXIT34
this.code has only one value
this.code.toString == ""
return == 0
===========================================================================
SeifertCircle.findMinEdge():::EXIT43
return one of { 1, 2, 3 }
===========================================================================
SeifertCircle.findMinEdge():::EXIT
this.minEdge == orig(this.minEdge)
this.code == orig(this.code)
this.code.toString == orig(this.code.toString)
this.vplus == orig(this.vplus)
this.vplus.getClass().getName() == orig(this.vplus.getClass().getName())
this.vminus == orig(this.vminus)
this.vminus.getClass().getName() == orig(this.vminus.getClass().getName())
(return == 0)  ==>  (this.code has only one value)
(return == 0)  ==>  (this.code.toString == "")
this.minEdge == 0
return >= 0
===========================================================================
SeifertCircle.getCode():::ENTER
this.minEdge one of { 1, 2, 3 }
===========================================================================
SeifertCircle.getCode():::EXIT
this.minEdge == orig(this.minEdge)
this.code == return
this.code.toString == orig(this.code.toString)
this.vplus == orig(this.vplus)
this.vplus.getClass().getName() == orig(this.vplus.getClass().getName())
this.vminus == orig(this.vminus)
this.vminus.getClass().getName() == orig(this.vminus.getClass().getName())
return == orig(this.code)
this.minEdge one of { 1, 2, 3 }
return != null
===========================================================================
SeifertCircle.getMinEdge():::ENTER
this.minEdge one of { 1, 2, 3 }
===========================================================================
SeifertCircle.getMinEdge():::EXIT
this.minEdge == orig(this.minEdge)
this.code == orig(this.code)
this.code.toString == orig(this.code.toString)
this.vplus == orig(this.vplus)
this.vplus.getClass().getName() == orig(this.vplus.getClass().getName())
this.vminus == orig(this.vminus)
this.vminus.getClass().getName() == orig(this.vminus.getClass().getName())
this.minEdge one of { 1, 2, 3 }
return one of { 1, 2, 3 }
===========================================================================
SeifertCircle.getVminus():::ENTER
this.minEdge one of { 1, 2, 3 }
===========================================================================
SeifertCircle.getVminus():::EXIT
this.minEdge == orig(this.minEdge)
this.code == orig(this.code)
this.code.toString == orig(this.code.toString)
this.vplus == orig(this.vplus)
this.vplus.getClass().getName() == orig(this.vplus.getClass().getName())
this.vminus == return
this.vminus.getClass().getName() == return.getClass().getName()
return == orig(this.vminus)
return.getClass().getName() == orig(this.vminus.getClass().getName())
this.minEdge one of { 1, 2, 3 }
return != null
return.getClass().getName() == Vminus.class
this.vplus.getClass().getName() != return.getClass().getName()
===========================================================================
SeifertCircle.getVplus():::ENTER
this.minEdge one of { 1, 2, 3 }
===========================================================================
SeifertCircle.getVplus():::EXIT
this.minEdge == orig(this.minEdge)
this.code == orig(this.code)
this.code.toString == orig(this.code.toString)
this.vplus == return
this.vplus.getClass().getName() == return.getClass().getName()
this.vminus == orig(this.vminus)
this.vminus.getClass().getName() == orig(this.vminus.getClass().getName())
return == orig(this.vplus)
return.getClass().getName() == orig(this.vplus.getClass().getName())
this.minEdge one of { 1, 2, 3 }
return != null
return.getClass().getName() == Vplus.class
this.vminus.getClass().getName() != return.getClass().getName()
===========================================================================
Smoothing:::OBJECT
this.two >= 1
this.four >= 1
this.one != this.two
this.one != this.three
this.one != this.four
this.two != this.three
this.two != this.four
this.three != this.four
===========================================================================
Smoothing.Smoothing(int, int, int, int, boolean):::ENTER
arg1 >= 1
arg3 >= 1
arg0 != arg1
arg0 != arg2
arg0 != arg3
arg1 != arg2
arg1 != arg3
arg2 != arg3
===========================================================================
Smoothing.Smoothing(int, int, int, int, boolean):::EXIT
this.one == orig(arg0)
this.two == orig(arg1)
this.three == orig(arg2)
this.four == orig(arg3)
this.reorder == orig(arg4)
===========================================================================
Smoothing.getFour():::ENTER
===========================================================================
Smoothing.getFour():::EXIT
this.one == orig(this.one)
this.two == orig(this.two)
this.three == orig(this.three)
this.four == return
this.reorder == orig(this.reorder)
return == orig(this.four)
return >= 1
this.one != return
this.two != return
this.three != return
===========================================================================
Smoothing.getOne():::ENTER
===========================================================================
Smoothing.getOne():::EXIT
this.one == return
this.two == orig(this.two)
this.three == orig(this.three)
this.four == orig(this.four)
this.reorder == orig(this.reorder)
return == orig(this.one)
this.two != return
this.three != return
this.four != return
===========================================================================
Smoothing.getThree():::ENTER
===========================================================================
Smoothing.getThree():::EXIT
this.one == orig(this.one)
this.two == orig(this.two)
this.three == return
this.four == orig(this.four)
this.reorder == orig(this.reorder)
return == orig(this.three)
this.one != return
this.two != return
this.four != return
===========================================================================
Smoothing.getTwo():::ENTER
===========================================================================
Smoothing.getTwo():::EXIT
this.one == orig(this.one)
this.two == return
this.three == orig(this.three)
this.four == orig(this.four)
this.reorder == orig(this.reorder)
return == orig(this.two)
return >= 1
this.one != return
this.three != return
this.four != return
===========================================================================
Smoothing.needOrientationReorder():::ENTER
===========================================================================
Smoothing.needOrientationReorder():::EXIT
this.one == orig(this.one)
this.two == orig(this.two)
this.three == orig(this.three)
this.four == orig(this.four)
this.reorder == return
return == orig(this.reorder)
(return == true)  ==>  (this.four >= 1)
===========================================================================
Smoothing.needOrientationReorder():::EXIT;condition="return == true"
return == true
===========================================================================
Smoothing.needOrientationReorder():::EXIT;condition="not(return == true)"
return == false
===========================================================================
SplitMap:::OBJECT
this.fromNode != null
this.fromNode.binarycode != null
this.fromNode.circles != null
this.fromNode.circles[] elements != null
this.fromNode.circles[].getClass().getName() elements == SeifertCircle.class
this.fromNode.circles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
this.fromNode.outMaps != null
this.fromNode.outMaps.getClass().getName() == DMap[].class
this.fromNode.inMaps != null
this.fromNode.inMaps.getClass().getName() == DMap[].class
this.fromNode.inMaps[] elements != null
this.fromNode.inMaps[].getClass().getName() one of { [MergeMap], [SplitMap, SplitMap] }
this.fromNode.outcount one of { 0, 1 }
this.fromNode.incount one of { 1, 2 }
this.fromNode.basis != null
this.fromNode.basis.getClass().getName() == Tensor[].class
this.fromNode.basis[] elements != null
this.fromNode.basis[].getClass().getName() elements == Tensor.class
this.fromNode.basis[].getClass().getName() one of { [Tensor, Tensor], [Tensor, Tensor, Tensor, Tensor] }
this.fromNode.basis[].khovanovNodeCode elements != null
this.fromNode.basis[].khovanovNodeCode elements are equal
this.fromNode.basis[].tensorProduct elements != null
this.fromNode.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
this.fromNode.basis[].tensorProduct.getClass().getName() one of { [BasisElement[], BasisElement[]], [BasisElement[], BasisElement[], BasisElement[], BasisElement[]] }
this.fromNode.basis[].outArrows elements != null
this.fromNode.basis[].inArrows elements != null
this.fromNode.basis[].isIsolated elements == false
this.fromNode.basis[].isIsolated one of { [0, 0], [0, 0, 0, 0] }
this.fromNode.basis[].isDeleted elements == false
this.fromNode.basis[].isDeleted one of { [0, 0], [0, 0, 0, 0] }
this.fromNode.tensorcount == 0
this.toNode != null
this.toNode.binarycode != null
this.toNode.circles != null
this.toNode.circles[] elements != null
this.toNode.circles[].getClass().getName() elements == SeifertCircle.class
this.toNode.circles[].getClass().getName() one of { [SeifertCircle, SeifertCircle], [SeifertCircle, SeifertCircle, SeifertCircle] }
this.toNode.outMaps != null
this.toNode.outMaps.getClass().getName() == DMap[].class
this.toNode.outMaps[] elements == null
this.toNode.outMaps[].getClass().getName() elements == null
this.toNode.outMaps[].getClass().getName() one of { [], [null] }
this.toNode.inMaps != null
this.toNode.inMaps.getClass().getName() == DMap[].class
this.toNode.outcount == 0
this.toNode.incount one of { 0, 1, 2 }
this.toNode.basis != null
this.toNode.basis.getClass().getName() == Tensor[].class
this.toNode.basis[] elements != null
this.toNode.basis[].getClass().getName() elements == Tensor.class
this.toNode.basis[].getClass().getName() one of { [Tensor, Tensor, Tensor, Tensor], [Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor] }
this.toNode.basis[].khovanovNodeCode elements != null
this.toNode.basis[].khovanovNodeCode elements are equal
this.toNode.basis[].tensorProduct elements != null
this.toNode.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
this.toNode.basis[].tensorProduct.getClass().getName() one of { [BasisElement[], BasisElement[], BasisElement[], BasisElement[]], [BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[]] }
this.toNode.basis[].outArrows elements != null
this.toNode.basis[].inArrows elements != null
this.toNode.basis[].isIsolated elements == false
this.toNode.basis[].isIsolated one of { [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
this.toNode.basis[].isDeleted elements == false
this.toNode.basis[].isDeleted one of { [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
this.toNode.tensorcount == 0
this.fromCircle != null
this.fromCircle.minEdge one of { 1, 2 }
this.fromCircle.code != null
this.fromCircle.vplus != null
this.fromCircle.vplus.getClass().getName() == Vplus.class
this.fromCircle.vminus != null
this.fromCircle.vminus.getClass().getName() == Vminus.class
this.toCircles != null
this.toCircles[] elements != null
this.toCircles[].getClass().getName() == [SeifertCircle, SeifertCircle]
this.toCircles[].getClass().getName() elements == SeifertCircle.class
size(this.fromNode.circles[]) one of { 1, 2 }
size(this.fromNode.outMaps[]) one of { 1, 2 }
size(this.fromNode.inMaps[]) one of { 1, 2 }
size(this.fromNode.basis[]) one of { 2, 4 }
size(this.toNode.circles[]) one of { 2, 3 }
size(this.toNode.outMaps[]) one of { 0, 1 }
size(this.toNode.inMaps[]) one of { 2, 3 }
size(this.toNode.basis[]) one of { 4, 8 }
size(this.toCircles[]) == 2
this.fromNode.outMaps[this.fromNode.outcount] == null
this.toNode.inMaps[this.toNode.incount] == null
===========================================================================
SplitMap.SplitMap(KhovanovMapNode, KhovanovMapNode, SeifertCircle, java.util.ArrayList):::ENTER
arg0.outMaps.getClass().getName() == arg0.inMaps.getClass().getName()
arg0.outMaps.getClass().getName() == arg1.outMaps.getClass().getName()
arg0.outMaps.getClass().getName() == arg1.inMaps.getClass().getName()
arg0.incount == size(arg0.inMaps[])
arg0.basis.getClass().getName() == arg1.basis.getClass().getName()
arg0.circles[].getClass().getName() elements == SeifertCircle.class
arg0.circles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
arg0.outMaps.getClass().getName() == DMap[].class
arg0.inMaps[].getClass().getName() one of { [MergeMap], [SplitMap, SplitMap] }
arg0.outcount one of { 0, 1 }
arg0.incount one of { 1, 2 }
arg0.basis.getClass().getName() == Tensor[].class
arg0.basis[].getClass().getName() elements == Tensor.class
arg0.basis[].getClass().getName() one of { [Tensor, Tensor], [Tensor, Tensor, Tensor, Tensor] }
arg0.basis[].khovanovNodeCode elements are equal
arg0.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
arg0.basis[].tensorProduct.getClass().getName() one of { [BasisElement[], BasisElement[]], [BasisElement[], BasisElement[], BasisElement[], BasisElement[]] }
arg0.basis[].isIsolated elements == false
arg0.basis[].isIsolated one of { [0, 0], [0, 0, 0, 0] }
arg0.basis[].isDeleted elements == false
arg0.basis[].isDeleted one of { [0, 0], [0, 0, 0, 0] }
arg0.tensorcount == 0
arg1.circles[].getClass().getName() elements == SeifertCircle.class
arg1.circles[].getClass().getName() one of { [SeifertCircle, SeifertCircle], [SeifertCircle, SeifertCircle, SeifertCircle] }
arg1.outMaps[] elements == null
arg1.outMaps[].getClass().getName() elements == null
arg1.outMaps[].getClass().getName() one of { [], [null] }
arg1.outcount == 0
arg1.incount one of { 0, 1, 2 }
arg1.basis[].getClass().getName() elements == Tensor.class
arg1.basis[].getClass().getName() one of { [Tensor, Tensor, Tensor, Tensor], [Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor] }
arg1.basis[].khovanovNodeCode elements are equal
arg1.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
arg1.basis[].tensorProduct.getClass().getName() one of { [BasisElement[], BasisElement[], BasisElement[], BasisElement[]], [BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[]] }
arg1.basis[].isIsolated elements == false
arg1.basis[].isIsolated one of { [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
arg1.basis[].isDeleted elements == false
arg1.basis[].isDeleted one of { [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
arg1.tensorcount == 0
arg2.minEdge one of { 1, 2 }
arg2.vplus.getClass().getName() == Vplus.class
arg2.vminus.getClass().getName() == Vminus.class
arg3[].getClass().getName() == [SeifertCircle, SeifertCircle]
arg3[].getClass().getName() elements == SeifertCircle.class
size(arg0.circles[]) one of { 1, 2 }
size(arg0.outMaps[]) one of { 1, 2 }
size(arg0.basis[]) one of { 2, 4 }
size(arg1.circles[]) one of { 2, 3 }
size(arg1.outMaps[]) one of { 0, 1 }
size(arg1.inMaps[]) one of { 2, 3 }
size(arg1.basis[]) one of { 4, 8 }
size(arg3[]) == 2
arg0.outMaps[arg0.outcount] == null
arg1.inMaps[arg1.incount] == null
arg0.basis[].khovanovNodeCode elements == arg0.binarycode
arg0.binarycode in arg0.basis[].khovanovNodeCode
arg0.outMaps.getClass().getName() != arg0.basis.getClass().getName()
arg0.outMaps.getClass().getName() != arg2.vplus.getClass().getName()
arg0.outMaps.getClass().getName() != arg2.vminus.getClass().getName()
arg0.outcount <= size(arg0.outMaps[])-1
arg0.basis.getClass().getName() != arg2.vplus.getClass().getName()
arg0.basis.getClass().getName() != arg2.vminus.getClass().getName()
arg1.basis[].khovanovNodeCode elements == arg1.binarycode
arg1.binarycode in arg1.basis[].khovanovNodeCode
arg1.incount <= size(arg1.inMaps[])-1
arg2.vplus.getClass().getName() != arg2.vminus.getClass().getName()
===========================================================================
SplitMap.SplitMap(KhovanovMapNode, KhovanovMapNode, SeifertCircle, java.util.ArrayList):::EXIT
this.fromNode == orig(arg0)
this.fromNode.binarycode == arg0.binarycode
this.fromNode.circles == arg0.circles
this.fromNode.outMaps == arg0.outMaps
this.fromNode.outMaps.getClass().getName() == arg0.outMaps.getClass().getName()
this.fromNode.outMaps[] == arg0.outMaps[]
this.fromNode.inMaps == arg0.inMaps
this.fromNode.inMaps.getClass().getName() == arg0.outMaps.getClass().getName()
this.fromNode.inMaps[] == arg0.inMaps[]
this.fromNode.outcount == arg0.outcount
this.fromNode.incount == arg0.incount
this.fromNode.basis == arg0.basis
this.fromNode.basis.getClass().getName() == arg0.basis.getClass().getName()
this.toNode == orig(arg1)
this.toNode.binarycode == arg1.binarycode
this.toNode.circles == arg1.circles
this.toNode.outMaps == arg1.outMaps
this.toNode.outMaps.getClass().getName() == arg0.outMaps.getClass().getName()
this.toNode.inMaps == arg1.inMaps
this.toNode.inMaps.getClass().getName() == arg0.outMaps.getClass().getName()
this.toNode.inMaps[] == arg1.inMaps[]
this.toNode.incount == arg1.incount
this.toNode.basis == arg1.basis
this.toNode.basis.getClass().getName() == arg0.basis.getClass().getName()
this.fromCircle == orig(arg2)
this.fromCircle.minEdge == arg2.minEdge
this.fromCircle.code == arg2.code
this.fromCircle.vplus == arg2.vplus
this.fromCircle.vplus.getClass().getName() == arg2.vplus.getClass().getName()
this.fromCircle.vminus == arg2.vminus
this.fromCircle.vminus.getClass().getName() == arg2.vminus.getClass().getName()
this.toCircles == orig(arg3)
arg0.binarycode == orig(arg0.binarycode)
arg0.binarycode.toString == orig(arg0.binarycode.toString)
arg0.circles == orig(arg0.circles)
arg0.circles[] == orig(arg0.circles[])
arg0.outMaps == orig(arg0.outMaps)
arg0.outMaps.getClass().getName() == arg0.inMaps.getClass().getName()
arg0.outMaps.getClass().getName() == arg1.outMaps.getClass().getName()
arg0.outMaps.getClass().getName() == arg1.inMaps.getClass().getName()
arg0.outMaps.getClass().getName() == orig(arg0.outMaps.getClass().getName())
arg0.outMaps.getClass().getName() == orig(arg0.inMaps.getClass().getName())
arg0.outMaps.getClass().getName() == orig(arg1.outMaps.getClass().getName())
arg0.outMaps.getClass().getName() == orig(arg1.inMaps.getClass().getName())
arg0.outMaps[] == orig(arg0.outMaps[])
arg0.inMaps == orig(arg0.inMaps)
arg0.inMaps[] == orig(arg0.inMaps[])
arg0.outcount == orig(arg0.outcount)
arg0.incount == orig(arg0.incount)
arg0.incount == size(this.fromNode.inMaps[])
arg0.incount == size(arg0.inMaps[])
arg0.incount == orig(size(arg0.inMaps[]))
arg0.basis == orig(arg0.basis)
arg0.basis.getClass().getName() == arg1.basis.getClass().getName()
arg0.basis.getClass().getName() == orig(arg0.basis.getClass().getName())
arg0.basis.getClass().getName() == orig(arg1.basis.getClass().getName())
arg0.basis[] == orig(arg0.basis[])
arg0.basis[].khovanovNodeCode == orig(arg0.basis[].khovanovNodeCode)
arg0.basis[].tensorProduct == orig(arg0.basis[].tensorProduct)
arg0.basis[].outArrows == orig(arg0.basis[].outArrows)
arg0.basis[].inArrows == orig(arg0.basis[].inArrows)
arg0.basis[].isIsolated == orig(arg0.basis[].isIsolated)
arg0.basis[].isDeleted == orig(arg0.basis[].isDeleted)
arg0.tensorcount == orig(arg0.tensorcount)
arg1.binarycode == orig(arg1.binarycode)
arg1.binarycode.toString == orig(arg1.binarycode.toString)
arg1.circles == orig(arg1.circles)
arg1.circles[] == orig(arg1.circles[])
arg1.outMaps == orig(arg1.outMaps)
arg1.outMaps[] == orig(arg1.outMaps[])
arg1.inMaps == orig(arg1.inMaps)
arg1.inMaps[] == orig(arg1.inMaps[])
arg1.outcount == orig(arg1.outcount)
arg1.incount == orig(arg1.incount)
arg1.basis == orig(arg1.basis)
arg1.basis[] == orig(arg1.basis[])
arg1.basis[].khovanovNodeCode == orig(arg1.basis[].khovanovNodeCode)
arg1.basis[].tensorProduct == orig(arg1.basis[].tensorProduct)
arg1.basis[].outArrows == orig(arg1.basis[].outArrows)
arg1.basis[].inArrows == orig(arg1.basis[].inArrows)
arg1.basis[].isIsolated == orig(arg1.basis[].isIsolated)
arg1.basis[].isDeleted == orig(arg1.basis[].isDeleted)
arg1.tensorcount == orig(arg1.tensorcount)
arg2.minEdge == orig(arg2.minEdge)
arg2.code == orig(arg2.code)
arg2.code.toString == orig(arg2.code.toString)
arg2.vplus == orig(arg2.vplus)
arg2.vplus.getClass().getName() == orig(arg2.vplus.getClass().getName())
arg2.vminus == orig(arg2.vminus)
arg2.vminus.getClass().getName() == orig(arg2.vminus.getClass().getName())
arg3[] == orig(arg3[])
arg0.circles[].getClass().getName() elements == SeifertCircle.class
arg0.circles[].getClass().getName() one of { [SeifertCircle], [SeifertCircle, SeifertCircle] }
arg0.outMaps.getClass().getName() == DMap[].class
arg0.inMaps[].getClass().getName() one of { [MergeMap], [SplitMap, SplitMap] }
arg0.outcount one of { 0, 1 }
arg0.incount one of { 1, 2 }
arg0.basis.getClass().getName() == Tensor[].class
arg0.basis[].getClass().getName() elements == Tensor.class
arg0.basis[].getClass().getName() one of { [Tensor, Tensor], [Tensor, Tensor, Tensor, Tensor] }
arg0.basis[].khovanovNodeCode elements are equal
arg0.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
arg0.basis[].tensorProduct.getClass().getName() one of { [BasisElement[], BasisElement[]], [BasisElement[], BasisElement[], BasisElement[], BasisElement[]] }
arg0.basis[].isIsolated elements == false
arg0.basis[].isIsolated one of { [0, 0], [0, 0, 0, 0] }
arg0.basis[].isDeleted elements == false
arg0.basis[].isDeleted one of { [0, 0], [0, 0, 0, 0] }
arg0.tensorcount == 0
arg1.circles[].getClass().getName() elements == SeifertCircle.class
arg1.circles[].getClass().getName() one of { [SeifertCircle, SeifertCircle], [SeifertCircle, SeifertCircle, SeifertCircle] }
arg1.outMaps[] elements == null
arg1.outMaps[].getClass().getName() elements == null
arg1.outMaps[].getClass().getName() one of { [], [null] }
arg1.outcount == 0
arg1.incount one of { 0, 1, 2 }
arg1.basis[].getClass().getName() elements == Tensor.class
arg1.basis[].getClass().getName() one of { [Tensor, Tensor, Tensor, Tensor], [Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor] }
arg1.basis[].khovanovNodeCode elements are equal
arg1.basis[].tensorProduct.getClass().getName() elements == BasisElement[].class
arg1.basis[].tensorProduct.getClass().getName() one of { [BasisElement[], BasisElement[], BasisElement[], BasisElement[]], [BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[], BasisElement[]] }
arg1.basis[].isIsolated elements == false
arg1.basis[].isIsolated one of { [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
arg1.basis[].isDeleted elements == false
arg1.basis[].isDeleted one of { [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0] }
arg1.tensorcount == 0
arg2.minEdge one of { 1, 2 }
arg2.vplus.getClass().getName() == Vplus.class
arg2.vminus.getClass().getName() == Vminus.class
arg3[].getClass().getName() == [SeifertCircle, SeifertCircle]
arg3[].getClass().getName() elements == SeifertCircle.class
size(arg0.circles[]) one of { 1, 2 }
size(arg0.outMaps[]) one of { 1, 2 }
size(arg0.basis[]) one of { 2, 4 }
size(arg1.circles[]) one of { 2, 3 }
size(arg1.outMaps[]) one of { 0, 1 }
size(arg1.inMaps[]) one of { 2, 3 }
size(arg1.basis[]) one of { 4, 8 }
arg0.outMaps[arg0.outcount] == null
arg1.inMaps[arg1.incount] == null
arg0.binarycode in this.fromNode.basis[].khovanovNodeCode
this.fromNode.basis[].khovanovNodeCode elements == arg0.binarycode
arg1.binarycode in this.toNode.basis[].khovanovNodeCode
this.toNode.basis[].khovanovNodeCode elements == arg1.binarycode
arg0.basis[].khovanovNodeCode elements == arg0.binarycode
arg0.binarycode in arg0.basis[].khovanovNodeCode
arg0.outMaps.getClass().getName() != arg0.basis.getClass().getName()
arg0.outMaps.getClass().getName() != arg2.vplus.getClass().getName()
arg0.outMaps.getClass().getName() != arg2.vminus.getClass().getName()
arg0.outcount <= size(arg0.outMaps[])-1
arg0.basis.getClass().getName() != arg2.vplus.getClass().getName()
arg0.basis.getClass().getName() != arg2.vminus.getClass().getName()
arg1.basis[].khovanovNodeCode elements == arg1.binarycode
arg1.binarycode in arg1.basis[].khovanovNodeCode
arg1.incount <= size(arg1.inMaps[])-1
arg2.vplus.getClass().getName() != arg2.vminus.getClass().getName()
===========================================================================
SplitMap.addTensorArrows():::ENTER
this.fromNode.outMaps.getClass().getName() == this.fromNode.inMaps.getClass().getName()
this.fromNode.outMaps.getClass().getName() == this.toNode.outMaps.getClass().getName()
this.fromNode.outMaps.getClass().getName() == this.toNode.inMaps.getClass().getName()
this.fromNode.incount == size(this.fromNode.inMaps[])
this.fromNode.basis.getClass().getName() == this.toNode.basis.getClass().getName()
this.fromNode.basis[].khovanovNodeCode elements == this.fromNode.binarycode
this.fromNode.binarycode in this.fromNode.basis[].khovanovNodeCode
this.fromNode.outMaps.getClass().getName() != this.fromNode.basis.getClass().getName()
this.fromNode.outMaps.getClass().getName() != this.fromCircle.vplus.getClass().getName()
this.fromNode.outMaps.getClass().getName() != this.fromCircle.vminus.getClass().getName()
this.fromNode.outcount <= size(this.fromNode.outMaps[])-1
this.fromNode.basis.getClass().getName() != this.fromCircle.vplus.getClass().getName()
this.fromNode.basis.getClass().getName() != this.fromCircle.vminus.getClass().getName()
this.toNode.basis[].khovanovNodeCode elements == this.toNode.binarycode
this.toNode.binarycode in this.toNode.basis[].khovanovNodeCode
this.toNode.incount <= size(this.toNode.inMaps[])-1
this.fromCircle.vplus.getClass().getName() != this.fromCircle.vminus.getClass().getName()
===========================================================================
SplitMap.addTensorArrows():::EXIT
this.fromNode == orig(this.fromNode)
this.fromNode.binarycode == orig(this.fromNode.binarycode)
this.fromNode.binarycode.toString == orig(this.fromNode.binarycode.toString)
this.fromNode.circles == orig(this.fromNode.circles)
this.fromNode.circles[] == orig(this.fromNode.circles[])
this.fromNode.outMaps == orig(this.fromNode.outMaps)
this.fromNode.outMaps.getClass().getName() == this.fromNode.inMaps.getClass().getName()
this.fromNode.outMaps.getClass().getName() == this.toNode.outMaps.getClass().getName()
this.fromNode.outMaps.getClass().getName() == this.toNode.inMaps.getClass().getName()
this.fromNode.outMaps.getClass().getName() == orig(this.fromNode.outMaps.getClass().getName())
this.fromNode.outMaps.getClass().getName() == orig(this.fromNode.inMaps.getClass().getName())
this.fromNode.outMaps.getClass().getName() == orig(this.toNode.outMaps.getClass().getName())
this.fromNode.outMaps.getClass().getName() == orig(this.toNode.inMaps.getClass().getName())
this.fromNode.outMaps[] == orig(this.fromNode.outMaps[])
this.fromNode.inMaps == orig(this.fromNode.inMaps)
this.fromNode.inMaps[] == orig(this.fromNode.inMaps[])
this.fromNode.outcount == orig(this.fromNode.outcount)
this.fromNode.incount == orig(this.fromNode.incount)
this.fromNode.incount == size(this.fromNode.inMaps[])
this.fromNode.incount == orig(size(this.fromNode.inMaps[]))
this.fromNode.basis == orig(this.fromNode.basis)
this.fromNode.basis.getClass().getName() == this.toNode.basis.getClass().getName()
this.fromNode.basis.getClass().getName() == orig(this.fromNode.basis.getClass().getName())
this.fromNode.basis.getClass().getName() == orig(this.toNode.basis.getClass().getName())
this.fromNode.basis[] == orig(this.fromNode.basis[])
this.fromNode.basis[].khovanovNodeCode == orig(this.fromNode.basis[].khovanovNodeCode)
this.fromNode.basis[].tensorProduct == orig(this.fromNode.basis[].tensorProduct)
this.fromNode.basis[].outArrows == orig(this.fromNode.basis[].outArrows)
this.fromNode.basis[].inArrows == orig(this.fromNode.basis[].inArrows)
this.fromNode.basis[].isIsolated == orig(this.fromNode.basis[].isIsolated)
this.fromNode.basis[].isDeleted == orig(this.fromNode.basis[].isDeleted)
this.fromNode.tensorcount == orig(this.fromNode.tensorcount)
this.toNode == orig(this.toNode)
this.toNode.binarycode == orig(this.toNode.binarycode)
this.toNode.binarycode.toString == orig(this.toNode.binarycode.toString)
this.toNode.circles == orig(this.toNode.circles)
this.toNode.circles[] == orig(this.toNode.circles[])
this.toNode.outMaps == orig(this.toNode.outMaps)
this.toNode.outMaps[] == orig(this.toNode.outMaps[])
this.toNode.inMaps == orig(this.toNode.inMaps)
this.toNode.inMaps[] == orig(this.toNode.inMaps[])
this.toNode.outcount == orig(this.toNode.outcount)
this.toNode.incount == orig(this.toNode.incount)
this.toNode.basis == orig(this.toNode.basis)
this.toNode.basis[] == orig(this.toNode.basis[])
this.toNode.basis[].khovanovNodeCode == orig(this.toNode.basis[].khovanovNodeCode)
this.toNode.basis[].tensorProduct == orig(this.toNode.basis[].tensorProduct)
this.toNode.basis[].outArrows == orig(this.toNode.basis[].outArrows)
this.toNode.basis[].inArrows == orig(this.toNode.basis[].inArrows)
this.toNode.basis[].isIsolated == orig(this.toNode.basis[].isIsolated)
this.toNode.basis[].isDeleted == orig(this.toNode.basis[].isDeleted)
this.toNode.tensorcount == orig(this.toNode.tensorcount)
this.fromCircle == orig(this.fromCircle)
this.fromCircle.minEdge == orig(this.fromCircle.minEdge)
this.fromCircle.code == orig(this.fromCircle.code)
this.fromCircle.code.toString == orig(this.fromCircle.code.toString)
this.fromCircle.vplus == orig(this.fromCircle.vplus)
this.fromCircle.vplus.getClass().getName() == orig(this.fromCircle.vplus.getClass().getName())
this.fromCircle.vminus == orig(this.fromCircle.vminus)
this.fromCircle.vminus.getClass().getName() == orig(this.fromCircle.vminus.getClass().getName())
this.toCircles == orig(this.toCircles)
this.toCircles[] == orig(this.toCircles[])
this.fromNode.basis[].khovanovNodeCode elements == this.fromNode.binarycode
this.fromNode.binarycode in this.fromNode.basis[].khovanovNodeCode
this.fromNode.outMaps.getClass().getName() != this.fromNode.basis.getClass().getName()
this.fromNode.outMaps.getClass().getName() != this.fromCircle.vplus.getClass().getName()
this.fromNode.outMaps.getClass().getName() != this.fromCircle.vminus.getClass().getName()
this.fromNode.outcount <= size(this.fromNode.outMaps[])-1
this.fromNode.basis.getClass().getName() != this.fromCircle.vplus.getClass().getName()
this.fromNode.basis.getClass().getName() != this.fromCircle.vminus.getClass().getName()
this.toNode.basis[].khovanovNodeCode elements == this.toNode.binarycode
this.toNode.binarycode in this.toNode.basis[].khovanovNodeCode
this.toNode.incount <= size(this.toNode.inMaps[])-1
this.fromCircle.vplus.getClass().getName() != this.fromCircle.vminus.getClass().getName()
===========================================================================
SplitMap.toString():::ENTER
===========================================================================
SplitMap.toString():::EXIT
this.fromNode == orig(this.fromNode)
this.fromNode.binarycode == orig(this.fromNode.binarycode)
this.fromNode.binarycode.toString == orig(this.fromNode.binarycode.toString)
this.fromNode.circles == orig(this.fromNode.circles)
this.fromNode.circles[] == orig(this.fromNode.circles[])
this.fromNode.outMaps == orig(this.fromNode.outMaps)
this.fromNode.outMaps.getClass().getName() == orig(this.fromNode.outMaps.getClass().getName())
this.fromNode.outMaps[] == orig(this.fromNode.outMaps[])
this.fromNode.inMaps == orig(this.fromNode.inMaps)
this.fromNode.inMaps.getClass().getName() == orig(this.fromNode.inMaps.getClass().getName())
this.fromNode.inMaps[] == orig(this.fromNode.inMaps[])
this.fromNode.outcount == orig(this.fromNode.outcount)
this.fromNode.incount == orig(this.fromNode.incount)
this.fromNode.basis == orig(this.fromNode.basis)
this.fromNode.basis.getClass().getName() == orig(this.fromNode.basis.getClass().getName())
this.fromNode.basis[] == orig(this.fromNode.basis[])
this.fromNode.basis[].khovanovNodeCode == orig(this.fromNode.basis[].khovanovNodeCode)
this.fromNode.basis[].tensorProduct == orig(this.fromNode.basis[].tensorProduct)
this.fromNode.basis[].outArrows == orig(this.fromNode.basis[].outArrows)
this.fromNode.basis[].inArrows == orig(this.fromNode.basis[].inArrows)
this.fromNode.basis[].isIsolated == orig(this.fromNode.basis[].isIsolated)
this.fromNode.basis[].isDeleted == orig(this.fromNode.basis[].isDeleted)
this.fromNode.tensorcount == orig(this.fromNode.tensorcount)
this.toNode == orig(this.toNode)
this.toNode.binarycode == orig(this.toNode.binarycode)
this.toNode.binarycode.toString == orig(this.toNode.binarycode.toString)
this.toNode.circles == orig(this.toNode.circles)
this.toNode.circles[] == orig(this.toNode.circles[])
this.toNode.outMaps == orig(this.toNode.outMaps)
this.toNode.outMaps.getClass().getName() == orig(this.toNode.outMaps.getClass().getName())
this.toNode.outMaps[] == orig(this.toNode.outMaps[])
this.toNode.inMaps == orig(this.toNode.inMaps)
this.toNode.inMaps.getClass().getName() == orig(this.toNode.inMaps.getClass().getName())
this.toNode.inMaps[] == orig(this.toNode.inMaps[])
this.toNode.outcount == orig(this.toNode.outcount)
this.toNode.incount == orig(this.toNode.incount)
this.toNode.basis == orig(this.toNode.basis)
this.toNode.basis.getClass().getName() == orig(this.toNode.basis.getClass().getName())
this.toNode.basis[] == orig(this.toNode.basis[])
this.toNode.basis[].khovanovNodeCode == orig(this.toNode.basis[].khovanovNodeCode)
this.toNode.basis[].tensorProduct == orig(this.toNode.basis[].tensorProduct)
this.toNode.basis[].outArrows == orig(this.toNode.basis[].outArrows)
this.toNode.basis[].inArrows == orig(this.toNode.basis[].inArrows)
this.toNode.basis[].isIsolated == orig(this.toNode.basis[].isIsolated)
this.toNode.basis[].isDeleted == orig(this.toNode.basis[].isDeleted)
this.toNode.tensorcount == orig(this.toNode.tensorcount)
this.fromCircle == orig(this.fromCircle)
this.fromCircle.minEdge == orig(this.fromCircle.minEdge)
this.fromCircle.code == orig(this.fromCircle.code)
this.fromCircle.code.toString == orig(this.fromCircle.code.toString)
this.fromCircle.vplus == orig(this.fromCircle.vplus)
this.fromCircle.vplus.getClass().getName() == orig(this.fromCircle.vplus.getClass().getName())
this.fromCircle.vminus == orig(this.fromCircle.vminus)
this.fromCircle.vminus.getClass().getName() == orig(this.fromCircle.vminus.getClass().getName())
this.toCircles == orig(this.toCircles)
this.toCircles[] == orig(this.toCircles[])
===========================================================================
Tensor:::OBJECT
this.khovanovNodeCode != null
this.tensorProduct != null
this.tensorProduct.getClass().getName() == BasisElement[].class
this.tensorProduct[] elements != null
this.outArrows != null
this.outArrows[] elements != null
this.outArrows[].getClass().getName() elements == Arrow.class
this.inArrows != null
this.inArrows[] elements != null
this.inArrows[].getClass().getName() elements == Arrow.class
this.isIsolated == false
this.isDeleted == false
size(this.tensorProduct[]) one of { 1, 2, 3 }
===========================================================================
Tensor.Tensor(java.util.ArrayList, java.lang.String):::ENTER
arg0 != null
arg0[] elements != null
arg1 != null
size(arg0[]) one of { 1, 2, 3 }
===========================================================================
Tensor.Tensor(java.util.ArrayList, java.lang.String):::EXIT
arg0[] == orig(arg0[])
arg1.toString == orig(arg1.toString)
this.outArrows[] == []
this.outArrows[].getClass().getName() == []
this.inArrows[] == []
this.inArrows[].getClass().getName() == []
arg0[] elements != null
===========================================================================
Tensor.addInArrow(Arrow):::ENTER
this.outArrows[] == []
this.outArrows[].getClass().getName() == []
arg0 != null
arg0.from != null
arg0.from.khovanovNodeCode != null
arg0.from.tensorProduct != null
arg0.from.tensorProduct.getClass().getName() == BasisElement[].class
arg0.from.tensorProduct[] elements != null
arg0.from.outArrows != null
arg0.from.outArrows[] elements != null
arg0.from.outArrows[].getClass().getName() elements == Arrow.class
arg0.from.inArrows != null
arg0.from.inArrows[] elements != null
arg0.from.inArrows[].getClass().getName() elements == Arrow.class
arg0.from.isIsolated == false
arg0.from.isDeleted == false
arg0.to != null
arg0.to.khovanovNodeCode != null
arg0.to.tensorProduct != null
arg0.to.tensorProduct.getClass().getName() == BasisElement[].class
arg0.to.tensorProduct[] elements != null
arg0.to.outArrows != null
arg0.to.outArrows[] == []
arg0.to.outArrows[].getClass().getName() == []
arg0.to.inArrows != null
arg0.to.inArrows[] elements != null
arg0.to.inArrows[].getClass().getName() elements == Arrow.class
arg0.to.isIsolated == false
arg0.to.isDeleted == false
arg0.deleted == false
size(this.inArrows[]) one of { 0, 1, 2 }
size(arg0.from.tensorProduct[]) one of { 1, 2 }
size(arg0.from.outArrows[]) >= 1
size(arg0.from.inArrows[]) one of { 0, 1, 2 }
size(arg0.to.tensorProduct[]) one of { 1, 2, 3 }
size(arg0.to.inArrows[]) one of { 0, 1, 2 }
===========================================================================
Tensor.addInArrow(Arrow):::EXIT
this.khovanovNodeCode == orig(this.khovanovNodeCode)
this.khovanovNodeCode.toString == orig(this.khovanovNodeCode.toString)
this.tensorProduct == orig(this.tensorProduct)
this.tensorProduct.getClass().getName() == orig(this.tensorProduct.getClass().getName())
this.tensorProduct[] == orig(this.tensorProduct[])
this.outArrows == orig(this.outArrows)
this.outArrows[] == orig(this.outArrows[])
this.inArrows == orig(this.inArrows)
this.isIsolated == orig(this.isIsolated)
this.isDeleted == orig(this.isDeleted)
arg0.from == orig(arg0.from)
arg0.from.khovanovNodeCode == orig(arg0.from.khovanovNodeCode)
arg0.from.khovanovNodeCode.toString == orig(arg0.from.khovanovNodeCode.toString)
arg0.from.tensorProduct == orig(arg0.from.tensorProduct)
arg0.from.tensorProduct.getClass().getName() == orig(arg0.from.tensorProduct.getClass().getName())
arg0.from.tensorProduct[] == orig(arg0.from.tensorProduct[])
arg0.from.outArrows == orig(arg0.from.outArrows)
arg0.from.outArrows[] == orig(arg0.from.outArrows[])
arg0.from.inArrows == orig(arg0.from.inArrows)
arg0.from.inArrows[] == orig(arg0.from.inArrows[])
arg0.from.isIsolated == orig(arg0.from.isIsolated)
arg0.from.isDeleted == orig(arg0.from.isDeleted)
arg0.to == orig(arg0.to)
arg0.to.khovanovNodeCode == orig(arg0.to.khovanovNodeCode)
arg0.to.khovanovNodeCode.toString == orig(arg0.to.khovanovNodeCode.toString)
arg0.to.tensorProduct == orig(arg0.to.tensorProduct)
arg0.to.tensorProduct.getClass().getName() == orig(arg0.to.tensorProduct.getClass().getName())
arg0.to.tensorProduct[] == orig(arg0.to.tensorProduct[])
arg0.to.outArrows == orig(arg0.to.outArrows)
arg0.to.outArrows[] == orig(arg0.to.outArrows[])
arg0.to.inArrows == orig(arg0.to.inArrows)
arg0.to.isIsolated == orig(arg0.to.isIsolated)
arg0.to.isDeleted == orig(arg0.to.isDeleted)
arg0.deleted == orig(arg0.deleted)
size(this.inArrows[])-1 == orig(size(this.inArrows[]))
size(arg0.to.inArrows[])-1 == orig(size(arg0.to.inArrows[]))
this.outArrows[] == []
this.outArrows[].getClass().getName() == []
arg0.from != null
arg0.from.khovanovNodeCode != null
arg0.from.tensorProduct != null
arg0.from.tensorProduct.getClass().getName() == BasisElement[].class
arg0.from.tensorProduct[] elements != null
arg0.from.outArrows != null
arg0.from.outArrows[] elements != null
arg0.from.outArrows[].getClass().getName() elements == Arrow.class
arg0.from.inArrows != null
arg0.from.inArrows[] elements != null
arg0.from.inArrows[].getClass().getName() elements == Arrow.class
arg0.from.isIsolated == false
arg0.from.isDeleted == false
arg0.to != null
arg0.to.khovanovNodeCode != null
arg0.to.tensorProduct != null
arg0.to.tensorProduct.getClass().getName() == BasisElement[].class
arg0.to.tensorProduct[] elements != null
arg0.to.outArrows != null
arg0.to.outArrows[] == []
arg0.to.outArrows[].getClass().getName() == []
arg0.to.inArrows != null
arg0.to.inArrows[] elements != null
arg0.to.inArrows[].getClass().getName() elements == Arrow.class
arg0.to.isIsolated == false
arg0.to.isDeleted == false
arg0.deleted == false
size(this.inArrows[]) one of { 1, 2, 3 }
size(arg0.from.tensorProduct[]) one of { 1, 2 }
size(arg0.from.outArrows[]) >= 1
size(arg0.from.inArrows[]) one of { 0, 1, 2 }
size(arg0.to.tensorProduct[]) one of { 1, 2, 3 }
size(arg0.to.inArrows[]) one of { 1, 2, 3 }
===========================================================================
Tensor.addOutArrow(Arrow):::ENTER
arg0 != null
arg0.from != null
arg0.from.khovanovNodeCode != null
arg0.from.tensorProduct != null
arg0.from.tensorProduct.getClass().getName() == BasisElement[].class
arg0.from.tensorProduct[] elements != null
arg0.from.outArrows != null
arg0.from.outArrows[] elements != null
arg0.from.outArrows[].getClass().getName() elements == Arrow.class
arg0.from.inArrows != null
arg0.from.inArrows[] elements != null
arg0.from.inArrows[].getClass().getName() elements == Arrow.class
arg0.from.isIsolated == false
arg0.from.isDeleted == false
arg0.to != null
arg0.to.khovanovNodeCode != null
arg0.to.tensorProduct != null
arg0.to.tensorProduct.getClass().getName() == BasisElement[].class
arg0.to.tensorProduct[] elements != null
arg0.to.outArrows != null
arg0.to.outArrows[] == []
arg0.to.outArrows[].getClass().getName() == []
arg0.to.inArrows != null
arg0.to.inArrows[] elements != null
arg0.to.inArrows[].getClass().getName() elements == Arrow.class
arg0.to.isIsolated == false
arg0.to.isDeleted == false
arg0.deleted == false
size(this.tensorProduct[]) one of { 1, 2 }
size(this.inArrows[]) one of { 0, 1, 2 }
size(arg0.from.tensorProduct[]) one of { 1, 2 }
size(arg0.from.inArrows[]) one of { 0, 1, 2 }
size(arg0.to.tensorProduct[]) one of { 1, 2, 3 }
size(arg0.to.inArrows[]) one of { 0, 1, 2 }
===========================================================================
Tensor.addOutArrow(Arrow):::EXIT
this.khovanovNodeCode == orig(this.khovanovNodeCode)
this.khovanovNodeCode.toString == orig(this.khovanovNodeCode.toString)
this.tensorProduct == orig(this.tensorProduct)
this.tensorProduct.getClass().getName() == orig(this.tensorProduct.getClass().getName())
this.tensorProduct[] == orig(this.tensorProduct[])
this.outArrows == orig(this.outArrows)
this.inArrows == orig(this.inArrows)
this.inArrows[] == orig(this.inArrows[])
this.isIsolated == orig(this.isIsolated)
this.isDeleted == orig(this.isDeleted)
arg0.from == orig(arg0.from)
arg0.from.khovanovNodeCode == orig(arg0.from.khovanovNodeCode)
arg0.from.khovanovNodeCode.toString == orig(arg0.from.khovanovNodeCode.toString)
arg0.from.tensorProduct == orig(arg0.from.tensorProduct)
arg0.from.tensorProduct.getClass().getName() == orig(arg0.from.tensorProduct.getClass().getName())
arg0.from.tensorProduct[] == orig(arg0.from.tensorProduct[])
arg0.from.outArrows == orig(arg0.from.outArrows)
arg0.from.inArrows == orig(arg0.from.inArrows)
arg0.from.inArrows[] == orig(arg0.from.inArrows[])
arg0.from.isIsolated == orig(arg0.from.isIsolated)
arg0.from.isDeleted == orig(arg0.from.isDeleted)
arg0.to == orig(arg0.to)
arg0.to.khovanovNodeCode == orig(arg0.to.khovanovNodeCode)
arg0.to.khovanovNodeCode.toString == orig(arg0.to.khovanovNodeCode.toString)
arg0.to.tensorProduct == orig(arg0.to.tensorProduct)
arg0.to.tensorProduct.getClass().getName() == orig(arg0.to.tensorProduct.getClass().getName())
arg0.to.tensorProduct[] == orig(arg0.to.tensorProduct[])
arg0.to.outArrows == orig(arg0.to.outArrows)
arg0.to.outArrows[] == orig(arg0.to.outArrows[])
arg0.to.inArrows == orig(arg0.to.inArrows)
arg0.to.inArrows[] == orig(arg0.to.inArrows[])
arg0.to.isIsolated == orig(arg0.to.isIsolated)
arg0.to.isDeleted == orig(arg0.to.isDeleted)
arg0.deleted == orig(arg0.deleted)
size(this.outArrows[])-1 == orig(size(this.outArrows[]))
size(arg0.from.outArrows[])-1 == orig(size(arg0.from.outArrows[]))
arg0.from != null
arg0.from.khovanovNodeCode != null
arg0.from.tensorProduct != null
arg0.from.tensorProduct.getClass().getName() == BasisElement[].class
arg0.from.tensorProduct[] elements != null
arg0.from.outArrows != null
arg0.from.outArrows[] elements != null
arg0.from.outArrows[].getClass().getName() elements == Arrow.class
arg0.from.inArrows != null
arg0.from.inArrows[] elements != null
arg0.from.inArrows[].getClass().getName() elements == Arrow.class
arg0.from.isIsolated == false
arg0.from.isDeleted == false
arg0.to != null
arg0.to.khovanovNodeCode != null
arg0.to.tensorProduct != null
arg0.to.tensorProduct.getClass().getName() == BasisElement[].class
arg0.to.tensorProduct[] elements != null
arg0.to.outArrows != null
arg0.to.outArrows[] == []
arg0.to.outArrows[].getClass().getName() == []
arg0.to.inArrows != null
arg0.to.inArrows[] elements != null
arg0.to.inArrows[].getClass().getName() elements == Arrow.class
arg0.to.isIsolated == false
arg0.to.isDeleted == false
arg0.deleted == false
size(this.tensorProduct[]) one of { 1, 2 }
size(this.outArrows[]) >= 1
size(this.inArrows[]) one of { 0, 1, 2 }
size(arg0.from.tensorProduct[]) one of { 1, 2 }
size(arg0.from.outArrows[]) >= 1
size(arg0.from.inArrows[]) one of { 0, 1, 2 }
size(arg0.to.tensorProduct[]) one of { 1, 2, 3 }
size(arg0.to.inArrows[]) one of { 0, 1, 2 }
===========================================================================
Tensor.basisToString():::ENTER
===========================================================================
Tensor.basisToString():::EXIT
this.khovanovNodeCode == orig(this.khovanovNodeCode)
this.khovanovNodeCode.toString == orig(this.khovanovNodeCode.toString)
this.tensorProduct == orig(this.tensorProduct)
this.tensorProduct.getClass().getName() == orig(this.tensorProduct.getClass().getName())
this.tensorProduct[] == orig(this.tensorProduct[])
this.outArrows == orig(this.outArrows)
this.outArrows[] == orig(this.outArrows[])
this.inArrows == orig(this.inArrows)
this.inArrows[] == orig(this.inArrows[])
this.isIsolated == orig(this.isIsolated)
this.isDeleted == orig(this.isDeleted)
return != null
===========================================================================
Tensor.contains(BasisElement):::ENTER
arg0 != null
===========================================================================
Tensor.contains(BasisElement):::EXIT
this.khovanovNodeCode == orig(this.khovanovNodeCode)
this.khovanovNodeCode.toString == orig(this.khovanovNodeCode.toString)
this.tensorProduct == orig(this.tensorProduct)
this.tensorProduct.getClass().getName() == orig(this.tensorProduct.getClass().getName())
this.tensorProduct[] == orig(this.tensorProduct[])
this.outArrows == orig(this.outArrows)
this.outArrows[] == orig(this.outArrows[])
this.inArrows == orig(this.inArrows)
this.inArrows[] == orig(this.inArrows[])
this.isIsolated == orig(this.isIsolated)
this.isDeleted == orig(this.isDeleted)
(return == true)  ==>  (size(this.outArrows[]) one of { 0, 1, 2 })
===========================================================================
Tensor.contains(BasisElement):::EXIT;condition="return == true"
return == true
size(this.outArrows[]) one of { 0, 1, 2 }
===========================================================================
Tensor.contains(BasisElement):::EXIT;condition="not(return == true)"
return == false
===========================================================================
Tensor.getCode():::ENTER
size(this.inArrows[]) one of { 1, 2, 3 }
===========================================================================
Tensor.getCode():::EXIT
this.khovanovNodeCode == orig(this.khovanovNodeCode)
this.khovanovNodeCode.toString == orig(this.khovanovNodeCode.toString)
this.tensorProduct == orig(this.tensorProduct)
this.tensorProduct.getClass().getName() == orig(this.tensorProduct.getClass().getName())
this.tensorProduct[] == orig(this.tensorProduct[])
this.outArrows == orig(this.outArrows)
this.outArrows[] == orig(this.outArrows[])
this.inArrows == orig(this.inArrows)
this.inArrows[] == orig(this.inArrows[])
this.isIsolated == orig(this.isIsolated)
this.isDeleted == orig(this.isDeleted)
return != null
size(this.inArrows[]) one of { 1, 2, 3 }
===========================================================================
Tensor.getElements():::ENTER
size(this.tensorProduct[]) one of { 1, 2 }
size(this.inArrows[]) one of { 0, 1, 2 }
===========================================================================
Tensor.getElements():::EXIT
this.khovanovNodeCode == orig(this.khovanovNodeCode)
this.khovanovNodeCode.toString == orig(this.khovanovNodeCode.toString)
this.tensorProduct == orig(this.tensorProduct)
this.tensorProduct.getClass().getName() == orig(this.tensorProduct.getClass().getName())
this.tensorProduct[] == orig(this.tensorProduct[])
this.outArrows == orig(this.outArrows)
this.outArrows[] == orig(this.outArrows[])
this.inArrows == orig(this.inArrows)
this.inArrows[] == orig(this.inArrows[])
this.isIsolated == orig(this.isIsolated)
this.isDeleted == orig(this.isDeleted)
return != null
return.getClass().getName() == BasisElement[].class
return[] elements != null
size(this.tensorProduct[]) one of { 1, 2 }
size(this.inArrows[]) one of { 0, 1, 2 }
size(return[]) one of { 1, 2 }
===========================================================================
Tensor.isIdentityMinusOne(Tensor, BasisElement):::ENTER
arg0 != null
arg0.khovanovNodeCode != null
arg0.tensorProduct != null
arg0.tensorProduct.getClass().getName() == BasisElement[].class
arg0.tensorProduct[] elements != null
arg0.outArrows != null
arg0.outArrows[] elements != null
arg0.outArrows[].getClass().getName() elements == Arrow.class
arg0.inArrows != null
arg0.inArrows[] elements != null
arg0.inArrows[].getClass().getName() elements == Arrow.class
arg0.isIsolated == false
arg0.isDeleted == false
arg1 != null
size(this.tensorProduct[]) one of { 2, 3 }
size(arg0.tensorProduct[]) one of { 1, 2 }
size(arg0.inArrows[]) one of { 0, 1, 2 }
===========================================================================
Tensor.isIdentityMinusOne(Tensor, BasisElement):::EXIT164
this.khovanovNodeCode.toString one of { "000", "111" }
return == false
size(arg0.outArrows[]) one of { 0, 1, 2 }
===========================================================================
Tensor.isIdentityMinusOne(Tensor, BasisElement):::EXIT164;condition="not(return == true)"
===========================================================================
Tensor.isIdentityMinusOne(Tensor, BasisElement):::EXIT166
return == true
size(this.outArrows[]) one of { 0, 1, 2 }
===========================================================================
Tensor.isIdentityMinusOne(Tensor, BasisElement):::EXIT166;condition="return == true"
===========================================================================
Tensor.isIdentityMinusOne(Tensor, BasisElement):::EXIT
this.khovanovNodeCode == orig(this.khovanovNodeCode)
this.khovanovNodeCode.toString == orig(this.khovanovNodeCode.toString)
this.tensorProduct == orig(this.tensorProduct)
this.tensorProduct.getClass().getName() == orig(this.tensorProduct.getClass().getName())
this.tensorProduct[] == orig(this.tensorProduct[])
this.outArrows == orig(this.outArrows)
this.outArrows[] == orig(this.outArrows[])
this.inArrows == orig(this.inArrows)
this.inArrows[] == orig(this.inArrows[])
this.isIsolated == orig(this.isIsolated)
this.isDeleted == orig(this.isDeleted)
arg0.khovanovNodeCode == orig(arg0.khovanovNodeCode)
arg0.khovanovNodeCode.toString == orig(arg0.khovanovNodeCode.toString)
arg0.tensorProduct == orig(arg0.tensorProduct)
arg0.tensorProduct.getClass().getName() == orig(arg0.tensorProduct.getClass().getName())
arg0.tensorProduct[] == orig(arg0.tensorProduct[])
arg0.outArrows == orig(arg0.outArrows)
arg0.outArrows[] == orig(arg0.outArrows[])
arg0.inArrows == orig(arg0.inArrows)
arg0.inArrows[] == orig(arg0.inArrows[])
arg0.isIsolated == orig(arg0.isIsolated)
arg0.isDeleted == orig(arg0.isDeleted)
(return == false)  ==>  (size(arg0.outArrows[]) one of { 0, 1, 2 })
(return == false)  ==>  (this.khovanovNodeCode.toString one of { "000", "111" })
(return == true)  ==>  (size(this.outArrows[]) one of { 0, 1, 2 })
arg0.khovanovNodeCode != null
arg0.tensorProduct != null
arg0.tensorProduct.getClass().getName() == BasisElement[].class
arg0.tensorProduct[] elements != null
arg0.outArrows != null
arg0.outArrows[] elements != null
arg0.outArrows[].getClass().getName() elements == Arrow.class
arg0.inArrows != null
arg0.inArrows[] elements != null
arg0.inArrows[].getClass().getName() elements == Arrow.class
arg0.isIsolated == false
arg0.isDeleted == false
size(this.tensorProduct[]) one of { 2, 3 }
size(arg0.tensorProduct[]) one of { 1, 2 }
size(arg0.inArrows[]) one of { 0, 1, 2 }
===========================================================================
Tensor.isIdentityMinusOne(Tensor, BasisElement):::EXIT;condition="return == true"
return == true
size(this.outArrows[]) one of { 0, 1, 2 }
===========================================================================
Tensor.isIdentityMinusOne(Tensor, BasisElement):::EXIT;condition="not(return == true)"
this.khovanovNodeCode.toString one of { "000", "111" }
return == false
size(arg0.outArrows[]) one of { 0, 1, 2 }
===========================================================================
Tensor.toString():::ENTER
===========================================================================
Tensor.toString():::EXIT
this.khovanovNodeCode == orig(this.khovanovNodeCode)
this.khovanovNodeCode.toString == orig(this.khovanovNodeCode.toString)
this.tensorProduct == orig(this.tensorProduct)
this.tensorProduct.getClass().getName() == orig(this.tensorProduct.getClass().getName())
this.tensorProduct[] == orig(this.tensorProduct[])
this.outArrows == orig(this.outArrows)
this.outArrows[] == orig(this.outArrows[])
this.inArrows == orig(this.inArrows)
this.inArrows[] == orig(this.inArrows[])
this.isIsolated == orig(this.isIsolated)
this.isDeleted == orig(this.isDeleted)
return != null
===========================================================================
Vertex:::OBJECT
this.from.to.visited == this.to.from.visited
this.from.to.visited == this.visited
this.to.from.visited == this.visited
this.numberOfVertex >= 1
this.from.numberOfVertex >= 1
this.from.from.numberOfVertex >= 1
this.from.to.numberOfVertex >= 1
this.from.to.from != null
this.from.to.to != null
this.to.numberOfVertex >= 1
this.to.from.numberOfVertex >= 1
this.to.from.from != null
this.to.from.to != null
this.to.to.numberOfVertex >= 1
this.numberOfVertex != this.from.numberOfVertex
this.numberOfVertex != this.to.numberOfVertex
this.from.numberOfVertex != this.from.from.numberOfVertex
this.from.numberOfVertex != this.from.to.numberOfVertex
this.to.numberOfVertex != this.to.from.numberOfVertex
this.to.numberOfVertex != this.to.to.numberOfVertex
===========================================================================
Vertex.Vertex(int):::ENTER
arg0 >= 1
===========================================================================
Vertex.Vertex(int):::EXIT
this.numberOfVertex == orig(arg0)
this.from == this.to
this.from == null
this.visited == false
===========================================================================
Vertex.getFrom():::ENTER
this == this.from.to
this.numberOfVertex == this.from.to.numberOfVertex
this.from == this.from.to.from
this.from.from.visited == this.visited
this.from.to.to == this.to
this.from.visited == this.visited
this.to == this.to.from.to
this.to.to.visited == this.visited
this.to.visited == this.visited
this.from != null
this.from.from != null
this.from.from.from != null
this.from.from.to != null
this.from.to != null
this.to != null
this.to.from != null
this.to.to != null
this.to.to.from != null
this.to.to.to != null
this.from.numberOfVertex != this.to.from.numberOfVertex
===========================================================================
Vertex.getFrom():::EXIT
this.numberOfVertex == this.from.to.numberOfVertex
this.numberOfVertex == return.to.numberOfVertex
this.numberOfVertex == orig(this.numberOfVertex)
this.numberOfVertex == orig(this.from.to.numberOfVertex)
this.from == return
this.from.numberOfVertex == return.numberOfVertex
this.from.from == return.from
this.from.from.numberOfVertex == return.from.numberOfVertex
this.from.from.from == return.from.from
this.from.from.to == return.from.to
this.from.from.visited == this.visited
this.from.to == return.to
this.from.to.from == return
this.from.to.to == this.to
this.from.visited == this.visited
this.to == this.to.from.to
this.to == return.to.to
this.to == orig(this.from.to.to)
this.to == orig(this.to)
this.to == orig(this.to.from.to)
this.to.numberOfVertex == orig(this.to.numberOfVertex)
this.to.from == orig(this.to.from)
this.to.from.numberOfVertex == orig(this.to.from.numberOfVertex)
this.to.from.from == orig(this.to.from.from)
this.to.to == orig(this.to.to)
this.to.to.numberOfVertex == orig(this.to.to.numberOfVertex)
this.to.to.from == orig(this.to.to.from)
this.to.to.to == orig(this.to.to.to)
this.to.to.visited == this.visited
this.to.visited == this.visited
this.visited == return.from.visited
this.visited == return.to.visited
this.visited == return.visited
this.visited == orig(this.from.from.visited)
this.visited == orig(this.from.to.visited)
this.visited == orig(this.from.visited)
this.visited == orig(this.to.from.visited)
this.visited == orig(this.to.to.visited)
this.visited == orig(this.to.visited)
this.visited == orig(this.visited)
return == return.to.from
return == orig(this.from)
return == orig(this.from.to.from)
return.numberOfVertex == orig(this.from.numberOfVertex)
return.from == orig(this.from.from)
return.from.numberOfVertex == orig(this.from.from.numberOfVertex)
return.from.from == orig(this.from.from.from)
return.from.to == orig(this.from.from.to)
return.to == orig(this)
return.to == orig(this.from.to)
this.to != null
this.to.from != null
this.to.to != null
this.to.to.from != null
this.to.to.to != null
return != null
return.numberOfVertex >= 1
return.from != null
return.from.numberOfVertex >= 1
return.from.from != null
return.from.to != null
return.to != null
this.numberOfVertex != return.numberOfVertex
this.to.from.numberOfVertex != return.numberOfVertex
return.numberOfVertex != return.from.numberOfVertex
===========================================================================
Vertex.getNum():::ENTER
this.from == this.from.to.from
this.to == this.to.from.to
this.from != null
this.from.from != null
this.from.from.from != null
this.from.from.to != null
this.from.to != null
this.to != null
this.to.from != null
this.to.to != null
this.to.to.from != null
this.to.to.to != null
===========================================================================
Vertex.getNum():::EXIT
this.numberOfVertex == return
this.from == this.from.to.from
this.from == orig(this.from)
this.from == orig(this.from.to.from)
this.from.numberOfVertex == orig(this.from.numberOfVertex)
this.from.from == orig(this.from.from)
this.from.from.numberOfVertex == orig(this.from.from.numberOfVertex)
this.from.from.from == orig(this.from.from.from)
this.from.from.to == orig(this.from.from.to)
this.from.from.visited == orig(this.from.from.visited)
this.from.to == orig(this.from.to)
this.from.to.numberOfVertex == orig(this.from.to.numberOfVertex)
this.from.to.to == orig(this.from.to.to)
this.from.visited == orig(this.from.visited)
this.to == this.to.from.to
this.to == orig(this.to)
this.to == orig(this.to.from.to)
this.to.numberOfVertex == orig(this.to.numberOfVertex)
this.to.from == orig(this.to.from)
this.to.from.numberOfVertex == orig(this.to.from.numberOfVertex)
this.to.from.from == orig(this.to.from.from)
this.to.to == orig(this.to.to)
this.to.to.numberOfVertex == orig(this.to.to.numberOfVertex)
this.to.to.from == orig(this.to.to.from)
this.to.to.to == orig(this.to.to.to)
this.to.to.visited == orig(this.to.to.visited)
this.to.visited == orig(this.to.visited)
this.visited == orig(this.from.to.visited)
this.visited == orig(this.to.from.visited)
this.visited == orig(this.visited)
return == orig(this.numberOfVertex)
this.from != null
this.from.from != null
this.from.from.from != null
this.from.from.to != null
this.from.to != null
this.to != null
this.to.from != null
this.to.to != null
this.to.to.from != null
this.to.to.to != null
return >= 1
this.from.numberOfVertex != return
this.to.numberOfVertex != return
===========================================================================
Vertex.getTo():::ENTER
this == this.from.to
this.numberOfVertex == this.from.to.numberOfVertex
this.from == this.from.from.to
this.from == this.from.to.from
this.from.to.to == this.to
this.from != null
this.from.from != null
this.from.from.from != null
this.from.to != null
this.to != null
this.to.from != null
this.to.to != null
this.to.to.from != null
this.to.to.to != null
===========================================================================
Vertex.getTo():::EXIT
this.numberOfVertex == this.from.to.numberOfVertex
this.numberOfVertex == orig(this.numberOfVertex)
this.numberOfVertex == orig(this.from.to.numberOfVertex)
this.from == this.from.from.to
this.from == this.from.to.from
this.from == orig(this.from)
this.from == orig(this.from.from.to)
this.from == orig(this.from.to.from)
this.from.numberOfVertex == orig(this.from.numberOfVertex)
this.from.from == orig(this.from.from)
this.from.from.numberOfVertex == orig(this.from.from.numberOfVertex)
this.from.from.from == orig(this.from.from.from)
this.from.from.visited == orig(this.from.from.visited)
this.from.to == orig(this)
this.from.to == orig(this.from.to)
this.from.to.to == return
this.from.visited == orig(this.from.visited)
this.to == return
this.to.numberOfVertex == return.numberOfVertex
this.to.from == return.from
this.to.from.numberOfVertex == return.from.numberOfVertex
this.to.from.from == return.from.from
this.to.from.to == return.from.to
this.to.to == return.to
this.to.to.numberOfVertex == return.to.numberOfVertex
this.to.to.from == return.to.from
this.to.to.to == return.to.to
this.to.to.visited == return.to.visited
this.to.visited == return.visited
this.visited == return.from.visited
this.visited == orig(this.from.to.visited)
this.visited == orig(this.to.from.visited)
this.visited == orig(this.visited)
return == orig(this.from.to.to)
return == orig(this.to)
return.numberOfVertex == orig(this.to.numberOfVertex)
return.from == orig(this.to.from)
return.from.numberOfVertex == orig(this.to.from.numberOfVertex)
return.from.from == orig(this.to.from.from)
return.from.to == orig(this.to.from.to)
return.to == orig(this.to.to)
return.to.numberOfVertex == orig(this.to.to.numberOfVertex)
return.to.from == orig(this.to.to.from)
return.to.to == orig(this.to.to.to)
return.to.visited == orig(this.to.to.visited)
return.visited == orig(this.to.visited)
this.from != null
this.from.from != null
this.from.from.from != null
this.from.to != null
return != null
return.numberOfVertex >= 1
return.from != null
return.from.numberOfVertex >= 1
return.from.from != null
return.from.to != null
return.to != null
return.to.numberOfVertex >= 1
return.to.from != null
return.to.to != null
this.numberOfVertex != return.numberOfVertex
return.numberOfVertex != return.from.numberOfVertex
return.numberOfVertex != return.to.numberOfVertex
===========================================================================
Vertex.setFrom(Vertex):::ENTER
this == arg0.to
this.numberOfVertex == arg0.to.numberOfVertex
this.from == arg0.to.from
this.from.from.visited == this.visited
this.from.visited == this.visited
this.to == arg0.to.to
this.to.to.visited == this.visited
this.to.visited == this.visited
this.from != null
this.from.from != null
this.from.from.from != null
this.from.from.to != null
this.from.to != null
this.to != null
this.to.from != null
this.to.to != null
this.to.to.from != null
this.to.to.to != null
this.visited == false
arg0 != null
arg0.numberOfVertex >= 1
arg0.from != null
arg0.from.numberOfVertex >= 1
arg0.from.from != null
arg0.from.to != null
arg0.from.visited == false
arg0.to != null
arg0.to.visited == false
arg0.visited == false
this.numberOfVertex != this.from.from.numberOfVertex
this.numberOfVertex != arg0.numberOfVertex
this.from.numberOfVertex != this.to.from.numberOfVertex
this.from.numberOfVertex != arg0.numberOfVertex
this.from.to.numberOfVertex != this.to.numberOfVertex
arg0.numberOfVertex != arg0.from.numberOfVertex
===========================================================================
Vertex.setFrom(Vertex):::EXIT
this.numberOfVertex == this.from.to.numberOfVertex
this.numberOfVertex == arg0.to.numberOfVertex
this.numberOfVertex == orig(this.numberOfVertex)
this.numberOfVertex == orig(arg0.to.numberOfVertex)
this.from == this.from.to.from
this.from == arg0.to.from
this.from == orig(arg0)
this.from.numberOfVertex == arg0.numberOfVertex
this.from.from == arg0.from
this.from.from.numberOfVertex == arg0.from.numberOfVertex
this.from.from.from == arg0.from.from
this.from.from.to == arg0.from.to
this.from.from.visited == this.visited
this.from.to == arg0.to
this.from.to.to == this.to
this.from.visited == this.visited
this.to == arg0.to.to
this.to == orig(this.to)
this.to == orig(arg0.to.to)
this.to.numberOfVertex == orig(this.to.numberOfVertex)
this.to.from == orig(this.to.from)
this.to.from.numberOfVertex == orig(this.to.from.numberOfVertex)
this.to.from.to == orig(this.to.from.to)
this.to.to == orig(this.to.to)
this.to.to.numberOfVertex == orig(this.to.to.numberOfVertex)
this.to.to.to == orig(this.to.to.to)
this.to.to.visited == this.visited
this.to.visited == this.visited
this.visited == orig(this.from.from.visited)
this.visited == orig(this.from.to.visited)
this.visited == orig(this.from.visited)
this.visited == orig(this.to.from.visited)
this.visited == orig(this.to.to.visited)
this.visited == orig(this.to.visited)
this.visited == orig(this.visited)
arg0.numberOfVertex == orig(arg0.numberOfVertex)
arg0.from == orig(arg0.from)
arg0.from.numberOfVertex == orig(arg0.from.numberOfVertex)
arg0.from.to == orig(arg0.from.to)
arg0.from.visited == orig(arg0.from.visited)
arg0.to == orig(this)
arg0.to == orig(arg0.to)
arg0.to.visited == orig(arg0.to.visited)
arg0.visited == orig(arg0.visited)
this.from != null
this.to != null
this.to.from != null
this.to.to != null
this.to.to.from != null
this.to.to.to != null
this.visited == false
arg0.numberOfVertex >= 1
arg0.from != null
arg0.from.numberOfVertex >= 1
arg0.from.from != null
arg0.from.to != null
arg0.from.visited == false
arg0.to != null
arg0.to.visited == false
arg0.visited == false
this.numberOfVertex != arg0.numberOfVertex
this.numberOfVertex != orig(this.from.numberOfVertex)
this.numberOfVertex != orig(this.from.from.numberOfVertex)
this.to.numberOfVertex != orig(this.from.to.numberOfVertex)
this.to.from.numberOfVertex != orig(this.from.numberOfVertex)
arg0.numberOfVertex != arg0.from.numberOfVertex
arg0.numberOfVertex != orig(this.from.numberOfVertex)
===========================================================================
Vertex.setPointers(Vertex, Vertex):::ENTER
this.numberOfVertex == arg0.to.numberOfVertex
this.numberOfVertex == arg1.from.numberOfVertex
this.from == this.to
this.from == arg0.to.from
this.from == arg1.from.from
arg0.to.numberOfVertex == arg1.from.numberOfVertex
arg0.to.from == arg0.to.to
arg0.to.from == arg1.from.from
arg1.from.from == arg1.from.to
this.from == null
this.visited == false
arg0 != null
arg0.numberOfVertex >= 1
arg0.from.numberOfVertex >= 1
arg0.from.visited == false
arg0.to.from == null
arg0.to.visited == false
arg0.visited == false
arg1 != null
arg1.numberOfVertex >= 1
arg1.from.from == null
arg1.from.visited == false
arg1.to.visited == false
arg1.visited == false
this.numberOfVertex != arg0.numberOfVertex
this.numberOfVertex != arg1.numberOfVertex
arg0.numberOfVertex != arg0.from.numberOfVertex
arg0.numberOfVertex < arg0.to.numberOfVertex
arg0.numberOfVertex != arg1.from.numberOfVertex
arg0.to.numberOfVertex != arg1.numberOfVertex
arg1.numberOfVertex < arg1.from.numberOfVertex
arg1.numberOfVertex != arg1.to.numberOfVertex
===========================================================================
Vertex.setPointers(Vertex, Vertex):::EXIT
this.numberOfVertex == arg0.to.numberOfVertex
this.numberOfVertex == arg1.from.numberOfVertex
this.numberOfVertex == orig(this.numberOfVertex)
this.from == arg0.to.from
this.from == arg1.from.from
this.from == orig(arg0)
this.from.numberOfVertex == arg0.numberOfVertex
this.from.from == arg0.from
this.from.from.numberOfVertex == arg0.from.numberOfVertex
this.from.from.from == arg0.from.from
this.from.from.to == arg0.from.to
this.from.from.visited == this.from.to.visited
this.from.from.visited == this.to.from.visited
this.from.from.visited == this.visited
this.from.to == arg0.to
this.from.to.numberOfVertex == arg0.to.numberOfVertex
this.from.to.from == arg0.to.from
this.from.to.to == arg0.to.to
this.from.visited == this.visited
this.to == arg0.to.to
this.to == arg1.from.to
this.to == orig(arg1)
this.to.numberOfVertex == arg1.numberOfVertex
this.to.from == arg1.from
this.to.from.numberOfVertex == arg1.from.numberOfVertex
this.to.from.from == arg1.from.from
this.to.from.to == arg1.from.to
this.to.from.visited == this.to.to.visited
this.to.to == arg1.to
this.to.to.numberOfVertex == arg1.to.numberOfVertex
this.to.to.from == arg1.to.from
this.to.to.to == arg1.to.to
this.to.visited == this.visited
this.visited == orig(this.visited)
arg0.numberOfVertex == orig(arg0.numberOfVertex)
arg0.from == orig(arg0.from)
arg0.from.numberOfVertex == orig(arg0.from.numberOfVertex)
arg0.from.visited == orig(arg0.from.visited)
arg0.to == orig(arg0.to)
arg0.to.numberOfVertex == arg1.from.numberOfVertex
arg0.to.numberOfVertex == orig(arg0.to.numberOfVertex)
arg0.to.from == arg1.from.from
arg0.to.to == arg1.from.to
arg0.to.visited == orig(arg0.to.visited)
arg0.visited == orig(arg0.visited)
arg1.numberOfVertex == orig(arg1.numberOfVertex)
arg1.from == orig(arg1.from)
arg1.from.numberOfVertex == orig(arg1.from.numberOfVertex)
arg1.from.visited == orig(arg1.from.visited)
arg1.to == orig(arg1.to)
arg1.to.numberOfVertex == orig(arg1.to.numberOfVertex)
arg1.to.visited == orig(arg1.to.visited)
arg1.visited == orig(arg1.visited)
this.from != null
this.from.from.visited == false
this.to != null
this.to.from.visited == false
this.visited == false
arg0.numberOfVertex >= 1
arg0.from.numberOfVertex >= 1
arg0.from.visited == false
arg0.to.from != null
arg0.to.to != null
arg0.to.visited == false
arg0.visited == false
arg1.numberOfVertex >= 1
arg1.from.from != null
arg1.from.to != null
arg1.from.visited == false
arg1.to.visited == false
arg1.visited == false
this.numberOfVertex != arg0.numberOfVertex
this.numberOfVertex != arg1.numberOfVertex
arg0.numberOfVertex != arg0.from.numberOfVertex
arg0.numberOfVertex < arg0.to.numberOfVertex
arg0.numberOfVertex != arg1.from.numberOfVertex
arg0.to.numberOfVertex != arg1.numberOfVertex
arg1.numberOfVertex < arg1.from.numberOfVertex
arg1.numberOfVertex != arg1.to.numberOfVertex
===========================================================================
Vertex.setTo(Vertex):::ENTER
this.from == this.from.to.from
this.from.from.visited == this.visited
this.from.visited == this.visited
this.to == this.to.from.to
this.to.to.visited == this.visited
this.to.visited == this.visited
arg0 == arg0.to.from
this.from != null
this.from.from != null
this.from.from.from != null
this.from.from.to != null
this.from.to != null
this.to != null
this.to.from != null
this.to.to != null
this.to.to.from != null
this.to.to.to != null
this.visited == false
arg0 != null
arg0.numberOfVertex >= 1
arg0.from != null
arg0.from.numberOfVertex >= 1
arg0.from.from != null
arg0.from.to != null
arg0.from.visited == false
arg0.to != null
arg0.to.numberOfVertex >= 1
arg0.to.to != null
arg0.to.visited == false
arg0.visited == false
this.numberOfVertex != this.from.from.numberOfVertex
this.numberOfVertex != arg0.numberOfVertex
this.numberOfVertex != arg0.from.numberOfVertex
this.from.numberOfVertex != this.to.numberOfVertex
this.from.numberOfVertex != arg0.from.numberOfVertex
this.from.from.numberOfVertex != this.from.to.numberOfVertex
this.from.to.numberOfVertex != arg0.numberOfVertex
this.to.numberOfVertex != arg0.numberOfVertex
this.to.numberOfVertex != arg0.to.numberOfVertex
this.to.from.numberOfVertex != arg0.numberOfVertex
arg0.numberOfVertex != arg0.from.numberOfVertex
arg0.numberOfVertex != arg0.to.numberOfVertex
arg0.from.numberOfVertex != arg0.to.numberOfVertex
===========================================================================
Vertex.setTo(Vertex):::EXIT
this.numberOfVertex == orig(this.numberOfVertex)
this.from == this.from.to.from
this.from == orig(this.from)
this.from == orig(this.from.to.from)
this.from.numberOfVertex == orig(this.from.numberOfVertex)
this.from.from == orig(this.from.from)
this.from.from.numberOfVertex == orig(this.from.from.numberOfVertex)
this.from.from.from == orig(this.from.from.from)
this.from.from.to == orig(this.from.from.to)
this.from.from.visited == this.visited
this.from.to == orig(this.from.to)
this.from.to.numberOfVertex == orig(this.from.to.numberOfVertex)
this.from.visited == this.visited
this.to == this.to.to.from
this.to == arg0.to.from
this.to == orig(arg0)
this.to == orig(arg0.to.from)
this.to.numberOfVertex == arg0.numberOfVertex
this.to.from == arg0.from
this.to.from.numberOfVertex == arg0.from.numberOfVertex
this.to.from.from == arg0.from.from
this.to.from.to == arg0.from.to
this.to.to == arg0.to
this.to.to.numberOfVertex == arg0.to.numberOfVertex
this.to.to.to == arg0.to.to
this.to.to.visited == this.visited
this.to.visited == this.visited
this.visited == orig(this.from.from.visited)
this.visited == orig(this.from.to.visited)
this.visited == orig(this.from.visited)
this.visited == orig(this.to.from.visited)
this.visited == orig(this.to.to.visited)
this.visited == orig(this.to.visited)
this.visited == orig(this.visited)
arg0.numberOfVertex == orig(arg0.numberOfVertex)
arg0.from == orig(arg0.from)
arg0.from.numberOfVertex == orig(arg0.from.numberOfVertex)
arg0.from.from == orig(arg0.from.from)
arg0.from.to == orig(arg0.from.to)
arg0.from.visited == orig(arg0.from.visited)
arg0.to == orig(arg0.to)
arg0.to.numberOfVertex == orig(arg0.to.numberOfVertex)
arg0.to.visited == orig(arg0.to.visited)
arg0.visited == orig(arg0.visited)
this.from != null
this.from.from != null
this.from.from.from != null
this.from.from.to != null
this.from.to != null
this.to != null
this.visited == false
arg0.numberOfVertex >= 1
arg0.from != null
arg0.from.numberOfVertex >= 1
arg0.from.from != null
arg0.from.to != null
arg0.from.visited == false
arg0.to != null
arg0.to.numberOfVertex >= 1
arg0.to.to != null
arg0.to.visited == false
arg0.visited == false
this.numberOfVertex != this.from.from.numberOfVertex
this.numberOfVertex != arg0.numberOfVertex
this.numberOfVertex != arg0.from.numberOfVertex
this.numberOfVertex != orig(this.to.numberOfVertex)
this.from.numberOfVertex != arg0.from.numberOfVertex
this.from.numberOfVertex != orig(this.to.numberOfVertex)
this.from.from.numberOfVertex != this.from.to.numberOfVertex
this.from.to.numberOfVertex != arg0.numberOfVertex
arg0.numberOfVertex != arg0.from.numberOfVertex
arg0.numberOfVertex != arg0.to.numberOfVertex
arg0.numberOfVertex != orig(this.to.numberOfVertex)
arg0.numberOfVertex != orig(this.to.from.numberOfVertex)
arg0.from.numberOfVertex != arg0.to.numberOfVertex
arg0.to.numberOfVertex != orig(this.to.numberOfVertex)
===========================================================================
Vertex.visit():::ENTER
this == this.from.to
this.numberOfVertex == this.from.to.numberOfVertex
this.numberOfVertex == this.to.from.numberOfVertex
this.from == this.from.from.to
this.from == this.from.to.from
this.from == this.to.from.from
this.from.to == this.to.from
this.from.to.to == this.to
this.to == this.to.from.to
this.to == this.to.to.from
this.from != null
this.from.from != null
this.from.from.from != null
this.from.to != null
this.to != null
this.to.to != null
this.to.to.to != null
this.visited == false
===========================================================================
Vertex.visit():::EXIT
this.numberOfVertex == this.from.to.numberOfVertex
this.numberOfVertex == this.to.from.numberOfVertex
this.numberOfVertex == orig(this.numberOfVertex)
this.numberOfVertex == orig(this.from.to.numberOfVertex)
this.numberOfVertex == orig(this.to.from.numberOfVertex)
this.from == this.from.from.to
this.from == this.from.to.from
this.from == this.to.from.from
this.from == orig(this.from)
this.from == orig(this.from.from.to)
this.from == orig(this.from.to.from)
this.from == orig(this.to.from.from)
this.from.numberOfVertex == orig(this.from.numberOfVertex)
this.from.from == orig(this.from.from)
this.from.from.numberOfVertex == orig(this.from.from.numberOfVertex)
this.from.from.from == orig(this.from.from.from)
this.from.to == this.to.from
this.from.to == orig(this)
this.from.to == orig(this.from.to)
this.from.to == orig(this.to.from)
this.from.to.to == this.to
this.from.visited == orig(this.from.visited)
this.to == this.to.from.to
this.to == this.to.to.from
this.to == orig(this.from.to.to)
this.to == orig(this.to)
this.to == orig(this.to.from.to)
this.to == orig(this.to.to.from)
this.to.numberOfVertex == orig(this.to.numberOfVertex)
this.to.to == orig(this.to.to)
this.to.to.numberOfVertex == orig(this.to.to.numberOfVertex)
this.to.to.to == orig(this.to.to.to)
this.to.visited == orig(this.to.visited)
this.from != null
this.from.from != null
this.from.from.from != null
this.from.to != null
this.to != null
this.to.to != null
this.to.to.to != null
this.visited == true
===========================================================================
Vertex.wasVisited():::ENTER
this == this.from.to
this.numberOfVertex == this.from.to.numberOfVertex
this.numberOfVertex == this.to.from.numberOfVertex
this.from == this.from.from.to
this.from == this.from.to.from
this.from == this.to.from.from
this.from.to == this.to.from
this.from.to.to == this.to
this.to == this.to.from.to
this.to == this.to.to.from
this.from != null
this.from.from != null
this.from.from.from != null
this.from.to != null
this.to != null
this.to.to != null
this.to.to.to != null
===========================================================================
Vertex.wasVisited():::EXIT
this.numberOfVertex == this.from.to.numberOfVertex
this.numberOfVertex == this.to.from.numberOfVertex
this.numberOfVertex == orig(this.numberOfVertex)
this.numberOfVertex == orig(this.from.to.numberOfVertex)
this.numberOfVertex == orig(this.to.from.numberOfVertex)
this.from == this.from.from.to
this.from == this.from.to.from
this.from == this.to.from.from
this.from == orig(this.from)
this.from == orig(this.from.from.to)
this.from == orig(this.from.to.from)
this.from == orig(this.to.from.from)
this.from.numberOfVertex == orig(this.from.numberOfVertex)
this.from.from == orig(this.from.from)
this.from.from.numberOfVertex == orig(this.from.from.numberOfVertex)
this.from.from.from == orig(this.from.from.from)
this.from.from.visited == orig(this.from.from.visited)
this.from.to == this.to.from
this.from.to == orig(this)
this.from.to == orig(this.from.to)
this.from.to == orig(this.to.from)
this.from.to.to == this.to
this.from.to.visited == return
this.from.visited == orig(this.from.visited)
this.to == this.to.from.to
this.to == this.to.to.from
this.to == orig(this.from.to.to)
this.to == orig(this.to)
this.to == orig(this.to.from.to)
this.to == orig(this.to.to.from)
this.to.numberOfVertex == orig(this.to.numberOfVertex)
this.to.from.visited == return
this.to.to == orig(this.to.to)
this.to.to.numberOfVertex == orig(this.to.to.numberOfVertex)
this.to.to.to == orig(this.to.to.to)
this.to.to.visited == orig(this.to.to.visited)
this.to.visited == orig(this.to.visited)
this.visited == return
return == orig(this.from.to.visited)
return == orig(this.to.from.visited)
return == orig(this.visited)
(return == true)  ==>  (this.from.from.visited == return)
(return == true)  ==>  (this.from.from.visited == true)
(return == true)  ==>  (this.from.visited == return)
(return == true)  ==>  (this.from.visited == true)
(return == true)  ==>  (this.to.to.visited == return)
(return == true)  ==>  (this.to.to.visited == true)
(return == true)  ==>  (this.to.visited == return)
(return == true)  ==>  (this.to.visited == true)
this.from != null
this.from.from != null
this.from.from.from != null
this.from.to != null
this.to != null
this.to.to != null
this.to.to.to != null
===========================================================================
Vertex.wasVisited():::EXIT;condition="return == true"
this.from.from.visited == return
this.from.visited == return
this.to.to.visited == return
this.to.visited == return
return == orig(this.from.from.visited)
return == orig(this.from.visited)
return == orig(this.to.to.visited)
return == orig(this.to.visited)
return == true
===========================================================================
Vertex.wasVisited():::EXIT;condition="not(return == true)"
return == false
===========================================================================
Vminus:::OBJECT
this.circleNumber != null
this.name >= 0
this.sign == false
===========================================================================
Vminus.Vminus(java.lang.String):::ENTER
arg0 != null
===========================================================================
Vminus.Vminus(java.lang.String):::EXIT
this.circleNumber == orig(arg0)
arg0.toString == orig(arg0.toString)
===========================================================================
Vminus.equals(BasisElement):::ENTER
this.name one of { 1, 2, 3 }
arg0 != null
===========================================================================
Vminus.equals(BasisElement):::EXIT
this.circleNumber == orig(this.circleNumber)
this.circleNumber.toString == orig(this.circleNumber.toString)
this.name == orig(this.name)
this.sign == orig(this.sign)
(return == true)  ==>  (orig(arg0.getClass().getName()) == Vminus.class)
this.name one of { 1, 2, 3 }
===========================================================================
Vminus.equals(BasisElement):::EXIT;condition="return == true"
return == true
orig(arg0.getClass().getName()) == Vminus.class
===========================================================================
Vminus.equals(BasisElement):::EXIT;condition="not(return == true)"
return == false
===========================================================================
Vminus.findName():::ENTER
this.name == 0
===========================================================================
Vminus.findName():::EXIT16
this.circleNumber has only one value
this.circleNumber.toString == ""
return == 0
===========================================================================
Vminus.findName():::EXIT25
return one of { 1, 2, 3 }
===========================================================================
Vminus.findName():::EXIT
this.circleNumber == orig(this.circleNumber)
this.circleNumber.toString == orig(this.circleNumber.toString)
this.name == orig(this.name)
this.sign == orig(this.sign)
(return == 0)  ==>  (this.circleNumber has only one value)
(return == 0)  ==>  (this.circleNumber.toString == "")
this.name == 0
return >= 0
===========================================================================
Vminus.getName():::ENTER
this.name one of { 1, 2, 3 }
===========================================================================
Vminus.getName():::EXIT
this.circleNumber == orig(this.circleNumber)
this.circleNumber.toString == orig(this.circleNumber.toString)
this.name == return
this.sign == orig(this.sign)
return == orig(this.name)
return one of { 1, 2, 3 }
===========================================================================
Vminus.getSign():::ENTER
this.name one of { 1, 2, 3 }
===========================================================================
Vminus.getSign():::EXIT
this.circleNumber == orig(this.circleNumber)
this.circleNumber.toString == orig(this.circleNumber.toString)
this.name == orig(this.name)
this.sign == return
return == orig(this.sign)
this.name one of { 1, 2, 3 }
return == false
===========================================================================
Vminus.getSign():::EXIT;condition="not(return == true)"
===========================================================================
Vminus.toString():::ENTER
this.name one of { 1, 2, 3 }
===========================================================================
Vminus.toString():::EXIT
this.circleNumber == orig(this.circleNumber)
this.circleNumber.toString == orig(this.circleNumber.toString)
this.name == orig(this.name)
this.sign == orig(this.sign)
this.name one of { 1, 2, 3 }
return != null
return.toString one of { "V1-", "V2-", "V3-" }
===========================================================================
Vplus:::OBJECT
this.circleNumber != null
this.name >= 0
===========================================================================
Vplus.Vplus(java.lang.String):::ENTER
arg0 != null
===========================================================================
Vplus.Vplus(java.lang.String):::EXIT
this.circleNumber == orig(arg0)
arg0.toString == orig(arg0.toString)
this.sign == true
===========================================================================
Vplus.equals(BasisElement):::ENTER
this.name one of { 1, 2, 3 }
this.sign == true
arg0 != null
===========================================================================
Vplus.equals(BasisElement):::EXIT
this.circleNumber == orig(this.circleNumber)
this.circleNumber.toString == orig(this.circleNumber.toString)
this.name == orig(this.name)
this.sign == orig(this.sign)
(return == true)  ==>  (orig(arg0.getClass().getName()) == Vplus.class)
this.name one of { 1, 2, 3 }
this.sign == true
===========================================================================
Vplus.equals(BasisElement):::EXIT;condition="return == true"
return == true
orig(arg0.getClass().getName()) == Vplus.class
===========================================================================
Vplus.equals(BasisElement):::EXIT;condition="not(return == true)"
return == false
===========================================================================
Vplus.findName():::ENTER
this.name == 0
this.sign == false
===========================================================================
Vplus.findName():::EXIT15
this.circleNumber has only one value
this.circleNumber.toString == ""
return == 0
===========================================================================
Vplus.findName():::EXIT24
return one of { 1, 2, 3 }
===========================================================================
Vplus.findName():::EXIT
this.circleNumber == orig(this.circleNumber)
this.circleNumber.toString == orig(this.circleNumber.toString)
this.name == orig(this.name)
this.sign == orig(this.sign)
(return == 0)  ==>  (this.circleNumber has only one value)
(return == 0)  ==>  (this.circleNumber.toString == "")
this.name == 0
this.sign == false
return >= 0
===========================================================================
Vplus.getName():::ENTER
this.name one of { 1, 2, 3 }
this.sign == true
===========================================================================
Vplus.getName():::EXIT
this.circleNumber == orig(this.circleNumber)
this.circleNumber.toString == orig(this.circleNumber.toString)
this.name == return
this.sign == orig(this.sign)
return == orig(this.name)
this.sign == true
return one of { 1, 2, 3 }
===========================================================================
Vplus.getSign():::ENTER
this.name one of { 1, 2, 3 }
this.sign == true
===========================================================================
Vplus.getSign():::EXIT
this.circleNumber == orig(this.circleNumber)
this.circleNumber.toString == orig(this.circleNumber.toString)
this.name == orig(this.name)
this.sign == return
return == orig(this.sign)
this.name one of { 1, 2, 3 }
return == true
===========================================================================
Vplus.getSign():::EXIT;condition="return == true"
===========================================================================
Vplus.toString():::ENTER
this.name one of { 1, 2, 3 }
this.sign == true
===========================================================================
Vplus.toString():::EXIT
this.circleNumber == orig(this.circleNumber)
this.circleNumber.toString == orig(this.circleNumber.toString)
this.name == orig(this.name)
this.sign == orig(this.sign)
this.name one of { 1, 2, 3 }
this.sign == true
return != null
return.toString one of { "V1+", "V2+", "V3+" }
===========================================================================
org.apache.commons.lang3.CharSequenceUtils.indexOf(java.lang.CharSequence, java.lang.CharSequence, int):::ENTER
cs != null
cs.getClass().getName() == java.lang.String.class
searchChar != null
searchChar.getClass().getName() == java.lang.String.class
start >= 0
===========================================================================
org.apache.commons.lang3.CharSequenceUtils.indexOf(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
return <= 2
return >= -1
===========================================================================
org.apache.commons.lang3.StringUtils:::CLASS
org.apache.commons.lang3.StringUtils.EMPTY has only one value
org.apache.commons.lang3.StringUtils.EMPTY != null
org.apache.commons.lang3.StringUtils.EMPTY.toString == ""
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK has only one value
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK != null
===========================================================================
org.apache.commons.lang3.StringUtils.countMatches(java.lang.CharSequence, java.lang.CharSequence):::ENTER
str != null
str.getClass().getName() == java.lang.String.class
sub != null
sub.getClass().getName() == java.lang.String.class
===========================================================================
org.apache.commons.lang3.StringUtils.countMatches(java.lang.CharSequence, java.lang.CharSequence):::EXIT5151
===========================================================================
org.apache.commons.lang3.StringUtils.countMatches(java.lang.CharSequence, java.lang.CharSequence):::EXIT
org.apache.commons.lang3.StringUtils.EMPTY == orig(org.apache.commons.lang3.StringUtils.EMPTY)
org.apache.commons.lang3.StringUtils.EMPTY.toString == orig(org.apache.commons.lang3.StringUtils.EMPTY.toString)
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK == orig(org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK)
return >= 0
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::ENTER
cs != null
cs.getClass().getName() == java.lang.String.class
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT
org.apache.commons.lang3.StringUtils.EMPTY == orig(org.apache.commons.lang3.StringUtils.EMPTY)
org.apache.commons.lang3.StringUtils.EMPTY.toString == orig(org.apache.commons.lang3.StringUtils.EMPTY.toString)
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK == orig(org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK)
return == false
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT;condition="not(return == true)"
Exiting Daikon.
