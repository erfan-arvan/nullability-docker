Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

Warning: No non-obvious non-suppressed exclusive invariants found in ru.spbau.talanov.sd.drunkard.Beggar.follow(java.util.List, ru.spbau.talanov.sd.drunkard.Board):::EXIT
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar$1:::OBJECT
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y == ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.y
ru.spbau.talanov.sd.drunkard.Beggar.this has only one value
ru.spbau.talanov.sd.drunkard.Beggar.this.turnsTillRunsOutOfMoney == 0
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation has only one value
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation != null
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x == 0
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y == 4
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation has only one value
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation != null
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x == -1
ru.spbau.talanov.sd.drunkard.Beggar.this.hasABottle == true
ru.spbau.talanov.sd.drunkard.Beggar.this.isAtRecyclePoint == false
ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled == false
ru.spbau.talanov.sd.drunkard.Beggar.this.position != null
ru.spbau.talanov.sd.drunkard.Beggar.this.position.x >= 0
ru.spbau.talanov.sd.drunkard.Beggar.this.position.y >= 0
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x <= ru.spbau.talanov.sd.drunkard.Beggar.this.position.x
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x <= ru.spbau.talanov.sd.drunkard.Beggar.this.position.y
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x < ru.spbau.talanov.sd.drunkard.Beggar.this.position.x
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x < ru.spbau.talanov.sd.drunkard.Beggar.this.position.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar$1.(ru.spbau.talanov.sd.drunkard.Beggar):::ENTER
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y == ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.y
ru.spbau.talanov.sd.drunkard.Beggar.this has only one value
ru.spbau.talanov.sd.drunkard.Beggar.this != null
ru.spbau.talanov.sd.drunkard.Beggar.this.turnsTillRunsOutOfMoney == 0
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation has only one value
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation != null
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x == 0
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y == 4
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation has only one value
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation != null
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x == -1
ru.spbau.talanov.sd.drunkard.Beggar.this.hasABottle == true
ru.spbau.talanov.sd.drunkard.Beggar.this.isAtRecyclePoint == false
ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled == false
ru.spbau.talanov.sd.drunkard.Beggar.this.position != null
ru.spbau.talanov.sd.drunkard.Beggar.this.position.x >= 0
ru.spbau.talanov.sd.drunkard.Beggar.this.position.y >= 0
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x <= ru.spbau.talanov.sd.drunkard.Beggar.this.position.x
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x <= ru.spbau.talanov.sd.drunkard.Beggar.this.position.y
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x < ru.spbau.talanov.sd.drunkard.Beggar.this.position.x
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x < ru.spbau.talanov.sd.drunkard.Beggar.this.position.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar$1.(ru.spbau.talanov.sd.drunkard.Beggar):::EXIT
ru.spbau.talanov.sd.drunkard.Beggar.this == orig(ru.spbau.talanov.sd.drunkard.Beggar.this)
ru.spbau.talanov.sd.drunkard.Beggar.this.turnsTillRunsOutOfMoney == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.turnsTillRunsOutOfMoney)
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation)
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x)
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y)
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.y)
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation)
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x)
ru.spbau.talanov.sd.drunkard.Beggar.this.hasABottle == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.hasABottle)
ru.spbau.talanov.sd.drunkard.Beggar.this.isAtRecyclePoint == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.isAtRecyclePoint)
ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled)
ru.spbau.talanov.sd.drunkard.Beggar.this.position == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.position)
ru.spbau.talanov.sd.drunkard.Beggar.this.position.x == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.position.x)
ru.spbau.talanov.sd.drunkard.Beggar.this.position.y == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.position.y)
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar$1.accepts(ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0 != null
arg0.x >= -1
arg0.y >= -1
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x <= arg0.x
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x <= arg0.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar$1.accepts(ru.spbau.talanov.sd.drunkard.Position):::EXIT
ru.spbau.talanov.sd.drunkard.Beggar.this == orig(ru.spbau.talanov.sd.drunkard.Beggar.this)
ru.spbau.talanov.sd.drunkard.Beggar.this.turnsTillRunsOutOfMoney == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.turnsTillRunsOutOfMoney)
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation)
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x)
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y)
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.y)
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation)
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x)
ru.spbau.talanov.sd.drunkard.Beggar.this.hasABottle == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.hasABottle)
ru.spbau.talanov.sd.drunkard.Beggar.this.isAtRecyclePoint == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.isAtRecyclePoint)
ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled)
ru.spbau.talanov.sd.drunkard.Beggar.this.position == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.position)
ru.spbau.talanov.sd.drunkard.Beggar.this.position.x == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.position.x)
ru.spbau.talanov.sd.drunkard.Beggar.this.position.y == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.position.y)
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
(return == false)  ==>  (arg0.y >= -1)
(return == false)  ==>  (ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y != ru.spbau.talanov.sd.drunkard.Beggar.this.position.y)
(return == true)  ==>  (arg0.x < arg0.y)
(return == true)  ==>  (arg0.x == -1)
(return == true)  ==>  (arg0.y == 4)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Beggar.this.position.x > arg0.x)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Beggar.this.position.y > arg0.x)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x < arg0.y)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x == arg0.x)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x < arg0.y)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x > arg0.x)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y == arg0.y)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y > arg0.x)
arg0.x >= -1
arg0.y >= -1
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x <= arg0.x
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x <= arg0.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar$1.accepts(ru.spbau.talanov.sd.drunkard.Position):::EXIT;condition="return == true"
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y == arg0.y
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x == arg0.x
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.y == arg0.y
arg0.x == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x)
arg0.y == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y)
arg0.y == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.y)
arg0.x == -1
arg0.y == 4
return == true
ru.spbau.talanov.sd.drunkard.Beggar.this.position.x > arg0.x
ru.spbau.talanov.sd.drunkard.Beggar.this.position.y > arg0.x
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar$1.accepts(ru.spbau.talanov.sd.drunkard.Position):::EXIT;condition="not(return == true)"
return == false
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y != ru.spbau.talanov.sd.drunkard.Beggar.this.position.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar$2:::OBJECT
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y == ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.y
this.val$board has only one value
this.val$board != null
this.val$board.topology has only one value
this.val$board.topology != null
this.val$board.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
this.val$board.size == 15
this.val$board.objects has only one value
this.val$board.objects != null
this.val$board.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
ru.spbau.talanov.sd.drunkard.Beggar.this has only one value
ru.spbau.talanov.sd.drunkard.Beggar.this.turnsTillRunsOutOfMoney == 0
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation has only one value
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation != null
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x == 0
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y == 4
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation has only one value
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation != null
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x == -1
ru.spbau.talanov.sd.drunkard.Beggar.this.hasABottle == false
ru.spbau.talanov.sd.drunkard.Beggar.this.isAtRecyclePoint == false
ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled == false
ru.spbau.talanov.sd.drunkard.Beggar.this.position != null
ru.spbau.talanov.sd.drunkard.Beggar.this.position.x >= 0
this.val$board.topology.getClass().getName() != this.val$board.objects.getClass().getName()
this.val$board.size > ru.spbau.talanov.sd.drunkard.Beggar.this.position.x
this.val$board.size > ru.spbau.talanov.sd.drunkard.Beggar.this.position.y
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x <= ru.spbau.talanov.sd.drunkard.Beggar.this.position.x
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x < ru.spbau.talanov.sd.drunkard.Beggar.this.position.y
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x < ru.spbau.talanov.sd.drunkard.Beggar.this.position.x
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x < ru.spbau.talanov.sd.drunkard.Beggar.this.position.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar$2.(ru.spbau.talanov.sd.drunkard.Beggar, ru.spbau.talanov.sd.drunkard.Board):::ENTER
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y == ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.y
ru.spbau.talanov.sd.drunkard.Beggar.this has only one value
ru.spbau.talanov.sd.drunkard.Beggar.this != null
ru.spbau.talanov.sd.drunkard.Beggar.this.turnsTillRunsOutOfMoney == 0
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation has only one value
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation != null
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x == 0
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y == 4
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation has only one value
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation != null
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x == -1
ru.spbau.talanov.sd.drunkard.Beggar.this.hasABottle == false
ru.spbau.talanov.sd.drunkard.Beggar.this.isAtRecyclePoint == false
ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled == false
ru.spbau.talanov.sd.drunkard.Beggar.this.position != null
ru.spbau.talanov.sd.drunkard.Beggar.this.position.x >= 0
arg1 has only one value
arg1 != null
arg1.topology has only one value
arg1.topology != null
arg1.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg1.size == 15
arg1.objects has only one value
arg1.objects != null
arg1.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x <= ru.spbau.talanov.sd.drunkard.Beggar.this.position.x
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x < ru.spbau.talanov.sd.drunkard.Beggar.this.position.y
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x < ru.spbau.talanov.sd.drunkard.Beggar.this.position.x
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x < ru.spbau.talanov.sd.drunkard.Beggar.this.position.y
ru.spbau.talanov.sd.drunkard.Beggar.this.position.x < arg1.size
ru.spbau.talanov.sd.drunkard.Beggar.this.position.y < arg1.size
arg1.topology.getClass().getName() != arg1.objects.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar$2.(ru.spbau.talanov.sd.drunkard.Beggar, ru.spbau.talanov.sd.drunkard.Board):::EXIT
this.val$board == orig(arg1)
this.val$board.topology == arg1.topology
this.val$board.topology.getClass().getName() == arg1.topology.getClass().getName()
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.val$board.size == arg1.size
this.val$board.objects == arg1.objects
this.val$board.objects.getClass().getName() == arg1.objects.getClass().getName()
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
ru.spbau.talanov.sd.drunkard.Beggar.this == orig(ru.spbau.talanov.sd.drunkard.Beggar.this)
ru.spbau.talanov.sd.drunkard.Beggar.this.turnsTillRunsOutOfMoney == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.turnsTillRunsOutOfMoney)
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation)
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x)
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y)
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.y)
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation)
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x)
ru.spbau.talanov.sd.drunkard.Beggar.this.hasABottle == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.hasABottle)
ru.spbau.talanov.sd.drunkard.Beggar.this.isAtRecyclePoint == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.isAtRecyclePoint)
ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled)
ru.spbau.talanov.sd.drunkard.Beggar.this.position == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.position)
ru.spbau.talanov.sd.drunkard.Beggar.this.position.x == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.position.x)
ru.spbau.talanov.sd.drunkard.Beggar.this.position.y == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.position.y)
arg1.topology == orig(arg1.topology)
arg1.topology.getClass().getName() == orig(arg1.topology.getClass().getName())
arg1.size == orig(arg1.size)
arg1.objects == orig(arg1.objects)
arg1.objects.getClass().getName() == orig(arg1.objects.getClass().getName())
arg1.topology has only one value
arg1.topology != null
arg1.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
arg1.size == 15
arg1.objects has only one value
arg1.objects != null
arg1.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Beggar.this.position.x < arg1.size
ru.spbau.talanov.sd.drunkard.Beggar.this.position.y < arg1.size
arg1.topology.getClass().getName() != arg1.objects.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar$2.accepts(ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0 != null
arg0.x >= -1
arg0.y >= -1
this.val$board.size >= arg0.x
this.val$board.size >= arg0.y
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x <= arg0.x
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x <= arg0.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar$2.accepts(ru.spbau.talanov.sd.drunkard.Position):::EXIT
this.val$board == orig(this.val$board)
this.val$board.topology == orig(this.val$board.topology)
this.val$board.topology.getClass().getName() == orig(this.val$board.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.val$board.size == orig(this.val$board.size)
this.val$board.objects == orig(this.val$board.objects)
this.val$board.objects.getClass().getName() == orig(this.val$board.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
ru.spbau.talanov.sd.drunkard.Beggar.this == orig(ru.spbau.talanov.sd.drunkard.Beggar.this)
ru.spbau.talanov.sd.drunkard.Beggar.this.turnsTillRunsOutOfMoney == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.turnsTillRunsOutOfMoney)
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation)
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x)
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y)
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.y)
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation)
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x)
ru.spbau.talanov.sd.drunkard.Beggar.this.hasABottle == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.hasABottle)
ru.spbau.talanov.sd.drunkard.Beggar.this.isAtRecyclePoint == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.isAtRecyclePoint)
ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled)
ru.spbau.talanov.sd.drunkard.Beggar.this.position == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.position)
ru.spbau.talanov.sd.drunkard.Beggar.this.position.x == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.position.x)
ru.spbau.talanov.sd.drunkard.Beggar.this.position.y == orig(ru.spbau.talanov.sd.drunkard.Beggar.this.position.y)
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
(return == false)  ==>  (arg0.x >= -1)
(return == false)  ==>  (arg0.y >= -1)
(return == true)  ==>  (arg0.x != arg0.y)
(return == true)  ==>  (arg0.y >= 0)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x < arg0.x)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x < arg0.y)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x < arg0.x)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x <= arg0.y)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y != arg0.x)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y != arg0.y)
(return == true)  ==>  (this.val$board.size > arg0.x)
(return == true)  ==>  (this.val$board.size > arg0.y)
arg0.x >= -1
arg0.y >= -1
this.val$board.size >= arg0.x
this.val$board.size >= arg0.y
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x <= arg0.x
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x <= arg0.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar$2.accepts(ru.spbau.talanov.sd.drunkard.Position):::EXIT;condition="return == true"
arg0.y >= 0
return == true
this.val$board.size > arg0.x
this.val$board.size > arg0.y
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x < arg0.x
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.x <= arg0.y
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y != arg0.x
ru.spbau.talanov.sd.drunkard.Beggar.this.spawnLocation.y != arg0.y
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x < arg0.x
ru.spbau.talanov.sd.drunkard.Beggar.this.recyclingPointLocation.x < arg0.y
arg0.x != arg0.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar$2.accepts(ru.spbau.talanov.sd.drunkard.Position):::EXIT;condition="not(return == true)"
return == false
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar:::CLASS
ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled == false
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar:::OBJECT
this.spawnLocation.y == this.recyclingPointLocation.y
this has only one value
this.turnsTillRunsOutOfMoney >= 0
this.spawnLocation has only one value
this.spawnLocation != null
this.spawnLocation.x == 0
this.spawnLocation.y == 4
this.recyclingPointLocation has only one value
this.recyclingPointLocation != null
this.recyclingPointLocation.x == -1
this.position != null
this.position.y >= 0
this.spawnLocation.x <= this.position.y
this.recyclingPointLocation.x <= this.position.x
this.recyclingPointLocation.x < this.position.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.Beggar(ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0.y == arg1.y
arg0 has only one value
arg0.x == 0
arg0.y == 4
arg1 has only one value
arg1.x == -1
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.Beggar(ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Position):::EXIT
this.spawnLocation == orig(arg0)
this.spawnLocation.x == arg0.x
this.spawnLocation.y == arg0.y
this.recyclingPointLocation == this.position
this.recyclingPointLocation == orig(arg1)
this.recyclingPointLocation.x == arg1.x
this.recyclingPointLocation.y == arg0.y
this.position.x == arg1.x
this.position.y == arg0.y
arg0.x == orig(arg0.x)
arg0.y == arg1.y
arg0.y == orig(arg0.y)
arg0.y == orig(arg1.y)
arg1.x == orig(arg1.x)
this.turnsTillRunsOutOfMoney == 1
this.hasABottle == false
this.isAtRecyclePoint == true
arg0.x == 0
arg0.y == 4
arg1.x == -1
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.exitRecyclePoint(ru.spbau.talanov.sd.drunkard.Board):::ENTER
this.spawnLocation.y == this.position.y
this.turnsTillRunsOutOfMoney == 0
this.hasABottle == false
this.isAtRecyclePoint == true
this.position.x one of { -1, 0 }
arg0 has only one value
arg0.topology has only one value
arg0.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg0.size == 15
arg0.objects has only one value
arg0.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
this.spawnLocation.x >= this.position.x
this.spawnLocation.y > this.position.x
this.position.x < arg0.size
arg0.topology.getClass().getName() != arg0.objects.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.exitRecyclePoint(ru.spbau.talanov.sd.drunkard.Board):::EXIT93
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.exitRecyclePoint(ru.spbau.talanov.sd.drunkard.Board):::EXIT
this.turnsTillRunsOutOfMoney == orig(this.turnsTillRunsOutOfMoney)
this.spawnLocation == this.position
this.spawnLocation == orig(this.spawnLocation)
this.spawnLocation.x == this.position.x
this.spawnLocation.x == orig(this.spawnLocation.x)
this.spawnLocation.y == this.position.y
this.spawnLocation.y == orig(this.spawnLocation.y)
this.spawnLocation.y == orig(this.recyclingPointLocation.y)
this.spawnLocation.y == orig(this.position.y)
this.recyclingPointLocation == orig(this.recyclingPointLocation)
this.recyclingPointLocation.x == orig(this.recyclingPointLocation.x)
this.hasABottle == orig(this.hasABottle)
ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled)
arg0.topology == orig(arg0.topology)
arg0.topology.getClass().getName() == orig(arg0.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
arg0.size == orig(arg0.size)
arg0.objects == orig(arg0.objects)
arg0.objects.getClass().getName() == orig(arg0.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
this.turnsTillRunsOutOfMoney == 0
this.hasABottle == false
this.isAtRecyclePoint == false
arg0.topology has only one value
arg0.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg0.size == 15
arg0.objects has only one value
arg0.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
this.spawnLocation.x >= orig(this.position.x)
this.spawnLocation.y > orig(this.position.x)
this.recyclingPointLocation.x <= orig(this.position.x)
arg0.topology.getClass().getName() != arg0.objects.getClass().getName()
arg0.size > orig(this.position.x)
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.follow(java.util.List, ru.spbau.talanov.sd.drunkard.Board):::ENTER
this.turnsTillRunsOutOfMoney == 0
this.isAtRecyclePoint == false
this.position.x >= 0
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == ru.spbau.talanov.sd.drunkard.Position.class
arg0.getClass().getName() == java.util.LinkedList.class
arg1 has only one value
arg1 != null
arg1.topology has only one value
arg1.topology != null
arg1.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg1.size == 15
arg1.objects has only one value
arg1.objects != null
arg1.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
size(arg0[]) >= 2
this.spawnLocation.x <= this.position.x
this.recyclingPointLocation.x < this.position.x
this.position.x < arg1.size
this.position.y < arg1.size
arg0.getClass().getName() != arg1.topology.getClass().getName()
arg0.getClass().getName() != arg1.objects.getClass().getName()
arg1.topology.getClass().getName() != arg1.objects.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.follow(java.util.List, ru.spbau.talanov.sd.drunkard.Board):::EXIT60
arg0[].getClass().getName() == [ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Position]
orig(size(arg0[])) == 2
this.spawnLocation.x < orig(this.position.y)
this.spawnLocation.y != this.position.x
this.spawnLocation.y != orig(this.position.x)
this.position.x != this.position.y
this.position.x >= orig(this.position.x)
this.position.x != orig(this.position.y)
this.position.y != orig(this.position.x)
orig(this.position.x) != orig(this.position.y)
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.follow(java.util.List, ru.spbau.talanov.sd.drunkard.Board):::EXIT64
this.turnsTillRunsOutOfMoney == orig(this.turnsTillRunsOutOfMoney)
this.hasABottle == orig(this.hasABottle)
this.isAtRecyclePoint == orig(this.isAtRecyclePoint)
this.turnsTillRunsOutOfMoney == 0
this.isAtRecyclePoint == false
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.follow(java.util.List, ru.spbau.talanov.sd.drunkard.Board):::EXIT
this.spawnLocation == orig(this.spawnLocation)
this.spawnLocation.x == orig(this.spawnLocation.x)
this.spawnLocation.y == orig(this.spawnLocation.y)
this.spawnLocation.y == orig(this.recyclingPointLocation.y)
this.recyclingPointLocation == orig(this.recyclingPointLocation)
this.recyclingPointLocation.x == orig(this.recyclingPointLocation.x)
ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled)
arg0[] == orig(arg0[])
arg1.topology == orig(arg1.topology)
arg1.topology.getClass().getName() == orig(arg1.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
arg1.size == orig(arg1.size)
arg1.objects == orig(arg1.objects)
arg1.objects.getClass().getName() == orig(arg1.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
(orig(size(arg0[])) == 2)  ==>  (arg0[].getClass().getName() == [ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Position])
(orig(size(arg0[])) == 2)  ==>  (orig(this.position.x) != orig(this.position.y))
(orig(size(arg0[])) == 2)  ==>  (this.position.x != orig(this.position.y))
(orig(size(arg0[])) == 2)  ==>  (this.position.x != this.position.y)
(orig(size(arg0[])) == 2)  ==>  (this.position.x >= orig(this.position.x))
(orig(size(arg0[])) == 2)  ==>  (this.position.y != orig(this.position.x))
(orig(size(arg0[])) == 2)  ==>  (this.spawnLocation.x < orig(this.position.y))
(orig(size(arg0[])) == 2)  ==>  (this.spawnLocation.y != orig(this.position.x))
(orig(size(arg0[])) == 2)  ==>  (this.spawnLocation.y != this.position.x)
(orig(size(arg0[])) == 2)  ==>  (this.turnsTillRunsOutOfMoney one of { 0, 30 })
(size(arg0[])-1 >= 2)  ==>  (this.hasABottle == orig(this.hasABottle))
(size(arg0[])-1 >= 2)  ==>  (this.isAtRecyclePoint == false)
(size(arg0[])-1 >= 2)  ==>  (this.isAtRecyclePoint == orig(this.isAtRecyclePoint))
(size(arg0[])-1 >= 2)  ==>  (this.turnsTillRunsOutOfMoney == 0)
(size(arg0[])-1 >= 2)  ==>  (this.turnsTillRunsOutOfMoney == orig(this.turnsTillRunsOutOfMoney))
this.turnsTillRunsOutOfMoney one of { 0, 30 }
this.position.x >= 0
arg0[] elements != null
arg0[].getClass().getName() elements == ru.spbau.talanov.sd.drunkard.Position.class
arg1.topology has only one value
arg1.topology != null
arg1.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg1.size == 15
arg1.objects has only one value
arg1.objects != null
arg1.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
this.turnsTillRunsOutOfMoney >= orig(this.turnsTillRunsOutOfMoney)
this.spawnLocation.x <= this.position.x
this.spawnLocation.x <= orig(this.position.x)
this.spawnLocation.x <= orig(this.position.y)
this.recyclingPointLocation.x < this.position.x
this.recyclingPointLocation.x < orig(this.position.x)
this.recyclingPointLocation.x < orig(this.position.y)
this.position.x < arg1.size
this.position.y < arg1.size
arg1.topology.getClass().getName() != arg1.objects.getClass().getName()
arg1.topology.getClass().getName() != orig(arg0.getClass().getName())
arg1.size > orig(this.position.x)
arg1.size > orig(this.position.y)
arg1.objects.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.getPosition():::ENTER
this.turnsTillRunsOutOfMoney == 0
this.isAtRecyclePoint == false
this.position.x >= 0
this.spawnLocation.x <= this.position.x
this.recyclingPointLocation.x < this.position.x
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.getPosition():::EXIT128
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.getPosition():::EXIT
this.turnsTillRunsOutOfMoney == orig(this.turnsTillRunsOutOfMoney)
this.spawnLocation == orig(this.spawnLocation)
this.spawnLocation.x == orig(this.spawnLocation.x)
this.spawnLocation.y == orig(this.spawnLocation.y)
this.spawnLocation.y == orig(this.recyclingPointLocation.y)
this.recyclingPointLocation == orig(this.recyclingPointLocation)
this.recyclingPointLocation.x == orig(this.recyclingPointLocation.x)
this.hasABottle == orig(this.hasABottle)
this.isAtRecyclePoint == orig(this.isAtRecyclePoint)
ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled)
this.position == return
this.position.x == return.x
this.position.y == return.y
return == orig(this.position)
return.x == orig(this.position.x)
return.y == orig(this.position.y)
this.turnsTillRunsOutOfMoney == 0
this.isAtRecyclePoint == false
return != null
return.x >= 0
return.y >= 0
this.spawnLocation.x <= return.x
this.spawnLocation.x <= return.y
this.recyclingPointLocation.x < return.x
this.recyclingPointLocation.x < return.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.isSpendingMoney():::ENTER
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.isSpendingMoney():::EXIT
this.turnsTillRunsOutOfMoney == orig(this.turnsTillRunsOutOfMoney)
this.spawnLocation == orig(this.spawnLocation)
this.spawnLocation.x == orig(this.spawnLocation.x)
this.spawnLocation.y == orig(this.spawnLocation.y)
this.spawnLocation.y == orig(this.recyclingPointLocation.y)
this.recyclingPointLocation == orig(this.recyclingPointLocation)
this.recyclingPointLocation.x == orig(this.recyclingPointLocation.x)
this.hasABottle == orig(this.hasABottle)
this.isAtRecyclePoint == orig(this.isAtRecyclePoint)
ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled)
this.position == orig(this.position)
this.position.x == orig(this.position.x)
this.position.y == orig(this.position.y)
(this.turnsTillRunsOutOfMoney == 0)  <==>  (return == false)
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.isSpendingMoney():::EXIT;condition="return == true"
this.spawnLocation.y == this.position.y
this.spawnLocation.y == orig(this.position.y)
this.turnsTillRunsOutOfMoney >= 1
this.hasABottle == false
this.isAtRecyclePoint == true
this.position.x one of { -1, 0 }
return == true
this.spawnLocation.x >= this.position.x
this.spawnLocation.y > this.position.x
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.isSpendingMoney():::EXIT;condition="not(return == true)"
this.turnsTillRunsOutOfMoney == 0
return == false
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.moveToRecyclingPoint(ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Board):::ENTER
this.spawnLocation.x == this.position.x
this.spawnLocation.y == this.position.y
this.spawnLocation.y == arg0.y
this.recyclingPointLocation.x == arg0.x
this.turnsTillRunsOutOfMoney == 0
this.hasABottle == true
this.isAtRecyclePoint == false
arg1 has only one value
arg1.topology has only one value
arg1.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg1.size == 15
arg1.objects has only one value
arg1.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
arg1.topology.getClass().getName() != arg1.objects.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.moveToRecyclingPoint(ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Board):::EXIT
this.spawnLocation == orig(this.spawnLocation)
this.spawnLocation.x == this.position.x
this.spawnLocation.x == orig(this.spawnLocation.x)
this.spawnLocation.x == orig(this.position.x)
this.spawnLocation.y == arg0.y
this.recyclingPointLocation == orig(this.recyclingPointLocation)
this.recyclingPointLocation.x == arg0.x
this.recyclingPointLocation.y == arg0.y
ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled)
this.position == orig(this.position)
this.position.y == arg0.y
arg0.x == orig(this.recyclingPointLocation.x)
arg0.x == orig(arg0.x)
arg0.y == orig(this.spawnLocation.y)
arg0.y == orig(this.recyclingPointLocation.y)
arg0.y == orig(this.position.y)
arg0.y == orig(arg0.y)
arg1.topology == orig(arg1.topology)
arg1.topology.getClass().getName() == orig(arg1.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
arg1.size == orig(arg1.size)
arg1.objects == orig(arg1.objects)
arg1.objects.getClass().getName() == orig(arg1.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
this.turnsTillRunsOutOfMoney == 30
this.hasABottle == false
this.isAtRecyclePoint == true
arg0.x == -1
arg0.y == 4
arg1.topology has only one value
arg1.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg1.size == 15
arg1.objects has only one value
arg1.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
arg1.topology.getClass().getName() != arg1.objects.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.pathToNearestBottle(ru.spbau.talanov.sd.drunkard.Board):::ENTER
this.turnsTillRunsOutOfMoney == 0
this.hasABottle == false
this.isAtRecyclePoint == false
this.position.x >= 0
arg0 has only one value
arg0 != null
arg0.topology has only one value
arg0.topology != null
arg0.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg0.size == 15
arg0.objects has only one value
arg0.objects != null
arg0.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
this.spawnLocation.x <= this.position.x
this.spawnLocation.x < this.position.y
this.recyclingPointLocation.x < this.position.x
this.position.x < arg0.size
this.position.y < arg0.size
arg0.topology.getClass().getName() != arg0.objects.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.pathToNearestBottle(ru.spbau.talanov.sd.drunkard.Board):::EXIT
this.turnsTillRunsOutOfMoney == orig(this.turnsTillRunsOutOfMoney)
this.spawnLocation == orig(this.spawnLocation)
this.spawnLocation.x == orig(this.spawnLocation.x)
this.spawnLocation.y == orig(this.spawnLocation.y)
this.spawnLocation.y == orig(this.recyclingPointLocation.y)
this.recyclingPointLocation == orig(this.recyclingPointLocation)
this.recyclingPointLocation.x == orig(this.recyclingPointLocation.x)
this.hasABottle == orig(this.hasABottle)
this.isAtRecyclePoint == orig(this.isAtRecyclePoint)
ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled)
this.position == orig(this.position)
this.position.x == orig(this.position.x)
this.position.y == orig(this.position.y)
arg0.topology == orig(arg0.topology)
arg0.topology.getClass().getName() == orig(arg0.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
arg0.size == orig(arg0.size)
arg0.objects == orig(arg0.objects)
arg0.objects.getClass().getName() == orig(arg0.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
this.turnsTillRunsOutOfMoney == 0
this.hasABottle == false
this.isAtRecyclePoint == false
this.position.x >= 0
arg0.topology has only one value
arg0.topology != null
arg0.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg0.size == 15
arg0.objects has only one value
arg0.objects != null
arg0.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
return[] elements != null
return[].getClass().getName() elements == ru.spbau.talanov.sd.drunkard.Position.class
return.getClass().getName() == java.util.LinkedList.class
size(return[]) >= 2
this.spawnLocation.x <= this.position.x
this.spawnLocation.x < this.position.y
this.recyclingPointLocation.x < this.position.x
this.position.x < arg0.size
this.position.y < arg0.size
arg0.topology.getClass().getName() != arg0.objects.getClass().getName()
arg0.topology.getClass().getName() != return.getClass().getName()
arg0.objects.getClass().getName() != return.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.pathToRecyclePoint(ru.spbau.talanov.sd.drunkard.Board):::ENTER
this.turnsTillRunsOutOfMoney == 0
this.hasABottle == true
this.isAtRecyclePoint == false
this.position.x >= 0
arg0 has only one value
arg0 != null
arg0.topology has only one value
arg0.topology != null
arg0.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg0.size == 15
arg0.objects has only one value
arg0.objects != null
arg0.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
this.spawnLocation.x <= this.position.x
this.recyclingPointLocation.x < this.position.x
this.position.x < arg0.size
this.position.y < arg0.size
arg0.topology.getClass().getName() != arg0.objects.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.pathToRecyclePoint(ru.spbau.talanov.sd.drunkard.Board):::EXIT
this.turnsTillRunsOutOfMoney == orig(this.turnsTillRunsOutOfMoney)
this.spawnLocation == orig(this.spawnLocation)
this.spawnLocation.x == orig(this.spawnLocation.x)
this.spawnLocation.y == orig(this.spawnLocation.y)
this.spawnLocation.y == orig(this.recyclingPointLocation.y)
this.recyclingPointLocation == orig(this.recyclingPointLocation)
this.recyclingPointLocation.x == orig(this.recyclingPointLocation.x)
this.hasABottle == orig(this.hasABottle)
this.isAtRecyclePoint == orig(this.isAtRecyclePoint)
ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled)
this.position == orig(this.position)
this.position.x == orig(this.position.x)
this.position.y == orig(this.position.y)
arg0.topology == orig(arg0.topology)
arg0.topology.getClass().getName() == orig(arg0.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
arg0.size == orig(arg0.size)
arg0.objects == orig(arg0.objects)
arg0.objects.getClass().getName() == orig(arg0.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
this.turnsTillRunsOutOfMoney == 0
this.hasABottle == true
this.isAtRecyclePoint == false
this.position.x >= 0
arg0.topology has only one value
arg0.topology != null
arg0.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg0.size == 15
arg0.objects has only one value
arg0.objects != null
arg0.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
return != null
return[] elements != null
return[].getClass().getName() elements == ru.spbau.talanov.sd.drunkard.Position.class
return.getClass().getName() == java.util.LinkedList.class
size(return[]) >= 2
this.spawnLocation.x <= this.position.x
this.recyclingPointLocation.x < this.position.x
this.position.x < arg0.size
this.position.y < arg0.size
arg0.topology.getClass().getName() != arg0.objects.getClass().getName()
arg0.topology.getClass().getName() != return.getClass().getName()
arg0.objects.getClass().getName() != return.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.performMove(ru.spbau.talanov.sd.drunkard.SimulationState):::ENTER
arg0 has only one value
arg0 != null
arg0.board has only one value
arg0.board != null
arg0.board.topology has only one value
arg0.board.topology != null
arg0.board.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
arg0.board.size == 15
arg0.board.objects has only one value
arg0.board.objects != null
arg0.board.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
arg0.actors has only one value
arg0.actors != null
arg0.actors[] elements != null
arg0.actors.getClass().getName() == java.util.ArrayList.class
this.position.x < arg0.board.size
this.position.y < arg0.board.size
arg0.board.topology.getClass().getName() != arg0.board.objects.getClass().getName()
arg0.board.topology.getClass().getName() != arg0.actors.getClass().getName()
arg0.board.objects.getClass().getName() != arg0.actors.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.performMove(ru.spbau.talanov.sd.drunkard.SimulationState):::EXIT33
this.spawnLocation.y == this.position.y
this.spawnLocation.y == orig(this.position.y)
this.hasABottle == orig(this.hasABottle)
this.isAtRecyclePoint == orig(this.isAtRecyclePoint)
this.position == orig(this.position)
this.position.x == orig(this.position.x)
this.hasABottle == false
this.isAtRecyclePoint == true
this.position.x one of { -1, 0 }
orig(this.turnsTillRunsOutOfMoney) >= 1
this.turnsTillRunsOutOfMoney - orig(this.turnsTillRunsOutOfMoney) + 1 == 0
this.spawnLocation.x >= this.position.x
this.spawnLocation.y > this.position.x
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.performMove(ru.spbau.talanov.sd.drunkard.SimulationState):::EXIT38
this.turnsTillRunsOutOfMoney == orig(this.turnsTillRunsOutOfMoney)
this.spawnLocation == this.position
this.spawnLocation.x == this.position.x
this.spawnLocation.y == this.position.y
this.spawnLocation.y == orig(this.position.y)
this.hasABottle == orig(this.hasABottle)
this.turnsTillRunsOutOfMoney == 0
this.hasABottle == false
this.isAtRecyclePoint == false
orig(this.isAtRecyclePoint) == true
orig(this.position.x) one of { -1, 0 }
this.spawnLocation.x >= orig(this.position.x)
this.spawnLocation.y > orig(this.position.x)
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.performMove(ru.spbau.talanov.sd.drunkard.SimulationState):::EXIT46
this.turnsTillRunsOutOfMoney one of { 0, 30 }
this.position.x >= 0
orig(this.turnsTillRunsOutOfMoney) == 0
orig(this.isAtRecyclePoint) == false
orig(this.position.x) >= 0
this.turnsTillRunsOutOfMoney >= orig(this.turnsTillRunsOutOfMoney)
this.spawnLocation.x <= this.position.x
this.spawnLocation.x <= orig(this.position.x)
this.recyclingPointLocation.x < this.position.x
this.recyclingPointLocation.x < orig(this.position.x)
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.performMove(ru.spbau.talanov.sd.drunkard.SimulationState):::EXIT
this.spawnLocation == orig(this.spawnLocation)
this.spawnLocation.x == orig(this.spawnLocation.x)
this.spawnLocation.y == orig(this.spawnLocation.y)
this.spawnLocation.y == orig(this.recyclingPointLocation.y)
this.recyclingPointLocation == orig(this.recyclingPointLocation)
this.recyclingPointLocation.x == orig(this.recyclingPointLocation.x)
ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled)
arg0.board == orig(arg0.board)
arg0.board.topology == orig(arg0.board.topology)
arg0.board.topology.getClass().getName() == orig(arg0.board.topology.getClass().getName())
arg0.board.size == orig(arg0.board.size)
arg0.board.objects == orig(arg0.board.objects)
arg0.board.objects.getClass().getName() == orig(arg0.board.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
arg0.actors == orig(arg0.actors)
arg0.actors[] == orig(arg0.actors[])
arg0.actors.getClass().getName() == orig(arg0.actors.getClass().getName())
arg0.board has only one value
arg0.board != null
arg0.board.topology has only one value
arg0.board.topology != null
arg0.board.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
arg0.board.size == 15
arg0.board.objects has only one value
arg0.board.objects != null
arg0.board.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
arg0.actors has only one value
arg0.actors != null
arg0.actors[] elements != null
arg0.actors.getClass().getName() == java.util.ArrayList.class
this.spawnLocation.x <= orig(this.position.y)
this.recyclingPointLocation.x <= orig(this.position.x)
this.recyclingPointLocation.x < orig(this.position.y)
this.position.x < arg0.board.size
this.position.y < arg0.board.size
arg0.board.topology.getClass().getName() != arg0.board.objects.getClass().getName()
arg0.board.topology.getClass().getName() != arg0.actors.getClass().getName()
arg0.board.size > orig(this.position.x)
arg0.board.size > orig(this.position.y)
arg0.board.objects.getClass().getName() != arg0.actors.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.pickUpBottle(ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Board):::ENTER
this.turnsTillRunsOutOfMoney == 0
this.hasABottle == false
this.isAtRecyclePoint == false
arg1 has only one value
arg1.topology has only one value
arg1.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg1.size == 15
arg1.objects has only one value
arg1.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
this.spawnLocation.x < this.position.x
this.spawnLocation.x < this.position.y
this.spawnLocation.x < arg0.x
this.spawnLocation.x <= arg0.y
this.spawnLocation.y < this.position.x
this.spawnLocation.y != this.position.y
this.spawnLocation.y < arg0.x
this.spawnLocation.y != arg0.y
this.recyclingPointLocation.x < this.position.x
this.recyclingPointLocation.x < arg0.x
this.recyclingPointLocation.x < arg0.y
this.position.x != this.position.y
this.position.x <= arg0.x
this.position.x != arg0.y
this.position.x < arg1.size
this.position.y != arg0.x
this.position.y < arg1.size
arg0.x != arg0.y
arg0.x < arg1.size
arg0.y < arg1.size
arg1.topology.getClass().getName() != arg1.objects.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.pickUpBottle(ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Board):::EXIT
this.turnsTillRunsOutOfMoney == orig(this.turnsTillRunsOutOfMoney)
this.spawnLocation == orig(this.spawnLocation)
this.spawnLocation.x == orig(this.spawnLocation.x)
this.spawnLocation.y == orig(this.spawnLocation.y)
this.spawnLocation.y == orig(this.recyclingPointLocation.y)
this.recyclingPointLocation == orig(this.recyclingPointLocation)
this.recyclingPointLocation.x == orig(this.recyclingPointLocation.x)
this.isAtRecyclePoint == orig(this.isAtRecyclePoint)
ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled)
this.position == orig(arg0)
this.position.x == arg0.x
this.position.y == arg0.y
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
arg1.topology == orig(arg1.topology)
arg1.topology.getClass().getName() == orig(arg1.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
arg1.size == orig(arg1.size)
arg1.objects == orig(arg1.objects)
arg1.objects.getClass().getName() == orig(arg1.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
this.turnsTillRunsOutOfMoney == 0
this.hasABottle == true
this.isAtRecyclePoint == false
arg1.topology has only one value
arg1.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg1.size == 15
arg1.objects has only one value
arg1.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
this.spawnLocation.x < arg0.x
this.spawnLocation.x <= arg0.y
this.spawnLocation.x < orig(this.position.x)
this.spawnLocation.x < orig(this.position.y)
this.spawnLocation.y < arg0.x
this.spawnLocation.y != arg0.y
this.spawnLocation.y < orig(this.position.x)
this.spawnLocation.y != orig(this.position.y)
this.recyclingPointLocation.x < arg0.x
this.recyclingPointLocation.x < arg0.y
this.recyclingPointLocation.x < orig(this.position.x)
this.recyclingPointLocation.x < orig(this.position.y)
arg0.x != arg0.y
arg0.x < arg1.size
arg0.x >= orig(this.position.x)
arg0.x != orig(this.position.y)
arg0.y < arg1.size
arg0.y != orig(this.position.x)
arg1.topology.getClass().getName() != arg1.objects.getClass().getName()
arg1.size > orig(this.position.x)
arg1.size > orig(this.position.y)
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.representation():::ENTER
this.turnsTillRunsOutOfMoney == 0
this.isAtRecyclePoint == false
this.position.x >= 0
this.spawnLocation.x <= this.position.x
this.recyclingPointLocation.x < this.position.x
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.representation():::EXIT
this.turnsTillRunsOutOfMoney == orig(this.turnsTillRunsOutOfMoney)
this.spawnLocation == orig(this.spawnLocation)
this.spawnLocation.x == orig(this.spawnLocation.x)
this.spawnLocation.y == orig(this.spawnLocation.y)
this.spawnLocation.y == orig(this.recyclingPointLocation.y)
this.recyclingPointLocation == orig(this.recyclingPointLocation)
this.recyclingPointLocation.x == orig(this.recyclingPointLocation.x)
this.hasABottle == orig(this.hasABottle)
this.isAtRecyclePoint == orig(this.isAtRecyclePoint)
ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled)
this.position == orig(this.position)
this.position.x == orig(this.position.x)
this.position.y == orig(this.position.y)
this.turnsTillRunsOutOfMoney == 0
this.isAtRecyclePoint == false
this.position.x >= 0
return == 122
this.spawnLocation.x <= this.position.x
this.recyclingPointLocation.x < this.position.x
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.spendSomeMore():::ENTER
this.spawnLocation.y == this.position.y
this.turnsTillRunsOutOfMoney >= 1
this.hasABottle == false
this.isAtRecyclePoint == true
this.position.x one of { -1, 0 }
this.spawnLocation.x >= this.position.x
this.spawnLocation.y > this.position.x
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.spendSomeMore():::EXIT
this.spawnLocation == orig(this.spawnLocation)
this.spawnLocation.x == orig(this.spawnLocation.x)
this.spawnLocation.y == this.position.y
this.spawnLocation.y == orig(this.spawnLocation.y)
this.spawnLocation.y == orig(this.recyclingPointLocation.y)
this.spawnLocation.y == orig(this.position.y)
this.recyclingPointLocation == orig(this.recyclingPointLocation)
this.recyclingPointLocation.x == orig(this.recyclingPointLocation.x)
this.hasABottle == orig(this.hasABottle)
this.isAtRecyclePoint == orig(this.isAtRecyclePoint)
ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled)
this.position == orig(this.position)
this.position.x == orig(this.position.x)
this.hasABottle == false
this.isAtRecyclePoint == true
this.position.x one of { -1, 0 }
this.turnsTillRunsOutOfMoney - orig(this.turnsTillRunsOutOfMoney) + 1 == 0
this.spawnLocation.x >= this.position.x
this.spawnLocation.y > this.position.x
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.wanderRandomly(ru.spbau.talanov.sd.drunkard.Board):::ENTER
this.turnsTillRunsOutOfMoney == 0
this.hasABottle == false
this.isAtRecyclePoint == false
this.position.x >= 0
arg0 has only one value
arg0 != null
arg0.topology has only one value
arg0.topology != null
arg0.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg0.size == 15
arg0.objects has only one value
arg0.objects != null
arg0.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
this.spawnLocation.x <= this.position.x
this.spawnLocation.x < this.position.y
this.recyclingPointLocation.x < this.position.x
this.position.x != this.position.y
this.position.x < arg0.size
this.position.y < arg0.size
arg0.topology.getClass().getName() != arg0.objects.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Beggar.wanderRandomly(ru.spbau.talanov.sd.drunkard.Board):::EXIT
this.turnsTillRunsOutOfMoney == orig(this.turnsTillRunsOutOfMoney)
this.spawnLocation == orig(this.spawnLocation)
this.spawnLocation.x == orig(this.spawnLocation.x)
this.spawnLocation.y == orig(this.spawnLocation.y)
this.spawnLocation.y == orig(this.recyclingPointLocation.y)
this.recyclingPointLocation == orig(this.recyclingPointLocation)
this.recyclingPointLocation.x == orig(this.recyclingPointLocation.x)
this.hasABottle == orig(this.hasABottle)
this.isAtRecyclePoint == orig(this.isAtRecyclePoint)
ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Beggar.$assertionsDisabled)
arg0.topology == orig(arg0.topology)
arg0.topology.getClass().getName() == orig(arg0.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
arg0.size == orig(arg0.size)
arg0.objects == orig(arg0.objects)
arg0.objects.getClass().getName() == orig(arg0.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
this.turnsTillRunsOutOfMoney == 0
this.hasABottle == false
this.isAtRecyclePoint == false
this.position.x >= 0
arg0.topology has only one value
arg0.topology != null
arg0.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg0.size == 15
arg0.objects has only one value
arg0.objects != null
arg0.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
this.spawnLocation.x <= this.position.x
this.spawnLocation.x < this.position.y
this.spawnLocation.x <= orig(this.position.x)
this.spawnLocation.x < orig(this.position.y)
this.recyclingPointLocation.x < this.position.x
this.recyclingPointLocation.x < orig(this.position.x)
this.recyclingPointLocation.x < orig(this.position.y)
this.position.x < arg0.size
this.position.y < arg0.size
arg0.topology.getClass().getName() != arg0.objects.getClass().getName()
arg0.size > orig(this.position.x)
arg0.size > orig(this.position.y)
===========================================================================
ru.spbau.talanov.sd.drunkard.Board:::CLASS
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
===========================================================================
ru.spbau.talanov.sd.drunkard.Board:::OBJECT
this has only one value
this.topology has only one value
this.topology != null
this.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
this.size == 15
this.objects has only one value
this.objects != null
this.objects.getClass().getName() == java.util.HashMap.class
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.Board(int, ru.spbau.talanov.sd.drunkard.BoardTopology):::ENTER
arg0 == 15
arg1 has only one value
arg1.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.Board(int, ru.spbau.talanov.sd.drunkard.BoardTopology):::EXIT
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.addObject(ru.spbau.talanov.sd.drunkard.BoardObject):::ENTER
arg0 != null
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.addObject(ru.spbau.talanov.sd.drunkard.BoardObject):::EXIT
this.topology == orig(this.topology)
this.topology.getClass().getName() == orig(this.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.size == orig(this.size)
this.objects == orig(this.objects)
this.objects.getClass().getName() == orig(this.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.addSpecialObject(ru.spbau.talanov.sd.drunkard.BoardObject):::ENTER
arg0 != null
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.addSpecialObject(ru.spbau.talanov.sd.drunkard.BoardObject):::EXIT
this.topology == orig(this.topology)
this.topology.getClass().getName() == orig(this.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.size == orig(this.size)
this.objects == orig(this.objects)
this.objects.getClass().getName() == orig(this.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.getBottom():::ENTER
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.getBottom():::EXIT
this.topology == orig(this.topology)
this.topology.getClass().getName() == orig(this.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.size == orig(this.size)
this.objects == orig(this.objects)
this.objects.getClass().getName() == orig(this.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
return == 0
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.getLeft():::ENTER
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.getLeft():::EXIT
this.topology == orig(this.topology)
this.topology.getClass().getName() == orig(this.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.size == orig(this.size)
this.objects == orig(this.objects)
this.objects.getClass().getName() == orig(this.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
return == 0
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.getObject(ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0 != null
arg0.x >= -1
arg0.y >= -1
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.getObject(ru.spbau.talanov.sd.drunkard.Position):::EXIT
this.topology == orig(this.topology)
this.topology.getClass().getName() == orig(this.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.size == orig(this.size)
this.objects == orig(this.objects)
this.objects.getClass().getName() == orig(this.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
arg0.x >= -1
arg0.y >= -1
return != null
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.getRight():::ENTER
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.getRight():::EXIT
this.topology == orig(this.topology)
this.topology.getClass().getName() == orig(this.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.size == orig(this.size)
this.objects == orig(this.objects)
this.objects.getClass().getName() == orig(this.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
return == 14
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.getTop():::ENTER
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.getTop():::EXIT
this.topology == orig(this.topology)
this.topology.getClass().getName() == orig(this.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.size == orig(this.size)
this.objects == orig(this.objects)
this.objects.getClass().getName() == orig(this.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
return == 14
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.getTopology():::ENTER
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.getTopology():::EXIT
this.topology == orig(this.topology)
this.topology.getClass().getName() == orig(this.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.size == orig(this.size)
this.objects == orig(this.objects)
this.objects.getClass().getName() == orig(this.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
return has only one value
return != null
return.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.isEmpty(ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0 != null
arg0.x >= -1
arg0.y >= -1
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.isEmpty(ru.spbau.talanov.sd.drunkard.Position):::EXIT
this.topology == orig(this.topology)
this.topology.getClass().getName() == orig(this.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.size == orig(this.size)
this.objects == orig(this.objects)
this.objects.getClass().getName() == orig(this.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
arg0.x >= -1
arg0.y >= -1
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.isEmpty(ru.spbau.talanov.sd.drunkard.Position):::EXIT;condition="return == true"
return == true
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.isEmpty(ru.spbau.talanov.sd.drunkard.Position):::EXIT;condition="not(return == true)"
return == false
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.isValid(ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0 != null
arg0.x >= -1
arg0.y >= -1
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.isValid(ru.spbau.talanov.sd.drunkard.Position):::EXIT
this.topology == orig(this.topology)
this.topology.getClass().getName() == orig(this.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.size == orig(this.size)
this.objects == orig(this.objects)
this.objects.getClass().getName() == orig(this.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
(return == false)  ==>  (arg0.x >= -1)
(return == false)  ==>  (arg0.y >= -1)
(return == true)  ==>  (arg0.x >= 0)
(return == true)  ==>  (arg0.y >= 0)
arg0.x >= -1
arg0.y >= -1
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.isValid(ru.spbau.talanov.sd.drunkard.Position):::EXIT;condition="return == true"
arg0.x >= 0
arg0.y >= 0
return == true
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.isValid(ru.spbau.talanov.sd.drunkard.Position):::EXIT;condition="not(return == true)"
return == false
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.move(ru.spbau.talanov.sd.drunkard.Movable, ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0 != null
arg1 != null
arg1.x >= 0
arg1.y >= 0
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.move(ru.spbau.talanov.sd.drunkard.Movable, ru.spbau.talanov.sd.drunkard.Position):::EXIT
this.topology == orig(this.topology)
this.topology.getClass().getName() == orig(this.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.size == orig(this.size)
this.objects == orig(this.objects)
this.objects.getClass().getName() == orig(this.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
arg1.x == orig(arg1.x)
arg1.y == orig(arg1.y)
arg1.x >= 0
arg1.y >= 0
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.representation():::ENTER
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.representation():::EXIT
this.topology == orig(this.topology)
this.topology.getClass().getName() == orig(this.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.size == orig(this.size)
this.objects == orig(this.objects)
this.objects.getClass().getName() == orig(this.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
return != null
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.representationAt(ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0 != null
arg0.x >= -1
arg0.y >= -1
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.representationAt(ru.spbau.talanov.sd.drunkard.Position):::EXIT86
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.representationAt(ru.spbau.talanov.sd.drunkard.Position):::EXIT89
return == 32
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.representationAt(ru.spbau.talanov.sd.drunkard.Position):::EXIT92
arg0.x >= 0
arg0.y >= 0
return == 46
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.representationAt(ru.spbau.talanov.sd.drunkard.Position):::EXIT
this.topology == orig(this.topology)
this.topology.getClass().getName() == orig(this.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.size == orig(this.size)
this.objects == orig(this.objects)
this.objects.getClass().getName() == orig(this.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
arg0.x >= -1
arg0.y >= -1
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.setEmpty(ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0 != null
arg0.x >= 0
arg0.y >= 0
===========================================================================
ru.spbau.talanov.sd.drunkard.Board.setEmpty(ru.spbau.talanov.sd.drunkard.Position):::EXIT
this.topology == orig(this.topology)
this.topology.getClass().getName() == orig(this.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.size == orig(this.size)
this.objects == orig(this.objects)
this.objects.getClass().getName() == orig(this.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
arg0.x >= 0
arg0.y >= 0
===========================================================================
ru.spbau.talanov.sd.drunkard.BoardTopology:::CLASS
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
===========================================================================
ru.spbau.talanov.sd.drunkard.BoardTopology:::OBJECT
this has only one value
this.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
===========================================================================
ru.spbau.talanov.sd.drunkard.BoardTopology.BoardTopology():::EXIT
===========================================================================
ru.spbau.talanov.sd.drunkard.BoardTopology.allPositionsInRadius(ru.spbau.talanov.sd.drunkard.Position, int):::ENTER
arg0 has only one value
arg0.x == 10
arg0.y == 3
arg1 == 3
===========================================================================
ru.spbau.talanov.sd.drunkard.BoardTopology.allPositionsInRadius(ru.spbau.talanov.sd.drunkard.Position, int):::EXIT
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
arg0.x == 10
arg0.y == 3
return has only one value
return.getClass().getName() == java.util.HashSet.class
===========================================================================
ru.spbau.talanov.sd.drunkard.BoardTopology.getRandomAdjacentPosition(ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0 != null
arg0.x >= 0
arg0.y >= 0
===========================================================================
ru.spbau.talanov.sd.drunkard.BoardTopology.getRandomAdjacentPosition(ru.spbau.talanov.sd.drunkard.Position):::EXIT
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
arg0.x >= 0
arg0.y >= 0
return != null
return.y >= -1
===========================================================================
ru.spbau.talanov.sd.drunkard.Bottle:::OBJECT
this.position != null
this.position.y >= 0
this.representation == 66
this.position.x != this.position.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Bottle.Bottle(ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0 != null
arg0.y >= 0
arg0.x != arg0.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Bottle.Bottle(ru.spbau.talanov.sd.drunkard.Position):::EXIT
this.position == orig(arg0)
this.position.x == arg0.x
this.position.y == arg0.y
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
arg0.y >= 0
arg0.x != arg0.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Column:::OBJECT
this has only one value
this.position has only one value
this.position.x == 7
this.position.y == 7
this.representation == 67
===========================================================================
ru.spbau.talanov.sd.drunkard.Column.Column(ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0 has only one value
arg0.x == 7
arg0.y == 7
===========================================================================
ru.spbau.talanov.sd.drunkard.Column.Column(ru.spbau.talanov.sd.drunkard.Position):::EXIT
this.position == orig(arg0)
this.position.x == arg0.x
this.position.y == arg0.y
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
arg0.x == 7
arg0.y == 7
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard$State:::OBJECT
this.representation one of { 38, 68, 90 }
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard$State.State(java.lang.String, int, char):::ENTER
arg0.toString one of { "LYING", "SLEEPING", "WALKING" }
arg1 one of { 0, 1, 2 }
arg2 one of { 38, 68, 90 }
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard$State.State(java.lang.String, int, char):::EXIT
this.representation == orig(arg2)
arg0.toString == orig(arg0.toString)
arg0.toString one of { "LYING", "SLEEPING", "WALKING" }
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard:::CLASS
ru.spbau.talanov.sd.drunkard.Drunkard.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.Drunkard.RANDOM != null
ru.spbau.talanov.sd.drunkard.Drunkard.$assertionsDisabled == false
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard:::OBJECT
this.state != null
ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING has only one value
ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING != null
ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING has only one value
ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING != null
ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING has only one value
ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING != null
ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING.representation == 90
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES has only one value
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES != null
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName() == ru.spbau.talanov.sd.drunkard.Drunkard$State[].class
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[] contains no nulls and has only one value, of length 3
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[] elements != null
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[].getClass().getName() == [ru.spbau.talanov.sd.drunkard.Drunkard.State, ru.spbau.talanov.sd.drunkard.Drunkard.State, ru.spbau.talanov.sd.drunkard.Drunkard.State]
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[].getClass().getName() elements == ru.spbau.talanov.sd.drunkard.Drunkard.State.class
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[].representation == [90, 68, 38]
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[].representation elements one of { 38, 68, 90 }
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[].representation sorted by >
ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING.representation == 68
ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING.representation == 38
this.state.representation one of { 38, 68, 90 }
this.position != null
this.position.x >= 0
this.position.y >= 0
size(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[]) == 3
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard.Drunkard(ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0 has only one value
arg0 != null
arg0.x == 9
arg0.y == 0
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard.Drunkard(ru.spbau.talanov.sd.drunkard.Position):::EXIT
this.state == ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING
this.position == orig(arg0)
this.position.x == arg0.x
this.position.y == arg0.y
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
this.state.representation == 68
this.position has only one value
arg0.x == 9
arg0.y == 0
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard.doMove(ru.spbau.talanov.sd.drunkard.Board, ru.spbau.talanov.sd.drunkard.Position):::ENTER
this.state == ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING
this.state.representation == 68
arg0 has only one value
arg0 != null
arg0.topology has only one value
arg0.topology != null
arg0.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg0.size == 15
arg0.objects has only one value
arg0.objects != null
arg0.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
arg1 != null
arg1.x >= 0
arg1.y >= 0
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName() != arg0.topology.getClass().getName()
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName() != arg0.objects.getClass().getName()
this.position.x < arg0.size
this.position.y < arg0.size
arg0.topology.getClass().getName() != arg0.objects.getClass().getName()
arg0.size > arg1.x
arg0.size > arg1.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard.doMove(ru.spbau.talanov.sd.drunkard.Board, ru.spbau.talanov.sd.drunkard.Position):::EXIT
ru.spbau.talanov.sd.drunkard.Drunkard.RANDOM == orig(ru.spbau.talanov.sd.drunkard.Drunkard.RANDOM)
this.state == ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING
ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING)
ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING == orig(this.state)
ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING)
ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING)
ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING.representation == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING.representation)
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES)
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName() == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName())
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[] == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[])
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[].representation == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[].representation)
ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING.representation == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING.representation)
ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING.representation == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING.representation)
this.state.representation == orig(this.state.representation)
ru.spbau.talanov.sd.drunkard.Drunkard.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Drunkard.$assertionsDisabled)
this.position == orig(arg1)
this.position.x == arg1.x
this.position.y == arg1.y
arg0.topology == orig(arg0.topology)
arg0.topology.getClass().getName() == orig(arg0.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
arg0.size == orig(arg0.size)
arg0.objects == orig(arg0.objects)
arg0.objects.getClass().getName() == orig(arg0.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
arg1.x == orig(arg1.x)
arg1.y == orig(arg1.y)
this.state.representation == 68
arg0.topology has only one value
arg0.topology != null
arg0.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg0.size == 15
arg0.objects has only one value
arg0.objects != null
arg0.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
arg1.x >= 0
arg1.y >= 0
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName() != arg0.topology.getClass().getName()
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName() != arg0.objects.getClass().getName()
arg0.topology.getClass().getName() != arg0.objects.getClass().getName()
arg0.size > arg1.x
arg0.size > arg1.y
arg0.size > orig(this.position.x)
arg0.size > orig(this.position.y)
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard.drunkardDropsBottle():::ENTER
this.state == ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING
this.state.representation == 68
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard.drunkardDropsBottle():::EXIT
ru.spbau.talanov.sd.drunkard.Drunkard.RANDOM == orig(ru.spbau.talanov.sd.drunkard.Drunkard.RANDOM)
this.state == ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING
ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING)
ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING == orig(this.state)
ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING)
ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING)
ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING.representation == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING.representation)
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES)
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName() == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName())
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[] == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[])
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[].representation == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[].representation)
ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING.representation == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING.representation)
ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING.representation == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING.representation)
this.state.representation == orig(this.state.representation)
ru.spbau.talanov.sd.drunkard.Drunkard.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Drunkard.$assertionsDisabled)
this.position == orig(this.position)
this.position.x == orig(this.position.x)
this.position.y == orig(this.position.y)
this.state.representation == 68
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard.drunkardDropsBottle():::EXIT;condition="return == true"
return == true
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard.drunkardDropsBottle():::EXIT;condition="not(return == true)"
return == false
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard.mayBeChangeStatus(ru.spbau.talanov.sd.drunkard.Board, ru.spbau.talanov.sd.drunkard.Position):::ENTER
this.state == ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING
this.state.representation == 68
arg0 has only one value
arg0 != null
arg0.topology has only one value
arg0.topology != null
arg0.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg0.size == 15
arg0.objects has only one value
arg0.objects != null
arg0.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
arg1 != null
arg1.y >= 0
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName() != arg0.topology.getClass().getName()
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName() != arg0.objects.getClass().getName()
this.position.x < arg0.size
this.position.y < arg0.size
arg0.topology.getClass().getName() != arg0.objects.getClass().getName()
arg0.size > arg1.x
arg0.size > arg1.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard.mayBeChangeStatus(ru.spbau.talanov.sd.drunkard.Board, ru.spbau.talanov.sd.drunkard.Position):::EXIT
ru.spbau.talanov.sd.drunkard.Drunkard.RANDOM == orig(ru.spbau.talanov.sd.drunkard.Drunkard.RANDOM)
ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING)
ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING == orig(this.state)
ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING)
ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING)
ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING.representation == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING.representation)
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES)
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName() == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName())
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[] == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[])
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[].representation == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[].representation)
ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING.representation == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING.representation)
ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING.representation == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING.representation)
ru.spbau.talanov.sd.drunkard.Drunkard.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Drunkard.$assertionsDisabled)
arg0.topology == orig(arg0.topology)
arg0.topology.getClass().getName() == orig(arg0.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
arg0.size == orig(arg0.size)
arg0.objects == orig(arg0.objects)
arg0.objects.getClass().getName() == orig(arg0.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
arg1.x == orig(arg1.x)
arg1.y == orig(arg1.y)
arg0.topology has only one value
arg0.topology != null
arg0.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg0.size == 15
arg0.objects has only one value
arg0.objects != null
arg0.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
arg1.y >= 0
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName() != arg0.topology.getClass().getName()
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName() != arg0.objects.getClass().getName()
this.position.x < arg0.size
this.position.x != arg1.y
this.position.y < arg0.size
arg0.topology.getClass().getName() != arg0.objects.getClass().getName()
arg0.size > arg1.x
arg0.size > arg1.y
arg0.size > orig(this.position.x)
arg0.size > orig(this.position.y)
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard.performMove(ru.spbau.talanov.sd.drunkard.SimulationState):::ENTER
this.state == ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING
this.state.representation == 68
arg0 has only one value
arg0 != null
arg0.board has only one value
arg0.board != null
arg0.board.topology has only one value
arg0.board.topology != null
arg0.board.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
arg0.board.size == 15
arg0.board.objects has only one value
arg0.board.objects != null
arg0.board.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
arg0.actors has only one value
arg0.actors != null
arg0.actors[] elements != null
arg0.actors.getClass().getName() == java.util.ArrayList.class
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName() != arg0.board.topology.getClass().getName()
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName() != arg0.board.objects.getClass().getName()
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName() != arg0.actors.getClass().getName()
this.position.x < arg0.board.size
this.position.y < arg0.board.size
arg0.board.topology.getClass().getName() != arg0.board.objects.getClass().getName()
arg0.board.topology.getClass().getName() != arg0.actors.getClass().getName()
arg0.board.objects.getClass().getName() != arg0.actors.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard.performMove(ru.spbau.talanov.sd.drunkard.SimulationState):::EXIT53
this.state == ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING
this.state.representation == orig(this.state.representation)
this.position == orig(this.position)
this.position.x == orig(this.position.x)
this.position.y == orig(this.position.y)
arg0.actors[] == orig(arg0.actors[])
this.state.representation == 68
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard.performMove(ru.spbau.talanov.sd.drunkard.SimulationState):::EXIT60
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard.performMove(ru.spbau.talanov.sd.drunkard.SimulationState):::EXIT63
this.state == ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING
this.state.representation == orig(this.state.representation)
arg0.actors[] == orig(arg0.actors[])
this.state.representation == 68
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard.performMove(ru.spbau.talanov.sd.drunkard.SimulationState):::EXIT
ru.spbau.talanov.sd.drunkard.Drunkard.RANDOM == orig(ru.spbau.talanov.sd.drunkard.Drunkard.RANDOM)
ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING)
ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING == orig(this.state)
ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING)
ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING)
ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING.representation == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING.representation)
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES)
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName() == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName())
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[] == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[])
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[].representation == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[].representation)
ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING.representation == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING.representation)
ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING.representation == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING.representation)
ru.spbau.talanov.sd.drunkard.Drunkard.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Drunkard.$assertionsDisabled)
arg0.board == orig(arg0.board)
arg0.board.topology == orig(arg0.board.topology)
arg0.board.topology.getClass().getName() == orig(arg0.board.topology.getClass().getName())
arg0.board.size == orig(arg0.board.size)
arg0.board.objects == orig(arg0.board.objects)
arg0.board.objects.getClass().getName() == orig(arg0.board.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
arg0.actors == orig(arg0.actors)
arg0.actors.getClass().getName() == orig(arg0.actors.getClass().getName())
arg0.board has only one value
arg0.board != null
arg0.board.topology has only one value
arg0.board.topology != null
arg0.board.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
arg0.board.size == 15
arg0.board.objects has only one value
arg0.board.objects != null
arg0.board.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
arg0.actors has only one value
arg0.actors != null
arg0.actors[] elements != null
arg0.actors.getClass().getName() == java.util.ArrayList.class
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName() != arg0.board.topology.getClass().getName()
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName() != arg0.board.objects.getClass().getName()
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName() != arg0.actors.getClass().getName()
this.position.x < arg0.board.size
this.position.y < arg0.board.size
arg0.board.topology.getClass().getName() != arg0.board.objects.getClass().getName()
arg0.board.topology.getClass().getName() != arg0.actors.getClass().getName()
arg0.board.size > orig(this.position.x)
arg0.board.size > orig(this.position.y)
arg0.board.objects.getClass().getName() != arg0.actors.getClass().getName()
size(arg0.actors[]) <= orig(size(arg0.actors[]))
size(arg0.actors[]) >= orig(size(arg0.actors[]))-1
size(arg0.actors[])-1 <= orig(size(arg0.actors[]))-1
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard.representation():::ENTER
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard.representation():::EXIT
ru.spbau.talanov.sd.drunkard.Drunkard.RANDOM == orig(ru.spbau.talanov.sd.drunkard.Drunkard.RANDOM)
this.state == orig(this.state)
ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING)
ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING)
ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING)
ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING.representation == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING.representation)
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES)
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName() == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName())
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[] == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[])
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[].representation == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[].representation)
ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING.representation == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING.representation)
ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING.representation == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING.representation)
this.state.representation == return
ru.spbau.talanov.sd.drunkard.Drunkard.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Drunkard.$assertionsDisabled)
this.position == orig(this.position)
this.position.x == orig(this.position.x)
this.position.y == orig(this.position.y)
return == orig(this.state.representation)
return one of { 38, 68, 90 }
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard.shouldBePickedByPoliceman():::ENTER
this.state.representation one of { 38, 68 }
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard.shouldBePickedByPoliceman():::EXIT
ru.spbau.talanov.sd.drunkard.Drunkard.RANDOM == orig(ru.spbau.talanov.sd.drunkard.Drunkard.RANDOM)
this.state == orig(this.state)
ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING)
ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING)
ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING)
ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING.representation == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.SLEEPING.representation)
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES)
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName() == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES.getClass().getName())
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[] == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[])
ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[].representation == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.$VALUES[].representation)
ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING.representation == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING.representation)
ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING.representation == orig(ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING.representation)
this.state.representation == orig(this.state.representation)
ru.spbau.talanov.sd.drunkard.Drunkard.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Drunkard.$assertionsDisabled)
this.position == orig(this.position)
this.position.x == orig(this.position.x)
this.position.y == orig(this.position.y)
(this.state.representation == 38)  <==>  (return == true)
(this.state.representation == 38)  ==>  (this.position.x != this.position.y)
(this.state.representation == 38)  ==>  (this.position.x >= 1)
(this.state.representation == 38)  ==>  (this.state == ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING)
(this.state.representation == 68)  <==>  (return == false)
(this.state.representation == 68)  ==>  (this.state == ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING)
this.state.representation one of { 38, 68 }
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard.shouldBePickedByPoliceman():::EXIT;condition="return == true"
this.state == ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING
ru.spbau.talanov.sd.drunkard.Drunkard$State.LYING == orig(this.state)
this.state.representation == 38
this.position.x >= 1
return == true
this.position.x != this.position.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Drunkard.shouldBePickedByPoliceman():::EXIT;condition="not(return == true)"
this.state == ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING
ru.spbau.talanov.sd.drunkard.Drunkard$State.WALKING == orig(this.state)
this.state.representation == 68
return == false
===========================================================================
ru.spbau.talanov.sd.drunkard.FindPath$1:::OBJECT
this.val$board has only one value
this.val$board != null
this.val$board.topology has only one value
this.val$board.topology != null
this.val$board.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
this.val$board.size == 15
this.val$board.objects has only one value
this.val$board.objects != null
this.val$board.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
this.val$board.topology.getClass().getName() != this.val$board.objects.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.FindPath$1.(ru.spbau.talanov.sd.drunkard.Board):::ENTER
arg0 has only one value
arg0 != null
arg0.topology has only one value
arg0.topology != null
arg0.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg0.size == 15
arg0.objects has only one value
arg0.objects != null
arg0.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
arg0.topology.getClass().getName() != arg0.objects.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.FindPath$1.(ru.spbau.talanov.sd.drunkard.Board):::EXIT
this.val$board == orig(arg0)
this.val$board.topology == arg0.topology
this.val$board.topology.getClass().getName() == arg0.topology.getClass().getName()
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.val$board.size == arg0.size
this.val$board.objects == arg0.objects
this.val$board.objects.getClass().getName() == arg0.objects.getClass().getName()
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
arg0.topology == orig(arg0.topology)
arg0.topology.getClass().getName() == orig(arg0.topology.getClass().getName())
arg0.size == orig(arg0.size)
arg0.objects == orig(arg0.objects)
arg0.objects.getClass().getName() == orig(arg0.objects.getClass().getName())
arg0.topology has only one value
arg0.topology != null
arg0.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
arg0.size == 15
arg0.objects has only one value
arg0.objects != null
arg0.objects.getClass().getName() == java.util.HashMap.class
arg0.topology.getClass().getName() != arg0.objects.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.FindPath$1.accepts(ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0 != null
arg0.x >= -1
arg0.y >= -1
this.val$board.size >= arg0.y
===========================================================================
ru.spbau.talanov.sd.drunkard.FindPath$1.accepts(ru.spbau.talanov.sd.drunkard.Position):::EXIT
this.val$board == orig(this.val$board)
this.val$board.topology == orig(this.val$board.topology)
this.val$board.topology.getClass().getName() == orig(this.val$board.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.val$board.size == orig(this.val$board.size)
this.val$board.objects == orig(this.val$board.objects)
this.val$board.objects.getClass().getName() == orig(this.val$board.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
(return == false)  ==>  (arg0.x >= -1)
(return == false)  ==>  (arg0.y >= -1)
(return == true)  ==>  (arg0.x >= 0)
(return == true)  ==>  (arg0.y >= 0)
(return == true)  ==>  (this.val$board.size > arg0.x)
(return == true)  ==>  (this.val$board.size > arg0.y)
arg0.x >= -1
arg0.y >= -1
this.val$board.size >= arg0.y
===========================================================================
ru.spbau.talanov.sd.drunkard.FindPath$1.accepts(ru.spbau.talanov.sd.drunkard.Position):::EXIT;condition="return == true"
arg0.x >= 0
arg0.y >= 0
return == true
this.val$board.size > arg0.x
this.val$board.size > arg0.y
===========================================================================
ru.spbau.talanov.sd.drunkard.FindPath$1.accepts(ru.spbau.talanov.sd.drunkard.Position):::EXIT;condition="not(return == true)"
return == false
===========================================================================
ru.spbau.talanov.sd.drunkard.FindPath:::OBJECT
this.positionQueue != null
this.positionQueue.getClass().getName() == java.util.LinkedList.class
this.previousPosition != null
this.previousPosition.getClass().getName() == java.util.HashMap.class
this.from != null
this.from.x >= 0
this.from.y >= 0
this.validPosition != null
this.validPosition.getClass().getName() == ru.spbau.talanov.sd.drunkard.FindPath$1.class
this.destinationPredicate != null
this.boardTopology has only one value
this.boardTopology != null
this.boardTopology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
this.positionQueue.getClass().getName() != this.previousPosition.getClass().getName()
this.positionQueue.getClass().getName() != this.validPosition.getClass().getName()
this.positionQueue.getClass().getName() != this.destinationPredicate.getClass().getName()
this.positionQueue.getClass().getName() != this.boardTopology.getClass().getName()
this.previousPosition.getClass().getName() != this.validPosition.getClass().getName()
this.previousPosition.getClass().getName() != this.destinationPredicate.getClass().getName()
this.previousPosition.getClass().getName() != this.boardTopology.getClass().getName()
this.validPosition.getClass().getName() != this.destinationPredicate.getClass().getName()
this.validPosition.getClass().getName() != this.boardTopology.getClass().getName()
this.destinationPredicate.getClass().getName() != this.boardTopology.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.FindPath.FindPath(ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.FindPath$PositionPredicate, ru.spbau.talanov.sd.drunkard.FindPath$PositionPredicate, ru.spbau.talanov.sd.drunkard.BoardTopology):::ENTER
arg0 != null
arg0.x >= 0
arg0.y >= 0
arg1 != null
arg1.getClass().getName() == ru.spbau.talanov.sd.drunkard.FindPath$1.class
arg2 != null
arg3 has only one value
arg3 != null
arg3.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg1.getClass().getName() != arg2.getClass().getName()
arg1.getClass().getName() != arg3.getClass().getName()
arg2.getClass().getName() != arg3.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.FindPath.FindPath(ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.FindPath$PositionPredicate, ru.spbau.talanov.sd.drunkard.FindPath$PositionPredicate, ru.spbau.talanov.sd.drunkard.BoardTopology):::EXIT
this.from == orig(arg0)
this.from.x == arg0.x
this.from.y == arg0.y
this.validPosition == orig(arg1)
this.validPosition.getClass().getName() == orig(arg1.getClass().getName())
this.destinationPredicate == orig(arg2)
this.destinationPredicate.getClass().getName() == orig(arg2.getClass().getName())
this.boardTopology == orig(arg3)
this.boardTopology.getClass().getName() == orig(arg3.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
arg0.x >= 0
arg0.y >= 0
===========================================================================
ru.spbau.talanov.sd.drunkard.FindPath.emptyValidPosition(ru.spbau.talanov.sd.drunkard.Board):::ENTER
arg0 has only one value
arg0 != null
arg0.topology has only one value
arg0.topology != null
arg0.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg0.size == 15
arg0.objects has only one value
arg0.objects != null
arg0.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
arg0.topology.getClass().getName() != arg0.objects.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.FindPath.emptyValidPosition(ru.spbau.talanov.sd.drunkard.Board):::EXIT
arg0.topology == orig(arg0.topology)
arg0.topology.getClass().getName() == orig(arg0.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
arg0.size == orig(arg0.size)
arg0.objects == orig(arg0.objects)
arg0.objects.getClass().getName() == orig(arg0.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
arg0.topology has only one value
arg0.topology != null
arg0.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg0.size == 15
arg0.objects has only one value
arg0.objects != null
arg0.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
return != null
return.getClass().getName() == ru.spbau.talanov.sd.drunkard.FindPath$1.class
arg0.topology.getClass().getName() != arg0.objects.getClass().getName()
arg0.topology.getClass().getName() != return.getClass().getName()
arg0.objects.getClass().getName() != return.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.FindPath.findPath(ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.FindPath$PositionPredicate, ru.spbau.talanov.sd.drunkard.FindPath$PositionPredicate, ru.spbau.talanov.sd.drunkard.BoardTopology):::ENTER
arg0 != null
arg0.x >= 0
arg0.y >= 0
arg1 != null
arg1.getClass().getName() == ru.spbau.talanov.sd.drunkard.FindPath$1.class
arg2 != null
arg3 has only one value
arg3 != null
arg3.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg1.getClass().getName() != arg2.getClass().getName()
arg1.getClass().getName() != arg3.getClass().getName()
arg2.getClass().getName() != arg3.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.FindPath.findPath(ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.FindPath$PositionPredicate, ru.spbau.talanov.sd.drunkard.FindPath$PositionPredicate, ru.spbau.talanov.sd.drunkard.BoardTopology):::EXIT
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
arg0.x >= 0
arg0.y >= 0
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
return[] elements != null
return[].getClass().getName() elements == ru.spbau.talanov.sd.drunkard.Position.class
return.getClass().getName() == java.util.LinkedList.class
size(return[]) >= 2
return.getClass().getName() != orig(arg1.getClass().getName())
return.getClass().getName() != orig(arg2.getClass().getName())
return.getClass().getName() != orig(arg3.getClass().getName())
===========================================================================
ru.spbau.talanov.sd.drunkard.FindPath.isVisited(ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0 != null
arg0.x >= -1
arg0.y >= -1
===========================================================================
ru.spbau.talanov.sd.drunkard.FindPath.isVisited(ru.spbau.talanov.sd.drunkard.Position):::EXIT
this.positionQueue == orig(this.positionQueue)
this.positionQueue.getClass().getName() == orig(this.positionQueue.getClass().getName())
this.previousPosition == orig(this.previousPosition)
this.previousPosition.getClass().getName() == orig(this.previousPosition.getClass().getName())
this.from == orig(this.from)
this.from.x == orig(this.from.x)
this.from.y == orig(this.from.y)
this.validPosition == orig(this.validPosition)
this.validPosition.getClass().getName() == orig(this.validPosition.getClass().getName())
this.destinationPredicate == orig(this.destinationPredicate)
this.destinationPredicate.getClass().getName() == orig(this.destinationPredicate.getClass().getName())
this.boardTopology == orig(this.boardTopology)
this.boardTopology.getClass().getName() == orig(this.boardTopology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
(return == false)  ==>  (arg0.x >= -1)
(return == false)  ==>  (arg0.y >= -1)
(return == true)  ==>  (arg0.x >= 0)
(return == true)  ==>  (arg0.y >= 0)
arg0.x >= -1
arg0.y >= -1
===========================================================================
ru.spbau.talanov.sd.drunkard.FindPath.isVisited(ru.spbau.talanov.sd.drunkard.Position):::EXIT;condition="return == true"
arg0.x >= 0
arg0.y >= 0
return == true
===========================================================================
ru.spbau.talanov.sd.drunkard.FindPath.isVisited(ru.spbau.talanov.sd.drunkard.Position):::EXIT;condition="not(return == true)"
return == false
===========================================================================
ru.spbau.talanov.sd.drunkard.FindPath.performBFS():::ENTER
===========================================================================
ru.spbau.talanov.sd.drunkard.FindPath.performBFS():::EXIT70
return.getClass().getName() == orig(this.positionQueue.getClass().getName())
return != null
===========================================================================
ru.spbau.talanov.sd.drunkard.FindPath.performBFS():::EXIT75
return == null
this.from.x != this.from.y
===========================================================================
ru.spbau.talanov.sd.drunkard.FindPath.performBFS():::EXIT
this.positionQueue == orig(this.positionQueue)
this.positionQueue.getClass().getName() == return.getClass().getName()
this.positionQueue.getClass().getName() == orig(this.positionQueue.getClass().getName())
this.previousPosition == orig(this.previousPosition)
this.previousPosition.getClass().getName() == orig(this.previousPosition.getClass().getName())
this.from == orig(this.from)
this.from.x == orig(this.from.x)
this.from.y == orig(this.from.y)
this.validPosition == orig(this.validPosition)
this.validPosition.getClass().getName() == orig(this.validPosition.getClass().getName())
this.destinationPredicate == orig(this.destinationPredicate)
this.destinationPredicate.getClass().getName() == orig(this.destinationPredicate.getClass().getName())
this.boardTopology == orig(this.boardTopology)
this.boardTopology.getClass().getName() == orig(this.boardTopology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
(return != null)  ==>  (return.getClass().getName() == java.util.LinkedList.class)
(return != null)  ==>  (return[] elements != null)
(return != null)  ==>  (return[].getClass().getName() elements == ru.spbau.talanov.sd.drunkard.Position.class)
(return != null)  ==>  (size(return[]) >= 2)
(return != null)  ==>  (this.boardTopology.getClass().getName() != return.getClass().getName())
(return != null)  ==>  (this.destinationPredicate.getClass().getName() != return.getClass().getName())
(return != null)  ==>  (this.positionQueue.getClass().getName() == return.getClass().getName())
(return != null)  ==>  (this.previousPosition.getClass().getName() != return.getClass().getName())
(return != null)  ==>  (this.validPosition.getClass().getName() != return.getClass().getName())
(return == null)  ==>  (this.from.x != this.from.y)
return[] elements != null
return[].getClass().getName() elements == ru.spbau.talanov.sd.drunkard.Position.class
return.getClass().getName() == java.util.LinkedList.class
size(return[]) >= 2
this.previousPosition.getClass().getName() != return.getClass().getName()
this.validPosition.getClass().getName() != return.getClass().getName()
this.destinationPredicate.getClass().getName() != return.getClass().getName()
this.boardTopology.getClass().getName() != return.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.FindPath.restorePath(ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0 != null
arg0.x != 0
arg0.y >= 0
arg0.x != arg0.y
===========================================================================
ru.spbau.talanov.sd.drunkard.FindPath.restorePath(ru.spbau.talanov.sd.drunkard.Position):::EXIT
this.positionQueue == orig(this.positionQueue)
this.positionQueue.getClass().getName() == return.getClass().getName()
this.previousPosition == orig(this.previousPosition)
this.previousPosition.getClass().getName() == orig(this.previousPosition.getClass().getName())
this.from == orig(this.from)
this.from.x == orig(this.from.x)
this.from.y == orig(this.from.y)
this.validPosition == orig(this.validPosition)
this.validPosition.getClass().getName() == orig(this.validPosition.getClass().getName())
this.destinationPredicate == orig(this.destinationPredicate)
this.destinationPredicate.getClass().getName() == orig(this.destinationPredicate.getClass().getName())
this.boardTopology == orig(this.boardTopology)
this.boardTopology.getClass().getName() == orig(this.boardTopology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
return.getClass().getName() == orig(this.positionQueue.getClass().getName())
arg0.x != 0
arg0.y >= 0
return != null
return[] elements != null
return[].getClass().getName() elements == ru.spbau.talanov.sd.drunkard.Position.class
return.getClass().getName() == java.util.LinkedList.class
size(return[]) >= 2
this.previousPosition.getClass().getName() != return.getClass().getName()
this.validPosition.getClass().getName() != return.getClass().getName()
this.destinationPredicate.getClass().getName() != return.getClass().getName()
this.boardTopology.getClass().getName() != return.getClass().getName()
arg0.x != arg0.y
===========================================================================
ru.spbau.talanov.sd.drunkard.HexagonalTopology:::CLASS
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
===========================================================================
ru.spbau.talanov.sd.drunkard.HexagonalTopology:::OBJECT
this has only one value
===========================================================================
ru.spbau.talanov.sd.drunkard.HexagonalTopology.HexagonalTopology():::EXIT
===========================================================================
ru.spbau.talanov.sd.drunkard.HexagonalTopology.getAdjacentPositions(ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0 != null
arg0.x >= 0
arg0.y >= 0
===========================================================================
ru.spbau.talanov.sd.drunkard.HexagonalTopology.getAdjacentPositions(ru.spbau.talanov.sd.drunkard.Position):::EXIT
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
arg0.x >= 0
arg0.y >= 0
return != null
return[] elements != null
return[].getClass().getName() == [ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Position]
return[].getClass().getName() elements == ru.spbau.talanov.sd.drunkard.Position.class
return.getClass().getName() == java.util.Arrays$ArrayList.class
size(return[]) == 6
===========================================================================
ru.spbau.talanov.sd.drunkard.ImmobileObject:::OBJECT
this.position != null
this.position.x != 0
this.position.x >= -1
this.position.y >= -1
===========================================================================
ru.spbau.talanov.sd.drunkard.ImmobileObject.ImmobileObject(ru.spbau.talanov.sd.drunkard.Position, char):::ENTER
arg0 != null
===========================================================================
ru.spbau.talanov.sd.drunkard.ImmobileObject.ImmobileObject(ru.spbau.talanov.sd.drunkard.Position, char):::EXIT
this.position == orig(arg0)
this.position.x == arg0.x
this.position.y == arg0.y
this.representation == orig(arg1)
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
===========================================================================
ru.spbau.talanov.sd.drunkard.ImmobileObject.getPosition():::ENTER
===========================================================================
ru.spbau.talanov.sd.drunkard.ImmobileObject.getPosition():::EXIT
this.position == return
this.position.x == return.x
this.position.y == return.y
this.representation == orig(this.representation)
return == orig(this.position)
return.x == orig(this.position.x)
return.y == orig(this.position.y)
return != null
===========================================================================
ru.spbau.talanov.sd.drunkard.ImmobileObject.representation():::ENTER
===========================================================================
ru.spbau.talanov.sd.drunkard.ImmobileObject.representation():::EXIT
this.position == orig(this.position)
this.position.x == orig(this.position.x)
this.position.y == orig(this.position.y)
this.representation == return
return == orig(this.representation)
===========================================================================
ru.spbau.talanov.sd.drunkard.Inn:::CLASS
===========================================================================
ru.spbau.talanov.sd.drunkard.Inn:::OBJECT
this.drunkardSpawnPosition.x == this.position.x
this has only one value
this.moveCount >= 1
this.drunkardSpawnPosition has only one value
this.drunkardSpawnPosition != null
this.drunkardSpawnPosition.x == 9
this.drunkardSpawnPosition.y == 0
this.position has only one value
this.position != null
this.position.y == -1
this.representation == 84
===========================================================================
ru.spbau.talanov.sd.drunkard.Inn.Inn(ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0.x == arg1.x
arg0 has only one value
arg0.x == 9
arg0.y == -1
arg1 has only one value
arg1.y == 0
===========================================================================
ru.spbau.talanov.sd.drunkard.Inn.Inn(ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Position):::EXIT
this.drunkardSpawnPosition == orig(arg1)
this.drunkardSpawnPosition.x == arg0.x
this.drunkardSpawnPosition.y == arg1.y
this.position == orig(arg0)
this.position.x == arg0.x
this.position.y == arg0.y
arg0.x == arg1.x
arg0.x == orig(arg0.x)
arg0.x == orig(arg1.x)
arg0.y == orig(arg0.y)
arg1.y == orig(arg1.y)
this.moveCount == 20
this.shouldSpawnDrunkard == false
arg0.x == 9
arg0.y == -1
arg1.y == 0
===========================================================================
ru.spbau.talanov.sd.drunkard.Inn.decrementCounter():::ENTER
===========================================================================
ru.spbau.talanov.sd.drunkard.Inn.decrementCounter():::EXIT
this.drunkardSpawnPosition == orig(this.drunkardSpawnPosition)
this.drunkardSpawnPosition.x == orig(this.drunkardSpawnPosition.x)
this.drunkardSpawnPosition.x == orig(this.position.x)
this.drunkardSpawnPosition.y == orig(this.drunkardSpawnPosition.y)
this.position == orig(this.position)
this.position.y == orig(this.position.y)
this.representation == orig(this.representation)
this.moveCount != orig(this.moveCount)
===========================================================================
ru.spbau.talanov.sd.drunkard.Inn.mayBeSpawnDrunkard(ru.spbau.talanov.sd.drunkard.SimulationState):::ENTER
arg0 has only one value
arg0 != null
arg0.board has only one value
arg0.board != null
arg0.board.topology has only one value
arg0.board.topology != null
arg0.board.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
arg0.board.size == 15
arg0.board.objects has only one value
arg0.board.objects != null
arg0.board.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
arg0.actors has only one value
arg0.actors != null
arg0.actors[] elements != null
arg0.actors.getClass().getName() == java.util.ArrayList.class
arg0.board.topology.getClass().getName() != arg0.board.objects.getClass().getName()
arg0.board.topology.getClass().getName() != arg0.actors.getClass().getName()
arg0.board.objects.getClass().getName() != arg0.actors.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Inn.mayBeSpawnDrunkard(ru.spbau.talanov.sd.drunkard.SimulationState):::EXIT30
this.shouldSpawnDrunkard == orig(this.shouldSpawnDrunkard)
arg0.actors[] == orig(arg0.actors[])
this.shouldSpawnDrunkard == false
===========================================================================
ru.spbau.talanov.sd.drunkard.Inn.mayBeSpawnDrunkard(ru.spbau.talanov.sd.drunkard.SimulationState):::EXIT39
orig(this.shouldSpawnDrunkard) == true
===========================================================================
ru.spbau.talanov.sd.drunkard.Inn.mayBeSpawnDrunkard(ru.spbau.talanov.sd.drunkard.SimulationState):::EXIT
this.moveCount == orig(this.moveCount)
this.drunkardSpawnPosition == orig(this.drunkardSpawnPosition)
this.drunkardSpawnPosition.x == orig(this.drunkardSpawnPosition.x)
this.drunkardSpawnPosition.x == orig(this.position.x)
this.drunkardSpawnPosition.y == orig(this.drunkardSpawnPosition.y)
this.position == orig(this.position)
this.position.y == orig(this.position.y)
this.representation == orig(this.representation)
arg0.board == orig(arg0.board)
arg0.board.topology == orig(arg0.board.topology)
arg0.board.topology.getClass().getName() == orig(arg0.board.topology.getClass().getName())
arg0.board.size == orig(arg0.board.size)
arg0.board.objects == orig(arg0.board.objects)
arg0.board.objects.getClass().getName() == orig(arg0.board.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
arg0.actors == orig(arg0.actors)
arg0.actors.getClass().getName() == orig(arg0.actors.getClass().getName())
(orig(this.shouldSpawnDrunkard) == false)  ==>  (arg0.actors[] == orig(arg0.actors[]))
(orig(this.shouldSpawnDrunkard) == false)  ==>  (this.shouldSpawnDrunkard == false)
(orig(this.shouldSpawnDrunkard) == false)  ==>  (this.shouldSpawnDrunkard == orig(this.shouldSpawnDrunkard))
arg0.board has only one value
arg0.board != null
arg0.board.topology has only one value
arg0.board.topology != null
arg0.board.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
arg0.board.size == 15
arg0.board.objects has only one value
arg0.board.objects != null
arg0.board.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
arg0.actors has only one value
arg0.actors != null
arg0.actors[] elements != null
arg0.actors.getClass().getName() == java.util.ArrayList.class
arg0.board.topology.getClass().getName() != arg0.board.objects.getClass().getName()
arg0.board.topology.getClass().getName() != arg0.actors.getClass().getName()
arg0.board.objects.getClass().getName() != arg0.actors.getClass().getName()
size(arg0.actors[]) >= orig(size(arg0.actors[]))
size(arg0.actors[])-1 <= orig(size(arg0.actors[]))
size(arg0.actors[])-1 >= orig(size(arg0.actors[]))-1
===========================================================================
ru.spbau.talanov.sd.drunkard.Inn.performMove(ru.spbau.talanov.sd.drunkard.SimulationState):::ENTER
arg0 has only one value
arg0 != null
arg0.board has only one value
arg0.board != null
arg0.board.topology has only one value
arg0.board.topology != null
arg0.board.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
arg0.board.size == 15
arg0.board.objects has only one value
arg0.board.objects != null
arg0.board.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
arg0.actors has only one value
arg0.actors != null
arg0.actors[] elements != null
arg0.actors.getClass().getName() == java.util.ArrayList.class
arg0.board.topology.getClass().getName() != arg0.board.objects.getClass().getName()
arg0.board.topology.getClass().getName() != arg0.actors.getClass().getName()
arg0.board.objects.getClass().getName() != arg0.actors.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Inn.performMove(ru.spbau.talanov.sd.drunkard.SimulationState):::EXIT
this.drunkardSpawnPosition == orig(this.drunkardSpawnPosition)
this.drunkardSpawnPosition.x == orig(this.drunkardSpawnPosition.x)
this.drunkardSpawnPosition.x == orig(this.position.x)
this.drunkardSpawnPosition.y == orig(this.drunkardSpawnPosition.y)
this.position == orig(this.position)
this.position.y == orig(this.position.y)
this.representation == orig(this.representation)
arg0.board == orig(arg0.board)
arg0.board.topology == orig(arg0.board.topology)
arg0.board.topology.getClass().getName() == orig(arg0.board.topology.getClass().getName())
arg0.board.size == orig(arg0.board.size)
arg0.board.objects == orig(arg0.board.objects)
arg0.board.objects.getClass().getName() == orig(arg0.board.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
arg0.actors == orig(arg0.actors)
arg0.actors.getClass().getName() == orig(arg0.actors.getClass().getName())
arg0.board has only one value
arg0.board != null
arg0.board.topology has only one value
arg0.board.topology != null
arg0.board.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
arg0.board.size == 15
arg0.board.objects has only one value
arg0.board.objects != null
arg0.board.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
arg0.actors has only one value
arg0.actors != null
arg0.actors[] elements != null
arg0.actors.getClass().getName() == java.util.ArrayList.class
this.moveCount != orig(this.moveCount)
arg0.board.topology.getClass().getName() != arg0.board.objects.getClass().getName()
arg0.board.topology.getClass().getName() != arg0.actors.getClass().getName()
arg0.board.objects.getClass().getName() != arg0.actors.getClass().getName()
size(arg0.actors[]) >= orig(size(arg0.actors[]))
size(arg0.actors[])-1 <= orig(size(arg0.actors[]))
size(arg0.actors[])-1 >= orig(size(arg0.actors[]))-1
===========================================================================
ru.spbau.talanov.sd.drunkard.Lantern:::OBJECT
this has only one value
this.position has only one value
this.position.x == 10
this.position.y == 3
this.representation == 76
===========================================================================
ru.spbau.talanov.sd.drunkard.Lantern.Lantern(ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0 has only one value
arg0.x == 10
arg0.y == 3
===========================================================================
ru.spbau.talanov.sd.drunkard.Lantern.Lantern(ru.spbau.talanov.sd.drunkard.Position):::EXIT
this.position == orig(arg0)
this.position.x == arg0.x
this.position.y == arg0.y
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
arg0.x == 10
arg0.y == 3
===========================================================================
ru.spbau.talanov.sd.drunkard.MovableObject:::OBJECT
this.position != null
this.position.y >= 0
===========================================================================
ru.spbau.talanov.sd.drunkard.MovableObject.MovableObject(ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0 != null
arg0.x one of { -1, 9, 15 }
arg0.y one of { 0, 3, 4 }
arg0.x != arg0.y
===========================================================================
ru.spbau.talanov.sd.drunkard.MovableObject.MovableObject(ru.spbau.talanov.sd.drunkard.Position):::EXIT
this.position == orig(arg0)
this.position.x == arg0.x
this.position.y == arg0.y
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
arg0.x one of { -1, 9, 15 }
arg0.y one of { 0, 3, 4 }
arg0.x != arg0.y
===========================================================================
ru.spbau.talanov.sd.drunkard.MovableObject.getPosition():::ENTER
this.position.x >= 0
===========================================================================
ru.spbau.talanov.sd.drunkard.MovableObject.getPosition():::EXIT
this.position == return
this.position.x == return.x
this.position.y == return.y
return == orig(this.position)
return.x == orig(this.position.x)
return.y == orig(this.position.y)
return != null
return.x >= 0
return.y >= 0
===========================================================================
ru.spbau.talanov.sd.drunkard.MovableObject.setPosition(ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0 != null
arg0.x >= 0
arg0.y >= 0
===========================================================================
ru.spbau.talanov.sd.drunkard.MovableObject.setPosition(ru.spbau.talanov.sd.drunkard.Position):::EXIT
this.position == orig(arg0)
this.position.x == arg0.x
this.position.y == arg0.y
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
arg0.x >= 0
arg0.y >= 0
===========================================================================
ru.spbau.talanov.sd.drunkard.PoliceStation:::OBJECT
this has only one value
this.position has only one value
this.position.x == 15
this.position.y == 3
this.representation == 83
===========================================================================
ru.spbau.talanov.sd.drunkard.PoliceStation.PoliceStation(ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0 has only one value
arg0.x == 15
arg0.y == 3
===========================================================================
ru.spbau.talanov.sd.drunkard.PoliceStation.PoliceStation(ru.spbau.talanov.sd.drunkard.Position):::EXIT
this.position == orig(arg0)
this.position.x == arg0.x
this.position.y == arg0.y
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
arg0.x == 15
arg0.y == 3
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman$1:::OBJECT
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y == ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.y
ru.spbau.talanov.sd.drunkard.Policeman.this has only one value
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation has only one value
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation != null
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x == 14
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y == 3
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation has only one value
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation != null
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.x == 15
ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations has only one value
ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations != null
ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations.getClass().getName() == java.util.HashSet.class
ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled == false
ru.spbau.talanov.sd.drunkard.Policeman.this.position != null
ru.spbau.talanov.sd.drunkard.Policeman.this.position.y >= 0
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x > ru.spbau.talanov.sd.drunkard.Policeman.this.position.y
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y < ru.spbau.talanov.sd.drunkard.Policeman.this.position.x
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.x >= ru.spbau.talanov.sd.drunkard.Policeman.this.position.x
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.x > ru.spbau.talanov.sd.drunkard.Policeman.this.position.y
ru.spbau.talanov.sd.drunkard.Policeman.this.position.x > ru.spbau.talanov.sd.drunkard.Policeman.this.position.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman$1.(ru.spbau.talanov.sd.drunkard.Policeman):::ENTER
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y == ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.y
ru.spbau.talanov.sd.drunkard.Policeman.this has only one value
ru.spbau.talanov.sd.drunkard.Policeman.this != null
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation has only one value
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation != null
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x == 14
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y == 3
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation has only one value
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation != null
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.x == 15
ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations has only one value
ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations != null
ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations.getClass().getName() == java.util.HashSet.class
ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled == false
ru.spbau.talanov.sd.drunkard.Policeman.this.position != null
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x > ru.spbau.talanov.sd.drunkard.Policeman.this.position.y
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y < ru.spbau.talanov.sd.drunkard.Policeman.this.position.x
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.x >= ru.spbau.talanov.sd.drunkard.Policeman.this.position.x
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.x > ru.spbau.talanov.sd.drunkard.Policeman.this.position.y
ru.spbau.talanov.sd.drunkard.Policeman.this.position.x > ru.spbau.talanov.sd.drunkard.Policeman.this.position.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman$1.(ru.spbau.talanov.sd.drunkard.Policeman):::EXIT
ru.spbau.talanov.sd.drunkard.Policeman.this == orig(ru.spbau.talanov.sd.drunkard.Policeman.this)
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation)
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x)
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y)
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.y)
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation)
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.x == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.x)
ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations)
ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations.getClass().getName() == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations.getClass().getName())
ru.spbau.talanov.sd.drunkard.Policeman.this.isAtPoliceStation == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.isAtPoliceStation)
ru.spbau.talanov.sd.drunkard.Policeman.this.isCarryingADrunkard == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.isCarryingADrunkard)
ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled)
ru.spbau.talanov.sd.drunkard.Policeman.this.position == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.position)
ru.spbau.talanov.sd.drunkard.Policeman.this.position.x == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.position.x)
ru.spbau.talanov.sd.drunkard.Policeman.this.position.y == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.position.y)
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman$1.accepts(ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0 != null
arg0.x >= -1
arg0.y >= -1
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.x >= arg0.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman$1.accepts(ru.spbau.talanov.sd.drunkard.Position):::EXIT
ru.spbau.talanov.sd.drunkard.Policeman.this == orig(ru.spbau.talanov.sd.drunkard.Policeman.this)
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation)
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x)
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y)
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.y)
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation)
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.x == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.x)
ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations)
ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations.getClass().getName() == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations.getClass().getName())
ru.spbau.talanov.sd.drunkard.Policeman.this.isAtPoliceStation == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.isAtPoliceStation)
ru.spbau.talanov.sd.drunkard.Policeman.this.isCarryingADrunkard == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.isCarryingADrunkard)
ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled)
ru.spbau.talanov.sd.drunkard.Policeman.this.position == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.position)
ru.spbau.talanov.sd.drunkard.Policeman.this.position.x == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.position.x)
ru.spbau.talanov.sd.drunkard.Policeman.this.position.y == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.position.y)
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
(return == false)  ==>  (arg0.x >= -1)
(return == false)  ==>  (arg0.y >= -1)
(return == true)  ==>  (arg0.x == 15)
(return == true)  ==>  (arg0.x > arg0.y)
(return == true)  ==>  (arg0.y == 3)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.isAtPoliceStation == false)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.isCarryingADrunkard == true)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.x == arg0.x)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.x > arg0.y)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.x > ru.spbau.talanov.sd.drunkard.Policeman.this.position.x)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.position.x < arg0.x)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.position.x > arg0.y)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.position.y < arg0.x)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x < arg0.x)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x > arg0.y)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x >= ru.spbau.talanov.sd.drunkard.Policeman.this.position.x)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y < arg0.x)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y == arg0.y)
arg0.x >= -1
arg0.y >= -1
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.x >= arg0.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman$1.accepts(ru.spbau.talanov.sd.drunkard.Position):::EXIT;condition="return == true"
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y == arg0.y
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.x == arg0.x
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.y == arg0.y
arg0.x == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.x)
arg0.y == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y)
arg0.y == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.y)
ru.spbau.talanov.sd.drunkard.Policeman.this.isAtPoliceStation == false
ru.spbau.talanov.sd.drunkard.Policeman.this.isCarryingADrunkard == true
arg0.x == 15
arg0.y == 3
return == true
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x >= ru.spbau.talanov.sd.drunkard.Policeman.this.position.x
ru.spbau.talanov.sd.drunkard.Policeman.this.position.x < arg0.x
ru.spbau.talanov.sd.drunkard.Policeman.this.position.x > arg0.y
ru.spbau.talanov.sd.drunkard.Policeman.this.position.y < arg0.x
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman$1.accepts(ru.spbau.talanov.sd.drunkard.Position):::EXIT;condition="not(return == true)"
return == false
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman$2:::OBJECT
this.val$board.size == ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.x
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y == ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.y
this.val$board has only one value
this.val$board != null
this.val$board.topology has only one value
this.val$board.topology != null
this.val$board.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
this.val$board.size == 15
this.val$board.objects has only one value
this.val$board.objects != null
this.val$board.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
ru.spbau.talanov.sd.drunkard.Policeman.this has only one value
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation has only one value
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation != null
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x == 14
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y == 3
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation has only one value
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation != null
ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations has only one value
ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations != null
ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations.getClass().getName() == java.util.HashSet.class
ru.spbau.talanov.sd.drunkard.Policeman.this.isCarryingADrunkard == false
ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled == false
ru.spbau.talanov.sd.drunkard.Policeman.this.position != null
this.val$board.topology.getClass().getName() != this.val$board.objects.getClass().getName()
this.val$board.topology.getClass().getName() != ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations.getClass().getName()
this.val$board.size >= ru.spbau.talanov.sd.drunkard.Policeman.this.position.x
this.val$board.size > ru.spbau.talanov.sd.drunkard.Policeman.this.position.y
this.val$board.objects.getClass().getName() != ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations.getClass().getName()
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x > ru.spbau.talanov.sd.drunkard.Policeman.this.position.y
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y < ru.spbau.talanov.sd.drunkard.Policeman.this.position.x
ru.spbau.talanov.sd.drunkard.Policeman.this.position.x > ru.spbau.talanov.sd.drunkard.Policeman.this.position.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman$2.(ru.spbau.talanov.sd.drunkard.Policeman, ru.spbau.talanov.sd.drunkard.Board):::ENTER
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y == ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.y
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.x == arg1.size
ru.spbau.talanov.sd.drunkard.Policeman.this has only one value
ru.spbau.talanov.sd.drunkard.Policeman.this != null
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation has only one value
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation != null
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x == 14
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y == 3
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation has only one value
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation != null
ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations has only one value
ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations != null
ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations.getClass().getName() == java.util.HashSet.class
ru.spbau.talanov.sd.drunkard.Policeman.this.isCarryingADrunkard == false
ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled == false
ru.spbau.talanov.sd.drunkard.Policeman.this.position != null
arg1 has only one value
arg1 != null
arg1.topology has only one value
arg1.topology != null
arg1.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg1.size == 15
arg1.objects has only one value
arg1.objects != null
arg1.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x > ru.spbau.talanov.sd.drunkard.Policeman.this.position.y
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y < ru.spbau.talanov.sd.drunkard.Policeman.this.position.x
ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations.getClass().getName() != arg1.topology.getClass().getName()
ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations.getClass().getName() != arg1.objects.getClass().getName()
ru.spbau.talanov.sd.drunkard.Policeman.this.position.x > ru.spbau.talanov.sd.drunkard.Policeman.this.position.y
ru.spbau.talanov.sd.drunkard.Policeman.this.position.x <= arg1.size
ru.spbau.talanov.sd.drunkard.Policeman.this.position.y < arg1.size
arg1.topology.getClass().getName() != arg1.objects.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman$2.(ru.spbau.talanov.sd.drunkard.Policeman, ru.spbau.talanov.sd.drunkard.Board):::EXIT
this.val$board == orig(arg1)
this.val$board.topology == arg1.topology
this.val$board.topology.getClass().getName() == arg1.topology.getClass().getName()
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.val$board.size == arg1.size
this.val$board.objects == arg1.objects
this.val$board.objects.getClass().getName() == arg1.objects.getClass().getName()
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
ru.spbau.talanov.sd.drunkard.Policeman.this == orig(ru.spbau.talanov.sd.drunkard.Policeman.this)
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation)
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x)
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y)
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.y)
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation)
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.x == arg1.size
ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations)
ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations.getClass().getName() == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations.getClass().getName())
ru.spbau.talanov.sd.drunkard.Policeman.this.isAtPoliceStation == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.isAtPoliceStation)
ru.spbau.talanov.sd.drunkard.Policeman.this.isCarryingADrunkard == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.isCarryingADrunkard)
ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled)
ru.spbau.talanov.sd.drunkard.Policeman.this.position == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.position)
ru.spbau.talanov.sd.drunkard.Policeman.this.position.x == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.position.x)
ru.spbau.talanov.sd.drunkard.Policeman.this.position.y == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.position.y)
arg1.topology == orig(arg1.topology)
arg1.topology.getClass().getName() == orig(arg1.topology.getClass().getName())
arg1.size == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.x)
arg1.size == orig(arg1.size)
arg1.objects == orig(arg1.objects)
arg1.objects.getClass().getName() == orig(arg1.objects.getClass().getName())
arg1.topology has only one value
arg1.topology != null
arg1.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
arg1.size == 15
arg1.objects has only one value
arg1.objects != null
arg1.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations.getClass().getName() != arg1.topology.getClass().getName()
ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations.getClass().getName() != arg1.objects.getClass().getName()
ru.spbau.talanov.sd.drunkard.Policeman.this.position.x <= arg1.size
ru.spbau.talanov.sd.drunkard.Policeman.this.position.y < arg1.size
arg1.topology.getClass().getName() != arg1.objects.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman$2.accepts(ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0 != null
arg0.x >= -1
arg0.y >= -1
this.val$board.size >= arg0.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman$2.accepts(ru.spbau.talanov.sd.drunkard.Position):::EXIT133
return == false
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman$2.accepts(ru.spbau.talanov.sd.drunkard.Position):::EXIT133;condition="not(return == true)"
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman$2.accepts(ru.spbau.talanov.sd.drunkard.Position):::EXIT137
ru.spbau.talanov.sd.drunkard.Policeman.this.position.y one of { 2, 3, 4 }
return == false
this.val$board.size >= arg0.x
this.val$board.size > arg0.y
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x != arg0.x
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x > arg0.y
ru.spbau.talanov.sd.drunkard.Policeman.this.position.x > arg0.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman$2.accepts(ru.spbau.talanov.sd.drunkard.Position):::EXIT137;condition="not(return == true)"
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman$2.accepts(ru.spbau.talanov.sd.drunkard.Position):::EXIT140
ru.spbau.talanov.sd.drunkard.Policeman.this.position.y one of { 2, 3 }
arg0.x >= 0
arg0.y >= 0
return == false
this.val$board.size > arg0.x
this.val$board.size > arg0.y
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x >= arg0.x
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x >= arg0.y
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y >= ru.spbau.talanov.sd.drunkard.Policeman.this.position.y
ru.spbau.talanov.sd.drunkard.Policeman.this.position.x >= arg0.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman$2.accepts(ru.spbau.talanov.sd.drunkard.Position):::EXIT140;condition="not(return == true)"
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman$2.accepts(ru.spbau.talanov.sd.drunkard.Position):::EXIT142
(return == false)  ==>  (arg0.x >= 1)
(return == false)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.position.y != arg0.y)
(return == false)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.position.y == 3)
(return == false)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x >= ru.spbau.talanov.sd.drunkard.Policeman.this.position.x)
(return == false)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y != arg0.y)
(return == false)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y == ru.spbau.talanov.sd.drunkard.Policeman.this.position.y)
(return == false)  ==>  (this.val$board.size > ru.spbau.talanov.sd.drunkard.Policeman.this.position.x)
(return == true)  ==>  (arg0.x > arg0.y)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.position.x >= arg0.x)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.position.y < arg0.x)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y < arg0.x)
arg0.x >= 1
arg0.y >= 0
this.val$board.size > arg0.x
this.val$board.size > arg0.y
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x > arg0.x
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x > arg0.y
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y != arg0.x
ru.spbau.talanov.sd.drunkard.Policeman.this.position.x > arg0.y
ru.spbau.talanov.sd.drunkard.Policeman.this.position.y != arg0.x
arg0.x != arg0.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman$2.accepts(ru.spbau.talanov.sd.drunkard.Position):::EXIT142;condition="return == true"
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman$2.accepts(ru.spbau.talanov.sd.drunkard.Position):::EXIT142;condition="not(return == true)"
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y == ru.spbau.talanov.sd.drunkard.Policeman.this.position.y
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.position.y)
this.val$board.size > ru.spbau.talanov.sd.drunkard.Policeman.this.position.x
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x >= ru.spbau.talanov.sd.drunkard.Policeman.this.position.x
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y != arg0.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman$2.accepts(ru.spbau.talanov.sd.drunkard.Position):::EXIT
this.val$board == orig(this.val$board)
this.val$board.topology == orig(this.val$board.topology)
this.val$board.topology.getClass().getName() == orig(this.val$board.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.val$board.size == orig(this.val$board.size)
this.val$board.size == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.x)
this.val$board.objects == orig(this.val$board.objects)
this.val$board.objects.getClass().getName() == orig(this.val$board.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
ru.spbau.talanov.sd.drunkard.Policeman.this == orig(ru.spbau.talanov.sd.drunkard.Policeman.this)
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation)
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x)
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y)
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation.y)
ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.policeStationLocation)
ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations)
ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations.getClass().getName() == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.observableLocations.getClass().getName())
ru.spbau.talanov.sd.drunkard.Policeman.this.isAtPoliceStation == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.isAtPoliceStation)
ru.spbau.talanov.sd.drunkard.Policeman.this.isCarryingADrunkard == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.isCarryingADrunkard)
ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled)
ru.spbau.talanov.sd.drunkard.Policeman.this.position == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.position)
ru.spbau.talanov.sd.drunkard.Policeman.this.position.x == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.position.x)
ru.spbau.talanov.sd.drunkard.Policeman.this.position.y == orig(ru.spbau.talanov.sd.drunkard.Policeman.this.position.y)
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
(return == false)  ==>  (arg0.x >= -1)
(return == false)  ==>  (arg0.y >= -1)
(return == true)  ==>  (arg0.x > arg0.y)
(return == true)  ==>  (arg0.y >= 0)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.position.x > arg0.y)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.position.x >= arg0.x)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.position.y < arg0.x)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x > arg0.x)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x > arg0.y)
(return == true)  ==>  (ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y < arg0.x)
(return == true)  ==>  (this.val$board.size > arg0.x)
(return == true)  ==>  (this.val$board.size > arg0.y)
arg0.x >= -1
arg0.y >= -1
this.val$board.size >= arg0.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman$2.accepts(ru.spbau.talanov.sd.drunkard.Position):::EXIT;condition="return == true"
arg0.y >= 0
return == true
this.val$board.size > arg0.x
this.val$board.size > arg0.y
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x > arg0.x
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.x > arg0.y
ru.spbau.talanov.sd.drunkard.Policeman.this.spawnLocation.y < arg0.x
ru.spbau.talanov.sd.drunkard.Policeman.this.position.x >= arg0.x
ru.spbau.talanov.sd.drunkard.Policeman.this.position.x > arg0.y
ru.spbau.talanov.sd.drunkard.Policeman.this.position.y < arg0.x
arg0.x > arg0.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman$2.accepts(ru.spbau.talanov.sd.drunkard.Position):::EXIT;condition="not(return == true)"
return == false
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman:::CLASS
ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled == false
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman:::OBJECT
this.spawnLocation.y == this.policeStationLocation.y
this has only one value
this.spawnLocation has only one value
this.spawnLocation != null
this.spawnLocation.x == 14
this.spawnLocation.y == 3
this.policeStationLocation has only one value
this.policeStationLocation != null
this.policeStationLocation.x == 15
this.observableLocations has only one value
this.observableLocations != null
this.observableLocations.getClass().getName() == java.util.HashSet.class
this.position != null
this.position.y >= 0
this.spawnLocation.x > this.position.y
this.spawnLocation.y < this.position.x
this.policeStationLocation.x >= this.position.x
this.policeStationLocation.x > this.position.y
this.position.x > this.position.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.Policeman(ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.BoardTopology):::ENTER
arg0.y == arg1.y
arg0 has only one value
arg0.x == 14
arg0.y == 3
arg1 has only one value
arg1.x == 15
arg2 has only one value
arg2.x == 10
arg2.y == 3
arg3 has only one value
arg3.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.Policeman(ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.BoardTopology):::EXIT
this.spawnLocation == orig(arg0)
this.spawnLocation.x == arg0.x
this.spawnLocation.y == arg0.y
this.policeStationLocation == this.position
this.policeStationLocation == orig(arg1)
this.policeStationLocation.x == arg1.x
this.policeStationLocation.y == arg0.y
this.position.x == arg1.x
this.position.y == arg0.y
arg0.x == orig(arg0.x)
arg0.y == arg1.y
arg0.y == orig(arg0.y)
arg0.y == orig(arg1.y)
arg1.x == orig(arg1.x)
arg2.x == orig(arg2.x)
arg2.y == orig(arg2.y)
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.isAtPoliceStation == true
this.isCarryingADrunkard == false
arg0.x == 14
arg0.y == 3
arg1.x == 15
arg2.x == 10
arg2.y == 3
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.exitPoliceStation(ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Board):::ENTER
this.spawnLocation.x == arg0.x
this.spawnLocation.y == this.position.y
this.spawnLocation.y == arg0.y
this.policeStationLocation.x == arg1.size
this.isAtPoliceStation == true
this.isCarryingADrunkard == false
this.position.x one of { 14, 15 }
arg1 has only one value
arg1.topology has only one value
arg1.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg1.objects has only one value
arg1.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
this.spawnLocation.x <= this.position.x
this.observableLocations.getClass().getName() != arg1.topology.getClass().getName()
this.observableLocations.getClass().getName() != arg1.objects.getClass().getName()
arg1.topology.getClass().getName() != arg1.objects.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.exitPoliceStation(ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Board):::EXIT
this.spawnLocation == this.position
this.spawnLocation == orig(this.spawnLocation)
this.spawnLocation.x == arg0.x
this.spawnLocation.y == arg0.y
this.policeStationLocation == orig(this.policeStationLocation)
this.policeStationLocation.x == arg1.size
this.policeStationLocation.y == arg0.y
this.observableLocations == orig(this.observableLocations)
this.observableLocations.getClass().getName() == orig(this.observableLocations.getClass().getName())
this.isCarryingADrunkard == orig(this.isCarryingADrunkard)
ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled)
this.position.x == arg0.x
this.position.y == arg0.y
arg0.x == orig(this.spawnLocation.x)
arg0.x == orig(arg0.x)
arg0.y == orig(this.spawnLocation.y)
arg0.y == orig(this.policeStationLocation.y)
arg0.y == orig(this.position.y)
arg0.y == orig(arg0.y)
arg1.topology == orig(arg1.topology)
arg1.topology.getClass().getName() == orig(arg1.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
arg1.size == orig(this.policeStationLocation.x)
arg1.size == orig(arg1.size)
arg1.objects == orig(arg1.objects)
arg1.objects.getClass().getName() == orig(arg1.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
this.isAtPoliceStation == false
this.isCarryingADrunkard == false
arg0.x == 14
arg0.y == 3
arg1.topology has only one value
arg1.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg1.size == 15
arg1.objects has only one value
arg1.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
this.observableLocations.getClass().getName() != arg1.topology.getClass().getName()
this.observableLocations.getClass().getName() != arg1.objects.getClass().getName()
arg0.x <= orig(this.position.x)
arg0.y < orig(this.position.x)
arg1.topology.getClass().getName() != arg1.objects.getClass().getName()
arg1.size >= orig(this.position.x)
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.follow(java.util.List, ru.spbau.talanov.sd.drunkard.Board, boolean):::ENTER
this.policeStationLocation.x == arg1.size
this.isCarryingADrunkard == arg2
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == ru.spbau.talanov.sd.drunkard.Position.class
arg0.getClass().getName() == java.util.LinkedList.class
arg1 has only one value
arg1 != null
arg1.topology has only one value
arg1.topology != null
arg1.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg1.objects has only one value
arg1.objects != null
arg1.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
size(arg0[]) >= 2
this.observableLocations.getClass().getName() != arg0.getClass().getName()
this.observableLocations.getClass().getName() != arg1.topology.getClass().getName()
this.observableLocations.getClass().getName() != arg1.objects.getClass().getName()
arg0.getClass().getName() != arg1.topology.getClass().getName()
arg0.getClass().getName() != arg1.objects.getClass().getName()
arg1.topology.getClass().getName() != arg1.objects.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.follow(java.util.List, ru.spbau.talanov.sd.drunkard.Board, boolean):::EXIT71
arg0[].getClass().getName() == [ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Position]
orig(this.isAtPoliceStation) == false
orig(size(arg0[])) == 2
this.spawnLocation.x >= orig(this.position.x)
this.position.x <= orig(this.position.x)
arg1.size > orig(this.position.x)
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.follow(java.util.List, ru.spbau.talanov.sd.drunkard.Board, boolean):::EXIT75
this.spawnLocation == this.position
this.spawnLocation.x == this.position.x
this.spawnLocation.y == this.position.y
this.spawnLocation.y == orig(this.position.y)
this.isCarryingADrunkard == orig(this.isCarryingADrunkard)
this.isCarryingADrunkard == orig(arg2)
this.isAtPoliceStation == false
this.isCarryingADrunkard == false
orig(this.isAtPoliceStation) == true
orig(this.position.x) one of { 14, 15 }
this.spawnLocation.x <= orig(this.position.x)
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.follow(java.util.List, ru.spbau.talanov.sd.drunkard.Board, boolean):::EXIT78
this.isAtPoliceStation == orig(this.isAtPoliceStation)
this.isCarryingADrunkard == orig(this.isCarryingADrunkard)
this.isCarryingADrunkard == orig(arg2)
this.isAtPoliceStation == false
this.spawnLocation.x >= orig(this.position.x)
arg1.size > orig(this.position.x)
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.follow(java.util.List, ru.spbau.talanov.sd.drunkard.Board, boolean):::EXIT
this.spawnLocation == orig(this.spawnLocation)
this.spawnLocation.x == orig(this.spawnLocation.x)
this.spawnLocation.y == orig(this.spawnLocation.y)
this.spawnLocation.y == orig(this.policeStationLocation.y)
this.policeStationLocation == orig(this.policeStationLocation)
this.policeStationLocation.x == arg1.size
this.observableLocations == orig(this.observableLocations)
this.observableLocations.getClass().getName() == orig(this.observableLocations.getClass().getName())
ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled)
arg0[] == orig(arg0[])
arg1.topology == orig(arg1.topology)
arg1.topology.getClass().getName() == orig(arg1.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
arg1.size == orig(this.policeStationLocation.x)
arg1.size == orig(arg1.size)
arg1.objects == orig(arg1.objects)
arg1.objects.getClass().getName() == orig(arg1.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
arg0[] elements != null
arg0[].getClass().getName() elements == ru.spbau.talanov.sd.drunkard.Position.class
arg1.topology has only one value
arg1.topology != null
arg1.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg1.size == 15
arg1.objects has only one value
arg1.objects != null
arg1.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
this.spawnLocation.x >= this.position.x
this.spawnLocation.x > orig(this.position.y)
this.spawnLocation.y < orig(this.position.x)
this.observableLocations.getClass().getName() != arg1.topology.getClass().getName()
this.observableLocations.getClass().getName() != arg1.objects.getClass().getName()
this.observableLocations.getClass().getName() != orig(arg0.getClass().getName())
this.position.x < arg1.size
this.position.x > orig(this.position.y)
this.position.y < arg1.size
this.position.y < orig(this.position.x)
arg1.topology.getClass().getName() != arg1.objects.getClass().getName()
arg1.topology.getClass().getName() != orig(arg0.getClass().getName())
arg1.size >= orig(this.position.x)
arg1.size > orig(this.position.y)
arg1.objects.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.getPosition():::ENTER
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.getPosition():::EXIT119
this.spawnLocation.y == return.y
this.policeStationLocation == return
this.policeStationLocation.x == return.x
this.policeStationLocation.y == return.y
return == orig(this.policeStationLocation)
return.x == orig(this.policeStationLocation.x)
return.y == orig(this.spawnLocation.y)
return.y == orig(this.policeStationLocation.y)
this.isAtPoliceStation == true
this.isCarryingADrunkard == false
this.position.x one of { 14, 15 }
return has only one value
return.x == 15
return.y == 3
this.spawnLocation.x <= this.position.x
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.getPosition():::EXIT121
this.position == return
this.position.x == return.x
return == orig(this.position)
return.x == orig(this.position.x)
this.isAtPoliceStation == false
this.spawnLocation.x >= return.x
this.policeStationLocation.x > return.x
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.getPosition():::EXIT
this.spawnLocation == orig(this.spawnLocation)
this.spawnLocation.x == orig(this.spawnLocation.x)
this.spawnLocation.y == orig(this.spawnLocation.y)
this.spawnLocation.y == orig(this.policeStationLocation.y)
this.policeStationLocation == orig(this.policeStationLocation)
this.policeStationLocation.x == orig(this.policeStationLocation.x)
this.observableLocations == orig(this.observableLocations)
this.observableLocations.getClass().getName() == orig(this.observableLocations.getClass().getName())
this.isAtPoliceStation == orig(this.isAtPoliceStation)
this.isCarryingADrunkard == orig(this.isCarryingADrunkard)
ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled)
this.position == orig(this.position)
this.position.x == orig(this.position.x)
this.position.y == return.y
return.y == orig(this.position.y)
(this.isAtPoliceStation == false)  <==>  (this.policeStationLocation.x > return.x)
(this.isAtPoliceStation == false)  <==>  (this.spawnLocation.x >= return.x)
(this.isAtPoliceStation == false)  ==>  (this.policeStationLocation.x > this.position.x)
(this.isAtPoliceStation == false)  ==>  (this.position == return)
(this.isAtPoliceStation == false)  ==>  (this.position.x == return.x)
(this.isAtPoliceStation == false)  ==>  (this.spawnLocation.x >= this.position.x)
(this.isAtPoliceStation == true)  <==>  (return.x == 15)
(this.isAtPoliceStation == true)  <==>  (this.policeStationLocation.x == return.x)
(this.isAtPoliceStation == true)  <==>  (this.spawnLocation.x < return.x)
(this.isAtPoliceStation == true)  ==>  (return has only one value)
(this.isAtPoliceStation == true)  ==>  (return.y == 3)
(this.isAtPoliceStation == true)  ==>  (this.isCarryingADrunkard == false)
(this.isAtPoliceStation == true)  ==>  (this.policeStationLocation == return)
(this.isAtPoliceStation == true)  ==>  (this.position.x one of { 14, 15 })
(this.isAtPoliceStation == true)  ==>  (this.spawnLocation.x <= this.position.x)
(this.isAtPoliceStation == true)  ==>  (this.spawnLocation.y == return.y)
return != null
return.y >= 0
this.spawnLocation.x > return.y
this.spawnLocation.y < return.x
this.policeStationLocation.x >= return.x
this.policeStationLocation.x > return.y
this.position.x <= return.x
this.position.x > return.y
return.x > return.y
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.moveToPoliceStation(ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Board):::ENTER
this.spawnLocation.x == this.position.x
this.spawnLocation.y == this.position.y
this.spawnLocation.y == arg0.y
this.policeStationLocation.x == arg0.x
this.policeStationLocation.x == arg1.size
this.isAtPoliceStation == false
this.isCarryingADrunkard == true
arg1 has only one value
arg1.topology has only one value
arg1.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg1.objects has only one value
arg1.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
this.observableLocations.getClass().getName() != arg1.topology.getClass().getName()
this.observableLocations.getClass().getName() != arg1.objects.getClass().getName()
arg1.topology.getClass().getName() != arg1.objects.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.moveToPoliceStation(ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Board):::EXIT
this.spawnLocation == orig(this.spawnLocation)
this.spawnLocation.x == this.position.x
this.spawnLocation.x == orig(this.spawnLocation.x)
this.spawnLocation.x == orig(this.position.x)
this.spawnLocation.y == arg0.y
this.policeStationLocation == orig(this.policeStationLocation)
this.policeStationLocation.x == arg0.x
this.policeStationLocation.y == arg0.y
this.observableLocations == orig(this.observableLocations)
this.observableLocations.getClass().getName() == orig(this.observableLocations.getClass().getName())
ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled)
this.position == orig(this.position)
this.position.y == arg0.y
arg0.x == arg1.size
arg0.x == orig(this.policeStationLocation.x)
arg0.x == orig(arg0.x)
arg0.x == orig(arg1.size)
arg0.y == orig(this.spawnLocation.y)
arg0.y == orig(this.policeStationLocation.y)
arg0.y == orig(this.position.y)
arg0.y == orig(arg0.y)
arg1.topology == orig(arg1.topology)
arg1.topology.getClass().getName() == orig(arg1.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
arg1.objects == orig(arg1.objects)
arg1.objects.getClass().getName() == orig(arg1.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
this.isAtPoliceStation == true
this.isCarryingADrunkard == false
arg0.x == 15
arg0.y == 3
arg1.topology has only one value
arg1.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg1.objects has only one value
arg1.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
this.observableLocations.getClass().getName() != arg1.topology.getClass().getName()
this.observableLocations.getClass().getName() != arg1.objects.getClass().getName()
arg1.topology.getClass().getName() != arg1.objects.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.pathToNearestDrunkard(ru.spbau.talanov.sd.drunkard.Board):::ENTER
this.policeStationLocation.x == arg0.size
this.isCarryingADrunkard == false
arg0 has only one value
arg0 != null
arg0.topology has only one value
arg0.topology != null
arg0.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg0.objects has only one value
arg0.objects != null
arg0.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
this.observableLocations.getClass().getName() != arg0.topology.getClass().getName()
this.observableLocations.getClass().getName() != arg0.objects.getClass().getName()
arg0.topology.getClass().getName() != arg0.objects.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.pathToNearestDrunkard(ru.spbau.talanov.sd.drunkard.Board):::EXIT
this.spawnLocation == orig(this.spawnLocation)
this.spawnLocation.x == orig(this.spawnLocation.x)
this.spawnLocation.y == orig(this.spawnLocation.y)
this.spawnLocation.y == orig(this.policeStationLocation.y)
this.policeStationLocation == orig(this.policeStationLocation)
this.policeStationLocation.x == arg0.size
this.observableLocations == orig(this.observableLocations)
this.observableLocations.getClass().getName() == orig(this.observableLocations.getClass().getName())
this.isAtPoliceStation == orig(this.isAtPoliceStation)
this.isCarryingADrunkard == orig(this.isCarryingADrunkard)
ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled)
this.position == orig(this.position)
this.position.x == orig(this.position.x)
this.position.y == orig(this.position.y)
arg0.topology == orig(arg0.topology)
arg0.topology.getClass().getName() == orig(arg0.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
arg0.size == orig(this.policeStationLocation.x)
arg0.size == orig(arg0.size)
arg0.objects == orig(arg0.objects)
arg0.objects.getClass().getName() == orig(arg0.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
this.isCarryingADrunkard == false
arg0.topology has only one value
arg0.topology != null
arg0.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg0.size == 15
arg0.objects has only one value
arg0.objects != null
arg0.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
return[] elements != null
return[].getClass().getName() elements == ru.spbau.talanov.sd.drunkard.Position.class
return.getClass().getName() == java.util.LinkedList.class
size(return[]) >= 2
this.observableLocations.getClass().getName() != arg0.topology.getClass().getName()
this.observableLocations.getClass().getName() != arg0.objects.getClass().getName()
this.observableLocations.getClass().getName() != return.getClass().getName()
this.position.x <= arg0.size
this.position.y < arg0.size
arg0.topology.getClass().getName() != arg0.objects.getClass().getName()
arg0.topology.getClass().getName() != return.getClass().getName()
arg0.objects.getClass().getName() != return.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.pathToPoliceStation(ru.spbau.talanov.sd.drunkard.Board):::ENTER
this.policeStationLocation.x == arg0.size
arg0 has only one value
arg0 != null
arg0.topology has only one value
arg0.topology != null
arg0.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg0.objects has only one value
arg0.objects != null
arg0.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
this.observableLocations.getClass().getName() != arg0.topology.getClass().getName()
this.observableLocations.getClass().getName() != arg0.objects.getClass().getName()
arg0.topology.getClass().getName() != arg0.objects.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.pathToPoliceStation(ru.spbau.talanov.sd.drunkard.Board):::EXIT
this.spawnLocation == orig(this.spawnLocation)
this.spawnLocation.x == orig(this.spawnLocation.x)
this.spawnLocation.y == orig(this.spawnLocation.y)
this.spawnLocation.y == orig(this.policeStationLocation.y)
this.policeStationLocation == orig(this.policeStationLocation)
this.policeStationLocation.x == arg0.size
this.observableLocations == orig(this.observableLocations)
this.observableLocations.getClass().getName() == orig(this.observableLocations.getClass().getName())
this.isAtPoliceStation == orig(this.isAtPoliceStation)
this.isCarryingADrunkard == orig(this.isCarryingADrunkard)
ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled)
this.position == orig(this.position)
this.position.x == orig(this.position.x)
this.position.y == orig(this.position.y)
arg0.topology == orig(arg0.topology)
arg0.topology.getClass().getName() == orig(arg0.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
arg0.size == orig(this.policeStationLocation.x)
arg0.size == orig(arg0.size)
arg0.objects == orig(arg0.objects)
arg0.objects.getClass().getName() == orig(arg0.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
arg0.topology has only one value
arg0.topology != null
arg0.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg0.size == 15
arg0.objects has only one value
arg0.objects != null
arg0.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
return[] elements != null
return[].getClass().getName() elements == ru.spbau.talanov.sd.drunkard.Position.class
return.getClass().getName() == java.util.LinkedList.class
size(return[]) >= 2
this.observableLocations.getClass().getName() != arg0.topology.getClass().getName()
this.observableLocations.getClass().getName() != arg0.objects.getClass().getName()
this.observableLocations.getClass().getName() != return.getClass().getName()
this.position.x <= arg0.size
this.position.y < arg0.size
arg0.topology.getClass().getName() != arg0.objects.getClass().getName()
arg0.topology.getClass().getName() != return.getClass().getName()
arg0.objects.getClass().getName() != return.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.performMove(ru.spbau.talanov.sd.drunkard.SimulationState):::ENTER
this.policeStationLocation.x == arg0.board.size
arg0 has only one value
arg0 != null
arg0.board has only one value
arg0.board != null
arg0.board.topology has only one value
arg0.board.topology != null
arg0.board.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
arg0.board.objects has only one value
arg0.board.objects != null
arg0.board.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
arg0.actors has only one value
arg0.actors != null
arg0.actors[] elements != null
arg0.actors.getClass().getName() == java.util.ArrayList.class
this.observableLocations.getClass().getName() != arg0.board.topology.getClass().getName()
this.observableLocations.getClass().getName() != arg0.board.objects.getClass().getName()
this.observableLocations.getClass().getName() != arg0.actors.getClass().getName()
arg0.board.topology.getClass().getName() != arg0.board.objects.getClass().getName()
arg0.board.topology.getClass().getName() != arg0.actors.getClass().getName()
arg0.board.objects.getClass().getName() != arg0.actors.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.performMove(ru.spbau.talanov.sd.drunkard.SimulationState):::EXIT
this.spawnLocation == orig(this.spawnLocation)
this.spawnLocation.x == orig(this.spawnLocation.x)
this.spawnLocation.y == orig(this.spawnLocation.y)
this.spawnLocation.y == orig(this.policeStationLocation.y)
this.policeStationLocation == orig(this.policeStationLocation)
this.policeStationLocation.x == arg0.board.size
this.policeStationLocation.x == orig(this.policeStationLocation.x)
this.policeStationLocation.x == orig(arg0.board.size)
this.observableLocations == orig(this.observableLocations)
this.observableLocations.getClass().getName() == orig(this.observableLocations.getClass().getName())
ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled)
arg0.board == orig(arg0.board)
arg0.board.topology == orig(arg0.board.topology)
arg0.board.topology.getClass().getName() == orig(arg0.board.topology.getClass().getName())
arg0.board.objects == orig(arg0.board.objects)
arg0.board.objects.getClass().getName() == orig(arg0.board.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
arg0.actors == orig(arg0.actors)
arg0.actors[] == orig(arg0.actors[])
arg0.actors.getClass().getName() == orig(arg0.actors.getClass().getName())
arg0.board has only one value
arg0.board != null
arg0.board.topology has only one value
arg0.board.topology != null
arg0.board.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
arg0.board.objects has only one value
arg0.board.objects != null
arg0.board.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
arg0.actors has only one value
arg0.actors != null
arg0.actors[] elements != null
arg0.actors.getClass().getName() == java.util.ArrayList.class
this.spawnLocation.x > orig(this.position.y)
this.spawnLocation.y < orig(this.position.x)
this.policeStationLocation.x >= orig(this.position.x)
this.policeStationLocation.x > orig(this.position.y)
this.observableLocations.getClass().getName() != arg0.board.topology.getClass().getName()
this.observableLocations.getClass().getName() != arg0.board.objects.getClass().getName()
this.observableLocations.getClass().getName() != arg0.actors.getClass().getName()
this.position.x > orig(this.position.y)
this.position.y < orig(this.position.x)
arg0.board.topology.getClass().getName() != arg0.board.objects.getClass().getName()
arg0.board.topology.getClass().getName() != arg0.actors.getClass().getName()
arg0.board.objects.getClass().getName() != arg0.actors.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.pickUpDrunkard(ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Board):::ENTER
this.policeStationLocation.x == arg1.size
this.isAtPoliceStation == false
this.isCarryingADrunkard == false
arg1 has only one value
arg1.topology has only one value
arg1.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg1.objects has only one value
arg1.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
this.spawnLocation.x > this.position.x
this.spawnLocation.x > arg0.x
this.spawnLocation.x > arg0.y
this.spawnLocation.y < arg0.x
this.policeStationLocation.x > this.position.x
this.policeStationLocation.x > arg0.x
this.policeStationLocation.x > arg0.y
this.observableLocations.getClass().getName() != arg1.topology.getClass().getName()
this.observableLocations.getClass().getName() != arg1.objects.getClass().getName()
this.position.x >= arg0.x
this.position.x > arg0.y
this.position.y < arg0.x
arg0.x > arg0.y
arg1.topology.getClass().getName() != arg1.objects.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.pickUpDrunkard(ru.spbau.talanov.sd.drunkard.Position, ru.spbau.talanov.sd.drunkard.Board):::EXIT
this.spawnLocation == orig(this.spawnLocation)
this.spawnLocation.x == orig(this.spawnLocation.x)
this.spawnLocation.y == orig(this.spawnLocation.y)
this.spawnLocation.y == orig(this.policeStationLocation.y)
this.policeStationLocation == orig(this.policeStationLocation)
this.policeStationLocation.x == arg1.size
this.observableLocations == orig(this.observableLocations)
this.observableLocations.getClass().getName() == orig(this.observableLocations.getClass().getName())
this.isAtPoliceStation == orig(this.isAtPoliceStation)
ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled)
this.position == orig(arg0)
this.position.x == arg0.x
this.position.y == arg0.y
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
arg1.topology == orig(arg1.topology)
arg1.topology.getClass().getName() == orig(arg1.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
arg1.size == orig(this.policeStationLocation.x)
arg1.size == orig(arg1.size)
arg1.objects == orig(arg1.objects)
arg1.objects.getClass().getName() == orig(arg1.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
this.isAtPoliceStation == false
this.isCarryingADrunkard == true
arg1.topology has only one value
arg1.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg1.size == 15
arg1.objects has only one value
arg1.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
this.spawnLocation.x > arg0.x
this.spawnLocation.x > arg0.y
this.spawnLocation.x > orig(this.position.x)
this.spawnLocation.x > orig(this.position.y)
this.spawnLocation.y < arg0.x
this.spawnLocation.y < orig(this.position.x)
this.observableLocations.getClass().getName() != arg1.topology.getClass().getName()
this.observableLocations.getClass().getName() != arg1.objects.getClass().getName()
arg0.x > arg0.y
arg0.x < arg1.size
arg0.x <= orig(this.position.x)
arg0.x > orig(this.position.y)
arg0.y < arg1.size
arg0.y < orig(this.position.x)
arg1.topology.getClass().getName() != arg1.objects.getClass().getName()
arg1.size > orig(this.position.x)
arg1.size > orig(this.position.y)
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.representation():::ENTER
this.isAtPoliceStation == false
this.spawnLocation.x >= this.position.x
this.policeStationLocation.x > this.position.x
===========================================================================
ru.spbau.talanov.sd.drunkard.Policeman.representation():::EXIT
this.spawnLocation == orig(this.spawnLocation)
this.spawnLocation.x == orig(this.spawnLocation.x)
this.spawnLocation.y == orig(this.spawnLocation.y)
this.spawnLocation.y == orig(this.policeStationLocation.y)
this.policeStationLocation == orig(this.policeStationLocation)
this.policeStationLocation.x == orig(this.policeStationLocation.x)
this.observableLocations == orig(this.observableLocations)
this.observableLocations.getClass().getName() == orig(this.observableLocations.getClass().getName())
this.isAtPoliceStation == orig(this.isAtPoliceStation)
this.isCarryingADrunkard == orig(this.isCarryingADrunkard)
ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Policeman.$assertionsDisabled)
this.position == orig(this.position)
this.position.x == orig(this.position.x)
this.position.y == orig(this.position.y)
this.isAtPoliceStation == false
return == 80
this.spawnLocation.x >= this.position.x
this.policeStationLocation.x > this.position.x
===========================================================================
ru.spbau.talanov.sd.drunkard.Position:::OBJECT
this.x >= -1
this.y >= -1
===========================================================================
ru.spbau.talanov.sd.drunkard.Position.Position(int, int):::ENTER
arg0 >= -1
arg1 >= -1
===========================================================================
ru.spbau.talanov.sd.drunkard.Position.Position(int, int):::EXIT
this.x == orig(arg0)
this.y == orig(arg1)
===========================================================================
ru.spbau.talanov.sd.drunkard.Position.at(int, int):::ENTER
arg0 >= -1
arg1 >= -1
===========================================================================
ru.spbau.talanov.sd.drunkard.Position.at(int, int):::EXIT
return.x == orig(arg0)
return.y == orig(arg1)
return != null
return.x >= -1
return.y >= -1
===========================================================================
ru.spbau.talanov.sd.drunkard.Position.equals(java.lang.Object):::ENTER
arg0 != null
arg0.getClass().getName() == ru.spbau.talanov.sd.drunkard.Position.class
===========================================================================
ru.spbau.talanov.sd.drunkard.Position.equals(java.lang.Object):::EXIT29
orig(this) == orig(arg0)
this.x >= 0
this.y >= 0
return == true
===========================================================================
ru.spbau.talanov.sd.drunkard.Position.equals(java.lang.Object):::EXIT29;condition="return == true"
===========================================================================
ru.spbau.talanov.sd.drunkard.Position.equals(java.lang.Object):::EXIT34
===========================================================================
ru.spbau.talanov.sd.drunkard.Position.equals(java.lang.Object):::EXIT34;condition="return == true"
===========================================================================
ru.spbau.talanov.sd.drunkard.Position.equals(java.lang.Object):::EXIT34;condition="not(return == true)"
===========================================================================
ru.spbau.talanov.sd.drunkard.Position.equals(java.lang.Object):::EXIT
this.x == orig(this.x)
this.y == orig(this.y)
===========================================================================
ru.spbau.talanov.sd.drunkard.Position.equals(java.lang.Object):::EXIT;condition="return == true"
return == true
===========================================================================
ru.spbau.talanov.sd.drunkard.Position.equals(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
ru.spbau.talanov.sd.drunkard.Position.getX():::ENTER
===========================================================================
ru.spbau.talanov.sd.drunkard.Position.getX():::EXIT
this.x == return
this.y == orig(this.y)
return == orig(this.x)
return >= -1
===========================================================================
ru.spbau.talanov.sd.drunkard.Position.getY():::ENTER
this.x >= 0
===========================================================================
ru.spbau.talanov.sd.drunkard.Position.getY():::EXIT
this.x == orig(this.x)
this.y == return
return == orig(this.y)
this.x >= 0
return >= -1
===========================================================================
ru.spbau.talanov.sd.drunkard.Position.hashCode():::ENTER
===========================================================================
ru.spbau.talanov.sd.drunkard.Position.hashCode():::EXIT
this.x == orig(this.x)
this.y == orig(this.y)
===========================================================================
ru.spbau.talanov.sd.drunkard.RecyclingPoint:::OBJECT
this has only one value
this.position has only one value
this.position.x == -1
this.position.y == 4
this.representation == 82
===========================================================================
ru.spbau.talanov.sd.drunkard.RecyclingPoint.RecyclingPoint(ru.spbau.talanov.sd.drunkard.Position):::ENTER
arg0 has only one value
arg0.x == -1
arg0.y == 4
===========================================================================
ru.spbau.talanov.sd.drunkard.RecyclingPoint.RecyclingPoint(ru.spbau.talanov.sd.drunkard.Position):::EXIT
this.position == orig(arg0)
this.position.x == arg0.x
this.position.y == arg0.y
arg0.x == orig(arg0.x)
arg0.y == orig(arg0.y)
arg0.x == -1
arg0.y == 4
===========================================================================
ru.spbau.talanov.sd.drunkard.Simulation:::CLASS
ru.spbau.talanov.sd.drunkard.Simulation.movesToReport has only one value
ru.spbau.talanov.sd.drunkard.Simulation.movesToReport != null
ru.spbau.talanov.sd.drunkard.Simulation.movesToReport[] contains no nulls and has only one value, of length 3
ru.spbau.talanov.sd.drunkard.Simulation.movesToReport[] elements != null
ru.spbau.talanov.sd.drunkard.Simulation.movesToReport[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
ru.spbau.talanov.sd.drunkard.Simulation.movesToReport[].getClass().getName() elements == java.lang.Integer.class
ru.spbau.talanov.sd.drunkard.Simulation.movesToReport.getClass().getName() == java.util.Arrays$ArrayList.class
ru.spbau.talanov.sd.drunkard.Simulation.MAX_MOVES == 500
size(ru.spbau.talanov.sd.drunkard.Simulation.movesToReport[]) == 3
===========================================================================
ru.spbau.talanov.sd.drunkard.Simulation:::OBJECT
this has only one value
this.resultOut has only one value
this.resultOut != null
this.debugOut has only one value
this.debugOut != null
this.state has only one value
this.state != null
this.state.board has only one value
this.state.board != null
this.state.board.topology has only one value
this.state.board.topology != null
this.state.board.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
this.state.board.size == 15
this.state.board.objects has only one value
this.state.board.objects != null
this.state.board.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
this.state.actors has only one value
this.state.actors != null
this.state.actors[] elements != null
this.state.actors.getClass().getName() == java.util.ArrayList.class
ru.spbau.talanov.sd.drunkard.Simulation.movesToReport.getClass().getName() != this.state.board.topology.getClass().getName()
ru.spbau.talanov.sd.drunkard.Simulation.movesToReport.getClass().getName() != this.state.board.objects.getClass().getName()
ru.spbau.talanov.sd.drunkard.Simulation.movesToReport.getClass().getName() != this.state.actors.getClass().getName()
this.state.board.topology.getClass().getName() != this.state.board.objects.getClass().getName()
this.state.board.topology.getClass().getName() != this.state.actors.getClass().getName()
this.state.board.objects.getClass().getName() != this.state.actors.getClass().getName()
===========================================================================
ru.spbau.talanov.sd.drunkard.Simulation.Simulation(java.io.PrintStream, java.io.PrintStream):::ENTER
arg0 has only one value
arg1 has only one value
===========================================================================
ru.spbau.talanov.sd.drunkard.Simulation.Simulation(java.io.PrintStream, java.io.PrintStream):::EXIT
this.resultOut == orig(arg0)
this.debugOut == orig(arg1)
this.state.actors[] contains no nulls and has only one value, of length 3
this.state.actors[].getClass().getName() == [ru.spbau.talanov.sd.drunkard.Inn, ru.spbau.talanov.sd.drunkard.Policeman, ru.spbau.talanov.sd.drunkard.Beggar]
size(this.state.actors[]) == 3
===========================================================================
ru.spbau.talanov.sd.drunkard.Simulation.main(java.lang.String[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.lang.String[].class
arg0[] == []
arg0[].toString == []
===========================================================================
ru.spbau.talanov.sd.drunkard.Simulation.main(java.lang.String[]):::EXIT
ru.spbau.talanov.sd.drunkard.Simulation.movesToReport == orig(ru.spbau.talanov.sd.drunkard.Simulation.movesToReport)
ru.spbau.talanov.sd.drunkard.Simulation.movesToReport[] == orig(ru.spbau.talanov.sd.drunkard.Simulation.movesToReport[])
ru.spbau.talanov.sd.drunkard.Simulation.movesToReport.getClass().getName() == orig(ru.spbau.talanov.sd.drunkard.Simulation.movesToReport.getClass().getName())
ru.spbau.talanov.sd.drunkard.Simulation.MAX_MOVES == orig(ru.spbau.talanov.sd.drunkard.Simulation.MAX_MOVES)
arg0[] == orig(arg0[])
arg0[] == []
arg0[].toString == []
===========================================================================
ru.spbau.talanov.sd.drunkard.Simulation.makeMove():::ENTER
===========================================================================
ru.spbau.talanov.sd.drunkard.Simulation.makeMove():::EXIT
this.resultOut == orig(this.resultOut)
this.debugOut == orig(this.debugOut)
ru.spbau.talanov.sd.drunkard.Simulation.movesToReport == orig(ru.spbau.talanov.sd.drunkard.Simulation.movesToReport)
ru.spbau.talanov.sd.drunkard.Simulation.movesToReport[] == orig(ru.spbau.talanov.sd.drunkard.Simulation.movesToReport[])
ru.spbau.talanov.sd.drunkard.Simulation.movesToReport.getClass().getName() == orig(ru.spbau.talanov.sd.drunkard.Simulation.movesToReport.getClass().getName())
ru.spbau.talanov.sd.drunkard.Simulation.MAX_MOVES == orig(ru.spbau.talanov.sd.drunkard.Simulation.MAX_MOVES)
this.state == orig(this.state)
this.state.board == orig(this.state.board)
this.state.board.topology == orig(this.state.board.topology)
this.state.board.topology.getClass().getName() == orig(this.state.board.topology.getClass().getName())
this.state.board.size == orig(this.state.board.size)
this.state.board.objects == orig(this.state.board.objects)
this.state.board.objects.getClass().getName() == orig(this.state.board.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
this.state.actors == orig(this.state.actors)
this.state.actors.getClass().getName() == orig(this.state.actors.getClass().getName())
size(this.state.actors[]) >= orig(size(this.state.actors[]))-1
size(this.state.actors[])-1 <= orig(size(this.state.actors[]))
===========================================================================
ru.spbau.talanov.sd.drunkard.Simulation.output(int, java.io.PrintStream):::ENTER
arg1 != null
===========================================================================
ru.spbau.talanov.sd.drunkard.Simulation.output(int, java.io.PrintStream):::EXIT
this.resultOut == orig(this.resultOut)
this.debugOut == orig(this.debugOut)
ru.spbau.talanov.sd.drunkard.Simulation.movesToReport == orig(ru.spbau.talanov.sd.drunkard.Simulation.movesToReport)
ru.spbau.talanov.sd.drunkard.Simulation.movesToReport[] == orig(ru.spbau.talanov.sd.drunkard.Simulation.movesToReport[])
ru.spbau.talanov.sd.drunkard.Simulation.movesToReport.getClass().getName() == orig(ru.spbau.talanov.sd.drunkard.Simulation.movesToReport.getClass().getName())
ru.spbau.talanov.sd.drunkard.Simulation.MAX_MOVES == orig(ru.spbau.talanov.sd.drunkard.Simulation.MAX_MOVES)
this.state == orig(this.state)
this.state.board == orig(this.state.board)
this.state.board.topology == orig(this.state.board.topology)
this.state.board.topology.getClass().getName() == orig(this.state.board.topology.getClass().getName())
this.state.board.size == orig(this.state.board.size)
this.state.board.objects == orig(this.state.board.objects)
this.state.board.objects.getClass().getName() == orig(this.state.board.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
this.state.actors == orig(this.state.actors)
this.state.actors[] == orig(this.state.actors[])
this.state.actors.getClass().getName() == orig(this.state.actors.getClass().getName())
===========================================================================
ru.spbau.talanov.sd.drunkard.Simulation.simulate():::ENTER
this.state.actors[] contains no nulls and has only one value, of length 3
this.state.actors[].getClass().getName() == [ru.spbau.talanov.sd.drunkard.Inn, ru.spbau.talanov.sd.drunkard.Policeman, ru.spbau.talanov.sd.drunkard.Beggar]
size(this.state.actors[]) == 3
===========================================================================
ru.spbau.talanov.sd.drunkard.Simulation.simulate():::EXIT
this.resultOut == orig(this.resultOut)
this.debugOut == orig(this.debugOut)
ru.spbau.talanov.sd.drunkard.Simulation.movesToReport == orig(ru.spbau.talanov.sd.drunkard.Simulation.movesToReport)
ru.spbau.talanov.sd.drunkard.Simulation.movesToReport[] == orig(ru.spbau.talanov.sd.drunkard.Simulation.movesToReport[])
ru.spbau.talanov.sd.drunkard.Simulation.movesToReport.getClass().getName() == orig(ru.spbau.talanov.sd.drunkard.Simulation.movesToReport.getClass().getName())
ru.spbau.talanov.sd.drunkard.Simulation.MAX_MOVES == orig(ru.spbau.talanov.sd.drunkard.Simulation.MAX_MOVES)
this.state == orig(this.state)
this.state.board == orig(this.state.board)
this.state.board.topology == orig(this.state.board.topology)
this.state.board.topology.getClass().getName() == orig(this.state.board.topology.getClass().getName())
this.state.board.size == orig(this.state.board.size)
this.state.board.objects == orig(this.state.board.objects)
this.state.board.objects.getClass().getName() == orig(this.state.board.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
this.state.actors == orig(this.state.actors)
this.state.actors.getClass().getName() == orig(this.state.actors.getClass().getName())
size(this.state.actors[])-1 == orig(size(this.state.actors[]))
this.state.actors[] contains no nulls and has only one value, of length 4
this.state.actors[].getClass().getName() == [ru.spbau.talanov.sd.drunkard.Inn, ru.spbau.talanov.sd.drunkard.Policeman, ru.spbau.talanov.sd.drunkard.Beggar, ru.spbau.talanov.sd.drunkard.Drunkard]
size(this.state.actors[]) == 4
===========================================================================
ru.spbau.talanov.sd.drunkard.SimulationState:::OBJECT
this has only one value
this.board has only one value
this.board != null
this.board.topology has only one value
this.board.topology != null
this.board.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM != null
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
this.board.size == 15
this.board.objects has only one value
this.board.objects != null
this.board.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
this.actors has only one value
this.actors != null
this.actors[] elements != null
this.actors.getClass().getName() == java.util.ArrayList.class
===========================================================================
ru.spbau.talanov.sd.drunkard.SimulationState.SimulationState(ru.spbau.talanov.sd.drunkard.Board, java.util.List):::ENTER
arg0 has only one value
arg0.topology has only one value
arg0.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg0.size == 15
arg0.objects has only one value
arg0.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
arg1 has only one value
arg1[] contains no nulls and has only one value, of length 3
arg1[].getClass().getName() == [ru.spbau.talanov.sd.drunkard.Inn, ru.spbau.talanov.sd.drunkard.Policeman, ru.spbau.talanov.sd.drunkard.Beggar]
arg1.getClass().getName() == java.util.Arrays$ArrayList.class
size(arg1[]) == 3
===========================================================================
ru.spbau.talanov.sd.drunkard.SimulationState.SimulationState(ru.spbau.talanov.sd.drunkard.Board, java.util.List):::EXIT
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
arg0.topology == orig(arg0.topology)
arg0.topology.getClass().getName() == orig(arg0.topology.getClass().getName())
arg0.size == orig(arg0.size)
arg0.objects == orig(arg0.objects)
arg0.objects.getClass().getName() == orig(arg0.objects.getClass().getName())
arg1[] == orig(arg1[])
this.actors[] contains no nulls and has only one value, of length 3
this.actors[].getClass().getName() == [ru.spbau.talanov.sd.drunkard.Inn, ru.spbau.talanov.sd.drunkard.Policeman, ru.spbau.talanov.sd.drunkard.Beggar]
arg0.topology has only one value
arg0.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
arg0.size == 15
arg0.objects has only one value
arg0.objects.getClass().getName() == java.util.HashMap.class
arg1[] contains no nulls and has only one value, of length 3
arg1[].getClass().getName() == [ru.spbau.talanov.sd.drunkard.Inn, ru.spbau.talanov.sd.drunkard.Policeman, ru.spbau.talanov.sd.drunkard.Beggar]
size(this.actors[]) == 3
===========================================================================
ru.spbau.talanov.sd.drunkard.SimulationState.addActor(ru.spbau.talanov.sd.drunkard.Actor):::ENTER
arg0 != null
arg0.getClass().getName() == ru.spbau.talanov.sd.drunkard.Drunkard.class
===========================================================================
ru.spbau.talanov.sd.drunkard.SimulationState.addActor(ru.spbau.talanov.sd.drunkard.Actor):::EXIT
this.board == orig(this.board)
this.board.topology == orig(this.board.topology)
this.board.topology.getClass().getName() == orig(this.board.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.board.size == orig(this.board.size)
this.board.objects == orig(this.board.objects)
this.board.objects.getClass().getName() == orig(this.board.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
this.actors == orig(this.actors)
this.actors.getClass().getName() == orig(this.actors.getClass().getName())
size(this.actors[])-1 == orig(size(this.actors[]))
===========================================================================
ru.spbau.talanov.sd.drunkard.SimulationState.getActors():::ENTER
===========================================================================
ru.spbau.talanov.sd.drunkard.SimulationState.getActors():::EXIT
this.board == orig(this.board)
this.board.topology == orig(this.board.topology)
this.board.topology.getClass().getName() == orig(this.board.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.board.size == orig(this.board.size)
this.board.objects == orig(this.board.objects)
this.board.objects.getClass().getName() == orig(this.board.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
this.actors == orig(this.actors)
this.actors[] == orig(this.actors[])
this.actors.getClass().getName() == orig(this.actors.getClass().getName())
return != null
return[] elements != null
return.getClass().getName() == java.util.ArrayList.class
===========================================================================
ru.spbau.talanov.sd.drunkard.SimulationState.getBoard():::ENTER
===========================================================================
ru.spbau.talanov.sd.drunkard.SimulationState.getBoard():::EXIT
this.board == orig(this.board)
this.board.topology == orig(this.board.topology)
this.board.topology.getClass().getName() == orig(this.board.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.board.size == orig(this.board.size)
this.board.objects == orig(this.board.objects)
this.board.objects.getClass().getName() == orig(this.board.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
this.actors == orig(this.actors)
this.actors[] == orig(this.actors[])
this.actors.getClass().getName() == orig(this.actors.getClass().getName())
return has only one value
return != null
return.topology has only one value
return.topology != null
return.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
return.size == 15
return.objects has only one value
return.objects != null
return.objects.getClass().getName() == java.util.HashMap.class
===========================================================================
ru.spbau.talanov.sd.drunkard.SimulationState.initialState(ru.spbau.talanov.sd.drunkard.Board, java.util.List):::ENTER
arg0 has only one value
arg0.topology has only one value
arg0.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg0.size == 15
arg0.objects has only one value
arg0.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
arg1 has only one value
arg1[] contains no nulls and has only one value, of length 3
arg1[].getClass().getName() == [ru.spbau.talanov.sd.drunkard.Inn, ru.spbau.talanov.sd.drunkard.Policeman, ru.spbau.talanov.sd.drunkard.Beggar]
arg1.getClass().getName() == java.util.Arrays$ArrayList.class
size(arg1[]) == 3
===========================================================================
ru.spbau.talanov.sd.drunkard.SimulationState.initialState(ru.spbau.talanov.sd.drunkard.Board, java.util.List):::EXIT
arg0.topology == orig(arg0.topology)
arg0.topology.getClass().getName() == orig(arg0.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
arg0.size == orig(arg0.size)
arg0.objects == orig(arg0.objects)
arg0.objects.getClass().getName() == orig(arg0.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
arg1[] == orig(arg1[])
arg0.topology has only one value
arg0.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM has only one value
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == false
arg0.size == 15
arg0.objects has only one value
arg0.objects.getClass().getName() == java.util.HashMap.class
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == false
arg1[] contains no nulls and has only one value, of length 3
arg1[].getClass().getName() == [ru.spbau.talanov.sd.drunkard.Inn, ru.spbau.talanov.sd.drunkard.Policeman, ru.spbau.talanov.sd.drunkard.Beggar]
return has only one value
return.board has only one value
return.board.topology has only one value
return.board.topology.getClass().getName() == ru.spbau.talanov.sd.drunkard.HexagonalTopology.class
return.board.size == 15
return.board.objects has only one value
return.board.objects.getClass().getName() == java.util.HashMap.class
return.actors has only one value
return.actors[] contains no nulls and has only one value, of length 3
return.actors[].getClass().getName() == [ru.spbau.talanov.sd.drunkard.Inn, ru.spbau.talanov.sd.drunkard.Policeman, ru.spbau.talanov.sd.drunkard.Beggar]
return.actors.getClass().getName() == java.util.ArrayList.class
size(return.actors[]) == 3
===========================================================================
ru.spbau.talanov.sd.drunkard.SimulationState.removeActor(ru.spbau.talanov.sd.drunkard.Actor):::ENTER
arg0 != null
arg0.getClass().getName() == ru.spbau.talanov.sd.drunkard.Drunkard.class
===========================================================================
ru.spbau.talanov.sd.drunkard.SimulationState.removeActor(ru.spbau.talanov.sd.drunkard.Actor):::EXIT
this.board == orig(this.board)
this.board.topology == orig(this.board.topology)
this.board.topology.getClass().getName() == orig(this.board.topology.getClass().getName())
ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.RANDOM)
ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.BoardTopology.$assertionsDisabled)
this.board.size == orig(this.board.size)
this.board.objects == orig(this.board.objects)
this.board.objects.getClass().getName() == orig(this.board.objects.getClass().getName())
ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled == orig(ru.spbau.talanov.sd.drunkard.Board.$assertionsDisabled)
this.actors == orig(this.actors)
this.actors.getClass().getName() == orig(this.actors.getClass().getName())
size(this.actors[]) == orig(size(this.actors[]))-1
Exiting Daikon.
