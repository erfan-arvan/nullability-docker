Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

===========================================================================
org.apache.log4j.Category:::OBJECT
this.name != null
this.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player", "root" }
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.OFF != null
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.FATAL != null
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.ERROR != null
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.WARN != null
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.INFO != null
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.DEBUG != null
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.TRACE != null
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.ALL != null
org.apache.log4j.Level.class$org$apache$log4j$Level == null
org.apache.log4j.Level.OFF.level == 2147483647
org.apache.log4j.Level.OFF.levelStr has only one value
org.apache.log4j.Level.OFF.levelStr != null
org.apache.log4j.Level.OFF.levelStr.toString == "OFF"
org.apache.log4j.Level.OFF.syslogEquivalent == 0
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.FATAL != null
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.ERROR != null
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.WARN != null
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.INFO != null
org.apache.log4j.Priority.DEBUG has only one value
org.apache.log4j.Priority.DEBUG != null
org.apache.log4j.Level.FATAL.level == 50000
org.apache.log4j.Level.FATAL.levelStr has only one value
org.apache.log4j.Level.FATAL.levelStr != null
org.apache.log4j.Level.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Level.FATAL.syslogEquivalent == 0
org.apache.log4j.Level.ERROR.level == 40000
org.apache.log4j.Level.ERROR.levelStr has only one value
org.apache.log4j.Level.ERROR.levelStr != null
org.apache.log4j.Level.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Level.ERROR.syslogEquivalent == 3
org.apache.log4j.Level.WARN.level == 30000
org.apache.log4j.Level.WARN.levelStr has only one value
org.apache.log4j.Level.WARN.levelStr != null
org.apache.log4j.Level.WARN.levelStr.toString == "WARN"
org.apache.log4j.Level.WARN.syslogEquivalent == 4
org.apache.log4j.Level.INFO.level == 20000
org.apache.log4j.Level.INFO.levelStr has only one value
org.apache.log4j.Level.INFO.levelStr != null
org.apache.log4j.Level.INFO.levelStr.toString == "INFO"
org.apache.log4j.Level.INFO.syslogEquivalent == 6
org.apache.log4j.Level.DEBUG.level == 10000
org.apache.log4j.Level.DEBUG.levelStr has only one value
org.apache.log4j.Level.DEBUG.levelStr != null
org.apache.log4j.Level.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Level.DEBUG.syslogEquivalent == 7
org.apache.log4j.Level.TRACE.level == 5000
org.apache.log4j.Level.TRACE.levelStr has only one value
org.apache.log4j.Level.TRACE.levelStr != null
org.apache.log4j.Level.TRACE.levelStr.toString == "TRACE"
org.apache.log4j.Level.TRACE.syslogEquivalent == 7
org.apache.log4j.Level.ALL.level == -2147483648
org.apache.log4j.Level.ALL.levelStr has only one value
org.apache.log4j.Level.ALL.levelStr != null
org.apache.log4j.Level.ALL.levelStr.toString == "ALL"
org.apache.log4j.Level.ALL.syslogEquivalent == 7
this.level.level == 10000
this.level.levelStr has only one value
this.level.levelStr.toString == "DEBUG"
this.level.syslogEquivalent == 7
org.apache.log4j.Priority.FATAL.level == 50000
org.apache.log4j.Priority.FATAL.levelStr has only one value
org.apache.log4j.Priority.FATAL.levelStr != null
org.apache.log4j.Priority.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Priority.FATAL.syslogEquivalent == 0
org.apache.log4j.Priority.ERROR.level == 40000
org.apache.log4j.Priority.ERROR.levelStr has only one value
org.apache.log4j.Priority.ERROR.levelStr != null
org.apache.log4j.Priority.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Priority.ERROR.syslogEquivalent == 3
org.apache.log4j.Priority.WARN.level == 30000
org.apache.log4j.Priority.WARN.levelStr has only one value
org.apache.log4j.Priority.WARN.levelStr != null
org.apache.log4j.Priority.WARN.levelStr.toString == "WARN"
org.apache.log4j.Priority.WARN.syslogEquivalent == 4
org.apache.log4j.Priority.INFO.level == 20000
org.apache.log4j.Priority.INFO.levelStr has only one value
org.apache.log4j.Priority.INFO.levelStr != null
org.apache.log4j.Priority.INFO.levelStr.toString == "INFO"
org.apache.log4j.Priority.INFO.syslogEquivalent == 6
org.apache.log4j.Priority.DEBUG.level == 10000
org.apache.log4j.Priority.DEBUG.levelStr has only one value
org.apache.log4j.Priority.DEBUG.levelStr != null
org.apache.log4j.Priority.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Priority.DEBUG.syslogEquivalent == 7
this.parent.name has only one value
this.parent.name != null
this.parent.name.toString == "root"
this.parent.level has only one value
this.parent.level != null
this.parent.level.level == 10000
this.parent.level.levelStr has only one value
this.parent.level.levelStr != null
this.parent.level.levelStr.toString == "DEBUG"
this.parent.level.syslogEquivalent == 7
this.parent.parent == null
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN != null
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
org.apache.log4j.Category.class$org$apache$log4j$Category != null
this.parent.resourceBundle == null
this.parent.repository has only one value
this.parent.repository != null
this.parent.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
this.parent.aai == null
this.parent.additive == true
this.resourceBundle == null
this.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
this.aai == null
this.additive == true
===========================================================================
org.apache.log4j.Category.Category(java.lang.String):::ENTER
name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player", "root" }
===========================================================================
org.apache.log4j.Category.Category(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.level == null
this.parent == null
this.repository == null
name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player", "root" }
===========================================================================
org.apache.log4j.Category.callAppenders(org.apache.log4j.spi.LoggingEvent):::ENTER
this.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
this.level == null
this.parent has only one value
this.repository has only one value
org.apache.log4j.spi.LoggingEvent.startTime == 1743932172706L
event.fqnOfCategoryClass has only one value
event.fqnOfCategoryClass.toString == "org.apache.log4j.Category"
event.logger.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
event.logger.level == null
event.logger.parent has only one value
event.logger.resourceBundle == null
event.logger.repository has only one value
event.logger.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
event.logger.aai == null
event.logger.additive == true
event.categoryName.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
event.level has only one value
event.level.level == 20000
event.level.levelStr has only one value
event.level.levelStr.toString == "INFO"
event.level.syslogEquivalent == 6
event.ndc == null
event.mdcCopy == null
event.ndcLookupRequired == true
event.mdcCopyLookupRequired == true
event.message.getClass().getName() == java.lang.String.class
event.renderedMessage == null
event.threadName == null
event.throwableInfo == null
event.locationInfo == null
org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY has only one value
org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY.getClass().getName() == java.lang.Integer[].class
org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY[] == [null]
org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY[] elements == null
org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY[].getClass().getName() == [null]
org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY[].getClass().getName() elements == null
org.apache.log4j.spi.LoggingEvent.TO_LEVEL has only one value
org.apache.log4j.spi.LoggingEvent.TO_LEVEL.toString == "toLevel"
org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS has only one value
org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS.getClass().getName() == java.lang.Class[].class
org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS[] contains no nulls and has only one value, of length 1
org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS[] elements has only one value
org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS[].getClass().getName() == [java.lang.Class]
org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS[].getClass().getName() elements == java.lang.Class.class
org.apache.log4j.spi.LoggingEvent.methodCache has only one value
org.apache.log4j.spi.LoggingEvent.class$org$apache$log4j$Level == null
size(org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY[]) == 1
size(org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS[]) == 1
===========================================================================
org.apache.log4j.Category.callAppenders(org.apache.log4j.spi.LoggingEvent):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.level == orig(this.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.parent == orig(this.parent)
this.parent.name == orig(this.parent.name)
this.parent.name.toString == orig(this.parent.name.toString)
this.parent.level == orig(this.parent.level)
this.parent.level.level == orig(this.parent.level.level)
this.parent.level.levelStr == orig(this.parent.level.levelStr)
this.parent.level.levelStr.toString == orig(this.parent.level.levelStr.toString)
this.parent.level.syslogEquivalent == orig(this.parent.level.syslogEquivalent)
this.parent.parent == orig(this.parent.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.parent.resourceBundle == orig(this.parent.resourceBundle)
this.parent.repository == orig(this.parent.repository)
this.parent.repository.getClass().getName() == orig(this.parent.repository.getClass().getName())
this.parent.aai == orig(this.parent.aai)
this.parent.additive == orig(this.parent.additive)
this.resourceBundle == orig(this.resourceBundle)
this.repository == orig(this.repository)
this.repository.getClass().getName() == orig(this.repository.getClass().getName())
this.aai == orig(this.aai)
this.additive == orig(this.additive)
org.apache.log4j.spi.LoggingEvent.startTime == orig(org.apache.log4j.spi.LoggingEvent.startTime)
event.fqnOfCategoryClass == orig(event.fqnOfCategoryClass)
event.fqnOfCategoryClass.toString == orig(event.fqnOfCategoryClass.toString)
event.logger == orig(event.logger)
event.logger.name == orig(event.logger.name)
event.logger.name.toString == orig(event.logger.name.toString)
event.logger.level == orig(event.logger.level)
event.logger.parent == orig(event.logger.parent)
event.logger.resourceBundle == orig(event.logger.resourceBundle)
event.logger.repository == orig(event.logger.repository)
event.logger.repository.getClass().getName() == orig(event.logger.repository.getClass().getName())
event.logger.aai == orig(event.logger.aai)
event.logger.additive == orig(event.logger.additive)
event.categoryName == orig(event.categoryName)
event.categoryName.toString == orig(event.categoryName.toString)
event.level == orig(event.level)
event.level.level == orig(event.level.level)
event.level.levelStr == orig(event.level.levelStr)
event.level.levelStr.toString == orig(event.level.levelStr.toString)
event.level.syslogEquivalent == orig(event.level.syslogEquivalent)
event.ndc == orig(event.ndc)
event.mdcCopy == orig(event.mdcCopy)
event.ndcLookupRequired == orig(event.ndcLookupRequired)
event.mdcCopyLookupRequired == orig(event.mdcCopyLookupRequired)
event.message == orig(event.message)
event.message.getClass().getName() == orig(event.message.getClass().getName())
event.renderedMessage == orig(event.renderedMessage)
event.threadName == orig(event.threadName)
event.throwableInfo == orig(event.throwableInfo)
event.timeStamp == orig(event.timeStamp)
event.locationInfo == orig(event.locationInfo)
org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY == orig(org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY)
org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY.getClass().getName() == orig(org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY.getClass().getName())
org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY[] == orig(org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY[])
org.apache.log4j.spi.LoggingEvent.TO_LEVEL == orig(org.apache.log4j.spi.LoggingEvent.TO_LEVEL)
org.apache.log4j.spi.LoggingEvent.TO_LEVEL.toString == orig(org.apache.log4j.spi.LoggingEvent.TO_LEVEL.toString)
org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS == orig(org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS)
org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS.getClass().getName() == orig(org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS.getClass().getName())
org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS[] == orig(org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS[])
org.apache.log4j.spi.LoggingEvent.methodCache == orig(org.apache.log4j.spi.LoggingEvent.methodCache)
org.apache.log4j.spi.LoggingEvent.class$org$apache$log4j$Level == orig(org.apache.log4j.spi.LoggingEvent.class$org$apache$log4j$Level)
this.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
this.level == null
this.parent has only one value
this.repository has only one value
org.apache.log4j.spi.LoggingEvent.startTime == 1743932172706L
event.fqnOfCategoryClass has only one value
event.fqnOfCategoryClass.toString == "org.apache.log4j.Category"
event.logger.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
event.logger.level == null
event.logger.parent has only one value
event.logger.resourceBundle == null
event.logger.repository has only one value
event.logger.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
event.logger.aai == null
event.logger.additive == true
event.categoryName.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
event.level has only one value
event.level.level == 20000
event.level.levelStr has only one value
event.level.levelStr.toString == "INFO"
event.level.syslogEquivalent == 6
event.ndc == null
event.mdcCopy == null
event.ndcLookupRequired == true
event.mdcCopyLookupRequired == true
event.message.getClass().getName() == java.lang.String.class
event.renderedMessage == null
event.threadName == null
event.throwableInfo == null
event.locationInfo == null
org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY has only one value
org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY.getClass().getName() == java.lang.Integer[].class
org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY[] == [null]
org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY[] elements == null
org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY[].getClass().getName() == [null]
org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY[].getClass().getName() elements == null
org.apache.log4j.spi.LoggingEvent.TO_LEVEL has only one value
org.apache.log4j.spi.LoggingEvent.TO_LEVEL.toString == "toLevel"
org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS has only one value
org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS.getClass().getName() == java.lang.Class[].class
org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS[] contains no nulls and has only one value, of length 1
org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS[] elements has only one value
org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS[].getClass().getName() == [java.lang.Class]
org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS[].getClass().getName() elements == java.lang.Class.class
org.apache.log4j.spi.LoggingEvent.methodCache has only one value
org.apache.log4j.spi.LoggingEvent.class$org$apache$log4j$Level == null
size(org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY[]) == 1
size(org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS[]) == 1
===========================================================================
org.apache.log4j.Category.class$(java.lang.String):::ENTER
x0 has only one value
x0.toString == "org.apache.log4j.Category"
===========================================================================
org.apache.log4j.Category.class$(java.lang.String):::EXIT
x0.toString == orig(x0.toString)
x0.toString == "org.apache.log4j.Category"
return has only one value
===========================================================================
org.apache.log4j.Category.forcedLog(java.lang.String, org.apache.log4j.Priority, java.lang.Object, java.lang.Throwable):::ENTER
this.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
this.level == null
this.parent has only one value
this.repository has only one value
fqcn has only one value
fqcn.toString == "org.apache.log4j.Category"
level has only one value
level.level == 20000
level.levelStr has only one value
level.levelStr.toString == "INFO"
level.syslogEquivalent == 6
message.getClass().getName() == java.lang.String.class
t == null
===========================================================================
org.apache.log4j.Category.forcedLog(java.lang.String, org.apache.log4j.Priority, java.lang.Object, java.lang.Throwable):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.level == orig(this.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.parent == orig(this.parent)
this.parent.name == orig(this.parent.name)
this.parent.name.toString == orig(this.parent.name.toString)
this.parent.level == orig(this.parent.level)
this.parent.level.level == orig(this.parent.level.level)
this.parent.level.levelStr == orig(this.parent.level.levelStr)
this.parent.level.levelStr.toString == orig(this.parent.level.levelStr.toString)
this.parent.level.syslogEquivalent == orig(this.parent.level.syslogEquivalent)
this.parent.parent == orig(this.parent.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.parent.resourceBundle == orig(this.parent.resourceBundle)
this.parent.repository == orig(this.parent.repository)
this.parent.repository.getClass().getName() == orig(this.parent.repository.getClass().getName())
this.parent.aai == orig(this.parent.aai)
this.parent.additive == orig(this.parent.additive)
this.resourceBundle == orig(this.resourceBundle)
this.repository == orig(this.repository)
this.repository.getClass().getName() == orig(this.repository.getClass().getName())
this.aai == orig(this.aai)
this.additive == orig(this.additive)
fqcn.toString == orig(fqcn.toString)
level.level == orig(level.level)
level.levelStr == orig(level.levelStr)
level.levelStr.toString == orig(level.levelStr.toString)
level.syslogEquivalent == orig(level.syslogEquivalent)
this.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
this.level == null
this.parent has only one value
this.repository has only one value
fqcn.toString == "org.apache.log4j.Category"
level.level == 20000
level.levelStr has only one value
level.levelStr.toString == "INFO"
level.syslogEquivalent == 6
===========================================================================
org.apache.log4j.Category.getEffectiveLevel():::ENTER
this.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
this.level == null
this.parent has only one value
this.repository has only one value
===========================================================================
org.apache.log4j.Category.getEffectiveLevel():::EXIT441
===========================================================================
org.apache.log4j.Category.getEffectiveLevel():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.level == orig(this.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.parent == orig(this.parent)
this.parent.name == orig(this.parent.name)
this.parent.name.toString == orig(this.parent.name.toString)
this.parent.level == orig(this.parent.level)
this.parent.level.level == orig(this.parent.level.level)
this.parent.level.levelStr == orig(this.parent.level.levelStr)
this.parent.level.levelStr.toString == orig(this.parent.level.levelStr.toString)
this.parent.level.syslogEquivalent == orig(this.parent.level.syslogEquivalent)
this.parent.parent == orig(this.parent.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.parent.resourceBundle == orig(this.parent.resourceBundle)
this.parent.repository == orig(this.parent.repository)
this.parent.repository.getClass().getName() == orig(this.parent.repository.getClass().getName())
this.parent.aai == orig(this.parent.aai)
this.parent.additive == orig(this.parent.additive)
this.resourceBundle == orig(this.resourceBundle)
this.repository == orig(this.repository)
this.repository.getClass().getName() == orig(this.repository.getClass().getName())
this.aai == orig(this.aai)
this.additive == orig(this.additive)
this.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
this.level == null
this.parent has only one value
this.repository has only one value
return has only one value
return.level == 10000
return.levelStr has only one value
return.levelStr.toString == "DEBUG"
return.syslogEquivalent == 7
===========================================================================
org.apache.log4j.Category.getName():::ENTER
this.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
this.level == null
this.parent has only one value
this.repository has only one value
===========================================================================
org.apache.log4j.Category.getName():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.level == orig(this.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.parent == orig(this.parent)
this.parent.name == orig(this.parent.name)
this.parent.name.toString == orig(this.parent.name.toString)
this.parent.level == orig(this.parent.level)
this.parent.level.level == orig(this.parent.level.level)
this.parent.level.levelStr == orig(this.parent.level.levelStr)
this.parent.level.levelStr.toString == orig(this.parent.level.levelStr.toString)
this.parent.level.syslogEquivalent == orig(this.parent.level.syslogEquivalent)
this.parent.parent == orig(this.parent.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.parent.resourceBundle == orig(this.parent.resourceBundle)
this.parent.repository == orig(this.parent.repository)
this.parent.repository.getClass().getName() == orig(this.parent.repository.getClass().getName())
this.parent.aai == orig(this.parent.aai)
this.parent.additive == orig(this.parent.additive)
this.resourceBundle == orig(this.resourceBundle)
this.repository == orig(this.repository)
this.repository.getClass().getName() == orig(this.repository.getClass().getName())
this.aai == orig(this.aai)
this.additive == orig(this.additive)
this.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
this.level == null
this.parent has only one value
this.repository has only one value
return.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
===========================================================================
org.apache.log4j.Category.info(java.lang.Object):::ENTER
this.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
this.level == null
this.parent has only one value
this.repository has only one value
message.getClass().getName() == java.lang.String.class
===========================================================================
org.apache.log4j.Category.info(java.lang.Object):::EXIT664
===========================================================================
org.apache.log4j.Category.info(java.lang.Object):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.level == orig(this.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.parent == orig(this.parent)
this.parent.name == orig(this.parent.name)
this.parent.name.toString == orig(this.parent.name.toString)
this.parent.level == orig(this.parent.level)
this.parent.level.level == orig(this.parent.level.level)
this.parent.level.levelStr == orig(this.parent.level.levelStr)
this.parent.level.levelStr.toString == orig(this.parent.level.levelStr.toString)
this.parent.level.syslogEquivalent == orig(this.parent.level.syslogEquivalent)
this.parent.parent == orig(this.parent.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.parent.resourceBundle == orig(this.parent.resourceBundle)
this.parent.repository == orig(this.parent.repository)
this.parent.repository.getClass().getName() == orig(this.parent.repository.getClass().getName())
this.parent.aai == orig(this.parent.aai)
this.parent.additive == orig(this.parent.additive)
this.resourceBundle == orig(this.resourceBundle)
this.repository == orig(this.repository)
this.repository.getClass().getName() == orig(this.repository.getClass().getName())
this.aai == orig(this.aai)
this.additive == orig(this.additive)
this.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
this.level == null
this.parent has only one value
this.repository has only one value
===========================================================================
org.apache.log4j.Category.setHierarchy(org.apache.log4j.spi.LoggerRepository):::ENTER
this.parent == null
this.repository == null
repository has only one value
repository.getClass().getName() == org.apache.log4j.Hierarchy.class
===========================================================================
org.apache.log4j.Category.setHierarchy(org.apache.log4j.spi.LoggerRepository):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.level == orig(this.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
this.level.level == orig(this.level.level)
this.level.levelStr == orig(this.level.levelStr)
this.level.levelStr.toString == orig(this.level.levelStr.toString)
this.level.syslogEquivalent == orig(this.level.syslogEquivalent)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.parent == orig(this.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.resourceBundle == orig(this.resourceBundle)
this.aai == orig(this.aai)
this.additive == orig(this.additive)
this.parent == null
this.repository has only one value
===========================================================================
org.apache.log4j.CategoryKey:::CLASS
===========================================================================
org.apache.log4j.CategoryKey:::OBJECT
this.name != null
===========================================================================
org.apache.log4j.CategoryKey.CategoryKey(java.lang.String):::ENTER
===========================================================================
org.apache.log4j.CategoryKey.CategoryKey(java.lang.String):::EXIT
this.name == orig(name)
name.toString == orig(name.toString)
===========================================================================
org.apache.log4j.CategoryKey.class$(java.lang.String):::ENTER
org.apache.log4j.CategoryKey.class$org$apache$log4j$CategoryKey == null
x0 has only one value
x0.toString == "org.apache.log4j.CategoryKey"
===========================================================================
org.apache.log4j.CategoryKey.class$(java.lang.String):::EXIT
org.apache.log4j.CategoryKey.class$org$apache$log4j$CategoryKey == orig(org.apache.log4j.CategoryKey.class$org$apache$log4j$CategoryKey)
x0.toString == orig(x0.toString)
org.apache.log4j.CategoryKey.class$org$apache$log4j$CategoryKey == null
x0.toString == "org.apache.log4j.CategoryKey"
return has only one value
===========================================================================
org.apache.log4j.CategoryKey.equals(java.lang.Object):::ENTER
this.name.toString one of { "org", "org.nerv", "org.nerv.rpgclient" }
this.hashCache one of { -1720996021, 110308, 1269285637 }
rArg.getClass().getName() == org.apache.log4j.CategoryKey.class
===========================================================================
org.apache.log4j.CategoryKey.equals(java.lang.Object):::EXIT47
===========================================================================
org.apache.log4j.CategoryKey.equals(java.lang.Object):::EXIT47;condition="return == true"
===========================================================================
org.apache.log4j.CategoryKey.equals(java.lang.Object):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.hashCache == orig(this.hashCache)
this.name.toString one of { "org", "org.nerv", "org.nerv.rpgclient" }
this.hashCache one of { -1720996021, 110308, 1269285637 }
org.apache.log4j.CategoryKey.class$org$apache$log4j$CategoryKey has only one value
return == true
===========================================================================
org.apache.log4j.CategoryKey.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
org.apache.log4j.CategoryKey.hashCode():::ENTER
===========================================================================
org.apache.log4j.CategoryKey.hashCode():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.hashCache == orig(this.hashCache)
org.apache.log4j.CategoryKey.class$org$apache$log4j$CategoryKey == orig(org.apache.log4j.CategoryKey.class$org$apache$log4j$CategoryKey)
===========================================================================
org.apache.log4j.DefaultCategoryFactory:::OBJECT
this has only one value
===========================================================================
org.apache.log4j.DefaultCategoryFactory.DefaultCategoryFactory():::EXIT
===========================================================================
org.apache.log4j.DefaultCategoryFactory.makeNewLoggerInstance(java.lang.String):::ENTER
name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
===========================================================================
org.apache.log4j.DefaultCategoryFactory.makeNewLoggerInstance(java.lang.String):::EXIT
name.toString == orig(name.toString)
return.name == orig(name)
name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
org.apache.log4j.Logger.FQCN has only one value
org.apache.log4j.Logger.FQCN.toString == "org.apache.log4j.Logger"
org.apache.log4j.Logger.class$org$apache$log4j$Logger has only one value
return.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
return.level == null
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.class$org$apache$log4j$Level == null
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
return.parent == null
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
return.resourceBundle == null
return.repository == null
return.aai == null
return.additive == true
===========================================================================
org.apache.log4j.Hierarchy:::OBJECT
this.thresholdInt == this.threshold.level
org.apache.log4j.Level.FATAL.levelStr == org.apache.log4j.Priority.FATAL.levelStr
org.apache.log4j.Level.ERROR.levelStr == org.apache.log4j.Priority.ERROR.levelStr
org.apache.log4j.Level.WARN.levelStr == org.apache.log4j.Priority.WARN.levelStr
org.apache.log4j.Level.INFO.levelStr == org.apache.log4j.Priority.INFO.levelStr
org.apache.log4j.Level.DEBUG.levelStr == org.apache.log4j.Priority.DEBUG.levelStr
this has only one value
this.defaultFactory.getClass().getName() == org.apache.log4j.DefaultCategoryFactory.class
this.listeners has only one value
this.listeners != null
this.listeners[] == []
this.listeners[].getClass().getName() == []
this.ht has only one value
this.ht != null
this.root has only one value
this.root != null
org.apache.log4j.Logger.FQCN has only one value
org.apache.log4j.Logger.FQCN != null
org.apache.log4j.Logger.FQCN.toString == "org.apache.log4j.Logger"
org.apache.log4j.Logger.class$org$apache$log4j$Logger has only one value
org.apache.log4j.Logger.class$org$apache$log4j$Logger != null
this.root.name has only one value
this.root.name != null
this.root.name.toString == "root"
this.root.level has only one value
this.root.level != null
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.OFF != null
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.FATAL != null
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.ERROR != null
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.WARN != null
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.INFO != null
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.DEBUG != null
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.TRACE != null
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.ALL != null
org.apache.log4j.Level.class$org$apache$log4j$Level == null
this.root.level.level == 10000
this.root.level.levelStr has only one value
this.root.level.levelStr != null
this.root.level.levelStr.toString == "DEBUG"
this.root.level.syslogEquivalent == 7
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.FATAL != null
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.ERROR != null
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.WARN != null
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.INFO != null
org.apache.log4j.Priority.DEBUG has only one value
org.apache.log4j.Priority.DEBUG != null
this.root.parent == null
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN != null
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
org.apache.log4j.Category.class$org$apache$log4j$Category != null
this.root.resourceBundle == null
this.root.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
this.root.aai == null
this.root.additive == true
this.rendererMap.map has only one value
this.rendererMap.map != null
org.apache.log4j.or.RendererMap.defaultRenderer has only one value
org.apache.log4j.or.RendererMap.defaultRenderer != null
org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName() == org.apache.log4j.or.DefaultRenderer.class
org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer == null
this.thresholdInt one of { -2147483648, 0 }
org.apache.log4j.Level.OFF.level == 2147483647
org.apache.log4j.Level.OFF.levelStr has only one value
org.apache.log4j.Level.OFF.levelStr != null
org.apache.log4j.Level.OFF.levelStr.toString == "OFF"
org.apache.log4j.Level.OFF.syslogEquivalent == 0
org.apache.log4j.Level.FATAL.level == 50000
org.apache.log4j.Level.FATAL.levelStr has only one value
org.apache.log4j.Level.FATAL.levelStr != null
org.apache.log4j.Level.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Level.FATAL.syslogEquivalent == 0
org.apache.log4j.Level.ERROR.level == 40000
org.apache.log4j.Level.ERROR.levelStr has only one value
org.apache.log4j.Level.ERROR.levelStr != null
org.apache.log4j.Level.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Level.ERROR.syslogEquivalent == 3
org.apache.log4j.Level.WARN.level == 30000
org.apache.log4j.Level.WARN.levelStr has only one value
org.apache.log4j.Level.WARN.levelStr != null
org.apache.log4j.Level.WARN.levelStr.toString == "WARN"
org.apache.log4j.Level.WARN.syslogEquivalent == 4
org.apache.log4j.Level.INFO.level == 20000
org.apache.log4j.Level.INFO.levelStr has only one value
org.apache.log4j.Level.INFO.levelStr != null
org.apache.log4j.Level.INFO.levelStr.toString == "INFO"
org.apache.log4j.Level.INFO.syslogEquivalent == 6
org.apache.log4j.Level.DEBUG.level == 10000
org.apache.log4j.Level.DEBUG.levelStr has only one value
org.apache.log4j.Level.DEBUG.levelStr != null
org.apache.log4j.Level.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Level.DEBUG.syslogEquivalent == 7
org.apache.log4j.Level.TRACE.level == 5000
org.apache.log4j.Level.TRACE.levelStr has only one value
org.apache.log4j.Level.TRACE.levelStr != null
org.apache.log4j.Level.TRACE.levelStr.toString == "TRACE"
org.apache.log4j.Level.TRACE.syslogEquivalent == 7
org.apache.log4j.Level.ALL.level == -2147483648
org.apache.log4j.Level.ALL.levelStr has only one value
org.apache.log4j.Level.ALL.levelStr != null
org.apache.log4j.Level.ALL.levelStr.toString == "ALL"
org.apache.log4j.Level.ALL.syslogEquivalent == 7
this.threshold.level == -2147483648
this.threshold.levelStr has only one value
this.threshold.levelStr != null
this.threshold.levelStr.toString == "ALL"
this.threshold.syslogEquivalent == 7
org.apache.log4j.Priority.FATAL.level == 50000
org.apache.log4j.Priority.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Priority.FATAL.syslogEquivalent == 0
org.apache.log4j.Priority.ERROR.level == 40000
org.apache.log4j.Priority.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Priority.ERROR.syslogEquivalent == 3
org.apache.log4j.Priority.WARN.level == 30000
org.apache.log4j.Priority.WARN.levelStr.toString == "WARN"
org.apache.log4j.Priority.WARN.syslogEquivalent == 4
org.apache.log4j.Priority.INFO.level == 20000
org.apache.log4j.Priority.INFO.levelStr.toString == "INFO"
org.apache.log4j.Priority.INFO.syslogEquivalent == 6
org.apache.log4j.Priority.DEBUG.level == 10000
org.apache.log4j.Priority.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Priority.DEBUG.syslogEquivalent == 7
this.emittedNoResourceBundleWarning == false
this.defaultFactory.getClass().getName() != this.root.repository.getClass().getName()
this.defaultFactory.getClass().getName() != org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName()
this.root.repository.getClass().getName() != org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName()
===========================================================================
org.apache.log4j.Hierarchy.Hierarchy(org.apache.log4j.Logger):::ENTER
root.level == org.apache.log4j.Level.DEBUG
root has only one value
org.apache.log4j.Logger.FQCN has only one value
org.apache.log4j.Logger.FQCN.toString == "org.apache.log4j.Logger"
org.apache.log4j.Logger.class$org$apache$log4j$Logger has only one value
root.name has only one value
root.name.toString == "root"
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.class$org$apache$log4j$Level == null
root.level.level == 10000
root.level.levelStr has only one value
root.level.levelStr.toString == "DEBUG"
root.level.syslogEquivalent == 7
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
root.parent == null
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
root.resourceBundle == null
root.repository == null
root.aai == null
root.additive == true
===========================================================================
org.apache.log4j.Hierarchy.Hierarchy(org.apache.log4j.Logger):::EXIT
this.root == orig(root)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
this.root.name == root.name
this.root.level == org.apache.log4j.Level.DEBUG
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == root.level
org.apache.log4j.Level.DEBUG == orig(root.level)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == this.threshold
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
this.root.level.level == root.level.level
this.root.level.levelStr == root.level.levelStr
this.root.level.syslogEquivalent == root.level.syslogEquivalent
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.root.repository == root.repository
this.root.repository.getClass().getName() == root.repository.getClass().getName()
this.root.additive == root.additive
root.name == orig(root.name)
root.name.toString == orig(root.name.toString)
root.level.level == orig(root.level.level)
root.level.levelStr == orig(root.level.levelStr)
root.level.levelStr.toString == orig(root.level.levelStr.toString)
root.level.syslogEquivalent == orig(root.level.syslogEquivalent)
root.parent == orig(root.parent)
root.resourceBundle == orig(root.resourceBundle)
root.aai == orig(root.aai)
root.additive == orig(root.additive)
this.defaultFactory has only one value
this.rendererMap has only one value
this.thresholdInt == -2147483648
this.emittedNoAppenderWarning == false
root.name has only one value
root.name.toString == "root"
root.level.level == 10000
root.level.levelStr has only one value
root.level.levelStr.toString == "DEBUG"
root.level.syslogEquivalent == 7
root.parent == null
root.resourceBundle == null
root.repository has only one value
root.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
root.aai == null
root.additive == true
===========================================================================
org.apache.log4j.Hierarchy.emitNoAppenderWarning(org.apache.log4j.Category):::ENTER
this.root.repository.getClass().getName() == cat.parent.repository.getClass().getName()
this.root.repository.getClass().getName() == cat.repository.getClass().getName()
this.defaultFactory has only one value
this.root.repository has only one value
this.rendererMap has only one value
this.thresholdInt == -2147483648
this.threshold has only one value
cat.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
cat.level == null
cat.parent has only one value
cat.parent.name has only one value
cat.parent.name.toString == "root"
cat.parent.level has only one value
cat.parent.parent == null
cat.parent.resourceBundle == null
cat.parent.repository has only one value
cat.parent.aai == null
cat.parent.additive == true
cat.resourceBundle == null
cat.repository has only one value
cat.aai == null
cat.additive == true
===========================================================================
org.apache.log4j.Hierarchy.emitNoAppenderWarning(org.apache.log4j.Category):::EXIT
this.defaultFactory == orig(this.defaultFactory)
this.defaultFactory.getClass().getName() == orig(this.defaultFactory.getClass().getName())
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.ht == orig(this.ht)
this.root == orig(this.root)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
this.root.name == orig(this.root.name)
this.root.name.toString == orig(this.root.name.toString)
this.root.level == orig(this.root.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
this.root.level.level == orig(this.root.level.level)
this.root.level.levelStr == orig(this.root.level.levelStr)
this.root.level.levelStr.toString == orig(this.root.level.levelStr.toString)
this.root.level.syslogEquivalent == orig(this.root.level.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
this.root.parent == orig(this.root.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.root.resourceBundle == orig(this.root.resourceBundle)
this.root.repository == orig(this.root.repository)
this.root.repository.getClass().getName() == cat.repository.getClass().getName()
this.root.aai == orig(this.root.aai)
this.root.additive == orig(this.root.additive)
this.rendererMap == orig(this.rendererMap)
this.rendererMap.map == orig(this.rendererMap.map)
org.apache.log4j.or.RendererMap.defaultRenderer == orig(org.apache.log4j.or.RendererMap.defaultRenderer)
org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName() == orig(org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName())
org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer == orig(org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer)
this.thresholdInt == orig(this.thresholdInt)
this.thresholdInt == orig(this.threshold.level)
this.threshold == orig(this.threshold)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
this.threshold.levelStr == orig(this.threshold.levelStr)
this.threshold.levelStr.toString == orig(this.threshold.levelStr.toString)
this.threshold.syslogEquivalent == orig(this.threshold.syslogEquivalent)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.emittedNoResourceBundleWarning == orig(this.emittedNoResourceBundleWarning)
cat.name == orig(cat.name)
cat.name.toString == orig(cat.name.toString)
cat.level == orig(cat.level)
cat.parent == orig(cat.parent)
cat.parent.name == orig(cat.parent.name)
cat.parent.name.toString == orig(cat.parent.name.toString)
cat.parent.level == orig(cat.parent.level)
cat.parent.parent == orig(cat.parent.parent)
cat.parent.resourceBundle == orig(cat.parent.resourceBundle)
cat.parent.repository == orig(cat.parent.repository)
cat.parent.repository.getClass().getName() == cat.repository.getClass().getName()
cat.parent.aai == orig(cat.parent.aai)
cat.parent.additive == orig(cat.parent.additive)
cat.resourceBundle == orig(cat.resourceBundle)
cat.repository == orig(cat.repository)
cat.repository.getClass().getName() == orig(this.root.repository.getClass().getName())
cat.repository.getClass().getName() == orig(cat.parent.repository.getClass().getName())
cat.repository.getClass().getName() == orig(cat.repository.getClass().getName())
cat.aai == orig(cat.aai)
cat.additive == orig(cat.additive)
this.defaultFactory has only one value
this.root.repository has only one value
this.rendererMap has only one value
this.thresholdInt == -2147483648
this.threshold has only one value
this.emittedNoAppenderWarning == true
cat.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
cat.level == null
cat.parent has only one value
cat.parent.name has only one value
cat.parent.name.toString == "root"
cat.parent.level has only one value
cat.parent.parent == null
cat.parent.resourceBundle == null
cat.parent.repository has only one value
cat.parent.aai == null
cat.parent.additive == true
cat.resourceBundle == null
cat.repository has only one value
cat.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
cat.aai == null
cat.additive == true
===========================================================================
org.apache.log4j.Hierarchy.getLogger(java.lang.String):::ENTER
this.root.level == org.apache.log4j.Level.DEBUG
org.apache.log4j.Level.ALL == this.threshold
this.defaultFactory has only one value
this.root.repository has only one value
this.rendererMap has only one value
this.thresholdInt == -2147483648
this.emittedNoAppenderWarning == false
name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
===========================================================================
org.apache.log4j.Hierarchy.getLogger(java.lang.String):::EXIT
this.defaultFactory == orig(this.defaultFactory)
this.defaultFactory.getClass().getName() == orig(this.defaultFactory.getClass().getName())
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.ht == orig(this.ht)
this.root == orig(this.root)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
this.root.name == return.parent.name
this.root.name == orig(this.root.name)
this.root.name.toString == orig(this.root.name.toString)
this.root.level == org.apache.log4j.Level.DEBUG
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == return.parent.level
org.apache.log4j.Level.DEBUG == orig(this.root.level)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == this.threshold
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.ALL == orig(this.threshold)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
this.root.level.level == orig(this.root.level.level)
this.root.level.levelStr == orig(this.root.level.levelStr)
this.root.level.levelStr.toString == orig(this.root.level.levelStr.toString)
this.root.level.syslogEquivalent == orig(this.root.level.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
this.root.parent == orig(this.root.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.root.resourceBundle == orig(this.root.resourceBundle)
this.root.repository == return.repository
this.root.repository.getClass().getName() == return.repository.getClass().getName()
this.root.aai == orig(this.root.aai)
this.root.additive == return.parent.additive
this.root.additive == orig(this.root.additive)
this.rendererMap == orig(this.rendererMap)
this.rendererMap.map == orig(this.rendererMap.map)
org.apache.log4j.or.RendererMap.defaultRenderer == orig(org.apache.log4j.or.RendererMap.defaultRenderer)
org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName() == orig(org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName())
org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer == orig(org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer)
this.thresholdInt == orig(this.thresholdInt)
this.thresholdInt == orig(this.threshold.level)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
this.threshold.levelStr == orig(this.threshold.levelStr)
this.threshold.levelStr.toString == orig(this.threshold.levelStr.toString)
this.threshold.syslogEquivalent == orig(this.threshold.syslogEquivalent)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.emittedNoAppenderWarning == orig(this.emittedNoAppenderWarning)
this.emittedNoResourceBundleWarning == orig(this.emittedNoResourceBundleWarning)
name.toString == orig(name.toString)
return.name == orig(name)
return.parent.repository == return.repository
return.parent.repository.getClass().getName() == return.repository.getClass().getName()
return.repository == orig(this.root.repository)
return.repository.getClass().getName() == orig(this.root.repository.getClass().getName())
this.defaultFactory has only one value
this.rendererMap has only one value
this.thresholdInt == -2147483648
this.emittedNoAppenderWarning == false
name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
return.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
return.level == null
return.parent has only one value
return.parent.name.toString == "root"
return.parent.parent == null
return.parent.resourceBundle == null
return.parent.aai == null
return.resourceBundle == null
return.repository has only one value
return.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
return.aai == null
return.additive == true
===========================================================================
org.apache.log4j.Hierarchy.getLogger(java.lang.String, org.apache.log4j.spi.LoggerFactory):::ENTER
this.defaultFactory == factory
this.defaultFactory.getClass().getName() == factory.getClass().getName()
this.root.level == org.apache.log4j.Level.DEBUG
org.apache.log4j.Level.ALL == this.threshold
this.defaultFactory has only one value
this.root.repository has only one value
this.rendererMap has only one value
this.thresholdInt == -2147483648
this.emittedNoAppenderWarning == false
name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
===========================================================================
org.apache.log4j.Hierarchy.getLogger(java.lang.String, org.apache.log4j.spi.LoggerFactory):::EXIT274
===========================================================================
org.apache.log4j.Hierarchy.getLogger(java.lang.String, org.apache.log4j.spi.LoggerFactory):::EXIT
this.defaultFactory == orig(this.defaultFactory)
this.defaultFactory == orig(factory)
this.defaultFactory.getClass().getName() == orig(this.defaultFactory.getClass().getName())
this.defaultFactory.getClass().getName() == orig(factory.getClass().getName())
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.ht == orig(this.ht)
this.root == orig(this.root)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
this.root.name == return.parent.name
this.root.name == orig(this.root.name)
this.root.name.toString == orig(this.root.name.toString)
this.root.level == org.apache.log4j.Level.DEBUG
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == return.parent.level
org.apache.log4j.Level.DEBUG == orig(this.root.level)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == this.threshold
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.ALL == orig(this.threshold)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
this.root.level.level == orig(this.root.level.level)
this.root.level.levelStr == orig(this.root.level.levelStr)
this.root.level.levelStr.toString == orig(this.root.level.levelStr.toString)
this.root.level.syslogEquivalent == orig(this.root.level.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
this.root.parent == orig(this.root.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.root.resourceBundle == orig(this.root.resourceBundle)
this.root.repository == return.repository
this.root.repository.getClass().getName() == return.repository.getClass().getName()
this.root.aai == orig(this.root.aai)
this.root.additive == return.parent.additive
this.root.additive == orig(this.root.additive)
this.rendererMap == orig(this.rendererMap)
this.rendererMap.map == orig(this.rendererMap.map)
org.apache.log4j.or.RendererMap.defaultRenderer == orig(org.apache.log4j.or.RendererMap.defaultRenderer)
org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName() == orig(org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName())
org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer == orig(org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer)
this.thresholdInt == orig(this.thresholdInt)
this.thresholdInt == orig(this.threshold.level)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
this.threshold.levelStr == orig(this.threshold.levelStr)
this.threshold.levelStr.toString == orig(this.threshold.levelStr.toString)
this.threshold.syslogEquivalent == orig(this.threshold.syslogEquivalent)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.emittedNoAppenderWarning == orig(this.emittedNoAppenderWarning)
this.emittedNoResourceBundleWarning == orig(this.emittedNoResourceBundleWarning)
name.toString == orig(name.toString)
return.name == orig(name)
return.parent.repository == return.repository
return.parent.repository.getClass().getName() == return.repository.getClass().getName()
return.repository == orig(this.root.repository)
return.repository.getClass().getName() == orig(this.root.repository.getClass().getName())
this.defaultFactory has only one value
this.rendererMap has only one value
this.thresholdInt == -2147483648
this.emittedNoAppenderWarning == false
name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
return.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
return.level == null
return.parent has only one value
return.parent.name.toString == "root"
return.parent.parent == null
return.parent.resourceBundle == null
return.parent.aai == null
return.resourceBundle == null
return.repository has only one value
return.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
return.aai == null
return.additive == true
===========================================================================
org.apache.log4j.Hierarchy.isDisabled(int):::ENTER
this.root.level == org.apache.log4j.Level.DEBUG
org.apache.log4j.Level.ALL == this.threshold
this.defaultFactory has only one value
this.root.repository has only one value
this.rendererMap has only one value
this.thresholdInt == -2147483648
level == 20000
===========================================================================
org.apache.log4j.Hierarchy.isDisabled(int):::EXIT
this.defaultFactory == orig(this.defaultFactory)
this.defaultFactory.getClass().getName() == orig(this.defaultFactory.getClass().getName())
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.ht == orig(this.ht)
this.root == orig(this.root)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
this.root.name == orig(this.root.name)
this.root.name.toString == orig(this.root.name.toString)
this.root.level == org.apache.log4j.Level.DEBUG
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(this.root.level)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == this.threshold
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.ALL == orig(this.threshold)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
this.root.level.level == orig(this.root.level.level)
this.root.level.levelStr == orig(this.root.level.levelStr)
this.root.level.levelStr.toString == orig(this.root.level.levelStr.toString)
this.root.level.syslogEquivalent == orig(this.root.level.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
this.root.parent == orig(this.root.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.root.resourceBundle == orig(this.root.resourceBundle)
this.root.repository == orig(this.root.repository)
this.root.repository.getClass().getName() == orig(this.root.repository.getClass().getName())
this.root.aai == orig(this.root.aai)
this.root.additive == orig(this.root.additive)
this.rendererMap == orig(this.rendererMap)
this.rendererMap.map == orig(this.rendererMap.map)
org.apache.log4j.or.RendererMap.defaultRenderer == orig(org.apache.log4j.or.RendererMap.defaultRenderer)
org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName() == orig(org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName())
org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer == orig(org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer)
this.thresholdInt == orig(this.thresholdInt)
this.thresholdInt == orig(this.threshold.level)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
this.threshold.levelStr == orig(this.threshold.levelStr)
this.threshold.levelStr.toString == orig(this.threshold.levelStr.toString)
this.threshold.syslogEquivalent == orig(this.threshold.syslogEquivalent)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.emittedNoAppenderWarning == orig(this.emittedNoAppenderWarning)
this.emittedNoResourceBundleWarning == orig(this.emittedNoResourceBundleWarning)
this.defaultFactory has only one value
this.root.repository has only one value
this.rendererMap has only one value
this.thresholdInt == -2147483648
return == false
===========================================================================
org.apache.log4j.Hierarchy.isDisabled(int):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.log4j.Hierarchy.setThreshold(org.apache.log4j.Level):::ENTER
this.root.level == org.apache.log4j.Level.DEBUG
org.apache.log4j.Level.ALL == l
this.defaultFactory == null
this.root.repository == null
this.rendererMap == null
this.thresholdInt == 0
this.threshold == null
this.emittedNoAppenderWarning == false
l.level == -2147483648
l.levelStr has only one value
l.levelStr.toString == "ALL"
l.syslogEquivalent == 7
===========================================================================
org.apache.log4j.Hierarchy.setThreshold(org.apache.log4j.Level):::EXIT
this.defaultFactory == orig(this.defaultFactory)
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.ht == orig(this.ht)
this.root == orig(this.root)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
this.root.name == orig(this.root.name)
this.root.name.toString == orig(this.root.name.toString)
this.root.level == org.apache.log4j.Level.DEBUG
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(this.root.level)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == this.threshold
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.ALL == orig(l)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
this.root.level.level == orig(this.root.level.level)
this.root.level.levelStr == orig(this.root.level.levelStr)
this.root.level.levelStr.toString == orig(this.root.level.levelStr.toString)
this.root.level.syslogEquivalent == orig(this.root.level.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
this.root.parent == orig(this.root.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.root.resourceBundle == orig(this.root.resourceBundle)
this.root.repository == orig(this.root.repository)
this.root.aai == orig(this.root.aai)
this.root.additive == orig(this.root.additive)
this.rendererMap == orig(this.rendererMap)
this.thresholdInt == l.level
this.thresholdInt == orig(l.level)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
this.threshold.levelStr == l.levelStr
this.threshold.syslogEquivalent == l.syslogEquivalent
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.emittedNoAppenderWarning == orig(this.emittedNoAppenderWarning)
this.emittedNoResourceBundleWarning == orig(this.emittedNoResourceBundleWarning)
l.levelStr == orig(l.levelStr)
l.levelStr.toString == orig(l.levelStr.toString)
l.syslogEquivalent == orig(l.syslogEquivalent)
this.defaultFactory == null
this.root.repository == null
this.rendererMap == null
this.thresholdInt == -2147483648
this.emittedNoAppenderWarning == false
l.levelStr has only one value
l.levelStr.toString == "ALL"
l.syslogEquivalent == 7
===========================================================================
org.apache.log4j.Hierarchy.updateParents(org.apache.log4j.Logger):::ENTER
this.root.level == org.apache.log4j.Level.DEBUG
org.apache.log4j.Level.ALL == this.threshold
this.root.repository == cat.repository
this.root.repository.getClass().getName() == cat.repository.getClass().getName()
this.defaultFactory has only one value
this.root.repository has only one value
this.rendererMap has only one value
this.thresholdInt == -2147483648
this.emittedNoAppenderWarning == false
cat.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
cat.level == null
cat.parent == null
cat.resourceBundle == null
cat.aai == null
cat.additive == true
===========================================================================
org.apache.log4j.Hierarchy.updateParents(org.apache.log4j.Logger):::EXIT
this.defaultFactory == orig(this.defaultFactory)
this.defaultFactory.getClass().getName() == orig(this.defaultFactory.getClass().getName())
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.ht == orig(this.ht)
this.root == orig(this.root)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
this.root.name == cat.parent.name
this.root.name == orig(this.root.name)
this.root.name.toString == orig(this.root.name.toString)
this.root.level == org.apache.log4j.Level.DEBUG
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == cat.parent.level
org.apache.log4j.Level.DEBUG == orig(this.root.level)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == this.threshold
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.ALL == orig(this.threshold)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
this.root.level.level == orig(this.root.level.level)
this.root.level.levelStr == orig(this.root.level.levelStr)
this.root.level.levelStr.toString == orig(this.root.level.levelStr.toString)
this.root.level.syslogEquivalent == orig(this.root.level.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
this.root.parent == orig(this.root.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.root.resourceBundle == orig(this.root.resourceBundle)
this.root.repository == cat.repository
this.root.repository.getClass().getName() == cat.repository.getClass().getName()
this.root.aai == orig(this.root.aai)
this.root.additive == cat.parent.additive
this.root.additive == orig(this.root.additive)
this.rendererMap == orig(this.rendererMap)
this.rendererMap.map == orig(this.rendererMap.map)
org.apache.log4j.or.RendererMap.defaultRenderer == orig(org.apache.log4j.or.RendererMap.defaultRenderer)
org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName() == orig(org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName())
org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer == orig(org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer)
this.thresholdInt == orig(this.thresholdInt)
this.thresholdInt == orig(this.threshold.level)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
this.threshold.levelStr == orig(this.threshold.levelStr)
this.threshold.levelStr.toString == orig(this.threshold.levelStr.toString)
this.threshold.syslogEquivalent == orig(this.threshold.syslogEquivalent)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.emittedNoAppenderWarning == orig(this.emittedNoAppenderWarning)
this.emittedNoResourceBundleWarning == orig(this.emittedNoResourceBundleWarning)
cat.name == orig(cat.name)
cat.name.toString == orig(cat.name.toString)
cat.level == orig(cat.level)
cat.parent.repository == cat.repository
cat.parent.repository.getClass().getName() == cat.repository.getClass().getName()
cat.resourceBundle == orig(cat.resourceBundle)
cat.repository == orig(this.root.repository)
cat.repository == orig(cat.repository)
cat.repository.getClass().getName() == orig(this.root.repository.getClass().getName())
cat.repository.getClass().getName() == orig(cat.repository.getClass().getName())
cat.aai == orig(cat.aai)
cat.additive == orig(cat.additive)
this.defaultFactory has only one value
this.rendererMap has only one value
this.thresholdInt == -2147483648
this.emittedNoAppenderWarning == false
cat.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
cat.level == null
cat.parent has only one value
cat.parent.name.toString == "root"
cat.parent.parent == null
cat.parent.resourceBundle == null
cat.parent.aai == null
cat.resourceBundle == null
cat.repository has only one value
cat.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
cat.aai == null
cat.additive == true
===========================================================================
org.apache.log4j.Level:::CLASS
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
org.apache.log4j.Priority.FATAL.level == 50000
org.apache.log4j.Priority.FATAL.levelStr has only one value
org.apache.log4j.Priority.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Priority.FATAL.syslogEquivalent == 0
org.apache.log4j.Priority.ERROR.level == 40000
org.apache.log4j.Priority.ERROR.levelStr has only one value
org.apache.log4j.Priority.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Priority.ERROR.syslogEquivalent == 3
org.apache.log4j.Priority.WARN.level == 30000
org.apache.log4j.Priority.WARN.levelStr has only one value
org.apache.log4j.Priority.WARN.levelStr.toString == "WARN"
org.apache.log4j.Priority.WARN.syslogEquivalent == 4
org.apache.log4j.Priority.INFO.level == 20000
org.apache.log4j.Priority.INFO.levelStr has only one value
org.apache.log4j.Priority.INFO.levelStr.toString == "INFO"
org.apache.log4j.Priority.INFO.syslogEquivalent == 6
org.apache.log4j.Priority.DEBUG.level == 10000
org.apache.log4j.Priority.DEBUG.levelStr has only one value
org.apache.log4j.Priority.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Priority.DEBUG.syslogEquivalent == 7
===========================================================================
org.apache.log4j.Level:::OBJECT
this.levelStr != null
this.syslogEquivalent >= 0
===========================================================================
org.apache.log4j.Level.Level(int, java.lang.String, int):::ENTER
levelStr != null
syslogEquivalent >= 0
===========================================================================
org.apache.log4j.Level.Level(int, java.lang.String, int):::EXIT
levelStr.toString == orig(levelStr.toString)
===========================================================================
org.apache.log4j.LogManager:::CLASS
org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_FILE has only one value
org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_FILE.toString == "log4j.properties"
org.apache.log4j.LogManager.DEFAULT_XML_CONFIGURATION_FILE has only one value
org.apache.log4j.LogManager.DEFAULT_XML_CONFIGURATION_FILE.toString == "log4j.xml"
org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_KEY has only one value
org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_KEY.toString == "log4j.configuration"
org.apache.log4j.LogManager.CONFIGURATOR_CLASS_KEY has only one value
org.apache.log4j.LogManager.CONFIGURATOR_CLASS_KEY.toString == "log4j.configuratorClass"
org.apache.log4j.LogManager.DEFAULT_INIT_OVERRIDE_KEY has only one value
org.apache.log4j.LogManager.DEFAULT_INIT_OVERRIDE_KEY.toString == "log4j.defaultInitOverride"
org.apache.log4j.LogManager.guard == null
org.apache.log4j.LogManager.repositorySelector has only one value
org.apache.log4j.LogManager.repositorySelector.getClass().getName() == org.apache.log4j.spi.DefaultRepositorySelector.class
===========================================================================
org.apache.log4j.LogManager.getLogger(java.lang.String):::ENTER
name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
===========================================================================
org.apache.log4j.LogManager.getLogger(java.lang.String):::EXIT
org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_FILE == orig(org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_FILE)
org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_FILE.toString == orig(org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_FILE.toString)
org.apache.log4j.LogManager.DEFAULT_XML_CONFIGURATION_FILE == orig(org.apache.log4j.LogManager.DEFAULT_XML_CONFIGURATION_FILE)
org.apache.log4j.LogManager.DEFAULT_XML_CONFIGURATION_FILE.toString == orig(org.apache.log4j.LogManager.DEFAULT_XML_CONFIGURATION_FILE.toString)
org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_KEY == orig(org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_KEY)
org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_KEY.toString == orig(org.apache.log4j.LogManager.DEFAULT_CONFIGURATION_KEY.toString)
org.apache.log4j.LogManager.CONFIGURATOR_CLASS_KEY == orig(org.apache.log4j.LogManager.CONFIGURATOR_CLASS_KEY)
org.apache.log4j.LogManager.CONFIGURATOR_CLASS_KEY.toString == orig(org.apache.log4j.LogManager.CONFIGURATOR_CLASS_KEY.toString)
org.apache.log4j.LogManager.DEFAULT_INIT_OVERRIDE_KEY == orig(org.apache.log4j.LogManager.DEFAULT_INIT_OVERRIDE_KEY)
org.apache.log4j.LogManager.DEFAULT_INIT_OVERRIDE_KEY.toString == orig(org.apache.log4j.LogManager.DEFAULT_INIT_OVERRIDE_KEY.toString)
org.apache.log4j.LogManager.guard == orig(org.apache.log4j.LogManager.guard)
org.apache.log4j.LogManager.repositorySelector == orig(org.apache.log4j.LogManager.repositorySelector)
org.apache.log4j.LogManager.repositorySelector.getClass().getName() == orig(org.apache.log4j.LogManager.repositorySelector.getClass().getName())
name.toString == orig(name.toString)
return.name == orig(name)
return.parent.repository == return.repository
return.parent.repository.getClass().getName() == return.repository.getClass().getName()
name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
org.apache.log4j.Logger.FQCN has only one value
org.apache.log4j.Logger.FQCN.toString == "org.apache.log4j.Logger"
org.apache.log4j.Logger.class$org$apache$log4j$Logger has only one value
return.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
return.level == null
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.class$org$apache$log4j$Level == null
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
return.parent has only one value
return.parent.name has only one value
return.parent.name.toString == "root"
return.parent.level has only one value
return.parent.parent == null
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
return.parent.resourceBundle == null
return.parent.aai == null
return.parent.additive == true
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
return.resourceBundle == null
return.repository has only one value
return.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
return.aai == null
return.additive == true
===========================================================================
org.apache.log4j.Logger:::CLASS
org.apache.log4j.Logger.FQCN has only one value
org.apache.log4j.Logger.FQCN.toString == "org.apache.log4j.Logger"
org.apache.log4j.Logger.class$org$apache$log4j$Logger has only one value
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
===========================================================================
org.apache.log4j.Logger:::OBJECT
this.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player", "root" }
this.level == null
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.class$org$apache$log4j$Level == null
org.apache.log4j.Level.OFF.level == 2147483647
org.apache.log4j.Level.OFF.levelStr has only one value
org.apache.log4j.Level.OFF.levelStr.toString == "OFF"
org.apache.log4j.Level.OFF.syslogEquivalent == 0
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
org.apache.log4j.Level.FATAL.level == 50000
org.apache.log4j.Level.FATAL.levelStr has only one value
org.apache.log4j.Level.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Level.FATAL.syslogEquivalent == 0
org.apache.log4j.Level.ERROR.level == 40000
org.apache.log4j.Level.ERROR.levelStr has only one value
org.apache.log4j.Level.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Level.ERROR.syslogEquivalent == 3
org.apache.log4j.Level.WARN.level == 30000
org.apache.log4j.Level.WARN.levelStr has only one value
org.apache.log4j.Level.WARN.levelStr.toString == "WARN"
org.apache.log4j.Level.WARN.syslogEquivalent == 4
org.apache.log4j.Level.INFO.level == 20000
org.apache.log4j.Level.INFO.levelStr has only one value
org.apache.log4j.Level.INFO.levelStr.toString == "INFO"
org.apache.log4j.Level.INFO.syslogEquivalent == 6
org.apache.log4j.Level.DEBUG.level == 10000
org.apache.log4j.Level.DEBUG.levelStr has only one value
org.apache.log4j.Level.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Level.DEBUG.syslogEquivalent == 7
org.apache.log4j.Level.TRACE.level == 5000
org.apache.log4j.Level.TRACE.levelStr has only one value
org.apache.log4j.Level.TRACE.levelStr.toString == "TRACE"
org.apache.log4j.Level.TRACE.syslogEquivalent == 7
org.apache.log4j.Level.ALL.level == -2147483648
org.apache.log4j.Level.ALL.levelStr has only one value
org.apache.log4j.Level.ALL.levelStr.toString == "ALL"
org.apache.log4j.Level.ALL.syslogEquivalent == 7
org.apache.log4j.Priority.FATAL.level == 50000
org.apache.log4j.Priority.FATAL.levelStr has only one value
org.apache.log4j.Priority.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Priority.FATAL.syslogEquivalent == 0
org.apache.log4j.Priority.ERROR.level == 40000
org.apache.log4j.Priority.ERROR.levelStr has only one value
org.apache.log4j.Priority.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Priority.ERROR.syslogEquivalent == 3
org.apache.log4j.Priority.WARN.level == 30000
org.apache.log4j.Priority.WARN.levelStr has only one value
org.apache.log4j.Priority.WARN.levelStr.toString == "WARN"
org.apache.log4j.Priority.WARN.syslogEquivalent == 4
org.apache.log4j.Priority.INFO.level == 20000
org.apache.log4j.Priority.INFO.levelStr has only one value
org.apache.log4j.Priority.INFO.levelStr.toString == "INFO"
org.apache.log4j.Priority.INFO.syslogEquivalent == 6
org.apache.log4j.Priority.DEBUG.level == 10000
org.apache.log4j.Priority.DEBUG.levelStr has only one value
org.apache.log4j.Priority.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Priority.DEBUG.syslogEquivalent == 7
this.parent == null
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
this.resourceBundle == null
this.repository == null
this.aai == null
this.additive == true
===========================================================================
org.apache.log4j.Logger.Logger(java.lang.String):::ENTER
name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player", "root" }
===========================================================================
org.apache.log4j.Logger.Logger(java.lang.String):::EXIT
name.toString == orig(name.toString)
name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player", "root" }
===========================================================================
org.apache.log4j.Logger.class$(java.lang.String):::ENTER
x0 has only one value
x0.toString == "org.apache.log4j.Logger"
===========================================================================
org.apache.log4j.Logger.class$(java.lang.String):::EXIT
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
x0.toString == orig(x0.toString)
x0.toString == "org.apache.log4j.Logger"
return has only one value
===========================================================================
org.apache.log4j.Logger.getLogger(java.lang.Class):::ENTER
===========================================================================
org.apache.log4j.Logger.getLogger(java.lang.Class):::EXIT
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
return.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
return.level == null
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.class$org$apache$log4j$Level == null
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
return.parent has only one value
return.parent.name has only one value
return.parent.name.toString == "root"
return.parent.level has only one value
return.parent.parent == null
return.parent.resourceBundle == null
return.parent.repository has only one value
return.parent.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
return.parent.aai == null
return.parent.additive == true
return.resourceBundle == null
return.repository has only one value
return.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
return.aai == null
return.additive == true
===========================================================================
org.apache.log4j.Priority:::CLASS
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.FATAL != null
org.apache.log4j.Priority.FATAL.level == 50000
org.apache.log4j.Priority.FATAL.levelStr has only one value
org.apache.log4j.Priority.FATAL.levelStr != null
org.apache.log4j.Priority.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Priority.FATAL.syslogEquivalent == 0
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.ERROR != null
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.WARN != null
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.INFO != null
org.apache.log4j.Priority.DEBUG has only one value
org.apache.log4j.Priority.DEBUG != null
org.apache.log4j.Priority.ERROR.level == 40000
org.apache.log4j.Priority.ERROR.levelStr has only one value
org.apache.log4j.Priority.ERROR.levelStr != null
org.apache.log4j.Priority.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Priority.ERROR.syslogEquivalent == 3
org.apache.log4j.Priority.WARN.level == 30000
org.apache.log4j.Priority.WARN.levelStr has only one value
org.apache.log4j.Priority.WARN.levelStr != null
org.apache.log4j.Priority.WARN.levelStr.toString == "WARN"
org.apache.log4j.Priority.WARN.syslogEquivalent == 4
org.apache.log4j.Priority.INFO.level == 20000
org.apache.log4j.Priority.INFO.levelStr has only one value
org.apache.log4j.Priority.INFO.levelStr != null
org.apache.log4j.Priority.INFO.levelStr.toString == "INFO"
org.apache.log4j.Priority.INFO.syslogEquivalent == 6
org.apache.log4j.Priority.DEBUG.level == 10000
org.apache.log4j.Priority.DEBUG.levelStr has only one value
org.apache.log4j.Priority.DEBUG.levelStr != null
org.apache.log4j.Priority.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Priority.DEBUG.syslogEquivalent == 7
===========================================================================
org.apache.log4j.Priority:::OBJECT
this.levelStr != null
===========================================================================
org.apache.log4j.Priority.Priority(int, java.lang.String, int):::ENTER
levelStr != null
syslogEquivalent >= 0
===========================================================================
org.apache.log4j.Priority.Priority(int, java.lang.String, int):::EXIT
levelStr.toString == orig(levelStr.toString)
===========================================================================
org.apache.log4j.Priority.isGreaterOrEqual(org.apache.log4j.Priority):::ENTER
this has only one value
this.level == 20000
this.levelStr has only one value
this.levelStr.toString == "INFO"
this.syslogEquivalent == 6
r has only one value
r.level == 10000
r.levelStr has only one value
r.levelStr.toString == "DEBUG"
r.syslogEquivalent == 7
===========================================================================
org.apache.log4j.Priority.isGreaterOrEqual(org.apache.log4j.Priority):::EXIT
this.level == orig(this.level)
this.levelStr == orig(this.levelStr)
this.levelStr.toString == orig(this.levelStr.toString)
this.syslogEquivalent == orig(this.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
r.level == orig(r.level)
r.levelStr == orig(r.levelStr)
r.levelStr.toString == orig(r.levelStr.toString)
r.syslogEquivalent == orig(r.syslogEquivalent)
this.level == 20000
this.levelStr has only one value
this.levelStr.toString == "INFO"
this.syslogEquivalent == 6
r.level == 10000
r.levelStr has only one value
r.levelStr.toString == "DEBUG"
r.syslogEquivalent == 7
return == true
===========================================================================
org.apache.log4j.Priority.isGreaterOrEqual(org.apache.log4j.Priority):::EXIT;condition="return == true"
===========================================================================
org.apache.log4j.ProvisionNode:::OBJECT
===========================================================================
org.apache.log4j.ProvisionNode.ProvisionNode(org.apache.log4j.Logger):::ENTER
org.apache.log4j.Logger.FQCN has only one value
org.apache.log4j.Logger.FQCN.toString == "org.apache.log4j.Logger"
org.apache.log4j.Logger.class$org$apache$log4j$Logger has only one value
logger.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
logger.level == null
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.class$org$apache$log4j$Level == null
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
logger.parent == null
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
logger.resourceBundle == null
logger.repository has only one value
logger.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
logger.aai == null
logger.additive == true
===========================================================================
org.apache.log4j.ProvisionNode.ProvisionNode(org.apache.log4j.Logger):::EXIT
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
logger.name == orig(logger.name)
logger.name.toString == orig(logger.name.toString)
logger.level == orig(logger.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
logger.parent == orig(logger.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
logger.resourceBundle == orig(logger.resourceBundle)
logger.repository == orig(logger.repository)
logger.repository.getClass().getName() == orig(logger.repository.getClass().getName())
logger.aai == orig(logger.aai)
logger.additive == orig(logger.additive)
org.apache.log4j.Logger.FQCN has only one value
org.apache.log4j.Logger.FQCN.toString == "org.apache.log4j.Logger"
org.apache.log4j.Logger.class$org$apache$log4j$Logger has only one value
logger.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
logger.level == null
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.class$org$apache$log4j$Level == null
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
logger.parent == null
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
logger.resourceBundle == null
logger.repository has only one value
logger.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
logger.aai == null
logger.additive == true
===========================================================================
org.apache.log4j.helpers.Loader.class$(java.lang.String):::ENTER
x0.toString one of { "java.lang.Thread", "org.apache.log4j.helpers.Loader" }
===========================================================================
org.apache.log4j.helpers.Loader.class$(java.lang.String):::EXIT
x0.toString == orig(x0.toString)
x0.toString one of { "java.lang.Thread", "org.apache.log4j.helpers.Loader" }
===========================================================================
org.apache.log4j.helpers.Loader.getResource(java.lang.String):::ENTER
resource.toString one of { "log4j.properties", "log4j.xml" }
===========================================================================
org.apache.log4j.helpers.Loader.getResource(java.lang.String):::EXIT124
===========================================================================
org.apache.log4j.helpers.Loader.getResource(java.lang.String):::EXIT
resource.toString == orig(resource.toString)
resource.toString one of { "log4j.properties", "log4j.xml" }
return == null
===========================================================================
org.apache.log4j.helpers.Loader.getTCL():::EXIT154
===========================================================================
org.apache.log4j.helpers.Loader.getTCL():::EXIT
return has only one value
return.getClass().getName() == jdk.internal.loader.ClassLoaders$AppClassLoader.class
===========================================================================
org.apache.log4j.helpers.LogLog.debug(java.lang.String):::ENTER
===========================================================================
org.apache.log4j.helpers.LogLog.debug(java.lang.String):::EXIT
msg.toString == orig(msg.toString)
===========================================================================
org.apache.log4j.helpers.LogLog.warn(java.lang.String):::ENTER
msg.toString one of { "No appenders could be found for logger (org.nerv.rpgclient.player.Player).", "Please initialize the log4j system properly." }
===========================================================================
org.apache.log4j.helpers.LogLog.warn(java.lang.String):::EXIT171
===========================================================================
org.apache.log4j.helpers.LogLog.warn(java.lang.String):::EXIT
msg.toString == orig(msg.toString)
msg.toString one of { "No appenders could be found for logger (org.nerv.rpgclient.player.Player).", "Please initialize the log4j system properly." }
===========================================================================
org.apache.log4j.helpers.OptionConverter:::CLASS
org.apache.log4j.helpers.OptionConverter.DELIM_START has only one value
org.apache.log4j.helpers.OptionConverter.DELIM_START != null
org.apache.log4j.helpers.OptionConverter.DELIM_START.toString == "${"
org.apache.log4j.helpers.OptionConverter.DELIM_STOP == 125
org.apache.log4j.helpers.OptionConverter.DELIM_START_LEN == 2
org.apache.log4j.helpers.OptionConverter.DELIM_STOP_LEN == 1
org.apache.log4j.helpers.OptionConverter.class$java$lang$String == null
org.apache.log4j.helpers.OptionConverter.class$org$apache$log4j$Level == null
org.apache.log4j.helpers.OptionConverter.class$org$apache$log4j$spi$Configurator == null
===========================================================================
org.apache.log4j.helpers.OptionConverter.getSystemProperty(java.lang.String, java.lang.String):::ENTER
def == null
===========================================================================
org.apache.log4j.helpers.OptionConverter.getSystemProperty(java.lang.String, java.lang.String):::EXIT100
===========================================================================
org.apache.log4j.helpers.OptionConverter.getSystemProperty(java.lang.String, java.lang.String):::EXIT
org.apache.log4j.helpers.OptionConverter.DELIM_START == orig(org.apache.log4j.helpers.OptionConverter.DELIM_START)
org.apache.log4j.helpers.OptionConverter.DELIM_START.toString == orig(org.apache.log4j.helpers.OptionConverter.DELIM_START.toString)
org.apache.log4j.helpers.OptionConverter.DELIM_STOP == orig(org.apache.log4j.helpers.OptionConverter.DELIM_STOP)
org.apache.log4j.helpers.OptionConverter.DELIM_START_LEN == orig(org.apache.log4j.helpers.OptionConverter.DELIM_START_LEN)
org.apache.log4j.helpers.OptionConverter.DELIM_STOP_LEN == orig(org.apache.log4j.helpers.OptionConverter.DELIM_STOP_LEN)
org.apache.log4j.helpers.OptionConverter.class$java$lang$String == orig(org.apache.log4j.helpers.OptionConverter.class$java$lang$String)
org.apache.log4j.helpers.OptionConverter.class$org$apache$log4j$Level == orig(org.apache.log4j.helpers.OptionConverter.class$org$apache$log4j$Level)
org.apache.log4j.helpers.OptionConverter.class$org$apache$log4j$spi$Configurator == orig(org.apache.log4j.helpers.OptionConverter.class$org$apache$log4j$spi$Configurator)
key.toString == orig(key.toString)
return.toString == "11.0.26"
===========================================================================
org.apache.log4j.or.DefaultRenderer:::OBJECT
this has only one value
===========================================================================
org.apache.log4j.or.DefaultRenderer.DefaultRenderer():::EXIT
===========================================================================
org.apache.log4j.or.RendererMap:::CLASS
org.apache.log4j.or.RendererMap.defaultRenderer has only one value
org.apache.log4j.or.RendererMap.defaultRenderer.getClass().getName() == org.apache.log4j.or.DefaultRenderer.class
org.apache.log4j.or.RendererMap.class$org$apache$log4j$or$ObjectRenderer == null
===========================================================================
org.apache.log4j.or.RendererMap:::OBJECT
this has only one value
this.map has only one value
===========================================================================
org.apache.log4j.or.RendererMap.RendererMap():::EXIT
===========================================================================
org.apache.log4j.spi.DefaultRepositorySelector:::OBJECT
this has only one value
this.repository has only one value
this.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
===========================================================================
org.apache.log4j.spi.DefaultRepositorySelector.DefaultRepositorySelector(org.apache.log4j.spi.LoggerRepository):::ENTER
repository has only one value
repository.getClass().getName() == org.apache.log4j.Hierarchy.class
===========================================================================
org.apache.log4j.spi.DefaultRepositorySelector.DefaultRepositorySelector(org.apache.log4j.spi.LoggerRepository):::EXIT
this.repository == orig(repository)
this.repository.getClass().getName() == orig(repository.getClass().getName())
===========================================================================
org.apache.log4j.spi.DefaultRepositorySelector.getLoggerRepository():::ENTER
===========================================================================
org.apache.log4j.spi.DefaultRepositorySelector.getLoggerRepository():::EXIT
this.repository == return
this.repository.getClass().getName() == return.getClass().getName()
return == orig(this.repository)
return.getClass().getName() == orig(this.repository.getClass().getName())
return has only one value
return.getClass().getName() == org.apache.log4j.Hierarchy.class
===========================================================================
org.apache.log4j.spi.LoggingEvent:::CLASS
org.apache.log4j.spi.LoggingEvent.startTime == 1743932172706L
org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY has only one value
org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY.getClass().getName() == java.lang.Integer[].class
org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY[] == [null]
org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY[] elements == null
org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY[].getClass().getName() == [null]
org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY[].getClass().getName() elements == null
org.apache.log4j.spi.LoggingEvent.TO_LEVEL has only one value
org.apache.log4j.spi.LoggingEvent.TO_LEVEL.toString == "toLevel"
org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS has only one value
org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS.getClass().getName() == java.lang.Class[].class
org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS[] contains no nulls and has only one value, of length 1
org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS[] elements has only one value
org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS[].getClass().getName() == [java.lang.Class]
org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS[].getClass().getName() elements == java.lang.Class.class
org.apache.log4j.spi.LoggingEvent.methodCache has only one value
org.apache.log4j.spi.LoggingEvent.class$org$apache$log4j$Level == null
size(org.apache.log4j.spi.LoggingEvent.PARAM_ARRAY[]) == 1
size(org.apache.log4j.spi.LoggingEvent.TO_LEVEL_PARAMS[]) == 1
===========================================================================
org.apache.log4j.spi.LoggingEvent:::OBJECT
this.fqnOfCategoryClass has only one value
this.fqnOfCategoryClass.toString == "org.apache.log4j.Category"
this.logger.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
this.logger.level == null
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.class$org$apache$log4j$Level == null
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
this.logger.parent has only one value
this.logger.parent.name has only one value
this.logger.parent.name.toString == "root"
this.logger.parent.level has only one value
this.logger.parent.parent == null
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
this.logger.parent.resourceBundle == null
this.logger.parent.repository has only one value
this.logger.parent.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
this.logger.parent.aai == null
this.logger.parent.additive == true
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
this.logger.resourceBundle == null
this.logger.repository has only one value
this.logger.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
this.logger.aai == null
this.logger.additive == true
this.categoryName.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
this.level has only one value
this.level.level == 20000
this.level.levelStr has only one value
this.level.levelStr.toString == "INFO"
this.level.syslogEquivalent == 6
org.apache.log4j.Priority.FATAL.level == 50000
org.apache.log4j.Priority.FATAL.levelStr has only one value
org.apache.log4j.Priority.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Priority.FATAL.syslogEquivalent == 0
org.apache.log4j.Priority.ERROR.level == 40000
org.apache.log4j.Priority.ERROR.levelStr has only one value
org.apache.log4j.Priority.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Priority.ERROR.syslogEquivalent == 3
org.apache.log4j.Priority.WARN.level == 30000
org.apache.log4j.Priority.WARN.levelStr has only one value
org.apache.log4j.Priority.WARN.levelStr.toString == "WARN"
org.apache.log4j.Priority.WARN.syslogEquivalent == 4
org.apache.log4j.Priority.INFO.level == 20000
org.apache.log4j.Priority.INFO.levelStr has only one value
org.apache.log4j.Priority.INFO.levelStr.toString == "INFO"
org.apache.log4j.Priority.INFO.syslogEquivalent == 6
org.apache.log4j.Priority.DEBUG.level == 10000
org.apache.log4j.Priority.DEBUG.levelStr has only one value
org.apache.log4j.Priority.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Priority.DEBUG.syslogEquivalent == 7
this.ndc == null
this.mdcCopy == null
this.ndcLookupRequired == true
this.mdcCopyLookupRequired == true
this.message.getClass().getName() == java.lang.String.class
this.renderedMessage == null
this.threadName == null
this.throwableInfo == null
this.locationInfo == null
===========================================================================
org.apache.log4j.spi.LoggingEvent.LoggingEvent(java.lang.String, org.apache.log4j.Category, org.apache.log4j.Priority, java.lang.Object, java.lang.Throwable):::ENTER
fqnOfCategoryClass has only one value
fqnOfCategoryClass.toString == "org.apache.log4j.Category"
logger.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
logger.level == null
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.class$org$apache$log4j$Level == null
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
logger.parent has only one value
logger.parent.name has only one value
logger.parent.name.toString == "root"
logger.parent.level has only one value
logger.parent.parent == null
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
logger.parent.resourceBundle == null
logger.parent.repository has only one value
logger.parent.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
logger.parent.aai == null
logger.parent.additive == true
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
logger.resourceBundle == null
logger.repository has only one value
logger.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
logger.aai == null
logger.additive == true
level has only one value
level.level == 20000
level.levelStr has only one value
level.levelStr.toString == "INFO"
level.syslogEquivalent == 6
org.apache.log4j.Priority.FATAL.level == 50000
org.apache.log4j.Priority.FATAL.levelStr has only one value
org.apache.log4j.Priority.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Priority.FATAL.syslogEquivalent == 0
org.apache.log4j.Priority.ERROR.level == 40000
org.apache.log4j.Priority.ERROR.levelStr has only one value
org.apache.log4j.Priority.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Priority.ERROR.syslogEquivalent == 3
org.apache.log4j.Priority.WARN.level == 30000
org.apache.log4j.Priority.WARN.levelStr has only one value
org.apache.log4j.Priority.WARN.levelStr.toString == "WARN"
org.apache.log4j.Priority.WARN.syslogEquivalent == 4
org.apache.log4j.Priority.INFO.level == 20000
org.apache.log4j.Priority.INFO.levelStr has only one value
org.apache.log4j.Priority.INFO.levelStr.toString == "INFO"
org.apache.log4j.Priority.INFO.syslogEquivalent == 6
org.apache.log4j.Priority.DEBUG.level == 10000
org.apache.log4j.Priority.DEBUG.levelStr has only one value
org.apache.log4j.Priority.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Priority.DEBUG.syslogEquivalent == 7
message.getClass().getName() == java.lang.String.class
throwable == null
===========================================================================
org.apache.log4j.spi.LoggingEvent.LoggingEvent(java.lang.String, org.apache.log4j.Category, org.apache.log4j.Priority, java.lang.Object, java.lang.Throwable):::EXIT
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
fqnOfCategoryClass.toString == orig(fqnOfCategoryClass.toString)
logger.name == orig(logger.name)
logger.name.toString == orig(logger.name.toString)
logger.level == orig(logger.level)
logger.parent == orig(logger.parent)
logger.parent.name == orig(logger.parent.name)
logger.parent.name.toString == orig(logger.parent.name.toString)
logger.parent.level == orig(logger.parent.level)
logger.parent.parent == orig(logger.parent.parent)
logger.parent.resourceBundle == orig(logger.parent.resourceBundle)
logger.parent.repository == orig(logger.parent.repository)
logger.parent.repository.getClass().getName() == orig(logger.parent.repository.getClass().getName())
logger.parent.aai == orig(logger.parent.aai)
logger.parent.additive == orig(logger.parent.additive)
logger.resourceBundle == orig(logger.resourceBundle)
logger.repository == orig(logger.repository)
logger.repository.getClass().getName() == orig(logger.repository.getClass().getName())
logger.aai == orig(logger.aai)
logger.additive == orig(logger.additive)
level.level == orig(level.level)
level.levelStr == orig(level.levelStr)
level.levelStr.toString == orig(level.levelStr.toString)
level.syslogEquivalent == orig(level.syslogEquivalent)
fqnOfCategoryClass.toString == "org.apache.log4j.Category"
logger.name.toString one of { "org.nerv.rpgclient.RpgObject", "org.nerv.rpgclient.player.Player" }
logger.level == null
logger.parent has only one value
logger.parent.name has only one value
logger.parent.name.toString == "root"
logger.parent.level has only one value
logger.parent.parent == null
logger.parent.resourceBundle == null
logger.parent.repository has only one value
logger.parent.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
logger.parent.aai == null
logger.parent.additive == true
logger.resourceBundle == null
logger.repository has only one value
logger.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
logger.aai == null
logger.additive == true
level.level == 20000
level.levelStr has only one value
level.levelStr.toString == "INFO"
level.syslogEquivalent == 6
===========================================================================
org.apache.log4j.spi.RootLogger:::CLASS
org.apache.log4j.Logger.FQCN has only one value
org.apache.log4j.Logger.FQCN.toString == "org.apache.log4j.Logger"
org.apache.log4j.Logger.class$org$apache$log4j$Logger has only one value
===========================================================================
org.apache.log4j.spi.RootLogger:::OBJECT
org.apache.log4j.Level.FATAL.levelStr == org.apache.log4j.Priority.FATAL.levelStr
org.apache.log4j.Level.ERROR.levelStr == org.apache.log4j.Priority.ERROR.levelStr
org.apache.log4j.Level.WARN.levelStr == org.apache.log4j.Priority.WARN.levelStr
org.apache.log4j.Level.INFO.levelStr == org.apache.log4j.Priority.INFO.levelStr
org.apache.log4j.Level.DEBUG.levelStr == org.apache.log4j.Priority.DEBUG.levelStr
this has only one value
this.name has only one value
this.name.toString == "root"
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.class$org$apache$log4j$Level == null
org.apache.log4j.Level.OFF.level == 2147483647
org.apache.log4j.Level.OFF.levelStr has only one value
org.apache.log4j.Level.OFF.levelStr.toString == "OFF"
org.apache.log4j.Level.OFF.syslogEquivalent == 0
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
org.apache.log4j.Level.FATAL.level == 50000
org.apache.log4j.Level.FATAL.levelStr has only one value
org.apache.log4j.Level.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Level.FATAL.syslogEquivalent == 0
org.apache.log4j.Level.ERROR.level == 40000
org.apache.log4j.Level.ERROR.levelStr has only one value
org.apache.log4j.Level.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Level.ERROR.syslogEquivalent == 3
org.apache.log4j.Level.WARN.level == 30000
org.apache.log4j.Level.WARN.levelStr has only one value
org.apache.log4j.Level.WARN.levelStr.toString == "WARN"
org.apache.log4j.Level.WARN.syslogEquivalent == 4
org.apache.log4j.Level.INFO.level == 20000
org.apache.log4j.Level.INFO.levelStr has only one value
org.apache.log4j.Level.INFO.levelStr.toString == "INFO"
org.apache.log4j.Level.INFO.syslogEquivalent == 6
org.apache.log4j.Level.DEBUG.level == 10000
org.apache.log4j.Level.DEBUG.levelStr has only one value
org.apache.log4j.Level.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Level.DEBUG.syslogEquivalent == 7
org.apache.log4j.Level.TRACE.level == 5000
org.apache.log4j.Level.TRACE.levelStr has only one value
org.apache.log4j.Level.TRACE.levelStr.toString == "TRACE"
org.apache.log4j.Level.TRACE.syslogEquivalent == 7
org.apache.log4j.Level.ALL.level == -2147483648
org.apache.log4j.Level.ALL.levelStr has only one value
org.apache.log4j.Level.ALL.levelStr.toString == "ALL"
org.apache.log4j.Level.ALL.syslogEquivalent == 7
this.level.level == 10000
this.level.levelStr has only one value
this.level.levelStr.toString == "DEBUG"
this.level.syslogEquivalent == 7
org.apache.log4j.Priority.FATAL.level == 50000
org.apache.log4j.Priority.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Priority.FATAL.syslogEquivalent == 0
org.apache.log4j.Priority.ERROR.level == 40000
org.apache.log4j.Priority.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Priority.ERROR.syslogEquivalent == 3
org.apache.log4j.Priority.WARN.level == 30000
org.apache.log4j.Priority.WARN.levelStr.toString == "WARN"
org.apache.log4j.Priority.WARN.syslogEquivalent == 4
org.apache.log4j.Priority.INFO.level == 20000
org.apache.log4j.Priority.INFO.levelStr.toString == "INFO"
org.apache.log4j.Priority.INFO.syslogEquivalent == 6
org.apache.log4j.Priority.DEBUG.level == 10000
org.apache.log4j.Priority.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Priority.DEBUG.syslogEquivalent == 7
this.parent == null
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
this.resourceBundle == null
this.repository == null
this.aai == null
this.additive == true
===========================================================================
org.apache.log4j.spi.RootLogger.RootLogger(org.apache.log4j.Level):::ENTER
level == org.apache.log4j.Level.DEBUG
org.apache.log4j.Level.FATAL.levelStr == org.apache.log4j.Priority.FATAL.levelStr
org.apache.log4j.Level.ERROR.levelStr == org.apache.log4j.Priority.ERROR.levelStr
org.apache.log4j.Level.WARN.levelStr == org.apache.log4j.Priority.WARN.levelStr
org.apache.log4j.Level.INFO.levelStr == org.apache.log4j.Priority.INFO.levelStr
org.apache.log4j.Level.DEBUG.levelStr == org.apache.log4j.Priority.DEBUG.levelStr
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.class$org$apache$log4j$Level == null
org.apache.log4j.Level.OFF.level == 2147483647
org.apache.log4j.Level.OFF.levelStr has only one value
org.apache.log4j.Level.OFF.levelStr.toString == "OFF"
org.apache.log4j.Level.OFF.syslogEquivalent == 0
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
org.apache.log4j.Level.FATAL.level == 50000
org.apache.log4j.Level.FATAL.levelStr has only one value
org.apache.log4j.Level.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Level.FATAL.syslogEquivalent == 0
org.apache.log4j.Level.ERROR.level == 40000
org.apache.log4j.Level.ERROR.levelStr has only one value
org.apache.log4j.Level.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Level.ERROR.syslogEquivalent == 3
org.apache.log4j.Level.WARN.level == 30000
org.apache.log4j.Level.WARN.levelStr has only one value
org.apache.log4j.Level.WARN.levelStr.toString == "WARN"
org.apache.log4j.Level.WARN.syslogEquivalent == 4
org.apache.log4j.Level.INFO.level == 20000
org.apache.log4j.Level.INFO.levelStr has only one value
org.apache.log4j.Level.INFO.levelStr.toString == "INFO"
org.apache.log4j.Level.INFO.syslogEquivalent == 6
org.apache.log4j.Level.DEBUG.level == 10000
org.apache.log4j.Level.DEBUG.levelStr has only one value
org.apache.log4j.Level.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Level.DEBUG.syslogEquivalent == 7
org.apache.log4j.Level.TRACE.level == 5000
org.apache.log4j.Level.TRACE.levelStr has only one value
org.apache.log4j.Level.TRACE.levelStr.toString == "TRACE"
org.apache.log4j.Level.TRACE.syslogEquivalent == 7
org.apache.log4j.Level.ALL.level == -2147483648
org.apache.log4j.Level.ALL.levelStr has only one value
org.apache.log4j.Level.ALL.levelStr.toString == "ALL"
org.apache.log4j.Level.ALL.syslogEquivalent == 7
level.level == 10000
level.levelStr has only one value
level.levelStr.toString == "DEBUG"
level.syslogEquivalent == 7
org.apache.log4j.Priority.FATAL.level == 50000
org.apache.log4j.Priority.FATAL.levelStr.toString == "FATAL"
org.apache.log4j.Priority.FATAL.syslogEquivalent == 0
org.apache.log4j.Priority.ERROR.level == 40000
org.apache.log4j.Priority.ERROR.levelStr.toString == "ERROR"
org.apache.log4j.Priority.ERROR.syslogEquivalent == 3
org.apache.log4j.Priority.WARN.level == 30000
org.apache.log4j.Priority.WARN.levelStr.toString == "WARN"
org.apache.log4j.Priority.WARN.syslogEquivalent == 4
org.apache.log4j.Priority.INFO.level == 20000
org.apache.log4j.Priority.INFO.levelStr.toString == "INFO"
org.apache.log4j.Priority.INFO.syslogEquivalent == 6
org.apache.log4j.Priority.DEBUG.level == 10000
org.apache.log4j.Priority.DEBUG.levelStr.toString == "DEBUG"
org.apache.log4j.Priority.DEBUG.syslogEquivalent == 7
===========================================================================
org.apache.log4j.spi.RootLogger.RootLogger(org.apache.log4j.Level):::EXIT
this.level == org.apache.log4j.Level.DEBUG
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(level)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
this.level.level == level.level
this.level.levelStr == level.levelStr
this.level.syslogEquivalent == level.syslogEquivalent
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
level.level == orig(level.level)
level.levelStr == orig(level.levelStr)
level.levelStr.toString == orig(level.levelStr.toString)
level.syslogEquivalent == orig(level.syslogEquivalent)
level.level == 10000
level.levelStr has only one value
level.levelStr.toString == "DEBUG"
level.syslogEquivalent == 7
===========================================================================
org.apache.log4j.spi.RootLogger.setLevel(org.apache.log4j.Level):::ENTER
org.apache.log4j.Level.DEBUG == level
this.level == null
level.level == 10000
level.levelStr has only one value
level.levelStr.toString == "DEBUG"
level.syslogEquivalent == 7
===========================================================================
org.apache.log4j.spi.RootLogger.setLevel(org.apache.log4j.Level):::EXIT
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.level == org.apache.log4j.Level.DEBUG
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.DEBUG == orig(level)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Level.OFF.level == orig(org.apache.log4j.Level.OFF.level)
org.apache.log4j.Level.OFF.levelStr == orig(org.apache.log4j.Level.OFF.levelStr)
org.apache.log4j.Level.OFF.levelStr.toString == orig(org.apache.log4j.Level.OFF.levelStr.toString)
org.apache.log4j.Level.OFF.syslogEquivalent == orig(org.apache.log4j.Level.OFF.syslogEquivalent)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.apache.log4j.Level.FATAL.level == orig(org.apache.log4j.Level.FATAL.level)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Level.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr == orig(org.apache.log4j.Priority.FATAL.levelStr)
org.apache.log4j.Level.FATAL.levelStr.toString == orig(org.apache.log4j.Level.FATAL.levelStr.toString)
org.apache.log4j.Level.FATAL.syslogEquivalent == orig(org.apache.log4j.Level.FATAL.syslogEquivalent)
org.apache.log4j.Level.ERROR.level == orig(org.apache.log4j.Level.ERROR.level)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Level.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr == orig(org.apache.log4j.Priority.ERROR.levelStr)
org.apache.log4j.Level.ERROR.levelStr.toString == orig(org.apache.log4j.Level.ERROR.levelStr.toString)
org.apache.log4j.Level.ERROR.syslogEquivalent == orig(org.apache.log4j.Level.ERROR.syslogEquivalent)
org.apache.log4j.Level.WARN.level == orig(org.apache.log4j.Level.WARN.level)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Level.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr == orig(org.apache.log4j.Priority.WARN.levelStr)
org.apache.log4j.Level.WARN.levelStr.toString == orig(org.apache.log4j.Level.WARN.levelStr.toString)
org.apache.log4j.Level.WARN.syslogEquivalent == orig(org.apache.log4j.Level.WARN.syslogEquivalent)
org.apache.log4j.Level.INFO.level == orig(org.apache.log4j.Level.INFO.level)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Level.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr == orig(org.apache.log4j.Priority.INFO.levelStr)
org.apache.log4j.Level.INFO.levelStr.toString == orig(org.apache.log4j.Level.INFO.levelStr.toString)
org.apache.log4j.Level.INFO.syslogEquivalent == orig(org.apache.log4j.Level.INFO.syslogEquivalent)
org.apache.log4j.Level.DEBUG.level == orig(org.apache.log4j.Level.DEBUG.level)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Level.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr == orig(org.apache.log4j.Priority.DEBUG.levelStr)
org.apache.log4j.Level.DEBUG.levelStr.toString == orig(org.apache.log4j.Level.DEBUG.levelStr.toString)
org.apache.log4j.Level.DEBUG.syslogEquivalent == orig(org.apache.log4j.Level.DEBUG.syslogEquivalent)
org.apache.log4j.Level.TRACE.level == orig(org.apache.log4j.Level.TRACE.level)
org.apache.log4j.Level.TRACE.levelStr == orig(org.apache.log4j.Level.TRACE.levelStr)
org.apache.log4j.Level.TRACE.levelStr.toString == orig(org.apache.log4j.Level.TRACE.levelStr.toString)
org.apache.log4j.Level.TRACE.syslogEquivalent == orig(org.apache.log4j.Level.TRACE.syslogEquivalent)
org.apache.log4j.Level.ALL.level == orig(org.apache.log4j.Level.ALL.level)
org.apache.log4j.Level.ALL.levelStr == orig(org.apache.log4j.Level.ALL.levelStr)
org.apache.log4j.Level.ALL.levelStr.toString == orig(org.apache.log4j.Level.ALL.levelStr.toString)
org.apache.log4j.Level.ALL.syslogEquivalent == orig(org.apache.log4j.Level.ALL.syslogEquivalent)
this.level.level == level.level
this.level.levelStr == level.levelStr
this.level.syslogEquivalent == level.syslogEquivalent
org.apache.log4j.Priority.FATAL.level == orig(org.apache.log4j.Priority.FATAL.level)
org.apache.log4j.Priority.FATAL.levelStr.toString == orig(org.apache.log4j.Priority.FATAL.levelStr.toString)
org.apache.log4j.Priority.FATAL.syslogEquivalent == orig(org.apache.log4j.Priority.FATAL.syslogEquivalent)
org.apache.log4j.Priority.ERROR.level == orig(org.apache.log4j.Priority.ERROR.level)
org.apache.log4j.Priority.ERROR.levelStr.toString == orig(org.apache.log4j.Priority.ERROR.levelStr.toString)
org.apache.log4j.Priority.ERROR.syslogEquivalent == orig(org.apache.log4j.Priority.ERROR.syslogEquivalent)
org.apache.log4j.Priority.WARN.level == orig(org.apache.log4j.Priority.WARN.level)
org.apache.log4j.Priority.WARN.levelStr.toString == orig(org.apache.log4j.Priority.WARN.levelStr.toString)
org.apache.log4j.Priority.WARN.syslogEquivalent == orig(org.apache.log4j.Priority.WARN.syslogEquivalent)
org.apache.log4j.Priority.INFO.level == orig(org.apache.log4j.Priority.INFO.level)
org.apache.log4j.Priority.INFO.levelStr.toString == orig(org.apache.log4j.Priority.INFO.levelStr.toString)
org.apache.log4j.Priority.INFO.syslogEquivalent == orig(org.apache.log4j.Priority.INFO.syslogEquivalent)
org.apache.log4j.Priority.DEBUG.level == orig(org.apache.log4j.Priority.DEBUG.level)
org.apache.log4j.Priority.DEBUG.levelStr.toString == orig(org.apache.log4j.Priority.DEBUG.levelStr.toString)
org.apache.log4j.Priority.DEBUG.syslogEquivalent == orig(org.apache.log4j.Priority.DEBUG.syslogEquivalent)
this.parent == orig(this.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
this.resourceBundle == orig(this.resourceBundle)
this.repository == orig(this.repository)
this.aai == orig(this.aai)
this.additive == orig(this.additive)
level.level == orig(level.level)
level.levelStr == orig(level.levelStr)
level.levelStr.toString == orig(level.levelStr.toString)
level.syslogEquivalent == orig(level.syslogEquivalent)
level.level == 10000
level.levelStr has only one value
level.levelStr.toString == "DEBUG"
level.syslogEquivalent == 7
===========================================================================
org.nerv.rpgclient.EffectType:::CLASS
org.nerv.rpgclient.EffectType.ATTACK has only one value
org.nerv.rpgclient.EffectType.RECOVERY has only one value
org.nerv.rpgclient.EffectType.SUPPORT has only one value
org.nerv.rpgclient.EffectType.NECROMANCY has only one value
org.nerv.rpgclient.EffectType.$VALUES has only one value
org.nerv.rpgclient.EffectType.$VALUES.getClass().getName() == org.nerv.rpgclient.EffectType[].class
org.nerv.rpgclient.EffectType.$VALUES[] contains no nulls and has only one value, of length 4
org.nerv.rpgclient.EffectType.$VALUES[].getClass().getName() == [org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType]
org.nerv.rpgclient.EffectType.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.EffectType.class
size(org.nerv.rpgclient.EffectType.$VALUES[]) == 4
===========================================================================
org.nerv.rpgclient.EffectType:::OBJECT
===========================================================================
org.nerv.rpgclient.EffectType.EffectType(java.lang.String, int):::ENTER
===========================================================================
org.nerv.rpgclient.EffectType.EffectType(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
===========================================================================
org.nerv.rpgclient.EffectType.values():::ENTER
===========================================================================
org.nerv.rpgclient.EffectType.values():::EXIT
org.nerv.rpgclient.EffectType.ATTACK == orig(org.nerv.rpgclient.EffectType.ATTACK)
org.nerv.rpgclient.EffectType.RECOVERY == orig(org.nerv.rpgclient.EffectType.RECOVERY)
org.nerv.rpgclient.EffectType.SUPPORT == orig(org.nerv.rpgclient.EffectType.SUPPORT)
org.nerv.rpgclient.EffectType.NECROMANCY == orig(org.nerv.rpgclient.EffectType.NECROMANCY)
org.nerv.rpgclient.EffectType.$VALUES == orig(org.nerv.rpgclient.EffectType.$VALUES)
org.nerv.rpgclient.EffectType.$VALUES.getClass().getName() == return.getClass().getName()
org.nerv.rpgclient.EffectType.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.EffectType.$VALUES.getClass().getName())
org.nerv.rpgclient.EffectType.$VALUES[] == orig(org.nerv.rpgclient.EffectType.$VALUES[])
return has only one value
return[] contains no nulls and has only one value, of length 4
size(return[]) == 4
===========================================================================
org.nerv.rpgclient.Informable:::OBJECT
===========================================================================
org.nerv.rpgclient.Informable.Informable():::EXIT
===========================================================================
org.nerv.rpgclient.Main.createHealSkill():::EXIT
return.type == org.nerv.rpgclient.EffectType.RECOVERY
return has only one value
org.nerv.rpgclient.Skill.NONE has only one value
return.name has only one value
return.name.toString == "Heal"
org.nerv.rpgclient.EffectType.ATTACK has only one value
org.nerv.rpgclient.EffectType.RECOVERY has only one value
org.nerv.rpgclient.EffectType.SUPPORT has only one value
org.nerv.rpgclient.EffectType.NECROMANCY has only one value
org.nerv.rpgclient.EffectType.$VALUES has only one value
org.nerv.rpgclient.EffectType.$VALUES.getClass().getName() == org.nerv.rpgclient.EffectType[].class
org.nerv.rpgclient.EffectType.$VALUES[] contains no nulls and has only one value, of length 4
org.nerv.rpgclient.EffectType.$VALUES[].getClass().getName() == [org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType]
org.nerv.rpgclient.EffectType.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.EffectType.class
return.level == 0
return.attainableLevel == 0
return.damage == null
return.recovery has only one value
return.statusEffect == null
org.nerv.rpgclient.Status.NORMAL has only one value
org.nerv.rpgclient.Status.POISONED has only one value
org.nerv.rpgclient.Status.PARALYZED has only one value
org.nerv.rpgclient.Status.$VALUES has only one value
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == org.nerv.rpgclient.Status[].class
org.nerv.rpgclient.Status.$VALUES[] contains no nulls and has only one value, of length 3
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() == [org.nerv.rpgclient.Status, org.nerv.rpgclient.Status, org.nerv.rpgclient.Status]
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.Status.class
return.mpCost == null
size(org.nerv.rpgclient.EffectType.$VALUES[]) == 4
size(org.nerv.rpgclient.Status.$VALUES[]) == 3
===========================================================================
org.nerv.rpgclient.Main.createJob():::EXIT
return.type == org.nerv.rpgclient.player.Job$Type.SWORDSMAN
return has only one value
org.nerv.rpgclient.player.Job$Type.SWORDSMAN has only one value
org.nerv.rpgclient.player.Job$Type.HEALER has only one value
org.nerv.rpgclient.player.Job$Type.$VALUES has only one value
org.nerv.rpgclient.player.Job$Type.$VALUES.getClass().getName() == org.nerv.rpgclient.player.Job$Type[].class
org.nerv.rpgclient.player.Job$Type.$VALUES[] contains no nulls and has only one value, of length 2
org.nerv.rpgclient.player.Job$Type.$VALUES[].getClass().getName() == [org.nerv.rpgclient.player.Job.Type, org.nerv.rpgclient.player.Job.Type]
org.nerv.rpgclient.player.Job$Type.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.player.Job.Type.class
return.skills has only one value
return.skills[] contains no nulls and has only one value, of length 3
return.skills[].getClass().getName() == [org.nerv.rpgclient.Skill, org.nerv.rpgclient.Skill, org.nerv.rpgclient.Skill]
return.skills[].getClass().getName() elements == org.nerv.rpgclient.Skill.class
return.skills.getClass().getName() == java.util.ArrayList.class
return.attainableLevel == 0
size(org.nerv.rpgclient.player.Job$Type.$VALUES[]) == 2
size(return.skills[]) == 3
===========================================================================
org.nerv.rpgclient.Main.createMonster():::EXIT
return.skills.getClass().getName() == return.drops.getClass().getName()
return.stats.maxHp == return.stats.hp
return.status == org.nerv.rpgclient.Status.NORMAL
return has only one value
return.id == null
return.skills has only one value
return.skills[] == []
return.skills[].getClass().getName() == []
return.skills.getClass().getName() == java.util.ArrayList.class
return.drops has only one value
return.drops[] == []
return.drops[].getClass().getName() == []
org.nerv.rpgclient.RpgObject.LOGGER has only one value
org.apache.log4j.Logger.FQCN has only one value
org.apache.log4j.Logger.FQCN.toString == "org.apache.log4j.Logger"
org.apache.log4j.Logger.class$org$apache$log4j$Logger has only one value
org.nerv.rpgclient.RpgObject.LOGGER.name has only one value
org.nerv.rpgclient.RpgObject.LOGGER.name.toString == "org.nerv.rpgclient.RpgObject"
org.nerv.rpgclient.RpgObject.LOGGER.level == null
org.nerv.rpgclient.RpgObject.LOGGER.parent has only one value
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == null
org.nerv.rpgclient.RpgObject.LOGGER.repository has only one value
org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
org.nerv.rpgclient.RpgObject.LOGGER.aai == null
org.nerv.rpgclient.RpgObject.LOGGER.additive == true
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
return.name has only one value
return.name.toString == "Poring"
return.stats has only one value
return.stats.maxHp has only one value
return.stats.str == null
return.stats.def == null
return.stats.atk == null
return.stats.maxMp == null
return.stats.mp == null
return.alive has only one value
org.nerv.rpgclient.Status.NORMAL has only one value
org.nerv.rpgclient.Status.POISONED has only one value
org.nerv.rpgclient.Status.PARALYZED has only one value
org.nerv.rpgclient.Status.$VALUES has only one value
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == org.nerv.rpgclient.Status[].class
org.nerv.rpgclient.Status.$VALUES[] contains no nulls and has only one value, of length 3
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() == [org.nerv.rpgclient.Status, org.nerv.rpgclient.Status, org.nerv.rpgclient.Status]
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.Status.class
size(org.nerv.rpgclient.Status.$VALUES[]) == 3
===========================================================================
org.nerv.rpgclient.Main.createReviveSkill():::EXIT
return.type == org.nerv.rpgclient.EffectType.NECROMANCY
return has only one value
org.nerv.rpgclient.Skill.NONE has only one value
return.name has only one value
return.name.toString == "Revive"
org.nerv.rpgclient.EffectType.ATTACK has only one value
org.nerv.rpgclient.EffectType.RECOVERY has only one value
org.nerv.rpgclient.EffectType.SUPPORT has only one value
org.nerv.rpgclient.EffectType.NECROMANCY has only one value
org.nerv.rpgclient.EffectType.$VALUES has only one value
org.nerv.rpgclient.EffectType.$VALUES.getClass().getName() == org.nerv.rpgclient.EffectType[].class
org.nerv.rpgclient.EffectType.$VALUES[] contains no nulls and has only one value, of length 4
org.nerv.rpgclient.EffectType.$VALUES[].getClass().getName() == [org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType]
org.nerv.rpgclient.EffectType.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.EffectType.class
return.level == 0
return.attainableLevel == 0
return.damage == null
return.recovery has only one value
return.statusEffect == null
org.nerv.rpgclient.Status.NORMAL has only one value
org.nerv.rpgclient.Status.POISONED has only one value
org.nerv.rpgclient.Status.PARALYZED has only one value
org.nerv.rpgclient.Status.$VALUES has only one value
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == org.nerv.rpgclient.Status[].class
org.nerv.rpgclient.Status.$VALUES[] contains no nulls and has only one value, of length 3
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() == [org.nerv.rpgclient.Status, org.nerv.rpgclient.Status, org.nerv.rpgclient.Status]
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.Status.class
return.mpCost == null
size(org.nerv.rpgclient.EffectType.$VALUES[]) == 4
size(org.nerv.rpgclient.Status.$VALUES[]) == 3
===========================================================================
org.nerv.rpgclient.Main.createSkill():::EXIT
return.type == org.nerv.rpgclient.EffectType.ATTACK
return.statusEffect == org.nerv.rpgclient.Status.PARALYZED
return has only one value
org.nerv.rpgclient.Skill.NONE has only one value
return.name has only one value
return.name.toString == "Sword Slash"
org.nerv.rpgclient.EffectType.ATTACK has only one value
org.nerv.rpgclient.EffectType.RECOVERY has only one value
org.nerv.rpgclient.EffectType.SUPPORT has only one value
org.nerv.rpgclient.EffectType.NECROMANCY has only one value
org.nerv.rpgclient.EffectType.$VALUES has only one value
org.nerv.rpgclient.EffectType.$VALUES.getClass().getName() == org.nerv.rpgclient.EffectType[].class
org.nerv.rpgclient.EffectType.$VALUES[] contains no nulls and has only one value, of length 4
org.nerv.rpgclient.EffectType.$VALUES[].getClass().getName() == [org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType]
org.nerv.rpgclient.EffectType.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.EffectType.class
return.level == 0
return.attainableLevel == 0
return.damage has only one value
return.recovery == null
org.nerv.rpgclient.Status.NORMAL has only one value
org.nerv.rpgclient.Status.POISONED has only one value
org.nerv.rpgclient.Status.PARALYZED has only one value
org.nerv.rpgclient.Status.$VALUES has only one value
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == org.nerv.rpgclient.Status[].class
org.nerv.rpgclient.Status.$VALUES[] contains no nulls and has only one value, of length 3
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() == [org.nerv.rpgclient.Status, org.nerv.rpgclient.Status, org.nerv.rpgclient.Status]
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.Status.class
return.mpCost == null
size(org.nerv.rpgclient.EffectType.$VALUES[]) == 4
size(org.nerv.rpgclient.Status.$VALUES[]) == 3
===========================================================================
org.nerv.rpgclient.Main.createStats():::EXIT
return.maxHp == return.hp
return.maxHp has only one value
return.str == null
return.def == null
return.atk == null
return.maxMp == null
return.mp == null
===========================================================================
org.nerv.rpgclient.Main.main(java.lang.String[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.lang.String[].class
arg0[] == []
arg0[].toString == []
===========================================================================
org.nerv.rpgclient.Main.main(java.lang.String[]):::EXIT
arg0[] == orig(arg0[])
arg0[] == []
arg0[].toString == []
===========================================================================
org.nerv.rpgclient.Main.printHp(org.nerv.rpgclient.RpgObject, org.nerv.rpgclient.RpgObject):::ENTER
arg0 has only one value
org.nerv.rpgclient.RpgObject.LOGGER has only one value
org.apache.log4j.Logger.FQCN has only one value
org.apache.log4j.Logger.FQCN.toString == "org.apache.log4j.Logger"
org.apache.log4j.Logger.class$org$apache$log4j$Logger has only one value
org.nerv.rpgclient.RpgObject.LOGGER.name has only one value
org.nerv.rpgclient.RpgObject.LOGGER.name.toString == "org.nerv.rpgclient.RpgObject"
org.nerv.rpgclient.RpgObject.LOGGER.level == null
org.nerv.rpgclient.RpgObject.LOGGER.parent has only one value
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == null
org.nerv.rpgclient.RpgObject.LOGGER.repository has only one value
org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
org.nerv.rpgclient.RpgObject.LOGGER.aai == null
org.nerv.rpgclient.RpgObject.LOGGER.additive == true
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
arg0.name has only one value
arg0.name.toString == "Mark"
arg0.stats has only one value
arg0.stats.maxHp has only one value
arg0.stats.hp has only one value
arg0.stats.str == null
arg0.stats.def == null
arg0.stats.atk == null
arg0.stats.maxMp == null
arg0.stats.mp == null
arg0.alive has only one value
arg0.status has only one value
org.nerv.rpgclient.Status.NORMAL has only one value
org.nerv.rpgclient.Status.POISONED has only one value
org.nerv.rpgclient.Status.PARALYZED has only one value
org.nerv.rpgclient.Status.$VALUES has only one value
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == org.nerv.rpgclient.Status[].class
org.nerv.rpgclient.Status.$VALUES[] contains no nulls and has only one value, of length 3
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() == [org.nerv.rpgclient.Status, org.nerv.rpgclient.Status, org.nerv.rpgclient.Status]
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.Status.class
arg1 has only one value
arg1.name has only one value
arg1.name.toString == "Poring"
arg1.stats has only one value
arg1.stats.maxHp has only one value
arg1.stats.hp has only one value
arg1.stats.str == null
arg1.stats.def == null
arg1.stats.atk == null
arg1.stats.maxMp == null
arg1.stats.mp == null
arg1.alive has only one value
arg1.status has only one value
size(org.nerv.rpgclient.Status.$VALUES[]) == 3
===========================================================================
org.nerv.rpgclient.Main.printHp(org.nerv.rpgclient.RpgObject, org.nerv.rpgclient.RpgObject):::EXIT
org.nerv.rpgclient.RpgObject.LOGGER == orig(org.nerv.rpgclient.RpgObject.LOGGER)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
org.nerv.rpgclient.RpgObject.LOGGER.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.name)
org.nerv.rpgclient.RpgObject.LOGGER.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.level)
org.nerv.rpgclient.RpgObject.LOGGER.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository)
org.nerv.rpgclient.RpgObject.LOGGER.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.aai)
org.nerv.rpgclient.RpgObject.LOGGER.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.additive)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.stats == orig(arg0.stats)
arg0.stats.maxHp == orig(arg0.stats.maxHp)
arg0.stats.hp == orig(arg0.stats.hp)
arg0.stats.str == orig(arg0.stats.str)
arg0.stats.def == orig(arg0.stats.def)
arg0.stats.atk == orig(arg0.stats.atk)
arg0.stats.maxMp == orig(arg0.stats.maxMp)
arg0.stats.mp == orig(arg0.stats.mp)
arg0.alive == orig(arg0.alive)
arg0.status == orig(arg0.status)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
arg1.name == orig(arg1.name)
arg1.name.toString == orig(arg1.name.toString)
arg1.stats == orig(arg1.stats)
arg1.stats.maxHp == orig(arg1.stats.maxHp)
arg1.stats.hp == orig(arg1.stats.hp)
arg1.stats.str == orig(arg1.stats.str)
arg1.stats.def == orig(arg1.stats.def)
arg1.stats.atk == orig(arg1.stats.atk)
arg1.stats.maxMp == orig(arg1.stats.maxMp)
arg1.stats.mp == orig(arg1.stats.mp)
arg1.alive == orig(arg1.alive)
arg1.status == orig(arg1.status)
org.nerv.rpgclient.RpgObject.LOGGER has only one value
org.apache.log4j.Logger.FQCN has only one value
org.apache.log4j.Logger.FQCN.toString == "org.apache.log4j.Logger"
org.apache.log4j.Logger.class$org$apache$log4j$Logger has only one value
org.nerv.rpgclient.RpgObject.LOGGER.name has only one value
org.nerv.rpgclient.RpgObject.LOGGER.name.toString == "org.nerv.rpgclient.RpgObject"
org.nerv.rpgclient.RpgObject.LOGGER.level == null
org.nerv.rpgclient.RpgObject.LOGGER.parent has only one value
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == null
org.nerv.rpgclient.RpgObject.LOGGER.repository has only one value
org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
org.nerv.rpgclient.RpgObject.LOGGER.aai == null
org.nerv.rpgclient.RpgObject.LOGGER.additive == true
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
arg0.name has only one value
arg0.name.toString == "Mark"
arg0.stats has only one value
arg0.stats.maxHp has only one value
arg0.stats.hp has only one value
arg0.stats.str == null
arg0.stats.def == null
arg0.stats.atk == null
arg0.stats.maxMp == null
arg0.stats.mp == null
arg0.alive has only one value
arg0.status has only one value
org.nerv.rpgclient.Status.NORMAL has only one value
org.nerv.rpgclient.Status.POISONED has only one value
org.nerv.rpgclient.Status.PARALYZED has only one value
org.nerv.rpgclient.Status.$VALUES has only one value
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == org.nerv.rpgclient.Status[].class
org.nerv.rpgclient.Status.$VALUES[] contains no nulls and has only one value, of length 3
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() == [org.nerv.rpgclient.Status, org.nerv.rpgclient.Status, org.nerv.rpgclient.Status]
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.Status.class
arg1.name has only one value
arg1.name.toString == "Poring"
arg1.stats has only one value
arg1.stats.maxHp has only one value
arg1.stats.hp has only one value
arg1.stats.str == null
arg1.stats.def == null
arg1.stats.atk == null
arg1.stats.maxMp == null
arg1.stats.mp == null
arg1.alive has only one value
arg1.status has only one value
size(org.nerv.rpgclient.Status.$VALUES[]) == 3
===========================================================================
org.nerv.rpgclient.RpgObject:::CLASS
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository.getClass().getName() == org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName()
org.nerv.rpgclient.RpgObject.LOGGER has only one value
org.nerv.rpgclient.RpgObject.LOGGER != null
org.apache.log4j.Logger.FQCN has only one value
org.apache.log4j.Logger.FQCN != null
org.apache.log4j.Logger.FQCN.toString == "org.apache.log4j.Logger"
org.apache.log4j.Logger.class$org$apache$log4j$Logger has only one value
org.apache.log4j.Logger.class$org$apache$log4j$Logger != null
org.nerv.rpgclient.RpgObject.LOGGER.name has only one value
org.nerv.rpgclient.RpgObject.LOGGER.name != null
org.nerv.rpgclient.RpgObject.LOGGER.name.toString == "org.nerv.rpgclient.RpgObject"
org.nerv.rpgclient.RpgObject.LOGGER.level == null
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.OFF != null
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.FATAL != null
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.ERROR != null
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.WARN != null
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.INFO != null
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.DEBUG != null
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.TRACE != null
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.ALL != null
org.apache.log4j.Level.class$org$apache$log4j$Level == null
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.FATAL != null
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.ERROR != null
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.WARN != null
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.INFO != null
org.apache.log4j.Priority.DEBUG has only one value
org.apache.log4j.Priority.DEBUG != null
org.nerv.rpgclient.RpgObject.LOGGER.parent has only one value
org.nerv.rpgclient.RpgObject.LOGGER.parent != null
org.nerv.rpgclient.RpgObject.LOGGER.parent.name has only one value
org.nerv.rpgclient.RpgObject.LOGGER.parent.name != null
org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString == "root"
org.nerv.rpgclient.RpgObject.LOGGER.parent.level has only one value
org.nerv.rpgclient.RpgObject.LOGGER.parent.level != null
org.nerv.rpgclient.RpgObject.LOGGER.parent.parent == null
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN != null
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == null
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository has only one value
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository != null
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == null
org.nerv.rpgclient.RpgObject.LOGGER.parent.additive == true
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
org.apache.log4j.Category.class$org$apache$log4j$Category != null
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == null
org.nerv.rpgclient.RpgObject.LOGGER.repository has only one value
org.nerv.rpgclient.RpgObject.LOGGER.repository != null
org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
org.nerv.rpgclient.RpgObject.LOGGER.aai == null
org.nerv.rpgclient.RpgObject.LOGGER.additive == true
===========================================================================
org.nerv.rpgclient.RpgObject:::OBJECT
this.name.toString one of { "Enemy", "Mark", "Poring" }
this.stats.maxHp has only one value
this.stats.maxHp != null
this.stats.hp != null
this.stats.str == null
this.stats.def == null
this.stats.atk == null
this.stats.maxMp == null
this.stats.mp == null
this.status != null
org.nerv.rpgclient.Status.NORMAL has only one value
org.nerv.rpgclient.Status.NORMAL != null
org.nerv.rpgclient.Status.POISONED has only one value
org.nerv.rpgclient.Status.POISONED != null
org.nerv.rpgclient.Status.PARALYZED has only one value
org.nerv.rpgclient.Status.PARALYZED != null
org.nerv.rpgclient.Status.$VALUES has only one value
org.nerv.rpgclient.Status.$VALUES != null
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == org.nerv.rpgclient.Status[].class
org.nerv.rpgclient.Status.$VALUES[] contains no nulls and has only one value, of length 3
org.nerv.rpgclient.Status.$VALUES[] elements != null
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() == [org.nerv.rpgclient.Status, org.nerv.rpgclient.Status, org.nerv.rpgclient.Status]
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.Status.class
size(org.nerv.rpgclient.Status.$VALUES[]) == 3
org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName() != org.nerv.rpgclient.Status.$VALUES.getClass().getName()
===========================================================================
org.nerv.rpgclient.RpgObject.RpgObject():::EXIT
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository == org.nerv.rpgclient.RpgObject.LOGGER.repository
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == org.nerv.rpgclient.RpgObject.LOGGER.aai
this.status == org.nerv.rpgclient.Status.NORMAL
this.name == null
this.stats == null
this.alive == null
===========================================================================
org.nerv.rpgclient.RpgObject.addToHp(org.nerv.rpgclient.RpgObject, java.lang.Long):::ENTER
this.stats.maxHp == this.stats.hp
this.status == org.nerv.rpgclient.Status.NORMAL
this has only one value
this.name has only one value
this.name.toString == "Mark"
this.stats has only one value
this.alive has only one value
arg0 has only one value
arg0.name has only one value
arg0.name.toString == "Poring"
arg0.stats has only one value
arg0.stats.maxHp has only one value
arg0.stats.hp has only one value
arg0.stats.str == null
arg0.stats.def == null
arg0.stats.atk == null
arg0.stats.maxMp == null
arg0.stats.mp == null
arg0.alive has only one value
arg0.status has only one value
arg1 has only one value
===========================================================================
org.nerv.rpgclient.RpgObject.addToHp(org.nerv.rpgclient.RpgObject, java.lang.Long):::EXIT
org.nerv.rpgclient.RpgObject.LOGGER == orig(org.nerv.rpgclient.RpgObject.LOGGER)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
org.nerv.rpgclient.RpgObject.LOGGER.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.name)
org.nerv.rpgclient.RpgObject.LOGGER.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.nerv.rpgclient.RpgObject.LOGGER.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.level)
org.nerv.rpgclient.RpgObject.LOGGER.parent.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.repository)
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.aai)
org.nerv.rpgclient.RpgObject.LOGGER.parent.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.additive)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository)
org.nerv.rpgclient.RpgObject.LOGGER.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.aai)
org.nerv.rpgclient.RpgObject.LOGGER.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.additive)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.stats == orig(this.stats)
this.stats.maxHp == this.stats.hp
this.stats.maxHp == orig(this.stats.maxHp)
this.stats.maxHp == orig(this.stats.hp)
this.stats.str == orig(this.stats.str)
this.stats.def == orig(this.stats.def)
this.stats.atk == orig(this.stats.atk)
this.stats.maxMp == orig(this.stats.maxMp)
this.stats.mp == orig(this.stats.mp)
this.alive == orig(this.alive)
this.status == org.nerv.rpgclient.Status.NORMAL
org.nerv.rpgclient.Status.NORMAL == orig(this.status)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.stats == orig(arg0.stats)
arg0.stats.maxHp == orig(arg0.stats.maxHp)
arg0.stats.str == orig(arg0.stats.str)
arg0.stats.def == orig(arg0.stats.def)
arg0.stats.atk == orig(arg0.stats.atk)
arg0.stats.maxMp == orig(arg0.stats.maxMp)
arg0.stats.mp == orig(arg0.stats.mp)
arg0.alive == orig(arg0.alive)
arg0.status == orig(arg0.status)
this.name has only one value
this.name.toString == "Mark"
this.stats has only one value
this.alive has only one value
arg0.name has only one value
arg0.name.toString == "Poring"
arg0.stats has only one value
arg0.stats.maxHp has only one value
arg0.stats.hp has only one value
arg0.stats.str == null
arg0.stats.def == null
arg0.stats.atk == null
arg0.stats.maxMp == null
arg0.stats.mp == null
arg0.alive has only one value
arg0.status has only one value
===========================================================================
org.nerv.rpgclient.RpgObject.damage(org.nerv.rpgclient.RpgObject, java.lang.Long):::ENTER
this.stats.maxHp == this.stats.hp
this.status == org.nerv.rpgclient.Status.NORMAL
this has only one value
this.name has only one value
this.name.toString == "Mark"
this.stats has only one value
this.alive has only one value
arg0 has only one value
arg0.name has only one value
arg0.name.toString == "Poring"
arg0.stats has only one value
arg0.stats.maxHp has only one value
arg0.stats.hp has only one value
arg0.stats.str == null
arg0.stats.def == null
arg0.stats.atk == null
arg0.stats.maxMp == null
arg0.stats.mp == null
arg0.alive has only one value
arg0.status has only one value
arg1 has only one value
===========================================================================
org.nerv.rpgclient.RpgObject.damage(org.nerv.rpgclient.RpgObject, java.lang.Long):::EXIT
org.nerv.rpgclient.RpgObject.LOGGER == orig(org.nerv.rpgclient.RpgObject.LOGGER)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
org.nerv.rpgclient.RpgObject.LOGGER.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.name)
org.nerv.rpgclient.RpgObject.LOGGER.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.nerv.rpgclient.RpgObject.LOGGER.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.level)
org.nerv.rpgclient.RpgObject.LOGGER.parent.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.repository)
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.aai)
org.nerv.rpgclient.RpgObject.LOGGER.parent.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.additive)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository)
org.nerv.rpgclient.RpgObject.LOGGER.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.aai)
org.nerv.rpgclient.RpgObject.LOGGER.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.additive)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.stats == orig(this.stats)
this.stats.maxHp == this.stats.hp
this.stats.maxHp == orig(this.stats.maxHp)
this.stats.maxHp == orig(this.stats.hp)
this.stats.str == orig(this.stats.str)
this.stats.def == orig(this.stats.def)
this.stats.atk == orig(this.stats.atk)
this.stats.maxMp == orig(this.stats.maxMp)
this.stats.mp == orig(this.stats.mp)
this.alive == orig(this.alive)
this.status == org.nerv.rpgclient.Status.NORMAL
org.nerv.rpgclient.Status.NORMAL == orig(this.status)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.stats == orig(arg0.stats)
arg0.stats.maxHp == orig(arg0.stats.maxHp)
arg0.stats.str == orig(arg0.stats.str)
arg0.stats.def == orig(arg0.stats.def)
arg0.stats.atk == orig(arg0.stats.atk)
arg0.stats.maxMp == orig(arg0.stats.maxMp)
arg0.stats.mp == orig(arg0.stats.mp)
arg0.alive == orig(arg0.alive)
arg0.status == orig(arg0.status)
this.name has only one value
this.name.toString == "Mark"
this.stats has only one value
this.alive has only one value
arg0.name has only one value
arg0.name.toString == "Poring"
arg0.stats has only one value
arg0.stats.maxHp has only one value
arg0.stats.hp has only one value
arg0.stats.str == null
arg0.stats.def == null
arg0.stats.atk == null
arg0.stats.maxMp == null
arg0.stats.mp == null
arg0.alive has only one value
arg0.status has only one value
===========================================================================
org.nerv.rpgclient.RpgObject.getName():::ENTER
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository == org.nerv.rpgclient.RpgObject.LOGGER.repository
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == org.nerv.rpgclient.RpgObject.LOGGER.aai
this.name.toString one of { "Mark", "Poring" }
this.alive has only one value
===========================================================================
org.nerv.rpgclient.RpgObject.getName():::EXIT
org.nerv.rpgclient.RpgObject.LOGGER == orig(org.nerv.rpgclient.RpgObject.LOGGER)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
org.nerv.rpgclient.RpgObject.LOGGER.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.name)
org.nerv.rpgclient.RpgObject.LOGGER.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.nerv.rpgclient.RpgObject.LOGGER.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.level)
org.nerv.rpgclient.RpgObject.LOGGER.parent.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository == org.nerv.rpgclient.RpgObject.LOGGER.repository
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == org.nerv.rpgclient.RpgObject.LOGGER.aai
org.nerv.rpgclient.RpgObject.LOGGER.parent.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.additive)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.repository)
org.nerv.rpgclient.RpgObject.LOGGER.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository)
org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName() == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.repository.getClass().getName())
org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName() == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName())
org.nerv.rpgclient.RpgObject.LOGGER.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.aai)
org.nerv.rpgclient.RpgObject.LOGGER.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.aai)
org.nerv.rpgclient.RpgObject.LOGGER.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.additive)
this.name == return
this.name.toString == orig(this.name.toString)
this.stats == orig(this.stats)
this.stats.maxHp == orig(this.stats.maxHp)
this.stats.hp == orig(this.stats.hp)
this.stats.str == orig(this.stats.str)
this.stats.def == orig(this.stats.def)
this.stats.atk == orig(this.stats.atk)
this.stats.maxMp == orig(this.stats.maxMp)
this.stats.mp == orig(this.stats.mp)
this.alive == orig(this.alive)
this.status == orig(this.status)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.Status.$VALUES.getClass().getName())
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
return == orig(this.name)
this.name.toString one of { "Mark", "Poring" }
this.alive has only one value
return.toString one of { "Mark", "Poring" }
===========================================================================
org.nerv.rpgclient.RpgObject.getStats():::ENTER
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository == org.nerv.rpgclient.RpgObject.LOGGER.repository
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == org.nerv.rpgclient.RpgObject.LOGGER.aai
this.name != null
this.name.toString one of { "Mark", "Poring" }
this.stats != null
this.alive has only one value
this.alive != null
===========================================================================
org.nerv.rpgclient.RpgObject.getStats():::EXIT
org.nerv.rpgclient.RpgObject.LOGGER == orig(org.nerv.rpgclient.RpgObject.LOGGER)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
org.nerv.rpgclient.RpgObject.LOGGER.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.name)
org.nerv.rpgclient.RpgObject.LOGGER.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.nerv.rpgclient.RpgObject.LOGGER.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.level)
org.nerv.rpgclient.RpgObject.LOGGER.parent.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository == org.nerv.rpgclient.RpgObject.LOGGER.repository
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == org.nerv.rpgclient.RpgObject.LOGGER.aai
org.nerv.rpgclient.RpgObject.LOGGER.parent.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.additive)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.repository)
org.nerv.rpgclient.RpgObject.LOGGER.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository)
org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName() == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.repository.getClass().getName())
org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName() == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName())
org.nerv.rpgclient.RpgObject.LOGGER.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.aai)
org.nerv.rpgclient.RpgObject.LOGGER.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.aai)
org.nerv.rpgclient.RpgObject.LOGGER.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.additive)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.stats == orig(this.stats)
this.stats.maxHp == orig(this.stats.maxHp)
this.stats.hp == orig(this.stats.hp)
this.stats.str == orig(this.stats.str)
this.stats.def == orig(this.stats.def)
this.stats.atk == orig(this.stats.atk)
this.stats.maxMp == orig(this.stats.maxMp)
this.stats.mp == orig(this.stats.mp)
this.alive == orig(this.alive)
this.status == orig(this.status)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.Status.$VALUES.getClass().getName())
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
this.name != null
this.name.toString one of { "Mark", "Poring" }
this.stats != null
this.alive has only one value
this.alive != null
return != null
return.maxHp has only one value
return.maxHp != null
return.hp != null
return.str == null
return.def == null
return.atk == null
return.maxMp == null
return.mp == null
===========================================================================
org.nerv.rpgclient.RpgObject.getStatus():::ENTER
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository == org.nerv.rpgclient.RpgObject.LOGGER.repository
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == org.nerv.rpgclient.RpgObject.LOGGER.aai
this.stats.maxHp == this.stats.hp
this.name.toString one of { "Mark", "Poring" }
this.alive has only one value
===========================================================================
org.nerv.rpgclient.RpgObject.getStatus():::EXIT
org.nerv.rpgclient.RpgObject.LOGGER == orig(org.nerv.rpgclient.RpgObject.LOGGER)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
org.nerv.rpgclient.RpgObject.LOGGER.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.name)
org.nerv.rpgclient.RpgObject.LOGGER.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.nerv.rpgclient.RpgObject.LOGGER.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.level)
org.nerv.rpgclient.RpgObject.LOGGER.parent.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository == org.nerv.rpgclient.RpgObject.LOGGER.repository
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == org.nerv.rpgclient.RpgObject.LOGGER.aai
org.nerv.rpgclient.RpgObject.LOGGER.parent.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.additive)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.repository)
org.nerv.rpgclient.RpgObject.LOGGER.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository)
org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName() == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.repository.getClass().getName())
org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName() == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName())
org.nerv.rpgclient.RpgObject.LOGGER.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.aai)
org.nerv.rpgclient.RpgObject.LOGGER.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.aai)
org.nerv.rpgclient.RpgObject.LOGGER.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.additive)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.stats == orig(this.stats)
this.stats.maxHp == this.stats.hp
this.stats.maxHp == orig(this.stats.maxHp)
this.stats.maxHp == orig(this.stats.hp)
this.stats.str == orig(this.stats.str)
this.stats.def == orig(this.stats.def)
this.stats.atk == orig(this.stats.atk)
this.stats.maxMp == orig(this.stats.maxMp)
this.stats.mp == orig(this.stats.mp)
this.alive == orig(this.alive)
this.status == orig(this.status)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.Status.$VALUES.getClass().getName())
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
this.name.toString one of { "Mark", "Poring" }
this.alive has only one value
===========================================================================
org.nerv.rpgclient.RpgObject.heal(org.nerv.rpgclient.RpgObject, java.lang.Long):::ENTER
this.stats.maxHp == this.stats.hp
this.status == org.nerv.rpgclient.Status.NORMAL
this has only one value
this.name has only one value
this.name.toString == "Mark"
this.stats has only one value
this.alive has only one value
arg0 has only one value
arg0.name has only one value
arg0.name.toString == "Poring"
arg0.stats has only one value
arg0.stats.maxHp has only one value
arg0.stats.hp has only one value
arg0.stats.str == null
arg0.stats.def == null
arg0.stats.atk == null
arg0.stats.maxMp == null
arg0.stats.mp == null
arg0.alive has only one value
arg0.status has only one value
arg1 has only one value
===========================================================================
org.nerv.rpgclient.RpgObject.heal(org.nerv.rpgclient.RpgObject, java.lang.Long):::EXIT69
===========================================================================
org.nerv.rpgclient.RpgObject.heal(org.nerv.rpgclient.RpgObject, java.lang.Long):::EXIT
org.nerv.rpgclient.RpgObject.LOGGER == orig(org.nerv.rpgclient.RpgObject.LOGGER)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
org.nerv.rpgclient.RpgObject.LOGGER.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.name)
org.nerv.rpgclient.RpgObject.LOGGER.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.nerv.rpgclient.RpgObject.LOGGER.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.level)
org.nerv.rpgclient.RpgObject.LOGGER.parent.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.repository)
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.aai)
org.nerv.rpgclient.RpgObject.LOGGER.parent.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.additive)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository)
org.nerv.rpgclient.RpgObject.LOGGER.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.aai)
org.nerv.rpgclient.RpgObject.LOGGER.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.additive)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.stats == orig(this.stats)
this.stats.maxHp == this.stats.hp
this.stats.maxHp == orig(this.stats.maxHp)
this.stats.maxHp == orig(this.stats.hp)
this.stats.str == orig(this.stats.str)
this.stats.def == orig(this.stats.def)
this.stats.atk == orig(this.stats.atk)
this.stats.maxMp == orig(this.stats.maxMp)
this.stats.mp == orig(this.stats.mp)
this.alive == orig(this.alive)
this.status == org.nerv.rpgclient.Status.NORMAL
org.nerv.rpgclient.Status.NORMAL == orig(this.status)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.stats == orig(arg0.stats)
arg0.stats.maxHp == orig(arg0.stats.maxHp)
arg0.stats.str == orig(arg0.stats.str)
arg0.stats.def == orig(arg0.stats.def)
arg0.stats.atk == orig(arg0.stats.atk)
arg0.stats.maxMp == orig(arg0.stats.maxMp)
arg0.stats.mp == orig(arg0.stats.mp)
arg0.alive == orig(arg0.alive)
arg0.status == orig(arg0.status)
this.name has only one value
this.name.toString == "Mark"
this.stats has only one value
this.alive has only one value
arg0.name has only one value
arg0.name.toString == "Poring"
arg0.stats has only one value
arg0.stats.maxHp has only one value
arg0.stats.hp has only one value
arg0.stats.str == null
arg0.stats.def == null
arg0.stats.atk == null
arg0.stats.maxMp == null
arg0.stats.mp == null
arg0.alive has only one value
arg0.status has only one value
===========================================================================
org.nerv.rpgclient.RpgObject.isAlive():::ENTER
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository == org.nerv.rpgclient.RpgObject.LOGGER.repository
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == org.nerv.rpgclient.RpgObject.LOGGER.aai
this.name.toString one of { "Mark", "Poring" }
this.alive has only one value
===========================================================================
org.nerv.rpgclient.RpgObject.isAlive():::EXIT46
===========================================================================
org.nerv.rpgclient.RpgObject.isAlive():::EXIT
org.nerv.rpgclient.RpgObject.LOGGER == orig(org.nerv.rpgclient.RpgObject.LOGGER)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
org.nerv.rpgclient.RpgObject.LOGGER.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.name)
org.nerv.rpgclient.RpgObject.LOGGER.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.nerv.rpgclient.RpgObject.LOGGER.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.level)
org.nerv.rpgclient.RpgObject.LOGGER.parent.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository == org.nerv.rpgclient.RpgObject.LOGGER.repository
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == org.nerv.rpgclient.RpgObject.LOGGER.aai
org.nerv.rpgclient.RpgObject.LOGGER.parent.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.additive)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.repository)
org.nerv.rpgclient.RpgObject.LOGGER.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository)
org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName() == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.repository.getClass().getName())
org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName() == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName())
org.nerv.rpgclient.RpgObject.LOGGER.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.aai)
org.nerv.rpgclient.RpgObject.LOGGER.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.aai)
org.nerv.rpgclient.RpgObject.LOGGER.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.additive)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.stats == orig(this.stats)
this.stats.maxHp == orig(this.stats.maxHp)
this.stats.hp == orig(this.stats.hp)
this.stats.str == orig(this.stats.str)
this.stats.def == orig(this.stats.def)
this.stats.atk == orig(this.stats.atk)
this.stats.maxMp == orig(this.stats.maxMp)
this.stats.mp == orig(this.stats.mp)
this.alive == orig(this.alive)
this.status == orig(this.status)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.Status.$VALUES.getClass().getName())
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
this.name.toString one of { "Mark", "Poring" }
this.alive has only one value
return has only one value
===========================================================================
org.nerv.rpgclient.RpgObject.setAlive(java.lang.Boolean):::ENTER
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository == org.nerv.rpgclient.RpgObject.LOGGER.repository
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == org.nerv.rpgclient.RpgObject.LOGGER.aai
this.stats.maxHp == this.stats.hp
this.status == org.nerv.rpgclient.Status.NORMAL
this.alive == null
arg0 has only one value
===========================================================================
org.nerv.rpgclient.RpgObject.setAlive(java.lang.Boolean):::EXIT
org.nerv.rpgclient.RpgObject.LOGGER == orig(org.nerv.rpgclient.RpgObject.LOGGER)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
org.nerv.rpgclient.RpgObject.LOGGER.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.name)
org.nerv.rpgclient.RpgObject.LOGGER.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.nerv.rpgclient.RpgObject.LOGGER.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.level)
org.nerv.rpgclient.RpgObject.LOGGER.parent.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository == org.nerv.rpgclient.RpgObject.LOGGER.repository
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == org.nerv.rpgclient.RpgObject.LOGGER.aai
org.nerv.rpgclient.RpgObject.LOGGER.parent.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.additive)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.repository)
org.nerv.rpgclient.RpgObject.LOGGER.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository)
org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName() == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.repository.getClass().getName())
org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName() == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName())
org.nerv.rpgclient.RpgObject.LOGGER.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.aai)
org.nerv.rpgclient.RpgObject.LOGGER.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.aai)
org.nerv.rpgclient.RpgObject.LOGGER.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.additive)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.stats == orig(this.stats)
this.stats.maxHp == this.stats.hp
this.stats.maxHp == orig(this.stats.maxHp)
this.stats.maxHp == orig(this.stats.hp)
this.stats.str == orig(this.stats.str)
this.stats.def == orig(this.stats.def)
this.stats.atk == orig(this.stats.atk)
this.stats.maxMp == orig(this.stats.maxMp)
this.stats.mp == orig(this.stats.mp)
this.alive == orig(arg0)
this.status == org.nerv.rpgclient.Status.NORMAL
org.nerv.rpgclient.Status.NORMAL == orig(this.status)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.Status.$VALUES.getClass().getName())
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
this.alive has only one value
===========================================================================
org.nerv.rpgclient.RpgObject.setName(java.lang.String):::ENTER
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository == org.nerv.rpgclient.RpgObject.LOGGER.repository
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == org.nerv.rpgclient.RpgObject.LOGGER.aai
this.stats.maxHp == this.stats.hp
this.status == org.nerv.rpgclient.Status.NORMAL
this.name == null
this.alive == null
arg0.toString one of { "Enemy", "Mark", "Poring" }
===========================================================================
org.nerv.rpgclient.RpgObject.setName(java.lang.String):::EXIT
org.nerv.rpgclient.RpgObject.LOGGER == orig(org.nerv.rpgclient.RpgObject.LOGGER)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
org.nerv.rpgclient.RpgObject.LOGGER.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.name)
org.nerv.rpgclient.RpgObject.LOGGER.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.nerv.rpgclient.RpgObject.LOGGER.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.level)
org.nerv.rpgclient.RpgObject.LOGGER.parent.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository == org.nerv.rpgclient.RpgObject.LOGGER.repository
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == org.nerv.rpgclient.RpgObject.LOGGER.aai
org.nerv.rpgclient.RpgObject.LOGGER.parent.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.additive)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.repository)
org.nerv.rpgclient.RpgObject.LOGGER.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository)
org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName() == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.repository.getClass().getName())
org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName() == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName())
org.nerv.rpgclient.RpgObject.LOGGER.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.aai)
org.nerv.rpgclient.RpgObject.LOGGER.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.aai)
org.nerv.rpgclient.RpgObject.LOGGER.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.additive)
this.name == orig(arg0)
this.stats == orig(this.stats)
this.stats.maxHp == this.stats.hp
this.stats.maxHp == orig(this.stats.maxHp)
this.stats.maxHp == orig(this.stats.hp)
this.stats.str == orig(this.stats.str)
this.stats.def == orig(this.stats.def)
this.stats.atk == orig(this.stats.atk)
this.stats.maxMp == orig(this.stats.maxMp)
this.stats.mp == orig(this.stats.mp)
this.alive == orig(this.alive)
this.status == org.nerv.rpgclient.Status.NORMAL
org.nerv.rpgclient.Status.NORMAL == orig(this.status)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.Status.$VALUES.getClass().getName())
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
arg0.toString == orig(arg0.toString)
this.alive == null
arg0.toString one of { "Enemy", "Mark", "Poring" }
===========================================================================
org.nerv.rpgclient.RpgObject.setStats(org.nerv.rpgclient.Stats):::ENTER
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository == org.nerv.rpgclient.RpgObject.LOGGER.repository
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == org.nerv.rpgclient.RpgObject.LOGGER.aai
this.status == org.nerv.rpgclient.Status.NORMAL
arg0.maxHp == arg0.hp
this.name.toString one of { "Enemy", "Mark" }
this.stats == null
this.alive == null
arg0.maxHp has only one value
arg0.str == null
arg0.def == null
arg0.atk == null
arg0.maxMp == null
arg0.mp == null
===========================================================================
org.nerv.rpgclient.RpgObject.setStats(org.nerv.rpgclient.Stats):::EXIT
org.nerv.rpgclient.RpgObject.LOGGER == orig(org.nerv.rpgclient.RpgObject.LOGGER)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
org.nerv.rpgclient.RpgObject.LOGGER.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.name)
org.nerv.rpgclient.RpgObject.LOGGER.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.nerv.rpgclient.RpgObject.LOGGER.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.level)
org.nerv.rpgclient.RpgObject.LOGGER.parent.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository == org.nerv.rpgclient.RpgObject.LOGGER.repository
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == org.nerv.rpgclient.RpgObject.LOGGER.aai
org.nerv.rpgclient.RpgObject.LOGGER.parent.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.additive)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.repository)
org.nerv.rpgclient.RpgObject.LOGGER.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository)
org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName() == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.repository.getClass().getName())
org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName() == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName())
org.nerv.rpgclient.RpgObject.LOGGER.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.aai)
org.nerv.rpgclient.RpgObject.LOGGER.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.aai)
org.nerv.rpgclient.RpgObject.LOGGER.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.additive)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.stats == orig(arg0)
this.stats.maxHp == arg0.maxHp
this.stats.hp == arg0.maxHp
this.alive == orig(this.alive)
this.status == org.nerv.rpgclient.Status.NORMAL
org.nerv.rpgclient.Status.NORMAL == orig(this.status)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.Status.$VALUES.getClass().getName())
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
arg0.maxHp == arg0.hp
arg0.maxHp == orig(arg0.maxHp)
arg0.maxHp == orig(arg0.hp)
arg0.str == orig(arg0.str)
arg0.def == orig(arg0.def)
arg0.atk == orig(arg0.atk)
arg0.maxMp == orig(arg0.maxMp)
arg0.mp == orig(arg0.mp)
this.name.toString one of { "Enemy", "Mark" }
this.alive == null
arg0.maxHp has only one value
arg0.str == null
arg0.def == null
arg0.atk == null
arg0.maxMp == null
arg0.mp == null
===========================================================================
org.nerv.rpgclient.RpgObject.setStatus(org.nerv.rpgclient.Status):::ENTER
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository == org.nerv.rpgclient.RpgObject.LOGGER.repository
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == org.nerv.rpgclient.RpgObject.LOGGER.aai
this.stats.maxHp == this.stats.hp
this has only one value
this.name has only one value
this.name.toString == "Poring"
this.stats has only one value
this.alive has only one value
this.status has only one value
arg0 has only one value
===========================================================================
org.nerv.rpgclient.RpgObject.setStatus(org.nerv.rpgclient.Status):::EXIT
org.nerv.rpgclient.RpgObject.LOGGER == orig(org.nerv.rpgclient.RpgObject.LOGGER)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
org.nerv.rpgclient.RpgObject.LOGGER.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.name)
org.nerv.rpgclient.RpgObject.LOGGER.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.nerv.rpgclient.RpgObject.LOGGER.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.level)
org.nerv.rpgclient.RpgObject.LOGGER.parent.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository == org.nerv.rpgclient.RpgObject.LOGGER.repository
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == org.nerv.rpgclient.RpgObject.LOGGER.aai
org.nerv.rpgclient.RpgObject.LOGGER.parent.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.additive)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.repository)
org.nerv.rpgclient.RpgObject.LOGGER.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository)
org.nerv.rpgclient.RpgObject.LOGGER.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.aai)
org.nerv.rpgclient.RpgObject.LOGGER.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.aai)
org.nerv.rpgclient.RpgObject.LOGGER.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.additive)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.stats == orig(this.stats)
this.stats.maxHp == this.stats.hp
this.stats.maxHp == orig(this.stats.maxHp)
this.stats.maxHp == orig(this.stats.hp)
this.stats.str == orig(this.stats.str)
this.stats.def == orig(this.stats.def)
this.stats.atk == orig(this.stats.atk)
this.stats.maxMp == orig(this.stats.maxMp)
this.stats.mp == orig(this.stats.mp)
this.alive == orig(this.alive)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
this.name has only one value
this.name.toString == "Poring"
this.stats has only one value
this.alive has only one value
this.status has only one value
===========================================================================
org.nerv.rpgclient.Skill:::CLASS
org.nerv.rpgclient.Skill.NONE has only one value
org.nerv.rpgclient.Skill.NONE != null
===========================================================================
org.nerv.rpgclient.Skill:::OBJECT
this.name.toString one of { "Heal", "Revive", "Sword Slash" }
this.type != null
org.nerv.rpgclient.EffectType.ATTACK has only one value
org.nerv.rpgclient.EffectType.ATTACK != null
org.nerv.rpgclient.EffectType.RECOVERY has only one value
org.nerv.rpgclient.EffectType.RECOVERY != null
org.nerv.rpgclient.EffectType.SUPPORT has only one value
org.nerv.rpgclient.EffectType.SUPPORT != null
org.nerv.rpgclient.EffectType.NECROMANCY has only one value
org.nerv.rpgclient.EffectType.NECROMANCY != null
org.nerv.rpgclient.EffectType.$VALUES has only one value
org.nerv.rpgclient.EffectType.$VALUES != null
org.nerv.rpgclient.EffectType.$VALUES.getClass().getName() == org.nerv.rpgclient.EffectType[].class
org.nerv.rpgclient.EffectType.$VALUES[] contains no nulls and has only one value, of length 4
org.nerv.rpgclient.EffectType.$VALUES[] elements != null
org.nerv.rpgclient.EffectType.$VALUES[].getClass().getName() == [org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType]
org.nerv.rpgclient.EffectType.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.EffectType.class
this.level == 0
this.attainableLevel == 0
org.nerv.rpgclient.Status.NORMAL has only one value
org.nerv.rpgclient.Status.NORMAL != null
org.nerv.rpgclient.Status.POISONED has only one value
org.nerv.rpgclient.Status.POISONED != null
org.nerv.rpgclient.Status.PARALYZED has only one value
org.nerv.rpgclient.Status.PARALYZED != null
org.nerv.rpgclient.Status.$VALUES has only one value
org.nerv.rpgclient.Status.$VALUES != null
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == org.nerv.rpgclient.Status[].class
org.nerv.rpgclient.Status.$VALUES[] contains no nulls and has only one value, of length 3
org.nerv.rpgclient.Status.$VALUES[] elements != null
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() == [org.nerv.rpgclient.Status, org.nerv.rpgclient.Status, org.nerv.rpgclient.Status]
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.Status.class
this.mpCost == null
size(org.nerv.rpgclient.EffectType.$VALUES[]) == 4
size(org.nerv.rpgclient.Status.$VALUES[]) == 3
===========================================================================
org.nerv.rpgclient.Skill.Skill(org.nerv.rpgclient.EffectType):::ENTER
org.nerv.rpgclient.EffectType.ATTACK has only one value
org.nerv.rpgclient.EffectType.RECOVERY has only one value
org.nerv.rpgclient.EffectType.SUPPORT has only one value
org.nerv.rpgclient.EffectType.NECROMANCY has only one value
org.nerv.rpgclient.EffectType.$VALUES has only one value
org.nerv.rpgclient.EffectType.$VALUES.getClass().getName() == org.nerv.rpgclient.EffectType[].class
org.nerv.rpgclient.EffectType.$VALUES[] contains no nulls and has only one value, of length 4
org.nerv.rpgclient.EffectType.$VALUES[].getClass().getName() == [org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType]
org.nerv.rpgclient.EffectType.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.EffectType.class
size(org.nerv.rpgclient.EffectType.$VALUES[]) == 4
===========================================================================
org.nerv.rpgclient.Skill.Skill(org.nerv.rpgclient.EffectType):::EXIT
org.nerv.rpgclient.EffectType.ATTACK == orig(org.nerv.rpgclient.EffectType.ATTACK)
org.nerv.rpgclient.EffectType.RECOVERY == orig(org.nerv.rpgclient.EffectType.RECOVERY)
org.nerv.rpgclient.EffectType.SUPPORT == orig(org.nerv.rpgclient.EffectType.SUPPORT)
org.nerv.rpgclient.EffectType.NECROMANCY == orig(org.nerv.rpgclient.EffectType.NECROMANCY)
org.nerv.rpgclient.EffectType.$VALUES == orig(org.nerv.rpgclient.EffectType.$VALUES)
org.nerv.rpgclient.EffectType.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.EffectType.$VALUES.getClass().getName())
org.nerv.rpgclient.EffectType.$VALUES[] == orig(org.nerv.rpgclient.EffectType.$VALUES[])
this.name == null
this.damage == null
this.recovery == null
this.statusEffect == null
===========================================================================
org.nerv.rpgclient.Skill.getDamage():::ENTER
this has only one value
this.name has only one value
this.name.toString == "Sword Slash"
this.type has only one value
this.damage has only one value
this.recovery == null
this.statusEffect has only one value
===========================================================================
org.nerv.rpgclient.Skill.getDamage():::EXIT52
===========================================================================
org.nerv.rpgclient.Skill.getDamage():::EXIT
org.nerv.rpgclient.Skill.NONE == orig(org.nerv.rpgclient.Skill.NONE)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.type == orig(this.type)
org.nerv.rpgclient.EffectType.ATTACK == orig(org.nerv.rpgclient.EffectType.ATTACK)
org.nerv.rpgclient.EffectType.RECOVERY == orig(org.nerv.rpgclient.EffectType.RECOVERY)
org.nerv.rpgclient.EffectType.SUPPORT == orig(org.nerv.rpgclient.EffectType.SUPPORT)
org.nerv.rpgclient.EffectType.NECROMANCY == orig(org.nerv.rpgclient.EffectType.NECROMANCY)
org.nerv.rpgclient.EffectType.$VALUES == orig(org.nerv.rpgclient.EffectType.$VALUES)
org.nerv.rpgclient.EffectType.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.EffectType.$VALUES.getClass().getName())
org.nerv.rpgclient.EffectType.$VALUES[] == orig(org.nerv.rpgclient.EffectType.$VALUES[])
this.level == orig(this.level)
this.attainableLevel == orig(this.attainableLevel)
this.damage == orig(this.damage)
this.recovery == orig(this.recovery)
this.statusEffect == orig(this.statusEffect)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.Status.$VALUES.getClass().getName())
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
this.mpCost == orig(this.mpCost)
this.name has only one value
this.name.toString == "Sword Slash"
this.type has only one value
this.damage has only one value
this.recovery == null
this.statusEffect has only one value
return has only one value
===========================================================================
org.nerv.rpgclient.Skill.getName():::ENTER
this.name.toString one of { "Heal", "Sword Slash" }
===========================================================================
org.nerv.rpgclient.Skill.getName():::EXIT
org.nerv.rpgclient.Skill.NONE == orig(org.nerv.rpgclient.Skill.NONE)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.type == orig(this.type)
org.nerv.rpgclient.EffectType.ATTACK == orig(org.nerv.rpgclient.EffectType.ATTACK)
org.nerv.rpgclient.EffectType.RECOVERY == orig(org.nerv.rpgclient.EffectType.RECOVERY)
org.nerv.rpgclient.EffectType.SUPPORT == orig(org.nerv.rpgclient.EffectType.SUPPORT)
org.nerv.rpgclient.EffectType.NECROMANCY == orig(org.nerv.rpgclient.EffectType.NECROMANCY)
org.nerv.rpgclient.EffectType.$VALUES == orig(org.nerv.rpgclient.EffectType.$VALUES)
org.nerv.rpgclient.EffectType.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.EffectType.$VALUES.getClass().getName())
org.nerv.rpgclient.EffectType.$VALUES[] == orig(org.nerv.rpgclient.EffectType.$VALUES[])
this.level == orig(this.level)
this.attainableLevel == orig(this.attainableLevel)
this.damage == orig(this.damage)
this.recovery == orig(this.recovery)
this.statusEffect == orig(this.statusEffect)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.Status.$VALUES.getClass().getName())
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
this.mpCost == orig(this.mpCost)
this.name.toString one of { "Heal", "Sword Slash" }
return.toString one of { "Heal", "Sword Slash" }
===========================================================================
org.nerv.rpgclient.Skill.getRecovery():::ENTER
this has only one value
this.name has only one value
this.name.toString == "Heal"
this.type has only one value
this.damage == null
this.recovery has only one value
this.statusEffect == null
===========================================================================
org.nerv.rpgclient.Skill.getRecovery():::EXIT61
===========================================================================
org.nerv.rpgclient.Skill.getRecovery():::EXIT
org.nerv.rpgclient.Skill.NONE == orig(org.nerv.rpgclient.Skill.NONE)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.type == orig(this.type)
org.nerv.rpgclient.EffectType.ATTACK == orig(org.nerv.rpgclient.EffectType.ATTACK)
org.nerv.rpgclient.EffectType.RECOVERY == orig(org.nerv.rpgclient.EffectType.RECOVERY)
org.nerv.rpgclient.EffectType.SUPPORT == orig(org.nerv.rpgclient.EffectType.SUPPORT)
org.nerv.rpgclient.EffectType.NECROMANCY == orig(org.nerv.rpgclient.EffectType.NECROMANCY)
org.nerv.rpgclient.EffectType.$VALUES == orig(org.nerv.rpgclient.EffectType.$VALUES)
org.nerv.rpgclient.EffectType.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.EffectType.$VALUES.getClass().getName())
org.nerv.rpgclient.EffectType.$VALUES[] == orig(org.nerv.rpgclient.EffectType.$VALUES[])
this.level == orig(this.level)
this.attainableLevel == orig(this.attainableLevel)
this.damage == orig(this.damage)
this.recovery == orig(this.recovery)
this.statusEffect == orig(this.statusEffect)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.Status.$VALUES.getClass().getName())
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
this.mpCost == orig(this.mpCost)
this.name has only one value
this.name.toString == "Heal"
this.type has only one value
this.damage == null
this.recovery has only one value
this.statusEffect == null
return has only one value
===========================================================================
org.nerv.rpgclient.Skill.getStatusEffect():::ENTER
this.name.toString one of { "Heal", "Sword Slash" }
===========================================================================
org.nerv.rpgclient.Skill.getStatusEffect():::EXIT
org.nerv.rpgclient.Skill.NONE == orig(org.nerv.rpgclient.Skill.NONE)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.type == orig(this.type)
org.nerv.rpgclient.EffectType.ATTACK == orig(org.nerv.rpgclient.EffectType.ATTACK)
org.nerv.rpgclient.EffectType.RECOVERY == orig(org.nerv.rpgclient.EffectType.RECOVERY)
org.nerv.rpgclient.EffectType.SUPPORT == orig(org.nerv.rpgclient.EffectType.SUPPORT)
org.nerv.rpgclient.EffectType.NECROMANCY == orig(org.nerv.rpgclient.EffectType.NECROMANCY)
org.nerv.rpgclient.EffectType.$VALUES == orig(org.nerv.rpgclient.EffectType.$VALUES)
org.nerv.rpgclient.EffectType.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.EffectType.$VALUES.getClass().getName())
org.nerv.rpgclient.EffectType.$VALUES[] == orig(org.nerv.rpgclient.EffectType.$VALUES[])
this.level == orig(this.level)
this.attainableLevel == orig(this.attainableLevel)
this.damage == orig(this.damage)
this.recovery == orig(this.recovery)
this.statusEffect == orig(this.statusEffect)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.Status.$VALUES.getClass().getName())
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
this.mpCost == orig(this.mpCost)
this.name.toString one of { "Heal", "Sword Slash" }
===========================================================================
org.nerv.rpgclient.Skill.getType():::ENTER
this.name.toString one of { "Heal", "Sword Slash" }
===========================================================================
org.nerv.rpgclient.Skill.getType():::EXIT
org.nerv.rpgclient.Skill.NONE == orig(org.nerv.rpgclient.Skill.NONE)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.type == orig(this.type)
org.nerv.rpgclient.EffectType.ATTACK == orig(org.nerv.rpgclient.EffectType.ATTACK)
org.nerv.rpgclient.EffectType.RECOVERY == orig(org.nerv.rpgclient.EffectType.RECOVERY)
org.nerv.rpgclient.EffectType.SUPPORT == orig(org.nerv.rpgclient.EffectType.SUPPORT)
org.nerv.rpgclient.EffectType.NECROMANCY == orig(org.nerv.rpgclient.EffectType.NECROMANCY)
org.nerv.rpgclient.EffectType.$VALUES == orig(org.nerv.rpgclient.EffectType.$VALUES)
org.nerv.rpgclient.EffectType.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.EffectType.$VALUES.getClass().getName())
org.nerv.rpgclient.EffectType.$VALUES[] == orig(org.nerv.rpgclient.EffectType.$VALUES[])
this.level == orig(this.level)
this.attainableLevel == orig(this.attainableLevel)
this.damage == orig(this.damage)
this.recovery == orig(this.recovery)
this.statusEffect == orig(this.statusEffect)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.Status.$VALUES.getClass().getName())
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
this.mpCost == orig(this.mpCost)
this.name.toString one of { "Heal", "Sword Slash" }
===========================================================================
org.nerv.rpgclient.Skill.setDamage(java.lang.Long):::ENTER
this has only one value
this.name has only one value
this.name.toString == "Sword Slash"
this.type has only one value
this.damage == null
this.recovery == null
this.statusEffect == null
arg0 has only one value
===========================================================================
org.nerv.rpgclient.Skill.setDamage(java.lang.Long):::EXIT
org.nerv.rpgclient.Skill.NONE == orig(org.nerv.rpgclient.Skill.NONE)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.type == orig(this.type)
org.nerv.rpgclient.EffectType.ATTACK == orig(org.nerv.rpgclient.EffectType.ATTACK)
org.nerv.rpgclient.EffectType.RECOVERY == orig(org.nerv.rpgclient.EffectType.RECOVERY)
org.nerv.rpgclient.EffectType.SUPPORT == orig(org.nerv.rpgclient.EffectType.SUPPORT)
org.nerv.rpgclient.EffectType.NECROMANCY == orig(org.nerv.rpgclient.EffectType.NECROMANCY)
org.nerv.rpgclient.EffectType.$VALUES == orig(org.nerv.rpgclient.EffectType.$VALUES)
org.nerv.rpgclient.EffectType.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.EffectType.$VALUES.getClass().getName())
org.nerv.rpgclient.EffectType.$VALUES[] == orig(org.nerv.rpgclient.EffectType.$VALUES[])
this.level == orig(this.level)
this.attainableLevel == orig(this.attainableLevel)
this.recovery == orig(this.recovery)
this.statusEffect == orig(this.statusEffect)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.Status.$VALUES.getClass().getName())
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
this.mpCost == orig(this.mpCost)
this.name has only one value
this.name.toString == "Sword Slash"
this.type has only one value
this.damage has only one value
this.recovery == null
this.statusEffect == null
===========================================================================
org.nerv.rpgclient.Skill.setName(java.lang.String):::ENTER
this.name == null
this.damage == null
this.recovery == null
this.statusEffect == null
arg0.toString one of { "Heal", "Revive", "Sword Slash" }
===========================================================================
org.nerv.rpgclient.Skill.setName(java.lang.String):::EXIT
org.nerv.rpgclient.Skill.NONE == orig(org.nerv.rpgclient.Skill.NONE)
this.type == orig(this.type)
org.nerv.rpgclient.EffectType.ATTACK == orig(org.nerv.rpgclient.EffectType.ATTACK)
org.nerv.rpgclient.EffectType.RECOVERY == orig(org.nerv.rpgclient.EffectType.RECOVERY)
org.nerv.rpgclient.EffectType.SUPPORT == orig(org.nerv.rpgclient.EffectType.SUPPORT)
org.nerv.rpgclient.EffectType.NECROMANCY == orig(org.nerv.rpgclient.EffectType.NECROMANCY)
org.nerv.rpgclient.EffectType.$VALUES == orig(org.nerv.rpgclient.EffectType.$VALUES)
org.nerv.rpgclient.EffectType.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.EffectType.$VALUES.getClass().getName())
org.nerv.rpgclient.EffectType.$VALUES[] == orig(org.nerv.rpgclient.EffectType.$VALUES[])
this.level == orig(this.level)
this.attainableLevel == orig(this.attainableLevel)
this.damage == orig(this.damage)
this.recovery == orig(this.recovery)
this.statusEffect == orig(this.statusEffect)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.Status.$VALUES.getClass().getName())
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
this.mpCost == orig(this.mpCost)
arg0.toString == orig(arg0.toString)
this.damage == null
this.recovery == null
this.statusEffect == null
arg0.toString one of { "Heal", "Revive", "Sword Slash" }
===========================================================================
org.nerv.rpgclient.Skill.setRecovery(java.lang.Long):::ENTER
this.name.toString one of { "Heal", "Revive" }
this.damage == null
this.recovery == null
this.statusEffect == null
arg0 has only one value
===========================================================================
org.nerv.rpgclient.Skill.setRecovery(java.lang.Long):::EXIT
org.nerv.rpgclient.Skill.NONE == orig(org.nerv.rpgclient.Skill.NONE)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.type == orig(this.type)
org.nerv.rpgclient.EffectType.ATTACK == orig(org.nerv.rpgclient.EffectType.ATTACK)
org.nerv.rpgclient.EffectType.RECOVERY == orig(org.nerv.rpgclient.EffectType.RECOVERY)
org.nerv.rpgclient.EffectType.SUPPORT == orig(org.nerv.rpgclient.EffectType.SUPPORT)
org.nerv.rpgclient.EffectType.NECROMANCY == orig(org.nerv.rpgclient.EffectType.NECROMANCY)
org.nerv.rpgclient.EffectType.$VALUES == orig(org.nerv.rpgclient.EffectType.$VALUES)
org.nerv.rpgclient.EffectType.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.EffectType.$VALUES.getClass().getName())
org.nerv.rpgclient.EffectType.$VALUES[] == orig(org.nerv.rpgclient.EffectType.$VALUES[])
this.level == orig(this.level)
this.attainableLevel == orig(this.attainableLevel)
this.damage == orig(this.damage)
this.statusEffect == orig(this.statusEffect)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.Status.$VALUES.getClass().getName())
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
this.mpCost == orig(this.mpCost)
this.name.toString one of { "Heal", "Revive" }
this.damage == null
this.recovery has only one value
this.statusEffect == null
===========================================================================
org.nerv.rpgclient.Skill.setStatusEffect(org.nerv.rpgclient.Status):::ENTER
this has only one value
this.name has only one value
this.name.toString == "Sword Slash"
this.type has only one value
this.damage has only one value
this.recovery == null
this.statusEffect == null
arg0 has only one value
===========================================================================
org.nerv.rpgclient.Skill.setStatusEffect(org.nerv.rpgclient.Status):::EXIT
org.nerv.rpgclient.Skill.NONE == orig(org.nerv.rpgclient.Skill.NONE)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.type == orig(this.type)
org.nerv.rpgclient.EffectType.ATTACK == orig(org.nerv.rpgclient.EffectType.ATTACK)
org.nerv.rpgclient.EffectType.RECOVERY == orig(org.nerv.rpgclient.EffectType.RECOVERY)
org.nerv.rpgclient.EffectType.SUPPORT == orig(org.nerv.rpgclient.EffectType.SUPPORT)
org.nerv.rpgclient.EffectType.NECROMANCY == orig(org.nerv.rpgclient.EffectType.NECROMANCY)
org.nerv.rpgclient.EffectType.$VALUES == orig(org.nerv.rpgclient.EffectType.$VALUES)
org.nerv.rpgclient.EffectType.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.EffectType.$VALUES.getClass().getName())
org.nerv.rpgclient.EffectType.$VALUES[] == orig(org.nerv.rpgclient.EffectType.$VALUES[])
this.level == orig(this.level)
this.attainableLevel == orig(this.attainableLevel)
this.damage == orig(this.damage)
this.recovery == orig(this.recovery)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.Status.$VALUES.getClass().getName())
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
this.mpCost == orig(this.mpCost)
this.name has only one value
this.name.toString == "Sword Slash"
this.type has only one value
this.damage has only one value
this.recovery == null
this.statusEffect has only one value
===========================================================================
org.nerv.rpgclient.Stats:::OBJECT
this.str == null
this.def == null
this.atk == null
this.maxMp == null
this.mp == null
===========================================================================
org.nerv.rpgclient.Stats.Stats():::EXIT
this.maxHp == null
this.hp == null
===========================================================================
org.nerv.rpgclient.Stats.getHp():::ENTER
this.maxHp has only one value
===========================================================================
org.nerv.rpgclient.Stats.getHp():::EXIT
this.maxHp == orig(this.maxHp)
this.hp == orig(this.hp)
this.str == orig(this.str)
this.def == orig(this.def)
this.atk == orig(this.atk)
this.maxMp == orig(this.maxMp)
this.mp == orig(this.mp)
this.maxHp has only one value
===========================================================================
org.nerv.rpgclient.Stats.getMaxHp():::ENTER
this has only one value
this.maxHp has only one value
this.hp has only one value
===========================================================================
org.nerv.rpgclient.Stats.getMaxHp():::EXIT
this.maxHp == orig(this.maxHp)
this.hp == orig(this.hp)
this.str == orig(this.str)
this.def == orig(this.def)
this.atk == orig(this.atk)
this.maxMp == orig(this.maxMp)
this.mp == orig(this.mp)
this.maxHp has only one value
this.hp has only one value
return has only one value
===========================================================================
org.nerv.rpgclient.Stats.setHp(java.lang.Long):::ENTER
this.maxHp has only one value
===========================================================================
org.nerv.rpgclient.Stats.setHp(java.lang.Long):::EXIT
this.maxHp == orig(this.maxHp)
this.str == orig(this.str)
this.def == orig(this.def)
this.atk == orig(this.atk)
this.maxMp == orig(this.maxMp)
this.mp == orig(this.mp)
this.maxHp has only one value
===========================================================================
org.nerv.rpgclient.Stats.setMaxHp(java.lang.Long):::ENTER
this.maxHp == null
this.hp == null
arg0 has only one value
===========================================================================
org.nerv.rpgclient.Stats.setMaxHp(java.lang.Long):::EXIT
this.hp == orig(this.hp)
this.str == orig(this.str)
this.def == orig(this.def)
this.atk == orig(this.atk)
this.maxMp == orig(this.maxMp)
this.mp == orig(this.mp)
this.maxHp has only one value
this.hp == null
===========================================================================
org.nerv.rpgclient.Status:::OBJECT
===========================================================================
org.nerv.rpgclient.Status.Status(java.lang.String, int):::ENTER
arg0.toString one of { "NORMAL", "PARALYZED", "POISONED" }
arg1 one of { 0, 1, 2 }
===========================================================================
org.nerv.rpgclient.Status.Status(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString one of { "NORMAL", "PARALYZED", "POISONED" }
===========================================================================
org.nerv.rpgclient.monster.Monster:::CLASS
org.nerv.rpgclient.RpgObject.LOGGER has only one value
org.apache.log4j.Logger.FQCN has only one value
org.apache.log4j.Logger.FQCN.toString == "org.apache.log4j.Logger"
org.apache.log4j.Logger.class$org$apache$log4j$Logger has only one value
org.nerv.rpgclient.RpgObject.LOGGER.name has only one value
org.nerv.rpgclient.RpgObject.LOGGER.name.toString == "org.nerv.rpgclient.RpgObject"
org.nerv.rpgclient.RpgObject.LOGGER.level == null
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.class$org$apache$log4j$Level == null
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.DEBUG has only one value
org.nerv.rpgclient.RpgObject.LOGGER.parent has only one value
org.nerv.rpgclient.RpgObject.LOGGER.parent.name has only one value
org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString == "root"
org.nerv.rpgclient.RpgObject.LOGGER.parent.level has only one value
org.nerv.rpgclient.RpgObject.LOGGER.parent.parent == null
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == null
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository has only one value
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == null
org.nerv.rpgclient.RpgObject.LOGGER.parent.additive == true
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == null
org.nerv.rpgclient.RpgObject.LOGGER.repository has only one value
org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
org.nerv.rpgclient.RpgObject.LOGGER.aai == null
org.nerv.rpgclient.RpgObject.LOGGER.additive == true
===========================================================================
org.nerv.rpgclient.monster.Monster:::OBJECT
this has only one value
this.id == null
this.skills has only one value
this.skills[] == []
this.skills[].getClass().getName() == []
this.skills.getClass().getName() == java.util.ArrayList.class
this.drops has only one value
this.drops[] == []
this.drops[].getClass().getName() == []
this.drops.getClass().getName() == java.util.ArrayList.class
this.name == null
this.stats == null
this.alive == null
this.status has only one value
org.nerv.rpgclient.Status.NORMAL has only one value
org.nerv.rpgclient.Status.POISONED has only one value
org.nerv.rpgclient.Status.PARALYZED has only one value
org.nerv.rpgclient.Status.$VALUES has only one value
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == org.nerv.rpgclient.Status[].class
org.nerv.rpgclient.Status.$VALUES[] contains no nulls and has only one value, of length 3
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() == [org.nerv.rpgclient.Status, org.nerv.rpgclient.Status, org.nerv.rpgclient.Status]
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.Status.class
size(org.nerv.rpgclient.Status.$VALUES[]) == 3
===========================================================================
org.nerv.rpgclient.monster.Monster.Monster():::EXIT
===========================================================================
org.nerv.rpgclient.player.Job$Type:::OBJECT
===========================================================================
org.nerv.rpgclient.player.Job$Type.Type(java.lang.String, int):::ENTER
arg0.toString one of { "HEALER", "SWORDSMAN" }
arg1 one of { 0, 1 }
===========================================================================
org.nerv.rpgclient.player.Job$Type.Type(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString one of { "HEALER", "SWORDSMAN" }
===========================================================================
org.nerv.rpgclient.player.Job:::OBJECT
this has only one value
this.type has only one value
this.type != null
org.nerv.rpgclient.player.Job$Type.SWORDSMAN has only one value
org.nerv.rpgclient.player.Job$Type.SWORDSMAN != null
org.nerv.rpgclient.player.Job$Type.HEALER has only one value
org.nerv.rpgclient.player.Job$Type.HEALER != null
org.nerv.rpgclient.player.Job$Type.$VALUES has only one value
org.nerv.rpgclient.player.Job$Type.$VALUES != null
org.nerv.rpgclient.player.Job$Type.$VALUES.getClass().getName() == org.nerv.rpgclient.player.Job$Type[].class
org.nerv.rpgclient.player.Job$Type.$VALUES[] contains no nulls and has only one value, of length 2
org.nerv.rpgclient.player.Job$Type.$VALUES[] elements != null
org.nerv.rpgclient.player.Job$Type.$VALUES[].getClass().getName() == [org.nerv.rpgclient.player.Job.Type, org.nerv.rpgclient.player.Job.Type]
org.nerv.rpgclient.player.Job$Type.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.player.Job.Type.class
this.skills has only one value
this.skills != null
this.skills[] elements != null
this.skills[].getClass().getName() elements == org.nerv.rpgclient.Skill.class
this.skills.getClass().getName() == java.util.ArrayList.class
this.attainableLevel == 0
size(org.nerv.rpgclient.player.Job$Type.$VALUES[]) == 2
===========================================================================
org.nerv.rpgclient.player.Job.Job(org.nerv.rpgclient.player.Job$Type):::ENTER
arg0 has only one value
org.nerv.rpgclient.player.Job$Type.SWORDSMAN has only one value
org.nerv.rpgclient.player.Job$Type.HEALER has only one value
org.nerv.rpgclient.player.Job$Type.$VALUES has only one value
org.nerv.rpgclient.player.Job$Type.$VALUES.getClass().getName() == org.nerv.rpgclient.player.Job$Type[].class
org.nerv.rpgclient.player.Job$Type.$VALUES[] contains no nulls and has only one value, of length 2
org.nerv.rpgclient.player.Job$Type.$VALUES[].getClass().getName() == [org.nerv.rpgclient.player.Job.Type, org.nerv.rpgclient.player.Job.Type]
org.nerv.rpgclient.player.Job$Type.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.player.Job.Type.class
size(org.nerv.rpgclient.player.Job$Type.$VALUES[]) == 2
===========================================================================
org.nerv.rpgclient.player.Job.Job(org.nerv.rpgclient.player.Job$Type):::EXIT
org.nerv.rpgclient.player.Job$Type.SWORDSMAN == orig(org.nerv.rpgclient.player.Job$Type.SWORDSMAN)
org.nerv.rpgclient.player.Job$Type.HEALER == orig(org.nerv.rpgclient.player.Job$Type.HEALER)
org.nerv.rpgclient.player.Job$Type.$VALUES == orig(org.nerv.rpgclient.player.Job$Type.$VALUES)
org.nerv.rpgclient.player.Job$Type.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.player.Job$Type.$VALUES.getClass().getName())
org.nerv.rpgclient.player.Job$Type.$VALUES[] == orig(org.nerv.rpgclient.player.Job$Type.$VALUES[])
this.skills[] == []
this.skills[].getClass().getName() == []
===========================================================================
org.nerv.rpgclient.player.Job.addSkill(org.nerv.rpgclient.Skill):::ENTER
org.nerv.rpgclient.Skill.NONE has only one value
arg0.name.toString one of { "Heal", "Revive", "Sword Slash" }
org.nerv.rpgclient.EffectType.ATTACK has only one value
org.nerv.rpgclient.EffectType.RECOVERY has only one value
org.nerv.rpgclient.EffectType.SUPPORT has only one value
org.nerv.rpgclient.EffectType.NECROMANCY has only one value
org.nerv.rpgclient.EffectType.$VALUES has only one value
org.nerv.rpgclient.EffectType.$VALUES.getClass().getName() == org.nerv.rpgclient.EffectType[].class
org.nerv.rpgclient.EffectType.$VALUES[] contains no nulls and has only one value, of length 4
org.nerv.rpgclient.EffectType.$VALUES[].getClass().getName() == [org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType]
org.nerv.rpgclient.EffectType.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.EffectType.class
arg0.level == 0
arg0.attainableLevel == 0
org.nerv.rpgclient.Status.NORMAL has only one value
org.nerv.rpgclient.Status.POISONED has only one value
org.nerv.rpgclient.Status.PARALYZED has only one value
org.nerv.rpgclient.Status.$VALUES has only one value
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == org.nerv.rpgclient.Status[].class
org.nerv.rpgclient.Status.$VALUES[] contains no nulls and has only one value, of length 3
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() == [org.nerv.rpgclient.Status, org.nerv.rpgclient.Status, org.nerv.rpgclient.Status]
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.Status.class
arg0.mpCost == null
size(this.skills[]) one of { 0, 1, 2 }
size(org.nerv.rpgclient.EffectType.$VALUES[]) == 4
size(org.nerv.rpgclient.Status.$VALUES[]) == 3
===========================================================================
org.nerv.rpgclient.player.Job.addSkill(org.nerv.rpgclient.Skill):::EXIT
this.type == orig(this.type)
org.nerv.rpgclient.player.Job$Type.SWORDSMAN == orig(org.nerv.rpgclient.player.Job$Type.SWORDSMAN)
org.nerv.rpgclient.player.Job$Type.HEALER == orig(org.nerv.rpgclient.player.Job$Type.HEALER)
org.nerv.rpgclient.player.Job$Type.$VALUES == orig(org.nerv.rpgclient.player.Job$Type.$VALUES)
org.nerv.rpgclient.player.Job$Type.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.player.Job$Type.$VALUES.getClass().getName())
org.nerv.rpgclient.player.Job$Type.$VALUES[] == orig(org.nerv.rpgclient.player.Job$Type.$VALUES[])
this.skills == orig(this.skills)
this.skills.getClass().getName() == orig(this.skills.getClass().getName())
this.attainableLevel == orig(this.attainableLevel)
org.nerv.rpgclient.Skill.NONE == orig(org.nerv.rpgclient.Skill.NONE)
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.type == orig(arg0.type)
org.nerv.rpgclient.EffectType.ATTACK == orig(org.nerv.rpgclient.EffectType.ATTACK)
org.nerv.rpgclient.EffectType.RECOVERY == orig(org.nerv.rpgclient.EffectType.RECOVERY)
org.nerv.rpgclient.EffectType.SUPPORT == orig(org.nerv.rpgclient.EffectType.SUPPORT)
org.nerv.rpgclient.EffectType.NECROMANCY == orig(org.nerv.rpgclient.EffectType.NECROMANCY)
org.nerv.rpgclient.EffectType.$VALUES == orig(org.nerv.rpgclient.EffectType.$VALUES)
org.nerv.rpgclient.EffectType.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.EffectType.$VALUES.getClass().getName())
org.nerv.rpgclient.EffectType.$VALUES[] == orig(org.nerv.rpgclient.EffectType.$VALUES[])
arg0.level == orig(arg0.level)
arg0.attainableLevel == orig(arg0.attainableLevel)
arg0.damage == orig(arg0.damage)
arg0.recovery == orig(arg0.recovery)
arg0.statusEffect == orig(arg0.statusEffect)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.Status.$VALUES.getClass().getName())
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
arg0.mpCost == orig(arg0.mpCost)
size(this.skills[])-1 == orig(size(this.skills[]))
org.nerv.rpgclient.Skill.NONE has only one value
arg0.name.toString one of { "Heal", "Revive", "Sword Slash" }
org.nerv.rpgclient.EffectType.ATTACK has only one value
org.nerv.rpgclient.EffectType.RECOVERY has only one value
org.nerv.rpgclient.EffectType.SUPPORT has only one value
org.nerv.rpgclient.EffectType.NECROMANCY has only one value
org.nerv.rpgclient.EffectType.$VALUES has only one value
org.nerv.rpgclient.EffectType.$VALUES.getClass().getName() == org.nerv.rpgclient.EffectType[].class
org.nerv.rpgclient.EffectType.$VALUES[] contains no nulls and has only one value, of length 4
org.nerv.rpgclient.EffectType.$VALUES[].getClass().getName() == [org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType]
org.nerv.rpgclient.EffectType.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.EffectType.class
arg0.level == 0
arg0.attainableLevel == 0
org.nerv.rpgclient.Status.NORMAL has only one value
org.nerv.rpgclient.Status.POISONED has only one value
org.nerv.rpgclient.Status.PARALYZED has only one value
org.nerv.rpgclient.Status.$VALUES has only one value
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == org.nerv.rpgclient.Status[].class
org.nerv.rpgclient.Status.$VALUES[] contains no nulls and has only one value, of length 3
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() == [org.nerv.rpgclient.Status, org.nerv.rpgclient.Status, org.nerv.rpgclient.Status]
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.Status.class
arg0.mpCost == null
size(this.skills[]) one of { 1, 2, 3 }
size(org.nerv.rpgclient.EffectType.$VALUES[]) == 4
size(org.nerv.rpgclient.Status.$VALUES[]) == 3
===========================================================================
org.nerv.rpgclient.player.Job.getSkill(java.lang.String):::ENTER
this.skills[] contains no nulls and has only one value, of length 3
this.skills[].getClass().getName() == [org.nerv.rpgclient.Skill, org.nerv.rpgclient.Skill, org.nerv.rpgclient.Skill]
arg0.toString one of { "Heal", "Sword Slash" }
size(this.skills[]) == 3
===========================================================================
org.nerv.rpgclient.player.Job.getSkill(java.lang.String):::EXIT64
===========================================================================
org.nerv.rpgclient.player.Job.getSkill(java.lang.String):::EXIT
this.type == orig(this.type)
org.nerv.rpgclient.player.Job$Type.SWORDSMAN == orig(org.nerv.rpgclient.player.Job$Type.SWORDSMAN)
org.nerv.rpgclient.player.Job$Type.HEALER == orig(org.nerv.rpgclient.player.Job$Type.HEALER)
org.nerv.rpgclient.player.Job$Type.$VALUES == orig(org.nerv.rpgclient.player.Job$Type.$VALUES)
org.nerv.rpgclient.player.Job$Type.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.player.Job$Type.$VALUES.getClass().getName())
org.nerv.rpgclient.player.Job$Type.$VALUES[] == orig(org.nerv.rpgclient.player.Job$Type.$VALUES[])
this.skills == orig(this.skills)
this.skills[] == orig(this.skills[])
this.skills.getClass().getName() == orig(this.skills.getClass().getName())
this.attainableLevel == orig(this.attainableLevel)
this.skills[] contains no nulls and has only one value, of length 3
this.skills[].getClass().getName() == [org.nerv.rpgclient.Skill, org.nerv.rpgclient.Skill, org.nerv.rpgclient.Skill]
org.nerv.rpgclient.Skill.NONE has only one value
return.name.toString one of { "Heal", "Sword Slash" }
org.nerv.rpgclient.EffectType.ATTACK has only one value
org.nerv.rpgclient.EffectType.RECOVERY has only one value
org.nerv.rpgclient.EffectType.SUPPORT has only one value
org.nerv.rpgclient.EffectType.NECROMANCY has only one value
org.nerv.rpgclient.EffectType.$VALUES has only one value
org.nerv.rpgclient.EffectType.$VALUES.getClass().getName() == org.nerv.rpgclient.EffectType[].class
org.nerv.rpgclient.EffectType.$VALUES[] contains no nulls and has only one value, of length 4
org.nerv.rpgclient.EffectType.$VALUES[].getClass().getName() == [org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType, org.nerv.rpgclient.EffectType]
org.nerv.rpgclient.EffectType.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.EffectType.class
return.level == 0
return.attainableLevel == 0
org.nerv.rpgclient.Status.NORMAL has only one value
org.nerv.rpgclient.Status.POISONED has only one value
org.nerv.rpgclient.Status.PARALYZED has only one value
org.nerv.rpgclient.Status.$VALUES has only one value
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == org.nerv.rpgclient.Status[].class
org.nerv.rpgclient.Status.$VALUES[] contains no nulls and has only one value, of length 3
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() == [org.nerv.rpgclient.Status, org.nerv.rpgclient.Status, org.nerv.rpgclient.Status]
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.Status.class
return.mpCost == null
size(this.skills[]) == 3
size(org.nerv.rpgclient.EffectType.$VALUES[]) == 4
size(org.nerv.rpgclient.Status.$VALUES[]) == 3
===========================================================================
org.nerv.rpgclient.player.Job.getSkills():::ENTER
===========================================================================
org.nerv.rpgclient.player.Job.getSkills():::EXIT
this.type == orig(this.type)
org.nerv.rpgclient.player.Job$Type.SWORDSMAN == orig(org.nerv.rpgclient.player.Job$Type.SWORDSMAN)
org.nerv.rpgclient.player.Job$Type.HEALER == orig(org.nerv.rpgclient.player.Job$Type.HEALER)
org.nerv.rpgclient.player.Job$Type.$VALUES == orig(org.nerv.rpgclient.player.Job$Type.$VALUES)
org.nerv.rpgclient.player.Job$Type.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.player.Job$Type.$VALUES.getClass().getName())
org.nerv.rpgclient.player.Job$Type.$VALUES[] == orig(org.nerv.rpgclient.player.Job$Type.$VALUES[])
this.skills == orig(this.skills)
this.skills[] == orig(this.skills[])
this.skills.getClass().getName() == orig(this.skills.getClass().getName())
this.attainableLevel == orig(this.attainableLevel)
return has only one value
return[].getClass().getName() elements == org.nerv.rpgclient.Skill.class
return.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.nerv.rpgclient.player.Player:::CLASS
org.nerv.rpgclient.player.Player.LOGGER has only one value
org.nerv.rpgclient.player.Player.LOGGER != null
org.apache.log4j.Logger.FQCN has only one value
org.apache.log4j.Logger.FQCN != null
org.apache.log4j.Logger.FQCN.toString == "org.apache.log4j.Logger"
org.apache.log4j.Logger.class$org$apache$log4j$Logger has only one value
org.apache.log4j.Logger.class$org$apache$log4j$Logger != null
org.nerv.rpgclient.player.Player.LOGGER.name has only one value
org.nerv.rpgclient.player.Player.LOGGER.name != null
org.nerv.rpgclient.player.Player.LOGGER.name.toString == "org.nerv.rpgclient.player.Player"
org.nerv.rpgclient.player.Player.LOGGER.level == null
org.apache.log4j.Level.OFF has only one value
org.apache.log4j.Level.OFF != null
org.apache.log4j.Level.FATAL has only one value
org.apache.log4j.Level.FATAL != null
org.apache.log4j.Level.ERROR has only one value
org.apache.log4j.Level.ERROR != null
org.apache.log4j.Level.WARN has only one value
org.apache.log4j.Level.WARN != null
org.apache.log4j.Level.INFO has only one value
org.apache.log4j.Level.INFO != null
org.apache.log4j.Level.DEBUG has only one value
org.apache.log4j.Level.DEBUG != null
org.apache.log4j.Level.TRACE has only one value
org.apache.log4j.Level.TRACE != null
org.apache.log4j.Level.ALL has only one value
org.apache.log4j.Level.ALL != null
org.apache.log4j.Level.class$org$apache$log4j$Level == null
org.apache.log4j.Priority.FATAL has only one value
org.apache.log4j.Priority.FATAL != null
org.apache.log4j.Priority.ERROR has only one value
org.apache.log4j.Priority.ERROR != null
org.apache.log4j.Priority.WARN has only one value
org.apache.log4j.Priority.WARN != null
org.apache.log4j.Priority.INFO has only one value
org.apache.log4j.Priority.INFO != null
org.apache.log4j.Priority.DEBUG has only one value
org.apache.log4j.Priority.DEBUG != null
org.nerv.rpgclient.player.Player.LOGGER.parent has only one value
org.nerv.rpgclient.player.Player.LOGGER.parent != null
org.nerv.rpgclient.player.Player.LOGGER.parent.name has only one value
org.nerv.rpgclient.player.Player.LOGGER.parent.name != null
org.nerv.rpgclient.player.Player.LOGGER.parent.name.toString == "root"
org.nerv.rpgclient.player.Player.LOGGER.parent.level has only one value
org.nerv.rpgclient.player.Player.LOGGER.parent.level != null
org.nerv.rpgclient.player.Player.LOGGER.parent.parent == null
org.apache.log4j.Category.FQCN has only one value
org.apache.log4j.Category.FQCN != null
org.apache.log4j.Category.FQCN.toString == "org.apache.log4j.Category"
org.nerv.rpgclient.player.Player.LOGGER.parent.resourceBundle == null
org.nerv.rpgclient.player.Player.LOGGER.parent.repository has only one value
org.nerv.rpgclient.player.Player.LOGGER.parent.repository != null
org.nerv.rpgclient.player.Player.LOGGER.parent.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
org.nerv.rpgclient.player.Player.LOGGER.parent.aai == null
org.nerv.rpgclient.player.Player.LOGGER.parent.additive == true
org.apache.log4j.Category.class$org$apache$log4j$Category has only one value
org.apache.log4j.Category.class$org$apache$log4j$Category != null
org.nerv.rpgclient.player.Player.LOGGER.resourceBundle == null
org.nerv.rpgclient.player.Player.LOGGER.repository has only one value
org.nerv.rpgclient.player.Player.LOGGER.repository != null
org.nerv.rpgclient.player.Player.LOGGER.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
org.nerv.rpgclient.player.Player.LOGGER.aai == null
org.nerv.rpgclient.player.Player.LOGGER.additive == true
org.nerv.rpgclient.RpgObject.LOGGER has only one value
org.nerv.rpgclient.RpgObject.LOGGER != null
org.nerv.rpgclient.RpgObject.LOGGER.name has only one value
org.nerv.rpgclient.RpgObject.LOGGER.name != null
org.nerv.rpgclient.RpgObject.LOGGER.name.toString == "org.nerv.rpgclient.RpgObject"
org.nerv.rpgclient.RpgObject.LOGGER.level == null
org.nerv.rpgclient.RpgObject.LOGGER.parent has only one value
org.nerv.rpgclient.RpgObject.LOGGER.parent != null
org.nerv.rpgclient.RpgObject.LOGGER.parent.name has only one value
org.nerv.rpgclient.RpgObject.LOGGER.parent.name != null
org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString == "root"
org.nerv.rpgclient.RpgObject.LOGGER.parent.level has only one value
org.nerv.rpgclient.RpgObject.LOGGER.parent.level != null
org.nerv.rpgclient.RpgObject.LOGGER.parent.parent == null
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == null
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository has only one value
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository != null
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == null
org.nerv.rpgclient.RpgObject.LOGGER.parent.additive == true
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == null
org.nerv.rpgclient.RpgObject.LOGGER.repository has only one value
org.nerv.rpgclient.RpgObject.LOGGER.repository != null
org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName() == org.apache.log4j.Hierarchy.class
org.nerv.rpgclient.RpgObject.LOGGER.aai == null
org.nerv.rpgclient.RpgObject.LOGGER.additive == true
===========================================================================
org.nerv.rpgclient.player.Player:::OBJECT
this.id == null
this.job.type has only one value
org.nerv.rpgclient.player.Job$Type.SWORDSMAN has only one value
org.nerv.rpgclient.player.Job$Type.HEALER has only one value
org.nerv.rpgclient.player.Job$Type.$VALUES has only one value
org.nerv.rpgclient.player.Job$Type.$VALUES.getClass().getName() == org.nerv.rpgclient.player.Job$Type[].class
org.nerv.rpgclient.player.Job$Type.$VALUES[] contains no nulls and has only one value, of length 2
org.nerv.rpgclient.player.Job$Type.$VALUES[].getClass().getName() == [org.nerv.rpgclient.player.Job.Type, org.nerv.rpgclient.player.Job.Type]
org.nerv.rpgclient.player.Job$Type.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.player.Job.Type.class
this.job.skills has only one value
this.job.skills[] contains no nulls and has only one value, of length 3
this.job.skills[].getClass().getName() == [org.nerv.rpgclient.Skill, org.nerv.rpgclient.Skill, org.nerv.rpgclient.Skill]
this.job.skills[].getClass().getName() elements == org.nerv.rpgclient.Skill.class
this.job.skills.getClass().getName() == java.util.ArrayList.class
this.job.attainableLevel == 0
this.level == 0
this.name.toString == "Mark"
this.stats.maxHp has only one value
this.stats.hp has only one value
this.stats.str == null
this.stats.def == null
this.stats.atk == null
this.stats.maxMp == null
this.stats.mp == null
this.status has only one value
this.status != null
org.nerv.rpgclient.Status.NORMAL has only one value
org.nerv.rpgclient.Status.NORMAL != null
org.nerv.rpgclient.Status.POISONED has only one value
org.nerv.rpgclient.Status.POISONED != null
org.nerv.rpgclient.Status.PARALYZED has only one value
org.nerv.rpgclient.Status.PARALYZED != null
org.nerv.rpgclient.Status.$VALUES has only one value
org.nerv.rpgclient.Status.$VALUES != null
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == org.nerv.rpgclient.Status[].class
org.nerv.rpgclient.Status.$VALUES[] contains no nulls and has only one value, of length 3
org.nerv.rpgclient.Status.$VALUES[] elements != null
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() == [org.nerv.rpgclient.Status, org.nerv.rpgclient.Status, org.nerv.rpgclient.Status]
org.nerv.rpgclient.Status.$VALUES[].getClass().getName() elements == org.nerv.rpgclient.Status.class
size(org.nerv.rpgclient.player.Job$Type.$VALUES[]) == 2
size(this.job.skills[]) == 3
size(org.nerv.rpgclient.Status.$VALUES[]) == 3
===========================================================================
org.nerv.rpgclient.player.Player.Player():::EXIT
this.job == null
this.name == null
this.stats == null
this.alive == null
===========================================================================
org.nerv.rpgclient.player.Player.executeSkill(java.lang.String, org.nerv.rpgclient.RpgObject):::ENTER
this has only one value
this.job has only one value
this.name has only one value
this.stats has only one value
this.alive has only one value
arg0.toString one of { "Heal", "Sword Slash" }
arg1 has only one value
arg1.name has only one value
arg1.name.toString == "Poring"
arg1.stats has only one value
arg1.stats.maxHp has only one value
arg1.stats.str == null
arg1.stats.def == null
arg1.stats.atk == null
arg1.stats.maxMp == null
arg1.stats.mp == null
arg1.alive has only one value
===========================================================================
org.nerv.rpgclient.player.Player.executeSkill(java.lang.String, org.nerv.rpgclient.RpgObject):::EXIT66
===========================================================================
org.nerv.rpgclient.player.Player.executeSkill(java.lang.String, org.nerv.rpgclient.RpgObject):::EXIT
org.nerv.rpgclient.player.Player.LOGGER == orig(org.nerv.rpgclient.player.Player.LOGGER)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
org.nerv.rpgclient.player.Player.LOGGER.name == orig(org.nerv.rpgclient.player.Player.LOGGER.name)
org.nerv.rpgclient.player.Player.LOGGER.name.toString == orig(org.nerv.rpgclient.player.Player.LOGGER.name.toString)
org.nerv.rpgclient.player.Player.LOGGER.level == orig(org.nerv.rpgclient.player.Player.LOGGER.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.nerv.rpgclient.player.Player.LOGGER.parent == orig(org.nerv.rpgclient.player.Player.LOGGER.parent)
org.nerv.rpgclient.player.Player.LOGGER.parent.name == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.name)
org.nerv.rpgclient.player.Player.LOGGER.parent.name.toString == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.name.toString)
org.nerv.rpgclient.player.Player.LOGGER.parent.level == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.level)
org.nerv.rpgclient.player.Player.LOGGER.parent.parent == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.nerv.rpgclient.player.Player.LOGGER.parent.resourceBundle == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.resourceBundle)
org.nerv.rpgclient.player.Player.LOGGER.parent.repository == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.repository)
org.nerv.rpgclient.player.Player.LOGGER.parent.repository.getClass().getName() == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.repository.getClass().getName())
org.nerv.rpgclient.player.Player.LOGGER.parent.aai == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.aai)
org.nerv.rpgclient.player.Player.LOGGER.parent.additive == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.additive)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
org.nerv.rpgclient.player.Player.LOGGER.resourceBundle == orig(org.nerv.rpgclient.player.Player.LOGGER.resourceBundle)
org.nerv.rpgclient.player.Player.LOGGER.repository == orig(org.nerv.rpgclient.player.Player.LOGGER.repository)
org.nerv.rpgclient.player.Player.LOGGER.repository.getClass().getName() == orig(org.nerv.rpgclient.player.Player.LOGGER.repository.getClass().getName())
org.nerv.rpgclient.player.Player.LOGGER.aai == orig(org.nerv.rpgclient.player.Player.LOGGER.aai)
org.nerv.rpgclient.player.Player.LOGGER.additive == orig(org.nerv.rpgclient.player.Player.LOGGER.additive)
this.id == orig(this.id)
this.job == orig(this.job)
this.job.type == orig(this.job.type)
org.nerv.rpgclient.player.Job$Type.SWORDSMAN == orig(org.nerv.rpgclient.player.Job$Type.SWORDSMAN)
org.nerv.rpgclient.player.Job$Type.HEALER == orig(org.nerv.rpgclient.player.Job$Type.HEALER)
org.nerv.rpgclient.player.Job$Type.$VALUES == orig(org.nerv.rpgclient.player.Job$Type.$VALUES)
org.nerv.rpgclient.player.Job$Type.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.player.Job$Type.$VALUES.getClass().getName())
org.nerv.rpgclient.player.Job$Type.$VALUES[] == orig(org.nerv.rpgclient.player.Job$Type.$VALUES[])
this.job.skills == orig(this.job.skills)
this.job.skills[] == orig(this.job.skills[])
this.job.skills.getClass().getName() == orig(this.job.skills.getClass().getName())
this.job.attainableLevel == orig(this.job.attainableLevel)
this.level == orig(this.level)
org.nerv.rpgclient.RpgObject.LOGGER == orig(org.nerv.rpgclient.RpgObject.LOGGER)
org.nerv.rpgclient.RpgObject.LOGGER.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.name)
org.nerv.rpgclient.RpgObject.LOGGER.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.level)
org.nerv.rpgclient.RpgObject.LOGGER.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.level)
org.nerv.rpgclient.RpgObject.LOGGER.parent.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.parent)
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.repository)
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository.getClass().getName() == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.repository.getClass().getName())
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.aai)
org.nerv.rpgclient.RpgObject.LOGGER.parent.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.additive)
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository)
org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName() == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName())
org.nerv.rpgclient.RpgObject.LOGGER.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.aai)
org.nerv.rpgclient.RpgObject.LOGGER.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.additive)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.stats == orig(this.stats)
this.stats.maxHp == orig(this.stats.maxHp)
this.stats.hp == orig(this.stats.hp)
this.stats.str == orig(this.stats.str)
this.stats.def == orig(this.stats.def)
this.stats.atk == orig(this.stats.atk)
this.stats.maxMp == orig(this.stats.maxMp)
this.stats.mp == orig(this.stats.mp)
this.alive == orig(this.alive)
this.status == orig(this.status)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.Status.$VALUES.getClass().getName())
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
arg0.toString == orig(arg0.toString)
arg1.name == orig(arg1.name)
arg1.name.toString == orig(arg1.name.toString)
arg1.stats == orig(arg1.stats)
arg1.stats.maxHp == orig(arg1.stats.maxHp)
arg1.stats.str == orig(arg1.stats.str)
arg1.stats.def == orig(arg1.stats.def)
arg1.stats.atk == orig(arg1.stats.atk)
arg1.stats.maxMp == orig(arg1.stats.maxMp)
arg1.stats.mp == orig(arg1.stats.mp)
arg1.alive == orig(arg1.alive)
this.job has only one value
this.name has only one value
this.stats has only one value
this.alive has only one value
arg0.toString one of { "Heal", "Sword Slash" }
arg1.name has only one value
arg1.name.toString == "Poring"
arg1.stats has only one value
arg1.stats.maxHp has only one value
arg1.stats.str == null
arg1.stats.def == null
arg1.stats.atk == null
arg1.stats.maxMp == null
arg1.stats.mp == null
arg1.alive has only one value
arg1.status has only one value
===========================================================================
org.nerv.rpgclient.player.Player.getJob():::ENTER
this has only one value
this.job has only one value
this.name has only one value
this.stats has only one value
this.alive has only one value
===========================================================================
org.nerv.rpgclient.player.Player.getJob():::EXIT
org.nerv.rpgclient.player.Player.LOGGER == orig(org.nerv.rpgclient.player.Player.LOGGER)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
org.nerv.rpgclient.player.Player.LOGGER.name == orig(org.nerv.rpgclient.player.Player.LOGGER.name)
org.nerv.rpgclient.player.Player.LOGGER.name.toString == orig(org.nerv.rpgclient.player.Player.LOGGER.name.toString)
org.nerv.rpgclient.player.Player.LOGGER.level == orig(org.nerv.rpgclient.player.Player.LOGGER.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.nerv.rpgclient.player.Player.LOGGER.parent == orig(org.nerv.rpgclient.player.Player.LOGGER.parent)
org.nerv.rpgclient.player.Player.LOGGER.parent.name == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.name)
org.nerv.rpgclient.player.Player.LOGGER.parent.name.toString == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.name.toString)
org.nerv.rpgclient.player.Player.LOGGER.parent.level == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.level)
org.nerv.rpgclient.player.Player.LOGGER.parent.parent == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.nerv.rpgclient.player.Player.LOGGER.parent.resourceBundle == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.resourceBundle)
org.nerv.rpgclient.player.Player.LOGGER.parent.repository == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.repository)
org.nerv.rpgclient.player.Player.LOGGER.parent.repository.getClass().getName() == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.repository.getClass().getName())
org.nerv.rpgclient.player.Player.LOGGER.parent.aai == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.aai)
org.nerv.rpgclient.player.Player.LOGGER.parent.additive == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.additive)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
org.nerv.rpgclient.player.Player.LOGGER.resourceBundle == orig(org.nerv.rpgclient.player.Player.LOGGER.resourceBundle)
org.nerv.rpgclient.player.Player.LOGGER.repository == orig(org.nerv.rpgclient.player.Player.LOGGER.repository)
org.nerv.rpgclient.player.Player.LOGGER.repository.getClass().getName() == orig(org.nerv.rpgclient.player.Player.LOGGER.repository.getClass().getName())
org.nerv.rpgclient.player.Player.LOGGER.aai == orig(org.nerv.rpgclient.player.Player.LOGGER.aai)
org.nerv.rpgclient.player.Player.LOGGER.additive == orig(org.nerv.rpgclient.player.Player.LOGGER.additive)
this.id == orig(this.id)
this.job == orig(this.job)
this.job.type == orig(this.job.type)
org.nerv.rpgclient.player.Job$Type.SWORDSMAN == orig(org.nerv.rpgclient.player.Job$Type.SWORDSMAN)
org.nerv.rpgclient.player.Job$Type.HEALER == orig(org.nerv.rpgclient.player.Job$Type.HEALER)
org.nerv.rpgclient.player.Job$Type.$VALUES == orig(org.nerv.rpgclient.player.Job$Type.$VALUES)
org.nerv.rpgclient.player.Job$Type.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.player.Job$Type.$VALUES.getClass().getName())
org.nerv.rpgclient.player.Job$Type.$VALUES[] == orig(org.nerv.rpgclient.player.Job$Type.$VALUES[])
this.job.skills == orig(this.job.skills)
this.job.skills[] == orig(this.job.skills[])
this.job.skills.getClass().getName() == orig(this.job.skills.getClass().getName())
this.job.attainableLevel == orig(this.job.attainableLevel)
this.level == orig(this.level)
org.nerv.rpgclient.RpgObject.LOGGER == orig(org.nerv.rpgclient.RpgObject.LOGGER)
org.nerv.rpgclient.RpgObject.LOGGER.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.name)
org.nerv.rpgclient.RpgObject.LOGGER.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.level)
org.nerv.rpgclient.RpgObject.LOGGER.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.level)
org.nerv.rpgclient.RpgObject.LOGGER.parent.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.parent)
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.repository)
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository.getClass().getName() == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.repository.getClass().getName())
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.aai)
org.nerv.rpgclient.RpgObject.LOGGER.parent.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.additive)
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository)
org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName() == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName())
org.nerv.rpgclient.RpgObject.LOGGER.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.aai)
org.nerv.rpgclient.RpgObject.LOGGER.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.additive)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.stats == orig(this.stats)
this.stats.maxHp == orig(this.stats.maxHp)
this.stats.hp == orig(this.stats.hp)
this.stats.str == orig(this.stats.str)
this.stats.def == orig(this.stats.def)
this.stats.atk == orig(this.stats.atk)
this.stats.maxMp == orig(this.stats.maxMp)
this.stats.mp == orig(this.stats.mp)
this.alive == orig(this.alive)
this.status == orig(this.status)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.Status.$VALUES.getClass().getName())
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
this.job has only one value
this.name has only one value
this.stats has only one value
this.alive has only one value
return has only one value
return.type has only one value
return.skills has only one value
return.skills[] contains no nulls and has only one value, of length 3
return.skills[].getClass().getName() == [org.nerv.rpgclient.Skill, org.nerv.rpgclient.Skill, org.nerv.rpgclient.Skill]
return.skills[].getClass().getName() elements == org.nerv.rpgclient.Skill.class
return.skills.getClass().getName() == java.util.ArrayList.class
return.attainableLevel == 0
size(return.skills[]) == 3
===========================================================================
org.nerv.rpgclient.player.Player.setJob(org.nerv.rpgclient.player.Job):::ENTER
this has only one value
this.job == null
this.name has only one value
this.stats has only one value
this.alive has only one value
arg0 has only one value
arg0.type has only one value
arg0.skills has only one value
arg0.skills[] contains no nulls and has only one value, of length 3
arg0.skills[].getClass().getName() == [org.nerv.rpgclient.Skill, org.nerv.rpgclient.Skill, org.nerv.rpgclient.Skill]
arg0.skills[].getClass().getName() elements == org.nerv.rpgclient.Skill.class
arg0.skills.getClass().getName() == java.util.ArrayList.class
arg0.attainableLevel == 0
size(arg0.skills[]) == 3
===========================================================================
org.nerv.rpgclient.player.Player.setJob(org.nerv.rpgclient.player.Job):::EXIT
org.nerv.rpgclient.player.Player.LOGGER == orig(org.nerv.rpgclient.player.Player.LOGGER)
org.apache.log4j.Logger.FQCN == orig(org.apache.log4j.Logger.FQCN)
org.apache.log4j.Logger.FQCN.toString == orig(org.apache.log4j.Logger.FQCN.toString)
org.apache.log4j.Logger.class$org$apache$log4j$Logger == orig(org.apache.log4j.Logger.class$org$apache$log4j$Logger)
org.nerv.rpgclient.player.Player.LOGGER.name == orig(org.nerv.rpgclient.player.Player.LOGGER.name)
org.nerv.rpgclient.player.Player.LOGGER.name.toString == orig(org.nerv.rpgclient.player.Player.LOGGER.name.toString)
org.nerv.rpgclient.player.Player.LOGGER.level == orig(org.nerv.rpgclient.player.Player.LOGGER.level)
org.apache.log4j.Level.OFF == orig(org.apache.log4j.Level.OFF)
org.apache.log4j.Level.FATAL == orig(org.apache.log4j.Level.FATAL)
org.apache.log4j.Level.ERROR == orig(org.apache.log4j.Level.ERROR)
org.apache.log4j.Level.WARN == orig(org.apache.log4j.Level.WARN)
org.apache.log4j.Level.INFO == orig(org.apache.log4j.Level.INFO)
org.apache.log4j.Level.DEBUG == orig(org.apache.log4j.Level.DEBUG)
org.apache.log4j.Level.TRACE == orig(org.apache.log4j.Level.TRACE)
org.apache.log4j.Level.ALL == orig(org.apache.log4j.Level.ALL)
org.apache.log4j.Level.class$org$apache$log4j$Level == orig(org.apache.log4j.Level.class$org$apache$log4j$Level)
org.apache.log4j.Priority.FATAL == orig(org.apache.log4j.Priority.FATAL)
org.apache.log4j.Priority.ERROR == orig(org.apache.log4j.Priority.ERROR)
org.apache.log4j.Priority.WARN == orig(org.apache.log4j.Priority.WARN)
org.apache.log4j.Priority.INFO == orig(org.apache.log4j.Priority.INFO)
org.apache.log4j.Priority.DEBUG == orig(org.apache.log4j.Priority.DEBUG)
org.nerv.rpgclient.player.Player.LOGGER.parent == orig(org.nerv.rpgclient.player.Player.LOGGER.parent)
org.nerv.rpgclient.player.Player.LOGGER.parent.name == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.name)
org.nerv.rpgclient.player.Player.LOGGER.parent.name.toString == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.name.toString)
org.nerv.rpgclient.player.Player.LOGGER.parent.level == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.level)
org.nerv.rpgclient.player.Player.LOGGER.parent.parent == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.parent)
org.apache.log4j.Category.FQCN == orig(org.apache.log4j.Category.FQCN)
org.apache.log4j.Category.FQCN.toString == orig(org.apache.log4j.Category.FQCN.toString)
org.nerv.rpgclient.player.Player.LOGGER.parent.resourceBundle == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.resourceBundle)
org.nerv.rpgclient.player.Player.LOGGER.parent.repository == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.repository)
org.nerv.rpgclient.player.Player.LOGGER.parent.repository.getClass().getName() == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.repository.getClass().getName())
org.nerv.rpgclient.player.Player.LOGGER.parent.aai == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.aai)
org.nerv.rpgclient.player.Player.LOGGER.parent.additive == orig(org.nerv.rpgclient.player.Player.LOGGER.parent.additive)
org.apache.log4j.Category.class$org$apache$log4j$Category == orig(org.apache.log4j.Category.class$org$apache$log4j$Category)
org.nerv.rpgclient.player.Player.LOGGER.resourceBundle == orig(org.nerv.rpgclient.player.Player.LOGGER.resourceBundle)
org.nerv.rpgclient.player.Player.LOGGER.repository == orig(org.nerv.rpgclient.player.Player.LOGGER.repository)
org.nerv.rpgclient.player.Player.LOGGER.repository.getClass().getName() == orig(org.nerv.rpgclient.player.Player.LOGGER.repository.getClass().getName())
org.nerv.rpgclient.player.Player.LOGGER.aai == orig(org.nerv.rpgclient.player.Player.LOGGER.aai)
org.nerv.rpgclient.player.Player.LOGGER.additive == orig(org.nerv.rpgclient.player.Player.LOGGER.additive)
this.id == orig(this.id)
org.nerv.rpgclient.player.Job$Type.SWORDSMAN == orig(org.nerv.rpgclient.player.Job$Type.SWORDSMAN)
org.nerv.rpgclient.player.Job$Type.HEALER == orig(org.nerv.rpgclient.player.Job$Type.HEALER)
org.nerv.rpgclient.player.Job$Type.$VALUES == orig(org.nerv.rpgclient.player.Job$Type.$VALUES)
org.nerv.rpgclient.player.Job$Type.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.player.Job$Type.$VALUES.getClass().getName())
org.nerv.rpgclient.player.Job$Type.$VALUES[] == orig(org.nerv.rpgclient.player.Job$Type.$VALUES[])
this.level == orig(this.level)
org.nerv.rpgclient.RpgObject.LOGGER == orig(org.nerv.rpgclient.RpgObject.LOGGER)
org.nerv.rpgclient.RpgObject.LOGGER.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.name)
org.nerv.rpgclient.RpgObject.LOGGER.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.level)
org.nerv.rpgclient.RpgObject.LOGGER.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name)
org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.name.toString)
org.nerv.rpgclient.RpgObject.LOGGER.parent.level == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.level)
org.nerv.rpgclient.RpgObject.LOGGER.parent.parent == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.parent)
org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.repository)
org.nerv.rpgclient.RpgObject.LOGGER.parent.repository.getClass().getName() == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.repository.getClass().getName())
org.nerv.rpgclient.RpgObject.LOGGER.parent.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.aai)
org.nerv.rpgclient.RpgObject.LOGGER.parent.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.parent.additive)
org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle == orig(org.nerv.rpgclient.RpgObject.LOGGER.resourceBundle)
org.nerv.rpgclient.RpgObject.LOGGER.repository == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository)
org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName() == orig(org.nerv.rpgclient.RpgObject.LOGGER.repository.getClass().getName())
org.nerv.rpgclient.RpgObject.LOGGER.aai == orig(org.nerv.rpgclient.RpgObject.LOGGER.aai)
org.nerv.rpgclient.RpgObject.LOGGER.additive == orig(org.nerv.rpgclient.RpgObject.LOGGER.additive)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.stats == orig(this.stats)
this.stats.maxHp == orig(this.stats.maxHp)
this.stats.hp == orig(this.stats.hp)
this.stats.str == orig(this.stats.str)
this.stats.def == orig(this.stats.def)
this.stats.atk == orig(this.stats.atk)
this.stats.maxMp == orig(this.stats.maxMp)
this.stats.mp == orig(this.stats.mp)
this.alive == orig(this.alive)
this.status == orig(this.status)
org.nerv.rpgclient.Status.NORMAL == orig(org.nerv.rpgclient.Status.NORMAL)
org.nerv.rpgclient.Status.POISONED == orig(org.nerv.rpgclient.Status.POISONED)
org.nerv.rpgclient.Status.PARALYZED == orig(org.nerv.rpgclient.Status.PARALYZED)
org.nerv.rpgclient.Status.$VALUES == orig(org.nerv.rpgclient.Status.$VALUES)
org.nerv.rpgclient.Status.$VALUES.getClass().getName() == orig(org.nerv.rpgclient.Status.$VALUES.getClass().getName())
org.nerv.rpgclient.Status.$VALUES[] == orig(org.nerv.rpgclient.Status.$VALUES[])
arg0.type == orig(arg0.type)
arg0.skills == orig(arg0.skills)
arg0.skills[] == orig(arg0.skills[])
arg0.skills.getClass().getName() == orig(arg0.skills.getClass().getName())
arg0.attainableLevel == orig(arg0.attainableLevel)
this.job has only one value
this.name has only one value
this.stats has only one value
this.alive has only one value
arg0.type has only one value
arg0.skills has only one value
arg0.skills[] contains no nulls and has only one value, of length 3
arg0.skills[].getClass().getName() == [org.nerv.rpgclient.Skill, org.nerv.rpgclient.Skill, org.nerv.rpgclient.Skill]
arg0.skills[].getClass().getName() elements == org.nerv.rpgclient.Skill.class
arg0.skills.getClass().getName() == java.util.ArrayList.class
arg0.attainableLevel == 0
size(arg0.skills[]) == 3
Exiting Daikon.
