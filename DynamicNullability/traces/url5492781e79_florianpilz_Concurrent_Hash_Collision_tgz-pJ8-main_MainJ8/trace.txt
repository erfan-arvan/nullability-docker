Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 1 time.  Unmatched entries are ignored!
Unterminated calls:
  main.Main.main(java.lang.String[]) : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
cl.niclabs.skandium.Skandium:::CLASS
cl.niclabs.skandium.Skandium.singleton == null
===========================================================================
cl.niclabs.skandium.Skandium:::OBJECT
this has only one value
this.executor has only one value
===========================================================================
cl.niclabs.skandium.Skandium.Skandium():::EXIT
===========================================================================
cl.niclabs.skandium.Skandium.Skandium(int):::ENTER
arg0 == 24
===========================================================================
cl.niclabs.skandium.Skandium.Skandium(int):::EXIT
===========================================================================
cl.niclabs.skandium.Skandium.newStream(cl.niclabs.skandium.skeletons.Skeleton):::ENTER
arg0.getClass().getName() == cl.niclabs.skandium.skeletons.Map.class
===========================================================================
cl.niclabs.skandium.Skandium.newStream(cl.niclabs.skandium.skeletons.Skeleton):::EXIT
this.executor == return.executor
this.executor == orig(this.executor)
cl.niclabs.skandium.Skandium.singleton == orig(cl.niclabs.skandium.Skandium.singleton)
return.skeleton == orig(arg0)
return.skeleton.getClass().getName() == orig(arg0.getClass().getName())
return.skeleton.getClass().getName() == cl.niclabs.skandium.skeletons.Map.class
===========================================================================
cl.niclabs.skandium.Stream:::OBJECT
this.executor has only one value
this.executor != null
this.skeleton != null
this.skeleton.getClass().getName() == cl.niclabs.skandium.skeletons.Map.class
===========================================================================
cl.niclabs.skandium.Stream.Stream(cl.niclabs.skandium.skeletons.Skeleton, cl.niclabs.skandium.system.TaskExecutor):::ENTER
arg0.getClass().getName() == cl.niclabs.skandium.skeletons.Map.class
arg1 has only one value
===========================================================================
cl.niclabs.skandium.Stream.Stream(cl.niclabs.skandium.skeletons.Skeleton, cl.niclabs.skandium.system.TaskExecutor):::EXIT
this.executor == orig(arg1)
this.skeleton == orig(arg0)
this.skeleton.getClass().getName() == orig(arg0.getClass().getName())
===========================================================================
cl.niclabs.skandium.Stream.input(java.lang.Object):::ENTER
===========================================================================
cl.niclabs.skandium.Stream.input(java.lang.Object):::EXIT
this.executor == orig(this.executor)
this.skeleton == orig(this.skeleton)
this.skeleton.getClass().getName() == orig(this.skeleton.getClass().getName())
return.getClass().getName() == cl.niclabs.skandium.system.SkandiumFuture.class
===========================================================================
cl.niclabs.skandium.instructions.AbstractInstruction:::OBJECT
===========================================================================
cl.niclabs.skandium.instructions.AbstractInstruction.AbstractInstruction():::EXIT
===========================================================================
cl.niclabs.skandium.instructions.AbstractInstruction.copyStack(java.util.Stack):::ENTER
arg0 != null
===========================================================================
cl.niclabs.skandium.instructions.AbstractInstruction.copyStack(java.util.Stack):::EXIT
return != null
===========================================================================
cl.niclabs.skandium.instructions.MapInst:::OBJECT
this.split != null
this.substack != null
this.merge != null
this.split.getClass().getName() != this.merge.getClass().getName()
===========================================================================
cl.niclabs.skandium.instructions.MapInst.MapInst(cl.niclabs.skandium.muscles.Split, java.util.Stack, cl.niclabs.skandium.muscles.Merge):::ENTER
===========================================================================
cl.niclabs.skandium.instructions.MapInst.MapInst(cl.niclabs.skandium.muscles.Split, java.util.Stack, cl.niclabs.skandium.muscles.Merge):::EXIT
this.split == orig(arg0)
this.split.getClass().getName() == orig(arg0.getClass().getName())
this.substack == orig(arg1)
this.merge == orig(arg2)
this.merge.getClass().getName() == orig(arg2.getClass().getName())
===========================================================================
cl.niclabs.skandium.instructions.MapInst.interpret(java.lang.Object, java.util.Stack, java.util.List):::ENTER
arg2[] == []
arg2[].getClass().getName() == []
arg2.getClass().getName() == java.util.ArrayList.class
===========================================================================
cl.niclabs.skandium.instructions.MapInst.interpret(java.lang.Object, java.util.Stack, java.util.List):::EXIT
this.split == orig(this.split)
this.split.getClass().getName() == orig(this.split.getClass().getName())
this.substack == orig(this.substack)
this.merge == orig(this.merge)
this.merge.getClass().getName() == orig(this.merge.getClass().getName())
arg2[].getClass().getName() == [java.util.Stack, java.util.Stack, java.util.Stack, java.util.Stack, java.util.Stack, java.util.Stack, java.util.Stack, java.util.Stack]
arg2[].getClass().getName() elements == java.util.Stack.class
===========================================================================
cl.niclabs.skandium.instructions.MergeInst:::OBJECT
this.merge != null
===========================================================================
cl.niclabs.skandium.instructions.MergeInst.MergeInst(cl.niclabs.skandium.muscles.Merge):::ENTER
===========================================================================
cl.niclabs.skandium.instructions.MergeInst.MergeInst(cl.niclabs.skandium.muscles.Merge):::EXIT
===========================================================================
cl.niclabs.skandium.instructions.MergeInst.interpret(java.lang.Object, java.util.Stack, java.util.List):::ENTER
arg0.getClass().getName() == java.lang.Object[].class
arg2[] == []
arg2[].getClass().getName() == []
arg2.getClass().getName() == java.util.ArrayList.class
===========================================================================
cl.niclabs.skandium.instructions.MergeInst.interpret(java.lang.Object, java.util.Stack, java.util.List):::EXIT
this.merge == orig(this.merge)
this.merge.getClass().getName() == orig(this.merge.getClass().getName())
arg2[] == orig(arg2[])
arg2[] == []
arg2[].getClass().getName() == []
===========================================================================
cl.niclabs.skandium.instructions.SeqInst:::OBJECT
this.execute != null
===========================================================================
cl.niclabs.skandium.instructions.SeqInst.SeqInst(cl.niclabs.skandium.muscles.Execute):::ENTER
arg0 != null
===========================================================================
cl.niclabs.skandium.instructions.SeqInst.SeqInst(cl.niclabs.skandium.muscles.Execute):::EXIT
this.execute == orig(arg0)
this.execute.getClass().getName() == orig(arg0.getClass().getName())
===========================================================================
cl.niclabs.skandium.instructions.SeqInst.copy():::ENTER
===========================================================================
cl.niclabs.skandium.instructions.SeqInst.copy():::EXIT
this.execute == orig(this.execute)
this.execute.getClass().getName() == orig(this.execute.getClass().getName())
return != null
return.getClass().getName() == cl.niclabs.skandium.instructions.SeqInst.class
this.execute.getClass().getName() != return.getClass().getName()
===========================================================================
cl.niclabs.skandium.instructions.SeqInst.interpret(java.lang.Object, java.util.Stack, java.util.List):::ENTER
arg0 != null
arg1 != null
arg2 != null
arg2[] == []
arg2[].getClass().getName() == []
arg2.getClass().getName() == java.util.ArrayList.class
this.execute.getClass().getName() != arg0.getClass().getName()
this.execute.getClass().getName() != arg2.getClass().getName()
arg0.getClass().getName() != arg2.getClass().getName()
===========================================================================
cl.niclabs.skandium.instructions.SeqInst.interpret(java.lang.Object, java.util.Stack, java.util.List):::EXIT
this.execute == orig(this.execute)
this.execute.getClass().getName() == orig(this.execute.getClass().getName())
arg2[] == orig(arg2[])
arg2[] == []
arg2[].getClass().getName() == []
return != null
this.execute.getClass().getName() != return.getClass().getName()
this.execute.getClass().getName() != orig(arg0.getClass().getName())
this.execute.getClass().getName() != orig(arg2.getClass().getName())
return.getClass().getName() != orig(arg2.getClass().getName())
===========================================================================
cl.niclabs.skandium.skeletons.AbstractSkeleton:::OBJECT
===========================================================================
cl.niclabs.skandium.skeletons.AbstractSkeleton.AbstractSkeleton():::EXIT
===========================================================================
cl.niclabs.skandium.skeletons.Map:::OBJECT
this.split != null
this.skeleton != null
this.skeleton.getClass().getName() == cl.niclabs.skandium.skeletons.Seq.class
this.merge != null
this.split.getClass().getName() != this.skeleton.getClass().getName()
this.split.getClass().getName() != this.merge.getClass().getName()
this.skeleton.getClass().getName() != this.merge.getClass().getName()
===========================================================================
cl.niclabs.skandium.skeletons.Map.Map(cl.niclabs.skandium.muscles.Split, cl.niclabs.skandium.muscles.Execute, cl.niclabs.skandium.muscles.Merge):::ENTER
===========================================================================
cl.niclabs.skandium.skeletons.Map.Map(cl.niclabs.skandium.muscles.Split, cl.niclabs.skandium.muscles.Execute, cl.niclabs.skandium.muscles.Merge):::EXIT
this.split == orig(arg0)
this.split.getClass().getName() == orig(arg0.getClass().getName())
this.merge == orig(arg2)
this.merge.getClass().getName() == orig(arg2.getClass().getName())
===========================================================================
cl.niclabs.skandium.skeletons.Map.Map(cl.niclabs.skandium.muscles.Split, cl.niclabs.skandium.skeletons.Skeleton, cl.niclabs.skandium.muscles.Merge):::ENTER
arg1.getClass().getName() == cl.niclabs.skandium.skeletons.Seq.class
===========================================================================
cl.niclabs.skandium.skeletons.Map.Map(cl.niclabs.skandium.muscles.Split, cl.niclabs.skandium.skeletons.Skeleton, cl.niclabs.skandium.muscles.Merge):::EXIT
this.split == orig(arg0)
this.split.getClass().getName() == orig(arg0.getClass().getName())
this.skeleton == orig(arg1)
this.skeleton.getClass().getName() == orig(arg1.getClass().getName())
this.merge == orig(arg2)
this.merge.getClass().getName() == orig(arg2.getClass().getName())
===========================================================================
cl.niclabs.skandium.skeletons.Map.accept(cl.niclabs.skandium.skeletons.SkeletonVisitor):::ENTER
arg0.getClass().getName() == cl.niclabs.skandium.skeletons.StackBuilder.class
===========================================================================
cl.niclabs.skandium.skeletons.Map.accept(cl.niclabs.skandium.skeletons.SkeletonVisitor):::EXIT
this.split == orig(this.split)
this.split.getClass().getName() == orig(this.split.getClass().getName())
this.skeleton == orig(this.skeleton)
this.skeleton.getClass().getName() == orig(this.skeleton.getClass().getName())
this.merge == orig(this.merge)
this.merge.getClass().getName() == orig(this.merge.getClass().getName())
===========================================================================
cl.niclabs.skandium.skeletons.Seq:::OBJECT
this.execute != null
===========================================================================
cl.niclabs.skandium.skeletons.Seq.Seq(cl.niclabs.skandium.muscles.Execute):::ENTER
===========================================================================
cl.niclabs.skandium.skeletons.Seq.Seq(cl.niclabs.skandium.muscles.Execute):::EXIT
this.execute == orig(arg0)
this.execute.getClass().getName() == orig(arg0.getClass().getName())
===========================================================================
cl.niclabs.skandium.skeletons.Seq.accept(cl.niclabs.skandium.skeletons.SkeletonVisitor):::ENTER
arg0.getClass().getName() == cl.niclabs.skandium.skeletons.StackBuilder.class
===========================================================================
cl.niclabs.skandium.skeletons.Seq.accept(cl.niclabs.skandium.skeletons.SkeletonVisitor):::EXIT
this.execute == orig(this.execute)
this.execute.getClass().getName() == orig(this.execute.getClass().getName())
===========================================================================
cl.niclabs.skandium.skeletons.StackBuilder:::OBJECT
this.stack != null
===========================================================================
cl.niclabs.skandium.skeletons.StackBuilder.StackBuilder():::EXIT
===========================================================================
cl.niclabs.skandium.skeletons.StackBuilder.visit(cl.niclabs.skandium.skeletons.Map):::ENTER
arg0.skeleton.getClass().getName() == cl.niclabs.skandium.skeletons.Seq.class
===========================================================================
cl.niclabs.skandium.skeletons.StackBuilder.visit(cl.niclabs.skandium.skeletons.Map):::EXIT
this.stack == orig(this.stack)
arg0.split == orig(arg0.split)
arg0.split.getClass().getName() == orig(arg0.split.getClass().getName())
arg0.skeleton == orig(arg0.skeleton)
arg0.skeleton.getClass().getName() == orig(arg0.skeleton.getClass().getName())
arg0.merge == orig(arg0.merge)
arg0.merge.getClass().getName() == orig(arg0.merge.getClass().getName())
arg0.skeleton.getClass().getName() == cl.niclabs.skandium.skeletons.Seq.class
===========================================================================
cl.niclabs.skandium.skeletons.StackBuilder.visit(cl.niclabs.skandium.skeletons.Seq):::ENTER
===========================================================================
cl.niclabs.skandium.skeletons.StackBuilder.visit(cl.niclabs.skandium.skeletons.Seq):::EXIT
this.stack == orig(this.stack)
arg0.execute == orig(arg0.execute)
arg0.execute.getClass().getName() == orig(arg0.execute.getClass().getName())
===========================================================================
cl.niclabs.skandium.system.Interpreter.interpret(cl.niclabs.skandium.system.Task):::ENTER
arg0 != null
cl.niclabs.skandium.system.Task.random has only one value
cl.niclabs.skandium.system.Task.random != null
arg0.root != null
arg0.root.root != null
arg0.root.parent == null
arg0.root.priority == 2147483647
arg0.root.stack != null
arg0.root.children[] elements != null
arg0.root.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class
arg0.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
arg0.root.unfinishedChildren one of { 0, 8 }
arg0.root.exception == null
arg0.root.future != null
arg0.root.executor has only one value
arg0.root.executor != null
arg0.root.canceled == false
arg0.parent.root != null
arg0.parent.parent == null
arg0.parent.priority == 2147483647
arg0.parent.stack != null
arg0.parent.P == null
arg0.parent.children != null
arg0.parent.children[] elements != null
arg0.parent.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
arg0.parent.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class
arg0.parent.unfinishedChildren == 8
arg0.parent.exception == null
arg0.parent.future != null
arg0.parent.executor has only one value
arg0.parent.executor != null
arg0.parent.canceled == false
arg0.priority one of { 2147483646, 2147483647 }
arg0.stack != null
arg0.P != null
arg0.children[] == []
arg0.children[].getClass().getName() == []
arg0.unfinishedChildren == 0
arg0.exception == null
arg0.future.executor has only one value
arg0.future.result == null
arg0.future.exception == null
arg0.future.cancelled == false
arg0.executor has only one value
arg0.executor != null
arg0.canceled == false
size(arg0.root.children[]) one of { 0, 8 }
size(arg0.parent.children[]) == 8
===========================================================================
cl.niclabs.skandium.system.Interpreter.interpret(cl.niclabs.skandium.system.Task):::EXIT2
arg0.root.P == null
arg0.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
arg0.root.unfinishedChildren == 8
arg0.parent == null
arg0.priority == 2147483647
arg0.P == null
arg0.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
arg0.unfinishedChildren == 8
return.root.P == null
return.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
return.root.unfinishedChildren == 8
return.parent == null
return.priority == 2147483647
return.P == null
return.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
return.unfinishedChildren == 8
orig(arg0.root.children) == null
orig(arg0.root.unfinishedChildren) == 0
orig(arg0.children) == null
size(arg0.root.children[]) == 8
size(arg0.children[]) == 8
size(return.root.children[]) == 8
size(return.children[]) == 8
===========================================================================
cl.niclabs.skandium.system.Interpreter.interpret(cl.niclabs.skandium.system.Task):::EXIT3
arg0.root.children == orig(arg0.root.children)
arg0.children == orig(arg0.children)
arg0.unfinishedChildren == orig(arg0.unfinishedChildren)
arg0.P != null
arg0.children[] == []
arg0.children[].getClass().getName() == []
arg0.unfinishedChildren == 0
return.P != null
return.children[] == []
return.children[].getClass().getName() == []
return.unfinishedChildren == 0
orig(arg0.root.P.getClass().getName()) == java.lang.Object[].class
arg0.root.unfinishedChildren <= orig(arg0.root.unfinishedChildren)
===========================================================================
cl.niclabs.skandium.system.Interpreter.interpret(cl.niclabs.skandium.system.Task):::EXIT
cl.niclabs.skandium.system.Task.random == orig(cl.niclabs.skandium.system.Task.random)
arg0.id == orig(arg0.id)
arg0.root == orig(arg0.root)
arg0.root.id == orig(arg0.root.id)
arg0.root.root == orig(arg0.root.root)
arg0.root.parent == orig(arg0.root.parent)
arg0.root.priority == orig(arg0.root.priority)
arg0.root.stack == orig(arg0.root.stack)
arg0.root.children[] == orig(arg0.root.children[])
arg0.root.children[].getClass().getName() == orig(arg0.root.children[].getClass().getName())
arg0.root.exception == orig(arg0.root.exception)
arg0.root.future == orig(arg0.root.future)
arg0.root.executor == orig(arg0.root.executor)
arg0.root.canceled == orig(arg0.root.canceled)
arg0.parent == orig(arg0.parent)
arg0.parent.id == orig(arg0.parent.id)
arg0.parent.root == orig(arg0.parent.root)
arg0.parent.parent == orig(arg0.parent.parent)
arg0.parent.priority == orig(arg0.parent.priority)
arg0.parent.stack == orig(arg0.parent.stack)
arg0.parent.P == orig(arg0.parent.P)
arg0.parent.children == orig(arg0.parent.children)
arg0.parent.children[] == orig(arg0.parent.children[])
arg0.parent.exception == orig(arg0.parent.exception)
arg0.parent.future == orig(arg0.parent.future)
arg0.parent.executor == orig(arg0.parent.executor)
arg0.parent.canceled == orig(arg0.parent.canceled)
arg0.priority == orig(arg0.priority)
arg0.stack == orig(arg0.stack)
arg0.children[] == orig(arg0.children[])
arg0.children[].getClass().getName() == orig(arg0.children[].getClass().getName())
arg0.exception == orig(arg0.exception)
arg0.future == orig(arg0.future)
arg0.future.executor == orig(arg0.future.executor)
arg0.future.task == orig(arg0.future.task)
arg0.future.result == orig(arg0.future.result)
arg0.future.exception == orig(arg0.future.exception)
arg0.future.cancelled == orig(arg0.future.cancelled)
arg0.executor == orig(arg0.executor)
arg0.canceled == orig(arg0.canceled)
cl.niclabs.skandium.system.Task.random has only one value
cl.niclabs.skandium.system.Task.random != null
arg0.root != null
arg0.root.root != null
arg0.root.parent == null
arg0.root.priority == 2147483647
arg0.root.stack != null
arg0.root.children != null
arg0.root.children[] elements != null
arg0.root.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class
arg0.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
arg0.root.unfinishedChildren >= 0
arg0.root.exception == null
arg0.root.future != null
arg0.root.executor has only one value
arg0.root.executor != null
arg0.root.canceled == false
arg0.parent.root != null
arg0.parent.parent == null
arg0.parent.priority == 2147483647
arg0.parent.stack != null
arg0.parent.P == null
arg0.parent.children != null
arg0.parent.children[] elements != null
arg0.parent.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
arg0.parent.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class
arg0.parent.unfinishedChildren >= 1
arg0.parent.exception == null
arg0.parent.future != null
arg0.parent.executor has only one value
arg0.parent.executor != null
arg0.parent.canceled == false
arg0.priority one of { 2147483646, 2147483647 }
arg0.stack != null
arg0.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class
arg0.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
arg0.unfinishedChildren one of { 0, 8 }
arg0.exception == null
arg0.future.executor has only one value
arg0.future.result == null
arg0.future.exception == null
arg0.future.cancelled == false
arg0.executor has only one value
arg0.executor != null
arg0.canceled == false
return != null
return.root != null
return.root.root != null
return.root.parent == null
return.root.priority == 2147483647
return.root.stack != null
return.root.children != null
return.root.children[] elements != null
return.root.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class
return.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
return.root.unfinishedChildren >= 0
return.root.exception == null
return.root.future != null
return.root.executor has only one value
return.root.executor != null
return.root.canceled == false
return.parent.root != null
return.parent.parent == null
return.parent.priority == 2147483647
return.parent.stack != null
return.parent.P == null
return.parent.children != null
return.parent.children[] elements != null
return.parent.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
return.parent.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class
return.parent.unfinishedChildren >= 1
return.parent.exception == null
return.parent.future != null
return.parent.executor has only one value
return.parent.executor != null
return.parent.canceled == false
return.priority one of { 2147483646, 2147483647 }
return.stack != null
return.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class
return.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
return.unfinishedChildren one of { 0, 8 }
return.exception == null
return.future.executor has only one value
return.future.result == null
return.future.exception == null
return.future.cancelled == false
return.executor has only one value
return.executor != null
return.canceled == false
size(arg0.root.children[]) one of { 0, 8 }
size(arg0.root.children[])-1 != 0
size(arg0.parent.children[]) == 8
size(arg0.children[]) one of { 0, 8 }
size(return.root.children[]) one of { 0, 8 }
size(return.root.children[])-1 != 0
size(return.parent.children[]) == 8
size(return.children[]) one of { 0, 8 }
arg0.parent.unfinishedChildren <= orig(arg0.parent.unfinishedChildren)
arg0.children[] is the reverse of orig(arg0.children[])
arg0.unfinishedChildren >= orig(arg0.unfinishedChildren)
===========================================================================
cl.niclabs.skandium.system.SkandiumFuture:::OBJECT
this == this.task.root.future
this.executor == this.task.root.executor
this.task == this.task.root.root
this.task.id == this.task.root.id
this.task.root == this.task.root.root
this.task.root.root == this.task.future.task
this.task.root.priority == this.task.priority
this.task.root.stack == this.task.stack
this.task.root.P == this.task.P
this.task.root.P.getClass().getName() == this.task.P.getClass().getName()
this.task.root.P.getClass().getName() == this.result.getClass().getName()
this.task.root.children == this.task.children
this.task.root.unfinishedChildren == this.task.unfinishedChildren
this.task.root.future == this.task.future
this.task.root.executor == this.task.future.executor
this.task.root.executor == this.task.executor
this.task.root.canceled == this.task.canceled
this.task.P.getClass().getName() == this.result.getClass().getName()
this.task.future.result == this.result
this.task.future.result.getClass().getName() == this.result.getClass().getName()
this.task.future.cancelled == this.cancelled
this.executor has only one value
this.executor != null
this.task != null
cl.niclabs.skandium.system.Task.random has only one value
cl.niclabs.skandium.system.Task.random != null
this.task.root.root != null
this.task.root.parent == null
this.task.root.priority == 2147483647
this.task.root.stack != null
this.task.root.P != null
this.task.root.children[] == []
this.task.root.children[].getClass().getName() == []
this.task.root.unfinishedChildren == 0
this.task.root.exception == null
this.task.root.future != null
this.task.root.executor has only one value
this.task.root.executor != null
this.task.root.canceled == false
this.task.parent == null
this.task.priority == 2147483647
this.task.stack != null
this.task.P != null
this.task.children[] == []
this.task.children[].getClass().getName() == []
this.task.unfinishedChildren == 0
this.task.exception == null
this.task.future.exception == null
this.task.future.cancelled == false
this.task.canceled == false
this.exception == null
this.cancelled == false
===========================================================================
cl.niclabs.skandium.system.SkandiumFuture.SkandiumFuture(cl.niclabs.skandium.system.TaskExecutor, cl.niclabs.skandium.system.Task):::ENTER
arg0 has only one value
cl.niclabs.skandium.system.Task.random has only one value
arg1.root == null
arg1.parent == null
arg1.priority == 2147483647
arg1.children == null
arg1.unfinishedChildren == 0
arg1.exception == null
arg1.future == null
arg1.executor == null
arg1.canceled == false
===========================================================================
cl.niclabs.skandium.system.SkandiumFuture.SkandiumFuture(cl.niclabs.skandium.system.TaskExecutor, cl.niclabs.skandium.system.Task):::EXIT
this.executor == orig(arg0)
this.task == orig(arg1)
cl.niclabs.skandium.system.Task.random == orig(cl.niclabs.skandium.system.Task.random)
this.task.id == arg1.id
this.task.priority == arg1.priority
this.task.stack == arg1.stack
this.task.P == arg1.P
this.task.P.getClass().getName() == arg1.P.getClass().getName()
this.task.unfinishedChildren == arg1.unfinishedChildren
arg1.id == orig(arg1.id)
arg1.root == orig(arg1.root)
arg1.parent == orig(arg1.parent)
arg1.priority == orig(arg1.priority)
arg1.stack == orig(arg1.stack)
arg1.P == orig(arg1.P)
arg1.P.getClass().getName() == orig(arg1.P.getClass().getName())
arg1.children == orig(arg1.children)
arg1.unfinishedChildren == orig(arg1.unfinishedChildren)
arg1.exception == orig(arg1.exception)
arg1.future == orig(arg1.future)
arg1.executor == orig(arg1.executor)
arg1.canceled == orig(arg1.canceled)
this.task.root == null
this.task.children == null
this.task.future == null
this.task.executor == null
this.result == null
arg1.root == null
arg1.parent == null
arg1.priority == 2147483647
arg1.children == null
arg1.unfinishedChildren == 0
arg1.exception == null
arg1.future == null
arg1.executor == null
arg1.canceled == false
===========================================================================
cl.niclabs.skandium.system.SkandiumFuture.get():::ENTER
this == this.task.future
this.executor == this.task.future.executor
this.executor == this.task.executor
this.task == this.task.root
this.task == this.task.future.task
this.task.children == null
this.result == null
===========================================================================
cl.niclabs.skandium.system.SkandiumFuture.get():::EXIT
this.executor == this.task.future.executor
this.executor == this.task.executor
this.executor == orig(this.executor)
this.executor == orig(this.task.root.executor)
this.executor == orig(this.task.future.executor)
this.executor == orig(this.task.executor)
this.task == this.task.root
this.task == this.task.future.task
this.task == orig(this.task)
this.task == orig(this.task.root)
this.task == orig(this.task.root.root)
this.task == orig(this.task.future.task)
cl.niclabs.skandium.system.Task.random == orig(cl.niclabs.skandium.system.Task.random)
this.task.id == orig(this.task.id)
this.task.id == orig(this.task.root.id)
this.task.root.parent == orig(this.task.root.parent)
this.task.root.P == return
this.task.root.P.getClass().getName() == return.getClass().getName()
this.task.root.exception == orig(this.task.root.exception)
this.task.parent == orig(this.task.parent)
this.task.priority == orig(this.task.root.priority)
this.task.priority == orig(this.task.priority)
this.task.stack == orig(this.task.root.stack)
this.task.stack == orig(this.task.stack)
this.task.P == return
this.task.P.getClass().getName() == return.getClass().getName()
this.task.unfinishedChildren == orig(this.task.root.unfinishedChildren)
this.task.unfinishedChildren == orig(this.task.unfinishedChildren)
this.task.exception == orig(this.task.exception)
this.task.future == orig(this)
this.task.future == orig(this.task.root.future)
this.task.future == orig(this.task.future)
this.task.future.result == return
this.task.future.result.getClass().getName() == return.getClass().getName()
this.task.future.exception == orig(this.task.future.exception)
this.task.canceled == orig(this.task.root.canceled)
this.task.canceled == orig(this.task.canceled)
this.result == return
this.result.getClass().getName() == return.getClass().getName()
this.exception == orig(this.exception)
this.cancelled == orig(this.task.future.cancelled)
this.cancelled == orig(this.cancelled)
===========================================================================
cl.niclabs.skandium.system.SkandiumFuture.set(java.lang.Object):::ENTER
this == this.task.future
this.executor == this.task.future.executor
this.executor == this.task.executor
this.task == this.task.root
this.task == this.task.future.task
this.task.P.getClass().getName() == arg0.getClass().getName()
this.result == null
===========================================================================
cl.niclabs.skandium.system.SkandiumFuture.set(java.lang.Object):::EXIT
this.executor == this.task.future.executor
this.executor == this.task.executor
this.executor == orig(this.executor)
this.executor == orig(this.task.root.executor)
this.executor == orig(this.task.future.executor)
this.executor == orig(this.task.executor)
this.task == this.task.root
this.task == this.task.future.task
this.task == orig(this.task)
this.task == orig(this.task.root)
this.task == orig(this.task.root.root)
this.task == orig(this.task.future.task)
cl.niclabs.skandium.system.Task.random == orig(cl.niclabs.skandium.system.Task.random)
this.task.id == orig(this.task.id)
this.task.id == orig(this.task.root.id)
this.task.root.parent == orig(this.task.root.parent)
this.task.root.P == this.result
this.task.root.children[] == orig(this.task.root.children[])
this.task.root.exception == orig(this.task.root.exception)
this.task.parent == orig(this.task.parent)
this.task.priority == orig(this.task.root.priority)
this.task.priority == orig(this.task.priority)
this.task.stack == orig(this.task.root.stack)
this.task.stack == orig(this.task.stack)
this.task.P == this.result
this.task.children == orig(this.task.root.children)
this.task.children == orig(this.task.children)
this.task.children[] == orig(this.task.children[])
this.task.unfinishedChildren == orig(this.task.root.unfinishedChildren)
this.task.unfinishedChildren == orig(this.task.unfinishedChildren)
this.task.exception == orig(this.task.exception)
this.task.future == orig(this)
this.task.future == orig(this.task.root.future)
this.task.future == orig(this.task.future)
this.task.future.exception == orig(this.task.future.exception)
this.task.canceled == orig(this.task.root.canceled)
this.task.canceled == orig(this.task.canceled)
this.result == orig(this.task.root.P)
this.result == orig(this.task.P)
this.result.getClass().getName() == orig(this.task.root.P.getClass().getName())
this.result.getClass().getName() == orig(this.task.P.getClass().getName())
this.result.getClass().getName() == orig(arg0.getClass().getName())
this.exception == orig(this.exception)
this.cancelled == orig(this.task.future.cancelled)
this.cancelled == orig(this.cancelled)
===========================================================================
cl.niclabs.skandium.system.Task:::CLASS
cl.niclabs.skandium.system.Task.random has only one value
cl.niclabs.skandium.system.Task.random != null
===========================================================================
cl.niclabs.skandium.system.Task:::OBJECT
this == this.future.task
this.id == this.future.task.id
this.root == this.root.root
this.root == this.future.task.root
this.root.id == this.root.root.id
this.root.id == this.future.task.id
this.root.root == this.root.root.root
this.root.root == this.root.future.task
this.root.root == this.future.task
this.root.root == this.future.task.root
this.root.root.priority == this.root.priority
this.root.root.stack == this.root.stack
this.root.root.P == this.root.P
this.root.root.P.getClass().getName() == this.root.P.getClass().getName()
this.root.root.unfinishedChildren == this.root.unfinishedChildren
this.root.root.future == this.root.future
this.root.root.executor == this.root.executor
this.root.root.canceled == this.root.canceled
this.root.priority == this.future.task.priority
this.root.stack == this.future.task.stack
this.root.P == this.future.task.P
this.root.P.getClass().getName() == this.parent.P.getClass().getName()
this.root.P.getClass().getName() == this.future.task.P.getClass().getName()
this.root.P.getClass().getName() == this.future.result.getClass().getName()
this.root.unfinishedChildren == this.future.task.unfinishedChildren
this.root.future == this.future.task.future
this.root.future.executor == this.root.executor
this.root.future.result.getClass().getName() == this.future.result.getClass().getName()
this.root.future.cancelled == this.future.cancelled
this.root.executor == this.future.executor
this.root.canceled == this.future.task.canceled
this.root.canceled == this.canceled
this.parent.root.P.getClass().getName() == this.parent.P.getClass().getName()
this.priority == this.future.task.priority
this.stack == this.future.task.stack
this.P == this.future.task.P
this.P.getClass().getName() == this.future.task.P.getClass().getName()
this.P.getClass().getName() == this.future.result.getClass().getName()
this.unfinishedChildren == this.future.task.unfinishedChildren
this.future == this.future.task.future
this.future.executor == this.future.task.executor
this.future.executor == this.executor
this.future.task.P.getClass().getName() == this.future.result.getClass().getName()
this.future.task.canceled == this.canceled
this.root.root != null
this.root.root.parent == null
this.root.root.children[] elements != null
this.root.root.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class
this.root.root.exception == null
this.root.parent == null
this.root.priority == 2147483647
this.root.stack != null
this.root.children[] elements != null
this.root.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class
this.root.unfinishedChildren >= 0
this.root.exception == null
this.root.future != null
this.root.future.exception == null
this.root.future.cancelled == false
this.root.executor has only one value
this.root.executor != null
this.root.canceled == false
this.parent.root != null
this.parent.root.root != null
this.parent.root.parent == null
this.parent.root.priority == 2147483647
this.parent.root.stack != null
this.parent.root.children != null
this.parent.root.children[] elements != null
this.parent.root.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class
this.parent.root.unfinishedChildren >= 0
this.parent.root.exception == null
this.parent.root.future != null
this.parent.root.executor has only one value
this.parent.root.executor != null
this.parent.root.canceled == false
this.parent.parent == null
this.parent.priority == 2147483647
this.parent.stack != null
this.parent.P.getClass().getName() == java.lang.Object[].class
this.parent.children != null
this.parent.children[] elements != null
this.parent.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class
this.parent.unfinishedChildren >= 0
this.parent.exception == null
this.parent.future != null
this.parent.future.executor has only one value
this.parent.future.executor != null
this.parent.future.task != null
this.parent.future.result == null
this.parent.future.exception == null
this.parent.future.cancelled == false
this.parent.executor has only one value
this.parent.executor != null
this.parent.canceled == false
this.priority one of { 2147483646, 2147483647 }
this.stack != null
this.children[] elements != null
this.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class
this.unfinishedChildren >= 0
this.exception == null
this.future.executor has only one value
this.future.executor != null
this.future.task != null
this.future.task.parent == null
this.future.task.priority == 2147483647
this.future.task.stack != null
this.future.task.children[] elements != null
this.future.task.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class
this.future.task.unfinishedChildren >= 0
this.future.task.exception == null
this.future.task.future != null
this.future.task.canceled == false
this.future.exception == null
this.future.cancelled == false
this.canceled == false
this.root.priority >= this.priority
this.root.unfinishedChildren >= this.unfinishedChildren
===========================================================================
cl.niclabs.skandium.system.Task.Task(cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, java.lang.Object, java.util.Stack, int, cl.niclabs.skandium.system.TaskExecutor):::ENTER
cl.niclabs.skandium.system.Task.random has only one value
cl.niclabs.skandium.system.Task.random != null
arg0.root != null
arg0.root.root != null
arg0.root.parent == null
arg0.root.priority == 2147483647
arg0.root.stack != null
arg0.root.P == null
arg0.root.children != null
arg0.root.children[] elements != null
arg0.root.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class
arg0.root.unfinishedChildren >= 0
arg0.root.exception == null
arg0.root.future != null
arg0.root.executor has only one value
arg0.root.executor != null
arg0.root.canceled == false
arg0.parent == null
arg0.priority == 2147483647
arg0.stack != null
arg0.P == null
arg0.children != null
arg0.children[] elements != null
arg0.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class
arg0.unfinishedChildren >= 0
arg0.exception == null
arg0.future != null
arg0.future.executor has only one value
arg0.future.executor != null
arg0.future.task != null
arg0.future.result == null
arg0.future.exception == null
arg0.future.cancelled == false
arg0.executor has only one value
arg0.executor != null
arg0.canceled == false
arg1.root != null
arg1.root.root != null
arg1.root.parent == null
arg1.root.priority == 2147483647
arg1.root.stack != null
arg1.root.P == null
arg1.root.children != null
arg1.root.children[] elements != null
arg1.root.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class
arg1.root.unfinishedChildren >= 0
arg1.root.exception == null
arg1.root.future != null
arg1.root.executor has only one value
arg1.root.executor != null
arg1.root.canceled == false
arg1.parent == null
arg1.priority == 2147483647
arg1.stack != null
arg1.P == null
arg1.children != null
arg1.children[] elements != null
arg1.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class
arg1.unfinishedChildren >= 0
arg1.exception == null
arg1.future != null
arg1.future.executor has only one value
arg1.future.executor != null
arg1.future.task != null
arg1.future.result == null
arg1.future.exception == null
arg1.future.cancelled == false
arg1.executor has only one value
arg1.executor != null
arg1.canceled == false
arg2 != null
arg3 != null
arg4 one of { 2147483646, 2147483647 }
arg5 has only one value
arg5 != null
===========================================================================
cl.niclabs.skandium.system.Task.Task(cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, java.lang.Object, java.util.Stack, int, cl.niclabs.skandium.system.TaskExecutor):::EXIT
cl.niclabs.skandium.system.Task.random == orig(cl.niclabs.skandium.system.Task.random)
this.root.executor == this.executor
this.priority == orig(arg4)
this.stack == orig(arg3)
this.P == orig(arg2)
this.P.getClass().getName() == orig(arg2.getClass().getName())
this.executor == orig(arg5)
arg0.id == orig(arg0.id)
arg0.root == orig(arg0.root)
arg0.root.id == orig(arg0.root.id)
arg0.root.root == orig(arg0.root.root)
arg0.root.parent == orig(arg0.root.parent)
arg0.root.priority == orig(arg0.root.priority)
arg0.root.stack == orig(arg0.root.stack)
arg0.root.P == orig(arg0.root.P)
arg0.root.children == orig(arg0.root.children)
arg0.root.children[] == orig(arg0.root.children[])
arg0.root.unfinishedChildren == orig(arg0.root.unfinishedChildren)
arg0.root.exception == orig(arg0.root.exception)
arg0.root.future == orig(arg0.root.future)
arg0.root.executor == orig(arg0.root.executor)
arg0.root.canceled == orig(arg0.root.canceled)
arg0.parent == orig(arg0.parent)
arg0.priority == orig(arg0.priority)
arg0.stack == orig(arg0.stack)
arg0.P == orig(arg0.P)
arg0.children == orig(arg0.children)
arg0.children[] == orig(arg0.children[])
arg0.unfinishedChildren == orig(arg0.unfinishedChildren)
arg0.exception == orig(arg0.exception)
arg0.future == orig(arg0.future)
arg0.future.executor == orig(arg0.future.executor)
arg0.future.task == orig(arg0.future.task)
arg0.future.result == orig(arg0.future.result)
arg0.future.exception == orig(arg0.future.exception)
arg0.future.cancelled == orig(arg0.future.cancelled)
arg0.executor == orig(arg0.executor)
arg0.canceled == orig(arg0.canceled)
arg1.id == orig(arg1.id)
arg1.root == orig(arg1.root)
arg1.root.id == orig(arg1.root.id)
arg1.root.root == orig(arg1.root.root)
arg1.root.parent == orig(arg1.root.parent)
arg1.root.priority == orig(arg1.root.priority)
arg1.root.stack == orig(arg1.root.stack)
arg1.root.P == orig(arg1.root.P)
arg1.root.children == orig(arg1.root.children)
arg1.root.children[] == orig(arg1.root.children[])
arg1.root.unfinishedChildren == orig(arg1.root.unfinishedChildren)
arg1.root.exception == orig(arg1.root.exception)
arg1.root.future == orig(arg1.root.future)
arg1.root.executor == orig(arg1.root.executor)
arg1.root.canceled == orig(arg1.root.canceled)
arg1.parent == orig(arg1.parent)
arg1.priority == orig(arg1.priority)
arg1.stack == orig(arg1.stack)
arg1.P == orig(arg1.P)
arg1.children == orig(arg1.children)
arg1.children[] == orig(arg1.children[])
arg1.unfinishedChildren == orig(arg1.unfinishedChildren)
arg1.exception == orig(arg1.exception)
arg1.future == orig(arg1.future)
arg1.future.executor == orig(arg1.future.executor)
arg1.future.task == orig(arg1.future.task)
arg1.future.result == orig(arg1.future.result)
arg1.future.exception == orig(arg1.future.exception)
arg1.future.cancelled == orig(arg1.future.cancelled)
arg1.executor == orig(arg1.executor)
arg1.canceled == orig(arg1.canceled)
this.root.root.children != null
this.root.P == null
this.root.children != null
this.root.future.result == null
this.parent.root.P == null
this.parent.P == null
this.P != null
this.children == null
this.unfinishedChildren == 0
this.future.task.root == null
this.future.task.children == null
this.future.task.unfinishedChildren == 0
this.future.result == null
this.executor has only one value
this.executor != null
arg0.root != null
arg0.root.root != null
arg0.root.parent == null
arg0.root.priority == 2147483647
arg0.root.stack != null
arg0.root.P == null
arg0.root.children != null
arg0.root.children[] elements != null
arg0.root.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class
arg0.root.unfinishedChildren >= 0
arg0.root.exception == null
arg0.root.future != null
arg0.root.executor has only one value
arg0.root.executor != null
arg0.root.canceled == false
arg0.parent == null
arg0.priority == 2147483647
arg0.stack != null
arg0.P == null
arg0.children != null
arg0.children[] elements != null
arg0.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class
arg0.unfinishedChildren >= 0
arg0.exception == null
arg0.future != null
arg0.future.executor has only one value
arg0.future.executor != null
arg0.future.task != null
arg0.future.result == null
arg0.future.exception == null
arg0.future.cancelled == false
arg0.executor has only one value
arg0.executor != null
arg0.canceled == false
arg1.root != null
arg1.root.root != null
arg1.root.parent == null
arg1.root.priority == 2147483647
arg1.root.stack != null
arg1.root.P == null
arg1.root.children != null
arg1.root.children[] elements != null
arg1.root.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class
arg1.root.unfinishedChildren >= 0
arg1.root.exception == null
arg1.root.future != null
arg1.root.executor has only one value
arg1.root.executor != null
arg1.root.canceled == false
arg1.parent == null
arg1.priority == 2147483647
arg1.stack != null
arg1.P == null
arg1.children != null
arg1.children[] elements != null
arg1.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class
arg1.unfinishedChildren >= 0
arg1.exception == null
arg1.future != null
arg1.future.executor has only one value
arg1.future.executor != null
arg1.future.task != null
arg1.future.result == null
arg1.future.exception == null
arg1.future.cancelled == false
arg1.executor has only one value
arg1.executor != null
arg1.canceled == false
this.id != this.root.id
this.future.task.P.getClass().getName() in this.root.root.children[].getClass().getName()
this.root.priority > this.priority
this.future.task.P.getClass().getName() in this.root.children[].getClass().getName()
this.future.task.P.getClass().getName() in this.parent.root.children[].getClass().getName()
this.future.task.P.getClass().getName() in this.parent.children[].getClass().getName()
this.future.task.P.getClass().getName() in arg0.root.children[].getClass().getName()
this.future.task.P.getClass().getName() in arg0.children[].getClass().getName()
this.future.task.P.getClass().getName() in arg1.root.children[].getClass().getName()
this.future.task.P.getClass().getName() in arg1.children[].getClass().getName()
===========================================================================
cl.niclabs.skandium.system.Task.Task(java.lang.Object, java.util.Stack, cl.niclabs.skandium.system.TaskExecutor):::ENTER
arg2 has only one value
===========================================================================
cl.niclabs.skandium.system.Task.Task(java.lang.Object, java.util.Stack, cl.niclabs.skandium.system.TaskExecutor):::EXIT
this.id == this.root.id
this.id == this.root.root.id
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root.root.priority == this.priority
this.root.root.stack == this.stack
this.root.root.P == this.P
this.root.root.P.getClass().getName() == this.P.getClass().getName()
this.root.root.unfinishedChildren == this.unfinishedChildren
this.root.root.future == this.future
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.priority == this.priority
this.root.stack == this.stack
this.root.P == this.P
this.root.P.getClass().getName() == this.P.getClass().getName()
this.root.unfinishedChildren == this.unfinishedChildren
this.root.future == this.future
this.root.future.executor == this.executor
this.root.executor == this.executor
this.stack == orig(arg1)
this.P == orig(arg0)
this.P.getClass().getName() == orig(arg0.getClass().getName())
this.future.task.executor == this.executor
this.executor == orig(arg2)
this.root.root.children == null
this.root.children == null
this.root.future.result == null
this.parent == null
this.priority == 2147483647
this.children == null
this.unfinishedChildren == 0
this.future.task.children == null
this.future.result == null
this.executor has only one value
===========================================================================
cl.niclabs.skandium.system.Task.addChild(java.lang.Object, java.util.Stack):::ENTER
this == this.root
this.id == this.root.id
this.id == this.root.root.id
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root.root.priority == this.priority
this.root.root.stack == this.stack
this.root.root.P == this.P
this.root.root.unfinishedChildren == this.unfinishedChildren
this.root.root.future == this.future
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.priority == this.priority
this.root.stack == this.stack
this.root.P == this.P
this.root.unfinishedChildren == this.unfinishedChildren
this.root.future == this.future
this.root.future.executor == this.executor
this.root.executor == this.executor
this.future.task.executor == this.executor
this.root != null
this.root.future.result == null
this.parent == null
this.priority == 2147483647
this.P == null
this.future != null
this.future.result == null
this.executor has only one value
this.executor != null
arg0 != null
arg1 != null
size(this.root.root.children[]) >= 1
size(this.root.children[]) >= 1
size(this.children[]) >= 1
size(this.future.task.children[]) >= 1
===========================================================================
cl.niclabs.skandium.system.Task.addChild(java.lang.Object, java.util.Stack):::EXIT
cl.niclabs.skandium.system.Task.random == orig(cl.niclabs.skandium.system.Task.random)
this.id == this.root.id
this.id == this.root.root.id
this.id == orig(this.id)
this.id == orig(this.root.id)
this.id == orig(this.root.root.id)
this.id == orig(this.future.task.id)
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root == orig(this)
this.root == orig(this.root)
this.root == orig(this.root.root)
this.root == orig(this.root.root.root)
this.root == orig(this.root.future.task)
this.root == orig(this.future.task)
this.root == orig(this.future.task.root)
this.root.root.parent == orig(this.root.root.parent)
this.root.root.priority == this.priority
this.root.root.stack == this.stack
this.root.root.P == this.P
this.root.root.unfinishedChildren == this.unfinishedChildren
this.root.root.exception == orig(this.root.root.exception)
this.root.root.future == this.future
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.parent == orig(this.root.parent)
this.root.priority == this.priority
this.root.stack == this.stack
this.root.P == this.P
this.root.unfinishedChildren == this.unfinishedChildren
this.root.exception == orig(this.root.exception)
this.root.future == this.future
this.root.future.executor == this.executor
this.root.future.result == orig(this.root.future.result)
this.root.future.exception == orig(this.root.future.exception)
this.root.executor == this.executor
this.parent == orig(this.parent)
this.priority == orig(this.root.root.priority)
this.priority == orig(this.root.priority)
this.priority == orig(this.priority)
this.priority == orig(this.future.task.priority)
this.stack == orig(this.root.root.stack)
this.stack == orig(this.root.stack)
this.stack == orig(this.stack)
this.stack == orig(this.future.task.stack)
this.P == orig(this.root.root.P)
this.P == orig(this.root.P)
this.P == orig(this.P)
this.P == orig(this.future.task.P)
this.exception == orig(this.exception)
this.future == orig(this.root.root.future)
this.future == orig(this.root.future)
this.future == orig(this.future)
this.future == orig(this.future.task.future)
this.future.task.parent == orig(this.future.task.parent)
this.future.task.exception == orig(this.future.task.exception)
this.future.task.executor == this.executor
this.future.result == orig(this.future.result)
this.future.exception == orig(this.future.exception)
this.future.cancelled == orig(this.root.future.cancelled)
this.future.cancelled == orig(this.future.cancelled)
this.executor == orig(this.root.root.executor)
this.executor == orig(this.root.future.executor)
this.executor == orig(this.root.executor)
this.executor == orig(this.future.executor)
this.executor == orig(this.future.task.executor)
this.executor == orig(this.executor)
this.canceled == orig(this.root.root.canceled)
this.canceled == orig(this.root.canceled)
this.canceled == orig(this.future.task.canceled)
this.canceled == orig(this.canceled)
return.P.getClass().getName() == orig(arg0.getClass().getName())
size(this.root.root.children[])-1 == orig(size(this.root.root.children[]))
size(this.root.children[])-1 == orig(size(this.root.children[]))
size(this.children[])-1 == orig(size(this.children[]))
size(this.future.task.children[])-1 == orig(size(this.future.task.children[]))
this.root != null
this.root.root.children != null
this.root.children != null
this.root.future.result == null
this.parent == null
this.priority == 2147483647
this.P == null
this.children != null
this.unfinishedChildren >= 1
this.future != null
this.future.task.children != null
this.future.result == null
this.executor has only one value
this.executor != null
return != null
return.root != null
return.root.root != null
return.root.parent == null
return.root.priority == 2147483647
return.root.stack != null
return.root.P == null
return.root.children != null
return.root.children[] elements != null
return.root.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class
return.root.unfinishedChildren >= 1
return.root.exception == null
return.root.future != null
return.root.executor has only one value
return.root.executor != null
return.root.canceled == false
return.parent != null
return.parent.root != null
return.parent.parent == null
return.parent.priority == 2147483647
return.parent.stack != null
return.parent.P == null
return.parent.children != null
return.parent.children[] elements != null
return.parent.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class
return.parent.unfinishedChildren >= 1
return.parent.exception == null
return.parent.future != null
return.parent.executor has only one value
return.parent.executor != null
return.parent.canceled == false
return.priority == 2147483646
return.stack != null
return.P != null
return.children == null
return.unfinishedChildren == 0
return.exception == null
return.future == null
return.executor has only one value
return.executor != null
return.canceled == false
size(this.root.root.children[]) >= 1
size(this.root.children[]) >= 1
size(this.children[]) >= 1
size(this.future.task.children[]) >= 1
size(return.root.children[]) >= 1
size(return.parent.children[]) >= 1
this.unfinishedChildren - orig(this.unfinishedChildren) - 1 == 0
size(this.root.root.children[]) - orig(size(this.root.root.children[])) - 1 == 0
size(this.root.children[]) - orig(size(this.root.children[])) - 1 == 0
size(this.children[]) - orig(size(this.children[])) - 1 == 0
size(this.future.task.children[]) - orig(size(this.future.task.children[])) - 1 == 0
===========================================================================
cl.niclabs.skandium.system.Task.childrenAreFinished():::ENTER
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.P.getClass().getName() == this.P.getClass().getName()
this.root.future.executor == this.executor
this.root.executor == this.executor
this.future.task == this.future.task.root
this.root != null
this.root.root.children != null
this.root.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.children != null
this.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.future.result == null
this.parent.root.P == null
this.parent.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.root.unfinishedChildren >= 1
this.parent.P == null
this.parent.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.unfinishedChildren >= 1
this.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.future.task.children != null
this.future.task.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.future.result == null
this.executor has only one value
this.executor != null
size(this.root.root.children[]) one of { 0, 8 }
size(this.root.root.children[])-1 != 0
size(this.root.children[]) one of { 0, 8 }
size(this.root.children[])-1 != 0
size(this.parent.root.children[]) == 8
size(this.parent.children[]) == 8
size(this.children[]) one of { 0, 8 }
size(this.future.task.children[]) one of { 0, 8 }
this.root.P.getClass().getName() in this.parent.root.children[].getClass().getName()
this.root.P.getClass().getName() in this.parent.children[].getClass().getName()
===========================================================================
cl.niclabs.skandium.system.Task.childrenAreFinished():::EXIT
cl.niclabs.skandium.system.Task.random == orig(cl.niclabs.skandium.system.Task.random)
this.id == orig(this.id)
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root == orig(this.root)
this.root == orig(this.root.root)
this.root == orig(this.root.root.root)
this.root == orig(this.root.future.task)
this.root.id == orig(this.root.id)
this.root.id == orig(this.root.root.id)
this.root.root.parent == orig(this.root.root.parent)
this.root.root.children == orig(this.root.root.children)
this.root.root.children[] == orig(this.root.root.children[])
this.root.root.exception == orig(this.root.root.exception)
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.parent == orig(this.root.parent)
this.root.priority == orig(this.root.root.priority)
this.root.priority == orig(this.root.priority)
this.root.stack == orig(this.root.root.stack)
this.root.stack == orig(this.root.stack)
this.root.P == orig(this.root.root.P)
this.root.P == orig(this.root.P)
this.root.P.getClass().getName() == this.P.getClass().getName()
this.root.P.getClass().getName() == orig(this.root.root.P.getClass().getName())
this.root.P.getClass().getName() == orig(this.root.P.getClass().getName())
this.root.P.getClass().getName() == orig(this.future.task.P.getClass().getName())
this.root.children == orig(this.root.children)
this.root.children[] == orig(this.root.children[])
this.root.unfinishedChildren == orig(this.root.root.unfinishedChildren)
this.root.unfinishedChildren == orig(this.root.unfinishedChildren)
this.root.exception == orig(this.root.exception)
this.root.future == orig(this.root.root.future)
this.root.future == orig(this.root.future)
this.root.future.executor == this.executor
this.root.future.result == orig(this.root.future.result)
this.root.future.exception == orig(this.root.future.exception)
this.root.future.cancelled == orig(this.root.future.cancelled)
this.root.executor == this.executor
this.parent == orig(this.parent)
this.parent.id == orig(this.parent.id)
this.parent.root == orig(this.parent.root)
this.parent.root.id == orig(this.parent.root.id)
this.parent.root.root == orig(this.parent.root.root)
this.parent.root.parent == orig(this.parent.root.parent)
this.parent.root.priority == orig(this.parent.root.priority)
this.parent.root.stack == orig(this.parent.root.stack)
this.parent.root.P == orig(this.parent.root.P)
this.parent.root.children == orig(this.parent.root.children)
this.parent.root.children[] == orig(this.parent.root.children[])
this.parent.root.unfinishedChildren == orig(this.parent.root.unfinishedChildren)
this.parent.root.exception == orig(this.parent.root.exception)
this.parent.root.future == orig(this.parent.root.future)
this.parent.root.executor == orig(this.parent.root.executor)
this.parent.root.canceled == orig(this.parent.root.canceled)
this.parent.parent == orig(this.parent.parent)
this.parent.priority == orig(this.parent.priority)
this.parent.stack == orig(this.parent.stack)
this.parent.P == orig(this.parent.P)
this.parent.children == orig(this.parent.children)
this.parent.children[] == orig(this.parent.children[])
this.parent.unfinishedChildren == orig(this.parent.unfinishedChildren)
this.parent.exception == orig(this.parent.exception)
this.parent.future == orig(this.parent.future)
this.parent.future.executor == orig(this.parent.future.executor)
this.parent.future.task == orig(this.parent.future.task)
this.parent.future.result == orig(this.parent.future.result)
this.parent.future.exception == orig(this.parent.future.exception)
this.parent.future.cancelled == orig(this.parent.future.cancelled)
this.parent.executor == orig(this.parent.executor)
this.parent.canceled == orig(this.parent.canceled)
this.priority == orig(this.priority)
this.stack == orig(this.stack)
this.P == orig(this.P)
this.P.getClass().getName() == orig(this.P.getClass().getName())
this.children == orig(this.children)
this.children[] == orig(this.children[])
this.unfinishedChildren == orig(this.unfinishedChildren)
this.exception == orig(this.exception)
this.future == orig(this.future)
this.future.executor == orig(this.future.executor)
this.future.executor == orig(this.future.task.executor)
this.future.task == this.future.task.root
this.future.task == orig(this)
this.future.task == orig(this.future.task)
this.future.task == orig(this.future.task.root)
this.future.task.id == orig(this.future.task.id)
this.future.task.parent == orig(this.future.task.parent)
this.future.task.priority == orig(this.future.task.priority)
this.future.task.stack == orig(this.future.task.stack)
this.future.task.P == orig(this.future.task.P)
this.future.task.children == orig(this.future.task.children)
this.future.task.children[] == orig(this.future.task.children[])
this.future.task.unfinishedChildren == orig(this.future.task.unfinishedChildren)
this.future.task.exception == orig(this.future.task.exception)
this.future.task.future == orig(this.future.task.future)
this.future.task.canceled == orig(this.future.task.canceled)
this.future.result == orig(this.future.result)
this.future.exception == orig(this.future.exception)
this.future.cancelled == orig(this.future.cancelled)
this.executor == orig(this.root.root.executor)
this.executor == orig(this.root.future.executor)
this.executor == orig(this.root.executor)
this.executor == orig(this.executor)
this.canceled == orig(this.root.root.canceled)
this.canceled == orig(this.root.canceled)
this.canceled == orig(this.canceled)
(this.unfinishedChildren == 0)  <==>  (return == true)
(this.unfinishedChildren == 0)  <==>  (this.future.task.unfinishedChildren == 0)
(this.unfinishedChildren == 0)  ==>  (size(this.children[]) one of { 0, 8 })
(this.unfinishedChildren == 0)  ==>  (size(this.future.task.children[]) one of { 0, 8 })
(this.unfinishedChildren == 0)  ==>  (size(this.root.children[]) one of { 0, 8 })
(this.unfinishedChildren == 0)  ==>  (size(this.root.root.children[]) one of { 0, 8 })
(this.unfinishedChildren == 0)  ==>  (this.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] })
(this.unfinishedChildren == 0)  ==>  (this.future.task.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] })
(this.unfinishedChildren == 0)  ==>  (this.future.task.unfinishedChildren == this.root.unfinishedChildren**2)
(this.unfinishedChildren == 0)  ==>  (this.parent.P == null)
(this.unfinishedChildren == 0)  ==>  (this.parent.children != null)
(this.unfinishedChildren == 0)  ==>  (this.parent.children[] elements != null)
(this.unfinishedChildren == 0)  ==>  (this.parent.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task])
(this.unfinishedChildren == 0)  ==>  (this.parent.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class)
(this.unfinishedChildren == 0)  ==>  (this.parent.exception == null)
(this.unfinishedChildren == 0)  ==>  (this.parent.executor != null)
(this.unfinishedChildren == 0)  ==>  (this.parent.executor has only one value)
(this.unfinishedChildren == 0)  ==>  (this.parent.future != null)
(this.unfinishedChildren == 0)  ==>  (this.parent.future.exception == null)
(this.unfinishedChildren == 0)  ==>  (this.parent.future.executor != null)
(this.unfinishedChildren == 0)  ==>  (this.parent.future.executor has only one value)
(this.unfinishedChildren == 0)  ==>  (this.parent.future.result == null)
(this.unfinishedChildren == 0)  ==>  (this.parent.future.task != null)
(this.unfinishedChildren == 0)  ==>  (this.parent.parent == null)
(this.unfinishedChildren == 0)  ==>  (this.parent.root != null)
(this.unfinishedChildren == 0)  ==>  (this.parent.root.P == null)
(this.unfinishedChildren == 0)  ==>  (this.parent.root.children != null)
(this.unfinishedChildren == 0)  ==>  (this.parent.root.children[] elements != null)
(this.unfinishedChildren == 0)  ==>  (this.parent.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task])
(this.unfinishedChildren == 0)  ==>  (this.parent.root.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class)
(this.unfinishedChildren == 0)  ==>  (this.parent.root.exception == null)
(this.unfinishedChildren == 0)  ==>  (this.parent.root.executor != null)
(this.unfinishedChildren == 0)  ==>  (this.parent.root.executor has only one value)
(this.unfinishedChildren == 0)  ==>  (this.parent.root.future != null)
(this.unfinishedChildren == 0)  ==>  (this.parent.root.parent == null)
(this.unfinishedChildren == 0)  ==>  (this.parent.root.root != null)
(this.unfinishedChildren == 0)  ==>  (this.parent.root.stack != null)
(this.unfinishedChildren == 0)  ==>  (this.parent.root.unfinishedChildren >= 1)
(this.unfinishedChildren == 0)  ==>  (this.parent.stack != null)
(this.unfinishedChildren == 0)  ==>  (this.parent.unfinishedChildren >= 1)
(this.unfinishedChildren == 0)  ==>  (this.priority one of { 2147483646, 2147483647 })
(this.unfinishedChildren == 0)  ==>  (this.root.P.getClass().getName() == this.P.getClass().getName())
(this.unfinishedChildren == 0)  ==>  (this.root.P.getClass().getName() in this.parent.children[].getClass().getName())
(this.unfinishedChildren == 0)  ==>  (this.root.P.getClass().getName() in this.parent.root.children[].getClass().getName())
(this.unfinishedChildren == 0)  ==>  (this.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] })
(this.unfinishedChildren == 0)  ==>  (this.root.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] })
(this.unfinishedChildren == 0)  ==>  (this.root.unfinishedChildren == this.future.task.unfinishedChildren**2)
this.root != null
this.root.root.children != null
this.root.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.children != null
this.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.future.result == null
this.parent.root.P == null
this.parent.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.root.unfinishedChildren >= 1
this.parent.P == null
this.parent.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.unfinishedChildren >= 1
this.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.future.task.children != null
this.future.task.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.future.result == null
this.executor has only one value
this.executor != null
size(this.root.root.children[]) one of { 0, 8 }
size(this.root.root.children[])-1 != 0
size(this.root.children[]) one of { 0, 8 }
size(this.root.children[])-1 != 0
size(this.parent.root.children[]) == 8
size(this.parent.children[]) == 8
size(this.children[]) one of { 0, 8 }
size(this.future.task.children[]) one of { 0, 8 }
this.root.P.getClass().getName() in this.parent.root.children[].getClass().getName()
this.root.P.getClass().getName() in this.parent.children[].getClass().getName()
===========================================================================
cl.niclabs.skandium.system.Task.childrenAreFinished():::EXIT;condition="return == true"
this.unfinishedChildren == 0
this.future.task.unfinishedChildren == 0
return == true
this.future.task.unfinishedChildren == this.root.unfinishedChildren**2
this.root.unfinishedChildren == this.future.task.unfinishedChildren**2
===========================================================================
cl.niclabs.skandium.system.Task.childrenAreFinished():::EXIT;condition="not(return == true)"
this.id == this.root.id
this.id == this.root.root.id
this.id == orig(this.root.id)
this.id == orig(this.root.root.id)
this.id == orig(this.future.task.id)
this.root == this.future.task.root
this.root == orig(this)
this.root == orig(this.future.task)
this.root == orig(this.future.task.root)
this.root.root.priority == this.priority
this.root.root.stack == this.stack
this.root.root.P == this.P
this.root.root.unfinishedChildren == this.unfinishedChildren
this.root.root.future == this.future
this.root.priority == this.priority
this.root.stack == this.stack
this.root.P == this.P
this.root.unfinishedChildren == this.unfinishedChildren
this.root.future == this.future
this.priority == orig(this.root.root.priority)
this.priority == orig(this.root.priority)
this.priority == orig(this.future.task.priority)
this.stack == orig(this.root.root.stack)
this.stack == orig(this.root.stack)
this.stack == orig(this.future.task.stack)
this.P == orig(this.root.root.P)
this.P == orig(this.root.P)
this.P == orig(this.future.task.P)
this.unfinishedChildren == orig(this.root.root.unfinishedChildren)
this.unfinishedChildren == orig(this.root.unfinishedChildren)
this.unfinishedChildren == orig(this.future.task.unfinishedChildren)
this.future == orig(this.root.root.future)
this.future == orig(this.root.future)
this.future == orig(this.future.task.future)
this.future.task.executor == this.executor
this.future.cancelled == orig(this.root.future.cancelled)
this.executor == orig(this.future.executor)
this.executor == orig(this.future.task.executor)
this.canceled == orig(this.future.task.canceled)
this.root.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent == null
this.priority == 2147483647
this.P == null
this.children != null
this.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.unfinishedChildren >= 1
this.future != null
this.future.task.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
return == false
size(this.root.root.children[]) == 8
size(this.root.children[]) == 8
size(this.children[]) == 8
size(this.future.task.children[]) == 8
===========================================================================
cl.niclabs.skandium.system.Task.getFuture():::ENTER
this == this.root
this.id == this.root.id
this.id == this.root.root.id
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root.root.priority == this.priority
this.root.root.stack == this.stack
this.root.root.P == this.P
this.root.root.P.getClass().getName() == this.P.getClass().getName()
this.root.root.unfinishedChildren == this.unfinishedChildren
this.root.root.future == this.future
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.priority == this.priority
this.root.stack == this.stack
this.root.P == this.P
this.root.P.getClass().getName() == this.P.getClass().getName()
this.root.unfinishedChildren == this.unfinishedChildren
this.root.future == this.future
this.root.future.executor == this.executor
this.root.executor == this.executor
this.future.task.executor == this.executor
this.root.root.children == null
this.root.children == null
this.root.future.result == null
this.parent == null
this.priority == 2147483647
this.children == null
this.unfinishedChildren == 0
this.future.task.children == null
this.future.result == null
this.executor has only one value
===========================================================================
cl.niclabs.skandium.system.Task.getFuture():::EXIT
cl.niclabs.skandium.system.Task.random == orig(cl.niclabs.skandium.system.Task.random)
this.id == this.root.id
this.id == this.root.root.id
this.id == return.task.id
this.id == orig(this.id)
this.id == orig(this.root.id)
this.id == orig(this.root.root.id)
this.id == orig(this.future.task.id)
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root == return.task
this.root == return.task.root
this.root == orig(this)
this.root == orig(this.root)
this.root == orig(this.root.root)
this.root == orig(this.root.root.root)
this.root == orig(this.root.future.task)
this.root == orig(this.future.task)
this.root == orig(this.future.task.root)
this.root.root.parent == orig(this.root.root.parent)
this.root.root.priority == this.priority
this.root.root.stack == this.stack
this.root.root.P == this.P
this.root.root.P.getClass().getName() == this.P.getClass().getName()
this.root.root.children == orig(this.root.root.children)
this.root.root.unfinishedChildren == this.unfinishedChildren
this.root.root.exception == orig(this.root.root.exception)
this.root.root.future == return
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.parent == orig(this.root.parent)
this.root.priority == this.priority
this.root.stack == this.stack
this.root.P == this.P
this.root.P.getClass().getName() == this.P.getClass().getName()
this.root.children == orig(this.root.children)
this.root.unfinishedChildren == this.unfinishedChildren
this.root.exception == orig(this.root.exception)
this.root.future == return
this.root.future.executor == this.executor
this.root.future.result == orig(this.root.future.result)
this.root.future.exception == orig(this.root.future.exception)
this.root.future.cancelled == return.cancelled
this.root.executor == this.executor
this.parent == orig(this.parent)
this.priority == return.task.priority
this.priority == orig(this.root.root.priority)
this.priority == orig(this.root.priority)
this.priority == orig(this.priority)
this.priority == orig(this.future.task.priority)
this.stack == return.task.stack
this.stack == orig(this.root.root.stack)
this.stack == orig(this.root.stack)
this.stack == orig(this.stack)
this.stack == orig(this.future.task.stack)
this.P == return.task.P
this.P == orig(this.root.root.P)
this.P == orig(this.root.P)
this.P == orig(this.P)
this.P == orig(this.future.task.P)
this.P.getClass().getName() == return.task.P.getClass().getName()
this.P.getClass().getName() == orig(this.root.root.P.getClass().getName())
this.P.getClass().getName() == orig(this.root.P.getClass().getName())
this.P.getClass().getName() == orig(this.P.getClass().getName())
this.P.getClass().getName() == orig(this.future.task.P.getClass().getName())
this.children == orig(this.children)
this.unfinishedChildren == return.task.unfinishedChildren
this.unfinishedChildren == orig(this.root.root.unfinishedChildren)
this.unfinishedChildren == orig(this.root.unfinishedChildren)
this.unfinishedChildren == orig(this.unfinishedChildren)
this.unfinishedChildren == orig(this.future.task.unfinishedChildren)
this.exception == orig(this.exception)
this.future == return
this.future.task.parent == orig(this.future.task.parent)
this.future.task.children == orig(this.future.task.children)
this.future.task.exception == orig(this.future.task.exception)
this.future.task.future == return
this.future.task.executor == this.executor
this.future.result == orig(this.future.result)
this.future.exception == orig(this.future.exception)
this.future.cancelled == return.cancelled
this.executor == return.executor
this.executor == return.task.executor
this.executor == orig(this.root.root.executor)
this.executor == orig(this.root.future.executor)
this.executor == orig(this.root.executor)
this.executor == orig(this.future.executor)
this.executor == orig(this.future.task.executor)
this.executor == orig(this.executor)
this.canceled == return.task.canceled
this.canceled == orig(this.root.root.canceled)
this.canceled == orig(this.root.canceled)
this.canceled == orig(this.future.task.canceled)
this.canceled == orig(this.canceled)
return == return.task.future
return == orig(this.root.root.future)
return == orig(this.root.future)
return == orig(this.future)
return == orig(this.future.task.future)
return.cancelled == orig(this.root.future.cancelled)
return.cancelled == orig(this.future.cancelled)
this.root.root.children == null
this.root.children == null
this.root.future.result == null
this.parent == null
this.priority == 2147483647
this.children == null
this.unfinishedChildren == 0
this.future.task.children == null
this.future.result == null
this.executor has only one value
return.task.parent == null
return.task.children == null
return.task.exception == null
return.result == null
return.exception == null
return.cancelled == false
===========================================================================
cl.niclabs.skandium.system.Task.getP():::ENTER
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.P.getClass().getName() == this.P.getClass().getName()
this.root.future.executor == this.executor
this.root.executor == this.executor
this.future.task == this.future.task.root
this.root != null
this.root.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.unfinishedChildren one of { 0, 8 }
this.root.future.result == null
this.parent.root.P == null
this.parent.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.root.unfinishedChildren one of { 0, 8 }
this.parent.P == null
this.parent.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.unfinishedChildren one of { 0, 8 }
this.P != null
this.children[] == []
this.children[].getClass().getName() == []
this.unfinishedChildren == 0
this.future.task.children[] == []
this.future.task.children[].getClass().getName() == []
this.future.task.unfinishedChildren == 0
this.future.result == null
this.executor has only one value
this.executor != null
size(this.root.root.children[]) one of { 0, 8 }
size(this.root.root.children[])-1 != 0
size(this.root.children[]) one of { 0, 8 }
size(this.root.children[])-1 != 0
size(this.parent.root.children[]) == 8
size(this.parent.children[]) == 8
this.root.P.getClass().getName() in this.parent.root.children[].getClass().getName()
this.root.P.getClass().getName() in this.parent.children[].getClass().getName()
===========================================================================
cl.niclabs.skandium.system.Task.getP():::EXIT
cl.niclabs.skandium.system.Task.random == orig(cl.niclabs.skandium.system.Task.random)
this.id == orig(this.id)
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root == orig(this.root)
this.root == orig(this.root.root)
this.root == orig(this.root.root.root)
this.root == orig(this.root.future.task)
this.root.id == orig(this.root.id)
this.root.id == orig(this.root.root.id)
this.root.root.parent == orig(this.root.root.parent)
this.root.root.children == orig(this.root.root.children)
this.root.root.children[] == orig(this.root.root.children[])
this.root.root.exception == orig(this.root.root.exception)
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.parent == orig(this.root.parent)
this.root.priority == orig(this.root.root.priority)
this.root.priority == orig(this.root.priority)
this.root.stack == orig(this.root.root.stack)
this.root.stack == orig(this.root.stack)
this.root.P == orig(this.root.root.P)
this.root.P == orig(this.root.P)
this.root.P.getClass().getName() == return.getClass().getName()
this.root.P.getClass().getName() == orig(this.root.root.P.getClass().getName())
this.root.P.getClass().getName() == orig(this.root.P.getClass().getName())
this.root.P.getClass().getName() == orig(this.future.task.P.getClass().getName())
this.root.children == orig(this.root.children)
this.root.children[] == orig(this.root.children[])
this.root.unfinishedChildren == orig(this.root.root.unfinishedChildren)
this.root.unfinishedChildren == orig(this.root.unfinishedChildren)
this.root.exception == orig(this.root.exception)
this.root.future == orig(this.root.root.future)
this.root.future == orig(this.root.future)
this.root.future.executor == this.executor
this.root.future.result == orig(this.root.future.result)
this.root.future.exception == orig(this.root.future.exception)
this.root.future.cancelled == orig(this.root.future.cancelled)
this.root.executor == this.executor
this.parent == orig(this.parent)
this.parent.id == orig(this.parent.id)
this.parent.root == orig(this.parent.root)
this.parent.root.id == orig(this.parent.root.id)
this.parent.root.root == orig(this.parent.root.root)
this.parent.root.parent == orig(this.parent.root.parent)
this.parent.root.priority == orig(this.parent.root.priority)
this.parent.root.stack == orig(this.parent.root.stack)
this.parent.root.P == orig(this.parent.root.P)
this.parent.root.children == orig(this.parent.root.children)
this.parent.root.children[] == orig(this.parent.root.children[])
this.parent.root.unfinishedChildren == orig(this.parent.root.unfinishedChildren)
this.parent.root.exception == orig(this.parent.root.exception)
this.parent.root.future == orig(this.parent.root.future)
this.parent.root.executor == orig(this.parent.root.executor)
this.parent.root.canceled == orig(this.parent.root.canceled)
this.parent.parent == orig(this.parent.parent)
this.parent.priority == orig(this.parent.priority)
this.parent.stack == orig(this.parent.stack)
this.parent.P == orig(this.parent.P)
this.parent.children == orig(this.parent.children)
this.parent.children[] == orig(this.parent.children[])
this.parent.unfinishedChildren == orig(this.parent.unfinishedChildren)
this.parent.exception == orig(this.parent.exception)
this.parent.future == orig(this.parent.future)
this.parent.future.executor == orig(this.parent.future.executor)
this.parent.future.task == orig(this.parent.future.task)
this.parent.future.result == orig(this.parent.future.result)
this.parent.future.exception == orig(this.parent.future.exception)
this.parent.future.cancelled == orig(this.parent.future.cancelled)
this.parent.executor == orig(this.parent.executor)
this.parent.canceled == orig(this.parent.canceled)
this.priority == orig(this.priority)
this.stack == orig(this.stack)
this.P == orig(this.P)
this.P.getClass().getName() == return.getClass().getName()
this.children == orig(this.children)
this.children[] == orig(this.children[])
this.unfinishedChildren == orig(this.unfinishedChildren)
this.exception == orig(this.exception)
this.future == orig(this.future)
this.future.executor == orig(this.future.executor)
this.future.executor == orig(this.future.task.executor)
this.future.task == this.future.task.root
this.future.task == orig(this)
this.future.task == orig(this.future.task)
this.future.task == orig(this.future.task.root)
this.future.task.id == orig(this.future.task.id)
this.future.task.parent == orig(this.future.task.parent)
this.future.task.priority == orig(this.future.task.priority)
this.future.task.stack == orig(this.future.task.stack)
this.future.task.P == orig(this.future.task.P)
this.future.task.children == orig(this.future.task.children)
this.future.task.children[] == orig(this.future.task.children[])
this.future.task.unfinishedChildren == orig(this.future.task.unfinishedChildren)
this.future.task.exception == orig(this.future.task.exception)
this.future.task.future == orig(this.future.task.future)
this.future.task.canceled == orig(this.future.task.canceled)
this.future.result == orig(this.future.result)
this.future.exception == orig(this.future.exception)
this.future.cancelled == orig(this.future.cancelled)
this.executor == orig(this.root.root.executor)
this.executor == orig(this.root.future.executor)
this.executor == orig(this.root.executor)
this.executor == orig(this.executor)
this.canceled == orig(this.root.root.canceled)
this.canceled == orig(this.root.canceled)
this.canceled == orig(this.canceled)
return.getClass().getName() == orig(this.P.getClass().getName())
this.root != null
this.root.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.unfinishedChildren one of { 0, 8 }
this.root.future.result == null
this.parent.root.P == null
this.parent.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.root.unfinishedChildren one of { 0, 8 }
this.parent.P == null
this.parent.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.unfinishedChildren one of { 0, 8 }
this.P != null
this.children[] == []
this.children[].getClass().getName() == []
this.unfinishedChildren == 0
this.future.task.children[] == []
this.future.task.children[].getClass().getName() == []
this.future.task.unfinishedChildren == 0
this.future.result == null
this.executor has only one value
this.executor != null
return != null
size(this.root.root.children[]) one of { 0, 8 }
size(this.root.root.children[])-1 != 0
size(this.root.children[]) one of { 0, 8 }
size(this.root.children[])-1 != 0
size(this.parent.root.children[]) == 8
size(this.parent.children[]) == 8
this.root.P.getClass().getName() in this.parent.root.children[].getClass().getName()
this.root.P.getClass().getName() in this.parent.children[].getClass().getName()
===========================================================================
cl.niclabs.skandium.system.Task.getStack():::ENTER
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.P.getClass().getName() == this.P.getClass().getName()
this.root.future.executor == this.executor
this.root.executor == this.executor
this.future.task == this.future.task.root
this.root != null
this.root.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.unfinishedChildren one of { 0, 8 }
this.root.future.result == null
this.parent.root.P == null
this.parent.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.root.unfinishedChildren == 8
this.parent.P == null
this.parent.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.unfinishedChildren == 8
this.P != null
this.children[] == []
this.children[].getClass().getName() == []
this.unfinishedChildren == 0
this.future.task.children[] == []
this.future.task.children[].getClass().getName() == []
this.future.task.unfinishedChildren == 0
this.future.result == null
this.executor has only one value
this.executor != null
size(this.root.root.children[]) one of { 0, 8 }
size(this.root.children[]) one of { 0, 8 }
size(this.parent.root.children[]) == 8
size(this.parent.children[]) == 8
this.root.P.getClass().getName() in this.parent.root.children[].getClass().getName()
this.root.P.getClass().getName() in this.parent.children[].getClass().getName()
===========================================================================
cl.niclabs.skandium.system.Task.getStack():::EXIT
cl.niclabs.skandium.system.Task.random == orig(cl.niclabs.skandium.system.Task.random)
this.id == orig(this.id)
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root == orig(this.root)
this.root == orig(this.root.root)
this.root == orig(this.root.root.root)
this.root == orig(this.root.future.task)
this.root.id == orig(this.root.id)
this.root.id == orig(this.root.root.id)
this.root.root.parent == orig(this.root.root.parent)
this.root.root.children == orig(this.root.root.children)
this.root.root.children[] == orig(this.root.root.children[])
this.root.root.exception == orig(this.root.root.exception)
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.parent == orig(this.root.parent)
this.root.priority == orig(this.root.root.priority)
this.root.priority == orig(this.root.priority)
this.root.stack == orig(this.root.root.stack)
this.root.stack == orig(this.root.stack)
this.root.P == orig(this.root.root.P)
this.root.P == orig(this.root.P)
this.root.P.getClass().getName() == this.P.getClass().getName()
this.root.P.getClass().getName() == orig(this.root.root.P.getClass().getName())
this.root.P.getClass().getName() == orig(this.root.P.getClass().getName())
this.root.P.getClass().getName() == orig(this.future.task.P.getClass().getName())
this.root.children == orig(this.root.children)
this.root.children[] == orig(this.root.children[])
this.root.unfinishedChildren == orig(this.root.root.unfinishedChildren)
this.root.unfinishedChildren == orig(this.root.unfinishedChildren)
this.root.exception == orig(this.root.exception)
this.root.future == orig(this.root.root.future)
this.root.future == orig(this.root.future)
this.root.future.executor == this.executor
this.root.future.result == orig(this.root.future.result)
this.root.future.exception == orig(this.root.future.exception)
this.root.future.cancelled == orig(this.root.future.cancelled)
this.root.executor == this.executor
this.parent == orig(this.parent)
this.parent.id == orig(this.parent.id)
this.parent.root == orig(this.parent.root)
this.parent.root.id == orig(this.parent.root.id)
this.parent.root.root == orig(this.parent.root.root)
this.parent.root.parent == orig(this.parent.root.parent)
this.parent.root.priority == orig(this.parent.root.priority)
this.parent.root.stack == orig(this.parent.root.stack)
this.parent.root.P == orig(this.parent.root.P)
this.parent.root.children == orig(this.parent.root.children)
this.parent.root.children[] == orig(this.parent.root.children[])
this.parent.root.unfinishedChildren == orig(this.parent.root.unfinishedChildren)
this.parent.root.exception == orig(this.parent.root.exception)
this.parent.root.future == orig(this.parent.root.future)
this.parent.root.executor == orig(this.parent.root.executor)
this.parent.root.canceled == orig(this.parent.root.canceled)
this.parent.parent == orig(this.parent.parent)
this.parent.priority == orig(this.parent.priority)
this.parent.stack == orig(this.parent.stack)
this.parent.P == orig(this.parent.P)
this.parent.children == orig(this.parent.children)
this.parent.children[] == orig(this.parent.children[])
this.parent.unfinishedChildren == orig(this.parent.unfinishedChildren)
this.parent.exception == orig(this.parent.exception)
this.parent.future == orig(this.parent.future)
this.parent.future.executor == orig(this.parent.future.executor)
this.parent.future.task == orig(this.parent.future.task)
this.parent.future.result == orig(this.parent.future.result)
this.parent.future.exception == orig(this.parent.future.exception)
this.parent.future.cancelled == orig(this.parent.future.cancelled)
this.parent.executor == orig(this.parent.executor)
this.parent.canceled == orig(this.parent.canceled)
this.priority == orig(this.priority)
this.stack == orig(this.stack)
this.P == orig(this.P)
this.P.getClass().getName() == orig(this.P.getClass().getName())
this.children == orig(this.children)
this.children[] == orig(this.children[])
this.unfinishedChildren == orig(this.unfinishedChildren)
this.exception == orig(this.exception)
this.future == orig(this.future)
this.future.executor == orig(this.future.executor)
this.future.executor == orig(this.future.task.executor)
this.future.task == this.future.task.root
this.future.task == orig(this)
this.future.task == orig(this.future.task)
this.future.task == orig(this.future.task.root)
this.future.task.id == orig(this.future.task.id)
this.future.task.parent == orig(this.future.task.parent)
this.future.task.priority == orig(this.future.task.priority)
this.future.task.stack == orig(this.future.task.stack)
this.future.task.P == orig(this.future.task.P)
this.future.task.children == orig(this.future.task.children)
this.future.task.children[] == orig(this.future.task.children[])
this.future.task.unfinishedChildren == orig(this.future.task.unfinishedChildren)
this.future.task.exception == orig(this.future.task.exception)
this.future.task.future == orig(this.future.task.future)
this.future.task.canceled == orig(this.future.task.canceled)
this.future.result == orig(this.future.result)
this.future.exception == orig(this.future.exception)
this.future.cancelled == orig(this.future.cancelled)
this.executor == orig(this.root.root.executor)
this.executor == orig(this.root.future.executor)
this.executor == orig(this.root.executor)
this.executor == orig(this.executor)
this.canceled == orig(this.root.root.canceled)
this.canceled == orig(this.root.canceled)
this.canceled == orig(this.canceled)
this.root != null
this.root.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.unfinishedChildren one of { 0, 8 }
this.root.future.result == null
this.parent.root.P == null
this.parent.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.root.unfinishedChildren == 8
this.parent.P == null
this.parent.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.unfinishedChildren == 8
this.P != null
this.children[] == []
this.children[].getClass().getName() == []
this.unfinishedChildren == 0
this.future.task.children[] == []
this.future.task.children[].getClass().getName() == []
this.future.task.unfinishedChildren == 0
this.future.result == null
this.executor has only one value
this.executor != null
return != null
size(this.root.root.children[]) one of { 0, 8 }
size(this.root.children[]) one of { 0, 8 }
size(this.parent.root.children[]) == 8
size(this.parent.children[]) == 8
this.root.P.getClass().getName() in this.parent.root.children[].getClass().getName()
this.root.P.getClass().getName() in this.parent.children[].getClass().getName()
===========================================================================
cl.niclabs.skandium.system.Task.isCancelled():::ENTER
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.P.getClass().getName() == this.P.getClass().getName()
this.root.future.executor == this.executor
this.root.executor == this.executor
this.future.task == this.future.task.root
this.root != null
this.root.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.future.result == null
this.parent.root.P == null
this.parent.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.root.unfinishedChildren >= 1
this.parent.P == null
this.parent.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.unfinishedChildren >= 1
this.P != null
this.children[] == []
this.children[].getClass().getName() == []
this.unfinishedChildren == 0
this.future.task.children[] == []
this.future.task.children[].getClass().getName() == []
this.future.task.unfinishedChildren == 0
this.future.result == null
this.executor has only one value
this.executor != null
size(this.root.root.children[]) one of { 0, 8 }
size(this.root.children[]) one of { 0, 8 }
size(this.parent.root.children[]) == 8
size(this.parent.children[]) == 8
this.root.P.getClass().getName() in this.parent.root.children[].getClass().getName()
this.root.P.getClass().getName() in this.parent.children[].getClass().getName()
this.future.task.unfinishedChildren == this.root.unfinishedChildren**2
this.root.unfinishedChildren == this.future.task.unfinishedChildren**2
===========================================================================
cl.niclabs.skandium.system.Task.isCancelled():::EXIT
cl.niclabs.skandium.system.Task.random == orig(cl.niclabs.skandium.system.Task.random)
this.id == orig(this.id)
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root == orig(this.root)
this.root == orig(this.root.root)
this.root == orig(this.root.root.root)
this.root == orig(this.root.future.task)
this.root.id == orig(this.root.id)
this.root.id == orig(this.root.root.id)
this.root.root.parent == orig(this.root.root.parent)
this.root.root.children == orig(this.root.root.children)
this.root.root.children[] == orig(this.root.root.children[])
this.root.root.exception == orig(this.root.root.exception)
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.parent == orig(this.root.parent)
this.root.priority == orig(this.root.root.priority)
this.root.priority == orig(this.root.priority)
this.root.stack == orig(this.root.root.stack)
this.root.stack == orig(this.root.stack)
this.root.P == orig(this.root.root.P)
this.root.P == orig(this.root.P)
this.root.P.getClass().getName() == this.P.getClass().getName()
this.root.P.getClass().getName() == orig(this.root.root.P.getClass().getName())
this.root.P.getClass().getName() == orig(this.root.P.getClass().getName())
this.root.P.getClass().getName() == orig(this.future.task.P.getClass().getName())
this.root.children == orig(this.root.children)
this.root.children[] == orig(this.root.children[])
this.root.unfinishedChildren == orig(this.root.root.unfinishedChildren)
this.root.unfinishedChildren == orig(this.root.unfinishedChildren)
this.root.exception == orig(this.root.exception)
this.root.future == orig(this.root.root.future)
this.root.future == orig(this.root.future)
this.root.future.executor == this.executor
this.root.future.result == orig(this.root.future.result)
this.root.future.exception == orig(this.root.future.exception)
this.root.future.cancelled == orig(this.root.future.cancelled)
this.root.executor == this.executor
this.parent == orig(this.parent)
this.parent.id == orig(this.parent.id)
this.parent.root == orig(this.parent.root)
this.parent.root.id == orig(this.parent.root.id)
this.parent.root.root == orig(this.parent.root.root)
this.parent.root.parent == orig(this.parent.root.parent)
this.parent.root.priority == orig(this.parent.root.priority)
this.parent.root.stack == orig(this.parent.root.stack)
this.parent.root.P == orig(this.parent.root.P)
this.parent.root.children == orig(this.parent.root.children)
this.parent.root.children[] == orig(this.parent.root.children[])
this.parent.root.unfinishedChildren == orig(this.parent.root.unfinishedChildren)
this.parent.root.exception == orig(this.parent.root.exception)
this.parent.root.future == orig(this.parent.root.future)
this.parent.root.executor == orig(this.parent.root.executor)
this.parent.root.canceled == orig(this.parent.root.canceled)
this.parent.parent == orig(this.parent.parent)
this.parent.priority == orig(this.parent.priority)
this.parent.stack == orig(this.parent.stack)
this.parent.P == orig(this.parent.P)
this.parent.children == orig(this.parent.children)
this.parent.children[] == orig(this.parent.children[])
this.parent.unfinishedChildren == orig(this.parent.unfinishedChildren)
this.parent.exception == orig(this.parent.exception)
this.parent.future == orig(this.parent.future)
this.parent.future.executor == orig(this.parent.future.executor)
this.parent.future.task == orig(this.parent.future.task)
this.parent.future.result == orig(this.parent.future.result)
this.parent.future.exception == orig(this.parent.future.exception)
this.parent.future.cancelled == orig(this.parent.future.cancelled)
this.parent.executor == orig(this.parent.executor)
this.parent.canceled == orig(this.parent.canceled)
this.priority == orig(this.priority)
this.stack == orig(this.stack)
this.P == orig(this.P)
this.P.getClass().getName() == orig(this.P.getClass().getName())
this.children == orig(this.children)
this.children[] == orig(this.children[])
this.unfinishedChildren == orig(this.unfinishedChildren)
this.exception == orig(this.exception)
this.future == orig(this.future)
this.future.executor == orig(this.future.executor)
this.future.executor == orig(this.future.task.executor)
this.future.task == this.future.task.root
this.future.task == orig(this)
this.future.task == orig(this.future.task)
this.future.task == orig(this.future.task.root)
this.future.task.id == orig(this.future.task.id)
this.future.task.parent == orig(this.future.task.parent)
this.future.task.priority == orig(this.future.task.priority)
this.future.task.stack == orig(this.future.task.stack)
this.future.task.P == orig(this.future.task.P)
this.future.task.children == orig(this.future.task.children)
this.future.task.children[] == orig(this.future.task.children[])
this.future.task.unfinishedChildren == orig(this.future.task.unfinishedChildren)
this.future.task.exception == orig(this.future.task.exception)
this.future.task.future == orig(this.future.task.future)
this.future.task.canceled == orig(this.future.task.canceled)
this.future.result == orig(this.future.result)
this.future.exception == orig(this.future.exception)
this.future.cancelled == orig(this.future.cancelled)
this.executor == orig(this.root.root.executor)
this.executor == orig(this.root.future.executor)
this.executor == orig(this.root.executor)
this.executor == orig(this.executor)
this.canceled == orig(this.root.root.canceled)
this.canceled == orig(this.root.canceled)
this.canceled == orig(this.canceled)
this.root != null
this.root.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.future.result == null
this.parent.root.P == null
this.parent.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.root.unfinishedChildren >= 1
this.parent.P == null
this.parent.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.unfinishedChildren >= 1
this.P != null
this.children[] == []
this.children[].getClass().getName() == []
this.unfinishedChildren == 0
this.future.task.children[] == []
this.future.task.children[].getClass().getName() == []
this.future.task.unfinishedChildren == 0
this.future.result == null
this.executor has only one value
this.executor != null
return == false
size(this.root.root.children[]) one of { 0, 8 }
size(this.root.children[]) one of { 0, 8 }
size(this.parent.root.children[]) == 8
size(this.parent.children[]) == 8
this.root.P.getClass().getName() in this.parent.root.children[].getClass().getName()
this.root.P.getClass().getName() in this.parent.children[].getClass().getName()
this.future.task.unfinishedChildren == this.root.unfinishedChildren**2
this.root.unfinishedChildren == this.future.task.unfinishedChildren**2
===========================================================================
cl.niclabs.skandium.system.Task.isCancelled():::EXIT;condition="not(return == true)"
===========================================================================
cl.niclabs.skandium.system.Task.isFinished():::ENTER
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.P.getClass().getName() == this.P.getClass().getName()
this.root.future.executor == this.executor
this.root.executor == this.executor
this.future.task == this.future.task.root
this.root != null
this.root.root.children != null
this.root.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.children != null
this.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.future.result == null
this.parent.root.P == null
this.parent.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.root.unfinishedChildren >= 1
this.parent.P == null
this.parent.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.unfinishedChildren >= 1
this.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.unfinishedChildren one of { 0, 8 }
this.future.task.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.future.task.unfinishedChildren one of { 0, 8 }
this.future.result == null
this.executor has only one value
this.executor != null
size(this.root.root.children[]) one of { 0, 8 }
size(this.root.root.children[])-1 != 0
size(this.root.children[]) one of { 0, 8 }
size(this.root.children[])-1 != 0
size(this.parent.root.children[]) == 8
size(this.parent.children[]) == 8
size(this.children[]) one of { 0, 8 }
size(this.future.task.children[]) one of { 0, 8 }
this.root.P.getClass().getName() in this.parent.root.children[].getClass().getName()
this.root.P.getClass().getName() in this.parent.children[].getClass().getName()
===========================================================================
cl.niclabs.skandium.system.Task.isFinished():::EXIT
cl.niclabs.skandium.system.Task.random == orig(cl.niclabs.skandium.system.Task.random)
this.id == orig(this.id)
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root == orig(this.root)
this.root == orig(this.root.root)
this.root == orig(this.root.root.root)
this.root == orig(this.root.future.task)
this.root.id == orig(this.root.id)
this.root.id == orig(this.root.root.id)
this.root.root.parent == orig(this.root.root.parent)
this.root.root.children == orig(this.root.root.children)
this.root.root.children[] == orig(this.root.root.children[])
this.root.root.exception == orig(this.root.root.exception)
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.parent == orig(this.root.parent)
this.root.priority == orig(this.root.root.priority)
this.root.priority == orig(this.root.priority)
this.root.stack == orig(this.root.root.stack)
this.root.stack == orig(this.root.stack)
this.root.P == orig(this.root.root.P)
this.root.P == orig(this.root.P)
this.root.P.getClass().getName() == this.P.getClass().getName()
this.root.P.getClass().getName() == orig(this.root.root.P.getClass().getName())
this.root.P.getClass().getName() == orig(this.root.P.getClass().getName())
this.root.P.getClass().getName() == orig(this.future.task.P.getClass().getName())
this.root.children == orig(this.root.children)
this.root.children[] == orig(this.root.children[])
this.root.unfinishedChildren == orig(this.root.root.unfinishedChildren)
this.root.unfinishedChildren == orig(this.root.unfinishedChildren)
this.root.exception == orig(this.root.exception)
this.root.future == orig(this.root.root.future)
this.root.future == orig(this.root.future)
this.root.future.executor == this.executor
this.root.future.result == orig(this.root.future.result)
this.root.future.exception == orig(this.root.future.exception)
this.root.future.cancelled == orig(this.root.future.cancelled)
this.root.executor == this.executor
this.parent == orig(this.parent)
this.parent.id == orig(this.parent.id)
this.parent.root == orig(this.parent.root)
this.parent.root.id == orig(this.parent.root.id)
this.parent.root.root == orig(this.parent.root.root)
this.parent.root.parent == orig(this.parent.root.parent)
this.parent.root.priority == orig(this.parent.root.priority)
this.parent.root.stack == orig(this.parent.root.stack)
this.parent.root.P == orig(this.parent.root.P)
this.parent.root.children == orig(this.parent.root.children)
this.parent.root.children[] == orig(this.parent.root.children[])
this.parent.root.unfinishedChildren == orig(this.parent.root.unfinishedChildren)
this.parent.root.exception == orig(this.parent.root.exception)
this.parent.root.future == orig(this.parent.root.future)
this.parent.root.executor == orig(this.parent.root.executor)
this.parent.root.canceled == orig(this.parent.root.canceled)
this.parent.parent == orig(this.parent.parent)
this.parent.priority == orig(this.parent.priority)
this.parent.stack == orig(this.parent.stack)
this.parent.P == orig(this.parent.P)
this.parent.children == orig(this.parent.children)
this.parent.children[] == orig(this.parent.children[])
this.parent.unfinishedChildren == orig(this.parent.unfinishedChildren)
this.parent.exception == orig(this.parent.exception)
this.parent.future == orig(this.parent.future)
this.parent.future.executor == orig(this.parent.future.executor)
this.parent.future.task == orig(this.parent.future.task)
this.parent.future.result == orig(this.parent.future.result)
this.parent.future.exception == orig(this.parent.future.exception)
this.parent.future.cancelled == orig(this.parent.future.cancelled)
this.parent.executor == orig(this.parent.executor)
this.parent.canceled == orig(this.parent.canceled)
this.priority == orig(this.priority)
this.stack == orig(this.stack)
this.P == orig(this.P)
this.P.getClass().getName() == orig(this.P.getClass().getName())
this.children == orig(this.children)
this.children[] == orig(this.children[])
this.unfinishedChildren == orig(this.unfinishedChildren)
this.exception == orig(this.exception)
this.future == orig(this.future)
this.future.executor == orig(this.future.executor)
this.future.executor == orig(this.future.task.executor)
this.future.task == this.future.task.root
this.future.task == orig(this)
this.future.task == orig(this.future.task)
this.future.task == orig(this.future.task.root)
this.future.task.id == orig(this.future.task.id)
this.future.task.parent == orig(this.future.task.parent)
this.future.task.priority == orig(this.future.task.priority)
this.future.task.stack == orig(this.future.task.stack)
this.future.task.P == orig(this.future.task.P)
this.future.task.children == orig(this.future.task.children)
this.future.task.children[] == orig(this.future.task.children[])
this.future.task.unfinishedChildren == orig(this.future.task.unfinishedChildren)
this.future.task.exception == orig(this.future.task.exception)
this.future.task.future == orig(this.future.task.future)
this.future.task.canceled == orig(this.future.task.canceled)
this.future.result == orig(this.future.result)
this.future.exception == orig(this.future.exception)
this.future.cancelled == orig(this.future.cancelled)
this.executor == orig(this.root.root.executor)
this.executor == orig(this.root.future.executor)
this.executor == orig(this.root.executor)
this.executor == orig(this.executor)
this.canceled == orig(this.root.root.canceled)
this.canceled == orig(this.root.canceled)
this.canceled == orig(this.canceled)
(this.P != null)  <==>  (return == true)
(this.P != null)  <==>  (this.children[].getClass().getName() == [])
(this.P != null)  <==>  (this.future.task.children[].getClass().getName() == [])
(this.P != null)  <==>  (this.future.task.unfinishedChildren == 0)
(this.P != null)  <==>  (this.unfinishedChildren == 0)
(this.P != null)  ==>  (size(this.root.children[]) one of { 0, 8 })
(this.P != null)  ==>  (size(this.root.root.children[]) one of { 0, 8 })
(this.P != null)  ==>  (this.children[] == [])
(this.P != null)  ==>  (this.future.task.children[] == [])
(this.P != null)  ==>  (this.parent.P == null)
(this.P != null)  ==>  (this.parent.children != null)
(this.P != null)  ==>  (this.parent.children[] elements != null)
(this.P != null)  ==>  (this.parent.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task])
(this.P != null)  ==>  (this.parent.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class)
(this.P != null)  ==>  (this.parent.exception == null)
(this.P != null)  ==>  (this.parent.executor != null)
(this.P != null)  ==>  (this.parent.executor has only one value)
(this.P != null)  ==>  (this.parent.future != null)
(this.P != null)  ==>  (this.parent.future.exception == null)
(this.P != null)  ==>  (this.parent.future.executor != null)
(this.P != null)  ==>  (this.parent.future.executor has only one value)
(this.P != null)  ==>  (this.parent.future.result == null)
(this.P != null)  ==>  (this.parent.future.task != null)
(this.P != null)  ==>  (this.parent.parent == null)
(this.P != null)  ==>  (this.parent.root != null)
(this.P != null)  ==>  (this.parent.root.P == null)
(this.P != null)  ==>  (this.parent.root.children != null)
(this.P != null)  ==>  (this.parent.root.children[] elements != null)
(this.P != null)  ==>  (this.parent.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task])
(this.P != null)  ==>  (this.parent.root.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class)
(this.P != null)  ==>  (this.parent.root.exception == null)
(this.P != null)  ==>  (this.parent.root.executor != null)
(this.P != null)  ==>  (this.parent.root.executor has only one value)
(this.P != null)  ==>  (this.parent.root.future != null)
(this.P != null)  ==>  (this.parent.root.parent == null)
(this.P != null)  ==>  (this.parent.root.root != null)
(this.P != null)  ==>  (this.parent.root.stack != null)
(this.P != null)  ==>  (this.parent.root.unfinishedChildren >= 1)
(this.P != null)  ==>  (this.parent.stack != null)
(this.P != null)  ==>  (this.parent.unfinishedChildren >= 1)
(this.P != null)  ==>  (this.priority one of { 2147483646, 2147483647 })
(this.P != null)  ==>  (this.root.P.getClass().getName() == this.P.getClass().getName())
(this.P != null)  ==>  (this.root.P.getClass().getName() in this.parent.children[].getClass().getName())
(this.P != null)  ==>  (this.root.P.getClass().getName() in this.parent.root.children[].getClass().getName())
(this.P != null)  ==>  (this.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] })
(this.P != null)  ==>  (this.root.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] })
(this.P == null)  <==>  (return == false)
(this.P == null)  <==>  (size(this.children[]) == 8)
(this.P == null)  <==>  (size(this.future.task.children[]) == 8)
(this.P == null)  <==>  (this.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task])
(this.P == null)  <==>  (this.future.task.P == null)
(this.P == null)  <==>  (this.future.task.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task])
(this.P == null)  <==>  (this.future.task.unfinishedChildren == 8)
(this.P == null)  <==>  (this.unfinishedChildren == 8)
(this.P == null)  ==>  (size(this.root.children[]) == 8)
(this.P == null)  ==>  (size(this.root.root.children[]) == 8)
(this.P == null)  ==>  (this.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class)
(this.P == null)  ==>  (this.future.task.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class)
(this.P == null)  ==>  (this.id == this.root.id)
(this.P == null)  ==>  (this.parent == null)
(this.P == null)  ==>  (this.priority == 2147483647)
(this.P == null)  ==>  (this.root == orig(this))
(this.P == null)  ==>  (this.root.P == null)
(this.P == null)  ==>  (this.root.P == this.P)
(this.P == null)  ==>  (this.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task])
(this.P == null)  ==>  (this.root.future == this.future)
(this.P == null)  ==>  (this.root.priority == this.priority)
(this.P == null)  ==>  (this.root.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task])
(this.P == null)  ==>  (this.root.stack == this.stack)
(this.P == null)  ==>  (this.root.unfinishedChildren == 8)
(this.P == null)  ==>  (this.root.unfinishedChildren == this.unfinishedChildren)
this.root != null
this.root.root.children != null
this.root.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.children != null
this.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.future.result == null
this.parent.root.P == null
this.parent.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.root.unfinishedChildren >= 1
this.parent.P == null
this.parent.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.unfinishedChildren >= 1
this.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.unfinishedChildren one of { 0, 8 }
this.future.task.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.future.task.unfinishedChildren one of { 0, 8 }
this.future.result == null
this.executor has only one value
this.executor != null
size(this.root.root.children[]) one of { 0, 8 }
size(this.root.root.children[])-1 != 0
size(this.root.children[]) one of { 0, 8 }
size(this.root.children[])-1 != 0
size(this.parent.root.children[]) == 8
size(this.parent.children[]) == 8
size(this.children[]) one of { 0, 8 }
size(this.future.task.children[]) one of { 0, 8 }
this.root.P.getClass().getName() in this.parent.root.children[].getClass().getName()
this.root.P.getClass().getName() in this.parent.children[].getClass().getName()
===========================================================================
cl.niclabs.skandium.system.Task.isFinished():::EXIT;condition="return == true"
this.P != null
this.children[] == []
this.children[].getClass().getName() == []
this.unfinishedChildren == 0
this.future.task.children[] == []
this.future.task.children[].getClass().getName() == []
this.future.task.unfinishedChildren == 0
return == true
===========================================================================
cl.niclabs.skandium.system.Task.isFinished():::EXIT;condition="not(return == true)"
this.id == this.root.id
this.id == this.root.root.id
this.id == orig(this.root.id)
this.id == orig(this.root.root.id)
this.id == orig(this.future.task.id)
this.root == this.future.task.root
this.root == orig(this)
this.root == orig(this.future.task)
this.root == orig(this.future.task.root)
this.root.root.priority == this.priority
this.root.root.stack == this.stack
this.root.root.P == this.P
this.root.root.unfinishedChildren == this.unfinishedChildren
this.root.root.future == this.future
this.root.priority == this.priority
this.root.stack == this.stack
this.root.P == this.P
this.root.unfinishedChildren == this.unfinishedChildren
this.root.future == this.future
this.priority == orig(this.root.root.priority)
this.priority == orig(this.root.priority)
this.priority == orig(this.future.task.priority)
this.stack == orig(this.root.root.stack)
this.stack == orig(this.root.stack)
this.stack == orig(this.future.task.stack)
this.P == orig(this.root.root.P)
this.P == orig(this.root.P)
this.P == orig(this.future.task.P)
this.unfinishedChildren == orig(this.root.root.unfinishedChildren)
this.unfinishedChildren == orig(this.root.unfinishedChildren)
this.unfinishedChildren == orig(this.future.task.unfinishedChildren)
this.future == orig(this.root.root.future)
this.future == orig(this.root.future)
this.future == orig(this.future.task.future)
this.future.task.executor == this.executor
this.future.cancelled == orig(this.root.future.cancelled)
this.executor == orig(this.future.executor)
this.executor == orig(this.future.task.executor)
this.canceled == orig(this.future.task.canceled)
this.root.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent == null
this.priority == 2147483647
this.P == null
this.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.unfinishedChildren == 8
this.future.task.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
return == false
size(this.root.root.children[]) == 8
size(this.root.children[]) == 8
size(this.children[]) == 8
size(this.future.task.children[]) == 8
===========================================================================
cl.niclabs.skandium.system.Task.isRoot():::ENTER
this.root == this.future.task
this.root.P.getClass().getName() == this.P.getClass().getName()
this.future.task == this.future.task.root
this.root.root.children != null
this.root.children != null
this.root.future.result == null
this.parent.root.P == null
this.parent.P == null
this.P != null
this.children[] == []
this.children[].getClass().getName() == []
this.unfinishedChildren == 0
this.future.task.children[] == []
this.future.task.children[].getClass().getName() == []
this.future.task.unfinishedChildren == 0
this.future.result == null
===========================================================================
cl.niclabs.skandium.system.Task.isRoot():::EXIT
cl.niclabs.skandium.system.Task.random == orig(cl.niclabs.skandium.system.Task.random)
this.id == orig(this.id)
this.root == this.future.task
this.root == orig(this.root)
this.root.id == orig(this.root.id)
this.root.id == orig(this.root.root.id)
this.root.root == orig(this.root.root)
this.root.root == orig(this.root.root.root)
this.root.root == orig(this.root.future.task)
this.root.root.parent == orig(this.root.root.parent)
this.root.root.children == orig(this.root.root.children)
this.root.root.children[] == orig(this.root.root.children[])
this.root.root.exception == orig(this.root.root.exception)
this.root.parent == orig(this.root.parent)
this.root.priority == orig(this.root.root.priority)
this.root.priority == orig(this.root.priority)
this.root.stack == orig(this.root.root.stack)
this.root.stack == orig(this.root.stack)
this.root.P == orig(this.root.root.P)
this.root.P == orig(this.root.P)
this.root.P.getClass().getName() == this.P.getClass().getName()
this.root.P.getClass().getName() == orig(this.root.root.P.getClass().getName())
this.root.P.getClass().getName() == orig(this.root.P.getClass().getName())
this.root.P.getClass().getName() == orig(this.future.task.P.getClass().getName())
this.root.children == orig(this.root.children)
this.root.children[] == orig(this.root.children[])
this.root.unfinishedChildren == orig(this.root.root.unfinishedChildren)
this.root.unfinishedChildren == orig(this.root.unfinishedChildren)
this.root.exception == orig(this.root.exception)
this.root.future == orig(this.root.root.future)
this.root.future == orig(this.root.future)
this.root.future.result == orig(this.root.future.result)
this.root.future.exception == orig(this.root.future.exception)
this.root.future.cancelled == orig(this.root.future.cancelled)
this.root.executor == orig(this.root.root.executor)
this.root.executor == orig(this.root.future.executor)
this.root.executor == orig(this.root.executor)
this.root.canceled == orig(this.root.root.canceled)
this.root.canceled == orig(this.root.canceled)
this.parent == orig(this.parent)
this.parent.id == orig(this.parent.id)
this.parent.root == orig(this.parent.root)
this.parent.root.id == orig(this.parent.root.id)
this.parent.root.root == orig(this.parent.root.root)
this.parent.root.parent == orig(this.parent.root.parent)
this.parent.root.priority == orig(this.parent.root.priority)
this.parent.root.stack == orig(this.parent.root.stack)
this.parent.root.P == orig(this.parent.root.P)
this.parent.root.children == orig(this.parent.root.children)
this.parent.root.children[] == orig(this.parent.root.children[])
this.parent.root.unfinishedChildren == orig(this.parent.root.unfinishedChildren)
this.parent.root.exception == orig(this.parent.root.exception)
this.parent.root.future == orig(this.parent.root.future)
this.parent.root.executor == orig(this.parent.root.executor)
this.parent.root.canceled == orig(this.parent.root.canceled)
this.parent.parent == orig(this.parent.parent)
this.parent.priority == orig(this.parent.priority)
this.parent.stack == orig(this.parent.stack)
this.parent.P == orig(this.parent.P)
this.parent.children == orig(this.parent.children)
this.parent.children[] == orig(this.parent.children[])
this.parent.unfinishedChildren == orig(this.parent.unfinishedChildren)
this.parent.exception == orig(this.parent.exception)
this.parent.future == orig(this.parent.future)
this.parent.future.executor == orig(this.parent.future.executor)
this.parent.future.task == orig(this.parent.future.task)
this.parent.future.result == orig(this.parent.future.result)
this.parent.future.exception == orig(this.parent.future.exception)
this.parent.future.cancelled == orig(this.parent.future.cancelled)
this.parent.executor == orig(this.parent.executor)
this.parent.canceled == orig(this.parent.canceled)
this.priority == orig(this.priority)
this.stack == orig(this.stack)
this.P == orig(this.P)
this.P.getClass().getName() == orig(this.P.getClass().getName())
this.children == orig(this.children)
this.children[] == orig(this.children[])
this.unfinishedChildren == orig(this.unfinishedChildren)
this.exception == orig(this.exception)
this.future == orig(this.future)
this.future.executor == orig(this.future.executor)
this.future.executor == orig(this.future.task.executor)
this.future.task == this.future.task.root
this.future.task == orig(this)
this.future.task == orig(this.future.task)
this.future.task == orig(this.future.task.root)
this.future.task.id == orig(this.future.task.id)
this.future.task.parent == orig(this.future.task.parent)
this.future.task.priority == orig(this.future.task.priority)
this.future.task.stack == orig(this.future.task.stack)
this.future.task.P == orig(this.future.task.P)
this.future.task.children == orig(this.future.task.children)
this.future.task.children[] == orig(this.future.task.children[])
this.future.task.unfinishedChildren == orig(this.future.task.unfinishedChildren)
this.future.task.exception == orig(this.future.task.exception)
this.future.task.future == orig(this.future.task.future)
this.future.task.canceled == orig(this.future.task.canceled)
this.future.result == orig(this.future.result)
this.future.exception == orig(this.future.exception)
this.future.cancelled == orig(this.future.cancelled)
this.executor == orig(this.executor)
this.canceled == orig(this.canceled)
(this.root.P == null)  <==>  (return == false)
(this.root.P == null)  <==>  (this.id != this.root.id)
(this.root.P == null)  <==>  (this.parent != null)
(this.root.P == null)  <==>  (this.priority == 2147483646)
(this.root.P == null)  <==>  (this.root.priority > this.priority)
(this.root.P == null)  ==>  (this.children == null)
(this.root.P == null)  ==>  (this.future == null)
(this.root.P == null)  ==>  (this.parent.P == null)
(this.root.P == null)  ==>  (this.parent.children != null)
(this.root.P == null)  ==>  (this.parent.children[] elements != null)
(this.root.P == null)  ==>  (this.parent.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class)
(this.root.P == null)  ==>  (this.parent.exception == null)
(this.root.P == null)  ==>  (this.parent.executor != null)
(this.root.P == null)  ==>  (this.parent.executor has only one value)
(this.root.P == null)  ==>  (this.parent.future != null)
(this.root.P == null)  ==>  (this.parent.future.exception == null)
(this.root.P == null)  ==>  (this.parent.future.executor != null)
(this.root.P == null)  ==>  (this.parent.future.executor has only one value)
(this.root.P == null)  ==>  (this.parent.future.result == null)
(this.root.P == null)  ==>  (this.parent.future.task != null)
(this.root.P == null)  ==>  (this.parent.parent == null)
(this.root.P == null)  ==>  (this.parent.root != null)
(this.root.P == null)  ==>  (this.parent.root.P == null)
(this.root.P == null)  ==>  (this.parent.root.children != null)
(this.root.P == null)  ==>  (this.parent.root.children[] elements != null)
(this.root.P == null)  ==>  (this.parent.root.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class)
(this.root.P == null)  ==>  (this.parent.root.exception == null)
(this.root.P == null)  ==>  (this.parent.root.executor != null)
(this.root.P == null)  ==>  (this.parent.root.executor has only one value)
(this.root.P == null)  ==>  (this.parent.root.future != null)
(this.root.P == null)  ==>  (this.parent.root.parent == null)
(this.root.P == null)  ==>  (this.parent.root.root != null)
(this.root.P == null)  ==>  (this.parent.root.stack != null)
(this.root.P == null)  ==>  (this.parent.root.unfinishedChildren >= 0)
(this.root.P == null)  ==>  (this.parent.stack != null)
(this.root.P == null)  ==>  (this.parent.unfinishedChildren >= 0)
(this.root.P == null)  ==>  (this.root != null)
(this.root.P == null)  ==>  (this.root.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class)
(this.root.P == null)  ==>  (this.root.root.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class)
this.root.root.children != null
this.root.children != null
this.root.future.result == null
this.parent.root.P == null
this.parent.P == null
this.P != null
this.children[] == []
this.children[].getClass().getName() == []
this.unfinishedChildren == 0
this.future.task.children[] == []
this.future.task.children[].getClass().getName() == []
this.future.task.unfinishedChildren == 0
this.future.result == null
===========================================================================
cl.niclabs.skandium.system.Task.isRoot():::EXIT;condition="return == true"
this.id == this.root.id
this.root.id == orig(this.future.task.id)
this.root.root == this.future.task.root
this.root.root == orig(this)
this.root.root == orig(this.future.task)
this.root.root == orig(this.future.task.root)
this.root.priority == this.priority
this.root.priority == orig(this.future.task.priority)
this.root.stack == this.stack
this.root.stack == orig(this.future.task.stack)
this.root.P == this.P
this.root.P == orig(this.future.task.P)
this.root.unfinishedChildren == this.unfinishedChildren
this.root.unfinishedChildren == orig(this.future.task.unfinishedChildren)
this.root.future == this.future
this.root.future == orig(this.future.task.future)
this.root.executor == this.future.task.executor
this.root.executor == this.executor
this.root.executor == orig(this.future.executor)
this.root.executor == orig(this.future.task.executor)
this.root.canceled == orig(this.future.task.canceled)
this.future.cancelled == orig(this.root.future.cancelled)
this.root.root.children[] == []
this.root.root.children[].getClass().getName() == []
this.root.children[] == []
this.root.children[].getClass().getName() == []
this.root.unfinishedChildren == 0
this.parent == null
this.priority == 2147483647
return == true
===========================================================================
cl.niclabs.skandium.system.Task.isRoot():::EXIT;condition="not(return == true)"
this.root == this.root.root.root
this.root == this.root.future.task
this.root == orig(this.root.root)
this.root == orig(this.root.root.root)
this.root == orig(this.root.future.task)
this.root.root.canceled == this.canceled
this.canceled == orig(this.root.root.canceled)
this.canceled == orig(this.root.canceled)
this.root != null
this.root.P == null
this.parent != null
this.priority == 2147483646
this.children == null
this.future == null
return == false
this.id != this.root.id
===========================================================================
cl.niclabs.skandium.system.Task.notifyParent():::ENTER
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.P.getClass().getName() == this.P.getClass().getName()
this.root.future.executor == this.executor
this.root.executor == this.executor
this.future.task == this.future.task.root
this.root != null
this.root.root.children != null
this.root.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.children != null
this.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.future.result == null
this.parent.root.P == null
this.parent.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.root.unfinishedChildren >= 1
this.parent.P == null
this.parent.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.unfinishedChildren >= 1
this.P != null
this.children[] == []
this.children[].getClass().getName() == []
this.unfinishedChildren == 0
this.future.task.children[] == []
this.future.task.children[].getClass().getName() == []
this.future.task.unfinishedChildren == 0
this.future.result == null
this.executor has only one value
this.executor != null
size(this.root.root.children[]) one of { 0, 8 }
size(this.root.children[]) one of { 0, 8 }
size(this.parent.root.children[]) == 8
size(this.parent.children[]) == 8
===========================================================================
cl.niclabs.skandium.system.Task.notifyParent():::EXIT1
this.id == this.root.id
this.id == this.root.root.id
this.id == orig(this.root.id)
this.id == orig(this.root.root.id)
this.id == orig(this.future.task.id)
this.root == this.future.task.root
this.root == orig(this)
this.root == orig(this.future.task)
this.root == orig(this.future.task.root)
this.root.root.priority == this.priority
this.root.root.stack == this.stack
this.root.root.P == this.P
this.root.root.P.getClass().getName() == this.P.getClass().getName()
this.root.root.children[] == orig(this.root.root.children[])
this.root.root.unfinishedChildren == this.unfinishedChildren
this.root.root.future == this.future
this.root.priority == this.priority
this.root.stack == this.stack
this.root.P == this.P
this.root.P.getClass().getName() == this.P.getClass().getName()
this.root.children[] == orig(this.root.children[])
this.root.unfinishedChildren == this.unfinishedChildren
this.root.future == this.future
this.root.future.result.getClass().getName() == this.P.getClass().getName()
this.priority == orig(this.root.root.priority)
this.priority == orig(this.root.priority)
this.priority == orig(this.future.task.priority)
this.stack == orig(this.root.root.stack)
this.stack == orig(this.root.stack)
this.stack == orig(this.future.task.stack)
this.P == orig(this.root.root.P)
this.P == orig(this.root.P)
this.P == orig(this.future.task.P)
this.P.getClass().getName() == this.future.task.P.getClass().getName()
this.P.getClass().getName() == orig(this.root.root.P.getClass().getName())
this.P.getClass().getName() == orig(this.root.P.getClass().getName())
this.P.getClass().getName() == orig(this.future.task.P.getClass().getName())
this.unfinishedChildren == orig(this.root.root.unfinishedChildren)
this.unfinishedChildren == orig(this.root.unfinishedChildren)
this.unfinishedChildren == orig(this.future.task.unfinishedChildren)
this.future == orig(this.root.root.future)
this.future == orig(this.root.future)
this.future == orig(this.future.task.future)
this.future.task.executor == this.executor
this.future.cancelled == orig(this.root.future.cancelled)
this.executor == orig(this.future.executor)
this.executor == orig(this.future.task.executor)
this.canceled == orig(this.future.task.canceled)
this.root.root.children[] == []
this.root.root.children[].getClass().getName() == []
this.root.children[] == []
this.root.children[].getClass().getName() == []
this.parent == null
this.priority == 2147483647
===========================================================================
cl.niclabs.skandium.system.Task.notifyParent():::EXIT2
this.root.P.getClass().getName() == this.parent.root.P.getClass().getName()
this.root.future.result == orig(this.root.future.result)
this.root.P.getClass().getName() == java.lang.Object[].class
this.root.future.result == null
this.parent != null
this.priority == 2147483646
this.children == null
this.future == null
orig(this.root.root.children[].getClass().getName()) == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
orig(this.root.P) == null
orig(this.root.children[].getClass().getName()) == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
orig(this.root.unfinishedChildren) >= 1
orig(size(this.root.root.children[])) == 8
orig(size(this.root.children[])) == 8
this.id != this.root.id
this.root.unfinishedChildren - orig(this.root.unfinishedChildren) + 1 == 0
this.unfinishedChildren < orig(this.root.unfinishedChildren)
===========================================================================
cl.niclabs.skandium.system.Task.notifyParent():::EXIT
cl.niclabs.skandium.system.Task.random == orig(cl.niclabs.skandium.system.Task.random)
this.id == orig(this.id)
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root == orig(this.root)
this.root == orig(this.root.root)
this.root == orig(this.root.root.root)
this.root == orig(this.root.future.task)
this.root.id == orig(this.root.id)
this.root.id == orig(this.root.root.id)
this.root.root.parent == orig(this.root.root.parent)
this.root.root.children == orig(this.root.root.children)
this.root.root.exception == orig(this.root.root.exception)
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.parent == orig(this.root.parent)
this.root.priority == orig(this.root.root.priority)
this.root.priority == orig(this.root.priority)
this.root.stack == orig(this.root.root.stack)
this.root.stack == orig(this.root.stack)
this.root.children == orig(this.root.children)
this.root.exception == orig(this.root.exception)
this.root.future == orig(this.root.root.future)
this.root.future == orig(this.root.future)
this.root.future.executor == this.executor
this.root.future.exception == orig(this.root.future.exception)
this.root.future.cancelled == orig(this.root.future.cancelled)
this.root.executor == this.executor
this.parent == orig(this.parent)
this.parent.id == orig(this.parent.id)
this.parent.root == orig(this.parent.root)
this.parent.root.id == orig(this.parent.root.id)
this.parent.root.root == orig(this.parent.root.root)
this.parent.root.parent == orig(this.parent.root.parent)
this.parent.root.priority == orig(this.parent.root.priority)
this.parent.root.stack == orig(this.parent.root.stack)
this.parent.root.children == orig(this.parent.root.children)
this.parent.root.exception == orig(this.parent.root.exception)
this.parent.root.future == orig(this.parent.root.future)
this.parent.root.executor == orig(this.parent.root.executor)
this.parent.root.canceled == orig(this.parent.root.canceled)
this.parent.parent == orig(this.parent.parent)
this.parent.priority == orig(this.parent.priority)
this.parent.stack == orig(this.parent.stack)
this.parent.children == orig(this.parent.children)
this.parent.exception == orig(this.parent.exception)
this.parent.future == orig(this.parent.future)
this.parent.future.executor == orig(this.parent.future.executor)
this.parent.future.task == orig(this.parent.future.task)
this.parent.future.result == orig(this.parent.future.result)
this.parent.future.exception == orig(this.parent.future.exception)
this.parent.future.cancelled == orig(this.parent.future.cancelled)
this.parent.executor == orig(this.parent.executor)
this.parent.canceled == orig(this.parent.canceled)
this.priority == orig(this.priority)
this.stack == orig(this.stack)
this.P == orig(this.P)
this.P.getClass().getName() == orig(this.P.getClass().getName())
this.children == orig(this.children)
this.children[] == orig(this.children[])
this.unfinishedChildren == orig(this.unfinishedChildren)
this.exception == orig(this.exception)
this.future == orig(this.future)
this.future.executor == orig(this.future.executor)
this.future.executor == orig(this.future.task.executor)
this.future.task == this.future.task.root
this.future.task == orig(this)
this.future.task == orig(this.future.task)
this.future.task == orig(this.future.task.root)
this.future.task.id == orig(this.future.task.id)
this.future.task.parent == orig(this.future.task.parent)
this.future.task.priority == orig(this.future.task.priority)
this.future.task.stack == orig(this.future.task.stack)
this.future.task.P == orig(this.root.P)
this.future.task.P == orig(this.future.task.P)
this.future.task.children == orig(this.future.task.children)
this.future.task.children[] == orig(this.future.task.children[])
this.future.task.unfinishedChildren == orig(this.root.unfinishedChildren)
this.future.task.unfinishedChildren == orig(this.future.task.unfinishedChildren)
this.future.task.exception == orig(this.future.task.exception)
this.future.task.future == orig(this.future.task.future)
this.future.task.canceled == orig(this.future.task.canceled)
this.future.result.getClass().getName() == orig(this.root.root.P.getClass().getName())
this.future.result.getClass().getName() == orig(this.root.P.getClass().getName())
this.future.result.getClass().getName() == orig(this.future.task.P.getClass().getName())
this.future.exception == orig(this.future.exception)
this.future.cancelled == orig(this.future.cancelled)
this.executor == orig(this.root.root.executor)
this.executor == orig(this.root.future.executor)
this.executor == orig(this.root.executor)
this.executor == orig(this.executor)
this.canceled == orig(this.root.root.canceled)
this.canceled == orig(this.root.canceled)
this.canceled == orig(this.canceled)
(this.root.future.result == null)  <==>  (orig(size(this.root.children[])) == 8)
(this.root.future.result == null)  <==>  (orig(size(this.root.root.children[])) == 8)
(this.root.future.result == null)  <==>  (orig(this.root.P) == null)
(this.root.future.result == null)  <==>  (orig(this.root.children[].getClass().getName()) == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task])
(this.root.future.result == null)  <==>  (orig(this.root.root.children[].getClass().getName()) == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task])
(this.root.future.result == null)  <==>  (orig(this.root.unfinishedChildren) >= 1)
(this.root.future.result == null)  <==>  (this.children == null)
(this.root.future.result == null)  <==>  (this.future == null)
(this.root.future.result == null)  <==>  (this.id != this.root.id)
(this.root.future.result == null)  <==>  (this.parent != null)
(this.root.future.result == null)  <==>  (this.priority == 2147483646)
(this.root.future.result == null)  <==>  (this.root.priority > this.priority)
(this.root.future.result == null)  <==>  (this.unfinishedChildren < orig(this.root.unfinishedChildren))
(this.root.future.result == null)  ==>  (orig(this.parent.P) == null)
(this.root.future.result == null)  ==>  (orig(this.parent.children[]) elements != null)
(this.root.future.result == null)  ==>  (orig(this.parent.children[].getClass().getName()) == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task])
(this.root.future.result == null)  ==>  (orig(this.parent.children[].getClass().getName()) elements == cl.niclabs.skandium.system.Task.class)
(this.root.future.result == null)  ==>  (orig(this.parent.root.P) == null)
(this.root.future.result == null)  ==>  (orig(this.parent.root.children[]) elements != null)
(this.root.future.result == null)  ==>  (orig(this.parent.root.children[].getClass().getName()) == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task])
(this.root.future.result == null)  ==>  (orig(this.parent.root.children[].getClass().getName()) elements == cl.niclabs.skandium.system.Task.class)
(this.root.future.result == null)  ==>  (orig(this.parent.root.unfinishedChildren) >= 1)
(this.root.future.result == null)  ==>  (orig(this.parent.unfinishedChildren) >= 1)
(this.root.future.result == null)  ==>  (orig(this.root.children[].getClass().getName()) elements == cl.niclabs.skandium.system.Task.class)
(this.root.future.result == null)  ==>  (orig(this.root.root.children[].getClass().getName()) elements == cl.niclabs.skandium.system.Task.class)
(this.root.future.result == null)  ==>  (size(this.parent.children[]) != orig(size(this.parent.children[]))-1)
(this.root.future.result == null)  ==>  (size(this.parent.children[]) <= orig(size(this.parent.children[])))
(this.root.future.result == null)  ==>  (size(this.parent.children[]) one of { 0, 8 })
(this.root.future.result == null)  ==>  (size(this.parent.children[])-1 <= orig(size(this.parent.children[]))-1)
(this.root.future.result == null)  ==>  (size(this.parent.root.children[]) != orig(size(this.parent.root.children[]))-1)
(this.root.future.result == null)  ==>  (size(this.parent.root.children[]) <= orig(size(this.parent.root.children[])))
(this.root.future.result == null)  ==>  (size(this.parent.root.children[]) one of { 0, 8 })
(this.root.future.result == null)  ==>  (size(this.parent.root.children[])-1 <= orig(size(this.parent.root.children[]))-1)
(this.root.future.result == null)  ==>  (size(this.root.children[]) one of { 0, 8 })
(this.root.future.result == null)  ==>  (size(this.root.root.children[]) one of { 0, 8 })
(this.root.future.result == null)  ==>  (this.parent.P.getClass().getName() == java.lang.Object[].class)
(this.root.future.result == null)  ==>  (this.parent.children != null)
(this.root.future.result == null)  ==>  (this.parent.children[] elements != null)
(this.root.future.result == null)  ==>  (this.parent.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class)
(this.root.future.result == null)  ==>  (this.parent.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] })
(this.root.future.result == null)  ==>  (this.parent.exception == null)
(this.root.future.result == null)  ==>  (this.parent.executor != null)
(this.root.future.result == null)  ==>  (this.parent.executor has only one value)
(this.root.future.result == null)  ==>  (this.parent.future != null)
(this.root.future.result == null)  ==>  (this.parent.future.exception == null)
(this.root.future.result == null)  ==>  (this.parent.future.executor != null)
(this.root.future.result == null)  ==>  (this.parent.future.executor has only one value)
(this.root.future.result == null)  ==>  (this.parent.future.result == null)
(this.root.future.result == null)  ==>  (this.parent.future.task != null)
(this.root.future.result == null)  ==>  (this.parent.parent == null)
(this.root.future.result == null)  ==>  (this.parent.root != null)
(this.root.future.result == null)  ==>  (this.parent.root.children != null)
(this.root.future.result == null)  ==>  (this.parent.root.children[] elements != null)
(this.root.future.result == null)  ==>  (this.parent.root.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class)
(this.root.future.result == null)  ==>  (this.parent.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] })
(this.root.future.result == null)  ==>  (this.parent.root.exception == null)
(this.root.future.result == null)  ==>  (this.parent.root.executor != null)
(this.root.future.result == null)  ==>  (this.parent.root.executor has only one value)
(this.root.future.result == null)  ==>  (this.parent.root.future != null)
(this.root.future.result == null)  ==>  (this.parent.root.parent == null)
(this.root.future.result == null)  ==>  (this.parent.root.root != null)
(this.root.future.result == null)  ==>  (this.parent.root.stack != null)
(this.root.future.result == null)  ==>  (this.parent.root.unfinishedChildren - orig(this.parent.root.unfinishedChildren) + 1 == 0)
(this.root.future.result == null)  ==>  (this.parent.root.unfinishedChildren >= 0)
(this.root.future.result == null)  ==>  (this.parent.stack != null)
(this.root.future.result == null)  ==>  (this.parent.unfinishedChildren - orig(this.parent.unfinishedChildren) + 1 == 0)
(this.root.future.result == null)  ==>  (this.parent.unfinishedChildren >= 0)
(this.root.future.result == null)  ==>  (this.root.P.getClass().getName() == java.lang.Object[].class)
(this.root.future.result == null)  ==>  (this.root.P.getClass().getName() == this.parent.P.getClass().getName())
(this.root.future.result == null)  ==>  (this.root.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class)
(this.root.future.result == null)  ==>  (this.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] })
(this.root.future.result == null)  ==>  (this.root.future.result == orig(this.root.future.result))
(this.root.future.result == null)  ==>  (this.root.root.children[].getClass().getName() elements == cl.niclabs.skandium.system.Task.class)
(this.root.future.result == null)  ==>  (this.root.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] })
(this.root.future.result == null)  ==>  (this.root.unfinishedChildren - orig(this.root.unfinishedChildren) + 1 == 0)
this.root != null
this.root.root.children != null
this.root.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.children != null
this.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.parent.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.parent.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.P != null
this.children[] == []
this.children[].getClass().getName() == []
this.unfinishedChildren == 0
this.future.task.children[] == []
this.future.task.children[].getClass().getName() == []
this.future.task.unfinishedChildren == 0
this.executor has only one value
this.executor != null
size(this.root.root.children[]) one of { 0, 8 }
size(this.root.children[]) one of { 0, 8 }
size(this.parent.root.children[]) one of { 0, 8 }
size(this.parent.children[]) one of { 0, 8 }
this.root.unfinishedChildren <= orig(this.root.unfinishedChildren)
this.parent.root.unfinishedChildren - orig(this.parent.root.unfinishedChildren) + 1 == 0
this.parent.unfinishedChildren - orig(this.parent.unfinishedChildren) + 1 == 0
this.unfinishedChildren <= orig(this.root.unfinishedChildren)
size(this.root.root.children[]) <= orig(size(this.root.root.children[]))
size(this.root.root.children[]) != orig(size(this.root.root.children[]))-1
size(this.root.root.children[])-1 <= orig(size(this.root.root.children[]))-1
size(this.root.children[]) <= orig(size(this.root.children[]))
size(this.root.children[]) != orig(size(this.root.children[]))-1
size(this.root.children[])-1 <= orig(size(this.root.children[]))-1
size(this.parent.root.children[]) <= orig(size(this.parent.root.children[]))
size(this.parent.root.children[]) != orig(size(this.parent.root.children[]))-1
size(this.parent.root.children[])-1 <= orig(size(this.parent.root.children[]))-1
size(this.parent.children[]) <= orig(size(this.parent.children[]))
size(this.parent.children[]) != orig(size(this.parent.children[]))-1
size(this.parent.children[])-1 <= orig(size(this.parent.children[]))-1
===========================================================================
cl.niclabs.skandium.system.Task.run():::ENTER
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.P.getClass().getName() == this.P.getClass().getName()
this.root.future.executor == this.executor
this.root.executor == this.executor
this.future.task == this.future.task.root
this.root != null
this.root.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.unfinishedChildren one of { 0, 8 }
this.root.future.result == null
this.parent.root.P == null
this.parent.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.root.unfinishedChildren == 8
this.parent.P == null
this.parent.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.unfinishedChildren == 8
this.P != null
this.children[] == []
this.children[].getClass().getName() == []
this.unfinishedChildren == 0
this.future.task.children[] == []
this.future.task.children[].getClass().getName() == []
this.future.task.unfinishedChildren == 0
this.future.result == null
this.executor has only one value
this.executor != null
size(this.root.root.children[]) one of { 0, 8 }
size(this.root.children[]) one of { 0, 8 }
size(this.parent.root.children[]) == 8
size(this.parent.children[]) == 8
this.root.P.getClass().getName() in this.parent.root.children[].getClass().getName()
this.root.P.getClass().getName() in this.parent.children[].getClass().getName()
===========================================================================
cl.niclabs.skandium.system.Task.run():::EXIT
cl.niclabs.skandium.system.Task.random == orig(cl.niclabs.skandium.system.Task.random)
this.id == orig(this.id)
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root == orig(this.root)
this.root == orig(this.root.root)
this.root == orig(this.root.root.root)
this.root == orig(this.root.future.task)
this.root.id == orig(this.root.id)
this.root.id == orig(this.root.root.id)
this.root.root.parent == orig(this.root.root.parent)
this.root.root.children[] == orig(this.root.root.children[])
this.root.root.children[].getClass().getName() == orig(this.root.root.children[].getClass().getName())
this.root.root.exception == orig(this.root.root.exception)
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.parent == orig(this.root.parent)
this.root.priority == orig(this.root.root.priority)
this.root.priority == orig(this.root.priority)
this.root.stack == orig(this.root.root.stack)
this.root.stack == orig(this.root.stack)
this.root.P.getClass().getName() == this.P.getClass().getName()
this.root.children[] == orig(this.root.children[])
this.root.children[].getClass().getName() == orig(this.root.children[].getClass().getName())
this.root.exception == orig(this.root.exception)
this.root.future == orig(this.root.root.future)
this.root.future == orig(this.root.future)
this.root.future.executor == this.executor
this.root.future.result == orig(this.root.future.result)
this.root.future.exception == orig(this.root.future.exception)
this.root.future.cancelled == orig(this.root.future.cancelled)
this.root.executor == this.executor
this.parent == orig(this.parent)
this.parent.id == orig(this.parent.id)
this.parent.root == orig(this.parent.root)
this.parent.root.id == orig(this.parent.root.id)
this.parent.root.root == orig(this.parent.root.root)
this.parent.root.parent == orig(this.parent.root.parent)
this.parent.root.priority == orig(this.parent.root.priority)
this.parent.root.stack == orig(this.parent.root.stack)
this.parent.root.P == orig(this.parent.root.P)
this.parent.root.children == orig(this.parent.root.children)
this.parent.root.children[] == orig(this.parent.root.children[])
this.parent.root.exception == orig(this.parent.root.exception)
this.parent.root.future == orig(this.parent.root.future)
this.parent.root.executor == orig(this.parent.root.executor)
this.parent.root.canceled == orig(this.parent.root.canceled)
this.parent.parent == orig(this.parent.parent)
this.parent.priority == orig(this.parent.priority)
this.parent.stack == orig(this.parent.stack)
this.parent.P == orig(this.parent.P)
this.parent.children == orig(this.parent.children)
this.parent.children[] == orig(this.parent.children[])
this.parent.exception == orig(this.parent.exception)
this.parent.future == orig(this.parent.future)
this.parent.future.executor == orig(this.parent.future.executor)
this.parent.future.task == orig(this.parent.future.task)
this.parent.future.result == orig(this.parent.future.result)
this.parent.future.exception == orig(this.parent.future.exception)
this.parent.future.cancelled == orig(this.parent.future.cancelled)
this.parent.executor == orig(this.parent.executor)
this.parent.canceled == orig(this.parent.canceled)
this.priority == orig(this.priority)
this.stack == orig(this.stack)
this.children[] == orig(this.children[])
this.children[].getClass().getName() == orig(this.children[].getClass().getName())
this.exception == orig(this.exception)
this.future == orig(this.future)
this.future.executor == orig(this.future.executor)
this.future.executor == orig(this.future.task.executor)
this.future.task == this.future.task.root
this.future.task == orig(this)
this.future.task == orig(this.future.task)
this.future.task == orig(this.future.task.root)
this.future.task.id == orig(this.future.task.id)
this.future.task.parent == orig(this.future.task.parent)
this.future.task.priority == orig(this.future.task.priority)
this.future.task.stack == orig(this.future.task.stack)
this.future.task.children[] == orig(this.future.task.children[])
this.future.task.children[].getClass().getName() == orig(this.future.task.children[].getClass().getName())
this.future.task.exception == orig(this.future.task.exception)
this.future.task.future == orig(this.future.task.future)
this.future.task.canceled == orig(this.future.task.canceled)
this.future.result == orig(this.future.result)
this.future.exception == orig(this.future.exception)
this.future.cancelled == orig(this.future.cancelled)
this.executor == orig(this.root.root.executor)
this.executor == orig(this.root.future.executor)
this.executor == orig(this.root.executor)
this.executor == orig(this.executor)
this.canceled == orig(this.root.root.canceled)
this.canceled == orig(this.root.canceled)
this.canceled == orig(this.canceled)
this.root != null
this.root.root.children != null
this.root.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.children != null
this.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.future.result == null
this.parent.root.P == null
this.parent.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.root.unfinishedChildren >= 1
this.parent.P == null
this.parent.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.unfinishedChildren >= 1
this.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.unfinishedChildren one of { 0, 8 }
this.future.task.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.future.task.unfinishedChildren one of { 0, 8 }
this.future.result == null
this.executor has only one value
this.executor != null
size(this.root.root.children[]) one of { 0, 8 }
size(this.root.root.children[])-1 != 0
size(this.root.children[]) one of { 0, 8 }
size(this.root.children[])-1 != 0
size(this.parent.root.children[]) == 8
size(this.parent.children[]) == 8
size(this.children[]) one of { 0, 8 }
size(this.future.task.children[]) one of { 0, 8 }
this.root.P.getClass().getName() in this.parent.root.children[].getClass().getName()
this.root.P.getClass().getName() in this.parent.children[].getClass().getName()
this.root.unfinishedChildren >= orig(this.unfinishedChildren)
this.root.unfinishedChildren >= orig(this.future.task.unfinishedChildren)
orig(this.root.P.getClass().getName()) in this.parent.root.children[].getClass().getName()
this.parent.root.unfinishedChildren <= orig(this.parent.root.unfinishedChildren)
orig(this.root.P.getClass().getName()) in this.parent.children[].getClass().getName()
this.parent.unfinishedChildren <= orig(this.parent.unfinishedChildren)
this.children[] is the reverse of orig(this.children[])
this.unfinishedChildren >= orig(this.unfinishedChildren)
this.unfinishedChildren >= orig(this.future.task.unfinishedChildren)
this.future.task.children[] is the reverse of orig(this.future.task.children[])
this.future.task.unfinishedChildren >= orig(this.root.unfinishedChildren)
this.future.task.unfinishedChildren >= orig(this.unfinishedChildren)
this.future.task.unfinishedChildren >= orig(this.future.task.unfinishedChildren)
===========================================================================
cl.niclabs.skandium.system.Task.sendChildrenToExecution():::ENTER
this == this.root
this.id == this.root.id
this.id == this.root.root.id
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root.root.priority == this.priority
this.root.root.stack == this.stack
this.root.root.P == this.P
this.root.root.unfinishedChildren == this.unfinishedChildren
this.root.root.future == this.future
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.priority == this.priority
this.root.stack == this.stack
this.root.P == this.P
this.root.unfinishedChildren == this.unfinishedChildren
this.root.future == this.future
this.root.future.executor == this.executor
this.root.executor == this.executor
this.future.task.executor == this.executor
this.root.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.root.future.result == null
this.parent == null
this.priority == 2147483647
this.P == null
this.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.unfinishedChildren == 8
this.future.task.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.future.result == null
this.executor has only one value
size(this.root.root.children[]) == 8
size(this.root.children[]) == 8
size(this.children[]) == 8
size(this.future.task.children[]) == 8
===========================================================================
cl.niclabs.skandium.system.Task.sendChildrenToExecution():::EXIT2
===========================================================================
cl.niclabs.skandium.system.Task.sendChildrenToExecution():::EXIT
cl.niclabs.skandium.system.Task.random == orig(cl.niclabs.skandium.system.Task.random)
this.id == this.root.id
this.id == this.root.root.id
this.id == orig(this.id)
this.id == orig(this.root.id)
this.id == orig(this.root.root.id)
this.id == orig(this.future.task.id)
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root == orig(this)
this.root == orig(this.root)
this.root == orig(this.root.root)
this.root == orig(this.root.root.root)
this.root == orig(this.root.future.task)
this.root == orig(this.future.task)
this.root == orig(this.future.task.root)
this.root.root.parent == orig(this.root.root.parent)
this.root.root.priority == this.priority
this.root.root.stack == this.stack
this.root.root.P == this.P
this.root.root.children == orig(this.root.root.children)
this.root.root.children[] == orig(this.root.root.children[])
this.root.root.unfinishedChildren == this.unfinishedChildren
this.root.root.exception == orig(this.root.root.exception)
this.root.root.future == this.future
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.parent == orig(this.root.parent)
this.root.priority == this.priority
this.root.stack == this.stack
this.root.P == this.P
this.root.children == orig(this.root.children)
this.root.children[] == orig(this.root.children[])
this.root.unfinishedChildren == this.unfinishedChildren
this.root.exception == orig(this.root.exception)
this.root.future == this.future
this.root.future.executor == this.executor
this.root.future.result == orig(this.root.future.result)
this.root.future.exception == orig(this.root.future.exception)
this.root.executor == this.executor
this.parent == orig(this.parent)
this.priority == orig(this.root.root.priority)
this.priority == orig(this.root.priority)
this.priority == orig(this.priority)
this.priority == orig(this.future.task.priority)
this.stack == orig(this.root.root.stack)
this.stack == orig(this.root.stack)
this.stack == orig(this.stack)
this.stack == orig(this.future.task.stack)
this.P == orig(this.root.root.P)
this.P == orig(this.root.P)
this.P == orig(this.P)
this.P == orig(this.future.task.P)
this.children == orig(this.children)
this.children[] == orig(this.children[])
this.unfinishedChildren == orig(this.root.root.unfinishedChildren)
this.unfinishedChildren == orig(this.root.unfinishedChildren)
this.unfinishedChildren == orig(this.unfinishedChildren)
this.unfinishedChildren == orig(this.future.task.unfinishedChildren)
this.exception == orig(this.exception)
this.future == orig(this.root.root.future)
this.future == orig(this.root.future)
this.future == orig(this.future)
this.future == orig(this.future.task.future)
this.future.task.parent == orig(this.future.task.parent)
this.future.task.children == orig(this.future.task.children)
this.future.task.children[] == orig(this.future.task.children[])
this.future.task.exception == orig(this.future.task.exception)
this.future.task.executor == this.executor
this.future.result == orig(this.future.result)
this.future.exception == orig(this.future.exception)
this.future.cancelled == orig(this.root.future.cancelled)
this.future.cancelled == orig(this.future.cancelled)
this.executor == orig(this.root.root.executor)
this.executor == orig(this.root.future.executor)
this.executor == orig(this.root.executor)
this.executor == orig(this.future.executor)
this.executor == orig(this.future.task.executor)
this.executor == orig(this.executor)
this.canceled == orig(this.root.root.canceled)
this.canceled == orig(this.root.canceled)
this.canceled == orig(this.future.task.canceled)
this.canceled == orig(this.canceled)
this.root.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.root.future.result == null
this.parent == null
this.priority == 2147483647
this.P == null
this.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.unfinishedChildren == 8
this.future.task.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.future.result == null
this.executor has only one value
size(this.root.root.children[]) == 8
size(this.root.children[]) == 8
size(this.children[]) == 8
size(this.future.task.children[]) == 8
===========================================================================
cl.niclabs.skandium.system.Task.setP(java.lang.Object):::ENTER
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.P.getClass().getName() == this.P.getClass().getName()
this.root.future.executor == this.executor
this.root.executor == this.executor
this.future.task == this.future.task.root
this.root != null
this.root.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.future.result == null
this.parent.root.P == null
this.parent.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.root.unfinishedChildren >= 1
this.parent.P == null
this.parent.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.unfinishedChildren >= 1
this.P != null
this.children[] == []
this.children[].getClass().getName() == []
this.unfinishedChildren == 0
this.future.task.P != null
this.future.task.children[] == []
this.future.task.children[].getClass().getName() == []
this.future.task.unfinishedChildren == 0
this.future.result == null
this.executor has only one value
this.executor != null
size(this.root.root.children[]) one of { 0, 8 }
size(this.root.children[]) one of { 0, 8 }
size(this.parent.root.children[]) == 8
size(this.parent.children[]) == 8
this.root.P.getClass().getName() in this.parent.root.children[].getClass().getName()
this.root.P.getClass().getName() in this.parent.children[].getClass().getName()
this.root.P.getClass().getName() != arg0.getClass().getName()
this.future.task.unfinishedChildren == this.root.unfinishedChildren**2
this.root.unfinishedChildren == this.future.task.unfinishedChildren**2
===========================================================================
cl.niclabs.skandium.system.Task.setP(java.lang.Object):::EXIT
cl.niclabs.skandium.system.Task.random == orig(cl.niclabs.skandium.system.Task.random)
this.id == orig(this.id)
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root == orig(this.root)
this.root == orig(this.root.root)
this.root == orig(this.root.root.root)
this.root == orig(this.root.future.task)
this.root.id == orig(this.root.id)
this.root.id == orig(this.root.root.id)
this.root.root.parent == orig(this.root.root.parent)
this.root.root.children == orig(this.root.root.children)
this.root.root.children[] == orig(this.root.root.children[])
this.root.root.exception == orig(this.root.root.exception)
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.parent == orig(this.root.parent)
this.root.priority == orig(this.root.root.priority)
this.root.priority == orig(this.root.priority)
this.root.stack == orig(this.root.root.stack)
this.root.stack == orig(this.root.stack)
this.root.P.getClass().getName() == this.P.getClass().getName()
this.root.children == orig(this.root.children)
this.root.children[] == orig(this.root.children[])
this.root.unfinishedChildren == orig(this.root.root.unfinishedChildren)
this.root.unfinishedChildren == orig(this.root.unfinishedChildren)
this.root.exception == orig(this.root.exception)
this.root.future == orig(this.root.root.future)
this.root.future == orig(this.root.future)
this.root.future.executor == this.executor
this.root.future.result == orig(this.root.future.result)
this.root.future.exception == orig(this.root.future.exception)
this.root.future.cancelled == orig(this.root.future.cancelled)
this.root.executor == this.executor
this.parent == orig(this.parent)
this.parent.id == orig(this.parent.id)
this.parent.root == orig(this.parent.root)
this.parent.root.id == orig(this.parent.root.id)
this.parent.root.root == orig(this.parent.root.root)
this.parent.root.parent == orig(this.parent.root.parent)
this.parent.root.priority == orig(this.parent.root.priority)
this.parent.root.stack == orig(this.parent.root.stack)
this.parent.root.P == orig(this.parent.root.P)
this.parent.root.children == orig(this.parent.root.children)
this.parent.root.children[] == orig(this.parent.root.children[])
this.parent.root.unfinishedChildren == orig(this.parent.root.unfinishedChildren)
this.parent.root.exception == orig(this.parent.root.exception)
this.parent.root.future == orig(this.parent.root.future)
this.parent.root.executor == orig(this.parent.root.executor)
this.parent.root.canceled == orig(this.parent.root.canceled)
this.parent.parent == orig(this.parent.parent)
this.parent.priority == orig(this.parent.priority)
this.parent.stack == orig(this.parent.stack)
this.parent.P == orig(this.parent.P)
this.parent.children == orig(this.parent.children)
this.parent.children[] == orig(this.parent.children[])
this.parent.unfinishedChildren == orig(this.parent.unfinishedChildren)
this.parent.exception == orig(this.parent.exception)
this.parent.future == orig(this.parent.future)
this.parent.future.executor == orig(this.parent.future.executor)
this.parent.future.task == orig(this.parent.future.task)
this.parent.future.result == orig(this.parent.future.result)
this.parent.future.exception == orig(this.parent.future.exception)
this.parent.future.cancelled == orig(this.parent.future.cancelled)
this.parent.executor == orig(this.parent.executor)
this.parent.canceled == orig(this.parent.canceled)
this.priority == orig(this.priority)
this.stack == orig(this.stack)
this.P.getClass().getName() == orig(arg0.getClass().getName())
this.children == orig(this.children)
this.children[] == orig(this.children[])
this.unfinishedChildren == orig(this.unfinishedChildren)
this.exception == orig(this.exception)
this.future == orig(this.future)
this.future.executor == orig(this.future.executor)
this.future.executor == orig(this.future.task.executor)
this.future.task == this.future.task.root
this.future.task == orig(this)
this.future.task == orig(this.future.task)
this.future.task == orig(this.future.task.root)
this.future.task.id == orig(this.future.task.id)
this.future.task.parent == orig(this.future.task.parent)
this.future.task.priority == orig(this.future.task.priority)
this.future.task.stack == orig(this.future.task.stack)
this.future.task.children == orig(this.future.task.children)
this.future.task.children[] == orig(this.future.task.children[])
this.future.task.unfinishedChildren == orig(this.future.task.unfinishedChildren)
this.future.task.exception == orig(this.future.task.exception)
this.future.task.future == orig(this.future.task.future)
this.future.task.canceled == orig(this.future.task.canceled)
this.future.result == orig(this.future.result)
this.future.exception == orig(this.future.exception)
this.future.cancelled == orig(this.future.cancelled)
this.executor == orig(this.root.root.executor)
this.executor == orig(this.root.future.executor)
this.executor == orig(this.root.executor)
this.executor == orig(this.executor)
this.canceled == orig(this.root.root.canceled)
this.canceled == orig(this.root.canceled)
this.canceled == orig(this.canceled)
this.root != null
this.root.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.children[].getClass().getName() one of { [], [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task] }
this.root.future.result == null
this.parent.root.P == null
this.parent.root.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.root.unfinishedChildren >= 1
this.parent.P == null
this.parent.children[].getClass().getName() == [cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task, cl.niclabs.skandium.system.Task]
this.parent.unfinishedChildren >= 1
this.children[] == []
this.children[].getClass().getName() == []
this.unfinishedChildren == 0
this.future.task.children[] == []
this.future.task.children[].getClass().getName() == []
this.future.task.unfinishedChildren == 0
this.future.result == null
this.executor has only one value
this.executor != null
size(this.root.root.children[]) one of { 0, 8 }
size(this.root.children[]) one of { 0, 8 }
size(this.parent.root.children[]) == 8
size(this.parent.children[]) == 8
this.root.P.getClass().getName() in this.parent.root.children[].getClass().getName()
this.root.P.getClass().getName() in this.parent.children[].getClass().getName()
this.root.P.getClass().getName() != orig(this.root.P.getClass().getName())
this.root.P.getClass().getName() != orig(this.P.getClass().getName())
this.future.task.unfinishedChildren == this.root.unfinishedChildren**2
this.root.unfinishedChildren == this.future.task.unfinishedChildren**2
orig(this.root.P.getClass().getName()) in this.parent.root.children[].getClass().getName()
orig(this.root.P.getClass().getName()) in this.parent.children[].getClass().getName()
this.P.getClass().getName() != orig(this.root.P.getClass().getName())
===========================================================================
cl.niclabs.skandium.system.Task.setStack(java.util.Stack):::ENTER
this == this.root
this.id == this.root.id
this.id == this.root.root.id
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root.root.priority == this.priority
this.root.root.stack == this.stack
this.root.root.P == this.P
this.root.root.unfinishedChildren == this.unfinishedChildren
this.root.root.future == this.future
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.priority == this.priority
this.root.stack == this.stack
this.root.P == this.P
this.root.unfinishedChildren == this.unfinishedChildren
this.root.future == this.future
this.root.future.executor == this.executor
this.root.executor == this.executor
this.future.task.executor == this.executor
this.root.root.children == null
this.root.children == null
this.root.future.result == null
this.parent == null
this.priority == 2147483647
this.P == null
this.children == null
this.unfinishedChildren == 0
this.future.task.children == null
this.future.result == null
this.executor has only one value
===========================================================================
cl.niclabs.skandium.system.Task.setStack(java.util.Stack):::EXIT
cl.niclabs.skandium.system.Task.random == orig(cl.niclabs.skandium.system.Task.random)
this.id == this.root.id
this.id == this.root.root.id
this.id == orig(this.id)
this.id == orig(this.root.id)
this.id == orig(this.root.root.id)
this.id == orig(this.future.task.id)
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root == orig(this)
this.root == orig(this.root)
this.root == orig(this.root.root)
this.root == orig(this.root.root.root)
this.root == orig(this.root.future.task)
this.root == orig(this.future.task)
this.root == orig(this.future.task.root)
this.root.root.parent == orig(this.root.root.parent)
this.root.root.priority == this.priority
this.root.root.stack == this.stack
this.root.root.P == this.P
this.root.root.children == orig(this.root.root.children)
this.root.root.unfinishedChildren == this.unfinishedChildren
this.root.root.exception == orig(this.root.root.exception)
this.root.root.future == this.future
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.parent == orig(this.root.parent)
this.root.priority == this.priority
this.root.stack == this.stack
this.root.P == this.P
this.root.children == orig(this.root.children)
this.root.unfinishedChildren == this.unfinishedChildren
this.root.exception == orig(this.root.exception)
this.root.future == this.future
this.root.future.executor == this.executor
this.root.future.result == orig(this.root.future.result)
this.root.future.exception == orig(this.root.future.exception)
this.root.executor == this.executor
this.parent == orig(this.parent)
this.priority == orig(this.root.root.priority)
this.priority == orig(this.root.priority)
this.priority == orig(this.priority)
this.priority == orig(this.future.task.priority)
this.stack == orig(this.root.root.stack)
this.stack == orig(this.root.stack)
this.stack == orig(this.stack)
this.stack == orig(this.future.task.stack)
this.P == orig(this.root.root.P)
this.P == orig(this.root.P)
this.P == orig(this.P)
this.P == orig(this.future.task.P)
this.children == orig(this.children)
this.unfinishedChildren == orig(this.root.root.unfinishedChildren)
this.unfinishedChildren == orig(this.root.unfinishedChildren)
this.unfinishedChildren == orig(this.unfinishedChildren)
this.unfinishedChildren == orig(this.future.task.unfinishedChildren)
this.exception == orig(this.exception)
this.future == orig(this.root.root.future)
this.future == orig(this.root.future)
this.future == orig(this.future)
this.future == orig(this.future.task.future)
this.future.task.parent == orig(this.future.task.parent)
this.future.task.children == orig(this.future.task.children)
this.future.task.exception == orig(this.future.task.exception)
this.future.task.executor == this.executor
this.future.result == orig(this.future.result)
this.future.exception == orig(this.future.exception)
this.future.cancelled == orig(this.root.future.cancelled)
this.future.cancelled == orig(this.future.cancelled)
this.executor == orig(this.root.root.executor)
this.executor == orig(this.root.future.executor)
this.executor == orig(this.root.executor)
this.executor == orig(this.future.executor)
this.executor == orig(this.future.task.executor)
this.executor == orig(this.executor)
this.canceled == orig(this.root.root.canceled)
this.canceled == orig(this.root.canceled)
this.canceled == orig(this.future.task.canceled)
this.canceled == orig(this.canceled)
this.root.root.children == null
this.root.children == null
this.root.future.result == null
this.parent == null
this.priority == 2147483647
this.P == null
this.children == null
this.unfinishedChildren == 0
this.future.task.children == null
this.future.result == null
this.executor has only one value
===========================================================================
cl.niclabs.skandium.system.Task.updateFutureWithResult():::ENTER
this == this.root
this.id == this.root.id
this.id == this.root.root.id
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root.root.priority == this.priority
this.root.root.stack == this.stack
this.root.root.P == this.P
this.root.root.P.getClass().getName() == this.P.getClass().getName()
this.root.root.unfinishedChildren == this.unfinishedChildren
this.root.root.future == this.future
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.priority == this.priority
this.root.stack == this.stack
this.root.P == this.P
this.root.P.getClass().getName() == this.P.getClass().getName()
this.root.unfinishedChildren == this.unfinishedChildren
this.root.future == this.future
this.root.future.executor == this.executor
this.root.executor == this.executor
this.future.task.executor == this.executor
this.root.root.children[] == []
this.root.root.children[].getClass().getName() == []
this.root.children[] == []
this.root.children[].getClass().getName() == []
this.root.future.result == null
this.parent == null
this.priority == 2147483647
this.children[] == []
this.children[].getClass().getName() == []
this.unfinishedChildren == 0
this.future.task.children[] == []
this.future.task.children[].getClass().getName() == []
this.future.result == null
this.executor has only one value
===========================================================================
cl.niclabs.skandium.system.Task.updateFutureWithResult():::EXIT
cl.niclabs.skandium.system.Task.random == orig(cl.niclabs.skandium.system.Task.random)
this.id == this.root.id
this.id == this.root.root.id
this.id == orig(this.id)
this.id == orig(this.root.id)
this.id == orig(this.root.root.id)
this.id == orig(this.future.task.id)
this.root == this.root.root.root
this.root == this.root.future.task
this.root == this.future.task
this.root == orig(this)
this.root == orig(this.root)
this.root == orig(this.root.root)
this.root == orig(this.root.root.root)
this.root == orig(this.root.future.task)
this.root == orig(this.future.task)
this.root == orig(this.future.task.root)
this.root.root.parent == orig(this.root.root.parent)
this.root.root.priority == this.priority
this.root.root.stack == this.stack
this.root.root.P == this.P
this.root.root.P.getClass().getName() == this.P.getClass().getName()
this.root.root.children == orig(this.root.root.children)
this.root.root.children[] == orig(this.root.root.children[])
this.root.root.unfinishedChildren == this.unfinishedChildren
this.root.root.exception == orig(this.root.root.exception)
this.root.root.future == this.future
this.root.root.executor == this.executor
this.root.root.canceled == this.canceled
this.root.parent == orig(this.root.parent)
this.root.priority == this.priority
this.root.stack == this.stack
this.root.P == this.P
this.root.P.getClass().getName() == this.P.getClass().getName()
this.root.children == orig(this.root.children)
this.root.children[] == orig(this.root.children[])
this.root.unfinishedChildren == this.unfinishedChildren
this.root.exception == orig(this.root.exception)
this.root.future == this.future
this.root.future.executor == this.executor
this.root.future.result.getClass().getName() == this.P.getClass().getName()
this.root.future.exception == orig(this.root.future.exception)
this.root.executor == this.executor
this.parent == orig(this.parent)
this.priority == orig(this.root.root.priority)
this.priority == orig(this.root.priority)
this.priority == orig(this.priority)
this.priority == orig(this.future.task.priority)
this.stack == orig(this.root.root.stack)
this.stack == orig(this.root.stack)
this.stack == orig(this.stack)
this.stack == orig(this.future.task.stack)
this.P == orig(this.root.root.P)
this.P == orig(this.root.P)
this.P == orig(this.P)
this.P == orig(this.future.task.P)
this.P.getClass().getName() == orig(this.root.root.P.getClass().getName())
this.P.getClass().getName() == orig(this.root.P.getClass().getName())
this.P.getClass().getName() == orig(this.P.getClass().getName())
this.P.getClass().getName() == orig(this.future.task.P.getClass().getName())
this.children == orig(this.children)
this.children[] == orig(this.children[])
this.unfinishedChildren == orig(this.root.root.unfinishedChildren)
this.unfinishedChildren == orig(this.root.unfinishedChildren)
this.unfinishedChildren == orig(this.unfinishedChildren)
this.unfinishedChildren == orig(this.future.task.unfinishedChildren)
this.exception == orig(this.exception)
this.future == orig(this.root.root.future)
this.future == orig(this.root.future)
this.future == orig(this.future)
this.future == orig(this.future.task.future)
this.future.task.parent == orig(this.future.task.parent)
this.future.task.children == orig(this.future.task.children)
this.future.task.children[] == orig(this.future.task.children[])
this.future.task.exception == orig(this.future.task.exception)
this.future.task.executor == this.executor
this.future.exception == orig(this.future.exception)
this.future.cancelled == orig(this.root.future.cancelled)
this.future.cancelled == orig(this.future.cancelled)
this.executor == orig(this.root.root.executor)
this.executor == orig(this.root.future.executor)
this.executor == orig(this.root.executor)
this.executor == orig(this.future.executor)
this.executor == orig(this.future.task.executor)
this.executor == orig(this.executor)
this.canceled == orig(this.root.root.canceled)
this.canceled == orig(this.root.canceled)
this.canceled == orig(this.future.task.canceled)
this.canceled == orig(this.canceled)
this.root.root.children[] == []
this.root.root.children[].getClass().getName() == []
this.root.children[] == []
this.root.children[].getClass().getName() == []
this.parent == null
this.priority == 2147483647
this.children[] == []
this.children[].getClass().getName() == []
this.unfinishedChildren == 0
this.future.task.children[] == []
this.future.task.children[].getClass().getName() == []
this.executor has only one value
===========================================================================
cl.niclabs.skandium.system.TaskExecutor:::OBJECT
this has only one value
===========================================================================
cl.niclabs.skandium.system.TaskExecutor.TaskExecutor(int):::ENTER
arg0 == 24
===========================================================================
cl.niclabs.skandium.system.TaskExecutor.TaskExecutor(int):::EXIT
===========================================================================
cl.niclabs.skandium.system.TaskExecutor.afterExecute(java.lang.Runnable, java.lang.Throwable):::ENTER
arg0 != null
arg0.getClass().getName() == cl.niclabs.skandium.system.Task.class
arg1 == null
===========================================================================
cl.niclabs.skandium.system.TaskExecutor.afterExecute(java.lang.Runnable, java.lang.Throwable):::EXIT2
===========================================================================
cl.niclabs.skandium.system.TaskExecutor.afterExecute(java.lang.Runnable, java.lang.Throwable):::EXIT
===========================================================================
cl.niclabs.skandium.system.TaskExecutor.beforeExecute(java.lang.Thread, java.lang.Runnable):::ENTER
arg0 != null
arg1 != null
arg1.getClass().getName() == cl.niclabs.skandium.system.Task.class
===========================================================================
cl.niclabs.skandium.system.TaskExecutor.beforeExecute(java.lang.Thread, java.lang.Runnable):::EXIT
===========================================================================
concurrent.collision.detection.ExecuteContainsCheck:::OBJECT
this has only one value
===========================================================================
concurrent.collision.detection.ExecuteContainsCheck.ExecuteContainsCheck():::EXIT
===========================================================================
concurrent.collision.detection.ExecuteContainsCheck.execute(data.structures.HashList):::ENTER
===========================================================================
concurrent.collision.detection.ExecuteContainsCheck.execute(data.structures.HashList):::EXIT
===========================================================================
concurrent.collision.detection.MergeCollisions:::OBJECT
this has only one value
===========================================================================
concurrent.collision.detection.MergeCollisions.MergeCollisions():::EXIT
===========================================================================
concurrent.collision.detection.MergeCollisions.merge(data.structures.HashList[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == data.structures.HashList[].class
arg0[] contains no nulls and has only one value, of length 8
size(arg0[]) == 8
===========================================================================
concurrent.collision.detection.MergeCollisions.merge(data.structures.HashList[]):::EXIT
arg0[] == orig(arg0[])
arg0[] contains no nulls and has only one value, of length 8
return has only one value
===========================================================================
concurrent.collision.detection.SplitHashArray:::OBJECT
this has only one value
this.parts == 8
===========================================================================
concurrent.collision.detection.SplitHashArray.SplitHashArray(int):::ENTER
arg0 == 8
===========================================================================
concurrent.collision.detection.SplitHashArray.SplitHashArray(int):::EXIT
this.parts == orig(arg0)
===========================================================================
concurrent.collision.detection.SplitHashArray.split(data.structures.HashList):::ENTER
arg0 has only one value
===========================================================================
concurrent.collision.detection.SplitHashArray.split(data.structures.HashList):::EXIT
this.parts == orig(this.parts)
return has only one value
return.getClass().getName() == data.structures.HashList[].class
return[] contains no nulls and has only one value, of length 8
size(return[]) == 8
===========================================================================
concurrent.hashing.ExecuteHashing:::OBJECT
this.power == 2
===========================================================================
concurrent.hashing.ExecuteHashing.ExecuteHashing(int):::ENTER
arg0 == 2
===========================================================================
concurrent.hashing.ExecuteHashing.ExecuteHashing(int):::EXIT
this.power == orig(arg0)
===========================================================================
concurrent.hashing.ExecuteHashing.execute(data.structures.SchemaInterface):::ENTER
arg0 != null
arg0.getClass().getName() == data.structures.Schema.class
===========================================================================
concurrent.hashing.ExecuteHashing.execute(data.structures.SchemaInterface):::EXIT
this.power == orig(this.power)
return != null
===========================================================================
concurrent.hashing.MergeHashes:::OBJECT
===========================================================================
concurrent.hashing.MergeHashes.MergeHashes():::EXIT
===========================================================================
concurrent.hashing.MergeHashes.merge(data.structures.HashList[]):::ENTER
arg0.getClass().getName() == data.structures.HashList[].class
size(arg0[]) == 8
===========================================================================
concurrent.hashing.MergeHashes.merge(data.structures.HashList[]):::EXIT
arg0[] == orig(arg0[])
===========================================================================
concurrent.hashing.SplitSchema:::OBJECT
this.parts == 8
===========================================================================
concurrent.hashing.SplitSchema.SplitSchema(int):::ENTER
arg0 == 8
===========================================================================
concurrent.hashing.SplitSchema.SplitSchema(int):::EXIT
this.parts == orig(arg0)
===========================================================================
concurrent.hashing.SplitSchema.split(data.structures.SchemaInterface):::ENTER
arg0.getClass().getName() == data.structures.Schema.class
===========================================================================
concurrent.hashing.SplitSchema.split(data.structures.SchemaInterface):::EXIT
this.parts == orig(this.parts)
return.getClass().getName() == data.structures.SchemaInterface[].class
size(return[]) == 8
===========================================================================
concurrent.trie.insertion.ExecuteInsertion:::OBJECT
this has only one value
===========================================================================
concurrent.trie.insertion.ExecuteInsertion.ExecuteInsertion():::EXIT
===========================================================================
concurrent.trie.insertion.ExecuteInsertion.execute(data.structures.HashList):::ENTER
===========================================================================
concurrent.trie.insertion.ExecuteInsertion.execute(data.structures.HashList):::EXIT
return.getClass().getName() == java.lang.Object.class
===========================================================================
concurrent.trie.insertion.MergeNothing:::OBJECT
this has only one value
===========================================================================
concurrent.trie.insertion.MergeNothing.MergeNothing():::EXIT
===========================================================================
concurrent.trie.insertion.MergeNothing.merge(java.lang.Object[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.lang.Object[].class
arg0[] contains no nulls and has only one value, of length 8
size(arg0[]) == 8
===========================================================================
concurrent.trie.insertion.MergeNothing.merge(java.lang.Object[]):::EXIT
arg0[] == orig(arg0[])
arg0[] contains no nulls and has only one value, of length 8
return has only one value
return.getClass().getName() == java.lang.Object.class
===========================================================================
concurrent.trie.insertion.SplitHashArray:::OBJECT
this has only one value
this.parts == 8
===========================================================================
concurrent.trie.insertion.SplitHashArray.SplitHashArray(int):::ENTER
arg0 == 8
===========================================================================
concurrent.trie.insertion.SplitHashArray.SplitHashArray(int):::EXIT
this.parts == orig(arg0)
===========================================================================
concurrent.trie.insertion.SplitHashArray.split(data.structures.HashList):::ENTER
arg0 has only one value
===========================================================================
concurrent.trie.insertion.SplitHashArray.split(data.structures.HashList):::EXIT
this.parts == orig(this.parts)
return has only one value
return.getClass().getName() == data.structures.HashList[].class
return[] contains no nulls and has only one value, of length 8
size(return[]) == 8
===========================================================================
data.structures.HashBitmapPair:::OBJECT
this.hash != null
this.bitmap >= 0
size(this.hash[]) == 2
===========================================================================
data.structures.HashBitmapPair.HashBitmapPair(byte[], long):::ENTER
arg0 != null
size(arg0[]) == 2
===========================================================================
data.structures.HashBitmapPair.HashBitmapPair(byte[], long):::EXIT
arg0[] == orig(arg0[])
===========================================================================
data.structures.HashBitmapPair.getBitmap():::ENTER
this.hash[] == [48, -12]
this.hash[] elements one of { -12, 48 }
this.bitmap one of { 81, 148 }
===========================================================================
data.structures.HashBitmapPair.getBitmap():::EXIT
this.hash == orig(this.hash)
this.hash[] == orig(this.hash[])
this.bitmap == return
return == orig(this.bitmap)
this.hash[] == [48, -12]
this.hash[] elements one of { -12, 48 }
return one of { 81, 148 }
===========================================================================
data.structures.HashBitmapPair.getHash():::ENTER
===========================================================================
data.structures.HashBitmapPair.getHash():::EXIT
this.hash == return
this.hash[] == orig(this.hash[])
this.bitmap == orig(this.bitmap)
return == orig(this.hash)
return != null
size(return[]) == 2
===========================================================================
data.structures.HashList:::CLASS
===========================================================================
data.structures.HashList:::OBJECT
===========================================================================
data.structures.HashList.HashList():::EXIT
===========================================================================
data.structures.Schema$1:::OBJECT
this.curPos >= 0
data.structures.Schema.this.text != null
data.structures.Schema.this.text.k != null
data.structures.Schema.this.text.k.toString one of { "# # und #, # f\374r # vom 12.11.2011 an den Dekan der Fakult\344t #, Herrn # # #, # Sie auf die # des Rektorats # der # reagieren. Wir # uns # Ihr Interesse, # \374ber das von Ihnen # # Urteil zu unserer bisherigen # # der #. # erkennen wir # der von Ihnen # # an. # die # nutzen und Ihnen die # # # #.", "# # und #, # f\374r # vom 12.11.2011 auf die #. Wir # uns zwar stets \374ber #, ich # # # #, dass das Rektorat # die zu # # # und auf # nur # eingegangen werden kann. Es steht fest, dass # # wird, auch wenn die # des SMWK # abgewiesen werden. Bitte finden Sie sich # mit dem gefassten # ab. # # ich Sie bitten, # die zu # # zu nennen, damit wir dem SMWK unsere konkreten # # k\366nnen." }
data.structures.Schema.this.text.templates != null
data.structures.Schema.this.text.templates[] elements != null
data.structures.Schema.this.text.templates[].getClass().getName() == [data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template]
data.structures.Schema.this.text.templates[].getClass().getName() elements == data.structures.Template.class
data.structures.Schema.this.text.templates.getClass().getName() == java.util.ArrayList.class
data.structures.Schema.this.text.lut != null
data.structures.Schema.this.text.lut[] elements != null
data.structures.Schema.this.text.lut[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
data.structures.Schema.this.text.lut[].getClass().getName() elements == java.lang.Integer.class
data.structures.Schema.this.text.lut.getClass().getName() == java.util.ArrayList.class
data.structures.Schema.this.text.maxLength one of { 661, 730 }
data.structures.Schema.this.startMask >= 0
data.structures.Schema.this.rest == 0
size(data.structures.Schema.this.text.templates[]) == 31
size(data.structures.Schema.this.text.lut[]) == 31
===========================================================================
data.structures.Schema$1.(data.structures.Schema):::ENTER
data.structures.Schema.this != null
data.structures.Schema.this.text != null
data.structures.Schema.this.text.k != null
data.structures.Schema.this.text.k.toString one of { "# # und #, # f\374r # vom 12.11.2011 an den Dekan der Fakult\344t #, Herrn # # #, # Sie auf die # des Rektorats # der # reagieren. Wir # uns # Ihr Interesse, # \374ber das von Ihnen # # Urteil zu unserer bisherigen # # der #. # erkennen wir # der von Ihnen # # an. # die # nutzen und Ihnen die # # # #.", "# # und #, # f\374r # vom 12.11.2011 auf die #. Wir # uns zwar stets \374ber #, ich # # # #, dass das Rektorat # die zu # # # und auf # nur # eingegangen werden kann. Es steht fest, dass # # wird, auch wenn die # des SMWK # abgewiesen werden. Bitte finden Sie sich # mit dem gefassten # ab. # # ich Sie bitten, # die zu # # zu nennen, damit wir dem SMWK unsere konkreten # # k\366nnen." }
data.structures.Schema.this.text.templates != null
data.structures.Schema.this.text.templates[] elements != null
data.structures.Schema.this.text.templates[].getClass().getName() == [data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template]
data.structures.Schema.this.text.templates[].getClass().getName() elements == data.structures.Template.class
data.structures.Schema.this.text.templates.getClass().getName() == java.util.ArrayList.class
data.structures.Schema.this.text.lut != null
data.structures.Schema.this.text.lut[] elements != null
data.structures.Schema.this.text.lut[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
data.structures.Schema.this.text.lut[].getClass().getName() elements == java.lang.Integer.class
data.structures.Schema.this.text.lut.getClass().getName() == java.util.ArrayList.class
data.structures.Schema.this.text.maxLength one of { 661, 730 }
data.structures.Schema.this.rest == 0
size(data.structures.Schema.this.text.templates[]) == 31
size(data.structures.Schema.this.text.lut[]) == 31
===========================================================================
data.structures.Schema$1.(data.structures.Schema):::EXIT
data.structures.Schema.this == orig(data.structures.Schema.this)
data.structures.Schema.this.text == orig(data.structures.Schema.this.text)
data.structures.Schema.this.text.k == orig(data.structures.Schema.this.text.k)
data.structures.Schema.this.text.k.toString == orig(data.structures.Schema.this.text.k.toString)
data.structures.Schema.this.text.templates == orig(data.structures.Schema.this.text.templates)
data.structures.Schema.this.text.templates[] == orig(data.structures.Schema.this.text.templates[])
data.structures.Schema.this.text.templates.getClass().getName() == orig(data.structures.Schema.this.text.templates.getClass().getName())
data.structures.Schema.this.text.lut == orig(data.structures.Schema.this.text.lut)
data.structures.Schema.this.text.lut[] == orig(data.structures.Schema.this.text.lut[])
data.structures.Schema.this.text.lut.getClass().getName() == orig(data.structures.Schema.this.text.lut.getClass().getName())
data.structures.Schema.this.text.maxLength == orig(data.structures.Schema.this.text.maxLength)
data.structures.Schema.this.startMask == orig(data.structures.Schema.this.startMask)
data.structures.Schema.this.endMask == orig(data.structures.Schema.this.endMask)
data.structures.Schema.this.rest == orig(data.structures.Schema.this.rest)
===========================================================================
data.structures.Schema$1.hasNext():::ENTER
===========================================================================
data.structures.Schema$1.hasNext():::EXIT
this.curPos == orig(this.curPos)
data.structures.Schema.this == orig(data.structures.Schema.this)
data.structures.Schema.this.text == orig(data.structures.Schema.this.text)
data.structures.Schema.this.text.k == orig(data.structures.Schema.this.text.k)
data.structures.Schema.this.text.k.toString == orig(data.structures.Schema.this.text.k.toString)
data.structures.Schema.this.text.templates == orig(data.structures.Schema.this.text.templates)
data.structures.Schema.this.text.templates[] == orig(data.structures.Schema.this.text.templates[])
data.structures.Schema.this.text.templates.getClass().getName() == orig(data.structures.Schema.this.text.templates.getClass().getName())
data.structures.Schema.this.text.lut == orig(data.structures.Schema.this.text.lut)
data.structures.Schema.this.text.lut[] == orig(data.structures.Schema.this.text.lut[])
data.structures.Schema.this.text.lut.getClass().getName() == orig(data.structures.Schema.this.text.lut.getClass().getName())
data.structures.Schema.this.text.maxLength == orig(data.structures.Schema.this.text.maxLength)
data.structures.Schema.this.startMask == orig(data.structures.Schema.this.startMask)
data.structures.Schema.this.endMask == orig(data.structures.Schema.this.endMask)
data.structures.Schema.this.rest == orig(data.structures.Schema.this.rest)
===========================================================================
data.structures.Schema$1.hasNext():::EXIT;condition="return == true"
return == true
===========================================================================
data.structures.Schema$1.hasNext():::EXIT;condition="not(return == true)"
return == false
===========================================================================
data.structures.Schema$1.next():::ENTER
===========================================================================
data.structures.Schema$1.next():::EXIT
data.structures.Schema.this == orig(data.structures.Schema.this)
data.structures.Schema.this.text == orig(data.structures.Schema.this.text)
data.structures.Schema.this.text.k == orig(data.structures.Schema.this.text.k)
data.structures.Schema.this.text.k.toString == orig(data.structures.Schema.this.text.k.toString)
data.structures.Schema.this.text.templates == orig(data.structures.Schema.this.text.templates)
data.structures.Schema.this.text.templates[] == orig(data.structures.Schema.this.text.templates[])
data.structures.Schema.this.text.templates.getClass().getName() == orig(data.structures.Schema.this.text.templates.getClass().getName())
data.structures.Schema.this.text.lut == orig(data.structures.Schema.this.text.lut)
data.structures.Schema.this.text.lut[] == orig(data.structures.Schema.this.text.lut[])
data.structures.Schema.this.text.lut.getClass().getName() == orig(data.structures.Schema.this.text.lut.getClass().getName())
data.structures.Schema.this.text.maxLength == orig(data.structures.Schema.this.text.maxLength)
data.structures.Schema.this.startMask == orig(data.structures.Schema.this.startMask)
data.structures.Schema.this.endMask == orig(data.structures.Schema.this.endMask)
data.structures.Schema.this.rest == orig(data.structures.Schema.this.rest)
return != null
this.curPos - orig(this.curPos) - 1 == 0
===========================================================================
data.structures.Schema:::OBJECT
this.text.templates.getClass().getName() == this.text.lut.getClass().getName()
this.text != null
this.text.k != null
this.text.k.toString one of { "# # und #, # f\374r # vom 12.11.2011 an den Dekan der Fakult\344t #, Herrn # # #, # Sie auf die # des Rektorats # der # reagieren. Wir # uns # Ihr Interesse, # \374ber das von Ihnen # # Urteil zu unserer bisherigen # # der #. # erkennen wir # der von Ihnen # # an. # die # nutzen und Ihnen die # # # #.", "# # und #, # f\374r # vom 12.11.2011 auf die #. Wir # uns zwar stets \374ber #, ich # # # #, dass das Rektorat # die zu # # # und auf # nur # eingegangen werden kann. Es steht fest, dass # # wird, auch wenn die # des SMWK # abgewiesen werden. Bitte finden Sie sich # mit dem gefassten # ab. # # ich Sie bitten, # die zu # # zu nennen, damit wir dem SMWK unsere konkreten # # k\366nnen." }
this.text.templates != null
this.text.templates[] elements != null
this.text.templates[].getClass().getName() == [data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template]
this.text.templates[].getClass().getName() elements == data.structures.Template.class
this.text.templates.getClass().getName() == java.util.ArrayList.class
this.text.lut != null
this.text.lut[] elements != null
this.text.lut[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.text.lut[].getClass().getName() elements == java.lang.Integer.class
this.text.maxLength one of { 661, 730 }
this.startMask >= 0
this.rest == 0
size(this.text.templates[]) == 31
size(this.text.lut[]) == 31
===========================================================================
data.structures.Schema.Schema(data.structures.Text, int, long):::ENTER
arg0.templates.getClass().getName() == arg0.lut.getClass().getName()
arg0.k.toString one of { "# # und #, # f\374r # vom 12.11.2011 an den Dekan der Fakult\344t #, Herrn # # #, # Sie auf die # des Rektorats # der # reagieren. Wir # uns # Ihr Interesse, # \374ber das von Ihnen # # Urteil zu unserer bisherigen # # der #. # erkennen wir # der von Ihnen # # an. # die # nutzen und Ihnen die # # # #.", "# # und #, # f\374r # vom 12.11.2011 auf die #. Wir # uns zwar stets \374ber #, ich # # # #, dass das Rektorat # die zu # # # und auf # nur # eingegangen werden kann. Es steht fest, dass # # wird, auch wenn die # des SMWK # abgewiesen werden. Bitte finden Sie sich # mit dem gefassten # ab. # # ich Sie bitten, # die zu # # zu nennen, damit wir dem SMWK unsere konkreten # # k\366nnen." }
arg0.templates[].getClass().getName() == [data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template]
arg0.templates[].getClass().getName() elements == data.structures.Template.class
arg0.templates.getClass().getName() == java.util.ArrayList.class
arg0.lut[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
arg0.lut[].getClass().getName() elements == java.lang.Integer.class
arg0.maxLength one of { 661, 730 }
arg1 == 8
arg2 == 0
size(arg0.templates[]) == 31
size(arg0.lut[]) == 31
===========================================================================
data.structures.Schema.Schema(data.structures.Text, int, long):::EXIT
this.text == orig(arg0)
this.text.k == arg0.k
this.text.templates == arg0.templates
this.text.templates.getClass().getName() == arg0.templates.getClass().getName()
this.text.lut == arg0.lut
this.text.lut.getClass().getName() == arg0.templates.getClass().getName()
this.text.maxLength == arg0.maxLength
arg0.k == orig(arg0.k)
arg0.k.toString == orig(arg0.k.toString)
arg0.templates == orig(arg0.templates)
arg0.templates[] == orig(arg0.templates[])
arg0.templates.getClass().getName() == arg0.lut.getClass().getName()
arg0.templates.getClass().getName() == orig(arg0.templates.getClass().getName())
arg0.templates.getClass().getName() == orig(arg0.lut.getClass().getName())
arg0.lut == orig(arg0.lut)
arg0.lut[] == orig(arg0.lut[])
arg0.maxLength == orig(arg0.maxLength)
this.startMask == 0
this.endMask == 255
arg0.k.toString one of { "# # und #, # f\374r # vom 12.11.2011 an den Dekan der Fakult\344t #, Herrn # # #, # Sie auf die # des Rektorats # der # reagieren. Wir # uns # Ihr Interesse, # \374ber das von Ihnen # # Urteil zu unserer bisherigen # # der #. # erkennen wir # der von Ihnen # # an. # die # nutzen und Ihnen die # # # #.", "# # und #, # f\374r # vom 12.11.2011 auf die #. Wir # uns zwar stets \374ber #, ich # # # #, dass das Rektorat # die zu # # # und auf # nur # eingegangen werden kann. Es steht fest, dass # # wird, auch wenn die # des SMWK # abgewiesen werden. Bitte finden Sie sich # mit dem gefassten # ab. # # ich Sie bitten, # die zu # # zu nennen, damit wir dem SMWK unsere konkreten # # k\366nnen." }
arg0.templates[].getClass().getName() == [data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template]
arg0.templates[].getClass().getName() elements == data.structures.Template.class
arg0.templates.getClass().getName() == java.util.ArrayList.class
arg0.lut[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
arg0.lut[].getClass().getName() elements == java.lang.Integer.class
arg0.maxLength one of { 661, 730 }
size(arg0.templates[]) == 31
size(arg0.lut[]) == 31
===========================================================================
data.structures.Schema.Schema(data.structures.Text, long, long, long):::ENTER
arg0.templates.getClass().getName() == arg0.lut.getClass().getName()
arg0 != null
arg0.k != null
arg0.k.toString one of { "# # und #, # f\374r # vom 12.11.2011 an den Dekan der Fakult\344t #, Herrn # # #, # Sie auf die # des Rektorats # der # reagieren. Wir # uns # Ihr Interesse, # \374ber das von Ihnen # # Urteil zu unserer bisherigen # # der #. # erkennen wir # der von Ihnen # # an. # die # nutzen und Ihnen die # # # #.", "# # und #, # f\374r # vom 12.11.2011 auf die #. Wir # uns zwar stets \374ber #, ich # # # #, dass das Rektorat # die zu # # # und auf # nur # eingegangen werden kann. Es steht fest, dass # # wird, auch wenn die # des SMWK # abgewiesen werden. Bitte finden Sie sich # mit dem gefassten # ab. # # ich Sie bitten, # die zu # # zu nennen, damit wir dem SMWK unsere konkreten # # k\366nnen." }
arg0.templates != null
arg0.templates[] elements != null
arg0.templates[].getClass().getName() == [data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template]
arg0.templates[].getClass().getName() elements == data.structures.Template.class
arg0.templates.getClass().getName() == java.util.ArrayList.class
arg0.lut != null
arg0.lut[] elements != null
arg0.lut[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
arg0.lut[].getClass().getName() elements == java.lang.Integer.class
arg0.maxLength one of { 661, 730 }
arg3 == 0
size(arg0.templates[]) == 31
size(arg0.lut[]) == 31
===========================================================================
data.structures.Schema.Schema(data.structures.Text, long, long, long):::EXIT
this.text.templates.getClass().getName() == arg0.templates.getClass().getName()
this.text.lut.getClass().getName() == arg0.templates.getClass().getName()
arg0.k == orig(arg0.k)
arg0.k.toString == orig(arg0.k.toString)
arg0.templates == orig(arg0.templates)
arg0.templates[] == orig(arg0.templates[])
arg0.templates.getClass().getName() == arg0.lut.getClass().getName()
arg0.templates.getClass().getName() == orig(arg0.templates.getClass().getName())
arg0.templates.getClass().getName() == orig(arg0.lut.getClass().getName())
arg0.lut == orig(arg0.lut)
arg0.lut[] == orig(arg0.lut[])
arg0.maxLength == orig(arg0.maxLength)
arg0.k != null
arg0.k.toString one of { "# # und #, # f\374r # vom 12.11.2011 an den Dekan der Fakult\344t #, Herrn # # #, # Sie auf die # des Rektorats # der # reagieren. Wir # uns # Ihr Interesse, # \374ber das von Ihnen # # Urteil zu unserer bisherigen # # der #. # erkennen wir # der von Ihnen # # an. # die # nutzen und Ihnen die # # # #.", "# # und #, # f\374r # vom 12.11.2011 auf die #. Wir # uns zwar stets \374ber #, ich # # # #, dass das Rektorat # die zu # # # und auf # nur # eingegangen werden kann. Es steht fest, dass # # wird, auch wenn die # des SMWK # abgewiesen werden. Bitte finden Sie sich # mit dem gefassten # ab. # # ich Sie bitten, # die zu # # zu nennen, damit wir dem SMWK unsere konkreten # # k\366nnen." }
arg0.templates != null
arg0.templates[] elements != null
arg0.templates[].getClass().getName() == [data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template]
arg0.templates[].getClass().getName() elements == data.structures.Template.class
arg0.templates.getClass().getName() == java.util.ArrayList.class
arg0.lut != null
arg0.lut[] elements != null
arg0.lut[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
arg0.lut[].getClass().getName() elements == java.lang.Integer.class
arg0.maxLength one of { 661, 730 }
size(arg0.templates[]) == 31
size(arg0.lut[]) == 31
===========================================================================
data.structures.Schema.getSentence(long):::ENTER
===========================================================================
data.structures.Schema.getSentence(long):::EXIT
this.text == orig(this.text)
this.text.k == orig(this.text.k)
this.text.k.toString == orig(this.text.k.toString)
this.text.templates == orig(this.text.templates)
this.text.templates[] == orig(this.text.templates[])
this.text.templates.getClass().getName() == orig(this.text.templates.getClass().getName())
this.text.templates.getClass().getName() == orig(this.text.lut.getClass().getName())
this.text.lut == orig(this.text.lut)
this.text.lut[] == orig(this.text.lut[])
this.text.maxLength == orig(this.text.maxLength)
this.startMask == orig(this.startMask)
this.endMask == orig(this.endMask)
this.rest == orig(this.rest)
return != null
===========================================================================
data.structures.Schema.iterator():::ENTER
===========================================================================
data.structures.Schema.iterator():::EXIT
this.text == orig(this.text)
this.text.k == orig(this.text.k)
this.text.k.toString == orig(this.text.k.toString)
this.text.templates == orig(this.text.templates)
this.text.templates[] == orig(this.text.templates[])
this.text.templates.getClass().getName() == orig(this.text.templates.getClass().getName())
this.text.templates.getClass().getName() == orig(this.text.lut.getClass().getName())
this.text.lut == orig(this.text.lut)
this.text.lut[] == orig(this.text.lut[])
this.text.maxLength == orig(this.text.maxLength)
this.startMask == orig(this.startMask)
this.endMask == orig(this.endMask)
this.rest == orig(this.rest)
return != null
return.getClass().getName() == data.structures.Schema$1.class
this.text.templates.getClass().getName() != return.getClass().getName()
===========================================================================
data.structures.Schema.split(int):::ENTER
this.startMask == 0
this.endMask == 255
arg0 == 8
===========================================================================
data.structures.Schema.split(int):::EXIT
this.text == orig(this.text)
this.text.k == orig(this.text.k)
this.text.k.toString == orig(this.text.k.toString)
this.text.templates == orig(this.text.templates)
this.text.templates[] == orig(this.text.templates[])
this.text.templates.getClass().getName() == orig(this.text.templates.getClass().getName())
this.text.templates.getClass().getName() == orig(this.text.lut.getClass().getName())
this.text.lut == orig(this.text.lut)
this.text.lut[] == orig(this.text.lut[])
this.text.maxLength == orig(this.text.maxLength)
this.startMask == orig(this.startMask)
this.endMask == orig(this.endMask)
this.rest == orig(this.rest)
this.startMask == 0
this.endMask == 255
return.getClass().getName() == data.structures.SchemaInterface[].class
size(return[]) == 8
===========================================================================
data.structures.Schema.transformRest(long):::ENTER
this.startMask == 0
this.endMask == 255
arg0 == 0
===========================================================================
data.structures.Schema.transformRest(long):::EXIT
this.text == orig(this.text)
this.text.k == orig(this.text.k)
this.text.k.toString == orig(this.text.k.toString)
this.text.templates == orig(this.text.templates)
this.text.templates[] == orig(this.text.templates[])
this.text.templates.getClass().getName() == orig(this.text.templates.getClass().getName())
this.text.templates.getClass().getName() == orig(this.text.lut.getClass().getName())
this.text.lut == orig(this.text.lut)
this.text.lut[] == orig(this.text.lut[])
this.text.maxLength == orig(this.text.maxLength)
this.startMask == orig(this.startMask)
this.endMask == orig(this.endMask)
this.rest == orig(this.rest)
this.startMask == 0
this.endMask == 255
return == 0
===========================================================================
data.structures.Template:::OBJECT
this.key != null
this.value != null
===========================================================================
data.structures.Template.Template(java.lang.String, java.lang.String):::ENTER
arg0 != null
arg1 != null
===========================================================================
data.structures.Template.Template(java.lang.String, java.lang.String):::EXIT
this.key == orig(arg0)
this.value == orig(arg1)
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
===========================================================================
data.structures.Text:::OBJECT
this.templates.getClass().getName() == this.lut.getClass().getName()
this.k.toString one of { "# # und #, # f\374r # vom 12.11.2011 an den Dekan der Fakult\344t #, Herrn # # #, # Sie auf die # des Rektorats # der # reagieren. Wir # uns # Ihr Interesse, # \374ber das von Ihnen # # Urteil zu unserer bisherigen # # der #. # erkennen wir # der von Ihnen # # an. # die # nutzen und Ihnen die # # # #.", "# # und #, # f\374r # vom 12.11.2011 auf die #. Wir # uns zwar stets \374ber #, ich # # # #, dass das Rektorat # die zu # # # und auf # nur # eingegangen werden kann. Es steht fest, dass # # wird, auch wenn die # des SMWK # abgewiesen werden. Bitte finden Sie sich # mit dem gefassten # ab. # # ich Sie bitten, # die zu # # zu nennen, damit wir dem SMWK unsere konkreten # # k\366nnen." }
this.templates[] elements != null
this.templates[].getClass().getName() == [data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template]
this.templates[].getClass().getName() elements == data.structures.Template.class
this.templates.getClass().getName() == java.util.ArrayList.class
this.lut != null
this.lut[] elements != null
this.lut[].getClass().getName() elements == java.lang.Integer.class
this.lut[].getClass().getName() one of { [], [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] }
this.lut.getClass().getName() == java.util.ArrayList.class
this.maxLength one of { 0, 661, 730 }
size(this.templates[]) == 31
size(this.lut[]) one of { 0, 31 }
size(this.lut[])-1 != 0
===========================================================================
data.structures.Text.Text(java.lang.String, java.util.List):::ENTER
arg0.toString one of { "# # und #, # f\374r # vom 12.11.2011 an den Dekan der Fakult\344t #, Herrn # # #, # Sie auf die # des Rektorats # der # reagieren. Wir # uns # Ihr Interesse, # \374ber das von Ihnen # # Urteil zu unserer bisherigen # # der #. # erkennen wir # der von Ihnen # # an. # die # nutzen und Ihnen die # # # #.", "# # und #, # f\374r # vom 12.11.2011 auf die #. Wir # uns zwar stets \374ber #, ich # # # #, dass das Rektorat # die zu # # # und auf # nur # eingegangen werden kann. Es steht fest, dass # # wird, auch wenn die # des SMWK # abgewiesen werden. Bitte finden Sie sich # mit dem gefassten # ab. # # ich Sie bitten, # die zu # # zu nennen, damit wir dem SMWK unsere konkreten # # k\366nnen." }
arg1[].getClass().getName() == [data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template]
arg1[].getClass().getName() elements == data.structures.Template.class
arg1.getClass().getName() == java.util.ArrayList.class
size(arg1[]) == 31
===========================================================================
data.structures.Text.Text(java.lang.String, java.util.List):::EXIT
this.k == orig(arg0)
this.templates == orig(arg1)
this.templates.getClass().getName() == orig(arg1.getClass().getName())
arg0.toString == orig(arg0.toString)
arg1[] == orig(arg1[])
this.lut[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.maxLength one of { 661, 730 }
arg0.toString one of { "# # und #, # f\374r # vom 12.11.2011 an den Dekan der Fakult\344t #, Herrn # # #, # Sie auf die # des Rektorats # der # reagieren. Wir # uns # Ihr Interesse, # \374ber das von Ihnen # # Urteil zu unserer bisherigen # # der #. # erkennen wir # der von Ihnen # # an. # die # nutzen und Ihnen die # # # #.", "# # und #, # f\374r # vom 12.11.2011 auf die #. Wir # uns zwar stets \374ber #, ich # # # #, dass das Rektorat # die zu # # # und auf # nur # eingegangen werden kann. Es steht fest, dass # # wird, auch wenn die # des SMWK # abgewiesen werden. Bitte finden Sie sich # mit dem gefassten # ab. # # ich Sie bitten, # die zu # # zu nennen, damit wir dem SMWK unsere konkreten # # k\366nnen." }
arg1[].getClass().getName() == [data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template]
arg1[].getClass().getName() elements == data.structures.Template.class
size(this.lut[]) == 31
===========================================================================
data.structures.Text.calcMaxLength():::ENTER
this.lut[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.maxLength == 0
size(this.lut[]) == 31
===========================================================================
data.structures.Text.calcMaxLength():::EXIT
this.k == orig(this.k)
this.k.toString == orig(this.k.toString)
this.templates == orig(this.templates)
this.templates[] == orig(this.templates[])
this.templates.getClass().getName() == orig(this.templates.getClass().getName())
this.templates.getClass().getName() == orig(this.lut.getClass().getName())
this.lut == orig(this.lut)
this.lut[] == orig(this.lut[])
this.maxLength == orig(this.maxLength)
this.lut[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.maxLength == 0
return one of { 661, 730 }
size(this.lut[]) == 31
===========================================================================
data.structures.Text.getMaxLength():::ENTER
this.k != null
this.templates != null
this.lut[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.maxLength one of { 661, 730 }
size(this.lut[]) == 31
===========================================================================
data.structures.Text.getMaxLength():::EXIT
this.k == orig(this.k)
this.k.toString == orig(this.k.toString)
this.templates == orig(this.templates)
this.templates[] == orig(this.templates[])
this.templates.getClass().getName() == orig(this.templates.getClass().getName())
this.templates.getClass().getName() == orig(this.lut.getClass().getName())
this.lut == orig(this.lut)
this.lut[] == orig(this.lut[])
this.maxLength == return
return == orig(this.maxLength)
this.k != null
this.templates != null
this.lut[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
return one of { 661, 730 }
size(this.lut[]) == 31
===========================================================================
data.structures.Text.getPosInText(int):::ENTER
this.k != null
this.templates != null
this.lut[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.maxLength one of { 661, 730 }
arg0 >= 0
size(this.lut[]) == 31
this.maxLength > arg0
===========================================================================
data.structures.Text.getPosInText(int):::EXIT
this.k == orig(this.k)
this.k.toString == orig(this.k.toString)
this.templates == orig(this.templates)
this.templates[] == orig(this.templates[])
this.templates.getClass().getName() == orig(this.templates.getClass().getName())
this.templates.getClass().getName() == orig(this.lut.getClass().getName())
this.lut == orig(this.lut)
this.lut[] == orig(this.lut[])
this.maxLength == orig(this.maxLength)
this.k != null
this.templates != null
this.lut[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.maxLength one of { 661, 730 }
return >= 0
size(this.lut[]) == 31
this.maxLength > return
this.maxLength > orig(arg0)
return >= orig(arg0)
===========================================================================
data.structures.Text.getTemplateContent(int, boolean):::ENTER
this.k != null
this.templates != null
this.lut[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.maxLength one of { 661, 730 }
arg0 >= 0
size(this.lut[]) == 31
this.maxLength > arg0
===========================================================================
data.structures.Text.getTemplateContent(int, boolean):::EXIT
this.k == orig(this.k)
this.k.toString == orig(this.k.toString)
this.templates == orig(this.templates)
this.templates[] == orig(this.templates[])
this.templates.getClass().getName() == orig(this.templates.getClass().getName())
this.templates.getClass().getName() == orig(this.lut.getClass().getName())
this.lut == orig(this.lut)
this.lut[] == orig(this.lut[])
this.maxLength == orig(this.maxLength)
this.k != null
this.templates != null
this.lut[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.maxLength one of { 661, 730 }
return != null
size(this.lut[]) == 31
this.maxLength > orig(arg0)
===========================================================================
data.structures.Text.getTemplateCount():::ENTER
this.k != null
this.templates != null
this.lut[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.maxLength one of { 661, 730 }
size(this.lut[]) == 31
===========================================================================
data.structures.Text.getTemplateCount():::EXIT
this.k == orig(this.k)
this.k.toString == orig(this.k.toString)
this.templates == orig(this.templates)
this.templates[] == orig(this.templates[])
this.templates.getClass().getName() == orig(this.templates.getClass().getName())
this.templates.getClass().getName() == orig(this.lut.getClass().getName())
this.lut == orig(this.lut)
this.lut[] == orig(this.lut[])
this.maxLength == orig(this.maxLength)
this.k != null
this.templates != null
this.lut[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.maxLength one of { 661, 730 }
return == 31
size(this.lut[]) == 31
this.maxLength > return
===========================================================================
data.structures.Text.matches(java.lang.String, java.util.List):::ENTER
this.lut.getClass().getName() == arg1.getClass().getName()
this.k == null
this.templates == null
this.lut[] == []
this.lut[].getClass().getName() == []
this.maxLength == 0
arg0.toString one of { "# # und #, # f\374r # vom 12.11.2011 an den Dekan der Fakult\344t #, Herrn # # #, # Sie auf die # des Rektorats # der # reagieren. Wir # uns # Ihr Interesse, # \374ber das von Ihnen # # Urteil zu unserer bisherigen # # der #. # erkennen wir # der von Ihnen # # an. # die # nutzen und Ihnen die # # # #.", "# # und #, # f\374r # vom 12.11.2011 auf die #. Wir # uns zwar stets \374ber #, ich # # # #, dass das Rektorat # die zu # # # und auf # nur # eingegangen werden kann. Es steht fest, dass # # wird, auch wenn die # des SMWK # abgewiesen werden. Bitte finden Sie sich # mit dem gefassten # ab. # # ich Sie bitten, # die zu # # zu nennen, damit wir dem SMWK unsere konkreten # # k\366nnen." }
arg1[].getClass().getName() == [data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template]
arg1[].getClass().getName() elements == data.structures.Template.class
size(arg1[]) == 31
===========================================================================
data.structures.Text.matches(java.lang.String, java.util.List):::EXIT
this.k == orig(this.k)
this.templates == orig(this.templates)
this.lut == orig(this.lut)
this.lut.getClass().getName() == orig(this.lut.getClass().getName())
this.lut.getClass().getName() == orig(arg1.getClass().getName())
this.maxLength == orig(this.maxLength)
arg0.toString == orig(arg0.toString)
arg1[] == orig(arg1[])
this.k == null
this.templates == null
this.lut[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.maxLength == 0
arg0.toString one of { "# # und #, # f\374r # vom 12.11.2011 an den Dekan der Fakult\344t #, Herrn # # #, # Sie auf die # des Rektorats # der # reagieren. Wir # uns # Ihr Interesse, # \374ber das von Ihnen # # Urteil zu unserer bisherigen # # der #. # erkennen wir # der von Ihnen # # an. # die # nutzen und Ihnen die # # # #.", "# # und #, # f\374r # vom 12.11.2011 auf die #. Wir # uns zwar stets \374ber #, ich # # # #, dass das Rektorat # die zu # # # und auf # nur # eingegangen werden kann. Es steht fest, dass # # wird, auch wenn die # des SMWK # abgewiesen werden. Bitte finden Sie sich # mit dem gefassten # ab. # # ich Sie bitten, # die zu # # zu nennen, damit wir dem SMWK unsere konkreten # # k\366nnen." }
arg1[].getClass().getName() == [data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template]
arg1[].getClass().getName() elements == data.structures.Template.class
return == true
size(this.lut[]) == 31
===========================================================================
data.structures.Text.matches(java.lang.String, java.util.List):::EXIT;condition="return == true"
===========================================================================
main.Main:::CLASS
main.Main.k.templates.getClass().getName() == main.Main.k.lut.getClass().getName()
main.Main.k.templates.getClass().getName() == main.Main.k_.templates.getClass().getName()
main.Main.k.templates.getClass().getName() == main.Main.k_.lut.getClass().getName()
main.Main.k has only one value
main.Main.k != null
main.Main.k.k has only one value
main.Main.k.k != null
main.Main.k.k.toString == "# # und #, # f\374r # vom 12.11.2011 an den Dekan der Fakult\344t #, Herrn # # #, # Sie auf die # des Rektorats # der # reagieren. Wir # uns # Ihr Interesse, # \374ber das von Ihnen # # Urteil zu unserer bisherigen # # der #. # erkennen wir # der von Ihnen # # an. # die # nutzen und Ihnen die # # # #."
main.Main.k.templates has only one value
main.Main.k.templates != null
main.Main.k.templates[] contains no nulls and has only one value, of length 31
main.Main.k.templates[] elements != null
main.Main.k.templates[].getClass().getName() == [data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template]
main.Main.k.templates[].getClass().getName() elements == data.structures.Template.class
main.Main.k.templates.getClass().getName() == java.util.ArrayList.class
main.Main.k.lut has only one value
main.Main.k.lut != null
main.Main.k.lut[] contains no nulls and has only one value, of length 31
main.Main.k.lut[] elements != null
main.Main.k.lut[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
main.Main.k.lut[].getClass().getName() elements == java.lang.Integer.class
main.Main.k.maxLength == 661
main.Main.k_ has only one value
main.Main.k_ != null
main.Main.k_.k has only one value
main.Main.k_.k != null
main.Main.k_.k.toString == "# # und #, # f\374r # vom 12.11.2011 auf die #. Wir # uns zwar stets \374ber #, ich # # # #, dass das Rektorat # die zu # # # und auf # nur # eingegangen werden kann. Es steht fest, dass # # wird, auch wenn die # des SMWK # abgewiesen werden. Bitte finden Sie sich # mit dem gefassten # ab. # # ich Sie bitten, # die zu # # zu nennen, damit wir dem SMWK unsere konkreten # # k\366nnen."
main.Main.k_.templates has only one value
main.Main.k_.templates != null
main.Main.k_.templates[] contains no nulls and has only one value, of length 31
main.Main.k_.templates[] elements != null
main.Main.k_.templates[].getClass().getName() == [data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template, data.structures.Template]
main.Main.k_.templates[].getClass().getName() elements == data.structures.Template.class
main.Main.k_.lut has only one value
main.Main.k_.lut != null
main.Main.k_.lut[] contains no nulls and has only one value, of length 31
main.Main.k_.lut[] elements != null
main.Main.k_.lut[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
main.Main.k_.lut[].getClass().getName() elements == java.lang.Integer.class
main.Main.k_.maxLength == 730
main.Main.hashmap has only one value
main.Main.hashmap != null
main.Main.skandium has only one value
main.Main.skandium != null
main.Main.skandium.executor has only one value
main.Main.skandium.executor != null
cl.niclabs.skandium.Skandium.singleton == null
size(main.Main.k.templates[]) == 31
size(main.Main.k.lut[]) == 31
size(main.Main.k_.templates[]) == 31
size(main.Main.k_.lut[]) == 31
===========================================================================
main.Main.byteToString(byte[]):::ENTER
arg0 != null
size(arg0[]) == 2
===========================================================================
main.Main.byteToString(byte[]):::EXIT
main.Main.k == orig(main.Main.k)
main.Main.k.k == orig(main.Main.k.k)
main.Main.k.k.toString == orig(main.Main.k.k.toString)
main.Main.k.templates == orig(main.Main.k.templates)
main.Main.k.templates[] == orig(main.Main.k.templates[])
main.Main.k.templates.getClass().getName() == orig(main.Main.k.templates.getClass().getName())
main.Main.k.templates.getClass().getName() == orig(main.Main.k.lut.getClass().getName())
main.Main.k.templates.getClass().getName() == orig(main.Main.k_.templates.getClass().getName())
main.Main.k.templates.getClass().getName() == orig(main.Main.k_.lut.getClass().getName())
main.Main.k.lut == orig(main.Main.k.lut)
main.Main.k.lut[] == orig(main.Main.k.lut[])
main.Main.k.maxLength == orig(main.Main.k.maxLength)
main.Main.k_ == orig(main.Main.k_)
main.Main.k_.k == orig(main.Main.k_.k)
main.Main.k_.k.toString == orig(main.Main.k_.k.toString)
main.Main.k_.templates == orig(main.Main.k_.templates)
main.Main.k_.templates[] == orig(main.Main.k_.templates[])
main.Main.k_.lut == orig(main.Main.k_.lut)
main.Main.k_.lut[] == orig(main.Main.k_.lut[])
main.Main.k_.maxLength == orig(main.Main.k_.maxLength)
main.Main.hashmap == orig(main.Main.hashmap)
main.Main.skandium == orig(main.Main.skandium)
main.Main.skandium.executor == orig(main.Main.skandium.executor)
cl.niclabs.skandium.Skandium.singleton == orig(cl.niclabs.skandium.Skandium.singleton)
arg0[] == orig(arg0[])
return != null
===========================================================================
main.Main.fillTrieWithHashes(data.structures.HashList, int):::ENTER
arg0 has only one value
arg1 == 8
===========================================================================
main.Main.fillTrieWithHashes(data.structures.HashList, int):::EXIT
main.Main.k == orig(main.Main.k)
main.Main.k.k == orig(main.Main.k.k)
main.Main.k.k.toString == orig(main.Main.k.k.toString)
main.Main.k.templates == orig(main.Main.k.templates)
main.Main.k.templates[] == orig(main.Main.k.templates[])
main.Main.k.templates.getClass().getName() == orig(main.Main.k.templates.getClass().getName())
main.Main.k.templates.getClass().getName() == orig(main.Main.k.lut.getClass().getName())
main.Main.k.templates.getClass().getName() == orig(main.Main.k_.templates.getClass().getName())
main.Main.k.templates.getClass().getName() == orig(main.Main.k_.lut.getClass().getName())
main.Main.k.lut == orig(main.Main.k.lut)
main.Main.k.lut[] == orig(main.Main.k.lut[])
main.Main.k.maxLength == orig(main.Main.k.maxLength)
main.Main.k_ == orig(main.Main.k_)
main.Main.k_.k == orig(main.Main.k_.k)
main.Main.k_.k.toString == orig(main.Main.k_.k.toString)
main.Main.k_.templates == orig(main.Main.k_.templates)
main.Main.k_.templates[] == orig(main.Main.k_.templates[])
main.Main.k_.lut == orig(main.Main.k_.lut)
main.Main.k_.lut[] == orig(main.Main.k_.lut[])
main.Main.k_.maxLength == orig(main.Main.k_.maxLength)
main.Main.hashmap == orig(main.Main.hashmap)
main.Main.skandium == orig(main.Main.skandium)
main.Main.skandium.executor == orig(main.Main.skandium.executor)
cl.niclabs.skandium.Skandium.singleton == orig(cl.niclabs.skandium.Skandium.singleton)
===========================================================================
main.Main.findCollisions(data.structures.HashList, int):::ENTER
arg0 has only one value
arg1 == 8
===========================================================================
main.Main.findCollisions(data.structures.HashList, int):::EXIT
main.Main.k == orig(main.Main.k)
main.Main.k.k == orig(main.Main.k.k)
main.Main.k.k.toString == orig(main.Main.k.k.toString)
main.Main.k.templates == orig(main.Main.k.templates)
main.Main.k.templates[] == orig(main.Main.k.templates[])
main.Main.k.templates.getClass().getName() == orig(main.Main.k.templates.getClass().getName())
main.Main.k.templates.getClass().getName() == orig(main.Main.k.lut.getClass().getName())
main.Main.k.templates.getClass().getName() == orig(main.Main.k_.templates.getClass().getName())
main.Main.k.templates.getClass().getName() == orig(main.Main.k_.lut.getClass().getName())
main.Main.k.lut == orig(main.Main.k.lut)
main.Main.k.lut[] == orig(main.Main.k.lut[])
main.Main.k.maxLength == orig(main.Main.k.maxLength)
main.Main.k_ == orig(main.Main.k_)
main.Main.k_.k == orig(main.Main.k_.k)
main.Main.k_.k.toString == orig(main.Main.k_.k.toString)
main.Main.k_.templates == orig(main.Main.k_.templates)
main.Main.k_.templates[] == orig(main.Main.k_.templates[])
main.Main.k_.lut == orig(main.Main.k_.lut)
main.Main.k_.lut[] == orig(main.Main.k_.lut[])
main.Main.k_.maxLength == orig(main.Main.k_.maxLength)
main.Main.hashmap == orig(main.Main.hashmap)
main.Main.skandium == orig(main.Main.skandium)
main.Main.skandium.executor == orig(main.Main.skandium.executor)
cl.niclabs.skandium.Skandium.singleton == orig(cl.niclabs.skandium.Skandium.singleton)
return has only one value
===========================================================================
main.Main.hashFromSchema(data.structures.SchemaInterface, int, int):::ENTER
arg0.getClass().getName() == data.structures.Schema.class
arg1 == 8
arg2 == 2
===========================================================================
main.Main.hashFromSchema(data.structures.SchemaInterface, int, int):::EXIT
main.Main.k == orig(main.Main.k)
main.Main.k.k == orig(main.Main.k.k)
main.Main.k.k.toString == orig(main.Main.k.k.toString)
main.Main.k.templates == orig(main.Main.k.templates)
main.Main.k.templates[] == orig(main.Main.k.templates[])
main.Main.k.templates.getClass().getName() == orig(main.Main.k.templates.getClass().getName())
main.Main.k.templates.getClass().getName() == orig(main.Main.k.lut.getClass().getName())
main.Main.k.templates.getClass().getName() == orig(main.Main.k_.templates.getClass().getName())
main.Main.k.templates.getClass().getName() == orig(main.Main.k_.lut.getClass().getName())
main.Main.k.lut == orig(main.Main.k.lut)
main.Main.k.lut[] == orig(main.Main.k.lut[])
main.Main.k.maxLength == orig(main.Main.k.maxLength)
main.Main.k_ == orig(main.Main.k_)
main.Main.k_.k == orig(main.Main.k_.k)
main.Main.k_.k.toString == orig(main.Main.k_.k.toString)
main.Main.k_.templates == orig(main.Main.k_.templates)
main.Main.k_.templates[] == orig(main.Main.k_.templates[])
main.Main.k_.lut == orig(main.Main.k_.lut)
main.Main.k_.lut[] == orig(main.Main.k_.lut[])
main.Main.k_.maxLength == orig(main.Main.k_.maxLength)
main.Main.hashmap == orig(main.Main.hashmap)
main.Main.skandium == orig(main.Main.skandium)
main.Main.skandium.executor == orig(main.Main.skandium.executor)
cl.niclabs.skandium.Skandium.singleton == orig(cl.niclabs.skandium.Skandium.singleton)
===========================================================================
org.apache.commons.codec.digest.DigestUtils:::CLASS
===========================================================================
org.apache.commons.codec.digest.DigestUtils.getDigest(java.lang.String):::ENTER
algorithm has only one value
algorithm != null
algorithm.toString == "SHA-256"
===========================================================================
org.apache.commons.codec.digest.DigestUtils.getDigest(java.lang.String):::EXIT
algorithm.toString == orig(algorithm.toString)
algorithm.toString == "SHA-256"
return != null
return.getClass().getName() == java.security.MessageDigest$Delegate.class
===========================================================================
org.apache.commons.codec.digest.DigestUtils.getSha256Digest():::ENTER
===========================================================================
org.apache.commons.codec.digest.DigestUtils.getSha256Digest():::EXIT
return != null
return.getClass().getName() == java.security.MessageDigest$Delegate.class
===========================================================================
org.apache.commons.codec.digest.DigestUtils.sha256(byte[]):::ENTER
data != null
===========================================================================
org.apache.commons.codec.digest.DigestUtils.sha256(byte[]):::EXIT
data[] == orig(data[])
return != null
size(return[]) == 32
Exiting Daikon.
