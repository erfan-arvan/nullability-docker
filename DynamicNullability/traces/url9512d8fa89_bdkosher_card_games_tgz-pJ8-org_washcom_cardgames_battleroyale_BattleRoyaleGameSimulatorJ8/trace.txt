Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 38 times.  Unmatched entries are ignored!
Unterminated calls:
  org.washcom.cardgames.battleroyale.BattleRoyaleGame.battle() : 19 invocations
  org.washcom.cardgames.battleroyale.Battle.fight(org.washcom.cardgames.battleroyale.BattleAssessor) : 19 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
com.google.common.base.Preconditions.checkArgument(boolean):::ENTER
expression == true
===========================================================================
com.google.common.base.Preconditions.checkArgument(boolean):::EXIT
===========================================================================
com.google.common.base.Preconditions.checkNotNull(java.lang.Object):::ENTER
reference != null
===========================================================================
com.google.common.base.Preconditions.checkNotNull(java.lang.Object):::EXIT
return == orig(reference)
return.getClass().getName() == orig(reference.getClass().getName())
return != null
===========================================================================
com.google.common.base.Preconditions.checkState(boolean):::ENTER
expression == true
===========================================================================
com.google.common.base.Preconditions.checkState(boolean):::EXIT
===========================================================================
org.washcom.cardgames.battleroyale.Battle:::CLASS
org.washcom.cardgames.battleroyale.Battle.log has only one value
org.washcom.cardgames.battleroyale.Battle.log != null
===========================================================================
org.washcom.cardgames.battleroyale.Battle:::OBJECT
this.number >= 1
this.game != null
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log != null
this.game.assessor != null
this.game.assessor.getClass().getName() == org.washcom.cardgames.battleroyale.DefaultBattleAccessor.class
this.game.players != null
this.game.players[] contains no nulls and has only one value, of length 3
this.game.players[] elements != null
this.game.players[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
this.game.players[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
this.game.players.getClass().getName() == java.util.Arrays$ArrayList.class
this.game.gameCards != null
this.game.gameCards.internal != null
this.game.gameCards.internal.getClass().getName() == java.util.ArrayDeque.class
this.game.gameCards.random != null
this.game.currentRoundNumber >= 1
this.game.currentBattle.number >= 1
this.game.currentBattle.game != null
this.game.currentBattle.battleCards != null
this.game.currentBattle.battleCards[] elements != null
this.game.currentBattle.battleCards[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
this.game.currentBattle.battleCards.getClass().getName() == java.util.ArrayList.class
this.game.currentBattle.battlers[] elements != null
this.game.currentBattle.battlers[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
this.game.currentBattle.battlers.getClass().getName() == java.util.ArrayList.class
this.game.currentBattle.continuations >= 0
this.game.winner == null
this.game.swapHandsRuleEnabled == true
this.game.swappedHandsCount >= 0
this.game.unresolvedBattleCount >= 0
this.game.battlesByNbrOfContinuations != null
this.game.battlesByNbrOfContinuations.getClass().getName() == java.util.HashMap.class
this.battleCards != null
this.battleCards[] elements != null
this.battleCards[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
this.battleCards.getClass().getName() == java.util.ArrayList.class
this.battlers[] elements != null
this.battlers[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
this.battlers.getClass().getName() == java.util.ArrayList.class
this.continuations >= 0
size(this.game.players[]) == 3
size(this.game.currentBattle.battleCards[]) one of { 0, 2, 3 }
size(this.game.currentBattle.battleCards[])-1 != 0
size(this.game.currentBattle.battlers[]) one of { 1, 2, 3 }
size(this.battleCards[]) one of { 0, 2, 3 }
size(this.battleCards[])-1 != 0
size(this.battlers[]) one of { 1, 2, 3 }
===========================================================================
org.washcom.cardgames.battleroyale.Battle.Battle(int, org.washcom.cardgames.battleroyale.BattleRoyaleGame):::ENTER
arg0 >= 1
arg1 != null
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log != null
arg1.assessor != null
arg1.assessor.getClass().getName() == org.washcom.cardgames.battleroyale.DefaultBattleAccessor.class
arg1.players != null
arg1.players[] contains no nulls and has only one value, of length 3
arg1.players[] elements != null
arg1.players[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg1.players[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg1.players.getClass().getName() == java.util.Arrays$ArrayList.class
arg1.gameCards != null
arg1.gameCards.internal != null
arg1.gameCards.internal.getClass().getName() == java.util.ArrayDeque.class
arg1.gameCards.random != null
arg1.currentRoundNumber >= 1
org.washcom.cardgames.battleroyale.Battle.log has only one value
org.washcom.cardgames.battleroyale.Battle.log != null
arg1.currentBattle.number >= 1
arg1.currentBattle.game != null
arg1.currentBattle.battleCards != null
arg1.currentBattle.battleCards[] elements != null
arg1.currentBattle.battleCards[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
arg1.currentBattle.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
arg1.currentBattle.battleCards.getClass().getName() == java.util.ArrayList.class
arg1.currentBattle.battlers != null
arg1.currentBattle.battlers[] elements != null
arg1.currentBattle.battlers[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg1.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
arg1.currentBattle.battlers.getClass().getName() == java.util.ArrayList.class
arg1.winner == null
arg1.swapHandsRuleEnabled == true
arg1.swappedHandsCount >= 0
arg1.unresolvedBattleCount >= 0
arg1.battlesByNbrOfContinuations != null
arg1.battlesByNbrOfContinuations.getClass().getName() == java.util.HashMap.class
size(arg1.players[]) == 3
size(arg1.currentBattle.battleCards[]) one of { 2, 3 }
size(arg1.currentBattle.battlers[]) one of { 2, 3 }
===========================================================================
org.washcom.cardgames.battleroyale.Battle.Battle(int, org.washcom.cardgames.battleroyale.BattleRoyaleGame):::EXIT
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
arg1.assessor == orig(arg1.assessor)
arg1.assessor.getClass().getName() == orig(arg1.assessor.getClass().getName())
arg1.players == orig(arg1.players)
arg1.players[] == orig(arg1.players[])
arg1.players.getClass().getName() == orig(arg1.players.getClass().getName())
arg1.gameCards == orig(arg1.gameCards)
arg1.gameCards.internal == orig(arg1.gameCards.internal)
arg1.gameCards.internal.getClass().getName() == orig(arg1.gameCards.internal.getClass().getName())
arg1.gameCards.random == orig(arg1.gameCards.random)
arg1.currentRoundNumber == orig(arg1.currentRoundNumber)
arg1.currentBattle == orig(arg1.currentBattle)
arg1.currentBattle.number == orig(arg1.currentBattle.number)
arg1.currentBattle.game == orig(arg1.currentBattle.game)
arg1.currentBattle.battleCards == orig(arg1.currentBattle.battleCards)
arg1.currentBattle.battleCards[] == orig(arg1.currentBattle.battleCards[])
arg1.currentBattle.battleCards.getClass().getName() == orig(arg1.currentBattle.battleCards.getClass().getName())
arg1.currentBattle.battlers == orig(arg1.currentBattle.battlers)
arg1.currentBattle.battlers[] == orig(arg1.currentBattle.battlers[])
arg1.currentBattle.battlers.getClass().getName() == orig(arg1.currentBattle.battlers.getClass().getName())
arg1.currentBattle.continuations == orig(arg1.currentBattle.continuations)
arg1.winner == orig(arg1.winner)
arg1.swapHandsRuleEnabled == orig(arg1.swapHandsRuleEnabled)
arg1.swappedHandsCount == orig(arg1.swappedHandsCount)
arg1.unresolvedBattleCount == orig(arg1.unresolvedBattleCount)
arg1.battlesByNbrOfContinuations == orig(arg1.battlesByNbrOfContinuations)
arg1.battlesByNbrOfContinuations.getClass().getName() == orig(arg1.battlesByNbrOfContinuations.getClass().getName())
this.game.currentBattle.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.game.currentBattle.battlers != null
this.game.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.battleCards[] == []
this.battleCards[].getClass().getName() == []
this.battlers == null
this.continuations == 0
arg1.assessor != null
arg1.assessor.getClass().getName() == org.washcom.cardgames.battleroyale.DefaultBattleAccessor.class
arg1.players != null
arg1.players[] contains no nulls and has only one value, of length 3
arg1.players[] elements != null
arg1.players[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg1.players[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg1.players.getClass().getName() == java.util.Arrays$ArrayList.class
arg1.gameCards != null
arg1.gameCards.internal != null
arg1.gameCards.internal.getClass().getName() == java.util.ArrayDeque.class
arg1.gameCards.random != null
arg1.currentRoundNumber >= 1
arg1.currentBattle.number >= 1
arg1.currentBattle.game != null
arg1.currentBattle.battleCards != null
arg1.currentBattle.battleCards[] elements != null
arg1.currentBattle.battleCards[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
arg1.currentBattle.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
arg1.currentBattle.battleCards.getClass().getName() == java.util.ArrayList.class
arg1.currentBattle.battlers != null
arg1.currentBattle.battlers[] elements != null
arg1.currentBattle.battlers[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg1.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
arg1.currentBattle.battlers.getClass().getName() == java.util.ArrayList.class
arg1.winner == null
arg1.swapHandsRuleEnabled == true
arg1.swappedHandsCount >= 0
arg1.unresolvedBattleCount >= 0
arg1.battlesByNbrOfContinuations != null
arg1.battlesByNbrOfContinuations.getClass().getName() == java.util.HashMap.class
size(this.game.currentBattle.battleCards[]) one of { 2, 3 }
size(this.game.currentBattle.battlers[]) one of { 2, 3 }
size(arg1.players[]) == 3
size(arg1.currentBattle.battleCards[]) one of { 2, 3 }
size(arg1.currentBattle.battlers[]) one of { 2, 3 }
===========================================================================
org.washcom.cardgames.battleroyale.Battle.addBattleCardsToGamePot():::ENTER
this.game.currentBattle != null
this.game.currentBattle.battlers != null
this.game.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.battlers != null
this.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
size(this.game.currentBattle.battlers[]) one of { 2, 3 }
size(this.battlers[]) one of { 2, 3 }
===========================================================================
org.washcom.cardgames.battleroyale.Battle.addBattleCardsToGamePot():::EXIT
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.number == orig(this.number)
this.game == orig(this.game)
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.game.assessor == orig(this.game.assessor)
this.game.assessor.getClass().getName() == orig(this.game.assessor.getClass().getName())
this.game.players == orig(this.game.players)
this.game.players[] == orig(this.game.players[])
this.game.players.getClass().getName() == orig(this.game.players.getClass().getName())
this.game.gameCards == orig(this.game.gameCards)
this.game.gameCards.internal == orig(this.game.gameCards.internal)
this.game.gameCards.internal.getClass().getName() == orig(this.game.gameCards.internal.getClass().getName())
this.game.gameCards.random == orig(this.game.gameCards.random)
this.game.currentRoundNumber == orig(this.game.currentRoundNumber)
this.game.currentBattle == orig(this.game.currentBattle)
this.game.currentBattle.number == orig(this.game.currentBattle.number)
this.game.currentBattle.game == orig(this.game.currentBattle.game)
this.game.currentBattle.battleCards == orig(this.game.currentBattle.battleCards)
this.game.currentBattle.battleCards.getClass().getName() == orig(this.game.currentBattle.battleCards.getClass().getName())
this.game.currentBattle.battlers == orig(this.game.currentBattle.battlers)
this.game.currentBattle.battlers[] == orig(this.game.currentBattle.battlers[])
this.game.currentBattle.battlers.getClass().getName() == orig(this.game.currentBattle.battlers.getClass().getName())
this.game.currentBattle.continuations == orig(this.game.currentBattle.continuations)
this.game.winner == orig(this.game.winner)
this.game.swapHandsRuleEnabled == orig(this.game.swapHandsRuleEnabled)
this.game.swappedHandsCount == orig(this.game.swappedHandsCount)
this.game.unresolvedBattleCount == orig(this.game.unresolvedBattleCount)
this.game.battlesByNbrOfContinuations == orig(this.game.battlesByNbrOfContinuations)
this.game.battlesByNbrOfContinuations.getClass().getName() == orig(this.game.battlesByNbrOfContinuations.getClass().getName())
this.battleCards == orig(this.battleCards)
this.battleCards.getClass().getName() == orig(this.battleCards.getClass().getName())
this.battlers == orig(this.battlers)
this.battlers[] == orig(this.battlers[])
this.battlers.getClass().getName() == orig(this.battlers.getClass().getName())
this.continuations == orig(this.continuations)
this.game.currentBattle != null
this.game.currentBattle.battleCards[] == []
this.game.currentBattle.battleCards[].getClass().getName() == []
this.game.currentBattle.battlers != null
this.game.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.battleCards[] == []
this.battleCards[].getClass().getName() == []
this.battlers != null
this.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
size(this.game.currentBattle.battlers[]) one of { 2, 3 }
size(this.battlers[]) one of { 2, 3 }
size(this.game.currentBattle.battleCards[]) <= orig(size(this.game.currentBattle.battleCards[]))
size(this.game.currentBattle.battleCards[]) != orig(size(this.game.currentBattle.battleCards[]))-1
size(this.game.currentBattle.battleCards[])-1 <= orig(size(this.game.currentBattle.battleCards[]))-1
size(this.battleCards[]) <= orig(size(this.battleCards[]))
size(this.battleCards[]) != orig(size(this.battleCards[]))-1
size(this.battleCards[])-1 <= orig(size(this.battleCards[]))-1
===========================================================================
org.washcom.cardgames.battleroyale.Battle.addFeeCardsToGamePot(java.util.Map):::ENTER
this.game.currentBattle != null
this.game.currentBattle.battleCards[] == []
this.game.currentBattle.battleCards[].getClass().getName() == []
this.game.currentBattle.battlers != null
this.game.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.battleCards[] == []
this.battleCards[].getClass().getName() == []
this.battlers != null
this.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
arg0 != null
size(this.game.currentBattle.battlers[]) one of { 2, 3 }
size(this.battlers[]) one of { 2, 3 }
===========================================================================
org.washcom.cardgames.battleroyale.Battle.addFeeCardsToGamePot(java.util.Map):::EXIT
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.number == orig(this.number)
this.game == orig(this.game)
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.game.assessor == orig(this.game.assessor)
this.game.assessor.getClass().getName() == orig(this.game.assessor.getClass().getName())
this.game.players == orig(this.game.players)
this.game.players[] == orig(this.game.players[])
this.game.players.getClass().getName() == orig(this.game.players.getClass().getName())
this.game.gameCards == orig(this.game.gameCards)
this.game.gameCards.internal == orig(this.game.gameCards.internal)
this.game.gameCards.internal.getClass().getName() == orig(this.game.gameCards.internal.getClass().getName())
this.game.gameCards.random == orig(this.game.gameCards.random)
this.game.currentRoundNumber == orig(this.game.currentRoundNumber)
this.game.currentBattle == orig(this.game.currentBattle)
this.game.currentBattle.number == orig(this.game.currentBattle.number)
this.game.currentBattle.game == orig(this.game.currentBattle.game)
this.game.currentBattle.battleCards == orig(this.game.currentBattle.battleCards)
this.game.currentBattle.battleCards[] == orig(this.game.currentBattle.battleCards[])
this.game.currentBattle.battleCards.getClass().getName() == orig(this.game.currentBattle.battleCards.getClass().getName())
this.game.currentBattle.battlers == orig(this.game.currentBattle.battlers)
this.game.currentBattle.battlers[] == orig(this.game.currentBattle.battlers[])
this.game.currentBattle.battlers.getClass().getName() == orig(this.game.currentBattle.battlers.getClass().getName())
this.game.currentBattle.continuations == orig(this.game.currentBattle.continuations)
this.game.winner == orig(this.game.winner)
this.game.swapHandsRuleEnabled == orig(this.game.swapHandsRuleEnabled)
this.game.swappedHandsCount == orig(this.game.swappedHandsCount)
this.game.unresolvedBattleCount == orig(this.game.unresolvedBattleCount)
this.game.battlesByNbrOfContinuations == orig(this.game.battlesByNbrOfContinuations)
this.game.battlesByNbrOfContinuations.getClass().getName() == orig(this.game.battlesByNbrOfContinuations.getClass().getName())
this.battleCards == orig(this.battleCards)
this.battleCards[] == orig(this.battleCards[])
this.battleCards.getClass().getName() == orig(this.battleCards.getClass().getName())
this.battlers == orig(this.battlers)
this.battlers[] == orig(this.battlers[])
this.battlers.getClass().getName() == orig(this.battlers.getClass().getName())
this.continuations == orig(this.continuations)
this.game.currentBattle != null
this.game.currentBattle.battleCards[] == []
this.game.currentBattle.battleCards[].getClass().getName() == []
this.game.currentBattle.battlers != null
this.game.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.battleCards[] == []
this.battleCards[].getClass().getName() == []
this.battlers != null
this.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
size(this.game.currentBattle.battlers[]) one of { 2, 3 }
size(this.battlers[]) one of { 2, 3 }
===========================================================================
org.washcom.cardgames.battleroyale.Battle.checkForSecondChances():::ENTER
this.game.currentBattle != null
this.game.currentBattle.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.game.currentBattle.battlers != null
this.game.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.battlers != null
this.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
size(this.game.currentBattle.battleCards[]) one of { 2, 3 }
size(this.game.currentBattle.battlers[]) one of { 2, 3 }
size(this.battleCards[]) one of { 2, 3 }
size(this.battlers[]) one of { 2, 3 }
===========================================================================
org.washcom.cardgames.battleroyale.Battle.checkForSecondChances():::EXIT
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.number == orig(this.number)
this.game == orig(this.game)
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.game.assessor == orig(this.game.assessor)
this.game.assessor.getClass().getName() == orig(this.game.assessor.getClass().getName())
this.game.players == orig(this.game.players)
this.game.players[] == orig(this.game.players[])
this.game.players.getClass().getName() == orig(this.game.players.getClass().getName())
this.game.gameCards == orig(this.game.gameCards)
this.game.gameCards.internal == orig(this.game.gameCards.internal)
this.game.gameCards.internal.getClass().getName() == orig(this.game.gameCards.internal.getClass().getName())
this.game.gameCards.random == orig(this.game.gameCards.random)
this.game.currentRoundNumber == orig(this.game.currentRoundNumber)
this.game.currentBattle == orig(this.game.currentBattle)
this.game.currentBattle.number == orig(this.game.currentBattle.number)
this.game.currentBattle.game == orig(this.game.currentBattle.game)
this.game.currentBattle.battleCards == orig(this.game.currentBattle.battleCards)
this.game.currentBattle.battleCards.getClass().getName() == orig(this.game.currentBattle.battleCards.getClass().getName())
this.game.currentBattle.battlers == orig(this.game.currentBattle.battlers)
this.game.currentBattle.battlers[] == orig(this.game.currentBattle.battlers[])
this.game.currentBattle.battlers.getClass().getName() == orig(this.game.currentBattle.battlers.getClass().getName())
this.game.currentBattle.continuations == orig(this.game.currentBattle.continuations)
this.game.winner == orig(this.game.winner)
this.game.swapHandsRuleEnabled == orig(this.game.swapHandsRuleEnabled)
this.game.swappedHandsCount == orig(this.game.swappedHandsCount)
this.game.unresolvedBattleCount == orig(this.game.unresolvedBattleCount)
this.game.battlesByNbrOfContinuations == orig(this.game.battlesByNbrOfContinuations)
this.game.battlesByNbrOfContinuations.getClass().getName() == orig(this.game.battlesByNbrOfContinuations.getClass().getName())
this.battleCards == orig(this.battleCards)
this.battleCards.getClass().getName() == orig(this.battleCards.getClass().getName())
this.battlers == orig(this.battlers)
this.battlers[] == orig(this.battlers[])
this.battlers.getClass().getName() == orig(this.battlers.getClass().getName())
this.continuations == orig(this.continuations)
size(this.game.currentBattle.battleCards[]) == orig(size(this.game.currentBattle.battleCards[]))
size(this.battleCards[]) == orig(size(this.battleCards[]))
(return == false)  ==>  (this.battleCards[] == orig(this.battleCards[]))
(return == false)  ==>  (this.game.currentBattle.battleCards[] == orig(this.game.currentBattle.battleCards[]))
(return == false)  ==>  (this.game.currentBattle.number >= 1)
(return == false)  ==>  (this.game.currentRoundNumber >= 1)
(return == false)  ==>  (this.number >= 1)
(return == true)  ==>  (this.continuations one of { 0, 2, 3 })
(return == true)  ==>  (this.game.currentBattle.continuations one of { 0, 2, 3 })
(return == true)  ==>  (this.game.swappedHandsCount one of { 0, 1, 4 })
this.game.currentBattle != null
this.game.currentBattle.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.game.currentBattle.battlers != null
this.game.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.battlers != null
this.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
size(this.game.currentBattle.battleCards[]) one of { 2, 3 }
size(this.game.currentBattle.battlers[]) one of { 2, 3 }
size(this.battleCards[]) one of { 2, 3 }
size(this.battlers[]) one of { 2, 3 }
===========================================================================
org.washcom.cardgames.battleroyale.Battle.checkForSecondChances():::EXIT;condition="return == true"
this.game.currentBattle.continuations one of { 0, 2, 3 }
this.game.swappedHandsCount one of { 0, 1, 4 }
this.continuations one of { 0, 2, 3 }
return == true
===========================================================================
org.washcom.cardgames.battleroyale.Battle.checkForSecondChances():::EXIT;condition="not(return == true)"
this.game.currentBattle.battleCards[] == orig(this.game.currentBattle.battleCards[])
this.battleCards[] == orig(this.battleCards[])
return == false
===========================================================================
org.washcom.cardgames.battleroyale.Battle.eliminateCardlessBattlers():::ENTER
this.game.currentBattle != null
this.game.currentBattle.battleCards[] == []
this.game.currentBattle.battleCards[].getClass().getName() == []
this.game.currentBattle.battlers != null
this.game.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.battleCards[] == []
this.battleCards[].getClass().getName() == []
this.battlers != null
this.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
size(this.game.currentBattle.battlers[]) one of { 2, 3 }
size(this.battlers[]) one of { 2, 3 }
===========================================================================
org.washcom.cardgames.battleroyale.Battle.eliminateCardlessBattlers():::EXIT
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.number == orig(this.number)
this.game == orig(this.game)
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.game.assessor == orig(this.game.assessor)
this.game.assessor.getClass().getName() == orig(this.game.assessor.getClass().getName())
this.game.players == orig(this.game.players)
this.game.players[] == orig(this.game.players[])
this.game.players.getClass().getName() == orig(this.game.players.getClass().getName())
this.game.gameCards == orig(this.game.gameCards)
this.game.gameCards.internal == orig(this.game.gameCards.internal)
this.game.gameCards.internal.getClass().getName() == orig(this.game.gameCards.internal.getClass().getName())
this.game.gameCards.random == orig(this.game.gameCards.random)
this.game.currentRoundNumber == orig(this.game.currentRoundNumber)
this.game.currentBattle == orig(this.game.currentBattle)
this.game.currentBattle.number == orig(this.game.currentBattle.number)
this.game.currentBattle.game == orig(this.game.currentBattle.game)
this.game.currentBattle.battleCards == orig(this.game.currentBattle.battleCards)
this.game.currentBattle.battleCards[] == orig(this.game.currentBattle.battleCards[])
this.game.currentBattle.battleCards.getClass().getName() == orig(this.game.currentBattle.battleCards.getClass().getName())
this.game.currentBattle.battlers == orig(this.game.currentBattle.battlers)
this.game.currentBattle.battlers.getClass().getName() == orig(this.game.currentBattle.battlers.getClass().getName())
this.game.currentBattle.continuations == orig(this.game.currentBattle.continuations)
this.game.winner == orig(this.game.winner)
this.game.swapHandsRuleEnabled == orig(this.game.swapHandsRuleEnabled)
this.game.swappedHandsCount == orig(this.game.swappedHandsCount)
this.game.unresolvedBattleCount == orig(this.game.unresolvedBattleCount)
this.game.battlesByNbrOfContinuations == orig(this.game.battlesByNbrOfContinuations)
this.game.battlesByNbrOfContinuations.getClass().getName() == orig(this.game.battlesByNbrOfContinuations.getClass().getName())
this.battleCards == orig(this.battleCards)
this.battleCards[] == orig(this.battleCards[])
this.battleCards.getClass().getName() == orig(this.battleCards.getClass().getName())
this.battlers == orig(this.battlers)
this.battlers.getClass().getName() == orig(this.battlers.getClass().getName())
this.continuations == orig(this.continuations)
this.game.currentBattle != null
this.game.currentBattle.battleCards[] == []
this.game.currentBattle.battleCards[].getClass().getName() == []
this.game.currentBattle.battlers != null
this.battleCards[] == []
this.battleCards[].getClass().getName() == []
this.battlers != null
size(this.game.currentBattle.battlers[]) <= orig(size(this.game.currentBattle.battlers[]))
size(this.game.currentBattle.battlers[]) >= orig(size(this.game.currentBattle.battlers[]))-1
size(this.game.currentBattle.battlers[])-1 <= orig(size(this.game.currentBattle.battlers[]))-1
size(this.battlers[]) <= orig(size(this.battlers[]))
size(this.battlers[]) >= orig(size(this.battlers[]))-1
size(this.battlers[])-1 <= orig(size(this.battlers[]))-1
===========================================================================
org.washcom.cardgames.battleroyale.Battle.fight(org.washcom.cardgames.battleroyale.BattleAssessor):::ENTER
this.game.currentBattle != null
this.game.currentBattle.battleCards[] == []
this.game.currentBattle.battleCards[].getClass().getName() == []
this.game.currentBattle.battlers == null
this.game.currentBattle.continuations == 0
this.battleCards[] == []
this.battleCards[].getClass().getName() == []
this.battlers == null
this.continuations == 0
arg0 != null
arg0.getClass().getName() == org.washcom.cardgames.battleroyale.DefaultBattleAccessor.class
===========================================================================
org.washcom.cardgames.battleroyale.Battle.fight(org.washcom.cardgames.battleroyale.BattleAssessor):::EXIT111
this.game.unresolvedBattleCount == orig(this.game.unresolvedBattleCount)
this.game.currentBattle.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.game.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.game.currentBattle.continuations one of { 1, 2, 3 }
this.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.continuations one of { 1, 2, 3 }
size(this.game.currentBattle.battleCards[]) one of { 2, 3 }
size(this.game.currentBattle.battlers[]) one of { 2, 3 }
size(this.battleCards[]) one of { 2, 3 }
size(this.battlers[]) one of { 2, 3 }
size(this.game.currentBattle.battleCards[])-1 > orig(size(this.game.currentBattle.battleCards[]))
size(this.battleCards[])-1 > orig(size(this.battleCards[]))
===========================================================================
org.washcom.cardgames.battleroyale.Battle.fight(org.washcom.cardgames.battleroyale.BattleAssessor):::EXIT119
this.game.currentBattle.battleCards[] == orig(this.game.currentBattle.battleCards[])
this.game.swappedHandsCount == orig(this.game.swappedHandsCount)
this.game.unresolvedBattleCount == orig(this.game.unresolvedBattleCount)
this.battleCards[] == orig(this.battleCards[])
this.number one of { 8, 51 }
this.game.currentRoundNumber one of { 8, 51 }
this.game.currentBattle.number one of { 8, 51 }
this.game.currentBattle.battleCards[] == []
this.game.currentBattle.battleCards[].getClass().getName() == []
this.game.currentBattle.battlers[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player]
this.game.currentBattle.continuations == 1
this.game.swappedHandsCount one of { 1, 5 }
this.game.unresolvedBattleCount one of { 1, 6 }
this.battleCards[] == []
this.battleCards[].getClass().getName() == []
this.battlers[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player]
this.continuations == 1
size(this.game.currentBattle.battlers[]) == 1
size(this.battlers[]) == 1
===========================================================================
org.washcom.cardgames.battleroyale.Battle.fight(org.washcom.cardgames.battleroyale.BattleAssessor):::EXIT128
this.game.currentBattle.battleCards[] == orig(this.game.currentBattle.battleCards[])
this.game.swappedHandsCount == orig(this.game.swappedHandsCount)
this.game.unresolvedBattleCount == orig(this.game.unresolvedBattleCount)
this.battleCards[] == orig(this.battleCards[])
this.number one of { 20, 35, 45 }
this.game.currentRoundNumber one of { 20, 35, 45 }
this.game.currentBattle.number one of { 20, 35, 45 }
this.game.currentBattle.battleCards[] == []
this.game.currentBattle.battleCards[].getClass().getName() == []
this.game.currentBattle.battlers[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player]
this.game.currentBattle.continuations one of { 1, 2 }
this.game.swappedHandsCount one of { 0, 1, 4 }
this.game.unresolvedBattleCount one of { 1, 2, 4 }
this.battleCards[] == []
this.battleCards[].getClass().getName() == []
this.battlers[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player]
this.continuations one of { 1, 2 }
size(this.game.currentBattle.battlers[]) == 1
size(this.battlers[]) == 1
===========================================================================
org.washcom.cardgames.battleroyale.Battle.fight(org.washcom.cardgames.battleroyale.BattleAssessor):::EXIT144
this.game.currentBattle.battleCards[].getClass().getName() == [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard]
this.game.currentBattle.battlers[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
this.game.currentBattle.continuations == 4
this.game.unresolvedBattleCount >= 1
this.battleCards[].getClass().getName() == [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard]
this.battlers[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
this.continuations == 4
size(this.game.currentBattle.battleCards[]) == 2
size(this.game.currentBattle.battlers[]) == 2
size(this.battleCards[]) == 2
size(this.battlers[]) == 2
this.game.unresolvedBattleCount - orig(this.game.unresolvedBattleCount) - 1 == 0
===========================================================================
org.washcom.cardgames.battleroyale.Battle.fight(org.washcom.cardgames.battleroyale.BattleAssessor):::EXIT
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.number == orig(this.number)
this.game == orig(this.game)
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.game.assessor == orig(this.game.assessor)
this.game.assessor.getClass().getName() == orig(this.game.assessor.getClass().getName())
this.game.players == orig(this.game.players)
this.game.players[] == orig(this.game.players[])
this.game.players.getClass().getName() == orig(this.game.players.getClass().getName())
this.game.gameCards == orig(this.game.gameCards)
this.game.gameCards.internal == orig(this.game.gameCards.internal)
this.game.gameCards.internal.getClass().getName() == orig(this.game.gameCards.internal.getClass().getName())
this.game.gameCards.random == orig(this.game.gameCards.random)
this.game.currentRoundNumber == orig(this.game.currentRoundNumber)
this.game.currentBattle == orig(this.game.currentBattle)
this.game.currentBattle.number == orig(this.game.currentBattle.number)
this.game.currentBattle.game == orig(this.game.currentBattle.game)
this.game.currentBattle.battleCards == orig(this.game.currentBattle.battleCards)
this.game.currentBattle.battleCards.getClass().getName() == orig(this.game.currentBattle.battleCards.getClass().getName())
this.game.winner == orig(this.game.winner)
this.game.swapHandsRuleEnabled == orig(this.game.swapHandsRuleEnabled)
this.game.battlesByNbrOfContinuations == orig(this.game.battlesByNbrOfContinuations)
this.game.battlesByNbrOfContinuations.getClass().getName() == orig(this.game.battlesByNbrOfContinuations.getClass().getName())
this.battleCards == orig(this.battleCards)
this.battleCards.getClass().getName() == orig(this.battleCards.getClass().getName())
this.game.currentBattle != null
this.game.currentBattle.battlers != null
this.battlers != null
this.game.currentBattle.continuations > orig(this.game.currentBattle.continuations)
this.game.swappedHandsCount >= orig(this.game.swappedHandsCount)
this.game.unresolvedBattleCount >= orig(this.game.unresolvedBattleCount)
this.continuations > orig(this.continuations)
size(this.game.currentBattle.battleCards[]) >= orig(size(this.game.currentBattle.battleCards[]))
size(this.game.currentBattle.battleCards[])-1 != orig(size(this.game.currentBattle.battleCards[]))
size(this.game.currentBattle.battleCards[])-1 >= orig(size(this.game.currentBattle.battleCards[]))-1
size(this.battleCards[]) >= orig(size(this.battleCards[]))
size(this.battleCards[])-1 != orig(size(this.battleCards[]))
size(this.battleCards[])-1 >= orig(size(this.battleCards[]))-1
===========================================================================
org.washcom.cardgames.battleroyale.Battle.findNonBattler():::ENTER
this.game.currentBattle != null
this.game.currentBattle.battleCards[] == []
this.game.currentBattle.battleCards[].getClass().getName() == []
this.game.currentBattle.battlers != null
this.game.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.battleCards[] == []
this.battleCards[].getClass().getName() == []
this.battlers != null
this.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
size(this.game.currentBattle.battlers[]) one of { 2, 3 }
size(this.battlers[]) one of { 2, 3 }
===========================================================================
org.washcom.cardgames.battleroyale.Battle.findNonBattler():::EXIT
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.number == orig(this.number)
this.game == orig(this.game)
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.game.assessor == orig(this.game.assessor)
this.game.assessor.getClass().getName() == orig(this.game.assessor.getClass().getName())
this.game.players == orig(this.game.players)
this.game.players[] == orig(this.game.players[])
this.game.players.getClass().getName() == orig(this.game.players.getClass().getName())
this.game.gameCards == orig(this.game.gameCards)
this.game.gameCards.internal == orig(this.game.gameCards.internal)
this.game.gameCards.internal.getClass().getName() == orig(this.game.gameCards.internal.getClass().getName())
this.game.gameCards.random == orig(this.game.gameCards.random)
this.game.currentRoundNumber == orig(this.game.currentRoundNumber)
this.game.currentBattle == orig(this.game.currentBattle)
this.game.currentBattle.number == orig(this.game.currentBattle.number)
this.game.currentBattle.game == orig(this.game.currentBattle.game)
this.game.currentBattle.battleCards == orig(this.game.currentBattle.battleCards)
this.game.currentBattle.battleCards[] == orig(this.game.currentBattle.battleCards[])
this.game.currentBattle.battleCards.getClass().getName() == orig(this.game.currentBattle.battleCards.getClass().getName())
this.game.currentBattle.battlers == orig(this.game.currentBattle.battlers)
this.game.currentBattle.battlers[] == orig(this.game.currentBattle.battlers[])
this.game.currentBattle.battlers.getClass().getName() == orig(this.game.currentBattle.battlers.getClass().getName())
this.game.currentBattle.continuations == orig(this.game.currentBattle.continuations)
this.game.winner == orig(this.game.winner)
this.game.swapHandsRuleEnabled == orig(this.game.swapHandsRuleEnabled)
this.game.swappedHandsCount == orig(this.game.swappedHandsCount)
this.game.unresolvedBattleCount == orig(this.game.unresolvedBattleCount)
this.game.battlesByNbrOfContinuations == orig(this.game.battlesByNbrOfContinuations)
this.game.battlesByNbrOfContinuations.getClass().getName() == orig(this.game.battlesByNbrOfContinuations.getClass().getName())
this.battleCards == orig(this.battleCards)
this.battleCards[] == orig(this.battleCards[])
this.battleCards.getClass().getName() == orig(this.battleCards.getClass().getName())
this.battlers == orig(this.battlers)
this.battlers[] == orig(this.battlers[])
this.battlers.getClass().getName() == orig(this.battlers.getClass().getName())
this.continuations == orig(this.continuations)
this.game.currentBattle != null
this.game.currentBattle.battleCards[] == []
this.game.currentBattle.battleCards[].getClass().getName() == []
this.game.currentBattle.battlers != null
this.game.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.battleCards[] == []
this.battleCards[].getClass().getName() == []
this.battlers != null
this.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
return.participatingInBattle == true
return.nbrOfBattlesFought == 0
return.nbrOfBattlesWon == 0
return.name != null
return.name.toString one of { "Joe", "Nolan", "Patrick" }
return.hand != null
return.hand.internal != null
return.hand.internal.getClass().getName() == java.util.ArrayDeque.class
return.hand.random != null
size(this.game.currentBattle.battlers[]) one of { 2, 3 }
size(this.battlers[]) one of { 2, 3 }
===========================================================================
org.washcom.cardgames.battleroyale.Battle.getBattleCards():::ENTER
this.game.currentBattle != null
this.game.currentBattle.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.game.currentBattle.battlers != null
this.game.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.battlers != null
this.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
size(this.game.currentBattle.battleCards[]) one of { 2, 3 }
size(this.game.currentBattle.battlers[]) one of { 2, 3 }
size(this.battleCards[]) one of { 2, 3 }
size(this.battlers[]) one of { 2, 3 }
===========================================================================
org.washcom.cardgames.battleroyale.Battle.getBattleCards():::EXIT
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.number == orig(this.number)
this.game == orig(this.game)
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.game.assessor == orig(this.game.assessor)
this.game.assessor.getClass().getName() == orig(this.game.assessor.getClass().getName())
this.game.players == orig(this.game.players)
this.game.players[] == orig(this.game.players[])
this.game.players.getClass().getName() == orig(this.game.players.getClass().getName())
this.game.gameCards == orig(this.game.gameCards)
this.game.gameCards.internal == orig(this.game.gameCards.internal)
this.game.gameCards.internal.getClass().getName() == orig(this.game.gameCards.internal.getClass().getName())
this.game.gameCards.random == orig(this.game.gameCards.random)
this.game.currentRoundNumber == orig(this.game.currentRoundNumber)
this.game.currentBattle == orig(this.game.currentBattle)
this.game.currentBattle.number == orig(this.game.currentBattle.number)
this.game.currentBattle.game == orig(this.game.currentBattle.game)
this.game.currentBattle.battleCards == orig(this.game.currentBattle.battleCards)
this.game.currentBattle.battleCards[] == orig(this.game.currentBattle.battleCards[])
this.game.currentBattle.battleCards.getClass().getName() == orig(this.game.currentBattle.battleCards.getClass().getName())
this.game.currentBattle.battlers == orig(this.game.currentBattle.battlers)
this.game.currentBattle.battlers[] == orig(this.game.currentBattle.battlers[])
this.game.currentBattle.battlers.getClass().getName() == orig(this.game.currentBattle.battlers.getClass().getName())
this.game.currentBattle.continuations == orig(this.game.currentBattle.continuations)
this.game.winner == orig(this.game.winner)
this.game.swapHandsRuleEnabled == orig(this.game.swapHandsRuleEnabled)
this.game.swappedHandsCount == orig(this.game.swappedHandsCount)
this.game.unresolvedBattleCount == orig(this.game.unresolvedBattleCount)
this.game.battlesByNbrOfContinuations == orig(this.game.battlesByNbrOfContinuations)
this.game.battlesByNbrOfContinuations.getClass().getName() == orig(this.game.battlesByNbrOfContinuations.getClass().getName())
this.battleCards == orig(this.battleCards)
this.battleCards[] == orig(this.battleCards[])
this.battleCards.getClass().getName() == orig(this.battleCards.getClass().getName())
this.battlers == orig(this.battlers)
this.battlers[] == orig(this.battlers[])
this.battlers.getClass().getName() == orig(this.battlers.getClass().getName())
this.continuations == orig(this.continuations)
this.game.currentBattle != null
this.game.currentBattle.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.game.currentBattle.battlers != null
this.game.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.battlers != null
this.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
return != null
return[] elements != null
return[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
return[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
return.getClass().getName() == java.util.ArrayList.class
size(this.game.currentBattle.battleCards[]) one of { 2, 3 }
size(this.game.currentBattle.battlers[]) one of { 2, 3 }
size(this.battleCards[]) one of { 2, 3 }
size(this.battlers[]) one of { 2, 3 }
size(return[]) one of { 2, 3 }
===========================================================================
org.washcom.cardgames.battleroyale.Battle.getBattlers():::ENTER
this.game.currentBattle != null
this.game.currentBattle.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.game.currentBattle.battlers != null
this.game.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.battlers != null
this.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
size(this.game.currentBattle.battleCards[]) one of { 2, 3 }
size(this.game.currentBattle.battlers[]) one of { 2, 3 }
size(this.battleCards[]) one of { 2, 3 }
size(this.battlers[]) one of { 2, 3 }
===========================================================================
org.washcom.cardgames.battleroyale.Battle.getBattlers():::EXIT
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.number == orig(this.number)
this.game == orig(this.game)
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.game.assessor == orig(this.game.assessor)
this.game.assessor.getClass().getName() == orig(this.game.assessor.getClass().getName())
this.game.players == orig(this.game.players)
this.game.players[] == orig(this.game.players[])
this.game.players.getClass().getName() == orig(this.game.players.getClass().getName())
this.game.gameCards == orig(this.game.gameCards)
this.game.gameCards.internal == orig(this.game.gameCards.internal)
this.game.gameCards.internal.getClass().getName() == orig(this.game.gameCards.internal.getClass().getName())
this.game.gameCards.random == orig(this.game.gameCards.random)
this.game.currentRoundNumber == orig(this.game.currentRoundNumber)
this.game.currentBattle == orig(this.game.currentBattle)
this.game.currentBattle.number == orig(this.game.currentBattle.number)
this.game.currentBattle.game == orig(this.game.currentBattle.game)
this.game.currentBattle.battleCards == orig(this.game.currentBattle.battleCards)
this.game.currentBattle.battleCards[] == orig(this.game.currentBattle.battleCards[])
this.game.currentBattle.battleCards.getClass().getName() == orig(this.game.currentBattle.battleCards.getClass().getName())
this.game.currentBattle.battlers == orig(this.game.currentBattle.battlers)
this.game.currentBattle.battlers[] == orig(this.game.currentBattle.battlers[])
this.game.currentBattle.battlers.getClass().getName() == orig(this.game.currentBattle.battlers.getClass().getName())
this.game.currentBattle.continuations == orig(this.game.currentBattle.continuations)
this.game.winner == orig(this.game.winner)
this.game.swapHandsRuleEnabled == orig(this.game.swapHandsRuleEnabled)
this.game.swappedHandsCount == orig(this.game.swappedHandsCount)
this.game.unresolvedBattleCount == orig(this.game.unresolvedBattleCount)
this.game.battlesByNbrOfContinuations == orig(this.game.battlesByNbrOfContinuations)
this.game.battlesByNbrOfContinuations.getClass().getName() == orig(this.game.battlesByNbrOfContinuations.getClass().getName())
this.battleCards == orig(this.battleCards)
this.battleCards[] == orig(this.battleCards[])
this.battleCards.getClass().getName() == orig(this.battleCards.getClass().getName())
this.battlers == orig(this.battlers)
this.battlers[] == orig(this.battlers[])
this.battlers.getClass().getName() == orig(this.battlers.getClass().getName())
this.continuations == orig(this.continuations)
this.game.currentBattle != null
this.game.currentBattle.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.game.currentBattle.battlers != null
this.game.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.battlers != null
this.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
return != null
return[] elements != null
return[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
return[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
return.getClass().getName() == java.util.ArrayList.class
size(this.game.currentBattle.battleCards[]) one of { 2, 3 }
size(this.game.currentBattle.battlers[]) one of { 2, 3 }
size(this.battleCards[]) one of { 2, 3 }
size(this.battlers[]) one of { 2, 3 }
size(return[]) one of { 2, 3 }
===========================================================================
org.washcom.cardgames.battleroyale.Battle.getGame():::ENTER
this.number >= 2
this.game.currentRoundNumber >= 2
this.game.currentBattle != null
this.game.currentBattle.number >= 2
this.game.currentBattle.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.game.currentBattle.battlers != null
this.game.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.battlers != null
this.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
size(this.game.currentBattle.battleCards[]) one of { 2, 3 }
size(this.game.currentBattle.battlers[]) one of { 2, 3 }
size(this.battleCards[]) one of { 2, 3 }
size(this.battlers[]) one of { 2, 3 }
===========================================================================
org.washcom.cardgames.battleroyale.Battle.getGame():::EXIT
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.number == orig(this.number)
this.game == orig(this.game)
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.game.assessor == orig(this.game.assessor)
this.game.assessor.getClass().getName() == orig(this.game.assessor.getClass().getName())
this.game.players == orig(this.game.players)
this.game.players[] == orig(this.game.players[])
this.game.players.getClass().getName() == orig(this.game.players.getClass().getName())
this.game.gameCards == orig(this.game.gameCards)
this.game.gameCards.internal == orig(this.game.gameCards.internal)
this.game.gameCards.internal.getClass().getName() == orig(this.game.gameCards.internal.getClass().getName())
this.game.gameCards.random == orig(this.game.gameCards.random)
this.game.currentRoundNumber == orig(this.game.currentRoundNumber)
this.game.currentBattle == orig(this.game.currentBattle)
this.game.currentBattle.number == orig(this.game.currentBattle.number)
this.game.currentBattle.game == orig(this.game.currentBattle.game)
this.game.currentBattle.battleCards == orig(this.game.currentBattle.battleCards)
this.game.currentBattle.battleCards[] == orig(this.game.currentBattle.battleCards[])
this.game.currentBattle.battleCards.getClass().getName() == orig(this.game.currentBattle.battleCards.getClass().getName())
this.game.currentBattle.battlers == orig(this.game.currentBattle.battlers)
this.game.currentBattle.battlers[] == orig(this.game.currentBattle.battlers[])
this.game.currentBattle.battlers.getClass().getName() == orig(this.game.currentBattle.battlers.getClass().getName())
this.game.currentBattle.continuations == orig(this.game.currentBattle.continuations)
this.game.winner == orig(this.game.winner)
this.game.swapHandsRuleEnabled == orig(this.game.swapHandsRuleEnabled)
this.game.swappedHandsCount == orig(this.game.swappedHandsCount)
this.game.unresolvedBattleCount == orig(this.game.unresolvedBattleCount)
this.game.battlesByNbrOfContinuations == orig(this.game.battlesByNbrOfContinuations)
this.game.battlesByNbrOfContinuations.getClass().getName() == orig(this.game.battlesByNbrOfContinuations.getClass().getName())
this.battleCards == orig(this.battleCards)
this.battleCards[] == orig(this.battleCards[])
this.battleCards.getClass().getName() == orig(this.battleCards.getClass().getName())
this.battlers == orig(this.battlers)
this.battlers[] == orig(this.battlers[])
this.battlers.getClass().getName() == orig(this.battlers.getClass().getName())
this.continuations == orig(this.continuations)
this.number >= 2
this.game.currentRoundNumber >= 2
this.game.currentBattle != null
this.game.currentBattle.number >= 2
this.game.currentBattle.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.game.currentBattle.battlers != null
this.game.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.battlers != null
this.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
return != null
return.assessor != null
return.assessor.getClass().getName() == org.washcom.cardgames.battleroyale.DefaultBattleAccessor.class
return.players != null
return.players[] contains no nulls and has only one value, of length 3
return.players[] elements != null
return.players[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
return.players[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
return.players.getClass().getName() == java.util.Arrays$ArrayList.class
return.gameCards != null
return.gameCards.internal != null
return.gameCards.internal.getClass().getName() == java.util.ArrayDeque.class
return.gameCards.random != null
return.currentRoundNumber >= 2
return.currentBattle != null
return.currentBattle.number >= 2
return.currentBattle.game != null
return.currentBattle.battleCards != null
return.currentBattle.battleCards[] elements != null
return.currentBattle.battleCards[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
return.currentBattle.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
return.currentBattle.battleCards.getClass().getName() == java.util.ArrayList.class
return.currentBattle.battlers != null
return.currentBattle.battlers[] elements != null
return.currentBattle.battlers[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
return.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
return.currentBattle.battlers.getClass().getName() == java.util.ArrayList.class
return.currentBattle.continuations >= 0
return.winner == null
return.swapHandsRuleEnabled == true
return.swappedHandsCount >= 0
return.unresolvedBattleCount >= 0
return.battlesByNbrOfContinuations != null
return.battlesByNbrOfContinuations.getClass().getName() == java.util.HashMap.class
size(this.game.currentBattle.battleCards[]) one of { 2, 3 }
size(this.game.currentBattle.battlers[]) one of { 2, 3 }
size(this.battleCards[]) one of { 2, 3 }
size(this.battlers[]) one of { 2, 3 }
size(return.players[]) == 3
size(return.currentBattle.battleCards[]) one of { 2, 3 }
size(return.currentBattle.battlers[]) one of { 2, 3 }
===========================================================================
org.washcom.cardgames.battleroyale.Battle.playBattleCards():::ENTER
this.game.currentBattle != null
this.game.currentBattle.battleCards[] == []
this.game.currentBattle.battleCards[].getClass().getName() == []
this.game.currentBattle.battlers != null
this.game.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.battleCards[] == []
this.battleCards[].getClass().getName() == []
this.battlers != null
this.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
size(this.game.currentBattle.battlers[]) one of { 2, 3 }
size(this.battlers[]) one of { 2, 3 }
===========================================================================
org.washcom.cardgames.battleroyale.Battle.playBattleCards():::EXIT
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.number == orig(this.number)
this.game == orig(this.game)
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.game.assessor == orig(this.game.assessor)
this.game.assessor.getClass().getName() == orig(this.game.assessor.getClass().getName())
this.game.players == orig(this.game.players)
this.game.players[] == orig(this.game.players[])
this.game.players.getClass().getName() == orig(this.game.players.getClass().getName())
this.game.gameCards == orig(this.game.gameCards)
this.game.gameCards.internal == orig(this.game.gameCards.internal)
this.game.gameCards.internal.getClass().getName() == orig(this.game.gameCards.internal.getClass().getName())
this.game.gameCards.random == orig(this.game.gameCards.random)
this.game.currentRoundNumber == orig(this.game.currentRoundNumber)
this.game.currentBattle == orig(this.game.currentBattle)
this.game.currentBattle.number == orig(this.game.currentBattle.number)
this.game.currentBattle.game == orig(this.game.currentBattle.game)
this.game.currentBattle.battleCards == orig(this.game.currentBattle.battleCards)
this.game.currentBattle.battleCards.getClass().getName() == orig(this.game.currentBattle.battleCards.getClass().getName())
this.game.currentBattle.battlers == orig(this.game.currentBattle.battlers)
this.game.currentBattle.battlers[] == orig(this.game.currentBattle.battlers[])
this.game.currentBattle.battlers.getClass().getName() == orig(this.game.currentBattle.battlers.getClass().getName())
this.game.currentBattle.continuations == orig(this.game.currentBattle.continuations)
this.game.winner == orig(this.game.winner)
this.game.swapHandsRuleEnabled == orig(this.game.swapHandsRuleEnabled)
this.game.swappedHandsCount == orig(this.game.swappedHandsCount)
this.game.unresolvedBattleCount == orig(this.game.unresolvedBattleCount)
this.game.battlesByNbrOfContinuations == orig(this.game.battlesByNbrOfContinuations)
this.game.battlesByNbrOfContinuations.getClass().getName() == orig(this.game.battlesByNbrOfContinuations.getClass().getName())
this.battleCards == orig(this.battleCards)
this.battleCards.getClass().getName() == orig(this.battleCards.getClass().getName())
this.battlers == orig(this.battlers)
this.battlers[] == orig(this.battlers[])
this.battlers.getClass().getName() == orig(this.battlers.getClass().getName())
this.continuations == orig(this.continuations)
this.game.currentBattle != null
this.game.currentBattle.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.game.currentBattle.battlers != null
this.game.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.battlers != null
this.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
size(this.game.currentBattle.battleCards[]) one of { 2, 3 }
size(this.game.currentBattle.battlers[]) one of { 2, 3 }
size(this.battleCards[]) one of { 2, 3 }
size(this.battlers[]) one of { 2, 3 }
size(this.game.currentBattle.battleCards[])-1 > orig(size(this.game.currentBattle.battleCards[]))
size(this.battleCards[])-1 > orig(size(this.battleCards[]))
===========================================================================
org.washcom.cardgames.battleroyale.Battle.spoilsToTheVictor(org.washcom.cardgames.battleroyale.Player):::ENTER
this.game.currentBattle != null
this.game.currentBattle.battlers != null
this.battlers != null
arg0 != null
arg0.participatingInBattle == true
arg0.nbrOfBattlesFought == 0
arg0.nbrOfBattlesWon == 0
arg0.name != null
arg0.name.toString one of { "Joe", "Nolan", "Patrick" }
arg0.hand != null
arg0.hand.internal != null
arg0.hand.internal.getClass().getName() == java.util.ArrayDeque.class
arg0.hand.random != null
===========================================================================
org.washcom.cardgames.battleroyale.Battle.spoilsToTheVictor(org.washcom.cardgames.battleroyale.Player):::EXIT
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.number == orig(this.number)
this.game == orig(this.game)
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.game.assessor == orig(this.game.assessor)
this.game.assessor.getClass().getName() == orig(this.game.assessor.getClass().getName())
this.game.players == orig(this.game.players)
this.game.players[] == orig(this.game.players[])
this.game.players.getClass().getName() == orig(this.game.players.getClass().getName())
this.game.gameCards == orig(this.game.gameCards)
this.game.gameCards.internal == orig(this.game.gameCards.internal)
this.game.gameCards.internal.getClass().getName() == orig(this.game.gameCards.internal.getClass().getName())
this.game.gameCards.random == orig(this.game.gameCards.random)
this.game.currentRoundNumber == orig(this.game.currentRoundNumber)
this.game.currentBattle == orig(this.game.currentBattle)
this.game.currentBattle.number == orig(this.game.currentBattle.number)
this.game.currentBattle.game == orig(this.game.currentBattle.game)
this.game.currentBattle.battleCards == orig(this.game.currentBattle.battleCards)
this.game.currentBattle.battleCards[] == orig(this.game.currentBattle.battleCards[])
this.game.currentBattle.battleCards.getClass().getName() == orig(this.game.currentBattle.battleCards.getClass().getName())
this.game.currentBattle.battlers == orig(this.game.currentBattle.battlers)
this.game.currentBattle.battlers[] == orig(this.game.currentBattle.battlers[])
this.game.currentBattle.battlers.getClass().getName() == orig(this.game.currentBattle.battlers.getClass().getName())
this.game.currentBattle.continuations == orig(this.game.currentBattle.continuations)
this.game.winner == orig(this.game.winner)
this.game.swapHandsRuleEnabled == orig(this.game.swapHandsRuleEnabled)
this.game.swappedHandsCount == orig(this.game.swappedHandsCount)
this.game.unresolvedBattleCount == orig(this.game.unresolvedBattleCount)
this.game.battlesByNbrOfContinuations == orig(this.game.battlesByNbrOfContinuations)
this.game.battlesByNbrOfContinuations.getClass().getName() == orig(this.game.battlesByNbrOfContinuations.getClass().getName())
this.battleCards == orig(this.battleCards)
this.battleCards[] == orig(this.battleCards[])
this.battleCards.getClass().getName() == orig(this.battleCards.getClass().getName())
this.battlers == orig(this.battlers)
this.battlers[] == orig(this.battlers[])
this.battlers.getClass().getName() == orig(this.battlers.getClass().getName())
this.continuations == orig(this.continuations)
arg0.participatingInBattle == orig(arg0.participatingInBattle)
arg0.nbrOfBattlesFought == orig(arg0.nbrOfBattlesFought)
arg0.nbrOfBattlesWon == orig(arg0.nbrOfBattlesWon)
arg0.strategy == orig(arg0.strategy)
arg0.strategy.getClass().getName() == orig(arg0.strategy.getClass().getName())
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.hand == orig(arg0.hand)
arg0.hand.internal == orig(arg0.hand.internal)
arg0.hand.internal.getClass().getName() == orig(arg0.hand.internal.getClass().getName())
arg0.hand.random == orig(arg0.hand.random)
this.game.currentBattle != null
this.game.currentBattle.battlers != null
this.battlers != null
arg0.participatingInBattle == true
arg0.nbrOfBattlesFought == 0
arg0.nbrOfBattlesWon == 0
arg0.name != null
arg0.name.toString one of { "Joe", "Nolan", "Patrick" }
arg0.hand != null
arg0.hand.internal != null
arg0.hand.internal.getClass().getName() == java.util.ArrayDeque.class
arg0.hand.random != null
===========================================================================
org.washcom.cardgames.battleroyale.BattleCard:::CLASS
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == 14
===========================================================================
org.washcom.cardgames.battleroyale.BattleCard:::OBJECT
this.card != null
this.card.suit != null
org.washcom.cardgames.core.Suit.HEARTS has only one value
org.washcom.cardgames.core.Suit.HEARTS != null
org.washcom.cardgames.core.Suit.DIAMONDS has only one value
org.washcom.cardgames.core.Suit.DIAMONDS != null
org.washcom.cardgames.core.Suit.SPADES has only one value
org.washcom.cardgames.core.Suit.SPADES != null
org.washcom.cardgames.core.Suit.CLUBS has only one value
org.washcom.cardgames.core.Suit.CLUBS != null
this.card.suit.color != null
org.washcom.cardgames.core.Suit.$VALUES has only one value
org.washcom.cardgames.core.Suit.$VALUES != null
org.washcom.cardgames.core.Suit.$VALUES.getClass().getName() == org.washcom.cardgames.core.Suit[].class
org.washcom.cardgames.core.Suit.$VALUES[] contains no nulls and has only one value, of length 4
org.washcom.cardgames.core.Suit.$VALUES[] elements != null
org.washcom.cardgames.core.Suit.$VALUES[].getClass().getName() == [org.washcom.cardgames.core.Suit, org.washcom.cardgames.core.Suit, org.washcom.cardgames.core.Suit, org.washcom.cardgames.core.Suit]
org.washcom.cardgames.core.Suit.$VALUES[].getClass().getName() elements == org.washcom.cardgames.core.Suit.class
org.washcom.cardgames.core.Suit.$VALUES[].color contains no nulls and has only one value, of length 4
org.washcom.cardgames.core.Suit.$VALUES[].color elements != null
this.card.denomination != null
org.washcom.cardgames.core.Denomination.TWO has only one value
org.washcom.cardgames.core.Denomination.TWO != null
org.washcom.cardgames.core.Denomination.THREE has only one value
org.washcom.cardgames.core.Denomination.THREE != null
org.washcom.cardgames.core.Denomination.FOUR has only one value
org.washcom.cardgames.core.Denomination.FOUR != null
org.washcom.cardgames.core.Denomination.FIVE has only one value
org.washcom.cardgames.core.Denomination.FIVE != null
org.washcom.cardgames.core.Denomination.SIX has only one value
org.washcom.cardgames.core.Denomination.SIX != null
org.washcom.cardgames.core.Denomination.SEVEN has only one value
org.washcom.cardgames.core.Denomination.SEVEN != null
org.washcom.cardgames.core.Denomination.EIGHT has only one value
org.washcom.cardgames.core.Denomination.EIGHT != null
org.washcom.cardgames.core.Denomination.NINE has only one value
org.washcom.cardgames.core.Denomination.NINE != null
org.washcom.cardgames.core.Denomination.TEN has only one value
org.washcom.cardgames.core.Denomination.TEN != null
org.washcom.cardgames.core.Denomination.JACK has only one value
org.washcom.cardgames.core.Denomination.JACK != null
org.washcom.cardgames.core.Denomination.QUEEN has only one value
org.washcom.cardgames.core.Denomination.QUEEN != null
org.washcom.cardgames.core.Denomination.KING has only one value
org.washcom.cardgames.core.Denomination.KING != null
org.washcom.cardgames.core.Denomination.ACE has only one value
org.washcom.cardgames.core.Denomination.ACE != null
this.card.denomination.value != null
org.washcom.cardgames.core.Denomination.$VALUES has only one value
org.washcom.cardgames.core.Denomination.$VALUES != null
org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName() == org.washcom.cardgames.core.Denomination[].class
org.washcom.cardgames.core.Denomination.$VALUES[] contains no nulls and has only one value, of length 13
org.washcom.cardgames.core.Denomination.$VALUES[] elements != null
org.washcom.cardgames.core.Denomination.$VALUES[].getClass().getName() == [org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination]
org.washcom.cardgames.core.Denomination.$VALUES[].getClass().getName() elements == org.washcom.cardgames.core.Denomination.class
org.washcom.cardgames.core.Denomination.$VALUES[].value contains no nulls and has only one value, of length 13
org.washcom.cardgames.core.Denomination.$VALUES[].royalty == [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0]
this.playedBy != null
this.playedBy.participatingInBattle == true
this.playedBy.nbrOfBattlesFought == 0
this.playedBy.nbrOfBattlesWon == 0
this.playedBy.name != null
this.playedBy.name.toString one of { "Joe", "Nolan", "Patrick" }
this.playedBy.hand != null
this.playedBy.hand.internal != null
this.playedBy.hand.internal.getClass().getName() == java.util.ArrayDeque.class
this.playedBy.hand.random != null
size(org.washcom.cardgames.core.Suit.$VALUES[]) == 4
size(org.washcom.cardgames.core.Denomination.$VALUES[]) == 13
===========================================================================
org.washcom.cardgames.battleroyale.BattleCard.BattleCard(org.washcom.cardgames.core.Card, org.washcom.cardgames.battleroyale.Player):::ENTER
arg0 != null
arg0.suit != null
org.washcom.cardgames.core.Suit.HEARTS has only one value
org.washcom.cardgames.core.Suit.HEARTS != null
org.washcom.cardgames.core.Suit.DIAMONDS has only one value
org.washcom.cardgames.core.Suit.DIAMONDS != null
org.washcom.cardgames.core.Suit.SPADES has only one value
org.washcom.cardgames.core.Suit.SPADES != null
org.washcom.cardgames.core.Suit.CLUBS has only one value
org.washcom.cardgames.core.Suit.CLUBS != null
arg0.suit.color != null
org.washcom.cardgames.core.Suit.$VALUES has only one value
org.washcom.cardgames.core.Suit.$VALUES != null
org.washcom.cardgames.core.Suit.$VALUES.getClass().getName() == org.washcom.cardgames.core.Suit[].class
org.washcom.cardgames.core.Suit.$VALUES[] contains no nulls and has only one value, of length 4
org.washcom.cardgames.core.Suit.$VALUES[] elements != null
org.washcom.cardgames.core.Suit.$VALUES[].getClass().getName() == [org.washcom.cardgames.core.Suit, org.washcom.cardgames.core.Suit, org.washcom.cardgames.core.Suit, org.washcom.cardgames.core.Suit]
org.washcom.cardgames.core.Suit.$VALUES[].getClass().getName() elements == org.washcom.cardgames.core.Suit.class
org.washcom.cardgames.core.Suit.$VALUES[].color contains no nulls and has only one value, of length 4
org.washcom.cardgames.core.Suit.$VALUES[].color elements != null
arg0.denomination != null
org.washcom.cardgames.core.Denomination.TWO has only one value
org.washcom.cardgames.core.Denomination.TWO != null
org.washcom.cardgames.core.Denomination.THREE has only one value
org.washcom.cardgames.core.Denomination.THREE != null
org.washcom.cardgames.core.Denomination.FOUR has only one value
org.washcom.cardgames.core.Denomination.FOUR != null
org.washcom.cardgames.core.Denomination.FIVE has only one value
org.washcom.cardgames.core.Denomination.FIVE != null
org.washcom.cardgames.core.Denomination.SIX has only one value
org.washcom.cardgames.core.Denomination.SIX != null
org.washcom.cardgames.core.Denomination.SEVEN has only one value
org.washcom.cardgames.core.Denomination.SEVEN != null
org.washcom.cardgames.core.Denomination.EIGHT has only one value
org.washcom.cardgames.core.Denomination.EIGHT != null
org.washcom.cardgames.core.Denomination.NINE has only one value
org.washcom.cardgames.core.Denomination.NINE != null
org.washcom.cardgames.core.Denomination.TEN has only one value
org.washcom.cardgames.core.Denomination.TEN != null
org.washcom.cardgames.core.Denomination.JACK has only one value
org.washcom.cardgames.core.Denomination.JACK != null
org.washcom.cardgames.core.Denomination.QUEEN has only one value
org.washcom.cardgames.core.Denomination.QUEEN != null
org.washcom.cardgames.core.Denomination.KING has only one value
org.washcom.cardgames.core.Denomination.KING != null
org.washcom.cardgames.core.Denomination.ACE has only one value
org.washcom.cardgames.core.Denomination.ACE != null
arg0.denomination.value != null
org.washcom.cardgames.core.Denomination.$VALUES has only one value
org.washcom.cardgames.core.Denomination.$VALUES != null
org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName() == org.washcom.cardgames.core.Denomination[].class
org.washcom.cardgames.core.Denomination.$VALUES[] contains no nulls and has only one value, of length 13
org.washcom.cardgames.core.Denomination.$VALUES[] elements != null
org.washcom.cardgames.core.Denomination.$VALUES[].getClass().getName() == [org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination]
org.washcom.cardgames.core.Denomination.$VALUES[].getClass().getName() elements == org.washcom.cardgames.core.Denomination.class
org.washcom.cardgames.core.Denomination.$VALUES[].value contains no nulls and has only one value, of length 13
org.washcom.cardgames.core.Denomination.$VALUES[].royalty == [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0]
arg1 != null
arg1.participatingInBattle == true
arg1.nbrOfBattlesFought == 0
arg1.nbrOfBattlesWon == 0
arg1.name != null
arg1.name.toString one of { "Joe", "Nolan", "Patrick" }
arg1.hand != null
arg1.hand.internal != null
arg1.hand.internal.getClass().getName() == java.util.ArrayDeque.class
arg1.hand.random != null
size(org.washcom.cardgames.core.Suit.$VALUES[]) == 4
size(org.washcom.cardgames.core.Denomination.$VALUES[]) == 13
===========================================================================
org.washcom.cardgames.battleroyale.BattleCard.BattleCard(org.washcom.cardgames.core.Card, org.washcom.cardgames.battleroyale.Player):::EXIT
org.washcom.cardgames.core.Suit.HEARTS == orig(org.washcom.cardgames.core.Suit.HEARTS)
org.washcom.cardgames.core.Suit.DIAMONDS == orig(org.washcom.cardgames.core.Suit.DIAMONDS)
org.washcom.cardgames.core.Suit.SPADES == orig(org.washcom.cardgames.core.Suit.SPADES)
org.washcom.cardgames.core.Suit.CLUBS == orig(org.washcom.cardgames.core.Suit.CLUBS)
org.washcom.cardgames.core.Suit.$VALUES == orig(org.washcom.cardgames.core.Suit.$VALUES)
org.washcom.cardgames.core.Suit.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Suit.$VALUES.getClass().getName())
org.washcom.cardgames.core.Suit.$VALUES[] == orig(org.washcom.cardgames.core.Suit.$VALUES[])
org.washcom.cardgames.core.Suit.$VALUES[].color == orig(org.washcom.cardgames.core.Suit.$VALUES[].color)
org.washcom.cardgames.core.Denomination.TWO == orig(org.washcom.cardgames.core.Denomination.TWO)
org.washcom.cardgames.core.Denomination.THREE == orig(org.washcom.cardgames.core.Denomination.THREE)
org.washcom.cardgames.core.Denomination.FOUR == orig(org.washcom.cardgames.core.Denomination.FOUR)
org.washcom.cardgames.core.Denomination.FIVE == orig(org.washcom.cardgames.core.Denomination.FIVE)
org.washcom.cardgames.core.Denomination.SIX == orig(org.washcom.cardgames.core.Denomination.SIX)
org.washcom.cardgames.core.Denomination.SEVEN == orig(org.washcom.cardgames.core.Denomination.SEVEN)
org.washcom.cardgames.core.Denomination.EIGHT == orig(org.washcom.cardgames.core.Denomination.EIGHT)
org.washcom.cardgames.core.Denomination.NINE == orig(org.washcom.cardgames.core.Denomination.NINE)
org.washcom.cardgames.core.Denomination.TEN == orig(org.washcom.cardgames.core.Denomination.TEN)
org.washcom.cardgames.core.Denomination.JACK == orig(org.washcom.cardgames.core.Denomination.JACK)
org.washcom.cardgames.core.Denomination.QUEEN == orig(org.washcom.cardgames.core.Denomination.QUEEN)
org.washcom.cardgames.core.Denomination.KING == orig(org.washcom.cardgames.core.Denomination.KING)
org.washcom.cardgames.core.Denomination.ACE == orig(org.washcom.cardgames.core.Denomination.ACE)
org.washcom.cardgames.core.Denomination.$VALUES == orig(org.washcom.cardgames.core.Denomination.$VALUES)
org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName())
org.washcom.cardgames.core.Denomination.$VALUES[] == orig(org.washcom.cardgames.core.Denomination.$VALUES[])
org.washcom.cardgames.core.Denomination.$VALUES[].value == orig(org.washcom.cardgames.core.Denomination.$VALUES[].value)
org.washcom.cardgames.core.Denomination.$VALUES[].royalty == orig(org.washcom.cardgames.core.Denomination.$VALUES[].royalty)
arg0.suit == orig(arg0.suit)
arg0.suit.color == orig(arg0.suit.color)
arg0.denomination == orig(arg0.denomination)
arg0.denomination.value == orig(arg0.denomination.value)
arg0.denomination.royalty == orig(arg0.denomination.royalty)
arg1.participatingInBattle == orig(arg1.participatingInBattle)
arg1.nbrOfBattlesFought == orig(arg1.nbrOfBattlesFought)
arg1.nbrOfBattlesWon == orig(arg1.nbrOfBattlesWon)
arg1.strategy == orig(arg1.strategy)
arg1.strategy.getClass().getName() == orig(arg1.strategy.getClass().getName())
arg1.name == orig(arg1.name)
arg1.name.toString == orig(arg1.name.toString)
arg1.hand == orig(arg1.hand)
arg1.hand.internal == orig(arg1.hand.internal)
arg1.hand.internal.getClass().getName() == orig(arg1.hand.internal.getClass().getName())
arg1.hand.random == orig(arg1.hand.random)
arg0.suit != null
arg0.suit.color != null
arg0.denomination != null
arg0.denomination.value != null
arg1.participatingInBattle == true
arg1.nbrOfBattlesFought == 0
arg1.nbrOfBattlesWon == 0
arg1.name != null
arg1.name.toString one of { "Joe", "Nolan", "Patrick" }
arg1.hand != null
arg1.hand.internal != null
arg1.hand.internal.getClass().getName() == java.util.ArrayDeque.class
arg1.hand.random != null
===========================================================================
org.washcom.cardgames.battleroyale.BattleCard.computeValueDifference(org.washcom.cardgames.battleroyale.BattleCard):::ENTER
this.playedBy.name.toString one of { "Joe", "Patrick" }
arg0 != null
arg0.card != null
arg0.card.suit != null
arg0.card.denomination != null
arg0.playedBy != null
arg0.playedBy.participatingInBattle == true
arg0.playedBy.nbrOfBattlesFought == 0
arg0.playedBy.nbrOfBattlesWon == 0
arg0.playedBy.name != null
arg0.playedBy.name.toString one of { "Nolan", "Patrick" }
arg0.playedBy.hand != null
===========================================================================
org.washcom.cardgames.battleroyale.BattleCard.computeValueDifference(org.washcom.cardgames.battleroyale.BattleCard):::EXIT
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == orig(org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE)
this.card == orig(this.card)
this.card.suit == orig(this.card.suit)
org.washcom.cardgames.core.Suit.HEARTS == orig(org.washcom.cardgames.core.Suit.HEARTS)
org.washcom.cardgames.core.Suit.DIAMONDS == orig(org.washcom.cardgames.core.Suit.DIAMONDS)
org.washcom.cardgames.core.Suit.SPADES == orig(org.washcom.cardgames.core.Suit.SPADES)
org.washcom.cardgames.core.Suit.CLUBS == orig(org.washcom.cardgames.core.Suit.CLUBS)
this.card.suit.color == orig(this.card.suit.color)
org.washcom.cardgames.core.Suit.$VALUES == orig(org.washcom.cardgames.core.Suit.$VALUES)
org.washcom.cardgames.core.Suit.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Suit.$VALUES.getClass().getName())
org.washcom.cardgames.core.Suit.$VALUES[] == orig(org.washcom.cardgames.core.Suit.$VALUES[])
org.washcom.cardgames.core.Suit.$VALUES[].color == orig(org.washcom.cardgames.core.Suit.$VALUES[].color)
this.card.denomination == orig(this.card.denomination)
org.washcom.cardgames.core.Denomination.TWO == orig(org.washcom.cardgames.core.Denomination.TWO)
org.washcom.cardgames.core.Denomination.THREE == orig(org.washcom.cardgames.core.Denomination.THREE)
org.washcom.cardgames.core.Denomination.FOUR == orig(org.washcom.cardgames.core.Denomination.FOUR)
org.washcom.cardgames.core.Denomination.FIVE == orig(org.washcom.cardgames.core.Denomination.FIVE)
org.washcom.cardgames.core.Denomination.SIX == orig(org.washcom.cardgames.core.Denomination.SIX)
org.washcom.cardgames.core.Denomination.SEVEN == orig(org.washcom.cardgames.core.Denomination.SEVEN)
org.washcom.cardgames.core.Denomination.EIGHT == orig(org.washcom.cardgames.core.Denomination.EIGHT)
org.washcom.cardgames.core.Denomination.NINE == orig(org.washcom.cardgames.core.Denomination.NINE)
org.washcom.cardgames.core.Denomination.TEN == orig(org.washcom.cardgames.core.Denomination.TEN)
org.washcom.cardgames.core.Denomination.JACK == orig(org.washcom.cardgames.core.Denomination.JACK)
org.washcom.cardgames.core.Denomination.QUEEN == orig(org.washcom.cardgames.core.Denomination.QUEEN)
org.washcom.cardgames.core.Denomination.KING == orig(org.washcom.cardgames.core.Denomination.KING)
org.washcom.cardgames.core.Denomination.ACE == orig(org.washcom.cardgames.core.Denomination.ACE)
this.card.denomination.value == orig(this.card.denomination.value)
this.card.denomination.royalty == orig(this.card.denomination.royalty)
org.washcom.cardgames.core.Denomination.$VALUES == orig(org.washcom.cardgames.core.Denomination.$VALUES)
org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName())
org.washcom.cardgames.core.Denomination.$VALUES[] == orig(org.washcom.cardgames.core.Denomination.$VALUES[])
org.washcom.cardgames.core.Denomination.$VALUES[].value == orig(org.washcom.cardgames.core.Denomination.$VALUES[].value)
org.washcom.cardgames.core.Denomination.$VALUES[].royalty == orig(org.washcom.cardgames.core.Denomination.$VALUES[].royalty)
this.playedBy == orig(this.playedBy)
this.playedBy.participatingInBattle == orig(this.playedBy.participatingInBattle)
this.playedBy.nbrOfBattlesFought == orig(this.playedBy.nbrOfBattlesFought)
this.playedBy.nbrOfBattlesWon == orig(this.playedBy.nbrOfBattlesWon)
this.playedBy.strategy == orig(this.playedBy.strategy)
this.playedBy.strategy.getClass().getName() == orig(this.playedBy.strategy.getClass().getName())
this.playedBy.name == orig(this.playedBy.name)
this.playedBy.name.toString == orig(this.playedBy.name.toString)
this.playedBy.hand == orig(this.playedBy.hand)
this.playedBy.hand.internal == orig(this.playedBy.hand.internal)
this.playedBy.hand.internal.getClass().getName() == orig(this.playedBy.hand.internal.getClass().getName())
this.playedBy.hand.random == orig(this.playedBy.hand.random)
arg0.card == orig(arg0.card)
arg0.card.suit == orig(arg0.card.suit)
arg0.card.denomination == orig(arg0.card.denomination)
arg0.playedBy == orig(arg0.playedBy)
arg0.playedBy.participatingInBattle == orig(arg0.playedBy.participatingInBattle)
arg0.playedBy.nbrOfBattlesFought == orig(arg0.playedBy.nbrOfBattlesFought)
arg0.playedBy.nbrOfBattlesWon == orig(arg0.playedBy.nbrOfBattlesWon)
arg0.playedBy.strategy == orig(arg0.playedBy.strategy)
arg0.playedBy.strategy.getClass().getName() == orig(arg0.playedBy.strategy.getClass().getName())
arg0.playedBy.name == orig(arg0.playedBy.name)
arg0.playedBy.name.toString == orig(arg0.playedBy.name.toString)
arg0.playedBy.hand == orig(arg0.playedBy.hand)
this.playedBy.name.toString one of { "Joe", "Patrick" }
arg0.card != null
arg0.card.suit != null
arg0.card.denomination != null
arg0.playedBy != null
arg0.playedBy.participatingInBattle == true
arg0.playedBy.nbrOfBattlesFought == 0
arg0.playedBy.nbrOfBattlesWon == 0
arg0.playedBy.name != null
arg0.playedBy.name.toString one of { "Nolan", "Patrick" }
arg0.playedBy.hand != null
===========================================================================
org.washcom.cardgames.battleroyale.BattleCard.getCard():::ENTER
===========================================================================
org.washcom.cardgames.battleroyale.BattleCard.getCard():::EXIT
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == orig(org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE)
this.card == orig(this.card)
this.card.suit == orig(this.card.suit)
org.washcom.cardgames.core.Suit.HEARTS == orig(org.washcom.cardgames.core.Suit.HEARTS)
org.washcom.cardgames.core.Suit.DIAMONDS == orig(org.washcom.cardgames.core.Suit.DIAMONDS)
org.washcom.cardgames.core.Suit.SPADES == orig(org.washcom.cardgames.core.Suit.SPADES)
org.washcom.cardgames.core.Suit.CLUBS == orig(org.washcom.cardgames.core.Suit.CLUBS)
this.card.suit.color == orig(this.card.suit.color)
org.washcom.cardgames.core.Suit.$VALUES == orig(org.washcom.cardgames.core.Suit.$VALUES)
org.washcom.cardgames.core.Suit.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Suit.$VALUES.getClass().getName())
org.washcom.cardgames.core.Suit.$VALUES[] == orig(org.washcom.cardgames.core.Suit.$VALUES[])
org.washcom.cardgames.core.Suit.$VALUES[].color == orig(org.washcom.cardgames.core.Suit.$VALUES[].color)
this.card.denomination == orig(this.card.denomination)
org.washcom.cardgames.core.Denomination.TWO == orig(org.washcom.cardgames.core.Denomination.TWO)
org.washcom.cardgames.core.Denomination.THREE == orig(org.washcom.cardgames.core.Denomination.THREE)
org.washcom.cardgames.core.Denomination.FOUR == orig(org.washcom.cardgames.core.Denomination.FOUR)
org.washcom.cardgames.core.Denomination.FIVE == orig(org.washcom.cardgames.core.Denomination.FIVE)
org.washcom.cardgames.core.Denomination.SIX == orig(org.washcom.cardgames.core.Denomination.SIX)
org.washcom.cardgames.core.Denomination.SEVEN == orig(org.washcom.cardgames.core.Denomination.SEVEN)
org.washcom.cardgames.core.Denomination.EIGHT == orig(org.washcom.cardgames.core.Denomination.EIGHT)
org.washcom.cardgames.core.Denomination.NINE == orig(org.washcom.cardgames.core.Denomination.NINE)
org.washcom.cardgames.core.Denomination.TEN == orig(org.washcom.cardgames.core.Denomination.TEN)
org.washcom.cardgames.core.Denomination.JACK == orig(org.washcom.cardgames.core.Denomination.JACK)
org.washcom.cardgames.core.Denomination.QUEEN == orig(org.washcom.cardgames.core.Denomination.QUEEN)
org.washcom.cardgames.core.Denomination.KING == orig(org.washcom.cardgames.core.Denomination.KING)
org.washcom.cardgames.core.Denomination.ACE == orig(org.washcom.cardgames.core.Denomination.ACE)
this.card.denomination.value == orig(this.card.denomination.value)
this.card.denomination.royalty == orig(this.card.denomination.royalty)
org.washcom.cardgames.core.Denomination.$VALUES == orig(org.washcom.cardgames.core.Denomination.$VALUES)
org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName())
org.washcom.cardgames.core.Denomination.$VALUES[] == orig(org.washcom.cardgames.core.Denomination.$VALUES[])
org.washcom.cardgames.core.Denomination.$VALUES[].value == orig(org.washcom.cardgames.core.Denomination.$VALUES[].value)
org.washcom.cardgames.core.Denomination.$VALUES[].royalty == orig(org.washcom.cardgames.core.Denomination.$VALUES[].royalty)
this.playedBy == orig(this.playedBy)
this.playedBy.participatingInBattle == orig(this.playedBy.participatingInBattle)
this.playedBy.nbrOfBattlesFought == orig(this.playedBy.nbrOfBattlesFought)
this.playedBy.nbrOfBattlesWon == orig(this.playedBy.nbrOfBattlesWon)
this.playedBy.strategy == orig(this.playedBy.strategy)
this.playedBy.strategy.getClass().getName() == orig(this.playedBy.strategy.getClass().getName())
this.playedBy.name == orig(this.playedBy.name)
this.playedBy.name.toString == orig(this.playedBy.name.toString)
this.playedBy.hand == orig(this.playedBy.hand)
this.playedBy.hand.internal == orig(this.playedBy.hand.internal)
this.playedBy.hand.internal.getClass().getName() == orig(this.playedBy.hand.internal.getClass().getName())
this.playedBy.hand.random == orig(this.playedBy.hand.random)
return != null
return.suit != null
return.suit.color != null
return.denomination != null
return.denomination.value != null
===========================================================================
org.washcom.cardgames.battleroyale.BattleCard.getPlayedBy():::ENTER
===========================================================================
org.washcom.cardgames.battleroyale.BattleCard.getPlayedBy():::EXIT
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == orig(org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE)
this.card == orig(this.card)
this.card.suit == orig(this.card.suit)
org.washcom.cardgames.core.Suit.HEARTS == orig(org.washcom.cardgames.core.Suit.HEARTS)
org.washcom.cardgames.core.Suit.DIAMONDS == orig(org.washcom.cardgames.core.Suit.DIAMONDS)
org.washcom.cardgames.core.Suit.SPADES == orig(org.washcom.cardgames.core.Suit.SPADES)
org.washcom.cardgames.core.Suit.CLUBS == orig(org.washcom.cardgames.core.Suit.CLUBS)
this.card.suit.color == orig(this.card.suit.color)
org.washcom.cardgames.core.Suit.$VALUES == orig(org.washcom.cardgames.core.Suit.$VALUES)
org.washcom.cardgames.core.Suit.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Suit.$VALUES.getClass().getName())
org.washcom.cardgames.core.Suit.$VALUES[] == orig(org.washcom.cardgames.core.Suit.$VALUES[])
org.washcom.cardgames.core.Suit.$VALUES[].color == orig(org.washcom.cardgames.core.Suit.$VALUES[].color)
this.card.denomination == orig(this.card.denomination)
org.washcom.cardgames.core.Denomination.TWO == orig(org.washcom.cardgames.core.Denomination.TWO)
org.washcom.cardgames.core.Denomination.THREE == orig(org.washcom.cardgames.core.Denomination.THREE)
org.washcom.cardgames.core.Denomination.FOUR == orig(org.washcom.cardgames.core.Denomination.FOUR)
org.washcom.cardgames.core.Denomination.FIVE == orig(org.washcom.cardgames.core.Denomination.FIVE)
org.washcom.cardgames.core.Denomination.SIX == orig(org.washcom.cardgames.core.Denomination.SIX)
org.washcom.cardgames.core.Denomination.SEVEN == orig(org.washcom.cardgames.core.Denomination.SEVEN)
org.washcom.cardgames.core.Denomination.EIGHT == orig(org.washcom.cardgames.core.Denomination.EIGHT)
org.washcom.cardgames.core.Denomination.NINE == orig(org.washcom.cardgames.core.Denomination.NINE)
org.washcom.cardgames.core.Denomination.TEN == orig(org.washcom.cardgames.core.Denomination.TEN)
org.washcom.cardgames.core.Denomination.JACK == orig(org.washcom.cardgames.core.Denomination.JACK)
org.washcom.cardgames.core.Denomination.QUEEN == orig(org.washcom.cardgames.core.Denomination.QUEEN)
org.washcom.cardgames.core.Denomination.KING == orig(org.washcom.cardgames.core.Denomination.KING)
org.washcom.cardgames.core.Denomination.ACE == orig(org.washcom.cardgames.core.Denomination.ACE)
this.card.denomination.value == orig(this.card.denomination.value)
this.card.denomination.royalty == orig(this.card.denomination.royalty)
org.washcom.cardgames.core.Denomination.$VALUES == orig(org.washcom.cardgames.core.Denomination.$VALUES)
org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName())
org.washcom.cardgames.core.Denomination.$VALUES[] == orig(org.washcom.cardgames.core.Denomination.$VALUES[])
org.washcom.cardgames.core.Denomination.$VALUES[].value == orig(org.washcom.cardgames.core.Denomination.$VALUES[].value)
org.washcom.cardgames.core.Denomination.$VALUES[].royalty == orig(org.washcom.cardgames.core.Denomination.$VALUES[].royalty)
this.playedBy == orig(this.playedBy)
this.playedBy.participatingInBattle == orig(this.playedBy.participatingInBattle)
this.playedBy.nbrOfBattlesFought == orig(this.playedBy.nbrOfBattlesFought)
this.playedBy.nbrOfBattlesWon == orig(this.playedBy.nbrOfBattlesWon)
this.playedBy.strategy == orig(this.playedBy.strategy)
this.playedBy.strategy.getClass().getName() == orig(this.playedBy.strategy.getClass().getName())
this.playedBy.name == orig(this.playedBy.name)
this.playedBy.name.toString == orig(this.playedBy.name.toString)
this.playedBy.hand == orig(this.playedBy.hand)
this.playedBy.hand.internal == orig(this.playedBy.hand.internal)
this.playedBy.hand.internal.getClass().getName() == orig(this.playedBy.hand.internal.getClass().getName())
this.playedBy.hand.random == orig(this.playedBy.hand.random)
return != null
return.participatingInBattle == true
return.nbrOfBattlesFought == 0
return.nbrOfBattlesWon == 0
return.name != null
return.name.toString one of { "Joe", "Nolan", "Patrick" }
return.hand != null
return.hand.internal != null
return.hand.internal.getClass().getName() == java.util.ArrayDeque.class
return.hand.random != null
===========================================================================
org.washcom.cardgames.battleroyale.BattleCard.isBattleRoyaleEligible():::ENTER
===========================================================================
org.washcom.cardgames.battleroyale.BattleCard.isBattleRoyaleEligible():::EXIT
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == orig(org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE)
this.card == orig(this.card)
this.card.suit == orig(this.card.suit)
org.washcom.cardgames.core.Suit.HEARTS == orig(org.washcom.cardgames.core.Suit.HEARTS)
org.washcom.cardgames.core.Suit.DIAMONDS == orig(org.washcom.cardgames.core.Suit.DIAMONDS)
org.washcom.cardgames.core.Suit.SPADES == orig(org.washcom.cardgames.core.Suit.SPADES)
org.washcom.cardgames.core.Suit.CLUBS == orig(org.washcom.cardgames.core.Suit.CLUBS)
this.card.suit.color == orig(this.card.suit.color)
org.washcom.cardgames.core.Suit.$VALUES == orig(org.washcom.cardgames.core.Suit.$VALUES)
org.washcom.cardgames.core.Suit.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Suit.$VALUES.getClass().getName())
org.washcom.cardgames.core.Suit.$VALUES[] == orig(org.washcom.cardgames.core.Suit.$VALUES[])
org.washcom.cardgames.core.Suit.$VALUES[].color == orig(org.washcom.cardgames.core.Suit.$VALUES[].color)
this.card.denomination == orig(this.card.denomination)
org.washcom.cardgames.core.Denomination.TWO == orig(org.washcom.cardgames.core.Denomination.TWO)
org.washcom.cardgames.core.Denomination.THREE == orig(org.washcom.cardgames.core.Denomination.THREE)
org.washcom.cardgames.core.Denomination.FOUR == orig(org.washcom.cardgames.core.Denomination.FOUR)
org.washcom.cardgames.core.Denomination.FIVE == orig(org.washcom.cardgames.core.Denomination.FIVE)
org.washcom.cardgames.core.Denomination.SIX == orig(org.washcom.cardgames.core.Denomination.SIX)
org.washcom.cardgames.core.Denomination.SEVEN == orig(org.washcom.cardgames.core.Denomination.SEVEN)
org.washcom.cardgames.core.Denomination.EIGHT == orig(org.washcom.cardgames.core.Denomination.EIGHT)
org.washcom.cardgames.core.Denomination.NINE == orig(org.washcom.cardgames.core.Denomination.NINE)
org.washcom.cardgames.core.Denomination.TEN == orig(org.washcom.cardgames.core.Denomination.TEN)
org.washcom.cardgames.core.Denomination.JACK == orig(org.washcom.cardgames.core.Denomination.JACK)
org.washcom.cardgames.core.Denomination.QUEEN == orig(org.washcom.cardgames.core.Denomination.QUEEN)
org.washcom.cardgames.core.Denomination.KING == orig(org.washcom.cardgames.core.Denomination.KING)
org.washcom.cardgames.core.Denomination.ACE == orig(org.washcom.cardgames.core.Denomination.ACE)
this.card.denomination.value == orig(this.card.denomination.value)
this.card.denomination.royalty == orig(this.card.denomination.royalty)
org.washcom.cardgames.core.Denomination.$VALUES == orig(org.washcom.cardgames.core.Denomination.$VALUES)
org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName())
org.washcom.cardgames.core.Denomination.$VALUES[] == orig(org.washcom.cardgames.core.Denomination.$VALUES[])
org.washcom.cardgames.core.Denomination.$VALUES[].value == orig(org.washcom.cardgames.core.Denomination.$VALUES[].value)
org.washcom.cardgames.core.Denomination.$VALUES[].royalty == orig(org.washcom.cardgames.core.Denomination.$VALUES[].royalty)
this.playedBy == orig(this.playedBy)
this.playedBy.participatingInBattle == orig(this.playedBy.participatingInBattle)
this.playedBy.nbrOfBattlesFought == orig(this.playedBy.nbrOfBattlesFought)
this.playedBy.nbrOfBattlesWon == orig(this.playedBy.nbrOfBattlesWon)
this.playedBy.strategy == orig(this.playedBy.strategy)
this.playedBy.strategy.getClass().getName() == orig(this.playedBy.strategy.getClass().getName())
this.playedBy.name == orig(this.playedBy.name)
this.playedBy.name.toString == orig(this.playedBy.name.toString)
this.playedBy.hand == orig(this.playedBy.hand)
this.playedBy.hand.internal == orig(this.playedBy.hand.internal)
this.playedBy.hand.internal.getClass().getName() == orig(this.playedBy.hand.internal.getClass().getName())
this.playedBy.hand.random == orig(this.playedBy.hand.random)
(return == false)  ==>  (this.card.denomination.royalty == false)
===========================================================================
org.washcom.cardgames.battleroyale.BattleCard.isBattleRoyaleEligible():::EXIT;condition="return == true"
return == true
===========================================================================
org.washcom.cardgames.battleroyale.BattleCard.isBattleRoyaleEligible():::EXIT;condition="not(return == true)"
this.card.denomination.royalty == false
return == false
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame:::CLASS
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log != null
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame:::OBJECT
this == this.currentBattle.game
this.assessor == this.currentBattle.game.assessor
this.assessor.getClass().getName() == this.currentBattle.game.assessor.getClass().getName()
this.players == this.currentBattle.game.players
this.players.getClass().getName() == this.currentBattle.game.players.getClass().getName()
this.gameCards == this.currentBattle.game.gameCards
this.gameCards.internal.getClass().getName() == this.winner.hand.internal.getClass().getName()
this.currentRoundNumber == this.currentBattle.number
this.currentBattle == this.currentBattle.game.currentBattle
this.currentBattle.number == this.currentBattle.game.currentRoundNumber
this.currentBattle.game.swapHandsRuleEnabled == this.swapHandsRuleEnabled
this.currentBattle.game.swappedHandsCount == this.swappedHandsCount
this.currentBattle.game.unresolvedBattleCount == this.unresolvedBattleCount
this.currentBattle.game.battlesByNbrOfContinuations == this.battlesByNbrOfContinuations
this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName() == this.battlesByNbrOfContinuations.getClass().getName()
this.currentBattle.battleCards.getClass().getName() == this.currentBattle.battlers.getClass().getName()
this.assessor != null
this.assessor.getClass().getName() == org.washcom.cardgames.battleroyale.DefaultBattleAccessor.class
this.players[] contains no nulls and has only one value, of length 3
this.players[] elements != null
this.players[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
this.players[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
this.players.getClass().getName() == java.util.Arrays$ArrayList.class
this.gameCards.internal != null
this.gameCards.internal.getClass().getName() == java.util.ArrayDeque.class
this.gameCards.random != null
this.currentRoundNumber >= 0
org.washcom.cardgames.battleroyale.Battle.log has only one value
org.washcom.cardgames.battleroyale.Battle.log != null
this.currentBattle.number >= 1
this.currentBattle.game != null
this.currentBattle.game.assessor != null
this.currentBattle.game.assessor.getClass().getName() == org.washcom.cardgames.battleroyale.DefaultBattleAccessor.class
this.currentBattle.game.players != null
this.currentBattle.game.players[] contains no nulls and has only one value, of length 3
this.currentBattle.game.players[] elements != null
this.currentBattle.game.players[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
this.currentBattle.game.players[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
this.currentBattle.game.players.getClass().getName() == java.util.Arrays$ArrayList.class
this.currentBattle.game.gameCards != null
this.currentBattle.game.currentBattle != null
this.currentBattle.game.swapHandsRuleEnabled == true
this.currentBattle.game.swappedHandsCount >= 0
this.currentBattle.game.unresolvedBattleCount >= 0
this.currentBattle.game.battlesByNbrOfContinuations != null
this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName() == java.util.HashMap.class
this.currentBattle.battleCards != null
this.currentBattle.battleCards[] elements != null
this.currentBattle.battleCards[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
this.currentBattle.battleCards.getClass().getName() == java.util.ArrayList.class
this.currentBattle.battlers[] elements != null
this.currentBattle.battlers[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
this.currentBattle.battlers.getClass().getName() == java.util.ArrayList.class
this.currentBattle.continuations >= 0
this.winner.participatingInBattle == true
this.winner.nbrOfBattlesFought == 0
this.winner.nbrOfBattlesWon == 0
this.winner.strategy != null
this.winner.name != null
this.winner.name.toString one of { "Joe", "Nolan", "Patrick" }
this.winner.hand != null
this.winner.hand.internal != null
this.winner.hand.internal.getClass().getName() == java.util.ArrayDeque.class
this.winner.hand.random != null
this.swapHandsRuleEnabled == true
this.swappedHandsCount >= 0
this.unresolvedBattleCount >= 0
this.battlesByNbrOfContinuations != null
this.battlesByNbrOfContinuations.getClass().getName() == java.util.HashMap.class
size(this.players[]) == 3
size(this.currentBattle.game.players[]) == 3
size(this.currentBattle.battleCards[]) one of { 0, 2, 3 }
size(this.currentBattle.battleCards[])-1 != 0
size(this.currentBattle.battlers[]) one of { 1, 2, 3 }
this.assessor.getClass().getName() != this.players.getClass().getName()
this.assessor.getClass().getName() != this.gameCards.internal.getClass().getName()
this.assessor.getClass().getName() != this.currentBattle.game.players.getClass().getName()
this.assessor.getClass().getName() != this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName()
this.assessor.getClass().getName() != this.currentBattle.battleCards.getClass().getName()
this.assessor.getClass().getName() != this.currentBattle.battlers.getClass().getName()
this.assessor.getClass().getName() != this.winner.strategy.getClass().getName()
this.assessor.getClass().getName() != this.winner.hand.internal.getClass().getName()
this.assessor.getClass().getName() != this.battlesByNbrOfContinuations.getClass().getName()
this.players.getClass().getName() != this.gameCards.internal.getClass().getName()
this.players.getClass().getName() != this.currentBattle.game.assessor.getClass().getName()
this.players.getClass().getName() != this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName()
this.players.getClass().getName() != this.currentBattle.battleCards.getClass().getName()
this.players.getClass().getName() != this.currentBattle.battlers.getClass().getName()
this.players.getClass().getName() != this.winner.strategy.getClass().getName()
this.players.getClass().getName() != this.winner.hand.internal.getClass().getName()
this.players.getClass().getName() != this.battlesByNbrOfContinuations.getClass().getName()
this.gameCards.internal.getClass().getName() != this.currentBattle.game.assessor.getClass().getName()
this.gameCards.internal.getClass().getName() != this.currentBattle.game.players.getClass().getName()
this.gameCards.internal.getClass().getName() != this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName()
this.gameCards.internal.getClass().getName() != this.currentBattle.battleCards.getClass().getName()
this.gameCards.internal.getClass().getName() != this.currentBattle.battlers.getClass().getName()
this.gameCards.internal.getClass().getName() != this.winner.strategy.getClass().getName()
this.gameCards.internal.getClass().getName() != this.battlesByNbrOfContinuations.getClass().getName()
this.currentBattle.game.assessor.getClass().getName() != this.currentBattle.game.players.getClass().getName()
this.currentBattle.game.assessor.getClass().getName() != this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName()
this.currentBattle.game.assessor.getClass().getName() != this.currentBattle.battleCards.getClass().getName()
this.currentBattle.game.assessor.getClass().getName() != this.currentBattle.battlers.getClass().getName()
this.currentBattle.game.assessor.getClass().getName() != this.winner.strategy.getClass().getName()
this.currentBattle.game.assessor.getClass().getName() != this.winner.hand.internal.getClass().getName()
this.currentBattle.game.assessor.getClass().getName() != this.battlesByNbrOfContinuations.getClass().getName()
this.currentBattle.game.players.getClass().getName() != this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName()
this.currentBattle.game.players.getClass().getName() != this.currentBattle.battleCards.getClass().getName()
this.currentBattle.game.players.getClass().getName() != this.currentBattle.battlers.getClass().getName()
this.currentBattle.game.players.getClass().getName() != this.winner.strategy.getClass().getName()
this.currentBattle.game.players.getClass().getName() != this.winner.hand.internal.getClass().getName()
this.currentBattle.game.players.getClass().getName() != this.battlesByNbrOfContinuations.getClass().getName()
this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName() != this.currentBattle.battleCards.getClass().getName()
this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName() != this.currentBattle.battlers.getClass().getName()
this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName() != this.winner.strategy.getClass().getName()
this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName() != this.winner.hand.internal.getClass().getName()
this.currentBattle.battleCards.getClass().getName() != this.winner.strategy.getClass().getName()
this.currentBattle.battleCards.getClass().getName() != this.winner.hand.internal.getClass().getName()
this.currentBattle.battleCards.getClass().getName() != this.battlesByNbrOfContinuations.getClass().getName()
this.currentBattle.battlers.getClass().getName() != this.winner.strategy.getClass().getName()
this.currentBattle.battlers.getClass().getName() != this.winner.hand.internal.getClass().getName()
this.currentBattle.battlers.getClass().getName() != this.battlesByNbrOfContinuations.getClass().getName()
this.winner.strategy.getClass().getName() != this.winner.hand.internal.getClass().getName()
this.winner.strategy.getClass().getName() != this.battlesByNbrOfContinuations.getClass().getName()
this.winner.hand.internal.getClass().getName() != this.battlesByNbrOfContinuations.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.BattleRoyaleGame():::EXIT
this.players == null
this.gameCards == null
this.currentRoundNumber == 0
this.currentBattle == null
this.winner == null
this.swappedHandsCount == 0
this.unresolvedBattleCount == 0
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.BattleRoyaleGame(org.washcom.cardgames.battleroyale.BattleAssessor):::ENTER
arg0.getClass().getName() == org.washcom.cardgames.battleroyale.DefaultBattleAccessor.class
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.BattleRoyaleGame(org.washcom.cardgames.battleroyale.BattleAssessor):::EXIT
this.assessor == orig(arg0)
this.assessor.getClass().getName() == orig(arg0.getClass().getName())
this.players == null
this.gameCards == null
this.currentRoundNumber == 0
this.currentBattle == null
this.winner == null
this.swappedHandsCount == 0
this.unresolvedBattleCount == 0
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.battle():::ENTER
this.players != null
this.gameCards != null
this.currentBattle.game.winner == null
this.currentBattle.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.currentBattle.battlers != null
this.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.winner == null
size(this.currentBattle.battleCards[]) one of { 2, 3 }
size(this.currentBattle.battlers[]) one of { 2, 3 }
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.battle():::EXIT
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.assessor == orig(this.assessor)
this.assessor == orig(this.currentBattle.game.assessor)
this.assessor.getClass().getName() == orig(this.assessor.getClass().getName())
this.assessor.getClass().getName() == orig(this.currentBattle.game.assessor.getClass().getName())
this.players == orig(this.players)
this.players == orig(this.currentBattle.game.players)
this.players[] == orig(this.players[])
this.players.getClass().getName() == orig(this.players.getClass().getName())
this.players.getClass().getName() == orig(this.currentBattle.game.players.getClass().getName())
this.gameCards == orig(this.gameCards)
this.gameCards == orig(this.currentBattle.game.gameCards)
this.gameCards.internal == orig(this.gameCards.internal)
this.gameCards.internal.getClass().getName() == orig(this.gameCards.internal.getClass().getName())
this.gameCards.random == orig(this.gameCards.random)
this.currentRoundNumber == this.currentBattle.game.currentRoundNumber
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.currentBattle.game == orig(this)
this.currentBattle.game == orig(this.currentBattle.game)
this.currentBattle.game.players[].getClass().getName() == orig(this.currentBattle.game.players[].getClass().getName())
this.currentBattle.game.winner == orig(this.currentBattle.game.winner)
this.currentBattle.battleCards.getClass().getName() == orig(this.currentBattle.battleCards.getClass().getName())
this.winner == orig(this.winner)
this.swapHandsRuleEnabled == orig(this.currentBattle.game.swapHandsRuleEnabled)
this.swapHandsRuleEnabled == orig(this.swapHandsRuleEnabled)
this.battlesByNbrOfContinuations == orig(this.currentBattle.game.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations == orig(this.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName())
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.battlesByNbrOfContinuations.getClass().getName())
this.players != null
this.gameCards != null
this.currentRoundNumber >= 1
this.currentBattle != null
this.currentBattle.game.winner == null
this.currentBattle.battlers != null
this.winner == null
this.assessor.getClass().getName() != orig(this.currentBattle.game.players.getClass().getName())
this.assessor.getClass().getName() != orig(this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName())
this.assessor.getClass().getName() != orig(this.currentBattle.battleCards.getClass().getName())
this.players.getClass().getName() != orig(this.currentBattle.game.assessor.getClass().getName())
this.players.getClass().getName() != orig(this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName())
this.players.getClass().getName() != orig(this.currentBattle.battleCards.getClass().getName())
this.gameCards.internal.getClass().getName() != orig(this.currentBattle.game.assessor.getClass().getName())
this.gameCards.internal.getClass().getName() != orig(this.currentBattle.game.players.getClass().getName())
this.gameCards.internal.getClass().getName() != orig(this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName())
this.gameCards.internal.getClass().getName() != orig(this.currentBattle.battleCards.getClass().getName())
this.currentRoundNumber - orig(this.currentRoundNumber) - 1 == 0
this.currentRoundNumber - orig(this.currentBattle.number) - 1 == 0
this.currentBattle.game.players[] == orig(this.currentBattle.game.players[]) (elementwise)
this.currentBattle.game.players[].getClass().getName() == orig(this.currentBattle.game.players[].getClass().getName()) (elementwise)
this.currentBattle.battleCards.getClass().getName() != orig(this.currentBattle.game.assessor.getClass().getName())
this.currentBattle.battleCards.getClass().getName() != orig(this.currentBattle.game.players.getClass().getName())
this.currentBattle.battleCards.getClass().getName() != orig(this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName())
this.swappedHandsCount >= orig(this.currentBattle.game.swappedHandsCount)
this.swappedHandsCount >= orig(this.swappedHandsCount)
this.unresolvedBattleCount >= orig(this.currentBattle.game.unresolvedBattleCount)
this.unresolvedBattleCount >= orig(this.unresolvedBattleCount)
this.battlesByNbrOfContinuations.getClass().getName() != orig(this.currentBattle.game.assessor.getClass().getName())
this.battlesByNbrOfContinuations.getClass().getName() != orig(this.currentBattle.game.players.getClass().getName())
this.battlesByNbrOfContinuations.getClass().getName() != orig(this.currentBattle.battleCards.getClass().getName())
size(this.currentBattle.battleCards[])-1 <= orig(size(this.currentBattle.battleCards[]))
size(this.currentBattle.battlers[])-1 <= orig(size(this.currentBattle.battlers[]))
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.burnAThreeAndPlayAnother(org.washcom.cardgames.battleroyale.BattleCard):::ENTER
this.currentRoundNumber == this.currentBattle.game.currentRoundNumber
this.currentBattle.game.winner == null
this.currentBattle.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.currentBattle.continuations one of { 0, 2, 3 }
this.winner == null
this.swappedHandsCount one of { 0, 1, 4 }
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == 14
arg0.card.denomination has only one value
arg0.playedBy has only one value
arg0.playedBy.participatingInBattle == true
arg0.playedBy.nbrOfBattlesFought == 0
arg0.playedBy.nbrOfBattlesWon == 0
arg0.playedBy.strategy has only one value
arg0.playedBy.strategy.getClass().getName() == org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy.class
arg0.playedBy.name has only one value
arg0.playedBy.name.toString == "Patrick"
arg0.playedBy.hand has only one value
size(this.currentBattle.battleCards[]) one of { 2, 3 }
size(this.currentBattle.battlers[]) one of { 2, 3 }
this.assessor.getClass().getName() != arg0.playedBy.strategy.getClass().getName()
this.players.getClass().getName() != arg0.playedBy.strategy.getClass().getName()
this.gameCards.internal.getClass().getName() != arg0.playedBy.strategy.getClass().getName()
this.currentBattle.battleCards.getClass().getName() != arg0.playedBy.strategy.getClass().getName()
this.battlesByNbrOfContinuations.getClass().getName() != arg0.playedBy.strategy.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.burnAThreeAndPlayAnother(org.washcom.cardgames.battleroyale.BattleCard):::EXIT
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.assessor == orig(this.assessor)
this.assessor == orig(this.currentBattle.game.assessor)
this.assessor.getClass().getName() == orig(this.assessor.getClass().getName())
this.assessor.getClass().getName() == orig(this.currentBattle.game.assessor.getClass().getName())
this.players == orig(this.players)
this.players == orig(this.currentBattle.game.players)
this.players[] == orig(this.players[])
this.players.getClass().getName() == orig(this.players.getClass().getName())
this.players.getClass().getName() == orig(this.currentBattle.game.players.getClass().getName())
this.gameCards == orig(this.gameCards)
this.gameCards == orig(this.currentBattle.game.gameCards)
this.gameCards.internal == orig(this.gameCards.internal)
this.gameCards.internal.getClass().getName() == orig(this.gameCards.internal.getClass().getName())
this.gameCards.random == orig(this.gameCards.random)
this.currentRoundNumber == this.currentBattle.game.currentRoundNumber
this.currentRoundNumber == orig(this.currentRoundNumber)
this.currentRoundNumber == orig(this.currentBattle.number)
this.currentRoundNumber == orig(this.currentBattle.game.currentRoundNumber)
this.currentBattle == orig(this.currentBattle)
this.currentBattle == orig(this.currentBattle.game.currentBattle)
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.currentBattle.game == orig(this)
this.currentBattle.game == orig(this.currentBattle.game)
this.currentBattle.game.players[] == orig(this.currentBattle.game.players[])
this.currentBattle.game.winner == orig(this.currentBattle.game.winner)
this.currentBattle.battleCards == orig(this.currentBattle.battleCards)
this.currentBattle.battleCards.getClass().getName() == orig(this.currentBattle.battleCards.getClass().getName())
this.currentBattle.battleCards.getClass().getName() == orig(this.currentBattle.battlers.getClass().getName())
this.currentBattle.battlers == orig(this.currentBattle.battlers)
this.currentBattle.battlers[] == orig(this.currentBattle.battlers[])
this.currentBattle.continuations == orig(this.currentBattle.continuations)
this.winner == orig(this.winner)
this.swapHandsRuleEnabled == orig(this.currentBattle.game.swapHandsRuleEnabled)
this.swapHandsRuleEnabled == orig(this.swapHandsRuleEnabled)
this.swappedHandsCount == orig(this.currentBattle.game.swappedHandsCount)
this.swappedHandsCount == orig(this.swappedHandsCount)
this.unresolvedBattleCount == orig(this.currentBattle.game.unresolvedBattleCount)
this.unresolvedBattleCount == orig(this.unresolvedBattleCount)
this.battlesByNbrOfContinuations == orig(this.currentBattle.game.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations == orig(this.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName())
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.battlesByNbrOfContinuations.getClass().getName())
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == orig(org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE)
arg0.card == orig(arg0.card)
arg0.card.suit == orig(arg0.card.suit)
arg0.card.denomination == orig(arg0.card.denomination)
arg0.playedBy == orig(arg0.playedBy)
arg0.playedBy.participatingInBattle == orig(arg0.playedBy.participatingInBattle)
arg0.playedBy.nbrOfBattlesFought == orig(arg0.playedBy.nbrOfBattlesFought)
arg0.playedBy.nbrOfBattlesWon == orig(arg0.playedBy.nbrOfBattlesWon)
arg0.playedBy.strategy == orig(arg0.playedBy.strategy)
arg0.playedBy.strategy.getClass().getName() == return.playedBy.strategy.getClass().getName()
arg0.playedBy.strategy.getClass().getName() == orig(arg0.playedBy.strategy.getClass().getName())
arg0.playedBy.name == orig(arg0.playedBy.name)
arg0.playedBy.name.toString == orig(arg0.playedBy.name.toString)
arg0.playedBy.hand == orig(arg0.playedBy.hand)
size(this.currentBattle.battleCards[]) == orig(size(this.currentBattle.battleCards[]))
this.currentBattle.game.winner == null
this.currentBattle.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.currentBattle.continuations one of { 0, 2, 3 }
this.winner == null
this.swappedHandsCount one of { 0, 1, 4 }
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == 14
arg0.card.denomination has only one value
arg0.playedBy has only one value
arg0.playedBy.participatingInBattle == true
arg0.playedBy.nbrOfBattlesFought == 0
arg0.playedBy.nbrOfBattlesWon == 0
arg0.playedBy.strategy has only one value
arg0.playedBy.strategy.getClass().getName() == org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy.class
arg0.playedBy.name has only one value
arg0.playedBy.name.toString == "Patrick"
arg0.playedBy.hand has only one value
return.playedBy has only one value
return.playedBy.participatingInBattle == true
return.playedBy.nbrOfBattlesFought == 0
return.playedBy.nbrOfBattlesWon == 0
return.playedBy.strategy has only one value
return.playedBy.name has only one value
return.playedBy.name.toString == "Patrick"
return.playedBy.hand has only one value
size(this.currentBattle.battleCards[]) one of { 2, 3 }
size(this.currentBattle.battlers[]) one of { 2, 3 }
this.assessor.getClass().getName() != arg0.playedBy.strategy.getClass().getName()
this.players.getClass().getName() != arg0.playedBy.strategy.getClass().getName()
this.gameCards.internal.getClass().getName() != arg0.playedBy.strategy.getClass().getName()
this.currentBattle.battleCards.getClass().getName() != arg0.playedBy.strategy.getClass().getName()
this.battlesByNbrOfContinuations.getClass().getName() != arg0.playedBy.strategy.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.getActivePlayers():::ENTER
this.players != null
this.gameCards != null
this.currentBattle.game.winner == null
this.winner == null
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.getActivePlayers():::EXIT
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.assessor == orig(this.assessor)
this.assessor.getClass().getName() == orig(this.assessor.getClass().getName())
this.players == orig(this.players)
this.players[] == orig(this.players[])
this.players.getClass().getName() == orig(this.players.getClass().getName())
this.gameCards == orig(this.gameCards)
this.gameCards.internal == orig(this.gameCards.internal)
this.gameCards.internal.getClass().getName() == orig(this.gameCards.internal.getClass().getName())
this.gameCards.random == orig(this.gameCards.random)
this.currentRoundNumber == orig(this.currentRoundNumber)
this.currentBattle == orig(this.currentBattle)
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.currentBattle.number == orig(this.currentBattle.number)
this.currentBattle.number == orig(this.currentBattle.game.currentRoundNumber)
this.currentBattle.game == orig(this)
this.currentBattle.game == orig(this.currentBattle.game)
this.currentBattle.game.assessor == orig(this.currentBattle.game.assessor)
this.currentBattle.game.assessor.getClass().getName() == orig(this.currentBattle.game.assessor.getClass().getName())
this.currentBattle.game.players == orig(this.currentBattle.game.players)
this.currentBattle.game.players[] == orig(this.currentBattle.game.players[])
this.currentBattle.game.players.getClass().getName() == orig(this.currentBattle.game.players.getClass().getName())
this.currentBattle.game.gameCards == orig(this.currentBattle.game.gameCards)
this.currentBattle.game.currentBattle == orig(this.currentBattle.game.currentBattle)
this.currentBattle.game.winner == orig(this.currentBattle.game.winner)
this.currentBattle.game.swapHandsRuleEnabled == orig(this.currentBattle.game.swapHandsRuleEnabled)
this.currentBattle.game.swappedHandsCount == orig(this.currentBattle.game.swappedHandsCount)
this.currentBattle.game.unresolvedBattleCount == orig(this.currentBattle.game.unresolvedBattleCount)
this.currentBattle.game.battlesByNbrOfContinuations == orig(this.currentBattle.game.battlesByNbrOfContinuations)
this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName() == orig(this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName())
this.currentBattle.battleCards == orig(this.currentBattle.battleCards)
this.currentBattle.battleCards[] == orig(this.currentBattle.battleCards[])
this.currentBattle.battleCards.getClass().getName() == return.getClass().getName()
this.currentBattle.battleCards.getClass().getName() == orig(this.currentBattle.battleCards.getClass().getName())
this.currentBattle.battlers == orig(this.currentBattle.battlers)
this.currentBattle.battlers[] == orig(this.currentBattle.battlers[])
this.currentBattle.battlers.getClass().getName() == return.getClass().getName()
this.currentBattle.battlers.getClass().getName() == orig(this.currentBattle.battlers.getClass().getName())
this.currentBattle.continuations == orig(this.currentBattle.continuations)
this.winner == orig(this.winner)
this.swapHandsRuleEnabled == orig(this.swapHandsRuleEnabled)
this.swappedHandsCount == orig(this.swappedHandsCount)
this.unresolvedBattleCount == orig(this.unresolvedBattleCount)
this.battlesByNbrOfContinuations == orig(this.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.battlesByNbrOfContinuations.getClass().getName())
this.players != null
this.gameCards != null
this.currentBattle.game.winner == null
this.winner == null
return != null
return[] elements != null
return[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) one of { 1, 2, 3 }
this.assessor.getClass().getName() != return.getClass().getName()
this.players.getClass().getName() != return.getClass().getName()
this.gameCards.internal.getClass().getName() != return.getClass().getName()
this.currentBattle.game.assessor.getClass().getName() != return.getClass().getName()
this.currentBattle.game.players.getClass().getName() != return.getClass().getName()
this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName() != return.getClass().getName()
this.battlesByNbrOfContinuations.getClass().getName() != return.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.getCurrentBattle():::ENTER
this.currentRoundNumber == this.currentBattle.game.currentRoundNumber
this.players != null
this.gameCards != null
this.currentBattle != null
this.currentBattle.game.winner == null
this.currentBattle.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.currentBattle.battlers != null
this.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.currentBattle.continuations one of { 0, 2, 3 }
this.winner == null
this.swappedHandsCount one of { 0, 1, 4 }
size(this.currentBattle.battleCards[]) one of { 2, 3 }
size(this.currentBattle.battlers[]) one of { 2, 3 }
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.getCurrentBattle():::EXIT
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.assessor == orig(this.assessor)
this.assessor == orig(this.currentBattle.game.assessor)
this.assessor.getClass().getName() == return.game.assessor.getClass().getName()
this.assessor.getClass().getName() == orig(this.assessor.getClass().getName())
this.assessor.getClass().getName() == orig(this.currentBattle.game.assessor.getClass().getName())
this.players == orig(this.players)
this.players == orig(this.currentBattle.game.players)
this.players[] == orig(this.players[])
this.players.getClass().getName() == return.game.players.getClass().getName()
this.players.getClass().getName() == orig(this.players.getClass().getName())
this.players.getClass().getName() == orig(this.currentBattle.game.players.getClass().getName())
this.gameCards == orig(this.gameCards)
this.gameCards == orig(this.currentBattle.game.gameCards)
this.gameCards.internal == orig(this.gameCards.internal)
this.gameCards.internal.getClass().getName() == orig(this.gameCards.internal.getClass().getName())
this.gameCards.random == orig(this.gameCards.random)
this.currentRoundNumber == this.currentBattle.game.currentRoundNumber
this.currentRoundNumber == orig(this.currentRoundNumber)
this.currentRoundNumber == orig(this.currentBattle.number)
this.currentRoundNumber == orig(this.currentBattle.game.currentRoundNumber)
this.currentBattle == orig(this.currentBattle)
this.currentBattle == orig(this.currentBattle.game.currentBattle)
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.currentBattle.game == orig(this)
this.currentBattle.game == orig(this.currentBattle.game)
this.currentBattle.game.players[] == orig(this.currentBattle.game.players[])
this.currentBattle.game.winner == orig(this.currentBattle.game.winner)
this.currentBattle.battleCards == orig(this.currentBattle.battleCards)
this.currentBattle.battleCards[] == orig(this.currentBattle.battleCards[])
this.currentBattle.battleCards.getClass().getName() == return.battleCards.getClass().getName()
this.currentBattle.battlers == orig(this.currentBattle.battlers)
this.currentBattle.battlers[] == orig(this.currentBattle.battlers[])
this.currentBattle.battlers.getClass().getName() == return.battleCards.getClass().getName()
this.currentBattle.continuations == orig(this.currentBattle.continuations)
this.winner == orig(this.winner)
this.swapHandsRuleEnabled == orig(this.currentBattle.game.swapHandsRuleEnabled)
this.swapHandsRuleEnabled == orig(this.swapHandsRuleEnabled)
this.swappedHandsCount == orig(this.currentBattle.game.swappedHandsCount)
this.swappedHandsCount == orig(this.swappedHandsCount)
this.unresolvedBattleCount == orig(this.currentBattle.game.unresolvedBattleCount)
this.unresolvedBattleCount == orig(this.unresolvedBattleCount)
this.battlesByNbrOfContinuations == orig(this.currentBattle.game.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations == orig(this.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations.getClass().getName() == return.game.battlesByNbrOfContinuations.getClass().getName()
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName())
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.battlesByNbrOfContinuations.getClass().getName())
return.battleCards.getClass().getName() == return.battlers.getClass().getName()
return.battleCards.getClass().getName() == orig(this.currentBattle.battleCards.getClass().getName())
return.battleCards.getClass().getName() == orig(this.currentBattle.battlers.getClass().getName())
this.players != null
this.gameCards != null
this.currentBattle != null
this.currentBattle.game.winner == null
this.currentBattle.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.currentBattle.battlers != null
this.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.currentBattle.continuations one of { 0, 2, 3 }
this.winner == null
this.swappedHandsCount one of { 0, 1, 4 }
return != null
return.game != null
return.game.assessor != null
return.game.players != null
return.game.players[] contains no nulls and has only one value, of length 3
return.game.players[] elements != null
return.game.players[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
return.game.players[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
return.game.gameCards != null
return.game.currentBattle != null
return.game.winner == null
return.game.swapHandsRuleEnabled == true
return.game.swappedHandsCount one of { 0, 1, 4 }
return.game.unresolvedBattleCount >= 0
return.game.battlesByNbrOfContinuations != null
return.battleCards != null
return.battleCards[] elements != null
return.battleCards[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
return.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
return.battleCards.getClass().getName() == java.util.ArrayList.class
return.battlers != null
return.battlers[] elements != null
return.battlers[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
return.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
return.continuations one of { 0, 2, 3 }
size(this.currentBattle.battleCards[]) one of { 2, 3 }
size(this.currentBattle.battlers[]) one of { 2, 3 }
size(return.game.players[]) == 3
size(return.battleCards[]) one of { 2, 3 }
size(return.battlers[]) one of { 2, 3 }
this.assessor.getClass().getName() != return.battleCards.getClass().getName()
this.players.getClass().getName() != return.battleCards.getClass().getName()
this.gameCards.internal.getClass().getName() != return.battleCards.getClass().getName()
this.battlesByNbrOfContinuations.getClass().getName() != return.battleCards.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.getGameCards():::ENTER
this.currentRoundNumber == this.currentBattle.game.currentRoundNumber
this.players != null
this.gameCards != null
this.currentRoundNumber >= 1
this.currentBattle != null
this.currentBattle.game.winner == null
this.currentBattle.battlers != null
this.winner == null
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.getGameCards():::EXIT
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.assessor == orig(this.assessor)
this.assessor == orig(this.currentBattle.game.assessor)
this.assessor.getClass().getName() == orig(this.assessor.getClass().getName())
this.assessor.getClass().getName() == orig(this.currentBattle.game.assessor.getClass().getName())
this.players == orig(this.players)
this.players == orig(this.currentBattle.game.players)
this.players[] == orig(this.players[])
this.players.getClass().getName() == orig(this.players.getClass().getName())
this.players.getClass().getName() == orig(this.currentBattle.game.players.getClass().getName())
this.gameCards == orig(this.gameCards)
this.gameCards == orig(this.currentBattle.game.gameCards)
this.gameCards.internal == orig(this.gameCards.internal)
this.gameCards.internal.getClass().getName() == return.internal.getClass().getName()
this.gameCards.random == orig(this.gameCards.random)
this.currentRoundNumber == this.currentBattle.game.currentRoundNumber
this.currentRoundNumber == orig(this.currentRoundNumber)
this.currentRoundNumber == orig(this.currentBattle.number)
this.currentRoundNumber == orig(this.currentBattle.game.currentRoundNumber)
this.currentBattle == orig(this.currentBattle)
this.currentBattle == orig(this.currentBattle.game.currentBattle)
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.currentBattle.game == orig(this)
this.currentBattle.game == orig(this.currentBattle.game)
this.currentBattle.game.players[] == orig(this.currentBattle.game.players[])
this.currentBattle.game.winner == orig(this.currentBattle.game.winner)
this.currentBattle.battleCards == orig(this.currentBattle.battleCards)
this.currentBattle.battleCards[] == orig(this.currentBattle.battleCards[])
this.currentBattle.battleCards.getClass().getName() == orig(this.currentBattle.battleCards.getClass().getName())
this.currentBattle.battleCards.getClass().getName() == orig(this.currentBattle.battlers.getClass().getName())
this.currentBattle.battlers == orig(this.currentBattle.battlers)
this.currentBattle.battlers[] == orig(this.currentBattle.battlers[])
this.currentBattle.continuations == orig(this.currentBattle.continuations)
this.winner == orig(this.winner)
this.swapHandsRuleEnabled == orig(this.currentBattle.game.swapHandsRuleEnabled)
this.swapHandsRuleEnabled == orig(this.swapHandsRuleEnabled)
this.swappedHandsCount == orig(this.currentBattle.game.swappedHandsCount)
this.swappedHandsCount == orig(this.swappedHandsCount)
this.unresolvedBattleCount == orig(this.currentBattle.game.unresolvedBattleCount)
this.unresolvedBattleCount == orig(this.unresolvedBattleCount)
this.battlesByNbrOfContinuations == orig(this.currentBattle.game.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations == orig(this.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName())
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.battlesByNbrOfContinuations.getClass().getName())
return.internal.getClass().getName() == orig(this.gameCards.internal.getClass().getName())
this.players != null
this.gameCards != null
this.currentRoundNumber >= 1
this.currentBattle != null
this.currentBattle.game.winner == null
this.currentBattle.battlers != null
this.winner == null
return != null
return.internal != null
return.internal.getClass().getName() == java.util.ArrayDeque.class
return.random != null
this.assessor.getClass().getName() != return.internal.getClass().getName()
this.players.getClass().getName() != return.internal.getClass().getName()
this.currentBattle.battleCards.getClass().getName() != return.internal.getClass().getName()
this.battlesByNbrOfContinuations.getClass().getName() != return.internal.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.getPlayers():::ENTER
this.currentRoundNumber == this.currentBattle.game.currentRoundNumber
this.players != null
this.gameCards != null
this.currentRoundNumber >= 1
this.currentBattle != null
this.currentBattle.game.winner == null
this.currentBattle.battleCards[] == []
this.currentBattle.battleCards[].getClass().getName() == []
this.currentBattle.battlers != null
this.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.winner == null
size(this.currentBattle.battlers[]) one of { 2, 3 }
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.getPlayers():::EXIT
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.assessor == orig(this.assessor)
this.assessor == orig(this.currentBattle.game.assessor)
this.assessor.getClass().getName() == orig(this.assessor.getClass().getName())
this.assessor.getClass().getName() == orig(this.currentBattle.game.assessor.getClass().getName())
this.players == orig(this.players)
this.players == orig(this.currentBattle.game.players)
this.players[] == orig(this.players[])
this.players.getClass().getName() == return.getClass().getName()
this.gameCards == orig(this.gameCards)
this.gameCards == orig(this.currentBattle.game.gameCards)
this.gameCards.internal == orig(this.gameCards.internal)
this.gameCards.internal.getClass().getName() == orig(this.gameCards.internal.getClass().getName())
this.gameCards.random == orig(this.gameCards.random)
this.currentRoundNumber == this.currentBattle.game.currentRoundNumber
this.currentRoundNumber == orig(this.currentRoundNumber)
this.currentRoundNumber == orig(this.currentBattle.number)
this.currentRoundNumber == orig(this.currentBattle.game.currentRoundNumber)
this.currentBattle == orig(this.currentBattle)
this.currentBattle == orig(this.currentBattle.game.currentBattle)
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.currentBattle.game == orig(this)
this.currentBattle.game == orig(this.currentBattle.game)
this.currentBattle.game.players[] == orig(this.currentBattle.game.players[])
this.currentBattle.game.players.getClass().getName() == return.getClass().getName()
this.currentBattle.game.winner == orig(this.currentBattle.game.winner)
this.currentBattle.battleCards == orig(this.currentBattle.battleCards)
this.currentBattle.battleCards[] == orig(this.currentBattle.battleCards[])
this.currentBattle.battleCards.getClass().getName() == orig(this.currentBattle.battleCards.getClass().getName())
this.currentBattle.battleCards.getClass().getName() == orig(this.currentBattle.battlers.getClass().getName())
this.currentBattle.battlers == orig(this.currentBattle.battlers)
this.currentBattle.battlers[] == orig(this.currentBattle.battlers[])
this.currentBattle.continuations == orig(this.currentBattle.continuations)
this.winner == orig(this.winner)
this.swapHandsRuleEnabled == orig(this.currentBattle.game.swapHandsRuleEnabled)
this.swapHandsRuleEnabled == orig(this.swapHandsRuleEnabled)
this.swappedHandsCount == orig(this.currentBattle.game.swappedHandsCount)
this.swappedHandsCount == orig(this.swappedHandsCount)
this.unresolvedBattleCount == orig(this.currentBattle.game.unresolvedBattleCount)
this.unresolvedBattleCount == orig(this.unresolvedBattleCount)
this.battlesByNbrOfContinuations == orig(this.currentBattle.game.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations == orig(this.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName())
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.battlesByNbrOfContinuations.getClass().getName())
return.getClass().getName() == orig(this.players.getClass().getName())
return.getClass().getName() == orig(this.currentBattle.game.players.getClass().getName())
this.players != null
this.gameCards != null
this.currentRoundNumber >= 1
this.currentBattle != null
this.currentBattle.game.winner == null
this.currentBattle.battleCards[] == []
this.currentBattle.battleCards[].getClass().getName() == []
this.currentBattle.battlers != null
this.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.winner == null
return != null
return[] contains no nulls and has only one value, of length 3
return[] elements != null
return[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
return[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
return.getClass().getName() == java.util.Arrays$ArrayList.class
size(this.currentBattle.battlers[]) one of { 2, 3 }
size(return[]) == 3
this.assessor.getClass().getName() != return.getClass().getName()
this.gameCards.internal.getClass().getName() != return.getClass().getName()
this.currentBattle.battleCards.getClass().getName() != return.getClass().getName()
this.battlesByNbrOfContinuations.getClass().getName() != return.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.getRoundsPlayed():::ENTER
this.currentRoundNumber == this.currentBattle.game.currentRoundNumber
this.currentBattle.battleCards[].getClass().getName() one of { [], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.currentBattle.continuations one of { 1, 2, 3 }
size(this.currentBattle.battleCards[]) one of { 0, 2 }
size(this.currentBattle.battlers[]) one of { 1, 2 }
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.getRoundsPlayed():::EXIT
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.assessor == orig(this.assessor)
this.assessor == orig(this.currentBattle.game.assessor)
this.assessor.getClass().getName() == orig(this.assessor.getClass().getName())
this.assessor.getClass().getName() == orig(this.currentBattle.game.assessor.getClass().getName())
this.players == orig(this.players)
this.players == orig(this.currentBattle.game.players)
this.players[] == orig(this.players[])
this.players.getClass().getName() == orig(this.players.getClass().getName())
this.players.getClass().getName() == orig(this.currentBattle.game.players.getClass().getName())
this.gameCards == orig(this.gameCards)
this.gameCards == orig(this.currentBattle.game.gameCards)
this.gameCards.internal == orig(this.gameCards.internal)
this.gameCards.internal.getClass().getName() == orig(this.gameCards.internal.getClass().getName())
this.gameCards.internal.getClass().getName() == orig(this.winner.hand.internal.getClass().getName())
this.gameCards.random == orig(this.gameCards.random)
this.currentRoundNumber == this.currentBattle.game.currentRoundNumber
this.currentRoundNumber == orig(this.currentRoundNumber)
this.currentRoundNumber == orig(this.currentBattle.number)
this.currentRoundNumber == orig(this.currentBattle.game.currentRoundNumber)
this.currentBattle == orig(this.currentBattle)
this.currentBattle == orig(this.currentBattle.game.currentBattle)
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.currentBattle.game == orig(this)
this.currentBattle.game == orig(this.currentBattle.game)
this.currentBattle.game.players[] == orig(this.currentBattle.game.players[])
this.currentBattle.game.winner == orig(this.currentBattle.game.winner)
this.currentBattle.battleCards == orig(this.currentBattle.battleCards)
this.currentBattle.battleCards[] == orig(this.currentBattle.battleCards[])
this.currentBattle.battleCards.getClass().getName() == orig(this.currentBattle.battleCards.getClass().getName())
this.currentBattle.battleCards.getClass().getName() == orig(this.currentBattle.battlers.getClass().getName())
this.currentBattle.battlers == orig(this.currentBattle.battlers)
this.currentBattle.battlers[] == orig(this.currentBattle.battlers[])
this.currentBattle.continuations == orig(this.currentBattle.continuations)
this.winner == orig(this.winner)
this.winner.participatingInBattle == orig(this.winner.participatingInBattle)
this.winner.nbrOfBattlesFought == orig(this.winner.nbrOfBattlesFought)
this.winner.nbrOfBattlesWon == orig(this.winner.nbrOfBattlesWon)
this.winner.strategy == orig(this.winner.strategy)
this.winner.strategy.getClass().getName() == orig(this.winner.strategy.getClass().getName())
this.winner.name == orig(this.winner.name)
this.winner.name.toString == orig(this.winner.name.toString)
this.winner.hand == orig(this.winner.hand)
this.winner.hand.internal == orig(this.winner.hand.internal)
this.winner.hand.random == orig(this.winner.hand.random)
this.swapHandsRuleEnabled == orig(this.currentBattle.game.swapHandsRuleEnabled)
this.swapHandsRuleEnabled == orig(this.swapHandsRuleEnabled)
this.swappedHandsCount == orig(this.currentBattle.game.swappedHandsCount)
this.swappedHandsCount == orig(this.swappedHandsCount)
this.unresolvedBattleCount == orig(this.currentBattle.game.unresolvedBattleCount)
this.unresolvedBattleCount == orig(this.unresolvedBattleCount)
this.battlesByNbrOfContinuations == orig(this.currentBattle.game.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations == orig(this.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName())
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.battlesByNbrOfContinuations.getClass().getName())
this.currentBattle.battleCards[].getClass().getName() one of { [], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.currentBattle.continuations one of { 1, 2, 3 }
size(this.currentBattle.battleCards[]) one of { 0, 2 }
size(this.currentBattle.battlers[]) one of { 1, 2 }
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.getSwappedHandsCount():::ENTER
this.currentRoundNumber == this.currentBattle.game.currentRoundNumber
this.currentBattle.battleCards[].getClass().getName() one of { [], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.currentBattle.continuations one of { 1, 2, 3 }
size(this.currentBattle.battleCards[]) one of { 0, 2 }
size(this.currentBattle.battlers[]) one of { 1, 2 }
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.getSwappedHandsCount():::EXIT
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.assessor == orig(this.assessor)
this.assessor == orig(this.currentBattle.game.assessor)
this.assessor.getClass().getName() == orig(this.assessor.getClass().getName())
this.assessor.getClass().getName() == orig(this.currentBattle.game.assessor.getClass().getName())
this.players == orig(this.players)
this.players == orig(this.currentBattle.game.players)
this.players[] == orig(this.players[])
this.players.getClass().getName() == orig(this.players.getClass().getName())
this.players.getClass().getName() == orig(this.currentBattle.game.players.getClass().getName())
this.gameCards == orig(this.gameCards)
this.gameCards == orig(this.currentBattle.game.gameCards)
this.gameCards.internal == orig(this.gameCards.internal)
this.gameCards.internal.getClass().getName() == orig(this.gameCards.internal.getClass().getName())
this.gameCards.internal.getClass().getName() == orig(this.winner.hand.internal.getClass().getName())
this.gameCards.random == orig(this.gameCards.random)
this.currentRoundNumber == this.currentBattle.game.currentRoundNumber
this.currentRoundNumber == orig(this.currentRoundNumber)
this.currentRoundNumber == orig(this.currentBattle.number)
this.currentRoundNumber == orig(this.currentBattle.game.currentRoundNumber)
this.currentBattle == orig(this.currentBattle)
this.currentBattle == orig(this.currentBattle.game.currentBattle)
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.currentBattle.game == orig(this)
this.currentBattle.game == orig(this.currentBattle.game)
this.currentBattle.game.players[] == orig(this.currentBattle.game.players[])
this.currentBattle.game.winner == orig(this.currentBattle.game.winner)
this.currentBattle.battleCards == orig(this.currentBattle.battleCards)
this.currentBattle.battleCards[] == orig(this.currentBattle.battleCards[])
this.currentBattle.battleCards.getClass().getName() == orig(this.currentBattle.battleCards.getClass().getName())
this.currentBattle.battleCards.getClass().getName() == orig(this.currentBattle.battlers.getClass().getName())
this.currentBattle.battlers == orig(this.currentBattle.battlers)
this.currentBattle.battlers[] == orig(this.currentBattle.battlers[])
this.currentBattle.continuations == orig(this.currentBattle.continuations)
this.winner == orig(this.winner)
this.winner.participatingInBattle == orig(this.winner.participatingInBattle)
this.winner.nbrOfBattlesFought == orig(this.winner.nbrOfBattlesFought)
this.winner.nbrOfBattlesWon == orig(this.winner.nbrOfBattlesWon)
this.winner.strategy == orig(this.winner.strategy)
this.winner.strategy.getClass().getName() == orig(this.winner.strategy.getClass().getName())
this.winner.name == orig(this.winner.name)
this.winner.name.toString == orig(this.winner.name.toString)
this.winner.hand == orig(this.winner.hand)
this.winner.hand.internal == orig(this.winner.hand.internal)
this.winner.hand.random == orig(this.winner.hand.random)
this.swapHandsRuleEnabled == orig(this.currentBattle.game.swapHandsRuleEnabled)
this.swapHandsRuleEnabled == orig(this.swapHandsRuleEnabled)
this.swappedHandsCount == orig(this.currentBattle.game.swappedHandsCount)
this.swappedHandsCount == orig(this.swappedHandsCount)
this.unresolvedBattleCount == orig(this.currentBattle.game.unresolvedBattleCount)
this.unresolvedBattleCount == orig(this.unresolvedBattleCount)
this.battlesByNbrOfContinuations == orig(this.currentBattle.game.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations == orig(this.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName())
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.battlesByNbrOfContinuations.getClass().getName())
this.currentBattle.battleCards[].getClass().getName() one of { [], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.currentBattle.continuations one of { 1, 2, 3 }
return >= 0
size(this.currentBattle.battleCards[]) one of { 0, 2 }
size(this.currentBattle.battlers[]) one of { 1, 2 }
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.getWinner():::ENTER
this.currentRoundNumber == this.currentBattle.game.currentRoundNumber
this.currentBattle.battleCards[].getClass().getName() one of { [], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.currentBattle.continuations one of { 1, 2, 3 }
size(this.currentBattle.battleCards[]) one of { 0, 2 }
size(this.currentBattle.battlers[]) one of { 1, 2 }
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.getWinner():::EXIT
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.assessor == orig(this.assessor)
this.assessor == orig(this.currentBattle.game.assessor)
this.assessor.getClass().getName() == orig(this.assessor.getClass().getName())
this.assessor.getClass().getName() == orig(this.currentBattle.game.assessor.getClass().getName())
this.players == orig(this.players)
this.players == orig(this.currentBattle.game.players)
this.players[] == orig(this.players[])
this.players.getClass().getName() == orig(this.players.getClass().getName())
this.players.getClass().getName() == orig(this.currentBattle.game.players.getClass().getName())
this.gameCards == orig(this.gameCards)
this.gameCards == orig(this.currentBattle.game.gameCards)
this.gameCards.internal == orig(this.gameCards.internal)
this.gameCards.internal.getClass().getName() == return.hand.internal.getClass().getName()
this.gameCards.internal.getClass().getName() == orig(this.gameCards.internal.getClass().getName())
this.gameCards.internal.getClass().getName() == orig(this.winner.hand.internal.getClass().getName())
this.gameCards.random == orig(this.gameCards.random)
this.currentRoundNumber == this.currentBattle.game.currentRoundNumber
this.currentRoundNumber == orig(this.currentRoundNumber)
this.currentRoundNumber == orig(this.currentBattle.number)
this.currentRoundNumber == orig(this.currentBattle.game.currentRoundNumber)
this.currentBattle == orig(this.currentBattle)
this.currentBattle == orig(this.currentBattle.game.currentBattle)
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.currentBattle.game == orig(this)
this.currentBattle.game == orig(this.currentBattle.game)
this.currentBattle.game.players[] == orig(this.currentBattle.game.players[])
this.currentBattle.game.winner == orig(this.currentBattle.game.winner)
this.currentBattle.battleCards == orig(this.currentBattle.battleCards)
this.currentBattle.battleCards[] == orig(this.currentBattle.battleCards[])
this.currentBattle.battleCards.getClass().getName() == orig(this.currentBattle.battleCards.getClass().getName())
this.currentBattle.battleCards.getClass().getName() == orig(this.currentBattle.battlers.getClass().getName())
this.currentBattle.battlers == orig(this.currentBattle.battlers)
this.currentBattle.battlers[] == orig(this.currentBattle.battlers[])
this.currentBattle.continuations == orig(this.currentBattle.continuations)
this.winner == orig(this.winner)
this.winner.participatingInBattle == orig(this.winner.participatingInBattle)
this.winner.nbrOfBattlesFought == orig(this.winner.nbrOfBattlesFought)
this.winner.nbrOfBattlesWon == orig(this.winner.nbrOfBattlesWon)
this.winner.strategy == orig(this.winner.strategy)
this.winner.strategy.getClass().getName() == return.strategy.getClass().getName()
this.winner.name == orig(this.winner.name)
this.winner.name.toString == orig(this.winner.name.toString)
this.winner.hand == orig(this.winner.hand)
this.winner.hand.internal == orig(this.winner.hand.internal)
this.winner.hand.random == orig(this.winner.hand.random)
this.swapHandsRuleEnabled == orig(this.currentBattle.game.swapHandsRuleEnabled)
this.swapHandsRuleEnabled == orig(this.swapHandsRuleEnabled)
this.swappedHandsCount == orig(this.currentBattle.game.swappedHandsCount)
this.swappedHandsCount == orig(this.swappedHandsCount)
this.unresolvedBattleCount == orig(this.currentBattle.game.unresolvedBattleCount)
this.unresolvedBattleCount == orig(this.unresolvedBattleCount)
this.battlesByNbrOfContinuations == orig(this.currentBattle.game.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations == orig(this.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName())
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.battlesByNbrOfContinuations.getClass().getName())
return.strategy.getClass().getName() == orig(this.winner.strategy.getClass().getName())
this.currentBattle.battleCards[].getClass().getName() one of { [], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.currentBattle.continuations one of { 1, 2, 3 }
return.participatingInBattle == true
return.nbrOfBattlesFought == 0
return.nbrOfBattlesWon == 0
return.name.toString one of { "Joe", "Nolan", "Patrick" }
size(this.currentBattle.battleCards[]) one of { 0, 2 }
size(this.currentBattle.battlers[]) one of { 1, 2 }
this.assessor.getClass().getName() != return.strategy.getClass().getName()
this.players.getClass().getName() != return.strategy.getClass().getName()
this.gameCards.internal.getClass().getName() != return.strategy.getClass().getName()
this.currentBattle.battleCards.getClass().getName() != return.strategy.getClass().getName()
this.battlesByNbrOfContinuations.getClass().getName() != return.strategy.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.incrementNbrOfBattlesByLength(int):::ENTER
this.currentRoundNumber == this.currentBattle.game.currentRoundNumber
this.players != null
this.gameCards != null
this.currentRoundNumber >= 1
this.currentBattle != null
this.currentBattle.game.winner == null
this.currentBattle.battlers != null
this.currentBattle.continuations one of { 1, 2, 3 }
this.winner == null
arg0 one of { 1, 2, 3 }
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.incrementNbrOfBattlesByLength(int):::EXIT
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.assessor == orig(this.assessor)
this.assessor == orig(this.currentBattle.game.assessor)
this.assessor.getClass().getName() == orig(this.assessor.getClass().getName())
this.assessor.getClass().getName() == orig(this.currentBattle.game.assessor.getClass().getName())
this.players == orig(this.players)
this.players == orig(this.currentBattle.game.players)
this.players[] == orig(this.players[])
this.players.getClass().getName() == orig(this.players.getClass().getName())
this.players.getClass().getName() == orig(this.currentBattle.game.players.getClass().getName())
this.gameCards == orig(this.gameCards)
this.gameCards == orig(this.currentBattle.game.gameCards)
this.gameCards.internal == orig(this.gameCards.internal)
this.gameCards.internal.getClass().getName() == orig(this.gameCards.internal.getClass().getName())
this.gameCards.random == orig(this.gameCards.random)
this.currentRoundNumber == this.currentBattle.game.currentRoundNumber
this.currentRoundNumber == orig(this.currentRoundNumber)
this.currentRoundNumber == orig(this.currentBattle.number)
this.currentRoundNumber == orig(this.currentBattle.game.currentRoundNumber)
this.currentBattle == orig(this.currentBattle)
this.currentBattle == orig(this.currentBattle.game.currentBattle)
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.currentBattle.game == orig(this)
this.currentBattle.game == orig(this.currentBattle.game)
this.currentBattle.game.players[] == orig(this.currentBattle.game.players[])
this.currentBattle.game.winner == orig(this.currentBattle.game.winner)
this.currentBattle.battleCards == orig(this.currentBattle.battleCards)
this.currentBattle.battleCards[] == orig(this.currentBattle.battleCards[])
this.currentBattle.battleCards.getClass().getName() == orig(this.currentBattle.battleCards.getClass().getName())
this.currentBattle.battleCards.getClass().getName() == orig(this.currentBattle.battlers.getClass().getName())
this.currentBattle.battlers == orig(this.currentBattle.battlers)
this.currentBattle.battlers[] == orig(this.currentBattle.battlers[])
this.currentBattle.continuations == orig(this.currentBattle.continuations)
this.winner == orig(this.winner)
this.swapHandsRuleEnabled == orig(this.currentBattle.game.swapHandsRuleEnabled)
this.swapHandsRuleEnabled == orig(this.swapHandsRuleEnabled)
this.swappedHandsCount == orig(this.currentBattle.game.swappedHandsCount)
this.swappedHandsCount == orig(this.swappedHandsCount)
this.unresolvedBattleCount == orig(this.currentBattle.game.unresolvedBattleCount)
this.unresolvedBattleCount == orig(this.unresolvedBattleCount)
this.battlesByNbrOfContinuations == orig(this.currentBattle.game.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations == orig(this.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName())
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.battlesByNbrOfContinuations.getClass().getName())
this.players != null
this.gameCards != null
this.currentRoundNumber >= 1
this.currentBattle != null
this.currentBattle.game.winner == null
this.currentBattle.battlers != null
this.currentBattle.continuations one of { 1, 2, 3 }
this.winner == null
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.incrementUnresolvedBattleCount():::ENTER
this.currentRoundNumber == this.currentBattle.game.currentRoundNumber
this.players != null
this.gameCards != null
this.currentBattle != null
this.currentBattle.game.winner == null
this.currentBattle.battleCards[].getClass().getName() == [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard]
this.currentBattle.battlers != null
this.currentBattle.battlers[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
this.currentBattle.continuations == 4
this.winner == null
size(this.currentBattle.battleCards[]) == 2
size(this.currentBattle.battlers[]) == 2
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.incrementUnresolvedBattleCount():::EXIT
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.assessor == orig(this.assessor)
this.assessor == orig(this.currentBattle.game.assessor)
this.assessor.getClass().getName() == orig(this.assessor.getClass().getName())
this.assessor.getClass().getName() == orig(this.currentBattle.game.assessor.getClass().getName())
this.players == orig(this.players)
this.players == orig(this.currentBattle.game.players)
this.players[] == orig(this.players[])
this.players.getClass().getName() == orig(this.players.getClass().getName())
this.players.getClass().getName() == orig(this.currentBattle.game.players.getClass().getName())
this.gameCards == orig(this.gameCards)
this.gameCards == orig(this.currentBattle.game.gameCards)
this.gameCards.internal == orig(this.gameCards.internal)
this.gameCards.internal.getClass().getName() == orig(this.gameCards.internal.getClass().getName())
this.gameCards.random == orig(this.gameCards.random)
this.currentRoundNumber == this.currentBattle.game.currentRoundNumber
this.currentRoundNumber == orig(this.currentRoundNumber)
this.currentRoundNumber == orig(this.currentBattle.number)
this.currentRoundNumber == orig(this.currentBattle.game.currentRoundNumber)
this.currentBattle == orig(this.currentBattle)
this.currentBattle == orig(this.currentBattle.game.currentBattle)
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.currentBattle.game == orig(this)
this.currentBattle.game == orig(this.currentBattle.game)
this.currentBattle.game.players[] == orig(this.currentBattle.game.players[])
this.currentBattle.game.winner == orig(this.currentBattle.game.winner)
this.currentBattle.battleCards == orig(this.currentBattle.battleCards)
this.currentBattle.battleCards[] == orig(this.currentBattle.battleCards[])
this.currentBattle.battleCards.getClass().getName() == orig(this.currentBattle.battleCards.getClass().getName())
this.currentBattle.battleCards.getClass().getName() == orig(this.currentBattle.battlers.getClass().getName())
this.currentBattle.battlers == orig(this.currentBattle.battlers)
this.currentBattle.battlers[] == orig(this.currentBattle.battlers[])
this.currentBattle.continuations == orig(this.currentBattle.continuations)
this.winner == orig(this.winner)
this.swapHandsRuleEnabled == orig(this.currentBattle.game.swapHandsRuleEnabled)
this.swapHandsRuleEnabled == orig(this.swapHandsRuleEnabled)
this.swappedHandsCount == orig(this.currentBattle.game.swappedHandsCount)
this.swappedHandsCount == orig(this.swappedHandsCount)
this.battlesByNbrOfContinuations == orig(this.currentBattle.game.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations == orig(this.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName())
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.battlesByNbrOfContinuations.getClass().getName())
this.players != null
this.gameCards != null
this.currentBattle != null
this.currentBattle.game.winner == null
this.currentBattle.battleCards[].getClass().getName() == [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard]
this.currentBattle.battlers != null
this.currentBattle.battlers[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
this.currentBattle.continuations == 4
this.winner == null
this.unresolvedBattleCount >= 1
size(this.currentBattle.battleCards[]) == 2
size(this.currentBattle.battlers[]) == 2
this.unresolvedBattleCount - orig(this.unresolvedBattleCount) - 1 == 0
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.initializeGame(org.washcom.cardgames.core.Deck, org.washcom.cardgames.battleroyale.Player[]):::ENTER
this.players == null
this.gameCards == null
this.currentRoundNumber == 0
this.currentBattle == null
this.winner == null
this.swappedHandsCount == 0
this.unresolvedBattleCount == 0
arg0.internal.getClass().getName() == java.util.ArrayDeque.class
arg1.getClass().getName() == org.washcom.cardgames.battleroyale.Player[].class
arg1[] contains no nulls and has only one value, of length 3
arg1[].participatingInBattle == [1, 1, 1]
arg1[].participatingInBattle elements == true
arg1[].nbrOfBattlesFought == [0, 0, 0]
arg1[].nbrOfBattlesFought elements == 0
arg1[].nbrOfBattlesWon == [0, 0, 0]
arg1[].nbrOfBattlesWon elements == 0
arg1[].strategy.getClass().getName() == [null, org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy, null]
arg1[].name contains no nulls and has only one value, of length 3
arg1[].name.toString == [Joe, Patrick, Nolan]
arg1[].name.toString elements one of { "Joe", "Nolan", "Patrick" }
arg1[].hand contains no nulls and has only one value, of length 3
arg1[].hand.internal contains no nulls and has only one value, of length 3
arg1[].hand.internal.getClass().getName() == [java.util.ArrayDeque, java.util.ArrayDeque, java.util.ArrayDeque]
arg1[].hand.internal.getClass().getName() elements == java.util.ArrayDeque.class
arg1[].hand.random contains no nulls and has only one value, of length 3
size(arg1[]) == 3
this.assessor.getClass().getName() != arg0.internal.getClass().getName()
this.assessor.getClass().getName() != arg1.getClass().getName()
this.battlesByNbrOfContinuations.getClass().getName() != arg0.internal.getClass().getName()
this.battlesByNbrOfContinuations.getClass().getName() != arg1.getClass().getName()
arg0.internal.getClass().getName() != arg1.getClass().getName()
arg0.internal.getClass().getName() in arg1[].hand.internal.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.initializeGame(org.washcom.cardgames.core.Deck, org.washcom.cardgames.battleroyale.Player[]):::EXIT
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.assessor == orig(this.assessor)
this.assessor.getClass().getName() == orig(this.assessor.getClass().getName())
this.gameCards == orig(arg0)
this.gameCards.internal == arg0.internal
this.gameCards.internal.getClass().getName() == arg0.internal.getClass().getName()
this.gameCards.random == arg0.random
this.currentRoundNumber == orig(this.currentRoundNumber)
this.currentBattle == orig(this.currentBattle)
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.winner == orig(this.winner)
this.swapHandsRuleEnabled == orig(this.swapHandsRuleEnabled)
this.swappedHandsCount == orig(this.swappedHandsCount)
this.unresolvedBattleCount == orig(this.unresolvedBattleCount)
this.battlesByNbrOfContinuations == orig(this.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.battlesByNbrOfContinuations.getClass().getName())
arg0.internal == orig(arg0.internal)
arg0.internal.getClass().getName() == orig(arg0.internal.getClass().getName())
arg0.random == orig(arg0.random)
arg1[] == orig(arg1[])
arg1[].participatingInBattle == orig(arg1[].participatingInBattle)
arg1[].nbrOfBattlesFought == orig(arg1[].nbrOfBattlesFought)
arg1[].nbrOfBattlesWon == orig(arg1[].nbrOfBattlesWon)
arg1[].strategy == orig(arg1[].strategy)
arg1[].name == orig(arg1[].name)
arg1[].hand == orig(arg1[].hand)
arg1[].hand.internal == orig(arg1[].hand.internal)
arg1[].hand.random == orig(arg1[].hand.random)
this.currentRoundNumber == 0
this.currentBattle == null
this.winner == null
this.swappedHandsCount == 0
this.unresolvedBattleCount == 0
arg0.internal.getClass().getName() == java.util.ArrayDeque.class
arg1[] contains no nulls and has only one value, of length 3
arg1[].participatingInBattle == [1, 1, 1]
arg1[].participatingInBattle elements == true
arg1[].nbrOfBattlesFought == [0, 0, 0]
arg1[].nbrOfBattlesFought elements == 0
arg1[].nbrOfBattlesWon == [0, 0, 0]
arg1[].nbrOfBattlesWon elements == 0
arg1[].strategy.getClass().getName() == [null, org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy, null]
arg1[].name contains no nulls and has only one value, of length 3
arg1[].name.toString == [Joe, Patrick, Nolan]
arg1[].name.toString elements one of { "Joe", "Nolan", "Patrick" }
arg1[].hand contains no nulls and has only one value, of length 3
arg1[].hand.internal contains no nulls and has only one value, of length 3
arg1[].hand.internal.getClass().getName() == [java.util.ArrayDeque, java.util.ArrayDeque, java.util.ArrayDeque]
arg1[].hand.internal.getClass().getName() elements == java.util.ArrayDeque.class
arg1[].hand.random contains no nulls and has only one value, of length 3
this.assessor.getClass().getName() != arg0.internal.getClass().getName()
this.assessor.getClass().getName() != orig(arg1.getClass().getName())
this.players.getClass().getName() != arg0.internal.getClass().getName()
this.players.getClass().getName() != orig(arg1.getClass().getName())
this.battlesByNbrOfContinuations.getClass().getName() != arg0.internal.getClass().getName()
this.battlesByNbrOfContinuations.getClass().getName() != orig(arg1.getClass().getName())
arg0.internal.getClass().getName() in arg1[].hand.internal.getClass().getName()
arg0.internal.getClass().getName() != orig(arg1.getClass().getName())
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.play(org.washcom.cardgames.core.Deck, org.washcom.cardgames.battleroyale.Player[]):::ENTER
this.players == null
this.gameCards == null
this.currentRoundNumber == 0
this.currentBattle == null
this.winner == null
this.swappedHandsCount == 0
this.unresolvedBattleCount == 0
arg0.internal.getClass().getName() == java.util.ArrayDeque.class
arg1.getClass().getName() == org.washcom.cardgames.battleroyale.Player[].class
arg1[] contains no nulls and has only one value, of length 3
arg1[].participatingInBattle == [1, 1, 1]
arg1[].participatingInBattle elements == true
arg1[].nbrOfBattlesFought == [0, 0, 0]
arg1[].nbrOfBattlesFought elements == 0
arg1[].nbrOfBattlesWon == [0, 0, 0]
arg1[].nbrOfBattlesWon elements == 0
arg1[].strategy.getClass().getName() == [null, org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy, null]
arg1[].name contains no nulls and has only one value, of length 3
arg1[].name.toString == [Joe, Patrick, Nolan]
arg1[].name.toString elements one of { "Joe", "Nolan", "Patrick" }
arg1[].hand contains no nulls and has only one value, of length 3
arg1[].hand.internal contains no nulls and has only one value, of length 3
arg1[].hand.internal.getClass().getName() == [java.util.ArrayDeque, java.util.ArrayDeque, java.util.ArrayDeque]
arg1[].hand.internal.getClass().getName() elements == java.util.ArrayDeque.class
arg1[].hand.random contains no nulls and has only one value, of length 3
size(arg1[]) == 3
this.assessor.getClass().getName() != arg0.internal.getClass().getName()
this.assessor.getClass().getName() != arg1.getClass().getName()
this.battlesByNbrOfContinuations.getClass().getName() != arg0.internal.getClass().getName()
this.battlesByNbrOfContinuations.getClass().getName() != arg1.getClass().getName()
arg0.internal.getClass().getName() != arg1.getClass().getName()
arg0.internal.getClass().getName() in arg1[].hand.internal.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.play(org.washcom.cardgames.core.Deck, org.washcom.cardgames.battleroyale.Player[]):::EXIT
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.assessor == orig(this.assessor)
this.assessor.getClass().getName() == orig(this.assessor.getClass().getName())
this.gameCards.internal.getClass().getName() == arg0.internal.getClass().getName()
this.currentRoundNumber == this.currentBattle.game.currentRoundNumber
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.currentBattle.game == orig(this)
this.winner.hand.internal.getClass().getName() == arg0.internal.getClass().getName()
this.swapHandsRuleEnabled == orig(this.swapHandsRuleEnabled)
this.battlesByNbrOfContinuations == orig(this.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.battlesByNbrOfContinuations.getClass().getName())
arg0.internal == orig(arg0.internal)
arg0.internal.getClass().getName() == orig(arg0.internal.getClass().getName())
arg0.random == orig(arg0.random)
arg1[] == orig(arg1[])
arg1[].participatingInBattle == orig(arg1[].participatingInBattle)
arg1[].nbrOfBattlesFought == orig(arg1[].nbrOfBattlesFought)
arg1[].nbrOfBattlesWon == orig(arg1[].nbrOfBattlesWon)
arg1[].name == orig(arg1[].name)
arg1[].hand == orig(arg1[].hand)
arg1[].hand.internal == orig(arg1[].hand.internal)
arg1[].hand.random == orig(arg1[].hand.random)
this.currentBattle.battleCards[].getClass().getName() one of { [], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.currentBattle.continuations one of { 1, 2, 3 }
arg0.internal.getClass().getName() == java.util.ArrayDeque.class
arg1[] contains no nulls and has only one value, of length 3
arg1[].participatingInBattle == [1, 1, 1]
arg1[].participatingInBattle elements == true
arg1[].nbrOfBattlesFought == [0, 0, 0]
arg1[].nbrOfBattlesFought elements == 0
arg1[].nbrOfBattlesWon == [0, 0, 0]
arg1[].nbrOfBattlesWon elements == 0
arg1[].strategy.getClass().getName() == [null, org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy, null]
arg1[].name contains no nulls and has only one value, of length 3
arg1[].name.toString == [Joe, Patrick, Nolan]
arg1[].name.toString elements one of { "Joe", "Nolan", "Patrick" }
arg1[].hand contains no nulls and has only one value, of length 3
arg1[].hand.internal contains no nulls and has only one value, of length 3
arg1[].hand.internal.getClass().getName() == [java.util.ArrayDeque, java.util.ArrayDeque, java.util.ArrayDeque]
arg1[].hand.internal.getClass().getName() elements == java.util.ArrayDeque.class
arg1[].hand.random contains no nulls and has only one value, of length 3
size(this.currentBattle.battleCards[]) one of { 0, 2 }
size(this.currentBattle.battlers[]) one of { 1, 2 }
this.assessor.getClass().getName() != arg0.internal.getClass().getName()
this.assessor.getClass().getName() != orig(arg1.getClass().getName())
this.players.getClass().getName() != arg0.internal.getClass().getName()
this.players.getClass().getName() != orig(arg1.getClass().getName())
this.currentRoundNumber > orig(this.currentRoundNumber)
this.currentBattle.battleCards.getClass().getName() != arg0.internal.getClass().getName()
this.currentBattle.battleCards.getClass().getName() != orig(arg1.getClass().getName())
this.winner.strategy.getClass().getName() != arg0.internal.getClass().getName()
this.winner.strategy.getClass().getName() != orig(arg1.getClass().getName())
this.swappedHandsCount >= orig(this.swappedHandsCount)
this.unresolvedBattleCount >= orig(this.unresolvedBattleCount)
this.battlesByNbrOfContinuations.getClass().getName() != arg0.internal.getClass().getName()
this.battlesByNbrOfContinuations.getClass().getName() != orig(arg1.getClass().getName())
arg0.internal.getClass().getName() in arg1[].hand.internal.getClass().getName()
arg0.internal.getClass().getName() != orig(arg1.getClass().getName())
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.swapHands(org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player):::ENTER
this.gameCards.internal.getClass().getName() == arg0.hand.internal.getClass().getName()
this.gameCards.internal.getClass().getName() == arg1.hand.internal.getClass().getName()
this.currentRoundNumber == this.currentBattle.game.currentRoundNumber
this.players != null
this.gameCards != null
this.currentRoundNumber >= 2
this.currentBattle != null
this.currentBattle.game.winner == null
this.currentBattle.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.currentBattle.battlers != null
this.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.currentBattle.continuations one of { 0, 1 }
this.winner == null
arg0 != null
arg0.participatingInBattle == true
arg0.nbrOfBattlesFought == 0
arg0.nbrOfBattlesWon == 0
arg0.name != null
arg0.name.toString one of { "Joe", "Patrick" }
arg0.hand != null
arg0.hand.internal != null
arg0.hand.random != null
arg1 != null
arg1.participatingInBattle == true
arg1.nbrOfBattlesFought == 0
arg1.nbrOfBattlesWon == 0
arg1.name != null
arg1.name.toString one of { "Nolan", "Patrick" }
arg1.hand != null
arg1.hand.internal != null
arg1.hand.random != null
size(this.currentBattle.battleCards[]) one of { 2, 3 }
size(this.currentBattle.battlers[]) one of { 2, 3 }
this.assessor.getClass().getName() != arg0.strategy.getClass().getName()
this.assessor.getClass().getName() != arg1.strategy.getClass().getName()
this.players.getClass().getName() != arg0.strategy.getClass().getName()
this.players.getClass().getName() != arg1.strategy.getClass().getName()
this.gameCards.internal.getClass().getName() != arg0.strategy.getClass().getName()
this.gameCards.internal.getClass().getName() != arg1.strategy.getClass().getName()
this.currentBattle.battleCards.getClass().getName() != arg0.strategy.getClass().getName()
this.currentBattle.battleCards.getClass().getName() != arg1.strategy.getClass().getName()
this.battlesByNbrOfContinuations.getClass().getName() != arg0.strategy.getClass().getName()
this.battlesByNbrOfContinuations.getClass().getName() != arg1.strategy.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGame.swapHands(org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player):::EXIT
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
this.assessor == orig(this.assessor)
this.assessor == orig(this.currentBattle.game.assessor)
this.assessor.getClass().getName() == orig(this.assessor.getClass().getName())
this.assessor.getClass().getName() == orig(this.currentBattle.game.assessor.getClass().getName())
this.players == orig(this.players)
this.players == orig(this.currentBattle.game.players)
this.players[] == orig(this.players[])
this.players.getClass().getName() == orig(this.players.getClass().getName())
this.players.getClass().getName() == orig(this.currentBattle.game.players.getClass().getName())
this.gameCards == orig(this.gameCards)
this.gameCards == orig(this.currentBattle.game.gameCards)
this.gameCards.internal == orig(this.gameCards.internal)
this.gameCards.internal.getClass().getName() == arg0.hand.internal.getClass().getName()
this.gameCards.internal.getClass().getName() == arg1.hand.internal.getClass().getName()
this.gameCards.internal.getClass().getName() == orig(this.gameCards.internal.getClass().getName())
this.gameCards.internal.getClass().getName() == orig(arg0.hand.internal.getClass().getName())
this.gameCards.internal.getClass().getName() == orig(arg1.hand.internal.getClass().getName())
this.gameCards.random == orig(this.gameCards.random)
this.currentRoundNumber == this.currentBattle.game.currentRoundNumber
this.currentRoundNumber == orig(this.currentRoundNumber)
this.currentRoundNumber == orig(this.currentBattle.number)
this.currentRoundNumber == orig(this.currentBattle.game.currentRoundNumber)
this.currentBattle == orig(this.currentBattle)
this.currentBattle == orig(this.currentBattle.game.currentBattle)
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
this.currentBattle.game == orig(this)
this.currentBattle.game == orig(this.currentBattle.game)
this.currentBattle.game.players[] == orig(this.currentBattle.game.players[])
this.currentBattle.game.winner == orig(this.currentBattle.game.winner)
this.currentBattle.battleCards == orig(this.currentBattle.battleCards)
this.currentBattle.battleCards[] == orig(this.currentBattle.battleCards[])
this.currentBattle.battleCards.getClass().getName() == orig(this.currentBattle.battleCards.getClass().getName())
this.currentBattle.battleCards.getClass().getName() == orig(this.currentBattle.battlers.getClass().getName())
this.currentBattle.battlers == orig(this.currentBattle.battlers)
this.currentBattle.battlers[] == orig(this.currentBattle.battlers[])
this.currentBattle.continuations == orig(this.currentBattle.continuations)
this.winner == orig(this.winner)
this.swapHandsRuleEnabled == orig(this.currentBattle.game.swapHandsRuleEnabled)
this.swapHandsRuleEnabled == orig(this.swapHandsRuleEnabled)
this.unresolvedBattleCount == orig(this.currentBattle.game.unresolvedBattleCount)
this.unresolvedBattleCount == orig(this.unresolvedBattleCount)
this.battlesByNbrOfContinuations == orig(this.currentBattle.game.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations == orig(this.battlesByNbrOfContinuations)
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.currentBattle.game.battlesByNbrOfContinuations.getClass().getName())
this.battlesByNbrOfContinuations.getClass().getName() == orig(this.battlesByNbrOfContinuations.getClass().getName())
arg0.participatingInBattle == orig(arg0.participatingInBattle)
arg0.nbrOfBattlesFought == orig(arg0.nbrOfBattlesFought)
arg0.nbrOfBattlesWon == orig(arg0.nbrOfBattlesWon)
arg0.strategy == orig(arg0.strategy)
arg0.strategy.getClass().getName() == orig(arg0.strategy.getClass().getName())
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.hand == orig(arg0.hand)
arg0.hand.internal == orig(arg0.hand.internal)
arg0.hand.random == orig(arg0.hand.random)
arg1.participatingInBattle == orig(arg1.participatingInBattle)
arg1.nbrOfBattlesFought == orig(arg1.nbrOfBattlesFought)
arg1.nbrOfBattlesWon == orig(arg1.nbrOfBattlesWon)
arg1.strategy == orig(arg1.strategy)
arg1.strategy.getClass().getName() == orig(arg1.strategy.getClass().getName())
arg1.name == orig(arg1.name)
arg1.name.toString == orig(arg1.name.toString)
arg1.hand == orig(arg1.hand)
arg1.hand.internal == orig(arg1.hand.internal)
arg1.hand.random == orig(arg1.hand.random)
this.players != null
this.gameCards != null
this.currentRoundNumber >= 2
this.currentBattle != null
this.currentBattle.game.winner == null
this.currentBattle.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
this.currentBattle.battlers != null
this.currentBattle.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
this.currentBattle.continuations one of { 0, 1 }
this.winner == null
this.swappedHandsCount >= 1
arg0.participatingInBattle == true
arg0.nbrOfBattlesFought == 0
arg0.nbrOfBattlesWon == 0
arg0.name != null
arg0.name.toString one of { "Joe", "Patrick" }
arg0.hand != null
arg0.hand.internal != null
arg0.hand.random != null
arg1.participatingInBattle == true
arg1.nbrOfBattlesFought == 0
arg1.nbrOfBattlesWon == 0
arg1.name != null
arg1.name.toString one of { "Nolan", "Patrick" }
arg1.hand != null
arg1.hand.internal != null
arg1.hand.random != null
size(this.currentBattle.battleCards[]) one of { 2, 3 }
size(this.currentBattle.battlers[]) one of { 2, 3 }
this.assessor.getClass().getName() != arg0.strategy.getClass().getName()
this.assessor.getClass().getName() != arg1.strategy.getClass().getName()
this.players.getClass().getName() != arg0.strategy.getClass().getName()
this.players.getClass().getName() != arg1.strategy.getClass().getName()
this.gameCards.internal.getClass().getName() != arg0.strategy.getClass().getName()
this.gameCards.internal.getClass().getName() != arg1.strategy.getClass().getName()
this.currentBattle.battleCards.getClass().getName() != arg0.strategy.getClass().getName()
this.currentBattle.battleCards.getClass().getName() != arg1.strategy.getClass().getName()
this.swappedHandsCount - orig(this.swappedHandsCount) - 1 == 0
this.battlesByNbrOfContinuations.getClass().getName() != arg0.strategy.getClass().getName()
this.battlesByNbrOfContinuations.getClass().getName() != arg1.strategy.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator:::CLASS
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName() == org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy.getClass().getName()
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal.getClass().getName()
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal.getClass().getName()
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal.getClass().getName()
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.log has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.log != null
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1 has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1 != null
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.participatingInBattle == true
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesFought == 0
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesWon == 0
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName() == org.washcom.cardgames.battleroyale.Player$1.class
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name != null
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name.toString == "Joe"
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand != null
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal != null
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == java.util.ArrayDeque.class
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.random has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.random != null
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2 has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2 != null
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.participatingInBattle == true
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesFought == 0
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesWon == 0
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy.getClass().getName() == org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy.class
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name != null
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name.toString == "Patrick"
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand != null
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal != null
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.random has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.random != null
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3 has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3 != null
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.participatingInBattle == true
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesFought == 0
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesWon == 0
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name != null
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name.toString == "Nolan"
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand != null
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal != null
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.random has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.random != null
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner != null
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.participatingInBattle == true
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesFought == 0
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesWon == 0
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.strategy == null
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name != null
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name.toString == "NO WINNER"
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand != null
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal != null
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.random has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.random != null
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName() != org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName()
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName() != org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy.getClass().getName()
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() != org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator:::OBJECT
this.gameLengths.getClass().getName() == this.deckSwapsPerGame.getClass().getName()
this.gameLengths.getClass().getName() == this.unresolvedBattlesPerGame.getClass().getName()
this has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy != null
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy != null
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy != null
this.victoriesByPlayer has only one value
this.victoriesByPlayer != null
this.victoriesByPlayer.getClass().getName() == java.util.HashMap.class
this.gameLengths has only one value
this.gameLengths != null
this.gameLengths[] contains no nulls and has only one value, of length 10
this.gameLengths[] elements != null
this.gameLengths[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.gameLengths[].getClass().getName() elements == java.lang.Integer.class
this.gameLengths.getClass().getName() == java.util.ArrayList.class
this.deckSwapsPerGame has only one value
this.deckSwapsPerGame != null
this.deckSwapsPerGame[] contains no nulls and has only one value, of length 10
this.deckSwapsPerGame[] elements != null
this.deckSwapsPerGame[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
this.deckSwapsPerGame[].getClass().getName() elements == java.lang.Integer.class
this.unresolvedBattlesPerGame has only one value
this.unresolvedBattlesPerGame != null
this.unresolvedBattlesPerGame[] == []
this.unresolvedBattlesPerGame[].getClass().getName() == []
size(this.gameLengths[]) == 10
size(this.deckSwapsPerGame[]) == 10
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName() != this.victoriesByPlayer.getClass().getName()
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName() != this.gameLengths.getClass().getName()
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() != this.victoriesByPlayer.getClass().getName()
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() != this.gameLengths.getClass().getName()
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy.getClass().getName() != this.victoriesByPlayer.getClass().getName()
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy.getClass().getName() != this.gameLengths.getClass().getName()
this.victoriesByPlayer.getClass().getName() != this.gameLengths.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.BattleRoyaleGameSimulator(int):::ENTER
arg0 == 10
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.BattleRoyaleGameSimulator(int):::EXIT
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.getAverageGameLength():::ENTER
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.getAverageGameLength():::EXIT
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.log)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.random)
this.victoriesByPlayer == orig(this.victoriesByPlayer)
this.victoriesByPlayer.getClass().getName() == orig(this.victoriesByPlayer.getClass().getName())
this.gameLengths == orig(this.gameLengths)
this.gameLengths[] == orig(this.gameLengths[])
this.gameLengths.getClass().getName() == orig(this.gameLengths.getClass().getName())
this.gameLengths.getClass().getName() == orig(this.deckSwapsPerGame.getClass().getName())
this.gameLengths.getClass().getName() == orig(this.unresolvedBattlesPerGame.getClass().getName())
this.deckSwapsPerGame == orig(this.deckSwapsPerGame)
this.deckSwapsPerGame[] == orig(this.deckSwapsPerGame[])
this.unresolvedBattlesPerGame == orig(this.unresolvedBattlesPerGame)
this.unresolvedBattlesPerGame[] == orig(this.unresolvedBattlesPerGame[])
return == 20.8
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.getLongestGameLength():::ENTER
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.getLongestGameLength():::EXIT
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.log)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.random)
this.victoriesByPlayer == orig(this.victoriesByPlayer)
this.victoriesByPlayer.getClass().getName() == orig(this.victoriesByPlayer.getClass().getName())
this.gameLengths == orig(this.gameLengths)
this.gameLengths[] == orig(this.gameLengths[])
this.gameLengths.getClass().getName() == orig(this.gameLengths.getClass().getName())
this.gameLengths.getClass().getName() == orig(this.deckSwapsPerGame.getClass().getName())
this.gameLengths.getClass().getName() == orig(this.unresolvedBattlesPerGame.getClass().getName())
this.deckSwapsPerGame == orig(this.deckSwapsPerGame)
this.deckSwapsPerGame[] == orig(this.deckSwapsPerGame[])
this.unresolvedBattlesPerGame == orig(this.unresolvedBattlesPerGame)
this.unresolvedBattlesPerGame[] == orig(this.unresolvedBattlesPerGame[])
return == 51
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.getNumberOfGamesWonByPlayer(org.washcom.cardgames.battleroyale.Player):::ENTER
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == arg0.hand.internal.getClass().getName()
arg0.participatingInBattle == true
arg0.nbrOfBattlesFought == 0
arg0.nbrOfBattlesWon == 0
arg0.name.toString one of { "Joe", "Nolan", "Patrick" }
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.getNumberOfGamesWonByPlayer(org.washcom.cardgames.battleroyale.Player):::EXIT
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.log)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == arg0.hand.internal.getClass().getName()
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(arg0.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.random)
this.victoriesByPlayer == orig(this.victoriesByPlayer)
this.victoriesByPlayer.getClass().getName() == orig(this.victoriesByPlayer.getClass().getName())
this.gameLengths == orig(this.gameLengths)
this.gameLengths[] == orig(this.gameLengths[])
this.gameLengths.getClass().getName() == orig(this.gameLengths.getClass().getName())
this.gameLengths.getClass().getName() == orig(this.deckSwapsPerGame.getClass().getName())
this.gameLengths.getClass().getName() == orig(this.unresolvedBattlesPerGame.getClass().getName())
this.deckSwapsPerGame == orig(this.deckSwapsPerGame)
this.deckSwapsPerGame[] == orig(this.deckSwapsPerGame[])
this.unresolvedBattlesPerGame == orig(this.unresolvedBattlesPerGame)
this.unresolvedBattlesPerGame[] == orig(this.unresolvedBattlesPerGame[])
arg0.participatingInBattle == orig(arg0.participatingInBattle)
arg0.nbrOfBattlesFought == orig(arg0.nbrOfBattlesFought)
arg0.nbrOfBattlesWon == orig(arg0.nbrOfBattlesWon)
arg0.strategy == orig(arg0.strategy)
arg0.strategy.getClass().getName() == orig(arg0.strategy.getClass().getName())
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.hand == orig(arg0.hand)
arg0.hand.internal == orig(arg0.hand.internal)
arg0.hand.random == orig(arg0.hand.random)
arg0.participatingInBattle == true
arg0.nbrOfBattlesFought == 0
arg0.nbrOfBattlesWon == 0
arg0.name.toString one of { "Joe", "Nolan", "Patrick" }
return one of { 1, 3, 6 }
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.getNumberOfUnresolvedGames():::ENTER
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.getNumberOfUnresolvedGames():::EXIT
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.log)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.random)
this.victoriesByPlayer == orig(this.victoriesByPlayer)
this.victoriesByPlayer.getClass().getName() == orig(this.victoriesByPlayer.getClass().getName())
this.gameLengths == orig(this.gameLengths)
this.gameLengths[] == orig(this.gameLengths[])
this.gameLengths.getClass().getName() == orig(this.gameLengths.getClass().getName())
this.gameLengths.getClass().getName() == orig(this.deckSwapsPerGame.getClass().getName())
this.gameLengths.getClass().getName() == orig(this.unresolvedBattlesPerGame.getClass().getName())
this.deckSwapsPerGame == orig(this.deckSwapsPerGame)
this.deckSwapsPerGame[] == orig(this.deckSwapsPerGame[])
this.unresolvedBattlesPerGame == orig(this.unresolvedBattlesPerGame)
this.unresolvedBattlesPerGame[] == orig(this.unresolvedBattlesPerGame[])
return == 0
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.getPercentageOfGamesWonByPlayer(org.washcom.cardgames.battleroyale.Player):::ENTER
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == arg0.hand.internal.getClass().getName()
arg0.participatingInBattle == true
arg0.nbrOfBattlesFought == 0
arg0.nbrOfBattlesWon == 0
arg0.name.toString one of { "Joe", "Nolan", "Patrick" }
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.getPercentageOfGamesWonByPlayer(org.washcom.cardgames.battleroyale.Player):::EXIT
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.log)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == arg0.hand.internal.getClass().getName()
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(arg0.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.random)
this.victoriesByPlayer == orig(this.victoriesByPlayer)
this.victoriesByPlayer.getClass().getName() == orig(this.victoriesByPlayer.getClass().getName())
this.gameLengths == orig(this.gameLengths)
this.gameLengths[] == orig(this.gameLengths[])
this.gameLengths.getClass().getName() == orig(this.gameLengths.getClass().getName())
this.gameLengths.getClass().getName() == orig(this.deckSwapsPerGame.getClass().getName())
this.gameLengths.getClass().getName() == orig(this.unresolvedBattlesPerGame.getClass().getName())
this.deckSwapsPerGame == orig(this.deckSwapsPerGame)
this.deckSwapsPerGame[] == orig(this.deckSwapsPerGame[])
this.unresolvedBattlesPerGame == orig(this.unresolvedBattlesPerGame)
this.unresolvedBattlesPerGame[] == orig(this.unresolvedBattlesPerGame[])
arg0.participatingInBattle == orig(arg0.participatingInBattle)
arg0.nbrOfBattlesFought == orig(arg0.nbrOfBattlesFought)
arg0.nbrOfBattlesWon == orig(arg0.nbrOfBattlesWon)
arg0.strategy == orig(arg0.strategy)
arg0.strategy.getClass().getName() == orig(arg0.strategy.getClass().getName())
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.hand == orig(arg0.hand)
arg0.hand.internal == orig(arg0.hand.internal)
arg0.hand.random == orig(arg0.hand.random)
arg0.participatingInBattle == true
arg0.nbrOfBattlesFought == 0
arg0.nbrOfBattlesWon == 0
arg0.name.toString one of { "Joe", "Nolan", "Patrick" }
return one of { 10.0, 30.0, 60.0 }
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.getPercentageOfUnresolvedGames():::ENTER
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.getPercentageOfUnresolvedGames():::EXIT
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.log)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.random)
this.victoriesByPlayer == orig(this.victoriesByPlayer)
this.victoriesByPlayer.getClass().getName() == orig(this.victoriesByPlayer.getClass().getName())
this.gameLengths == orig(this.gameLengths)
this.gameLengths[] == orig(this.gameLengths[])
this.gameLengths.getClass().getName() == orig(this.gameLengths.getClass().getName())
this.gameLengths.getClass().getName() == orig(this.deckSwapsPerGame.getClass().getName())
this.gameLengths.getClass().getName() == orig(this.unresolvedBattlesPerGame.getClass().getName())
this.deckSwapsPerGame == orig(this.deckSwapsPerGame)
this.deckSwapsPerGame[] == orig(this.deckSwapsPerGame[])
this.unresolvedBattlesPerGame == orig(this.unresolvedBattlesPerGame)
this.unresolvedBattlesPerGame[] == orig(this.unresolvedBattlesPerGame[])
return == 0.0
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.getShortestGameLength():::ENTER
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.getShortestGameLength():::EXIT
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.log)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.random)
this.victoriesByPlayer == orig(this.victoriesByPlayer)
this.victoriesByPlayer.getClass().getName() == orig(this.victoriesByPlayer.getClass().getName())
this.gameLengths == orig(this.gameLengths)
this.gameLengths[] == orig(this.gameLengths[])
this.gameLengths.getClass().getName() == orig(this.gameLengths.getClass().getName())
this.gameLengths.getClass().getName() == orig(this.deckSwapsPerGame.getClass().getName())
this.gameLengths.getClass().getName() == orig(this.unresolvedBattlesPerGame.getClass().getName())
this.deckSwapsPerGame == orig(this.deckSwapsPerGame)
this.deckSwapsPerGame[] == orig(this.deckSwapsPerGame[])
this.unresolvedBattlesPerGame == orig(this.unresolvedBattlesPerGame)
this.unresolvedBattlesPerGame[] == orig(this.unresolvedBattlesPerGame[])
return == 5
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.getTotalGamesPlayed():::ENTER
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.getTotalGamesPlayed():::EXIT
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.log)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.random)
this.victoriesByPlayer == orig(this.victoriesByPlayer)
this.victoriesByPlayer.getClass().getName() == orig(this.victoriesByPlayer.getClass().getName())
this.gameLengths == orig(this.gameLengths)
this.gameLengths[] == orig(this.gameLengths[])
this.gameLengths.getClass().getName() == orig(this.gameLengths.getClass().getName())
this.gameLengths.getClass().getName() == orig(this.deckSwapsPerGame.getClass().getName())
this.gameLengths.getClass().getName() == orig(this.unresolvedBattlesPerGame.getClass().getName())
this.deckSwapsPerGame == orig(this.deckSwapsPerGame)
this.deckSwapsPerGame[] == orig(this.deckSwapsPerGame[])
this.unresolvedBattlesPerGame == orig(this.unresolvedBattlesPerGame)
this.unresolvedBattlesPerGame[] == orig(this.unresolvedBattlesPerGame[])
return == 10
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.main(java.lang.String[]):::ENTER
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy == org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy == org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy == org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.strategy
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy == null
arg0 has only one value
arg0.getClass().getName() == java.lang.String[].class
arg0[] == []
arg0[].toString == []
===========================================================================
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.main(java.lang.String[]):::EXIT
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.log)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3 == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.hand.random)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.participatingInBattle == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.participatingInBattle)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.strategy == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.strategy)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name.toString == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.name.toString)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.internal)
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.random == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.noWinner.hand.random)
arg0[] == orig(arg0[])
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player1.strategy has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player2.strategy has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGameSimulator.player3.strategy has only one value
arg0[] == []
arg0[].toString == []
===========================================================================
org.washcom.cardgames.battleroyale.DefaultBattleAccessor:::OBJECT
this.twoBattlerAssessor != null
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.log has only one value
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.log != null
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees has only one value
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees != null
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() == org.washcom.cardgames.battleroyale.TwoBattlerAssessor$1.class
this.threeBattlerAssessor != null
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.log has only one value
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.log != null
===========================================================================
org.washcom.cardgames.battleroyale.DefaultBattleAccessor.DefaultBattleAccessor():::EXIT
===========================================================================
org.washcom.cardgames.battleroyale.DefaultBattleAccessor.determineFees(org.washcom.cardgames.battleroyale.Battle):::ENTER
arg0.battleCards.getClass().getName() == arg0.battlers.getClass().getName()
arg0 != null
org.washcom.cardgames.battleroyale.Battle.log has only one value
org.washcom.cardgames.battleroyale.Battle.log != null
arg0.number >= 1
arg0.game != null
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log != null
arg0.game.assessor != null
arg0.game.assessor.getClass().getName() == org.washcom.cardgames.battleroyale.DefaultBattleAccessor.class
arg0.game.players != null
arg0.game.players[] contains no nulls and has only one value, of length 3
arg0.game.players[] elements != null
arg0.game.players[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg0.game.players[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.game.players.getClass().getName() == java.util.Arrays$ArrayList.class
arg0.game.gameCards != null
arg0.game.currentRoundNumber >= 1
arg0.game.currentBattle != null
arg0.game.winner == null
arg0.game.swapHandsRuleEnabled == true
arg0.game.swappedHandsCount >= 0
arg0.game.unresolvedBattleCount >= 0
arg0.game.battlesByNbrOfContinuations != null
arg0.game.battlesByNbrOfContinuations.getClass().getName() == java.util.HashMap.class
arg0.battleCards != null
arg0.battleCards[] elements != null
arg0.battleCards[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
arg0.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
arg0.battleCards.getClass().getName() == java.util.ArrayList.class
arg0.battlers != null
arg0.battlers[] elements != null
arg0.battlers[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
arg0.continuations >= 0
size(arg0.game.players[]) == 3
size(arg0.battleCards[]) one of { 2, 3 }
size(arg0.battlers[]) one of { 2, 3 }
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.game.assessor.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.game.players.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.game.battlesByNbrOfContinuations.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.game.players.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.game.battlesByNbrOfContinuations.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.players.getClass().getName() != arg0.game.battlesByNbrOfContinuations.getClass().getName()
arg0.game.players.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.battlesByNbrOfContinuations.getClass().getName() != arg0.battleCards.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.DefaultBattleAccessor.determineFees(org.washcom.cardgames.battleroyale.Battle):::EXIT34
arg0.battleCards[].getClass().getName() == [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard]
arg0.battlers[] contains no nulls and has only one value, of length 3
arg0.battlers[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
size(arg0.battleCards[]) == 3
size(arg0.battlers[]) == 3
===========================================================================
org.washcom.cardgames.battleroyale.DefaultBattleAccessor.determineFees(org.washcom.cardgames.battleroyale.Battle):::EXIT36
arg0.battleCards[].getClass().getName() == [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard]
arg0.battlers[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
size(arg0.battleCards[]) == 2
size(arg0.battlers[]) == 2
===========================================================================
org.washcom.cardgames.battleroyale.DefaultBattleAccessor.determineFees(org.washcom.cardgames.battleroyale.Battle):::EXIT
this.twoBattlerAssessor == orig(this.twoBattlerAssessor)
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.log == orig(org.washcom.cardgames.battleroyale.TwoBattlerAssessor.log)
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees == orig(org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees)
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() == orig(org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName())
this.threeBattlerAssessor == orig(this.threeBattlerAssessor)
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.log == orig(org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.log)
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
arg0.number == orig(arg0.number)
arg0.game == orig(arg0.game)
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
arg0.game.assessor == orig(arg0.game.assessor)
arg0.game.assessor.getClass().getName() == orig(arg0.game.assessor.getClass().getName())
arg0.game.players == orig(arg0.game.players)
arg0.game.players[] == orig(arg0.game.players[])
arg0.game.players.getClass().getName() == orig(arg0.game.players.getClass().getName())
arg0.game.gameCards == orig(arg0.game.gameCards)
arg0.game.currentRoundNumber == orig(arg0.game.currentRoundNumber)
arg0.game.currentBattle == orig(arg0.game.currentBattle)
arg0.game.winner == orig(arg0.game.winner)
arg0.game.swapHandsRuleEnabled == orig(arg0.game.swapHandsRuleEnabled)
arg0.game.swappedHandsCount == orig(arg0.game.swappedHandsCount)
arg0.game.unresolvedBattleCount == orig(arg0.game.unresolvedBattleCount)
arg0.game.battlesByNbrOfContinuations == orig(arg0.game.battlesByNbrOfContinuations)
arg0.game.battlesByNbrOfContinuations.getClass().getName() == return.getClass().getName()
arg0.battleCards == orig(arg0.battleCards)
arg0.battleCards[] == orig(arg0.battleCards[])
arg0.battleCards.getClass().getName() == arg0.battlers.getClass().getName()
arg0.battleCards.getClass().getName() == orig(arg0.battleCards.getClass().getName())
arg0.battleCards.getClass().getName() == orig(arg0.battlers.getClass().getName())
arg0.battlers == orig(arg0.battlers)
arg0.battlers[] == orig(arg0.battlers[])
arg0.continuations == orig(arg0.continuations)
return.getClass().getName() == orig(arg0.game.battlesByNbrOfContinuations.getClass().getName())
org.washcom.cardgames.battleroyale.Battle.log has only one value
org.washcom.cardgames.battleroyale.Battle.log != null
arg0.number >= 1
arg0.game != null
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log != null
arg0.game.assessor != null
arg0.game.assessor.getClass().getName() == org.washcom.cardgames.battleroyale.DefaultBattleAccessor.class
arg0.game.players != null
arg0.game.players[] contains no nulls and has only one value, of length 3
arg0.game.players[] elements != null
arg0.game.players[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg0.game.players[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.game.players.getClass().getName() == java.util.Arrays$ArrayList.class
arg0.game.gameCards != null
arg0.game.currentRoundNumber >= 1
arg0.game.currentBattle != null
arg0.game.winner == null
arg0.game.swapHandsRuleEnabled == true
arg0.game.swappedHandsCount >= 0
arg0.game.unresolvedBattleCount >= 0
arg0.game.battlesByNbrOfContinuations != null
arg0.battleCards != null
arg0.battleCards[] elements != null
arg0.battleCards[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
arg0.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
arg0.battleCards.getClass().getName() == java.util.ArrayList.class
arg0.battlers != null
arg0.battlers[] elements != null
arg0.battlers[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
arg0.continuations >= 0
return != null
return.getClass().getName() == java.util.HashMap.class
size(arg0.game.players[]) == 3
size(arg0.battleCards[]) one of { 2, 3 }
size(arg0.battlers[]) one of { 2, 3 }
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.game.assessor.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.game.players.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.battleCards.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != return.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.game.players.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.assessor.getClass().getName() != return.getClass().getName()
arg0.game.players.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.players.getClass().getName() != return.getClass().getName()
arg0.battleCards.getClass().getName() != return.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.DefaultBattleAccessor.pickWinner(org.washcom.cardgames.battleroyale.Battle):::ENTER
arg0.battleCards.getClass().getName() == arg0.battlers.getClass().getName()
arg0 != null
org.washcom.cardgames.battleroyale.Battle.log has only one value
org.washcom.cardgames.battleroyale.Battle.log != null
arg0.number >= 1
arg0.game != null
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log != null
arg0.game.assessor != null
arg0.game.assessor.getClass().getName() == org.washcom.cardgames.battleroyale.DefaultBattleAccessor.class
arg0.game.players != null
arg0.game.players[] contains no nulls and has only one value, of length 3
arg0.game.players[] elements != null
arg0.game.players[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg0.game.players[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.game.players.getClass().getName() == java.util.Arrays$ArrayList.class
arg0.game.gameCards != null
arg0.game.currentRoundNumber >= 1
arg0.game.currentBattle != null
arg0.game.winner == null
arg0.game.swapHandsRuleEnabled == true
arg0.game.swappedHandsCount >= 0
arg0.game.unresolvedBattleCount >= 0
arg0.game.battlesByNbrOfContinuations != null
arg0.game.battlesByNbrOfContinuations.getClass().getName() == java.util.HashMap.class
arg0.battleCards != null
arg0.battleCards[] elements != null
arg0.battleCards[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
arg0.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
arg0.battleCards.getClass().getName() == java.util.ArrayList.class
arg0.battlers != null
arg0.battlers[] elements != null
arg0.battlers[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
arg0.continuations >= 0
size(arg0.game.players[]) == 3
size(arg0.battleCards[]) one of { 2, 3 }
size(arg0.battlers[]) one of { 2, 3 }
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.game.assessor.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.game.players.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.game.battlesByNbrOfContinuations.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.game.players.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.game.battlesByNbrOfContinuations.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.players.getClass().getName() != arg0.game.battlesByNbrOfContinuations.getClass().getName()
arg0.game.players.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.battlesByNbrOfContinuations.getClass().getName() != arg0.battleCards.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.DefaultBattleAccessor.pickWinner(org.washcom.cardgames.battleroyale.Battle):::EXIT20
arg0.battleCards[].getClass().getName() == [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard]
arg0.battlers[] contains no nulls and has only one value, of length 3
arg0.battlers[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
size(arg0.battleCards[]) == 3
size(arg0.battlers[]) == 3
===========================================================================
org.washcom.cardgames.battleroyale.DefaultBattleAccessor.pickWinner(org.washcom.cardgames.battleroyale.Battle):::EXIT22
arg0.battleCards[].getClass().getName() == [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard]
arg0.battlers[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
return.playedBy.strategy != null
size(arg0.battleCards[]) == 2
size(arg0.battlers[]) == 2
===========================================================================
org.washcom.cardgames.battleroyale.DefaultBattleAccessor.pickWinner(org.washcom.cardgames.battleroyale.Battle):::EXIT
this.twoBattlerAssessor == orig(this.twoBattlerAssessor)
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.log == orig(org.washcom.cardgames.battleroyale.TwoBattlerAssessor.log)
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees == orig(org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees)
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() == orig(org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName())
this.threeBattlerAssessor == orig(this.threeBattlerAssessor)
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.log == orig(org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.log)
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
arg0.number == orig(arg0.number)
arg0.game == orig(arg0.game)
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
arg0.game.assessor == orig(arg0.game.assessor)
arg0.game.assessor.getClass().getName() == orig(arg0.game.assessor.getClass().getName())
arg0.game.players == orig(arg0.game.players)
arg0.game.players[] == orig(arg0.game.players[])
arg0.game.players.getClass().getName() == orig(arg0.game.players.getClass().getName())
arg0.game.gameCards == orig(arg0.game.gameCards)
arg0.game.currentRoundNumber == orig(arg0.game.currentRoundNumber)
arg0.game.currentBattle == orig(arg0.game.currentBattle)
arg0.game.winner == orig(arg0.game.winner)
arg0.game.swapHandsRuleEnabled == orig(arg0.game.swapHandsRuleEnabled)
arg0.game.unresolvedBattleCount == orig(arg0.game.unresolvedBattleCount)
arg0.game.battlesByNbrOfContinuations == orig(arg0.game.battlesByNbrOfContinuations)
arg0.game.battlesByNbrOfContinuations.getClass().getName() == orig(arg0.game.battlesByNbrOfContinuations.getClass().getName())
arg0.battleCards == orig(arg0.battleCards)
arg0.battleCards[] == orig(arg0.battleCards[])
arg0.battleCards.getClass().getName() == arg0.battlers.getClass().getName()
arg0.battleCards.getClass().getName() == orig(arg0.battleCards.getClass().getName())
arg0.battleCards.getClass().getName() == orig(arg0.battlers.getClass().getName())
arg0.battlers == orig(arg0.battlers)
arg0.battlers[] == orig(arg0.battlers[])
arg0.continuations == orig(arg0.continuations)
org.washcom.cardgames.battleroyale.Battle.log has only one value
org.washcom.cardgames.battleroyale.Battle.log != null
arg0.number >= 1
arg0.game != null
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log != null
arg0.game.assessor != null
arg0.game.assessor.getClass().getName() == org.washcom.cardgames.battleroyale.DefaultBattleAccessor.class
arg0.game.players != null
arg0.game.players[] contains no nulls and has only one value, of length 3
arg0.game.players[] elements != null
arg0.game.players[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg0.game.players[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.game.players.getClass().getName() == java.util.Arrays$ArrayList.class
arg0.game.gameCards != null
arg0.game.currentRoundNumber >= 1
arg0.game.currentBattle != null
arg0.game.winner == null
arg0.game.swapHandsRuleEnabled == true
arg0.game.swappedHandsCount >= 0
arg0.game.unresolvedBattleCount >= 0
arg0.game.battlesByNbrOfContinuations != null
arg0.game.battlesByNbrOfContinuations.getClass().getName() == java.util.HashMap.class
arg0.battleCards != null
arg0.battleCards[] elements != null
arg0.battleCards[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
arg0.battleCards[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
arg0.battleCards.getClass().getName() == java.util.ArrayList.class
arg0.battlers != null
arg0.battlers[] elements != null
arg0.battlers[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.battlers[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player], [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player] }
arg0.continuations >= 0
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == 14
return.card != null
return.card.suit != null
return.card.denomination != null
return.playedBy != null
return.playedBy.participatingInBattle == true
return.playedBy.nbrOfBattlesFought == 0
return.playedBy.nbrOfBattlesWon == 0
return.playedBy.name != null
return.playedBy.name.toString one of { "Joe", "Nolan", "Patrick" }
return.playedBy.hand != null
size(arg0.game.players[]) == 3
size(arg0.battleCards[]) one of { 2, 3 }
size(arg0.battlers[]) one of { 2, 3 }
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.game.assessor.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.game.players.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.game.battlesByNbrOfContinuations.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.battleCards.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != return.playedBy.strategy.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.game.players.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.game.battlesByNbrOfContinuations.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.assessor.getClass().getName() != return.playedBy.strategy.getClass().getName()
arg0.game.players.getClass().getName() != arg0.game.battlesByNbrOfContinuations.getClass().getName()
arg0.game.players.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.players.getClass().getName() != return.playedBy.strategy.getClass().getName()
arg0.game.swappedHandsCount >= orig(arg0.game.swappedHandsCount)
arg0.game.battlesByNbrOfContinuations.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.battlesByNbrOfContinuations.getClass().getName() != return.playedBy.strategy.getClass().getName()
arg0.battleCards.getClass().getName() != return.playedBy.strategy.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy:::OBJECT
this has only one value
===========================================================================
org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy.OptimalSecondChanceStrategy():::EXIT
===========================================================================
org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy.containsOnlyTwos(java.util.List):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
arg0[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
arg0.getClass().getName() == java.util.ArrayList.class
size(arg0[]) one of { 1, 2 }
===========================================================================
org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy.containsOnlyTwos(java.util.List):::EXIT29
===========================================================================
org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy.containsOnlyTwos(java.util.List):::EXIT29;condition="not(return == true)"
===========================================================================
org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy.containsOnlyTwos(java.util.List):::EXIT
arg0[] == orig(arg0[])
arg0[] elements != null
arg0[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
arg0[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
return == false
===========================================================================
org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy.containsOnlyTwos(java.util.List):::EXIT;condition="not(return == true)"
===========================================================================
org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy.shouldTryForAnotherCard(org.washcom.cardgames.battleroyale.BattleCard, java.util.List):::ENTER
arg0 != null
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == 14
arg0.card != null
arg0.card.suit != null
arg0.card.denomination has only one value
arg0.card.denomination != null
arg0.playedBy has only one value
arg0.playedBy != null
arg0.playedBy.participatingInBattle == true
arg0.playedBy.nbrOfBattlesFought == 0
arg0.playedBy.nbrOfBattlesWon == 0
arg0.playedBy.strategy has only one value
arg0.playedBy.strategy != null
arg0.playedBy.strategy.getClass().getName() == org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy.class
arg0.playedBy.name has only one value
arg0.playedBy.name != null
arg0.playedBy.name.toString == "Patrick"
arg0.playedBy.hand has only one value
arg0.playedBy.hand != null
arg1 != null
arg1[] elements != null
arg1[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
arg1[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
arg1.getClass().getName() == java.util.ArrayList.class
size(arg1[]) one of { 1, 2 }
arg0.playedBy.strategy.getClass().getName() != arg1.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy.shouldTryForAnotherCard(org.washcom.cardgames.battleroyale.BattleCard, java.util.List):::EXIT19
return == false
===========================================================================
org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy.shouldTryForAnotherCard(org.washcom.cardgames.battleroyale.BattleCard, java.util.List):::EXIT19;condition="not(return == true)"
===========================================================================
org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy.shouldTryForAnotherCard(org.washcom.cardgames.battleroyale.BattleCard, java.util.List):::EXIT23
return == true
===========================================================================
org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy.shouldTryForAnotherCard(org.washcom.cardgames.battleroyale.BattleCard, java.util.List):::EXIT23;condition="return == true"
===========================================================================
org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy.shouldTryForAnotherCard(org.washcom.cardgames.battleroyale.BattleCard, java.util.List):::EXIT
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == orig(org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE)
arg0.card == orig(arg0.card)
arg0.card.suit == orig(arg0.card.suit)
arg0.card.denomination == orig(arg0.card.denomination)
arg0.playedBy == orig(arg0.playedBy)
arg0.playedBy.participatingInBattle == orig(arg0.playedBy.participatingInBattle)
arg0.playedBy.nbrOfBattlesFought == orig(arg0.playedBy.nbrOfBattlesFought)
arg0.playedBy.nbrOfBattlesWon == orig(arg0.playedBy.nbrOfBattlesWon)
arg0.playedBy.strategy == orig(arg0.playedBy.strategy)
arg0.playedBy.strategy.getClass().getName() == orig(arg0.playedBy.strategy.getClass().getName())
arg0.playedBy.name == orig(arg0.playedBy.name)
arg0.playedBy.name.toString == orig(arg0.playedBy.name.toString)
arg0.playedBy.hand == orig(arg0.playedBy.hand)
arg1[] == orig(arg1[])
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == 14
arg0.card != null
arg0.card.suit != null
arg0.card.denomination has only one value
arg0.card.denomination != null
arg0.playedBy has only one value
arg0.playedBy != null
arg0.playedBy.participatingInBattle == true
arg0.playedBy.nbrOfBattlesFought == 0
arg0.playedBy.nbrOfBattlesWon == 0
arg0.playedBy.strategy has only one value
arg0.playedBy.strategy != null
arg0.playedBy.strategy.getClass().getName() == org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy.class
arg0.playedBy.name has only one value
arg0.playedBy.name != null
arg0.playedBy.name.toString == "Patrick"
arg0.playedBy.hand has only one value
arg0.playedBy.hand != null
arg1[] elements != null
arg1[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
arg1[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
arg0.playedBy.strategy.getClass().getName() != orig(arg1.getClass().getName())
===========================================================================
org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy.shouldTryForAnotherCard(org.washcom.cardgames.battleroyale.BattleCard, java.util.List):::EXIT;condition="return == true"
return == true
===========================================================================
org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy.shouldTryForAnotherCard(org.washcom.cardgames.battleroyale.BattleCard, java.util.List):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.washcom.cardgames.battleroyale.Player$1:::OBJECT
org.washcom.cardgames.battleroyale.Player.this.participatingInBattle == true
org.washcom.cardgames.battleroyale.Player.this.nbrOfBattlesFought == 0
org.washcom.cardgames.battleroyale.Player.this.nbrOfBattlesWon == 0
org.washcom.cardgames.battleroyale.Player.this.strategy.getClass().getName() == org.washcom.cardgames.battleroyale.Player$1.class
org.washcom.cardgames.battleroyale.Player.this.name != null
org.washcom.cardgames.battleroyale.Player.this.name.toString one of { "Joe", "Nolan" }
org.washcom.cardgames.battleroyale.Player.this.hand != null
org.washcom.cardgames.battleroyale.Player.this.hand.internal != null
org.washcom.cardgames.battleroyale.Player.this.hand.internal.getClass().getName() == java.util.ArrayDeque.class
org.washcom.cardgames.battleroyale.Player.this.hand.random != null
===========================================================================
org.washcom.cardgames.battleroyale.Player$1.(org.washcom.cardgames.battleroyale.Player):::ENTER
org.washcom.cardgames.battleroyale.Player.this.participatingInBattle == true
org.washcom.cardgames.battleroyale.Player.this.nbrOfBattlesFought == 0
org.washcom.cardgames.battleroyale.Player.this.nbrOfBattlesWon == 0
org.washcom.cardgames.battleroyale.Player.this.strategy == null
org.washcom.cardgames.battleroyale.Player.this.name.toString one of { "Joe", "Nolan" }
org.washcom.cardgames.battleroyale.Player.this.hand.internal.getClass().getName() == java.util.ArrayDeque.class
===========================================================================
org.washcom.cardgames.battleroyale.Player$1.(org.washcom.cardgames.battleroyale.Player):::EXIT
org.washcom.cardgames.battleroyale.Player.this == orig(org.washcom.cardgames.battleroyale.Player.this)
org.washcom.cardgames.battleroyale.Player.this.participatingInBattle == orig(org.washcom.cardgames.battleroyale.Player.this.participatingInBattle)
org.washcom.cardgames.battleroyale.Player.this.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.Player.this.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.Player.this.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.Player.this.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.Player.this.strategy == orig(org.washcom.cardgames.battleroyale.Player.this.strategy)
org.washcom.cardgames.battleroyale.Player.this.name == orig(org.washcom.cardgames.battleroyale.Player.this.name)
org.washcom.cardgames.battleroyale.Player.this.name.toString == orig(org.washcom.cardgames.battleroyale.Player.this.name.toString)
org.washcom.cardgames.battleroyale.Player.this.hand == orig(org.washcom.cardgames.battleroyale.Player.this.hand)
org.washcom.cardgames.battleroyale.Player.this.hand.internal == orig(org.washcom.cardgames.battleroyale.Player.this.hand.internal)
org.washcom.cardgames.battleroyale.Player.this.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.Player.this.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.Player.this.hand.random == orig(org.washcom.cardgames.battleroyale.Player.this.hand.random)
org.washcom.cardgames.battleroyale.Player.this.strategy == null
===========================================================================
org.washcom.cardgames.battleroyale.Player$1.shouldTryForAnotherCard(org.washcom.cardgames.battleroyale.BattleCard, java.util.List):::ENTER
org.washcom.cardgames.battleroyale.Player.this.strategy != null
arg0 != null
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == 14
arg0.card != null
arg0.card.suit != null
arg0.card.denomination has only one value
arg0.card.denomination != null
arg0.playedBy != null
arg0.playedBy.participatingInBattle == true
arg0.playedBy.nbrOfBattlesFought == 0
arg0.playedBy.nbrOfBattlesWon == 0
arg0.playedBy.strategy != null
arg0.playedBy.strategy.getClass().getName() == org.washcom.cardgames.battleroyale.Player$1.class
arg0.playedBy.name != null
arg0.playedBy.name.toString one of { "Joe", "Nolan" }
arg0.playedBy.hand != null
arg1 != null
arg1[] elements != null
arg1[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
arg1[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
arg1.getClass().getName() == java.util.ArrayList.class
size(arg1[]) one of { 1, 2 }
===========================================================================
org.washcom.cardgames.battleroyale.Player$1.shouldTryForAnotherCard(org.washcom.cardgames.battleroyale.BattleCard, java.util.List):::EXIT
org.washcom.cardgames.battleroyale.Player.this == orig(org.washcom.cardgames.battleroyale.Player.this)
org.washcom.cardgames.battleroyale.Player.this.participatingInBattle == orig(org.washcom.cardgames.battleroyale.Player.this.participatingInBattle)
org.washcom.cardgames.battleroyale.Player.this.nbrOfBattlesFought == orig(org.washcom.cardgames.battleroyale.Player.this.nbrOfBattlesFought)
org.washcom.cardgames.battleroyale.Player.this.nbrOfBattlesWon == orig(org.washcom.cardgames.battleroyale.Player.this.nbrOfBattlesWon)
org.washcom.cardgames.battleroyale.Player.this.strategy == orig(org.washcom.cardgames.battleroyale.Player.this.strategy)
org.washcom.cardgames.battleroyale.Player.this.strategy.getClass().getName() == orig(org.washcom.cardgames.battleroyale.Player.this.strategy.getClass().getName())
org.washcom.cardgames.battleroyale.Player.this.name == orig(org.washcom.cardgames.battleroyale.Player.this.name)
org.washcom.cardgames.battleroyale.Player.this.name.toString == orig(org.washcom.cardgames.battleroyale.Player.this.name.toString)
org.washcom.cardgames.battleroyale.Player.this.hand == orig(org.washcom.cardgames.battleroyale.Player.this.hand)
org.washcom.cardgames.battleroyale.Player.this.hand.internal == orig(org.washcom.cardgames.battleroyale.Player.this.hand.internal)
org.washcom.cardgames.battleroyale.Player.this.hand.internal.getClass().getName() == orig(org.washcom.cardgames.battleroyale.Player.this.hand.internal.getClass().getName())
org.washcom.cardgames.battleroyale.Player.this.hand.random == orig(org.washcom.cardgames.battleroyale.Player.this.hand.random)
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == orig(org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE)
arg0.card == orig(arg0.card)
arg0.card.suit == orig(arg0.card.suit)
arg0.card.denomination == orig(arg0.card.denomination)
arg0.playedBy == orig(arg0.playedBy)
arg0.playedBy.participatingInBattle == orig(arg0.playedBy.participatingInBattle)
arg0.playedBy.nbrOfBattlesFought == orig(arg0.playedBy.nbrOfBattlesFought)
arg0.playedBy.nbrOfBattlesWon == orig(arg0.playedBy.nbrOfBattlesWon)
arg0.playedBy.strategy == orig(arg0.playedBy.strategy)
arg0.playedBy.strategy.getClass().getName() == orig(arg0.playedBy.strategy.getClass().getName())
arg0.playedBy.name == orig(arg0.playedBy.name)
arg0.playedBy.name.toString == orig(arg0.playedBy.name.toString)
arg0.playedBy.hand == orig(arg0.playedBy.hand)
arg1[] == orig(arg1[])
org.washcom.cardgames.battleroyale.Player.this.strategy != null
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == 14
arg0.card != null
arg0.card.suit != null
arg0.card.denomination has only one value
arg0.card.denomination != null
arg0.playedBy != null
arg0.playedBy.participatingInBattle == true
arg0.playedBy.nbrOfBattlesFought == 0
arg0.playedBy.nbrOfBattlesWon == 0
arg0.playedBy.strategy != null
arg0.playedBy.strategy.getClass().getName() == org.washcom.cardgames.battleroyale.Player$1.class
arg0.playedBy.name != null
arg0.playedBy.name.toString one of { "Joe", "Nolan" }
arg0.playedBy.hand != null
arg1[] elements != null
arg1[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
arg1[].getClass().getName() one of { [org.washcom.cardgames.battleroyale.BattleCard], [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard] }
return == false
===========================================================================
org.washcom.cardgames.battleroyale.Player$1.shouldTryForAnotherCard(org.washcom.cardgames.battleroyale.BattleCard, java.util.List):::EXIT;condition="not(return == true)"
===========================================================================
org.washcom.cardgames.battleroyale.Player:::OBJECT
this.participatingInBattle == true
this.nbrOfBattlesFought == 0
this.nbrOfBattlesWon == 0
this.name != null
this.hand != null
this.hand.internal != null
this.hand.internal.getClass().getName() == java.util.ArrayDeque.class
this.hand.random != null
this.strategy.getClass().getName() != this.hand.internal.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.Player.Player(java.lang.String):::ENTER
===========================================================================
org.washcom.cardgames.battleroyale.Player.Player(java.lang.String):::EXIT
this.name == orig(arg0)
arg0.toString == orig(arg0.toString)
this.strategy == null
===========================================================================
org.washcom.cardgames.battleroyale.Player.getSecondChanceStrategy():::ENTER
this.name.toString one of { "Joe", "Nolan", "Patrick" }
===========================================================================
org.washcom.cardgames.battleroyale.Player.getSecondChanceStrategy():::EXIT
this.participatingInBattle == orig(this.participatingInBattle)
this.nbrOfBattlesFought == orig(this.nbrOfBattlesFought)
this.nbrOfBattlesWon == orig(this.nbrOfBattlesWon)
this.strategy.getClass().getName() == return.getClass().getName()
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.hand == orig(this.hand)
this.hand.internal == orig(this.hand.internal)
this.hand.internal.getClass().getName() == orig(this.hand.internal.getClass().getName())
this.hand.random == orig(this.hand.random)
return.getClass().getName() == orig(this.strategy.getClass().getName())
this.strategy != null
this.name.toString one of { "Joe", "Nolan", "Patrick" }
return != null
this.hand.internal.getClass().getName() != return.getClass().getName()
this.hand.internal.getClass().getName() != orig(this.strategy.getClass().getName())
===========================================================================
org.washcom.cardgames.battleroyale.Player.setSecondChanceStrategy(org.washcom.cardgames.battleroyale.SecondChanceStrategy):::ENTER
this has only one value
this.strategy == null
this.name has only one value
this.name.toString == "Patrick"
this.hand has only one value
this.hand.internal has only one value
this.hand.random has only one value
arg0 has only one value
arg0.getClass().getName() == org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy.class
===========================================================================
org.washcom.cardgames.battleroyale.Player.setSecondChanceStrategy(org.washcom.cardgames.battleroyale.SecondChanceStrategy):::EXIT
this.participatingInBattle == orig(this.participatingInBattle)
this.nbrOfBattlesFought == orig(this.nbrOfBattlesFought)
this.nbrOfBattlesWon == orig(this.nbrOfBattlesWon)
this.strategy == orig(arg0)
this.strategy.getClass().getName() == orig(arg0.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.hand == orig(this.hand)
this.hand.internal == orig(this.hand.internal)
this.hand.internal.getClass().getName() == orig(this.hand.internal.getClass().getName())
this.hand.random == orig(this.hand.random)
this.strategy has only one value
this.strategy.getClass().getName() == org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy.class
this.name has only one value
this.name.toString == "Patrick"
this.hand has only one value
this.hand.internal has only one value
this.hand.random has only one value
===========================================================================
org.washcom.cardgames.battleroyale.Player.swapHands(org.washcom.cardgames.battleroyale.Player):::ENTER
this.hand.internal.getClass().getName() == arg0.hand.internal.getClass().getName()
this.name.toString one of { "Joe", "Patrick" }
arg0 != null
arg0.participatingInBattle == true
arg0.nbrOfBattlesFought == 0
arg0.nbrOfBattlesWon == 0
arg0.name != null
arg0.name.toString one of { "Nolan", "Patrick" }
arg0.hand != null
arg0.hand.internal != null
arg0.hand.random != null
this.hand.internal.getClass().getName() != arg0.strategy.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.Player.swapHands(org.washcom.cardgames.battleroyale.Player):::EXIT76
===========================================================================
org.washcom.cardgames.battleroyale.Player.swapHands(org.washcom.cardgames.battleroyale.Player):::EXIT
this.participatingInBattle == orig(this.participatingInBattle)
this.nbrOfBattlesFought == orig(this.nbrOfBattlesFought)
this.nbrOfBattlesWon == orig(this.nbrOfBattlesWon)
this.strategy == orig(this.strategy)
this.strategy.getClass().getName() == orig(this.strategy.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.hand == orig(this.hand)
this.hand.internal == orig(this.hand.internal)
this.hand.internal.getClass().getName() == arg0.hand.internal.getClass().getName()
this.hand.internal.getClass().getName() == orig(this.hand.internal.getClass().getName())
this.hand.internal.getClass().getName() == orig(arg0.hand.internal.getClass().getName())
this.hand.random == orig(this.hand.random)
arg0.participatingInBattle == orig(arg0.participatingInBattle)
arg0.nbrOfBattlesFought == orig(arg0.nbrOfBattlesFought)
arg0.nbrOfBattlesWon == orig(arg0.nbrOfBattlesWon)
arg0.strategy == orig(arg0.strategy)
arg0.strategy.getClass().getName() == orig(arg0.strategy.getClass().getName())
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.hand == orig(arg0.hand)
arg0.hand.internal == orig(arg0.hand.internal)
arg0.hand.random == orig(arg0.hand.random)
this.name.toString one of { "Joe", "Patrick" }
arg0.participatingInBattle == true
arg0.nbrOfBattlesFought == 0
arg0.nbrOfBattlesWon == 0
arg0.name != null
arg0.name.toString one of { "Nolan", "Patrick" }
arg0.hand != null
arg0.hand.internal != null
arg0.hand.random != null
this.hand.internal.getClass().getName() != arg0.strategy.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.Rules$1:::OBJECT
this has only one value
===========================================================================
org.washcom.cardgames.battleroyale.Rules$1.():::EXIT
===========================================================================
org.washcom.cardgames.battleroyale.Rules:::CLASS
org.washcom.cardgames.battleroyale.Rules.MAX_VALUE_DIFF_FEE == 3
org.washcom.cardgames.battleroyale.Rules.VALUE_DIFF_BATTLE_THRESHOLD == 2
org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees has only one value
org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees != null
org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees.getClass().getName() == org.washcom.cardgames.battleroyale.Rules$1.class
===========================================================================
org.washcom.cardgames.battleroyale.Rules.battleRoyaleFee(org.washcom.cardgames.battleroyale.BattleCard):::ENTER
arg0 != null
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == 14
arg0.card != null
arg0.card.suit != null
arg0.card.denomination != null
arg0.playedBy != null
arg0.playedBy.participatingInBattle == true
arg0.playedBy.nbrOfBattlesFought == 0
arg0.playedBy.nbrOfBattlesWon == 0
arg0.playedBy.name != null
arg0.playedBy.name.toString one of { "Joe", "Nolan", "Patrick" }
arg0.playedBy.hand != null
===========================================================================
org.washcom.cardgames.battleroyale.Rules.battleRoyaleFee(org.washcom.cardgames.battleroyale.BattleCard):::EXIT
org.washcom.cardgames.battleroyale.Rules.MAX_VALUE_DIFF_FEE == orig(org.washcom.cardgames.battleroyale.Rules.MAX_VALUE_DIFF_FEE)
org.washcom.cardgames.battleroyale.Rules.VALUE_DIFF_BATTLE_THRESHOLD == orig(org.washcom.cardgames.battleroyale.Rules.VALUE_DIFF_BATTLE_THRESHOLD)
org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees == orig(org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees)
org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees.getClass().getName() == orig(org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees.getClass().getName())
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == orig(org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE)
arg0.card == orig(arg0.card)
arg0.card.suit == orig(arg0.card.suit)
arg0.card.denomination == orig(arg0.card.denomination)
arg0.playedBy == orig(arg0.playedBy)
arg0.playedBy.participatingInBattle == orig(arg0.playedBy.participatingInBattle)
arg0.playedBy.nbrOfBattlesFought == orig(arg0.playedBy.nbrOfBattlesFought)
arg0.playedBy.nbrOfBattlesWon == orig(arg0.playedBy.nbrOfBattlesWon)
arg0.playedBy.strategy == orig(arg0.playedBy.strategy)
arg0.playedBy.strategy.getClass().getName() == orig(arg0.playedBy.strategy.getClass().getName())
arg0.playedBy.name == orig(arg0.playedBy.name)
arg0.playedBy.name.toString == orig(arg0.playedBy.name.toString)
arg0.playedBy.hand == orig(arg0.playedBy.hand)
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == 14
arg0.card != null
arg0.card.suit != null
arg0.card.denomination != null
arg0.playedBy != null
arg0.playedBy.participatingInBattle == true
arg0.playedBy.nbrOfBattlesFought == 0
arg0.playedBy.nbrOfBattlesWon == 0
arg0.playedBy.name != null
arg0.playedBy.name.toString one of { "Joe", "Nolan", "Patrick" }
arg0.playedBy.hand != null
return != null
===========================================================================
org.washcom.cardgames.battleroyale.Rules.highCard(org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard):::ENTER
arg0 != null
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == 14
arg0.card != null
arg0.card.suit != null
arg0.card.denomination != null
arg0.playedBy != null
arg0.playedBy.participatingInBattle == true
arg0.playedBy.nbrOfBattlesFought == 0
arg0.playedBy.nbrOfBattlesWon == 0
arg0.playedBy.name != null
arg0.playedBy.name.toString one of { "Joe", "Patrick" }
arg0.playedBy.hand != null
arg1 != null
arg1.card != null
arg1.card.suit != null
arg1.card.denomination != null
arg1.playedBy != null
arg1.playedBy.participatingInBattle == true
arg1.playedBy.nbrOfBattlesFought == 0
arg1.playedBy.nbrOfBattlesWon == 0
arg1.playedBy.name != null
arg1.playedBy.name.toString one of { "Nolan", "Patrick" }
arg1.playedBy.hand != null
===========================================================================
org.washcom.cardgames.battleroyale.Rules.highCard(org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard):::EXIT
org.washcom.cardgames.battleroyale.Rules.MAX_VALUE_DIFF_FEE == orig(org.washcom.cardgames.battleroyale.Rules.MAX_VALUE_DIFF_FEE)
org.washcom.cardgames.battleroyale.Rules.VALUE_DIFF_BATTLE_THRESHOLD == orig(org.washcom.cardgames.battleroyale.Rules.VALUE_DIFF_BATTLE_THRESHOLD)
org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees == orig(org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees)
org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees.getClass().getName() == orig(org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees.getClass().getName())
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == orig(org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE)
arg0.card == orig(arg0.card)
arg0.card.suit == orig(arg0.card.suit)
arg0.card.denomination == orig(arg0.card.denomination)
arg0.playedBy == orig(arg0.playedBy)
arg0.playedBy.participatingInBattle == orig(arg0.playedBy.participatingInBattle)
arg0.playedBy.nbrOfBattlesFought == orig(arg0.playedBy.nbrOfBattlesFought)
arg0.playedBy.nbrOfBattlesWon == orig(arg0.playedBy.nbrOfBattlesWon)
arg0.playedBy.strategy == orig(arg0.playedBy.strategy)
arg0.playedBy.strategy.getClass().getName() == orig(arg0.playedBy.strategy.getClass().getName())
arg0.playedBy.name == orig(arg0.playedBy.name)
arg0.playedBy.name.toString == orig(arg0.playedBy.name.toString)
arg0.playedBy.hand == orig(arg0.playedBy.hand)
arg1.card == orig(arg1.card)
arg1.card.suit == orig(arg1.card.suit)
arg1.card.denomination == orig(arg1.card.denomination)
arg1.playedBy == orig(arg1.playedBy)
arg1.playedBy.participatingInBattle == orig(arg1.playedBy.participatingInBattle)
arg1.playedBy.nbrOfBattlesFought == orig(arg1.playedBy.nbrOfBattlesFought)
arg1.playedBy.nbrOfBattlesWon == orig(arg1.playedBy.nbrOfBattlesWon)
arg1.playedBy.strategy == orig(arg1.playedBy.strategy)
arg1.playedBy.strategy.getClass().getName() == orig(arg1.playedBy.strategy.getClass().getName())
arg1.playedBy.name == orig(arg1.playedBy.name)
arg1.playedBy.name.toString == orig(arg1.playedBy.name.toString)
arg1.playedBy.hand == orig(arg1.playedBy.hand)
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == 14
arg0.card != null
arg0.card.suit != null
arg0.card.denomination != null
arg0.playedBy != null
arg0.playedBy.participatingInBattle == true
arg0.playedBy.nbrOfBattlesFought == 0
arg0.playedBy.nbrOfBattlesWon == 0
arg0.playedBy.name != null
arg0.playedBy.name.toString one of { "Joe", "Patrick" }
arg0.playedBy.hand != null
arg1.card != null
arg1.card.suit != null
arg1.card.denomination != null
arg1.playedBy != null
arg1.playedBy.participatingInBattle == true
arg1.playedBy.nbrOfBattlesFought == 0
arg1.playedBy.nbrOfBattlesWon == 0
arg1.playedBy.name != null
arg1.playedBy.name.toString one of { "Nolan", "Patrick" }
arg1.playedBy.hand != null
return != null
return.card != null
return.card.suit != null
return.card.denomination != null
return.playedBy != null
return.playedBy.participatingInBattle == true
return.playedBy.nbrOfBattlesFought == 0
return.playedBy.nbrOfBattlesWon == 0
return.playedBy.name != null
return.playedBy.name.toString one of { "Joe", "Nolan", "Patrick" }
return.playedBy.hand != null
===========================================================================
org.washcom.cardgames.battleroyale.Rules.highCard(org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard):::ENTER
arg0 != null
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == 14
arg0.card != null
arg0.card.suit != null
arg0.card.denomination != null
arg0.playedBy has only one value
arg0.playedBy != null
arg0.playedBy.participatingInBattle == true
arg0.playedBy.nbrOfBattlesFought == 0
arg0.playedBy.nbrOfBattlesWon == 0
arg0.playedBy.strategy.getClass().getName() == org.washcom.cardgames.battleroyale.Player$1.class
arg0.playedBy.name has only one value
arg0.playedBy.name != null
arg0.playedBy.name.toString == "Joe"
arg0.playedBy.hand has only one value
arg0.playedBy.hand != null
arg1 != null
arg1.card != null
arg1.card.suit != null
arg1.card.denomination != null
arg1.playedBy has only one value
arg1.playedBy != null
arg1.playedBy.participatingInBattle == true
arg1.playedBy.nbrOfBattlesFought == 0
arg1.playedBy.nbrOfBattlesWon == 0
arg1.playedBy.strategy has only one value
arg1.playedBy.strategy != null
arg1.playedBy.strategy.getClass().getName() == org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy.class
arg1.playedBy.name has only one value
arg1.playedBy.name != null
arg1.playedBy.name.toString == "Patrick"
arg1.playedBy.hand has only one value
arg1.playedBy.hand != null
arg2 != null
arg2.card != null
arg2.card.suit != null
arg2.card.denomination != null
arg2.playedBy has only one value
arg2.playedBy != null
arg2.playedBy.participatingInBattle == true
arg2.playedBy.nbrOfBattlesFought == 0
arg2.playedBy.nbrOfBattlesWon == 0
arg2.playedBy.strategy.getClass().getName() == org.washcom.cardgames.battleroyale.Player$1.class
arg2.playedBy.name has only one value
arg2.playedBy.name != null
arg2.playedBy.name.toString == "Nolan"
arg2.playedBy.hand has only one value
arg2.playedBy.hand != null
===========================================================================
org.washcom.cardgames.battleroyale.Rules.highCard(org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard):::EXIT
org.washcom.cardgames.battleroyale.Rules.MAX_VALUE_DIFF_FEE == orig(org.washcom.cardgames.battleroyale.Rules.MAX_VALUE_DIFF_FEE)
org.washcom.cardgames.battleroyale.Rules.VALUE_DIFF_BATTLE_THRESHOLD == orig(org.washcom.cardgames.battleroyale.Rules.VALUE_DIFF_BATTLE_THRESHOLD)
org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees == orig(org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees)
org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees.getClass().getName() == orig(org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees.getClass().getName())
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == orig(org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE)
arg0.card == orig(arg0.card)
arg0.card.suit == orig(arg0.card.suit)
arg0.card.denomination == orig(arg0.card.denomination)
arg0.playedBy == orig(arg0.playedBy)
arg0.playedBy.participatingInBattle == orig(arg0.playedBy.participatingInBattle)
arg0.playedBy.nbrOfBattlesFought == orig(arg0.playedBy.nbrOfBattlesFought)
arg0.playedBy.nbrOfBattlesWon == orig(arg0.playedBy.nbrOfBattlesWon)
arg0.playedBy.strategy == orig(arg0.playedBy.strategy)
arg0.playedBy.strategy.getClass().getName() == orig(arg0.playedBy.strategy.getClass().getName())
arg0.playedBy.name == orig(arg0.playedBy.name)
arg0.playedBy.name.toString == orig(arg0.playedBy.name.toString)
arg0.playedBy.hand == orig(arg0.playedBy.hand)
arg1.card == orig(arg1.card)
arg1.card.suit == orig(arg1.card.suit)
arg1.card.denomination == orig(arg1.card.denomination)
arg1.playedBy == orig(arg1.playedBy)
arg1.playedBy.participatingInBattle == orig(arg1.playedBy.participatingInBattle)
arg1.playedBy.nbrOfBattlesFought == orig(arg1.playedBy.nbrOfBattlesFought)
arg1.playedBy.nbrOfBattlesWon == orig(arg1.playedBy.nbrOfBattlesWon)
arg1.playedBy.strategy == orig(arg1.playedBy.strategy)
arg1.playedBy.strategy.getClass().getName() == orig(arg1.playedBy.strategy.getClass().getName())
arg1.playedBy.name == orig(arg1.playedBy.name)
arg1.playedBy.name.toString == orig(arg1.playedBy.name.toString)
arg1.playedBy.hand == orig(arg1.playedBy.hand)
arg2.card == orig(arg2.card)
arg2.card.suit == orig(arg2.card.suit)
arg2.card.denomination == orig(arg2.card.denomination)
arg2.playedBy == orig(arg2.playedBy)
arg2.playedBy.participatingInBattle == orig(arg2.playedBy.participatingInBattle)
arg2.playedBy.nbrOfBattlesFought == orig(arg2.playedBy.nbrOfBattlesFought)
arg2.playedBy.nbrOfBattlesWon == orig(arg2.playedBy.nbrOfBattlesWon)
arg2.playedBy.strategy == orig(arg2.playedBy.strategy)
arg2.playedBy.strategy.getClass().getName() == orig(arg2.playedBy.strategy.getClass().getName())
arg2.playedBy.name == orig(arg2.playedBy.name)
arg2.playedBy.name.toString == orig(arg2.playedBy.name.toString)
arg2.playedBy.hand == orig(arg2.playedBy.hand)
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == 14
arg0.card != null
arg0.card.suit != null
arg0.card.denomination != null
arg0.playedBy has only one value
arg0.playedBy != null
arg0.playedBy.participatingInBattle == true
arg0.playedBy.nbrOfBattlesFought == 0
arg0.playedBy.nbrOfBattlesWon == 0
arg0.playedBy.strategy.getClass().getName() == org.washcom.cardgames.battleroyale.Player$1.class
arg0.playedBy.name has only one value
arg0.playedBy.name != null
arg0.playedBy.name.toString == "Joe"
arg0.playedBy.hand has only one value
arg0.playedBy.hand != null
arg1.card != null
arg1.card.suit != null
arg1.card.denomination != null
arg1.playedBy has only one value
arg1.playedBy != null
arg1.playedBy.participatingInBattle == true
arg1.playedBy.nbrOfBattlesFought == 0
arg1.playedBy.nbrOfBattlesWon == 0
arg1.playedBy.strategy has only one value
arg1.playedBy.strategy != null
arg1.playedBy.strategy.getClass().getName() == org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy.class
arg1.playedBy.name has only one value
arg1.playedBy.name != null
arg1.playedBy.name.toString == "Patrick"
arg1.playedBy.hand has only one value
arg1.playedBy.hand != null
arg2.card != null
arg2.card.suit != null
arg2.card.denomination != null
arg2.playedBy has only one value
arg2.playedBy != null
arg2.playedBy.participatingInBattle == true
arg2.playedBy.nbrOfBattlesFought == 0
arg2.playedBy.nbrOfBattlesWon == 0
arg2.playedBy.strategy.getClass().getName() == org.washcom.cardgames.battleroyale.Player$1.class
arg2.playedBy.name has only one value
arg2.playedBy.name != null
arg2.playedBy.name.toString == "Nolan"
arg2.playedBy.hand has only one value
arg2.playedBy.hand != null
return != null
return.card != null
return.card.suit != null
return.card.denomination != null
return.playedBy != null
return.playedBy.participatingInBattle == true
return.playedBy.nbrOfBattlesFought == 0
return.playedBy.nbrOfBattlesWon == 0
return.playedBy.name != null
return.playedBy.name.toString one of { "Joe", "Nolan", "Patrick" }
return.playedBy.hand != null
===========================================================================
org.washcom.cardgames.battleroyale.Rules.isAceTwoCombo(org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard):::ENTER
arg0 != null
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == 14
arg0.card != null
arg0.card.suit != null
arg0.card.denomination != null
arg0.playedBy != null
arg0.playedBy.participatingInBattle == true
arg0.playedBy.nbrOfBattlesFought == 0
arg0.playedBy.nbrOfBattlesWon == 0
arg0.playedBy.strategy != null
arg0.playedBy.name != null
arg0.playedBy.name.toString one of { "Joe", "Patrick" }
arg0.playedBy.hand != null
arg1 != null
arg1.card != null
arg1.card.suit != null
arg1.card.denomination != null
arg1.playedBy != null
arg1.playedBy.participatingInBattle == true
arg1.playedBy.nbrOfBattlesFought == 0
arg1.playedBy.nbrOfBattlesWon == 0
arg1.playedBy.name != null
arg1.playedBy.name.toString one of { "Nolan", "Patrick" }
arg1.playedBy.hand != null
===========================================================================
org.washcom.cardgames.battleroyale.Rules.isAceTwoCombo(org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard):::EXIT
org.washcom.cardgames.battleroyale.Rules.MAX_VALUE_DIFF_FEE == orig(org.washcom.cardgames.battleroyale.Rules.MAX_VALUE_DIFF_FEE)
org.washcom.cardgames.battleroyale.Rules.VALUE_DIFF_BATTLE_THRESHOLD == orig(org.washcom.cardgames.battleroyale.Rules.VALUE_DIFF_BATTLE_THRESHOLD)
org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees == orig(org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees)
org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees.getClass().getName() == orig(org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees.getClass().getName())
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == orig(org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE)
arg0.card == orig(arg0.card)
arg0.card.suit == orig(arg0.card.suit)
arg0.card.denomination == orig(arg0.card.denomination)
arg0.playedBy == orig(arg0.playedBy)
arg0.playedBy.participatingInBattle == orig(arg0.playedBy.participatingInBattle)
arg0.playedBy.nbrOfBattlesFought == orig(arg0.playedBy.nbrOfBattlesFought)
arg0.playedBy.nbrOfBattlesWon == orig(arg0.playedBy.nbrOfBattlesWon)
arg0.playedBy.strategy == orig(arg0.playedBy.strategy)
arg0.playedBy.strategy.getClass().getName() == orig(arg0.playedBy.strategy.getClass().getName())
arg0.playedBy.name == orig(arg0.playedBy.name)
arg0.playedBy.name.toString == orig(arg0.playedBy.name.toString)
arg0.playedBy.hand == orig(arg0.playedBy.hand)
arg1.card == orig(arg1.card)
arg1.card.suit == orig(arg1.card.suit)
arg1.card.denomination == orig(arg1.card.denomination)
arg1.playedBy == orig(arg1.playedBy)
arg1.playedBy.participatingInBattle == orig(arg1.playedBy.participatingInBattle)
arg1.playedBy.nbrOfBattlesFought == orig(arg1.playedBy.nbrOfBattlesFought)
arg1.playedBy.nbrOfBattlesWon == orig(arg1.playedBy.nbrOfBattlesWon)
arg1.playedBy.strategy == orig(arg1.playedBy.strategy)
arg1.playedBy.strategy.getClass().getName() == orig(arg1.playedBy.strategy.getClass().getName())
arg1.playedBy.name == orig(arg1.playedBy.name)
arg1.playedBy.name.toString == orig(arg1.playedBy.name.toString)
arg1.playedBy.hand == orig(arg1.playedBy.hand)
(return == true)  ==>  (arg1.card.suit has only one value)
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == 14
arg0.card != null
arg0.card.suit != null
arg0.card.denomination != null
arg0.playedBy != null
arg0.playedBy.participatingInBattle == true
arg0.playedBy.nbrOfBattlesFought == 0
arg0.playedBy.nbrOfBattlesWon == 0
arg0.playedBy.strategy != null
arg0.playedBy.name != null
arg0.playedBy.name.toString one of { "Joe", "Patrick" }
arg0.playedBy.hand != null
arg1.card != null
arg1.card.suit != null
arg1.card.denomination != null
arg1.playedBy != null
arg1.playedBy.participatingInBattle == true
arg1.playedBy.nbrOfBattlesFought == 0
arg1.playedBy.nbrOfBattlesWon == 0
arg1.playedBy.name != null
arg1.playedBy.name.toString one of { "Nolan", "Patrick" }
arg1.playedBy.hand != null
===========================================================================
org.washcom.cardgames.battleroyale.Rules.isAceTwoCombo(org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard):::EXIT;condition="return == true"
arg1.card.suit has only one value
return == true
===========================================================================
org.washcom.cardgames.battleroyale.Rules.isAceTwoCombo(org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.washcom.cardgames.battleroyale.Rules.isBattleRoyale(org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard):::ENTER
arg0 != null
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == 14
arg0.card != null
arg0.card.suit != null
arg0.card.denomination != null
arg0.playedBy != null
arg0.playedBy.participatingInBattle == true
arg0.playedBy.nbrOfBattlesFought == 0
arg0.playedBy.nbrOfBattlesWon == 0
arg0.playedBy.name != null
arg0.playedBy.name.toString one of { "Joe", "Patrick" }
arg0.playedBy.hand != null
arg1 != null
arg1.card != null
arg1.card.suit != null
arg1.card.denomination != null
arg1.playedBy != null
arg1.playedBy.participatingInBattle == true
arg1.playedBy.nbrOfBattlesFought == 0
arg1.playedBy.nbrOfBattlesWon == 0
arg1.playedBy.name != null
arg1.playedBy.name.toString one of { "Nolan", "Patrick" }
arg1.playedBy.hand != null
===========================================================================
org.washcom.cardgames.battleroyale.Rules.isBattleRoyale(org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard):::EXIT
org.washcom.cardgames.battleroyale.Rules.MAX_VALUE_DIFF_FEE == orig(org.washcom.cardgames.battleroyale.Rules.MAX_VALUE_DIFF_FEE)
org.washcom.cardgames.battleroyale.Rules.VALUE_DIFF_BATTLE_THRESHOLD == orig(org.washcom.cardgames.battleroyale.Rules.VALUE_DIFF_BATTLE_THRESHOLD)
org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees == orig(org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees)
org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees.getClass().getName() == orig(org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees.getClass().getName())
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == orig(org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE)
arg0.card == orig(arg0.card)
arg0.card.suit == orig(arg0.card.suit)
arg0.card.denomination == orig(arg0.card.denomination)
arg0.playedBy == orig(arg0.playedBy)
arg0.playedBy.participatingInBattle == orig(arg0.playedBy.participatingInBattle)
arg0.playedBy.nbrOfBattlesFought == orig(arg0.playedBy.nbrOfBattlesFought)
arg0.playedBy.nbrOfBattlesWon == orig(arg0.playedBy.nbrOfBattlesWon)
arg0.playedBy.strategy == orig(arg0.playedBy.strategy)
arg0.playedBy.strategy.getClass().getName() == orig(arg0.playedBy.strategy.getClass().getName())
arg0.playedBy.name == orig(arg0.playedBy.name)
arg0.playedBy.name.toString == orig(arg0.playedBy.name.toString)
arg0.playedBy.hand == orig(arg0.playedBy.hand)
arg1.card == orig(arg1.card)
arg1.card.suit == orig(arg1.card.suit)
arg1.card.denomination == orig(arg1.card.denomination)
arg1.playedBy == orig(arg1.playedBy)
arg1.playedBy.participatingInBattle == orig(arg1.playedBy.participatingInBattle)
arg1.playedBy.nbrOfBattlesFought == orig(arg1.playedBy.nbrOfBattlesFought)
arg1.playedBy.nbrOfBattlesWon == orig(arg1.playedBy.nbrOfBattlesWon)
arg1.playedBy.strategy == orig(arg1.playedBy.strategy)
arg1.playedBy.strategy.getClass().getName() == orig(arg1.playedBy.strategy.getClass().getName())
arg1.playedBy.name == orig(arg1.playedBy.name)
arg1.playedBy.name.toString == orig(arg1.playedBy.name.toString)
arg1.playedBy.hand == orig(arg1.playedBy.hand)
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == 14
arg0.card != null
arg0.card.suit != null
arg0.card.denomination != null
arg0.playedBy != null
arg0.playedBy.participatingInBattle == true
arg0.playedBy.nbrOfBattlesFought == 0
arg0.playedBy.nbrOfBattlesWon == 0
arg0.playedBy.name != null
arg0.playedBy.name.toString one of { "Joe", "Patrick" }
arg0.playedBy.hand != null
arg1.card != null
arg1.card.suit != null
arg1.card.denomination != null
arg1.playedBy != null
arg1.playedBy.participatingInBattle == true
arg1.playedBy.nbrOfBattlesFought == 0
arg1.playedBy.nbrOfBattlesWon == 0
arg1.playedBy.name != null
arg1.playedBy.name.toString one of { "Nolan", "Patrick" }
arg1.playedBy.hand != null
===========================================================================
org.washcom.cardgames.battleroyale.Rules.isBattleRoyale(org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard):::EXIT;condition="return == true"
return == true
===========================================================================
org.washcom.cardgames.battleroyale.Rules.isBattleRoyale(org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.washcom.cardgames.battleroyale.Rules.isDenominationCombo(org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination):::ENTER
arg0 != null
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == 14
arg0.card != null
arg0.card.suit != null
arg0.card.denomination != null
arg0.playedBy != null
arg0.playedBy.participatingInBattle == true
arg0.playedBy.nbrOfBattlesFought == 0
arg0.playedBy.nbrOfBattlesWon == 0
arg0.playedBy.name != null
arg0.playedBy.name.toString one of { "Joe", "Patrick" }
arg0.playedBy.hand != null
arg1 != null
arg1.card != null
arg1.card.suit != null
arg1.card.denomination != null
arg1.playedBy != null
arg1.playedBy.participatingInBattle == true
arg1.playedBy.nbrOfBattlesFought == 0
arg1.playedBy.nbrOfBattlesWon == 0
arg1.playedBy.name != null
arg1.playedBy.name.toString one of { "Nolan", "Patrick" }
arg1.playedBy.hand != null
arg2 != null
org.washcom.cardgames.core.Denomination.TWO has only one value
org.washcom.cardgames.core.Denomination.TWO != null
org.washcom.cardgames.core.Denomination.THREE has only one value
org.washcom.cardgames.core.Denomination.THREE != null
org.washcom.cardgames.core.Denomination.FOUR has only one value
org.washcom.cardgames.core.Denomination.FOUR != null
org.washcom.cardgames.core.Denomination.FIVE has only one value
org.washcom.cardgames.core.Denomination.FIVE != null
org.washcom.cardgames.core.Denomination.SIX has only one value
org.washcom.cardgames.core.Denomination.SIX != null
org.washcom.cardgames.core.Denomination.SEVEN has only one value
org.washcom.cardgames.core.Denomination.SEVEN != null
org.washcom.cardgames.core.Denomination.EIGHT has only one value
org.washcom.cardgames.core.Denomination.EIGHT != null
org.washcom.cardgames.core.Denomination.NINE has only one value
org.washcom.cardgames.core.Denomination.NINE != null
org.washcom.cardgames.core.Denomination.TEN has only one value
org.washcom.cardgames.core.Denomination.TEN != null
org.washcom.cardgames.core.Denomination.JACK has only one value
org.washcom.cardgames.core.Denomination.JACK != null
org.washcom.cardgames.core.Denomination.QUEEN has only one value
org.washcom.cardgames.core.Denomination.QUEEN != null
org.washcom.cardgames.core.Denomination.KING has only one value
org.washcom.cardgames.core.Denomination.KING != null
org.washcom.cardgames.core.Denomination.ACE has only one value
org.washcom.cardgames.core.Denomination.ACE != null
org.washcom.cardgames.core.Denomination.TWO.value has only one value
org.washcom.cardgames.core.Denomination.TWO.value != null
org.washcom.cardgames.core.Denomination.TWO.royalty == false
org.washcom.cardgames.core.Denomination.$VALUES has only one value
org.washcom.cardgames.core.Denomination.$VALUES != null
org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName() == org.washcom.cardgames.core.Denomination[].class
org.washcom.cardgames.core.Denomination.$VALUES[] contains no nulls and has only one value, of length 13
org.washcom.cardgames.core.Denomination.$VALUES[] elements != null
org.washcom.cardgames.core.Denomination.$VALUES[].getClass().getName() == [org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination]
org.washcom.cardgames.core.Denomination.$VALUES[].getClass().getName() elements == org.washcom.cardgames.core.Denomination.class
org.washcom.cardgames.core.Denomination.$VALUES[].value contains no nulls and has only one value, of length 13
org.washcom.cardgames.core.Denomination.$VALUES[].royalty == [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0]
org.washcom.cardgames.core.Denomination.THREE.value has only one value
org.washcom.cardgames.core.Denomination.THREE.value != null
org.washcom.cardgames.core.Denomination.THREE.royalty == false
org.washcom.cardgames.core.Denomination.FOUR.value has only one value
org.washcom.cardgames.core.Denomination.FOUR.value != null
org.washcom.cardgames.core.Denomination.FOUR.royalty == false
org.washcom.cardgames.core.Denomination.FIVE.value has only one value
org.washcom.cardgames.core.Denomination.FIVE.value != null
org.washcom.cardgames.core.Denomination.FIVE.royalty == false
org.washcom.cardgames.core.Denomination.SIX.value has only one value
org.washcom.cardgames.core.Denomination.SIX.value != null
org.washcom.cardgames.core.Denomination.SIX.royalty == false
org.washcom.cardgames.core.Denomination.SEVEN.value has only one value
org.washcom.cardgames.core.Denomination.SEVEN.value != null
org.washcom.cardgames.core.Denomination.SEVEN.royalty == false
org.washcom.cardgames.core.Denomination.EIGHT.value has only one value
org.washcom.cardgames.core.Denomination.EIGHT.value != null
org.washcom.cardgames.core.Denomination.EIGHT.royalty == false
org.washcom.cardgames.core.Denomination.NINE.value has only one value
org.washcom.cardgames.core.Denomination.NINE.value != null
org.washcom.cardgames.core.Denomination.NINE.royalty == false
org.washcom.cardgames.core.Denomination.TEN.value has only one value
org.washcom.cardgames.core.Denomination.TEN.value != null
org.washcom.cardgames.core.Denomination.TEN.royalty == false
org.washcom.cardgames.core.Denomination.JACK.value has only one value
org.washcom.cardgames.core.Denomination.JACK.value != null
org.washcom.cardgames.core.Denomination.JACK.royalty == true
org.washcom.cardgames.core.Denomination.QUEEN.value has only one value
org.washcom.cardgames.core.Denomination.QUEEN.value != null
org.washcom.cardgames.core.Denomination.QUEEN.royalty == true
org.washcom.cardgames.core.Denomination.KING.value has only one value
org.washcom.cardgames.core.Denomination.KING.value != null
org.washcom.cardgames.core.Denomination.KING.royalty == true
org.washcom.cardgames.core.Denomination.ACE.value has only one value
org.washcom.cardgames.core.Denomination.ACE.value != null
org.washcom.cardgames.core.Denomination.ACE.royalty == false
arg2.value != null
arg3 != null
arg3.value != null
arg3.royalty == false
size(org.washcom.cardgames.core.Denomination.$VALUES[]) == 13
===========================================================================
org.washcom.cardgames.battleroyale.Rules.isDenominationCombo(org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination):::EXIT
org.washcom.cardgames.battleroyale.Rules.MAX_VALUE_DIFF_FEE == orig(org.washcom.cardgames.battleroyale.Rules.MAX_VALUE_DIFF_FEE)
org.washcom.cardgames.battleroyale.Rules.VALUE_DIFF_BATTLE_THRESHOLD == orig(org.washcom.cardgames.battleroyale.Rules.VALUE_DIFF_BATTLE_THRESHOLD)
org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees == orig(org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees)
org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees.getClass().getName() == orig(org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees.getClass().getName())
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == orig(org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE)
arg0.card == orig(arg0.card)
arg0.card.suit == orig(arg0.card.suit)
arg0.card.denomination == orig(arg0.card.denomination)
arg0.playedBy == orig(arg0.playedBy)
arg0.playedBy.participatingInBattle == orig(arg0.playedBy.participatingInBattle)
arg0.playedBy.nbrOfBattlesFought == orig(arg0.playedBy.nbrOfBattlesFought)
arg0.playedBy.nbrOfBattlesWon == orig(arg0.playedBy.nbrOfBattlesWon)
arg0.playedBy.strategy == orig(arg0.playedBy.strategy)
arg0.playedBy.strategy.getClass().getName() == orig(arg0.playedBy.strategy.getClass().getName())
arg0.playedBy.name == orig(arg0.playedBy.name)
arg0.playedBy.name.toString == orig(arg0.playedBy.name.toString)
arg0.playedBy.hand == orig(arg0.playedBy.hand)
arg1.card == orig(arg1.card)
arg1.card.suit == orig(arg1.card.suit)
arg1.card.denomination == orig(arg1.card.denomination)
arg1.playedBy == orig(arg1.playedBy)
arg1.playedBy.participatingInBattle == orig(arg1.playedBy.participatingInBattle)
arg1.playedBy.nbrOfBattlesFought == orig(arg1.playedBy.nbrOfBattlesFought)
arg1.playedBy.nbrOfBattlesWon == orig(arg1.playedBy.nbrOfBattlesWon)
arg1.playedBy.strategy == orig(arg1.playedBy.strategy)
arg1.playedBy.strategy.getClass().getName() == orig(arg1.playedBy.strategy.getClass().getName())
arg1.playedBy.name == orig(arg1.playedBy.name)
arg1.playedBy.name.toString == orig(arg1.playedBy.name.toString)
arg1.playedBy.hand == orig(arg1.playedBy.hand)
org.washcom.cardgames.core.Denomination.TWO == orig(org.washcom.cardgames.core.Denomination.TWO)
org.washcom.cardgames.core.Denomination.THREE == orig(org.washcom.cardgames.core.Denomination.THREE)
org.washcom.cardgames.core.Denomination.FOUR == orig(org.washcom.cardgames.core.Denomination.FOUR)
org.washcom.cardgames.core.Denomination.FIVE == orig(org.washcom.cardgames.core.Denomination.FIVE)
org.washcom.cardgames.core.Denomination.SIX == orig(org.washcom.cardgames.core.Denomination.SIX)
org.washcom.cardgames.core.Denomination.SEVEN == orig(org.washcom.cardgames.core.Denomination.SEVEN)
org.washcom.cardgames.core.Denomination.EIGHT == orig(org.washcom.cardgames.core.Denomination.EIGHT)
org.washcom.cardgames.core.Denomination.NINE == orig(org.washcom.cardgames.core.Denomination.NINE)
org.washcom.cardgames.core.Denomination.TEN == orig(org.washcom.cardgames.core.Denomination.TEN)
org.washcom.cardgames.core.Denomination.JACK == orig(org.washcom.cardgames.core.Denomination.JACK)
org.washcom.cardgames.core.Denomination.QUEEN == orig(org.washcom.cardgames.core.Denomination.QUEEN)
org.washcom.cardgames.core.Denomination.KING == orig(org.washcom.cardgames.core.Denomination.KING)
org.washcom.cardgames.core.Denomination.ACE == orig(org.washcom.cardgames.core.Denomination.ACE)
org.washcom.cardgames.core.Denomination.TWO.value == orig(org.washcom.cardgames.core.Denomination.TWO.value)
org.washcom.cardgames.core.Denomination.TWO.royalty == orig(org.washcom.cardgames.core.Denomination.TWO.royalty)
org.washcom.cardgames.core.Denomination.$VALUES == orig(org.washcom.cardgames.core.Denomination.$VALUES)
org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName())
org.washcom.cardgames.core.Denomination.$VALUES[] == orig(org.washcom.cardgames.core.Denomination.$VALUES[])
org.washcom.cardgames.core.Denomination.$VALUES[].value == orig(org.washcom.cardgames.core.Denomination.$VALUES[].value)
org.washcom.cardgames.core.Denomination.$VALUES[].royalty == orig(org.washcom.cardgames.core.Denomination.$VALUES[].royalty)
org.washcom.cardgames.core.Denomination.THREE.value == orig(org.washcom.cardgames.core.Denomination.THREE.value)
org.washcom.cardgames.core.Denomination.THREE.royalty == orig(org.washcom.cardgames.core.Denomination.THREE.royalty)
org.washcom.cardgames.core.Denomination.FOUR.value == orig(org.washcom.cardgames.core.Denomination.FOUR.value)
org.washcom.cardgames.core.Denomination.FOUR.royalty == orig(org.washcom.cardgames.core.Denomination.FOUR.royalty)
org.washcom.cardgames.core.Denomination.FIVE.value == orig(org.washcom.cardgames.core.Denomination.FIVE.value)
org.washcom.cardgames.core.Denomination.FIVE.royalty == orig(org.washcom.cardgames.core.Denomination.FIVE.royalty)
org.washcom.cardgames.core.Denomination.SIX.value == orig(org.washcom.cardgames.core.Denomination.SIX.value)
org.washcom.cardgames.core.Denomination.SIX.royalty == orig(org.washcom.cardgames.core.Denomination.SIX.royalty)
org.washcom.cardgames.core.Denomination.SEVEN.value == orig(org.washcom.cardgames.core.Denomination.SEVEN.value)
org.washcom.cardgames.core.Denomination.SEVEN.royalty == orig(org.washcom.cardgames.core.Denomination.SEVEN.royalty)
org.washcom.cardgames.core.Denomination.EIGHT.value == orig(org.washcom.cardgames.core.Denomination.EIGHT.value)
org.washcom.cardgames.core.Denomination.EIGHT.royalty == orig(org.washcom.cardgames.core.Denomination.EIGHT.royalty)
org.washcom.cardgames.core.Denomination.NINE.value == orig(org.washcom.cardgames.core.Denomination.NINE.value)
org.washcom.cardgames.core.Denomination.NINE.royalty == orig(org.washcom.cardgames.core.Denomination.NINE.royalty)
org.washcom.cardgames.core.Denomination.TEN.value == orig(org.washcom.cardgames.core.Denomination.TEN.value)
org.washcom.cardgames.core.Denomination.TEN.royalty == orig(org.washcom.cardgames.core.Denomination.TEN.royalty)
org.washcom.cardgames.core.Denomination.JACK.value == orig(org.washcom.cardgames.core.Denomination.JACK.value)
org.washcom.cardgames.core.Denomination.JACK.royalty == orig(org.washcom.cardgames.core.Denomination.JACK.royalty)
org.washcom.cardgames.core.Denomination.QUEEN.value == orig(org.washcom.cardgames.core.Denomination.QUEEN.value)
org.washcom.cardgames.core.Denomination.QUEEN.royalty == orig(org.washcom.cardgames.core.Denomination.QUEEN.royalty)
org.washcom.cardgames.core.Denomination.KING.value == orig(org.washcom.cardgames.core.Denomination.KING.value)
org.washcom.cardgames.core.Denomination.KING.royalty == orig(org.washcom.cardgames.core.Denomination.KING.royalty)
org.washcom.cardgames.core.Denomination.ACE.value == orig(org.washcom.cardgames.core.Denomination.ACE.value)
org.washcom.cardgames.core.Denomination.ACE.royalty == orig(org.washcom.cardgames.core.Denomination.ACE.royalty)
arg2.value == orig(arg2.value)
arg2.royalty == orig(arg2.royalty)
arg3.value == orig(arg3.value)
arg3.royalty == orig(arg3.royalty)
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == 14
arg0.card != null
arg0.card.suit != null
arg0.card.denomination != null
arg0.playedBy != null
arg0.playedBy.participatingInBattle == true
arg0.playedBy.nbrOfBattlesFought == 0
arg0.playedBy.nbrOfBattlesWon == 0
arg0.playedBy.name != null
arg0.playedBy.name.toString one of { "Joe", "Patrick" }
arg0.playedBy.hand != null
arg1.card != null
arg1.card.suit != null
arg1.card.denomination != null
arg1.playedBy != null
arg1.playedBy.participatingInBattle == true
arg1.playedBy.nbrOfBattlesFought == 0
arg1.playedBy.nbrOfBattlesWon == 0
arg1.playedBy.name != null
arg1.playedBy.name.toString one of { "Nolan", "Patrick" }
arg1.playedBy.hand != null
org.washcom.cardgames.core.Denomination.TWO has only one value
org.washcom.cardgames.core.Denomination.TWO != null
org.washcom.cardgames.core.Denomination.THREE has only one value
org.washcom.cardgames.core.Denomination.THREE != null
org.washcom.cardgames.core.Denomination.FOUR has only one value
org.washcom.cardgames.core.Denomination.FOUR != null
org.washcom.cardgames.core.Denomination.FIVE has only one value
org.washcom.cardgames.core.Denomination.FIVE != null
org.washcom.cardgames.core.Denomination.SIX has only one value
org.washcom.cardgames.core.Denomination.SIX != null
org.washcom.cardgames.core.Denomination.SEVEN has only one value
org.washcom.cardgames.core.Denomination.SEVEN != null
org.washcom.cardgames.core.Denomination.EIGHT has only one value
org.washcom.cardgames.core.Denomination.EIGHT != null
org.washcom.cardgames.core.Denomination.NINE has only one value
org.washcom.cardgames.core.Denomination.NINE != null
org.washcom.cardgames.core.Denomination.TEN has only one value
org.washcom.cardgames.core.Denomination.TEN != null
org.washcom.cardgames.core.Denomination.JACK has only one value
org.washcom.cardgames.core.Denomination.JACK != null
org.washcom.cardgames.core.Denomination.QUEEN has only one value
org.washcom.cardgames.core.Denomination.QUEEN != null
org.washcom.cardgames.core.Denomination.KING has only one value
org.washcom.cardgames.core.Denomination.KING != null
org.washcom.cardgames.core.Denomination.ACE has only one value
org.washcom.cardgames.core.Denomination.ACE != null
org.washcom.cardgames.core.Denomination.TWO.value has only one value
org.washcom.cardgames.core.Denomination.TWO.value != null
org.washcom.cardgames.core.Denomination.TWO.royalty == false
org.washcom.cardgames.core.Denomination.$VALUES has only one value
org.washcom.cardgames.core.Denomination.$VALUES != null
org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName() == org.washcom.cardgames.core.Denomination[].class
org.washcom.cardgames.core.Denomination.$VALUES[] contains no nulls and has only one value, of length 13
org.washcom.cardgames.core.Denomination.$VALUES[] elements != null
org.washcom.cardgames.core.Denomination.$VALUES[].getClass().getName() == [org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination]
org.washcom.cardgames.core.Denomination.$VALUES[].getClass().getName() elements == org.washcom.cardgames.core.Denomination.class
org.washcom.cardgames.core.Denomination.$VALUES[].value contains no nulls and has only one value, of length 13
org.washcom.cardgames.core.Denomination.$VALUES[].royalty == [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0]
org.washcom.cardgames.core.Denomination.THREE.value has only one value
org.washcom.cardgames.core.Denomination.THREE.value != null
org.washcom.cardgames.core.Denomination.THREE.royalty == false
org.washcom.cardgames.core.Denomination.FOUR.value has only one value
org.washcom.cardgames.core.Denomination.FOUR.value != null
org.washcom.cardgames.core.Denomination.FOUR.royalty == false
org.washcom.cardgames.core.Denomination.FIVE.value has only one value
org.washcom.cardgames.core.Denomination.FIVE.value != null
org.washcom.cardgames.core.Denomination.FIVE.royalty == false
org.washcom.cardgames.core.Denomination.SIX.value has only one value
org.washcom.cardgames.core.Denomination.SIX.value != null
org.washcom.cardgames.core.Denomination.SIX.royalty == false
org.washcom.cardgames.core.Denomination.SEVEN.value has only one value
org.washcom.cardgames.core.Denomination.SEVEN.value != null
org.washcom.cardgames.core.Denomination.SEVEN.royalty == false
org.washcom.cardgames.core.Denomination.EIGHT.value has only one value
org.washcom.cardgames.core.Denomination.EIGHT.value != null
org.washcom.cardgames.core.Denomination.EIGHT.royalty == false
org.washcom.cardgames.core.Denomination.NINE.value has only one value
org.washcom.cardgames.core.Denomination.NINE.value != null
org.washcom.cardgames.core.Denomination.NINE.royalty == false
org.washcom.cardgames.core.Denomination.TEN.value has only one value
org.washcom.cardgames.core.Denomination.TEN.value != null
org.washcom.cardgames.core.Denomination.TEN.royalty == false
org.washcom.cardgames.core.Denomination.JACK.value has only one value
org.washcom.cardgames.core.Denomination.JACK.value != null
org.washcom.cardgames.core.Denomination.JACK.royalty == true
org.washcom.cardgames.core.Denomination.QUEEN.value has only one value
org.washcom.cardgames.core.Denomination.QUEEN.value != null
org.washcom.cardgames.core.Denomination.QUEEN.royalty == true
org.washcom.cardgames.core.Denomination.KING.value has only one value
org.washcom.cardgames.core.Denomination.KING.value != null
org.washcom.cardgames.core.Denomination.KING.royalty == true
org.washcom.cardgames.core.Denomination.ACE.value has only one value
org.washcom.cardgames.core.Denomination.ACE.value != null
org.washcom.cardgames.core.Denomination.ACE.royalty == false
arg2.value != null
arg3.value != null
arg3.royalty == false
size(org.washcom.cardgames.core.Denomination.$VALUES[]) == 13
===========================================================================
org.washcom.cardgames.battleroyale.Rules.isDenominationCombo(org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination):::EXIT;condition="return == true"
return == true
===========================================================================
org.washcom.cardgames.battleroyale.Rules.isDenominationCombo(org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.washcom.cardgames.battleroyale.Rules.isDifferentialUnderBattleThreshold(int):::ENTER
===========================================================================
org.washcom.cardgames.battleroyale.Rules.isDifferentialUnderBattleThreshold(int):::EXIT
org.washcom.cardgames.battleroyale.Rules.MAX_VALUE_DIFF_FEE == orig(org.washcom.cardgames.battleroyale.Rules.MAX_VALUE_DIFF_FEE)
org.washcom.cardgames.battleroyale.Rules.VALUE_DIFF_BATTLE_THRESHOLD == orig(org.washcom.cardgames.battleroyale.Rules.VALUE_DIFF_BATTLE_THRESHOLD)
org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees == orig(org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees)
org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees.getClass().getName() == orig(org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees.getClass().getName())
(return == false)  ==>  (orig(arg0) != 0)
(return == true)  ==>  (orig(arg0) <= 2)
===========================================================================
org.washcom.cardgames.battleroyale.Rules.isDifferentialUnderBattleThreshold(int):::EXIT;condition="return == true"
return == true
orig(arg0) <= 2
===========================================================================
org.washcom.cardgames.battleroyale.Rules.isDifferentialUnderBattleThreshold(int):::EXIT;condition="not(return == true)"
return == false
orig(arg0) != 0
===========================================================================
org.washcom.cardgames.battleroyale.Rules.isJackEightCombo(org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard):::ENTER
arg0 != null
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == 14
arg0.card != null
arg0.card.suit != null
arg0.card.denomination != null
arg0.playedBy != null
arg0.playedBy.participatingInBattle == true
arg0.playedBy.nbrOfBattlesFought == 0
arg0.playedBy.nbrOfBattlesWon == 0
arg0.playedBy.name != null
arg0.playedBy.name.toString one of { "Joe", "Patrick" }
arg0.playedBy.hand != null
arg1 != null
arg1.card != null
arg1.card.suit != null
arg1.card.denomination != null
arg1.playedBy != null
arg1.playedBy.participatingInBattle == true
arg1.playedBy.nbrOfBattlesFought == 0
arg1.playedBy.nbrOfBattlesWon == 0
arg1.playedBy.name != null
arg1.playedBy.name.toString one of { "Nolan", "Patrick" }
arg1.playedBy.hand != null
===========================================================================
org.washcom.cardgames.battleroyale.Rules.isJackEightCombo(org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard):::EXIT
org.washcom.cardgames.battleroyale.Rules.MAX_VALUE_DIFF_FEE == orig(org.washcom.cardgames.battleroyale.Rules.MAX_VALUE_DIFF_FEE)
org.washcom.cardgames.battleroyale.Rules.VALUE_DIFF_BATTLE_THRESHOLD == orig(org.washcom.cardgames.battleroyale.Rules.VALUE_DIFF_BATTLE_THRESHOLD)
org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees == orig(org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees)
org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees.getClass().getName() == orig(org.washcom.cardgames.battleroyale.Rules.battleRoyaleFees.getClass().getName())
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == orig(org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE)
arg0.card == orig(arg0.card)
arg0.card.suit == orig(arg0.card.suit)
arg0.card.denomination == orig(arg0.card.denomination)
arg0.playedBy == orig(arg0.playedBy)
arg0.playedBy.participatingInBattle == orig(arg0.playedBy.participatingInBattle)
arg0.playedBy.nbrOfBattlesFought == orig(arg0.playedBy.nbrOfBattlesFought)
arg0.playedBy.nbrOfBattlesWon == orig(arg0.playedBy.nbrOfBattlesWon)
arg0.playedBy.strategy == orig(arg0.playedBy.strategy)
arg0.playedBy.strategy.getClass().getName() == orig(arg0.playedBy.strategy.getClass().getName())
arg0.playedBy.name == orig(arg0.playedBy.name)
arg0.playedBy.name.toString == orig(arg0.playedBy.name.toString)
arg0.playedBy.hand == orig(arg0.playedBy.hand)
arg1.card == orig(arg1.card)
arg1.card.suit == orig(arg1.card.suit)
arg1.card.denomination == orig(arg1.card.denomination)
arg1.playedBy == orig(arg1.playedBy)
arg1.playedBy.participatingInBattle == orig(arg1.playedBy.participatingInBattle)
arg1.playedBy.nbrOfBattlesFought == orig(arg1.playedBy.nbrOfBattlesFought)
arg1.playedBy.nbrOfBattlesWon == orig(arg1.playedBy.nbrOfBattlesWon)
arg1.playedBy.strategy == orig(arg1.playedBy.strategy)
arg1.playedBy.strategy.getClass().getName() == orig(arg1.playedBy.strategy.getClass().getName())
arg1.playedBy.name == orig(arg1.playedBy.name)
arg1.playedBy.name.toString == orig(arg1.playedBy.name.toString)
arg1.playedBy.hand == orig(arg1.playedBy.hand)
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == 14
arg0.card != null
arg0.card.suit != null
arg0.card.denomination != null
arg0.playedBy != null
arg0.playedBy.participatingInBattle == true
arg0.playedBy.nbrOfBattlesFought == 0
arg0.playedBy.nbrOfBattlesWon == 0
arg0.playedBy.name != null
arg0.playedBy.name.toString one of { "Joe", "Patrick" }
arg0.playedBy.hand != null
arg1.card != null
arg1.card.suit != null
arg1.card.denomination != null
arg1.playedBy != null
arg1.playedBy.participatingInBattle == true
arg1.playedBy.nbrOfBattlesFought == 0
arg1.playedBy.nbrOfBattlesWon == 0
arg1.playedBy.name != null
arg1.playedBy.name.toString one of { "Nolan", "Patrick" }
arg1.playedBy.hand != null
===========================================================================
org.washcom.cardgames.battleroyale.Rules.isJackEightCombo(org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard):::EXIT;condition="return == true"
return == true
===========================================================================
org.washcom.cardgames.battleroyale.Rules.isJackEightCombo(org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor:::CLASS
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.log has only one value
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.log != null
===========================================================================
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor:::OBJECT
===========================================================================
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.ThreeBattlerAssessor():::EXIT
===========================================================================
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.checkBattlers(java.util.List):::ENTER
arg0 != null
arg0[] contains no nulls and has only one value, of length 3
arg0[] elements != null
arg0[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg0[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.getClass().getName() == java.util.ArrayList.class
size(arg0[]) == 3
===========================================================================
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.checkBattlers(java.util.List):::EXIT
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.log == orig(org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.log)
arg0[] == orig(arg0[])
arg0[] contains no nulls and has only one value, of length 3
arg0[] elements != null
arg0[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg0[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
===========================================================================
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.determineFees(org.washcom.cardgames.battleroyale.Battle):::ENTER
arg0.battleCards.getClass().getName() == arg0.battlers.getClass().getName()
arg0 != null
org.washcom.cardgames.battleroyale.Battle.log has only one value
org.washcom.cardgames.battleroyale.Battle.log != null
arg0.number >= 1
arg0.game != null
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log != null
arg0.game.assessor != null
arg0.game.assessor.getClass().getName() == org.washcom.cardgames.battleroyale.DefaultBattleAccessor.class
arg0.game.players != null
arg0.game.players[] contains no nulls and has only one value, of length 3
arg0.game.players[] elements != null
arg0.game.players[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg0.game.players[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.game.players.getClass().getName() == java.util.Arrays$ArrayList.class
arg0.game.gameCards != null
arg0.game.currentRoundNumber >= 1
arg0.game.currentBattle != null
arg0.game.winner == null
arg0.game.swapHandsRuleEnabled == true
arg0.game.swappedHandsCount >= 0
arg0.game.unresolvedBattleCount >= 0
arg0.game.battlesByNbrOfContinuations != null
arg0.game.battlesByNbrOfContinuations.getClass().getName() == java.util.HashMap.class
arg0.battleCards != null
arg0.battleCards[] elements != null
arg0.battleCards[].getClass().getName() == [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard]
arg0.battleCards[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
arg0.battleCards.getClass().getName() == java.util.ArrayList.class
arg0.battlers != null
arg0.battlers[] contains no nulls and has only one value, of length 3
arg0.battlers[] elements != null
arg0.battlers[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg0.battlers[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.continuations >= 0
size(arg0.game.players[]) == 3
size(arg0.battleCards[]) == 3
size(arg0.battlers[]) == 3
arg0.game.assessor.getClass().getName() != arg0.game.players.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.game.battlesByNbrOfContinuations.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.players.getClass().getName() != arg0.game.battlesByNbrOfContinuations.getClass().getName()
arg0.game.players.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.battlesByNbrOfContinuations.getClass().getName() != arg0.battleCards.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.determineFees(org.washcom.cardgames.battleroyale.Battle):::EXIT114
===========================================================================
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.determineFees(org.washcom.cardgames.battleroyale.Battle):::EXIT99
===========================================================================
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.determineFees(org.washcom.cardgames.battleroyale.Battle):::EXIT
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.log == orig(org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.log)
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
arg0.number == orig(arg0.number)
arg0.game == orig(arg0.game)
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
arg0.game.assessor == orig(arg0.game.assessor)
arg0.game.assessor.getClass().getName() == orig(arg0.game.assessor.getClass().getName())
arg0.game.players == orig(arg0.game.players)
arg0.game.players[] == orig(arg0.game.players[])
arg0.game.players.getClass().getName() == orig(arg0.game.players.getClass().getName())
arg0.game.gameCards == orig(arg0.game.gameCards)
arg0.game.currentRoundNumber == orig(arg0.game.currentRoundNumber)
arg0.game.currentBattle == orig(arg0.game.currentBattle)
arg0.game.winner == orig(arg0.game.winner)
arg0.game.swapHandsRuleEnabled == orig(arg0.game.swapHandsRuleEnabled)
arg0.game.swappedHandsCount == orig(arg0.game.swappedHandsCount)
arg0.game.unresolvedBattleCount == orig(arg0.game.unresolvedBattleCount)
arg0.game.battlesByNbrOfContinuations == orig(arg0.game.battlesByNbrOfContinuations)
arg0.game.battlesByNbrOfContinuations.getClass().getName() == return.getClass().getName()
arg0.battleCards == orig(arg0.battleCards)
arg0.battleCards[] == orig(arg0.battleCards[])
arg0.battleCards.getClass().getName() == arg0.battlers.getClass().getName()
arg0.battleCards.getClass().getName() == orig(arg0.battleCards.getClass().getName())
arg0.battleCards.getClass().getName() == orig(arg0.battlers.getClass().getName())
arg0.battlers == orig(arg0.battlers)
arg0.battlers[] == orig(arg0.battlers[])
arg0.continuations == orig(arg0.continuations)
return.getClass().getName() == orig(arg0.game.battlesByNbrOfContinuations.getClass().getName())
org.washcom.cardgames.battleroyale.Battle.log has only one value
org.washcom.cardgames.battleroyale.Battle.log != null
arg0.number >= 1
arg0.game != null
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log != null
arg0.game.assessor != null
arg0.game.assessor.getClass().getName() == org.washcom.cardgames.battleroyale.DefaultBattleAccessor.class
arg0.game.players != null
arg0.game.players[] contains no nulls and has only one value, of length 3
arg0.game.players[] elements != null
arg0.game.players[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg0.game.players[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.game.players.getClass().getName() == java.util.Arrays$ArrayList.class
arg0.game.gameCards != null
arg0.game.currentRoundNumber >= 1
arg0.game.currentBattle != null
arg0.game.winner == null
arg0.game.swapHandsRuleEnabled == true
arg0.game.swappedHandsCount >= 0
arg0.game.unresolvedBattleCount >= 0
arg0.game.battlesByNbrOfContinuations != null
arg0.battleCards != null
arg0.battleCards[] elements != null
arg0.battleCards[].getClass().getName() == [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard]
arg0.battleCards[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
arg0.battleCards.getClass().getName() == java.util.ArrayList.class
arg0.battlers != null
arg0.battlers[] contains no nulls and has only one value, of length 3
arg0.battlers[] elements != null
arg0.battlers[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg0.battlers[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.continuations >= 0
return != null
return.getClass().getName() == java.util.HashMap.class
size(arg0.game.players[]) == 3
size(arg0.battleCards[]) == 3
size(arg0.battlers[]) == 3
arg0.game.assessor.getClass().getName() != arg0.game.players.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.assessor.getClass().getName() != return.getClass().getName()
arg0.game.players.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.players.getClass().getName() != return.getClass().getName()
arg0.battleCards.getClass().getName() != return.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.pickWinner(org.washcom.cardgames.battleroyale.Battle):::ENTER
arg0.battleCards.getClass().getName() == arg0.battlers.getClass().getName()
arg0 != null
org.washcom.cardgames.battleroyale.Battle.log has only one value
org.washcom.cardgames.battleroyale.Battle.log != null
arg0.number >= 1
arg0.game != null
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log != null
arg0.game.assessor != null
arg0.game.assessor.getClass().getName() == org.washcom.cardgames.battleroyale.DefaultBattleAccessor.class
arg0.game.players != null
arg0.game.players[] contains no nulls and has only one value, of length 3
arg0.game.players[] elements != null
arg0.game.players[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg0.game.players[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.game.players.getClass().getName() == java.util.Arrays$ArrayList.class
arg0.game.gameCards != null
arg0.game.currentRoundNumber >= 1
arg0.game.currentBattle != null
arg0.game.winner == null
arg0.game.swapHandsRuleEnabled == true
arg0.game.swappedHandsCount >= 0
arg0.game.unresolvedBattleCount >= 0
arg0.game.battlesByNbrOfContinuations != null
arg0.game.battlesByNbrOfContinuations.getClass().getName() == java.util.HashMap.class
arg0.battleCards != null
arg0.battleCards[] elements != null
arg0.battleCards[].getClass().getName() == [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard]
arg0.battleCards[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
arg0.battleCards.getClass().getName() == java.util.ArrayList.class
arg0.battlers != null
arg0.battlers[] contains no nulls and has only one value, of length 3
arg0.battlers[] elements != null
arg0.battlers[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg0.battlers[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.continuations >= 0
size(arg0.game.players[]) == 3
size(arg0.battleCards[]) == 3
size(arg0.battlers[]) == 3
arg0.game.assessor.getClass().getName() != arg0.game.players.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.game.battlesByNbrOfContinuations.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.players.getClass().getName() != arg0.game.battlesByNbrOfContinuations.getClass().getName()
arg0.game.players.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.battlesByNbrOfContinuations.getClass().getName() != arg0.battleCards.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.pickWinner(org.washcom.cardgames.battleroyale.Battle):::EXIT47
return == null
===========================================================================
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.pickWinner(org.washcom.cardgames.battleroyale.Battle):::EXIT60
return == null
===========================================================================
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.pickWinner(org.washcom.cardgames.battleroyale.Battle):::EXIT69
arg0.game.swappedHandsCount == orig(arg0.game.swappedHandsCount)
arg0.number one of { 2, 28 }
arg0.game.currentRoundNumber one of { 2, 28 }
arg0.game.swappedHandsCount one of { 0, 2 }
arg0.game.unresolvedBattleCount one of { 0, 2 }
arg0.continuations one of { 0, 1 }
return.card.suit has only one value
return.card.denomination has only one value
return.playedBy has only one value
return.playedBy.strategy.getClass().getName() == org.washcom.cardgames.battleroyale.Player$1.class
return.playedBy.name has only one value
return.playedBy.name.toString == "Joe"
return.playedBy.hand has only one value
===========================================================================
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.pickWinner(org.washcom.cardgames.battleroyale.Battle):::EXIT71
arg0.game.swappedHandsCount == orig(arg0.game.swappedHandsCount)
arg0.number == 1
arg0.game.currentRoundNumber == 1
arg0.game.swappedHandsCount == 0
arg0.game.unresolvedBattleCount == 0
arg0.continuations one of { 0, 2 }
return.card.denomination has only one value
return.playedBy has only one value
return.playedBy.strategy has only one value
return.playedBy.strategy.getClass().getName() == org.washcom.cardgames.battleroyale.OptimalSecondChanceStrategy.class
return.playedBy.name has only one value
return.playedBy.name.toString == "Patrick"
return.playedBy.hand has only one value
===========================================================================
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.pickWinner(org.washcom.cardgames.battleroyale.Battle):::EXIT73
arg0.game.swappedHandsCount == orig(arg0.game.swappedHandsCount)
arg0.number == 1
arg0.game has only one value
arg0.game.assessor has only one value
arg0.game.players has only one value
arg0.game.gameCards has only one value
arg0.game.currentRoundNumber == 1
arg0.game.currentBattle has only one value
arg0.game.swappedHandsCount == 0
arg0.game.unresolvedBattleCount == 0
arg0.game.battlesByNbrOfContinuations has only one value
arg0.battleCards has only one value
arg0.battleCards[] contains no nulls and has only one value, of length 3
arg0.battlers has only one value
arg0.continuations == 3
return has only one value
return.card has only one value
return.card.suit has only one value
return.card.denomination has only one value
return.playedBy has only one value
return.playedBy.strategy has only one value
return.playedBy.strategy.getClass().getName() == org.washcom.cardgames.battleroyale.Player$1.class
return.playedBy.name has only one value
return.playedBy.name.toString == "Nolan"
return.playedBy.hand has only one value
orig(this) has only one value
orig(arg0) has only one value
===========================================================================
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.pickWinner(org.washcom.cardgames.battleroyale.Battle):::EXIT76
return != null
===========================================================================
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.pickWinner(org.washcom.cardgames.battleroyale.Battle):::EXIT
org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.log == orig(org.washcom.cardgames.battleroyale.ThreeBattlerAssessor.log)
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
arg0.number == orig(arg0.number)
arg0.game == orig(arg0.game)
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
arg0.game.assessor == orig(arg0.game.assessor)
arg0.game.assessor.getClass().getName() == orig(arg0.game.assessor.getClass().getName())
arg0.game.players == orig(arg0.game.players)
arg0.game.players[] == orig(arg0.game.players[])
arg0.game.players.getClass().getName() == orig(arg0.game.players.getClass().getName())
arg0.game.gameCards == orig(arg0.game.gameCards)
arg0.game.currentRoundNumber == orig(arg0.game.currentRoundNumber)
arg0.game.currentBattle == orig(arg0.game.currentBattle)
arg0.game.winner == orig(arg0.game.winner)
arg0.game.swapHandsRuleEnabled == orig(arg0.game.swapHandsRuleEnabled)
arg0.game.unresolvedBattleCount == orig(arg0.game.unresolvedBattleCount)
arg0.game.battlesByNbrOfContinuations == orig(arg0.game.battlesByNbrOfContinuations)
arg0.game.battlesByNbrOfContinuations.getClass().getName() == orig(arg0.game.battlesByNbrOfContinuations.getClass().getName())
arg0.battleCards == orig(arg0.battleCards)
arg0.battleCards[] == orig(arg0.battleCards[])
arg0.battleCards.getClass().getName() == arg0.battlers.getClass().getName()
arg0.battleCards.getClass().getName() == orig(arg0.battleCards.getClass().getName())
arg0.battleCards.getClass().getName() == orig(arg0.battlers.getClass().getName())
arg0.battlers == orig(arg0.battlers)
arg0.battlers[] == orig(arg0.battlers[])
arg0.continuations == orig(arg0.continuations)
org.washcom.cardgames.battleroyale.Battle.log has only one value
org.washcom.cardgames.battleroyale.Battle.log != null
arg0.number >= 1
arg0.game != null
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log != null
arg0.game.assessor != null
arg0.game.assessor.getClass().getName() == org.washcom.cardgames.battleroyale.DefaultBattleAccessor.class
arg0.game.players != null
arg0.game.players[] contains no nulls and has only one value, of length 3
arg0.game.players[] elements != null
arg0.game.players[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg0.game.players[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.game.players.getClass().getName() == java.util.Arrays$ArrayList.class
arg0.game.gameCards != null
arg0.game.currentRoundNumber >= 1
arg0.game.currentBattle != null
arg0.game.winner == null
arg0.game.swapHandsRuleEnabled == true
arg0.game.swappedHandsCount >= 0
arg0.game.unresolvedBattleCount >= 0
arg0.game.battlesByNbrOfContinuations != null
arg0.game.battlesByNbrOfContinuations.getClass().getName() == java.util.HashMap.class
arg0.battleCards != null
arg0.battleCards[] elements != null
arg0.battleCards[].getClass().getName() == [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard]
arg0.battleCards[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
arg0.battleCards.getClass().getName() == java.util.ArrayList.class
arg0.battlers != null
arg0.battlers[] contains no nulls and has only one value, of length 3
arg0.battlers[] elements != null
arg0.battlers[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg0.battlers[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.continuations >= 0
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == 14
return.card != null
return.card.suit != null
return.card.denomination != null
return.playedBy != null
return.playedBy.participatingInBattle == true
return.playedBy.nbrOfBattlesFought == 0
return.playedBy.nbrOfBattlesWon == 0
return.playedBy.name != null
return.playedBy.name.toString one of { "Joe", "Nolan", "Patrick" }
return.playedBy.hand != null
size(arg0.game.players[]) == 3
size(arg0.battleCards[]) == 3
size(arg0.battlers[]) == 3
arg0.game.assessor.getClass().getName() != arg0.game.players.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.game.battlesByNbrOfContinuations.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.assessor.getClass().getName() != return.playedBy.strategy.getClass().getName()
arg0.game.players.getClass().getName() != arg0.game.battlesByNbrOfContinuations.getClass().getName()
arg0.game.players.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.players.getClass().getName() != return.playedBy.strategy.getClass().getName()
arg0.game.swappedHandsCount >= orig(arg0.game.swappedHandsCount)
arg0.game.battlesByNbrOfContinuations.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.battlesByNbrOfContinuations.getClass().getName() != return.playedBy.strategy.getClass().getName()
arg0.battleCards.getClass().getName() != return.playedBy.strategy.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.TwoBattlerAssessor$1:::OBJECT
this has only one value
===========================================================================
org.washcom.cardgames.battleroyale.TwoBattlerAssessor$1.():::EXIT
===========================================================================
org.washcom.cardgames.battleroyale.TwoBattlerAssessor:::CLASS
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.log has only one value
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.log != null
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees has only one value
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees != null
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() == org.washcom.cardgames.battleroyale.TwoBattlerAssessor$1.class
===========================================================================
org.washcom.cardgames.battleroyale.TwoBattlerAssessor:::OBJECT
===========================================================================
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.TwoBattlerAssessor():::EXIT
===========================================================================
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.checkBattlers(java.util.List):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg0[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.getClass().getName() == java.util.ArrayList.class
size(arg0[]) == 2
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.checkBattlers(java.util.List):::EXIT
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.log == orig(org.washcom.cardgames.battleroyale.TwoBattlerAssessor.log)
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees == orig(org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees)
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() == orig(org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName())
arg0[] == orig(arg0[])
arg0[] elements != null
arg0[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg0[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.determineFees(org.washcom.cardgames.battleroyale.Battle):::ENTER
arg0.battleCards.getClass().getName() == arg0.battlers.getClass().getName()
arg0 != null
org.washcom.cardgames.battleroyale.Battle.log has only one value
org.washcom.cardgames.battleroyale.Battle.log != null
arg0.game != null
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log != null
arg0.game.assessor != null
arg0.game.assessor.getClass().getName() == org.washcom.cardgames.battleroyale.DefaultBattleAccessor.class
arg0.game.players != null
arg0.game.players[] contains no nulls and has only one value, of length 3
arg0.game.players[] elements != null
arg0.game.players[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg0.game.players[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.game.players.getClass().getName() == java.util.Arrays$ArrayList.class
arg0.game.gameCards != null
arg0.game.currentBattle != null
arg0.game.winner == null
arg0.game.swapHandsRuleEnabled == true
arg0.game.swappedHandsCount >= 0
arg0.game.unresolvedBattleCount >= 0
arg0.game.battlesByNbrOfContinuations != null
arg0.game.battlesByNbrOfContinuations.getClass().getName() == java.util.HashMap.class
arg0.battleCards != null
arg0.battleCards[] elements != null
arg0.battleCards[].getClass().getName() == [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard]
arg0.battleCards[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
arg0.battleCards.getClass().getName() == java.util.ArrayList.class
arg0.battlers != null
arg0.battlers[] elements != null
arg0.battlers[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg0.battlers[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.continuations >= 0
size(arg0.game.players[]) == 3
size(arg0.battleCards[]) == 2
size(arg0.battlers[]) == 2
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.game.assessor.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.game.players.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.game.battlesByNbrOfContinuations.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.game.players.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.game.battlesByNbrOfContinuations.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.players.getClass().getName() != arg0.game.battlesByNbrOfContinuations.getClass().getName()
arg0.game.players.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.battlesByNbrOfContinuations.getClass().getName() != arg0.battleCards.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.determineFees(org.washcom.cardgames.battleroyale.Battle):::EXIT78
===========================================================================
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.determineFees(org.washcom.cardgames.battleroyale.Battle):::EXIT84
===========================================================================
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.determineFees(org.washcom.cardgames.battleroyale.Battle):::EXIT
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.log == orig(org.washcom.cardgames.battleroyale.TwoBattlerAssessor.log)
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees == orig(org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees)
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() == orig(org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName())
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
arg0.number == orig(arg0.number)
arg0.game == orig(arg0.game)
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
arg0.game.assessor == orig(arg0.game.assessor)
arg0.game.assessor.getClass().getName() == orig(arg0.game.assessor.getClass().getName())
arg0.game.players == orig(arg0.game.players)
arg0.game.players[] == orig(arg0.game.players[])
arg0.game.players.getClass().getName() == orig(arg0.game.players.getClass().getName())
arg0.game.gameCards == orig(arg0.game.gameCards)
arg0.game.currentRoundNumber == orig(arg0.game.currentRoundNumber)
arg0.game.currentBattle == orig(arg0.game.currentBattle)
arg0.game.winner == orig(arg0.game.winner)
arg0.game.swapHandsRuleEnabled == orig(arg0.game.swapHandsRuleEnabled)
arg0.game.swappedHandsCount == orig(arg0.game.swappedHandsCount)
arg0.game.unresolvedBattleCount == orig(arg0.game.unresolvedBattleCount)
arg0.game.battlesByNbrOfContinuations == orig(arg0.game.battlesByNbrOfContinuations)
arg0.game.battlesByNbrOfContinuations.getClass().getName() == return.getClass().getName()
arg0.battleCards == orig(arg0.battleCards)
arg0.battleCards[] == orig(arg0.battleCards[])
arg0.battleCards.getClass().getName() == arg0.battlers.getClass().getName()
arg0.battleCards.getClass().getName() == orig(arg0.battleCards.getClass().getName())
arg0.battleCards.getClass().getName() == orig(arg0.battlers.getClass().getName())
arg0.battlers == orig(arg0.battlers)
arg0.battlers[] == orig(arg0.battlers[])
arg0.continuations == orig(arg0.continuations)
return.getClass().getName() == orig(arg0.game.battlesByNbrOfContinuations.getClass().getName())
org.washcom.cardgames.battleroyale.Battle.log has only one value
org.washcom.cardgames.battleroyale.Battle.log != null
arg0.game != null
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log != null
arg0.game.assessor != null
arg0.game.assessor.getClass().getName() == org.washcom.cardgames.battleroyale.DefaultBattleAccessor.class
arg0.game.players != null
arg0.game.players[] contains no nulls and has only one value, of length 3
arg0.game.players[] elements != null
arg0.game.players[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg0.game.players[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.game.players.getClass().getName() == java.util.Arrays$ArrayList.class
arg0.game.gameCards != null
arg0.game.currentBattle != null
arg0.game.winner == null
arg0.game.swapHandsRuleEnabled == true
arg0.game.swappedHandsCount >= 0
arg0.game.unresolvedBattleCount >= 0
arg0.game.battlesByNbrOfContinuations != null
arg0.battleCards != null
arg0.battleCards[] elements != null
arg0.battleCards[].getClass().getName() == [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard]
arg0.battleCards[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
arg0.battleCards.getClass().getName() == java.util.ArrayList.class
arg0.battlers != null
arg0.battlers[] elements != null
arg0.battlers[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg0.battlers[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.continuations >= 0
return != null
return.getClass().getName() == java.util.HashMap.class
size(arg0.game.players[]) == 3
size(arg0.battleCards[]) == 2
size(arg0.battlers[]) == 2
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.game.assessor.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.game.players.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.battleCards.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != return.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.game.players.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.assessor.getClass().getName() != return.getClass().getName()
arg0.game.players.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.players.getClass().getName() != return.getClass().getName()
arg0.battleCards.getClass().getName() != return.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.pickWinner(org.washcom.cardgames.battleroyale.Battle):::ENTER
arg0.battleCards.getClass().getName() == arg0.battlers.getClass().getName()
arg0 != null
org.washcom.cardgames.battleroyale.Battle.log has only one value
org.washcom.cardgames.battleroyale.Battle.log != null
arg0.game != null
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log != null
arg0.game.assessor != null
arg0.game.assessor.getClass().getName() == org.washcom.cardgames.battleroyale.DefaultBattleAccessor.class
arg0.game.players != null
arg0.game.players[] contains no nulls and has only one value, of length 3
arg0.game.players[] elements != null
arg0.game.players[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg0.game.players[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.game.players.getClass().getName() == java.util.Arrays$ArrayList.class
arg0.game.gameCards != null
arg0.game.currentBattle != null
arg0.game.winner == null
arg0.game.swapHandsRuleEnabled == true
arg0.game.swappedHandsCount >= 0
arg0.game.unresolvedBattleCount >= 0
arg0.game.battlesByNbrOfContinuations != null
arg0.game.battlesByNbrOfContinuations.getClass().getName() == java.util.HashMap.class
arg0.battleCards != null
arg0.battleCards[] elements != null
arg0.battleCards[].getClass().getName() == [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard]
arg0.battleCards[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
arg0.battleCards.getClass().getName() == java.util.ArrayList.class
arg0.battlers != null
arg0.battlers[] elements != null
arg0.battlers[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg0.battlers[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.continuations >= 0
size(arg0.game.players[]) == 3
size(arg0.battleCards[]) == 2
size(arg0.battlers[]) == 2
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.game.assessor.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.game.players.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.game.battlesByNbrOfContinuations.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.game.players.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.game.battlesByNbrOfContinuations.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.players.getClass().getName() != arg0.game.battlesByNbrOfContinuations.getClass().getName()
arg0.game.players.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.battlesByNbrOfContinuations.getClass().getName() != arg0.battleCards.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.pickWinner(org.washcom.cardgames.battleroyale.Battle):::EXIT47
arg0.game.swappedHandsCount == orig(arg0.game.swappedHandsCount)
return == null
===========================================================================
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.pickWinner(org.washcom.cardgames.battleroyale.Battle):::EXIT53
arg0.game.swappedHandsCount == orig(arg0.game.swappedHandsCount)
arg0.number one of { 4, 13 }
arg0.game.currentRoundNumber one of { 4, 13 }
arg0.game.swappedHandsCount == 0
arg0.game.unresolvedBattleCount one of { 0, 1 }
arg0.continuations == 0
return.card.denomination has only one value
return.playedBy.strategy.getClass().getName() == org.washcom.cardgames.battleroyale.Player$1.class
return.playedBy.name.toString one of { "Joe", "Nolan" }
===========================================================================
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.pickWinner(org.washcom.cardgames.battleroyale.Battle):::EXIT61
arg0.game.swappedHandsCount == orig(arg0.game.swappedHandsCount)
return == null
===========================================================================
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.pickWinner(org.washcom.cardgames.battleroyale.Battle):::EXIT64
return != null
===========================================================================
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.pickWinner(org.washcom.cardgames.battleroyale.Battle):::EXIT
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.log == orig(org.washcom.cardgames.battleroyale.TwoBattlerAssessor.log)
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees == orig(org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees)
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() == orig(org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName())
org.washcom.cardgames.battleroyale.Battle.log == orig(org.washcom.cardgames.battleroyale.Battle.log)
arg0.number == orig(arg0.number)
arg0.game == orig(arg0.game)
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log == orig(org.washcom.cardgames.battleroyale.BattleRoyaleGame.log)
arg0.game.assessor == orig(arg0.game.assessor)
arg0.game.assessor.getClass().getName() == orig(arg0.game.assessor.getClass().getName())
arg0.game.players == orig(arg0.game.players)
arg0.game.players[] == orig(arg0.game.players[])
arg0.game.players.getClass().getName() == orig(arg0.game.players.getClass().getName())
arg0.game.gameCards == orig(arg0.game.gameCards)
arg0.game.currentRoundNumber == orig(arg0.game.currentRoundNumber)
arg0.game.currentBattle == orig(arg0.game.currentBattle)
arg0.game.winner == orig(arg0.game.winner)
arg0.game.swapHandsRuleEnabled == orig(arg0.game.swapHandsRuleEnabled)
arg0.game.unresolvedBattleCount == orig(arg0.game.unresolvedBattleCount)
arg0.game.battlesByNbrOfContinuations == orig(arg0.game.battlesByNbrOfContinuations)
arg0.game.battlesByNbrOfContinuations.getClass().getName() == orig(arg0.game.battlesByNbrOfContinuations.getClass().getName())
arg0.battleCards == orig(arg0.battleCards)
arg0.battleCards[] == orig(arg0.battleCards[])
arg0.battleCards.getClass().getName() == arg0.battlers.getClass().getName()
arg0.battleCards.getClass().getName() == orig(arg0.battleCards.getClass().getName())
arg0.battleCards.getClass().getName() == orig(arg0.battlers.getClass().getName())
arg0.battlers == orig(arg0.battlers)
arg0.battlers[] == orig(arg0.battlers[])
arg0.continuations == orig(arg0.continuations)
org.washcom.cardgames.battleroyale.Battle.log has only one value
org.washcom.cardgames.battleroyale.Battle.log != null
arg0.game != null
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log has only one value
org.washcom.cardgames.battleroyale.BattleRoyaleGame.log != null
arg0.game.assessor != null
arg0.game.assessor.getClass().getName() == org.washcom.cardgames.battleroyale.DefaultBattleAccessor.class
arg0.game.players != null
arg0.game.players[] contains no nulls and has only one value, of length 3
arg0.game.players[] elements != null
arg0.game.players[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg0.game.players[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.game.players.getClass().getName() == java.util.Arrays$ArrayList.class
arg0.game.gameCards != null
arg0.game.currentBattle != null
arg0.game.winner == null
arg0.game.swapHandsRuleEnabled == true
arg0.game.swappedHandsCount >= 0
arg0.game.unresolvedBattleCount >= 0
arg0.game.battlesByNbrOfContinuations != null
arg0.game.battlesByNbrOfContinuations.getClass().getName() == java.util.HashMap.class
arg0.battleCards != null
arg0.battleCards[] elements != null
arg0.battleCards[].getClass().getName() == [org.washcom.cardgames.battleroyale.BattleCard, org.washcom.cardgames.battleroyale.BattleCard]
arg0.battleCards[].getClass().getName() elements == org.washcom.cardgames.battleroyale.BattleCard.class
arg0.battleCards.getClass().getName() == java.util.ArrayList.class
arg0.battlers != null
arg0.battlers[] elements != null
arg0.battlers[].getClass().getName() == [org.washcom.cardgames.battleroyale.Player, org.washcom.cardgames.battleroyale.Player]
arg0.battlers[].getClass().getName() elements == org.washcom.cardgames.battleroyale.Player.class
arg0.continuations >= 0
org.washcom.cardgames.battleroyale.BattleCard.ACE_VALUE == 14
return.card != null
return.card.suit != null
return.card.denomination != null
return.playedBy != null
return.playedBy.participatingInBattle == true
return.playedBy.nbrOfBattlesFought == 0
return.playedBy.nbrOfBattlesWon == 0
return.playedBy.strategy != null
return.playedBy.name != null
return.playedBy.name.toString one of { "Joe", "Nolan", "Patrick" }
return.playedBy.hand != null
size(arg0.game.players[]) == 3
size(arg0.battleCards[]) == 2
size(arg0.battlers[]) == 2
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.game.assessor.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.game.players.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.game.battlesByNbrOfContinuations.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != arg0.battleCards.getClass().getName()
org.washcom.cardgames.battleroyale.TwoBattlerAssessor.battleRoyaleFees.getClass().getName() != return.playedBy.strategy.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.game.players.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.game.battlesByNbrOfContinuations.getClass().getName()
arg0.game.assessor.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.assessor.getClass().getName() != return.playedBy.strategy.getClass().getName()
arg0.game.players.getClass().getName() != arg0.game.battlesByNbrOfContinuations.getClass().getName()
arg0.game.players.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.players.getClass().getName() != return.playedBy.strategy.getClass().getName()
arg0.game.swappedHandsCount >= orig(arg0.game.swappedHandsCount)
arg0.game.battlesByNbrOfContinuations.getClass().getName() != arg0.battleCards.getClass().getName()
arg0.game.battlesByNbrOfContinuations.getClass().getName() != return.playedBy.strategy.getClass().getName()
arg0.battleCards.getClass().getName() != return.playedBy.strategy.getClass().getName()
===========================================================================
org.washcom.cardgames.battleroyale.UnresolvedThreeWayBattleException:::OBJECT
===========================================================================
org.washcom.cardgames.battleroyale.UnresolvedThreeWayBattleException.UnresolvedThreeWayBattleException():::EXIT
===========================================================================
org.washcom.cardgames.core.Card:::OBJECT
this.suit != null
org.washcom.cardgames.core.Suit.HEARTS has only one value
org.washcom.cardgames.core.Suit.HEARTS != null
org.washcom.cardgames.core.Suit.DIAMONDS has only one value
org.washcom.cardgames.core.Suit.DIAMONDS != null
org.washcom.cardgames.core.Suit.SPADES has only one value
org.washcom.cardgames.core.Suit.SPADES != null
org.washcom.cardgames.core.Suit.CLUBS has only one value
org.washcom.cardgames.core.Suit.CLUBS != null
org.washcom.cardgames.core.Suit.HEARTS.color has only one value
org.washcom.cardgames.core.Suit.HEARTS.color != null
org.washcom.cardgames.core.Suit.$VALUES has only one value
org.washcom.cardgames.core.Suit.$VALUES != null
org.washcom.cardgames.core.Suit.$VALUES.getClass().getName() == org.washcom.cardgames.core.Suit[].class
org.washcom.cardgames.core.Suit.$VALUES[] contains no nulls and has only one value, of length 4
org.washcom.cardgames.core.Suit.$VALUES[] elements != null
org.washcom.cardgames.core.Suit.$VALUES[].getClass().getName() == [org.washcom.cardgames.core.Suit, org.washcom.cardgames.core.Suit, org.washcom.cardgames.core.Suit, org.washcom.cardgames.core.Suit]
org.washcom.cardgames.core.Suit.$VALUES[].getClass().getName() elements == org.washcom.cardgames.core.Suit.class
org.washcom.cardgames.core.Suit.$VALUES[].color contains no nulls and has only one value, of length 4
org.washcom.cardgames.core.Suit.$VALUES[].color elements != null
org.washcom.cardgames.core.Suit.DIAMONDS.color has only one value
org.washcom.cardgames.core.Suit.DIAMONDS.color != null
org.washcom.cardgames.core.Suit.SPADES.color has only one value
org.washcom.cardgames.core.Suit.SPADES.color != null
org.washcom.cardgames.core.Suit.CLUBS.color has only one value
org.washcom.cardgames.core.Suit.CLUBS.color != null
this.suit.color != null
org.washcom.cardgames.core.Color.RED has only one value
org.washcom.cardgames.core.Color.RED != null
org.washcom.cardgames.core.Color.BLACK has only one value
org.washcom.cardgames.core.Color.BLACK != null
org.washcom.cardgames.core.Color.$VALUES has only one value
org.washcom.cardgames.core.Color.$VALUES != null
org.washcom.cardgames.core.Color.$VALUES.getClass().getName() == org.washcom.cardgames.core.Color[].class
org.washcom.cardgames.core.Color.$VALUES[] contains no nulls and has only one value, of length 2
org.washcom.cardgames.core.Color.$VALUES[] elements != null
org.washcom.cardgames.core.Color.$VALUES[].getClass().getName() == [org.washcom.cardgames.core.Color, org.washcom.cardgames.core.Color]
org.washcom.cardgames.core.Color.$VALUES[].getClass().getName() elements == org.washcom.cardgames.core.Color.class
this.denomination != null
org.washcom.cardgames.core.Denomination.TWO has only one value
org.washcom.cardgames.core.Denomination.TWO != null
org.washcom.cardgames.core.Denomination.THREE has only one value
org.washcom.cardgames.core.Denomination.THREE != null
org.washcom.cardgames.core.Denomination.FOUR has only one value
org.washcom.cardgames.core.Denomination.FOUR != null
org.washcom.cardgames.core.Denomination.FIVE has only one value
org.washcom.cardgames.core.Denomination.FIVE != null
org.washcom.cardgames.core.Denomination.SIX has only one value
org.washcom.cardgames.core.Denomination.SIX != null
org.washcom.cardgames.core.Denomination.SEVEN has only one value
org.washcom.cardgames.core.Denomination.SEVEN != null
org.washcom.cardgames.core.Denomination.EIGHT has only one value
org.washcom.cardgames.core.Denomination.EIGHT != null
org.washcom.cardgames.core.Denomination.NINE has only one value
org.washcom.cardgames.core.Denomination.NINE != null
org.washcom.cardgames.core.Denomination.TEN has only one value
org.washcom.cardgames.core.Denomination.TEN != null
org.washcom.cardgames.core.Denomination.JACK has only one value
org.washcom.cardgames.core.Denomination.JACK != null
org.washcom.cardgames.core.Denomination.QUEEN has only one value
org.washcom.cardgames.core.Denomination.QUEEN != null
org.washcom.cardgames.core.Denomination.KING has only one value
org.washcom.cardgames.core.Denomination.KING != null
org.washcom.cardgames.core.Denomination.ACE has only one value
org.washcom.cardgames.core.Denomination.ACE != null
org.washcom.cardgames.core.Denomination.TWO.value has only one value
org.washcom.cardgames.core.Denomination.TWO.value != null
org.washcom.cardgames.core.Denomination.TWO.royalty == false
org.washcom.cardgames.core.Denomination.$VALUES has only one value
org.washcom.cardgames.core.Denomination.$VALUES != null
org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName() == org.washcom.cardgames.core.Denomination[].class
org.washcom.cardgames.core.Denomination.$VALUES[] contains no nulls and has only one value, of length 13
org.washcom.cardgames.core.Denomination.$VALUES[] elements != null
org.washcom.cardgames.core.Denomination.$VALUES[].getClass().getName() == [org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination]
org.washcom.cardgames.core.Denomination.$VALUES[].getClass().getName() elements == org.washcom.cardgames.core.Denomination.class
org.washcom.cardgames.core.Denomination.$VALUES[].value contains no nulls and has only one value, of length 13
org.washcom.cardgames.core.Denomination.$VALUES[].royalty == [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0]
org.washcom.cardgames.core.Denomination.THREE.value has only one value
org.washcom.cardgames.core.Denomination.THREE.value != null
org.washcom.cardgames.core.Denomination.THREE.royalty == false
org.washcom.cardgames.core.Denomination.FOUR.value has only one value
org.washcom.cardgames.core.Denomination.FOUR.value != null
org.washcom.cardgames.core.Denomination.FOUR.royalty == false
org.washcom.cardgames.core.Denomination.FIVE.value has only one value
org.washcom.cardgames.core.Denomination.FIVE.value != null
org.washcom.cardgames.core.Denomination.FIVE.royalty == false
org.washcom.cardgames.core.Denomination.SIX.value has only one value
org.washcom.cardgames.core.Denomination.SIX.value != null
org.washcom.cardgames.core.Denomination.SIX.royalty == false
org.washcom.cardgames.core.Denomination.SEVEN.value has only one value
org.washcom.cardgames.core.Denomination.SEVEN.value != null
org.washcom.cardgames.core.Denomination.SEVEN.royalty == false
org.washcom.cardgames.core.Denomination.EIGHT.value has only one value
org.washcom.cardgames.core.Denomination.EIGHT.value != null
org.washcom.cardgames.core.Denomination.EIGHT.royalty == false
org.washcom.cardgames.core.Denomination.NINE.value has only one value
org.washcom.cardgames.core.Denomination.NINE.value != null
org.washcom.cardgames.core.Denomination.NINE.royalty == false
org.washcom.cardgames.core.Denomination.TEN.value has only one value
org.washcom.cardgames.core.Denomination.TEN.value != null
org.washcom.cardgames.core.Denomination.TEN.royalty == false
org.washcom.cardgames.core.Denomination.JACK.value has only one value
org.washcom.cardgames.core.Denomination.JACK.value != null
org.washcom.cardgames.core.Denomination.JACK.royalty == true
org.washcom.cardgames.core.Denomination.QUEEN.value has only one value
org.washcom.cardgames.core.Denomination.QUEEN.value != null
org.washcom.cardgames.core.Denomination.QUEEN.royalty == true
org.washcom.cardgames.core.Denomination.KING.value has only one value
org.washcom.cardgames.core.Denomination.KING.value != null
org.washcom.cardgames.core.Denomination.KING.royalty == true
org.washcom.cardgames.core.Denomination.ACE.value has only one value
org.washcom.cardgames.core.Denomination.ACE.value != null
org.washcom.cardgames.core.Denomination.ACE.royalty == false
this.denomination.value != null
size(org.washcom.cardgames.core.Suit.$VALUES[]) == 4
size(org.washcom.cardgames.core.Color.$VALUES[]) == 2
size(org.washcom.cardgames.core.Denomination.$VALUES[]) == 13
===========================================================================
org.washcom.cardgames.core.Card.Card(org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Suit):::ENTER
arg0 != null
org.washcom.cardgames.core.Denomination.TWO has only one value
org.washcom.cardgames.core.Denomination.TWO != null
org.washcom.cardgames.core.Denomination.THREE has only one value
org.washcom.cardgames.core.Denomination.THREE != null
org.washcom.cardgames.core.Denomination.FOUR has only one value
org.washcom.cardgames.core.Denomination.FOUR != null
org.washcom.cardgames.core.Denomination.FIVE has only one value
org.washcom.cardgames.core.Denomination.FIVE != null
org.washcom.cardgames.core.Denomination.SIX has only one value
org.washcom.cardgames.core.Denomination.SIX != null
org.washcom.cardgames.core.Denomination.SEVEN has only one value
org.washcom.cardgames.core.Denomination.SEVEN != null
org.washcom.cardgames.core.Denomination.EIGHT has only one value
org.washcom.cardgames.core.Denomination.EIGHT != null
org.washcom.cardgames.core.Denomination.NINE has only one value
org.washcom.cardgames.core.Denomination.NINE != null
org.washcom.cardgames.core.Denomination.TEN has only one value
org.washcom.cardgames.core.Denomination.TEN != null
org.washcom.cardgames.core.Denomination.JACK has only one value
org.washcom.cardgames.core.Denomination.JACK != null
org.washcom.cardgames.core.Denomination.QUEEN has only one value
org.washcom.cardgames.core.Denomination.QUEEN != null
org.washcom.cardgames.core.Denomination.KING has only one value
org.washcom.cardgames.core.Denomination.KING != null
org.washcom.cardgames.core.Denomination.ACE has only one value
org.washcom.cardgames.core.Denomination.ACE != null
org.washcom.cardgames.core.Denomination.TWO.value has only one value
org.washcom.cardgames.core.Denomination.TWO.value != null
org.washcom.cardgames.core.Denomination.TWO.royalty == false
org.washcom.cardgames.core.Denomination.$VALUES has only one value
org.washcom.cardgames.core.Denomination.$VALUES != null
org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName() == org.washcom.cardgames.core.Denomination[].class
org.washcom.cardgames.core.Denomination.$VALUES[] contains no nulls and has only one value, of length 13
org.washcom.cardgames.core.Denomination.$VALUES[] elements != null
org.washcom.cardgames.core.Denomination.$VALUES[].getClass().getName() == [org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination]
org.washcom.cardgames.core.Denomination.$VALUES[].getClass().getName() elements == org.washcom.cardgames.core.Denomination.class
org.washcom.cardgames.core.Denomination.$VALUES[].value contains no nulls and has only one value, of length 13
org.washcom.cardgames.core.Denomination.$VALUES[].royalty == [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0]
org.washcom.cardgames.core.Denomination.THREE.value has only one value
org.washcom.cardgames.core.Denomination.THREE.value != null
org.washcom.cardgames.core.Denomination.THREE.royalty == false
org.washcom.cardgames.core.Denomination.FOUR.value has only one value
org.washcom.cardgames.core.Denomination.FOUR.value != null
org.washcom.cardgames.core.Denomination.FOUR.royalty == false
org.washcom.cardgames.core.Denomination.FIVE.value has only one value
org.washcom.cardgames.core.Denomination.FIVE.value != null
org.washcom.cardgames.core.Denomination.FIVE.royalty == false
org.washcom.cardgames.core.Denomination.SIX.value has only one value
org.washcom.cardgames.core.Denomination.SIX.value != null
org.washcom.cardgames.core.Denomination.SIX.royalty == false
org.washcom.cardgames.core.Denomination.SEVEN.value has only one value
org.washcom.cardgames.core.Denomination.SEVEN.value != null
org.washcom.cardgames.core.Denomination.SEVEN.royalty == false
org.washcom.cardgames.core.Denomination.EIGHT.value has only one value
org.washcom.cardgames.core.Denomination.EIGHT.value != null
org.washcom.cardgames.core.Denomination.EIGHT.royalty == false
org.washcom.cardgames.core.Denomination.NINE.value has only one value
org.washcom.cardgames.core.Denomination.NINE.value != null
org.washcom.cardgames.core.Denomination.NINE.royalty == false
org.washcom.cardgames.core.Denomination.TEN.value has only one value
org.washcom.cardgames.core.Denomination.TEN.value != null
org.washcom.cardgames.core.Denomination.TEN.royalty == false
org.washcom.cardgames.core.Denomination.JACK.value has only one value
org.washcom.cardgames.core.Denomination.JACK.value != null
org.washcom.cardgames.core.Denomination.JACK.royalty == true
org.washcom.cardgames.core.Denomination.QUEEN.value has only one value
org.washcom.cardgames.core.Denomination.QUEEN.value != null
org.washcom.cardgames.core.Denomination.QUEEN.royalty == true
org.washcom.cardgames.core.Denomination.KING.value has only one value
org.washcom.cardgames.core.Denomination.KING.value != null
org.washcom.cardgames.core.Denomination.KING.royalty == true
org.washcom.cardgames.core.Denomination.ACE.value has only one value
org.washcom.cardgames.core.Denomination.ACE.value != null
org.washcom.cardgames.core.Denomination.ACE.royalty == false
arg0.value != null
arg1 != null
org.washcom.cardgames.core.Suit.HEARTS has only one value
org.washcom.cardgames.core.Suit.HEARTS != null
org.washcom.cardgames.core.Suit.DIAMONDS has only one value
org.washcom.cardgames.core.Suit.DIAMONDS != null
org.washcom.cardgames.core.Suit.SPADES has only one value
org.washcom.cardgames.core.Suit.SPADES != null
org.washcom.cardgames.core.Suit.CLUBS has only one value
org.washcom.cardgames.core.Suit.CLUBS != null
org.washcom.cardgames.core.Suit.HEARTS.color has only one value
org.washcom.cardgames.core.Suit.HEARTS.color != null
org.washcom.cardgames.core.Suit.$VALUES has only one value
org.washcom.cardgames.core.Suit.$VALUES != null
org.washcom.cardgames.core.Suit.$VALUES.getClass().getName() == org.washcom.cardgames.core.Suit[].class
org.washcom.cardgames.core.Suit.$VALUES[] contains no nulls and has only one value, of length 4
org.washcom.cardgames.core.Suit.$VALUES[] elements != null
org.washcom.cardgames.core.Suit.$VALUES[].getClass().getName() == [org.washcom.cardgames.core.Suit, org.washcom.cardgames.core.Suit, org.washcom.cardgames.core.Suit, org.washcom.cardgames.core.Suit]
org.washcom.cardgames.core.Suit.$VALUES[].getClass().getName() elements == org.washcom.cardgames.core.Suit.class
org.washcom.cardgames.core.Suit.$VALUES[].color contains no nulls and has only one value, of length 4
org.washcom.cardgames.core.Suit.$VALUES[].color elements != null
org.washcom.cardgames.core.Suit.DIAMONDS.color has only one value
org.washcom.cardgames.core.Suit.DIAMONDS.color != null
org.washcom.cardgames.core.Suit.SPADES.color has only one value
org.washcom.cardgames.core.Suit.SPADES.color != null
org.washcom.cardgames.core.Suit.CLUBS.color has only one value
org.washcom.cardgames.core.Suit.CLUBS.color != null
arg1.color != null
org.washcom.cardgames.core.Color.RED has only one value
org.washcom.cardgames.core.Color.RED != null
org.washcom.cardgames.core.Color.BLACK has only one value
org.washcom.cardgames.core.Color.BLACK != null
org.washcom.cardgames.core.Color.$VALUES has only one value
org.washcom.cardgames.core.Color.$VALUES != null
org.washcom.cardgames.core.Color.$VALUES.getClass().getName() == org.washcom.cardgames.core.Color[].class
org.washcom.cardgames.core.Color.$VALUES[] contains no nulls and has only one value, of length 2
org.washcom.cardgames.core.Color.$VALUES[] elements != null
org.washcom.cardgames.core.Color.$VALUES[].getClass().getName() == [org.washcom.cardgames.core.Color, org.washcom.cardgames.core.Color]
org.washcom.cardgames.core.Color.$VALUES[].getClass().getName() elements == org.washcom.cardgames.core.Color.class
size(org.washcom.cardgames.core.Denomination.$VALUES[]) == 13
size(org.washcom.cardgames.core.Suit.$VALUES[]) == 4
size(org.washcom.cardgames.core.Color.$VALUES[]) == 2
===========================================================================
org.washcom.cardgames.core.Card.Card(org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Suit):::EXIT
org.washcom.cardgames.core.Suit.HEARTS == orig(org.washcom.cardgames.core.Suit.HEARTS)
org.washcom.cardgames.core.Suit.DIAMONDS == orig(org.washcom.cardgames.core.Suit.DIAMONDS)
org.washcom.cardgames.core.Suit.SPADES == orig(org.washcom.cardgames.core.Suit.SPADES)
org.washcom.cardgames.core.Suit.CLUBS == orig(org.washcom.cardgames.core.Suit.CLUBS)
org.washcom.cardgames.core.Suit.HEARTS.color == orig(org.washcom.cardgames.core.Suit.HEARTS.color)
org.washcom.cardgames.core.Suit.$VALUES == orig(org.washcom.cardgames.core.Suit.$VALUES)
org.washcom.cardgames.core.Suit.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Suit.$VALUES.getClass().getName())
org.washcom.cardgames.core.Suit.$VALUES[] == orig(org.washcom.cardgames.core.Suit.$VALUES[])
org.washcom.cardgames.core.Suit.$VALUES[].color == orig(org.washcom.cardgames.core.Suit.$VALUES[].color)
org.washcom.cardgames.core.Suit.DIAMONDS.color == orig(org.washcom.cardgames.core.Suit.DIAMONDS.color)
org.washcom.cardgames.core.Suit.SPADES.color == orig(org.washcom.cardgames.core.Suit.SPADES.color)
org.washcom.cardgames.core.Suit.CLUBS.color == orig(org.washcom.cardgames.core.Suit.CLUBS.color)
org.washcom.cardgames.core.Color.RED == orig(org.washcom.cardgames.core.Color.RED)
org.washcom.cardgames.core.Color.BLACK == orig(org.washcom.cardgames.core.Color.BLACK)
org.washcom.cardgames.core.Color.$VALUES == orig(org.washcom.cardgames.core.Color.$VALUES)
org.washcom.cardgames.core.Color.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Color.$VALUES.getClass().getName())
org.washcom.cardgames.core.Color.$VALUES[] == orig(org.washcom.cardgames.core.Color.$VALUES[])
org.washcom.cardgames.core.Denomination.TWO == orig(org.washcom.cardgames.core.Denomination.TWO)
org.washcom.cardgames.core.Denomination.THREE == orig(org.washcom.cardgames.core.Denomination.THREE)
org.washcom.cardgames.core.Denomination.FOUR == orig(org.washcom.cardgames.core.Denomination.FOUR)
org.washcom.cardgames.core.Denomination.FIVE == orig(org.washcom.cardgames.core.Denomination.FIVE)
org.washcom.cardgames.core.Denomination.SIX == orig(org.washcom.cardgames.core.Denomination.SIX)
org.washcom.cardgames.core.Denomination.SEVEN == orig(org.washcom.cardgames.core.Denomination.SEVEN)
org.washcom.cardgames.core.Denomination.EIGHT == orig(org.washcom.cardgames.core.Denomination.EIGHT)
org.washcom.cardgames.core.Denomination.NINE == orig(org.washcom.cardgames.core.Denomination.NINE)
org.washcom.cardgames.core.Denomination.TEN == orig(org.washcom.cardgames.core.Denomination.TEN)
org.washcom.cardgames.core.Denomination.JACK == orig(org.washcom.cardgames.core.Denomination.JACK)
org.washcom.cardgames.core.Denomination.QUEEN == orig(org.washcom.cardgames.core.Denomination.QUEEN)
org.washcom.cardgames.core.Denomination.KING == orig(org.washcom.cardgames.core.Denomination.KING)
org.washcom.cardgames.core.Denomination.ACE == orig(org.washcom.cardgames.core.Denomination.ACE)
org.washcom.cardgames.core.Denomination.TWO.value == orig(org.washcom.cardgames.core.Denomination.TWO.value)
org.washcom.cardgames.core.Denomination.TWO.royalty == orig(org.washcom.cardgames.core.Denomination.TWO.royalty)
org.washcom.cardgames.core.Denomination.$VALUES == orig(org.washcom.cardgames.core.Denomination.$VALUES)
org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName())
org.washcom.cardgames.core.Denomination.$VALUES[] == orig(org.washcom.cardgames.core.Denomination.$VALUES[])
org.washcom.cardgames.core.Denomination.$VALUES[].value == orig(org.washcom.cardgames.core.Denomination.$VALUES[].value)
org.washcom.cardgames.core.Denomination.$VALUES[].royalty == orig(org.washcom.cardgames.core.Denomination.$VALUES[].royalty)
org.washcom.cardgames.core.Denomination.THREE.value == orig(org.washcom.cardgames.core.Denomination.THREE.value)
org.washcom.cardgames.core.Denomination.THREE.royalty == orig(org.washcom.cardgames.core.Denomination.THREE.royalty)
org.washcom.cardgames.core.Denomination.FOUR.value == orig(org.washcom.cardgames.core.Denomination.FOUR.value)
org.washcom.cardgames.core.Denomination.FOUR.royalty == orig(org.washcom.cardgames.core.Denomination.FOUR.royalty)
org.washcom.cardgames.core.Denomination.FIVE.value == orig(org.washcom.cardgames.core.Denomination.FIVE.value)
org.washcom.cardgames.core.Denomination.FIVE.royalty == orig(org.washcom.cardgames.core.Denomination.FIVE.royalty)
org.washcom.cardgames.core.Denomination.SIX.value == orig(org.washcom.cardgames.core.Denomination.SIX.value)
org.washcom.cardgames.core.Denomination.SIX.royalty == orig(org.washcom.cardgames.core.Denomination.SIX.royalty)
org.washcom.cardgames.core.Denomination.SEVEN.value == orig(org.washcom.cardgames.core.Denomination.SEVEN.value)
org.washcom.cardgames.core.Denomination.SEVEN.royalty == orig(org.washcom.cardgames.core.Denomination.SEVEN.royalty)
org.washcom.cardgames.core.Denomination.EIGHT.value == orig(org.washcom.cardgames.core.Denomination.EIGHT.value)
org.washcom.cardgames.core.Denomination.EIGHT.royalty == orig(org.washcom.cardgames.core.Denomination.EIGHT.royalty)
org.washcom.cardgames.core.Denomination.NINE.value == orig(org.washcom.cardgames.core.Denomination.NINE.value)
org.washcom.cardgames.core.Denomination.NINE.royalty == orig(org.washcom.cardgames.core.Denomination.NINE.royalty)
org.washcom.cardgames.core.Denomination.TEN.value == orig(org.washcom.cardgames.core.Denomination.TEN.value)
org.washcom.cardgames.core.Denomination.TEN.royalty == orig(org.washcom.cardgames.core.Denomination.TEN.royalty)
org.washcom.cardgames.core.Denomination.JACK.value == orig(org.washcom.cardgames.core.Denomination.JACK.value)
org.washcom.cardgames.core.Denomination.JACK.royalty == orig(org.washcom.cardgames.core.Denomination.JACK.royalty)
org.washcom.cardgames.core.Denomination.QUEEN.value == orig(org.washcom.cardgames.core.Denomination.QUEEN.value)
org.washcom.cardgames.core.Denomination.QUEEN.royalty == orig(org.washcom.cardgames.core.Denomination.QUEEN.royalty)
org.washcom.cardgames.core.Denomination.KING.value == orig(org.washcom.cardgames.core.Denomination.KING.value)
org.washcom.cardgames.core.Denomination.KING.royalty == orig(org.washcom.cardgames.core.Denomination.KING.royalty)
org.washcom.cardgames.core.Denomination.ACE.value == orig(org.washcom.cardgames.core.Denomination.ACE.value)
org.washcom.cardgames.core.Denomination.ACE.royalty == orig(org.washcom.cardgames.core.Denomination.ACE.royalty)
arg0.value == orig(arg0.value)
arg0.royalty == orig(arg0.royalty)
arg1.color == orig(arg1.color)
arg0.value != null
arg1.color != null
===========================================================================
org.washcom.cardgames.core.Card.getDenomination():::ENTER
===========================================================================
org.washcom.cardgames.core.Card.getDenomination():::EXIT
this.suit == orig(this.suit)
org.washcom.cardgames.core.Suit.HEARTS == orig(org.washcom.cardgames.core.Suit.HEARTS)
org.washcom.cardgames.core.Suit.DIAMONDS == orig(org.washcom.cardgames.core.Suit.DIAMONDS)
org.washcom.cardgames.core.Suit.SPADES == orig(org.washcom.cardgames.core.Suit.SPADES)
org.washcom.cardgames.core.Suit.CLUBS == orig(org.washcom.cardgames.core.Suit.CLUBS)
org.washcom.cardgames.core.Suit.HEARTS.color == orig(org.washcom.cardgames.core.Suit.HEARTS.color)
org.washcom.cardgames.core.Suit.$VALUES == orig(org.washcom.cardgames.core.Suit.$VALUES)
org.washcom.cardgames.core.Suit.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Suit.$VALUES.getClass().getName())
org.washcom.cardgames.core.Suit.$VALUES[] == orig(org.washcom.cardgames.core.Suit.$VALUES[])
org.washcom.cardgames.core.Suit.$VALUES[].color == orig(org.washcom.cardgames.core.Suit.$VALUES[].color)
org.washcom.cardgames.core.Suit.DIAMONDS.color == orig(org.washcom.cardgames.core.Suit.DIAMONDS.color)
org.washcom.cardgames.core.Suit.SPADES.color == orig(org.washcom.cardgames.core.Suit.SPADES.color)
org.washcom.cardgames.core.Suit.CLUBS.color == orig(org.washcom.cardgames.core.Suit.CLUBS.color)
this.suit.color == orig(this.suit.color)
org.washcom.cardgames.core.Color.RED == orig(org.washcom.cardgames.core.Color.RED)
org.washcom.cardgames.core.Color.BLACK == orig(org.washcom.cardgames.core.Color.BLACK)
org.washcom.cardgames.core.Color.$VALUES == orig(org.washcom.cardgames.core.Color.$VALUES)
org.washcom.cardgames.core.Color.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Color.$VALUES.getClass().getName())
org.washcom.cardgames.core.Color.$VALUES[] == orig(org.washcom.cardgames.core.Color.$VALUES[])
this.denomination == orig(this.denomination)
org.washcom.cardgames.core.Denomination.TWO == orig(org.washcom.cardgames.core.Denomination.TWO)
org.washcom.cardgames.core.Denomination.THREE == orig(org.washcom.cardgames.core.Denomination.THREE)
org.washcom.cardgames.core.Denomination.FOUR == orig(org.washcom.cardgames.core.Denomination.FOUR)
org.washcom.cardgames.core.Denomination.FIVE == orig(org.washcom.cardgames.core.Denomination.FIVE)
org.washcom.cardgames.core.Denomination.SIX == orig(org.washcom.cardgames.core.Denomination.SIX)
org.washcom.cardgames.core.Denomination.SEVEN == orig(org.washcom.cardgames.core.Denomination.SEVEN)
org.washcom.cardgames.core.Denomination.EIGHT == orig(org.washcom.cardgames.core.Denomination.EIGHT)
org.washcom.cardgames.core.Denomination.NINE == orig(org.washcom.cardgames.core.Denomination.NINE)
org.washcom.cardgames.core.Denomination.TEN == orig(org.washcom.cardgames.core.Denomination.TEN)
org.washcom.cardgames.core.Denomination.JACK == orig(org.washcom.cardgames.core.Denomination.JACK)
org.washcom.cardgames.core.Denomination.QUEEN == orig(org.washcom.cardgames.core.Denomination.QUEEN)
org.washcom.cardgames.core.Denomination.KING == orig(org.washcom.cardgames.core.Denomination.KING)
org.washcom.cardgames.core.Denomination.ACE == orig(org.washcom.cardgames.core.Denomination.ACE)
org.washcom.cardgames.core.Denomination.TWO.value == orig(org.washcom.cardgames.core.Denomination.TWO.value)
org.washcom.cardgames.core.Denomination.TWO.royalty == orig(org.washcom.cardgames.core.Denomination.TWO.royalty)
org.washcom.cardgames.core.Denomination.$VALUES == orig(org.washcom.cardgames.core.Denomination.$VALUES)
org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName())
org.washcom.cardgames.core.Denomination.$VALUES[] == orig(org.washcom.cardgames.core.Denomination.$VALUES[])
org.washcom.cardgames.core.Denomination.$VALUES[].value == orig(org.washcom.cardgames.core.Denomination.$VALUES[].value)
org.washcom.cardgames.core.Denomination.$VALUES[].royalty == orig(org.washcom.cardgames.core.Denomination.$VALUES[].royalty)
org.washcom.cardgames.core.Denomination.THREE.value == orig(org.washcom.cardgames.core.Denomination.THREE.value)
org.washcom.cardgames.core.Denomination.THREE.royalty == orig(org.washcom.cardgames.core.Denomination.THREE.royalty)
org.washcom.cardgames.core.Denomination.FOUR.value == orig(org.washcom.cardgames.core.Denomination.FOUR.value)
org.washcom.cardgames.core.Denomination.FOUR.royalty == orig(org.washcom.cardgames.core.Denomination.FOUR.royalty)
org.washcom.cardgames.core.Denomination.FIVE.value == orig(org.washcom.cardgames.core.Denomination.FIVE.value)
org.washcom.cardgames.core.Denomination.FIVE.royalty == orig(org.washcom.cardgames.core.Denomination.FIVE.royalty)
org.washcom.cardgames.core.Denomination.SIX.value == orig(org.washcom.cardgames.core.Denomination.SIX.value)
org.washcom.cardgames.core.Denomination.SIX.royalty == orig(org.washcom.cardgames.core.Denomination.SIX.royalty)
org.washcom.cardgames.core.Denomination.SEVEN.value == orig(org.washcom.cardgames.core.Denomination.SEVEN.value)
org.washcom.cardgames.core.Denomination.SEVEN.royalty == orig(org.washcom.cardgames.core.Denomination.SEVEN.royalty)
org.washcom.cardgames.core.Denomination.EIGHT.value == orig(org.washcom.cardgames.core.Denomination.EIGHT.value)
org.washcom.cardgames.core.Denomination.EIGHT.royalty == orig(org.washcom.cardgames.core.Denomination.EIGHT.royalty)
org.washcom.cardgames.core.Denomination.NINE.value == orig(org.washcom.cardgames.core.Denomination.NINE.value)
org.washcom.cardgames.core.Denomination.NINE.royalty == orig(org.washcom.cardgames.core.Denomination.NINE.royalty)
org.washcom.cardgames.core.Denomination.TEN.value == orig(org.washcom.cardgames.core.Denomination.TEN.value)
org.washcom.cardgames.core.Denomination.TEN.royalty == orig(org.washcom.cardgames.core.Denomination.TEN.royalty)
org.washcom.cardgames.core.Denomination.JACK.value == orig(org.washcom.cardgames.core.Denomination.JACK.value)
org.washcom.cardgames.core.Denomination.JACK.royalty == orig(org.washcom.cardgames.core.Denomination.JACK.royalty)
org.washcom.cardgames.core.Denomination.QUEEN.value == orig(org.washcom.cardgames.core.Denomination.QUEEN.value)
org.washcom.cardgames.core.Denomination.QUEEN.royalty == orig(org.washcom.cardgames.core.Denomination.QUEEN.royalty)
org.washcom.cardgames.core.Denomination.KING.value == orig(org.washcom.cardgames.core.Denomination.KING.value)
org.washcom.cardgames.core.Denomination.KING.royalty == orig(org.washcom.cardgames.core.Denomination.KING.royalty)
org.washcom.cardgames.core.Denomination.ACE.value == orig(org.washcom.cardgames.core.Denomination.ACE.value)
org.washcom.cardgames.core.Denomination.ACE.royalty == orig(org.washcom.cardgames.core.Denomination.ACE.royalty)
this.denomination.value == orig(this.denomination.value)
this.denomination.royalty == orig(this.denomination.royalty)
return != null
return.value != null
===========================================================================
org.washcom.cardgames.core.Card.toString():::ENTER
===========================================================================
org.washcom.cardgames.core.Card.toString():::EXIT
this.suit == orig(this.suit)
org.washcom.cardgames.core.Suit.HEARTS == orig(org.washcom.cardgames.core.Suit.HEARTS)
org.washcom.cardgames.core.Suit.DIAMONDS == orig(org.washcom.cardgames.core.Suit.DIAMONDS)
org.washcom.cardgames.core.Suit.SPADES == orig(org.washcom.cardgames.core.Suit.SPADES)
org.washcom.cardgames.core.Suit.CLUBS == orig(org.washcom.cardgames.core.Suit.CLUBS)
org.washcom.cardgames.core.Suit.HEARTS.color == orig(org.washcom.cardgames.core.Suit.HEARTS.color)
org.washcom.cardgames.core.Suit.$VALUES == orig(org.washcom.cardgames.core.Suit.$VALUES)
org.washcom.cardgames.core.Suit.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Suit.$VALUES.getClass().getName())
org.washcom.cardgames.core.Suit.$VALUES[] == orig(org.washcom.cardgames.core.Suit.$VALUES[])
org.washcom.cardgames.core.Suit.$VALUES[].color == orig(org.washcom.cardgames.core.Suit.$VALUES[].color)
org.washcom.cardgames.core.Suit.DIAMONDS.color == orig(org.washcom.cardgames.core.Suit.DIAMONDS.color)
org.washcom.cardgames.core.Suit.SPADES.color == orig(org.washcom.cardgames.core.Suit.SPADES.color)
org.washcom.cardgames.core.Suit.CLUBS.color == orig(org.washcom.cardgames.core.Suit.CLUBS.color)
this.suit.color == orig(this.suit.color)
org.washcom.cardgames.core.Color.RED == orig(org.washcom.cardgames.core.Color.RED)
org.washcom.cardgames.core.Color.BLACK == orig(org.washcom.cardgames.core.Color.BLACK)
org.washcom.cardgames.core.Color.$VALUES == orig(org.washcom.cardgames.core.Color.$VALUES)
org.washcom.cardgames.core.Color.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Color.$VALUES.getClass().getName())
org.washcom.cardgames.core.Color.$VALUES[] == orig(org.washcom.cardgames.core.Color.$VALUES[])
this.denomination == orig(this.denomination)
org.washcom.cardgames.core.Denomination.TWO == orig(org.washcom.cardgames.core.Denomination.TWO)
org.washcom.cardgames.core.Denomination.THREE == orig(org.washcom.cardgames.core.Denomination.THREE)
org.washcom.cardgames.core.Denomination.FOUR == orig(org.washcom.cardgames.core.Denomination.FOUR)
org.washcom.cardgames.core.Denomination.FIVE == orig(org.washcom.cardgames.core.Denomination.FIVE)
org.washcom.cardgames.core.Denomination.SIX == orig(org.washcom.cardgames.core.Denomination.SIX)
org.washcom.cardgames.core.Denomination.SEVEN == orig(org.washcom.cardgames.core.Denomination.SEVEN)
org.washcom.cardgames.core.Denomination.EIGHT == orig(org.washcom.cardgames.core.Denomination.EIGHT)
org.washcom.cardgames.core.Denomination.NINE == orig(org.washcom.cardgames.core.Denomination.NINE)
org.washcom.cardgames.core.Denomination.TEN == orig(org.washcom.cardgames.core.Denomination.TEN)
org.washcom.cardgames.core.Denomination.JACK == orig(org.washcom.cardgames.core.Denomination.JACK)
org.washcom.cardgames.core.Denomination.QUEEN == orig(org.washcom.cardgames.core.Denomination.QUEEN)
org.washcom.cardgames.core.Denomination.KING == orig(org.washcom.cardgames.core.Denomination.KING)
org.washcom.cardgames.core.Denomination.ACE == orig(org.washcom.cardgames.core.Denomination.ACE)
org.washcom.cardgames.core.Denomination.TWO.value == orig(org.washcom.cardgames.core.Denomination.TWO.value)
org.washcom.cardgames.core.Denomination.TWO.royalty == orig(org.washcom.cardgames.core.Denomination.TWO.royalty)
org.washcom.cardgames.core.Denomination.$VALUES == orig(org.washcom.cardgames.core.Denomination.$VALUES)
org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName())
org.washcom.cardgames.core.Denomination.$VALUES[] == orig(org.washcom.cardgames.core.Denomination.$VALUES[])
org.washcom.cardgames.core.Denomination.$VALUES[].value == orig(org.washcom.cardgames.core.Denomination.$VALUES[].value)
org.washcom.cardgames.core.Denomination.$VALUES[].royalty == orig(org.washcom.cardgames.core.Denomination.$VALUES[].royalty)
org.washcom.cardgames.core.Denomination.THREE.value == orig(org.washcom.cardgames.core.Denomination.THREE.value)
org.washcom.cardgames.core.Denomination.THREE.royalty == orig(org.washcom.cardgames.core.Denomination.THREE.royalty)
org.washcom.cardgames.core.Denomination.FOUR.value == orig(org.washcom.cardgames.core.Denomination.FOUR.value)
org.washcom.cardgames.core.Denomination.FOUR.royalty == orig(org.washcom.cardgames.core.Denomination.FOUR.royalty)
org.washcom.cardgames.core.Denomination.FIVE.value == orig(org.washcom.cardgames.core.Denomination.FIVE.value)
org.washcom.cardgames.core.Denomination.FIVE.royalty == orig(org.washcom.cardgames.core.Denomination.FIVE.royalty)
org.washcom.cardgames.core.Denomination.SIX.value == orig(org.washcom.cardgames.core.Denomination.SIX.value)
org.washcom.cardgames.core.Denomination.SIX.royalty == orig(org.washcom.cardgames.core.Denomination.SIX.royalty)
org.washcom.cardgames.core.Denomination.SEVEN.value == orig(org.washcom.cardgames.core.Denomination.SEVEN.value)
org.washcom.cardgames.core.Denomination.SEVEN.royalty == orig(org.washcom.cardgames.core.Denomination.SEVEN.royalty)
org.washcom.cardgames.core.Denomination.EIGHT.value == orig(org.washcom.cardgames.core.Denomination.EIGHT.value)
org.washcom.cardgames.core.Denomination.EIGHT.royalty == orig(org.washcom.cardgames.core.Denomination.EIGHT.royalty)
org.washcom.cardgames.core.Denomination.NINE.value == orig(org.washcom.cardgames.core.Denomination.NINE.value)
org.washcom.cardgames.core.Denomination.NINE.royalty == orig(org.washcom.cardgames.core.Denomination.NINE.royalty)
org.washcom.cardgames.core.Denomination.TEN.value == orig(org.washcom.cardgames.core.Denomination.TEN.value)
org.washcom.cardgames.core.Denomination.TEN.royalty == orig(org.washcom.cardgames.core.Denomination.TEN.royalty)
org.washcom.cardgames.core.Denomination.JACK.value == orig(org.washcom.cardgames.core.Denomination.JACK.value)
org.washcom.cardgames.core.Denomination.JACK.royalty == orig(org.washcom.cardgames.core.Denomination.JACK.royalty)
org.washcom.cardgames.core.Denomination.QUEEN.value == orig(org.washcom.cardgames.core.Denomination.QUEEN.value)
org.washcom.cardgames.core.Denomination.QUEEN.royalty == orig(org.washcom.cardgames.core.Denomination.QUEEN.royalty)
org.washcom.cardgames.core.Denomination.KING.value == orig(org.washcom.cardgames.core.Denomination.KING.value)
org.washcom.cardgames.core.Denomination.KING.royalty == orig(org.washcom.cardgames.core.Denomination.KING.royalty)
org.washcom.cardgames.core.Denomination.ACE.value == orig(org.washcom.cardgames.core.Denomination.ACE.value)
org.washcom.cardgames.core.Denomination.ACE.royalty == orig(org.washcom.cardgames.core.Denomination.ACE.royalty)
this.denomination.value == orig(this.denomination.value)
this.denomination.royalty == orig(this.denomination.royalty)
return != null
===========================================================================
org.washcom.cardgames.core.Color:::OBJECT
===========================================================================
org.washcom.cardgames.core.Color.Color(java.lang.String, int):::ENTER
arg0.toString one of { "BLACK", "RED" }
arg1 one of { 0, 1 }
===========================================================================
org.washcom.cardgames.core.Color.Color(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString one of { "BLACK", "RED" }
===========================================================================
org.washcom.cardgames.core.Deck:::OBJECT
this.internal != null
this.internal.getClass().getName() == java.util.ArrayDeque.class
this.random != null
===========================================================================
org.washcom.cardgames.core.Deck.Deck():::EXIT
===========================================================================
org.washcom.cardgames.core.Deck.Deck(java.util.Collection):::ENTER
arg0 != null
arg0.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.washcom.cardgames.core.Deck.Deck(java.util.Collection):::EXIT
this.internal.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
org.washcom.cardgames.core.Deck.drawUpTo(int):::ENTER
arg0 >= 1
===========================================================================
org.washcom.cardgames.core.Deck.drawUpTo(int):::EXIT
this.internal == orig(this.internal)
this.internal.getClass().getName() == orig(this.internal.getClass().getName())
this.random == orig(this.random)
return != null
return[] elements != null
return[].getClass().getName() elements == org.washcom.cardgames.core.Card.class
this.internal.getClass().getName() != return.getClass().getName()
===========================================================================
org.washcom.cardgames.core.DeckBuilder:::CLASS
org.washcom.cardgames.core.DeckBuilder.$assertionsDisabled == false
===========================================================================
org.washcom.cardgames.core.DeckBuilder.build52CardDeck():::ENTER
===========================================================================
org.washcom.cardgames.core.DeckBuilder.build52CardDeck():::EXIT
org.washcom.cardgames.core.DeckBuilder.$assertionsDisabled == orig(org.washcom.cardgames.core.DeckBuilder.$assertionsDisabled)
return.internal.getClass().getName() == java.util.ArrayDeque.class
===========================================================================
org.washcom.cardgames.core.DeckBuilder.buildShuffled52CardDeck():::ENTER
===========================================================================
org.washcom.cardgames.core.DeckBuilder.buildShuffled52CardDeck():::EXIT
org.washcom.cardgames.core.DeckBuilder.$assertionsDisabled == orig(org.washcom.cardgames.core.DeckBuilder.$assertionsDisabled)
return.internal.getClass().getName() == java.util.ArrayDeque.class
===========================================================================
org.washcom.cardgames.core.DeckDealer.dealFairly(org.washcom.cardgames.core.Deck, java.util.Collection):::ENTER
arg0.internal.getClass().getName() == java.util.ArrayDeque.class
arg1.getClass().getName() == java.util.Arrays$ArrayList.class
arg0.internal.getClass().getName() != arg1.getClass().getName()
===========================================================================
org.washcom.cardgames.core.DeckDealer.dealFairly(org.washcom.cardgames.core.Deck, java.util.Collection):::EXIT82
===========================================================================
org.washcom.cardgames.core.DeckDealer.dealFairly(org.washcom.cardgames.core.Deck, java.util.Collection):::EXIT
arg0.internal == orig(arg0.internal)
arg0.internal.getClass().getName() == orig(arg0.internal.getClass().getName())
arg0.random == orig(arg0.random)
arg0.internal.getClass().getName() == java.util.ArrayDeque.class
arg0.internal.getClass().getName() != orig(arg1.getClass().getName())
===========================================================================
org.washcom.cardgames.core.DeckDealer.dealFairly(org.washcom.cardgames.core.Deck, org.washcom.cardgames.core.Player[]):::ENTER
arg0.internal.getClass().getName() == java.util.ArrayDeque.class
arg1.getClass().getName() == org.washcom.cardgames.battleroyale.Player[].class
arg1[] contains no nulls and has only one value, of length 3
arg1[].name contains no nulls and has only one value, of length 3
arg1[].name.toString == [Joe, Patrick, Nolan]
arg1[].name.toString elements one of { "Joe", "Nolan", "Patrick" }
arg1[].hand contains no nulls and has only one value, of length 3
arg1[].hand.internal contains no nulls and has only one value, of length 3
arg1[].hand.internal.getClass().getName() == [java.util.ArrayDeque, java.util.ArrayDeque, java.util.ArrayDeque]
arg1[].hand.internal.getClass().getName() elements == java.util.ArrayDeque.class
arg1[].hand.random contains no nulls and has only one value, of length 3
size(arg1[]) == 3
arg0.internal.getClass().getName() != arg1.getClass().getName()
arg0.internal.getClass().getName() in arg1[].hand.internal.getClass().getName()
===========================================================================
org.washcom.cardgames.core.DeckDealer.dealFairly(org.washcom.cardgames.core.Deck, org.washcom.cardgames.core.Player[]):::EXIT
arg0.internal == orig(arg0.internal)
arg0.internal.getClass().getName() == orig(arg0.internal.getClass().getName())
arg0.random == orig(arg0.random)
arg1[] == orig(arg1[])
arg1[].name == orig(arg1[].name)
arg1[].hand == orig(arg1[].hand)
arg1[].hand.internal == orig(arg1[].hand.internal)
arg1[].hand.random == orig(arg1[].hand.random)
arg0.internal.getClass().getName() == java.util.ArrayDeque.class
arg1[] contains no nulls and has only one value, of length 3
arg1[].name contains no nulls and has only one value, of length 3
arg1[].name.toString == [Joe, Patrick, Nolan]
arg1[].name.toString elements one of { "Joe", "Nolan", "Patrick" }
arg1[].hand contains no nulls and has only one value, of length 3
arg1[].hand.internal contains no nulls and has only one value, of length 3
arg1[].hand.internal.getClass().getName() == [java.util.ArrayDeque, java.util.ArrayDeque, java.util.ArrayDeque]
arg1[].hand.internal.getClass().getName() elements == java.util.ArrayDeque.class
arg1[].hand.random contains no nulls and has only one value, of length 3
arg0.internal.getClass().getName() in arg1[].hand.internal.getClass().getName()
arg0.internal.getClass().getName() != orig(arg1.getClass().getName())
===========================================================================
org.washcom.cardgames.core.Denomination:::CLASS
org.washcom.cardgames.core.Denomination.TWO has only one value
org.washcom.cardgames.core.Denomination.TWO != null
org.washcom.cardgames.core.Denomination.THREE has only one value
org.washcom.cardgames.core.Denomination.THREE != null
org.washcom.cardgames.core.Denomination.FOUR has only one value
org.washcom.cardgames.core.Denomination.FOUR != null
org.washcom.cardgames.core.Denomination.FIVE has only one value
org.washcom.cardgames.core.Denomination.FIVE != null
org.washcom.cardgames.core.Denomination.SIX has only one value
org.washcom.cardgames.core.Denomination.SIX != null
org.washcom.cardgames.core.Denomination.SEVEN has only one value
org.washcom.cardgames.core.Denomination.SEVEN != null
org.washcom.cardgames.core.Denomination.EIGHT has only one value
org.washcom.cardgames.core.Denomination.EIGHT != null
org.washcom.cardgames.core.Denomination.NINE has only one value
org.washcom.cardgames.core.Denomination.NINE != null
org.washcom.cardgames.core.Denomination.TEN has only one value
org.washcom.cardgames.core.Denomination.TEN != null
org.washcom.cardgames.core.Denomination.JACK has only one value
org.washcom.cardgames.core.Denomination.JACK != null
org.washcom.cardgames.core.Denomination.QUEEN has only one value
org.washcom.cardgames.core.Denomination.QUEEN != null
org.washcom.cardgames.core.Denomination.KING has only one value
org.washcom.cardgames.core.Denomination.KING != null
org.washcom.cardgames.core.Denomination.ACE has only one value
org.washcom.cardgames.core.Denomination.ACE != null
org.washcom.cardgames.core.Denomination.TWO.value has only one value
org.washcom.cardgames.core.Denomination.TWO.value != null
org.washcom.cardgames.core.Denomination.TWO.royalty == false
org.washcom.cardgames.core.Denomination.$VALUES has only one value
org.washcom.cardgames.core.Denomination.$VALUES != null
org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName() == org.washcom.cardgames.core.Denomination[].class
org.washcom.cardgames.core.Denomination.$VALUES[] contains no nulls and has only one value, of length 13
org.washcom.cardgames.core.Denomination.$VALUES[] elements != null
org.washcom.cardgames.core.Denomination.$VALUES[].getClass().getName() == [org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination, org.washcom.cardgames.core.Denomination]
org.washcom.cardgames.core.Denomination.$VALUES[].getClass().getName() elements == org.washcom.cardgames.core.Denomination.class
org.washcom.cardgames.core.Denomination.$VALUES[].value contains no nulls and has only one value, of length 13
org.washcom.cardgames.core.Denomination.$VALUES[].royalty == [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0]
org.washcom.cardgames.core.Denomination.THREE.value has only one value
org.washcom.cardgames.core.Denomination.THREE.value != null
org.washcom.cardgames.core.Denomination.THREE.royalty == false
org.washcom.cardgames.core.Denomination.FOUR.value has only one value
org.washcom.cardgames.core.Denomination.FOUR.value != null
org.washcom.cardgames.core.Denomination.FOUR.royalty == false
org.washcom.cardgames.core.Denomination.FIVE.value has only one value
org.washcom.cardgames.core.Denomination.FIVE.value != null
org.washcom.cardgames.core.Denomination.FIVE.royalty == false
org.washcom.cardgames.core.Denomination.SIX.value has only one value
org.washcom.cardgames.core.Denomination.SIX.value != null
org.washcom.cardgames.core.Denomination.SIX.royalty == false
org.washcom.cardgames.core.Denomination.SEVEN.value has only one value
org.washcom.cardgames.core.Denomination.SEVEN.value != null
org.washcom.cardgames.core.Denomination.SEVEN.royalty == false
org.washcom.cardgames.core.Denomination.EIGHT.value has only one value
org.washcom.cardgames.core.Denomination.EIGHT.value != null
org.washcom.cardgames.core.Denomination.EIGHT.royalty == false
org.washcom.cardgames.core.Denomination.NINE.value has only one value
org.washcom.cardgames.core.Denomination.NINE.value != null
org.washcom.cardgames.core.Denomination.NINE.royalty == false
org.washcom.cardgames.core.Denomination.TEN.value has only one value
org.washcom.cardgames.core.Denomination.TEN.value != null
org.washcom.cardgames.core.Denomination.TEN.royalty == false
org.washcom.cardgames.core.Denomination.JACK.value has only one value
org.washcom.cardgames.core.Denomination.JACK.value != null
org.washcom.cardgames.core.Denomination.JACK.royalty == true
org.washcom.cardgames.core.Denomination.QUEEN.value has only one value
org.washcom.cardgames.core.Denomination.QUEEN.value != null
org.washcom.cardgames.core.Denomination.QUEEN.royalty == true
org.washcom.cardgames.core.Denomination.KING.value has only one value
org.washcom.cardgames.core.Denomination.KING.value != null
org.washcom.cardgames.core.Denomination.KING.royalty == true
org.washcom.cardgames.core.Denomination.ACE.value has only one value
org.washcom.cardgames.core.Denomination.ACE.value != null
org.washcom.cardgames.core.Denomination.ACE.royalty == false
size(org.washcom.cardgames.core.Denomination.$VALUES[]) == 13
===========================================================================
org.washcom.cardgames.core.Denomination:::OBJECT
this.value != null
===========================================================================
org.washcom.cardgames.core.Denomination.Denomination(java.lang.String, int, int):::ENTER
===========================================================================
org.washcom.cardgames.core.Denomination.Denomination(java.lang.String, int, int):::EXIT
arg0.toString == orig(arg0.toString)
this.royalty == false
===========================================================================
org.washcom.cardgames.core.Denomination.Denomination(java.lang.String, int, java.lang.Integer, boolean):::ENTER
arg0 != null
arg2 != null
===========================================================================
org.washcom.cardgames.core.Denomination.Denomination(java.lang.String, int, java.lang.Integer, boolean):::EXIT
this.value == orig(arg2)
this.royalty == orig(arg3)
arg0.toString == orig(arg0.toString)
===========================================================================
org.washcom.cardgames.core.Denomination.getValue():::ENTER
===========================================================================
org.washcom.cardgames.core.Denomination.getValue():::EXIT
org.washcom.cardgames.core.Denomination.TWO == orig(org.washcom.cardgames.core.Denomination.TWO)
org.washcom.cardgames.core.Denomination.THREE == orig(org.washcom.cardgames.core.Denomination.THREE)
org.washcom.cardgames.core.Denomination.FOUR == orig(org.washcom.cardgames.core.Denomination.FOUR)
org.washcom.cardgames.core.Denomination.FIVE == orig(org.washcom.cardgames.core.Denomination.FIVE)
org.washcom.cardgames.core.Denomination.SIX == orig(org.washcom.cardgames.core.Denomination.SIX)
org.washcom.cardgames.core.Denomination.SEVEN == orig(org.washcom.cardgames.core.Denomination.SEVEN)
org.washcom.cardgames.core.Denomination.EIGHT == orig(org.washcom.cardgames.core.Denomination.EIGHT)
org.washcom.cardgames.core.Denomination.NINE == orig(org.washcom.cardgames.core.Denomination.NINE)
org.washcom.cardgames.core.Denomination.TEN == orig(org.washcom.cardgames.core.Denomination.TEN)
org.washcom.cardgames.core.Denomination.JACK == orig(org.washcom.cardgames.core.Denomination.JACK)
org.washcom.cardgames.core.Denomination.QUEEN == orig(org.washcom.cardgames.core.Denomination.QUEEN)
org.washcom.cardgames.core.Denomination.KING == orig(org.washcom.cardgames.core.Denomination.KING)
org.washcom.cardgames.core.Denomination.ACE == orig(org.washcom.cardgames.core.Denomination.ACE)
org.washcom.cardgames.core.Denomination.TWO.value == orig(org.washcom.cardgames.core.Denomination.TWO.value)
org.washcom.cardgames.core.Denomination.TWO.royalty == orig(org.washcom.cardgames.core.Denomination.TWO.royalty)
org.washcom.cardgames.core.Denomination.$VALUES == orig(org.washcom.cardgames.core.Denomination.$VALUES)
org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName())
org.washcom.cardgames.core.Denomination.$VALUES[] == orig(org.washcom.cardgames.core.Denomination.$VALUES[])
org.washcom.cardgames.core.Denomination.$VALUES[].value == orig(org.washcom.cardgames.core.Denomination.$VALUES[].value)
org.washcom.cardgames.core.Denomination.$VALUES[].royalty == orig(org.washcom.cardgames.core.Denomination.$VALUES[].royalty)
org.washcom.cardgames.core.Denomination.THREE.value == orig(org.washcom.cardgames.core.Denomination.THREE.value)
org.washcom.cardgames.core.Denomination.THREE.royalty == orig(org.washcom.cardgames.core.Denomination.THREE.royalty)
org.washcom.cardgames.core.Denomination.FOUR.value == orig(org.washcom.cardgames.core.Denomination.FOUR.value)
org.washcom.cardgames.core.Denomination.FOUR.royalty == orig(org.washcom.cardgames.core.Denomination.FOUR.royalty)
org.washcom.cardgames.core.Denomination.FIVE.value == orig(org.washcom.cardgames.core.Denomination.FIVE.value)
org.washcom.cardgames.core.Denomination.FIVE.royalty == orig(org.washcom.cardgames.core.Denomination.FIVE.royalty)
org.washcom.cardgames.core.Denomination.SIX.value == orig(org.washcom.cardgames.core.Denomination.SIX.value)
org.washcom.cardgames.core.Denomination.SIX.royalty == orig(org.washcom.cardgames.core.Denomination.SIX.royalty)
org.washcom.cardgames.core.Denomination.SEVEN.value == orig(org.washcom.cardgames.core.Denomination.SEVEN.value)
org.washcom.cardgames.core.Denomination.SEVEN.royalty == orig(org.washcom.cardgames.core.Denomination.SEVEN.royalty)
org.washcom.cardgames.core.Denomination.EIGHT.value == orig(org.washcom.cardgames.core.Denomination.EIGHT.value)
org.washcom.cardgames.core.Denomination.EIGHT.royalty == orig(org.washcom.cardgames.core.Denomination.EIGHT.royalty)
org.washcom.cardgames.core.Denomination.NINE.value == orig(org.washcom.cardgames.core.Denomination.NINE.value)
org.washcom.cardgames.core.Denomination.NINE.royalty == orig(org.washcom.cardgames.core.Denomination.NINE.royalty)
org.washcom.cardgames.core.Denomination.TEN.value == orig(org.washcom.cardgames.core.Denomination.TEN.value)
org.washcom.cardgames.core.Denomination.TEN.royalty == orig(org.washcom.cardgames.core.Denomination.TEN.royalty)
org.washcom.cardgames.core.Denomination.JACK.value == orig(org.washcom.cardgames.core.Denomination.JACK.value)
org.washcom.cardgames.core.Denomination.JACK.royalty == orig(org.washcom.cardgames.core.Denomination.JACK.royalty)
org.washcom.cardgames.core.Denomination.QUEEN.value == orig(org.washcom.cardgames.core.Denomination.QUEEN.value)
org.washcom.cardgames.core.Denomination.QUEEN.royalty == orig(org.washcom.cardgames.core.Denomination.QUEEN.royalty)
org.washcom.cardgames.core.Denomination.KING.value == orig(org.washcom.cardgames.core.Denomination.KING.value)
org.washcom.cardgames.core.Denomination.KING.royalty == orig(org.washcom.cardgames.core.Denomination.KING.royalty)
org.washcom.cardgames.core.Denomination.ACE.value == orig(org.washcom.cardgames.core.Denomination.ACE.value)
org.washcom.cardgames.core.Denomination.ACE.royalty == orig(org.washcom.cardgames.core.Denomination.ACE.royalty)
this.value == orig(this.value)
this.royalty == orig(this.royalty)
return >= 2
===========================================================================
org.washcom.cardgames.core.Denomination.isRoyalty():::ENTER
===========================================================================
org.washcom.cardgames.core.Denomination.isRoyalty():::EXIT
org.washcom.cardgames.core.Denomination.TWO == orig(org.washcom.cardgames.core.Denomination.TWO)
org.washcom.cardgames.core.Denomination.THREE == orig(org.washcom.cardgames.core.Denomination.THREE)
org.washcom.cardgames.core.Denomination.FOUR == orig(org.washcom.cardgames.core.Denomination.FOUR)
org.washcom.cardgames.core.Denomination.FIVE == orig(org.washcom.cardgames.core.Denomination.FIVE)
org.washcom.cardgames.core.Denomination.SIX == orig(org.washcom.cardgames.core.Denomination.SIX)
org.washcom.cardgames.core.Denomination.SEVEN == orig(org.washcom.cardgames.core.Denomination.SEVEN)
org.washcom.cardgames.core.Denomination.EIGHT == orig(org.washcom.cardgames.core.Denomination.EIGHT)
org.washcom.cardgames.core.Denomination.NINE == orig(org.washcom.cardgames.core.Denomination.NINE)
org.washcom.cardgames.core.Denomination.TEN == orig(org.washcom.cardgames.core.Denomination.TEN)
org.washcom.cardgames.core.Denomination.JACK == orig(org.washcom.cardgames.core.Denomination.JACK)
org.washcom.cardgames.core.Denomination.QUEEN == orig(org.washcom.cardgames.core.Denomination.QUEEN)
org.washcom.cardgames.core.Denomination.KING == orig(org.washcom.cardgames.core.Denomination.KING)
org.washcom.cardgames.core.Denomination.ACE == orig(org.washcom.cardgames.core.Denomination.ACE)
org.washcom.cardgames.core.Denomination.TWO.value == orig(org.washcom.cardgames.core.Denomination.TWO.value)
org.washcom.cardgames.core.Denomination.TWO.royalty == orig(org.washcom.cardgames.core.Denomination.TWO.royalty)
org.washcom.cardgames.core.Denomination.$VALUES == orig(org.washcom.cardgames.core.Denomination.$VALUES)
org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName())
org.washcom.cardgames.core.Denomination.$VALUES[] == orig(org.washcom.cardgames.core.Denomination.$VALUES[])
org.washcom.cardgames.core.Denomination.$VALUES[].value == orig(org.washcom.cardgames.core.Denomination.$VALUES[].value)
org.washcom.cardgames.core.Denomination.$VALUES[].royalty == orig(org.washcom.cardgames.core.Denomination.$VALUES[].royalty)
org.washcom.cardgames.core.Denomination.THREE.value == orig(org.washcom.cardgames.core.Denomination.THREE.value)
org.washcom.cardgames.core.Denomination.THREE.royalty == orig(org.washcom.cardgames.core.Denomination.THREE.royalty)
org.washcom.cardgames.core.Denomination.FOUR.value == orig(org.washcom.cardgames.core.Denomination.FOUR.value)
org.washcom.cardgames.core.Denomination.FOUR.royalty == orig(org.washcom.cardgames.core.Denomination.FOUR.royalty)
org.washcom.cardgames.core.Denomination.FIVE.value == orig(org.washcom.cardgames.core.Denomination.FIVE.value)
org.washcom.cardgames.core.Denomination.FIVE.royalty == orig(org.washcom.cardgames.core.Denomination.FIVE.royalty)
org.washcom.cardgames.core.Denomination.SIX.value == orig(org.washcom.cardgames.core.Denomination.SIX.value)
org.washcom.cardgames.core.Denomination.SIX.royalty == orig(org.washcom.cardgames.core.Denomination.SIX.royalty)
org.washcom.cardgames.core.Denomination.SEVEN.value == orig(org.washcom.cardgames.core.Denomination.SEVEN.value)
org.washcom.cardgames.core.Denomination.SEVEN.royalty == orig(org.washcom.cardgames.core.Denomination.SEVEN.royalty)
org.washcom.cardgames.core.Denomination.EIGHT.value == orig(org.washcom.cardgames.core.Denomination.EIGHT.value)
org.washcom.cardgames.core.Denomination.EIGHT.royalty == orig(org.washcom.cardgames.core.Denomination.EIGHT.royalty)
org.washcom.cardgames.core.Denomination.NINE.value == orig(org.washcom.cardgames.core.Denomination.NINE.value)
org.washcom.cardgames.core.Denomination.NINE.royalty == orig(org.washcom.cardgames.core.Denomination.NINE.royalty)
org.washcom.cardgames.core.Denomination.TEN.value == orig(org.washcom.cardgames.core.Denomination.TEN.value)
org.washcom.cardgames.core.Denomination.TEN.royalty == orig(org.washcom.cardgames.core.Denomination.TEN.royalty)
org.washcom.cardgames.core.Denomination.JACK.value == orig(org.washcom.cardgames.core.Denomination.JACK.value)
org.washcom.cardgames.core.Denomination.JACK.royalty == orig(org.washcom.cardgames.core.Denomination.JACK.royalty)
org.washcom.cardgames.core.Denomination.QUEEN.value == orig(org.washcom.cardgames.core.Denomination.QUEEN.value)
org.washcom.cardgames.core.Denomination.QUEEN.royalty == orig(org.washcom.cardgames.core.Denomination.QUEEN.royalty)
org.washcom.cardgames.core.Denomination.KING.value == orig(org.washcom.cardgames.core.Denomination.KING.value)
org.washcom.cardgames.core.Denomination.KING.royalty == orig(org.washcom.cardgames.core.Denomination.KING.royalty)
org.washcom.cardgames.core.Denomination.ACE.value == orig(org.washcom.cardgames.core.Denomination.ACE.value)
org.washcom.cardgames.core.Denomination.ACE.royalty == orig(org.washcom.cardgames.core.Denomination.ACE.royalty)
this.value == orig(this.value)
this.royalty == orig(this.royalty)
(this.royalty == false)  <==>  (return == false)
(this.royalty == true)  <==>  (return == true)
===========================================================================
org.washcom.cardgames.core.Denomination.isRoyalty():::EXIT;condition="return == true"
this.royalty == true
return == true
===========================================================================
org.washcom.cardgames.core.Denomination.isRoyalty():::EXIT;condition="not(return == true)"
this.royalty == false
return == false
===========================================================================
org.washcom.cardgames.core.Denomination.toString():::ENTER
===========================================================================
org.washcom.cardgames.core.Denomination.toString():::EXIT
org.washcom.cardgames.core.Denomination.TWO == orig(org.washcom.cardgames.core.Denomination.TWO)
org.washcom.cardgames.core.Denomination.THREE == orig(org.washcom.cardgames.core.Denomination.THREE)
org.washcom.cardgames.core.Denomination.FOUR == orig(org.washcom.cardgames.core.Denomination.FOUR)
org.washcom.cardgames.core.Denomination.FIVE == orig(org.washcom.cardgames.core.Denomination.FIVE)
org.washcom.cardgames.core.Denomination.SIX == orig(org.washcom.cardgames.core.Denomination.SIX)
org.washcom.cardgames.core.Denomination.SEVEN == orig(org.washcom.cardgames.core.Denomination.SEVEN)
org.washcom.cardgames.core.Denomination.EIGHT == orig(org.washcom.cardgames.core.Denomination.EIGHT)
org.washcom.cardgames.core.Denomination.NINE == orig(org.washcom.cardgames.core.Denomination.NINE)
org.washcom.cardgames.core.Denomination.TEN == orig(org.washcom.cardgames.core.Denomination.TEN)
org.washcom.cardgames.core.Denomination.JACK == orig(org.washcom.cardgames.core.Denomination.JACK)
org.washcom.cardgames.core.Denomination.QUEEN == orig(org.washcom.cardgames.core.Denomination.QUEEN)
org.washcom.cardgames.core.Denomination.KING == orig(org.washcom.cardgames.core.Denomination.KING)
org.washcom.cardgames.core.Denomination.ACE == orig(org.washcom.cardgames.core.Denomination.ACE)
org.washcom.cardgames.core.Denomination.TWO.value == orig(org.washcom.cardgames.core.Denomination.TWO.value)
org.washcom.cardgames.core.Denomination.TWO.royalty == orig(org.washcom.cardgames.core.Denomination.TWO.royalty)
org.washcom.cardgames.core.Denomination.$VALUES == orig(org.washcom.cardgames.core.Denomination.$VALUES)
org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName())
org.washcom.cardgames.core.Denomination.$VALUES[] == orig(org.washcom.cardgames.core.Denomination.$VALUES[])
org.washcom.cardgames.core.Denomination.$VALUES[].value == orig(org.washcom.cardgames.core.Denomination.$VALUES[].value)
org.washcom.cardgames.core.Denomination.$VALUES[].royalty == orig(org.washcom.cardgames.core.Denomination.$VALUES[].royalty)
org.washcom.cardgames.core.Denomination.THREE.value == orig(org.washcom.cardgames.core.Denomination.THREE.value)
org.washcom.cardgames.core.Denomination.THREE.royalty == orig(org.washcom.cardgames.core.Denomination.THREE.royalty)
org.washcom.cardgames.core.Denomination.FOUR.value == orig(org.washcom.cardgames.core.Denomination.FOUR.value)
org.washcom.cardgames.core.Denomination.FOUR.royalty == orig(org.washcom.cardgames.core.Denomination.FOUR.royalty)
org.washcom.cardgames.core.Denomination.FIVE.value == orig(org.washcom.cardgames.core.Denomination.FIVE.value)
org.washcom.cardgames.core.Denomination.FIVE.royalty == orig(org.washcom.cardgames.core.Denomination.FIVE.royalty)
org.washcom.cardgames.core.Denomination.SIX.value == orig(org.washcom.cardgames.core.Denomination.SIX.value)
org.washcom.cardgames.core.Denomination.SIX.royalty == orig(org.washcom.cardgames.core.Denomination.SIX.royalty)
org.washcom.cardgames.core.Denomination.SEVEN.value == orig(org.washcom.cardgames.core.Denomination.SEVEN.value)
org.washcom.cardgames.core.Denomination.SEVEN.royalty == orig(org.washcom.cardgames.core.Denomination.SEVEN.royalty)
org.washcom.cardgames.core.Denomination.EIGHT.value == orig(org.washcom.cardgames.core.Denomination.EIGHT.value)
org.washcom.cardgames.core.Denomination.EIGHT.royalty == orig(org.washcom.cardgames.core.Denomination.EIGHT.royalty)
org.washcom.cardgames.core.Denomination.NINE.value == orig(org.washcom.cardgames.core.Denomination.NINE.value)
org.washcom.cardgames.core.Denomination.NINE.royalty == orig(org.washcom.cardgames.core.Denomination.NINE.royalty)
org.washcom.cardgames.core.Denomination.TEN.value == orig(org.washcom.cardgames.core.Denomination.TEN.value)
org.washcom.cardgames.core.Denomination.TEN.royalty == orig(org.washcom.cardgames.core.Denomination.TEN.royalty)
org.washcom.cardgames.core.Denomination.JACK.value == orig(org.washcom.cardgames.core.Denomination.JACK.value)
org.washcom.cardgames.core.Denomination.JACK.royalty == orig(org.washcom.cardgames.core.Denomination.JACK.royalty)
org.washcom.cardgames.core.Denomination.QUEEN.value == orig(org.washcom.cardgames.core.Denomination.QUEEN.value)
org.washcom.cardgames.core.Denomination.QUEEN.royalty == orig(org.washcom.cardgames.core.Denomination.QUEEN.royalty)
org.washcom.cardgames.core.Denomination.KING.value == orig(org.washcom.cardgames.core.Denomination.KING.value)
org.washcom.cardgames.core.Denomination.KING.royalty == orig(org.washcom.cardgames.core.Denomination.KING.royalty)
org.washcom.cardgames.core.Denomination.ACE.value == orig(org.washcom.cardgames.core.Denomination.ACE.value)
org.washcom.cardgames.core.Denomination.ACE.royalty == orig(org.washcom.cardgames.core.Denomination.ACE.royalty)
this.value == orig(this.value)
this.royalty == orig(this.royalty)
return != null
===========================================================================
org.washcom.cardgames.core.Denomination.values():::ENTER
===========================================================================
org.washcom.cardgames.core.Denomination.values():::EXIT
org.washcom.cardgames.core.Denomination.TWO == orig(org.washcom.cardgames.core.Denomination.TWO)
org.washcom.cardgames.core.Denomination.THREE == orig(org.washcom.cardgames.core.Denomination.THREE)
org.washcom.cardgames.core.Denomination.FOUR == orig(org.washcom.cardgames.core.Denomination.FOUR)
org.washcom.cardgames.core.Denomination.FIVE == orig(org.washcom.cardgames.core.Denomination.FIVE)
org.washcom.cardgames.core.Denomination.SIX == orig(org.washcom.cardgames.core.Denomination.SIX)
org.washcom.cardgames.core.Denomination.SEVEN == orig(org.washcom.cardgames.core.Denomination.SEVEN)
org.washcom.cardgames.core.Denomination.EIGHT == orig(org.washcom.cardgames.core.Denomination.EIGHT)
org.washcom.cardgames.core.Denomination.NINE == orig(org.washcom.cardgames.core.Denomination.NINE)
org.washcom.cardgames.core.Denomination.TEN == orig(org.washcom.cardgames.core.Denomination.TEN)
org.washcom.cardgames.core.Denomination.JACK == orig(org.washcom.cardgames.core.Denomination.JACK)
org.washcom.cardgames.core.Denomination.QUEEN == orig(org.washcom.cardgames.core.Denomination.QUEEN)
org.washcom.cardgames.core.Denomination.KING == orig(org.washcom.cardgames.core.Denomination.KING)
org.washcom.cardgames.core.Denomination.ACE == orig(org.washcom.cardgames.core.Denomination.ACE)
org.washcom.cardgames.core.Denomination.TWO.value == orig(org.washcom.cardgames.core.Denomination.TWO.value)
org.washcom.cardgames.core.Denomination.TWO.royalty == orig(org.washcom.cardgames.core.Denomination.TWO.royalty)
org.washcom.cardgames.core.Denomination.$VALUES == orig(org.washcom.cardgames.core.Denomination.$VALUES)
org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName() == return.getClass().getName()
org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Denomination.$VALUES.getClass().getName())
org.washcom.cardgames.core.Denomination.$VALUES[] == orig(org.washcom.cardgames.core.Denomination.$VALUES[])
org.washcom.cardgames.core.Denomination.$VALUES[].value == orig(org.washcom.cardgames.core.Denomination.$VALUES[].value)
org.washcom.cardgames.core.Denomination.$VALUES[].royalty == orig(org.washcom.cardgames.core.Denomination.$VALUES[].royalty)
org.washcom.cardgames.core.Denomination.THREE.value == orig(org.washcom.cardgames.core.Denomination.THREE.value)
org.washcom.cardgames.core.Denomination.THREE.royalty == orig(org.washcom.cardgames.core.Denomination.THREE.royalty)
org.washcom.cardgames.core.Denomination.FOUR.value == orig(org.washcom.cardgames.core.Denomination.FOUR.value)
org.washcom.cardgames.core.Denomination.FOUR.royalty == orig(org.washcom.cardgames.core.Denomination.FOUR.royalty)
org.washcom.cardgames.core.Denomination.FIVE.value == orig(org.washcom.cardgames.core.Denomination.FIVE.value)
org.washcom.cardgames.core.Denomination.FIVE.royalty == orig(org.washcom.cardgames.core.Denomination.FIVE.royalty)
org.washcom.cardgames.core.Denomination.SIX.value == orig(org.washcom.cardgames.core.Denomination.SIX.value)
org.washcom.cardgames.core.Denomination.SIX.royalty == orig(org.washcom.cardgames.core.Denomination.SIX.royalty)
org.washcom.cardgames.core.Denomination.SEVEN.value == orig(org.washcom.cardgames.core.Denomination.SEVEN.value)
org.washcom.cardgames.core.Denomination.SEVEN.royalty == orig(org.washcom.cardgames.core.Denomination.SEVEN.royalty)
org.washcom.cardgames.core.Denomination.EIGHT.value == orig(org.washcom.cardgames.core.Denomination.EIGHT.value)
org.washcom.cardgames.core.Denomination.EIGHT.royalty == orig(org.washcom.cardgames.core.Denomination.EIGHT.royalty)
org.washcom.cardgames.core.Denomination.NINE.value == orig(org.washcom.cardgames.core.Denomination.NINE.value)
org.washcom.cardgames.core.Denomination.NINE.royalty == orig(org.washcom.cardgames.core.Denomination.NINE.royalty)
org.washcom.cardgames.core.Denomination.TEN.value == orig(org.washcom.cardgames.core.Denomination.TEN.value)
org.washcom.cardgames.core.Denomination.TEN.royalty == orig(org.washcom.cardgames.core.Denomination.TEN.royalty)
org.washcom.cardgames.core.Denomination.JACK.value == orig(org.washcom.cardgames.core.Denomination.JACK.value)
org.washcom.cardgames.core.Denomination.JACK.royalty == orig(org.washcom.cardgames.core.Denomination.JACK.royalty)
org.washcom.cardgames.core.Denomination.QUEEN.value == orig(org.washcom.cardgames.core.Denomination.QUEEN.value)
org.washcom.cardgames.core.Denomination.QUEEN.royalty == orig(org.washcom.cardgames.core.Denomination.QUEEN.royalty)
org.washcom.cardgames.core.Denomination.KING.value == orig(org.washcom.cardgames.core.Denomination.KING.value)
org.washcom.cardgames.core.Denomination.KING.royalty == orig(org.washcom.cardgames.core.Denomination.KING.royalty)
org.washcom.cardgames.core.Denomination.ACE.value == orig(org.washcom.cardgames.core.Denomination.ACE.value)
org.washcom.cardgames.core.Denomination.ACE.royalty == orig(org.washcom.cardgames.core.Denomination.ACE.royalty)
return != null
return[] contains no nulls and has only one value, of length 13
return[] elements != null
return[].value contains no nulls and has only one value, of length 13
return[].royalty == [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0]
size(return[]) == 13
org.washcom.cardgames.core.Denomination.TWO in return[]
org.washcom.cardgames.core.Denomination.THREE in return[]
org.washcom.cardgames.core.Denomination.FOUR in return[]
org.washcom.cardgames.core.Denomination.FIVE in return[]
org.washcom.cardgames.core.Denomination.SIX in return[]
org.washcom.cardgames.core.Denomination.SEVEN in return[]
org.washcom.cardgames.core.Denomination.EIGHT in return[]
org.washcom.cardgames.core.Denomination.NINE in return[]
org.washcom.cardgames.core.Denomination.TEN in return[]
org.washcom.cardgames.core.Denomination.JACK in return[]
org.washcom.cardgames.core.Denomination.QUEEN in return[]
org.washcom.cardgames.core.Denomination.KING in return[]
org.washcom.cardgames.core.Denomination.ACE in return[]
===========================================================================
org.washcom.cardgames.core.Player:::OBJECT
this.name != null
this.hand != null
this.hand.internal != null
this.hand.internal.getClass().getName() == java.util.ArrayDeque.class
this.hand.random != null
===========================================================================
org.washcom.cardgames.core.Player.Player(java.lang.String):::ENTER
===========================================================================
org.washcom.cardgames.core.Player.Player(java.lang.String):::EXIT
this.name == orig(arg0)
arg0.toString == orig(arg0.toString)
===========================================================================
org.washcom.cardgames.core.Player.equals(java.lang.Object):::ENTER
this.name.toString one of { "Joe", "Nolan", "Patrick" }
arg0 != null
arg0.getClass().getName() == org.washcom.cardgames.battleroyale.Player.class
this.hand.internal.getClass().getName() != arg0.getClass().getName()
===========================================================================
org.washcom.cardgames.core.Player.equals(java.lang.Object):::EXIT60
return == false
===========================================================================
org.washcom.cardgames.core.Player.equals(java.lang.Object):::EXIT60;condition="not(return == true)"
===========================================================================
org.washcom.cardgames.core.Player.equals(java.lang.Object):::EXIT62
return == true
===========================================================================
org.washcom.cardgames.core.Player.equals(java.lang.Object):::EXIT62;condition="return == true"
===========================================================================
org.washcom.cardgames.core.Player.equals(java.lang.Object):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.hand == orig(this.hand)
this.hand.internal == orig(this.hand.internal)
this.hand.internal.getClass().getName() == orig(this.hand.internal.getClass().getName())
this.hand.random == orig(this.hand.random)
this.name.toString one of { "Joe", "Nolan", "Patrick" }
this.hand.internal.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
org.washcom.cardgames.core.Player.equals(java.lang.Object):::EXIT;condition="return == true"
return == true
===========================================================================
org.washcom.cardgames.core.Player.equals(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.washcom.cardgames.core.Player.getHand():::ENTER
this.name.toString one of { "Joe", "Nolan", "Patrick" }
===========================================================================
org.washcom.cardgames.core.Player.getHand():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.hand == return
this.hand.internal == return.internal
this.hand.internal.getClass().getName() == return.internal.getClass().getName()
this.hand.random == return.random
return == orig(this.hand)
return.internal == orig(this.hand.internal)
return.internal.getClass().getName() == orig(this.hand.internal.getClass().getName())
return.random == orig(this.hand.random)
this.name.toString one of { "Joe", "Nolan", "Patrick" }
return != null
return.internal != null
return.internal.getClass().getName() == java.util.ArrayDeque.class
return.random != null
===========================================================================
org.washcom.cardgames.core.Player.handHasAtLeast(int):::ENTER
this.name.toString one of { "Joe", "Nolan", "Patrick" }
arg0 == 1
===========================================================================
org.washcom.cardgames.core.Player.handHasAtLeast(int):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.hand == orig(this.hand)
this.hand.internal == orig(this.hand.internal)
this.hand.internal.getClass().getName() == orig(this.hand.internal.getClass().getName())
this.hand.random == orig(this.hand.random)
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (this.hand has only one value)
(return == false)  ==>  (this.hand.internal has only one value)
(return == false)  ==>  (this.hand.random has only one value)
(return == false)  ==>  (this.name has only one value)
(return == false)  ==>  (this.name.toString == "Joe")
(return == true)  ==>  (this.name.toString one of { "Joe", "Nolan", "Patrick" })
this.name.toString one of { "Joe", "Nolan", "Patrick" }
===========================================================================
org.washcom.cardgames.core.Player.handHasAtLeast(int):::EXIT;condition="return == true"
return == true
===========================================================================
org.washcom.cardgames.core.Player.handHasAtLeast(int):::EXIT;condition="not(return == true)"
this.name has only one value
this.name.toString == "Joe"
this.hand has only one value
this.hand.internal has only one value
this.hand.random has only one value
return == false
orig(this) has only one value
===========================================================================
org.washcom.cardgames.core.Player.hashCode():::ENTER
===========================================================================
org.washcom.cardgames.core.Player.hashCode():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.hand == orig(this.hand)
this.hand.internal == orig(this.hand.internal)
this.hand.internal.getClass().getName() == orig(this.hand.internal.getClass().getName())
this.hand.random == orig(this.hand.random)
===========================================================================
org.washcom.cardgames.core.Player.toString():::ENTER
this.name.toString one of { "Joe", "Nolan", "Patrick" }
===========================================================================
org.washcom.cardgames.core.Player.toString():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.hand == orig(this.hand)
this.hand.internal == orig(this.hand.internal)
this.hand.internal.getClass().getName() == orig(this.hand.internal.getClass().getName())
this.hand.random == orig(this.hand.random)
this.name.toString one of { "Joe", "Nolan", "Patrick" }
return != null
return.toString one of { "Joe", "Nolan", "Patrick" }
===========================================================================
org.washcom.cardgames.core.Suit:::CLASS
org.washcom.cardgames.core.Suit.HEARTS has only one value
org.washcom.cardgames.core.Suit.HEARTS != null
org.washcom.cardgames.core.Suit.DIAMONDS has only one value
org.washcom.cardgames.core.Suit.DIAMONDS != null
org.washcom.cardgames.core.Suit.SPADES has only one value
org.washcom.cardgames.core.Suit.SPADES != null
org.washcom.cardgames.core.Suit.CLUBS has only one value
org.washcom.cardgames.core.Suit.CLUBS != null
org.washcom.cardgames.core.Suit.HEARTS.color has only one value
org.washcom.cardgames.core.Suit.HEARTS.color != null
org.washcom.cardgames.core.Suit.$VALUES has only one value
org.washcom.cardgames.core.Suit.$VALUES != null
org.washcom.cardgames.core.Suit.$VALUES.getClass().getName() == org.washcom.cardgames.core.Suit[].class
org.washcom.cardgames.core.Suit.$VALUES[] contains no nulls and has only one value, of length 4
org.washcom.cardgames.core.Suit.$VALUES[] elements != null
org.washcom.cardgames.core.Suit.$VALUES[].getClass().getName() == [org.washcom.cardgames.core.Suit, org.washcom.cardgames.core.Suit, org.washcom.cardgames.core.Suit, org.washcom.cardgames.core.Suit]
org.washcom.cardgames.core.Suit.$VALUES[].getClass().getName() elements == org.washcom.cardgames.core.Suit.class
org.washcom.cardgames.core.Suit.$VALUES[].color contains no nulls and has only one value, of length 4
org.washcom.cardgames.core.Suit.$VALUES[].color elements != null
org.washcom.cardgames.core.Suit.DIAMONDS.color has only one value
org.washcom.cardgames.core.Suit.DIAMONDS.color != null
org.washcom.cardgames.core.Suit.SPADES.color has only one value
org.washcom.cardgames.core.Suit.SPADES.color != null
org.washcom.cardgames.core.Suit.CLUBS.color has only one value
org.washcom.cardgames.core.Suit.CLUBS.color != null
org.washcom.cardgames.core.Color.RED has only one value
org.washcom.cardgames.core.Color.RED != null
org.washcom.cardgames.core.Color.BLACK has only one value
org.washcom.cardgames.core.Color.BLACK != null
org.washcom.cardgames.core.Color.$VALUES has only one value
org.washcom.cardgames.core.Color.$VALUES != null
org.washcom.cardgames.core.Color.$VALUES.getClass().getName() == org.washcom.cardgames.core.Color[].class
org.washcom.cardgames.core.Color.$VALUES[] contains no nulls and has only one value, of length 2
org.washcom.cardgames.core.Color.$VALUES[] elements != null
org.washcom.cardgames.core.Color.$VALUES[].getClass().getName() == [org.washcom.cardgames.core.Color, org.washcom.cardgames.core.Color]
org.washcom.cardgames.core.Color.$VALUES[].getClass().getName() elements == org.washcom.cardgames.core.Color.class
size(org.washcom.cardgames.core.Suit.$VALUES[]) == 4
size(org.washcom.cardgames.core.Color.$VALUES[]) == 2
===========================================================================
org.washcom.cardgames.core.Suit:::OBJECT
this.color != null
===========================================================================
org.washcom.cardgames.core.Suit.Suit(java.lang.String, int, org.washcom.cardgames.core.Color):::ENTER
org.washcom.cardgames.core.Color.RED has only one value
org.washcom.cardgames.core.Color.BLACK has only one value
org.washcom.cardgames.core.Color.$VALUES has only one value
org.washcom.cardgames.core.Color.$VALUES.getClass().getName() == org.washcom.cardgames.core.Color[].class
org.washcom.cardgames.core.Color.$VALUES[] contains no nulls and has only one value, of length 2
org.washcom.cardgames.core.Color.$VALUES[].getClass().getName() == [org.washcom.cardgames.core.Color, org.washcom.cardgames.core.Color]
org.washcom.cardgames.core.Color.$VALUES[].getClass().getName() elements == org.washcom.cardgames.core.Color.class
size(org.washcom.cardgames.core.Color.$VALUES[]) == 2
===========================================================================
org.washcom.cardgames.core.Suit.Suit(java.lang.String, int, org.washcom.cardgames.core.Color):::EXIT
org.washcom.cardgames.core.Color.RED == orig(org.washcom.cardgames.core.Color.RED)
org.washcom.cardgames.core.Color.BLACK == orig(org.washcom.cardgames.core.Color.BLACK)
org.washcom.cardgames.core.Color.$VALUES == orig(org.washcom.cardgames.core.Color.$VALUES)
org.washcom.cardgames.core.Color.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Color.$VALUES.getClass().getName())
org.washcom.cardgames.core.Color.$VALUES[] == orig(org.washcom.cardgames.core.Color.$VALUES[])
this.color == orig(arg2)
arg0.toString == orig(arg0.toString)
===========================================================================
org.washcom.cardgames.core.Suit.toString():::ENTER
===========================================================================
org.washcom.cardgames.core.Suit.toString():::EXIT
org.washcom.cardgames.core.Suit.HEARTS == orig(org.washcom.cardgames.core.Suit.HEARTS)
org.washcom.cardgames.core.Suit.DIAMONDS == orig(org.washcom.cardgames.core.Suit.DIAMONDS)
org.washcom.cardgames.core.Suit.SPADES == orig(org.washcom.cardgames.core.Suit.SPADES)
org.washcom.cardgames.core.Suit.CLUBS == orig(org.washcom.cardgames.core.Suit.CLUBS)
org.washcom.cardgames.core.Suit.HEARTS.color == orig(org.washcom.cardgames.core.Suit.HEARTS.color)
org.washcom.cardgames.core.Suit.$VALUES == orig(org.washcom.cardgames.core.Suit.$VALUES)
org.washcom.cardgames.core.Suit.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Suit.$VALUES.getClass().getName())
org.washcom.cardgames.core.Suit.$VALUES[] == orig(org.washcom.cardgames.core.Suit.$VALUES[])
org.washcom.cardgames.core.Suit.$VALUES[].color == orig(org.washcom.cardgames.core.Suit.$VALUES[].color)
org.washcom.cardgames.core.Suit.DIAMONDS.color == orig(org.washcom.cardgames.core.Suit.DIAMONDS.color)
org.washcom.cardgames.core.Suit.SPADES.color == orig(org.washcom.cardgames.core.Suit.SPADES.color)
org.washcom.cardgames.core.Suit.CLUBS.color == orig(org.washcom.cardgames.core.Suit.CLUBS.color)
org.washcom.cardgames.core.Color.RED == orig(org.washcom.cardgames.core.Color.RED)
org.washcom.cardgames.core.Color.BLACK == orig(org.washcom.cardgames.core.Color.BLACK)
org.washcom.cardgames.core.Color.$VALUES == orig(org.washcom.cardgames.core.Color.$VALUES)
org.washcom.cardgames.core.Color.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Color.$VALUES.getClass().getName())
org.washcom.cardgames.core.Color.$VALUES[] == orig(org.washcom.cardgames.core.Color.$VALUES[])
this.color == orig(this.color)
return != null
===========================================================================
org.washcom.cardgames.core.Suit.values():::ENTER
org.washcom.cardgames.core.Suit.HEARTS.color == org.washcom.cardgames.core.Suit.DIAMONDS.color
org.washcom.cardgames.core.Suit.SPADES.color == org.washcom.cardgames.core.Suit.CLUBS.color
org.washcom.cardgames.core.Suit.$VALUES.getClass().getName() != org.washcom.cardgames.core.Color.$VALUES.getClass().getName()
===========================================================================
org.washcom.cardgames.core.Suit.values():::EXIT
org.washcom.cardgames.core.Suit.HEARTS == orig(org.washcom.cardgames.core.Suit.HEARTS)
org.washcom.cardgames.core.Suit.DIAMONDS == orig(org.washcom.cardgames.core.Suit.DIAMONDS)
org.washcom.cardgames.core.Suit.SPADES == orig(org.washcom.cardgames.core.Suit.SPADES)
org.washcom.cardgames.core.Suit.CLUBS == orig(org.washcom.cardgames.core.Suit.CLUBS)
org.washcom.cardgames.core.Suit.HEARTS.color == org.washcom.cardgames.core.Suit.DIAMONDS.color
org.washcom.cardgames.core.Suit.HEARTS.color == orig(org.washcom.cardgames.core.Suit.HEARTS.color)
org.washcom.cardgames.core.Suit.HEARTS.color == orig(org.washcom.cardgames.core.Suit.DIAMONDS.color)
org.washcom.cardgames.core.Suit.$VALUES == orig(org.washcom.cardgames.core.Suit.$VALUES)
org.washcom.cardgames.core.Suit.$VALUES.getClass().getName() == return.getClass().getName()
org.washcom.cardgames.core.Suit.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Suit.$VALUES.getClass().getName())
org.washcom.cardgames.core.Suit.$VALUES[] == orig(org.washcom.cardgames.core.Suit.$VALUES[])
org.washcom.cardgames.core.Suit.$VALUES[].color == orig(org.washcom.cardgames.core.Suit.$VALUES[].color)
org.washcom.cardgames.core.Suit.SPADES.color == org.washcom.cardgames.core.Suit.CLUBS.color
org.washcom.cardgames.core.Suit.SPADES.color == orig(org.washcom.cardgames.core.Suit.SPADES.color)
org.washcom.cardgames.core.Suit.SPADES.color == orig(org.washcom.cardgames.core.Suit.CLUBS.color)
org.washcom.cardgames.core.Color.RED == orig(org.washcom.cardgames.core.Color.RED)
org.washcom.cardgames.core.Color.BLACK == orig(org.washcom.cardgames.core.Color.BLACK)
org.washcom.cardgames.core.Color.$VALUES == orig(org.washcom.cardgames.core.Color.$VALUES)
org.washcom.cardgames.core.Color.$VALUES.getClass().getName() == orig(org.washcom.cardgames.core.Color.$VALUES.getClass().getName())
org.washcom.cardgames.core.Color.$VALUES[] == orig(org.washcom.cardgames.core.Color.$VALUES[])
return[] contains no nulls and has only one value, of length 4
return[].color contains no nulls and has only one value, of length 4
size(return[]) == 4
org.washcom.cardgames.core.Suit.HEARTS in return[]
org.washcom.cardgames.core.Suit.DIAMONDS in return[]
org.washcom.cardgames.core.Suit.SPADES in return[]
org.washcom.cardgames.core.Suit.CLUBS in return[]
org.washcom.cardgames.core.Suit.$VALUES.getClass().getName() != org.washcom.cardgames.core.Color.$VALUES.getClass().getName()
org.washcom.cardgames.core.Color.RED in return[].color
org.washcom.cardgames.core.Color.BLACK in return[].color
===========================================================================
org.washcom.util.Deck:::OBJECT
this.internal != null
this.internal.getClass().getName() == java.util.ArrayDeque.class
this.random != null
===========================================================================
org.washcom.util.Deck.Deck():::EXIT
===========================================================================
org.washcom.util.Deck.Deck(java.util.Collection):::ENTER
arg0 != null
arg0.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.washcom.util.Deck.Deck(java.util.Collection):::EXIT
this.internal.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
org.washcom.util.Deck.draw():::ENTER
===========================================================================
org.washcom.util.Deck.draw():::EXIT
this.internal == orig(this.internal)
this.internal.getClass().getName() == orig(this.internal.getClass().getName())
this.random == orig(this.random)
return != null
return.getClass().getName() == org.washcom.cardgames.core.Card.class
this.internal.getClass().getName() != return.getClass().getName()
===========================================================================
org.washcom.util.Deck.draw(boolean):::ENTER
arg0 == true
===========================================================================
org.washcom.util.Deck.draw(boolean):::EXIT
this.internal == orig(this.internal)
this.internal.getClass().getName() == orig(this.internal.getClass().getName())
this.random == orig(this.random)
return != null
return.getClass().getName() == org.washcom.cardgames.core.Card.class
this.internal.getClass().getName() != return.getClass().getName()
===========================================================================
org.washcom.util.Deck.draw(int):::ENTER
arg0 >= 0
===========================================================================
org.washcom.util.Deck.draw(int):::EXIT
this.internal == orig(this.internal)
this.internal.getClass().getName() == orig(this.internal.getClass().getName())
this.random == orig(this.random)
return != null
return[] elements != null
return[].getClass().getName() elements == org.washcom.cardgames.core.Card.class
this.internal.getClass().getName() != return.getClass().getName()
===========================================================================
org.washcom.util.Deck.draw(int, boolean):::ENTER
arg0 >= 0
arg1 == true
===========================================================================
org.washcom.util.Deck.draw(int, boolean):::EXIT127
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.Collections$EmptyList.class
orig(arg0) == 0
===========================================================================
org.washcom.util.Deck.draw(int, boolean):::EXIT137
return.getClass().getName() == java.util.ArrayList.class
orig(arg0) >= 1
size(return[]) >= 1
===========================================================================
org.washcom.util.Deck.draw(int, boolean):::EXIT
this.internal == orig(this.internal)
this.internal.getClass().getName() == orig(this.internal.getClass().getName())
this.random == orig(this.random)
(return.getClass().getName() == java.util.ArrayList.class)  <==>  (orig(arg0) >= 1)
(return.getClass().getName() == java.util.ArrayList.class)  <==>  (size(return[]) >= 1)
(return.getClass().getName() == java.util.ArrayList.class)  ==>  (return[].getClass().getName() elements == org.washcom.cardgames.core.Card.class)
(return.getClass().getName() == java.util.Collections$EmptyList.class)  <==>  (orig(arg0) == 0)
(return.getClass().getName() == java.util.Collections$EmptyList.class)  ==>  (return has only one value)
(return.getClass().getName() == java.util.Collections$EmptyList.class)  ==>  (return[] == [])
(return.getClass().getName() == java.util.Collections$EmptyList.class)  ==>  (return[].getClass().getName() == [])
return != null
return[] elements != null
return[].getClass().getName() elements == org.washcom.cardgames.core.Card.class
this.internal.getClass().getName() != return.getClass().getName()
===========================================================================
org.washcom.util.Deck.drawAll():::ENTER
===========================================================================
org.washcom.util.Deck.drawAll():::EXIT
this.internal == orig(this.internal)
this.internal.getClass().getName() == orig(this.internal.getClass().getName())
this.random == orig(this.random)
return != null
return[] elements != null
return[].getClass().getName() elements == org.washcom.cardgames.core.Card.class
this.internal.getClass().getName() != return.getClass().getName()
===========================================================================
org.washcom.util.Deck.isEmpty():::ENTER
===========================================================================
org.washcom.util.Deck.isEmpty():::EXIT
this.internal == orig(this.internal)
this.internal.getClass().getName() == orig(this.internal.getClass().getName())
this.random == orig(this.random)
===========================================================================
org.washcom.util.Deck.isEmpty():::EXIT;condition="return == true"
return == true
===========================================================================
org.washcom.util.Deck.isEmpty():::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.washcom.util.Deck.put(java.lang.Object):::ENTER
arg0 != null
arg0.getClass().getName() == org.washcom.cardgames.core.Card.class
this.internal.getClass().getName() != arg0.getClass().getName()
===========================================================================
org.washcom.util.Deck.put(java.lang.Object):::EXIT
this.internal == orig(this.internal)
this.internal.getClass().getName() == orig(this.internal.getClass().getName())
this.random == orig(this.random)
this.internal.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
org.washcom.util.Deck.put(java.lang.Object, boolean):::ENTER
arg0 != null
arg0.getClass().getName() == org.washcom.cardgames.core.Card.class
arg1 == true
this.internal.getClass().getName() != arg0.getClass().getName()
===========================================================================
org.washcom.util.Deck.put(java.lang.Object, boolean):::EXIT
this.internal == orig(this.internal)
this.internal.getClass().getName() == orig(this.internal.getClass().getName())
this.random == orig(this.random)
this.internal.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
org.washcom.util.Deck.put(java.util.List):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == org.washcom.cardgames.core.Card.class
this.internal.getClass().getName() != arg0.getClass().getName()
===========================================================================
org.washcom.util.Deck.put(java.util.List):::EXIT
this.internal == orig(this.internal)
this.internal.getClass().getName() == orig(this.internal.getClass().getName())
this.random == orig(this.random)
arg0[] == orig(arg0[])
arg0[] elements != null
arg0[].getClass().getName() elements == org.washcom.cardgames.core.Card.class
this.internal.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
org.washcom.util.Deck.put(java.util.List, boolean):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == org.washcom.cardgames.core.Card.class
this.internal.getClass().getName() != arg0.getClass().getName()
===========================================================================
org.washcom.util.Deck.put(java.util.List, boolean):::EXIT
this.internal == orig(this.internal)
this.internal.getClass().getName() == orig(this.internal.getClass().getName())
this.random == orig(this.random)
arg0[] == orig(arg0[])
arg0[] elements != null
arg0[].getClass().getName() elements == org.washcom.cardgames.core.Card.class
this.internal.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
org.washcom.util.Deck.putOnBottom(java.util.List):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == org.washcom.cardgames.core.Card.class
this.internal.getClass().getName() != arg0.getClass().getName()
===========================================================================
org.washcom.util.Deck.putOnBottom(java.util.List):::EXIT
this.internal == orig(this.internal)
this.internal.getClass().getName() == orig(this.internal.getClass().getName())
this.random == orig(this.random)
arg0[] == orig(arg0[])
arg0[] elements != null
arg0[].getClass().getName() elements == org.washcom.cardgames.core.Card.class
this.internal.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
org.washcom.util.Deck.shuffle():::ENTER
===========================================================================
org.washcom.util.Deck.shuffle():::EXIT
this.internal == orig(this.internal)
this.internal.getClass().getName() == orig(this.internal.getClass().getName())
this.random == orig(this.random)
===========================================================================
org.washcom.util.Deck.size():::ENTER
===========================================================================
org.washcom.util.Deck.size():::EXIT
this.internal == orig(this.internal)
this.internal.getClass().getName() == orig(this.internal.getClass().getName())
this.random == orig(this.random)
return >= 0
===========================================================================
org.washcom.util.LoopingIterator:::OBJECT
this.iterable != null
this.iterable.getClass().getName() == java.util.Arrays$ArrayList.class
this.currIterator != null
this.currIterator.getClass().getName() == java.util.Arrays$ArrayItr.class
this.iterable.getClass().getName() != this.currIterator.getClass().getName()
===========================================================================
org.washcom.util.LoopingIterator.LoopingIterator(java.lang.Iterable):::ENTER
arg0.getClass().getName() == java.util.Arrays$ArrayList.class
===========================================================================
org.washcom.util.LoopingIterator.LoopingIterator(java.lang.Iterable):::EXIT
this.iterable == orig(arg0)
this.iterable.getClass().getName() == orig(arg0.getClass().getName())
===========================================================================
org.washcom.util.LoopingIterator.next():::ENTER
===========================================================================
org.washcom.util.LoopingIterator.next():::EXIT
this.iterable == orig(this.iterable)
this.iterable.getClass().getName() == orig(this.iterable.getClass().getName())
this.currIterator.getClass().getName() == orig(this.currIterator.getClass().getName())
return != null
return.getClass().getName() == org.washcom.cardgames.battleroyale.Player.class
this.iterable.getClass().getName() != return.getClass().getName()
this.currIterator.getClass().getName() != return.getClass().getName()
Exiting Daikon.
