Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

missing variables in newEnterExitRel:
  parent = com.iconmaster.hppplus.parse.element.block.ElementFunction$FunctionData.FunctionData(com.iconmaster.hppplus.parse.element.block.ElementFunction, java.lang.String, java.util.ArrayList, java.util.ArrayList):::ENTER
  child = com.iconmaster.hppplus.parse.element.block.ElementFunction$FunctionData.FunctionData(com.iconmaster.hppplus.parse.element.block.ElementFunction, java.lang.String, java.util.ArrayList, java.util.ArrayList):::EXIT
  parent.var_infos = [Ldaikon.VarInfo;@26c7b1c6
parent varinfos missing from parent_to_child_map:
   com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.begin]
   com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.begin-1]
   com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.begin]
   com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.begin-1]
   arg2[com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.begin]
   arg2[com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.begin-1]
   arg3[com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.begin]
   arg3[com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.begin-1]
   com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.end]
   com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.end-1]
   com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.end]
   com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.end-1]
   arg2[com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.end]
   arg2[com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.end-1]
   arg3[com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.end]
   arg3[com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.end-1]
   com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[com.iconmaster.hppplus.parse.element.block.ElementFunction.this.blockSize]
   com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[com.iconmaster.hppplus.parse.element.block.ElementFunction.this.blockSize-1]
   com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[com.iconmaster.hppplus.parse.element.block.ElementFunction.this.blockSize]
   com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[com.iconmaster.hppplus.parse.element.block.ElementFunction.this.blockSize-1]
   arg2[com.iconmaster.hppplus.parse.element.block.ElementFunction.this.blockSize]
   arg2[com.iconmaster.hppplus.parse.element.block.ElementFunction.this.blockSize-1]
   arg3[com.iconmaster.hppplus.parse.element.block.ElementFunction.this.blockSize]
   arg3[com.iconmaster.hppplus.parse.element.block.ElementFunction.this.blockSize-1]
rel.parent_to_child_map:
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this => orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this)
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range => orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range)
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.begin => orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.begin)
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.end => orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.end)
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this.name => orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.name)
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this.name.toString => orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.name.toString)
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block => orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block)
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[..] => orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[..])
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[..].getClass().getName() => orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[..].getClass().getName())
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args => orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args)
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[..] => orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[..])
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[..].getClass().getName() => orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[..].getClass().getName())
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this.blockSize => orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.blockSize)
    arg1 => orig(arg1)
    arg1.toString => orig(arg1.toString)
    arg2 => orig(arg2)
    arg2[..] => orig(arg2[..])
    arg2[..].getClass().getName() => orig(arg2[..].getClass().getName())
    arg3 => orig(arg3)
    arg3[..] => orig(arg3[..])
    arg3[..].getClass().getName() => orig(arg3[..].getClass().getName())
    size(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[..]) => orig(size(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[..]))
    size(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[..])-1 => orig(size(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[..]))-1
    size(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[..]) => orig(size(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[..]))
    size(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[..])-1 => orig(size(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[..]))-1
    size(arg2[..]) => orig(size(arg2[..]))
    size(arg2[..])-1 => orig(size(arg2[..]))-1
    size(arg3[..]) => orig(size(arg3[..]))
    size(arg3[..])-1 => orig(size(arg3[..]))-1
child.var_infos:
    this
    this.name
    this.name.toString
    this.block
    this.block[..]
    this.block[..].getClass().getName()
    this.args
    this.args[..]
    this.args[..].getClass().getName()
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.begin
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.end
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this.name
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this.name.toString
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[..]
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[..].getClass().getName()
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[..]
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[..].getClass().getName()
    com.iconmaster.hppplus.parse.element.block.ElementFunction.this.blockSize
    arg1
    arg1.toString
    arg2
    arg2[..]
    arg2[..].getClass().getName()
    arg3
    arg3[..]
    arg3[..].getClass().getName()
    orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this)
    orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range)
    orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.begin)
    orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.end)
    orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.name)
    orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.name.toString)
    orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block)
    orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[..])
    orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[..].getClass().getName())
    orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args)
    orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[..])
    orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[..].getClass().getName())
    orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.blockSize)
    orig(arg1)
    orig(arg1.toString)
    orig(arg2)
    orig(arg2[..])
    orig(arg2[..].getClass().getName())
    orig(arg3)
    orig(arg3[..])
    orig(arg3[..].getClass().getName())
    size(this.block[..])
    size(this.block[..])-1
    size(this.args[..])
    size(this.args[..])-1
    size(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[..])
    size(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[..])-1
    size(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[..])
    size(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[..])-1
    size(arg2[..])
    size(arg2[..])-1
    size(arg3[..])
    size(arg3[..])-1
    orig(size(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[..]))
    orig(size(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[..]))-1
    orig(size(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[..]))
    orig(size(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[..]))-1
    orig(size(arg2[..]))
    orig(size(arg2[..]))-1
    orig(size(arg3[..]))
    orig(size(arg3[..]))-1
End of diagnostics for newEnterExitRel(com.iconmaster.hppplus.parse.element.block.ElementFunction$FunctionData.FunctionData(com.iconmaster.hppplus.parse.element.block.ElementFunction, java.lang.String, java.util.ArrayList, java.util.ArrayList):::ENTER, com.iconmaster.hppplus.parse.element.block.ElementFunction$FunctionData.FunctionData(com.iconmaster.hppplus.parse.element.block.ElementFunction, java.lang.String, java.util.ArrayList, java.util.ArrayList):::EXIT)
missing variables in newEnterExitRel:
  parent = com.iconmaster.hppplus.parse.element.operator.ElementCall$CallData.CallData(com.iconmaster.hppplus.parse.element.operator.ElementCall, java.lang.String, java.util.ArrayList):::ENTER
  child = com.iconmaster.hppplus.parse.element.operator.ElementCall$CallData.CallData(com.iconmaster.hppplus.parse.element.operator.ElementCall, java.lang.String, java.util.ArrayList):::EXIT
  parent.var_infos = [Ldaikon.VarInfo;@4c8abec7
parent varinfos missing from parent_to_child_map:
   com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range.begin]
   com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range.begin-1]
   com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range.end]
   com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range.end-1]
   arg2[com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range.begin]
   arg2[com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range.begin-1]
   arg2[com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range.end]
   arg2[com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range.end-1]
rel.parent_to_child_map:
    com.iconmaster.hppplus.parse.element.operator.ElementCall.this => orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this)
    com.iconmaster.hppplus.parse.element.operator.ElementCall.this.name => orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.name)
    com.iconmaster.hppplus.parse.element.operator.ElementCall.this.name.toString => orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.name.toString)
    com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args => orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args)
    com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[..] => orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[..])
    com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[..].getClass().getName() => orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[..].getClass().getName())
    com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range => orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range)
    com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range.begin => orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range.begin)
    com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range.end => orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range.end)
    arg1 => orig(arg1)
    arg1.toString => orig(arg1.toString)
    arg2 => orig(arg2)
    arg2[..] => orig(arg2[..])
    arg2[..].getClass().getName() => orig(arg2[..].getClass().getName())
    size(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[..]) => orig(size(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[..]))
    size(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[..])-1 => orig(size(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[..]))-1
    size(arg2[..]) => orig(size(arg2[..]))
    size(arg2[..])-1 => orig(size(arg2[..]))-1
child.var_infos:
    this
    this.name
    this.name.toString
    this.args
    this.args[..]
    this.args[..].getClass().getName()
    com.iconmaster.hppplus.parse.element.operator.ElementCall.this
    com.iconmaster.hppplus.parse.element.operator.ElementCall.this.name
    com.iconmaster.hppplus.parse.element.operator.ElementCall.this.name.toString
    com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args
    com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[..]
    com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[..].getClass().getName()
    com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range
    com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range.begin
    com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range.end
    arg1
    arg1.toString
    arg2
    arg2[..]
    arg2[..].getClass().getName()
    orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this)
    orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.name)
    orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.name.toString)
    orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args)
    orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[..])
    orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[..].getClass().getName())
    orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range)
    orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range.begin)
    orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range.end)
    orig(arg1)
    orig(arg1.toString)
    orig(arg2)
    orig(arg2[..])
    orig(arg2[..].getClass().getName())
    size(this.args[..])
    size(this.args[..])-1
    size(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[..])
    size(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[..])-1
    size(arg2[..])
    size(arg2[..])-1
    orig(size(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[..]))
    orig(size(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[..]))-1
    orig(size(arg2[..]))
    orig(size(arg2[..]))-1
End of diagnostics for newEnterExitRel(com.iconmaster.hppplus.parse.element.operator.ElementCall$CallData.CallData(com.iconmaster.hppplus.parse.element.operator.ElementCall, java.lang.String, java.util.ArrayList):::ENTER, com.iconmaster.hppplus.parse.element.operator.ElementCall$CallData.CallData(com.iconmaster.hppplus.parse.element.operator.ElementCall, java.lang.String, java.util.ArrayList):::EXIT)
===========================================================================
com.iconmaster.hppplus.HPPPlus:::CLASS
com.iconmaster.hppplus.HPPPlus.reservedWords.getClass().getName() == com.iconmaster.hppplus.HPPPlus.blockBeginners.getClass().getName()
com.iconmaster.hppplus.HPPPlus.reservedWords has only one value
com.iconmaster.hppplus.HPPPlus.reservedWords != null
com.iconmaster.hppplus.HPPPlus.reservedWords.getClass().getName() == java.lang.String[].class
com.iconmaster.hppplus.HPPPlus.reservedWords[] contains no nulls and has only one value, of length 26
com.iconmaster.hppplus.HPPPlus.reservedWords[] elements != null
com.iconmaster.hppplus.HPPPlus.reservedWords[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
com.iconmaster.hppplus.HPPPlus.reservedWords[].getClass().getName() elements == java.lang.String.class
com.iconmaster.hppplus.HPPPlus.reservedWords[].toString == [IF, THEN, ELSE, END, LOCAL, RETURN, CLASS, FOR, TO, BY, DO, AS, IS, IN, WHILE, REPEAT, UNTIL, FUNCTION, BREAK, CONTINUE, CASE, DEFAULT, TRY, CATCH, SWITCH, NEW]
com.iconmaster.hppplus.HPPPlus.blockBeginners has only one value
com.iconmaster.hppplus.HPPPlus.blockBeginners != null
com.iconmaster.hppplus.HPPPlus.blockBeginners[] contains no nulls and has only one value, of length 5
com.iconmaster.hppplus.HPPPlus.blockBeginners[] elements != null
com.iconmaster.hppplus.HPPPlus.blockBeginners[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
com.iconmaster.hppplus.HPPPlus.blockBeginners[].getClass().getName() elements == java.lang.String.class
com.iconmaster.hppplus.HPPPlus.blockBeginners[].toString == [DO, THEN, FUNCTION, TRY, SWITCH]
size(com.iconmaster.hppplus.HPPPlus.reservedWords[]) == 26
size(com.iconmaster.hppplus.HPPPlus.blockBeginners[]) == 5
===========================================================================
com.iconmaster.hppplus.HPPPlus.isBlockBeginner(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "end"
===========================================================================
com.iconmaster.hppplus.HPPPlus.isBlockBeginner(java.lang.String):::EXIT53
===========================================================================
com.iconmaster.hppplus.HPPPlus.isBlockBeginner(java.lang.String):::EXIT53;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.HPPPlus.isBlockBeginner(java.lang.String):::EXIT
com.iconmaster.hppplus.HPPPlus.reservedWords == orig(com.iconmaster.hppplus.HPPPlus.reservedWords)
com.iconmaster.hppplus.HPPPlus.reservedWords.getClass().getName() == orig(com.iconmaster.hppplus.HPPPlus.reservedWords.getClass().getName())
com.iconmaster.hppplus.HPPPlus.reservedWords.getClass().getName() == orig(com.iconmaster.hppplus.HPPPlus.blockBeginners.getClass().getName())
com.iconmaster.hppplus.HPPPlus.reservedWords[] == orig(com.iconmaster.hppplus.HPPPlus.reservedWords[])
com.iconmaster.hppplus.HPPPlus.blockBeginners == orig(com.iconmaster.hppplus.HPPPlus.blockBeginners)
com.iconmaster.hppplus.HPPPlus.blockBeginners[] == orig(com.iconmaster.hppplus.HPPPlus.blockBeginners[])
arg0.toString == orig(arg0.toString)
arg0.toString == "end"
return == false
===========================================================================
com.iconmaster.hppplus.HPPPlus.isBlockBeginner(java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.HPPPlus.isReservedWord(java.lang.String):::ENTER
===========================================================================
com.iconmaster.hppplus.HPPPlus.isReservedWord(java.lang.String):::EXIT41
arg0.toString one of { "end", "function" }
return == true
===========================================================================
com.iconmaster.hppplus.HPPPlus.isReservedWord(java.lang.String):::EXIT41;condition="return == true"
===========================================================================
com.iconmaster.hppplus.HPPPlus.isReservedWord(java.lang.String):::EXIT44
arg0.toString one of { "i", "v1", "v2" }
return == false
===========================================================================
com.iconmaster.hppplus.HPPPlus.isReservedWord(java.lang.String):::EXIT44;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.HPPPlus.isReservedWord(java.lang.String):::EXIT
com.iconmaster.hppplus.HPPPlus.reservedWords == orig(com.iconmaster.hppplus.HPPPlus.reservedWords)
com.iconmaster.hppplus.HPPPlus.reservedWords.getClass().getName() == orig(com.iconmaster.hppplus.HPPPlus.reservedWords.getClass().getName())
com.iconmaster.hppplus.HPPPlus.reservedWords.getClass().getName() == orig(com.iconmaster.hppplus.HPPPlus.blockBeginners.getClass().getName())
com.iconmaster.hppplus.HPPPlus.reservedWords[] == orig(com.iconmaster.hppplus.HPPPlus.reservedWords[])
com.iconmaster.hppplus.HPPPlus.blockBeginners == orig(com.iconmaster.hppplus.HPPPlus.blockBeginners)
com.iconmaster.hppplus.HPPPlus.blockBeginners[] == orig(com.iconmaster.hppplus.HPPPlus.blockBeginners[])
arg0.toString == orig(arg0.toString)
(arg0.toString one of { "end", "function" })  <==>  (return == true)
(arg0.toString one of { "i", "v1", "v2" })  <==>  (return == false)
===========================================================================
com.iconmaster.hppplus.HPPPlus.isReservedWord(java.lang.String):::EXIT;condition="return == true"
arg0.toString one of { "end", "function" }
return == true
===========================================================================
com.iconmaster.hppplus.HPPPlus.isReservedWord(java.lang.String):::EXIT;condition="not(return == true)"
arg0.toString one of { "i", "v1", "v2" }
return == false
===========================================================================
com.iconmaster.hppplus.HPPPlus.main(java.lang.String[]):::ENTER
com.iconmaster.hppplus.HPPPlus.reservedWords.getClass().getName() == arg0.getClass().getName()
arg0 has only one value
arg0[] == []
arg0[].toString == []
===========================================================================
com.iconmaster.hppplus.HPPPlus.main(java.lang.String[]):::EXIT
com.iconmaster.hppplus.HPPPlus.reservedWords == orig(com.iconmaster.hppplus.HPPPlus.reservedWords)
com.iconmaster.hppplus.HPPPlus.reservedWords.getClass().getName() == orig(com.iconmaster.hppplus.HPPPlus.reservedWords.getClass().getName())
com.iconmaster.hppplus.HPPPlus.reservedWords.getClass().getName() == orig(com.iconmaster.hppplus.HPPPlus.blockBeginners.getClass().getName())
com.iconmaster.hppplus.HPPPlus.reservedWords.getClass().getName() == orig(arg0.getClass().getName())
com.iconmaster.hppplus.HPPPlus.reservedWords[] == orig(com.iconmaster.hppplus.HPPPlus.reservedWords[])
com.iconmaster.hppplus.HPPPlus.blockBeginners == orig(com.iconmaster.hppplus.HPPPlus.blockBeginners)
com.iconmaster.hppplus.HPPPlus.blockBeginners[] == orig(com.iconmaster.hppplus.HPPPlus.blockBeginners[])
arg0[] == orig(arg0[])
arg0[] == []
arg0[].toString == []
===========================================================================
com.iconmaster.hppplus.SourceRange:::OBJECT
this.begin >= 0
this.end >= 1
===========================================================================
com.iconmaster.hppplus.SourceRange.SourceRange(int, int):::ENTER
arg0 < arg1
===========================================================================
com.iconmaster.hppplus.SourceRange.SourceRange(int, int):::EXIT
this.begin == orig(arg0)
this.end == orig(arg1)
this.begin < this.end
===========================================================================
com.iconmaster.hppplus.SourceRange.between(com.iconmaster.hppplus.SourceRange, com.iconmaster.hppplus.SourceRange):::ENTER
===========================================================================
com.iconmaster.hppplus.SourceRange.between(com.iconmaster.hppplus.SourceRange, com.iconmaster.hppplus.SourceRange):::EXIT
arg0.begin == return.begin
arg0.begin == orig(arg0.begin)
arg0.end == orig(arg0.end)
arg1.begin == orig(arg1.begin)
arg1.end == return.end
arg1.end == orig(arg1.end)
===========================================================================
com.iconmaster.hppplus.SourceRange.toString():::ENTER
===========================================================================
com.iconmaster.hppplus.SourceRange.toString():::EXIT
this.begin == orig(this.begin)
this.end == orig(this.end)
return != null
===========================================================================
com.iconmaster.hppplus.link.FunctionPrototype:::OBJECT
this has only one value
this.name has only one value
this.name.toString == "test"
this.vars has only one value
this.vars[] contains no nulls and has only one value, of length 2
this.vars[].getClass().getName() == [com.iconmaster.hppplus.link.VariablePrototype, com.iconmaster.hppplus.link.VariablePrototype]
this.vars[].getClass().getName() elements == com.iconmaster.hppplus.link.VariablePrototype.class
this.body has only one value
this.body.vars has only one value
this.body.statements has only one value
this.body.statements[] == []
this.body.statements[].getClass().getName() == []
size(this.vars[]) == 2
===========================================================================
com.iconmaster.hppplus.link.FunctionPrototype.FunctionPrototype(java.lang.String, java.util.ArrayList, java.util.ArrayList):::ENTER
arg0 has only one value
arg0.toString == "test"
arg1 has only one value
arg1[] contains no nulls and has only one value, of length 2
arg1[].getClass().getName() == [com.iconmaster.hppplus.link.VariablePrototype, com.iconmaster.hppplus.link.VariablePrototype]
arg1[].getClass().getName() elements == com.iconmaster.hppplus.link.VariablePrototype.class
arg2 has only one value
arg2[] contains no nulls and has only one value, of length 1
arg2[] elements has only one value
arg2[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment]
arg2[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.operator.ElementAssignment.class
size(arg1[]) == 2
size(arg2[]) == 1
===========================================================================
com.iconmaster.hppplus.link.FunctionPrototype.FunctionPrototype(java.lang.String, java.util.ArrayList, java.util.ArrayList):::EXIT
this.name == orig(arg0)
this.vars == orig(arg1)
arg0.toString == orig(arg0.toString)
arg1[] == orig(arg1[])
arg2[] == orig(arg2[])
arg0.toString == "test"
arg1[] contains no nulls and has only one value, of length 2
arg1[].getClass().getName() == [com.iconmaster.hppplus.link.VariablePrototype, com.iconmaster.hppplus.link.VariablePrototype]
arg1[].getClass().getName() elements == com.iconmaster.hppplus.link.VariablePrototype.class
arg2[] contains no nulls and has only one value, of length 1
arg2[] elements has only one value
arg2[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment]
arg2[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.operator.ElementAssignment.class
===========================================================================
com.iconmaster.hppplus.link.FunctionPrototype.getName():::ENTER
===========================================================================
com.iconmaster.hppplus.link.FunctionPrototype.getName():::EXIT
this.name == return
this.name.toString == orig(this.name.toString)
this.vars == orig(this.vars)
this.vars[] == orig(this.vars[])
this.body == orig(this.body)
this.body.vars == orig(this.body.vars)
this.body.statements == orig(this.body.statements)
this.body.statements[] == orig(this.body.statements[])
return == orig(this.name)
return has only one value
return.toString == "test"
===========================================================================
com.iconmaster.hppplus.link.FunctionPrototype.toString():::ENTER
===========================================================================
com.iconmaster.hppplus.link.FunctionPrototype.toString():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.vars == orig(this.vars)
this.vars[] == orig(this.vars[])
this.body == orig(this.body)
this.body.vars == orig(this.body.vars)
this.body.statements == orig(this.body.statements)
this.body.statements[] == orig(this.body.statements[])
return has only one value
return.toString == "[test: [v1] [v2] \010\n\tCode:[LINKSPACE: \n\t\tVariables:\n\t\t\t[v1]\n\t\t\t[v2]\n\t\tStatements:\n\t]\n]"
===========================================================================
com.iconmaster.hppplus.link.LinkSpace:::OBJECT
this.vars != null
this.statements != null
this.statements[] == []
this.statements[].getClass().getName() == []
===========================================================================
com.iconmaster.hppplus.link.LinkSpace.LinkSpace():::EXIT
===========================================================================
com.iconmaster.hppplus.link.LinkSpace.addVar(com.iconmaster.hppplus.link.VariablePrototype):::ENTER
arg0.name.toString one of { "i", "v1", "v2" }
===========================================================================
com.iconmaster.hppplus.link.LinkSpace.addVar(com.iconmaster.hppplus.link.VariablePrototype):::EXIT
this.vars == orig(this.vars)
this.statements == orig(this.statements)
this.statements[] == orig(this.statements[])
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.name.toString one of { "i", "v1", "v2" }
===========================================================================
com.iconmaster.hppplus.link.LinkSpace.addVarEnsureDefined(com.iconmaster.hppplus.link.VariablePrototype, com.iconmaster.hppplus.SourceRange):::ENTER
this has only one value
this.vars has only one value
this.statements has only one value
arg0 has only one value
arg0.name has only one value
arg0.name.toString == "v1"
arg1 has only one value
arg1.begin == 25
arg1.end == 30
===========================================================================
com.iconmaster.hppplus.link.LinkSpace.addVarEnsureDefined(com.iconmaster.hppplus.link.VariablePrototype, com.iconmaster.hppplus.SourceRange):::EXIT
this.vars == orig(this.vars)
this.statements == orig(this.statements)
this.statements[] == orig(this.statements[])
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg1.begin == orig(arg1.begin)
arg1.end == orig(arg1.end)
this.vars has only one value
this.statements has only one value
arg0.name has only one value
arg0.name.toString == "v1"
arg1.begin == 25
arg1.end == 30
===========================================================================
com.iconmaster.hppplus.link.LinkSpace.toString():::ENTER
this has only one value
this.vars has only one value
this.statements has only one value
===========================================================================
com.iconmaster.hppplus.link.LinkSpace.toString():::EXIT
this.vars == orig(this.vars)
this.statements == orig(this.statements)
this.statements[] == orig(this.statements[])
this.vars has only one value
this.statements has only one value
return has only one value
return.toString == "[LINKSPACE: \n\tVariables:\n\t\t[v1]\n\t\t[v2]\n\tStatements:\n]"
===========================================================================
com.iconmaster.hppplus.link.LinkSpaceGlobal:::OBJECT
this has only one value
this.functions has only one value
this.vars has only one value
this.statements has only one value
this.statements[] == []
this.statements[].getClass().getName() == []
===========================================================================
com.iconmaster.hppplus.link.LinkSpaceGlobal.LinkSpaceGlobal():::EXIT
===========================================================================
com.iconmaster.hppplus.link.LinkSpaceGlobal.addFunction(com.iconmaster.hppplus.link.FunctionPrototype):::ENTER
arg0 has only one value
arg0.name has only one value
arg0.name.toString == "test"
arg0.vars has only one value
arg0.vars[] contains no nulls and has only one value, of length 2
arg0.vars[].getClass().getName() == [com.iconmaster.hppplus.link.VariablePrototype, com.iconmaster.hppplus.link.VariablePrototype]
arg0.vars[].getClass().getName() elements == com.iconmaster.hppplus.link.VariablePrototype.class
arg0.body has only one value
arg0.body.vars has only one value
arg0.body.statements has only one value
arg0.body.statements[] == []
arg0.body.statements[].getClass().getName() == []
size(arg0.vars[]) == 2
===========================================================================
com.iconmaster.hppplus.link.LinkSpaceGlobal.addFunction(com.iconmaster.hppplus.link.FunctionPrototype):::EXIT
this.functions == orig(this.functions)
this.vars == orig(this.vars)
this.statements == orig(this.statements)
this.statements[] == orig(this.statements[])
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.vars == orig(arg0.vars)
arg0.vars[] == orig(arg0.vars[])
arg0.body == orig(arg0.body)
arg0.body.vars == orig(arg0.body.vars)
arg0.body.statements == orig(arg0.body.statements)
arg0.body.statements[] == orig(arg0.body.statements[])
arg0.name has only one value
arg0.name.toString == "test"
arg0.vars has only one value
arg0.vars[] contains no nulls and has only one value, of length 2
arg0.vars[].getClass().getName() == [com.iconmaster.hppplus.link.VariablePrototype, com.iconmaster.hppplus.link.VariablePrototype]
arg0.vars[].getClass().getName() elements == com.iconmaster.hppplus.link.VariablePrototype.class
arg0.body has only one value
arg0.body.vars has only one value
arg0.body.statements has only one value
arg0.body.statements[] == []
arg0.body.statements[].getClass().getName() == []
size(arg0.vars[]) == 2
===========================================================================
com.iconmaster.hppplus.link.LinkSpaceGlobal.toString():::ENTER
===========================================================================
com.iconmaster.hppplus.link.LinkSpaceGlobal.toString():::EXIT
this.functions == orig(this.functions)
this.vars == orig(this.vars)
this.statements == orig(this.statements)
this.statements[] == orig(this.statements[])
return has only one value
return.toString == "[G. LINKSPACE: \n\tVariables:\n\t\t[i]\n\tFunctions:\n\t\t[test: [v1] [v2] \010\n\t\tCode:[LINKSPACE: \n\t\t\tVariables:\n\t\t\t\t[v1]\n\t\t\t\t[v2]\n\t\t\tStatements:\n\t\t]\n\t]\n]"
===========================================================================
com.iconmaster.hppplus.link.Linker:::CLASS
com.iconmaster.hppplus.link.Linker.handlers has only one value
com.iconmaster.hppplus.link.Linker.handlers != null
===========================================================================
com.iconmaster.hppplus.link.Linker:::OBJECT
this.elements[].getClass().getName() one of { [com.iconmaster.hppplus.parse.element.operator.ElementAssignment], [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.parse.element.block.ElementFunction] }
size(this.elements[]) one of { 1, 2 }
===========================================================================
com.iconmaster.hppplus.link.Linker.Linker(java.util.ArrayList):::ENTER
arg0[].getClass().getName() one of { [com.iconmaster.hppplus.parse.element.operator.ElementAssignment], [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.parse.element.block.ElementFunction] }
size(arg0[]) one of { 1, 2 }
===========================================================================
com.iconmaster.hppplus.link.Linker.Linker(java.util.ArrayList):::EXIT
this.elements == orig(arg0)
arg0[] == orig(arg0[])
arg0[].getClass().getName() one of { [com.iconmaster.hppplus.parse.element.operator.ElementAssignment], [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.parse.element.block.ElementFunction] }
===========================================================================
com.iconmaster.hppplus.link.Linker.extractVarName(com.iconmaster.hppplus.parse.Element):::ENTER
===========================================================================
com.iconmaster.hppplus.link.Linker.extractVarName(com.iconmaster.hppplus.parse.Element):::EXIT67
orig(arg0.getClass().getName()) == com.iconmaster.hppplus.parse.element.ElementVariable.class
===========================================================================
com.iconmaster.hppplus.link.Linker.extractVarName(com.iconmaster.hppplus.parse.Element):::EXIT73
return.toString one of { "i", "v1" }
orig(arg0.getClass().getName()) == com.iconmaster.hppplus.parse.element.operator.ElementAssignment.class
===========================================================================
com.iconmaster.hppplus.link.Linker.extractVarName(com.iconmaster.hppplus.parse.Element):::EXIT
com.iconmaster.hppplus.link.Linker.handlers == orig(com.iconmaster.hppplus.link.Linker.handlers)
return.toString one of { "i", "v1", "v2" }
===========================================================================
com.iconmaster.hppplus.link.Linker.link():::ENTER
this has only one value
this.elements has only one value
this.elements[] contains no nulls and has only one value, of length 2
this.elements[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.parse.element.block.ElementFunction]
size(this.elements[]) == 2
===========================================================================
com.iconmaster.hppplus.link.Linker.link():::EXIT
com.iconmaster.hppplus.link.Linker.handlers == orig(com.iconmaster.hppplus.link.Linker.handlers)
this.elements == orig(this.elements)
this.elements[] == orig(this.elements[])
this.elements has only one value
this.elements[] contains no nulls and has only one value, of length 2
this.elements[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.parse.element.block.ElementFunction]
return has only one value
return.functions has only one value
return.vars has only one value
return.statements has only one value
return.statements[] == []
return.statements[].getClass().getName() == []
size(this.elements[]) == 2
===========================================================================
com.iconmaster.hppplus.link.Linker.linkBlock(java.util.ArrayList):::ENTER
this has only one value
this.elements has only one value
this.elements[] contains no nulls and has only one value, of length 1
this.elements[] elements has only one value
this.elements[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment]
this.elements[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.operator.ElementAssignment.class
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 2
arg0[].getClass().getName() == [com.iconmaster.hppplus.link.VariablePrototype, com.iconmaster.hppplus.link.VariablePrototype]
arg0[].getClass().getName() elements == com.iconmaster.hppplus.link.VariablePrototype.class
size(this.elements[]) == 1
size(arg0[]) == 2
===========================================================================
com.iconmaster.hppplus.link.Linker.linkBlock(java.util.ArrayList):::EXIT
com.iconmaster.hppplus.link.Linker.handlers == orig(com.iconmaster.hppplus.link.Linker.handlers)
this.elements == orig(this.elements)
this.elements[] == orig(this.elements[])
arg0[] == orig(arg0[])
this.elements has only one value
this.elements[] contains no nulls and has only one value, of length 1
this.elements[] elements has only one value
this.elements[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment]
this.elements[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.operator.ElementAssignment.class
arg0[] contains no nulls and has only one value, of length 2
arg0[].getClass().getName() == [com.iconmaster.hppplus.link.VariablePrototype, com.iconmaster.hppplus.link.VariablePrototype]
arg0[].getClass().getName() elements == com.iconmaster.hppplus.link.VariablePrototype.class
return has only one value
return.vars has only one value
return.statements has only one value
return.statements[] == []
return.statements[].getClass().getName() == []
size(this.elements[]) == 1
===========================================================================
com.iconmaster.hppplus.link.Linker.registerDefaultHandlers():::ENTER
===========================================================================
com.iconmaster.hppplus.link.Linker.registerDefaultHandlers():::EXIT
com.iconmaster.hppplus.link.Linker.handlers == orig(com.iconmaster.hppplus.link.Linker.handlers)
===========================================================================
com.iconmaster.hppplus.link.Linker.registerHandler(java.lang.Class, com.iconmaster.hppplus.link.LinkHandler):::ENTER
===========================================================================
com.iconmaster.hppplus.link.Linker.registerHandler(java.lang.Class, com.iconmaster.hppplus.link.LinkHandler):::EXIT
com.iconmaster.hppplus.link.Linker.handlers == orig(com.iconmaster.hppplus.link.Linker.handlers)
===========================================================================
com.iconmaster.hppplus.link.VariablePrototype:::OBJECT
this.name != null
this.name.toString one of { "i", "v1", "v2" }
===========================================================================
com.iconmaster.hppplus.link.VariablePrototype.VariablePrototype(java.lang.String):::ENTER
arg0.toString one of { "i", "v1", "v2" }
===========================================================================
com.iconmaster.hppplus.link.VariablePrototype.VariablePrototype(java.lang.String):::EXIT
this.name == orig(arg0)
arg0.toString == orig(arg0.toString)
arg0.toString one of { "i", "v1", "v2" }
===========================================================================
com.iconmaster.hppplus.link.VariablePrototype.getName():::ENTER
===========================================================================
com.iconmaster.hppplus.link.VariablePrototype.getName():::EXIT
this.name == return
this.name.toString == orig(this.name.toString)
return == orig(this.name)
return.toString one of { "i", "v1", "v2" }
===========================================================================
com.iconmaster.hppplus.link.VariablePrototype.toString():::ENTER
===========================================================================
com.iconmaster.hppplus.link.VariablePrototype.toString():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
return.toString one of { "[i]", "[v1]", "[v2]" }
===========================================================================
com.iconmaster.hppplus.link.handler.AssignmentLinker:::OBJECT
this has only one value
===========================================================================
com.iconmaster.hppplus.link.handler.AssignmentLinker.AssignmentLinker():::EXIT
===========================================================================
com.iconmaster.hppplus.link.handler.AssignmentLinker.handleGlobal(com.iconmaster.hppplus.link.Linker, com.iconmaster.hppplus.link.LinkSpaceGlobal, com.iconmaster.hppplus.parse.element.operator.ElementAssignment):::ENTER
arg0 has only one value
com.iconmaster.hppplus.link.Linker.handlers has only one value
arg0.elements has only one value
arg0.elements[] contains no nulls and has only one value, of length 2
arg0.elements[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.parse.element.block.ElementFunction]
arg1 has only one value
arg1.functions has only one value
arg1.vars has only one value
arg1.statements has only one value
arg1.statements[] == []
arg1.statements[].getClass().getName() == []
arg2 has only one value
arg2.lvalue has only one value
arg2.lvalue.getClass().getName() == com.iconmaster.hppplus.parse.element.ElementVariable.class
arg2.rvalue has only one value
arg2.rvalue.getClass().getName() == com.iconmaster.hppplus.parse.element.ElementNumber.class
arg2.range has only one value
arg2.range.begin == 0
arg2.range.end == 3
size(arg0.elements[]) == 2
===========================================================================
com.iconmaster.hppplus.link.handler.AssignmentLinker.handleGlobal(com.iconmaster.hppplus.link.Linker, com.iconmaster.hppplus.link.LinkSpaceGlobal, com.iconmaster.hppplus.parse.element.operator.ElementAssignment):::EXIT
com.iconmaster.hppplus.link.Linker.handlers == orig(com.iconmaster.hppplus.link.Linker.handlers)
arg0.elements == orig(arg0.elements)
arg0.elements[] == orig(arg0.elements[])
arg1.functions == orig(arg1.functions)
arg1.vars == orig(arg1.vars)
arg1.statements == orig(arg1.statements)
arg1.statements[] == orig(arg1.statements[])
arg2.lvalue == orig(arg2.lvalue)
arg2.lvalue.getClass().getName() == orig(arg2.lvalue.getClass().getName())
arg2.rvalue == orig(arg2.rvalue)
arg2.rvalue.getClass().getName() == orig(arg2.rvalue.getClass().getName())
arg2.range == orig(arg2.range)
arg2.range.begin == orig(arg2.range.begin)
arg2.range.end == orig(arg2.range.end)
com.iconmaster.hppplus.link.Linker.handlers has only one value
arg0.elements has only one value
arg0.elements[] contains no nulls and has only one value, of length 2
arg0.elements[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.parse.element.block.ElementFunction]
arg1.functions has only one value
arg1.vars has only one value
arg1.statements has only one value
arg1.statements[] == []
arg1.statements[].getClass().getName() == []
arg2.lvalue has only one value
arg2.lvalue.getClass().getName() == com.iconmaster.hppplus.parse.element.ElementVariable.class
arg2.rvalue has only one value
arg2.rvalue.getClass().getName() == com.iconmaster.hppplus.parse.element.ElementNumber.class
arg2.range has only one value
arg2.range.begin == 0
arg2.range.end == 3
size(arg0.elements[]) == 2
===========================================================================
com.iconmaster.hppplus.link.handler.AssignmentLinker.handleLocal(com.iconmaster.hppplus.link.Linker, com.iconmaster.hppplus.link.LinkSpace, com.iconmaster.hppplus.parse.element.operator.ElementAssignment):::ENTER
arg2.lvalue.getClass().getName() == arg2.rvalue.getClass().getName()
arg0 has only one value
com.iconmaster.hppplus.link.Linker.handlers has only one value
arg0.elements has only one value
arg0.elements[] contains no nulls and has only one value, of length 1
arg0.elements[] elements has only one value
arg0.elements[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment]
arg0.elements[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.operator.ElementAssignment.class
arg1 has only one value
arg1.vars has only one value
arg1.statements has only one value
arg1.statements[] == []
arg1.statements[].getClass().getName() == []
arg2 has only one value
arg2.lvalue has only one value
arg2.lvalue.getClass().getName() == com.iconmaster.hppplus.parse.element.ElementVariable.class
arg2.rvalue has only one value
arg2.range has only one value
arg2.range.begin == 25
arg2.range.end == 30
size(arg0.elements[]) == 1
===========================================================================
com.iconmaster.hppplus.link.handler.AssignmentLinker.handleLocal(com.iconmaster.hppplus.link.Linker, com.iconmaster.hppplus.link.LinkSpace, com.iconmaster.hppplus.parse.element.operator.ElementAssignment):::EXIT
com.iconmaster.hppplus.link.Linker.handlers == orig(com.iconmaster.hppplus.link.Linker.handlers)
arg0.elements == orig(arg0.elements)
arg0.elements[] == orig(arg0.elements[])
arg1.vars == orig(arg1.vars)
arg1.statements == orig(arg1.statements)
arg1.statements[] == orig(arg1.statements[])
arg2.lvalue == orig(arg2.lvalue)
arg2.lvalue.getClass().getName() == arg2.rvalue.getClass().getName()
arg2.lvalue.getClass().getName() == orig(arg2.lvalue.getClass().getName())
arg2.lvalue.getClass().getName() == orig(arg2.rvalue.getClass().getName())
arg2.rvalue == orig(arg2.rvalue)
arg2.range == orig(arg2.range)
arg2.range.begin == orig(arg2.range.begin)
arg2.range.end == orig(arg2.range.end)
com.iconmaster.hppplus.link.Linker.handlers has only one value
arg0.elements has only one value
arg0.elements[] contains no nulls and has only one value, of length 1
arg0.elements[] elements has only one value
arg0.elements[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment]
arg0.elements[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.operator.ElementAssignment.class
arg1.vars has only one value
arg1.statements has only one value
arg1.statements[] == []
arg1.statements[].getClass().getName() == []
arg2.lvalue has only one value
arg2.lvalue.getClass().getName() == com.iconmaster.hppplus.parse.element.ElementVariable.class
arg2.rvalue has only one value
arg2.range has only one value
arg2.range.begin == 25
arg2.range.end == 30
size(arg0.elements[]) == 1
===========================================================================
com.iconmaster.hppplus.link.handler.FunctionLinker:::OBJECT
this has only one value
===========================================================================
com.iconmaster.hppplus.link.handler.FunctionLinker.FunctionLinker():::EXIT
===========================================================================
com.iconmaster.hppplus.link.handler.FunctionLinker.handleGlobal(com.iconmaster.hppplus.link.Linker, com.iconmaster.hppplus.link.LinkSpaceGlobal, com.iconmaster.hppplus.parse.element.block.ElementFunction):::ENTER
arg0 has only one value
com.iconmaster.hppplus.link.Linker.handlers has only one value
arg0.elements has only one value
arg0.elements[] contains no nulls and has only one value, of length 2
arg0.elements[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.parse.element.block.ElementFunction]
arg1 has only one value
arg1.functions has only one value
arg1.vars has only one value
arg1.statements has only one value
arg1.statements[] == []
arg1.statements[].getClass().getName() == []
arg2 has only one value
arg2.range has only one value
arg2.range.begin == 4
arg2.range.end == 34
arg2.name has only one value
arg2.name.toString == "test"
arg2.block has only one value
arg2.block[] contains no nulls and has only one value, of length 1
arg2.block[] elements has only one value
arg2.block[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment]
arg2.block[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.operator.ElementAssignment.class
arg2.args has only one value
arg2.args[] contains no nulls and has only one value, of length 2
arg2.args[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.parse.element.ElementVariable]
arg2.args[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.ElementVariable.class
arg2.blockSize == 4
size(arg0.elements[]) == 2
size(arg2.block[]) == 1
size(arg2.args[]) == 2
===========================================================================
com.iconmaster.hppplus.link.handler.FunctionLinker.handleGlobal(com.iconmaster.hppplus.link.Linker, com.iconmaster.hppplus.link.LinkSpaceGlobal, com.iconmaster.hppplus.parse.element.block.ElementFunction):::EXIT
com.iconmaster.hppplus.link.Linker.handlers == orig(com.iconmaster.hppplus.link.Linker.handlers)
arg0.elements == orig(arg0.elements)
arg0.elements[] == orig(arg0.elements[])
arg1.functions == orig(arg1.functions)
arg1.vars == orig(arg1.vars)
arg1.statements == orig(arg1.statements)
arg1.statements[] == orig(arg1.statements[])
arg2.range == orig(arg2.range)
arg2.range.begin == orig(arg2.range.begin)
arg2.range.end == orig(arg2.range.end)
arg2.name == orig(arg2.name)
arg2.name.toString == orig(arg2.name.toString)
arg2.block == orig(arg2.block)
arg2.block[] == orig(arg2.block[])
arg2.args == orig(arg2.args)
arg2.args[] == orig(arg2.args[])
arg2.blockSize == orig(arg2.blockSize)
com.iconmaster.hppplus.link.Linker.handlers has only one value
arg0.elements has only one value
arg0.elements[] contains no nulls and has only one value, of length 2
arg0.elements[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.parse.element.block.ElementFunction]
arg1.functions has only one value
arg1.vars has only one value
arg1.statements has only one value
arg1.statements[] == []
arg1.statements[].getClass().getName() == []
arg2.range has only one value
arg2.range.begin == 4
arg2.range.end == 34
arg2.name has only one value
arg2.name.toString == "test"
arg2.block has only one value
arg2.block[] contains no nulls and has only one value, of length 1
arg2.block[] elements has only one value
arg2.block[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment]
arg2.block[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.operator.ElementAssignment.class
arg2.args has only one value
arg2.args[] contains no nulls and has only one value, of length 2
arg2.args[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.parse.element.ElementVariable]
arg2.args[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.ElementVariable.class
arg2.blockSize == 4
size(arg0.elements[]) == 2
size(arg2.block[]) == 1
size(arg2.args[]) == 2
===========================================================================
com.iconmaster.hppplus.parse.Parser:::CLASS
com.iconmaster.hppplus.parse.Parser.opl1.getClass().getName() == com.iconmaster.hppplus.parse.Parser.opl2.getClass().getName()
com.iconmaster.hppplus.parse.Parser.opl1.getClass().getName() == com.iconmaster.hppplus.parse.Parser.opl3.getClass().getName()
com.iconmaster.hppplus.parse.Parser.opl1 has only one value
com.iconmaster.hppplus.parse.Parser.opl1 != null
com.iconmaster.hppplus.parse.Parser.opl1.getClass().getName() == java.lang.String[].class
com.iconmaster.hppplus.parse.Parser.opl1[] contains no nulls and has only one value, of length 10
com.iconmaster.hppplus.parse.Parser.opl1[] elements != null
com.iconmaster.hppplus.parse.Parser.opl1[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
com.iconmaster.hppplus.parse.Parser.opl1[].getClass().getName() elements == java.lang.String.class
com.iconmaster.hppplus.parse.Parser.opl1[].toString == [^, *, /, %, +, -, &, |, <<, >>]
com.iconmaster.hppplus.parse.Parser.opl2 has only one value
com.iconmaster.hppplus.parse.Parser.opl2 != null
com.iconmaster.hppplus.parse.Parser.opl2[] contains no nulls and has only one value, of length 2
com.iconmaster.hppplus.parse.Parser.opl2[] elements != null
com.iconmaster.hppplus.parse.Parser.opl2[].getClass().getName() == [java.lang.String, java.lang.String]
com.iconmaster.hppplus.parse.Parser.opl2[].getClass().getName() elements == java.lang.String.class
com.iconmaster.hppplus.parse.Parser.opl2[].toString == [-, !]
com.iconmaster.hppplus.parse.Parser.opl2[].toString elements one of { "!", "-" }
com.iconmaster.hppplus.parse.Parser.opl3 has only one value
com.iconmaster.hppplus.parse.Parser.opl3 != null
com.iconmaster.hppplus.parse.Parser.opl3[] contains no nulls and has only one value, of length 8
com.iconmaster.hppplus.parse.Parser.opl3[] elements != null
com.iconmaster.hppplus.parse.Parser.opl3[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
com.iconmaster.hppplus.parse.Parser.opl3[].getClass().getName() elements == java.lang.String.class
com.iconmaster.hppplus.parse.Parser.opl3[].toString == [==, !=, <, >, <=, >=, &&, ||]
com.iconmaster.hppplus.parse.Parser.handlers has only one value
com.iconmaster.hppplus.parse.Parser.handlers != null
com.iconmaster.hppplus.parse.Parser.handlers[] elements != null
size(com.iconmaster.hppplus.parse.Parser.opl1[]) == 10
size(com.iconmaster.hppplus.parse.Parser.opl2[]) == 2
size(com.iconmaster.hppplus.parse.Parser.opl3[]) == 8
===========================================================================
com.iconmaster.hppplus.parse.Parser:::OBJECT
com.iconmaster.hppplus.parse.Parser.handlers[] contains no nulls and has only one value, of length 43
com.iconmaster.hppplus.parse.Parser.handlers[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementWhitespace, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.ElementIndex, com.iconmaster.hppplus.parse.element.ElementRefCall, com.iconmaster.hppplus.parse.element.ElementRef, com.iconmaster.hppplus.parse.element.ElementParen, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.parse.element.ElementNumber, com.iconmaster.hppplus.parse.element.ElementString, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementCast, com.iconmaster.hppplus.parse.element.operator.ElementClassTest, com.iconmaster.hppplus.parse.element.operator.ElementUnaryOperator, com.iconmaster.hppplus.parse.element.operator.ElementUnaryOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.parse.element.block.ElementIf, com.iconmaster.hppplus.parse.element.block.ElementWhile, com.iconmaster.hppplus.parse.element.block.ElementFor, com.iconmaster.hppplus.parse.element.block.ElementFunction, com.iconmaster.hppplus.parse.element.block.ElementReturn, com.iconmaster.hppplus.parse.element.block.ElementBreak, com.iconmaster.hppplus.parse.element.block.ElementContinue, com.iconmaster.hppplus.parse.element.block.ElementLocal, com.iconmaster.hppplus.parse.element.ElementSeperator, com.iconmaster.hppplus.parse.element.ElementGlobalDirective, com.iconmaster.hppplus.parse.element.ElementDirective]
size(this.data[]) one of { 1, 3, 14 }
size(com.iconmaster.hppplus.parse.Parser.handlers[]) == 43
===========================================================================
com.iconmaster.hppplus.parse.Parser.Parser(java.util.ArrayList):::ENTER
size(arg0[]) one of { 1, 3, 14 }
===========================================================================
com.iconmaster.hppplus.parse.Parser.Parser(java.util.ArrayList):::EXIT
arg0[] == orig(arg0[])
===========================================================================
com.iconmaster.hppplus.parse.Parser.parse():::ENTER
===========================================================================
com.iconmaster.hppplus.parse.Parser.parse():::EXIT
com.iconmaster.hppplus.parse.Parser.opl1 == orig(com.iconmaster.hppplus.parse.Parser.opl1)
com.iconmaster.hppplus.parse.Parser.opl1.getClass().getName() == orig(com.iconmaster.hppplus.parse.Parser.opl1.getClass().getName())
com.iconmaster.hppplus.parse.Parser.opl1.getClass().getName() == orig(com.iconmaster.hppplus.parse.Parser.opl2.getClass().getName())
com.iconmaster.hppplus.parse.Parser.opl1.getClass().getName() == orig(com.iconmaster.hppplus.parse.Parser.opl3.getClass().getName())
com.iconmaster.hppplus.parse.Parser.opl1[] == orig(com.iconmaster.hppplus.parse.Parser.opl1[])
com.iconmaster.hppplus.parse.Parser.opl2 == orig(com.iconmaster.hppplus.parse.Parser.opl2)
com.iconmaster.hppplus.parse.Parser.opl2[] == orig(com.iconmaster.hppplus.parse.Parser.opl2[])
com.iconmaster.hppplus.parse.Parser.opl3 == orig(com.iconmaster.hppplus.parse.Parser.opl3)
com.iconmaster.hppplus.parse.Parser.opl3[] == orig(com.iconmaster.hppplus.parse.Parser.opl3[])
this.data == orig(this.data)
this.data[] == orig(this.data[])
com.iconmaster.hppplus.parse.Parser.handlers == orig(com.iconmaster.hppplus.parse.Parser.handlers)
com.iconmaster.hppplus.parse.Parser.handlers[] == orig(com.iconmaster.hppplus.parse.Parser.handlers[])
size(return[]) one of { 1, 2 }
===========================================================================
com.iconmaster.hppplus.parse.Parser.registerDefaultHandlers():::ENTER
com.iconmaster.hppplus.parse.Parser.handlers[] == []
com.iconmaster.hppplus.parse.Parser.handlers[].getClass().getName() == []
===========================================================================
com.iconmaster.hppplus.parse.Parser.registerDefaultHandlers():::EXIT
com.iconmaster.hppplus.parse.Parser.opl1 == orig(com.iconmaster.hppplus.parse.Parser.opl1)
com.iconmaster.hppplus.parse.Parser.opl1.getClass().getName() == orig(com.iconmaster.hppplus.parse.Parser.opl1.getClass().getName())
com.iconmaster.hppplus.parse.Parser.opl1.getClass().getName() == orig(com.iconmaster.hppplus.parse.Parser.opl2.getClass().getName())
com.iconmaster.hppplus.parse.Parser.opl1.getClass().getName() == orig(com.iconmaster.hppplus.parse.Parser.opl3.getClass().getName())
com.iconmaster.hppplus.parse.Parser.opl1[] == orig(com.iconmaster.hppplus.parse.Parser.opl1[])
com.iconmaster.hppplus.parse.Parser.opl2 == orig(com.iconmaster.hppplus.parse.Parser.opl2)
com.iconmaster.hppplus.parse.Parser.opl2[] == orig(com.iconmaster.hppplus.parse.Parser.opl2[])
com.iconmaster.hppplus.parse.Parser.opl3 == orig(com.iconmaster.hppplus.parse.Parser.opl3)
com.iconmaster.hppplus.parse.Parser.opl3[] == orig(com.iconmaster.hppplus.parse.Parser.opl3[])
com.iconmaster.hppplus.parse.Parser.handlers == orig(com.iconmaster.hppplus.parse.Parser.handlers)
com.iconmaster.hppplus.parse.Parser.handlers[] contains no nulls and has only one value, of length 43
com.iconmaster.hppplus.parse.Parser.handlers[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementWhitespace, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.ElementIndex, com.iconmaster.hppplus.parse.element.ElementRefCall, com.iconmaster.hppplus.parse.element.ElementRef, com.iconmaster.hppplus.parse.element.ElementParen, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.parse.element.ElementNumber, com.iconmaster.hppplus.parse.element.ElementString, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementCast, com.iconmaster.hppplus.parse.element.operator.ElementClassTest, com.iconmaster.hppplus.parse.element.operator.ElementUnaryOperator, com.iconmaster.hppplus.parse.element.operator.ElementUnaryOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementOperator, com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.parse.element.block.ElementIf, com.iconmaster.hppplus.parse.element.block.ElementWhile, com.iconmaster.hppplus.parse.element.block.ElementFor, com.iconmaster.hppplus.parse.element.block.ElementFunction, com.iconmaster.hppplus.parse.element.block.ElementReturn, com.iconmaster.hppplus.parse.element.block.ElementBreak, com.iconmaster.hppplus.parse.element.block.ElementContinue, com.iconmaster.hppplus.parse.element.block.ElementLocal, com.iconmaster.hppplus.parse.element.ElementSeperator, com.iconmaster.hppplus.parse.element.ElementGlobalDirective, com.iconmaster.hppplus.parse.element.ElementDirective]
size(com.iconmaster.hppplus.parse.Parser.handlers[]) == 43
===========================================================================
com.iconmaster.hppplus.parse.Parser.registerHandler(com.iconmaster.hppplus.parse.Element):::ENTER
arg0 != null
com.iconmaster.hppplus.parse.Parser.opl1.getClass().getName() != arg0.getClass().getName()
===========================================================================
com.iconmaster.hppplus.parse.Parser.registerHandler(com.iconmaster.hppplus.parse.Element):::EXIT
com.iconmaster.hppplus.parse.Parser.opl1 == orig(com.iconmaster.hppplus.parse.Parser.opl1)
com.iconmaster.hppplus.parse.Parser.opl1.getClass().getName() == orig(com.iconmaster.hppplus.parse.Parser.opl1.getClass().getName())
com.iconmaster.hppplus.parse.Parser.opl1.getClass().getName() == orig(com.iconmaster.hppplus.parse.Parser.opl2.getClass().getName())
com.iconmaster.hppplus.parse.Parser.opl1.getClass().getName() == orig(com.iconmaster.hppplus.parse.Parser.opl3.getClass().getName())
com.iconmaster.hppplus.parse.Parser.opl1[] == orig(com.iconmaster.hppplus.parse.Parser.opl1[])
com.iconmaster.hppplus.parse.Parser.opl2 == orig(com.iconmaster.hppplus.parse.Parser.opl2)
com.iconmaster.hppplus.parse.Parser.opl2[] == orig(com.iconmaster.hppplus.parse.Parser.opl2[])
com.iconmaster.hppplus.parse.Parser.opl3 == orig(com.iconmaster.hppplus.parse.Parser.opl3)
com.iconmaster.hppplus.parse.Parser.opl3[] == orig(com.iconmaster.hppplus.parse.Parser.opl3[])
com.iconmaster.hppplus.parse.Parser.handlers == orig(com.iconmaster.hppplus.parse.Parser.handlers)
size(com.iconmaster.hppplus.parse.Parser.handlers[])-1 == orig(size(com.iconmaster.hppplus.parse.Parser.handlers[]))
com.iconmaster.hppplus.parse.Parser.opl1.getClass().getName() != orig(arg0.getClass().getName())
orig(arg0.getClass().getName()) in com.iconmaster.hppplus.parse.Parser.handlers[].getClass().getName()
===========================================================================
com.iconmaster.hppplus.parse.element.ElementDirective:::OBJECT
this has only one value
this.value == null
this.range == null
===========================================================================
com.iconmaster.hppplus.parse.element.ElementDirective.ElementDirective():::EXIT
===========================================================================
com.iconmaster.hppplus.parse.element.ElementDirective.isMatch(java.util.ArrayList, int):::ENTER
arg1 one of { 0, 1 }
size(arg0[]) one of { 1, 2 }
===========================================================================
com.iconmaster.hppplus.parse.element.ElementDirective.isMatch(java.util.ArrayList, int):::EXIT
this.value == orig(this.value)
this.range == orig(this.range)
arg0[] == orig(arg0[])
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.ElementDirective.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.ElementGlobalDirective:::OBJECT
this has only one value
this.value == null
this.range == null
===========================================================================
com.iconmaster.hppplus.parse.element.ElementGlobalDirective.ElementGlobalDirective():::EXIT
===========================================================================
com.iconmaster.hppplus.parse.element.ElementGlobalDirective.isMatch(java.util.ArrayList, int):::ENTER
arg1 one of { 0, 1 }
size(arg0[]) one of { 1, 2 }
===========================================================================
com.iconmaster.hppplus.parse.element.ElementGlobalDirective.isMatch(java.util.ArrayList, int):::EXIT
this.value == orig(this.value)
this.range == orig(this.range)
arg0[] == orig(arg0[])
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.ElementGlobalDirective.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.ElementIndex:::OBJECT
this has only one value
this.lvalue == null
this.args == null
this.range == null
===========================================================================
com.iconmaster.hppplus.parse.element.ElementIndex.ElementIndex():::EXIT
===========================================================================
com.iconmaster.hppplus.parse.element.ElementIndex.isMatch(java.util.ArrayList, int):::ENTER
arg0 != null
arg0[] elements != null
arg1 >= 0
size(arg0[]) one of { 1, 2, 9 }
===========================================================================
com.iconmaster.hppplus.parse.element.ElementIndex.isMatch(java.util.ArrayList, int):::EXIT55
orig(arg1) one of { 0, 1, 8 }
===========================================================================
com.iconmaster.hppplus.parse.element.ElementIndex.isMatch(java.util.ArrayList, int):::EXIT55;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.ElementIndex.isMatch(java.util.ArrayList, int):::EXIT56
arg0[].getClass().getName() one of { [com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenWord], [com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenWord] }
orig(size(arg0[])) one of { 2, 9 }
===========================================================================
com.iconmaster.hppplus.parse.element.ElementIndex.isMatch(java.util.ArrayList, int):::EXIT56;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.ElementIndex.isMatch(java.util.ArrayList, int):::EXIT
this.lvalue == orig(this.lvalue)
this.args == orig(this.args)
this.range == orig(this.range)
arg0[] == orig(arg0[])
arg0[] elements != null
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.ElementIndex.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.ElementNumber:::OBJECT
this.value.toString == "1"
this.range.begin == 2
this.range.end == 3
===========================================================================
com.iconmaster.hppplus.parse.element.ElementNumber.ElementNumber():::EXIT
this.value == null
this.range == null
===========================================================================
com.iconmaster.hppplus.parse.element.ElementNumber.ElementNumber(java.lang.String, com.iconmaster.hppplus.SourceRange):::ENTER
arg0 has only one value
arg0.toString == "1"
arg1 has only one value
arg1.begin == 2
arg1.end == 3
===========================================================================
com.iconmaster.hppplus.parse.element.ElementNumber.ElementNumber(java.lang.String, com.iconmaster.hppplus.SourceRange):::EXIT
this.value == orig(arg0)
this.range == orig(arg1)
this.range.begin == arg1.begin
this.range.end == arg1.end
arg0.toString == orig(arg0.toString)
arg1.begin == orig(arg1.begin)
arg1.end == orig(arg1.end)
this.value has only one value
this.range has only one value
arg0.toString == "1"
arg1.begin == 2
arg1.end == 3
===========================================================================
com.iconmaster.hppplus.parse.element.ElementNumber.getDeletionLength():::ENTER
this has only one value
this.value has only one value
this.range has only one value
===========================================================================
com.iconmaster.hppplus.parse.element.ElementNumber.getDeletionLength():::EXIT
this.value == orig(this.value)
this.value.toString == orig(this.value.toString)
this.range == orig(this.range)
this.range.begin == orig(this.range.begin)
this.range.end == orig(this.range.end)
this.value has only one value
this.range has only one value
return == 1
===========================================================================
com.iconmaster.hppplus.parse.element.ElementNumber.getRange():::ENTER
this has only one value
this.value has only one value
this.range has only one value
===========================================================================
com.iconmaster.hppplus.parse.element.ElementNumber.getRange():::EXIT
this.value == orig(this.value)
this.value.toString == orig(this.value.toString)
this.range == return
this.range.begin == return.begin
this.range.end == return.end
return == orig(this.range)
return.begin == orig(this.range.begin)
return.end == orig(this.range.end)
this.value has only one value
return has only one value
return.begin == 2
return.end == 3
===========================================================================
com.iconmaster.hppplus.parse.element.ElementNumber.isMatch(java.util.ArrayList, int):::ENTER
this has only one value
this.value == null
this.range == null
arg0 != null
arg0[] elements != null
arg1 >= 0
size(arg0[]) one of { 1, 2, 9 }
===========================================================================
com.iconmaster.hppplus.parse.element.ElementNumber.isMatch(java.util.ArrayList, int):::EXIT
this.value == orig(this.value)
this.range == orig(this.range)
arg0[] == orig(arg0[])
(return == false)  ==>  (orig(size(arg0[])) one of { 1, 2, 9 })
(return == true)  ==>  (arg0[] contains no nulls and has only one value, of length 9)
(return == true)  ==>  (arg0[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenWord])
(return == true)  ==>  (orig(arg0) has only one value)
(return == true)  ==>  (orig(arg1) == 2)
(return == true)  ==>  (orig(size(arg0[])) == 9)
this.value == null
this.range == null
arg0[] elements != null
===========================================================================
com.iconmaster.hppplus.parse.element.ElementNumber.isMatch(java.util.ArrayList, int):::EXIT;condition="return == true"
arg0[] contains no nulls and has only one value, of length 9
arg0[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenWord]
return == true
orig(arg0) has only one value
orig(arg1) == 2
orig(size(arg0[])) == 9
===========================================================================
com.iconmaster.hppplus.parse.element.ElementNumber.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.ElementNumber.match(java.util.ArrayList, int):::ENTER
this has only one value
this.value == null
this.range == null
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 9
arg0[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenWord]
arg1 == 2
size(arg0[]) == 9
===========================================================================
com.iconmaster.hppplus.parse.element.ElementNumber.match(java.util.ArrayList, int):::EXIT
this.value == orig(this.value)
this.range == orig(this.range)
arg0[] == orig(arg0[])
this.value == null
this.range == null
arg0[] contains no nulls and has only one value, of length 9
arg0[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenWord]
return has only one value
return.getClass().getName() == com.iconmaster.hppplus.parse.element.ElementNumber.class
===========================================================================
com.iconmaster.hppplus.parse.element.ElementNumber.toString():::ENTER
this has only one value
this.value has only one value
this.range has only one value
===========================================================================
com.iconmaster.hppplus.parse.element.ElementNumber.toString():::EXIT
this.value == orig(this.value)
this.value.toString == orig(this.value.toString)
this.range == orig(this.range)
this.range.begin == orig(this.range.begin)
this.range.end == orig(this.range.end)
this.value has only one value
this.range has only one value
return has only one value
return.toString == "{NUM: 1 at 2~3}"
===========================================================================
com.iconmaster.hppplus.parse.element.ElementParen:::OBJECT
this has only one value
this.value == null
this.range == null
===========================================================================
com.iconmaster.hppplus.parse.element.ElementParen.ElementParen():::EXIT
===========================================================================
com.iconmaster.hppplus.parse.element.ElementParen.isMatch(java.util.ArrayList, int):::ENTER
arg0 != null
arg0[] elements != null
arg1 >= 0
size(arg0[]) one of { 1, 2, 9 }
===========================================================================
com.iconmaster.hppplus.parse.element.ElementParen.isMatch(java.util.ArrayList, int):::EXIT
this.value == orig(this.value)
this.range == orig(this.range)
arg0[] == orig(arg0[])
arg0[] elements != null
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.ElementParen.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.ElementRef:::OBJECT
this has only one value
this.name == null
this.field == null
this.range == null
===========================================================================
com.iconmaster.hppplus.parse.element.ElementRef.ElementRef():::EXIT
===========================================================================
com.iconmaster.hppplus.parse.element.ElementRef.isMatch(java.util.ArrayList, int):::ENTER
arg0 != null
arg0[] elements != null
arg1 >= 0
size(arg0[]) one of { 1, 2, 9 }
===========================================================================
com.iconmaster.hppplus.parse.element.ElementRef.isMatch(java.util.ArrayList, int):::EXIT56
orig(arg1) one of { 0, 1, 8 }
===========================================================================
com.iconmaster.hppplus.parse.element.ElementRef.isMatch(java.util.ArrayList, int):::EXIT56;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.ElementRef.isMatch(java.util.ArrayList, int):::EXIT57
arg0[].getClass().getName() one of { [com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenWord], [com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenWord] }
orig(size(arg0[])) one of { 2, 9 }
===========================================================================
com.iconmaster.hppplus.parse.element.ElementRef.isMatch(java.util.ArrayList, int):::EXIT57;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.ElementRef.isMatch(java.util.ArrayList, int):::EXIT
this.name == orig(this.name)
this.field == orig(this.field)
this.range == orig(this.range)
arg0[] == orig(arg0[])
arg0[] elements != null
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.ElementRef.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.ElementRefCall:::OBJECT
this has only one value
this.func == null
this.args == null
this.member == null
this.range == null
===========================================================================
com.iconmaster.hppplus.parse.element.ElementRefCall.ElementRefCall():::EXIT
===========================================================================
com.iconmaster.hppplus.parse.element.ElementRefCall.isMatch(java.util.ArrayList, int):::ENTER
arg0 != null
arg0[] elements != null
arg1 >= 0
size(arg0[]) one of { 1, 2, 9 }
===========================================================================
com.iconmaster.hppplus.parse.element.ElementRefCall.isMatch(java.util.ArrayList, int):::EXIT59
===========================================================================
com.iconmaster.hppplus.parse.element.ElementRefCall.isMatch(java.util.ArrayList, int):::EXIT59;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.ElementRefCall.isMatch(java.util.ArrayList, int):::EXIT60
arg0[] contains no nulls and has only one value, of length 9
arg0[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenWord]
orig(arg0) has only one value
orig(size(arg0[])) == 9
===========================================================================
com.iconmaster.hppplus.parse.element.ElementRefCall.isMatch(java.util.ArrayList, int):::EXIT60;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.ElementRefCall.isMatch(java.util.ArrayList, int):::EXIT
this.func == orig(this.func)
this.args == orig(this.args)
this.member == orig(this.member)
this.range == orig(this.range)
arg0[] == orig(arg0[])
arg0[] elements != null
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.ElementRefCall.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.ElementSeperator:::OBJECT
this has only one value
this.range == null
===========================================================================
com.iconmaster.hppplus.parse.element.ElementSeperator.ElementSeperator():::EXIT
===========================================================================
com.iconmaster.hppplus.parse.element.ElementSeperator.isMatch(java.util.ArrayList, int):::ENTER
arg1 one of { 0, 1 }
size(arg0[]) one of { 1, 2 }
===========================================================================
com.iconmaster.hppplus.parse.element.ElementSeperator.isMatch(java.util.ArrayList, int):::EXIT
this.range == orig(this.range)
arg0[] == orig(arg0[])
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.ElementSeperator.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.ElementString:::OBJECT
this has only one value
this.value == null
this.range == null
===========================================================================
com.iconmaster.hppplus.parse.element.ElementString.ElementString():::EXIT
===========================================================================
com.iconmaster.hppplus.parse.element.ElementString.isMatch(java.util.ArrayList, int):::ENTER
arg0 != null
arg0[] elements != null
arg1 >= 0
size(arg0[]) one of { 1, 2, 9 }
===========================================================================
com.iconmaster.hppplus.parse.element.ElementString.isMatch(java.util.ArrayList, int):::EXIT
this.value == orig(this.value)
this.range == orig(this.range)
arg0[] == orig(arg0[])
arg0[] elements != null
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.ElementString.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.ElementVariable:::OBJECT
this.value.toString one of { "i", "v1", "v2" }
this.range.begin >= 0
this.range.end >= 1
===========================================================================
com.iconmaster.hppplus.parse.element.ElementVariable.ElementVariable():::EXIT
this.value == null
this.range == null
===========================================================================
com.iconmaster.hppplus.parse.element.ElementVariable.ElementVariable(java.lang.String, com.iconmaster.hppplus.SourceRange):::ENTER
arg0.toString one of { "i", "v1", "v2" }
===========================================================================
com.iconmaster.hppplus.parse.element.ElementVariable.ElementVariable(java.lang.String, com.iconmaster.hppplus.SourceRange):::EXIT
this.value == orig(arg0)
this.range == orig(arg1)
this.range.begin == arg1.begin
this.range.end == arg1.end
arg0.toString == orig(arg0.toString)
arg1.begin == orig(arg1.begin)
arg1.end == orig(arg1.end)
arg0.toString one of { "i", "v1", "v2" }
===========================================================================
com.iconmaster.hppplus.parse.element.ElementVariable.getDeletionLength():::ENTER
this.range.begin < this.range.end
===========================================================================
com.iconmaster.hppplus.parse.element.ElementVariable.getDeletionLength():::EXIT
this.value == orig(this.value)
this.value.toString == orig(this.value.toString)
this.range == orig(this.range)
this.range.begin == orig(this.range.begin)
this.range.end == orig(this.range.end)
return == 1
this.range.begin < this.range.end
===========================================================================
com.iconmaster.hppplus.parse.element.ElementVariable.getParsedContent():::ENTER
===========================================================================
com.iconmaster.hppplus.parse.element.ElementVariable.getParsedContent():::EXIT
this.value == return
this.value == orig(this.value)
this.value.toString == orig(this.value.toString)
this.range == orig(this.range)
this.range.begin == orig(this.range.begin)
this.range.end == orig(this.range.end)
return.getClass().getName() == java.lang.String.class
===========================================================================
com.iconmaster.hppplus.parse.element.ElementVariable.getRange():::ENTER
this.range.begin one of { 0, 25, 28 }
this.range.end one of { 1, 27, 30 }
===========================================================================
com.iconmaster.hppplus.parse.element.ElementVariable.getRange():::EXIT
this.value == orig(this.value)
this.value.toString == orig(this.value.toString)
this.range == return
this.range.begin == return.begin
this.range.end == return.end
return == orig(this.range)
return.begin == orig(this.range.begin)
return.end == orig(this.range.end)
return.begin one of { 0, 25, 28 }
return.end one of { 1, 27, 30 }
===========================================================================
com.iconmaster.hppplus.parse.element.ElementVariable.isMatch(java.util.ArrayList, int):::ENTER
this has only one value
this.value == null
this.range == null
arg0 != null
arg0[] elements != null
arg1 >= 0
size(arg0[]) one of { 1, 2, 9 }
===========================================================================
com.iconmaster.hppplus.parse.element.ElementVariable.isMatch(java.util.ArrayList, int):::EXIT
this.value == orig(this.value)
this.range == orig(this.range)
arg0[] == orig(arg0[])
(return == false)  ==>  (orig(size(arg0[])) one of { 1, 2, 9 })
(return == true)  ==>  (orig(size(arg0[])) one of { 2, 9 })
this.value == null
this.range == null
arg0[] elements != null
===========================================================================
com.iconmaster.hppplus.parse.element.ElementVariable.isMatch(java.util.ArrayList, int):::EXIT;condition="return == true"
return == true
orig(size(arg0[])) one of { 2, 9 }
===========================================================================
com.iconmaster.hppplus.parse.element.ElementVariable.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.ElementVariable.match(java.util.ArrayList, int):::ENTER
this has only one value
this.value == null
this.range == null
size(arg0[]) one of { 2, 9 }
===========================================================================
com.iconmaster.hppplus.parse.element.ElementVariable.match(java.util.ArrayList, int):::EXIT
this.value == orig(this.value)
this.range == orig(this.range)
arg0[] == orig(arg0[])
this.value == null
this.range == null
return.getClass().getName() == com.iconmaster.hppplus.parse.element.ElementVariable.class
===========================================================================
com.iconmaster.hppplus.parse.element.ElementVariable.toString():::ENTER
this.range.begin one of { 0, 25, 28 }
this.range.end one of { 1, 27, 30 }
===========================================================================
com.iconmaster.hppplus.parse.element.ElementVariable.toString():::EXIT
this.value == orig(this.value)
this.value.toString == orig(this.value.toString)
this.range == orig(this.range)
this.range.begin == orig(this.range.begin)
this.range.end == orig(this.range.end)
this.range.begin one of { 0, 25, 28 }
this.range.end one of { 1, 27, 30 }
return.toString one of { "{VAR: i at 0~1}", "{VAR: v1 at 25~27}", "{VAR: v2 at 28~30}" }
===========================================================================
com.iconmaster.hppplus.parse.element.ElementWhitespace:::OBJECT
this has only one value
this.range == null
===========================================================================
com.iconmaster.hppplus.parse.element.ElementWhitespace.ElementWhitespace():::EXIT
===========================================================================
com.iconmaster.hppplus.parse.element.ElementWhitespace.getDeletionLength():::ENTER
===========================================================================
com.iconmaster.hppplus.parse.element.ElementWhitespace.getDeletionLength():::EXIT
this.range == orig(this.range)
return == 1
===========================================================================
com.iconmaster.hppplus.parse.element.ElementWhitespace.isMatch(java.util.ArrayList, int):::ENTER
arg0 != null
arg0[] elements != null
arg1 >= 0
===========================================================================
com.iconmaster.hppplus.parse.element.ElementWhitespace.isMatch(java.util.ArrayList, int):::EXIT
this.range == orig(this.range)
arg0[] == orig(arg0[])
arg0[] elements != null
===========================================================================
com.iconmaster.hppplus.parse.element.ElementWhitespace.isMatch(java.util.ArrayList, int):::EXIT;condition="return == true"
return == true
===========================================================================
com.iconmaster.hppplus.parse.element.ElementWhitespace.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.ElementWhitespace.match(java.util.ArrayList, int):::ENTER
===========================================================================
com.iconmaster.hppplus.parse.element.ElementWhitespace.match(java.util.ArrayList, int):::EXIT
this.range == orig(this.range)
arg0[] == orig(arg0[])
return == null
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementBreak:::OBJECT
this has only one value
this.range == null
this.value == null
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementBreak.ElementBreak():::EXIT
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementBreak.isMatch(java.util.ArrayList, int):::ENTER
arg1 one of { 0, 1 }
size(arg0[]) one of { 1, 2 }
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementBreak.isMatch(java.util.ArrayList, int):::EXIT34
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementBreak.isMatch(java.util.ArrayList, int):::EXIT34;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementBreak.isMatch(java.util.ArrayList, int):::EXIT
this.range == orig(this.range)
this.value == orig(this.value)
arg0[] == orig(arg0[])
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementBreak.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementContinue:::OBJECT
this has only one value
this.range == null
this.value == null
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementContinue.ElementContinue():::EXIT
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementContinue.isMatch(java.util.ArrayList, int):::ENTER
arg1 one of { 0, 1 }
size(arg0[]) one of { 1, 2 }
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementContinue.isMatch(java.util.ArrayList, int):::EXIT34
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementContinue.isMatch(java.util.ArrayList, int):::EXIT34;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementContinue.isMatch(java.util.ArrayList, int):::EXIT
this.range == orig(this.range)
this.value == orig(this.value)
arg0[] == orig(arg0[])
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementContinue.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFor:::OBJECT
this has only one value
this.range == null
this.var == null
this.block == null
this.blockSize == 0
this.goal == null
this.step == null
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFor.ElementFor():::EXIT
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFor.isMatch(java.util.ArrayList, int):::ENTER
arg1 >= 0
size(arg0[]) one of { 1, 2, 5 }
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFor.isMatch(java.util.ArrayList, int):::EXIT56
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFor.isMatch(java.util.ArrayList, int):::EXIT56;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFor.isMatch(java.util.ArrayList, int):::EXIT59
arg0[] contains no nulls and has only one value, of length 5
arg0[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord]
orig(arg0) has only one value
orig(arg1) == 1
orig(size(arg0[])) == 5
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFor.isMatch(java.util.ArrayList, int):::EXIT59;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFor.isMatch(java.util.ArrayList, int):::EXIT61
arg0[] contains no nulls and has only one value, of length 5
arg0[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord]
orig(arg0) has only one value
orig(arg1) == 0
orig(size(arg0[])) == 5
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFor.isMatch(java.util.ArrayList, int):::EXIT61;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFor.isMatch(java.util.ArrayList, int):::EXIT
this.range == orig(this.range)
this.var == orig(this.var)
this.block == orig(this.block)
this.blockSize == orig(this.blockSize)
this.goal == orig(this.goal)
this.step == orig(this.step)
arg0[] == orig(arg0[])
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFor.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction$FunctionData:::OBJECT
this.name == com.iconmaster.hppplus.parse.element.block.ElementFunction.this.name
this.block == com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block
this.args == com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args
this has only one value
this.name has only one value
this.name.toString == "test"
this.block has only one value
this.block[] contains no nulls and has only one value, of length 1
this.block[] elements has only one value
this.block[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment]
this.block[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.operator.ElementAssignment.class
this.args has only one value
this.args[] contains no nulls and has only one value, of length 2
this.args[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.parse.element.ElementVariable]
this.args[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.ElementVariable.class
com.iconmaster.hppplus.parse.element.block.ElementFunction.this has only one value
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range has only one value
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.begin == 4
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.end == 34
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.name.toString == "test"
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[] contains no nulls and has only one value, of length 1
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[] elements has only one value
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment]
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.operator.ElementAssignment.class
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[] contains no nulls and has only one value, of length 2
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.parse.element.ElementVariable]
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.ElementVariable.class
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.blockSize == 4
size(this.block[]) == 1
size(this.args[]) == 2
size(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[]) == 1
size(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[]) == 2
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction$FunctionData.FunctionData(com.iconmaster.hppplus.parse.element.block.ElementFunction, java.lang.String, java.util.ArrayList, java.util.ArrayList):::ENTER
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.name == arg1
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block == arg2
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args == arg3
com.iconmaster.hppplus.parse.element.block.ElementFunction.this has only one value
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range has only one value
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.begin == 4
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.end == 34
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.name.toString == "test"
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[] contains no nulls and has only one value, of length 1
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[] elements has only one value
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment]
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.operator.ElementAssignment.class
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[] contains no nulls and has only one value, of length 2
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.parse.element.ElementVariable]
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.ElementVariable.class
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.blockSize == 4
arg1 has only one value
arg1.toString == "test"
arg2 has only one value
arg2[] contains no nulls and has only one value, of length 1
arg2[] elements has only one value
arg2[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment]
arg2[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.operator.ElementAssignment.class
arg3 has only one value
arg3[] contains no nulls and has only one value, of length 2
arg3[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.parse.element.ElementVariable]
arg3[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.ElementVariable.class
size(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[]) == 1
size(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[]) == 2
size(arg2[]) == 1
size(arg3[]) == 2
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction$FunctionData.FunctionData(com.iconmaster.hppplus.parse.element.block.ElementFunction, java.lang.String, java.util.ArrayList, java.util.ArrayList):::EXIT
this.name == orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.name)
this.name == orig(arg1)
this.block == orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block)
this.block == orig(arg2)
this.args == orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args)
this.args == orig(arg3)
com.iconmaster.hppplus.parse.element.block.ElementFunction.this == orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this)
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range == orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range)
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.begin == orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.begin)
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.end == orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.range.end)
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.name.toString == orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.name.toString)
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[] == orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.block[])
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[] == orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.args[])
com.iconmaster.hppplus.parse.element.block.ElementFunction.this.blockSize == orig(com.iconmaster.hppplus.parse.element.block.ElementFunction.this.blockSize)
arg1.toString == orig(arg1.toString)
arg2[] == orig(arg2[])
arg3[] == orig(arg3[])
arg1.toString == "test"
arg2[] contains no nulls and has only one value, of length 1
arg2[] elements has only one value
arg2[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment]
arg2[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.operator.ElementAssignment.class
arg3[] contains no nulls and has only one value, of length 2
arg3[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.parse.element.ElementVariable]
arg3[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.ElementVariable.class
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction:::OBJECT
this.range.begin == 4
this.range.end == 34
this.name.toString == "test"
this.block[] contains no nulls and has only one value, of length 1
this.block[] elements has only one value
this.block[] elements != null
this.block[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment]
this.block[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.operator.ElementAssignment.class
this.args[] contains no nulls and has only one value, of length 2
this.args[] elements != null
this.args[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.parse.element.ElementVariable]
this.args[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.ElementVariable.class
this.blockSize one of { 0, 4 }
size(this.block[]) == 1
size(this.args[]) == 2
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction.ElementFunction():::EXIT
this.range == null
this.name == null
this.block == null
this.args == null
this.blockSize == 0
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction.ElementFunction(java.lang.String, java.util.ArrayList, java.util.ArrayList, int, com.iconmaster.hppplus.SourceRange):::ENTER
arg0 has only one value
arg0.toString == "test"
arg1 has only one value
arg1[] contains no nulls and has only one value, of length 1
arg1[] elements has only one value
arg1[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment]
arg1[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.operator.ElementAssignment.class
arg2 has only one value
arg2[] contains no nulls and has only one value, of length 2
arg2[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.parse.element.ElementVariable]
arg2[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.ElementVariable.class
arg3 == 4
arg4 has only one value
arg4.begin == 4
arg4.end == 34
size(arg1[]) == 1
size(arg2[]) == 2
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction.ElementFunction(java.lang.String, java.util.ArrayList, java.util.ArrayList, int, com.iconmaster.hppplus.SourceRange):::EXIT
this.range == orig(arg4)
this.range.begin == arg4.begin
this.range.end == arg4.end
this.name == orig(arg0)
this.block == orig(arg1)
this.args == orig(arg2)
this.blockSize == orig(arg3)
arg0.toString == orig(arg0.toString)
arg1[] == orig(arg1[])
arg2[] == orig(arg2[])
arg4.begin == orig(arg4.begin)
arg4.end == orig(arg4.end)
this.range has only one value
this.name has only one value
this.block has only one value
this.args has only one value
this.blockSize == 4
arg0.toString == "test"
arg1[] contains no nulls and has only one value, of length 1
arg1[] elements has only one value
arg1[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment]
arg1[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.operator.ElementAssignment.class
arg2[] contains no nulls and has only one value, of length 2
arg2[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.parse.element.ElementVariable]
arg2[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.ElementVariable.class
arg4.begin == 4
arg4.end == 34
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction.getDeletionLength():::ENTER
this has only one value
this.range has only one value
this.name has only one value
this.block has only one value
this.args has only one value
this.blockSize == 4
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction.getDeletionLength():::EXIT
this.range == orig(this.range)
this.range.begin == orig(this.range.begin)
this.range.end == orig(this.range.end)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.block == orig(this.block)
this.block[] == orig(this.block[])
this.args == orig(this.args)
this.args[] == orig(this.args[])
this.blockSize == return
return == orig(this.blockSize)
this.range has only one value
this.name has only one value
this.block has only one value
this.args has only one value
return == 4
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction.getParsedContent():::ENTER
this has only one value
this.range has only one value
this.name has only one value
this.block has only one value
this.args has only one value
this.blockSize == 4
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction.getParsedContent():::EXIT
this.range == orig(this.range)
this.range.begin == orig(this.range.begin)
this.range.end == orig(this.range.end)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.block == orig(this.block)
this.block[] == orig(this.block[])
this.args == orig(this.args)
this.args[] == orig(this.args[])
this.blockSize == orig(this.blockSize)
this.range has only one value
this.name has only one value
this.block has only one value
this.args has only one value
this.blockSize == 4
return has only one value
return.getClass().getName() == com.iconmaster.hppplus.parse.element.block.ElementFunction$FunctionData.class
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction.isMatch(java.util.ArrayList, int):::ENTER
this has only one value
this.range == null
this.name == null
this.block == null
this.args == null
this.blockSize == 0
arg1 one of { 0, 1 }
size(arg0[]) one of { 1, 2, 5 }
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction.isMatch(java.util.ArrayList, int):::EXIT65
return == false
orig(size(arg0[])) one of { 1, 2 }
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction.isMatch(java.util.ArrayList, int):::EXIT65;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction.isMatch(java.util.ArrayList, int):::EXIT68
arg0[] contains no nulls and has only one value, of length 5
arg0[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord]
return == true
orig(arg0) has only one value
orig(arg1) == 1
orig(size(arg0[])) == 5
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction.isMatch(java.util.ArrayList, int):::EXIT68;condition="return == true"
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction.isMatch(java.util.ArrayList, int):::EXIT70
arg0[] contains no nulls and has only one value, of length 5
arg0[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord]
return == false
orig(arg0) has only one value
orig(arg1) == 0
orig(size(arg0[])) == 5
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction.isMatch(java.util.ArrayList, int):::EXIT70;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction.isMatch(java.util.ArrayList, int):::EXIT
this.range == orig(this.range)
this.name == orig(this.name)
this.block == orig(this.block)
this.args == orig(this.args)
this.blockSize == orig(this.blockSize)
arg0[] == orig(arg0[])
(return == false)  ==>  (orig(arg1) one of { 0, 1 })
(return == false)  ==>  (orig(size(arg0[])) one of { 1, 2, 5 })
(return == true)  ==>  (arg0[] contains no nulls and has only one value, of length 5)
(return == true)  ==>  (arg0[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord])
(return == true)  ==>  (orig(arg0) has only one value)
(return == true)  ==>  (orig(arg1) == 1)
(return == true)  ==>  (orig(size(arg0[])) == 5)
this.range == null
this.name == null
this.block == null
this.args == null
this.blockSize == 0
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction.isMatch(java.util.ArrayList, int):::EXIT;condition="return == true"
arg0[] contains no nulls and has only one value, of length 5
arg0[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord]
return == true
orig(arg0) has only one value
orig(arg1) == 1
orig(size(arg0[])) == 5
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction.match(java.util.ArrayList, int):::ENTER
this has only one value
this.range == null
this.name == null
this.block == null
this.args == null
this.blockSize == 0
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 5
arg0[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord]
arg1 == 1
size(arg0[]) == 5
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction.match(java.util.ArrayList, int):::EXIT
this.range == orig(this.range)
this.name == orig(this.name)
this.block == orig(this.block)
this.args == orig(this.args)
this.blockSize == orig(this.blockSize)
arg0[] == orig(arg0[])
this.range == null
this.name == null
this.block == null
this.args == null
this.blockSize == 0
arg0[] contains no nulls and has only one value, of length 5
arg0[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord]
return has only one value
return.getClass().getName() == com.iconmaster.hppplus.parse.element.block.ElementFunction.class
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction.toString():::ENTER
this has only one value
this.range has only one value
this.name has only one value
this.block has only one value
this.args has only one value
this.blockSize == 4
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementFunction.toString():::EXIT
this.range == orig(this.range)
this.range.begin == orig(this.range.begin)
this.range.end == orig(this.range.end)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.block == orig(this.block)
this.block[] == orig(this.block[])
this.args == orig(this.args)
this.args[] == orig(this.args[])
this.blockSize == orig(this.blockSize)
this.range has only one value
this.name has only one value
this.block has only one value
this.args has only one value
this.blockSize == 4
return has only one value
return.toString == "{FUNCTION (test) at 4~34:\n\t{= at 25~30:\n\t\t{VAR: v1 at 25~27}\n\t\t{VAR: v2 at 28~30}\n\t}\n}"
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementIf:::OBJECT
this has only one value
this.range == null
this.cond == null
this.thenb == null
this.elseb == null
this.blockSize == 0
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementIf.ElementIf():::EXIT
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementIf.isMatch(java.util.ArrayList, int):::ENTER
arg1 >= 0
size(arg0[]) one of { 1, 2, 5 }
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementIf.isMatch(java.util.ArrayList, int):::EXIT55
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementIf.isMatch(java.util.ArrayList, int):::EXIT55;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementIf.isMatch(java.util.ArrayList, int):::EXIT58
arg0[] contains no nulls and has only one value, of length 5
arg0[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord]
orig(arg0) has only one value
orig(arg1) == 1
orig(size(arg0[])) == 5
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementIf.isMatch(java.util.ArrayList, int):::EXIT58;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementIf.isMatch(java.util.ArrayList, int):::EXIT60
arg0[] contains no nulls and has only one value, of length 5
arg0[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord]
orig(arg0) has only one value
orig(arg1) == 0
orig(size(arg0[])) == 5
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementIf.isMatch(java.util.ArrayList, int):::EXIT60;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementIf.isMatch(java.util.ArrayList, int):::EXIT
this.range == orig(this.range)
this.cond == orig(this.cond)
this.thenb == orig(this.thenb)
this.elseb == orig(this.elseb)
this.blockSize == orig(this.blockSize)
arg0[] == orig(arg0[])
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementIf.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementLocal:::OBJECT
this has only one value
this.range == null
this.vars == null
this.blockSize == 0
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementLocal.ElementLocal():::EXIT
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementLocal.isMatch(java.util.ArrayList, int):::ENTER
arg1 one of { 0, 1 }
size(arg0[]) one of { 1, 2 }
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementLocal.isMatch(java.util.ArrayList, int):::EXIT42
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementLocal.isMatch(java.util.ArrayList, int):::EXIT42;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementLocal.isMatch(java.util.ArrayList, int):::EXIT
this.range == orig(this.range)
this.vars == orig(this.vars)
this.blockSize == orig(this.blockSize)
arg0[] == orig(arg0[])
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementLocal.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementReturn:::OBJECT
this has only one value
this.range == null
this.value == null
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementReturn.ElementReturn():::EXIT
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementReturn.isMatch(java.util.ArrayList, int):::ENTER
arg1 one of { 0, 1 }
size(arg0[]) one of { 1, 2 }
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementReturn.isMatch(java.util.ArrayList, int):::EXIT34
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementReturn.isMatch(java.util.ArrayList, int):::EXIT34;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementReturn.isMatch(java.util.ArrayList, int):::EXIT
this.range == orig(this.range)
this.value == orig(this.value)
arg0[] == orig(arg0[])
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementReturn.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementWhile:::OBJECT
this has only one value
this.range == null
this.cond == null
this.block == null
this.blockSize == 0
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementWhile.ElementWhile():::EXIT
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementWhile.isMatch(java.util.ArrayList, int):::ENTER
arg1 >= 0
size(arg0[]) one of { 1, 2, 5 }
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementWhile.isMatch(java.util.ArrayList, int):::EXIT49
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementWhile.isMatch(java.util.ArrayList, int):::EXIT49;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementWhile.isMatch(java.util.ArrayList, int):::EXIT52
arg0[] contains no nulls and has only one value, of length 5
arg0[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord]
orig(arg0) has only one value
orig(arg1) == 1
orig(size(arg0[])) == 5
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementWhile.isMatch(java.util.ArrayList, int):::EXIT52;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementWhile.isMatch(java.util.ArrayList, int):::EXIT54
arg0[] contains no nulls and has only one value, of length 5
arg0[].getClass().getName() == [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord]
orig(arg0) has only one value
orig(arg1) == 0
orig(size(arg0[])) == 5
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementWhile.isMatch(java.util.ArrayList, int):::EXIT54;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementWhile.isMatch(java.util.ArrayList, int):::EXIT
this.range == orig(this.range)
this.cond == orig(this.cond)
this.block == orig(this.block)
this.blockSize == orig(this.blockSize)
arg0[] == orig(arg0[])
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.block.ElementWhile.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment$AssignmentData:::OBJECT
this.lvalue == com.iconmaster.hppplus.parse.element.operator.ElementAssignment.this.lvalue
this.lvalue.getClass().getName() == com.iconmaster.hppplus.parse.element.operator.ElementAssignment.this.lvalue.getClass().getName()
this.rvalue == com.iconmaster.hppplus.parse.element.operator.ElementAssignment.this.rvalue
this.rvalue.getClass().getName() == com.iconmaster.hppplus.parse.element.operator.ElementAssignment.this.rvalue.getClass().getName()
this.lvalue.getClass().getName() == com.iconmaster.hppplus.parse.element.ElementVariable.class
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.this.range.begin one of { 0, 25 }
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.this.range.end one of { 3, 30 }
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment$AssignmentData.AssignmentData(com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.parse.Element, com.iconmaster.hppplus.parse.Element):::ENTER
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.this.lvalue == arg1
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.this.lvalue.getClass().getName() == arg1.getClass().getName()
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.this.rvalue == arg2
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.this.rvalue.getClass().getName() == arg2.getClass().getName()
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.this.range.begin one of { 0, 25 }
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.this.range.end one of { 3, 30 }
arg1.getClass().getName() == com.iconmaster.hppplus.parse.element.ElementVariable.class
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment$AssignmentData.AssignmentData(com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.parse.Element, com.iconmaster.hppplus.parse.Element):::EXIT
this.lvalue == orig(com.iconmaster.hppplus.parse.element.operator.ElementAssignment.this.lvalue)
this.lvalue == orig(arg1)
this.lvalue.getClass().getName() == orig(com.iconmaster.hppplus.parse.element.operator.ElementAssignment.this.lvalue.getClass().getName())
this.lvalue.getClass().getName() == orig(arg1.getClass().getName())
this.rvalue == orig(com.iconmaster.hppplus.parse.element.operator.ElementAssignment.this.rvalue)
this.rvalue == orig(arg2)
this.rvalue.getClass().getName() == orig(com.iconmaster.hppplus.parse.element.operator.ElementAssignment.this.rvalue.getClass().getName())
this.rvalue.getClass().getName() == orig(arg2.getClass().getName())
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.this == orig(com.iconmaster.hppplus.parse.element.operator.ElementAssignment.this)
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.this.range == orig(com.iconmaster.hppplus.parse.element.operator.ElementAssignment.this.range)
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.this.range.begin == orig(com.iconmaster.hppplus.parse.element.operator.ElementAssignment.this.range.begin)
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.this.range.end == orig(com.iconmaster.hppplus.parse.element.operator.ElementAssignment.this.range.end)
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment:::OBJECT
this.lvalue.getClass().getName() == com.iconmaster.hppplus.parse.element.ElementVariable.class
this.range.begin one of { 0, 25 }
this.range.end one of { 3, 30 }
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.ElementAssignment():::EXIT
this.lvalue == null
this.rvalue == null
this.range == null
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.ElementAssignment(com.iconmaster.hppplus.parse.Element, com.iconmaster.hppplus.parse.Element, com.iconmaster.hppplus.SourceRange):::ENTER
arg0.getClass().getName() == com.iconmaster.hppplus.parse.element.ElementVariable.class
arg2.begin one of { 0, 25 }
arg2.end one of { 3, 30 }
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.ElementAssignment(com.iconmaster.hppplus.parse.Element, com.iconmaster.hppplus.parse.Element, com.iconmaster.hppplus.SourceRange):::EXIT
this.lvalue == orig(arg0)
this.lvalue.getClass().getName() == orig(arg0.getClass().getName())
this.rvalue == orig(arg1)
this.rvalue.getClass().getName() == orig(arg1.getClass().getName())
this.range == orig(arg2)
this.range.begin == arg2.begin
this.range.end == arg2.end
arg2.begin == orig(arg2.begin)
arg2.end == orig(arg2.end)
arg2.begin one of { 0, 25 }
arg2.end one of { 3, 30 }
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.getDeletionLength():::ENTER
this.range.begin < this.range.end
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.getDeletionLength():::EXIT
this.lvalue == orig(this.lvalue)
this.lvalue.getClass().getName() == orig(this.lvalue.getClass().getName())
this.rvalue == orig(this.rvalue)
this.rvalue.getClass().getName() == orig(this.rvalue.getClass().getName())
this.range == orig(this.range)
this.range.begin == orig(this.range.begin)
this.range.end == orig(this.range.end)
return == 3
this.range.begin < this.range.end
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.getParsedContent():::ENTER
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.getParsedContent():::EXIT
this.lvalue == orig(this.lvalue)
this.lvalue.getClass().getName() == orig(this.lvalue.getClass().getName())
this.rvalue == orig(this.rvalue)
this.rvalue.getClass().getName() == orig(this.rvalue.getClass().getName())
this.range == orig(this.range)
this.range.begin == orig(this.range.begin)
this.range.end == orig(this.range.end)
return.getClass().getName() == com.iconmaster.hppplus.parse.element.operator.ElementAssignment$AssignmentData.class
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.getRange():::ENTER
this.lvalue.getClass().getName() == this.rvalue.getClass().getName()
this has only one value
this.lvalue has only one value
this.rvalue has only one value
this.range has only one value
this.range.begin == 25
this.range.end == 30
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.getRange():::EXIT
this.lvalue == orig(this.lvalue)
this.lvalue.getClass().getName() == this.rvalue.getClass().getName()
this.lvalue.getClass().getName() == orig(this.lvalue.getClass().getName())
this.lvalue.getClass().getName() == orig(this.rvalue.getClass().getName())
this.rvalue == orig(this.rvalue)
this.range == return
this.range.begin == return.begin
this.range.end == return.end
return == orig(this.range)
return.begin == orig(this.range.begin)
return.end == orig(this.range.end)
this.lvalue has only one value
this.rvalue has only one value
return has only one value
return.begin == 25
return.end == 30
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.isMatch(java.util.ArrayList, int):::ENTER
this has only one value
this.lvalue == null
this.rvalue == null
this.range == null
arg0 != null
arg0[] elements != null
arg1 >= 0
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.isMatch(java.util.ArrayList, int):::EXIT51
return == false
orig(size(arg0[])) one of { 1, 2, 5 }
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.isMatch(java.util.ArrayList, int):::EXIT51;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.isMatch(java.util.ArrayList, int):::EXIT55
arg0[].getClass().getName() one of { [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementNumber, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenWord], [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenWord] }
return == true
orig(arg0) has only one value
orig(arg1) one of { 0, 3 }
orig(size(arg0[])) one of { 7, 9 }
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.isMatch(java.util.ArrayList, int):::EXIT55;condition="return == true"
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.isMatch(java.util.ArrayList, int):::EXIT58
arg0[].getClass().getName() one of { [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenWord], [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord] }
return == false
orig(arg0) has only one value
orig(arg1) one of { 0, 1, 2 }
orig(size(arg0[])) one of { 5, 7 }
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.isMatch(java.util.ArrayList, int):::EXIT58;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.isMatch(java.util.ArrayList, int):::EXIT
this.lvalue == orig(this.lvalue)
this.rvalue == orig(this.rvalue)
this.range == orig(this.range)
arg0[] == orig(arg0[])
(return == true)  ==>  (arg0[].getClass().getName() one of { [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementNumber, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenWord], [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenWord] })
(return == true)  ==>  (orig(arg0) has only one value)
(return == true)  ==>  (orig(arg1) one of { 0, 3 })
(return == true)  ==>  (orig(size(arg0[])) one of { 7, 9 })
this.lvalue == null
this.rvalue == null
this.range == null
arg0[] elements != null
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.isMatch(java.util.ArrayList, int):::EXIT;condition="return == true"
arg0[].getClass().getName() one of { [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementNumber, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenWord], [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenWord] }
return == true
orig(arg0) has only one value
orig(arg1) one of { 0, 3 }
orig(size(arg0[])) one of { 7, 9 }
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.match(java.util.ArrayList, int):::ENTER
this has only one value
this.lvalue == null
this.rvalue == null
this.range == null
arg0 has only one value
arg0[].getClass().getName() one of { [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementNumber, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenWord], [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenWord] }
arg1 one of { 0, 3 }
size(arg0[]) one of { 7, 9 }
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.match(java.util.ArrayList, int):::EXIT
this.lvalue == orig(this.lvalue)
this.rvalue == orig(this.rvalue)
this.range == orig(this.range)
arg0[] == orig(arg0[])
this.lvalue == null
this.rvalue == null
this.range == null
arg0[].getClass().getName() one of { [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementNumber, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenWord], [com.iconmaster.hppplus.parse.element.operator.ElementAssignment, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenWord] }
return.getClass().getName() == com.iconmaster.hppplus.parse.element.operator.ElementAssignment.class
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.toString():::ENTER
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementAssignment.toString():::EXIT
this.lvalue == orig(this.lvalue)
this.lvalue.getClass().getName() == orig(this.lvalue.getClass().getName())
this.rvalue == orig(this.rvalue)
this.rvalue.getClass().getName() == orig(this.rvalue.getClass().getName())
this.range == orig(this.range)
this.range.begin == orig(this.range.begin)
this.range.end == orig(this.range.end)
return.toString one of { "{= at 0~3:\n\t{VAR: i at 0~1}\n\t{NUM: 1 at 2~3}\n}", "{= at 25~30:\n\t{VAR: v1 at 25~27}\n\t{VAR: v2 at 28~30}\n}" }
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCall$CallData:::OBJECT
this.name == com.iconmaster.hppplus.parse.element.operator.ElementCall.this.name
this.args == com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args
this.name has only one value
this.name.toString == "test"
this.args has only one value
this.args[] contains no nulls and has only one value, of length 2
this.args[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.parse.element.ElementVariable]
this.args[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.ElementVariable.class
com.iconmaster.hppplus.parse.element.operator.ElementCall.this has only one value
com.iconmaster.hppplus.parse.element.operator.ElementCall.this.name.toString == "test"
com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[] contains no nulls and has only one value, of length 2
com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.parse.element.ElementVariable]
com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.ElementVariable.class
com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range has only one value
com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range.begin == 13
com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range.end == 24
size(this.args[]) == 2
size(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[]) == 2
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCall$CallData.CallData(com.iconmaster.hppplus.parse.element.operator.ElementCall, java.lang.String, java.util.ArrayList):::ENTER
com.iconmaster.hppplus.parse.element.operator.ElementCall.this.name == arg1
com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args == arg2
com.iconmaster.hppplus.parse.element.operator.ElementCall.this has only one value
com.iconmaster.hppplus.parse.element.operator.ElementCall.this.name.toString == "test"
com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[] contains no nulls and has only one value, of length 2
com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.parse.element.ElementVariable]
com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.ElementVariable.class
com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range has only one value
com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range.begin == 13
com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range.end == 24
arg1 has only one value
arg1.toString == "test"
arg2 has only one value
arg2[] contains no nulls and has only one value, of length 2
arg2[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.parse.element.ElementVariable]
arg2[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.ElementVariable.class
size(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[]) == 2
size(arg2[]) == 2
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCall$CallData.CallData(com.iconmaster.hppplus.parse.element.operator.ElementCall, java.lang.String, java.util.ArrayList):::EXIT
this.name == orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.name)
this.name == orig(arg1)
this.args == orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args)
this.args == orig(arg2)
com.iconmaster.hppplus.parse.element.operator.ElementCall.this == orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this)
com.iconmaster.hppplus.parse.element.operator.ElementCall.this.name.toString == orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.name.toString)
com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[] == orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.args[])
com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range == orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range)
com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range.begin == orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range.begin)
com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range.end == orig(com.iconmaster.hppplus.parse.element.operator.ElementCall.this.range.end)
arg1.toString == orig(arg1.toString)
arg2[] == orig(arg2[])
arg1.toString == "test"
arg2[] contains no nulls and has only one value, of length 2
arg2[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.parse.element.ElementVariable]
arg2[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.ElementVariable.class
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCall:::OBJECT
this.name.toString == "test"
this.args[] contains no nulls and has only one value, of length 2
this.args[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.parse.element.ElementVariable]
this.args[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.ElementVariable.class
this.range.begin == 13
this.range.end == 24
size(this.args[]) == 2
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCall.ElementCall():::EXIT
this.name == null
this.args == null
this.range == null
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCall.ElementCall(java.lang.String, java.util.ArrayList, com.iconmaster.hppplus.SourceRange):::ENTER
arg0 has only one value
arg0.toString == "test"
arg1 has only one value
arg1[] contains no nulls and has only one value, of length 2
arg1[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.parse.element.ElementVariable]
arg1[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.ElementVariable.class
arg2 has only one value
arg2.begin == 13
arg2.end == 24
size(arg1[]) == 2
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCall.ElementCall(java.lang.String, java.util.ArrayList, com.iconmaster.hppplus.SourceRange):::EXIT
this.name == orig(arg0)
this.args == orig(arg1)
this.range == orig(arg2)
this.range.begin == arg2.begin
this.range.end == arg2.end
arg0.toString == orig(arg0.toString)
arg1[] == orig(arg1[])
arg2.begin == orig(arg2.begin)
arg2.end == orig(arg2.end)
this.name has only one value
this.args has only one value
this.range has only one value
arg0.toString == "test"
arg1[] contains no nulls and has only one value, of length 2
arg1[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.parse.element.ElementVariable]
arg1[].getClass().getName() elements == com.iconmaster.hppplus.parse.element.ElementVariable.class
arg2.begin == 13
arg2.end == 24
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCall.getDeletionLength():::ENTER
this has only one value
this.name has only one value
this.args has only one value
this.range has only one value
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCall.getDeletionLength():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.args == orig(this.args)
this.args[] == orig(this.args[])
this.range == orig(this.range)
this.range.begin == orig(this.range.begin)
this.range.end == orig(this.range.end)
this.name has only one value
this.args has only one value
this.range has only one value
return == 2
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCall.getParsedContent():::ENTER
this has only one value
this.name has only one value
this.args has only one value
this.range has only one value
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCall.getParsedContent():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.args == orig(this.args)
this.args[] == orig(this.args[])
this.range == orig(this.range)
this.range.begin == orig(this.range.begin)
this.range.end == orig(this.range.end)
this.name has only one value
this.args has only one value
this.range has only one value
return.getClass().getName() == com.iconmaster.hppplus.parse.element.operator.ElementCall$CallData.class
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCall.isMatch(java.util.ArrayList, int):::ENTER
this has only one value
this.name == null
this.args == null
this.range == null
arg0 != null
arg0[] elements != null
arg1 >= 0
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCall.isMatch(java.util.ArrayList, int):::EXIT54
return == false
orig(arg1) one of { 0, 1, 8 }
orig(size(arg0[])) one of { 1, 2, 9 }
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCall.isMatch(java.util.ArrayList, int):::EXIT54;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCall.isMatch(java.util.ArrayList, int):::EXIT55
(return == false)  ==>  (orig(size(arg0[])) one of { 2, 9, 10 })
(return == true)  ==>  (arg0[] contains no nulls and has only one value, of length 10)
(return == true)  ==>  (arg0[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenWord])
(return == true)  ==>  (orig(arg0) has only one value)
(return == true)  ==>  (orig(arg1) == 4)
(return == true)  ==>  (orig(size(arg0[])) == 10)
orig(size(arg0[])) one of { 2, 9, 10 }
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCall.isMatch(java.util.ArrayList, int):::EXIT55;condition="return == true"
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCall.isMatch(java.util.ArrayList, int):::EXIT55;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCall.isMatch(java.util.ArrayList, int):::EXIT
this.name == orig(this.name)
this.args == orig(this.args)
this.range == orig(this.range)
arg0[] == orig(arg0[])
(return == true)  ==>  (arg0[] contains no nulls and has only one value, of length 10)
(return == true)  ==>  (arg0[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenWord])
(return == true)  ==>  (orig(arg0) has only one value)
(return == true)  ==>  (orig(arg1) == 4)
(return == true)  ==>  (orig(size(arg0[])) == 10)
this.name == null
this.args == null
this.range == null
arg0[] elements != null
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCall.isMatch(java.util.ArrayList, int):::EXIT;condition="return == true"
arg0[] contains no nulls and has only one value, of length 10
arg0[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenWord]
return == true
orig(arg0) has only one value
orig(arg1) == 4
orig(size(arg0[])) == 10
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCall.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCall.match(java.util.ArrayList, int):::ENTER
this has only one value
this.name == null
this.args == null
this.range == null
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 10
arg0[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenWord]
arg1 == 4
size(arg0[]) == 10
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCall.match(java.util.ArrayList, int):::EXIT
this.name == orig(this.name)
this.args == orig(this.args)
this.range == orig(this.range)
arg0[] == orig(arg0[])
this.name == null
this.args == null
this.range == null
arg0[] contains no nulls and has only one value, of length 10
arg0[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenWord]
return has only one value
return.getClass().getName() == com.iconmaster.hppplus.parse.element.operator.ElementCall.class
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCast:::OBJECT
this has only one value
this.lvalue == null
this.rvalue == null
this.range == null
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCast.ElementCast():::EXIT
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCast.isMatch(java.util.ArrayList, int):::ENTER
arg0 != null
arg0[] elements != null
arg1 >= 0
size(arg0[]) one of { 1, 2, 9 }
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCast.isMatch(java.util.ArrayList, int):::EXIT51
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCast.isMatch(java.util.ArrayList, int):::EXIT51;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCast.isMatch(java.util.ArrayList, int):::EXIT58
arg0[] contains no nulls and has only one value, of length 9
arg0[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementNumber, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenWord]
orig(arg0) has only one value
orig(size(arg0[])) == 9
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCast.isMatch(java.util.ArrayList, int):::EXIT58;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCast.isMatch(java.util.ArrayList, int):::EXIT
this.lvalue == orig(this.lvalue)
this.rvalue == orig(this.rvalue)
this.range == orig(this.range)
arg0[] == orig(arg0[])
arg0[] elements != null
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementCast.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementClassTest:::OBJECT
this has only one value
this.lvalue == null
this.rvalue == null
this.range == null
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementClassTest.ElementClassTest():::EXIT
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementClassTest.isMatch(java.util.ArrayList, int):::ENTER
arg0 != null
arg0[] elements != null
arg1 >= 0
size(arg0[]) one of { 1, 2, 9 }
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementClassTest.isMatch(java.util.ArrayList, int):::EXIT51
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementClassTest.isMatch(java.util.ArrayList, int):::EXIT51;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementClassTest.isMatch(java.util.ArrayList, int):::EXIT58
arg0[] contains no nulls and has only one value, of length 9
arg0[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementNumber, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenWord]
orig(arg0) has only one value
orig(size(arg0[])) == 9
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementClassTest.isMatch(java.util.ArrayList, int):::EXIT58;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementClassTest.isMatch(java.util.ArrayList, int):::EXIT
this.lvalue == orig(this.lvalue)
this.rvalue == orig(this.rvalue)
this.range == orig(this.range)
arg0[] == orig(arg0[])
arg0[] elements != null
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementClassTest.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementOperator:::OBJECT
this.op != null
this.lvalue == null
this.rvalue == null
this.range == null
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementOperator.ElementOperator(java.lang.String):::ENTER
arg0 != null
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementOperator.ElementOperator(java.lang.String):::EXIT
this.op == orig(arg0)
arg0.toString == orig(arg0.toString)
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementOperator.isMatch(java.util.ArrayList, int):::ENTER
arg0 != null
arg0[] elements != null
arg1 >= 0
size(arg0[]) one of { 1, 2, 9 }
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementOperator.isMatch(java.util.ArrayList, int):::EXIT55
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementOperator.isMatch(java.util.ArrayList, int):::EXIT55;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementOperator.isMatch(java.util.ArrayList, int):::EXIT62
arg0[] contains no nulls and has only one value, of length 9
arg0[].getClass().getName() == [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementNumber, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenWord]
orig(arg0) has only one value
orig(size(arg0[])) == 9
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementOperator.isMatch(java.util.ArrayList, int):::EXIT62;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementOperator.isMatch(java.util.ArrayList, int):::EXIT
this.op == orig(this.op)
this.op.toString == orig(this.op.toString)
this.lvalue == orig(this.lvalue)
this.rvalue == orig(this.rvalue)
this.range == orig(this.range)
arg0[] == orig(arg0[])
arg0[] elements != null
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementOperator.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementUnaryOperator:::OBJECT
this.op != null
this.op.toString one of { "!", "-" }
this.rvalue == null
this.range == null
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementUnaryOperator.ElementUnaryOperator(java.lang.String):::ENTER
arg0.toString one of { "!", "-" }
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementUnaryOperator.ElementUnaryOperator(java.lang.String):::EXIT
this.op == orig(arg0)
arg0.toString == orig(arg0.toString)
arg0.toString one of { "!", "-" }
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementUnaryOperator.isMatch(java.util.ArrayList, int):::ENTER
arg0 != null
arg0[] elements != null
arg1 >= 0
size(arg0[]) one of { 1, 2, 9 }
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementUnaryOperator.isMatch(java.util.ArrayList, int):::EXIT51
orig(arg1) one of { 0, 1, 8 }
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementUnaryOperator.isMatch(java.util.ArrayList, int):::EXIT51;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementUnaryOperator.isMatch(java.util.ArrayList, int):::EXIT58
arg0[].getClass().getName() one of { [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.parse.element.ElementVariable], [com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementNumber, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.parse.element.operator.ElementCall, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.parse.element.ElementVariable, com.iconmaster.hppplus.tokenize.element.TokenWord] }
orig(size(arg0[])) one of { 2, 9 }
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementUnaryOperator.isMatch(java.util.ArrayList, int):::EXIT58;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementUnaryOperator.isMatch(java.util.ArrayList, int):::EXIT
this.op == orig(this.op)
this.op.toString == orig(this.op.toString)
this.rvalue == orig(this.rvalue)
this.range == orig(this.range)
arg0[] == orig(arg0[])
arg0[] elements != null
return == false
===========================================================================
com.iconmaster.hppplus.parse.element.operator.ElementUnaryOperator.isMatch(java.util.ArrayList, int):::EXIT;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer:::CLASS
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] elements != null
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer:::OBJECT
this has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
this.index >= 0
this.input has only one value
this.input != null
this.input.getClass().getName() == java.lang.String.class
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.Tokenizer(java.lang.CharSequence):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.lang.String.class
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.Tokenizer(java.lang.CharSequence):::EXIT
this.input == orig(arg0)
this.input.getClass().getName() == orig(arg0.getClass().getName())
this.index == 0
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.advanceIndex():::ENTER
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.advanceIndex():::EXIT
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
this.input == orig(this.input)
this.input.getClass().getName() == orig(this.input.getClass().getName())
this.index - orig(this.index) - 1 == 0
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.advanceIndex(int):::ENTER
arg0 == 1
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.advanceIndex(int):::EXIT
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
this.input == orig(this.input)
this.input.getClass().getName() == orig(this.input.getClass().getName())
this.index - orig(this.index) - 1 == 0
this.index >= orig(arg0)
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.getChar():::ENTER
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.getChar():::EXIT
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
this.index == orig(this.index)
this.input == orig(this.input)
this.input.getClass().getName() == orig(this.input.getClass().getName())
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.getHandler(char):::ENTER
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.getHandler(char):::EXIT87
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.getHandler(char):::EXIT
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
this.index == orig(this.index)
this.input == orig(this.input)
this.input.getClass().getName() == orig(this.input.getClass().getName())
return != null
return.getClass().getName() in com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName()
this.input.getClass().getName() != return.getClass().getName()
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.getIndex():::ENTER
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.getIndex():::EXIT
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
this.index == return
this.input == orig(this.input)
this.input.getClass().getName() == orig(this.input.getClass().getName())
return == orig(this.index)
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.isEOF():::ENTER
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.isEOF():::EXIT
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
this.index == orig(this.index)
this.input == orig(this.input)
this.input.getClass().getName() == orig(this.input.getClass().getName())
(this.index == 34)  <==>  (return == true)
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.isEOF():::EXIT;condition="return == true"
this.index == 34
return == true
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.isEOF():::EXIT;condition="not(return == true)"
return == false
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.nextToken():::ENTER
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.nextToken():::EXIT61
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.nextToken():::EXIT
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
this.input == orig(this.input)
this.input.getClass().getName() == orig(this.input.getClass().getName())
return != null
return.getClass().getName() in com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName()
this.index > orig(this.index)
this.input.getClass().getName() != return.getClass().getName()
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.registerDefaultHandlers():::ENTER
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == []
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == []
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.registerDefaultHandlers():::EXIT
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.registerHandler(com.iconmaster.hppplus.tokenize.Token):::ENTER
arg0 != null
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.registerHandler(com.iconmaster.hppplus.tokenize.Token):::EXIT
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])-1 == orig(size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]))
orig(arg0.getClass().getName()) in com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName()
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.tokenize():::ENTER
this.index == 0
===========================================================================
com.iconmaster.hppplus.tokenize.Tokenizer.tokenize():::EXIT
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
this.input == orig(this.input)
this.input.getClass().getName() == orig(this.input.getClass().getName())
this.index == 34
return has only one value
return[] contains no nulls and has only one value, of length 14
return[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenWord]
size(return[]) == 14
===========================================================================
com.iconmaster.hppplus.tokenize.element.RecursiveMatchToken:::OBJECT
this.tokens[] contains no nulls and has only one value, of length 3
this.tokens[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenWord]
this.range.begin == 18
this.range.end == 24
size(this.tokens[]) == 3
===========================================================================
com.iconmaster.hppplus.tokenize.element.RecursiveMatchToken.RecursiveMatchToken():::EXIT
this.tokens == null
this.range == null
===========================================================================
com.iconmaster.hppplus.tokenize.element.RecursiveMatchToken.getParsedContent():::ENTER
this has only one value
this.tokens has only one value
this.range has only one value
===========================================================================
com.iconmaster.hppplus.tokenize.element.RecursiveMatchToken.getParsedContent():::EXIT
this.tokens == return
this.tokens == orig(this.tokens)
this.tokens[] == orig(this.tokens[])
this.range == orig(this.range)
this.range.begin == orig(this.range.begin)
this.range.end == orig(this.range.end)
this.tokens has only one value
this.range has only one value
return has only one value
return.getClass().getName() == java.util.ArrayList.class
===========================================================================
com.iconmaster.hppplus.tokenize.element.RecursiveMatchToken.getRange():::ENTER
this has only one value
this.tokens has only one value
this.range has only one value
===========================================================================
com.iconmaster.hppplus.tokenize.element.RecursiveMatchToken.getRange():::EXIT
this.tokens == orig(this.tokens)
this.tokens[] == orig(this.tokens[])
this.range == return
this.range.begin == return.begin
this.range.end == return.end
return == orig(this.range)
return.begin == orig(this.range.begin)
return.end == orig(this.range.end)
this.tokens has only one value
return has only one value
return.begin == 18
return.end == 24
===========================================================================
com.iconmaster.hppplus.tokenize.element.RecursiveMatchToken.isMatch(com.iconmaster.hppplus.tokenize.Tokenizer, char):::ENTER
this has only one value
this.tokens == null
this.range == null
arg0 has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.index == 17
arg0.input has only one value
arg0.input.getClass().getName() == java.lang.String.class
arg1 == 40
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.RecursiveMatchToken.isMatch(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT
this.tokens == orig(this.tokens)
this.range == orig(this.range)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
arg0.index == orig(arg0.index)
arg0.input == orig(arg0.input)
arg0.input.getClass().getName() == orig(arg0.input.getClass().getName())
this.tokens == null
this.range == null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.index == 17
arg0.input has only one value
arg0.input.getClass().getName() == java.lang.String.class
return == true
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.RecursiveMatchToken.isMatch(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT;condition="return == true"
===========================================================================
com.iconmaster.hppplus.tokenize.element.RecursiveMatchToken.match(com.iconmaster.hppplus.tokenize.Tokenizer):::ENTER
this has only one value
this.tokens == null
this.range == null
arg0 has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.index == 17
arg0.input has only one value
arg0.input.getClass().getName() == java.lang.String.class
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.RecursiveMatchToken.match(com.iconmaster.hppplus.tokenize.Tokenizer):::EXIT
this.tokens == orig(this.tokens)
this.range == orig(this.range)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
arg0.input == orig(arg0.input)
arg0.input.getClass().getName() == orig(arg0.input.getClass().getName())
this.tokens == null
this.range == null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.index == 24
arg0.input has only one value
arg0.input.getClass().getName() == java.lang.String.class
return has only one value
return.getClass().getName() == com.iconmaster.hppplus.tokenize.element.TokenChunk.class
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
return.getClass().getName() in com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName()
===========================================================================
com.iconmaster.hppplus.tokenize.element.RecursiveMatchToken.toString():::ENTER
this has only one value
this.tokens has only one value
this.range has only one value
===========================================================================
com.iconmaster.hppplus.tokenize.element.RecursiveMatchToken.toString():::EXIT
this.tokens == orig(this.tokens)
this.tokens[] == orig(this.tokens[])
this.range == orig(this.range)
this.range.begin == orig(this.range.begin)
this.range.end == orig(this.range.end)
this.tokens has only one value
this.range has only one value
return has only one value
return.toString == "[CHUNK at 18~24:\n\t[WORD: v1 at 18~20]\n\t[SPACE: null at 20~21]\n\t[WORD: v2 at 21~23]\n]"
===========================================================================
com.iconmaster.hppplus.tokenize.element.SimpleMatchToken:::OBJECT
this.range.begin >= 0
this.range.end >= 1
===========================================================================
com.iconmaster.hppplus.tokenize.element.SimpleMatchToken.SimpleMatchToken():::EXIT
this.content == null
this.range == null
===========================================================================
com.iconmaster.hppplus.tokenize.element.SimpleMatchToken.getParsedContent():::ENTER
this.content != null
this.range != null
this.range.begin < this.range.end
===========================================================================
com.iconmaster.hppplus.tokenize.element.SimpleMatchToken.getParsedContent():::EXIT
this.content == return
this.content == orig(this.content)
this.content.toString == orig(this.content.toString)
this.range == orig(this.range)
this.range.begin == orig(this.range.begin)
this.range.end == orig(this.range.end)
this.content != null
this.range != null
return != null
return.getClass().getName() == java.lang.String.class
this.range.begin < this.range.end
===========================================================================
com.iconmaster.hppplus.tokenize.element.SimpleMatchToken.getRange():::ENTER
this.range.begin < this.range.end
===========================================================================
com.iconmaster.hppplus.tokenize.element.SimpleMatchToken.getRange():::EXIT
this.content == orig(this.content)
this.content.toString == orig(this.content.toString)
this.range == return
this.range.begin == return.begin
this.range.end == return.end
return == orig(this.range)
return.begin == orig(this.range.begin)
return.end == orig(this.range.end)
return.begin < return.end
===========================================================================
com.iconmaster.hppplus.tokenize.element.SimpleMatchToken.isMatch(com.iconmaster.hppplus.tokenize.Tokenizer, char):::ENTER
this.content == null
this.range == null
arg0 has only one value
arg0 != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] elements != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input != null
arg0.input.getClass().getName() == java.lang.String.class
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.SimpleMatchToken.isMatch(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT
this.content == orig(this.content)
this.range == orig(this.range)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
arg0.index == orig(arg0.index)
arg0.input == orig(arg0.input)
arg0.input.getClass().getName() == orig(arg0.input.getClass().getName())
this.content == null
this.range == null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] elements != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input != null
arg0.input.getClass().getName() == java.lang.String.class
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.SimpleMatchToken.isMatch(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT;condition="return == true"
return == true
===========================================================================
com.iconmaster.hppplus.tokenize.element.SimpleMatchToken.isMatch(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT;condition="not(return == true)"
return == false
===========================================================================
com.iconmaster.hppplus.tokenize.element.SimpleMatchToken.match(com.iconmaster.hppplus.tokenize.Tokenizer):::ENTER
this.content == null
this.range == null
arg0 has only one value
arg0 != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] elements != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input != null
arg0.input.getClass().getName() == java.lang.String.class
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.SimpleMatchToken.match(com.iconmaster.hppplus.tokenize.Tokenizer):::EXIT
this.content == orig(this.content)
this.range == orig(this.range)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
arg0.input == orig(arg0.input)
arg0.input.getClass().getName() == orig(arg0.input.getClass().getName())
this.content == null
this.range == null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] elements != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input != null
arg0.input.getClass().getName() == java.lang.String.class
return != null
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
return.getClass().getName() in com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName()
arg0.index > orig(arg0.index)
arg0.input.getClass().getName() != return.getClass().getName()
===========================================================================
com.iconmaster.hppplus.tokenize.element.SimpleMatchToken.matchFirstChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::ENTER
this.content == null
this.range == null
arg0 has only one value
arg0 != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] elements != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input != null
arg0.input.getClass().getName() == java.lang.String.class
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.SimpleMatchToken.matchFirstChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT
this.content == orig(this.content)
this.range == orig(this.range)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
arg0.index == orig(arg0.index)
arg0.input == orig(arg0.input)
arg0.input.getClass().getName() == orig(arg0.input.getClass().getName())
this.content == null
this.range == null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] elements != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input != null
arg0.input.getClass().getName() == java.lang.String.class
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.SimpleMatchToken.matchFirstChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT;condition="return == true"
return == true
===========================================================================
com.iconmaster.hppplus.tokenize.element.SimpleMatchToken.matchFirstChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT;condition="not(return == true)"
return == false
===========================================================================
com.iconmaster.hppplus.tokenize.element.SimpleMatchToken.toString():::ENTER
this.range != null
===========================================================================
com.iconmaster.hppplus.tokenize.element.SimpleMatchToken.toString():::EXIT
this.content == orig(this.content)
this.content.toString == orig(this.content.toString)
this.range == orig(this.range)
this.range.begin == orig(this.range.begin)
this.range.end == orig(this.range.end)
this.range != null
return != null
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenChunk:::OBJECT
this.tokens[] contains no nulls and has only one value, of length 3
this.tokens[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenWord]
this.range.begin == 18
this.range.end == 24
size(this.tokens[]) == 3
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenChunk.TokenChunk():::EXIT
this.tokens == null
this.range == null
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenChunk.TokenChunk(java.util.ArrayList, com.iconmaster.hppplus.SourceRange):::ENTER
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 3
arg0[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenWord]
arg1 has only one value
arg1.begin == 18
arg1.end == 24
size(arg0[]) == 3
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenChunk.TokenChunk(java.util.ArrayList, com.iconmaster.hppplus.SourceRange):::EXIT
this.tokens == orig(arg0)
this.range == orig(arg1)
this.range.begin == arg1.begin
this.range.end == arg1.end
arg0[] == orig(arg0[])
arg1.begin == orig(arg1.begin)
arg1.end == orig(arg1.end)
this.tokens has only one value
this.range has only one value
arg0[] contains no nulls and has only one value, of length 3
arg0[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenWord]
arg1.begin == 18
arg1.end == 24
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenChunk.getPrefix():::ENTER
this has only one value
this.tokens has only one value
this.range has only one value
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenChunk.getPrefix():::EXIT
this.tokens == orig(this.tokens)
this.tokens[] == orig(this.tokens[])
this.range == orig(this.range)
this.range.begin == orig(this.range.begin)
this.range.end == orig(this.range.end)
this.tokens has only one value
this.range has only one value
return has only one value
return.toString == "CHUNK"
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenChunk.getToken(java.util.ArrayList, com.iconmaster.hppplus.SourceRange):::ENTER
this has only one value
this.tokens == null
this.range == null
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 3
arg0[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenWord]
arg1 has only one value
arg1.begin == 18
arg1.end == 24
size(arg0[]) == 3
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenChunk.getToken(java.util.ArrayList, com.iconmaster.hppplus.SourceRange):::EXIT
this.tokens == orig(this.tokens)
this.range == orig(this.range)
arg0[] == orig(arg0[])
arg1.begin == orig(arg1.begin)
arg1.end == orig(arg1.end)
this.tokens == null
this.range == null
arg0[] contains no nulls and has only one value, of length 3
arg0[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenWord]
arg1.begin == 18
arg1.end == 24
return has only one value
return.getClass().getName() == com.iconmaster.hppplus.tokenize.element.TokenChunk.class
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenChunk.matchFirstChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::ENTER
this has only one value
this.tokens == null
this.range == null
arg0 has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.index == 17
arg0.input has only one value
arg0.input.getClass().getName() == java.lang.String.class
arg1 == 40
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenChunk.matchFirstChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT
this.tokens == orig(this.tokens)
this.range == orig(this.range)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
arg0.index == orig(arg0.index)
arg0.input == orig(arg0.input)
arg0.input.getClass().getName() == orig(arg0.input.getClass().getName())
this.tokens == null
this.range == null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.index == 17
arg0.input has only one value
arg0.input.getClass().getName() == java.lang.String.class
return == true
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenChunk.matchFirstChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT;condition="return == true"
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenChunk.matchLastChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::ENTER
this has only one value
this.tokens == null
this.range == null
arg0 has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input.getClass().getName() == java.lang.String.class
arg1 one of { 41, 44, 118 }
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenChunk.matchLastChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT
this.tokens == orig(this.tokens)
this.range == orig(this.range)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
arg0.index == orig(arg0.index)
arg0.input == orig(arg0.input)
arg0.input.getClass().getName() == orig(arg0.input.getClass().getName())
(arg0.index == 23)  <==>  (orig(arg1) == 41)
(arg0.index == 23)  <==>  (return == true)
(arg0.index one of { 18, 20, 21 })  <==>  (orig(arg1) one of { 44, 118 })
(arg0.index one of { 18, 20, 21 })  <==>  (return == false)
this.tokens == null
this.range == null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input.getClass().getName() == java.lang.String.class
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenChunk.matchLastChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT;condition="return == true"
arg0.index == 23
return == true
orig(arg1) == 41
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenChunk.matchLastChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT;condition="not(return == true)"
arg0.index one of { 18, 20, 21 }
return == false
orig(arg1) one of { 44, 118 }
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenComment:::OBJECT
this has only one value
this.content == null
this.range == null
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenComment.TokenComment():::EXIT
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenComment.matchFirstChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::ENTER
arg0 has only one value
arg0 != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] elements != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input != null
arg0.input.getClass().getName() == java.lang.String.class
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenComment.matchFirstChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT34
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenComment.matchFirstChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT34;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenComment.matchFirstChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT
this.content == orig(this.content)
this.range == orig(this.range)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
arg0.index == orig(arg0.index)
arg0.input == orig(arg0.input)
arg0.input.getClass().getName() == orig(arg0.input.getClass().getName())
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] elements != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input != null
arg0.input.getClass().getName() == java.lang.String.class
return == false
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenComment.matchFirstChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenDirective:::OBJECT
this has only one value
this.content == null
this.range == null
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenDirective.TokenDirective():::EXIT
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenIndex:::OBJECT
this has only one value
this.tokens == null
this.range == null
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenIndex.TokenIndex():::EXIT
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenList:::OBJECT
this has only one value
this.tokens == null
this.range == null
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenList.TokenList():::EXIT
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenNumber:::OBJECT
this.content.toString == "1"
this.range.begin == 2
this.range.end == 3
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenNumber.TokenNumber():::EXIT
this.content == null
this.range == null
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenNumber.TokenNumber(java.lang.String, com.iconmaster.hppplus.SourceRange):::ENTER
arg0 has only one value
arg0.toString == "1"
arg1 has only one value
arg1.begin == 2
arg1.end == 3
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenNumber.TokenNumber(java.lang.String, com.iconmaster.hppplus.SourceRange):::EXIT
this.content == orig(arg0)
this.range == orig(arg1)
this.range.begin == arg1.begin
this.range.end == arg1.end
arg0.toString == orig(arg0.toString)
arg1.begin == orig(arg1.begin)
arg1.end == orig(arg1.end)
this.content has only one value
this.range has only one value
arg0.toString == "1"
arg1.begin == 2
arg1.end == 3
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenNumber.getPrefix():::ENTER
this has only one value
this.content has only one value
this.range has only one value
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenNumber.getPrefix():::EXIT
this.content == orig(this.content)
this.content.toString == orig(this.content.toString)
this.range == orig(this.range)
this.range.begin == orig(this.range.begin)
this.range.end == orig(this.range.end)
this.content has only one value
this.range has only one value
return has only one value
return.toString == "NUM"
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenNumber.getToken(java.lang.String, com.iconmaster.hppplus.SourceRange):::ENTER
this has only one value
this.content == null
this.range == null
arg0 has only one value
arg0.toString == "1"
arg1 has only one value
arg1.begin == 2
arg1.end == 3
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenNumber.getToken(java.lang.String, com.iconmaster.hppplus.SourceRange):::EXIT
this.content == orig(this.content)
this.range == orig(this.range)
arg0.toString == orig(arg0.toString)
arg1.begin == orig(arg1.begin)
arg1.end == orig(arg1.end)
this.content == null
this.range == null
arg0.toString == "1"
arg1.begin == 2
arg1.end == 3
return has only one value
return.getClass().getName() == com.iconmaster.hppplus.tokenize.element.TokenNumber.class
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenNumber.matchChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::ENTER
this has only one value
this.content == null
this.range == null
arg0 has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input.getClass().getName() == java.lang.String.class
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenNumber.matchChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT
this.content == orig(this.content)
this.range == orig(this.range)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
arg0.index == orig(arg0.index)
arg0.input == orig(arg0.input)
arg0.input.getClass().getName() == orig(arg0.input.getClass().getName())
(return == true)  ==>  (arg0.index == 2)
(return == true)  ==>  (orig(arg1) == 49)
this.content == null
this.range == null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input.getClass().getName() == java.lang.String.class
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenNumber.matchChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT;condition="return == true"
arg0.index == 2
return == true
orig(arg1) == 49
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenNumber.matchChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT;condition="not(return == true)"
return == false
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenOperator:::CLASS
com.iconmaster.hppplus.tokenize.element.TokenOperator.symbols has only one value
com.iconmaster.hppplus.tokenize.element.TokenOperator.symbols != null
com.iconmaster.hppplus.tokenize.element.TokenOperator.symbols[] == [43, 45, 61, 47, 42, 94, 37, 124, 38, 60, 62, 33, 35]
size(com.iconmaster.hppplus.tokenize.element.TokenOperator.symbols[]) == 13
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenOperator:::OBJECT
this.content.toString == "="
this.range.begin one of { 1, 27 }
this.range.end one of { 2, 28 }
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenOperator.TokenOperator():::EXIT
this.content == null
this.range == null
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenOperator.TokenOperator(java.lang.String, com.iconmaster.hppplus.SourceRange):::ENTER
arg0.toString == "="
arg1.begin one of { 1, 27 }
arg1.end one of { 2, 28 }
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenOperator.TokenOperator(java.lang.String, com.iconmaster.hppplus.SourceRange):::EXIT
this.content == orig(arg0)
this.range == orig(arg1)
this.range.begin == arg1.begin
this.range.end == arg1.end
arg0.toString == orig(arg0.toString)
arg1.begin == orig(arg1.begin)
arg1.end == orig(arg1.end)
arg0.toString == "="
arg1.begin one of { 1, 27 }
arg1.end one of { 2, 28 }
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenOperator.getPrefix():::ENTER
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenOperator.getPrefix():::EXIT
com.iconmaster.hppplus.tokenize.element.TokenOperator.symbols == orig(com.iconmaster.hppplus.tokenize.element.TokenOperator.symbols)
com.iconmaster.hppplus.tokenize.element.TokenOperator.symbols[] == orig(com.iconmaster.hppplus.tokenize.element.TokenOperator.symbols[])
this.content == orig(this.content)
this.content.toString == orig(this.content.toString)
this.range == orig(this.range)
this.range.begin == orig(this.range.begin)
this.range.end == orig(this.range.end)
return has only one value
return.toString == "OP"
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenOperator.getToken(java.lang.String, com.iconmaster.hppplus.SourceRange):::ENTER
this has only one value
this.content == null
this.range == null
arg0.toString == "="
arg1.begin one of { 1, 27 }
arg1.end one of { 2, 28 }
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenOperator.getToken(java.lang.String, com.iconmaster.hppplus.SourceRange):::EXIT
com.iconmaster.hppplus.tokenize.element.TokenOperator.symbols == orig(com.iconmaster.hppplus.tokenize.element.TokenOperator.symbols)
com.iconmaster.hppplus.tokenize.element.TokenOperator.symbols[] == orig(com.iconmaster.hppplus.tokenize.element.TokenOperator.symbols[])
this.content == orig(this.content)
this.range == orig(this.range)
arg0.toString == orig(arg0.toString)
arg1.begin == orig(arg1.begin)
arg1.end == orig(arg1.end)
this.content == null
this.range == null
arg0.toString == "="
arg1.begin one of { 1, 27 }
arg1.end one of { 2, 28 }
return.getClass().getName() == com.iconmaster.hppplus.tokenize.element.TokenOperator.class
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenOperator.matchChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::ENTER
this has only one value
this.content == null
this.range == null
arg0 has only one value
arg0 != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] elements != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input != null
arg0.input.getClass().getName() == java.lang.String.class
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenOperator.matchChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT28
arg0.index one of { 1, 27 }
return == true
orig(arg1) == 61
orig(arg1) in com.iconmaster.hppplus.tokenize.element.TokenOperator.symbols[]
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenOperator.matchChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT28;condition="return == true"
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenOperator.matchChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT31
return == false
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenOperator.matchChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT31;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenOperator.matchChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT
com.iconmaster.hppplus.tokenize.element.TokenOperator.symbols == orig(com.iconmaster.hppplus.tokenize.element.TokenOperator.symbols)
com.iconmaster.hppplus.tokenize.element.TokenOperator.symbols[] == orig(com.iconmaster.hppplus.tokenize.element.TokenOperator.symbols[])
this.content == orig(this.content)
this.range == orig(this.range)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
arg0.index == orig(arg0.index)
arg0.input == orig(arg0.input)
arg0.input.getClass().getName() == orig(arg0.input.getClass().getName())
(return == true)  ==>  (arg0.index one of { 1, 27 })
(return == true)  ==>  (orig(arg1) == 61)
(return == true)  ==>  (orig(arg1) in com.iconmaster.hppplus.tokenize.element.TokenOperator.symbols[])
this.content == null
this.range == null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] elements != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input != null
arg0.input.getClass().getName() == java.lang.String.class
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenOperator.matchChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT;condition="return == true"
arg0.index one of { 1, 27 }
return == true
orig(arg1) == 61
orig(arg1) in com.iconmaster.hppplus.tokenize.element.TokenOperator.symbols[]
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenOperator.matchChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT;condition="not(return == true)"
return == false
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenReference:::OBJECT
this has only one value
this.matcher has only one value
this.matcher != null
this.matcher.content == null
this.matcher.range == null
this.content == null
this.range == null
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenReference.TokenReference():::EXIT
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenReference.matchFirstChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::ENTER
arg0 has only one value
arg0 != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] elements != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input != null
arg0.input.getClass().getName() == java.lang.String.class
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenReference.matchFirstChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT36
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenReference.matchFirstChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT36;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenReference.matchFirstChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT
this.matcher == orig(this.matcher)
this.matcher.content == orig(this.matcher.content)
this.matcher.range == orig(this.matcher.range)
this.content == orig(this.content)
this.range == orig(this.range)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
arg0.index == orig(arg0.index)
arg0.input == orig(arg0.input)
arg0.input.getClass().getName() == orig(arg0.input.getClass().getName())
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] elements != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input != null
arg0.input.getClass().getName() == java.lang.String.class
return == false
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenReference.matchFirstChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenSeperator:::OBJECT
this has only one value
this.content == null
this.range == null
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenSeperator.TokenSeperator():::EXIT
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenSeperator.matchChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::ENTER
arg0 has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input.getClass().getName() == java.lang.String.class
arg1 one of { 32, 40, 44 }
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenSeperator.matchChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT
this.content == orig(this.content)
this.range == orig(this.range)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
arg0.index == orig(arg0.index)
arg0.input == orig(arg0.input)
arg0.input.getClass().getName() == orig(arg0.input.getClass().getName())
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input.getClass().getName() == java.lang.String.class
return == false
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenSeperator.matchChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenString:::OBJECT
this has only one value
this.content == null
this.range == null
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenString.TokenString():::EXIT
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenString.matchFirstChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::ENTER
arg0 has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input.getClass().getName() == java.lang.String.class
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenString.matchFirstChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT
this.content == orig(this.content)
this.range == orig(this.range)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
arg0.index == orig(arg0.index)
arg0.input == orig(arg0.input)
arg0.input.getClass().getName() == orig(arg0.input.getClass().getName())
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input.getClass().getName() == java.lang.String.class
return == false
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenString.matchFirstChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT;condition="not(return == true)"
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWhitespace:::OBJECT
this.content == null
this.range.begin - this.range.end + 1 == 0
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWhitespace.TokenWhitespace():::EXIT
this.range == null
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWhitespace.TokenWhitespace(com.iconmaster.hppplus.SourceRange):::ENTER
arg0.begin - arg0.end + 1 == 0
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWhitespace.TokenWhitespace(com.iconmaster.hppplus.SourceRange):::EXIT
this.range == orig(arg0)
this.range.begin == arg0.begin
this.range.end == arg0.end
arg0.begin == orig(arg0.begin)
arg0.end == orig(arg0.end)
arg0.begin - arg0.end + 1 == 0
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWhitespace.getPrefix():::ENTER
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWhitespace.getPrefix():::EXIT
this.content == orig(this.content)
this.range == orig(this.range)
this.range.begin == orig(this.range.begin)
this.range.end == orig(this.range.end)
return has only one value
return.toString == "SPACE"
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWhitespace.getToken(java.lang.String, com.iconmaster.hppplus.SourceRange):::ENTER
this has only one value
this.range == null
arg0.toString one of { " ", "," }
arg1.begin - arg1.end + 1 == 0
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWhitespace.getToken(java.lang.String, com.iconmaster.hppplus.SourceRange):::EXIT
this.content == orig(this.content)
this.range == orig(this.range)
arg0.toString == orig(arg0.toString)
arg1.begin == orig(arg1.begin)
arg1.end == orig(arg1.end)
this.range == null
arg0.toString one of { " ", "," }
return.getClass().getName() == com.iconmaster.hppplus.tokenize.element.TokenWhitespace.class
arg1.begin - arg1.end + 1 == 0
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWhitespace.matchChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::ENTER
this has only one value
this.range == null
arg0 has only one value
arg0 != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] elements != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input != null
arg0.input.getClass().getName() == java.lang.String.class
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWhitespace.matchChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT
this.content == orig(this.content)
this.range == orig(this.range)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
arg0.index == orig(arg0.index)
arg0.input == orig(arg0.input)
arg0.input.getClass().getName() == orig(arg0.input.getClass().getName())
(return == true)  ==>  (orig(arg1) one of { 32, 44 })
this.range == null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] elements != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input != null
arg0.input.getClass().getName() == java.lang.String.class
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWhitespace.matchChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT;condition="return == true"
return == true
orig(arg1) one of { 32, 44 }
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWhitespace.matchChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT;condition="not(return == true)"
return == false
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWord:::OBJECT
this.range.begin >= 0
this.range.begin < this.range.end
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWord.TokenWord():::EXIT
this.content == null
this.range == null
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWord.TokenWord(java.lang.String, com.iconmaster.hppplus.SourceRange):::ENTER
arg1.begin < arg1.end
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWord.TokenWord(java.lang.String, com.iconmaster.hppplus.SourceRange):::EXIT
this.content == orig(arg0)
this.range == orig(arg1)
this.range.begin == arg1.begin
this.range.end == arg1.end
arg0.toString == orig(arg0.toString)
arg1.begin == orig(arg1.begin)
arg1.end == orig(arg1.end)
arg1.begin < arg1.end
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWord.getPrefix():::ENTER
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWord.getPrefix():::EXIT
this.content == orig(this.content)
this.content.toString == orig(this.content.toString)
this.range == orig(this.range)
this.range.begin == orig(this.range.begin)
this.range.end == orig(this.range.end)
return has only one value
return.toString == "WORD"
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWord.getToken(java.lang.String, com.iconmaster.hppplus.SourceRange):::ENTER
this has only one value
this.content == null
this.range == null
arg1.begin < arg1.end
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWord.getToken(java.lang.String, com.iconmaster.hppplus.SourceRange):::EXIT
this.content == orig(this.content)
this.range == orig(this.range)
arg0.toString == orig(arg0.toString)
arg1.begin == orig(arg1.begin)
arg1.end == orig(arg1.end)
this.content == null
this.range == null
return.getClass().getName() == com.iconmaster.hppplus.tokenize.element.TokenWord.class
arg1.begin < arg1.end
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWord.matchChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::ENTER
this has only one value
this.content == null
this.range == null
arg0 has only one value
arg0 != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] elements != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input != null
arg0.input.getClass().getName() == java.lang.String.class
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWord.matchChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT
this.content == orig(this.content)
this.range == orig(this.range)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
arg0.index == orig(arg0.index)
arg0.input == orig(arg0.input)
arg0.input.getClass().getName() == orig(arg0.input.getClass().getName())
this.content == null
this.range == null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] elements != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input != null
arg0.input.getClass().getName() == java.lang.String.class
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWord.matchChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT;condition="return == true"
return == true
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWord.matchChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT;condition="not(return == true)"
return == false
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWord.matchFirstChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::ENTER
this has only one value
this.content == null
this.range == null
arg0 has only one value
arg0 != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] elements != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input != null
arg0.input.getClass().getName() == java.lang.String.class
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWord.matchFirstChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT
this.content == orig(this.content)
this.range == orig(this.range)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
arg0.index == orig(arg0.index)
arg0.input == orig(arg0.input)
arg0.input.getClass().getName() == orig(arg0.input.getClass().getName())
this.content == null
this.range == null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] elements != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input != null
arg0.input.getClass().getName() == java.lang.String.class
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWord.matchFirstChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT;condition="return == true"
return == true
===========================================================================
com.iconmaster.hppplus.tokenize.element.TokenWord.matchFirstChar(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT;condition="not(return == true)"
return == false
===========================================================================
com.iconmaster.hppplus.tokenize.element.TotalMatchToken:::OBJECT
this.content == null
this.range == null
===========================================================================
com.iconmaster.hppplus.tokenize.element.TotalMatchToken.TotalMatchToken():::EXIT
===========================================================================
com.iconmaster.hppplus.tokenize.element.TotalMatchToken.isMatch(com.iconmaster.hppplus.tokenize.Tokenizer, char):::ENTER
arg0 has only one value
arg0 != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] elements != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input != null
arg0.input.getClass().getName() == java.lang.String.class
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.TotalMatchToken.isMatch(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT
this.content == orig(this.content)
this.range == orig(this.range)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers)
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] == orig(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[])
arg0.index == orig(arg0.index)
arg0.input == orig(arg0.input)
arg0.input.getClass().getName() == orig(arg0.input.getClass().getName())
com.iconmaster.hppplus.tokenize.Tokenizer.handlers has only one value
com.iconmaster.hppplus.tokenize.Tokenizer.handlers != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] contains no nulls and has only one value, of length 12
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[] elements != null
com.iconmaster.hppplus.tokenize.Tokenizer.handlers[].getClass().getName() == [com.iconmaster.hppplus.tokenize.element.TokenComment, com.iconmaster.hppplus.tokenize.element.TokenReference, com.iconmaster.hppplus.tokenize.element.TokenWord, com.iconmaster.hppplus.tokenize.element.TokenNumber, com.iconmaster.hppplus.tokenize.element.TokenString, com.iconmaster.hppplus.tokenize.element.TokenOperator, com.iconmaster.hppplus.tokenize.element.TokenSeperator, com.iconmaster.hppplus.tokenize.element.TokenWhitespace, com.iconmaster.hppplus.tokenize.element.TokenChunk, com.iconmaster.hppplus.tokenize.element.TokenIndex, com.iconmaster.hppplus.tokenize.element.TokenList, com.iconmaster.hppplus.tokenize.element.TokenDirective]
arg0.input has only one value
arg0.input != null
arg0.input.getClass().getName() == java.lang.String.class
return == false
size(com.iconmaster.hppplus.tokenize.Tokenizer.handlers[]) == 12
===========================================================================
com.iconmaster.hppplus.tokenize.element.TotalMatchToken.isMatch(com.iconmaster.hppplus.tokenize.Tokenizer, char):::EXIT;condition="not(return == true)"
Exiting Daikon.
