Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

===========================================================================
Jama.LUDecomposition:::CLASS
===========================================================================
Jama.LUDecomposition:::OBJECT
this.m == this.n
this.m == size(this.LU[])
this.m == size(this.piv[])
size(this.LU[])-1 == this.piv[this.m-1]
size(this.LU[])-1 == this.piv[this.n-1]
this.LU != null
this.LU.getClass().getName() == double[][].class
this.LU[] elements != null
this.m == 3
this.pivsign == 1
this.piv != null
this.piv[] == [0, 1, 2]
this.piv[] elements one of { 0, 1, 2 }
this.piv[] sorted by <
this.piv[] elements <= size(this.LU[])-1
===========================================================================
Jama.LUDecomposition.LUDecomposition(Jama.Matrix):::ENTER
arg0.m == arg0.n
arg0.m == size(arg0.A[])
arg0 != null
arg0.A != null
arg0.A.getClass().getName() == double[][].class
arg0.A[] elements != null
arg0.m == 3
===========================================================================
Jama.LUDecomposition.LUDecomposition(Jama.Matrix):::EXIT
this.LU.getClass().getName() == arg0.A.getClass().getName()
this.LU.getClass().getName() == orig(arg0.A.getClass().getName())
this.m == arg0.m
this.m == arg0.n
this.m == orig(arg0.m)
this.m == orig(arg0.n)
this.m == size(arg0.A[])
this.m == orig(size(arg0.A[]))
arg0.A == orig(arg0.A)
arg0.A[] == orig(arg0.A[])
size(this.LU[])-1 == this.piv[arg0.m-1]
size(this.LU[])-1 == this.piv[arg0.n-1]
size(this.LU[])-1 == this.piv[orig(arg0.m)-1]
size(this.LU[])-1 == this.piv[orig(arg0.n)-1]
arg0.A != null
arg0.A[] elements != null
===========================================================================
Jama.LUDecomposition.isNonsingular():::ENTER
===========================================================================
Jama.LUDecomposition.isNonsingular():::EXIT187
===========================================================================
Jama.LUDecomposition.isNonsingular():::EXIT187;condition="return == true"
===========================================================================
Jama.LUDecomposition.isNonsingular():::EXIT
this.LU == orig(this.LU)
this.LU.getClass().getName() == orig(this.LU.getClass().getName())
this.LU[] == orig(this.LU[])
this.m == orig(this.m)
this.m == orig(this.n)
this.m == orig(size(this.LU[]))
this.m == orig(size(this.piv[]))
this.pivsign == orig(this.pivsign)
this.piv == orig(this.piv)
this.piv[] == orig(this.piv[])
size(this.LU[])-1 == orig(this.piv[post(this.m)-1])
size(this.LU[])-1 == orig(this.piv[post(this.n)-1])
size(this.LU[])-1 == this.piv[orig(this.m)-1]
size(this.LU[])-1 == this.piv[orig(this.n)-1]
size(this.LU[])-1 == orig(this.piv[this.m-1])
size(this.LU[])-1 == orig(this.piv[this.n-1])
return == true
===========================================================================
Jama.LUDecomposition.isNonsingular():::EXIT;condition="return == true"
===========================================================================
Jama.LUDecomposition.solve(Jama.Matrix):::ENTER
this.LU.getClass().getName() == arg0.A.getClass().getName()
this.m == arg0.m
this.m == arg0.n
this.m == size(arg0.A[])
size(this.LU[])-1 == this.piv[arg0.m-1]
size(this.LU[])-1 == this.piv[arg0.n-1]
arg0 != null
arg0.A != null
arg0.A[] elements != null
===========================================================================
Jama.LUDecomposition.solve(Jama.Matrix):::EXIT
this.LU == orig(this.LU)
this.LU.getClass().getName() == arg0.A.getClass().getName()
this.LU.getClass().getName() == return.A.getClass().getName()
this.LU.getClass().getName() == orig(this.LU.getClass().getName())
this.LU.getClass().getName() == orig(arg0.A.getClass().getName())
this.LU[] == orig(this.LU[])
this.m == arg0.m
this.m == arg0.n
this.m == return.m
this.m == return.n
this.m == orig(this.m)
this.m == orig(this.n)
this.m == orig(arg0.m)
this.m == orig(arg0.n)
this.m == size(arg0.A[])
this.m == size(return.A[])
this.m == orig(size(this.LU[]))
this.m == orig(size(this.piv[]))
this.m == orig(size(arg0.A[]))
this.pivsign == orig(this.pivsign)
this.piv == orig(this.piv)
this.piv[] == orig(this.piv[])
arg0.A == orig(arg0.A)
arg0.A[] == orig(arg0.A[])
size(this.LU[])-1 == orig(this.piv[post(this.m)-1])
size(this.LU[])-1 == orig(this.piv[post(this.n)-1])
size(this.LU[])-1 == this.piv[arg0.m-1]
size(this.LU[])-1 == this.piv[arg0.n-1]
size(this.LU[])-1 == this.piv[return.m-1]
size(this.LU[])-1 == this.piv[return.n-1]
size(this.LU[])-1 == this.piv[orig(this.m)-1]
size(this.LU[])-1 == this.piv[orig(this.n)-1]
size(this.LU[])-1 == this.piv[orig(arg0.m)-1]
size(this.LU[])-1 == this.piv[orig(arg0.n)-1]
size(this.LU[])-1 == orig(this.piv[post(arg0.m)-1])
size(this.LU[])-1 == orig(this.piv[post(arg0.n)-1])
size(this.LU[])-1 == orig(this.piv[post(return.m)-1])
size(this.LU[])-1 == orig(this.piv[post(return.n)-1])
size(this.LU[])-1 == orig(this.piv[this.m-1])
size(this.LU[])-1 == orig(this.piv[this.n-1])
size(this.LU[])-1 == orig(this.piv[arg0.m-1])
size(this.LU[])-1 == orig(this.piv[arg0.n-1])
arg0.A != null
arg0.A[] elements != null
return != null
return.A != null
return.A[] elements != null
===========================================================================
Jama.Matrix:::CLASS
===========================================================================
Jama.Matrix:::OBJECT
this.m == size(this.A[])
this.A != null
this.A.getClass().getName() == double[][].class
this.A[] elements != null
this.m one of { 1, 3, 4 }
this.n >= 1
this.n != size(this.A[])-1
===========================================================================
Jama.Matrix.Matrix(double[], int):::ENTER
arg0 != null
arg1 == 1
size(arg0[]) one of { 3, 4 }
arg1 < size(arg0[])-1
===========================================================================
Jama.Matrix.Matrix(double[], int):::EXIT
this.m == orig(arg1)
this.n == orig(size(arg0[]))
arg0[] == orig(arg0[])
this.m == 1
this.n one of { 3, 4 }
this.A[] elements == this.A[this.m-1]
this.m < size(arg0[])-1
===========================================================================
Jama.Matrix.Matrix(double[][]):::ENTER
arg0 != null
arg0.getClass().getName() == double[][].class
arg0[] elements != null
size(arg0[]) == 3
===========================================================================
Jama.Matrix.Matrix(double[][]):::EXIT
this.A == orig(arg0)
this.A.getClass().getName() == orig(arg0.getClass().getName())
this.A[] == arg0[]
this.m == orig(size(arg0[]))
arg0[] == orig(arg0[])
this.m == 3
arg0[] elements != null
this.m <= this.n
===========================================================================
Jama.Matrix.Matrix(int, int):::ENTER
arg0 one of { 1, 3, 4 }
arg1 one of { 1, 3, 4 }
===========================================================================
Jama.Matrix.Matrix(int, int):::EXIT
this.m == orig(arg0)
this.n == orig(arg1)
this.n one of { 1, 3, 4 }
===========================================================================
Jama.Matrix.getArray():::ENTER
this.n one of { 1, 3, 4 }
===========================================================================
Jama.Matrix.getArray():::EXIT
this.A == return
this.A.getClass().getName() == return.getClass().getName()
this.A[] == return[]
this.m == orig(this.m)
this.m == size(return[])
this.m == orig(size(this.A[]))
this.n == orig(this.n)
return == orig(this.A)
return.getClass().getName() == orig(this.A.getClass().getName())
return[] == orig(this.A[])
this.n one of { 1, 3, 4 }
return != null
return.getClass().getName() == double[][].class
return[] elements != null
this.n != size(return[])-1
===========================================================================
Jama.Matrix.getArrayCopy():::ENTER
this.m one of { 1, 3 }
this.n one of { 3, 4 }
this.m <= this.n
===========================================================================
Jama.Matrix.getArrayCopy():::EXIT
this.A == orig(this.A)
this.A.getClass().getName() == return.getClass().getName()
this.A[] == orig(this.A[])
this.m == orig(this.m)
this.m == size(return[])
this.m == orig(size(this.A[]))
this.n == orig(this.n)
return.getClass().getName() == orig(this.A.getClass().getName())
this.m one of { 1, 3 }
this.n one of { 3, 4 }
return != null
return.getClass().getName() == double[][].class
return[] elements != null
this.m <= this.n
===========================================================================
Jama.Matrix.getColumnDimension():::ENTER
this.m == this.n
this.m == 3
===========================================================================
Jama.Matrix.getColumnDimension():::EXIT
this.A == orig(this.A)
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A[] == orig(this.A[])
this.m == return
this.n == return
return == orig(this.m)
return == orig(this.n)
return == size(this.A[])
return == orig(size(this.A[]))
return == 3
===========================================================================
Jama.Matrix.getMatrix(int, int, int, int):::ENTER
arg1 == size(this.A[])-1
arg2 == arg3
this.A[this.m-1] == this.A[arg1]
this.m == 3
this.n one of { 5, 6 }
arg0 == 0
arg2 >= 0
this.m < this.n
this.n > arg0
this.n > arg2
arg0 <= arg2
===========================================================================
Jama.Matrix.getMatrix(int, int, int, int):::EXIT
this.A == orig(this.A)
this.A.getClass().getName() == return.A.getClass().getName()
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A[] == orig(this.A[])
this.m == return.m
this.m == orig(this.m)
this.m == size(return.A[])
this.m == orig(size(this.A[]))
this.n == orig(this.n)
orig(arg1) == size(this.A[])-1
orig(arg1) == size(return.A[])-1
this.A[this.m-1] == this.A[orig(arg1)]
this.A[return.m-1] == this.A[orig(arg1)]
this.A[return.n] == this.A[orig(arg1)-1]
this.A[return.n] == orig(this.A[post(arg1)-1])
this.A[return.n] == orig(this.A[arg1-1])
this.A[return.n-1] == this.A[orig(arg0)]
this.A[orig(this.m)-1] == this.A[orig(arg1)]
this.A[orig(arg0)] == orig(this.A[post(return.n)-1])
this.A[orig(arg1)] == orig(this.A[post(this.m)-1])
this.A[orig(arg1)] == orig(this.A[post(return.m)-1])
this.A[orig(arg1)] == orig(this.A[this.m-1])
return.A[this.m-1] == return.A[orig(arg1)]
return.A[return.m-1] == return.A[orig(arg1)]
return.A[return.n] == return.A[orig(arg1)-1]
return.A[return.n-1] == return.A[orig(arg0)]
return.A[orig(this.m)-1] == return.A[orig(arg1)]
this.m == 3
this.n one of { 5, 6 }
return != null
return.A != null
return.A[] elements != null
return.n == 1
this.m < this.n
this.n > return.n
this.n > orig(arg0)
this.n > orig(arg2)
===========================================================================
Jama.Matrix.getMatrix(int[], int, int):::ENTER
this.m == this.n
this.m == size(arg0[])
arg1 == arg0[arg1]
arg2 == size(this.A[])-1
size(this.A[])-1 == arg0[this.m-1]
size(this.A[])-1 == arg0[this.n-1]
size(this.A[])-1 == arg0[arg2]
this.A[this.m-1] == this.A[arg2]
this.m == 3
arg0 != null
arg0[] == [0, 1, 2]
arg0[] elements one of { 0, 1, 2 }
arg0[] sorted by <
arg1 == 0
arg0[arg2-1] == 1
arg0[] elements >= arg1
arg0[] elements <= size(this.A[])-1
===========================================================================
Jama.Matrix.getMatrix(int[], int, int):::EXIT
this.A == orig(this.A)
this.A.getClass().getName() == return.A.getClass().getName()
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A[] == orig(this.A[])
this.m == this.n
this.m == return.m
this.m == return.n
this.m == orig(this.m)
this.m == orig(this.n)
this.m == size(return.A[])
this.m == orig(size(this.A[]))
this.m == orig(size(arg0[]))
arg0[] == orig(arg0[])
orig(arg1) == arg0[orig(arg1)]
orig(arg1) == orig(arg0[post(arg1)])
orig(arg2) == size(this.A[])-1
orig(arg2) == size(arg0[])-1
orig(arg2) == size(return.A[])-1
orig(arg2) == orig(size(arg0[]))-1
orig(arg2) == arg0[this.m-1]
orig(arg2) == orig(arg0[post(this.m)-1])
orig(arg2) == arg0[this.n-1]
orig(arg2) == orig(arg0[post(this.n)-1])
orig(arg2) == arg0[return.m-1]
orig(arg2) == arg0[return.n-1]
orig(arg2) == arg0[orig(this.m)-1]
orig(arg2) == arg0[orig(this.n)-1]
orig(arg2) == arg0[orig(arg2)]
orig(arg2) == orig(arg0[post(arg2)])
orig(arg2) == orig(arg0[post(return.m)-1])
orig(arg2) == orig(arg0[post(return.n)-1])
orig(arg2) == orig(arg0[this.m-1])
orig(arg2) == orig(arg0[this.n-1])
orig(arg2) == orig(arg0[arg2])
this.A[this.m-1] == this.A[orig(arg2)]
this.A[this.n-1] == this.A[orig(arg2)]
this.A[return.m-1] == this.A[orig(arg2)]
this.A[return.n-1] == this.A[orig(arg2)]
this.A[orig(this.m)-1] == this.A[orig(arg2)]
this.A[orig(this.n)-1] == this.A[orig(arg2)]
this.A[orig(arg2)] == orig(this.A[post(this.m)-1])
this.A[orig(arg2)] == orig(this.A[post(this.n)-1])
this.A[orig(arg2)] == orig(this.A[post(return.m)-1])
this.A[orig(arg2)] == orig(this.A[post(return.n)-1])
this.A[orig(arg2)] == orig(this.A[this.m-1])
this.A[orig(arg2)] == orig(this.A[this.n-1])
return.A[this.m-1] == return.A[orig(arg2)]
return.A[this.n-1] == return.A[orig(arg2)]
return.A[return.m-1] == return.A[orig(arg2)]
return.A[return.n-1] == return.A[orig(arg2)]
return.A[orig(this.m)-1] == return.A[orig(arg2)]
return.A[orig(this.n)-1] == return.A[orig(arg2)]
this.m == 3
arg0[] == [0, 1, 2]
arg0[] elements one of { 0, 1, 2 }
arg0[] sorted by <
return != null
return.A != null
return.A[] elements != null
arg0[orig(arg2)-1] == 1
arg0[] elements >= orig(arg1)
arg0[] elements <= orig(arg2)
===========================================================================
Jama.Matrix.getRowDimension():::ENTER
this.m == this.n
this.m == 3
===========================================================================
Jama.Matrix.getRowDimension():::EXIT
this.A == orig(this.A)
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A[] == orig(this.A[])
this.m == return
this.n == return
return == orig(this.m)
return == orig(this.n)
return == size(this.A[])
return == orig(size(this.A[]))
return == 3
===========================================================================
Jama.Matrix.getRowPackedCopy():::ENTER
this.m one of { 1, 3 }
this.n one of { 1, 3, 4 }
this.m != this.n
size(this.A[])-1 % this.n == 0
===========================================================================
Jama.Matrix.getRowPackedCopy():::EXIT
this.A == orig(this.A)
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A[] == orig(this.A[])
this.m == orig(this.m)
this.m == orig(size(this.A[]))
this.n == orig(this.n)
this.m one of { 1, 3 }
this.n one of { 1, 3, 4 }
return != null
size(return[]) one of { 3, 4 }
this.m != this.n
this.m <= size(return[])
this.m != size(return[])-1
size(this.A[])-1 % this.n == 0
size(return[]) % this.n == 0
this.n <= size(return[])
this.n != size(return[])-1
size(this.A[])-1 <= size(return[])-1
===========================================================================
Jama.Matrix.identity(int, int):::ENTER
arg0 == arg1
arg0 == 3
===========================================================================
Jama.Matrix.identity(int, int):::EXIT
return.m == return.n
return.m == orig(arg0)
return.m == orig(arg1)
return.m == size(return.A[])
return != null
return.A != null
return.A.getClass().getName() == double[][].class
return.A[] elements != null
return.m == 3
===========================================================================
Jama.Matrix.inverse():::ENTER
this.m == this.n
this.m == 3
===========================================================================
Jama.Matrix.inverse():::EXIT
this.A == orig(this.A)
this.A.getClass().getName() == return.A.getClass().getName()
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A[] == orig(this.A[])
this.m == this.n
this.m == return.m
this.m == return.n
this.m == orig(this.m)
this.m == orig(this.n)
this.m == size(return.A[])
this.m == orig(size(this.A[]))
this.m == 3
return != null
return.A != null
return.A[] elements != null
===========================================================================
Jama.Matrix.solve(Jama.Matrix):::ENTER
this.A.getClass().getName() == arg0.A.getClass().getName()
this.m == this.n
this.m == arg0.m
this.m == arg0.n
this.m == size(arg0.A[])
this.m == 3
arg0 != null
arg0.A != null
arg0.A[] elements != null
===========================================================================
Jama.Matrix.solve(Jama.Matrix):::EXIT
this.A == orig(this.A)
this.A.getClass().getName() == arg0.A.getClass().getName()
this.A.getClass().getName() == return.A.getClass().getName()
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A.getClass().getName() == orig(arg0.A.getClass().getName())
this.A[] == orig(this.A[])
this.m == this.n
this.m == arg0.m
this.m == arg0.n
this.m == return.m
this.m == return.n
this.m == orig(this.m)
this.m == orig(this.n)
this.m == orig(arg0.m)
this.m == orig(arg0.n)
this.m == size(arg0.A[])
this.m == size(return.A[])
this.m == orig(size(this.A[]))
this.m == orig(size(arg0.A[]))
arg0.A == orig(arg0.A)
arg0.A[] == orig(arg0.A[])
this.m == 3
arg0.A != null
arg0.A[] elements != null
return != null
return.A != null
return.A[] elements != null
===========================================================================
Jama.Matrix.times(Jama.Matrix):::ENTER
this.A.getClass().getName() == arg0.A.getClass().getName()
this.n == arg0.m
this.n == size(arg0.A[])
this.m one of { 1, 3 }
this.n one of { 3, 4 }
arg0 != null
arg0.A != null
arg0.A[] elements != null
arg0.n one of { 1, 3, 4 }
this.m <= this.n
this.m != arg0.n
arg0.n != size(this.A[])-1
arg0.n != size(arg0.A[])-1
size(this.A[])-1 <= size(arg0.A[])-1
===========================================================================
Jama.Matrix.times(Jama.Matrix):::EXIT
this.A == orig(this.A)
this.A.getClass().getName() == arg0.A.getClass().getName()
this.A.getClass().getName() == return.A.getClass().getName()
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A.getClass().getName() == orig(arg0.A.getClass().getName())
this.A[] == orig(this.A[])
this.m == return.m
this.m == orig(this.m)
this.m == size(return.A[])
this.m == orig(size(this.A[]))
this.n == arg0.m
this.n == orig(this.n)
this.n == orig(arg0.m)
this.n == size(arg0.A[])
this.n == orig(size(arg0.A[]))
arg0.A == orig(arg0.A)
arg0.A[] == orig(arg0.A[])
arg0.n == return.n
arg0.n == orig(arg0.n)
this.m one of { 1, 3 }
this.n one of { 3, 4 }
arg0.A != null
arg0.A[] elements != null
arg0.n one of { 1, 3, 4 }
return != null
return.A != null
return.A[] elements != null
this.m <= this.n
this.m != arg0.n
arg0.n != size(this.A[])-1
arg0.n != size(arg0.A[])-1
size(this.A[])-1 <= size(arg0.A[])-1
===========================================================================
Jama.Matrix.transpose():::ENTER
this.m one of { 1, 3 }
this.n one of { 1, 3, 4 }
this.m != this.n
size(this.A[])-1 % this.n == 0
===========================================================================
Jama.Matrix.transpose():::EXIT
this.A == orig(this.A)
this.A.getClass().getName() == return.A.getClass().getName()
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A[] == orig(this.A[])
this.m == return.n
this.m == orig(this.m)
this.m == orig(size(this.A[]))
this.n == return.m
this.n == orig(this.n)
this.n == size(return.A[])
this.m one of { 1, 3 }
this.n one of { 1, 3, 4 }
return != null
return.A != null
return.A[] elements != null
this.m != this.n
size(return.A[])-1 % this.m == 0
this.m != size(return.A[])-1
size(this.A[])-1 % this.n == 0
size(this.A[])-1 != size(return.A[])-1
===========================================================================
algorithms.BnB:::OBJECT
this.best.U == this.e.m.U
this.best.U[] == this.e.m.U[]
this.best.L == this.e.m.L
this.best.L[] == this.e.m.L[]
this.best.A == this.best.simplex.A
this.best.A == this.e.m.A
this.best.A.getClass().getName() == this.best.simplex.B.getClass().getName()
this.best.A.getClass().getName() == this.e.m.A.getClass().getName()
this.best.A[] == this.e.m.A[]
this.best.c == this.e.m.c
this.best.c[] == this.e.m.c[]
this.best.b == this.best.simplex.b
this.best.b == this.e.m.b
this.best.b[] == this.e.m.b[]
this.best.I == this.best.simplex.I
this.best.I.getClass().getName() == this.best.simplex.In.getClass().getName()
this.best.I.getClass().getName() == this.best.simplex.Ib.getClass().getName()
this.best.I.getClass().getName() == this.best.simplex.I.getClass().getName()
this.best.I.getClass().getName() == this.e.m.I.getClass().getName()
this.best.I[] == this.best.simplex.I[]
this.best.I[] == this.e.m.I[]
this.best.constraints == this.e.m.constraints
this.best.variables == this.e.m.variables
this.best.epsilon == this.e.m.epsilon
this.best.simplex.B.getClass().getName() == this.best.simplex.N.getClass().getName()
this.best.simplex.B.getClass().getName() == this.best.simplex.A.getClass().getName()
this.best.simplex.Un == this.best.simplex.U
this.best.simplex.Un[] == this.best.simplex.U[]
this.best.simplex.Ln == this.best.simplex.L
this.best.simplex.Ln[] == this.best.simplex.L[]
this.best.simplex.m == size(this.best.simplex.B[])
this.best.simplex.m == size(this.best.simplex.N[])
this.best.simplex.m == size(this.best.simplex.xb[])
this.best.simplex.m == size(this.best.simplex.xn[])-1
this.best.simplex.m == size(this.best.simplex.cb[])
this.best.simplex.m == size(this.best.simplex.cn[])-1
this.best.simplex.m == size(this.best.simplex.b[])
this.best.simplex.m == size(this.best.simplex.In[])-1
this.best.simplex.m == size(this.best.simplex.Ib[])
this.best.simplex.m == size(this.best.simplex.A[])
this.best.simplex.m == size(this.best.simplex.dual[])
this.best.simplex.m == size(this.best.simplex.rq[])-1
this.best.simplex.m == size(this.best.simplex.Ub[])
this.best.simplex.m == size(this.best.simplex.Lb[])
this.best.simplex.m == size(this.best.simplex.Un[])-1
this.best.simplex.m == size(this.best.simplex.Ln[])-1
this.best.simplex.m == size(this.best.simplex.U[])-1
this.best.simplex.m == size(this.best.simplex.L[])-1
this.best.simplex.n == size(this.best.U[])
this.best.simplex.n == size(this.best.I[])
this.best.simplex.n == size(this.best.simplex.c[])
this.best.simplex.n == size(this.best.simplex.I[])
this.best.simplex.n == size(this.e.m.I[])
this.best.simplex.printSolution == this.printSimplex
this.best.print == this.printSimplex
this.e.m.print == this.printSimplex
this.e.debugMode == this.debugmode
size(this.best.U[]) == size(this.best.L[])
size(this.best.U[]) == size(this.best.c[])
size(this.best.U[]) == size(this.e.m.L[])
size(this.best.U[]) == size(this.e.m.c[])
size(this.best.A[]) == size(this.best.b[])
size(this.best.A[]) == size(this.e.m.b[])
size(this.best.simplex.xn[]) == size(this.best.simplex.cn[])
size(this.best.simplex.xn[]) == size(this.best.simplex.In[])
size(this.best.simplex.xn[]) == size(this.best.simplex.rq[])
size(this.best.simplex.xn[]) == size(this.best.simplex.Un[])
size(this.best.simplex.xn[]) == size(this.best.simplex.Ln[])
size(this.best.simplex.xn[]) == size(this.best.simplex.U[])
size(this.best.simplex.xn[]) == size(this.best.simplex.L[])
this has only one value
this.type == 0
this.best != null
this.best.U has only one value
this.best.U != null
this.best.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.best.U[] elements >= 0.0
this.best.L has only one value
this.best.L != null
this.best.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.best.L[] elements one of { 0.0, 1.0, 76.0 }
this.best.id.toString one of { "", "l" }
this.best.A has only one value
this.best.A != null
this.best.A.getClass().getName() == double[][].class
this.best.A[] contains no nulls and has only one value, of length 3
this.best.A[] elements != null
this.best.c has only one value
this.best.c != null
this.best.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.best.c[] elements >= 0.0
this.best.b has only one value
this.best.b != null
this.best.b[] == [7.0, 500.3, 500.4]
this.best.b[] elements one of { 7.0, 500.3, 500.4 }
this.best.b[] sorted by <
this.best.debugMode == false
this.best.x == null
this.best.feasible == false
this.best.fo one of { -2300.4, -2300.0, 0.0 }
this.best.type == null
this.best.I.getClass().getName() == java.lang.String[].class
this.best.I[] contains no nulls and has only one value, of length 6
this.best.I[] elements != null
this.best.I[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.best.I[].getClass().getName() elements == java.lang.String.class
this.best.I[].toString == [x1, x2, x3, S_R1, S_R2, S_R3]
this.best.integer == false
this.best.constraints has only one value
this.best.constraints != null
this.best.constraints[] contains no nulls and has only one value, of length 3
this.best.constraints[] elements != null
this.best.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.best.constraints[].getClass().getName() elements == model.QBnBconstr.class
this.best.variables has only one value
this.best.variables != null
this.best.variables[] contains no nulls and has only one value, of length 6
this.best.variables[] elements != null
this.best.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.best.variables[].getClass().getName() elements == model.QBnBVariable.class
this.best.ofle.coeffs has only one value
this.best.ofle.coeffs != null
this.best.ofle.coeffs[] contains no nulls and has only one value, of length 3
this.best.ofle.coeffs[] elements != null
this.best.ofle.coeffs[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
this.best.ofle.coeffs[].getClass().getName() elements == java.lang.Double.class
this.best.ofle.varNames has only one value
this.best.ofle.varNames != null
this.best.ofle.varNames[] contains no nulls and has only one value, of length 3
this.best.ofle.varNames[] elements != null
this.best.ofle.varNames[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.best.ofle.varNames[].getClass().getName() elements == java.lang.String.class
this.best.epsilon == 1.0E-6
this.best.simplex.B != null
this.best.simplex.B.getClass().getName() == double[][].class
this.best.simplex.B[] elements != null
this.best.simplex.N != null
this.best.simplex.N[] elements != null
this.best.simplex.xb != null
this.best.simplex.xb[] one of { [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.best.simplex.xb[] elements >= 0.09999999999999432
this.best.simplex.xb[] sorted by >
this.best.simplex.xn != null
this.best.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.best.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.best.simplex.cb != null
this.best.simplex.cb[] elements one of { -4.0, -0.0 }
this.best.simplex.cb[] one of { [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.best.simplex.cb[] sorted by >=
this.best.simplex.cn != null
this.best.simplex.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0] }
this.best.simplex.b has only one value
this.best.simplex.b != null
this.best.simplex.b[] == [7.0, 500.3, 500.4]
this.best.simplex.b[] elements one of { 7.0, 500.3, 500.4 }
this.best.simplex.b[] sorted by <
this.best.simplex.In != null
this.best.simplex.In[] elements != null
this.best.simplex.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.best.simplex.In[].getClass().getName() elements == java.lang.String.class
this.best.simplex.In[].toString one of { [x2, a0, S_R3, x1], [x2, a0, x3, x1] }
this.best.simplex.Ib != null
this.best.simplex.Ib[] elements != null
this.best.simplex.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.best.simplex.Ib[].getClass().getName() elements == java.lang.String.class
this.best.simplex.Ib[].toString one of { [S_R1, S_R2, S_R3], [S_R1, S_R2, x3] }
this.best.simplex.c != null
this.best.simplex.c[] == [-7.0, -8.0, -4.0, -0.0, -0.0, -0.0]
this.best.simplex.status == 0
this.best.simplex.A has only one value
this.best.simplex.A != null
this.best.simplex.A[] contains no nulls and has only one value, of length 3
this.best.simplex.A[] elements != null
this.best.simplex.dual != null
this.best.simplex.dual[] elements one of { -1.0, 0.0 }
this.best.simplex.dual[] one of { [0.0, 0.0, -1.0], [0.0, 0.0, 0.0] }
this.best.simplex.dual[] sorted by >=
this.best.simplex.rq != null
this.best.simplex.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0] }
this.best.simplex.Ub != null
this.best.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.best.simplex.Ub[] elements == 1.7976931348623157E308
this.best.simplex.Lb != null
this.best.simplex.Lb[] == [0.0, 0.0, 0.0]
this.best.simplex.Lb[] elements == 0.0
this.best.simplex.Un != null
this.best.simplex.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.best.simplex.Ln != null
this.best.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
this.best.simplex.Ln[] elements one of { 0.0, 1.0, 76.0 }
this.best.simplex.n == 6
this.best.simplex.initialTime == 1.743919623013E12
this.best.simplex.nart == 1
this.best.simplex.printSolution == false
this.best.simplex.I != null
this.best.simplex.I[].toString == [x1, x2, x3, S_R1, S_R2, S_R3]
this.priorityQueue.N == 0
this.priorityQueue.first == null
this.priorityQueue.last == null
this.timeLoadingData == 0.0
this.epsilon one of { 0.0, 1.0E-5 }
this.cuts == false
this.e has only one value
this.e != null
this.e.m has only one value
this.e.m != null
this.e.m.id.toString == ""
this.e.m.debugMode == false
this.e.m.x == null
this.e.m.feasible == false
this.e.m.fo one of { -2300.4, 0.0 }
this.e.m.type == null
this.e.m.I[].toString == [x1, x2, x3, S_R1, S_R2, S_R3]
this.e.m.integer == false
this.e.m.constraints[] contains no nulls and has only one value, of length 3
this.e.m.constraints[] elements != null
this.e.m.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.e.m.constraints[].getClass().getName() elements == model.QBnBconstr.class
this.e.m.variables[] contains no nulls and has only one value, of length 6
this.e.m.variables[] elements != null
this.e.m.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.e.m.variables[].getClass().getName() elements == model.QBnBVariable.class
this.e.m.ofle has only one value
this.e.m.ofle != null
this.e.bestSolution one of { 0.0, 2300.0 }
this.e.print == true
this.nodesExplored one of { 0, 1, 3 }
this.printSimplex == false
this.debugmode == false
size(this.best.U[]) == 6
size(this.best.A[]) == 3
size(this.best.constraints[]) == 3
size(this.best.variables[]) == 6
size(this.best.ofle.coeffs[]) == 3
size(this.best.ofle.varNames[]) == 3
size(this.best.simplex.xn[]) == 4
size(this.e.m.constraints[]) == 3
size(this.e.m.variables[]) == 6
this.best.A[this.best.simplex.m-1] has only one value
this.best.A[this.best.simplex.nart] has only one value
this.best.A[this.best.simplex.nart-1] has only one value
this.best.I[this.best.simplex.m] has only one value
this.best.I[this.best.simplex.m-1] has only one value
this.best.I[this.best.simplex.n-1] has only one value
this.best.I[this.best.simplex.nart] has only one value
this.best.I[this.best.simplex.nart-1] has only one value
this.best.simplex.Ib[this.best.simplex.nart] has only one value
this.best.U[] >= this.best.L[] (elementwise)
this.best.U[] elements > this.best.fo
this.best.U[] > this.best.simplex.c[] (elementwise)
this.best.U[] elements > this.e.m.fo
this.best.L[] elements >= this.best.fo
this.best.L[] >= this.best.simplex.c[] (elementwise)
this.best.L[] elements >= this.e.m.fo
this.best.A.getClass().getName() != this.best.I.getClass().getName()
this.best.A[] == this.best.simplex.A[] (elementwise)
this.best.c[] elements >= this.best.fo
this.best.c[] + this.best.simplex.c[] == 0
this.best.c[] >= this.best.simplex.c[] (elementwise)
this.best.c[] elements >= this.e.m.fo
this.best.b[] elements > this.best.fo
this.best.b[] elements > this.best.epsilon
this.best.b[] > this.best.simplex.cb[] (elementwise)
this.best.b[] == this.best.simplex.b[] (elementwise)
this.best.b[] > this.best.simplex.dual[] (elementwise)
this.best.b[] < this.best.simplex.Ub[] (elementwise)
this.best.b[] > this.best.simplex.Lb[] (elementwise)
this.best.b[] elements > this.epsilon
this.best.b[] elements > this.e.m.fo
this.best.fo < this.best.epsilon
this.best.simplex.xb[] elements > this.best.fo
this.best.simplex.xn[] elements > this.best.fo
this.best.simplex.cb[] elements > this.best.fo
this.best.simplex.cn[] elements > this.best.fo
this.best.simplex.b[] elements > this.best.fo
this.best.simplex.c[] elements > this.best.fo
this.best.simplex.dual[] elements > this.best.fo
this.best.simplex.rq[] elements > this.best.fo
this.best.simplex.Un[] elements > this.best.fo
this.best.simplex.Ln[] elements > this.best.fo
this.best.fo <= this.epsilon
this.best.fo >= this.e.m.fo
this.best.fo <= this.e.bestSolution
this.best.I.getClass().getName() != this.best.simplex.B.getClass().getName()
this.best.simplex.Ib[this.best.simplex.nart] in this.best.I[]
this.best.simplex.xb[] elements > this.best.epsilon
this.best.simplex.cb[] elements < this.best.epsilon
this.best.simplex.b[] elements > this.best.epsilon
this.best.simplex.c[] elements < this.best.epsilon
this.best.simplex.dual[] elements < this.best.epsilon
this.best.epsilon != this.epsilon
this.best.epsilon > this.e.m.fo
this.best.epsilon != this.e.bestSolution
this.best.simplex.xb[] > this.best.simplex.cb[] (elementwise)
this.best.simplex.xb[] > this.best.simplex.dual[] (elementwise)
this.best.simplex.xb[] < this.best.simplex.Ub[] (elementwise)
this.best.simplex.xb[] > this.best.simplex.Lb[] (elementwise)
this.best.simplex.xb[] elements > this.epsilon
this.best.simplex.xb[] elements > this.e.m.fo
this.best.simplex.xn[] <= this.best.simplex.Un[] (elementwise)
this.best.simplex.xn[] >= this.best.simplex.Ln[] (elementwise)
this.best.simplex.xn[] elements > this.e.m.fo
this.best.simplex.cb[] < this.best.simplex.b[] (elementwise)
this.best.simplex.cb[] <= this.best.simplex.dual[] (elementwise)
this.best.simplex.cb[] < this.best.simplex.Ub[] (elementwise)
this.best.simplex.cb[] <= this.best.simplex.Lb[] (elementwise)
this.best.simplex.cb[] elements <= this.epsilon
this.best.simplex.cb[] elements > this.e.m.fo
this.best.simplex.cb[] elements <= this.e.bestSolution
this.best.simplex.cn[] <= this.best.simplex.rq[] (elementwise)
this.best.simplex.cn[] < this.best.simplex.Un[] (elementwise)
this.best.simplex.cn[] elements > this.e.m.fo
this.best.simplex.b[] > this.best.simplex.dual[] (elementwise)
this.best.simplex.b[] < this.best.simplex.Ub[] (elementwise)
this.best.simplex.b[] > this.best.simplex.Lb[] (elementwise)
this.best.simplex.b[] elements > this.epsilon
this.best.simplex.b[] elements > this.e.m.fo
this.best.simplex.c[] elements <= this.epsilon
this.best.simplex.c[] elements > this.e.m.fo
this.best.simplex.c[] elements <= this.e.bestSolution
this.best.simplex.dual[] < this.best.simplex.Ub[] (elementwise)
this.best.simplex.dual[] <= this.best.simplex.Lb[] (elementwise)
this.best.simplex.dual[] elements <= this.epsilon
this.best.simplex.dual[] elements > this.e.m.fo
this.best.simplex.dual[] elements <= this.e.bestSolution
this.best.simplex.rq[] < this.best.simplex.Un[] (elementwise)
this.best.simplex.rq[] elements > this.e.m.fo
this.best.simplex.Ub[] > this.best.simplex.Lb[] (elementwise)
this.best.simplex.Un[] >= this.best.simplex.Ln[] (elementwise)
this.best.simplex.Un[] elements > this.e.m.fo
this.best.simplex.Ln[] elements > this.e.m.fo
this.epsilon >= this.e.m.fo
this.e.m.fo <= this.e.bestSolution
===========================================================================
algorithms.BnB.BnB(model.Model, model.QBnBEnv):::ENTER
arg0 == arg1.m
arg0.U == arg1.m.U
arg0.U[] == arg1.m.U[]
arg0.L == arg1.m.L
arg0.L[] == arg1.m.L[]
arg0.A == arg1.m.A
arg0.A.getClass().getName() == arg1.m.A.getClass().getName()
arg0.A[] == arg1.m.A[]
arg0.c == arg1.m.c
arg0.c[] == arg1.m.c[]
arg0.b == arg1.m.b
arg0.b[] == arg1.m.b[]
arg0.constraints == arg1.m.constraints
arg0.variables == arg1.m.variables
arg0.ofle == arg1.m.ofle
arg0.epsilon == arg1.m.epsilon
arg0 has only one value
arg0.U has only one value
arg0.U[] == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
arg0.U[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
arg0.L has only one value
arg0.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
arg0.L[] elements one of { 0.0, 1.0, 76.0 }
arg0.id == null
arg0.A has only one value
arg0.A.getClass().getName() == double[][].class
arg0.A[] contains no nulls and has only one value, of length 3
arg0.c has only one value
arg0.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
arg0.c[] elements >= 0.0
arg0.b has only one value
arg0.b[] == [7.0, 500.3, 500.4]
arg0.b[] elements one of { 7.0, 500.3, 500.4 }
arg0.debugMode == false
arg0.x == null
arg0.feasible == false
arg0.fo == 0.0
arg0.type == null
arg0.I == null
arg0.integer == false
arg0.constraints has only one value
arg0.constraints[] contains no nulls and has only one value, of length 3
arg0.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
arg0.constraints[].getClass().getName() elements == model.QBnBconstr.class
arg0.variables has only one value
arg0.variables[] contains no nulls and has only one value, of length 6
arg0.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
arg0.variables[].getClass().getName() elements == model.QBnBVariable.class
arg0.ofle has only one value
arg0.ofle.coeffs has only one value
arg0.ofle.coeffs[] contains no nulls and has only one value, of length 3
arg0.ofle.coeffs[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0.ofle.coeffs[].getClass().getName() elements == java.lang.Double.class
arg0.ofle.varNames has only one value
arg0.ofle.varNames[] contains no nulls and has only one value, of length 3
arg0.ofle.varNames[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0.ofle.varNames[].getClass().getName() elements == java.lang.String.class
arg0.epsilon == 1.0E-6
arg0.simplex == null
arg0.print == false
arg1 has only one value
arg1.m.id == null
arg1.m.debugMode == false
arg1.m.x == null
arg1.m.feasible == false
arg1.m.fo == 0.0
arg1.m.type == null
arg1.m.I == null
arg1.m.integer == false
arg1.m.constraints[] contains no nulls and has only one value, of length 3
arg1.m.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
arg1.m.constraints[].getClass().getName() elements == model.QBnBconstr.class
arg1.m.variables[] contains no nulls and has only one value, of length 6
arg1.m.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
arg1.m.variables[].getClass().getName() elements == model.QBnBVariable.class
arg1.m.simplex == null
arg1.m.print == false
arg1.bestSolution == 0.0
arg1.print == true
arg1.debugMode == false
size(arg0.U[]) == 6
size(arg0.A[]) == 3
size(arg0.constraints[]) == 3
size(arg0.variables[]) == 6
size(arg0.ofle.coeffs[]) == 3
size(arg0.ofle.varNames[]) == 3
size(arg1.m.constraints[]) == 3
size(arg1.m.variables[]) == 6
===========================================================================
algorithms.BnB.BnB(model.Model, model.QBnBEnv):::EXIT
this.best == this.e.m
this.best == arg1.m
this.best == orig(arg0)
this.best == orig(arg1.m)
this.best.U == arg0.U
this.best.U[] == arg0.U[]
this.best.L == arg0.L
this.best.L[] == arg0.L[]
this.best.id == this.e.m.id
this.best.A == arg0.A
this.best.A.getClass().getName() == arg0.A.getClass().getName()
this.best.A[] == arg0.A[]
this.best.c == arg0.c
this.best.c[] == arg0.c[]
this.best.b == arg0.b
this.best.b[] == arg0.b[]
this.best.fo == this.epsilon
this.best.I == this.e.m.I
this.best.constraints == arg0.constraints
this.best.variables == arg0.variables
this.best.ofle == arg0.ofle
this.best.ofle.coeffs == arg0.ofle.coeffs
this.best.ofle.varNames == arg0.ofle.varNames
this.best.epsilon == arg0.epsilon
this.best.simplex == this.e.m.simplex
this.epsilon == this.e.m.fo
this.epsilon == this.e.bestSolution
this.e == orig(arg1)
this.e.m.U == arg0.U
this.e.m.U[] == arg0.U[]
this.e.m.L == arg0.L
this.e.m.L[] == arg0.L[]
this.e.m.A == arg0.A
this.e.m.A.getClass().getName() == arg0.A.getClass().getName()
this.e.m.A[] == arg0.A[]
this.e.m.c == arg0.c
this.e.m.c[] == arg0.c[]
this.e.m.b == arg0.b
this.e.m.b[] == arg0.b[]
this.e.m.constraints == arg0.constraints
this.e.m.variables == arg0.variables
this.e.m.ofle == arg0.ofle
this.e.m.epsilon == arg0.epsilon
this.e.print == arg1.print
this.debugmode == arg1.debugMode
this.debugmode == orig(arg1.debugMode)
arg0.U == arg1.m.U
arg0.U == orig(arg0.U)
arg0.U == orig(arg1.m.U)
arg0.U[] == arg1.m.U[]
arg0.U[] == orig(arg0.U[])
arg0.U[] == orig(arg1.m.U[])
arg0.L == arg1.m.L
arg0.L == orig(arg0.L)
arg0.L == orig(arg1.m.L)
arg0.L[] == arg1.m.L[]
arg0.L[] == orig(arg0.L[])
arg0.L[] == orig(arg1.m.L[])
arg0.id == orig(arg0.id)
arg0.A == arg1.m.A
arg0.A == orig(arg0.A)
arg0.A == orig(arg1.m.A)
arg0.A.getClass().getName() == arg1.m.A.getClass().getName()
arg0.A.getClass().getName() == orig(arg0.A.getClass().getName())
arg0.A.getClass().getName() == orig(arg1.m.A.getClass().getName())
arg0.A[] == arg1.m.A[]
arg0.A[] == orig(arg0.A[])
arg0.A[] == orig(arg1.m.A[])
arg0.c == arg1.m.c
arg0.c == orig(arg0.c)
arg0.c == orig(arg1.m.c)
arg0.c[] == arg1.m.c[]
arg0.c[] == orig(arg0.c[])
arg0.c[] == orig(arg1.m.c[])
arg0.b == arg1.m.b
arg0.b == orig(arg0.b)
arg0.b == orig(arg1.m.b)
arg0.b[] == arg1.m.b[]
arg0.b[] == orig(arg0.b[])
arg0.b[] == orig(arg1.m.b[])
arg0.debugMode == orig(arg0.debugMode)
arg0.x == orig(arg0.x)
arg0.feasible == orig(arg0.feasible)
arg0.fo == orig(arg0.fo)
arg0.type == orig(arg0.type)
arg0.I == orig(arg0.I)
arg0.integer == orig(arg0.integer)
arg0.constraints == arg1.m.constraints
arg0.constraints == orig(arg0.constraints)
arg0.constraints == orig(arg1.m.constraints)
arg0.constraints[] == orig(arg0.constraints[])
arg0.variables == arg1.m.variables
arg0.variables == orig(arg0.variables)
arg0.variables == orig(arg1.m.variables)
arg0.variables[] == orig(arg0.variables[])
arg0.ofle == arg1.m.ofle
arg0.ofle == orig(arg0.ofle)
arg0.ofle == orig(arg1.m.ofle)
arg0.ofle.coeffs == orig(arg0.ofle.coeffs)
arg0.ofle.coeffs[] == orig(arg0.ofle.coeffs[])
arg0.ofle.varNames == orig(arg0.ofle.varNames)
arg0.ofle.varNames[] == orig(arg0.ofle.varNames[])
arg0.epsilon == arg1.m.epsilon
arg0.epsilon == orig(arg0.epsilon)
arg0.epsilon == orig(arg1.m.epsilon)
arg0.simplex == orig(arg0.simplex)
arg0.print == orig(arg0.print)
arg1.m.id == orig(arg1.m.id)
arg1.m.debugMode == orig(arg1.m.debugMode)
arg1.m.x == orig(arg1.m.x)
arg1.m.feasible == orig(arg1.m.feasible)
arg1.m.fo == orig(arg1.m.fo)
arg1.m.type == orig(arg1.m.type)
arg1.m.I == orig(arg1.m.I)
arg1.m.integer == orig(arg1.m.integer)
arg1.m.constraints[] == orig(arg1.m.constraints[])
arg1.m.variables[] == orig(arg1.m.variables[])
arg1.m.simplex == orig(arg1.m.simplex)
arg1.m.print == orig(arg1.m.print)
arg1.bestSolution == orig(arg1.bestSolution)
arg1.print == orig(arg1.print)
this.best has only one value
this.best.id == null
this.best.I == null
this.best.simplex == null
this.priorityQueue == null
this.print == false
this.epsilon == 0.0
this.nodesExplored == 0
arg0.U has only one value
arg0.U[] == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
arg0.U[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
arg0.L has only one value
arg0.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
arg0.L[] elements one of { 0.0, 1.0, 76.0 }
arg0.id == null
arg0.A has only one value
arg0.A.getClass().getName() == double[][].class
arg0.A[] contains no nulls and has only one value, of length 3
arg0.c has only one value
arg0.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
arg0.c[] elements >= 0.0
arg0.b has only one value
arg0.b[] == [7.0, 500.3, 500.4]
arg0.b[] elements one of { 7.0, 500.3, 500.4 }
arg0.debugMode == false
arg0.x == null
arg0.feasible == false
arg0.fo == 0.0
arg0.type == null
arg0.I == null
arg0.integer == false
arg0.constraints has only one value
arg0.constraints[] contains no nulls and has only one value, of length 3
arg0.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
arg0.constraints[].getClass().getName() elements == model.QBnBconstr.class
arg0.variables has only one value
arg0.variables[] contains no nulls and has only one value, of length 6
arg0.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
arg0.variables[].getClass().getName() elements == model.QBnBVariable.class
arg0.ofle has only one value
arg0.ofle.coeffs has only one value
arg0.ofle.coeffs[] contains no nulls and has only one value, of length 3
arg0.ofle.coeffs[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0.ofle.coeffs[].getClass().getName() elements == java.lang.Double.class
arg0.ofle.varNames has only one value
arg0.ofle.varNames[] contains no nulls and has only one value, of length 3
arg0.ofle.varNames[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0.ofle.varNames[].getClass().getName() elements == java.lang.String.class
arg0.epsilon == 1.0E-6
arg0.simplex == null
arg0.print == false
arg1.m.id == null
arg1.m.debugMode == false
arg1.m.x == null
arg1.m.feasible == false
arg1.m.fo == 0.0
arg1.m.type == null
arg1.m.I == null
arg1.m.integer == false
arg1.m.constraints[] contains no nulls and has only one value, of length 3
arg1.m.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
arg1.m.constraints[].getClass().getName() elements == model.QBnBconstr.class
arg1.m.variables[] contains no nulls and has only one value, of length 6
arg1.m.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
arg1.m.variables[].getClass().getName() elements == model.QBnBVariable.class
arg1.m.simplex == null
arg1.m.print == false
arg1.bestSolution == 0.0
arg1.print == true
size(arg0.U[]) == 6
size(arg0.A[]) == 3
size(arg0.constraints[]) == 3
size(arg0.variables[]) == 6
size(arg0.ofle.coeffs[]) == 3
size(arg0.ofle.varNames[]) == 3
size(arg1.m.constraints[]) == 3
size(arg1.m.variables[]) == 6
this.epsilon in arg0.L[]
this.epsilon in arg0.c[]
===========================================================================
algorithms.BnB.changeBound(java.lang.String, double, double[], java.lang.String[]):::ENTER
this.best == this.e.m
this.best.id == this.e.m.id
this.best.A.getClass().getName() == this.best.simplex.N.getClass().getName()
this.best.A.getClass().getName() == this.best.simplex.A.getClass().getName()
this.best.A[] == this.best.simplex.A[]
this.best.b[] == this.best.simplex.b[]
this.best.fo == this.e.m.fo
this.best.I == this.e.m.I
this.best.I.getClass().getName() == arg3.getClass().getName()
this.best.I[] == arg3[]
this.best.ofle == this.e.m.ofle
this.best.simplex == this.e.m.simplex
this.best.simplex.m == size(this.best.b[])
this.best.simplex.m == size(this.e.m.A[])
this.best.simplex.m == size(this.e.m.b[])
this.best.simplex.n == size(this.best.L[])
this.best.simplex.n == size(this.best.c[])
this.best.simplex.n == size(this.e.m.U[])
this.best.simplex.n == size(this.e.m.L[])
this.best.simplex.n == size(this.e.m.c[])
this.best.simplex.n == size(arg2[])
this.best.simplex.n == size(arg3[])
this.print == this.e.print
arg0 == this.best.simplex.Ib[this.best.simplex.m-1]
this.best has only one value
this.best.id has only one value
this.best.id.toString == ""
this.best.fo == -2300.4
this.best.I has only one value
this.best.ofle has only one value
this.best.simplex has only one value
this.best.simplex.B has only one value
this.best.simplex.B[] contains no nulls and has only one value, of length 3
this.best.simplex.N has only one value
this.best.simplex.N[] contains no nulls and has only one value, of length 3
this.best.simplex.xb has only one value
this.best.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.best.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.best.simplex.xn has only one value
this.best.simplex.cb has only one value
this.best.simplex.cb[] == [-0.0, -0.0, -4.0]
this.best.simplex.cn has only one value
this.best.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.best.simplex.In has only one value
this.best.simplex.In[] contains no nulls and has only one value, of length 4
this.best.simplex.In[].toString == [x2, a0, S_R3, x1]
this.best.simplex.Ib has only one value
this.best.simplex.Ib[] contains no nulls and has only one value, of length 3
this.best.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.best.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.best.simplex.c has only one value
this.best.simplex.dual has only one value
this.best.simplex.dual[] == [0.0, 0.0, -1.0]
this.best.simplex.rq has only one value
this.best.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.best.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.best.simplex.Ub has only one value
this.best.simplex.Lb has only one value
this.best.simplex.Un has only one value
this.best.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.best.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.best.simplex.Ln has only one value
this.priorityQueue has only one value
this.print == true
this.epsilon == 1.0E-5
this.e.bestSolution == 0.0
this.nodesExplored == 1
arg0.toString == "x3"
arg1 one of { 0.0, 1.0 }
arg2[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
arg2[] elements >= 0.0
arg3[].toString == [x1, x2, x3, S_R1, S_R2, S_R3]
this.best.simplex.B[this.best.simplex.m-1] has only one value
this.best.simplex.B[this.best.simplex.nart] has only one value
this.best.simplex.B[this.best.simplex.nart-1] has only one value
this.best.simplex.N[this.best.simplex.m-1] has only one value
this.best.simplex.N[this.best.simplex.nart] has only one value
this.best.simplex.N[this.best.simplex.nart-1] has only one value
this.best.simplex.In[this.best.simplex.m] has only one value
this.best.simplex.In[this.best.simplex.m-1] has only one value
this.best.simplex.In[this.best.simplex.nart] has only one value
this.best.simplex.In[this.best.simplex.nart-1] has only one value
this.best.simplex.Ib[this.best.simplex.m-1] has only one value
this.best.simplex.Ib[this.best.simplex.nart-1] has only one value
this.e.bestSolution in this.best.L[]
arg1 in this.best.L[]
this.e.bestSolution in this.best.c[]
this.e.bestSolution in this.best.simplex.xn[]
this.e.bestSolution in this.best.simplex.cb[]
this.e.bestSolution in this.best.simplex.cn[]
this.e.bestSolution in this.best.simplex.c[]
this.e.bestSolution in this.best.simplex.dual[]
this.best.simplex.Lb[] elements == this.e.bestSolution
this.e.bestSolution in this.best.simplex.Lb[]
this.e.bestSolution in this.best.simplex.Ln[]
arg1 in this.best.simplex.Ln[]
===========================================================================
algorithms.BnB.changeBound(java.lang.String, double, double[], java.lang.String[]):::EXIT
this.type == orig(this.type)
this.best == this.e.m
this.best == orig(this.best)
this.best == orig(this.e.m)
this.best.U == orig(this.best.U)
this.best.U == orig(this.e.m.U)
this.best.L == orig(this.best.L)
this.best.L == orig(this.e.m.L)
this.best.L[] == orig(this.best.L[])
this.best.L[] == orig(this.e.m.L[])
this.best.id == this.e.m.id
this.best.id == orig(this.best.id)
this.best.id == orig(this.e.m.id)
this.best.id.toString == orig(this.best.id.toString)
this.best.A == orig(this.best.A)
this.best.A == orig(this.best.simplex.A)
this.best.A == orig(this.e.m.A)
this.best.A.getClass().getName() == this.best.simplex.N.getClass().getName()
this.best.A.getClass().getName() == this.best.simplex.A.getClass().getName()
this.best.A.getClass().getName() == orig(this.best.A.getClass().getName())
this.best.A.getClass().getName() == orig(this.best.simplex.B.getClass().getName())
this.best.A.getClass().getName() == orig(this.best.simplex.N.getClass().getName())
this.best.A.getClass().getName() == orig(this.best.simplex.A.getClass().getName())
this.best.A.getClass().getName() == orig(this.e.m.A.getClass().getName())
this.best.A[] == this.best.simplex.A[]
this.best.A[] == orig(this.best.A[])
this.best.A[] == orig(this.best.simplex.A[])
this.best.A[] == orig(this.e.m.A[])
this.best.c == orig(this.best.c)
this.best.c == orig(this.e.m.c)
this.best.c[] == orig(this.best.c[])
this.best.c[] == orig(this.e.m.c[])
this.best.b == orig(this.best.b)
this.best.b == orig(this.best.simplex.b)
this.best.b == orig(this.e.m.b)
this.best.b[] == this.best.simplex.b[]
this.best.b[] == orig(this.best.b[])
this.best.b[] == orig(this.best.simplex.b[])
this.best.b[] == orig(this.e.m.b[])
this.best.debugMode == orig(this.best.debugMode)
this.best.x == orig(this.best.x)
this.best.feasible == orig(this.best.feasible)
this.best.fo == this.e.m.fo
this.best.fo == orig(this.best.fo)
this.best.fo == orig(this.e.m.fo)
this.best.type == orig(this.best.type)
this.best.I == this.e.m.I
this.best.I == orig(this.best.I)
this.best.I == orig(this.best.simplex.I)
this.best.I == orig(this.e.m.I)
this.best.I.getClass().getName() == orig(arg3.getClass().getName())
this.best.I[] == arg3[]
this.best.integer == orig(this.best.integer)
this.best.constraints == orig(this.best.constraints)
this.best.constraints == orig(this.e.m.constraints)
this.best.constraints[] == orig(this.best.constraints[])
this.best.variables == orig(this.best.variables)
this.best.variables == orig(this.e.m.variables)
this.best.variables[] == orig(this.best.variables[])
this.best.ofle == this.e.m.ofle
this.best.ofle == orig(this.best.ofle)
this.best.ofle == orig(this.e.m.ofle)
this.best.ofle.coeffs == orig(this.best.ofle.coeffs)
this.best.ofle.coeffs[] == orig(this.best.ofle.coeffs[])
this.best.ofle.varNames == orig(this.best.ofle.varNames)
this.best.ofle.varNames[] == orig(this.best.ofle.varNames[])
this.best.epsilon == orig(this.best.epsilon)
this.best.epsilon == orig(this.e.m.epsilon)
this.best.simplex == this.e.m.simplex
this.best.simplex == orig(this.best.simplex)
this.best.simplex == orig(this.e.m.simplex)
this.best.simplex.B == orig(this.best.simplex.B)
this.best.simplex.B[] == orig(this.best.simplex.B[])
this.best.simplex.N == orig(this.best.simplex.N)
this.best.simplex.N[] == orig(this.best.simplex.N[])
this.best.simplex.xb == orig(this.best.simplex.xb)
this.best.simplex.xb[] == orig(this.best.simplex.xb[])
this.best.simplex.xn == orig(this.best.simplex.xn)
this.best.simplex.xn[] == orig(this.best.simplex.xn[])
this.best.simplex.cb == orig(this.best.simplex.cb)
this.best.simplex.cb[] == orig(this.best.simplex.cb[])
this.best.simplex.cn == orig(this.best.simplex.cn)
this.best.simplex.cn[] == orig(this.best.simplex.cn[])
this.best.simplex.In == orig(this.best.simplex.In)
this.best.simplex.In.getClass().getName() == orig(arg3.getClass().getName())
this.best.simplex.In[] == orig(this.best.simplex.In[])
this.best.simplex.Ib == orig(this.best.simplex.Ib)
this.best.simplex.Ib.getClass().getName() == orig(arg3.getClass().getName())
this.best.simplex.Ib[] == orig(this.best.simplex.Ib[])
this.best.simplex.c == orig(this.best.simplex.c)
this.best.simplex.c[] == orig(this.best.simplex.c[])
this.best.simplex.status == orig(this.best.simplex.status)
this.best.simplex.dual == orig(this.best.simplex.dual)
this.best.simplex.dual[] == orig(this.best.simplex.dual[])
this.best.simplex.rq == orig(this.best.simplex.rq)
this.best.simplex.rq[] == orig(this.best.simplex.rq[])
this.best.simplex.Ub == orig(this.best.simplex.Ub)
this.best.simplex.Ub[] == orig(this.best.simplex.Ub[])
this.best.simplex.Lb == orig(this.best.simplex.Lb)
this.best.simplex.Lb[] == orig(this.best.simplex.Lb[])
this.best.simplex.Un == orig(this.best.simplex.Un)
this.best.simplex.Un == orig(this.best.simplex.U)
this.best.simplex.Un[] == orig(this.best.simplex.Un[])
this.best.simplex.Un[] == orig(this.best.simplex.U[])
this.best.simplex.Ln == orig(this.best.simplex.Ln)
this.best.simplex.Ln == orig(this.best.simplex.L)
this.best.simplex.Ln[] == orig(this.best.simplex.Ln[])
this.best.simplex.Ln[] == orig(this.best.simplex.L[])
this.best.simplex.m == orig(this.best.simplex.m)
this.best.simplex.m == size(this.best.b[])
this.best.simplex.m == size(this.e.m.A[])
this.best.simplex.m == size(this.e.m.b[])
this.best.simplex.m == orig(size(this.best.A[]))
this.best.simplex.m == orig(size(this.best.b[]))
this.best.simplex.m == orig(size(this.best.simplex.B[]))
this.best.simplex.m == orig(size(this.best.simplex.N[]))
this.best.simplex.m == orig(size(this.best.simplex.xb[]))
this.best.simplex.m == orig(size(this.best.simplex.xn[]))-1
this.best.simplex.m == orig(size(this.best.simplex.cb[]))
this.best.simplex.m == orig(size(this.best.simplex.cn[]))-1
this.best.simplex.m == orig(size(this.best.simplex.b[]))
this.best.simplex.m == orig(size(this.best.simplex.In[]))-1
this.best.simplex.m == orig(size(this.best.simplex.Ib[]))
this.best.simplex.m == orig(size(this.best.simplex.A[]))
this.best.simplex.m == orig(size(this.best.simplex.dual[]))
this.best.simplex.m == orig(size(this.best.simplex.rq[]))-1
this.best.simplex.m == orig(size(this.best.simplex.Ub[]))
this.best.simplex.m == orig(size(this.best.simplex.Lb[]))
this.best.simplex.m == orig(size(this.best.simplex.Un[]))-1
this.best.simplex.m == orig(size(this.best.simplex.Ln[]))-1
this.best.simplex.m == orig(size(this.best.simplex.U[]))-1
this.best.simplex.m == orig(size(this.best.simplex.L[]))-1
this.best.simplex.m == orig(size(this.e.m.A[]))
this.best.simplex.m == orig(size(this.e.m.b[]))
this.best.simplex.n == orig(this.best.simplex.n)
this.best.simplex.n == size(this.best.L[])
this.best.simplex.n == size(this.best.c[])
this.best.simplex.n == size(this.e.m.U[])
this.best.simplex.n == size(this.e.m.L[])
this.best.simplex.n == size(this.e.m.c[])
this.best.simplex.n == orig(size(this.best.U[]))
this.best.simplex.n == orig(size(this.best.L[]))
this.best.simplex.n == orig(size(this.best.c[]))
this.best.simplex.n == orig(size(this.best.I[]))
this.best.simplex.n == orig(size(this.best.simplex.c[]))
this.best.simplex.n == orig(size(this.best.simplex.I[]))
this.best.simplex.n == orig(size(this.e.m.U[]))
this.best.simplex.n == orig(size(this.e.m.L[]))
this.best.simplex.n == orig(size(this.e.m.c[]))
this.best.simplex.n == orig(size(this.e.m.I[]))
this.best.simplex.n == orig(size(arg2[]))
this.best.simplex.n == orig(size(arg3[]))
this.best.simplex.initialTime == orig(this.best.simplex.initialTime)
this.best.simplex.nart == orig(this.best.simplex.nart)
this.best.simplex.I.getClass().getName() == orig(arg3.getClass().getName())
this.best.simplex.I[] == arg3[]
this.priorityQueue == orig(this.priorityQueue)
this.priorityQueue.N == orig(this.priorityQueue.N)
this.priorityQueue.first == orig(this.priorityQueue.first)
this.priorityQueue.last == orig(this.priorityQueue.last)
this.timeLoadingData == orig(this.timeLoadingData)
this.print == this.e.print
this.print == orig(this.print)
this.print == orig(this.e.print)
this.epsilon == orig(this.epsilon)
this.cuts == orig(this.cuts)
this.e == orig(this.e)
this.e.m.id.toString == orig(this.e.m.id.toString)
this.e.m.debugMode == orig(this.e.m.debugMode)
this.e.m.x == orig(this.e.m.x)
this.e.m.feasible == orig(this.e.m.feasible)
this.e.m.type == orig(this.e.m.type)
this.e.m.I.getClass().getName() == orig(arg3.getClass().getName())
this.e.m.I[] == arg3[]
this.e.m.integer == orig(this.e.m.integer)
this.e.m.constraints[] == orig(this.e.m.constraints[])
this.e.m.variables[] == orig(this.e.m.variables[])
this.e.bestSolution == orig(this.e.bestSolution)
this.nodesExplored == orig(this.nodesExplored)
this.printSimplex == orig(this.best.simplex.printSolution)
this.printSimplex == orig(this.best.print)
this.printSimplex == orig(this.e.m.print)
this.printSimplex == orig(this.printSimplex)
this.debugmode == orig(this.e.debugMode)
this.debugmode == orig(this.debugmode)
arg0.toString == orig(arg0.toString)
arg3[] == orig(this.best.I[])
arg3[] == orig(this.best.simplex.I[])
arg3[] == orig(this.e.m.I[])
arg3[] == orig(arg3[])
orig(this.best.simplex.In.getClass().getName()) == orig(arg3.getClass().getName())
orig(this.best.simplex.Ib.getClass().getName()) == orig(arg3.getClass().getName())
orig(this.best.simplex.I.getClass().getName()) == orig(arg3.getClass().getName())
orig(this.e.m.I.getClass().getName()) == orig(arg3.getClass().getName())
orig(arg0) == this.best.simplex.Ib[this.best.simplex.m-1]
orig(arg0) == this.best.simplex.Ib[orig(this.best.simplex.m)-1]
orig(arg0) == orig(this.best.simplex.Ib[post(this.best.simplex.m)-1])
size(this.best.simplex.xn[]) == orig(size(this.best.simplex.cn[]))
size(this.best.simplex.xn[]) == orig(size(this.best.simplex.In[]))
size(this.best.simplex.xn[]) == orig(size(this.best.simplex.rq[]))
size(this.best.simplex.xn[]) == orig(size(this.best.simplex.Un[]))
size(this.best.simplex.xn[]) == orig(size(this.best.simplex.Ln[]))
size(this.best.simplex.xn[]) == orig(size(this.best.simplex.U[]))
size(this.best.simplex.xn[]) == orig(size(this.best.simplex.L[]))
this.best has only one value
this.best.U[] == [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.best.id has only one value
this.best.id.toString == ""
this.best.fo == -2300.4
this.best.I has only one value
this.best.ofle has only one value
this.best.simplex has only one value
this.best.simplex.B has only one value
this.best.simplex.B[] contains no nulls and has only one value, of length 3
this.best.simplex.N has only one value
this.best.simplex.N[] contains no nulls and has only one value, of length 3
this.best.simplex.xb has only one value
this.best.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.best.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.best.simplex.xn has only one value
this.best.simplex.cb has only one value
this.best.simplex.cb[] == [-0.0, -0.0, -4.0]
this.best.simplex.cn has only one value
this.best.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.best.simplex.In has only one value
this.best.simplex.In[] contains no nulls and has only one value, of length 4
this.best.simplex.In[].toString == [x2, a0, S_R3, x1]
this.best.simplex.Ib has only one value
this.best.simplex.Ib[] contains no nulls and has only one value, of length 3
this.best.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.best.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.best.simplex.c has only one value
this.best.simplex.dual has only one value
this.best.simplex.dual[] == [0.0, 0.0, -1.0]
this.best.simplex.rq has only one value
this.best.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.best.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.best.simplex.Ub has only one value
this.best.simplex.Lb has only one value
this.best.simplex.Un has only one value
this.best.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.best.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.best.simplex.Ln has only one value
this.priorityQueue has only one value
this.print == true
this.epsilon == 1.0E-5
this.e.bestSolution == 0.0
this.nodesExplored == 1
arg0.toString == "x3"
arg2[] one of { [1.0, 76.0, 1.0, 0.0, 0.0, 0.0], [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
arg2[] elements >= 0.0
arg3[] contains no nulls and has only one value, of length 6
arg3[].toString == [x1, x2, x3, S_R1, S_R2, S_R3]
orig(arg0) has only one value
orig(arg3.getClass().getName()) == java.lang.String[].class
this.best.simplex.B[this.best.simplex.m-1] has only one value
this.best.simplex.B[this.best.simplex.nart] has only one value
this.best.simplex.B[this.best.simplex.nart-1] has only one value
this.best.simplex.N[this.best.simplex.m-1] has only one value
this.best.simplex.N[this.best.simplex.nart] has only one value
this.best.simplex.N[this.best.simplex.nart-1] has only one value
this.best.simplex.In[this.best.simplex.m] has only one value
this.best.simplex.In[this.best.simplex.m-1] has only one value
this.best.simplex.In[this.best.simplex.nart] has only one value
this.best.simplex.In[this.best.simplex.nart-1] has only one value
this.best.simplex.Ib[this.best.simplex.nart-1] has only one value
arg3[this.best.simplex.m] has only one value
arg3[this.best.simplex.m-1] has only one value
arg3[this.best.simplex.n-1] has only one value
arg3[this.best.simplex.nart] has only one value
arg3[this.best.simplex.nart-1] has only one value
this.e.bestSolution in this.best.U[]
this.e.bestSolution in this.best.L[]
orig(arg1) in this.best.L[]
this.e.bestSolution in this.best.c[]
this.e.bestSolution in this.best.simplex.xn[]
this.e.bestSolution in this.best.simplex.cb[]
this.e.bestSolution in this.best.simplex.cn[]
this.e.bestSolution in this.best.simplex.c[]
this.e.bestSolution in this.best.simplex.dual[]
this.best.simplex.Lb[] elements == this.e.bestSolution
this.e.bestSolution in this.best.simplex.Lb[]
this.e.bestSolution in this.best.simplex.Ln[]
orig(arg1) in this.best.simplex.Ln[]
this.e.bestSolution in arg2[]
orig(arg1) in arg2[]
this.best.simplex.Ib[this.best.simplex.nart] in arg3[]
===========================================================================
algorithms.BnB.doubleIsInteger(double):::ENTER
this.best == this.e.m
this.best.id == this.e.m.id
this.best.A.getClass().getName() == this.best.simplex.N.getClass().getName()
this.best.A.getClass().getName() == this.best.simplex.A.getClass().getName()
this.best.A[] == this.best.simplex.A[]
this.best.b[] == this.best.simplex.b[]
this.best.fo == this.e.m.fo
this.best.I == this.e.m.I
this.best.ofle == this.e.m.ofle
this.best.simplex == this.e.m.simplex
this.best.simplex.m == size(this.best.b[])
this.best.simplex.m == size(this.e.m.A[])
this.best.simplex.m == size(this.e.m.b[])
this.best.simplex.n == size(this.best.L[])
this.best.simplex.n == size(this.best.c[])
this.best.simplex.n == size(this.e.m.U[])
this.best.simplex.n == size(this.e.m.L[])
this.best.simplex.n == size(this.e.m.c[])
this.print == this.e.print
this.best has only one value
this.best.U[] == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.best.U[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.best.id has only one value
this.best.id.toString == ""
this.best.fo == -2300.4
this.best.I has only one value
this.best.ofle has only one value
this.best.simplex has only one value
this.best.simplex.B has only one value
this.best.simplex.B[] contains no nulls and has only one value, of length 3
this.best.simplex.N has only one value
this.best.simplex.N[] contains no nulls and has only one value, of length 3
this.best.simplex.xb has only one value
this.best.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.best.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.best.simplex.xn has only one value
this.best.simplex.cb has only one value
this.best.simplex.cb[] == [-0.0, -0.0, -4.0]
this.best.simplex.cn has only one value
this.best.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.best.simplex.In has only one value
this.best.simplex.In[] contains no nulls and has only one value, of length 4
this.best.simplex.In[].toString == [x2, a0, S_R3, x1]
this.best.simplex.Ib has only one value
this.best.simplex.Ib[] contains no nulls and has only one value, of length 3
this.best.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.best.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.best.simplex.c has only one value
this.best.simplex.dual has only one value
this.best.simplex.dual[] == [0.0, 0.0, -1.0]
this.best.simplex.rq has only one value
this.best.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.best.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.best.simplex.Ub has only one value
this.best.simplex.Lb has only one value
this.best.simplex.Un has only one value
this.best.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.best.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.best.simplex.Ln has only one value
this.priorityQueue has only one value
this.print == true
this.e.bestSolution == 0.0
this.nodesExplored == 1
arg0 one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.best.simplex.B[this.best.simplex.m-1] has only one value
this.best.simplex.B[this.best.simplex.nart] has only one value
this.best.simplex.B[this.best.simplex.nart-1] has only one value
this.best.simplex.N[this.best.simplex.m-1] has only one value
this.best.simplex.N[this.best.simplex.nart] has only one value
this.best.simplex.N[this.best.simplex.nart-1] has only one value
this.best.simplex.In[this.best.simplex.m] has only one value
this.best.simplex.In[this.best.simplex.m-1] has only one value
this.best.simplex.In[this.best.simplex.nart] has only one value
this.best.simplex.In[this.best.simplex.nart-1] has only one value
this.best.simplex.Ib[this.best.simplex.m-1] has only one value
this.best.simplex.Ib[this.best.simplex.nart-1] has only one value
this.e.bestSolution in this.best.L[]
this.e.bestSolution in this.best.c[]
arg0 in this.best.simplex.xb[]
this.e.bestSolution in this.best.simplex.xn[]
this.e.bestSolution in this.best.simplex.cb[]
this.e.bestSolution in this.best.simplex.cn[]
this.e.bestSolution in this.best.simplex.c[]
this.e.bestSolution in this.best.simplex.dual[]
this.best.simplex.Lb[] elements == this.e.bestSolution
this.e.bestSolution in this.best.simplex.Lb[]
this.e.bestSolution in this.best.simplex.Ln[]
===========================================================================
algorithms.BnB.doubleIsInteger(double):::EXIT195
===========================================================================
algorithms.BnB.doubleIsInteger(double):::EXIT195;condition="not(return == true)"
===========================================================================
algorithms.BnB.doubleIsInteger(double):::EXIT
this.type == orig(this.type)
this.best == this.e.m
this.best == orig(this.best)
this.best == orig(this.e.m)
this.best.U == orig(this.best.U)
this.best.U == orig(this.e.m.U)
this.best.U[] == orig(this.best.U[])
this.best.U[] == orig(this.e.m.U[])
this.best.L == orig(this.best.L)
this.best.L == orig(this.e.m.L)
this.best.L[] == orig(this.best.L[])
this.best.L[] == orig(this.e.m.L[])
this.best.id == this.e.m.id
this.best.id == orig(this.best.id)
this.best.id == orig(this.e.m.id)
this.best.id.toString == orig(this.best.id.toString)
this.best.A == orig(this.best.A)
this.best.A == orig(this.best.simplex.A)
this.best.A == orig(this.e.m.A)
this.best.A.getClass().getName() == this.best.simplex.N.getClass().getName()
this.best.A.getClass().getName() == this.best.simplex.A.getClass().getName()
this.best.A.getClass().getName() == orig(this.best.A.getClass().getName())
this.best.A.getClass().getName() == orig(this.best.simplex.B.getClass().getName())
this.best.A.getClass().getName() == orig(this.best.simplex.N.getClass().getName())
this.best.A.getClass().getName() == orig(this.best.simplex.A.getClass().getName())
this.best.A.getClass().getName() == orig(this.e.m.A.getClass().getName())
this.best.A[] == this.best.simplex.A[]
this.best.A[] == orig(this.best.A[])
this.best.A[] == orig(this.best.simplex.A[])
this.best.A[] == orig(this.e.m.A[])
this.best.c == orig(this.best.c)
this.best.c == orig(this.e.m.c)
this.best.c[] == orig(this.best.c[])
this.best.c[] == orig(this.e.m.c[])
this.best.b == orig(this.best.b)
this.best.b == orig(this.best.simplex.b)
this.best.b == orig(this.e.m.b)
this.best.b[] == this.best.simplex.b[]
this.best.b[] == orig(this.best.b[])
this.best.b[] == orig(this.best.simplex.b[])
this.best.b[] == orig(this.e.m.b[])
this.best.debugMode == orig(this.best.debugMode)
this.best.x == orig(this.best.x)
this.best.feasible == orig(this.best.feasible)
this.best.fo == this.e.m.fo
this.best.fo == orig(this.best.fo)
this.best.fo == orig(this.e.m.fo)
this.best.type == orig(this.best.type)
this.best.I == this.e.m.I
this.best.I == orig(this.best.I)
this.best.I == orig(this.best.simplex.I)
this.best.I == orig(this.e.m.I)
this.best.I.getClass().getName() == orig(this.best.I.getClass().getName())
this.best.I.getClass().getName() == orig(this.best.simplex.In.getClass().getName())
this.best.I.getClass().getName() == orig(this.best.simplex.Ib.getClass().getName())
this.best.I.getClass().getName() == orig(this.best.simplex.I.getClass().getName())
this.best.I.getClass().getName() == orig(this.e.m.I.getClass().getName())
this.best.I[] == orig(this.best.I[])
this.best.I[] == orig(this.best.simplex.I[])
this.best.I[] == orig(this.e.m.I[])
this.best.integer == orig(this.best.integer)
this.best.constraints == orig(this.best.constraints)
this.best.constraints == orig(this.e.m.constraints)
this.best.constraints[] == orig(this.best.constraints[])
this.best.variables == orig(this.best.variables)
this.best.variables == orig(this.e.m.variables)
this.best.variables[] == orig(this.best.variables[])
this.best.ofle == this.e.m.ofle
this.best.ofle == orig(this.best.ofle)
this.best.ofle == orig(this.e.m.ofle)
this.best.ofle.coeffs == orig(this.best.ofle.coeffs)
this.best.ofle.coeffs[] == orig(this.best.ofle.coeffs[])
this.best.ofle.varNames == orig(this.best.ofle.varNames)
this.best.ofle.varNames[] == orig(this.best.ofle.varNames[])
this.best.epsilon == orig(this.best.epsilon)
this.best.epsilon == orig(this.e.m.epsilon)
this.best.simplex == this.e.m.simplex
this.best.simplex == orig(this.best.simplex)
this.best.simplex == orig(this.e.m.simplex)
this.best.simplex.B == orig(this.best.simplex.B)
this.best.simplex.B[] == orig(this.best.simplex.B[])
this.best.simplex.N == orig(this.best.simplex.N)
this.best.simplex.N[] == orig(this.best.simplex.N[])
this.best.simplex.xb == orig(this.best.simplex.xb)
this.best.simplex.xb[] == orig(this.best.simplex.xb[])
this.best.simplex.xn == orig(this.best.simplex.xn)
this.best.simplex.xn[] == orig(this.best.simplex.xn[])
this.best.simplex.cb == orig(this.best.simplex.cb)
this.best.simplex.cb[] == orig(this.best.simplex.cb[])
this.best.simplex.cn == orig(this.best.simplex.cn)
this.best.simplex.cn[] == orig(this.best.simplex.cn[])
this.best.simplex.In == orig(this.best.simplex.In)
this.best.simplex.In[] == orig(this.best.simplex.In[])
this.best.simplex.Ib == orig(this.best.simplex.Ib)
this.best.simplex.Ib[] == orig(this.best.simplex.Ib[])
this.best.simplex.c == orig(this.best.simplex.c)
this.best.simplex.c[] == orig(this.best.simplex.c[])
this.best.simplex.status == orig(this.best.simplex.status)
this.best.simplex.dual == orig(this.best.simplex.dual)
this.best.simplex.dual[] == orig(this.best.simplex.dual[])
this.best.simplex.rq == orig(this.best.simplex.rq)
this.best.simplex.rq[] == orig(this.best.simplex.rq[])
this.best.simplex.Ub == orig(this.best.simplex.Ub)
this.best.simplex.Ub[] == orig(this.best.simplex.Ub[])
this.best.simplex.Lb == orig(this.best.simplex.Lb)
this.best.simplex.Lb[] == orig(this.best.simplex.Lb[])
this.best.simplex.Un == orig(this.best.simplex.Un)
this.best.simplex.Un == orig(this.best.simplex.U)
this.best.simplex.Un[] == orig(this.best.simplex.Un[])
this.best.simplex.Un[] == orig(this.best.simplex.U[])
this.best.simplex.Ln == orig(this.best.simplex.Ln)
this.best.simplex.Ln == orig(this.best.simplex.L)
this.best.simplex.Ln[] == orig(this.best.simplex.Ln[])
this.best.simplex.Ln[] == orig(this.best.simplex.L[])
this.best.simplex.m == orig(this.best.simplex.m)
this.best.simplex.m == size(this.best.b[])
this.best.simplex.m == size(this.e.m.A[])
this.best.simplex.m == size(this.e.m.b[])
this.best.simplex.m == orig(size(this.best.A[]))
this.best.simplex.m == orig(size(this.best.b[]))
this.best.simplex.m == orig(size(this.best.simplex.B[]))
this.best.simplex.m == orig(size(this.best.simplex.N[]))
this.best.simplex.m == orig(size(this.best.simplex.xb[]))
this.best.simplex.m == orig(size(this.best.simplex.xn[]))-1
this.best.simplex.m == orig(size(this.best.simplex.cb[]))
this.best.simplex.m == orig(size(this.best.simplex.cn[]))-1
this.best.simplex.m == orig(size(this.best.simplex.b[]))
this.best.simplex.m == orig(size(this.best.simplex.In[]))-1
this.best.simplex.m == orig(size(this.best.simplex.Ib[]))
this.best.simplex.m == orig(size(this.best.simplex.A[]))
this.best.simplex.m == orig(size(this.best.simplex.dual[]))
this.best.simplex.m == orig(size(this.best.simplex.rq[]))-1
this.best.simplex.m == orig(size(this.best.simplex.Ub[]))
this.best.simplex.m == orig(size(this.best.simplex.Lb[]))
this.best.simplex.m == orig(size(this.best.simplex.Un[]))-1
this.best.simplex.m == orig(size(this.best.simplex.Ln[]))-1
this.best.simplex.m == orig(size(this.best.simplex.U[]))-1
this.best.simplex.m == orig(size(this.best.simplex.L[]))-1
this.best.simplex.m == orig(size(this.e.m.A[]))
this.best.simplex.m == orig(size(this.e.m.b[]))
this.best.simplex.n == orig(this.best.simplex.n)
this.best.simplex.n == size(this.best.L[])
this.best.simplex.n == size(this.best.c[])
this.best.simplex.n == size(this.e.m.U[])
this.best.simplex.n == size(this.e.m.L[])
this.best.simplex.n == size(this.e.m.c[])
this.best.simplex.n == orig(size(this.best.U[]))
this.best.simplex.n == orig(size(this.best.L[]))
this.best.simplex.n == orig(size(this.best.c[]))
this.best.simplex.n == orig(size(this.best.I[]))
this.best.simplex.n == orig(size(this.best.simplex.c[]))
this.best.simplex.n == orig(size(this.best.simplex.I[]))
this.best.simplex.n == orig(size(this.e.m.U[]))
this.best.simplex.n == orig(size(this.e.m.L[]))
this.best.simplex.n == orig(size(this.e.m.c[]))
this.best.simplex.n == orig(size(this.e.m.I[]))
this.best.simplex.initialTime == orig(this.best.simplex.initialTime)
this.best.simplex.nart == orig(this.best.simplex.nart)
this.priorityQueue == orig(this.priorityQueue)
this.priorityQueue.N == orig(this.priorityQueue.N)
this.priorityQueue.first == orig(this.priorityQueue.first)
this.priorityQueue.last == orig(this.priorityQueue.last)
this.timeLoadingData == orig(this.timeLoadingData)
this.print == this.e.print
this.print == orig(this.print)
this.print == orig(this.e.print)
this.cuts == orig(this.cuts)
this.e == orig(this.e)
this.e.m.id.toString == orig(this.e.m.id.toString)
this.e.m.debugMode == orig(this.e.m.debugMode)
this.e.m.x == orig(this.e.m.x)
this.e.m.feasible == orig(this.e.m.feasible)
this.e.m.type == orig(this.e.m.type)
this.e.m.integer == orig(this.e.m.integer)
this.e.m.constraints[] == orig(this.e.m.constraints[])
this.e.m.variables[] == orig(this.e.m.variables[])
this.e.bestSolution == orig(this.e.bestSolution)
this.nodesExplored == orig(this.nodesExplored)
this.printSimplex == orig(this.best.simplex.printSolution)
this.printSimplex == orig(this.best.print)
this.printSimplex == orig(this.e.m.print)
this.printSimplex == orig(this.printSimplex)
this.debugmode == orig(this.e.debugMode)
this.debugmode == orig(this.debugmode)
size(this.best.simplex.xn[]) == orig(size(this.best.simplex.cn[]))
size(this.best.simplex.xn[]) == orig(size(this.best.simplex.In[]))
size(this.best.simplex.xn[]) == orig(size(this.best.simplex.rq[]))
size(this.best.simplex.xn[]) == orig(size(this.best.simplex.Un[]))
size(this.best.simplex.xn[]) == orig(size(this.best.simplex.Ln[]))
size(this.best.simplex.xn[]) == orig(size(this.best.simplex.U[]))
size(this.best.simplex.xn[]) == orig(size(this.best.simplex.L[]))
this.best has only one value
this.best.U[] == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.best.U[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.best.id has only one value
this.best.id.toString == ""
this.best.fo == -2300.4
this.best.I has only one value
this.best.ofle has only one value
this.best.simplex has only one value
this.best.simplex.B has only one value
this.best.simplex.B[] contains no nulls and has only one value, of length 3
this.best.simplex.N has only one value
this.best.simplex.N[] contains no nulls and has only one value, of length 3
this.best.simplex.xb has only one value
this.best.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.best.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.best.simplex.xn has only one value
this.best.simplex.cb has only one value
this.best.simplex.cb[] == [-0.0, -0.0, -4.0]
this.best.simplex.cn has only one value
this.best.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.best.simplex.In has only one value
this.best.simplex.In[] contains no nulls and has only one value, of length 4
this.best.simplex.In[].toString == [x2, a0, S_R3, x1]
this.best.simplex.Ib has only one value
this.best.simplex.Ib[] contains no nulls and has only one value, of length 3
this.best.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.best.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.best.simplex.c has only one value
this.best.simplex.dual has only one value
this.best.simplex.dual[] == [0.0, 0.0, -1.0]
this.best.simplex.rq has only one value
this.best.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.best.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.best.simplex.Ub has only one value
this.best.simplex.Lb has only one value
this.best.simplex.Un has only one value
this.best.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.best.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.best.simplex.Ln has only one value
this.priorityQueue has only one value
this.print == true
this.epsilon == 1.0E-5
this.e.bestSolution == 0.0
this.nodesExplored == 1
return == false
this.best.simplex.B[this.best.simplex.m-1] has only one value
this.best.simplex.B[this.best.simplex.nart] has only one value
this.best.simplex.B[this.best.simplex.nart-1] has only one value
this.best.simplex.N[this.best.simplex.m-1] has only one value
this.best.simplex.N[this.best.simplex.nart] has only one value
this.best.simplex.N[this.best.simplex.nart-1] has only one value
this.best.simplex.In[this.best.simplex.m] has only one value
this.best.simplex.In[this.best.simplex.m-1] has only one value
this.best.simplex.In[this.best.simplex.nart] has only one value
this.best.simplex.In[this.best.simplex.nart-1] has only one value
this.best.simplex.Ib[this.best.simplex.m-1] has only one value
this.best.simplex.Ib[this.best.simplex.nart-1] has only one value
this.e.bestSolution in this.best.L[]
this.e.bestSolution in this.best.c[]
orig(arg0) in this.best.simplex.xb[]
this.e.bestSolution in this.best.simplex.xn[]
this.e.bestSolution in this.best.simplex.cb[]
this.e.bestSolution in this.best.simplex.cn[]
this.e.bestSolution in this.best.simplex.c[]
this.e.bestSolution in this.best.simplex.dual[]
this.best.simplex.Lb[] elements == this.e.bestSolution
this.e.bestSolution in this.best.simplex.Lb[]
this.e.bestSolution in this.best.simplex.Ln[]
===========================================================================
algorithms.BnB.doubleIsInteger(double):::EXIT;condition="not(return == true)"
===========================================================================
algorithms.BnB.integerBranch(model.Model):::ENTER
this.best == this.e.m
this.best == arg0
this.best.U == arg0.U
this.best.U[] == arg0.U[]
this.best.L == arg0.L
this.best.L[] == arg0.L[]
this.best.id == this.e.m.id
this.best.id == arg0.id
this.best.A == arg0.A
this.best.A == arg0.simplex.A
this.best.A.getClass().getName() == this.best.simplex.N.getClass().getName()
this.best.A.getClass().getName() == this.best.simplex.A.getClass().getName()
this.best.A.getClass().getName() == arg0.A.getClass().getName()
this.best.A.getClass().getName() == arg0.simplex.B.getClass().getName()
this.best.A.getClass().getName() == arg0.simplex.N.getClass().getName()
this.best.A.getClass().getName() == arg0.simplex.A.getClass().getName()
this.best.A[] == this.best.simplex.A[]
this.best.A[] == arg0.A[]
this.best.A[] == arg0.simplex.A[]
this.best.c == arg0.c
this.best.c[] == arg0.c[]
this.best.b == arg0.b
this.best.b == arg0.simplex.b
this.best.b[] == this.best.simplex.b[]
this.best.b[] == arg0.b[]
this.best.b[] == arg0.simplex.b[]
this.best.fo == this.e.m.fo
this.best.fo == arg0.fo
this.best.I == this.e.m.I
this.best.I == arg0.I
this.best.I == arg0.simplex.I
this.best.I.getClass().getName() == arg0.I.getClass().getName()
this.best.I.getClass().getName() == arg0.simplex.In.getClass().getName()
this.best.I.getClass().getName() == arg0.simplex.Ib.getClass().getName()
this.best.I.getClass().getName() == arg0.simplex.I.getClass().getName()
this.best.I[] == arg0.I[]
this.best.I[] == arg0.simplex.I[]
this.best.constraints == arg0.constraints
this.best.variables == arg0.variables
this.best.ofle == this.e.m.ofle
this.best.ofle == arg0.ofle
this.best.ofle.coeffs == arg0.ofle.coeffs
this.best.ofle.varNames == arg0.ofle.varNames
this.best.epsilon == arg0.epsilon
this.best.simplex == this.e.m.simplex
this.best.simplex == arg0.simplex
this.best.simplex.B == arg0.simplex.B
this.best.simplex.B[] == arg0.simplex.B[]
this.best.simplex.N == arg0.simplex.N
this.best.simplex.N[] == arg0.simplex.N[]
this.best.simplex.xb == arg0.simplex.xb
this.best.simplex.xb[] == arg0.simplex.xb[]
this.best.simplex.xn == arg0.simplex.xn
this.best.simplex.xn[] == arg0.simplex.xn[]
this.best.simplex.cb == arg0.simplex.cb
this.best.simplex.cb[] == arg0.simplex.cb[]
this.best.simplex.cn == arg0.simplex.cn
this.best.simplex.cn[] == arg0.simplex.cn[]
this.best.simplex.In == arg0.simplex.In
this.best.simplex.In[] == arg0.simplex.In[]
this.best.simplex.Ib == arg0.simplex.Ib
this.best.simplex.Ib[] == arg0.simplex.Ib[]
this.best.simplex.c == arg0.simplex.c
this.best.simplex.c[] == arg0.simplex.c[]
this.best.simplex.status == arg0.simplex.status
this.best.simplex.dual == arg0.simplex.dual
this.best.simplex.dual[] == arg0.simplex.dual[]
this.best.simplex.rq == arg0.simplex.rq
this.best.simplex.rq[] == arg0.simplex.rq[]
this.best.simplex.Ub == arg0.simplex.Ub
this.best.simplex.Ub[] == arg0.simplex.Ub[]
this.best.simplex.Lb == arg0.simplex.Lb
this.best.simplex.Lb[] == arg0.simplex.Lb[]
this.best.simplex.Un == arg0.simplex.Un
this.best.simplex.Un == arg0.simplex.U
this.best.simplex.Un[] == arg0.simplex.Un[]
this.best.simplex.Un[] == arg0.simplex.U[]
this.best.simplex.Ln == arg0.simplex.Ln
this.best.simplex.Ln == arg0.simplex.L
this.best.simplex.Ln[] == arg0.simplex.Ln[]
this.best.simplex.Ln[] == arg0.simplex.L[]
this.best.simplex.m == arg0.simplex.m
this.best.simplex.m == size(this.best.b[])
this.best.simplex.m == size(this.e.m.A[])
this.best.simplex.m == size(this.e.m.b[])
this.best.simplex.m == size(arg0.A[])
this.best.simplex.m == size(arg0.b[])
this.best.simplex.m == size(arg0.simplex.B[])
this.best.simplex.m == size(arg0.simplex.N[])
this.best.simplex.m == size(arg0.simplex.xb[])
this.best.simplex.m == size(arg0.simplex.xn[])-1
this.best.simplex.m == size(arg0.simplex.cb[])
this.best.simplex.m == size(arg0.simplex.cn[])-1
this.best.simplex.m == size(arg0.simplex.b[])
this.best.simplex.m == size(arg0.simplex.In[])-1
this.best.simplex.m == size(arg0.simplex.Ib[])
this.best.simplex.m == size(arg0.simplex.A[])
this.best.simplex.m == size(arg0.simplex.dual[])
this.best.simplex.m == size(arg0.simplex.rq[])-1
this.best.simplex.m == size(arg0.simplex.Ub[])
this.best.simplex.m == size(arg0.simplex.Lb[])
this.best.simplex.m == size(arg0.simplex.Un[])-1
this.best.simplex.m == size(arg0.simplex.Ln[])-1
this.best.simplex.m == size(arg0.simplex.U[])-1
this.best.simplex.m == size(arg0.simplex.L[])-1
this.best.simplex.n == arg0.simplex.n
this.best.simplex.n == size(this.best.L[])
this.best.simplex.n == size(this.best.c[])
this.best.simplex.n == size(this.e.m.U[])
this.best.simplex.n == size(this.e.m.L[])
this.best.simplex.n == size(this.e.m.c[])
this.best.simplex.n == size(arg0.U[])
this.best.simplex.n == size(arg0.L[])
this.best.simplex.n == size(arg0.c[])
this.best.simplex.n == size(arg0.I[])
this.best.simplex.n == size(arg0.simplex.c[])
this.best.simplex.n == size(arg0.simplex.I[])
this.best.simplex.initialTime == arg0.simplex.initialTime
this.best.simplex.nart == arg0.simplex.nart
this.print == this.e.print
this.epsilon == this.e.bestSolution
this.printSimplex == arg0.simplex.printSolution
this.printSimplex == arg0.print
size(this.best.simplex.xn[]) == size(arg0.simplex.cn[])
size(this.best.simplex.xn[]) == size(arg0.simplex.In[])
size(this.best.simplex.xn[]) == size(arg0.simplex.rq[])
size(this.best.simplex.xn[]) == size(arg0.simplex.Un[])
size(this.best.simplex.xn[]) == size(arg0.simplex.Ln[])
size(this.best.simplex.xn[]) == size(arg0.simplex.U[])
size(this.best.simplex.xn[]) == size(arg0.simplex.L[])
this.best has only one value
this.best.U[] == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.best.U[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.best.id has only one value
this.best.id.toString == ""
this.best.fo == -2300.4
this.best.I has only one value
this.best.ofle has only one value
this.best.simplex has only one value
this.best.simplex.B has only one value
this.best.simplex.B[] contains no nulls and has only one value, of length 3
this.best.simplex.N has only one value
this.best.simplex.N[] contains no nulls and has only one value, of length 3
this.best.simplex.xb has only one value
this.best.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.best.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.best.simplex.xn has only one value
this.best.simplex.cb has only one value
this.best.simplex.cb[] == [-0.0, -0.0, -4.0]
this.best.simplex.cn has only one value
this.best.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.best.simplex.In has only one value
this.best.simplex.In[] contains no nulls and has only one value, of length 4
this.best.simplex.In[].toString == [x2, a0, S_R3, x1]
this.best.simplex.Ib has only one value
this.best.simplex.Ib[] contains no nulls and has only one value, of length 3
this.best.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.best.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.best.simplex.c has only one value
this.best.simplex.dual has only one value
this.best.simplex.dual[] == [0.0, 0.0, -1.0]
this.best.simplex.rq has only one value
this.best.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.best.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.best.simplex.Ub has only one value
this.best.simplex.Lb has only one value
this.best.simplex.Un has only one value
this.best.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.best.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.best.simplex.Ln has only one value
this.priorityQueue has only one value
this.print == true
this.epsilon == 0.0
this.nodesExplored == 1
arg0.id.toString == ""
arg0.debugMode == false
arg0.x == null
arg0.feasible == false
arg0.type == null
arg0.I[].toString == [x1, x2, x3, S_R1, S_R2, S_R3]
arg0.integer == false
arg0.constraints[] contains no nulls and has only one value, of length 3
arg0.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
arg0.constraints[].getClass().getName() elements == model.QBnBconstr.class
arg0.variables[] contains no nulls and has only one value, of length 6
arg0.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
arg0.variables[].getClass().getName() elements == model.QBnBVariable.class
arg0.ofle.coeffs[] contains no nulls and has only one value, of length 3
arg0.ofle.coeffs[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0.ofle.coeffs[].getClass().getName() elements == java.lang.Double.class
arg0.ofle.varNames[] contains no nulls and has only one value, of length 3
arg0.ofle.varNames[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0.ofle.varNames[].getClass().getName() elements == java.lang.String.class
arg0.simplex.In[].toString == [x2, a0, S_R3, x1]
arg0.simplex.Ib[].toString == [S_R1, S_R2, x3]
arg0.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
arg0.simplex.I[].toString == [x1, x2, x3, S_R1, S_R2, S_R3]
size(arg0.constraints[]) == 3
size(arg0.variables[]) == 6
size(arg0.ofle.coeffs[]) == 3
size(arg0.ofle.varNames[]) == 3
this.best.A[arg0.simplex.m-1] has only one value
this.best.A[arg0.simplex.nart] has only one value
this.best.A[arg0.simplex.nart-1] has only one value
this.best.I[arg0.simplex.m] has only one value
this.best.I[arg0.simplex.m-1] has only one value
this.best.I[arg0.simplex.n-1] has only one value
this.best.I[arg0.simplex.nart] has only one value
this.best.I[arg0.simplex.nart-1] has only one value
this.best.simplex.B[arg0.simplex.m-1] has only one value
this.best.simplex.B[arg0.simplex.nart] has only one value
this.best.simplex.B[arg0.simplex.nart-1] has only one value
this.best.simplex.N[arg0.simplex.m-1] has only one value
this.best.simplex.N[arg0.simplex.nart] has only one value
this.best.simplex.N[arg0.simplex.nart-1] has only one value
this.best.simplex.In[arg0.simplex.m] has only one value
this.best.simplex.In[arg0.simplex.m-1] has only one value
this.best.simplex.In[arg0.simplex.nart] has only one value
this.best.simplex.In[arg0.simplex.nart-1] has only one value
this.best.simplex.Ib[arg0.simplex.m-1] has only one value
this.best.simplex.Ib[arg0.simplex.nart] has only one value
this.best.simplex.Ib[arg0.simplex.nart-1] has only one value
this.epsilon in this.best.L[]
this.epsilon in this.best.c[]
this.best.simplex.Ib[arg0.simplex.nart] in this.best.I[]
this.epsilon in this.best.simplex.xn[]
this.epsilon in this.best.simplex.cb[]
this.epsilon in this.best.simplex.cn[]
this.epsilon in this.best.simplex.c[]
this.epsilon in this.best.simplex.dual[]
this.best.simplex.Lb[] elements == this.epsilon
this.epsilon in this.best.simplex.Lb[]
this.epsilon in this.best.simplex.Ln[]
===========================================================================
algorithms.BnB.integerBranch(model.Model):::EXIT
this.type == orig(this.type)
this.best == this.e.m
this.best == orig(this.best)
this.best == orig(this.e.m)
this.best == orig(arg0)
this.best.U == arg0.U
this.best.U[] == arg0.U[]
this.best.L == arg0.L
this.best.L[] == arg0.L[]
this.best.id == arg0.id
this.best.id.toString == orig(this.best.id.toString)
this.best.A == arg0.A
this.best.A.getClass().getName() == arg0.A.getClass().getName()
this.best.A[] == arg0.A[]
this.best.c == arg0.c
this.best.c[] == arg0.c[]
this.best.b == arg0.b
this.best.b[] == arg0.b[]
this.best.debugMode == orig(this.best.debugMode)
this.best.x == orig(this.best.x)
this.best.feasible == orig(this.best.feasible)
this.best.fo == arg0.fo
this.best.type == orig(this.best.type)
this.best.I == arg0.I
this.best.I.getClass().getName() == arg0.I.getClass().getName()
this.best.I[] == arg0.I[]
this.best.integer == orig(this.best.integer)
this.best.constraints == arg0.constraints
this.best.constraints[] == orig(this.best.constraints[])
this.best.variables == arg0.variables
this.best.variables[] == orig(this.best.variables[])
this.best.ofle == arg0.ofle
this.best.ofle.coeffs == arg0.ofle.coeffs
this.best.ofle.coeffs[] == orig(this.best.ofle.coeffs[])
this.best.ofle.varNames == arg0.ofle.varNames
this.best.ofle.varNames[] == orig(this.best.ofle.varNames[])
this.best.epsilon == arg0.epsilon
this.best.simplex == arg0.simplex
this.best.simplex.B == arg0.simplex.B
this.best.simplex.B.getClass().getName() == arg0.A.getClass().getName()
this.best.simplex.B[] == arg0.simplex.B[]
this.best.simplex.N == arg0.simplex.N
this.best.simplex.N.getClass().getName() == arg0.A.getClass().getName()
this.best.simplex.N[] == arg0.simplex.N[]
this.best.simplex.xb == arg0.simplex.xb
this.best.simplex.xb[] == arg0.simplex.xb[]
this.best.simplex.xn == arg0.simplex.xn
this.best.simplex.xn[] == arg0.simplex.xn[]
this.best.simplex.cb == arg0.simplex.cb
this.best.simplex.cb[] == arg0.simplex.cb[]
this.best.simplex.cn == arg0.simplex.cn
this.best.simplex.cn[] == arg0.simplex.cn[]
this.best.simplex.b == arg0.b
this.best.simplex.b[] == arg0.b[]
this.best.simplex.In == arg0.simplex.In
this.best.simplex.In.getClass().getName() == arg0.I.getClass().getName()
this.best.simplex.In[] == arg0.simplex.In[]
this.best.simplex.Ib == arg0.simplex.Ib
this.best.simplex.Ib.getClass().getName() == arg0.I.getClass().getName()
this.best.simplex.Ib[] == arg0.simplex.Ib[]
this.best.simplex.c == arg0.simplex.c
this.best.simplex.c[] == arg0.simplex.c[]
this.best.simplex.status == arg0.simplex.status
this.best.simplex.A == arg0.A
this.best.simplex.A.getClass().getName() == arg0.A.getClass().getName()
this.best.simplex.A[] == arg0.A[]
this.best.simplex.dual == arg0.simplex.dual
this.best.simplex.dual[] == arg0.simplex.dual[]
this.best.simplex.rq == arg0.simplex.rq
this.best.simplex.rq[] == arg0.simplex.rq[]
this.best.simplex.Ub == arg0.simplex.Ub
this.best.simplex.Ub[] == arg0.simplex.Ub[]
this.best.simplex.Lb == arg0.simplex.Lb
this.best.simplex.Lb[] == arg0.simplex.Lb[]
this.best.simplex.Un == arg0.simplex.Un
this.best.simplex.Un[] == arg0.simplex.Un[]
this.best.simplex.Ln == arg0.simplex.Ln
this.best.simplex.Ln[] == arg0.simplex.Ln[]
this.best.simplex.U == arg0.simplex.Un
this.best.simplex.U[] == arg0.simplex.Un[]
this.best.simplex.L == arg0.simplex.Ln
this.best.simplex.L[] == arg0.simplex.Ln[]
this.best.simplex.m == arg0.simplex.m
this.best.simplex.n == arg0.simplex.n
this.best.simplex.initialTime == arg0.simplex.initialTime
this.best.simplex.nart == arg0.simplex.nart
this.best.simplex.I == arg0.I
this.best.simplex.I.getClass().getName() == arg0.I.getClass().getName()
this.best.simplex.I[] == arg0.I[]
this.priorityQueue == orig(this.priorityQueue)
this.priorityQueue.N == orig(this.priorityQueue.N)
this.priorityQueue.first == orig(this.priorityQueue.first)
this.priorityQueue.last == orig(this.priorityQueue.last)
this.timeLoadingData == orig(this.timeLoadingData)
this.print == this.e.print
this.print == orig(this.print)
this.print == orig(this.e.print)
this.cuts == orig(this.cuts)
this.e == orig(this.e)
this.e.m.U == arg0.U
this.e.m.U[] == arg0.U[]
this.e.m.L == arg0.L
this.e.m.L[] == arg0.L[]
this.e.m.id == arg0.id
this.e.m.id.toString == orig(this.e.m.id.toString)
this.e.m.A == arg0.A
this.e.m.A.getClass().getName() == arg0.A.getClass().getName()
this.e.m.A[] == arg0.A[]
this.e.m.c == arg0.c
this.e.m.c[] == arg0.c[]
this.e.m.b == arg0.b
this.e.m.b[] == arg0.b[]
this.e.m.debugMode == orig(this.e.m.debugMode)
this.e.m.x == orig(this.e.m.x)
this.e.m.feasible == orig(this.e.m.feasible)
this.e.m.fo == arg0.fo
this.e.m.type == orig(this.e.m.type)
this.e.m.I == arg0.I
this.e.m.I.getClass().getName() == arg0.I.getClass().getName()
this.e.m.I[] == arg0.I[]
this.e.m.integer == orig(this.e.m.integer)
this.e.m.constraints == arg0.constraints
this.e.m.constraints[] == orig(this.e.m.constraints[])
this.e.m.variables == arg0.variables
this.e.m.variables[] == orig(this.e.m.variables[])
this.e.m.ofle == arg0.ofle
this.e.m.epsilon == arg0.epsilon
this.e.m.simplex == arg0.simplex
this.e.bestSolution == orig(this.epsilon)
this.e.bestSolution == orig(this.e.bestSolution)
this.nodesExplored == orig(this.nodesExplored)
this.printSimplex == arg0.simplex.printSolution
this.printSimplex == arg0.print
this.printSimplex == orig(this.best.simplex.printSolution)
this.printSimplex == orig(this.best.print)
this.printSimplex == orig(this.e.m.print)
this.printSimplex == orig(this.printSimplex)
this.printSimplex == orig(arg0.simplex.printSolution)
this.printSimplex == orig(arg0.print)
this.debugmode == orig(this.e.debugMode)
this.debugmode == orig(this.debugmode)
arg0.U == orig(this.best.U)
arg0.U == orig(this.e.m.U)
arg0.U == orig(arg0.U)
arg0.L == orig(this.best.L)
arg0.L == orig(this.e.m.L)
arg0.L == orig(arg0.L)
arg0.L[] == orig(this.best.L[])
arg0.L[] == orig(this.e.m.L[])
arg0.L[] == orig(arg0.L[])
arg0.id == orig(this.best.id)
arg0.id == orig(this.e.m.id)
arg0.id == orig(arg0.id)
arg0.id.toString == orig(arg0.id.toString)
arg0.A == arg0.simplex.A
arg0.A == orig(this.best.A)
arg0.A == orig(this.best.simplex.A)
arg0.A == orig(this.e.m.A)
arg0.A == orig(arg0.A)
arg0.A == orig(arg0.simplex.A)
arg0.A.getClass().getName() == arg0.simplex.B.getClass().getName()
arg0.A.getClass().getName() == arg0.simplex.N.getClass().getName()
arg0.A.getClass().getName() == arg0.simplex.A.getClass().getName()
arg0.A.getClass().getName() == orig(this.best.A.getClass().getName())
arg0.A.getClass().getName() == orig(this.best.simplex.B.getClass().getName())
arg0.A.getClass().getName() == orig(this.best.simplex.N.getClass().getName())
arg0.A.getClass().getName() == orig(this.best.simplex.A.getClass().getName())
arg0.A.getClass().getName() == orig(this.e.m.A.getClass().getName())
arg0.A.getClass().getName() == orig(arg0.A.getClass().getName())
arg0.A.getClass().getName() == orig(arg0.simplex.B.getClass().getName())
arg0.A.getClass().getName() == orig(arg0.simplex.N.getClass().getName())
arg0.A.getClass().getName() == orig(arg0.simplex.A.getClass().getName())
arg0.A[] == arg0.simplex.A[]
arg0.A[] == orig(this.best.A[])
arg0.A[] == orig(this.best.simplex.A[])
arg0.A[] == orig(this.e.m.A[])
arg0.A[] == orig(arg0.A[])
arg0.A[] == orig(arg0.simplex.A[])
arg0.c == orig(this.best.c)
arg0.c == orig(this.e.m.c)
arg0.c == orig(arg0.c)
arg0.c[] == orig(this.best.c[])
arg0.c[] == orig(this.e.m.c[])
arg0.c[] == orig(arg0.c[])
arg0.b == arg0.simplex.b
arg0.b == orig(this.best.b)
arg0.b == orig(this.best.simplex.b)
arg0.b == orig(this.e.m.b)
arg0.b == orig(arg0.b)
arg0.b == orig(arg0.simplex.b)
arg0.b[] == arg0.simplex.b[]
arg0.b[] == orig(this.best.b[])
arg0.b[] == orig(this.best.simplex.b[])
arg0.b[] == orig(this.e.m.b[])
arg0.b[] == orig(arg0.b[])
arg0.b[] == orig(arg0.simplex.b[])
arg0.debugMode == orig(arg0.debugMode)
arg0.x == orig(arg0.x)
arg0.feasible == orig(arg0.feasible)
arg0.fo == orig(this.best.fo)
arg0.fo == orig(this.e.m.fo)
arg0.fo == orig(arg0.fo)
arg0.type == orig(arg0.type)
arg0.I == arg0.simplex.I
arg0.I == orig(this.best.I)
arg0.I == orig(this.best.simplex.I)
arg0.I == orig(this.e.m.I)
arg0.I == orig(arg0.I)
arg0.I == orig(arg0.simplex.I)
arg0.I.getClass().getName() == arg0.simplex.In.getClass().getName()
arg0.I.getClass().getName() == arg0.simplex.Ib.getClass().getName()
arg0.I.getClass().getName() == arg0.simplex.I.getClass().getName()
arg0.I.getClass().getName() == orig(this.best.I.getClass().getName())
arg0.I.getClass().getName() == orig(this.best.simplex.In.getClass().getName())
arg0.I.getClass().getName() == orig(this.best.simplex.Ib.getClass().getName())
arg0.I.getClass().getName() == orig(this.best.simplex.I.getClass().getName())
arg0.I.getClass().getName() == orig(this.e.m.I.getClass().getName())
arg0.I.getClass().getName() == orig(arg0.I.getClass().getName())
arg0.I.getClass().getName() == orig(arg0.simplex.In.getClass().getName())
arg0.I.getClass().getName() == orig(arg0.simplex.Ib.getClass().getName())
arg0.I.getClass().getName() == orig(arg0.simplex.I.getClass().getName())
arg0.I[] == arg0.simplex.I[]
arg0.I[] == orig(this.best.I[])
arg0.I[] == orig(this.best.simplex.I[])
arg0.I[] == orig(this.e.m.I[])
arg0.I[] == orig(arg0.I[])
arg0.I[] == orig(arg0.simplex.I[])
arg0.integer == orig(arg0.integer)
arg0.constraints == orig(this.best.constraints)
arg0.constraints == orig(this.e.m.constraints)
arg0.constraints == orig(arg0.constraints)
arg0.constraints[] == orig(arg0.constraints[])
arg0.variables == orig(this.best.variables)
arg0.variables == orig(this.e.m.variables)
arg0.variables == orig(arg0.variables)
arg0.variables[] == orig(arg0.variables[])
arg0.ofle == orig(this.best.ofle)
arg0.ofle == orig(this.e.m.ofle)
arg0.ofle == orig(arg0.ofle)
arg0.ofle.coeffs == orig(this.best.ofle.coeffs)
arg0.ofle.coeffs == orig(arg0.ofle.coeffs)
arg0.ofle.coeffs[] == orig(arg0.ofle.coeffs[])
arg0.ofle.varNames == orig(this.best.ofle.varNames)
arg0.ofle.varNames == orig(arg0.ofle.varNames)
arg0.ofle.varNames[] == orig(arg0.ofle.varNames[])
arg0.epsilon == orig(this.best.epsilon)
arg0.epsilon == orig(this.e.m.epsilon)
arg0.epsilon == orig(arg0.epsilon)
arg0.simplex == orig(this.best.simplex)
arg0.simplex == orig(this.e.m.simplex)
arg0.simplex == orig(arg0.simplex)
arg0.simplex.B == orig(this.best.simplex.B)
arg0.simplex.B == orig(arg0.simplex.B)
arg0.simplex.B[] == orig(this.best.simplex.B[])
arg0.simplex.B[] == orig(arg0.simplex.B[])
arg0.simplex.N == orig(this.best.simplex.N)
arg0.simplex.N == orig(arg0.simplex.N)
arg0.simplex.N[] == orig(this.best.simplex.N[])
arg0.simplex.N[] == orig(arg0.simplex.N[])
arg0.simplex.xb == orig(this.best.simplex.xb)
arg0.simplex.xb == orig(arg0.simplex.xb)
arg0.simplex.xb[] == orig(this.best.simplex.xb[])
arg0.simplex.xb[] == orig(arg0.simplex.xb[])
arg0.simplex.xn == orig(this.best.simplex.xn)
arg0.simplex.xn == orig(arg0.simplex.xn)
arg0.simplex.xn[] == orig(this.best.simplex.xn[])
arg0.simplex.xn[] == orig(arg0.simplex.xn[])
arg0.simplex.cb == orig(this.best.simplex.cb)
arg0.simplex.cb == orig(arg0.simplex.cb)
arg0.simplex.cb[] == orig(this.best.simplex.cb[])
arg0.simplex.cb[] == orig(arg0.simplex.cb[])
arg0.simplex.cn == orig(this.best.simplex.cn)
arg0.simplex.cn == orig(arg0.simplex.cn)
arg0.simplex.cn[] == orig(this.best.simplex.cn[])
arg0.simplex.cn[] == orig(arg0.simplex.cn[])
arg0.simplex.In == orig(this.best.simplex.In)
arg0.simplex.In == orig(arg0.simplex.In)
arg0.simplex.In[] == orig(this.best.simplex.In[])
arg0.simplex.In[] == orig(arg0.simplex.In[])
arg0.simplex.Ib == orig(this.best.simplex.Ib)
arg0.simplex.Ib == orig(arg0.simplex.Ib)
arg0.simplex.Ib[] == orig(this.best.simplex.Ib[])
arg0.simplex.Ib[] == orig(arg0.simplex.Ib[])
arg0.simplex.c == orig(this.best.simplex.c)
arg0.simplex.c == orig(arg0.simplex.c)
arg0.simplex.c[] == orig(this.best.simplex.c[])
arg0.simplex.c[] == orig(arg0.simplex.c[])
arg0.simplex.status == orig(this.best.simplex.status)
arg0.simplex.status == orig(arg0.simplex.status)
arg0.simplex.dual == orig(this.best.simplex.dual)
arg0.simplex.dual == orig(arg0.simplex.dual)
arg0.simplex.dual[] == orig(this.best.simplex.dual[])
arg0.simplex.dual[] == orig(arg0.simplex.dual[])
arg0.simplex.rq == orig(this.best.simplex.rq)
arg0.simplex.rq == orig(arg0.simplex.rq)
arg0.simplex.rq[] == orig(this.best.simplex.rq[])
arg0.simplex.rq[] == orig(arg0.simplex.rq[])
arg0.simplex.Ub == orig(this.best.simplex.Ub)
arg0.simplex.Ub == orig(arg0.simplex.Ub)
arg0.simplex.Ub[] == orig(this.best.simplex.Ub[])
arg0.simplex.Ub[] == orig(arg0.simplex.Ub[])
arg0.simplex.Lb == orig(this.best.simplex.Lb)
arg0.simplex.Lb == orig(arg0.simplex.Lb)
arg0.simplex.Lb[] == orig(this.best.simplex.Lb[])
arg0.simplex.Lb[] == orig(arg0.simplex.Lb[])
arg0.simplex.Un == arg0.simplex.U
arg0.simplex.Un == orig(this.best.simplex.Un)
arg0.simplex.Un == orig(this.best.simplex.U)
arg0.simplex.Un == orig(arg0.simplex.Un)
arg0.simplex.Un == orig(arg0.simplex.U)
arg0.simplex.Un[] == arg0.simplex.U[]
arg0.simplex.Un[] == orig(this.best.simplex.Un[])
arg0.simplex.Un[] == orig(this.best.simplex.U[])
arg0.simplex.Un[] == orig(arg0.simplex.Un[])
arg0.simplex.Un[] == orig(arg0.simplex.U[])
arg0.simplex.Ln == arg0.simplex.L
arg0.simplex.Ln == orig(this.best.simplex.Ln)
arg0.simplex.Ln == orig(this.best.simplex.L)
arg0.simplex.Ln == orig(arg0.simplex.Ln)
arg0.simplex.Ln == orig(arg0.simplex.L)
arg0.simplex.Ln[] == arg0.simplex.L[]
arg0.simplex.Ln[] == orig(this.best.simplex.Ln[])
arg0.simplex.Ln[] == orig(this.best.simplex.L[])
arg0.simplex.Ln[] == orig(arg0.simplex.Ln[])
arg0.simplex.Ln[] == orig(arg0.simplex.L[])
arg0.simplex.m == orig(this.best.simplex.m)
arg0.simplex.m == orig(arg0.simplex.m)
arg0.simplex.m == size(this.best.A[])
arg0.simplex.m == size(this.best.b[])
arg0.simplex.m == size(this.best.simplex.B[])
arg0.simplex.m == size(this.best.simplex.N[])
arg0.simplex.m == size(this.best.simplex.xb[])
arg0.simplex.m == size(this.best.simplex.xn[])-1
arg0.simplex.m == size(this.best.simplex.cb[])
arg0.simplex.m == size(this.best.simplex.cn[])-1
arg0.simplex.m == size(this.best.simplex.b[])
arg0.simplex.m == size(this.best.simplex.In[])-1
arg0.simplex.m == size(this.best.simplex.Ib[])
arg0.simplex.m == size(this.best.simplex.A[])
arg0.simplex.m == size(this.best.simplex.dual[])
arg0.simplex.m == size(this.best.simplex.rq[])-1
arg0.simplex.m == size(this.best.simplex.Ub[])
arg0.simplex.m == size(this.best.simplex.Lb[])
arg0.simplex.m == size(this.best.simplex.Un[])-1
arg0.simplex.m == size(this.best.simplex.Ln[])-1
arg0.simplex.m == size(this.best.simplex.U[])-1
arg0.simplex.m == size(this.best.simplex.L[])-1
arg0.simplex.m == size(this.e.m.A[])
arg0.simplex.m == size(this.e.m.b[])
arg0.simplex.m == size(arg0.A[])
arg0.simplex.m == size(arg0.b[])
arg0.simplex.m == size(arg0.simplex.B[])
arg0.simplex.m == size(arg0.simplex.N[])
arg0.simplex.m == size(arg0.simplex.xb[])
arg0.simplex.m == size(arg0.simplex.xn[])-1
arg0.simplex.m == size(arg0.simplex.cb[])
arg0.simplex.m == size(arg0.simplex.cn[])-1
arg0.simplex.m == size(arg0.simplex.b[])
arg0.simplex.m == size(arg0.simplex.In[])-1
arg0.simplex.m == size(arg0.simplex.Ib[])
arg0.simplex.m == size(arg0.simplex.A[])
arg0.simplex.m == size(arg0.simplex.dual[])
arg0.simplex.m == size(arg0.simplex.rq[])-1
arg0.simplex.m == size(arg0.simplex.Ub[])
arg0.simplex.m == size(arg0.simplex.Lb[])
arg0.simplex.m == size(arg0.simplex.Un[])-1
arg0.simplex.m == size(arg0.simplex.Ln[])-1
arg0.simplex.m == size(arg0.simplex.U[])-1
arg0.simplex.m == size(arg0.simplex.L[])-1
arg0.simplex.m == orig(size(this.best.A[]))
arg0.simplex.m == orig(size(this.best.b[]))
arg0.simplex.m == orig(size(this.best.simplex.B[]))
arg0.simplex.m == orig(size(this.best.simplex.N[]))
arg0.simplex.m == orig(size(this.best.simplex.xb[]))
arg0.simplex.m == orig(size(this.best.simplex.xn[]))-1
arg0.simplex.m == orig(size(this.best.simplex.cb[]))
arg0.simplex.m == orig(size(this.best.simplex.cn[]))-1
arg0.simplex.m == orig(size(this.best.simplex.b[]))
arg0.simplex.m == orig(size(this.best.simplex.In[]))-1
arg0.simplex.m == orig(size(this.best.simplex.Ib[]))
arg0.simplex.m == orig(size(this.best.simplex.A[]))
arg0.simplex.m == orig(size(this.best.simplex.dual[]))
arg0.simplex.m == orig(size(this.best.simplex.rq[]))-1
arg0.simplex.m == orig(size(this.best.simplex.Ub[]))
arg0.simplex.m == orig(size(this.best.simplex.Lb[]))
arg0.simplex.m == orig(size(this.best.simplex.Un[]))-1
arg0.simplex.m == orig(size(this.best.simplex.Ln[]))-1
arg0.simplex.m == orig(size(this.best.simplex.U[]))-1
arg0.simplex.m == orig(size(this.best.simplex.L[]))-1
arg0.simplex.m == orig(size(this.e.m.A[]))
arg0.simplex.m == orig(size(this.e.m.b[]))
arg0.simplex.m == orig(size(arg0.A[]))
arg0.simplex.m == orig(size(arg0.b[]))
arg0.simplex.m == orig(size(arg0.simplex.B[]))
arg0.simplex.m == orig(size(arg0.simplex.N[]))
arg0.simplex.m == orig(size(arg0.simplex.xb[]))
arg0.simplex.m == orig(size(arg0.simplex.xn[]))-1
arg0.simplex.m == orig(size(arg0.simplex.cb[]))
arg0.simplex.m == orig(size(arg0.simplex.cn[]))-1
arg0.simplex.m == orig(size(arg0.simplex.b[]))
arg0.simplex.m == orig(size(arg0.simplex.In[]))-1
arg0.simplex.m == orig(size(arg0.simplex.Ib[]))
arg0.simplex.m == orig(size(arg0.simplex.A[]))
arg0.simplex.m == orig(size(arg0.simplex.dual[]))
arg0.simplex.m == orig(size(arg0.simplex.rq[]))-1
arg0.simplex.m == orig(size(arg0.simplex.Ub[]))
arg0.simplex.m == orig(size(arg0.simplex.Lb[]))
arg0.simplex.m == orig(size(arg0.simplex.Un[]))-1
arg0.simplex.m == orig(size(arg0.simplex.Ln[]))-1
arg0.simplex.m == orig(size(arg0.simplex.U[]))-1
arg0.simplex.m == orig(size(arg0.simplex.L[]))-1
arg0.simplex.n == orig(this.best.simplex.n)
arg0.simplex.n == orig(arg0.simplex.n)
arg0.simplex.n == size(this.best.U[])
arg0.simplex.n == size(this.best.L[])
arg0.simplex.n == size(this.best.c[])
arg0.simplex.n == size(this.best.I[])
arg0.simplex.n == size(this.best.simplex.c[])
arg0.simplex.n == size(this.best.simplex.I[])
arg0.simplex.n == size(this.e.m.U[])
arg0.simplex.n == size(this.e.m.L[])
arg0.simplex.n == size(this.e.m.c[])
arg0.simplex.n == size(this.e.m.I[])
arg0.simplex.n == size(arg0.U[])
arg0.simplex.n == size(arg0.L[])
arg0.simplex.n == size(arg0.c[])
arg0.simplex.n == size(arg0.I[])
arg0.simplex.n == size(arg0.simplex.c[])
arg0.simplex.n == size(arg0.simplex.I[])
arg0.simplex.n == orig(size(this.best.U[]))
arg0.simplex.n == orig(size(this.best.L[]))
arg0.simplex.n == orig(size(this.best.c[]))
arg0.simplex.n == orig(size(this.best.I[]))
arg0.simplex.n == orig(size(this.best.simplex.c[]))
arg0.simplex.n == orig(size(this.best.simplex.I[]))
arg0.simplex.n == orig(size(this.e.m.U[]))
arg0.simplex.n == orig(size(this.e.m.L[]))
arg0.simplex.n == orig(size(this.e.m.c[]))
arg0.simplex.n == orig(size(this.e.m.I[]))
arg0.simplex.n == orig(size(arg0.U[]))
arg0.simplex.n == orig(size(arg0.L[]))
arg0.simplex.n == orig(size(arg0.c[]))
arg0.simplex.n == orig(size(arg0.I[]))
arg0.simplex.n == orig(size(arg0.simplex.c[]))
arg0.simplex.n == orig(size(arg0.simplex.I[]))
arg0.simplex.initialTime == orig(this.best.simplex.initialTime)
arg0.simplex.initialTime == orig(arg0.simplex.initialTime)
arg0.simplex.nart == orig(this.best.simplex.nart)
arg0.simplex.nart == orig(arg0.simplex.nart)
orig(this.e.m.U[]) == orig(arg0.U[])
size(this.best.simplex.cn[]) == size(arg0.simplex.xn[])
size(this.best.simplex.In[]) == size(arg0.simplex.xn[])
size(this.best.simplex.rq[]) == size(arg0.simplex.xn[])
size(this.best.simplex.Un[]) == size(arg0.simplex.xn[])
size(this.best.simplex.Ln[]) == size(arg0.simplex.xn[])
size(this.best.simplex.U[]) == size(arg0.simplex.xn[])
size(this.best.simplex.L[]) == size(arg0.simplex.xn[])
size(arg0.simplex.xn[]) == size(arg0.simplex.cn[])
size(arg0.simplex.xn[]) == size(arg0.simplex.In[])
size(arg0.simplex.xn[]) == size(arg0.simplex.rq[])
size(arg0.simplex.xn[]) == size(arg0.simplex.Un[])
size(arg0.simplex.xn[]) == size(arg0.simplex.Ln[])
size(arg0.simplex.xn[]) == size(arg0.simplex.U[])
size(arg0.simplex.xn[]) == size(arg0.simplex.L[])
size(arg0.simplex.xn[]) == orig(size(this.best.simplex.cn[]))
size(arg0.simplex.xn[]) == orig(size(this.best.simplex.In[]))
size(arg0.simplex.xn[]) == orig(size(this.best.simplex.rq[]))
size(arg0.simplex.xn[]) == orig(size(this.best.simplex.Un[]))
size(arg0.simplex.xn[]) == orig(size(this.best.simplex.Ln[]))
size(arg0.simplex.xn[]) == orig(size(this.best.simplex.U[]))
size(arg0.simplex.xn[]) == orig(size(this.best.simplex.L[]))
size(arg0.simplex.xn[]) == orig(size(arg0.simplex.cn[]))
size(arg0.simplex.xn[]) == orig(size(arg0.simplex.In[]))
size(arg0.simplex.xn[]) == orig(size(arg0.simplex.rq[]))
size(arg0.simplex.xn[]) == orig(size(arg0.simplex.Un[]))
size(arg0.simplex.xn[]) == orig(size(arg0.simplex.Ln[]))
size(arg0.simplex.xn[]) == orig(size(arg0.simplex.U[]))
size(arg0.simplex.xn[]) == orig(size(arg0.simplex.L[]))
this.best has only one value
this.best.id.toString == ""
this.best.simplex.In[].toString == [x2, a0, S_R3, x1]
this.best.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.best.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.priorityQueue has only one value
this.print == true
this.epsilon == 1.0E-5
this.e.bestSolution == 0.0
this.nodesExplored == 1
arg0.U has only one value
arg0.U[] == [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
arg0.L has only one value
arg0.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
arg0.L[] elements one of { 0.0, 1.0, 76.0 }
arg0.id has only one value
arg0.id.toString == ""
arg0.A has only one value
arg0.A.getClass().getName() == double[][].class
arg0.A[] contains no nulls and has only one value, of length 3
arg0.c has only one value
arg0.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
arg0.c[] elements >= 0.0
arg0.b has only one value
arg0.b[] == [7.0, 500.3, 500.4]
arg0.b[] elements one of { 7.0, 500.3, 500.4 }
arg0.debugMode == false
arg0.x == null
arg0.feasible == false
arg0.fo == -2300.4
arg0.type == null
arg0.I has only one value
arg0.I.getClass().getName() == java.lang.String[].class
arg0.I[] contains no nulls and has only one value, of length 6
arg0.I[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
arg0.I[].getClass().getName() elements == java.lang.String.class
arg0.I[].toString == [x1, x2, x3, S_R1, S_R2, S_R3]
arg0.integer == false
arg0.constraints has only one value
arg0.constraints[] contains no nulls and has only one value, of length 3
arg0.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
arg0.constraints[].getClass().getName() elements == model.QBnBconstr.class
arg0.variables has only one value
arg0.variables[] contains no nulls and has only one value, of length 6
arg0.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
arg0.variables[].getClass().getName() elements == model.QBnBVariable.class
arg0.ofle has only one value
arg0.ofle.coeffs has only one value
arg0.ofle.coeffs[] contains no nulls and has only one value, of length 3
arg0.ofle.coeffs[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0.ofle.coeffs[].getClass().getName() elements == java.lang.Double.class
arg0.ofle.varNames has only one value
arg0.ofle.varNames[] contains no nulls and has only one value, of length 3
arg0.ofle.varNames[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0.ofle.varNames[].getClass().getName() elements == java.lang.String.class
arg0.epsilon == 1.0E-6
arg0.simplex has only one value
arg0.simplex.B has only one value
arg0.simplex.B[] contains no nulls and has only one value, of length 3
arg0.simplex.N has only one value
arg0.simplex.N[] contains no nulls and has only one value, of length 3
arg0.simplex.xb has only one value
arg0.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
arg0.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
arg0.simplex.xn has only one value
arg0.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
arg0.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
arg0.simplex.cb has only one value
arg0.simplex.cb[] == [-0.0, -0.0, -4.0]
arg0.simplex.cb[] elements one of { -4.0, -0.0 }
arg0.simplex.cn has only one value
arg0.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
arg0.simplex.In has only one value
arg0.simplex.In[] contains no nulls and has only one value, of length 4
arg0.simplex.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
arg0.simplex.In[].getClass().getName() elements == java.lang.String.class
arg0.simplex.In[].toString == [x2, a0, S_R3, x1]
arg0.simplex.Ib has only one value
arg0.simplex.Ib[] contains no nulls and has only one value, of length 3
arg0.simplex.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0.simplex.Ib[].getClass().getName() elements == java.lang.String.class
arg0.simplex.Ib[].toString == [S_R1, S_R2, x3]
arg0.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
arg0.simplex.c has only one value
arg0.simplex.c[] == [-7.0, -8.0, -4.0, -0.0, -0.0, -0.0]
arg0.simplex.status == 0
arg0.simplex.dual has only one value
arg0.simplex.dual[] == [0.0, 0.0, -1.0]
arg0.simplex.dual[] elements one of { -1.0, 0.0 }
arg0.simplex.rq has only one value
arg0.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
arg0.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
arg0.simplex.Ub has only one value
arg0.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
arg0.simplex.Ub[] elements == 1.7976931348623157E308
arg0.simplex.Lb has only one value
arg0.simplex.Lb[] == [0.0, 0.0, 0.0]
arg0.simplex.Lb[] elements == 0.0
arg0.simplex.Un has only one value
arg0.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
arg0.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
arg0.simplex.Ln has only one value
arg0.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
arg0.simplex.Ln[] elements one of { 0.0, 1.0, 76.0 }
arg0.simplex.n == 6
arg0.simplex.initialTime == 1.743919623013E12
arg0.simplex.nart == 1
arg0.simplex.I[].toString == [x1, x2, x3, S_R1, S_R2, S_R3]
return has only one value
return.getClass().getName() == model.Model[].class
return[] contains no nulls and has only one value, of length 2
return[].U contains no nulls and has only one value, of length 2
return[].L contains no nulls and has only one value, of length 2
return[].id contains only nulls and has only one value, of length 2
return[].id elements == null
return[].id.toString == [null, null]
return[].id.toString elements == null
return[].A contains no nulls and has only one value, of length 2
return[].A.getClass().getName() == [double[][], double[][]]
return[].A.getClass().getName() elements == double[][].class
return[].c contains no nulls and has only one value, of length 2
return[].b contains no nulls and has only one value, of length 2
return[].debugMode == [0, 0]
return[].debugMode elements == false
return[].x contains only nulls and has only one value, of length 2
return[].x elements == null
return[].feasible == [0, 0]
return[].feasible elements == false
return[].fo == [0.0, 0.0]
return[].fo elements == 0.0
return[].type contains only nulls and has only one value, of length 2
return[].type elements == null
return[].type.toString == [null, null]
return[].type.toString elements == null
return[].I contains only nulls and has only one value, of length 2
return[].I elements == null
return[].I.getClass().getName() == [null, null]
return[].I.getClass().getName() elements == null
return[].integer == [0, 0]
return[].integer elements == false
return[].constraints contains no nulls and has only one value, of length 2
return[].variables contains no nulls and has only one value, of length 2
return[].ofle contains only nulls and has only one value, of length 2
return[].ofle elements == null
return[].epsilon == [1.0E-6, 1.0E-6]
return[].epsilon elements == 1.0E-6
return[].simplex contains only nulls and has only one value, of length 2
return[].simplex elements == null
return[].simplex.B.getClass().getName() == [daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject]
return[].simplex.B.getClass().getName() elements == daikon.chicory.NonsensicalObject.class
return[].simplex.N.getClass().getName() == [daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject]
return[].simplex.N.getClass().getName() elements == daikon.chicory.NonsensicalObject.class
return[].simplex.In.getClass().getName() == [daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject]
return[].simplex.In.getClass().getName() elements == daikon.chicory.NonsensicalObject.class
return[].simplex.Ib.getClass().getName() == [daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject]
return[].simplex.Ib.getClass().getName() elements == daikon.chicory.NonsensicalObject.class
return[].simplex.A.getClass().getName() == [daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject]
return[].simplex.A.getClass().getName() elements == daikon.chicory.NonsensicalObject.class
return[].simplex.I.getClass().getName() == [daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject]
return[].simplex.I.getClass().getName() elements == daikon.chicory.NonsensicalObject.class
return[].print == [0, 0]
return[].print elements == false
orig(arg0.U[]) == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
orig(arg0.U[]) elements one of { 100.0, 200.0, 1.7976931348623157E308 }
size(arg0.constraints[]) == 3
size(arg0.variables[]) == 6
size(arg0.ofle.coeffs[]) == 3
size(arg0.ofle.varNames[]) == 3
size(arg0.simplex.xn[]) == 4
size(return[]) == 2
arg0.A[arg0.simplex.m-1] has only one value
arg0.A[arg0.simplex.nart] has only one value
arg0.A[arg0.simplex.nart-1] has only one value
arg0.I[arg0.simplex.m] has only one value
arg0.I[arg0.simplex.m-1] has only one value
arg0.I[arg0.simplex.n-1] has only one value
arg0.I[arg0.simplex.nart] has only one value
arg0.I[arg0.simplex.nart-1] has only one value
arg0.simplex.B[arg0.simplex.m-1] has only one value
arg0.simplex.B[arg0.simplex.nart] has only one value
arg0.simplex.B[arg0.simplex.nart-1] has only one value
arg0.simplex.N[arg0.simplex.m-1] has only one value
arg0.simplex.N[arg0.simplex.nart] has only one value
arg0.simplex.N[arg0.simplex.nart-1] has only one value
arg0.simplex.In[arg0.simplex.m] has only one value
arg0.simplex.In[arg0.simplex.m-1] has only one value
arg0.simplex.In[arg0.simplex.nart] has only one value
arg0.simplex.In[arg0.simplex.nart-1] has only one value
arg0.simplex.Ib[arg0.simplex.m-1] has only one value
arg0.simplex.Ib[arg0.simplex.nart] has only one value
arg0.simplex.Ib[arg0.simplex.nart-1] has only one value
this.e.bestSolution in arg0.U[]
this.e.bestSolution in arg0.L[]
this.e.bestSolution in arg0.c[]
this.e.bestSolution in arg0.simplex.xn[]
this.e.bestSolution in arg0.simplex.cb[]
this.e.bestSolution in arg0.simplex.cn[]
this.e.bestSolution in arg0.simplex.c[]
this.e.bestSolution in arg0.simplex.dual[]
arg0.simplex.Lb[] elements == this.e.bestSolution
this.e.bestSolution in arg0.simplex.Lb[]
this.e.bestSolution in arg0.simplex.Ln[]
return[].print elements == this.printSimplex
this.printSimplex in return[].print
arg0.A.getClass().getName() in return[].A.getClass().getName()
arg0.c[] + arg0.simplex.c[] == 0
arg0.simplex.Ib[arg0.simplex.nart] in arg0.I[]
arg0.constraints in return[].constraints
arg0.variables in return[].variables
===========================================================================
algorithms.BnB.maximizes():::ENTER
this.best == this.e.m
this.best.id == this.e.m.id
this.best.fo == this.epsilon
this.best.I == this.e.m.I
this.best.ofle == this.e.m.ofle
this.best.simplex == this.e.m.simplex
this.print == this.e.print
this.epsilon == this.e.m.fo
this.epsilon == this.e.bestSolution
this.best has only one value
this.best.U[] == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.best.U[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.best.id == null
this.best.I == null
this.best.ofle has only one value
this.best.simplex == null
this.priorityQueue == null
this.print == true
this.epsilon == 0.0
this.nodesExplored == 0
this.epsilon in this.best.L[]
this.epsilon in this.best.c[]
===========================================================================
algorithms.BnB.maximizes():::EXIT
this.type == orig(this.type)
this.best.U == orig(this.best.U)
this.best.U == orig(this.e.m.U)
this.best.L == orig(this.best.L)
this.best.L == orig(this.e.m.L)
this.best.L[] == orig(this.best.L[])
this.best.L[] == orig(this.e.m.L[])
this.best.A == orig(this.best.A)
this.best.A == orig(this.e.m.A)
this.best.A.getClass().getName() == this.best.simplex.N.getClass().getName()
this.best.A.getClass().getName() == this.best.simplex.A.getClass().getName()
this.best.A.getClass().getName() == orig(this.best.A.getClass().getName())
this.best.A.getClass().getName() == orig(this.e.m.A.getClass().getName())
this.best.A[] == this.best.simplex.A[]
this.best.A[] == orig(this.best.A[])
this.best.A[] == orig(this.e.m.A[])
this.best.c == orig(this.best.c)
this.best.c == orig(this.e.m.c)
this.best.c[] == orig(this.best.c[])
this.best.c[] == orig(this.e.m.c[])
this.best.b == orig(this.best.b)
this.best.b == orig(this.e.m.b)
this.best.b[] == this.best.simplex.b[]
this.best.b[] == orig(this.best.b[])
this.best.b[] == orig(this.e.m.b[])
this.best.debugMode == orig(this.best.debugMode)
this.best.x == orig(this.best.x)
this.best.feasible == orig(this.best.feasible)
this.best.type == orig(this.best.type)
this.best.integer == orig(this.best.integer)
this.best.constraints == orig(this.best.constraints)
this.best.constraints == orig(this.e.m.constraints)
this.best.constraints[] == orig(this.best.constraints[])
this.best.variables == orig(this.best.variables)
this.best.variables == orig(this.e.m.variables)
this.best.variables[] == orig(this.best.variables[])
this.best.epsilon == orig(this.best.epsilon)
this.best.epsilon == orig(this.e.m.epsilon)
this.best.simplex.cb[] == this.best.simplex.dual[]
this.best.simplex.cb[] == this.best.simplex.Lb[]
this.best.simplex.cn[] == this.best.simplex.rq[]
this.best.simplex.m == size(this.best.b[])
this.best.simplex.m == size(this.e.m.A[])
this.best.simplex.m == size(this.e.m.b[])
this.best.simplex.m == orig(size(this.best.A[]))
this.best.simplex.m == orig(size(this.best.b[]))
this.best.simplex.m == orig(size(this.e.m.A[]))
this.best.simplex.m == orig(size(this.e.m.b[]))
this.best.simplex.n == size(this.best.L[])
this.best.simplex.n == size(this.best.c[])
this.best.simplex.n == size(this.e.m.U[])
this.best.simplex.n == size(this.e.m.L[])
this.best.simplex.n == size(this.e.m.c[])
this.best.simplex.n == orig(size(this.best.U[]))
this.best.simplex.n == orig(size(this.best.L[]))
this.best.simplex.n == orig(size(this.best.c[]))
this.best.simplex.n == orig(size(this.e.m.U[]))
this.best.simplex.n == orig(size(this.e.m.L[]))
this.best.simplex.n == orig(size(this.e.m.c[]))
this.timeLoadingData == orig(this.timeLoadingData)
this.print == this.e.print
this.print == orig(this.print)
this.print == orig(this.e.print)
this.cuts == orig(this.cuts)
this.e == orig(this.e)
this.e.m == orig(this.best)
this.e.m == orig(this.e.m)
this.e.m.debugMode == orig(this.e.m.debugMode)
this.e.m.x == orig(this.e.m.x)
this.e.m.feasible == orig(this.e.m.feasible)
this.e.m.type == orig(this.e.m.type)
this.e.m.integer == orig(this.e.m.integer)
this.e.m.constraints[] == orig(this.e.m.constraints[])
this.e.m.variables[] == orig(this.e.m.variables[])
this.e.m.ofle == orig(this.best.ofle)
this.e.m.ofle == orig(this.e.m.ofle)
this.printSimplex == orig(this.best.print)
this.printSimplex == orig(this.e.m.print)
this.printSimplex == orig(this.printSimplex)
this.debugmode == orig(this.e.debugMode)
this.debugmode == orig(this.debugmode)
this.best.I[this.best.simplex.m-1] == this.best.simplex.In[this.best.simplex.m-1]
this.best.I[this.best.simplex.n-1] == this.best.simplex.Ib[this.best.simplex.m-1]
this.best has only one value
this.best.U[] == [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.best.id has only one value
this.best.id.toString == "l"
this.best.fo == -2300.0
this.best.I has only one value
this.best.ofle == null
this.best.simplex has only one value
this.best.simplex.B has only one value
this.best.simplex.B[] contains no nulls and has only one value, of length 3
this.best.simplex.N has only one value
this.best.simplex.N[] contains no nulls and has only one value, of length 3
this.best.simplex.xb has only one value
this.best.simplex.xb[] == [2193.0, 200.3, 0.39999999999997726]
this.best.simplex.xb[] elements one of { 0.39999999999997726, 200.3, 2193.0 }
this.best.simplex.xn has only one value
this.best.simplex.cb has only one value
this.best.simplex.cb[] == [0.0, 0.0, 0.0]
this.best.simplex.cb[] elements == 0.0
this.best.simplex.cn has only one value
this.best.simplex.cn[] == [-8.0, 9.9999999E7, -4.0, -7.0]
this.best.simplex.In has only one value
this.best.simplex.In[] contains no nulls and has only one value, of length 4
this.best.simplex.In[].toString == [x2, a0, x3, x1]
this.best.simplex.Ib has only one value
this.best.simplex.Ib[] contains no nulls and has only one value, of length 3
this.best.simplex.Ib[].toString == [S_R1, S_R2, S_R3]
this.best.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "S_R3" }
this.best.simplex.c has only one value
this.best.simplex.dual has only one value
this.best.simplex.rq has only one value
this.best.simplex.Ub has only one value
this.best.simplex.Lb has only one value
this.best.simplex.Un has only one value
this.best.simplex.Un[] == [200.0, 1.7976931348623157E308, 0.0, 100.0]
this.best.simplex.Ln has only one value
this.priorityQueue has only one value
this.print == true
this.epsilon == 1.0E-5
this.e.m.id has only one value
this.e.m.fo == -2300.4
this.e.m.I has only one value
this.e.m.simplex has only one value
this.e.bestSolution == 2300.0
this.nodesExplored == 3
this.best.simplex.B[this.best.simplex.m-1] has only one value
this.best.simplex.B[this.best.simplex.nart] has only one value
this.best.simplex.B[this.best.simplex.nart-1] has only one value
this.best.simplex.N[this.best.simplex.m-1] has only one value
this.best.simplex.N[this.best.simplex.nart] has only one value
this.best.simplex.N[this.best.simplex.nart-1] has only one value
this.best.simplex.In[this.best.simplex.m] has only one value
this.best.simplex.In[this.best.simplex.nart] has only one value
this.best.simplex.In[this.best.simplex.nart-1] has only one value
this.best.simplex.Ib[this.best.simplex.nart-1] has only one value
orig(this.epsilon) in this.best.U[]
orig(this.epsilon) in this.best.L[]
orig(this.epsilon) in this.best.c[]
orig(this.epsilon) in this.best.simplex.xn[]
orig(this.epsilon) in this.best.simplex.cb[]
this.best.simplex.cb[] elements == orig(this.epsilon)
orig(this.epsilon) in this.best.simplex.c[]
orig(this.epsilon) in this.best.simplex.Un[]
orig(this.epsilon) in this.best.simplex.Ln[]
===========================================================================
algorithms.BnB.print(boolean):::ENTER
this.best == this.e.m
this.best.id == this.e.m.id
this.best.fo == this.epsilon
this.best.I == this.e.m.I
this.best.ofle == this.e.m.ofle
this.best.simplex == this.e.m.simplex
this.epsilon == this.e.m.fo
this.epsilon == this.e.bestSolution
this.e.print == arg0
this.best has only one value
this.best.U[] == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.best.U[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.best.id == null
this.best.I == null
this.best.ofle has only one value
this.best.simplex == null
this.priorityQueue == null
this.print == false
this.epsilon == 0.0
this.nodesExplored == 0
this.epsilon in this.best.L[]
this.epsilon in this.best.c[]
===========================================================================
algorithms.BnB.print(boolean):::EXIT
this.type == orig(this.type)
this.best == this.e.m
this.best == orig(this.best)
this.best == orig(this.e.m)
this.best.U == orig(this.best.U)
this.best.U == orig(this.e.m.U)
this.best.U[] == orig(this.best.U[])
this.best.U[] == orig(this.e.m.U[])
this.best.L == orig(this.best.L)
this.best.L == orig(this.e.m.L)
this.best.L[] == orig(this.best.L[])
this.best.L[] == orig(this.e.m.L[])
this.best.id == this.e.m.id
this.best.id == orig(this.best.id)
this.best.id == orig(this.e.m.id)
this.best.A == orig(this.best.A)
this.best.A == orig(this.e.m.A)
this.best.A.getClass().getName() == orig(this.best.A.getClass().getName())
this.best.A.getClass().getName() == orig(this.e.m.A.getClass().getName())
this.best.A[] == orig(this.best.A[])
this.best.A[] == orig(this.e.m.A[])
this.best.c == orig(this.best.c)
this.best.c == orig(this.e.m.c)
this.best.c[] == orig(this.best.c[])
this.best.c[] == orig(this.e.m.c[])
this.best.b == orig(this.best.b)
this.best.b == orig(this.e.m.b)
this.best.b[] == orig(this.best.b[])
this.best.b[] == orig(this.e.m.b[])
this.best.debugMode == orig(this.best.debugMode)
this.best.x == orig(this.best.x)
this.best.feasible == orig(this.best.feasible)
this.best.fo == this.epsilon
this.best.type == orig(this.best.type)
this.best.I == this.e.m.I
this.best.I == orig(this.best.I)
this.best.I == orig(this.e.m.I)
this.best.integer == orig(this.best.integer)
this.best.constraints == orig(this.best.constraints)
this.best.constraints == orig(this.e.m.constraints)
this.best.constraints[] == orig(this.best.constraints[])
this.best.variables == orig(this.best.variables)
this.best.variables == orig(this.e.m.variables)
this.best.variables[] == orig(this.best.variables[])
this.best.ofle == this.e.m.ofle
this.best.ofle == orig(this.best.ofle)
this.best.ofle == orig(this.e.m.ofle)
this.best.ofle.coeffs == orig(this.best.ofle.coeffs)
this.best.ofle.coeffs[] == orig(this.best.ofle.coeffs[])
this.best.ofle.varNames == orig(this.best.ofle.varNames)
this.best.ofle.varNames[] == orig(this.best.ofle.varNames[])
this.best.epsilon == orig(this.best.epsilon)
this.best.epsilon == orig(this.e.m.epsilon)
this.best.simplex == this.e.m.simplex
this.best.simplex == orig(this.best.simplex)
this.best.simplex == orig(this.e.m.simplex)
this.priorityQueue == orig(this.priorityQueue)
this.timeLoadingData == orig(this.timeLoadingData)
this.print == this.e.print
this.print == orig(this.e.print)
this.print == orig(arg0)
this.epsilon == this.e.m.fo
this.epsilon == this.e.bestSolution
this.epsilon == orig(this.best.fo)
this.epsilon == orig(this.epsilon)
this.epsilon == orig(this.e.m.fo)
this.epsilon == orig(this.e.bestSolution)
this.cuts == orig(this.cuts)
this.e == orig(this.e)
this.e.m.debugMode == orig(this.e.m.debugMode)
this.e.m.x == orig(this.e.m.x)
this.e.m.feasible == orig(this.e.m.feasible)
this.e.m.type == orig(this.e.m.type)
this.e.m.integer == orig(this.e.m.integer)
this.e.m.constraints[] == orig(this.e.m.constraints[])
this.e.m.variables[] == orig(this.e.m.variables[])
this.nodesExplored == orig(this.nodesExplored)
this.debugmode == orig(this.e.debugMode)
this.debugmode == orig(this.debugmode)
this.best has only one value
this.best.U[] == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.best.U[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.best.id == null
this.best.I == null
this.best.ofle has only one value
this.best.simplex == null
this.priorityQueue == null
this.print == true
this.epsilon == 0.0
this.nodesExplored == 0
this.epsilon in this.best.L[]
this.epsilon in this.best.c[]
===========================================================================
algorithms.BnB.setDebugmode(boolean):::ENTER
this.best == this.e.m
this.best.id == this.e.m.id
this.best.fo == this.epsilon
this.best.I == this.e.m.I
this.best.ofle == this.e.m.ofle
this.best.simplex == this.e.m.simplex
this.print == this.e.print
this.epsilon == this.e.m.fo
this.epsilon == this.e.bestSolution
this.debugmode == arg0
this.best has only one value
this.best.U[] == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.best.U[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.best.id == null
this.best.I == null
this.best.ofle has only one value
this.best.simplex == null
this.priorityQueue == null
this.print == true
this.epsilon == 0.0
this.nodesExplored == 0
this.epsilon in this.best.L[]
this.epsilon in this.best.c[]
===========================================================================
algorithms.BnB.setDebugmode(boolean):::EXIT
this.type == orig(this.type)
this.best == this.e.m
this.best == orig(this.best)
this.best == orig(this.e.m)
this.best.U == orig(this.best.U)
this.best.U == orig(this.e.m.U)
this.best.U[] == orig(this.best.U[])
this.best.U[] == orig(this.e.m.U[])
this.best.L == orig(this.best.L)
this.best.L == orig(this.e.m.L)
this.best.L[] == orig(this.best.L[])
this.best.L[] == orig(this.e.m.L[])
this.best.id == this.e.m.id
this.best.id == orig(this.best.id)
this.best.id == orig(this.e.m.id)
this.best.A == orig(this.best.A)
this.best.A == orig(this.e.m.A)
this.best.A.getClass().getName() == orig(this.best.A.getClass().getName())
this.best.A.getClass().getName() == orig(this.e.m.A.getClass().getName())
this.best.A[] == orig(this.best.A[])
this.best.A[] == orig(this.e.m.A[])
this.best.c == orig(this.best.c)
this.best.c == orig(this.e.m.c)
this.best.c[] == orig(this.best.c[])
this.best.c[] == orig(this.e.m.c[])
this.best.b == orig(this.best.b)
this.best.b == orig(this.e.m.b)
this.best.b[] == orig(this.best.b[])
this.best.b[] == orig(this.e.m.b[])
this.best.debugMode == orig(this.best.debugMode)
this.best.x == orig(this.best.x)
this.best.feasible == orig(this.best.feasible)
this.best.fo == this.epsilon
this.best.type == orig(this.best.type)
this.best.I == this.e.m.I
this.best.I == orig(this.best.I)
this.best.I == orig(this.e.m.I)
this.best.integer == orig(this.best.integer)
this.best.constraints == orig(this.best.constraints)
this.best.constraints == orig(this.e.m.constraints)
this.best.constraints[] == orig(this.best.constraints[])
this.best.variables == orig(this.best.variables)
this.best.variables == orig(this.e.m.variables)
this.best.variables[] == orig(this.best.variables[])
this.best.ofle == this.e.m.ofle
this.best.ofle == orig(this.best.ofle)
this.best.ofle == orig(this.e.m.ofle)
this.best.ofle.coeffs == orig(this.best.ofle.coeffs)
this.best.ofle.coeffs[] == orig(this.best.ofle.coeffs[])
this.best.ofle.varNames == orig(this.best.ofle.varNames)
this.best.ofle.varNames[] == orig(this.best.ofle.varNames[])
this.best.epsilon == orig(this.best.epsilon)
this.best.epsilon == orig(this.e.m.epsilon)
this.best.simplex == this.e.m.simplex
this.best.simplex == orig(this.best.simplex)
this.best.simplex == orig(this.e.m.simplex)
this.priorityQueue == orig(this.priorityQueue)
this.timeLoadingData == orig(this.timeLoadingData)
this.print == this.e.print
this.print == orig(this.print)
this.print == orig(this.e.print)
this.epsilon == this.e.m.fo
this.epsilon == this.e.bestSolution
this.epsilon == orig(this.best.fo)
this.epsilon == orig(this.epsilon)
this.epsilon == orig(this.e.m.fo)
this.epsilon == orig(this.e.bestSolution)
this.cuts == orig(this.cuts)
this.e == orig(this.e)
this.e.m.debugMode == orig(this.e.m.debugMode)
this.e.m.x == orig(this.e.m.x)
this.e.m.feasible == orig(this.e.m.feasible)
this.e.m.type == orig(this.e.m.type)
this.e.m.integer == orig(this.e.m.integer)
this.e.m.constraints[] == orig(this.e.m.constraints[])
this.e.m.variables[] == orig(this.e.m.variables[])
this.nodesExplored == orig(this.nodesExplored)
this.debugmode == orig(this.e.debugMode)
this.debugmode == orig(this.debugmode)
this.debugmode == orig(arg0)
this.best has only one value
this.best.U[] == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.best.U[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.best.id == null
this.best.I == null
this.best.ofle has only one value
this.best.simplex == null
this.priorityQueue == null
this.print == true
this.epsilon == 0.0
this.nodesExplored == 0
this.epsilon in this.best.L[]
this.epsilon in this.best.c[]
===========================================================================
algorithms.Queue$Node:::OBJECT
this.item == null
this.next == null
===========================================================================
algorithms.Queue$Node.Node():::EXIT
===========================================================================
algorithms.Queue:::OBJECT
this.first.item.getClass().getName() == this.first.next.item.getClass().getName()
this.first.item.getClass().getName() == this.last.item.getClass().getName()
this.first.next.item == this.last.item
this.first.next.item.getClass().getName() == this.last.item.getClass().getName()
this has only one value
this.N one of { 0, 1, 2 }
this.first.item != null
this.first.item.getClass().getName() == model.Model.class
this.first.next.item has only one value
this.first.next.item.getClass().getName() == model.Model.class
this.first.next.next == null
this.last.item != null
this.last.item.getClass().getName() == model.Model.class
this.last.next == null
===========================================================================
algorithms.Queue.Queue():::EXIT
this.first == this.last
this.N == 0
this.first == null
===========================================================================
algorithms.Queue.dequeue():::ENTER
this.N one of { 1, 2 }
===========================================================================
algorithms.Queue.dequeue():::EXIT
this.first == this.last
this.first == orig(this.first.next)
this.first.item == this.last.item
this.first.item == orig(this.first.next.item)
this.first.item == orig(this.last.item)
this.first.item.getClass().getName() == return.getClass().getName()
this.first.item.getClass().getName() == orig(this.first.next.item.getClass().getName())
this.last.next == orig(this.last.next)
return.getClass().getName() == orig(this.first.item.getClass().getName())
return.getClass().getName() == orig(this.last.item.getClass().getName())
this.N one of { 0, 1 }
this.first.item has only one value
this.first.next == null
return.getClass().getName() == model.Model.class
===========================================================================
algorithms.Queue.enqueue(java.lang.Object):::ENTER
this.first == this.last
this.first.item == this.last.item
this.first.item.getClass().getName() == arg0.getClass().getName()
this.N one of { 0, 1 }
this.first.item has only one value
this.first.next == null
arg0.getClass().getName() == model.Model.class
===========================================================================
algorithms.Queue.enqueue(java.lang.Object):::EXIT
this.first.item == orig(this.first.item)
this.first.item.getClass().getName() == orig(arg0.getClass().getName())
this.first.next.item == orig(arg0)
this.first.next.item.getClass().getName() == orig(this.first.item.getClass().getName())
this.first.next.item.getClass().getName() == orig(this.last.item.getClass().getName())
this.first.next.item.getClass().getName() == orig(arg0.getClass().getName())
this.last.item == orig(arg0)
this.last.item.getClass().getName() == orig(arg0.getClass().getName())
this.last.next == orig(this.last.next)
this.N one of { 1, 2 }
===========================================================================
algorithms.Queue.isEmpty():::ENTER
===========================================================================
algorithms.Queue.isEmpty():::EXIT
this.N == orig(this.N)
this.first == orig(this.first)
this.first.item == orig(this.first.item)
this.first.item.getClass().getName() == orig(this.first.item.getClass().getName())
this.first.next == orig(this.first.next)
this.first.next.item == orig(this.first.next.item)
this.first.next.item.getClass().getName() == orig(this.first.next.item.getClass().getName())
this.first.next.next == orig(this.first.next.next)
this.last == orig(this.last)
this.last.item == orig(this.last.item)
this.last.item.getClass().getName() == orig(this.last.item.getClass().getName())
this.last.next == orig(this.last.next)
(this.N == 0)  <==>  (return == true)
(this.N == 0)  <==>  (this.first == null)
(this.N one of { 1, 2 })  <==>  (return == false)
(this.N one of { 1, 2 })  ==>  (this.first.item.getClass().getName() == model.Model.class)
(this.N one of { 1, 2 })  ==>  (this.first.item.getClass().getName() == this.first.next.item.getClass().getName())
(this.N one of { 1, 2 })  ==>  (this.first.item.getClass().getName() == this.last.item.getClass().getName())
(this.N one of { 1, 2 })  ==>  (this.first.next.item == this.last.item)
(this.N one of { 1, 2 })  ==>  (this.first.next.item has only one value)
(this.N one of { 1, 2 })  ==>  (this.first.next.item.getClass().getName() == model.Model.class)
(this.N one of { 1, 2 })  ==>  (this.first.next.item.getClass().getName() == this.last.item.getClass().getName())
(this.N one of { 1, 2 })  ==>  (this.first.next.next == null)
===========================================================================
algorithms.Queue.isEmpty():::EXIT;condition="return == true"
this.N == 0
this.first == null
return == true
===========================================================================
algorithms.Queue.isEmpty():::EXIT;condition="not(return == true)"
this.first.item.getClass().getName() == orig(this.last.item.getClass().getName())
this.N one of { 1, 2 }
return == false
===========================================================================
algorithms.SimplexAlgorithm:::OBJECT
this.B.getClass().getName() == this.N.getClass().getName()
this.B.getClass().getName() == this.A.getClass().getName()
this.N.getClass().getName() == this.A.getClass().getName()
this.In.getClass().getName() == this.Ib.getClass().getName()
this.In.getClass().getName() == this.I.getClass().getName()
this.m == size(this.N[])
this.m == size(this.xb[])
this.m == size(this.xn[])-1
this.m == size(this.b[])
this.m == size(this.A[])
this.m == size(this.dual[])
this.n == size(this.c[])
this.n == size(this.I[])
size(this.B[]) == size(this.N[])
size(this.B[]) == size(this.xb[])
size(this.B[]) == size(this.xn[])-1
size(this.B[]) == size(this.dual[])
size(this.N[]) == size(this.xb[])
size(this.N[]) == size(this.xn[])-1
size(this.N[]) == size(this.cb[])
size(this.N[]) == size(this.cn[])-1
size(this.N[]) == size(this.Ib[])
size(this.N[]) == size(this.dual[])
size(this.N[]) == size(this.Ub[])
size(this.N[]) == size(this.Lb[])
size(this.N[]) == size(this.U[])-1
size(this.N[]) == size(this.L[])-1
size(this.xb[]) == size(this.cb[])
size(this.xb[]) == size(this.Ib[])
size(this.xb[]) == size(this.dual[])
size(this.xb[]) == size(this.rq[])-1
size(this.xb[]) == size(this.Ub[])
size(this.xb[]) == size(this.Lb[])
size(this.xn[]) == size(this.cn[])
size(this.xn[]) == size(this.rq[])
size(this.xn[]) == size(this.U[])
size(this.xn[]) == size(this.L[])
size(this.xn[])-1 == size(this.cb[])
size(this.xn[])-1 == size(this.Ib[])
size(this.xn[])-1 == size(this.dual[])
size(this.xn[])-1 == size(this.Ub[])
size(this.xn[])-1 == size(this.Lb[])
size(this.cb[]) == size(this.dual[])
size(this.cn[]) == size(this.In[])
size(this.cn[]) == size(this.rq[])
size(this.cn[]) == size(this.Un[])
size(this.cn[]) == size(this.Ln[])
size(this.cn[])-1 == size(this.dual[])
size(this.Ib[]) == size(this.dual[])
size(this.dual[]) == size(this.Ub[])
size(this.dual[]) == size(this.Lb[])
size(this.dual[]) == size(this.U[])-1
size(this.dual[]) == size(this.L[])-1
size(this.rq[]) == size(this.U[])
size(this.rq[]) == size(this.L[])
this.B.getClass().getName() == double[][].class
this.B[] elements != null
this.N.getClass().getName() == double[][].class
this.N[] elements != null
this.xn[] elements >= 0.0
this.cb != null
this.cn != null
this.b != null
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.b[] sorted by <
this.In != null
this.In.getClass().getName() == java.lang.String[].class
this.In[] elements != null
this.In[].getClass().getName() elements == java.lang.String.class
this.In[].getClass().getName() one of { [], [java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.Ib != null
this.Ib[] elements != null
this.Ib[].getClass().getName() elements == java.lang.String.class
this.c != null
this.c[] == [-7.0, -8.0, -4.0, -0.0, -0.0, -0.0]
this.status == 0
this.A != null
this.A.getClass().getName() == double[][].class
this.A[] contains no nulls and has only one value, of length 3
this.A[] elements != null
this.dual[] elements one of { -4.0, -1.0, 0.0 }
this.dual[] one of { [-0.0, -0.0, -4.0], [0.0, 0.0, -1.0], [0.0, 0.0, 0.0] }
this.dual[] sorted by >=
this.Ub != null
this.Ub[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.Lb != null
this.Lb[] elements one of { 0.0, 1.0, 76.0 }
this.Un != null
this.Un[] elements >= 0.0
this.Ln != null
this.Ln[] elements one of { 0.0, 1.0, 76.0 }
this.U != null
this.U[] elements >= 0.0
this.L != null
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.m == 3
this.n == 6
this.initialTime == 1.743919623013E12
this.nart one of { 0, 1 }
this.printSolution == false
this.I != null
this.I[] contains no nulls and has only one value, of length 6
this.I[] elements != null
this.I[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.I[].getClass().getName() elements == java.lang.String.class
this.I[].toString == [x1, x2, x3, S_R1, S_R2, S_R3]
size(this.B[]) one of { 0, 3 }
size(this.B[])-1 != 0
size(this.N[]) == 3
size(this.xn[]) == 4
size(this.cn[]) one of { 0, 4 }
size(this.cn[])-1 != 0
size(this.dual[]) == 3
size(this.rq[]) == 4
size(this.U[]) one of { 4, 5, 6 }
size(this.L[]) one of { 4, 5, 6 }
this.A[this.m-1] has only one value
this.I[this.m] has only one value
this.I[this.m-1] has only one value
this.I[this.n-1] has only one value
this.B.getClass().getName() != this.In.getClass().getName()
this.N.getClass().getName() != this.In.getClass().getName()
this.xb[] > this.dual[] (elementwise)
this.xb[] < this.Ub[] (elementwise)
this.xn[] > this.cn[] (lexically)
this.xn[] >= this.cn[] (lexically)
this.xn[] > this.c[] (lexically)
this.xn[] >= this.c[] (lexically)
this.xn[] > this.dual[] (lexically)
this.xn[] >= this.dual[] (lexically)
this.xn[] < this.Ub[] (lexically)
this.xn[] <= this.Ub[] (lexically)
this.xn[] < this.Un[] (lexically)
this.xn[] <= this.Un[] (elementwise)
this.xn[] < this.U[] (lexically)
this.xn[] <= this.U[] (elementwise)
this.cb[] <= this.dual[] (elementwise)
this.cb[] <= this.Ub[] (lexically)
this.cn[] < this.b[] (lexically)
this.cn[] <= this.b[] (lexically)
this.cn[] < this.dual[] (lexically)
this.cn[] <= this.dual[] (lexically)
this.cn[] <= this.Ub[] (lexically)
this.cn[] <= this.Lb[] (lexically)
this.cn[] <= this.Un[] (lexically)
this.cn[] <= this.Ln[] (lexically)
this.cn[] < this.U[] (lexically)
this.cn[] <= this.U[] (lexically)
this.cn[] < this.L[] (lexically)
this.cn[] <= this.L[] (lexically)
this.b[] > this.dual[] (elementwise)
this.b[] < this.U[] (lexically)
this.b[] <= this.U[] (lexically)
this.In.getClass().getName() != this.A.getClass().getName()
this.c[] < this.U[] (lexically)
this.c[] <= this.U[] (lexically)
this.c[] < this.L[] (lexically)
this.c[] <= this.L[] (lexically)
this.dual[] < this.Ub[] (elementwise)
this.dual[] <= this.Lb[] (elementwise)
this.dual[] < this.Un[] (lexically)
this.dual[] <= this.Un[] (lexically)
this.dual[] < this.Ln[] (lexically)
this.dual[] <= this.Ln[] (lexically)
this.dual[] < this.U[] (lexically)
this.dual[] <= this.U[] (lexically)
this.dual[] < this.L[] (lexically)
this.dual[] <= this.L[] (lexically)
this.rq[] < this.Ub[] (lexically)
this.rq[] <= this.Ub[] (lexically)
this.rq[] < this.Un[] (lexically)
this.rq[] <= this.Un[] (lexically)
this.rq[] < this.U[] (lexically)
this.rq[] <= this.U[] (lexically)
this.Ub[] >= this.Lb[] (lexically)
this.Ub[] >= this.Ln[] (lexically)
this.Lb[] < this.U[] (lexically)
this.Lb[] <= this.U[] (lexically)
this.Un[] >= this.Ln[] (lexically)
this.Un[] <= this.U[] (lexically)
this.Ln[] < this.U[] (lexically)
this.Ln[] <= this.U[] (lexically)
this.Ln[] <= this.L[] (lexically)
this.U[] > this.L[] (lexically)
this.U[] >= this.L[] (lexically)
this.m >= size(this.B[])
this.m >= size(this.cb[])
this.m != size(this.cn[])
this.m >= size(this.cn[])-1
this.m >= size(this.Ib[])
this.m >= size(this.Ub[])
this.m >= size(this.Lb[])
this.m <= size(this.U[])-1
this.m <= size(this.L[])-1
this.n >= size(this.U[])
this.n >= size(this.L[])
this.nart != size(this.B[])-1
this.nart < size(this.N[])-1
this.nart < size(this.xb[])-1
this.nart < size(this.xn[])-1
this.nart != size(this.cn[])-1
this.nart < size(this.b[])-1
this.nart < size(this.c[])-1
this.nart < size(this.dual[])-1
this.nart < size(this.U[])-1
this.nart < size(this.L[])-1
size(this.B[]) >= size(this.cb[])
size(this.B[]) >= size(this.cn[])-1
size(this.B[]) != size(this.b[])-1
size(this.B[]) >= size(this.Ib[])-1
size(this.B[]) < size(this.c[])-1
size(this.B[]) >= size(this.Ub[])
size(this.B[]) >= size(this.Lb[])
size(this.B[]) <= size(this.U[])-1
size(this.B[]) <= size(this.L[])-1
size(this.B[])-1 >= size(this.cb[])-1
size(this.B[])-1 != size(this.cn[])
size(this.B[])-1 <= size(this.b[])-1
size(this.B[])-1 >= size(this.Ub[])-1
size(this.B[])-1 >= size(this.Lb[])-1
size(this.cb[]) % size(this.cn[])-1 == 0
size(this.cb[]) >= size(this.cn[])-1
size(this.cb[]) <= size(this.Ib[])
size(this.cb[]) >= size(this.Ib[])-1
size(this.cb[]) < size(this.c[])-1
size(this.cb[]) <= size(this.Ub[])
size(this.cb[]) >= size(this.Ub[])-1
size(this.cb[]) <= size(this.Lb[])
size(this.cb[]) >= size(this.Lb[])-1
size(this.cb[]) <= size(this.U[])-1
size(this.cb[]) <= size(this.L[])-1
size(this.cb[])-1 <= size(this.b[])-1
size(this.cb[])-1 <= size(this.Ib[])-1
size(this.cb[])-1 <= size(this.Ub[])-1
size(this.cb[])-1 <= size(this.Lb[])-1
size(this.cn[]) != size(this.b[])-1
size(this.cn[]) < size(this.c[])-1
size(this.cn[]) % size(this.U[]) == 0
size(this.cn[]) <= size(this.U[])
size(this.cn[]) != size(this.U[])-1
size(this.cn[]) % size(this.L[]) == 0
size(this.cn[]) <= size(this.L[])
size(this.cn[]) != size(this.L[])-1
size(this.cn[])-1 != size(this.b[])-1
size(this.Ib[]) % size(this.cn[])-1 == 0
size(this.cn[])-1 <= size(this.Ib[])
size(this.Ub[]) % size(this.cn[])-1 == 0
size(this.cn[])-1 <= size(this.Ub[])
size(this.Lb[]) % size(this.cn[])-1 == 0
size(this.cn[])-1 <= size(this.Lb[])
size(this.U[])-1 % size(this.cn[])-1 == 0
size(this.cn[])-1 <= size(this.U[])-1
size(this.L[])-1 % size(this.cn[])-1 == 0
size(this.cn[])-1 <= size(this.L[])-1
size(this.b[])-1 >= size(this.Ib[])-1
size(this.b[])-1 >= size(this.Ub[])-1
size(this.b[])-1 >= size(this.Lb[])-1
size(this.Ib[]) < size(this.c[])-1
size(this.Ib[]) >= size(this.Ub[])
size(this.Ib[]) >= size(this.Lb[])
size(this.Ib[]) <= size(this.U[])-1
size(this.Ib[]) <= size(this.L[])-1
size(this.Ib[])-1 <= size(this.Ub[])
size(this.Ib[])-1 >= size(this.Ub[])-1
size(this.Ib[])-1 <= size(this.Lb[])
size(this.Ib[])-1 >= size(this.Lb[])-1
size(this.c[])-1 > size(this.Ub[])
size(this.c[])-1 > size(this.Lb[])
size(this.c[])-1 >= size(this.U[])-1
size(this.c[])-1 >= size(this.L[])-1
size(this.Ub[]) >= size(this.Lb[])
size(this.Ub[]) <= size(this.U[])-1
size(this.Ub[]) <= size(this.L[])-1
size(this.Ub[])-1 <= size(this.Lb[])
size(this.Ub[])-1 >= size(this.Lb[])-1
size(this.Lb[]) <= size(this.U[])-1
size(this.Lb[]) <= size(this.L[])-1
size(this.U[]) <= size(this.L[])
size(this.U[]) >= size(this.L[])-1
size(this.U[])-1 <= size(this.L[])-1
===========================================================================
algorithms.SimplexAlgorithm.Multiply(double[], double[][]):::ENTER
this.B.getClass().getName() == arg1.getClass().getName()
this.cb == arg0
this.cb[] == arg0[]
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.Ln[] == this.L[]
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == size(arg0[])
this.m == size(arg1[])
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
this.B != null
this.N != null
this.xb != null
this.xn != null
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.rq != null
this.nart == 1
arg1 != null
arg1[] elements != null
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xn[] >= this.Ln[] (elementwise)
this.cb[] < this.Ub[] (elementwise)
this.cn[] < this.Ub[] (lexically)
this.cn[] < this.Lb[] (lexically)
this.cn[] < this.Un[] (elementwise)
this.cn[] < this.Ln[] (lexically)
this.b[] < this.Un[] (lexically)
this.b[] <= this.Un[] (lexically)
this.c[] < this.Lb[] (lexically)
this.c[] <= this.Lb[] (lexically)
this.c[] < this.Un[] (lexically)
this.c[] <= this.Un[] (lexically)
this.c[] < this.Ln[] (lexically)
this.c[] <= this.Ln[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.Ln[] (lexically)
this.Lb[] < this.Un[] (lexically)
this.Lb[] <= this.Un[] (lexically)
this.Un[] > this.Ln[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.Multiply(double[], double[][]):::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == orig(this.B.getClass().getName())
this.B.getClass().getName() == orig(this.N.getClass().getName())
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B.getClass().getName() == orig(arg1.getClass().getName())
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.N[] == orig(this.N[])
this.xb == orig(this.xb)
this.xb[] == orig(this.xb[])
this.xn == orig(this.xn)
this.xn[] == orig(this.xn[])
this.cb == orig(this.cb)
this.cb == orig(arg0)
this.cb[] == arg0[]
this.cn == orig(this.cn)
this.cn[] == orig(this.cn[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A[] == orig(this.A[])
this.dual == orig(this.dual)
this.rq == orig(this.rq)
this.rq[] == orig(this.rq[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == this.U
this.Un == orig(this.Un)
this.Un == orig(this.U)
this.Un[] == this.U[]
this.Un[] == orig(this.Un[])
this.Un[] == orig(this.U[])
this.Ln == this.L
this.Ln == orig(this.Ln)
this.Ln == orig(this.L)
this.Ln[] == this.L[]
this.Ln[] == orig(this.Ln[])
this.Ln[] == orig(this.L[])
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == orig(size(this.B[]))
this.m == orig(size(this.N[]))
this.m == orig(size(this.xb[]))
this.m == orig(size(this.xn[]))-1
this.m == orig(size(this.cb[]))
this.m == orig(size(this.cn[]))-1
this.m == orig(size(this.b[]))
this.m == orig(size(this.In[]))-1
this.m == orig(size(this.Ib[]))
this.m == orig(size(this.A[]))
this.m == orig(size(this.rq[]))-1
this.m == orig(size(this.Ub[]))
this.m == orig(size(this.Lb[]))
this.m == orig(size(this.Un[]))-1
this.m == orig(size(this.Ln[]))-1
this.m == orig(size(this.U[]))-1
this.m == orig(size(this.L[]))-1
this.m == orig(size(arg0[]))
this.m == orig(size(arg1[]))
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
arg0[] == orig(this.cb[])
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
size(this.xn[]) == orig(size(this.cn[]))
size(this.xn[]) == orig(size(this.In[]))
size(this.xn[]) == orig(size(this.rq[]))
size(this.xn[]) == orig(size(this.Un[]))
size(this.xn[]) == orig(size(this.Ln[]))
size(this.xn[]) == orig(size(this.U[]))
size(this.xn[]) == orig(size(this.L[]))
this.B != null
this.N != null
this.xb != null
this.xn != null
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.rq != null
this.nart == 1
arg1[] elements != null
return != null
size(return[]) one of { 3, 4 }
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xn[] >= this.Ln[] (elementwise)
this.cn[] < this.Ub[] (lexically)
this.cn[] < this.Lb[] (lexically)
this.cn[] < this.Un[] (elementwise)
this.cn[] < this.Ln[] (lexically)
this.b[] < this.Un[] (lexically)
this.b[] <= this.Un[] (lexically)
this.c[] < this.Lb[] (lexically)
this.c[] <= this.Lb[] (lexically)
this.c[] < this.Un[] (lexically)
this.c[] <= this.Un[] (lexically)
this.c[] < this.Ln[] (lexically)
this.c[] <= this.Ln[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.Ln[] (lexically)
this.Ub[] > arg0[] (elementwise)
this.Ub[] > return[] (lexically)
this.Ub[] >= return[] (lexically)
this.Lb[] < this.Un[] (lexically)
this.Lb[] <= this.Un[] (lexically)
this.Un[] > this.Ln[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.m <= size(return[])
this.m >= size(return[])-1
this.nart < size(return[])-1
this.Ib[this.nart] in this.I[]
size(this.xn[]) >= size(return[])
size(this.c[])-1 > size(return[])
size(arg0[])-1 <= size(return[])-1
===========================================================================
algorithms.SimplexAlgorithm.Multiply(double[][], double[]):::ENTER
this.B.getClass().getName() == arg0.getClass().getName()
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.Ln[] == this.L[]
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == size(arg0[])
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
this.B != null
this.N != null
this.xn != null
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.nart == 1
arg0 != null
arg0[] elements != null
arg1 != null
size(arg1[]) one of { 3, 4 }
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xn[] >= this.Ln[] (elementwise)
this.cb[] < this.Ub[] (elementwise)
this.cn[] < this.Ub[] (lexically)
this.cn[] < this.Lb[] (lexically)
this.cn[] < this.Un[] (elementwise)
this.cn[] < this.Ln[] (lexically)
this.cn[] < arg1[] (lexically)
this.cn[] <= arg1[] (lexically)
this.b[] < this.Un[] (lexically)
this.b[] <= this.Un[] (lexically)
this.c[] < this.Lb[] (lexically)
this.c[] <= this.Lb[] (lexically)
this.c[] < this.Un[] (lexically)
this.c[] <= this.Un[] (lexically)
this.c[] < this.Ln[] (lexically)
this.c[] <= this.Ln[] (lexically)
this.c[] < arg1[] (lexically)
this.c[] <= arg1[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.Ln[] (lexically)
this.Ub[] > arg1[] (lexically)
this.Ub[] >= arg1[] (lexically)
this.Lb[] < this.Un[] (lexically)
this.Lb[] <= this.Un[] (lexically)
this.Un[] > this.Ln[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.Un[] > arg1[] (lexically)
this.Un[] >= arg1[] (lexically)
this.m <= size(arg1[])
this.m >= size(arg1[])-1
this.nart < size(arg1[])-1
this.Ib[this.nart] in this.I[]
size(this.B[])-1 <= size(arg1[])-1
size(this.xb[]) <= size(arg1[])
size(this.xb[]) >= size(arg1[])-1
size(this.xb[])-1 <= size(arg1[])-1
size(this.xn[]) >= size(arg1[])
size(this.c[])-1 > size(arg1[])
size(this.rq[]) >= size(arg1[])
===========================================================================
algorithms.SimplexAlgorithm.Multiply(double[][], double[]):::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == orig(this.B.getClass().getName())
this.B.getClass().getName() == orig(this.N.getClass().getName())
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B.getClass().getName() == orig(arg0.getClass().getName())
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.N[] == orig(this.N[])
this.xb == orig(this.xb)
this.xb[] == orig(this.xb[])
this.xn == orig(this.xn)
this.xn[] == orig(this.xn[])
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == orig(this.cn[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A[] == orig(this.A[])
this.dual == orig(this.dual)
this.rq == orig(this.rq)
this.rq[] == orig(this.rq[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == this.U
this.Un == orig(this.Un)
this.Un == orig(this.U)
this.Un[] == this.U[]
this.Un[] == orig(this.Un[])
this.Un[] == orig(this.U[])
this.Ln == this.L
this.Ln == orig(this.Ln)
this.Ln == orig(this.L)
this.Ln[] == this.L[]
this.Ln[] == orig(this.Ln[])
this.Ln[] == orig(this.L[])
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == size(return[])
this.m == orig(size(this.B[]))
this.m == orig(size(this.N[]))
this.m == orig(size(this.xn[]))-1
this.m == orig(size(this.cb[]))
this.m == orig(size(this.cn[]))-1
this.m == orig(size(this.b[]))
this.m == orig(size(this.In[]))-1
this.m == orig(size(this.Ib[]))
this.m == orig(size(this.A[]))
this.m == orig(size(this.Ub[]))
this.m == orig(size(this.Lb[]))
this.m == orig(size(this.Un[]))-1
this.m == orig(size(this.Ln[]))-1
this.m == orig(size(this.U[]))-1
this.m == orig(size(this.L[]))-1
this.m == orig(size(arg0[]))
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
size(this.xb[]) == orig(size(this.rq[]))-1
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
size(this.xn[]) == orig(size(this.cn[]))
size(this.xn[]) == orig(size(this.In[]))
size(this.xn[]) == orig(size(this.Un[]))
size(this.xn[]) == orig(size(this.Ln[]))
size(this.xn[]) == orig(size(this.U[]))
size(this.xn[]) == orig(size(this.L[]))
this.B != null
this.N != null
this.xn != null
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.nart == 1
arg0[] elements != null
return != null
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xn[] >= this.Ln[] (elementwise)
this.cb[] < this.Ub[] (elementwise)
this.cn[] < this.Ub[] (lexically)
this.cn[] < this.Lb[] (lexically)
this.cn[] < this.Un[] (elementwise)
this.cn[] < this.Ln[] (lexically)
this.cn[] < arg1[] (lexically)
this.cn[] <= arg1[] (lexically)
this.b[] < this.Un[] (lexically)
this.b[] <= this.Un[] (lexically)
this.c[] < this.Lb[] (lexically)
this.c[] <= this.Lb[] (lexically)
this.c[] < this.Un[] (lexically)
this.c[] <= this.Un[] (lexically)
this.c[] < this.Ln[] (lexically)
this.c[] <= this.Ln[] (lexically)
this.c[] < arg1[] (lexically)
this.c[] <= arg1[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.Ln[] (lexically)
this.Ub[] > arg1[] (lexically)
this.Ub[] >= arg1[] (lexically)
this.Lb[] < this.Un[] (lexically)
this.Lb[] <= this.Un[] (lexically)
this.Un[] > this.Ln[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.Un[] > arg1[] (lexically)
this.Un[] >= arg1[] (lexically)
this.m >= size(arg1[])-1
this.m <= orig(size(arg1[]))
this.nart < size(arg1[])-1
this.Ib[this.nart] in this.I[]
size(this.xb[]) >= size(arg1[])-1
size(this.xb[]) <= orig(size(arg1[]))
size(this.xb[])-1 <= size(arg1[])-1
size(this.xn[]) >= orig(size(arg1[]))
size(this.c[])-1 > orig(size(arg1[]))
size(this.rq[]) >= orig(size(arg1[]))
size(arg0[])-1 <= size(arg1[])-1
===========================================================================
algorithms.SimplexAlgorithm.Multiply(double[][], double[][]):::ENTER
this.B.getClass().getName() == arg0.getClass().getName()
this.B.getClass().getName() == arg1.getClass().getName()
this.N == arg1
this.N[] == arg1[]
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.Ln[] == this.L[]
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == size(arg0[])
this.m == size(arg1[])
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
this.B != null
this.N != null
this.xn != null
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.nart == 1
arg0 != null
arg0[] elements != null
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xn[] >= this.Ln[] (elementwise)
this.cb[] < this.Ub[] (elementwise)
this.cn[] < this.Ub[] (lexically)
this.cn[] < this.Lb[] (lexically)
this.cn[] < this.Un[] (elementwise)
this.cn[] < this.Ln[] (lexically)
this.b[] < this.Un[] (lexically)
this.b[] <= this.Un[] (lexically)
this.c[] < this.Lb[] (lexically)
this.c[] <= this.Lb[] (lexically)
this.c[] < this.Un[] (lexically)
this.c[] <= this.Un[] (lexically)
this.c[] < this.Ln[] (lexically)
this.c[] <= this.Ln[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.Ln[] (lexically)
this.Lb[] < this.Un[] (lexically)
this.Lb[] <= this.Un[] (lexically)
this.Un[] > this.Ln[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.Multiply(double[][], double[][]):::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == return.getClass().getName()
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.N == orig(arg1)
this.N.getClass().getName() == return.getClass().getName()
this.N[] == arg1[]
this.xb == orig(this.xb)
this.xb[] == orig(this.xb[])
this.xn == orig(this.xn)
this.xn[] == orig(this.xn[])
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == orig(this.cn[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A.getClass().getName() == return.getClass().getName()
this.A[] == orig(this.A[])
this.dual == orig(this.dual)
this.rq == orig(this.rq)
this.rq[] == orig(this.rq[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == this.U
this.Un == orig(this.Un)
this.Un == orig(this.U)
this.Un[] == this.U[]
this.Un[] == orig(this.Un[])
this.Un[] == orig(this.U[])
this.Ln == this.L
this.Ln == orig(this.Ln)
this.Ln == orig(this.L)
this.Ln[] == this.L[]
this.Ln[] == orig(this.Ln[])
this.Ln[] == orig(this.L[])
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == size(return[])
this.m == orig(size(this.B[]))
this.m == orig(size(this.N[]))
this.m == orig(size(this.xn[]))-1
this.m == orig(size(this.cb[]))
this.m == orig(size(this.cn[]))-1
this.m == orig(size(this.b[]))
this.m == orig(size(this.In[]))-1
this.m == orig(size(this.Ib[]))
this.m == orig(size(this.A[]))
this.m == orig(size(this.Ub[]))
this.m == orig(size(this.Lb[]))
this.m == orig(size(this.Un[]))-1
this.m == orig(size(this.Ln[]))-1
this.m == orig(size(this.U[]))-1
this.m == orig(size(this.L[]))-1
this.m == orig(size(arg0[]))
this.m == orig(size(arg1[]))
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
arg0[] == orig(arg0[])
arg1[] == orig(this.N[])
arg1[] == orig(arg1[])
return.getClass().getName() == orig(this.B.getClass().getName())
return.getClass().getName() == orig(this.N.getClass().getName())
return.getClass().getName() == orig(this.A.getClass().getName())
return.getClass().getName() == orig(arg0.getClass().getName())
return.getClass().getName() == orig(arg1.getClass().getName())
size(this.xb[]) == orig(size(this.rq[]))-1
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
size(this.xn[]) == orig(size(this.cn[]))
size(this.xn[]) == orig(size(this.In[]))
size(this.xn[]) == orig(size(this.Un[]))
size(this.xn[]) == orig(size(this.Ln[]))
size(this.xn[]) == orig(size(this.U[]))
size(this.xn[]) == orig(size(this.L[]))
this.B != null
this.N != null
this.xn != null
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.nart == 1
arg0[] elements != null
arg1[] elements != null
return != null
return.getClass().getName() == double[][].class
return[] elements != null
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xn[] >= this.Ln[] (elementwise)
this.cb[] < this.Ub[] (elementwise)
this.cn[] < this.Ub[] (lexically)
this.cn[] < this.Lb[] (lexically)
this.cn[] < this.Un[] (elementwise)
this.cn[] < this.Ln[] (lexically)
this.b[] < this.Un[] (lexically)
this.b[] <= this.Un[] (lexically)
this.In.getClass().getName() != return.getClass().getName()
this.c[] < this.Lb[] (lexically)
this.c[] <= this.Lb[] (lexically)
this.c[] < this.Un[] (lexically)
this.c[] <= this.Un[] (lexically)
this.c[] < this.Ln[] (lexically)
this.c[] <= this.Ln[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.Ln[] (lexically)
this.Lb[] < this.Un[] (lexically)
this.Lb[] <= this.Un[] (lexically)
this.Un[] > this.Ln[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.SimplexAlgorithm(double[][], double[], double[], java.lang.String[], double[], double[], boolean):::ENTER
size(arg0[]) == size(arg1[])
size(arg2[]) == size(arg3[])
size(arg2[]) == size(arg4[])
size(arg2[]) == size(arg5[])
arg0.getClass().getName() == double[][].class
arg0[] contains no nulls and has only one value, of length 3
arg1[] == [7.0, 500.3, 500.4]
arg1[] elements one of { 7.0, 500.3, 500.4 }
arg2[] == [-7.0, -8.0, -4.0, -0.0, -0.0, -0.0]
arg3.getClass().getName() == java.lang.String[].class
arg3[] contains no nulls and has only one value, of length 6
arg3[].toString == [x1, x2, x3, S_R1, S_R2, S_R3]
arg4[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
arg5[] elements one of { 0.0, 1.0, 76.0 }
arg5[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
arg6 == false
size(arg0[]) == 3
size(arg2[]) == 6
===========================================================================
algorithms.SimplexAlgorithm.SimplexAlgorithm(double[][], double[], double[], java.lang.String[], double[], double[], boolean):::EXIT
this.B.getClass().getName() == orig(arg0.getClass().getName())
this.b == orig(arg1)
this.b[] == arg1[]
this.In.getClass().getName() == orig(arg3.getClass().getName())
this.c == orig(arg2)
this.c[] == arg2[]
this.A == orig(arg0)
this.A[] == arg0[]
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.Ln[] == this.L[]
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == orig(size(arg0[]))
this.m == orig(size(arg1[]))
this.n == orig(size(arg2[]))
this.n == orig(size(arg3[]))
this.n == orig(size(arg4[]))
this.n == orig(size(arg5[]))
this.printSolution == orig(arg6)
this.I == orig(arg3)
this.I[] == arg3[]
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg2[] == orig(arg2[])
arg3[] == orig(arg3[])
arg4[] == orig(arg4[])
arg5[] == orig(arg5[])
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
this.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] }
this.cb[] elements one of { -8.0, -4.0, -0.0 }
this.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] }
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] }
this.Ub[] elements one of { 200.0, 1.7976931348623157E308 }
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements one of { 0.0, 76.0 }
this.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] }
this.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] }
this.nart == 1
arg0[] contains no nulls and has only one value, of length 3
arg1[] == [7.0, 500.3, 500.4]
arg1[] elements one of { 7.0, 500.3, 500.4 }
arg2[] == [-7.0, -8.0, -4.0, -0.0, -0.0, -0.0]
arg3[] contains no nulls and has only one value, of length 6
arg3[].toString == [x1, x2, x3, S_R1, S_R2, S_R3]
arg4[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
arg5[] elements one of { 0.0, 1.0, 76.0 }
arg5[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
this.Ib[this.nart] has only one value
arg0[this.m-1] has only one value
arg3[this.m] has only one value
arg3[this.m-1] has only one value
arg3[this.n-1] has only one value
arg0[this.nart] has only one value
arg0[this.nart-1] has only one value
arg3[this.nart] has only one value
arg3[this.nart-1] has only one value
this.Ib[this.nart] in arg3[]
===========================================================================
algorithms.SimplexAlgorithm.addColumnToMatrix(double[], double[][]):::ENTER
this.B == arg1
this.B.getClass().getName() == arg1.getClass().getName()
this.B[] == arg1[]
this.xb == this.xn
this.xb == this.dual
this.xb == this.rq
this.cn[] == this.Un[]
this.cn[] == this.Ln[]
this.m == size(this.B[])
this.m == size(arg0[])
this.m == size(arg1[])
size(this.cb[]) == size(this.Ib[])-1
size(this.cb[]) == size(this.Ub[])
size(this.cb[]) == size(this.Lb[])
size(this.U[]) == size(this.L[])
this.N == null
this.xb == null
this.cb[] elements one of { -0.0, 9.9999999E7 }
this.cb[] one of { [9.9999999E7], [9.9999999E7, -0.0] }
this.cn[] == []
this.In[] == []
this.In[].getClass().getName() == []
this.In[].toString == []
this.Ib[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String] }
this.Ib[].toString elements one of { "S_R2", "S_R3", "a0" }
this.Ib[].toString one of { [a0, S_R2], [a0, S_R2, S_R3] }
this.Ub[] elements == 1.7976931348623157E308
this.Ub[] one of { [1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements == 0.0
this.Lb[] one of { [0.0], [0.0, 0.0] }
this.nart == 1
arg0[] elements one of { 0.0, 1.0 }
arg0[] one of { [0.0, 0.0, 1.0], [0.0, 1.0, 0.0] }
size(this.Ib[]) one of { 2, 3 }
size(this.U[]) one of { 5, 6 }
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.addColumnToMatrix(double[], double[][]):::EXIT
this.B == orig(this.B)
this.B == orig(arg1)
this.B.getClass().getName() == return.getClass().getName()
this.B[] == arg1[]
this.N == orig(this.N)
this.xb == this.xn
this.xb == this.dual
this.xb == this.rq
this.xb == orig(this.xb)
this.xb == orig(this.xn)
this.xb == orig(this.dual)
this.xb == orig(this.rq)
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == this.Un[]
this.cn[] == this.Ln[]
this.cn[] == orig(this.cn[])
this.cn[] == orig(this.Un[])
this.cn[] == orig(this.Ln[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A.getClass().getName() == return.getClass().getName()
this.A[] == orig(this.A[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == orig(this.Un)
this.Ln == orig(this.Ln)
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(return[])
this.m == orig(size(this.B[]))
this.m == orig(size(this.b[]))
this.m == orig(size(this.A[]))
this.m == orig(size(arg0[]))
this.m == orig(size(arg1[]))
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
arg0[] == orig(arg0[])
arg1[] == orig(this.B[])
arg1[] == orig(arg1[])
return.getClass().getName() == orig(this.B.getClass().getName())
return.getClass().getName() == orig(this.A.getClass().getName())
return.getClass().getName() == orig(arg1.getClass().getName())
size(this.cb[]) == size(this.Ib[])-1
size(this.cb[]) == size(this.Ub[])
size(this.cb[]) == size(this.Lb[])
size(this.cb[]) == orig(size(this.Ib[]))-1
size(this.cb[]) == orig(size(this.Ub[]))
size(this.cb[]) == orig(size(this.Lb[]))
size(this.cn[]) == orig(size(this.In[]))
size(this.U[]) == size(this.L[])
size(this.U[]) == orig(size(this.L[]))
this.N == null
this.xb == null
this.cb[] elements one of { -0.0, 9.9999999E7 }
this.cb[] one of { [9.9999999E7], [9.9999999E7, -0.0] }
this.cn[] == []
this.In[] == []
this.In[].getClass().getName() == []
this.In[].toString == []
this.Ib[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String] }
this.Ib[].toString elements one of { "S_R2", "S_R3", "a0" }
this.Ib[].toString one of { [a0, S_R2], [a0, S_R2, S_R3] }
this.Ub[] elements == 1.7976931348623157E308
this.Ub[] one of { [1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements == 0.0
this.Lb[] one of { [0.0], [0.0, 0.0] }
this.nart == 1
arg0[] elements one of { 0.0, 1.0 }
arg0[] one of { [0.0, 0.0, 1.0], [0.0, 1.0, 0.0] }
return.getClass().getName() == double[][].class
size(this.Ib[]) one of { 2, 3 }
size(this.U[]) one of { 5, 6 }
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.addToVector(double, double[]):::ENTER
this.xb == this.xn
this.xb == this.dual
this.xb == this.rq
this.cn[] == this.Un[]
this.cn[] == this.Ln[]
size(this.cb[]) == size(this.Ib[])-1
size(this.cb[]) == size(arg1[])
size(this.U[]) == size(this.L[])
this.B != null
this.N == null
this.xb == null
this.cb[] elements one of { -0.0, 9.9999999E7 }
this.cb[] one of { [], [9.9999999E7], [9.9999999E7, -0.0] }
this.cb[] sorted by >
this.cn[] == []
this.In[] == []
this.In[].getClass().getName() == []
this.In[].toString == []
this.Ib[].toString elements one of { "S_R2", "S_R3", "a0" }
this.Ub[] elements == 1.7976931348623157E308
this.Lb[] elements == 0.0
this.nart == 1
arg0 one of { 0.0, 9.9999999E7, 1.7976931348623157E308 }
arg1 != null
arg1[] elements one of { 0.0, 9.9999999E7, 1.7976931348623157E308 }
arg1[] sorted by >=
size(this.Ib[]) one of { 1, 2, 3 }
size(this.U[]) one of { 5, 6 }
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.cb[] >= this.Lb[] (lexically)
this.cn[] <= arg1[] (lexically)
this.c[] elements <= arg0
this.Ub[] >= arg1[] (lexically)
this.Lb[] < this.L[] (lexically)
this.Lb[] <= this.L[] (lexically)
this.Lb[] <= arg1[] (lexically)
this.U[] >= this.L[] (elementwise)
this.m < size(this.U[])-1
this.nart != size(this.B[])
this.nart >= size(this.cb[])-1
this.nart <= size(this.Ib[])
arg1[] elements >= arg0
size(this.B[]) >= size(this.cn[])
size(this.B[]) < size(this.U[])-1
size(this.B[])-1 >= size(this.cn[])-1
size(this.B[])-1 <= size(this.Ib[])
size(this.cb[]) >= size(this.cn[])
size(this.cb[]) <= size(this.b[])-1
size(this.cb[])-1 >= size(this.cn[])-1
size(this.cn[]) <= size(this.Ub[])
size(this.cn[]) <= size(this.Lb[])
size(this.cn[]) < size(this.U[])-1
size(this.cn[])-1 <= size(this.Ub[])-1
size(this.cn[])-1 <= size(this.Lb[])-1
size(this.Ib[]) < size(this.U[])-1
size(this.c[])-1 <= size(this.U[])
size(this.Ub[]) < size(this.U[])-1
size(this.Lb[]) < size(this.U[])-1
===========================================================================
algorithms.SimplexAlgorithm.addToVector(double, double[]):::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == orig(this.B.getClass().getName())
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.xb == this.xn
this.xb == this.dual
this.xb == this.rq
this.xb == orig(this.xb)
this.xb == orig(this.xn)
this.xb == orig(this.dual)
this.xb == orig(this.rq)
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == this.Un[]
this.cn[] == this.Ln[]
this.cn[] == orig(this.cn[])
this.cn[] == orig(this.Un[])
this.cn[] == orig(this.Ln[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A[] == orig(this.A[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == orig(this.Un)
this.Ln == orig(this.Ln)
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.m == orig(this.m)
this.m == orig(size(this.b[]))
this.m == orig(size(this.A[]))
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
arg1[] == orig(arg1[])
size(this.cb[]) == size(this.Ib[])-1
size(this.cb[]) == size(return[])-1
size(this.cb[]) == orig(size(this.Ib[]))-1
size(this.cb[]) == orig(size(arg1[]))
size(this.cn[]) == orig(size(this.In[]))
size(this.Ib[]) == size(return[])
size(this.U[]) == size(this.L[])
size(this.U[]) == orig(size(this.L[]))
size(return[]) == orig(size(this.Ib[]))
this.B != null
this.N == null
this.xb == null
this.cb[] elements one of { -0.0, 9.9999999E7 }
this.cb[] one of { [], [9.9999999E7], [9.9999999E7, -0.0] }
this.cb[] sorted by >
this.cn[] == []
this.In[] == []
this.In[].getClass().getName() == []
this.In[].toString == []
this.Ib[].toString elements one of { "S_R2", "S_R3", "a0" }
this.Ub[] elements == 1.7976931348623157E308
this.Lb[] elements == 0.0
this.nart == 1
arg1[] elements one of { 0.0, 9.9999999E7, 1.7976931348623157E308 }
arg1[] sorted by >=
return != null
return[] elements one of { 0.0, 9.9999999E7, 1.7976931348623157E308 }
return[] sorted by >=
size(this.U[]) one of { 5, 6 }
size(return[]) one of { 1, 2, 3 }
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.cb[] >= this.Lb[] (lexically)
this.cn[] <= arg1[] (lexically)
this.cn[] < return[] (lexically)
this.cn[] <= return[] (lexically)
this.c[] < return[] (lexically)
this.c[] <= return[] (lexically)
this.c[] elements <= orig(arg0)
this.Ub[] >= arg1[] (lexically)
this.Lb[] < this.L[] (lexically)
this.Lb[] <= this.L[] (lexically)
this.Lb[] <= arg1[] (lexically)
this.Lb[] < return[] (lexically)
this.Lb[] <= return[] (lexically)
this.U[] >= this.L[] (elementwise)
this.m < size(this.U[])-1
this.m >= size(return[])
this.nart != size(this.B[])
this.nart >= size(arg1[])-1
this.nart <= size(return[])
arg1[] < return[] (lexically)
arg1[] <= return[] (lexically)
arg1[] elements >= orig(arg0)
orig(arg0) in return[]
return[] elements >= orig(arg0)
size(this.B[]) >= size(this.cn[])
size(this.B[]) < size(this.U[])-1
size(this.B[])-1 >= size(this.cn[])-1
size(this.B[])-1 >= size(arg1[])-1
size(this.B[])-1 <= size(return[])
size(this.cb[]) >= size(this.cn[])
size(this.cb[]) <= size(this.b[])-1
size(this.cn[]) <= size(this.Ub[])
size(this.cn[]) <= size(this.Lb[])
size(this.cn[]) < size(this.U[])-1
size(this.cn[])-1 <= size(this.Ub[])-1
size(this.cn[])-1 <= size(this.Lb[])-1
size(this.cn[])-1 <= size(arg1[])-1
size(this.c[])-1 <= size(this.U[])
size(this.c[])-1 > size(return[])
size(this.Ub[]) < size(this.U[])-1
size(this.Ub[]) <= size(return[])
size(this.Ub[])-1 >= size(arg1[])-1
size(this.Lb[]) < size(this.U[])-1
size(this.Lb[]) <= size(return[])
size(this.Lb[])-1 >= size(arg1[])-1
size(this.U[])-1 > size(return[])
===========================================================================
algorithms.SimplexAlgorithm.addToVector(java.lang.String, java.lang.String[]):::ENTER
this.xb == this.xn
this.xb == this.dual
this.xb == this.rq
this.cn[] == this.Un[]
this.cn[] == this.Ln[]
this.In.getClass().getName() == arg1.getClass().getName()
this.Ib == arg1
this.Ib[] == arg1[]
size(this.cb[]) == size(this.Ib[])
size(this.cb[]) == size(this.Ub[])
size(this.cb[]) == size(this.Lb[])
size(this.cb[]) == size(arg1[])
size(this.U[]) == size(this.L[])
this.N == null
this.xb == null
this.cb[] elements one of { -0.0, 9.9999999E7 }
this.cb[] one of { [], [9.9999999E7], [9.9999999E7, -0.0] }
this.cb[] sorted by >
this.cn[] == []
this.In[] == []
this.In[].getClass().getName() == []
this.In[].toString == []
this.Ib[].toString elements one of { "S_R2", "a0" }
this.Ub[] elements == 1.7976931348623157E308
this.Ub[] one of { [], [1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements == 0.0
this.Lb[] one of { [], [0.0], [0.0, 0.0] }
this.nart == 1
arg0.toString one of { "S_R2", "S_R3", "a0" }
arg1[].toString elements one of { "S_R2", "a0" }
size(this.cb[]) one of { 0, 1, 2 }
size(this.U[]) one of { 5, 6 }
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.cb[] >= this.Lb[] (lexically)
this.Lb[] < this.L[] (lexically)
this.Lb[] <= this.L[] (lexically)
this.U[] >= this.L[] (elementwise)
this.m < size(this.U[])-1
this.nart != size(this.B[])
this.nart >= size(this.cb[])-1
size(this.B[]) >= size(this.cn[])
size(this.B[]) < size(this.U[])-1
size(this.B[])-1 >= size(this.cn[])-1
size(this.cb[]) >= size(this.cn[])
size(this.cb[]) <= size(this.b[])-1
size(this.cb[]) < size(this.U[])-1
size(this.cb[])-1 >= size(this.cn[])-1
size(this.cn[]) < size(this.U[])-1
size(this.c[])-1 <= size(this.U[])
===========================================================================
algorithms.SimplexAlgorithm.addToVector(java.lang.String, java.lang.String[]):::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == orig(this.B.getClass().getName())
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.xb == this.xn
this.xb == this.dual
this.xb == this.rq
this.xb == orig(this.xb)
this.xb == orig(this.xn)
this.xb == orig(this.dual)
this.xb == orig(this.rq)
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == this.Un[]
this.cn[] == this.Ln[]
this.cn[] == orig(this.cn[])
this.cn[] == orig(this.Un[])
this.cn[] == orig(this.Ln[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == return.getClass().getName()
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib == orig(arg1)
this.Ib.getClass().getName() == return.getClass().getName()
this.Ib[] == arg1[]
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A[] == orig(this.A[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == orig(this.Un)
this.Ln == orig(this.Ln)
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.m == orig(this.m)
this.m == orig(size(this.b[]))
this.m == orig(size(this.A[]))
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I.getClass().getName() == return.getClass().getName()
this.I[] == orig(this.I[])
arg0.toString == orig(arg0.toString)
arg1[] == orig(this.Ib[])
arg1[] == orig(arg1[])
return.getClass().getName() == orig(this.In.getClass().getName())
return.getClass().getName() == orig(this.Ib.getClass().getName())
return.getClass().getName() == orig(this.I.getClass().getName())
return.getClass().getName() == orig(arg1.getClass().getName())
size(this.cb[]) == size(this.Ib[])
size(this.cb[]) == size(this.Ub[])
size(this.cb[]) == size(this.Lb[])
size(this.cb[]) == size(return[])-1
size(this.cb[]) == orig(size(this.Ib[]))
size(this.cb[]) == orig(size(this.Ub[]))
size(this.cb[]) == orig(size(this.Lb[]))
size(this.cb[]) == orig(size(arg1[]))
size(this.cn[]) == orig(size(this.In[]))
size(this.U[]) == size(this.L[])
size(this.U[]) == orig(size(this.L[]))
this.N == null
this.xb == null
this.cb[] elements one of { -0.0, 9.9999999E7 }
this.cb[] one of { [], [9.9999999E7], [9.9999999E7, -0.0] }
this.cb[] sorted by >
this.cn[] == []
this.In[] == []
this.In[].getClass().getName() == []
this.In[].toString == []
this.Ib[].toString elements one of { "S_R2", "a0" }
this.Ub[] elements == 1.7976931348623157E308
this.Ub[] one of { [], [1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements == 0.0
this.Lb[] one of { [], [0.0], [0.0, 0.0] }
this.nart == 1
arg0.toString one of { "S_R2", "S_R3", "a0" }
arg1[].toString elements one of { "S_R2", "a0" }
return.getClass().getName() == java.lang.String[].class
return[].toString elements one of { "S_R2", "S_R3", "a0" }
size(this.U[]) one of { 5, 6 }
size(return[]) one of { 1, 2, 3 }
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.B.getClass().getName() != return.getClass().getName()
this.cb[] >= this.Lb[] (lexically)
this.Lb[] < this.L[] (lexically)
this.Lb[] <= this.L[] (lexically)
this.U[] >= this.L[] (elementwise)
this.m < size(this.U[])-1
this.m >= size(return[])
this.nart != size(this.B[])
this.nart >= size(arg1[])-1
this.nart <= size(return[])
orig(arg0) in return[]
size(this.B[]) >= size(this.cn[])
size(this.B[]) < size(this.U[])-1
size(this.B[])-1 >= size(this.cn[])-1
size(this.B[])-1 >= size(arg1[])-1
size(this.B[])-1 <= size(return[])
size(this.cb[]) >= size(this.cn[])
size(this.cb[]) <= size(this.b[])-1
size(this.cn[]) < size(this.U[])-1
size(this.cn[])-1 <= size(arg1[])-1
size(this.c[])-1 <= size(this.U[])
size(this.c[])-1 > size(return[])
size(this.U[])-1 > size(return[])
===========================================================================
algorithms.SimplexAlgorithm.createBasis(double[][], double[], java.lang.String[]):::ENTER
this.B == this.N
this.xb == this.xn
this.xb == this.dual
this.xb == this.rq
this.cb[] == this.cn[]
this.cb[] == this.Ub[]
this.cb[] == this.Lb[]
this.cb[] == this.Un[]
this.cb[] == this.Ln[]
this.In.getClass().getName() == arg2.getClass().getName()
this.In[] == this.Ib[]
this.c == arg1
this.c[] == arg1[]
this.A == arg0
this.A.getClass().getName() == arg0.getClass().getName()
this.A[] == arg0[]
this.m == size(arg0[])
this.n == size(this.U[])
this.n == size(this.L[])
this.n == size(arg1[])
this.n == size(arg2[])
this.nart == size(this.cb[])
this.nart == size(this.cn[])
this.nart == size(this.In[])
this.nart == size(this.Ib[])
this.nart == size(this.Ub[])
this.nart == size(this.Lb[])
this.nart == size(this.Un[])
this.nart == size(this.Ln[])
this.I == arg2
this.I[] == arg2[]
this.B == null
this.xb == null
this.cb[] == []
this.In[] == []
this.In[].getClass().getName() == []
this.In[].toString == []
this.Ib[].toString == []
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
arg2[].toString == [x1, x2, x3, S_R1, S_R2, S_R3]
this.A[this.nart] has only one value
this.I[this.nart] has only one value
===========================================================================
algorithms.SimplexAlgorithm.createBasis(double[][], double[], java.lang.String[]):::EXIT
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B.getClass().getName() == orig(arg0.getClass().getName())
this.xb == this.dual
this.xb == this.rq
this.xb == orig(this.xb)
this.xb == orig(this.xn)
this.xb == orig(this.dual)
this.xb == orig(this.rq)
this.xn[] == this.Ln[]
this.xn[] == this.L[]
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.In.getClass().getName() == orig(arg2.getClass().getName())
this.c == orig(this.c)
this.c == orig(arg1)
this.c[] == orig(this.c[])
this.c[] == orig(arg1[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A == orig(arg0)
this.A[] == orig(this.A[])
this.A[] == orig(arg0[])
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == orig(size(this.b[]))
this.m == orig(size(this.A[]))
this.m == orig(size(arg0[]))
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.U[]))
this.n == orig(size(this.L[]))
this.n == orig(size(this.I[]))
this.n == orig(size(arg1[]))
this.n == orig(size(arg2[]))
this.initialTime == orig(this.initialTime)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I == orig(arg2)
this.I[] == orig(this.I[])
this.I[] == orig(arg2[])
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
this.B[this.nart-1] == this.B[orig(this.nart)]
this.N[this.nart-1] == this.N[orig(this.nart)]
this.In[this.m] == this.I[this.m]
this.In[this.m] == orig(this.I[post(this.m)])
this.In[this.m] == orig(arg2[post(this.m)])
this.In[this.m] == this.I[orig(this.m)]
this.In[this.m] == orig(this.I[this.m])
this.In[this.m] == orig(arg2[this.m])
this.In[this.m-1] == this.I[this.m-1]
this.In[this.m-1] == orig(this.I[post(this.m)-1])
this.In[this.m-1] == orig(arg2[post(this.m)-1])
this.In[this.m-1] == this.I[orig(this.m)-1]
this.In[this.m-1] == orig(this.I[this.m-1])
this.In[this.m-1] == orig(arg2[this.m-1])
this.In[this.nart] == this.I[this.nart]
this.In[this.nart] == orig(this.I[post(this.nart)])
this.In[this.nart] == orig(arg2[post(this.nart)])
this.In[this.nart-1] == orig(arg2[this.nart])
this.In[orig(this.nart)] == orig(arg2[this.nart])
this.Ib[this.m-1] == this.I[this.n-1]
this.Ib[this.m-1] == orig(this.I[post(this.n)-1])
this.Ib[this.m-1] == orig(arg2[post(this.n)-1])
this.Ib[this.m-1] == this.I[orig(this.n)-1]
this.Ib[this.m-1] == orig(this.I[this.n-1])
this.Ib[this.m-1] == orig(arg2[this.n-1])
this.Ib[this.nart-1] == this.Ib[orig(this.nart)]
this.A[this.nart-1] == orig(arg0[this.nart])
this.I[this.nart-1] == orig(arg2[this.nart])
orig(this.A[post(this.nart)-1]) == orig(arg0[this.nart])
orig(this.I[post(this.nart)-1]) == orig(arg2[this.nart])
orig(arg0[post(this.nart)-1]) == orig(arg0[this.nart])
orig(arg2[post(this.nart)-1]) == orig(arg2[this.nart])
this.xb == null
this.xn[] elements one of { 0.0, 1.0, 76.0 }
this.xn[] one of { [1.0, 76.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0] }
this.cb[] == [9.9999999E7, -0.0, -0.0]
this.cb[] elements one of { -0.0, 9.9999999E7 }
this.cn[] == [-7.0, -8.0, -4.0, -0.0]
this.In[] contains no nulls and has only one value, of length 4
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.In[].toString == [x1, x2, x3, S_R1]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.Ib[].toString == [a0, S_R2, S_R3]
this.Ib[].toString elements one of { "S_R2", "S_R3", "a0" }
this.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.Ub[] elements == 1.7976931348623157E308
this.Lb[] == [0.0, 0.0, 0.0]
this.Lb[] elements == 0.0
this.Un[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308] }
this.nart == 1
this.In[this.m] has only one value
this.In[this.m-1] has only one value
this.In[this.nart] has only one value
this.Ib[this.m-1] has only one value
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
orig(arg0[this.nart]) has only one value
orig(arg2[this.nart]) has only one value
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.dotProduct(double[], double[]):::ENTER
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.Ln[] == this.L[]
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
size(arg0[]) == size(arg1[])
this.B != null
this.N != null
this.xb != null
this.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.xb[] elements >= 0.09999999999999432
this.xb[] sorted by >
this.xn != null
this.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] }
this.cb[] elements one of { -8.0, -4.0, -0.0 }
this.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.cb[] sorted by >=
this.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] }
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual != null
this.rq != null
this.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] }
this.Ub[] elements one of { 200.0, 1.7976931348623157E308 }
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Ub[] sorted by >=
this.Lb[] elements one of { 0.0, 76.0 }
this.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] }
this.Lb[] sorted by <=
this.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] }
this.nart == 1
arg0 != null
arg1 != null
arg1[] elements >= 0.0
size(arg0[]) one of { 3, 4 }
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xb[] > this.cb[] (elementwise)
this.xb[] > this.cn[] (lexically)
this.xb[] >= this.cn[] (lexically)
this.xb[] > this.rq[] (lexically)
this.xb[] >= this.rq[] (lexically)
this.xb[] > this.Lb[] (elementwise)
this.xb[] > arg0[] (lexically)
this.xb[] >= arg0[] (lexically)
this.xb[] >= arg1[] (lexically)
this.xn[] >= this.Ln[] (elementwise)
this.xn[] > arg0[] (lexically)
this.xn[] >= arg0[] (lexically)
this.xn[] <= arg1[] (lexically)
this.cb[] > this.cn[] (lexically)
this.cb[] >= this.cn[] (lexically)
this.cb[] < this.b[] (elementwise)
this.cb[] < this.Ub[] (elementwise)
this.cb[] <= this.Lb[] (elementwise)
this.cb[] < this.Un[] (lexically)
this.cb[] <= this.Un[] (lexically)
this.cb[] >= arg0[] (lexically)
this.cb[] < arg1[] (lexically)
this.cb[] <= arg1[] (lexically)
this.cn[] <= this.rq[] (elementwise)
this.cn[] < this.Un[] (elementwise)
this.cn[] <= arg0[] (lexically)
this.cn[] < arg1[] (lexically)
this.cn[] <= arg1[] (lexically)
this.b[] > this.Lb[] (elementwise)
this.dual[] >= arg0[] (lexically)
this.dual[] < arg1[] (lexically)
this.dual[] <= arg1[] (lexically)
this.rq[] < this.Un[] (elementwise)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > arg0[] (lexically)
this.Ub[] >= arg0[] (lexically)
this.Ub[] > arg1[] (lexically)
this.Ub[] >= arg1[] (lexically)
this.Lb[] >= arg0[] (lexically)
this.Lb[] < arg1[] (lexically)
this.Lb[] <= arg1[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.Un[] > arg0[] (lexically)
this.Un[] >= arg0[] (lexically)
this.Ln[] > arg0[] (lexically)
this.Ln[] >= arg0[] (lexically)
this.Ln[] < arg1[] (lexically)
this.Ln[] <= arg1[] (lexically)
this.m <= size(arg0[])
this.m >= size(arg0[])-1
this.nart < size(arg0[])-1
this.Ib[this.nart] in this.I[]
arg0[] < arg1[] (lexically)
arg0[] <= arg1[] (lexically)
size(this.B[])-1 <= size(arg0[])-1
size(this.xn[]) >= size(arg0[])
size(this.c[])-1 > size(arg0[])
===========================================================================
algorithms.SimplexAlgorithm.dotProduct(double[], double[]):::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == orig(this.B.getClass().getName())
this.B.getClass().getName() == orig(this.N.getClass().getName())
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.N[] == orig(this.N[])
this.xb == orig(this.xb)
this.xb[] == orig(this.xb[])
this.xn == orig(this.xn)
this.xn[] == orig(this.xn[])
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == orig(this.cn[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A[] == orig(this.A[])
this.dual == orig(this.dual)
this.dual[] == orig(this.dual[])
this.rq == orig(this.rq)
this.rq[] == orig(this.rq[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == this.U
this.Un == orig(this.Un)
this.Un == orig(this.U)
this.Un[] == this.U[]
this.Un[] == orig(this.Un[])
this.Un[] == orig(this.U[])
this.Ln == this.L
this.Ln == orig(this.Ln)
this.Ln == orig(this.L)
this.Ln[] == this.L[]
this.Ln[] == orig(this.Ln[])
this.Ln[] == orig(this.L[])
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == orig(size(this.B[]))
this.m == orig(size(this.N[]))
this.m == orig(size(this.xb[]))
this.m == orig(size(this.xn[]))-1
this.m == orig(size(this.cb[]))
this.m == orig(size(this.cn[]))-1
this.m == orig(size(this.b[]))
this.m == orig(size(this.In[]))-1
this.m == orig(size(this.Ib[]))
this.m == orig(size(this.A[]))
this.m == orig(size(this.dual[]))
this.m == orig(size(this.rq[]))-1
this.m == orig(size(this.Ub[]))
this.m == orig(size(this.Lb[]))
this.m == orig(size(this.Un[]))-1
this.m == orig(size(this.Ln[]))-1
this.m == orig(size(this.U[]))-1
this.m == orig(size(this.L[]))-1
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
size(this.xn[]) == orig(size(this.cn[]))
size(this.xn[]) == orig(size(this.In[]))
size(this.xn[]) == orig(size(this.rq[]))
size(this.xn[]) == orig(size(this.Un[]))
size(this.xn[]) == orig(size(this.Ln[]))
size(this.xn[]) == orig(size(this.U[]))
size(this.xn[]) == orig(size(this.L[]))
this.B != null
this.N != null
this.xb != null
this.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.xb[] elements >= 0.09999999999999432
this.xb[] sorted by >
this.xn != null
this.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] }
this.cb[] elements one of { -8.0, -4.0, -0.0 }
this.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.cb[] sorted by >=
this.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] }
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual != null
this.rq != null
this.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] }
this.Ub[] elements one of { 200.0, 1.7976931348623157E308 }
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Ub[] sorted by >=
this.Lb[] elements one of { 0.0, 76.0 }
this.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] }
this.Lb[] sorted by <=
this.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] }
this.nart == 1
arg1[] elements >= 0.0
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xb[] > this.cb[] (elementwise)
this.xb[] > this.cn[] (lexically)
this.xb[] >= this.cn[] (lexically)
this.xb[] > this.rq[] (lexically)
this.xb[] >= this.rq[] (lexically)
this.xb[] > this.Lb[] (elementwise)
this.xb[] > arg0[] (lexically)
this.xb[] >= arg0[] (lexically)
this.xb[] >= arg1[] (lexically)
this.xb[] elements > return
this.xn[] >= this.Ln[] (elementwise)
this.xn[] > arg0[] (lexically)
this.xn[] >= arg0[] (lexically)
this.xn[] <= arg1[] (lexically)
this.xn[] elements >= return
this.cb[] > this.cn[] (lexically)
this.cb[] >= this.cn[] (lexically)
this.cb[] < this.b[] (elementwise)
this.cb[] < this.Ub[] (elementwise)
this.cb[] <= this.Lb[] (elementwise)
this.cb[] < this.Un[] (lexically)
this.cb[] <= this.Un[] (lexically)
this.cb[] >= arg0[] (lexically)
this.cb[] < arg1[] (lexically)
this.cb[] <= arg1[] (lexically)
this.cn[] <= this.rq[] (elementwise)
this.cn[] < this.Un[] (elementwise)
this.cn[] <= arg0[] (lexically)
this.cn[] < arg1[] (lexically)
this.cn[] <= arg1[] (lexically)
this.b[] > this.Lb[] (elementwise)
this.b[] elements > return
this.dual[] >= arg0[] (lexically)
this.dual[] < arg1[] (lexically)
this.dual[] <= arg1[] (lexically)
this.rq[] < this.Un[] (elementwise)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > arg0[] (lexically)
this.Ub[] >= arg0[] (lexically)
this.Ub[] > arg1[] (lexically)
this.Ub[] >= arg1[] (lexically)
this.Ub[] elements > return
this.Lb[] >= arg0[] (lexically)
this.Lb[] < arg1[] (lexically)
this.Lb[] <= arg1[] (lexically)
this.Lb[] elements >= return
this.Un[] >= this.Ln[] (elementwise)
this.Un[] > arg0[] (lexically)
this.Un[] >= arg0[] (lexically)
this.Un[] elements >= return
this.Ln[] > arg0[] (lexically)
this.Ln[] >= arg0[] (lexically)
this.Ln[] < arg1[] (lexically)
this.Ln[] <= arg1[] (lexically)
this.Ln[] elements >= return
this.m >= size(arg0[])-1
this.m <= orig(size(arg0[]))
this.nart < size(arg0[])-1
this.Ib[this.nart] in this.I[]
arg0[] < arg1[] (lexically)
arg0[] <= arg1[] (lexically)
arg1[] elements > return
size(this.B[])-1 <= size(arg0[])-1
size(this.xn[]) >= orig(size(arg0[]))
size(this.c[])-1 > orig(size(arg0[]))
===========================================================================
algorithms.SimplexAlgorithm.feasible():::ENTER
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.Ln[] == this.L[]
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
this.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] }
this.cb[] elements one of { -8.0, -4.0, -0.0 }
this.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] }
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] }
this.Ub[] elements one of { 200.0, 1.7976931348623157E308 }
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements one of { 0.0, 76.0 }
this.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] }
this.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] }
this.nart == 1
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.feasible():::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == orig(this.B.getClass().getName())
this.B.getClass().getName() == orig(this.N.getClass().getName())
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.N[] == orig(this.N[])
this.xb == orig(this.xb)
this.xb[] == orig(this.xb[])
this.xn == orig(this.xn)
this.xn[] == orig(this.xn[])
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == orig(this.cn[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A[] == orig(this.A[])
this.dual == orig(this.dual)
this.rq == orig(this.rq)
this.rq[] == orig(this.rq[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == this.U
this.Un == orig(this.Un)
this.Un == orig(this.U)
this.Un[] == this.U[]
this.Un[] == orig(this.Un[])
this.Un[] == orig(this.U[])
this.Ln == this.L
this.Ln == orig(this.Ln)
this.Ln == orig(this.L)
this.Ln[] == this.L[]
this.Ln[] == orig(this.Ln[])
this.Ln[] == orig(this.L[])
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == orig(size(this.B[]))
this.m == orig(size(this.N[]))
this.m == orig(size(this.xb[]))
this.m == orig(size(this.xn[]))-1
this.m == orig(size(this.cb[]))
this.m == orig(size(this.cn[]))-1
this.m == orig(size(this.b[]))
this.m == orig(size(this.In[]))-1
this.m == orig(size(this.Ib[]))
this.m == orig(size(this.A[]))
this.m == orig(size(this.rq[]))-1
this.m == orig(size(this.Ub[]))
this.m == orig(size(this.Lb[]))
this.m == orig(size(this.Un[]))-1
this.m == orig(size(this.Ln[]))-1
this.m == orig(size(this.U[]))-1
this.m == orig(size(this.L[]))-1
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
size(this.xn[]) == orig(size(this.cn[]))
size(this.xn[]) == orig(size(this.In[]))
size(this.xn[]) == orig(size(this.rq[]))
size(this.xn[]) == orig(size(this.Un[]))
size(this.xn[]) == orig(size(this.Ln[]))
size(this.xn[]) == orig(size(this.U[]))
size(this.xn[]) == orig(size(this.L[]))
this.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] }
this.cb[] elements one of { -8.0, -4.0, -0.0 }
this.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] }
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] }
this.Ub[] elements one of { 200.0, 1.7976931348623157E308 }
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements one of { 0.0, 76.0 }
this.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] }
this.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] }
this.nart == 1
return == true
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.feasible():::EXIT;condition="return == true"
===========================================================================
algorithms.SimplexAlgorithm.getDual():::ENTER
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.Ln[] == this.L[]
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
this.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] }
this.cb[] elements one of { -8.0, -4.0, -0.0 }
this.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] }
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] }
this.Ub[] elements one of { 200.0, 1.7976931348623157E308 }
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements one of { 0.0, 76.0 }
this.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] }
this.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] }
this.nart == 1
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.getDual():::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == orig(this.B.getClass().getName())
this.B.getClass().getName() == orig(this.N.getClass().getName())
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.N[] == orig(this.N[])
this.xb == orig(this.xb)
this.xb[] == orig(this.xb[])
this.xn == orig(this.xn)
this.xn[] == orig(this.xn[])
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == orig(this.cn[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A[] == orig(this.A[])
this.dual == orig(this.dual)
this.rq == orig(this.rq)
this.rq[] == orig(this.rq[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == this.U
this.Un == orig(this.Un)
this.Un == orig(this.U)
this.Un[] == this.U[]
this.Un[] == orig(this.Un[])
this.Un[] == orig(this.U[])
this.Ln == this.L
this.Ln == orig(this.Ln)
this.Ln == orig(this.L)
this.Ln[] == this.L[]
this.Ln[] == orig(this.Ln[])
this.Ln[] == orig(this.L[])
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == size(return[])
this.m == orig(size(this.B[]))
this.m == orig(size(this.N[]))
this.m == orig(size(this.xb[]))
this.m == orig(size(this.xn[]))-1
this.m == orig(size(this.cb[]))
this.m == orig(size(this.cn[]))-1
this.m == orig(size(this.b[]))
this.m == orig(size(this.In[]))-1
this.m == orig(size(this.Ib[]))
this.m == orig(size(this.A[]))
this.m == orig(size(this.rq[]))-1
this.m == orig(size(this.Ub[]))
this.m == orig(size(this.Lb[]))
this.m == orig(size(this.Un[]))-1
this.m == orig(size(this.Ln[]))-1
this.m == orig(size(this.U[]))-1
this.m == orig(size(this.L[]))-1
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
size(this.xn[]) == orig(size(this.cn[]))
size(this.xn[]) == orig(size(this.In[]))
size(this.xn[]) == orig(size(this.rq[]))
size(this.xn[]) == orig(size(this.Un[]))
size(this.xn[]) == orig(size(this.Ln[]))
size(this.xn[]) == orig(size(this.U[]))
size(this.xn[]) == orig(size(this.L[]))
this.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] }
this.cb[] elements one of { -8.0, -4.0, -0.0 }
this.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] }
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] }
this.Ub[] elements one of { 200.0, 1.7976931348623157E308 }
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements one of { 0.0, 76.0 }
this.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] }
this.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] }
this.nart == 1
return[] elements one of { -4.0, -1.0, 0.0 }
return[] one of { [-0.0, -0.0, -4.0], [0.0, 0.0, -1.0], [0.0, 0.0, 0.0] }
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.getIb():::ENTER
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.Ln[] == this.L[]
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
this.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] }
this.cb[] elements one of { -8.0, -4.0, -0.0 }
this.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] }
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] }
this.Ub[] elements one of { 200.0, 1.7976931348623157E308 }
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements one of { 0.0, 76.0 }
this.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] }
this.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] }
this.nart == 1
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.getIb():::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == orig(this.B.getClass().getName())
this.B.getClass().getName() == orig(this.N.getClass().getName())
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.N[] == orig(this.N[])
this.xb == orig(this.xb)
this.xb[] == orig(this.xb[])
this.xn == orig(this.xn)
this.xn[] == orig(this.xn[])
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == orig(this.cn[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == return.getClass().getName()
this.In[] == orig(this.In[])
this.Ib == return
this.Ib.getClass().getName() == return.getClass().getName()
this.Ib[] == return[]
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A[] == orig(this.A[])
this.dual == orig(this.dual)
this.dual[] == orig(this.dual[])
this.rq == orig(this.rq)
this.rq[] == orig(this.rq[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == this.U
this.Un == orig(this.Un)
this.Un == orig(this.U)
this.Un[] == this.U[]
this.Un[] == orig(this.Un[])
this.Un[] == orig(this.U[])
this.Ln == this.L
this.Ln == orig(this.Ln)
this.Ln == orig(this.L)
this.Ln[] == this.L[]
this.Ln[] == orig(this.Ln[])
this.Ln[] == orig(this.L[])
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == size(return[])
this.m == orig(size(this.B[]))
this.m == orig(size(this.N[]))
this.m == orig(size(this.xb[]))
this.m == orig(size(this.xn[]))-1
this.m == orig(size(this.cb[]))
this.m == orig(size(this.cn[]))-1
this.m == orig(size(this.b[]))
this.m == orig(size(this.In[]))-1
this.m == orig(size(this.Ib[]))
this.m == orig(size(this.A[]))
this.m == orig(size(this.dual[]))
this.m == orig(size(this.rq[]))-1
this.m == orig(size(this.Ub[]))
this.m == orig(size(this.Lb[]))
this.m == orig(size(this.Un[]))-1
this.m == orig(size(this.Ln[]))-1
this.m == orig(size(this.U[]))-1
this.m == orig(size(this.L[]))-1
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I.getClass().getName() == return.getClass().getName()
this.I[] == orig(this.I[])
return == orig(this.Ib)
return.getClass().getName() == orig(this.In.getClass().getName())
return.getClass().getName() == orig(this.Ib.getClass().getName())
return.getClass().getName() == orig(this.I.getClass().getName())
return[] == orig(this.Ib[])
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
size(this.xn[]) == orig(size(this.cn[]))
size(this.xn[]) == orig(size(this.In[]))
size(this.xn[]) == orig(size(this.rq[]))
size(this.xn[]) == orig(size(this.Un[]))
size(this.xn[]) == orig(size(this.Ln[]))
size(this.xn[]) == orig(size(this.U[]))
size(this.xn[]) == orig(size(this.L[]))
this.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] }
this.cb[] elements one of { -8.0, -4.0, -0.0 }
this.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] }
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] }
this.Ub[] elements one of { 200.0, 1.7976931348623157E308 }
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements one of { 0.0, 76.0 }
this.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] }
this.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] }
this.nart == 1
return.getClass().getName() == java.lang.String[].class
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
return[this.nart] has only one value
return[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.getIn():::ENTER
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.Ln[] == this.L[]
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
this.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] }
this.cb[] elements one of { -8.0, -4.0, -0.0 }
this.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] }
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] }
this.Ub[] elements one of { 200.0, 1.7976931348623157E308 }
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements one of { 0.0, 76.0 }
this.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] }
this.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] }
this.nart == 1
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.getIn():::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == orig(this.B.getClass().getName())
this.B.getClass().getName() == orig(this.N.getClass().getName())
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.N[] == orig(this.N[])
this.xb == orig(this.xb)
this.xb[] == orig(this.xb[])
this.xn == orig(this.xn)
this.xn[] == orig(this.xn[])
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == orig(this.cn[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == return
this.In.getClass().getName() == return.getClass().getName()
this.In[] == return[]
this.Ib == orig(this.Ib)
this.Ib.getClass().getName() == return.getClass().getName()
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A[] == orig(this.A[])
this.dual == orig(this.dual)
this.dual[] == orig(this.dual[])
this.rq == orig(this.rq)
this.rq[] == orig(this.rq[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == this.U
this.Un == orig(this.Un)
this.Un == orig(this.U)
this.Un[] == this.U[]
this.Un[] == orig(this.Un[])
this.Un[] == orig(this.U[])
this.Ln == this.L
this.Ln == orig(this.Ln)
this.Ln == orig(this.L)
this.Ln[] == this.L[]
this.Ln[] == orig(this.Ln[])
this.Ln[] == orig(this.L[])
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == size(return[])-1
this.m == orig(size(this.B[]))
this.m == orig(size(this.N[]))
this.m == orig(size(this.xb[]))
this.m == orig(size(this.xn[]))-1
this.m == orig(size(this.cb[]))
this.m == orig(size(this.cn[]))-1
this.m == orig(size(this.b[]))
this.m == orig(size(this.In[]))-1
this.m == orig(size(this.Ib[]))
this.m == orig(size(this.A[]))
this.m == orig(size(this.dual[]))
this.m == orig(size(this.rq[]))-1
this.m == orig(size(this.Ub[]))
this.m == orig(size(this.Lb[]))
this.m == orig(size(this.Un[]))-1
this.m == orig(size(this.Ln[]))-1
this.m == orig(size(this.U[]))-1
this.m == orig(size(this.L[]))-1
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I.getClass().getName() == return.getClass().getName()
this.I[] == orig(this.I[])
return == orig(this.In)
return.getClass().getName() == orig(this.In.getClass().getName())
return.getClass().getName() == orig(this.Ib.getClass().getName())
return.getClass().getName() == orig(this.I.getClass().getName())
return[] == orig(this.In[])
size(this.xn[]) == size(return[])
size(this.cn[]) == size(return[])
size(this.rq[]) == size(return[])
size(this.Un[]) == size(return[])
size(this.Ln[]) == size(return[])
size(this.U[]) == size(return[])
size(this.L[]) == size(return[])
size(return[]) == orig(size(this.xn[]))
size(return[]) == orig(size(this.cn[]))
size(return[]) == orig(size(this.rq[]))
size(return[]) == orig(size(this.Un[]))
size(return[]) == orig(size(this.Ln[]))
size(return[]) == orig(size(this.U[]))
size(return[]) == orig(size(this.L[]))
this.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] }
this.cb[] elements one of { -8.0, -4.0, -0.0 }
this.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] }
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] }
this.Ub[] elements one of { 200.0, 1.7976931348623157E308 }
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements one of { 0.0, 76.0 }
this.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] }
this.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] }
this.nart == 1
return.getClass().getName() == java.lang.String[].class
size(return[]) == 4
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.getStatus():::ENTER
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.Ln[] == this.L[]
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
this.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] }
this.cb[] elements one of { -8.0, -4.0, -0.0 }
this.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] }
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] }
this.Ub[] elements one of { 200.0, 1.7976931348623157E308 }
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements one of { 0.0, 76.0 }
this.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] }
this.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] }
this.nart == 1
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.getStatus():::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == orig(this.B.getClass().getName())
this.B.getClass().getName() == orig(this.N.getClass().getName())
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.N[] == orig(this.N[])
this.xb == orig(this.xb)
this.xb[] == orig(this.xb[])
this.xn == orig(this.xn)
this.xn[] == orig(this.xn[])
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == orig(this.cn[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == return
this.A == orig(this.A)
this.A[] == orig(this.A[])
this.dual == orig(this.dual)
this.dual[] == orig(this.dual[])
this.rq == orig(this.rq)
this.rq[] == orig(this.rq[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == this.U
this.Un == orig(this.Un)
this.Un == orig(this.U)
this.Un[] == this.U[]
this.Un[] == orig(this.Un[])
this.Un[] == orig(this.U[])
this.Ln == this.L
this.Ln == orig(this.Ln)
this.Ln == orig(this.L)
this.Ln[] == this.L[]
this.Ln[] == orig(this.Ln[])
this.Ln[] == orig(this.L[])
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == orig(size(this.B[]))
this.m == orig(size(this.N[]))
this.m == orig(size(this.xb[]))
this.m == orig(size(this.xn[]))-1
this.m == orig(size(this.cb[]))
this.m == orig(size(this.cn[]))-1
this.m == orig(size(this.b[]))
this.m == orig(size(this.In[]))-1
this.m == orig(size(this.Ib[]))
this.m == orig(size(this.A[]))
this.m == orig(size(this.dual[]))
this.m == orig(size(this.rq[]))-1
this.m == orig(size(this.Ub[]))
this.m == orig(size(this.Lb[]))
this.m == orig(size(this.Un[]))-1
this.m == orig(size(this.Ln[]))-1
this.m == orig(size(this.U[]))-1
this.m == orig(size(this.L[]))-1
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
return == orig(this.status)
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
size(this.xn[]) == orig(size(this.cn[]))
size(this.xn[]) == orig(size(this.In[]))
size(this.xn[]) == orig(size(this.rq[]))
size(this.xn[]) == orig(size(this.Un[]))
size(this.xn[]) == orig(size(this.Ln[]))
size(this.xn[]) == orig(size(this.U[]))
size(this.xn[]) == orig(size(this.L[]))
this.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] }
this.cb[] elements one of { -8.0, -4.0, -0.0 }
this.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] }
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] }
this.Ub[] elements one of { 200.0, 1.7976931348623157E308 }
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements one of { 0.0, 76.0 }
this.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] }
this.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] }
this.nart == 1
return == 0
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.getXb():::ENTER
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.Ln[] == this.L[]
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
this.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] }
this.cb[] elements one of { -8.0, -4.0, -0.0 }
this.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] }
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] }
this.Ub[] elements one of { 200.0, 1.7976931348623157E308 }
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements one of { 0.0, 76.0 }
this.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] }
this.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] }
this.nart == 1
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.getXb():::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == orig(this.B.getClass().getName())
this.B.getClass().getName() == orig(this.N.getClass().getName())
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.N[] == orig(this.N[])
this.xb == return
this.xb[] == return[]
this.xn == orig(this.xn)
this.xn[] == orig(this.xn[])
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == orig(this.cn[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A[] == orig(this.A[])
this.dual == orig(this.dual)
this.dual[] == orig(this.dual[])
this.rq == orig(this.rq)
this.rq[] == orig(this.rq[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == this.U
this.Un == orig(this.Un)
this.Un == orig(this.U)
this.Un[] == this.U[]
this.Un[] == orig(this.Un[])
this.Un[] == orig(this.U[])
this.Ln == this.L
this.Ln == orig(this.Ln)
this.Ln == orig(this.L)
this.Ln[] == this.L[]
this.Ln[] == orig(this.Ln[])
this.Ln[] == orig(this.L[])
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == size(return[])
this.m == orig(size(this.B[]))
this.m == orig(size(this.N[]))
this.m == orig(size(this.xb[]))
this.m == orig(size(this.xn[]))-1
this.m == orig(size(this.cb[]))
this.m == orig(size(this.cn[]))-1
this.m == orig(size(this.b[]))
this.m == orig(size(this.In[]))-1
this.m == orig(size(this.Ib[]))
this.m == orig(size(this.A[]))
this.m == orig(size(this.dual[]))
this.m == orig(size(this.rq[]))-1
this.m == orig(size(this.Ub[]))
this.m == orig(size(this.Lb[]))
this.m == orig(size(this.Un[]))-1
this.m == orig(size(this.Ln[]))-1
this.m == orig(size(this.U[]))-1
this.m == orig(size(this.L[]))-1
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
return == orig(this.xb)
return[] == orig(this.xb[])
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
size(this.xn[]) == orig(size(this.cn[]))
size(this.xn[]) == orig(size(this.In[]))
size(this.xn[]) == orig(size(this.rq[]))
size(this.xn[]) == orig(size(this.Un[]))
size(this.xn[]) == orig(size(this.Ln[]))
size(this.xn[]) == orig(size(this.U[]))
size(this.xn[]) == orig(size(this.L[]))
this.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] }
this.cb[] elements one of { -8.0, -4.0, -0.0 }
this.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] }
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] }
this.Ub[] elements one of { 200.0, 1.7976931348623157E308 }
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements one of { 0.0, 76.0 }
this.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] }
this.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] }
this.nart == 1
return[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.getXn():::ENTER
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.Ln[] == this.L[]
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
this.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] }
this.cb[] elements one of { -8.0, -4.0, -0.0 }
this.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] }
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] }
this.Ub[] elements one of { 200.0, 1.7976931348623157E308 }
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements one of { 0.0, 76.0 }
this.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] }
this.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] }
this.nart == 1
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.getXn():::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == orig(this.B.getClass().getName())
this.B.getClass().getName() == orig(this.N.getClass().getName())
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.N[] == orig(this.N[])
this.xb == orig(this.xb)
this.xb[] == orig(this.xb[])
this.xn == return
this.xn[] == return[]
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == orig(this.cn[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A[] == orig(this.A[])
this.dual == orig(this.dual)
this.dual[] == orig(this.dual[])
this.rq == orig(this.rq)
this.rq[] == orig(this.rq[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == this.U
this.Un == orig(this.Un)
this.Un == orig(this.U)
this.Un[] == this.U[]
this.Un[] == orig(this.Un[])
this.Un[] == orig(this.U[])
this.Ln == this.L
this.Ln == orig(this.Ln)
this.Ln == orig(this.L)
this.Ln[] == this.L[]
this.Ln[] == orig(this.Ln[])
this.Ln[] == orig(this.L[])
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == size(return[])-1
this.m == orig(size(this.B[]))
this.m == orig(size(this.N[]))
this.m == orig(size(this.xb[]))
this.m == orig(size(this.xn[]))-1
this.m == orig(size(this.cb[]))
this.m == orig(size(this.cn[]))-1
this.m == orig(size(this.b[]))
this.m == orig(size(this.In[]))-1
this.m == orig(size(this.Ib[]))
this.m == orig(size(this.A[]))
this.m == orig(size(this.dual[]))
this.m == orig(size(this.rq[]))-1
this.m == orig(size(this.Ub[]))
this.m == orig(size(this.Lb[]))
this.m == orig(size(this.Un[]))-1
this.m == orig(size(this.Ln[]))-1
this.m == orig(size(this.U[]))-1
this.m == orig(size(this.L[]))-1
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
return == orig(this.xn)
return[] == orig(this.xn[])
size(this.cn[]) == size(return[])
size(this.In[]) == size(return[])
size(this.rq[]) == size(return[])
size(this.Un[]) == size(return[])
size(this.Ln[]) == size(return[])
size(this.U[]) == size(return[])
size(this.L[]) == size(return[])
size(return[]) == orig(size(this.cn[]))
size(return[]) == orig(size(this.In[]))
size(return[]) == orig(size(this.rq[]))
size(return[]) == orig(size(this.Un[]))
size(return[]) == orig(size(this.Ln[]))
size(return[]) == orig(size(this.U[]))
size(return[]) == orig(size(this.L[]))
this.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.cb[] elements one of { -8.0, -4.0, -0.0 }
this.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] }
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] }
this.Ub[] elements one of { 200.0, 1.7976931348623157E308 }
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements one of { 0.0, 76.0 }
this.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] }
this.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] }
this.nart == 1
return[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] }
return[] elements >= 0.0
size(return[]) == 4
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.inverse(double[][]):::ENTER
this.B == arg0
this.B.getClass().getName() == arg0.getClass().getName()
this.B[] == arg0[]
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.Ln[] == this.L[]
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == size(arg0[])
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
this.B != null
this.N != null
this.xn != null
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.nart == 1
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xn[] >= this.Ln[] (elementwise)
this.cb[] < this.Ub[] (elementwise)
this.cn[] < this.Ub[] (lexically)
this.cn[] < this.Lb[] (lexically)
this.cn[] < this.Un[] (elementwise)
this.cn[] < this.Ln[] (lexically)
this.b[] < this.Un[] (lexically)
this.b[] <= this.Un[] (lexically)
this.c[] < this.Lb[] (lexically)
this.c[] <= this.Lb[] (lexically)
this.c[] < this.Un[] (lexically)
this.c[] <= this.Un[] (lexically)
this.c[] < this.Ln[] (lexically)
this.c[] <= this.Ln[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.Ln[] (lexically)
this.Lb[] < this.Un[] (lexically)
this.Lb[] <= this.Un[] (lexically)
this.Un[] > this.Ln[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.inverse(double[][]):::EXIT
this.B == orig(this.B)
this.B == orig(arg0)
this.B.getClass().getName() == return.getClass().getName()
this.B[] == arg0[]
this.N == orig(this.N)
this.N.getClass().getName() == return.getClass().getName()
this.N[] == orig(this.N[])
this.xb == orig(this.xb)
this.xb[] == orig(this.xb[])
this.xn == orig(this.xn)
this.xn[] == orig(this.xn[])
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == orig(this.cn[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A.getClass().getName() == return.getClass().getName()
this.A[] == orig(this.A[])
this.dual == orig(this.dual)
this.rq == orig(this.rq)
this.rq[] == orig(this.rq[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == this.U
this.Un == orig(this.Un)
this.Un == orig(this.U)
this.Un[] == this.U[]
this.Un[] == orig(this.Un[])
this.Un[] == orig(this.U[])
this.Ln == this.L
this.Ln == orig(this.Ln)
this.Ln == orig(this.L)
this.Ln[] == this.L[]
this.Ln[] == orig(this.Ln[])
this.Ln[] == orig(this.L[])
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == size(return[])
this.m == orig(size(this.B[]))
this.m == orig(size(this.N[]))
this.m == orig(size(this.xn[]))-1
this.m == orig(size(this.cb[]))
this.m == orig(size(this.cn[]))-1
this.m == orig(size(this.b[]))
this.m == orig(size(this.In[]))-1
this.m == orig(size(this.Ib[]))
this.m == orig(size(this.A[]))
this.m == orig(size(this.Ub[]))
this.m == orig(size(this.Lb[]))
this.m == orig(size(this.Un[]))-1
this.m == orig(size(this.Ln[]))-1
this.m == orig(size(this.U[]))-1
this.m == orig(size(this.L[]))-1
this.m == orig(size(arg0[]))
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
arg0[] == orig(this.B[])
arg0[] == orig(arg0[])
return.getClass().getName() == orig(this.B.getClass().getName())
return.getClass().getName() == orig(this.N.getClass().getName())
return.getClass().getName() == orig(this.A.getClass().getName())
return.getClass().getName() == orig(arg0.getClass().getName())
size(this.xb[]) == orig(size(this.rq[]))-1
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
size(this.xn[]) == orig(size(this.cn[]))
size(this.xn[]) == orig(size(this.In[]))
size(this.xn[]) == orig(size(this.Un[]))
size(this.xn[]) == orig(size(this.Ln[]))
size(this.xn[]) == orig(size(this.U[]))
size(this.xn[]) == orig(size(this.L[]))
this.B != null
this.N != null
this.xn != null
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.nart == 1
arg0[] elements != null
return != null
return.getClass().getName() == double[][].class
return[] elements != null
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xn[] >= this.Ln[] (elementwise)
this.cb[] < this.Ub[] (elementwise)
this.cn[] < this.Ub[] (lexically)
this.cn[] < this.Lb[] (lexically)
this.cn[] < this.Un[] (elementwise)
this.cn[] < this.Ln[] (lexically)
this.b[] < this.Un[] (lexically)
this.b[] <= this.Un[] (lexically)
this.In.getClass().getName() != return.getClass().getName()
this.c[] < this.Lb[] (lexically)
this.c[] <= this.Lb[] (lexically)
this.c[] < this.Un[] (lexically)
this.c[] <= this.Un[] (lexically)
this.c[] < this.Ln[] (lexically)
this.c[] <= this.Ln[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.Ln[] (lexically)
this.Lb[] < this.Un[] (lexically)
this.Lb[] <= this.Un[] (lexically)
this.Un[] > this.Ln[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.isColumn(double[], double[][]):::ENTER
this.B.getClass().getName() == arg1.getClass().getName()
this.xb == this.xn
this.xb == this.dual
this.xb == this.rq
this.cn[] == this.Un[]
this.cn[] == this.Ln[]
this.m == size(arg0[])
this.m == size(arg1[])
size(this.cb[]) == size(this.Ib[])
size(this.cb[]) == size(this.Ub[])
size(this.cb[]) == size(this.Lb[])
size(this.U[]) == size(this.L[])
this.N == null
this.xb == null
this.cb[] elements one of { -0.0, 9.9999999E7 }
this.cb[] one of { [], [9.9999999E7], [9.9999999E7, -0.0] }
this.cb[] sorted by >
this.cn[] == []
this.In[] == []
this.In[].getClass().getName() == []
this.In[].toString == []
this.Ib[].toString elements one of { "S_R2", "a0" }
this.Ub[] elements == 1.7976931348623157E308
this.Ub[] one of { [], [1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements == 0.0
this.Lb[] one of { [], [0.0], [0.0, 0.0] }
arg0[] elements one of { 0.0, 1.0 }
arg0[] one of { [0.0, 0.0, 1.0], [0.0, 1.0, 0.0], [1.0, 0.0, 0.0] }
size(this.cb[]) one of { 0, 1, 2 }
size(this.U[]) one of { 5, 6 }
this.cb[] >= this.Lb[] (lexically)
this.Lb[] < this.L[] (lexically)
this.Lb[] <= this.L[] (lexically)
this.U[] >= this.L[] (elementwise)
this.m < size(this.U[])-1
this.nart <= size(this.B[])
this.nart <= size(this.cb[])
this.nart >= size(this.cb[])-1
this.nart >= size(this.cn[])
size(this.B[]) >= size(this.cn[])
size(this.B[]) < size(this.U[])-1
size(this.B[])-1 >= size(this.cn[])-1
size(this.cb[]) >= size(this.cn[])
size(this.cb[]) <= size(this.b[])-1
size(this.cb[]) < size(this.U[])-1
size(this.cb[])-1 >= size(this.cn[])-1
size(this.cn[]) < size(this.U[])-1
size(this.c[])-1 <= size(this.U[])
===========================================================================
algorithms.SimplexAlgorithm.isColumn(double[], double[][]):::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == orig(this.B.getClass().getName())
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B.getClass().getName() == orig(arg1.getClass().getName())
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.xb == this.xn
this.xb == this.dual
this.xb == this.rq
this.xb == orig(this.xb)
this.xb == orig(this.xn)
this.xb == orig(this.dual)
this.xb == orig(this.rq)
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == this.Un[]
this.cn[] == this.Ln[]
this.cn[] == orig(this.cn[])
this.cn[] == orig(this.Un[])
this.cn[] == orig(this.Ln[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A[] == orig(this.A[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == orig(this.Un)
this.Ln == orig(this.Ln)
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.m == orig(this.m)
this.m == orig(size(this.b[]))
this.m == orig(size(this.A[]))
this.m == orig(size(arg0[]))
this.m == orig(size(arg1[]))
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
size(this.cb[]) == size(this.Ib[])
size(this.cb[]) == size(this.Ub[])
size(this.cb[]) == size(this.Lb[])
size(this.cb[]) == orig(size(this.Ib[]))
size(this.cb[]) == orig(size(this.Ub[]))
size(this.cb[]) == orig(size(this.Lb[]))
size(this.cn[]) == orig(size(this.In[]))
size(this.U[]) == size(this.L[])
size(this.U[]) == orig(size(this.L[]))
this.N == null
this.xb == null
this.cb[] elements one of { -0.0, 9.9999999E7 }
this.cb[] one of { [], [9.9999999E7], [9.9999999E7, -0.0] }
this.cb[] sorted by >
this.cn[] == []
this.In[] == []
this.In[].getClass().getName() == []
this.In[].toString == []
this.Ib[].toString elements one of { "S_R2", "a0" }
this.Ub[] elements == 1.7976931348623157E308
this.Ub[] one of { [], [1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements == 0.0
this.Lb[] one of { [], [0.0], [0.0, 0.0] }
arg0[] elements one of { 0.0, 1.0 }
arg0[] one of { [0.0, 0.0, 1.0], [0.0, 1.0, 0.0], [1.0, 0.0, 0.0] }
return one of { -1, 4 }
size(this.cb[]) one of { 0, 1, 2 }
size(this.U[]) one of { 5, 6 }
this.cb[] >= this.Lb[] (lexically)
this.Lb[] < this.L[] (lexically)
this.Lb[] <= this.L[] (lexically)
this.U[] >= this.L[] (elementwise)
this.m != return
this.m < size(this.U[])-1
this.nart != return
this.nart <= size(this.B[])
this.nart <= size(this.cb[])
this.nart >= size(this.cb[])-1
this.nart >= size(this.cn[])
this.nart < size(arg0[])-1
return != size(this.B[])
return >= size(this.B[])-1
return != size(this.cb[])
return >= size(this.cb[])-1
return != size(this.cn[])
return >= size(this.cn[])-1
return < size(this.c[])-1
return <= size(this.U[])-1
return != size(arg0[])-1
size(this.B[]) >= size(this.cn[])
size(this.B[]) < size(this.U[])-1
size(this.B[]) != size(arg0[])-1
size(this.B[])-1 >= size(this.cn[])-1
size(this.B[])-1 <= size(arg0[])-1
size(this.cb[]) >= size(this.cn[])
size(this.cb[]) < size(this.U[])-1
size(this.cb[]) <= size(arg0[])-1
size(this.cb[])-1 >= size(this.cn[])-1
size(this.cn[]) < size(this.U[])-1
size(this.c[])-1 <= size(this.U[])
===========================================================================
algorithms.SimplexAlgorithm.lowestIndex(double[]):::ENTER
this.rq == arg0
this.rq[] == arg0[]
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.Ln[] == this.L[]
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == size(arg0[])-1
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
size(this.xn[]) == size(arg0[])
this.B != null
this.N != null
this.xb != null
this.xn != null
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.rq != null
this.Ub[] one of { [100.0, 1.7976931348623157E308, 1.7976931348623157E308], [200.0, 1.7976931348623157E308, 1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Ub[] sorted by <=
this.nart == 1
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xn[] > this.rq[] (lexically)
this.xn[] >= this.rq[] (lexically)
this.xn[] >= this.Ln[] (elementwise)
this.cb[] < this.Ub[] (elementwise)
this.cn[] < this.Ub[] (lexically)
this.cn[] < this.Lb[] (lexically)
this.cn[] < this.Un[] (elementwise)
this.cn[] < this.Ln[] (lexically)
this.b[] > this.rq[] (lexically)
this.b[] >= this.rq[] (lexically)
this.b[] < this.Ub[] (elementwise)
this.b[] < this.Un[] (lexically)
this.b[] <= this.Un[] (lexically)
this.c[] < this.Un[] (lexically)
this.c[] <= this.Un[] (lexically)
this.rq[] < this.Ln[] (lexically)
this.rq[] <= this.Ln[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.Ln[] (lexically)
this.Lb[] < this.Un[] (lexically)
this.Lb[] <= this.Un[] (lexically)
this.Un[] > this.Ln[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.lowestIndex(double[]):::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == orig(this.B.getClass().getName())
this.B.getClass().getName() == orig(this.N.getClass().getName())
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.N[] == orig(this.N[])
this.xb == orig(this.xb)
this.xb[] == orig(this.xb[])
this.xn == orig(this.xn)
this.xn[] == orig(this.xn[])
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == orig(this.cn[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A[] == orig(this.A[])
this.dual == orig(this.dual)
this.rq == orig(this.rq)
this.rq == orig(arg0)
this.rq[] == arg0[]
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == this.U
this.Un == orig(this.Un)
this.Un == orig(this.U)
this.Un[] == this.U[]
this.Un[] == orig(this.Un[])
this.Un[] == orig(this.U[])
this.Ln == this.L
this.Ln == orig(this.Ln)
this.Ln == orig(this.L)
this.Ln[] == this.L[]
this.Ln[] == orig(this.Ln[])
this.Ln[] == orig(this.L[])
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == size(arg0[])-1
this.m == orig(size(this.B[]))
this.m == orig(size(this.N[]))
this.m == orig(size(this.xb[]))
this.m == orig(size(this.xn[]))-1
this.m == orig(size(this.cb[]))
this.m == orig(size(this.cn[]))-1
this.m == orig(size(this.b[]))
this.m == orig(size(this.In[]))-1
this.m == orig(size(this.Ib[]))
this.m == orig(size(this.A[]))
this.m == orig(size(this.rq[]))-1
this.m == orig(size(this.Ub[]))
this.m == orig(size(this.Lb[]))
this.m == orig(size(this.Un[]))-1
this.m == orig(size(this.Ln[]))-1
this.m == orig(size(this.U[]))-1
this.m == orig(size(this.L[]))-1
this.m == orig(size(arg0[]))-1
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
arg0[] == orig(this.rq[])
arg0[] == orig(arg0[])
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
size(this.xn[]) == orig(size(this.cn[]))
size(this.xn[]) == orig(size(this.In[]))
size(this.xn[]) == orig(size(this.rq[]))
size(this.xn[]) == orig(size(this.Un[]))
size(this.xn[]) == orig(size(this.Ln[]))
size(this.xn[]) == orig(size(this.U[]))
size(this.xn[]) == orig(size(this.L[]))
size(this.xn[]) == orig(size(arg0[]))
this.B != null
this.N != null
this.xb != null
this.xn != null
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.rq != null
this.Ub[] one of { [100.0, 1.7976931348623157E308, 1.7976931348623157E308], [200.0, 1.7976931348623157E308, 1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Ub[] sorted by <=
this.nart == 1
return >= 0
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xn[] >= this.Ln[] (elementwise)
this.xn[] > arg0[] (lexically)
this.xn[] >= arg0[] (lexically)
this.cb[] < this.Ub[] (elementwise)
this.cn[] < this.Ub[] (lexically)
this.cn[] < this.Lb[] (lexically)
this.cn[] < this.Un[] (elementwise)
this.cn[] < this.Ln[] (lexically)
this.b[] < this.Ub[] (elementwise)
this.b[] < this.Un[] (lexically)
this.b[] <= this.Un[] (lexically)
this.b[] > arg0[] (lexically)
this.b[] >= arg0[] (lexically)
this.c[] < this.Un[] (lexically)
this.c[] <= this.Un[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.Ln[] (lexically)
this.Ub[] > arg0[] (lexically)
this.Ub[] >= arg0[] (lexically)
this.Lb[] < this.Un[] (lexically)
this.Lb[] <= this.Un[] (lexically)
this.Un[] > this.Ln[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.Un[] > arg0[] (lexically)
this.Un[] >= arg0[] (lexically)
this.Ln[] > arg0[] (lexically)
this.Ln[] >= arg0[] (lexically)
this.m >= return
this.Ib[this.nart] in this.I[]
return < size(this.c[])-1
===========================================================================
algorithms.SimplexAlgorithm.phase2():::ENTER
this.xb == this.dual
this.xb == this.rq
this.xn[] == this.Ln[]
this.xn[] == this.L[]
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
this.In[this.m] == this.I[this.m]
this.In[this.m-1] == this.I[this.m-1]
this.In[this.nart] == this.I[this.nart]
this.In[this.nart-1] == this.I[this.nart-1]
this.Ib[this.m-1] == this.I[this.n-1]
this.xb == null
this.xn[] elements one of { 0.0, 1.0, 76.0 }
this.xn[] one of { [1.0, 76.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0] }
this.cb[] == [9.9999999E7, -0.0, -0.0]
this.cb[] elements one of { -0.0, 9.9999999E7 }
this.cn[] == [-7.0, -8.0, -4.0, -0.0]
this.In[] contains no nulls and has only one value, of length 4
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.In[].toString == [x1, x2, x3, S_R1]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.Ib[].toString == [a0, S_R2, S_R3]
this.Ib[].toString elements one of { "S_R2", "S_R3", "a0" }
this.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.Ub[] elements == 1.7976931348623157E308
this.Lb[] == [0.0, 0.0, 0.0]
this.Lb[] elements == 0.0
this.Un[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308] }
this.nart == 1
this.In[this.m] has only one value
this.In[this.m-1] has only one value
this.In[this.nart] has only one value
this.In[this.nart-1] has only one value
this.Ib[this.m-1] has only one value
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.phase2():::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == orig(this.B.getClass().getName())
this.B.getClass().getName() == orig(this.N.getClass().getName())
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.N[] == orig(this.N[])
this.xn == orig(this.xn)
this.cb == orig(this.cb)
this.cn == orig(this.cn)
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.Ib == orig(this.Ib)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A[] == orig(this.A[])
this.dual == orig(this.xb)
this.dual == orig(this.dual)
this.dual == orig(this.rq)
this.Ub == orig(this.Ub)
this.Lb == orig(this.Lb)
this.Un == this.U
this.Un == orig(this.Un)
this.Un == orig(this.U)
this.Un[] == this.U[]
this.Ln == this.L
this.Ln == orig(this.Ln)
this.Ln == orig(this.L)
this.Ln[] == this.L[]
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == orig(size(this.B[]))
this.m == orig(size(this.N[]))
this.m == orig(size(this.xn[]))-1
this.m == orig(size(this.cb[]))
this.m == orig(size(this.cn[]))-1
this.m == orig(size(this.b[]))
this.m == orig(size(this.In[]))-1
this.m == orig(size(this.Ib[]))
this.m == orig(size(this.A[]))
this.m == orig(size(this.Ub[]))
this.m == orig(size(this.Lb[]))
this.m == orig(size(this.Un[]))-1
this.m == orig(size(this.Ln[]))-1
this.m == orig(size(this.U[]))-1
this.m == orig(size(this.L[]))-1
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
size(this.xn[]) == orig(size(this.xn[]))
size(this.xn[]) == orig(size(this.cn[]))
size(this.xn[]) == orig(size(this.In[]))
size(this.xn[]) == orig(size(this.Un[]))
size(this.xn[]) == orig(size(this.Ln[]))
size(this.xn[]) == orig(size(this.U[]))
size(this.xn[]) == orig(size(this.L[]))
this.Ib[this.nart] == orig(this.Ib[post(this.nart)])
this.Ib[this.nart] == orig(this.Ib[this.nart])
this.I[this.m] == orig(this.In[post(this.m)])
this.I[this.m] == orig(this.In[this.m])
this.I[this.m-1] == orig(this.In[post(this.m)-1])
this.I[this.m-1] == orig(this.In[this.m-1])
orig(this.Ib[post(this.m)-1]) == this.I[this.n-1]
this.I[this.n-1] == orig(this.Ib[this.m-1])
this.I[this.nart] == orig(this.In[post(this.nart)])
this.I[this.nart] == orig(this.In[this.nart])
this.I[this.nart-1] == orig(this.In[post(this.nart)-1])
this.I[this.nart-1] == orig(this.In[this.nart-1])
this.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] }
this.cb[] elements one of { -8.0, -4.0, -0.0 }
this.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] }
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] }
this.Ub[] elements one of { 200.0, 1.7976931348623157E308 }
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements one of { 0.0, 76.0 }
this.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] }
this.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] }
this.nart == 1
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.primalfo():::ENTER
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.Ln[] == this.L[]
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
this.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.xb[] sorted by >
this.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] }
this.cb[] elements one of { -8.0, -4.0, -0.0 }
this.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.cb[] sorted by >=
this.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] }
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] }
this.Ub[] elements one of { 200.0, 1.7976931348623157E308 }
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Ub[] sorted by >=
this.Lb[] elements one of { 0.0, 76.0 }
this.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] }
this.Lb[] sorted by <=
this.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] }
this.nart == 1
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xb[] > this.cb[] (elementwise)
this.xb[] > this.cn[] (lexically)
this.xb[] >= this.cn[] (lexically)
this.xb[] > this.rq[] (lexically)
this.xb[] >= this.rq[] (lexically)
this.xb[] > this.Lb[] (elementwise)
this.xn[] >= this.Ln[] (elementwise)
this.cb[] > this.cn[] (lexically)
this.cb[] >= this.cn[] (lexically)
this.cb[] < this.b[] (elementwise)
this.cb[] < this.Ub[] (elementwise)
this.cb[] <= this.Lb[] (elementwise)
this.cb[] < this.Un[] (lexically)
this.cb[] <= this.Un[] (lexically)
this.cn[] <= this.rq[] (elementwise)
this.cn[] < this.Un[] (elementwise)
this.b[] > this.Lb[] (elementwise)
this.rq[] < this.Un[] (elementwise)
this.Ub[] > this.Lb[] (elementwise)
this.Un[] >= this.Ln[] (elementwise)
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.primalfo():::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == orig(this.B.getClass().getName())
this.B.getClass().getName() == orig(this.N.getClass().getName())
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.N[] == orig(this.N[])
this.xb == orig(this.xb)
this.xb[] == orig(this.xb[])
this.xn == orig(this.xn)
this.xn[] == orig(this.xn[])
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == orig(this.cn[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A[] == orig(this.A[])
this.dual == orig(this.dual)
this.dual[] == orig(this.dual[])
this.rq == orig(this.rq)
this.rq[] == orig(this.rq[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == this.U
this.Un == orig(this.Un)
this.Un == orig(this.U)
this.Un[] == this.U[]
this.Un[] == orig(this.Un[])
this.Un[] == orig(this.U[])
this.Ln == this.L
this.Ln == orig(this.Ln)
this.Ln == orig(this.L)
this.Ln[] == this.L[]
this.Ln[] == orig(this.Ln[])
this.Ln[] == orig(this.L[])
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == orig(size(this.B[]))
this.m == orig(size(this.N[]))
this.m == orig(size(this.xb[]))
this.m == orig(size(this.xn[]))-1
this.m == orig(size(this.cb[]))
this.m == orig(size(this.cn[]))-1
this.m == orig(size(this.b[]))
this.m == orig(size(this.In[]))-1
this.m == orig(size(this.Ib[]))
this.m == orig(size(this.A[]))
this.m == orig(size(this.dual[]))
this.m == orig(size(this.rq[]))-1
this.m == orig(size(this.Ub[]))
this.m == orig(size(this.Lb[]))
this.m == orig(size(this.Un[]))-1
this.m == orig(size(this.Ln[]))-1
this.m == orig(size(this.U[]))-1
this.m == orig(size(this.L[]))-1
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
size(this.xn[]) == orig(size(this.cn[]))
size(this.xn[]) == orig(size(this.In[]))
size(this.xn[]) == orig(size(this.rq[]))
size(this.xn[]) == orig(size(this.Un[]))
size(this.xn[]) == orig(size(this.Ln[]))
size(this.xn[]) == orig(size(this.U[]))
size(this.xn[]) == orig(size(this.L[]))
this.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.xb[] sorted by >
this.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] }
this.cb[] elements one of { -8.0, -4.0, -0.0 }
this.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.cb[] sorted by >=
this.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] }
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] }
this.Ub[] elements one of { 200.0, 1.7976931348623157E308 }
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Ub[] sorted by >=
this.Lb[] elements one of { 0.0, 76.0 }
this.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] }
this.Lb[] sorted by <=
this.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] }
this.nart == 1
return one of { -2300.4, -2300.0, -2289.6 }
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xb[] > this.cb[] (elementwise)
this.xb[] > this.cn[] (lexically)
this.xb[] >= this.cn[] (lexically)
this.xb[] > this.rq[] (lexically)
this.xb[] >= this.rq[] (lexically)
this.xb[] > this.Lb[] (elementwise)
this.xb[] elements > return
this.xn[] >= this.Ln[] (elementwise)
this.xn[] elements > return
this.cb[] > this.cn[] (lexically)
this.cb[] >= this.cn[] (lexically)
this.cb[] < this.b[] (elementwise)
this.cb[] < this.Ub[] (elementwise)
this.cb[] <= this.Lb[] (elementwise)
this.cb[] < this.Un[] (lexically)
this.cb[] <= this.Un[] (lexically)
this.cb[] elements > return
this.cn[] <= this.rq[] (elementwise)
this.cn[] < this.Un[] (elementwise)
this.cn[] elements > return
this.b[] > this.Lb[] (elementwise)
this.b[] elements > return
this.c[] elements > return
this.dual[] elements > return
this.rq[] < this.Un[] (elementwise)
this.rq[] elements > return
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] elements > return
this.Lb[] elements > return
this.Un[] >= this.Ln[] (elementwise)
this.Un[] elements > return
this.Ln[] elements > return
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.removeColumnFromMatrix(int, double[][]):::ENTER
this.B.getClass().getName() == arg1.getClass().getName()
this.xb == this.xn
this.xb == this.dual
this.xb == this.rq
this.cn[] == this.Un[]
this.cn[] == this.Ln[]
this.m == size(this.B[])
this.m == size(arg1[])
size(this.cb[]) == size(this.Ib[])
size(this.cb[]) == size(this.Ub[])
size(this.cb[]) == size(this.Lb[])
size(this.U[]) == size(this.L[])
this.Ib[this.nart] == this.I[arg0]
this.I[this.m] == this.I[arg0-1]
this.N == null
this.xb == null
this.cb[] elements one of { -0.0, 9.9999999E7 }
this.cb[] one of { [9.9999999E7, -0.0], [9.9999999E7, -0.0, -0.0] }
this.cn[] == []
this.In[] == []
this.In[].getClass().getName() == []
this.In[].toString == []
this.Ib[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String] }
this.Ib[].toString elements one of { "S_R2", "S_R3", "a0" }
this.Ib[].toString one of { [a0, S_R2], [a0, S_R2, S_R3] }
this.Ub[] elements == 1.7976931348623157E308
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements == 0.0
this.Lb[] one of { [0.0, 0.0], [0.0, 0.0, 0.0] }
this.nart == 1
arg0 == 4
size(this.cb[]) one of { 2, 3 }
size(this.U[]) one of { 5, 6 }
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
===========================================================================
algorithms.SimplexAlgorithm.removeColumnFromMatrix(int, double[][]):::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == return.getClass().getName()
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.xb == this.xn
this.xb == this.dual
this.xb == this.rq
this.xb == orig(this.xb)
this.xb == orig(this.xn)
this.xb == orig(this.dual)
this.xb == orig(this.rq)
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == this.Un[]
this.cn[] == this.Ln[]
this.cn[] == orig(this.cn[])
this.cn[] == orig(this.Un[])
this.cn[] == orig(this.Ln[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A.getClass().getName() == return.getClass().getName()
this.A[] == orig(this.A[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == orig(this.Un)
this.Ln == orig(this.Ln)
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(return[])
this.m == orig(size(this.B[]))
this.m == orig(size(this.b[]))
this.m == orig(size(this.A[]))
this.m == orig(size(arg1[]))
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
arg1[] == orig(arg1[])
return.getClass().getName() == orig(this.B.getClass().getName())
return.getClass().getName() == orig(this.A.getClass().getName())
return.getClass().getName() == orig(arg1.getClass().getName())
size(this.cb[]) == size(this.Ib[])
size(this.cb[]) == size(this.Ub[])
size(this.cb[]) == size(this.Lb[])
size(this.cb[]) == orig(size(this.Ib[]))
size(this.cb[]) == orig(size(this.Ub[]))
size(this.cb[]) == orig(size(this.Lb[]))
size(this.cn[]) == orig(size(this.In[]))
size(this.U[]) == size(this.L[])
size(this.U[]) == orig(size(this.L[]))
this.Ib[this.nart] == this.I[orig(arg0)]
this.Ib[this.nart] == orig(this.I[post(arg0)])
this.Ib[this.nart] == orig(this.I[arg0])
this.I[this.m] == this.I[orig(arg0)-1]
this.I[this.m] == orig(this.I[post(arg0)-1])
this.I[this.m] == orig(this.I[arg0-1])
this.N == null
this.xb == null
this.cb[] elements one of { -0.0, 9.9999999E7 }
this.cb[] one of { [9.9999999E7, -0.0], [9.9999999E7, -0.0, -0.0] }
this.cn[] == []
this.In[] == []
this.In[].getClass().getName() == []
this.In[].toString == []
this.Ib[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String] }
this.Ib[].toString elements one of { "S_R2", "S_R3", "a0" }
this.Ib[].toString one of { [a0, S_R2], [a0, S_R2, S_R3] }
this.Ub[] elements == 1.7976931348623157E308
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements == 0.0
this.Lb[] one of { [0.0, 0.0], [0.0, 0.0, 0.0] }
this.nart == 1
return.getClass().getName() == double[][].class
size(this.cb[]) one of { 2, 3 }
size(this.U[]) one of { 5, 6 }
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
===========================================================================
algorithms.SimplexAlgorithm.removeFromVector(int, double[]):::ENTER
this.xb == this.xn
this.xb == this.dual
this.xb == this.rq
this.cn[] == this.Un[]
this.cn[] == this.Ln[]
this.m == size(this.B[])
size(this.cb[]) == size(this.Ib[])
size(this.cb[]) == size(this.Ub[])
size(this.cb[]) == size(this.Lb[])
size(this.L[]) == size(arg1[])
this.Ib[this.nart] == this.I[arg0]
this.I[this.m] == this.I[arg0-1]
this.B != null
this.N == null
this.xb == null
this.cb[] elements one of { -0.0, 9.9999999E7 }
this.cb[] one of { [9.9999999E7, -0.0], [9.9999999E7, -0.0, -0.0] }
this.cb[] sorted by >=
this.cn[] == []
this.In[] == []
this.In[].getClass().getName() == []
this.In[].toString == []
this.Ib[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String] }
this.Ib[].toString elements one of { "S_R2", "S_R3", "a0" }
this.Ib[].toString one of { [a0, S_R2], [a0, S_R2, S_R3] }
this.Ub[] elements == 1.7976931348623157E308
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements == 0.0
this.Lb[] one of { [0.0, 0.0], [0.0, 0.0, 0.0] }
this.nart == 1
arg0 == 4
arg1 != null
size(this.cb[]) one of { 2, 3 }
size(this.L[]) one of { 5, 6 }
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.cb[] < this.Ub[] (elementwise)
this.cb[] >= this.Lb[] (elementwise)
this.cb[] > this.U[] (lexically)
this.cb[] >= this.U[] (lexically)
this.cb[] > this.L[] (lexically)
this.cb[] >= this.L[] (lexically)
this.cb[] > arg1[] (lexically)
this.cb[] >= arg1[] (lexically)
this.cn[] < arg1[] (lexically)
this.cn[] <= arg1[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.U[] (lexically)
this.Ub[] >= this.U[] (lexically)
this.Ub[] > this.L[] (lexically)
this.Ub[] >= this.L[] (lexically)
this.Ub[] > arg1[] (lexically)
this.Ub[] >= arg1[] (lexically)
this.Lb[] < this.L[] (lexically)
this.Lb[] <= this.L[] (lexically)
this.U[] >= arg1[] (lexically)
this.m < size(this.L[])-1
this.nart <= size(this.cb[])-1
arg0 > size(this.cb[])
arg0 <= size(this.U[])
arg0 <= size(this.L[])-1
size(this.B[])-1 <= size(this.cb[])
size(this.cb[]) < size(this.L[])-1
size(this.cb[])-1 > size(this.cn[])
size(this.cn[]) < size(this.U[])-1
size(this.cn[]) < size(this.L[])-1
size(this.c[])-1 <= size(this.L[])
===========================================================================
algorithms.SimplexAlgorithm.removeFromVector(int, double[]):::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == orig(this.B.getClass().getName())
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.xb == this.xn
this.xb == this.dual
this.xb == this.rq
this.xb == orig(this.xb)
this.xb == orig(this.xn)
this.xb == orig(this.dual)
this.xb == orig(this.rq)
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == this.Un[]
this.cn[] == this.Ln[]
this.cn[] == orig(this.cn[])
this.cn[] == orig(this.Un[])
this.cn[] == orig(this.Ln[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A[] == orig(this.A[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == orig(this.Un)
this.Ln == orig(this.Ln)
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.m == orig(this.m)
this.m == size(this.B[])
this.m == orig(size(this.B[]))
this.m == orig(size(this.b[]))
this.m == orig(size(this.A[]))
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
arg1[] == orig(arg1[])
size(this.cb[]) == size(this.Ib[])
size(this.cb[]) == size(this.Ub[])
size(this.cb[]) == size(this.Lb[])
size(this.cb[]) == orig(size(this.Ib[]))
size(this.cb[]) == orig(size(this.Ub[]))
size(this.cb[]) == orig(size(this.Lb[]))
size(this.cn[]) == orig(size(this.In[]))
size(this.L[]) == orig(size(arg1[]))
size(this.L[])-1 == size(return[])
size(arg1[])-1 == size(return[])
size(return[]) == orig(size(this.L[]))-1
size(return[]) == orig(size(arg1[]))-1
this.Ib[this.nart] == this.I[orig(arg0)]
this.Ib[this.nart] == orig(this.I[post(arg0)])
this.Ib[this.nart] == orig(this.I[arg0])
this.I[this.m] == this.I[orig(arg0)-1]
this.I[this.m] == orig(this.I[post(arg0)-1])
this.I[this.m] == orig(this.I[arg0-1])
this.B != null
this.N == null
this.xb == null
this.cb[] elements one of { -0.0, 9.9999999E7 }
this.cb[] one of { [9.9999999E7, -0.0], [9.9999999E7, -0.0, -0.0] }
this.cb[] sorted by >=
this.cn[] == []
this.In[] == []
this.In[].getClass().getName() == []
this.In[].toString == []
this.Ib[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String] }
this.Ib[].toString elements one of { "S_R2", "S_R3", "a0" }
this.Ib[].toString one of { [a0, S_R2], [a0, S_R2, S_R3] }
this.Ub[] elements == 1.7976931348623157E308
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements == 0.0
this.Lb[] one of { [0.0, 0.0], [0.0, 0.0, 0.0] }
this.nart == 1
return != null
size(this.cb[]) one of { 2, 3 }
size(this.L[]) one of { 5, 6 }
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.cb[] < this.Ub[] (elementwise)
this.cb[] >= this.Lb[] (elementwise)
this.cb[] > this.U[] (lexically)
this.cb[] >= this.U[] (lexically)
this.cb[] > this.L[] (lexically)
this.cb[] >= this.L[] (lexically)
this.cb[] > arg1[] (lexically)
this.cb[] >= arg1[] (lexically)
this.cb[] > return[] (lexically)
this.cb[] >= return[] (lexically)
this.cn[] < arg1[] (lexically)
this.cn[] <= arg1[] (lexically)
this.cn[] < return[] (lexically)
this.cn[] <= return[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.U[] (lexically)
this.Ub[] >= this.U[] (lexically)
this.Ub[] > this.L[] (lexically)
this.Ub[] >= this.L[] (lexically)
this.Ub[] > arg1[] (lexically)
this.Ub[] >= arg1[] (lexically)
this.Ub[] > return[] (lexically)
this.Ub[] >= return[] (lexically)
this.Lb[] < this.L[] (lexically)
this.Lb[] <= this.L[] (lexically)
this.U[] >= arg1[] (lexically)
this.U[] > return[] (lexically)
this.U[] >= return[] (lexically)
this.m <= size(return[])-1
this.nart <= size(this.cb[])-1
this.nart < size(return[])-1
arg1[] > return[] (lexically)
arg1[] >= return[] (lexically)
orig(arg0) > size(this.cb[])
orig(arg0) <= size(this.U[])
orig(arg0) <= size(return[])
orig(arg0) >= size(return[])-1
size(this.B[])-1 <= size(this.cb[])
size(this.cb[]) <= size(return[])-1
size(this.cb[])-1 > size(this.cn[])
size(this.cn[]) < size(this.U[])-1
size(this.cn[]) < size(return[])-1
size(this.c[])-1 <= size(this.L[])
size(this.c[])-1 >= size(return[])
size(this.U[]) >= size(return[])
size(this.U[])-1 <= size(return[])
size(this.U[])-1 >= size(return[])-1
===========================================================================
algorithms.SimplexAlgorithm.removeFromVector(int, java.lang.String[]):::ENTER
this.xb == this.xn
this.xb == this.dual
this.xb == this.rq
this.cn[] == this.Un[]
this.cn[] == this.Ln[]
this.In.getClass().getName() == arg1.getClass().getName()
this.m == size(this.B[])
size(this.cb[]) == size(this.Ib[])
size(this.cb[]) == size(this.Ub[])
size(this.cb[]) == size(this.Lb[])
size(this.U[]) == size(this.L[])
size(this.U[]) == size(arg1[])
this.Ib[this.nart] == this.I[arg0]
this.I[this.m] == arg1[this.m]
this.I[this.m] == this.I[arg0-1]
this.I[this.m] == arg1[arg0-1]
this.I[this.m-1] == arg1[this.m-1]
this.I[this.nart] == arg1[this.nart]
this.I[this.nart-1] == arg1[this.nart-1]
this.N == null
this.xb == null
this.cb[] elements one of { -0.0, 9.9999999E7 }
this.cb[] one of { [9.9999999E7, -0.0], [9.9999999E7, -0.0, -0.0] }
this.cn[] == []
this.In[] == []
this.In[].getClass().getName() == []
this.In[].toString == []
this.Ib[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String] }
this.Ib[].toString elements one of { "S_R2", "S_R3", "a0" }
this.Ib[].toString one of { [a0, S_R2], [a0, S_R2, S_R3] }
this.Ub[] elements == 1.7976931348623157E308
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements == 0.0
this.Lb[] one of { [0.0, 0.0], [0.0, 0.0, 0.0] }
this.nart == 1
arg0 == 4
arg1[].toString one of { [x1, x2, x3, S_R1, S_R2, S_R3], [x1, x2, x3, S_R1, S_R3] }
size(this.cb[]) one of { 2, 3 }
size(this.U[]) one of { 5, 6 }
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
arg1[arg0] in this.Ib[]
arg1[arg0] in this.I[]
this.I[this.n-1] in arg1[]
===========================================================================
algorithms.SimplexAlgorithm.removeFromVector(int, java.lang.String[]):::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == orig(this.B.getClass().getName())
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.xb == this.xn
this.xb == this.dual
this.xb == this.rq
this.xb == orig(this.xb)
this.xb == orig(this.xn)
this.xb == orig(this.dual)
this.xb == orig(this.rq)
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == this.Un[]
this.cn[] == this.Ln[]
this.cn[] == orig(this.cn[])
this.cn[] == orig(this.Un[])
this.cn[] == orig(this.Ln[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == return.getClass().getName()
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib.getClass().getName() == return.getClass().getName()
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A[] == orig(this.A[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == orig(this.Un)
this.Ln == orig(this.Ln)
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.m == orig(this.m)
this.m == size(this.B[])
this.m == orig(size(this.B[]))
this.m == orig(size(this.b[]))
this.m == orig(size(this.A[]))
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I.getClass().getName() == return.getClass().getName()
this.I[] == orig(this.I[])
arg1[] == orig(arg1[])
return.getClass().getName() == orig(this.In.getClass().getName())
return.getClass().getName() == orig(this.Ib.getClass().getName())
return.getClass().getName() == orig(this.I.getClass().getName())
return.getClass().getName() == orig(arg1.getClass().getName())
size(this.cb[]) == size(this.Ib[])
size(this.cb[]) == size(this.Ub[])
size(this.cb[]) == size(this.Lb[])
size(this.cb[]) == orig(size(this.Ib[]))
size(this.cb[]) == orig(size(this.Ub[]))
size(this.cb[]) == orig(size(this.Lb[]))
size(this.cn[]) == orig(size(this.In[]))
size(this.U[]) == size(this.L[])
size(this.U[]) == orig(size(this.L[]))
size(this.U[]) == orig(size(arg1[]))
size(this.U[])-1 == size(return[])
size(this.L[])-1 == size(return[])
size(arg1[])-1 == size(return[])
size(return[]) == orig(size(this.U[]))-1
size(return[]) == orig(size(this.L[]))-1
size(return[]) == orig(size(arg1[]))-1
this.Ib[this.nart] == this.I[orig(arg0)]
this.Ib[this.nart] == orig(this.I[post(arg0)])
this.Ib[this.nart] == orig(this.I[arg0])
this.I[this.m] == arg1[this.m]
this.I[this.m-1] == arg1[this.m-1]
arg1[this.m] == return[this.m]
arg1[this.m] == orig(this.I[post(this.m)])
arg1[this.m] == this.I[orig(this.m)]
arg1[this.m] == this.I[orig(arg0)-1]
arg1[this.m] == orig(this.I[post(arg0)-1])
arg1[this.m] == orig(arg1[post(arg0)-1])
arg1[this.m] == arg1[orig(arg0)-1]
arg1[this.m] == return[orig(this.m)]
arg1[this.m] == return[orig(arg0)-1]
arg1[this.m] == orig(this.I[this.m])
arg1[this.m] == orig(this.I[arg0-1])
arg1[this.m] == orig(arg1[arg0-1])
arg1[this.m-1] == return[this.m-1]
arg1[this.m-1] == orig(this.I[post(this.m)-1])
arg1[this.m-1] == this.I[orig(this.m)-1]
arg1[this.m-1] == return[orig(this.m)-1]
arg1[this.m-1] == orig(this.I[this.m-1])
this.I[this.nart] == arg1[this.nart]
this.I[this.nart-1] == arg1[this.nart-1]
arg1[this.nart] == return[this.nart]
arg1[this.nart] == orig(this.I[post(this.nart)])
arg1[this.nart] == this.I[orig(this.nart)]
arg1[this.nart] == return[orig(this.nart)]
arg1[this.nart] == orig(this.I[this.nart])
arg1[this.nart-1] == return[this.nart-1]
arg1[this.nart-1] == orig(this.I[post(this.nart)-1])
arg1[this.nart-1] == this.I[orig(this.nart)-1]
arg1[this.nart-1] == return[orig(this.nart)-1]
arg1[this.nart-1] == orig(this.I[this.nart-1])
this.N == null
this.xb == null
this.cb[] elements one of { -0.0, 9.9999999E7 }
this.cb[] one of { [9.9999999E7, -0.0], [9.9999999E7, -0.0, -0.0] }
this.cn[] == []
this.In[] == []
this.In[].getClass().getName() == []
this.In[].toString == []
this.Ib[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String] }
this.Ib[].toString elements one of { "S_R2", "S_R3", "a0" }
this.Ib[].toString one of { [a0, S_R2], [a0, S_R2, S_R3] }
this.Ub[] elements == 1.7976931348623157E308
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements == 0.0
this.Lb[] one of { [0.0, 0.0], [0.0, 0.0, 0.0] }
this.nart == 1
arg1[].toString one of { [x1, x2, x3, S_R1, S_R2, S_R3], [x1, x2, x3, S_R1, S_R3] }
return.getClass().getName() == java.lang.String[].class
return[].toString one of { [x1, x2, x3, S_R1], [x1, x2, x3, S_R1, S_R3] }
size(this.cb[]) one of { 2, 3 }
size(this.U[]) one of { 5, 6 }
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
arg1[this.m] has only one value
arg1[this.m-1] has only one value
arg1[this.nart] has only one value
arg1[this.nart-1] has only one value
arg1[orig(arg0)] in this.Ib[]
arg1[orig(arg0)] in this.I[]
this.I[this.n-1] in arg1[]
===========================================================================
algorithms.SimplexAlgorithm.replaceBN(java.lang.String, java.lang.String, int, int):::ENTER
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.Ln[] == this.L[]
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
arg0 == this.In[arg2]
arg1 == this.Ib[arg3]
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
this.B != null
this.N != null
this.xb != null
this.xn != null
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.rq != null
this.Ub[] one of { [100.0, 1.7976931348623157E308, 1.7976931348623157E308], [200.0, 1.7976931348623157E308, 1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Ub[] sorted by <=
this.nart == 1
arg2 >= 0
arg3 one of { 0, 2 }
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xn[] > this.rq[] (lexically)
this.xn[] >= this.rq[] (lexically)
this.xn[] >= this.Ln[] (elementwise)
this.cb[] < this.Ub[] (elementwise)
this.cn[] < this.Ub[] (lexically)
this.cn[] < this.Lb[] (lexically)
this.cn[] < this.Un[] (elementwise)
this.cn[] < this.Ln[] (lexically)
this.b[] < this.Ub[] (elementwise)
this.b[] < this.Un[] (lexically)
this.b[] <= this.Un[] (lexically)
this.c[] < this.Un[] (lexically)
this.c[] <= this.Un[] (lexically)
this.rq[] < this.Ln[] (lexically)
this.rq[] <= this.Ln[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.Ln[] (lexically)
this.Lb[] < this.Un[] (lexically)
this.Lb[] <= this.Un[] (lexically)
this.Un[] > this.Ln[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.m >= arg2
this.nart != arg3
this.Ib[this.nart] in this.I[]
arg2 < size(this.c[])-1
arg3 <= size(this.B[])-1
arg3 < size(this.c[])-1
===========================================================================
algorithms.SimplexAlgorithm.replaceBN(java.lang.String, java.lang.String, int, int):::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == orig(this.B.getClass().getName())
this.B.getClass().getName() == orig(this.N.getClass().getName())
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.N[] == orig(this.N[])
this.xb == orig(this.xb)
this.xb[] == orig(this.xb[])
this.xn == orig(this.xn)
this.xn[] == orig(this.xn[])
this.cb == orig(this.cb)
this.cn == orig(this.cn)
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.Ib == orig(this.Ib)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A[] == orig(this.A[])
this.dual == orig(this.dual)
this.rq == orig(this.rq)
this.rq[] == orig(this.rq[])
this.Ub == orig(this.Ub)
this.Lb == orig(this.Lb)
this.Un == this.U
this.Un == orig(this.Un)
this.Un == orig(this.U)
this.Un[] == this.U[]
this.Ln == this.L
this.Ln == orig(this.Ln)
this.Ln == orig(this.L)
this.Ln[] == this.L[]
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == orig(size(this.B[]))
this.m == orig(size(this.N[]))
this.m == orig(size(this.xb[]))
this.m == orig(size(this.xn[]))-1
this.m == orig(size(this.cb[]))
this.m == orig(size(this.cn[]))-1
this.m == orig(size(this.b[]))
this.m == orig(size(this.In[]))-1
this.m == orig(size(this.Ib[]))
this.m == orig(size(this.A[]))
this.m == orig(size(this.rq[]))-1
this.m == orig(size(this.Ub[]))
this.m == orig(size(this.Lb[]))
this.m == orig(size(this.Un[]))-1
this.m == orig(size(this.Ln[]))-1
this.m == orig(size(this.U[]))-1
this.m == orig(size(this.L[]))-1
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
orig(arg0) == orig(this.In[post(arg2)])
orig(arg1) == orig(this.Ib[post(arg3)])
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
size(this.xn[]) == orig(size(this.cn[]))
size(this.xn[]) == orig(size(this.In[]))
size(this.xn[]) == orig(size(this.rq[]))
size(this.xn[]) == orig(size(this.Un[]))
size(this.xn[]) == orig(size(this.Ln[]))
size(this.xn[]) == orig(size(this.U[]))
size(this.xn[]) == orig(size(this.L[]))
this.Ib[this.nart] == orig(this.Ib[post(this.nart)])
this.Ib[this.nart] == orig(this.Ib[this.nart])
this.B != null
this.N != null
this.xb != null
this.xn != null
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.rq != null
this.nart == 1
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xb[] < this.Un[] (lexically)
this.xb[] <= this.Un[] (lexically)
this.xb[] < orig(this.Ub[]) (elementwise)
this.xn[] > this.cb[] (lexically)
this.xn[] >= this.cb[] (lexically)
this.xn[] > this.rq[] (lexically)
this.xn[] >= this.rq[] (lexically)
this.xn[] > orig(this.cn[]) (lexically)
this.xn[] >= orig(this.cn[]) (lexically)
this.xn[] < orig(this.Ub[]) (lexically)
this.xn[] <= orig(this.Ub[]) (lexically)
this.xn[] < orig(this.Un[]) (lexically)
this.xn[] <= orig(this.Un[]) (elementwise)
this.xn[] >= orig(this.Ln[]) (elementwise)
this.cb[] < this.b[] (elementwise)
this.cb[] < this.Ub[] (elementwise)
this.cb[] <= this.Lb[] (elementwise)
this.cb[] < this.Un[] (lexically)
this.cb[] <= this.Un[] (lexically)
this.cb[] < this.Ln[] (lexically)
this.cb[] <= this.Ln[] (lexically)
this.cb[] < orig(this.Ub[]) (elementwise)
this.cb[] < orig(this.Lb[]) (lexically)
this.cb[] <= orig(this.Lb[]) (elementwise)
this.cb[] < orig(this.Un[]) (lexically)
this.cb[] <= orig(this.Un[]) (lexically)
this.cb[] < orig(this.Ln[]) (lexically)
this.cb[] <= orig(this.Ln[]) (lexically)
this.cn[] < this.Ub[] (lexically)
this.cn[] < this.Lb[] (lexically)
this.cn[] < this.Un[] (elementwise)
this.cn[] < this.Ln[] (lexically)
this.cn[] < orig(this.Ub[]) (lexically)
this.cn[] <= orig(this.Ub[]) (lexically)
this.cn[] < orig(this.Lb[]) (lexically)
this.cn[] <= orig(this.Lb[]) (lexically)
this.cn[] < orig(this.Un[]) (lexically)
this.cn[] <= orig(this.Un[]) (lexically)
this.cn[] < orig(this.Ln[]) (lexically)
this.cn[] <= orig(this.Ln[]) (lexically)
this.b[] < this.Un[] (lexically)
this.b[] <= this.Un[] (lexically)
this.b[] < orig(this.Ub[]) (elementwise)
this.b[] < orig(this.Un[]) (lexically)
this.b[] <= orig(this.Un[]) (lexically)
this.c[] < this.Lb[] (lexically)
this.c[] <= this.Lb[] (lexically)
this.c[] < this.Un[] (lexically)
this.c[] <= this.Un[] (lexically)
this.c[] < orig(this.Un[]) (lexically)
this.c[] <= orig(this.Un[]) (lexically)
this.rq[] < this.Ln[] (lexically)
this.rq[] <= this.Ln[] (lexically)
this.rq[] < orig(this.Ub[]) (lexically)
this.rq[] <= orig(this.Ub[]) (lexically)
this.rq[] < orig(this.Un[]) (lexically)
this.rq[] <= orig(this.Un[]) (lexically)
this.rq[] < orig(this.Ln[]) (lexically)
this.rq[] <= orig(this.Ln[]) (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.Ln[] (lexically)
this.Ub[] > orig(this.cn[]) (lexically)
this.Ub[] >= orig(this.cn[]) (lexically)
this.Ub[] > orig(this.Lb[]) (elementwise)
this.Ub[] > orig(this.Ln[]) (lexically)
this.Ub[] >= orig(this.Ln[]) (lexically)
this.Lb[] < this.Un[] (lexically)
this.Lb[] <= this.Un[] (lexically)
this.Lb[] > orig(this.cn[]) (lexically)
this.Lb[] >= orig(this.cn[]) (lexically)
this.Lb[] < orig(this.Ub[]) (elementwise)
this.Lb[] < orig(this.Un[]) (lexically)
this.Lb[] <= orig(this.Un[]) (lexically)
this.Un[] > this.Ln[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.Un[] > orig(this.cn[]) (elementwise)
this.Un[] > orig(this.Lb[]) (lexically)
this.Un[] >= orig(this.Lb[]) (lexically)
this.Un[] > orig(this.Ln[]) (lexically)
this.Un[] >= orig(this.Ln[]) (elementwise)
this.Ln[] > orig(this.cn[]) (lexically)
this.Ln[] >= orig(this.cn[]) (lexically)
this.Ln[] < orig(this.Ub[]) (lexically)
this.Ln[] <= orig(this.Ub[]) (lexically)
this.Ln[] < orig(this.Un[]) (lexically)
this.Ln[] <= orig(this.Un[]) (elementwise)
this.m >= orig(arg2)
this.nart != orig(arg3)
this.Ib[this.nart] in this.I[]
orig(arg2) < size(this.c[])-1
orig(arg3) <= size(this.B[])-1
orig(arg3) < size(this.c[])-1
===========================================================================
algorithms.SimplexAlgorithm.replaceColumnInMatrix(double[], int, double[][]):::ENTER
this.B.getClass().getName() == arg2.getClass().getName()
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.Ln[] == this.L[]
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == size(arg0[])
this.m == size(arg2[])
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
this.B != null
this.N != null
this.xb != null
this.xn != null
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.rq != null
this.Ub[] one of { [100.0, 1.7976931348623157E308, 1.7976931348623157E308], [200.0, 1.7976931348623157E308, 1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Ub[] sorted by <=
this.nart == 1
arg0 != null
arg1 >= 0
arg2 != null
arg2[] elements != null
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xn[] > this.rq[] (lexically)
this.xn[] >= this.rq[] (lexically)
this.xn[] >= this.Ln[] (elementwise)
this.cb[] < this.Ub[] (elementwise)
this.cn[] < this.Ub[] (lexically)
this.cn[] < this.Lb[] (lexically)
this.cn[] < this.Un[] (elementwise)
this.cn[] < this.Ln[] (lexically)
this.cn[] < arg0[] (lexically)
this.cn[] <= arg0[] (lexically)
this.b[] < this.Ub[] (elementwise)
this.b[] < this.Un[] (lexically)
this.b[] <= this.Un[] (lexically)
this.c[] < this.Un[] (lexically)
this.c[] <= this.Un[] (lexically)
this.rq[] < this.Ln[] (lexically)
this.rq[] <= this.Ln[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.Ln[] (lexically)
this.Ub[] > arg0[] (elementwise)
this.Lb[] < this.Un[] (lexically)
this.Lb[] <= this.Un[] (lexically)
this.Un[] > this.Ln[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.Un[] > arg0[] (lexically)
this.Un[] >= arg0[] (lexically)
this.m >= arg1
this.Ib[this.nart] in this.I[]
arg1 < size(this.c[])-1
===========================================================================
algorithms.SimplexAlgorithm.replaceColumnInMatrix(double[], int, double[][]):::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == return.getClass().getName()
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.N.getClass().getName() == return.getClass().getName()
this.N[] == orig(this.N[])
this.xb == orig(this.xb)
this.xb[] == orig(this.xb[])
this.xn == orig(this.xn)
this.xn[] == orig(this.xn[])
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == orig(this.cn[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A.getClass().getName() == return.getClass().getName()
this.A[] == orig(this.A[])
this.dual == orig(this.dual)
this.rq == orig(this.rq)
this.rq[] == orig(this.rq[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == this.U
this.Un == orig(this.Un)
this.Un == orig(this.U)
this.Un[] == this.U[]
this.Un[] == orig(this.Un[])
this.Un[] == orig(this.U[])
this.Ln == this.L
this.Ln == orig(this.Ln)
this.Ln == orig(this.L)
this.Ln[] == this.L[]
this.Ln[] == orig(this.Ln[])
this.Ln[] == orig(this.L[])
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == size(return[])
this.m == orig(size(this.B[]))
this.m == orig(size(this.N[]))
this.m == orig(size(this.xb[]))
this.m == orig(size(this.xn[]))-1
this.m == orig(size(this.cb[]))
this.m == orig(size(this.cn[]))-1
this.m == orig(size(this.b[]))
this.m == orig(size(this.In[]))-1
this.m == orig(size(this.Ib[]))
this.m == orig(size(this.A[]))
this.m == orig(size(this.rq[]))-1
this.m == orig(size(this.Ub[]))
this.m == orig(size(this.Lb[]))
this.m == orig(size(this.Un[]))-1
this.m == orig(size(this.Ln[]))-1
this.m == orig(size(this.U[]))-1
this.m == orig(size(this.L[]))-1
this.m == orig(size(arg0[]))
this.m == orig(size(arg2[]))
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
arg0[] == orig(arg0[])
arg2[] == return[]
arg2[] == orig(arg2[])
return == orig(arg2)
return.getClass().getName() == orig(this.B.getClass().getName())
return.getClass().getName() == orig(this.N.getClass().getName())
return.getClass().getName() == orig(this.A.getClass().getName())
return.getClass().getName() == orig(arg2.getClass().getName())
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
size(this.xn[]) == orig(size(this.cn[]))
size(this.xn[]) == orig(size(this.In[]))
size(this.xn[]) == orig(size(this.rq[]))
size(this.xn[]) == orig(size(this.Un[]))
size(this.xn[]) == orig(size(this.Ln[]))
size(this.xn[]) == orig(size(this.U[]))
size(this.xn[]) == orig(size(this.L[]))
this.B != null
this.N != null
this.xb != null
this.xn != null
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.rq != null
this.Ub[] one of { [100.0, 1.7976931348623157E308, 1.7976931348623157E308], [200.0, 1.7976931348623157E308, 1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Ub[] sorted by <=
this.nart == 1
arg2[] elements != null
return != null
return.getClass().getName() == double[][].class
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xn[] > this.rq[] (lexically)
this.xn[] >= this.rq[] (lexically)
this.xn[] >= this.Ln[] (elementwise)
this.cb[] < this.Ub[] (elementwise)
this.cn[] < this.Ub[] (lexically)
this.cn[] < this.Lb[] (lexically)
this.cn[] < this.Un[] (elementwise)
this.cn[] < this.Ln[] (lexically)
this.cn[] < arg0[] (lexically)
this.cn[] <= arg0[] (lexically)
this.b[] < this.Ub[] (elementwise)
this.b[] < this.Un[] (lexically)
this.b[] <= this.Un[] (lexically)
this.In.getClass().getName() != return.getClass().getName()
this.c[] < this.Un[] (lexically)
this.c[] <= this.Un[] (lexically)
this.rq[] < this.Ln[] (lexically)
this.rq[] <= this.Ln[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.Ln[] (lexically)
this.Ub[] > arg0[] (elementwise)
this.Lb[] < this.Un[] (lexically)
this.Lb[] <= this.Un[] (lexically)
this.Un[] > this.Ln[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.Un[] > arg0[] (lexically)
this.Un[] >= arg0[] (lexically)
this.m >= orig(arg1)
this.Ib[this.nart] in this.I[]
orig(arg1) < size(this.c[])-1
===========================================================================
algorithms.SimplexAlgorithm.replaceI(java.lang.String, java.lang.String):::ENTER
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.Ln[] == this.L[]
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
this.B != null
this.N != null
this.xb != null
this.xn != null
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.rq != null
this.Ub[] one of { [100.0, 1.7976931348623157E308, 1.7976931348623157E308], [200.0, 1.7976931348623157E308, 1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Ub[] sorted by <=
this.nart == 1
arg0 != null
arg1 != null
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xn[] > this.rq[] (lexically)
this.xn[] >= this.rq[] (lexically)
this.xn[] >= this.Ln[] (elementwise)
this.cb[] < this.Ub[] (elementwise)
this.cn[] < this.Ub[] (lexically)
this.cn[] < this.Lb[] (lexically)
this.cn[] < this.Un[] (elementwise)
this.cn[] < this.Ln[] (lexically)
this.b[] < this.Ub[] (elementwise)
this.b[] < this.Un[] (lexically)
this.b[] <= this.Un[] (lexically)
arg0 in this.In[]
arg1 in this.Ib[]
this.c[] < this.Un[] (lexically)
this.c[] <= this.Un[] (lexically)
this.rq[] < this.Ln[] (lexically)
this.rq[] <= this.Ln[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.Ln[] (lexically)
this.Lb[] < this.Un[] (lexically)
this.Lb[] <= this.Un[] (lexically)
this.Un[] > this.Ln[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.replaceI(java.lang.String, java.lang.String):::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == orig(this.B.getClass().getName())
this.B.getClass().getName() == orig(this.N.getClass().getName())
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.N[] == orig(this.N[])
this.xb == orig(this.xb)
this.xb[] == orig(this.xb[])
this.xn == orig(this.xn)
this.xn[] == orig(this.xn[])
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == orig(this.cn[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.Ib == orig(this.Ib)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A[] == orig(this.A[])
this.dual == orig(this.dual)
this.rq == orig(this.rq)
this.rq[] == orig(this.rq[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == this.U
this.Un == orig(this.Un)
this.Un == orig(this.U)
this.Un[] == this.U[]
this.Un[] == orig(this.Un[])
this.Un[] == orig(this.U[])
this.Ln == this.L
this.Ln == orig(this.Ln)
this.Ln == orig(this.L)
this.Ln[] == this.L[]
this.Ln[] == orig(this.Ln[])
this.Ln[] == orig(this.L[])
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == orig(size(this.B[]))
this.m == orig(size(this.N[]))
this.m == orig(size(this.xb[]))
this.m == orig(size(this.xn[]))-1
this.m == orig(size(this.cb[]))
this.m == orig(size(this.cn[]))-1
this.m == orig(size(this.b[]))
this.m == orig(size(this.In[]))-1
this.m == orig(size(this.Ib[]))
this.m == orig(size(this.A[]))
this.m == orig(size(this.rq[]))-1
this.m == orig(size(this.Ub[]))
this.m == orig(size(this.Lb[]))
this.m == orig(size(this.Un[]))-1
this.m == orig(size(this.Ln[]))-1
this.m == orig(size(this.U[]))-1
this.m == orig(size(this.L[]))-1
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
size(this.xn[]) == orig(size(this.cn[]))
size(this.xn[]) == orig(size(this.In[]))
size(this.xn[]) == orig(size(this.rq[]))
size(this.xn[]) == orig(size(this.Un[]))
size(this.xn[]) == orig(size(this.Ln[]))
size(this.xn[]) == orig(size(this.U[]))
size(this.xn[]) == orig(size(this.L[]))
this.Ib[this.nart] == orig(this.Ib[post(this.nart)])
this.Ib[this.nart] == orig(this.Ib[this.nart])
this.B != null
this.N != null
this.xb != null
this.xn != null
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.rq != null
this.Ub[] one of { [100.0, 1.7976931348623157E308, 1.7976931348623157E308], [200.0, 1.7976931348623157E308, 1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Ub[] sorted by <=
this.nart == 1
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xn[] > this.rq[] (lexically)
this.xn[] >= this.rq[] (lexically)
this.xn[] >= this.Ln[] (elementwise)
this.cb[] < this.Ub[] (elementwise)
this.cn[] < this.Ub[] (lexically)
this.cn[] < this.Lb[] (lexically)
this.cn[] < this.Un[] (elementwise)
this.cn[] < this.Ln[] (lexically)
this.b[] < this.Ub[] (elementwise)
this.b[] < this.Un[] (lexically)
this.b[] <= this.Un[] (lexically)
this.c[] < this.Un[] (lexically)
this.c[] <= this.Un[] (lexically)
this.rq[] < this.Ln[] (lexically)
this.rq[] <= this.Ln[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.Ln[] (lexically)
this.Lb[] < this.Un[] (lexically)
this.Lb[] <= this.Un[] (lexically)
this.Un[] > this.Ln[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.returnColumn(int, double[][]):::ENTER
this.B.getClass().getName() == arg1.getClass().getName()
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.Ln[] == this.L[]
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == size(arg1[])
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
this.B != null
this.N != null
this.xb != null
this.xn != null
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.rq != null
this.Ub[] one of { [100.0, 1.7976931348623157E308, 1.7976931348623157E308], [200.0, 1.7976931348623157E308, 1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Ub[] sorted by <=
this.nart == 1
arg0 >= 0
arg1 != null
arg1[] elements != null
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xn[] > this.rq[] (lexically)
this.xn[] >= this.rq[] (lexically)
this.xn[] >= this.Ln[] (elementwise)
this.cb[] < this.Ub[] (elementwise)
this.cn[] < this.Ub[] (lexically)
this.cn[] < this.Lb[] (lexically)
this.cn[] < this.Un[] (elementwise)
this.cn[] < this.Ln[] (lexically)
this.b[] > this.rq[] (lexically)
this.b[] >= this.rq[] (lexically)
this.b[] < this.Ub[] (elementwise)
this.b[] < this.Un[] (lexically)
this.b[] <= this.Un[] (lexically)
this.c[] < this.Un[] (lexically)
this.c[] <= this.Un[] (lexically)
this.rq[] < this.Ln[] (lexically)
this.rq[] <= this.Ln[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.Ln[] (lexically)
this.Lb[] < this.Un[] (lexically)
this.Lb[] <= this.Un[] (lexically)
this.Un[] > this.Ln[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.m >= arg0
this.Ib[this.nart] in this.I[]
arg0 < size(this.c[])-1
===========================================================================
algorithms.SimplexAlgorithm.returnColumn(int, double[][]):::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == orig(this.B.getClass().getName())
this.B.getClass().getName() == orig(this.N.getClass().getName())
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B.getClass().getName() == orig(arg1.getClass().getName())
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.N[] == orig(this.N[])
this.xb == orig(this.xb)
this.xb[] == orig(this.xb[])
this.xn == orig(this.xn)
this.xn[] == orig(this.xn[])
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == orig(this.cn[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A[] == orig(this.A[])
this.dual == orig(this.dual)
this.rq == orig(this.rq)
this.rq[] == orig(this.rq[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == this.U
this.Un == orig(this.Un)
this.Un == orig(this.U)
this.Un[] == this.U[]
this.Un[] == orig(this.Un[])
this.Un[] == orig(this.U[])
this.Ln == this.L
this.Ln == orig(this.Ln)
this.Ln == orig(this.L)
this.Ln[] == this.L[]
this.Ln[] == orig(this.Ln[])
this.Ln[] == orig(this.L[])
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == size(return[])
this.m == orig(size(this.B[]))
this.m == orig(size(this.N[]))
this.m == orig(size(this.xb[]))
this.m == orig(size(this.xn[]))-1
this.m == orig(size(this.cb[]))
this.m == orig(size(this.cn[]))-1
this.m == orig(size(this.b[]))
this.m == orig(size(this.In[]))-1
this.m == orig(size(this.Ib[]))
this.m == orig(size(this.A[]))
this.m == orig(size(this.rq[]))-1
this.m == orig(size(this.Ub[]))
this.m == orig(size(this.Lb[]))
this.m == orig(size(this.Un[]))-1
this.m == orig(size(this.Ln[]))-1
this.m == orig(size(this.U[]))-1
this.m == orig(size(this.L[]))-1
this.m == orig(size(arg1[]))
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
arg1[] == orig(arg1[])
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
size(this.xn[]) == orig(size(this.cn[]))
size(this.xn[]) == orig(size(this.In[]))
size(this.xn[]) == orig(size(this.rq[]))
size(this.xn[]) == orig(size(this.Un[]))
size(this.xn[]) == orig(size(this.Ln[]))
size(this.xn[]) == orig(size(this.U[]))
size(this.xn[]) == orig(size(this.L[]))
this.B != null
this.N != null
this.xb != null
this.xn != null
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.rq != null
this.Ub[] one of { [100.0, 1.7976931348623157E308, 1.7976931348623157E308], [200.0, 1.7976931348623157E308, 1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Ub[] sorted by <=
this.nart == 1
arg1[] elements != null
return != null
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xn[] > this.rq[] (lexically)
this.xn[] >= this.rq[] (lexically)
this.xn[] >= this.Ln[] (elementwise)
this.cb[] < this.Ub[] (elementwise)
this.cn[] < this.Ub[] (lexically)
this.cn[] < this.Lb[] (lexically)
this.cn[] < this.Un[] (elementwise)
this.cn[] < this.Ln[] (lexically)
this.cn[] < return[] (lexically)
this.cn[] <= return[] (lexically)
this.b[] > this.rq[] (lexically)
this.b[] >= this.rq[] (lexically)
this.b[] < this.Ub[] (elementwise)
this.b[] < this.Un[] (lexically)
this.b[] <= this.Un[] (lexically)
this.c[] < this.Un[] (lexically)
this.c[] <= this.Un[] (lexically)
this.rq[] < this.Ln[] (lexically)
this.rq[] <= this.Ln[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.Ln[] (lexically)
this.Ub[] > return[] (elementwise)
this.Lb[] < this.Un[] (lexically)
this.Lb[] <= this.Un[] (lexically)
this.Un[] > this.Ln[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.Un[] > return[] (lexically)
this.Un[] >= return[] (lexically)
this.m >= orig(arg0)
this.Ib[this.nart] in this.I[]
orig(arg0) < size(this.c[])-1
===========================================================================
algorithms.SimplexAlgorithm.rqoptimal(double[]):::ENTER
this.rq == arg0
this.rq[] == arg0[]
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.Ln[] == this.L[]
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == size(arg0[])-1
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
size(this.xn[]) == size(arg0[])
this.B != null
this.N != null
this.xb != null
this.xn != null
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.rq != null
this.nart == 1
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xn[] >= this.Ln[] (elementwise)
this.cb[] < this.Ub[] (elementwise)
this.cn[] < this.Ub[] (lexically)
this.cn[] < this.Lb[] (lexically)
this.cn[] < this.Un[] (elementwise)
this.cn[] < this.Ln[] (lexically)
this.b[] < this.Un[] (lexically)
this.b[] <= this.Un[] (lexically)
this.c[] < this.Lb[] (lexically)
this.c[] <= this.Lb[] (lexically)
this.c[] < this.Un[] (lexically)
this.c[] <= this.Un[] (lexically)
this.c[] < this.Ln[] (lexically)
this.c[] <= this.Ln[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.Ln[] (lexically)
this.Lb[] < this.Un[] (lexically)
this.Lb[] <= this.Un[] (lexically)
this.Un[] > this.Ln[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.rqoptimal(double[]):::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == orig(this.B.getClass().getName())
this.B.getClass().getName() == orig(this.N.getClass().getName())
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.N[] == orig(this.N[])
this.xb == orig(this.xb)
this.xb[] == orig(this.xb[])
this.xn == orig(this.xn)
this.xn[] == orig(this.xn[])
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == orig(this.cn[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A[] == orig(this.A[])
this.dual == orig(this.dual)
this.rq == orig(this.rq)
this.rq == orig(arg0)
this.rq[] == arg0[]
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == this.U
this.Un == orig(this.Un)
this.Un == orig(this.U)
this.Un[] == this.U[]
this.Un[] == orig(this.Un[])
this.Un[] == orig(this.U[])
this.Ln == this.L
this.Ln == orig(this.Ln)
this.Ln == orig(this.L)
this.Ln[] == this.L[]
this.Ln[] == orig(this.Ln[])
this.Ln[] == orig(this.L[])
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == size(arg0[])-1
this.m == orig(size(this.B[]))
this.m == orig(size(this.N[]))
this.m == orig(size(this.xb[]))
this.m == orig(size(this.xn[]))-1
this.m == orig(size(this.cb[]))
this.m == orig(size(this.cn[]))-1
this.m == orig(size(this.b[]))
this.m == orig(size(this.In[]))-1
this.m == orig(size(this.Ib[]))
this.m == orig(size(this.A[]))
this.m == orig(size(this.rq[]))-1
this.m == orig(size(this.Ub[]))
this.m == orig(size(this.Lb[]))
this.m == orig(size(this.Un[]))-1
this.m == orig(size(this.Ln[]))-1
this.m == orig(size(this.U[]))-1
this.m == orig(size(this.L[]))-1
this.m == orig(size(arg0[]))-1
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
arg0[] == orig(this.rq[])
arg0[] == orig(arg0[])
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
size(this.xn[]) == orig(size(this.cn[]))
size(this.xn[]) == orig(size(this.In[]))
size(this.xn[]) == orig(size(this.rq[]))
size(this.xn[]) == orig(size(this.Un[]))
size(this.xn[]) == orig(size(this.Ln[]))
size(this.xn[]) == orig(size(this.U[]))
size(this.xn[]) == orig(size(this.L[]))
size(this.xn[]) == orig(size(arg0[]))
(return == false)  ==>  (this.Lb[] elements one of { 0.0, 1.0, 76.0 })
(return == false)  ==>  (this.Ln[] > arg0[] (lexically))
(return == false)  ==>  (this.Ln[] >= arg0[] (lexically))
(return == false)  ==>  (this.Ub[] elements one of { 100.0, 200.0, 1.7976931348623157E308 })
(return == false)  ==>  (this.Ub[] one of { [100.0, 1.7976931348623157E308, 1.7976931348623157E308], [200.0, 1.7976931348623157E308, 1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] })
(return == false)  ==>  (this.Ub[] sorted by <=)
(return == false)  ==>  (this.b[] < this.Ub[] (elementwise))
(return == false)  ==>  (this.b[] > arg0[] (lexically))
(return == false)  ==>  (this.b[] >= arg0[] (lexically))
(return == false)  ==>  (this.xn[] > arg0[] (lexically))
(return == false)  ==>  (this.xn[] >= arg0[] (lexically))
(return == true)  ==>  (arg0[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] })
(return == true)  ==>  (this.Lb[] elements one of { 0.0, 76.0 })
(return == true)  ==>  (this.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] })
(return == true)  ==>  (this.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] })
(return == true)  ==>  (this.Ub[] elements one of { 200.0, 1.7976931348623157E308 })
(return == true)  ==>  (this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] })
(return == true)  ==>  (this.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] })
(return == true)  ==>  (this.cb[] elements one of { -8.0, -4.0, -0.0 })
(return == true)  ==>  (this.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] })
(return == true)  ==>  (this.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] })
(return == true)  ==>  (this.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] })
(return == true)  ==>  (this.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] })
this.B != null
this.N != null
this.xb != null
this.xn != null
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.rq != null
this.nart == 1
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xn[] >= this.Ln[] (elementwise)
this.cb[] < this.Ub[] (elementwise)
this.cn[] < this.Ub[] (lexically)
this.cn[] < this.Lb[] (lexically)
this.cn[] < this.Un[] (elementwise)
this.cn[] < this.Ln[] (lexically)
this.b[] < this.Un[] (lexically)
this.b[] <= this.Un[] (lexically)
this.c[] < this.Lb[] (lexically)
this.c[] <= this.Lb[] (lexically)
this.c[] < this.Un[] (lexically)
this.c[] <= this.Un[] (lexically)
this.c[] < this.Ln[] (lexically)
this.c[] <= this.Ln[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.Ln[] (lexically)
this.Ub[] > arg0[] (lexically)
this.Ub[] >= arg0[] (lexically)
this.Lb[] < this.Un[] (lexically)
this.Lb[] <= this.Un[] (lexically)
this.Un[] > this.Ln[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.Un[] > arg0[] (lexically)
this.Un[] >= arg0[] (lexically)
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.rqoptimal(double[]):::EXIT;condition="return == true"
this.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] }
this.cb[] elements one of { -8.0, -4.0, -0.0 }
this.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] }
this.Ub[] elements one of { 200.0, 1.7976931348623157E308 }
this.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Lb[] elements one of { 0.0, 76.0 }
this.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] }
this.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] }
arg0[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] }
return == true
===========================================================================
algorithms.SimplexAlgorithm.rqoptimal(double[]):::EXIT;condition="not(return == true)"
this.Ub[] one of { [100.0, 1.7976931348623157E308, 1.7976931348623157E308], [200.0, 1.7976931348623157E308, 1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Ub[] sorted by <=
return == false
this.xn[] > arg0[] (lexically)
this.xn[] >= arg0[] (lexically)
this.b[] < this.Ub[] (elementwise)
this.b[] > arg0[] (lexically)
this.b[] >= arg0[] (lexically)
this.Ln[] > arg0[] (lexically)
this.Ln[] >= arg0[] (lexically)
===========================================================================
algorithms.SimplexAlgorithm.scalartimesmatrix(double, double[][]):::ENTER
this.B.getClass().getName() == arg1.getClass().getName()
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.Ln[] == this.L[]
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == size(arg1[])
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
this.B != null
this.N != null
this.xb != null
this.xn != null
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.rq != null
this.Ub[] one of { [100.0, 1.7976931348623157E308, 1.7976931348623157E308], [200.0, 1.7976931348623157E308, 1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Ub[] sorted by <=
this.nart == 1
arg0 == -1.0
arg1 != null
arg1[] elements != null
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xn[] > this.rq[] (lexically)
this.xn[] >= this.rq[] (lexically)
this.xn[] >= this.Ln[] (elementwise)
this.xn[] elements > arg0
this.cb[] < this.Ub[] (elementwise)
this.cn[] < this.Ub[] (lexically)
this.cn[] < this.Lb[] (lexically)
this.cn[] < this.Un[] (elementwise)
this.cn[] < this.Ln[] (lexically)
this.b[] > this.rq[] (lexically)
this.b[] >= this.rq[] (lexically)
this.b[] < this.Ub[] (elementwise)
this.b[] < this.Un[] (lexically)
this.b[] <= this.Un[] (lexically)
this.b[] elements > arg0
this.c[] < this.Un[] (lexically)
this.c[] <= this.Un[] (lexically)
this.rq[] < this.Ln[] (lexically)
this.rq[] <= this.Ln[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.Ln[] (lexically)
this.Ub[] elements > arg0
this.Lb[] < this.Un[] (lexically)
this.Lb[] <= this.Un[] (lexically)
this.Lb[] elements > arg0
this.Un[] > this.Ln[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.Un[] elements > arg0
this.Ln[] elements > arg0
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.scalartimesmatrix(double, double[][]):::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == return.getClass().getName()
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.N.getClass().getName() == return.getClass().getName()
this.N[] == orig(this.N[])
this.xb == orig(this.xb)
this.xb[] == orig(this.xb[])
this.xn == orig(this.xn)
this.xn[] == orig(this.xn[])
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == orig(this.cn[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A.getClass().getName() == return.getClass().getName()
this.A[] == orig(this.A[])
this.dual == orig(this.dual)
this.rq == orig(this.rq)
this.rq[] == orig(this.rq[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == this.U
this.Un == orig(this.Un)
this.Un == orig(this.U)
this.Un[] == this.U[]
this.Un[] == orig(this.Un[])
this.Un[] == orig(this.U[])
this.Ln == this.L
this.Ln == orig(this.Ln)
this.Ln == orig(this.L)
this.Ln[] == this.L[]
this.Ln[] == orig(this.Ln[])
this.Ln[] == orig(this.L[])
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.rq[])-1
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == size(return[])
this.m == orig(size(this.B[]))
this.m == orig(size(this.N[]))
this.m == orig(size(this.xb[]))
this.m == orig(size(this.xn[]))-1
this.m == orig(size(this.cb[]))
this.m == orig(size(this.cn[]))-1
this.m == orig(size(this.b[]))
this.m == orig(size(this.In[]))-1
this.m == orig(size(this.Ib[]))
this.m == orig(size(this.A[]))
this.m == orig(size(this.rq[]))-1
this.m == orig(size(this.Ub[]))
this.m == orig(size(this.Lb[]))
this.m == orig(size(this.Un[]))-1
this.m == orig(size(this.Ln[]))-1
this.m == orig(size(this.U[]))-1
this.m == orig(size(this.L[]))-1
this.m == orig(size(arg1[]))
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
arg1[] == orig(arg1[])
return.getClass().getName() == orig(this.B.getClass().getName())
return.getClass().getName() == orig(this.N.getClass().getName())
return.getClass().getName() == orig(this.A.getClass().getName())
return.getClass().getName() == orig(arg1.getClass().getName())
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
size(this.xn[]) == orig(size(this.cn[]))
size(this.xn[]) == orig(size(this.In[]))
size(this.xn[]) == orig(size(this.rq[]))
size(this.xn[]) == orig(size(this.Un[]))
size(this.xn[]) == orig(size(this.Ln[]))
size(this.xn[]) == orig(size(this.U[]))
size(this.xn[]) == orig(size(this.L[]))
this.B != null
this.N != null
this.xb != null
this.xn != null
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.rq != null
this.Ub[] one of { [100.0, 1.7976931348623157E308, 1.7976931348623157E308], [200.0, 1.7976931348623157E308, 1.7976931348623157E308], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Ub[] sorted by <=
this.nart == 1
arg1[] elements != null
return != null
return.getClass().getName() == double[][].class
return[] elements != null
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xn[] > this.rq[] (lexically)
this.xn[] >= this.rq[] (lexically)
this.xn[] >= this.Ln[] (elementwise)
this.xn[] elements > orig(arg0)
this.cb[] < this.Ub[] (elementwise)
this.cn[] < this.Ub[] (lexically)
this.cn[] < this.Lb[] (lexically)
this.cn[] < this.Un[] (elementwise)
this.cn[] < this.Ln[] (lexically)
this.b[] > this.rq[] (lexically)
this.b[] >= this.rq[] (lexically)
this.b[] < this.Ub[] (elementwise)
this.b[] < this.Un[] (lexically)
this.b[] <= this.Un[] (lexically)
this.b[] elements > orig(arg0)
this.In.getClass().getName() != return.getClass().getName()
this.c[] < this.Un[] (lexically)
this.c[] <= this.Un[] (lexically)
this.rq[] < this.Ln[] (lexically)
this.rq[] <= this.Ln[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.Ln[] (lexically)
this.Ub[] elements > orig(arg0)
this.Lb[] < this.Un[] (lexically)
this.Lb[] <= this.Un[] (lexically)
this.Lb[] elements > orig(arg0)
this.Un[] > this.Ln[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.Un[] elements > orig(arg0)
this.Ln[] elements > orig(arg0)
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.setNBtoBounds():::ENTER
this.xb == this.xn
this.xb == this.dual
this.xb == this.rq
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.Ln[] == this.L[]
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
size(this.cn[]) == size(this.U[])
size(this.cn[]) == size(this.L[])
this.In[this.m] == this.I[this.m]
this.In[this.m-1] == this.I[this.m-1]
this.In[this.nart] == this.I[this.nart]
this.In[this.nart-1] == this.I[this.nart-1]
this.Ib[this.m-1] == this.I[this.n-1]
this.xb == null
this.cb[] == [9.9999999E7, -0.0, -0.0]
this.cb[] elements one of { -0.0, 9.9999999E7 }
this.cn[] == [-7.0, -8.0, -4.0, -0.0]
this.In[] contains no nulls and has only one value, of length 4
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.In[].toString == [x1, x2, x3, S_R1]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.Ib[].toString == [a0, S_R2, S_R3]
this.Ib[].toString elements one of { "S_R2", "S_R3", "a0" }
this.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.Ub[] elements == 1.7976931348623157E308
this.Lb[] == [0.0, 0.0, 0.0]
this.Lb[] elements == 0.0
this.Un[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308] }
this.Ln[] one of { [1.0, 76.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0] }
this.nart == 1
size(this.cn[]) == 4
this.In[this.m] has only one value
this.In[this.m-1] has only one value
this.In[this.nart] has only one value
this.In[this.nart-1] has only one value
this.Ib[this.m-1] has only one value
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.setNBtoBounds():::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == orig(this.B.getClass().getName())
this.B.getClass().getName() == orig(this.N.getClass().getName())
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.N[] == orig(this.N[])
this.xb == this.dual
this.xb == this.rq
this.xb == orig(this.xb)
this.xb == orig(this.xn)
this.xb == orig(this.dual)
this.xb == orig(this.rq)
this.xn[] == this.Ln[]
this.xn[] == this.L[]
this.xn[] == orig(this.Ln[])
this.xn[] == orig(this.L[])
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == orig(this.cn[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A[] == orig(this.A[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == this.U
this.Un == orig(this.Un)
this.Un == orig(this.U)
this.Un[] == this.U[]
this.Un[] == orig(this.Un[])
this.Un[] == orig(this.U[])
this.Ln == this.L
this.Ln == orig(this.Ln)
this.Ln == orig(this.L)
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == orig(size(this.B[]))
this.m == orig(size(this.N[]))
this.m == orig(size(this.cb[]))
this.m == orig(size(this.cn[]))-1
this.m == orig(size(this.b[]))
this.m == orig(size(this.In[]))-1
this.m == orig(size(this.Ib[]))
this.m == orig(size(this.A[]))
this.m == orig(size(this.Ub[]))
this.m == orig(size(this.Lb[]))
this.m == orig(size(this.Un[]))-1
this.m == orig(size(this.Ln[]))-1
this.m == orig(size(this.U[]))-1
this.m == orig(size(this.L[]))-1
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == orig(size(this.cn[]))
size(this.xn[]) == orig(size(this.In[]))
size(this.xn[]) == orig(size(this.Un[]))
size(this.xn[]) == orig(size(this.U[]))
this.In[this.m] == this.I[this.m]
this.In[this.m] == orig(this.I[post(this.m)])
this.In[this.m] == this.I[orig(this.m)]
this.In[this.m] == orig(this.I[this.m])
this.In[this.m-1] == this.I[this.m-1]
this.In[this.m-1] == orig(this.I[post(this.m)-1])
this.In[this.m-1] == this.I[orig(this.m)-1]
this.In[this.m-1] == orig(this.I[this.m-1])
this.In[this.nart] == this.I[this.nart]
this.In[this.nart] == orig(this.I[post(this.nart)])
this.In[this.nart] == this.I[orig(this.nart)]
this.In[this.nart] == orig(this.I[this.nart])
this.In[this.nart-1] == this.I[this.nart-1]
this.In[this.nart-1] == orig(this.I[post(this.nart)-1])
this.In[this.nart-1] == this.I[orig(this.nart)-1]
this.In[this.nart-1] == orig(this.I[this.nart-1])
this.Ib[this.m-1] == this.I[this.n-1]
this.Ib[this.m-1] == orig(this.I[post(this.n)-1])
this.Ib[this.m-1] == this.I[orig(this.n)-1]
this.Ib[this.m-1] == orig(this.I[this.n-1])
this.xb == null
this.xn[] elements one of { 0.0, 1.0, 76.0 }
this.xn[] one of { [1.0, 76.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0] }
this.cb[] == [9.9999999E7, -0.0, -0.0]
this.cb[] elements one of { -0.0, 9.9999999E7 }
this.cn[] == [-7.0, -8.0, -4.0, -0.0]
this.In[] contains no nulls and has only one value, of length 4
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.In[].toString == [x1, x2, x3, S_R1]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.Ib[].toString == [a0, S_R2, S_R3]
this.Ib[].toString elements one of { "S_R2", "S_R3", "a0" }
this.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.Ub[] elements == 1.7976931348623157E308
this.Lb[] == [0.0, 0.0, 0.0]
this.Lb[] elements == 0.0
this.Un[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308] }
this.nart == 1
this.In[this.m] has only one value
this.In[this.m-1] has only one value
this.In[this.nart] has only one value
this.In[this.nart-1] has only one value
this.Ib[this.m-1] has only one value
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.Ib[this.nart] in this.I[]
===========================================================================
algorithms.SimplexAlgorithm.substractVectors(double[], double[]):::ENTER
this.Un == this.U
this.Un[] == this.U[]
this.Ln == this.L
this.Ln[] == this.L[]
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
size(arg0[]) == size(arg1[])
this.B != null
this.N != null
this.xn != null
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.nart == 1
arg0 != null
arg1 != null
size(arg0[]) one of { 3, 4 }
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xn[] >= this.Ln[] (elementwise)
this.cb[] < this.Ub[] (elementwise)
this.cn[] < this.Ub[] (lexically)
this.cn[] < this.Lb[] (lexically)
this.cn[] < this.Un[] (elementwise)
this.cn[] < this.Ln[] (lexically)
this.b[] < this.Un[] (lexically)
this.b[] <= this.Un[] (lexically)
this.c[] < this.Lb[] (lexically)
this.c[] <= this.Lb[] (lexically)
this.c[] < this.Un[] (lexically)
this.c[] <= this.Un[] (lexically)
this.c[] < this.Ln[] (lexically)
this.c[] <= this.Ln[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.Ln[] (lexically)
this.Ub[] > arg0[] (lexically)
this.Ub[] >= arg0[] (lexically)
this.Lb[] < this.Un[] (lexically)
this.Lb[] <= this.Un[] (lexically)
this.Un[] > this.Ln[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.Un[] > arg0[] (lexically)
this.Un[] >= arg0[] (lexically)
this.m <= size(arg0[])
this.m >= size(arg0[])-1
this.nart < size(arg0[])-1
this.Ib[this.nart] in this.I[]
size(this.B[])-1 <= size(arg0[])-1
size(this.xb[]) <= size(arg0[])
size(this.xb[]) >= size(arg0[])-1
size(this.xb[])-1 <= size(arg0[])-1
size(this.xn[]) >= size(arg0[])
size(this.c[])-1 > size(arg0[])
size(this.rq[]) >= size(arg0[])
===========================================================================
algorithms.SimplexAlgorithm.substractVectors(double[], double[]):::EXIT
this.B == orig(this.B)
this.B.getClass().getName() == orig(this.B.getClass().getName())
this.B.getClass().getName() == orig(this.N.getClass().getName())
this.B.getClass().getName() == orig(this.A.getClass().getName())
this.B[] == orig(this.B[])
this.N == orig(this.N)
this.N[] == orig(this.N[])
this.xb == orig(this.xb)
this.xb[] == orig(this.xb[])
this.xn == orig(this.xn)
this.xn[] == orig(this.xn[])
this.cb == orig(this.cb)
this.cb[] == orig(this.cb[])
this.cn == orig(this.cn)
this.cn[] == orig(this.cn[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.In == orig(this.In)
this.In.getClass().getName() == orig(this.In.getClass().getName())
this.In.getClass().getName() == orig(this.Ib.getClass().getName())
this.In.getClass().getName() == orig(this.I.getClass().getName())
this.In[] == orig(this.In[])
this.Ib == orig(this.Ib)
this.Ib[] == orig(this.Ib[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.status == orig(this.status)
this.A == orig(this.A)
this.A[] == orig(this.A[])
this.dual == orig(this.dual)
this.rq == orig(this.rq)
this.rq[] == orig(this.rq[])
this.Ub == orig(this.Ub)
this.Ub[] == orig(this.Ub[])
this.Lb == orig(this.Lb)
this.Lb[] == orig(this.Lb[])
this.Un == this.U
this.Un == orig(this.Un)
this.Un == orig(this.U)
this.Un[] == this.U[]
this.Un[] == orig(this.Un[])
this.Un[] == orig(this.U[])
this.Ln == this.L
this.Ln == orig(this.Ln)
this.Ln == orig(this.L)
this.Ln[] == this.L[]
this.Ln[] == orig(this.Ln[])
this.Ln[] == orig(this.L[])
this.m == orig(this.m)
this.m == size(this.B[])
this.m == size(this.cb[])
this.m == size(this.cn[])-1
this.m == size(this.In[])-1
this.m == size(this.Ib[])
this.m == size(this.Ub[])
this.m == size(this.Lb[])
this.m == size(this.Un[])-1
this.m == size(this.Ln[])-1
this.m == size(this.U[])-1
this.m == size(this.L[])-1
this.m == orig(size(this.B[]))
this.m == orig(size(this.N[]))
this.m == orig(size(this.xn[]))-1
this.m == orig(size(this.cb[]))
this.m == orig(size(this.cn[]))-1
this.m == orig(size(this.b[]))
this.m == orig(size(this.In[]))-1
this.m == orig(size(this.Ib[]))
this.m == orig(size(this.A[]))
this.m == orig(size(this.Ub[]))
this.m == orig(size(this.Lb[]))
this.m == orig(size(this.Un[]))-1
this.m == orig(size(this.Ln[]))-1
this.m == orig(size(this.U[]))-1
this.m == orig(size(this.L[]))-1
this.n == orig(this.n)
this.n == orig(size(this.c[]))
this.n == orig(size(this.I[]))
this.initialTime == orig(this.initialTime)
this.nart == orig(this.nart)
this.printSolution == orig(this.printSolution)
this.I == orig(this.I)
this.I[] == orig(this.I[])
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
size(this.xb[]) == orig(size(this.rq[]))-1
size(this.xn[]) == size(this.In[])
size(this.xn[]) == size(this.Un[])
size(this.xn[]) == size(this.Ln[])
size(this.xn[]) == orig(size(this.cn[]))
size(this.xn[]) == orig(size(this.In[]))
size(this.xn[]) == orig(size(this.Un[]))
size(this.xn[]) == orig(size(this.Ln[]))
size(this.xn[]) == orig(size(this.U[]))
size(this.xn[]) == orig(size(this.L[]))
size(return[]) == orig(size(arg0[]))
size(return[]) == orig(size(arg1[]))
this.B != null
this.N != null
this.xn != null
this.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.dual == null
this.nart == 1
return != null
size(return[]) one of { 3, 4 }
this.Ib[this.nart] has only one value
this.A[this.nart] has only one value
this.A[this.nart-1] has only one value
this.I[this.nart] has only one value
this.I[this.nart-1] has only one value
this.xn[] >= this.Ln[] (elementwise)
this.cb[] < this.Ub[] (elementwise)
this.cn[] < this.Ub[] (lexically)
this.cn[] < this.Lb[] (lexically)
this.cn[] < this.Un[] (elementwise)
this.cn[] < this.Ln[] (lexically)
this.b[] < this.Un[] (lexically)
this.b[] <= this.Un[] (lexically)
this.c[] < this.Lb[] (lexically)
this.c[] <= this.Lb[] (lexically)
this.c[] < this.Un[] (lexically)
this.c[] <= this.Un[] (lexically)
this.c[] < this.Ln[] (lexically)
this.c[] <= this.Ln[] (lexically)
this.Ub[] > this.Lb[] (elementwise)
this.Ub[] > this.Ln[] (lexically)
this.Ub[] > arg0[] (lexically)
this.Ub[] >= arg0[] (lexically)
this.Ub[] > return[] (lexically)
this.Ub[] >= return[] (lexically)
this.Lb[] < this.Un[] (lexically)
this.Lb[] <= this.Un[] (lexically)
this.Un[] > this.Ln[] (lexically)
this.Un[] >= this.Ln[] (elementwise)
this.Un[] > arg0[] (lexically)
this.Un[] >= arg0[] (lexically)
this.m >= size(arg0[])-1
this.m <= size(return[])
this.nart < size(arg0[])-1
this.Ib[this.nart] in this.I[]
size(this.B[])-1 <= size(arg0[])-1
size(this.xb[]) >= size(arg0[])-1
size(this.xb[]) <= size(return[])
size(this.xb[])-1 <= size(arg0[])-1
size(this.xn[]) >= size(return[])
size(this.c[])-1 > size(return[])
size(this.rq[]) >= size(return[])
===========================================================================
model.Model:::OBJECT
this.A == this.simplex.A
this.A.getClass().getName() == this.simplex.B.getClass().getName()
this.b == this.simplex.b
this.I == this.simplex.I
this.I.getClass().getName() == this.simplex.In.getClass().getName()
this.I[].getClass().getName() == this.simplex.I[].getClass().getName()
this.simplex.B.getClass().getName() == this.simplex.N.getClass().getName()
this.simplex.B.getClass().getName() == this.simplex.A.getClass().getName()
this.simplex.In.getClass().getName() == this.simplex.Ib.getClass().getName()
this.simplex.In.getClass().getName() == this.simplex.I.getClass().getName()
this.simplex.Un == this.simplex.U
this.simplex.Un[] == this.simplex.U[]
this.simplex.Ln == this.simplex.L
this.simplex.Ln[] == this.simplex.L[]
this.simplex.m == size(this.simplex.B[])
this.simplex.m == size(this.simplex.N[])
this.simplex.m == size(this.simplex.xb[])
this.simplex.m == size(this.simplex.xn[])-1
this.simplex.m == size(this.simplex.cb[])
this.simplex.m == size(this.simplex.cn[])-1
this.simplex.m == size(this.simplex.b[])
this.simplex.m == size(this.simplex.In[])-1
this.simplex.m == size(this.simplex.Ib[])
this.simplex.m == size(this.simplex.A[])
this.simplex.m == size(this.simplex.dual[])
this.simplex.m == size(this.simplex.rq[])-1
this.simplex.m == size(this.simplex.Ub[])
this.simplex.m == size(this.simplex.Lb[])
this.simplex.m == size(this.simplex.Un[])-1
this.simplex.m == size(this.simplex.Ln[])-1
this.simplex.m == size(this.simplex.U[])-1
this.simplex.m == size(this.simplex.L[])-1
this.simplex.n == size(this.U[])
this.simplex.n == size(this.L[])
this.simplex.n == size(this.c[])
this.simplex.n == size(this.simplex.c[])
this.simplex.n == size(this.simplex.I[])
this.simplex.printSolution == this.print
size(this.U[]) == size(this.L[])
size(this.U[]) == size(this.c[])
size(this.U[]) == size(this.I[])
size(this.L[]) == size(this.c[])
size(this.L[]) == size(this.I[])
size(this.A[]) == size(this.b[])
size(this.c[]) == size(this.I[])
size(this.simplex.xn[]) == size(this.simplex.cn[])
size(this.simplex.xn[]) == size(this.simplex.In[])
size(this.simplex.xn[]) == size(this.simplex.rq[])
size(this.simplex.xn[]) == size(this.simplex.Un[])
size(this.simplex.xn[]) == size(this.simplex.Ln[])
size(this.simplex.xn[]) == size(this.simplex.U[])
size(this.simplex.xn[]) == size(this.simplex.L[])
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.U[] elements >= 0.0
this.L[] one of { [1.0, 75.1, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
this.L[] elements >= 0.0
this.id.toString one of { "", "l", "r" }
this.A.getClass().getName() == double[][].class
this.A[] elements != null
this.c[] elements >= 0.0
this.b[] elements >= 0.0
this.debugMode == false
this.x == null
this.feasible == false
this.type == null
this.I.getClass().getName() == java.lang.String[].class
this.I[] contains no nulls and has only one value, of length 6
this.I[] elements != null
this.I[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.I[].getClass().getName() elements == java.lang.String.class
this.I[].toString == [x1, x2, x3, S_R1, S_R2, S_R3]
this.integer == false
this.constraints != null
this.constraints[] elements != null
this.constraints[].getClass().getName() elements == model.QBnBconstr.class
this.variables != null
this.variables[] elements != null
this.variables[].getClass().getName() elements == model.QBnBVariable.class
this.ofle.coeffs has only one value
this.ofle.coeffs != null
this.ofle.coeffs[] contains no nulls and has only one value, of length 3
this.ofle.coeffs[] elements != null
this.ofle.coeffs[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
this.ofle.coeffs[].getClass().getName() elements == java.lang.Double.class
this.ofle.varNames has only one value
this.ofle.varNames != null
this.ofle.varNames[] contains no nulls and has only one value, of length 3
this.ofle.varNames[] elements != null
this.ofle.varNames[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.ofle.varNames[].getClass().getName() elements == java.lang.String.class
this.epsilon == 1.0E-6
this.simplex.B != null
this.simplex.B.getClass().getName() == double[][].class
this.simplex.B[] elements != null
this.simplex.N != null
this.simplex.N[] elements != null
this.simplex.xb != null
this.simplex.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.simplex.xb[] elements >= 0.09999999999999432
this.simplex.xb[] sorted by >
this.simplex.xn != null
this.simplex.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] }
this.simplex.xn[] elements >= 0.0
this.simplex.cb != null
this.simplex.cb[] elements one of { -8.0, -4.0, -0.0 }
this.simplex.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.simplex.cb[] sorted by >=
this.simplex.cn != null
this.simplex.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] }
this.simplex.b != null
this.simplex.b[] == [7.0, 500.3, 500.4]
this.simplex.b[] elements one of { 7.0, 500.3, 500.4 }
this.simplex.b[] sorted by <
this.simplex.In != null
this.simplex.In.getClass().getName() == java.lang.String[].class
this.simplex.In[] elements != null
this.simplex.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.simplex.In[].getClass().getName() elements == java.lang.String.class
this.simplex.Ib != null
this.simplex.Ib[] elements != null
this.simplex.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.simplex.Ib[].getClass().getName() elements == java.lang.String.class
this.simplex.c != null
this.simplex.c[] == [-7.0, -8.0, -4.0, -0.0, -0.0, -0.0]
this.simplex.status == 0
this.simplex.A != null
this.simplex.A[] contains no nulls and has only one value, of length 3
this.simplex.A[] elements != null
this.simplex.dual != null
this.simplex.dual[] elements one of { -4.0, -1.0, 0.0 }
this.simplex.dual[] one of { [-0.0, -0.0, -4.0], [0.0, 0.0, -1.0], [0.0, 0.0, 0.0] }
this.simplex.dual[] sorted by >=
this.simplex.rq != null
this.simplex.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] }
this.simplex.Ub != null
this.simplex.Ub[] elements one of { 200.0, 1.7976931348623157E308 }
this.simplex.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.simplex.Ub[] sorted by >=
this.simplex.Lb != null
this.simplex.Lb[] elements one of { 0.0, 76.0 }
this.simplex.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] }
this.simplex.Lb[] sorted by <=
this.simplex.Un != null
this.simplex.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.simplex.Un[] elements >= 0.0
this.simplex.Ln != null
this.simplex.Ln[] elements one of { 0.0, 1.0, 76.0 }
this.simplex.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] }
this.simplex.n == 6
this.simplex.initialTime == 1.743919623013E12
this.simplex.nart == 1
this.simplex.printSolution == false
this.simplex.I != null
this.simplex.I[] contains no nulls and has only one value, of length 6
this.simplex.I[] elements != null
this.simplex.I[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.simplex.I[].getClass().getName() elements == java.lang.String.class
this.simplex.I[].toString == [x1, x2, x3, S_R1, S_R2, S_R3]
this.print == false
size(this.U[]) == 6
size(this.L[]) == 6
size(this.A[]) == 3
size(this.c[]) == 6
size(this.b[]) == 3
size(this.I[]) == 6
size(this.ofle.coeffs[]) == 3
size(this.ofle.varNames[]) == 3
size(this.simplex.xn[]) == 4
this.A[this.simplex.m-1] has only one value
this.A[this.simplex.nart] has only one value
this.A[this.simplex.nart-1] has only one value
this.I[this.simplex.m] has only one value
this.I[this.simplex.m-1] has only one value
this.I[this.simplex.n-1] has only one value
this.I[this.simplex.nart] has only one value
this.I[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.nart] has only one value
this.U[] > this.L[] (lexically)
this.U[] >= this.L[] (elementwise)
this.U[] > this.c[] (lexically)
this.U[] >= this.c[] (lexically)
this.U[] > this.b[] (lexically)
this.U[] >= this.b[] (lexically)
this.U[] elements >= this.fo
this.U[] < this.simplex.xb[] (lexically)
this.U[] <= this.simplex.xb[] (lexically)
this.U[] > this.simplex.cb[] (lexically)
this.U[] >= this.simplex.cb[] (lexically)
this.U[] > this.simplex.cn[] (lexically)
this.U[] >= this.simplex.cn[] (lexically)
this.U[] > this.simplex.c[] (elementwise)
this.U[] > this.simplex.dual[] (lexically)
this.U[] >= this.simplex.dual[] (lexically)
this.U[] > this.simplex.rq[] (lexically)
this.U[] >= this.simplex.rq[] (lexically)
this.U[] < this.simplex.Un[] (lexically)
this.U[] <= this.simplex.Un[] (lexically)
this.L[] elements >= this.fo
this.L[] < this.simplex.xb[] (lexically)
this.L[] <= this.simplex.xb[] (lexically)
this.L[] > this.simplex.cb[] (lexically)
this.L[] >= this.simplex.cb[] (lexically)
this.L[] > this.simplex.cn[] (lexically)
this.L[] >= this.simplex.cn[] (lexically)
this.L[] >= this.simplex.c[] (elementwise)
this.L[] > this.simplex.dual[] (lexically)
this.L[] >= this.simplex.dual[] (lexically)
this.L[] < this.simplex.Un[] (lexically)
this.L[] <= this.simplex.Un[] (lexically)
this.A.getClass().getName() != this.I.getClass().getName()
this.A.getClass().getName() != this.simplex.In.getClass().getName()
this.A[] == this.simplex.A[] (elementwise)
this.c[] elements >= this.fo
this.c[] < this.simplex.xb[] (lexically)
this.c[] <= this.simplex.xb[] (lexically)
this.c[] > this.simplex.cb[] (lexically)
this.c[] >= this.simplex.cb[] (lexically)
this.c[] > this.simplex.cn[] (lexically)
this.c[] >= this.simplex.cn[] (lexically)
this.c[] + this.simplex.c[] == 0
this.c[] >= this.simplex.c[] (elementwise)
this.c[] > this.simplex.dual[] (lexically)
this.c[] >= this.simplex.dual[] (lexically)
this.c[] < this.simplex.Ub[] (lexically)
this.c[] <= this.simplex.Ub[] (lexically)
this.c[] > this.simplex.Lb[] (lexically)
this.c[] >= this.simplex.Lb[] (lexically)
this.c[] < this.simplex.Un[] (lexically)
this.c[] <= this.simplex.Un[] (lexically)
this.b[] elements >= this.fo
this.b[] < this.simplex.xb[] (lexically)
this.b[] <= this.simplex.xb[] (lexically)
this.b[] > this.simplex.cb[] (elementwise)
this.b[] > this.simplex.cn[] (lexically)
this.b[] >= this.simplex.cn[] (lexically)
this.b[] == this.simplex.b[] (elementwise)
this.b[] > this.simplex.dual[] (elementwise)
this.b[] < this.simplex.Ub[] (lexically)
this.b[] <= this.simplex.Ub[] (lexically)
this.b[] > this.simplex.Lb[] (elementwise)
this.b[] < this.simplex.Un[] (lexically)
this.b[] <= this.simplex.Un[] (lexically)
this.fo < this.epsilon
this.simplex.xb[] elements > this.fo
this.simplex.xn[] elements >= this.fo
this.simplex.b[] elements > this.fo
this.simplex.Ub[] elements > this.fo
this.simplex.Lb[] elements >= this.fo
this.simplex.Un[] elements >= this.fo
this.simplex.Ln[] elements >= this.fo
this.I.getClass().getName() != this.simplex.B.getClass().getName()
this.I[] == this.simplex.I[] (elementwise)
this.simplex.Ib[this.simplex.nart] in this.I[]
this.I[].getClass().getName() == this.simplex.I[].getClass().getName() (elementwise)
this.simplex.xb[] elements > this.epsilon
this.simplex.cb[] elements < this.epsilon
this.simplex.b[] elements > this.epsilon
this.simplex.c[] elements < this.epsilon
this.simplex.dual[] elements < this.epsilon
this.simplex.Ub[] elements > this.epsilon
this.simplex.B.getClass().getName() != this.simplex.In.getClass().getName()
this.simplex.xb[] > this.simplex.cb[] (elementwise)
this.simplex.xb[] > this.simplex.cn[] (lexically)
this.simplex.xb[] >= this.simplex.cn[] (lexically)
this.simplex.xb[] > this.simplex.dual[] (elementwise)
this.simplex.xb[] > this.simplex.rq[] (lexically)
this.simplex.xb[] >= this.simplex.rq[] (lexically)
this.simplex.xb[] < this.simplex.Ub[] (elementwise)
this.simplex.xb[] > this.simplex.Lb[] (elementwise)
this.simplex.xn[] <= this.simplex.Un[] (elementwise)
this.simplex.xn[] >= this.simplex.Ln[] (elementwise)
this.simplex.cb[] > this.simplex.cn[] (lexically)
this.simplex.cb[] >= this.simplex.cn[] (lexically)
this.simplex.cb[] < this.simplex.b[] (elementwise)
this.simplex.cb[] <= this.simplex.dual[] (elementwise)
this.simplex.cb[] < this.simplex.Ub[] (elementwise)
this.simplex.cb[] <= this.simplex.Lb[] (elementwise)
this.simplex.cb[] < this.simplex.Un[] (lexically)
this.simplex.cb[] <= this.simplex.Un[] (lexically)
this.simplex.cn[] < this.simplex.dual[] (lexically)
this.simplex.cn[] <= this.simplex.dual[] (lexically)
this.simplex.cn[] <= this.simplex.rq[] (elementwise)
this.simplex.cn[] < this.simplex.Un[] (elementwise)
this.simplex.b[] > this.simplex.dual[] (elementwise)
this.simplex.b[] > this.simplex.Lb[] (elementwise)
this.simplex.dual[] < this.simplex.Ub[] (elementwise)
this.simplex.dual[] <= this.simplex.Lb[] (elementwise)
this.simplex.dual[] < this.simplex.Un[] (lexically)
this.simplex.dual[] <= this.simplex.Un[] (lexically)
this.simplex.rq[] < this.simplex.Un[] (elementwise)
this.simplex.Ub[] > this.simplex.Lb[] (elementwise)
this.simplex.Un[] >= this.simplex.Ln[] (elementwise)
this.simplex.Ib[this.simplex.nart] in this.simplex.I[]
===========================================================================
model.Model.Model():::EXIT
this.U == this.L
this.U == this.c
this.U == this.b
this.U == null
this.id == null
this.A == null
this.fo == 0.0
this.I == null
this.constraints[] == []
this.constraints[].getClass().getName() == []
this.variables[] == []
this.variables[].getClass().getName() == []
this.ofle == null
this.simplex == null
===========================================================================
model.Model.addConst(model.QBnBconstr):::ENTER
this == arg0.model
this.U == this.L
this.U == this.c
this.U == this.b
this.constraints == arg0.model.constraints
this.variables == arg0.model.variables
this.epsilon == arg0.model.epsilon
this has only one value
this.U == null
this.id == null
this.A == null
this.fo == 0.0
this.I == null
this.constraints has only one value
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle == null
this.simplex == null
arg0.name.toString one of { "R1", "R2", "R3" }
arg0.le.coeffs[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
arg0.le.coeffs[].getClass().getName() elements == java.lang.Double.class
arg0.le.varNames[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
arg0.le.varNames[].getClass().getName() elements == java.lang.String.class
arg0.type == 0
arg0.rs one of { 7.0, 500.3, 500.4 }
arg0.slack == 0.0
arg0.model has only one value
arg0.model.U == null
arg0.model.L == null
arg0.model.id == null
arg0.model.A == null
arg0.model.c == null
arg0.model.b == null
arg0.model.debugMode == false
arg0.model.x == null
arg0.model.feasible == false
arg0.model.fo == 0.0
arg0.model.type == null
arg0.model.I == null
arg0.model.integer == false
arg0.model.constraints[].getClass().getName() elements == model.QBnBconstr.class
arg0.model.variables[] contains no nulls and has only one value, of length 6
arg0.model.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
arg0.model.variables[].getClass().getName() elements == model.QBnBVariable.class
arg0.model.ofle == null
arg0.model.simplex == null
arg0.model.print == false
size(this.constraints[]) one of { 0, 1, 2 }
size(this.variables[]) == 6
size(arg0.le.coeffs[]) == 4
size(arg0.le.varNames[]) == 4
size(arg0.model.constraints[]) one of { 0, 1, 2 }
size(arg0.model.variables[]) == 6
===========================================================================
model.Model.addConst(model.QBnBconstr):::EXIT
this.U == this.L
this.U == this.c
this.U == this.b
this.U == orig(this.U)
this.U == orig(this.L)
this.U == orig(this.c)
this.U == orig(this.b)
this.id == orig(this.id)
this.A == orig(this.A)
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.integer == orig(this.integer)
this.constraints == arg0.model.constraints
this.constraints == orig(this.constraints)
this.constraints == orig(arg0.model.constraints)
this.variables == arg0.model.variables
this.variables == orig(this.variables)
this.variables == orig(arg0.model.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.epsilon == arg0.model.epsilon
this.epsilon == orig(this.epsilon)
this.epsilon == orig(arg0.model.epsilon)
this.simplex == orig(this.simplex)
this.print == orig(this.print)
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.le == orig(arg0.le)
arg0.le.coeffs == orig(arg0.le.coeffs)
arg0.le.coeffs[] == orig(arg0.le.coeffs[])
arg0.le.varNames == orig(arg0.le.varNames)
arg0.le.varNames[] == orig(arg0.le.varNames[])
arg0.type == orig(arg0.type)
arg0.rs == orig(arg0.rs)
arg0.slack == orig(arg0.slack)
arg0.model == orig(this)
arg0.model == orig(arg0.model)
arg0.model.U == orig(arg0.model.U)
arg0.model.L == orig(arg0.model.L)
arg0.model.id == orig(arg0.model.id)
arg0.model.A == orig(arg0.model.A)
arg0.model.c == orig(arg0.model.c)
arg0.model.b == orig(arg0.model.b)
arg0.model.debugMode == orig(arg0.model.debugMode)
arg0.model.x == orig(arg0.model.x)
arg0.model.feasible == orig(arg0.model.feasible)
arg0.model.fo == orig(arg0.model.fo)
arg0.model.type == orig(arg0.model.type)
arg0.model.I == orig(arg0.model.I)
arg0.model.integer == orig(arg0.model.integer)
arg0.model.variables[] == orig(arg0.model.variables[])
arg0.model.ofle == orig(arg0.model.ofle)
arg0.model.simplex == orig(arg0.model.simplex)
arg0.model.print == orig(arg0.model.print)
size(this.constraints[])-1 == orig(size(this.constraints[]))
size(arg0.model.constraints[])-1 == orig(size(arg0.model.constraints[]))
this.U == null
this.id == null
this.A == null
this.fo == 0.0
this.I == null
this.constraints has only one value
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle == null
this.simplex == null
arg0.name.toString one of { "R1", "R2", "R3" }
arg0.le.coeffs[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
arg0.le.coeffs[].getClass().getName() elements == java.lang.Double.class
arg0.le.varNames[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
arg0.le.varNames[].getClass().getName() elements == java.lang.String.class
arg0.type == 0
arg0.rs one of { 7.0, 500.3, 500.4 }
arg0.slack == 0.0
arg0.model has only one value
arg0.model.U == null
arg0.model.L == null
arg0.model.id == null
arg0.model.A == null
arg0.model.c == null
arg0.model.b == null
arg0.model.debugMode == false
arg0.model.x == null
arg0.model.feasible == false
arg0.model.fo == 0.0
arg0.model.type == null
arg0.model.I == null
arg0.model.integer == false
arg0.model.constraints[].getClass().getName() elements == model.QBnBconstr.class
arg0.model.variables[] contains no nulls and has only one value, of length 6
arg0.model.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
arg0.model.variables[].getClass().getName() elements == model.QBnBVariable.class
arg0.model.ofle == null
arg0.model.simplex == null
arg0.model.print == false
size(this.constraints[]) one of { 1, 2, 3 }
size(this.variables[]) == 6
size(arg0.le.coeffs[]) == 4
size(arg0.le.varNames[]) == 4
size(arg0.model.constraints[]) one of { 1, 2, 3 }
size(arg0.model.variables[]) == 6
===========================================================================
model.Model.addObj(model.QBnBLinExp):::ENTER
this has only one value
this.U has only one value
this.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.L has only one value
this.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 75.1 }
this.id == null
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c == null
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle == null
this.simplex == null
arg0 has only one value
arg0.coeffs has only one value
arg0.coeffs[] contains no nulls and has only one value, of length 3
arg0.coeffs[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0.coeffs[].getClass().getName() elements == java.lang.Double.class
arg0.varNames has only one value
arg0.varNames[] contains no nulls and has only one value, of length 3
arg0.varNames[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0.varNames[].getClass().getName() elements == java.lang.String.class
size(this.constraints[]) == 3
size(this.variables[]) == 6
size(arg0.coeffs[]) == 3
size(arg0.varNames[]) == 3
this.fo in this.L[]
===========================================================================
model.Model.addObj(model.QBnBLinExp):::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.A == orig(this.A)
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A[] == orig(this.A[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(arg0)
this.ofle.coeffs == arg0.coeffs
this.ofle.varNames == arg0.varNames
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
arg0.coeffs == orig(arg0.coeffs)
arg0.coeffs[] == orig(arg0.coeffs[])
arg0.varNames == orig(arg0.varNames)
arg0.varNames[] == orig(arg0.varNames[])
this.U has only one value
this.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.L has only one value
this.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 75.1 }
this.id == null
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex == null
arg0.coeffs has only one value
arg0.coeffs[] contains no nulls and has only one value, of length 3
arg0.coeffs[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0.coeffs[].getClass().getName() elements == java.lang.Double.class
arg0.varNames has only one value
arg0.varNames[] contains no nulls and has only one value, of length 3
arg0.varNames[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0.varNames[].getClass().getName() elements == java.lang.String.class
size(this.constraints[]) == 3
size(this.variables[]) == 6
size(arg0.coeffs[]) == 3
size(arg0.varNames[]) == 3
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.addVar(model.QBnBVariable):::ENTER
this.U == this.L
this.U == this.c
this.U == this.b
this has only one value
this.U == null
this.id == null
this.A == null
this.fo == 0.0
this.I == null
this.constraints has only one value
this.constraints[] == []
this.constraints[].getClass().getName() == []
this.variables has only one value
this.ofle == null
this.simplex == null
arg0.lb one of { 0.0, 1.0, 75.1 }
arg0.ub one of { 100.9, 200.4, 1.7976931348623157E308 }
arg0.type one of { 0, 1 }
arg0.value == 0.0
===========================================================================
model.Model.addVar(model.QBnBVariable):::EXIT
this.U == this.L
this.U == this.c
this.U == this.b
this.U == orig(this.U)
this.U == orig(this.L)
this.U == orig(this.c)
this.U == orig(this.b)
this.id == orig(this.id)
this.A == orig(this.A)
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.ofle == orig(this.ofle)
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.print == orig(this.print)
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.lb == orig(arg0.lb)
arg0.ub == orig(arg0.ub)
arg0.type == orig(arg0.type)
arg0.value == orig(arg0.value)
arg0.slack == orig(arg0.slack)
size(this.variables[])-1 == orig(size(this.variables[]))
this.U == null
this.id == null
this.A == null
this.fo == 0.0
this.I == null
this.constraints has only one value
this.constraints[] == []
this.constraints[].getClass().getName() == []
this.variables has only one value
this.ofle == null
this.simplex == null
arg0.lb one of { 0.0, 1.0, 75.1 }
arg0.ub one of { 100.9, 200.4, 1.7976931348623157E308 }
arg0.type one of { 0, 1 }
arg0.value == 0.0
===========================================================================
model.Model.changeSign(double[]):::ENTER
this.c == arg0
this.c[] == arg0[]
size(this.U[]) == size(arg0[])
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
this.A[] contains no nulls and has only one value, of length 3
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
this.simplex == null
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.changeSign(double[]):::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.A == orig(this.A)
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A[] == orig(this.A[])
this.c == orig(this.c)
this.c == orig(arg0)
this.c[] == arg0[]
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.I.getClass().getName() == orig(this.I.getClass().getName())
this.I[] == orig(this.I[])
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.print == orig(this.print)
arg0[] == orig(this.c[])
arg0[] == orig(arg0[])
size(this.U[]) == size(return[])
size(this.L[]) == size(return[])
size(this.A[]) == orig(size(this.b[]))
size(this.c[]) == size(return[])
size(this.I[]) == size(return[])
size(return[]) == orig(size(this.U[]))
size(return[]) == orig(size(this.L[]))
size(return[]) == orig(size(this.c[]))
size(return[]) == orig(size(this.I[]))
size(return[]) == orig(size(arg0[]))
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
this.A[] contains no nulls and has only one value, of length 3
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
this.simplex == null
arg0[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
arg0[] elements >= 0.0
return[] == [-7.0, -8.0, -4.0, -0.0, -0.0, -0.0]
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
size(return[]) == 6
this.fo in this.L[]
this.fo in arg0[]
this.fo in return[]
arg0[] + return[] == 0
===========================================================================
model.Model.doubleIsInteger(double):::ENTER
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A[] == this.simplex.A[]
this.b[] == this.simplex.b[]
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I[] == this.simplex.I[]
this.U has only one value
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L has only one value
this.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.id.toString one of { "", "l" }
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo one of { -2300.4, -2300.0 }
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.simplex.xb[] one of { [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb[] elements one of { -4.0, -0.0 }
this.simplex.cb[] one of { [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.simplex.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0] }
this.simplex.In[].toString one of { [x2, a0, S_R3, x1], [x2, a0, x3, x1] }
this.simplex.Ib[].toString one of { [S_R1, S_R2, S_R3], [S_R1, S_R2, x3] }
this.simplex.dual[] elements one of { -1.0, 0.0 }
this.simplex.dual[] one of { [0.0, 0.0, -1.0], [0.0, 0.0, 0.0] }
this.simplex.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0] }
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb[] == [0.0, 0.0, 0.0]
this.simplex.Lb[] elements == 0.0
this.simplex.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
size(this.constraints[]) == 3
size(this.variables[]) == 6
===========================================================================
model.Model.doubleIsInteger(double):::EXIT701
return == true
orig(arg0) one of { 0.0, 100.0, 200.0 }
orig(arg0) in this.U[]
orig(arg0) in this.simplex.xn[]
orig(arg0) in this.simplex.Un[]
===========================================================================
model.Model.doubleIsInteger(double):::EXIT701;condition="return == true"
===========================================================================
model.Model.doubleIsInteger(double):::EXIT702
this.U[] == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.id has only one value
this.id.toString == ""
this.fo == -2300.4
this.I has only one value
this.ofle has only one value
this.simplex has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.simplex.xn has only one value
this.simplex.cb has only one value
this.simplex.cb[] == [-0.0, -0.0, -4.0]
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, S_R3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.simplex.c has only one value
this.simplex.dual has only one value
this.simplex.dual[] == [0.0, 0.0, -1.0]
this.simplex.rq has only one value
this.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.simplex.Ub has only one value
this.simplex.Lb has only one value
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.simplex.Ln has only one value
return == false
orig(this) has only one value
orig(arg0) == 0.09999999999999432
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.m-1] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.m-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
orig(arg0) in this.simplex.xb[]
===========================================================================
model.Model.doubleIsInteger(double):::EXIT702;condition="not(return == true)"
===========================================================================
model.Model.doubleIsInteger(double):::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.A == orig(this.A)
this.A == orig(this.simplex.A)
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.B.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.N.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.A.getClass().getName())
this.A[] == this.simplex.A[]
this.A[] == orig(this.A[])
this.A[] == orig(this.simplex.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.b == orig(this.simplex.b)
this.b[] == this.simplex.b[]
this.b[] == orig(this.b[])
this.b[] == orig(this.simplex.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.I == orig(this.simplex.I)
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I.getClass().getName() == orig(this.I.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.In.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.Ib.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.I.getClass().getName())
this.I[] == this.simplex.I[]
this.I[] == orig(this.I[])
this.I[] == orig(this.simplex.I[])
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.simplex.B == orig(this.simplex.B)
this.simplex.B[] == orig(this.simplex.B[])
this.simplex.N == orig(this.simplex.N)
this.simplex.N[] == orig(this.simplex.N[])
this.simplex.xb == orig(this.simplex.xb)
this.simplex.xb[] == orig(this.simplex.xb[])
this.simplex.xn == orig(this.simplex.xn)
this.simplex.xn[] == orig(this.simplex.xn[])
this.simplex.cb == orig(this.simplex.cb)
this.simplex.cb[] == orig(this.simplex.cb[])
this.simplex.cn == orig(this.simplex.cn)
this.simplex.cn[] == orig(this.simplex.cn[])
this.simplex.In == orig(this.simplex.In)
this.simplex.In[] == orig(this.simplex.In[])
this.simplex.Ib == orig(this.simplex.Ib)
this.simplex.Ib[] == orig(this.simplex.Ib[])
this.simplex.c == orig(this.simplex.c)
this.simplex.c[] == orig(this.simplex.c[])
this.simplex.status == orig(this.simplex.status)
this.simplex.dual == orig(this.simplex.dual)
this.simplex.dual[] == orig(this.simplex.dual[])
this.simplex.rq == orig(this.simplex.rq)
this.simplex.rq[] == orig(this.simplex.rq[])
this.simplex.Ub == orig(this.simplex.Ub)
this.simplex.Ub[] == orig(this.simplex.Ub[])
this.simplex.Lb == orig(this.simplex.Lb)
this.simplex.Lb[] == orig(this.simplex.Lb[])
this.simplex.Un == orig(this.simplex.Un)
this.simplex.Un == orig(this.simplex.U)
this.simplex.Un[] == orig(this.simplex.Un[])
this.simplex.Un[] == orig(this.simplex.U[])
this.simplex.Ln == orig(this.simplex.Ln)
this.simplex.Ln == orig(this.simplex.L)
this.simplex.Ln[] == orig(this.simplex.Ln[])
this.simplex.Ln[] == orig(this.simplex.L[])
this.simplex.m == orig(this.simplex.m)
this.simplex.m == orig(size(this.A[]))
this.simplex.m == orig(size(this.b[]))
this.simplex.m == orig(size(this.simplex.B[]))
this.simplex.m == orig(size(this.simplex.N[]))
this.simplex.m == orig(size(this.simplex.xb[]))
this.simplex.m == orig(size(this.simplex.xn[]))-1
this.simplex.m == orig(size(this.simplex.cb[]))
this.simplex.m == orig(size(this.simplex.cn[]))-1
this.simplex.m == orig(size(this.simplex.b[]))
this.simplex.m == orig(size(this.simplex.In[]))-1
this.simplex.m == orig(size(this.simplex.Ib[]))
this.simplex.m == orig(size(this.simplex.A[]))
this.simplex.m == orig(size(this.simplex.dual[]))
this.simplex.m == orig(size(this.simplex.rq[]))-1
this.simplex.m == orig(size(this.simplex.Ub[]))
this.simplex.m == orig(size(this.simplex.Lb[]))
this.simplex.m == orig(size(this.simplex.Un[]))-1
this.simplex.m == orig(size(this.simplex.Ln[]))-1
this.simplex.m == orig(size(this.simplex.U[]))-1
this.simplex.m == orig(size(this.simplex.L[]))-1
this.simplex.n == orig(this.simplex.n)
this.simplex.n == orig(size(this.U[]))
this.simplex.n == orig(size(this.L[]))
this.simplex.n == orig(size(this.c[]))
this.simplex.n == orig(size(this.I[]))
this.simplex.n == orig(size(this.simplex.c[]))
this.simplex.n == orig(size(this.simplex.I[]))
this.simplex.initialTime == orig(this.simplex.initialTime)
this.simplex.nart == orig(this.simplex.nart)
this.print == orig(this.simplex.printSolution)
this.print == orig(this.print)
size(this.simplex.xn[]) == orig(size(this.simplex.cn[]))
size(this.simplex.xn[]) == orig(size(this.simplex.In[]))
size(this.simplex.xn[]) == orig(size(this.simplex.rq[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Un[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Ln[]))
size(this.simplex.xn[]) == orig(size(this.simplex.U[]))
size(this.simplex.xn[]) == orig(size(this.simplex.L[]))
(return == false)  <==>  (orig(arg0) == 0.09999999999999432)
(return == false)  ==>  (orig(arg0) in this.simplex.xb[])
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (this.I has only one value)
(return == false)  ==>  (this.U[] == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308])
(return == false)  ==>  (this.U[] elements one of { 100.0, 200.0, 1.7976931348623157E308 })
(return == false)  ==>  (this.fo == -2300.4)
(return == false)  ==>  (this.id has only one value)
(return == false)  ==>  (this.id.toString == "")
(return == false)  ==>  (this.ofle has only one value)
(return == false)  ==>  (this.simplex has only one value)
(return == false)  ==>  (this.simplex.B has only one value)
(return == false)  ==>  (this.simplex.B[] contains no nulls and has only one value, of length 3)
(return == false)  ==>  (this.simplex.B[this.simplex.m-1] has only one value)
(return == false)  ==>  (this.simplex.B[this.simplex.nart-1] has only one value)
(return == false)  ==>  (this.simplex.B[this.simplex.nart] has only one value)
(return == false)  ==>  (this.simplex.Ib has only one value)
(return == false)  ==>  (this.simplex.Ib[] contains no nulls and has only one value, of length 3)
(return == false)  ==>  (this.simplex.Ib[].toString == [S_R1, S_R2, x3])
(return == false)  ==>  (this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" })
(return == false)  ==>  (this.simplex.Ib[this.simplex.m-1] has only one value)
(return == false)  ==>  (this.simplex.Ib[this.simplex.nart-1] has only one value)
(return == false)  ==>  (this.simplex.In has only one value)
(return == false)  ==>  (this.simplex.In[] contains no nulls and has only one value, of length 4)
(return == false)  ==>  (this.simplex.In[].toString == [x2, a0, S_R3, x1])
(return == false)  ==>  (this.simplex.In[this.simplex.m-1] has only one value)
(return == false)  ==>  (this.simplex.In[this.simplex.m] has only one value)
(return == false)  ==>  (this.simplex.In[this.simplex.nart-1] has only one value)
(return == false)  ==>  (this.simplex.In[this.simplex.nart] has only one value)
(return == false)  ==>  (this.simplex.Lb has only one value)
(return == false)  ==>  (this.simplex.Ln has only one value)
(return == false)  ==>  (this.simplex.N has only one value)
(return == false)  ==>  (this.simplex.N[] contains no nulls and has only one value, of length 3)
(return == false)  ==>  (this.simplex.N[this.simplex.m-1] has only one value)
(return == false)  ==>  (this.simplex.N[this.simplex.nart-1] has only one value)
(return == false)  ==>  (this.simplex.N[this.simplex.nart] has only one value)
(return == false)  ==>  (this.simplex.Ub has only one value)
(return == false)  ==>  (this.simplex.Un has only one value)
(return == false)  ==>  (this.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0])
(return == false)  ==>  (this.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 })
(return == false)  ==>  (this.simplex.c has only one value)
(return == false)  ==>  (this.simplex.cb has only one value)
(return == false)  ==>  (this.simplex.cb[] == [-0.0, -0.0, -4.0])
(return == false)  ==>  (this.simplex.cn has only one value)
(return == false)  ==>  (this.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0])
(return == false)  ==>  (this.simplex.dual has only one value)
(return == false)  ==>  (this.simplex.dual[] == [0.0, 0.0, -1.0])
(return == false)  ==>  (this.simplex.rq has only one value)
(return == false)  ==>  (this.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0])
(return == false)  ==>  (this.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 })
(return == false)  ==>  (this.simplex.xb has only one value)
(return == false)  ==>  (this.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432])
(return == false)  ==>  (this.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 })
(return == false)  ==>  (this.simplex.xn has only one value)
(return == true)  <==>  (orig(arg0) one of { 0.0, 100.0, 200.0 })
(return == true)  ==>  (orig(arg0) in this.U[])
(return == true)  ==>  (orig(arg0) in this.simplex.Un[])
(return == true)  ==>  (orig(arg0) in this.simplex.xn[])
(return == true)  ==>  (this.U[] elements >= 0.0)
(return == true)  ==>  (this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] })
(return == true)  ==>  (this.fo one of { -2300.4, -2300.0 })
(return == true)  ==>  (this.id.toString one of { "", "l" })
(return == true)  ==>  (this.simplex.Ib[].toString one of { [S_R1, S_R2, S_R3], [S_R1, S_R2, x3] })
(return == true)  ==>  (this.simplex.In[].toString one of { [x2, a0, S_R3, x1], [x2, a0, x3, x1] })
(return == true)  ==>  (this.simplex.Un[] elements >= 0.0)
(return == true)  ==>  (this.simplex.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] })
(return == true)  ==>  (this.simplex.cb[] one of { [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] })
(return == true)  ==>  (this.simplex.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0] })
(return == true)  ==>  (this.simplex.dual[] one of { [0.0, 0.0, -1.0], [0.0, 0.0, 0.0] })
(return == true)  ==>  (this.simplex.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0] })
(return == true)  ==>  (this.simplex.xb[] one of { [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] })
this.U has only one value
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L has only one value
this.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.id.toString one of { "", "l" }
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo one of { -2300.4, -2300.0 }
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.simplex.xb[] one of { [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb[] elements one of { -4.0, -0.0 }
this.simplex.cb[] one of { [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.simplex.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0] }
this.simplex.In[].toString one of { [x2, a0, S_R3, x1], [x2, a0, x3, x1] }
this.simplex.Ib[].toString one of { [S_R1, S_R2, S_R3], [S_R1, S_R2, x3] }
this.simplex.dual[] elements one of { -1.0, 0.0 }
this.simplex.dual[] one of { [0.0, 0.0, -1.0], [0.0, 0.0, 0.0] }
this.simplex.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0] }
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb[] == [0.0, 0.0, 0.0]
this.simplex.Lb[] elements == 0.0
this.simplex.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
size(this.constraints[]) == 3
size(this.variables[]) == 6
===========================================================================
model.Model.doubleIsInteger(double):::EXIT;condition="return == true"
return == true
orig(arg0) one of { 0.0, 100.0, 200.0 }
orig(arg0) in this.U[]
orig(arg0) in this.simplex.xn[]
orig(arg0) in this.simplex.Un[]
===========================================================================
model.Model.doubleIsInteger(double):::EXIT;condition="not(return == true)"
this.U[] == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.id has only one value
this.id.toString == ""
this.fo == -2300.4
this.I has only one value
this.ofle has only one value
this.simplex has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.simplex.xn has only one value
this.simplex.cb has only one value
this.simplex.cb[] == [-0.0, -0.0, -4.0]
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, S_R3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.simplex.c has only one value
this.simplex.dual has only one value
this.simplex.dual[] == [0.0, 0.0, -1.0]
this.simplex.rq has only one value
this.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.simplex.Ub has only one value
this.simplex.Lb has only one value
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.simplex.Ln has only one value
return == false
orig(this) has only one value
orig(arg0) == 0.09999999999999432
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.m-1] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.m-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
orig(arg0) in this.simplex.xb[]
===========================================================================
model.Model.findCoeffFromName(java.lang.String, model.QBnBLinExp):::ENTER
this has only one value
this.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.U[] sorted by <=
this.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 75.1 }
this.id == null
this.A != null
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b != null
this.b[] elements one of { 0.0, 7.0, 500.3 }
this.b[] one of { [0.0, 0.0, 0.0], [7.0, 0.0, 0.0], [7.0, 500.3, 0.0] }
this.fo == 0.0
this.I == null
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.simplex == null
arg0 != null
arg1 != null
arg1.coeffs != null
arg1.coeffs[] elements != null
arg1.coeffs[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
arg1.coeffs[].getClass().getName() elements == java.lang.Double.class
arg1.varNames != null
arg1.varNames[] elements != null
arg1.varNames[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
arg1.varNames[].getClass().getName() elements == java.lang.String.class
size(this.constraints[]) == 3
size(this.variables[]) == 6
size(arg1.coeffs[]) == 4
size(arg1.varNames[]) == 4
this.U[] > this.L[] (elementwise)
this.U[] > this.c[] (elementwise)
this.U[] elements > this.fo
this.U[] elements > this.epsilon
this.fo in this.L[]
this.fo in this.c[]
this.fo in this.b[]
===========================================================================
model.Model.findCoeffFromName(java.lang.String, model.QBnBLinExp):::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.A == orig(this.A)
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A[] == orig(this.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.print == orig(this.print)
arg0.toString == orig(arg0.toString)
arg1.coeffs == orig(arg1.coeffs)
arg1.coeffs[] == orig(arg1.coeffs[])
arg1.varNames == orig(arg1.varNames)
arg1.varNames[] == orig(arg1.varNames[])
size(this.U[]) == orig(size(this.L[]))
size(this.U[]) == orig(size(this.c[]))
size(this.A[]) == orig(size(this.b[]))
this.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.U[] sorted by <=
this.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 75.1 }
this.id == null
this.A != null
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b != null
this.b[] elements one of { 0.0, 7.0, 500.3 }
this.b[] one of { [0.0, 0.0, 0.0], [7.0, 0.0, 0.0], [7.0, 500.3, 0.0] }
this.fo == 0.0
this.I == null
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.simplex == null
arg1.coeffs != null
arg1.coeffs[] elements != null
arg1.coeffs[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
arg1.coeffs[].getClass().getName() elements == java.lang.Double.class
arg1.varNames != null
arg1.varNames[] elements != null
arg1.varNames[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
arg1.varNames[].getClass().getName() elements == java.lang.String.class
size(this.constraints[]) == 3
size(this.variables[]) == 6
size(arg1.coeffs[]) == 4
size(arg1.varNames[]) == 4
this.U[] > this.L[] (elementwise)
this.U[] > this.c[] (elementwise)
this.U[] elements > this.fo
this.U[] elements > this.epsilon
this.fo in this.L[]
this.fo in this.c[]
this.fo in this.b[]
===========================================================================
model.Model.findCoeffFromNameOF(java.lang.String):::ENTER
this has only one value
this.U has only one value
this.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.L has only one value
this.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 75.1 }
this.id == null
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex == null
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.findCoeffFromNameOF(java.lang.String):::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.A == orig(this.A)
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A[] == orig(this.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.print == orig(this.print)
arg0.toString == orig(arg0.toString)
size(this.U[]) == orig(size(this.L[]))
size(this.U[]) == orig(size(this.c[]))
size(this.A[]) == orig(size(this.b[]))
this.U has only one value
this.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.L has only one value
this.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 75.1 }
this.id == null
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex == null
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.getA():::ENTER
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A[] == this.simplex.A[]
this.b[] == this.simplex.b[]
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I[] == this.simplex.I[]
this has only one value
this.U has only one value
this.U[] == [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.L has only one value
this.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.id has only one value
this.id.toString == ""
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == -2300.4
this.I has only one value
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.simplex.xn has only one value
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb has only one value
this.simplex.cb[] == [-0.0, -0.0, -4.0]
this.simplex.cb[] elements one of { -4.0, -0.0 }
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, S_R3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.simplex.c has only one value
this.simplex.dual has only one value
this.simplex.dual[] == [0.0, 0.0, -1.0]
this.simplex.dual[] elements one of { -1.0, 0.0 }
this.simplex.rq has only one value
this.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.simplex.Ub has only one value
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb has only one value
this.simplex.Lb[] == [0.0, 0.0, 0.0]
this.simplex.Lb[] elements == 0.0
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.simplex.Ln has only one value
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.m-1] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.m-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
===========================================================================
model.Model.getA():::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.A == return
this.A.getClass().getName() == return.getClass().getName()
this.A[] == return[]
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.b == orig(this.simplex.b)
this.b[] == this.simplex.b[]
this.b[] == orig(this.b[])
this.b[] == orig(this.simplex.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.I == orig(this.simplex.I)
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I.getClass().getName() == orig(this.I.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.In.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.Ib.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.I.getClass().getName())
this.I[] == this.simplex.I[]
this.I[] == orig(this.I[])
this.I[] == orig(this.simplex.I[])
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.simplex.B == orig(this.simplex.B)
this.simplex.B.getClass().getName() == return.getClass().getName()
this.simplex.B[] == orig(this.simplex.B[])
this.simplex.N == orig(this.simplex.N)
this.simplex.N.getClass().getName() == return.getClass().getName()
this.simplex.N[] == orig(this.simplex.N[])
this.simplex.xb == orig(this.simplex.xb)
this.simplex.xb[] == orig(this.simplex.xb[])
this.simplex.xn == orig(this.simplex.xn)
this.simplex.xn[] == orig(this.simplex.xn[])
this.simplex.cb == orig(this.simplex.cb)
this.simplex.cb[] == orig(this.simplex.cb[])
this.simplex.cn == orig(this.simplex.cn)
this.simplex.cn[] == orig(this.simplex.cn[])
this.simplex.In == orig(this.simplex.In)
this.simplex.In[] == orig(this.simplex.In[])
this.simplex.Ib == orig(this.simplex.Ib)
this.simplex.Ib[] == orig(this.simplex.Ib[])
this.simplex.c == orig(this.simplex.c)
this.simplex.c[] == orig(this.simplex.c[])
this.simplex.status == orig(this.simplex.status)
this.simplex.A == return
this.simplex.A.getClass().getName() == return.getClass().getName()
this.simplex.A[] == return[]
this.simplex.dual == orig(this.simplex.dual)
this.simplex.dual[] == orig(this.simplex.dual[])
this.simplex.rq == orig(this.simplex.rq)
this.simplex.rq[] == orig(this.simplex.rq[])
this.simplex.Ub == orig(this.simplex.Ub)
this.simplex.Ub[] == orig(this.simplex.Ub[])
this.simplex.Lb == orig(this.simplex.Lb)
this.simplex.Lb[] == orig(this.simplex.Lb[])
this.simplex.Un == orig(this.simplex.Un)
this.simplex.Un == orig(this.simplex.U)
this.simplex.Un[] == orig(this.simplex.Un[])
this.simplex.Un[] == orig(this.simplex.U[])
this.simplex.Ln == orig(this.simplex.Ln)
this.simplex.Ln == orig(this.simplex.L)
this.simplex.Ln[] == orig(this.simplex.Ln[])
this.simplex.Ln[] == orig(this.simplex.L[])
this.simplex.m == orig(this.simplex.m)
this.simplex.m == size(return[])
this.simplex.m == orig(size(this.A[]))
this.simplex.m == orig(size(this.b[]))
this.simplex.m == orig(size(this.simplex.B[]))
this.simplex.m == orig(size(this.simplex.N[]))
this.simplex.m == orig(size(this.simplex.xb[]))
this.simplex.m == orig(size(this.simplex.xn[]))-1
this.simplex.m == orig(size(this.simplex.cb[]))
this.simplex.m == orig(size(this.simplex.cn[]))-1
this.simplex.m == orig(size(this.simplex.b[]))
this.simplex.m == orig(size(this.simplex.In[]))-1
this.simplex.m == orig(size(this.simplex.Ib[]))
this.simplex.m == orig(size(this.simplex.A[]))
this.simplex.m == orig(size(this.simplex.dual[]))
this.simplex.m == orig(size(this.simplex.rq[]))-1
this.simplex.m == orig(size(this.simplex.Ub[]))
this.simplex.m == orig(size(this.simplex.Lb[]))
this.simplex.m == orig(size(this.simplex.Un[]))-1
this.simplex.m == orig(size(this.simplex.Ln[]))-1
this.simplex.m == orig(size(this.simplex.U[]))-1
this.simplex.m == orig(size(this.simplex.L[]))-1
this.simplex.n == orig(this.simplex.n)
this.simplex.n == orig(size(this.U[]))
this.simplex.n == orig(size(this.L[]))
this.simplex.n == orig(size(this.c[]))
this.simplex.n == orig(size(this.I[]))
this.simplex.n == orig(size(this.simplex.c[]))
this.simplex.n == orig(size(this.simplex.I[]))
this.simplex.initialTime == orig(this.simplex.initialTime)
this.simplex.nart == orig(this.simplex.nart)
this.print == orig(this.simplex.printSolution)
this.print == orig(this.print)
return == orig(this.A)
return == orig(this.simplex.A)
return.getClass().getName() == orig(this.A.getClass().getName())
return.getClass().getName() == orig(this.simplex.B.getClass().getName())
return.getClass().getName() == orig(this.simplex.N.getClass().getName())
return.getClass().getName() == orig(this.simplex.A.getClass().getName())
return[] == orig(this.A[])
return[] == orig(this.simplex.A[])
size(this.simplex.xn[]) == orig(size(this.simplex.cn[]))
size(this.simplex.xn[]) == orig(size(this.simplex.In[]))
size(this.simplex.xn[]) == orig(size(this.simplex.rq[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Un[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Ln[]))
size(this.simplex.xn[]) == orig(size(this.simplex.U[]))
size(this.simplex.xn[]) == orig(size(this.simplex.L[]))
this.U has only one value
this.U[] == [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.L has only one value
this.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.id has only one value
this.id.toString == ""
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == -2300.4
this.I has only one value
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.simplex.xn has only one value
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb has only one value
this.simplex.cb[] == [-0.0, -0.0, -4.0]
this.simplex.cb[] elements one of { -4.0, -0.0 }
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, S_R3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.simplex.c has only one value
this.simplex.dual has only one value
this.simplex.dual[] == [0.0, 0.0, -1.0]
this.simplex.dual[] elements one of { -1.0, 0.0 }
this.simplex.rq has only one value
this.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.simplex.Ub has only one value
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb has only one value
this.simplex.Lb[] == [0.0, 0.0, 0.0]
this.simplex.Lb[] elements == 0.0
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.simplex.Ln has only one value
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
return has only one value
return.getClass().getName() == double[][].class
return[] contains no nulls and has only one value, of length 3
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.m-1] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.m-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
return[this.simplex.m-1] has only one value
return[this.simplex.nart] has only one value
return[this.simplex.nart-1] has only one value
===========================================================================
model.Model.getB():::ENTER
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A[] == this.simplex.A[]
this.b[] == this.simplex.b[]
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I[] == this.simplex.I[]
this has only one value
this.U has only one value
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L has only one value
this.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.id has only one value
this.id.toString == ""
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == -2300.4
this.I has only one value
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.simplex.xn has only one value
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb has only one value
this.simplex.cb[] == [-0.0, -0.0, -4.0]
this.simplex.cb[] elements one of { -4.0, -0.0 }
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, S_R3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.simplex.c has only one value
this.simplex.dual has only one value
this.simplex.dual[] == [0.0, 0.0, -1.0]
this.simplex.dual[] elements one of { -1.0, 0.0 }
this.simplex.rq has only one value
this.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.simplex.Ub has only one value
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb has only one value
this.simplex.Lb[] == [0.0, 0.0, 0.0]
this.simplex.Lb[] elements == 0.0
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.simplex.Ln has only one value
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.m-1] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.m-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
===========================================================================
model.Model.getB():::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.A == orig(this.A)
this.A == orig(this.simplex.A)
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.B.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.N.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.A.getClass().getName())
this.A[] == this.simplex.A[]
this.A[] == orig(this.A[])
this.A[] == orig(this.simplex.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == return
this.b[] == return[]
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.I == orig(this.simplex.I)
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I.getClass().getName() == orig(this.I.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.In.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.Ib.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.I.getClass().getName())
this.I[] == this.simplex.I[]
this.I[] == orig(this.I[])
this.I[] == orig(this.simplex.I[])
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.simplex.B == orig(this.simplex.B)
this.simplex.B[] == orig(this.simplex.B[])
this.simplex.N == orig(this.simplex.N)
this.simplex.N[] == orig(this.simplex.N[])
this.simplex.xb == orig(this.simplex.xb)
this.simplex.xb[] == orig(this.simplex.xb[])
this.simplex.xn == orig(this.simplex.xn)
this.simplex.xn[] == orig(this.simplex.xn[])
this.simplex.cb == orig(this.simplex.cb)
this.simplex.cb[] == orig(this.simplex.cb[])
this.simplex.cn == orig(this.simplex.cn)
this.simplex.cn[] == orig(this.simplex.cn[])
this.simplex.b == return
this.simplex.b[] == return[]
this.simplex.In == orig(this.simplex.In)
this.simplex.In[] == orig(this.simplex.In[])
this.simplex.Ib == orig(this.simplex.Ib)
this.simplex.Ib[] == orig(this.simplex.Ib[])
this.simplex.c == orig(this.simplex.c)
this.simplex.c[] == orig(this.simplex.c[])
this.simplex.status == orig(this.simplex.status)
this.simplex.dual == orig(this.simplex.dual)
this.simplex.dual[] == orig(this.simplex.dual[])
this.simplex.rq == orig(this.simplex.rq)
this.simplex.rq[] == orig(this.simplex.rq[])
this.simplex.Ub == orig(this.simplex.Ub)
this.simplex.Ub[] == orig(this.simplex.Ub[])
this.simplex.Lb == orig(this.simplex.Lb)
this.simplex.Lb[] == orig(this.simplex.Lb[])
this.simplex.Un == orig(this.simplex.Un)
this.simplex.Un == orig(this.simplex.U)
this.simplex.Un[] == orig(this.simplex.Un[])
this.simplex.Un[] == orig(this.simplex.U[])
this.simplex.Ln == orig(this.simplex.Ln)
this.simplex.Ln == orig(this.simplex.L)
this.simplex.Ln[] == orig(this.simplex.Ln[])
this.simplex.Ln[] == orig(this.simplex.L[])
this.simplex.m == orig(this.simplex.m)
this.simplex.m == size(return[])
this.simplex.m == orig(size(this.A[]))
this.simplex.m == orig(size(this.b[]))
this.simplex.m == orig(size(this.simplex.B[]))
this.simplex.m == orig(size(this.simplex.N[]))
this.simplex.m == orig(size(this.simplex.xb[]))
this.simplex.m == orig(size(this.simplex.xn[]))-1
this.simplex.m == orig(size(this.simplex.cb[]))
this.simplex.m == orig(size(this.simplex.cn[]))-1
this.simplex.m == orig(size(this.simplex.b[]))
this.simplex.m == orig(size(this.simplex.In[]))-1
this.simplex.m == orig(size(this.simplex.Ib[]))
this.simplex.m == orig(size(this.simplex.A[]))
this.simplex.m == orig(size(this.simplex.dual[]))
this.simplex.m == orig(size(this.simplex.rq[]))-1
this.simplex.m == orig(size(this.simplex.Ub[]))
this.simplex.m == orig(size(this.simplex.Lb[]))
this.simplex.m == orig(size(this.simplex.Un[]))-1
this.simplex.m == orig(size(this.simplex.Ln[]))-1
this.simplex.m == orig(size(this.simplex.U[]))-1
this.simplex.m == orig(size(this.simplex.L[]))-1
this.simplex.n == orig(this.simplex.n)
this.simplex.n == orig(size(this.U[]))
this.simplex.n == orig(size(this.L[]))
this.simplex.n == orig(size(this.c[]))
this.simplex.n == orig(size(this.I[]))
this.simplex.n == orig(size(this.simplex.c[]))
this.simplex.n == orig(size(this.simplex.I[]))
this.simplex.initialTime == orig(this.simplex.initialTime)
this.simplex.nart == orig(this.simplex.nart)
this.print == orig(this.simplex.printSolution)
this.print == orig(this.print)
return == orig(this.b)
return == orig(this.simplex.b)
return[] == orig(this.b[])
return[] == orig(this.simplex.b[])
size(this.simplex.xn[]) == orig(size(this.simplex.cn[]))
size(this.simplex.xn[]) == orig(size(this.simplex.In[]))
size(this.simplex.xn[]) == orig(size(this.simplex.rq[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Un[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Ln[]))
size(this.simplex.xn[]) == orig(size(this.simplex.U[]))
size(this.simplex.xn[]) == orig(size(this.simplex.L[]))
this.U has only one value
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L has only one value
this.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.id has only one value
this.id.toString == ""
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.fo == -2300.4
this.I has only one value
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.simplex.xn has only one value
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb has only one value
this.simplex.cb[] == [-0.0, -0.0, -4.0]
this.simplex.cb[] elements one of { -4.0, -0.0 }
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, S_R3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.simplex.c has only one value
this.simplex.dual has only one value
this.simplex.dual[] == [0.0, 0.0, -1.0]
this.simplex.dual[] elements one of { -1.0, 0.0 }
this.simplex.rq has only one value
this.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.simplex.Ub has only one value
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb has only one value
this.simplex.Lb[] == [0.0, 0.0, 0.0]
this.simplex.Lb[] elements == 0.0
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.simplex.Ln has only one value
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
return has only one value
return[] == [7.0, 500.3, 500.4]
return[] elements one of { 7.0, 500.3, 500.4 }
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.m-1] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.m-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
===========================================================================
model.Model.getC():::ENTER
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A[] == this.simplex.A[]
this.b[] == this.simplex.b[]
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I[] == this.simplex.I[]
this has only one value
this.U has only one value
this.U[] == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.L has only one value
this.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.id has only one value
this.id.toString == ""
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == -2300.4
this.I has only one value
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.simplex.xn has only one value
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb has only one value
this.simplex.cb[] == [-0.0, -0.0, -4.0]
this.simplex.cb[] elements one of { -4.0, -0.0 }
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, S_R3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.simplex.c has only one value
this.simplex.dual has only one value
this.simplex.dual[] == [0.0, 0.0, -1.0]
this.simplex.dual[] elements one of { -1.0, 0.0 }
this.simplex.rq has only one value
this.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.simplex.Ub has only one value
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb has only one value
this.simplex.Lb[] == [0.0, 0.0, 0.0]
this.simplex.Lb[] elements == 0.0
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.simplex.Ln has only one value
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.m-1] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.m-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
===========================================================================
model.Model.getC():::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.A == orig(this.A)
this.A == orig(this.simplex.A)
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.B.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.N.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.A.getClass().getName())
this.A[] == this.simplex.A[]
this.A[] == orig(this.A[])
this.A[] == orig(this.simplex.A[])
this.c == return
this.c[] == return[]
this.b == orig(this.b)
this.b == orig(this.simplex.b)
this.b[] == this.simplex.b[]
this.b[] == orig(this.b[])
this.b[] == orig(this.simplex.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.I == orig(this.simplex.I)
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I.getClass().getName() == orig(this.I.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.In.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.Ib.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.I.getClass().getName())
this.I[] == this.simplex.I[]
this.I[] == orig(this.I[])
this.I[] == orig(this.simplex.I[])
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.simplex.B == orig(this.simplex.B)
this.simplex.B[] == orig(this.simplex.B[])
this.simplex.N == orig(this.simplex.N)
this.simplex.N[] == orig(this.simplex.N[])
this.simplex.xb == orig(this.simplex.xb)
this.simplex.xb[] == orig(this.simplex.xb[])
this.simplex.xn == orig(this.simplex.xn)
this.simplex.xn[] == orig(this.simplex.xn[])
this.simplex.cb == orig(this.simplex.cb)
this.simplex.cb[] == orig(this.simplex.cb[])
this.simplex.cn == orig(this.simplex.cn)
this.simplex.cn[] == orig(this.simplex.cn[])
this.simplex.In == orig(this.simplex.In)
this.simplex.In[] == orig(this.simplex.In[])
this.simplex.Ib == orig(this.simplex.Ib)
this.simplex.Ib[] == orig(this.simplex.Ib[])
this.simplex.c == orig(this.simplex.c)
this.simplex.c[] == orig(this.simplex.c[])
this.simplex.status == orig(this.simplex.status)
this.simplex.dual == orig(this.simplex.dual)
this.simplex.dual[] == orig(this.simplex.dual[])
this.simplex.rq == orig(this.simplex.rq)
this.simplex.rq[] == orig(this.simplex.rq[])
this.simplex.Ub == orig(this.simplex.Ub)
this.simplex.Ub[] == orig(this.simplex.Ub[])
this.simplex.Lb == orig(this.simplex.Lb)
this.simplex.Lb[] == orig(this.simplex.Lb[])
this.simplex.Un == orig(this.simplex.Un)
this.simplex.Un == orig(this.simplex.U)
this.simplex.Un[] == orig(this.simplex.Un[])
this.simplex.Un[] == orig(this.simplex.U[])
this.simplex.Ln == orig(this.simplex.Ln)
this.simplex.Ln == orig(this.simplex.L)
this.simplex.Ln[] == orig(this.simplex.Ln[])
this.simplex.Ln[] == orig(this.simplex.L[])
this.simplex.m == orig(this.simplex.m)
this.simplex.m == orig(size(this.A[]))
this.simplex.m == orig(size(this.b[]))
this.simplex.m == orig(size(this.simplex.B[]))
this.simplex.m == orig(size(this.simplex.N[]))
this.simplex.m == orig(size(this.simplex.xb[]))
this.simplex.m == orig(size(this.simplex.xn[]))-1
this.simplex.m == orig(size(this.simplex.cb[]))
this.simplex.m == orig(size(this.simplex.cn[]))-1
this.simplex.m == orig(size(this.simplex.b[]))
this.simplex.m == orig(size(this.simplex.In[]))-1
this.simplex.m == orig(size(this.simplex.Ib[]))
this.simplex.m == orig(size(this.simplex.A[]))
this.simplex.m == orig(size(this.simplex.dual[]))
this.simplex.m == orig(size(this.simplex.rq[]))-1
this.simplex.m == orig(size(this.simplex.Ub[]))
this.simplex.m == orig(size(this.simplex.Lb[]))
this.simplex.m == orig(size(this.simplex.Un[]))-1
this.simplex.m == orig(size(this.simplex.Ln[]))-1
this.simplex.m == orig(size(this.simplex.U[]))-1
this.simplex.m == orig(size(this.simplex.L[]))-1
this.simplex.n == orig(this.simplex.n)
this.simplex.n == size(return[])
this.simplex.n == orig(size(this.U[]))
this.simplex.n == orig(size(this.L[]))
this.simplex.n == orig(size(this.c[]))
this.simplex.n == orig(size(this.I[]))
this.simplex.n == orig(size(this.simplex.c[]))
this.simplex.n == orig(size(this.simplex.I[]))
this.simplex.initialTime == orig(this.simplex.initialTime)
this.simplex.nart == orig(this.simplex.nart)
this.print == orig(this.simplex.printSolution)
this.print == orig(this.print)
return == orig(this.c)
return[] == orig(this.c[])
size(this.simplex.xn[]) == orig(size(this.simplex.cn[]))
size(this.simplex.xn[]) == orig(size(this.simplex.In[]))
size(this.simplex.xn[]) == orig(size(this.simplex.rq[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Un[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Ln[]))
size(this.simplex.xn[]) == orig(size(this.simplex.U[]))
size(this.simplex.xn[]) == orig(size(this.simplex.L[]))
this.U has only one value
this.U[] == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.L has only one value
this.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.id has only one value
this.id.toString == ""
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == -2300.4
this.I has only one value
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.simplex.xn has only one value
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb has only one value
this.simplex.cb[] == [-0.0, -0.0, -4.0]
this.simplex.cb[] elements one of { -4.0, -0.0 }
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, S_R3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.simplex.c has only one value
this.simplex.dual has only one value
this.simplex.dual[] == [0.0, 0.0, -1.0]
this.simplex.dual[] elements one of { -1.0, 0.0 }
this.simplex.rq has only one value
this.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.simplex.Ub has only one value
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb has only one value
this.simplex.Lb[] == [0.0, 0.0, 0.0]
this.simplex.Lb[] elements == 0.0
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.simplex.Ln has only one value
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
return has only one value
return[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
return[] elements >= 0.0
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.m-1] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.m-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
this.simplex.c[] + return[] == 0
===========================================================================
model.Model.getConstraints():::ENTER
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I[] == this.simplex.I[]
this has only one value
this.U[] one of { [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] one of { [1.0, 75.1, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 0.0, 0.0, 0.0, 0.0] }
this.id.toString == ""
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo one of { -2300.4, 0.0 }
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.simplex.xn has only one value
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb has only one value
this.simplex.cb[] == [-0.0, -0.0, -4.0]
this.simplex.cb[] elements one of { -4.0, -0.0 }
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.simplex.b has only one value
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, S_R3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.simplex.c has only one value
this.simplex.A has only one value
this.simplex.dual has only one value
this.simplex.dual[] == [0.0, 0.0, -1.0]
this.simplex.dual[] elements one of { -1.0, 0.0 }
this.simplex.rq has only one value
this.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.simplex.Ub has only one value
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb has only one value
this.simplex.Lb[] == [0.0, 0.0, 0.0]
this.simplex.Lb[] elements == 0.0
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.simplex.Ln has only one value
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
this.simplex.I has only one value
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.m-1] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.m-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
===========================================================================
model.Model.getConstraints():::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.A == orig(this.A)
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A[] == orig(this.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I.getClass().getName() == orig(this.I.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.In.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.Ib.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.I.getClass().getName())
this.I[] == this.simplex.I[]
this.I[] == orig(this.I[])
this.I[] == orig(this.simplex.I[])
this.integer == orig(this.integer)
this.constraints == return
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.simplex.B == orig(this.simplex.B)
this.simplex.B.getClass().getName() == orig(this.simplex.B.getClass().getName())
this.simplex.B.getClass().getName() == orig(this.simplex.N.getClass().getName())
this.simplex.B.getClass().getName() == orig(this.simplex.A.getClass().getName())
this.simplex.B[] == orig(this.simplex.B[])
this.simplex.N == orig(this.simplex.N)
this.simplex.N[] == orig(this.simplex.N[])
this.simplex.xb == orig(this.simplex.xb)
this.simplex.xb[] == orig(this.simplex.xb[])
this.simplex.xn == orig(this.simplex.xn)
this.simplex.xn[] == orig(this.simplex.xn[])
this.simplex.cb == orig(this.simplex.cb)
this.simplex.cb[] == orig(this.simplex.cb[])
this.simplex.cn == orig(this.simplex.cn)
this.simplex.cn[] == orig(this.simplex.cn[])
this.simplex.b == orig(this.simplex.b)
this.simplex.b[] == orig(this.simplex.b[])
this.simplex.In == orig(this.simplex.In)
this.simplex.In[] == orig(this.simplex.In[])
this.simplex.Ib == orig(this.simplex.Ib)
this.simplex.Ib[] == orig(this.simplex.Ib[])
this.simplex.c == orig(this.simplex.c)
this.simplex.c[] == orig(this.simplex.c[])
this.simplex.status == orig(this.simplex.status)
this.simplex.A == orig(this.simplex.A)
this.simplex.A[] == orig(this.simplex.A[])
this.simplex.dual == orig(this.simplex.dual)
this.simplex.dual[] == orig(this.simplex.dual[])
this.simplex.rq == orig(this.simplex.rq)
this.simplex.rq[] == orig(this.simplex.rq[])
this.simplex.Ub == orig(this.simplex.Ub)
this.simplex.Ub[] == orig(this.simplex.Ub[])
this.simplex.Lb == orig(this.simplex.Lb)
this.simplex.Lb[] == orig(this.simplex.Lb[])
this.simplex.Un == orig(this.simplex.Un)
this.simplex.Un == orig(this.simplex.U)
this.simplex.Un[] == orig(this.simplex.Un[])
this.simplex.Un[] == orig(this.simplex.U[])
this.simplex.Ln == orig(this.simplex.Ln)
this.simplex.Ln == orig(this.simplex.L)
this.simplex.Ln[] == orig(this.simplex.Ln[])
this.simplex.Ln[] == orig(this.simplex.L[])
this.simplex.m == orig(this.simplex.m)
this.simplex.m == orig(size(this.simplex.B[]))
this.simplex.m == orig(size(this.simplex.N[]))
this.simplex.m == orig(size(this.simplex.xb[]))
this.simplex.m == orig(size(this.simplex.xn[]))-1
this.simplex.m == orig(size(this.simplex.cb[]))
this.simplex.m == orig(size(this.simplex.cn[]))-1
this.simplex.m == orig(size(this.simplex.b[]))
this.simplex.m == orig(size(this.simplex.In[]))-1
this.simplex.m == orig(size(this.simplex.Ib[]))
this.simplex.m == orig(size(this.simplex.A[]))
this.simplex.m == orig(size(this.simplex.dual[]))
this.simplex.m == orig(size(this.simplex.rq[]))-1
this.simplex.m == orig(size(this.simplex.Ub[]))
this.simplex.m == orig(size(this.simplex.Lb[]))
this.simplex.m == orig(size(this.simplex.Un[]))-1
this.simplex.m == orig(size(this.simplex.Ln[]))-1
this.simplex.m == orig(size(this.simplex.U[]))-1
this.simplex.m == orig(size(this.simplex.L[]))-1
this.simplex.n == orig(this.simplex.n)
this.simplex.n == orig(size(this.I[]))
this.simplex.n == orig(size(this.simplex.c[]))
this.simplex.n == orig(size(this.simplex.I[]))
this.simplex.initialTime == orig(this.simplex.initialTime)
this.simplex.nart == orig(this.simplex.nart)
this.simplex.printSolution == orig(this.simplex.printSolution)
this.simplex.I == orig(this.simplex.I)
this.print == orig(this.print)
return == orig(this.constraints)
size(this.U[]) == orig(size(this.L[]))
size(this.U[]) == orig(size(this.c[]))
size(this.A[]) == orig(size(this.b[]))
size(this.simplex.xn[]) == orig(size(this.simplex.cn[]))
size(this.simplex.xn[]) == orig(size(this.simplex.In[]))
size(this.simplex.xn[]) == orig(size(this.simplex.rq[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Un[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Ln[]))
size(this.simplex.xn[]) == orig(size(this.simplex.U[]))
size(this.simplex.xn[]) == orig(size(this.simplex.L[]))
this.U[] one of { [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] one of { [1.0, 75.1, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 0.0, 0.0, 0.0, 0.0] }
this.id.toString == ""
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo one of { -2300.4, 0.0 }
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.simplex.xn has only one value
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb has only one value
this.simplex.cb[] == [-0.0, -0.0, -4.0]
this.simplex.cb[] elements one of { -4.0, -0.0 }
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.simplex.b has only one value
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, S_R3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.simplex.c has only one value
this.simplex.A has only one value
this.simplex.dual has only one value
this.simplex.dual[] == [0.0, 0.0, -1.0]
this.simplex.dual[] elements one of { -1.0, 0.0 }
this.simplex.rq has only one value
this.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.simplex.Ub has only one value
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb has only one value
this.simplex.Lb[] == [0.0, 0.0, 0.0]
this.simplex.Lb[] elements == 0.0
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.simplex.Ln has only one value
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
this.simplex.I has only one value
return has only one value
return[] contains no nulls and has only one value, of length 3
return[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
return[].getClass().getName() elements == model.QBnBconstr.class
size(this.constraints[]) == 3
size(this.variables[]) == 6
size(return[]) == 3
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.m-1] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.m-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
===========================================================================
model.Model.getI():::ENTER
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A[] == this.simplex.A[]
this.b[] == this.simplex.b[]
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I[] == this.simplex.I[]
this has only one value
this.U has only one value
this.U[] == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.L has only one value
this.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.id has only one value
this.id.toString == ""
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == -2300.4
this.I has only one value
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.simplex.xn has only one value
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb has only one value
this.simplex.cb[] == [-0.0, -0.0, -4.0]
this.simplex.cb[] elements one of { -4.0, -0.0 }
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, S_R3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.simplex.c has only one value
this.simplex.dual has only one value
this.simplex.dual[] == [0.0, 0.0, -1.0]
this.simplex.dual[] elements one of { -1.0, 0.0 }
this.simplex.rq has only one value
this.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.simplex.Ub has only one value
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb has only one value
this.simplex.Lb[] == [0.0, 0.0, 0.0]
this.simplex.Lb[] elements == 0.0
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.simplex.Ln has only one value
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.m-1] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.m-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
===========================================================================
model.Model.getI():::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.A == orig(this.A)
this.A == orig(this.simplex.A)
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.B.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.N.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.A.getClass().getName())
this.A[] == this.simplex.A[]
this.A[] == orig(this.A[])
this.A[] == orig(this.simplex.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.b == orig(this.simplex.b)
this.b[] == this.simplex.b[]
this.b[] == orig(this.b[])
this.b[] == orig(this.simplex.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == return
this.I.getClass().getName() == return.getClass().getName()
this.I[] == return[]
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.simplex.B == orig(this.simplex.B)
this.simplex.B[] == orig(this.simplex.B[])
this.simplex.N == orig(this.simplex.N)
this.simplex.N[] == orig(this.simplex.N[])
this.simplex.xb == orig(this.simplex.xb)
this.simplex.xb[] == orig(this.simplex.xb[])
this.simplex.xn == orig(this.simplex.xn)
this.simplex.xn[] == orig(this.simplex.xn[])
this.simplex.cb == orig(this.simplex.cb)
this.simplex.cb[] == orig(this.simplex.cb[])
this.simplex.cn == orig(this.simplex.cn)
this.simplex.cn[] == orig(this.simplex.cn[])
this.simplex.In == orig(this.simplex.In)
this.simplex.In.getClass().getName() == return.getClass().getName()
this.simplex.In[] == orig(this.simplex.In[])
this.simplex.Ib == orig(this.simplex.Ib)
this.simplex.Ib.getClass().getName() == return.getClass().getName()
this.simplex.Ib[] == orig(this.simplex.Ib[])
this.simplex.c == orig(this.simplex.c)
this.simplex.c[] == orig(this.simplex.c[])
this.simplex.status == orig(this.simplex.status)
this.simplex.dual == orig(this.simplex.dual)
this.simplex.dual[] == orig(this.simplex.dual[])
this.simplex.rq == orig(this.simplex.rq)
this.simplex.rq[] == orig(this.simplex.rq[])
this.simplex.Ub == orig(this.simplex.Ub)
this.simplex.Ub[] == orig(this.simplex.Ub[])
this.simplex.Lb == orig(this.simplex.Lb)
this.simplex.Lb[] == orig(this.simplex.Lb[])
this.simplex.Un == orig(this.simplex.Un)
this.simplex.Un == orig(this.simplex.U)
this.simplex.Un[] == orig(this.simplex.Un[])
this.simplex.Un[] == orig(this.simplex.U[])
this.simplex.Ln == orig(this.simplex.Ln)
this.simplex.Ln == orig(this.simplex.L)
this.simplex.Ln[] == orig(this.simplex.Ln[])
this.simplex.Ln[] == orig(this.simplex.L[])
this.simplex.m == orig(this.simplex.m)
this.simplex.m == orig(size(this.A[]))
this.simplex.m == orig(size(this.b[]))
this.simplex.m == orig(size(this.simplex.B[]))
this.simplex.m == orig(size(this.simplex.N[]))
this.simplex.m == orig(size(this.simplex.xb[]))
this.simplex.m == orig(size(this.simplex.xn[]))-1
this.simplex.m == orig(size(this.simplex.cb[]))
this.simplex.m == orig(size(this.simplex.cn[]))-1
this.simplex.m == orig(size(this.simplex.b[]))
this.simplex.m == orig(size(this.simplex.In[]))-1
this.simplex.m == orig(size(this.simplex.Ib[]))
this.simplex.m == orig(size(this.simplex.A[]))
this.simplex.m == orig(size(this.simplex.dual[]))
this.simplex.m == orig(size(this.simplex.rq[]))-1
this.simplex.m == orig(size(this.simplex.Ub[]))
this.simplex.m == orig(size(this.simplex.Lb[]))
this.simplex.m == orig(size(this.simplex.Un[]))-1
this.simplex.m == orig(size(this.simplex.Ln[]))-1
this.simplex.m == orig(size(this.simplex.U[]))-1
this.simplex.m == orig(size(this.simplex.L[]))-1
this.simplex.n == orig(this.simplex.n)
this.simplex.n == size(return[])
this.simplex.n == orig(size(this.U[]))
this.simplex.n == orig(size(this.L[]))
this.simplex.n == orig(size(this.c[]))
this.simplex.n == orig(size(this.I[]))
this.simplex.n == orig(size(this.simplex.c[]))
this.simplex.n == orig(size(this.simplex.I[]))
this.simplex.initialTime == orig(this.simplex.initialTime)
this.simplex.nart == orig(this.simplex.nart)
this.simplex.I == return
this.simplex.I.getClass().getName() == return.getClass().getName()
this.simplex.I[] == return[]
this.print == orig(this.simplex.printSolution)
this.print == orig(this.print)
return == orig(this.I)
return == orig(this.simplex.I)
return.getClass().getName() == orig(this.I.getClass().getName())
return.getClass().getName() == orig(this.simplex.In.getClass().getName())
return.getClass().getName() == orig(this.simplex.Ib.getClass().getName())
return.getClass().getName() == orig(this.simplex.I.getClass().getName())
return[] == orig(this.I[])
return[] == orig(this.simplex.I[])
size(this.simplex.xn[]) == orig(size(this.simplex.cn[]))
size(this.simplex.xn[]) == orig(size(this.simplex.In[]))
size(this.simplex.xn[]) == orig(size(this.simplex.rq[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Un[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Ln[]))
size(this.simplex.xn[]) == orig(size(this.simplex.U[]))
size(this.simplex.xn[]) == orig(size(this.simplex.L[]))
this.U has only one value
this.U[] == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.L has only one value
this.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.id has only one value
this.id.toString == ""
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == -2300.4
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.simplex.xn has only one value
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb has only one value
this.simplex.cb[] == [-0.0, -0.0, -4.0]
this.simplex.cb[] elements one of { -4.0, -0.0 }
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, S_R3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.simplex.c has only one value
this.simplex.dual has only one value
this.simplex.dual[] == [0.0, 0.0, -1.0]
this.simplex.dual[] elements one of { -1.0, 0.0 }
this.simplex.rq has only one value
this.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.simplex.Ub has only one value
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb has only one value
this.simplex.Lb[] == [0.0, 0.0, 0.0]
this.simplex.Lb[] elements == 0.0
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.simplex.Ln has only one value
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
return has only one value
return.getClass().getName() == java.lang.String[].class
return[] contains no nulls and has only one value, of length 6
return[].toString == [x1, x2, x3, S_R1, S_R2, S_R3]
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.m-1] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.m-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
return[this.simplex.m] has only one value
return[this.simplex.m-1] has only one value
return[this.simplex.n-1] has only one value
return[this.simplex.nart] has only one value
return[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.nart] in return[]
===========================================================================
model.Model.getId():::ENTER
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A[] == this.simplex.A[]
this.b[] == this.simplex.b[]
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I[] == this.simplex.I[]
this has only one value
this.U has only one value
this.U[] == [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.L has only one value
this.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.id has only one value
this.id.toString == ""
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == -2300.4
this.I has only one value
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.simplex.xn has only one value
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb has only one value
this.simplex.cb[] == [-0.0, -0.0, -4.0]
this.simplex.cb[] elements one of { -4.0, -0.0 }
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, S_R3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.simplex.c has only one value
this.simplex.dual has only one value
this.simplex.dual[] == [0.0, 0.0, -1.0]
this.simplex.dual[] elements one of { -1.0, 0.0 }
this.simplex.rq has only one value
this.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.simplex.Ub has only one value
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb has only one value
this.simplex.Lb[] == [0.0, 0.0, 0.0]
this.simplex.Lb[] elements == 0.0
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.simplex.Ln has only one value
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.m-1] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.m-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
===========================================================================
model.Model.getId():::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == return
this.id.toString == orig(this.id.toString)
this.A == orig(this.A)
this.A == orig(this.simplex.A)
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.B.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.N.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.A.getClass().getName())
this.A[] == this.simplex.A[]
this.A[] == orig(this.A[])
this.A[] == orig(this.simplex.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.b == orig(this.simplex.b)
this.b[] == this.simplex.b[]
this.b[] == orig(this.b[])
this.b[] == orig(this.simplex.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.I == orig(this.simplex.I)
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I.getClass().getName() == orig(this.I.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.In.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.Ib.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.I.getClass().getName())
this.I[] == this.simplex.I[]
this.I[] == orig(this.I[])
this.I[] == orig(this.simplex.I[])
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.simplex.B == orig(this.simplex.B)
this.simplex.B[] == orig(this.simplex.B[])
this.simplex.N == orig(this.simplex.N)
this.simplex.N[] == orig(this.simplex.N[])
this.simplex.xb == orig(this.simplex.xb)
this.simplex.xb[] == orig(this.simplex.xb[])
this.simplex.xn == orig(this.simplex.xn)
this.simplex.xn[] == orig(this.simplex.xn[])
this.simplex.cb == orig(this.simplex.cb)
this.simplex.cb[] == orig(this.simplex.cb[])
this.simplex.cn == orig(this.simplex.cn)
this.simplex.cn[] == orig(this.simplex.cn[])
this.simplex.In == orig(this.simplex.In)
this.simplex.In[] == orig(this.simplex.In[])
this.simplex.Ib == orig(this.simplex.Ib)
this.simplex.Ib[] == orig(this.simplex.Ib[])
this.simplex.c == orig(this.simplex.c)
this.simplex.c[] == orig(this.simplex.c[])
this.simplex.status == orig(this.simplex.status)
this.simplex.dual == orig(this.simplex.dual)
this.simplex.dual[] == orig(this.simplex.dual[])
this.simplex.rq == orig(this.simplex.rq)
this.simplex.rq[] == orig(this.simplex.rq[])
this.simplex.Ub == orig(this.simplex.Ub)
this.simplex.Ub[] == orig(this.simplex.Ub[])
this.simplex.Lb == orig(this.simplex.Lb)
this.simplex.Lb[] == orig(this.simplex.Lb[])
this.simplex.Un == orig(this.simplex.Un)
this.simplex.Un == orig(this.simplex.U)
this.simplex.Un[] == orig(this.simplex.Un[])
this.simplex.Un[] == orig(this.simplex.U[])
this.simplex.Ln == orig(this.simplex.Ln)
this.simplex.Ln == orig(this.simplex.L)
this.simplex.Ln[] == orig(this.simplex.Ln[])
this.simplex.Ln[] == orig(this.simplex.L[])
this.simplex.m == orig(this.simplex.m)
this.simplex.m == orig(size(this.A[]))
this.simplex.m == orig(size(this.b[]))
this.simplex.m == orig(size(this.simplex.B[]))
this.simplex.m == orig(size(this.simplex.N[]))
this.simplex.m == orig(size(this.simplex.xb[]))
this.simplex.m == orig(size(this.simplex.xn[]))-1
this.simplex.m == orig(size(this.simplex.cb[]))
this.simplex.m == orig(size(this.simplex.cn[]))-1
this.simplex.m == orig(size(this.simplex.b[]))
this.simplex.m == orig(size(this.simplex.In[]))-1
this.simplex.m == orig(size(this.simplex.Ib[]))
this.simplex.m == orig(size(this.simplex.A[]))
this.simplex.m == orig(size(this.simplex.dual[]))
this.simplex.m == orig(size(this.simplex.rq[]))-1
this.simplex.m == orig(size(this.simplex.Ub[]))
this.simplex.m == orig(size(this.simplex.Lb[]))
this.simplex.m == orig(size(this.simplex.Un[]))-1
this.simplex.m == orig(size(this.simplex.Ln[]))-1
this.simplex.m == orig(size(this.simplex.U[]))-1
this.simplex.m == orig(size(this.simplex.L[]))-1
this.simplex.n == orig(this.simplex.n)
this.simplex.n == orig(size(this.U[]))
this.simplex.n == orig(size(this.L[]))
this.simplex.n == orig(size(this.c[]))
this.simplex.n == orig(size(this.I[]))
this.simplex.n == orig(size(this.simplex.c[]))
this.simplex.n == orig(size(this.simplex.I[]))
this.simplex.initialTime == orig(this.simplex.initialTime)
this.simplex.nart == orig(this.simplex.nart)
this.print == orig(this.simplex.printSolution)
this.print == orig(this.print)
return == orig(this.id)
size(this.simplex.xn[]) == orig(size(this.simplex.cn[]))
size(this.simplex.xn[]) == orig(size(this.simplex.In[]))
size(this.simplex.xn[]) == orig(size(this.simplex.rq[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Un[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Ln[]))
size(this.simplex.xn[]) == orig(size(this.simplex.U[]))
size(this.simplex.xn[]) == orig(size(this.simplex.L[]))
this.U has only one value
this.U[] == [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.L has only one value
this.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.id.toString == ""
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == -2300.4
this.I has only one value
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.simplex.xn has only one value
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb has only one value
this.simplex.cb[] == [-0.0, -0.0, -4.0]
this.simplex.cb[] elements one of { -4.0, -0.0 }
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, S_R3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.simplex.c has only one value
this.simplex.dual has only one value
this.simplex.dual[] == [0.0, 0.0, -1.0]
this.simplex.dual[] elements one of { -1.0, 0.0 }
this.simplex.rq has only one value
this.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.simplex.Ub has only one value
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb has only one value
this.simplex.Lb[] == [0.0, 0.0, 0.0]
this.simplex.Lb[] elements == 0.0
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.simplex.Ln has only one value
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
return has only one value
return.toString == ""
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.m-1] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.m-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
===========================================================================
model.Model.getL():::ENTER
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A[] == this.simplex.A[]
this.b[] == this.simplex.b[]
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I[] == this.simplex.I[]
this has only one value
this.U has only one value
this.U[] == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.L has only one value
this.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.id has only one value
this.id.toString == ""
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == -2300.4
this.I has only one value
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.simplex.xn has only one value
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb has only one value
this.simplex.cb[] == [-0.0, -0.0, -4.0]
this.simplex.cb[] elements one of { -4.0, -0.0 }
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, S_R3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.simplex.c has only one value
this.simplex.dual has only one value
this.simplex.dual[] == [0.0, 0.0, -1.0]
this.simplex.dual[] elements one of { -1.0, 0.0 }
this.simplex.rq has only one value
this.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.simplex.Ub has only one value
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb has only one value
this.simplex.Lb[] == [0.0, 0.0, 0.0]
this.simplex.Lb[] elements == 0.0
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.simplex.Ln has only one value
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.m-1] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.m-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
===========================================================================
model.Model.getL():::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == return
this.L[] == return[]
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.A == orig(this.A)
this.A == orig(this.simplex.A)
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.B.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.N.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.A.getClass().getName())
this.A[] == this.simplex.A[]
this.A[] == orig(this.A[])
this.A[] == orig(this.simplex.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.b == orig(this.simplex.b)
this.b[] == this.simplex.b[]
this.b[] == orig(this.b[])
this.b[] == orig(this.simplex.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.I == orig(this.simplex.I)
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I.getClass().getName() == orig(this.I.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.In.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.Ib.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.I.getClass().getName())
this.I[] == this.simplex.I[]
this.I[] == orig(this.I[])
this.I[] == orig(this.simplex.I[])
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.simplex.B == orig(this.simplex.B)
this.simplex.B[] == orig(this.simplex.B[])
this.simplex.N == orig(this.simplex.N)
this.simplex.N[] == orig(this.simplex.N[])
this.simplex.xb == orig(this.simplex.xb)
this.simplex.xb[] == orig(this.simplex.xb[])
this.simplex.xn == orig(this.simplex.xn)
this.simplex.xn[] == orig(this.simplex.xn[])
this.simplex.cb == orig(this.simplex.cb)
this.simplex.cb[] == orig(this.simplex.cb[])
this.simplex.cn == orig(this.simplex.cn)
this.simplex.cn[] == orig(this.simplex.cn[])
this.simplex.In == orig(this.simplex.In)
this.simplex.In[] == orig(this.simplex.In[])
this.simplex.Ib == orig(this.simplex.Ib)
this.simplex.Ib[] == orig(this.simplex.Ib[])
this.simplex.c == orig(this.simplex.c)
this.simplex.c[] == orig(this.simplex.c[])
this.simplex.status == orig(this.simplex.status)
this.simplex.dual == orig(this.simplex.dual)
this.simplex.dual[] == orig(this.simplex.dual[])
this.simplex.rq == orig(this.simplex.rq)
this.simplex.rq[] == orig(this.simplex.rq[])
this.simplex.Ub == orig(this.simplex.Ub)
this.simplex.Ub[] == orig(this.simplex.Ub[])
this.simplex.Lb == orig(this.simplex.Lb)
this.simplex.Lb[] == orig(this.simplex.Lb[])
this.simplex.Un == orig(this.simplex.Un)
this.simplex.Un == orig(this.simplex.U)
this.simplex.Un[] == orig(this.simplex.Un[])
this.simplex.Un[] == orig(this.simplex.U[])
this.simplex.Ln == orig(this.simplex.Ln)
this.simplex.Ln == orig(this.simplex.L)
this.simplex.Ln[] == orig(this.simplex.Ln[])
this.simplex.Ln[] == orig(this.simplex.L[])
this.simplex.m == orig(this.simplex.m)
this.simplex.m == orig(size(this.A[]))
this.simplex.m == orig(size(this.b[]))
this.simplex.m == orig(size(this.simplex.B[]))
this.simplex.m == orig(size(this.simplex.N[]))
this.simplex.m == orig(size(this.simplex.xb[]))
this.simplex.m == orig(size(this.simplex.xn[]))-1
this.simplex.m == orig(size(this.simplex.cb[]))
this.simplex.m == orig(size(this.simplex.cn[]))-1
this.simplex.m == orig(size(this.simplex.b[]))
this.simplex.m == orig(size(this.simplex.In[]))-1
this.simplex.m == orig(size(this.simplex.Ib[]))
this.simplex.m == orig(size(this.simplex.A[]))
this.simplex.m == orig(size(this.simplex.dual[]))
this.simplex.m == orig(size(this.simplex.rq[]))-1
this.simplex.m == orig(size(this.simplex.Ub[]))
this.simplex.m == orig(size(this.simplex.Lb[]))
this.simplex.m == orig(size(this.simplex.Un[]))-1
this.simplex.m == orig(size(this.simplex.Ln[]))-1
this.simplex.m == orig(size(this.simplex.U[]))-1
this.simplex.m == orig(size(this.simplex.L[]))-1
this.simplex.n == orig(this.simplex.n)
this.simplex.n == size(return[])
this.simplex.n == orig(size(this.U[]))
this.simplex.n == orig(size(this.L[]))
this.simplex.n == orig(size(this.c[]))
this.simplex.n == orig(size(this.I[]))
this.simplex.n == orig(size(this.simplex.c[]))
this.simplex.n == orig(size(this.simplex.I[]))
this.simplex.initialTime == orig(this.simplex.initialTime)
this.simplex.nart == orig(this.simplex.nart)
this.print == orig(this.simplex.printSolution)
this.print == orig(this.print)
return == orig(this.L)
return[] == orig(this.L[])
size(this.simplex.xn[]) == orig(size(this.simplex.cn[]))
size(this.simplex.xn[]) == orig(size(this.simplex.In[]))
size(this.simplex.xn[]) == orig(size(this.simplex.rq[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Un[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Ln[]))
size(this.simplex.xn[]) == orig(size(this.simplex.U[]))
size(this.simplex.xn[]) == orig(size(this.simplex.L[]))
this.U has only one value
this.U[] == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.id has only one value
this.id.toString == ""
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == -2300.4
this.I has only one value
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.simplex.xn has only one value
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb has only one value
this.simplex.cb[] == [-0.0, -0.0, -4.0]
this.simplex.cb[] elements one of { -4.0, -0.0 }
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, S_R3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.simplex.c has only one value
this.simplex.dual has only one value
this.simplex.dual[] == [0.0, 0.0, -1.0]
this.simplex.dual[] elements one of { -1.0, 0.0 }
this.simplex.rq has only one value
this.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.simplex.Ub has only one value
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb has only one value
this.simplex.Lb[] == [0.0, 0.0, 0.0]
this.simplex.Lb[] elements == 0.0
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.simplex.Ln has only one value
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
return has only one value
return[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
return[] elements one of { 0.0, 1.0, 76.0 }
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.m-1] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.m-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
===========================================================================
model.Model.getSimplex():::ENTER
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A[] == this.simplex.A[]
this.b[] == this.simplex.b[]
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I[] == this.simplex.I[]
this.U != null
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L != null
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
this.id != null
this.A != null
this.A[] contains no nulls and has only one value, of length 3
this.c != null
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b != null
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.b[] sorted by <
this.fo one of { -2300.4, -2300.0, -2289.6 }
this.I != null
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
this.simplex != null
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
this.U[] elements > this.fo
this.L[] elements > this.fo
this.c[] elements > this.fo
this.b[] elements > this.fo
this.b[] elements > this.epsilon
this.simplex.xn[] elements > this.fo
this.simplex.cb[] elements > this.fo
this.simplex.cn[] elements > this.fo
this.simplex.c[] elements > this.fo
this.simplex.dual[] elements > this.fo
this.simplex.rq[] elements > this.fo
this.simplex.Lb[] elements > this.fo
this.simplex.Un[] elements > this.fo
this.simplex.Ln[] elements > this.fo
===========================================================================
model.Model.getSimplex():::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.A == return.A
this.A == orig(this.A)
this.A == orig(this.simplex.A)
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A.getClass().getName() == return.B.getClass().getName()
this.A.getClass().getName() == return.N.getClass().getName()
this.A.getClass().getName() == return.A.getClass().getName()
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.B.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.N.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.A.getClass().getName())
this.A[] == this.simplex.A[]
this.A[] == return.A[]
this.A[] == orig(this.A[])
this.A[] == orig(this.simplex.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == return.b
this.b == orig(this.b)
this.b == orig(this.simplex.b)
this.b[] == this.simplex.b[]
this.b[] == return.b[]
this.b[] == orig(this.b[])
this.b[] == orig(this.simplex.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == return.I
this.I == orig(this.I)
this.I == orig(this.simplex.I)
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I.getClass().getName() == return.In.getClass().getName()
this.I.getClass().getName() == return.Ib.getClass().getName()
this.I.getClass().getName() == return.I.getClass().getName()
this.I.getClass().getName() == orig(this.I.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.In.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.Ib.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.I.getClass().getName())
this.I[] == this.simplex.I[]
this.I[] == return.I[]
this.I[] == orig(this.I[])
this.I[] == orig(this.simplex.I[])
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == return
this.simplex.B == return.B
this.simplex.B[] == return.B[]
this.simplex.N == return.N
this.simplex.N[] == return.N[]
this.simplex.xb == return.xb
this.simplex.xb[] == return.xb[]
this.simplex.xn == return.xn
this.simplex.xn[] == return.xn[]
this.simplex.cb == return.cb
this.simplex.cb[] == return.cb[]
this.simplex.cn == return.cn
this.simplex.cn[] == return.cn[]
this.simplex.In == return.In
this.simplex.In[] == return.In[]
this.simplex.Ib == return.Ib
this.simplex.Ib[] == return.Ib[]
this.simplex.c == return.c
this.simplex.c[] == return.c[]
this.simplex.status == return.status
this.simplex.dual == return.dual
this.simplex.dual[] == return.dual[]
this.simplex.rq == return.rq
this.simplex.rq[] == return.rq[]
this.simplex.Ub == return.Ub
this.simplex.Ub[] == return.Ub[]
this.simplex.Lb == return.Lb
this.simplex.Lb[] == return.Lb[]
this.simplex.Un == return.Un
this.simplex.Un[] == return.Un[]
this.simplex.Ln == return.Ln
this.simplex.Ln[] == return.Ln[]
this.simplex.U == return.Un
this.simplex.U[] == return.Un[]
this.simplex.L == return.Ln
this.simplex.L[] == return.Ln[]
this.simplex.m == return.m
this.simplex.n == return.n
this.simplex.initialTime == return.initialTime
this.simplex.nart == return.nart
this.print == return.printSolution
this.print == orig(this.simplex.printSolution)
this.print == orig(this.print)
return == orig(this.simplex)
return.B == orig(this.simplex.B)
return.B[] == orig(this.simplex.B[])
return.N == orig(this.simplex.N)
return.N[] == orig(this.simplex.N[])
return.xb == orig(this.simplex.xb)
return.xb[] == orig(this.simplex.xb[])
return.xn == orig(this.simplex.xn)
return.xn[] == orig(this.simplex.xn[])
return.cb == orig(this.simplex.cb)
return.cb[] == orig(this.simplex.cb[])
return.cn == orig(this.simplex.cn)
return.cn[] == orig(this.simplex.cn[])
return.In == orig(this.simplex.In)
return.In[] == orig(this.simplex.In[])
return.Ib == orig(this.simplex.Ib)
return.Ib[] == orig(this.simplex.Ib[])
return.c == orig(this.simplex.c)
return.c[] == orig(this.simplex.c[])
return.status == orig(this.simplex.status)
return.dual == orig(this.simplex.dual)
return.dual[] == orig(this.simplex.dual[])
return.rq == orig(this.simplex.rq)
return.rq[] == orig(this.simplex.rq[])
return.Ub == orig(this.simplex.Ub)
return.Ub[] == orig(this.simplex.Ub[])
return.Lb == orig(this.simplex.Lb)
return.Lb[] == orig(this.simplex.Lb[])
return.Un == return.U
return.Un == orig(this.simplex.Un)
return.Un == orig(this.simplex.U)
return.Un[] == return.U[]
return.Un[] == orig(this.simplex.Un[])
return.Un[] == orig(this.simplex.U[])
return.Ln == return.L
return.Ln == orig(this.simplex.Ln)
return.Ln == orig(this.simplex.L)
return.Ln[] == return.L[]
return.Ln[] == orig(this.simplex.Ln[])
return.Ln[] == orig(this.simplex.L[])
return.m == orig(this.simplex.m)
return.m == size(this.A[])
return.m == size(this.b[])
return.m == size(this.simplex.B[])
return.m == size(this.simplex.N[])
return.m == size(this.simplex.xb[])
return.m == size(this.simplex.xn[])-1
return.m == size(this.simplex.cb[])
return.m == size(this.simplex.cn[])-1
return.m == size(this.simplex.b[])
return.m == size(this.simplex.In[])-1
return.m == size(this.simplex.Ib[])
return.m == size(this.simplex.A[])
return.m == size(this.simplex.dual[])
return.m == size(this.simplex.rq[])-1
return.m == size(this.simplex.Ub[])
return.m == size(this.simplex.Lb[])
return.m == size(this.simplex.Un[])-1
return.m == size(this.simplex.Ln[])-1
return.m == size(this.simplex.U[])-1
return.m == size(this.simplex.L[])-1
return.m == size(return.B[])
return.m == size(return.N[])
return.m == size(return.xb[])
return.m == size(return.xn[])-1
return.m == size(return.cb[])
return.m == size(return.cn[])-1
return.m == size(return.b[])
return.m == size(return.In[])-1
return.m == size(return.Ib[])
return.m == size(return.A[])
return.m == size(return.dual[])
return.m == size(return.rq[])-1
return.m == size(return.Ub[])
return.m == size(return.Lb[])
return.m == size(return.Un[])-1
return.m == size(return.Ln[])-1
return.m == size(return.U[])-1
return.m == size(return.L[])-1
return.m == orig(size(this.A[]))
return.m == orig(size(this.b[]))
return.m == orig(size(this.simplex.B[]))
return.m == orig(size(this.simplex.N[]))
return.m == orig(size(this.simplex.xb[]))
return.m == orig(size(this.simplex.xn[]))-1
return.m == orig(size(this.simplex.cb[]))
return.m == orig(size(this.simplex.cn[]))-1
return.m == orig(size(this.simplex.b[]))
return.m == orig(size(this.simplex.In[]))-1
return.m == orig(size(this.simplex.Ib[]))
return.m == orig(size(this.simplex.A[]))
return.m == orig(size(this.simplex.dual[]))
return.m == orig(size(this.simplex.rq[]))-1
return.m == orig(size(this.simplex.Ub[]))
return.m == orig(size(this.simplex.Lb[]))
return.m == orig(size(this.simplex.Un[]))-1
return.m == orig(size(this.simplex.Ln[]))-1
return.m == orig(size(this.simplex.U[]))-1
return.m == orig(size(this.simplex.L[]))-1
return.n == orig(this.simplex.n)
return.n == size(this.U[])
return.n == size(this.L[])
return.n == size(this.c[])
return.n == size(this.I[])
return.n == size(this.simplex.c[])
return.n == size(this.simplex.I[])
return.n == size(return.c[])
return.n == size(return.I[])
return.n == orig(size(this.U[]))
return.n == orig(size(this.L[]))
return.n == orig(size(this.c[]))
return.n == orig(size(this.I[]))
return.n == orig(size(this.simplex.c[]))
return.n == orig(size(this.simplex.I[]))
return.initialTime == orig(this.simplex.initialTime)
return.nart == orig(this.simplex.nart)
size(this.simplex.cn[]) == size(return.xn[])
size(this.simplex.In[]) == size(return.xn[])
size(this.simplex.rq[]) == size(return.xn[])
size(this.simplex.Un[]) == size(return.xn[])
size(this.simplex.Ln[]) == size(return.xn[])
size(this.simplex.U[]) == size(return.xn[])
size(this.simplex.L[]) == size(return.xn[])
size(return.xn[]) == size(return.cn[])
size(return.xn[]) == size(return.In[])
size(return.xn[]) == size(return.rq[])
size(return.xn[]) == size(return.Un[])
size(return.xn[]) == size(return.Ln[])
size(return.xn[]) == size(return.U[])
size(return.xn[]) == size(return.L[])
size(return.xn[]) == orig(size(this.simplex.cn[]))
size(return.xn[]) == orig(size(this.simplex.In[]))
size(return.xn[]) == orig(size(this.simplex.rq[]))
size(return.xn[]) == orig(size(this.simplex.Un[]))
size(return.xn[]) == orig(size(this.simplex.Ln[]))
size(return.xn[]) == orig(size(this.simplex.U[]))
size(return.xn[]) == orig(size(this.simplex.L[]))
this.U != null
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L != null
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
this.id != null
this.A != null
this.A[] contains no nulls and has only one value, of length 3
this.c != null
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b != null
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.b[] sorted by <
this.fo one of { -2300.4, -2300.0, -2289.6 }
this.I != null
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
return != null
return.B != null
return.B[] elements != null
return.N != null
return.N[] elements != null
return.xb != null
return.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
return.xb[] elements >= 0.09999999999999432
return.xb[] sorted by >
return.xn != null
return.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] }
return.xn[] elements >= 0.0
return.cb != null
return.cb[] elements one of { -8.0, -4.0, -0.0 }
return.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
return.cb[] sorted by >=
return.cn != null
return.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] }
return.In != null
return.In[] elements != null
return.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
return.In[].getClass().getName() elements == java.lang.String.class
return.Ib != null
return.Ib[] elements != null
return.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
return.Ib[].getClass().getName() elements == java.lang.String.class
return.c != null
return.c[] == [-7.0, -8.0, -4.0, -0.0, -0.0, -0.0]
return.status == 0
return.dual != null
return.dual[] elements one of { -4.0, -1.0, 0.0 }
return.dual[] one of { [-0.0, -0.0, -4.0], [0.0, 0.0, -1.0], [0.0, 0.0, 0.0] }
return.dual[] sorted by >=
return.rq != null
return.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] }
return.Ub != null
return.Ub[] elements one of { 200.0, 1.7976931348623157E308 }
return.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
return.Ub[] sorted by >=
return.Lb != null
return.Lb[] elements one of { 0.0, 76.0 }
return.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] }
return.Lb[] sorted by <=
return.Un != null
return.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
return.Un[] elements >= 0.0
return.Ln != null
return.Ln[] elements one of { 0.0, 1.0, 76.0 }
return.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] }
return.n == 6
return.initialTime == 1.743919623013E12
return.nart == 1
return.I[].toString == [x1, x2, x3, S_R1, S_R2, S_R3]
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
size(return.xn[]) == 4
this.A[return.m-1] has only one value
this.A[return.nart] has only one value
this.A[return.nart-1] has only one value
this.I[return.m] has only one value
this.I[return.m-1] has only one value
this.I[return.n-1] has only one value
this.I[return.nart] has only one value
this.I[return.nart-1] has only one value
return.Ib[return.nart] has only one value
this.U[] elements > this.fo
this.U[] > return.c[] (elementwise)
this.L[] elements > this.fo
this.L[] >= return.c[] (elementwise)
this.c[] elements > this.fo
this.c[] + return.c[] == 0
this.c[] >= return.c[] (elementwise)
this.b[] elements > this.fo
this.b[] elements > this.epsilon
this.b[] > return.cb[] (elementwise)
this.b[] > return.dual[] (elementwise)
this.b[] > return.Lb[] (elementwise)
return.xb[] elements > this.fo
return.xn[] elements > this.fo
return.cb[] elements > this.fo
return.cn[] elements > this.fo
return.c[] elements > this.fo
return.dual[] elements > this.fo
return.rq[] elements > this.fo
return.Ub[] elements > this.fo
return.Lb[] elements > this.fo
return.Un[] elements > this.fo
return.Ln[] elements > this.fo
return.Ib[return.nart] in this.I[]
return.xb[] elements > this.epsilon
return.cb[] elements < this.epsilon
return.c[] elements < this.epsilon
return.dual[] elements < this.epsilon
return.Ub[] elements > this.epsilon
return.xb[] > return.cb[] (elementwise)
return.xb[] > return.cn[] (lexically)
return.xb[] >= return.cn[] (lexically)
return.xb[] > return.dual[] (elementwise)
return.xb[] > return.rq[] (lexically)
return.xb[] >= return.rq[] (lexically)
return.xb[] < return.Ub[] (elementwise)
return.xb[] > return.Lb[] (elementwise)
return.xn[] <= return.Un[] (elementwise)
return.xn[] >= return.Ln[] (elementwise)
return.cb[] > return.cn[] (lexically)
return.cb[] >= return.cn[] (lexically)
return.cb[] <= return.dual[] (elementwise)
return.cb[] < return.Ub[] (elementwise)
return.cb[] <= return.Lb[] (elementwise)
return.cb[] < return.Un[] (lexically)
return.cb[] <= return.Un[] (lexically)
return.cn[] < return.dual[] (lexically)
return.cn[] <= return.dual[] (lexically)
return.cn[] <= return.rq[] (elementwise)
return.cn[] < return.Un[] (elementwise)
return.dual[] < return.Ub[] (elementwise)
return.dual[] <= return.Lb[] (elementwise)
return.dual[] < return.Un[] (lexically)
return.dual[] <= return.Un[] (lexically)
return.rq[] < return.Un[] (elementwise)
return.Ub[] > return.Lb[] (elementwise)
return.Un[] >= return.Ln[] (elementwise)
===========================================================================
model.Model.getU():::ENTER
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A[] == this.simplex.A[]
this.b[] == this.simplex.b[]
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I[] == this.simplex.I[]
this has only one value
this.U has only one value
this.U[] == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.L has only one value
this.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.id has only one value
this.id.toString == ""
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == -2300.4
this.I has only one value
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.simplex.xn has only one value
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb has only one value
this.simplex.cb[] == [-0.0, -0.0, -4.0]
this.simplex.cb[] elements one of { -4.0, -0.0 }
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, S_R3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.simplex.c has only one value
this.simplex.dual has only one value
this.simplex.dual[] == [0.0, 0.0, -1.0]
this.simplex.dual[] elements one of { -1.0, 0.0 }
this.simplex.rq has only one value
this.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.simplex.Ub has only one value
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb has only one value
this.simplex.Lb[] == [0.0, 0.0, 0.0]
this.simplex.Lb[] elements == 0.0
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.simplex.Ln has only one value
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.m-1] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.m-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
===========================================================================
model.Model.getU():::EXIT
this.U == return
this.U[] == return[]
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.A == orig(this.A)
this.A == orig(this.simplex.A)
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.B.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.N.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.A.getClass().getName())
this.A[] == this.simplex.A[]
this.A[] == orig(this.A[])
this.A[] == orig(this.simplex.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.b == orig(this.simplex.b)
this.b[] == this.simplex.b[]
this.b[] == orig(this.b[])
this.b[] == orig(this.simplex.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.I == orig(this.simplex.I)
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I.getClass().getName() == orig(this.I.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.In.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.Ib.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.I.getClass().getName())
this.I[] == this.simplex.I[]
this.I[] == orig(this.I[])
this.I[] == orig(this.simplex.I[])
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.simplex.B == orig(this.simplex.B)
this.simplex.B[] == orig(this.simplex.B[])
this.simplex.N == orig(this.simplex.N)
this.simplex.N[] == orig(this.simplex.N[])
this.simplex.xb == orig(this.simplex.xb)
this.simplex.xb[] == orig(this.simplex.xb[])
this.simplex.xn == orig(this.simplex.xn)
this.simplex.xn[] == orig(this.simplex.xn[])
this.simplex.cb == orig(this.simplex.cb)
this.simplex.cb[] == orig(this.simplex.cb[])
this.simplex.cn == orig(this.simplex.cn)
this.simplex.cn[] == orig(this.simplex.cn[])
this.simplex.In == orig(this.simplex.In)
this.simplex.In[] == orig(this.simplex.In[])
this.simplex.Ib == orig(this.simplex.Ib)
this.simplex.Ib[] == orig(this.simplex.Ib[])
this.simplex.c == orig(this.simplex.c)
this.simplex.c[] == orig(this.simplex.c[])
this.simplex.status == orig(this.simplex.status)
this.simplex.dual == orig(this.simplex.dual)
this.simplex.dual[] == orig(this.simplex.dual[])
this.simplex.rq == orig(this.simplex.rq)
this.simplex.rq[] == orig(this.simplex.rq[])
this.simplex.Ub == orig(this.simplex.Ub)
this.simplex.Ub[] == orig(this.simplex.Ub[])
this.simplex.Lb == orig(this.simplex.Lb)
this.simplex.Lb[] == orig(this.simplex.Lb[])
this.simplex.Un == orig(this.simplex.Un)
this.simplex.Un == orig(this.simplex.U)
this.simplex.Un[] == orig(this.simplex.Un[])
this.simplex.Un[] == orig(this.simplex.U[])
this.simplex.Ln == orig(this.simplex.Ln)
this.simplex.Ln == orig(this.simplex.L)
this.simplex.Ln[] == orig(this.simplex.Ln[])
this.simplex.Ln[] == orig(this.simplex.L[])
this.simplex.m == orig(this.simplex.m)
this.simplex.m == orig(size(this.A[]))
this.simplex.m == orig(size(this.b[]))
this.simplex.m == orig(size(this.simplex.B[]))
this.simplex.m == orig(size(this.simplex.N[]))
this.simplex.m == orig(size(this.simplex.xb[]))
this.simplex.m == orig(size(this.simplex.xn[]))-1
this.simplex.m == orig(size(this.simplex.cb[]))
this.simplex.m == orig(size(this.simplex.cn[]))-1
this.simplex.m == orig(size(this.simplex.b[]))
this.simplex.m == orig(size(this.simplex.In[]))-1
this.simplex.m == orig(size(this.simplex.Ib[]))
this.simplex.m == orig(size(this.simplex.A[]))
this.simplex.m == orig(size(this.simplex.dual[]))
this.simplex.m == orig(size(this.simplex.rq[]))-1
this.simplex.m == orig(size(this.simplex.Ub[]))
this.simplex.m == orig(size(this.simplex.Lb[]))
this.simplex.m == orig(size(this.simplex.Un[]))-1
this.simplex.m == orig(size(this.simplex.Ln[]))-1
this.simplex.m == orig(size(this.simplex.U[]))-1
this.simplex.m == orig(size(this.simplex.L[]))-1
this.simplex.n == orig(this.simplex.n)
this.simplex.n == size(return[])
this.simplex.n == orig(size(this.U[]))
this.simplex.n == orig(size(this.L[]))
this.simplex.n == orig(size(this.c[]))
this.simplex.n == orig(size(this.I[]))
this.simplex.n == orig(size(this.simplex.c[]))
this.simplex.n == orig(size(this.simplex.I[]))
this.simplex.initialTime == orig(this.simplex.initialTime)
this.simplex.nart == orig(this.simplex.nart)
this.print == orig(this.simplex.printSolution)
this.print == orig(this.print)
return == orig(this.U)
return[] == orig(this.U[])
size(this.simplex.xn[]) == orig(size(this.simplex.cn[]))
size(this.simplex.xn[]) == orig(size(this.simplex.In[]))
size(this.simplex.xn[]) == orig(size(this.simplex.rq[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Un[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Ln[]))
size(this.simplex.xn[]) == orig(size(this.simplex.U[]))
size(this.simplex.xn[]) == orig(size(this.simplex.L[]))
this.L has only one value
this.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.id has only one value
this.id.toString == ""
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == -2300.4
this.I has only one value
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.simplex.xn has only one value
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb has only one value
this.simplex.cb[] == [-0.0, -0.0, -4.0]
this.simplex.cb[] elements one of { -4.0, -0.0 }
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, S_R3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.simplex.c has only one value
this.simplex.dual has only one value
this.simplex.dual[] == [0.0, 0.0, -1.0]
this.simplex.dual[] elements one of { -1.0, 0.0 }
this.simplex.rq has only one value
this.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.simplex.Ub has only one value
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb has only one value
this.simplex.Lb[] == [0.0, 0.0, 0.0]
this.simplex.Lb[] elements == 0.0
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.simplex.Ln has only one value
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
return has only one value
return[] == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
return[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.m-1] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.m-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
===========================================================================
model.Model.getVariables():::ENTER
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I[] == this.simplex.I[]
this has only one value
this.U[] one of { [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] one of { [1.0, 75.1, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 0.0, 0.0, 0.0, 0.0] }
this.id.toString == ""
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo one of { -2300.4, 0.0 }
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.simplex.xn has only one value
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb has only one value
this.simplex.cb[] == [-0.0, -0.0, -4.0]
this.simplex.cb[] elements one of { -4.0, -0.0 }
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.simplex.b has only one value
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, S_R3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.simplex.c has only one value
this.simplex.A has only one value
this.simplex.dual has only one value
this.simplex.dual[] == [0.0, 0.0, -1.0]
this.simplex.dual[] elements one of { -1.0, 0.0 }
this.simplex.rq has only one value
this.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.simplex.Ub has only one value
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb has only one value
this.simplex.Lb[] == [0.0, 0.0, 0.0]
this.simplex.Lb[] elements == 0.0
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.simplex.Ln has only one value
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
this.simplex.I has only one value
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.m-1] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.m-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
===========================================================================
model.Model.getVariables():::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.A == orig(this.A)
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A[] == orig(this.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I.getClass().getName() == orig(this.I.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.In.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.Ib.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.I.getClass().getName())
this.I[] == this.simplex.I[]
this.I[] == orig(this.I[])
this.I[] == orig(this.simplex.I[])
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == return
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.simplex.B == orig(this.simplex.B)
this.simplex.B.getClass().getName() == orig(this.simplex.B.getClass().getName())
this.simplex.B.getClass().getName() == orig(this.simplex.N.getClass().getName())
this.simplex.B.getClass().getName() == orig(this.simplex.A.getClass().getName())
this.simplex.B[] == orig(this.simplex.B[])
this.simplex.N == orig(this.simplex.N)
this.simplex.N[] == orig(this.simplex.N[])
this.simplex.xb == orig(this.simplex.xb)
this.simplex.xb[] == orig(this.simplex.xb[])
this.simplex.xn == orig(this.simplex.xn)
this.simplex.xn[] == orig(this.simplex.xn[])
this.simplex.cb == orig(this.simplex.cb)
this.simplex.cb[] == orig(this.simplex.cb[])
this.simplex.cn == orig(this.simplex.cn)
this.simplex.cn[] == orig(this.simplex.cn[])
this.simplex.b == orig(this.simplex.b)
this.simplex.b[] == orig(this.simplex.b[])
this.simplex.In == orig(this.simplex.In)
this.simplex.In[] == orig(this.simplex.In[])
this.simplex.Ib == orig(this.simplex.Ib)
this.simplex.Ib[] == orig(this.simplex.Ib[])
this.simplex.c == orig(this.simplex.c)
this.simplex.c[] == orig(this.simplex.c[])
this.simplex.status == orig(this.simplex.status)
this.simplex.A == orig(this.simplex.A)
this.simplex.A[] == orig(this.simplex.A[])
this.simplex.dual == orig(this.simplex.dual)
this.simplex.dual[] == orig(this.simplex.dual[])
this.simplex.rq == orig(this.simplex.rq)
this.simplex.rq[] == orig(this.simplex.rq[])
this.simplex.Ub == orig(this.simplex.Ub)
this.simplex.Ub[] == orig(this.simplex.Ub[])
this.simplex.Lb == orig(this.simplex.Lb)
this.simplex.Lb[] == orig(this.simplex.Lb[])
this.simplex.Un == orig(this.simplex.Un)
this.simplex.Un == orig(this.simplex.U)
this.simplex.Un[] == orig(this.simplex.Un[])
this.simplex.Un[] == orig(this.simplex.U[])
this.simplex.Ln == orig(this.simplex.Ln)
this.simplex.Ln == orig(this.simplex.L)
this.simplex.Ln[] == orig(this.simplex.Ln[])
this.simplex.Ln[] == orig(this.simplex.L[])
this.simplex.m == orig(this.simplex.m)
this.simplex.m == orig(size(this.simplex.B[]))
this.simplex.m == orig(size(this.simplex.N[]))
this.simplex.m == orig(size(this.simplex.xb[]))
this.simplex.m == orig(size(this.simplex.xn[]))-1
this.simplex.m == orig(size(this.simplex.cb[]))
this.simplex.m == orig(size(this.simplex.cn[]))-1
this.simplex.m == orig(size(this.simplex.b[]))
this.simplex.m == orig(size(this.simplex.In[]))-1
this.simplex.m == orig(size(this.simplex.Ib[]))
this.simplex.m == orig(size(this.simplex.A[]))
this.simplex.m == orig(size(this.simplex.dual[]))
this.simplex.m == orig(size(this.simplex.rq[]))-1
this.simplex.m == orig(size(this.simplex.Ub[]))
this.simplex.m == orig(size(this.simplex.Lb[]))
this.simplex.m == orig(size(this.simplex.Un[]))-1
this.simplex.m == orig(size(this.simplex.Ln[]))-1
this.simplex.m == orig(size(this.simplex.U[]))-1
this.simplex.m == orig(size(this.simplex.L[]))-1
this.simplex.n == orig(this.simplex.n)
this.simplex.n == orig(size(this.I[]))
this.simplex.n == orig(size(this.simplex.c[]))
this.simplex.n == orig(size(this.simplex.I[]))
this.simplex.initialTime == orig(this.simplex.initialTime)
this.simplex.nart == orig(this.simplex.nart)
this.simplex.printSolution == orig(this.simplex.printSolution)
this.simplex.I == orig(this.simplex.I)
this.print == orig(this.print)
return == orig(this.variables)
size(this.U[]) == orig(size(this.L[]))
size(this.U[]) == orig(size(this.c[]))
size(this.A[]) == orig(size(this.b[]))
size(this.simplex.xn[]) == orig(size(this.simplex.cn[]))
size(this.simplex.xn[]) == orig(size(this.simplex.In[]))
size(this.simplex.xn[]) == orig(size(this.simplex.rq[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Un[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Ln[]))
size(this.simplex.xn[]) == orig(size(this.simplex.U[]))
size(this.simplex.xn[]) == orig(size(this.simplex.L[]))
this.U[] one of { [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] one of { [1.0, 75.1, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 0.0, 0.0, 0.0, 0.0] }
this.id.toString == ""
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo one of { -2300.4, 0.0 }
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.simplex.xn has only one value
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb has only one value
this.simplex.cb[] == [-0.0, -0.0, -4.0]
this.simplex.cb[] elements one of { -4.0, -0.0 }
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.simplex.b has only one value
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, S_R3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.simplex.c has only one value
this.simplex.A has only one value
this.simplex.dual has only one value
this.simplex.dual[] == [0.0, 0.0, -1.0]
this.simplex.dual[] elements one of { -1.0, 0.0 }
this.simplex.rq has only one value
this.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.simplex.Ub has only one value
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb has only one value
this.simplex.Lb[] == [0.0, 0.0, 0.0]
this.simplex.Lb[] elements == 0.0
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.simplex.Ln has only one value
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
this.simplex.I has only one value
return has only one value
return[] contains no nulls and has only one value, of length 6
return[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
return[].getClass().getName() elements == model.QBnBVariable.class
size(this.constraints[]) == 3
size(this.variables[]) == 6
size(return[]) == 6
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.m-1] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.m-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
===========================================================================
model.Model.isInt(java.lang.String):::ENTER
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A[] == this.simplex.A[]
this.b[] == this.simplex.b[]
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I[] == this.simplex.I[]
this.U != null
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L != null
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
this.id != null
this.A != null
this.A[] contains no nulls and has only one value, of length 3
this.c != null
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b != null
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.b[] sorted by <
this.fo one of { -2300.4, -2300.0, -2289.6 }
this.I != null
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
this.simplex != null
arg0 != null
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
this.U[] elements > this.fo
this.L[] elements > this.fo
this.c[] elements > this.fo
this.b[] elements > this.fo
this.b[] elements > this.epsilon
this.simplex.xn[] elements > this.fo
this.simplex.cb[] elements > this.fo
this.simplex.cn[] elements > this.fo
this.simplex.c[] elements > this.fo
this.simplex.dual[] elements > this.fo
this.simplex.rq[] elements > this.fo
this.simplex.Lb[] elements > this.fo
this.simplex.Un[] elements > this.fo
this.simplex.Ln[] elements > this.fo
===========================================================================
model.Model.isInt(java.lang.String):::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.A == orig(this.A)
this.A == orig(this.simplex.A)
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.B.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.N.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.A.getClass().getName())
this.A[] == this.simplex.A[]
this.A[] == orig(this.A[])
this.A[] == orig(this.simplex.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.b == orig(this.simplex.b)
this.b[] == this.simplex.b[]
this.b[] == orig(this.b[])
this.b[] == orig(this.simplex.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.I == orig(this.simplex.I)
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I.getClass().getName() == orig(this.I.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.In.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.Ib.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.I.getClass().getName())
this.I[] == this.simplex.I[]
this.I[] == orig(this.I[])
this.I[] == orig(this.simplex.I[])
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.simplex.B == orig(this.simplex.B)
this.simplex.B[] == orig(this.simplex.B[])
this.simplex.N == orig(this.simplex.N)
this.simplex.N[] == orig(this.simplex.N[])
this.simplex.xb == orig(this.simplex.xb)
this.simplex.xb[] == orig(this.simplex.xb[])
this.simplex.xn == orig(this.simplex.xn)
this.simplex.xn[] == orig(this.simplex.xn[])
this.simplex.cb == orig(this.simplex.cb)
this.simplex.cb[] == orig(this.simplex.cb[])
this.simplex.cn == orig(this.simplex.cn)
this.simplex.cn[] == orig(this.simplex.cn[])
this.simplex.In == orig(this.simplex.In)
this.simplex.In[] == orig(this.simplex.In[])
this.simplex.Ib == orig(this.simplex.Ib)
this.simplex.Ib[] == orig(this.simplex.Ib[])
this.simplex.c == orig(this.simplex.c)
this.simplex.c[] == orig(this.simplex.c[])
this.simplex.status == orig(this.simplex.status)
this.simplex.dual == orig(this.simplex.dual)
this.simplex.dual[] == orig(this.simplex.dual[])
this.simplex.rq == orig(this.simplex.rq)
this.simplex.rq[] == orig(this.simplex.rq[])
this.simplex.Ub == orig(this.simplex.Ub)
this.simplex.Ub[] == orig(this.simplex.Ub[])
this.simplex.Lb == orig(this.simplex.Lb)
this.simplex.Lb[] == orig(this.simplex.Lb[])
this.simplex.Un == orig(this.simplex.Un)
this.simplex.Un == orig(this.simplex.U)
this.simplex.Un[] == orig(this.simplex.Un[])
this.simplex.Un[] == orig(this.simplex.U[])
this.simplex.Ln == orig(this.simplex.Ln)
this.simplex.Ln == orig(this.simplex.L)
this.simplex.Ln[] == orig(this.simplex.Ln[])
this.simplex.Ln[] == orig(this.simplex.L[])
this.simplex.m == orig(this.simplex.m)
this.simplex.m == orig(size(this.A[]))
this.simplex.m == orig(size(this.b[]))
this.simplex.m == orig(size(this.simplex.B[]))
this.simplex.m == orig(size(this.simplex.N[]))
this.simplex.m == orig(size(this.simplex.xb[]))
this.simplex.m == orig(size(this.simplex.xn[]))-1
this.simplex.m == orig(size(this.simplex.cb[]))
this.simplex.m == orig(size(this.simplex.cn[]))-1
this.simplex.m == orig(size(this.simplex.b[]))
this.simplex.m == orig(size(this.simplex.In[]))-1
this.simplex.m == orig(size(this.simplex.Ib[]))
this.simplex.m == orig(size(this.simplex.A[]))
this.simplex.m == orig(size(this.simplex.dual[]))
this.simplex.m == orig(size(this.simplex.rq[]))-1
this.simplex.m == orig(size(this.simplex.Ub[]))
this.simplex.m == orig(size(this.simplex.Lb[]))
this.simplex.m == orig(size(this.simplex.Un[]))-1
this.simplex.m == orig(size(this.simplex.Ln[]))-1
this.simplex.m == orig(size(this.simplex.U[]))-1
this.simplex.m == orig(size(this.simplex.L[]))-1
this.simplex.n == orig(this.simplex.n)
this.simplex.n == orig(size(this.U[]))
this.simplex.n == orig(size(this.L[]))
this.simplex.n == orig(size(this.c[]))
this.simplex.n == orig(size(this.I[]))
this.simplex.n == orig(size(this.simplex.c[]))
this.simplex.n == orig(size(this.simplex.I[]))
this.simplex.initialTime == orig(this.simplex.initialTime)
this.simplex.nart == orig(this.simplex.nart)
this.print == orig(this.simplex.printSolution)
this.print == orig(this.print)
arg0.toString == orig(arg0.toString)
size(this.simplex.xn[]) == orig(size(this.simplex.cn[]))
size(this.simplex.xn[]) == orig(size(this.simplex.In[]))
size(this.simplex.xn[]) == orig(size(this.simplex.rq[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Un[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Ln[]))
size(this.simplex.xn[]) == orig(size(this.simplex.U[]))
size(this.simplex.xn[]) == orig(size(this.simplex.L[]))
(return == false)  ==>  (size(this.variables[]) one of { 0, 6 })
(return == false)  ==>  (this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] })
(return == false)  ==>  (this.fo one of { -2300.4, -2300.0, -2289.6 })
(return == false)  ==>  (this.id.toString one of { "", "l", "r" })
(return == false)  ==>  (this.simplex.Lb[] elements one of { 0.0, 76.0 })
(return == false)  ==>  (this.simplex.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] })
(return == false)  ==>  (this.simplex.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] })
(return == false)  ==>  (this.simplex.Ub[] elements one of { 200.0, 1.7976931348623157E308 })
(return == false)  ==>  (this.simplex.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] })
(return == false)  ==>  (this.simplex.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] })
(return == false)  ==>  (this.simplex.cb[] elements one of { -8.0, -4.0, -0.0 })
(return == false)  ==>  (this.simplex.cb[] one of { [-0.0, -0.0, -8.0], [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] })
(return == false)  ==>  (this.simplex.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] })
(return == false)  ==>  (this.simplex.dual[] elements one of { -4.0, -1.0, 0.0 })
(return == false)  ==>  (this.simplex.dual[] one of { [-0.0, -0.0, -4.0], [0.0, 0.0, -1.0], [0.0, 0.0, 0.0] })
(return == false)  ==>  (this.simplex.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0], [12.0, 9.9999999E7, 4.0, -3.0] })
(return == false)  ==>  (this.simplex.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] })
(return == false)  ==>  (this.simplex.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] })
(return == false)  ==>  (this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] })
(return == true)  ==>  (arg0.toString one of { "x1", "x2", "x3" })
(return == true)  ==>  (size(this.variables[]) == 6)
(return == true)  ==>  (this.A has only one value)
(return == true)  ==>  (this.L has only one value)
(return == true)  ==>  (this.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0])
(return == true)  ==>  (this.U has only one value)
(return == true)  ==>  (this.b has only one value)
(return == true)  ==>  (this.b[] < this.simplex.Ub[] (elementwise))
(return == true)  ==>  (this.c has only one value)
(return == true)  ==>  (this.constraints has only one value)
(return == true)  ==>  (this.fo one of { -2300.4, -2300.0 })
(return == true)  ==>  (this.id.toString one of { "", "l" })
(return == true)  ==>  (this.simplex.Ib[].toString one of { [S_R1, S_R2, S_R3], [S_R1, S_R2, x3] })
(return == true)  ==>  (this.simplex.In[].toString one of { [x2, a0, S_R3, x1], [x2, a0, x3, x1] })
(return == true)  ==>  (this.simplex.Lb[] == [0.0, 0.0, 0.0])
(return == true)  ==>  (this.simplex.Lb[] elements == 0.0)
(return == true)  ==>  (this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0])
(return == true)  ==>  (this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308])
(return == true)  ==>  (this.simplex.Ub[] elements == 1.7976931348623157E308)
(return == true)  ==>  (this.simplex.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] })
(return == true)  ==>  (this.simplex.cb[] elements one of { -4.0, -0.0 })
(return == true)  ==>  (this.simplex.cb[] one of { [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] })
(return == true)  ==>  (this.simplex.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0] })
(return == true)  ==>  (this.simplex.dual[] elements one of { -1.0, 0.0 })
(return == true)  ==>  (this.simplex.dual[] one of { [0.0, 0.0, -1.0], [0.0, 0.0, 0.0] })
(return == true)  ==>  (this.simplex.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0] })
(return == true)  ==>  (this.simplex.xb[] one of { [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] })
(return == true)  ==>  (this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0])
(return == true)  ==>  (this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 })
(return == true)  ==>  (this.variables has only one value)
(return == true)  ==>  (this.variables[] contains no nulls and has only one value, of length 6)
(return == true)  ==>  (this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable])
this.U != null
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L != null
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
this.id != null
this.A != null
this.A[] contains no nulls and has only one value, of length 3
this.c != null
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b != null
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.b[] sorted by <
this.fo one of { -2300.4, -2300.0, -2289.6 }
this.I != null
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
this.simplex != null
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
this.U[] elements > this.fo
this.L[] elements > this.fo
this.c[] elements > this.fo
this.b[] elements > this.fo
this.b[] elements > this.epsilon
this.simplex.xn[] elements > this.fo
this.simplex.cb[] elements > this.fo
this.simplex.cn[] elements > this.fo
this.simplex.c[] elements > this.fo
this.simplex.dual[] elements > this.fo
this.simplex.rq[] elements > this.fo
this.simplex.Lb[] elements > this.fo
this.simplex.Un[] elements > this.fo
this.simplex.Ln[] elements > this.fo
===========================================================================
model.Model.isInt(java.lang.String):::EXIT;condition="return == true"
this.U has only one value
this.L has only one value
this.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.id.toString one of { "", "l" }
this.A has only one value
this.c has only one value
this.b has only one value
this.fo one of { -2300.4, -2300.0 }
this.constraints has only one value
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.simplex.xb[] one of { [2192.6, 200.20000000000005, 0.09999999999999432], [2193.0, 200.3, 0.39999999999997726] }
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb[] elements one of { -4.0, -0.0 }
this.simplex.cb[] one of { [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.simplex.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-8.0, 9.9999999E7, -0.0, -7.0] }
this.simplex.In[].toString one of { [x2, a0, S_R3, x1], [x2, a0, x3, x1] }
this.simplex.Ib[].toString one of { [S_R1, S_R2, S_R3], [S_R1, S_R2, x3] }
this.simplex.dual[] elements one of { -1.0, 0.0 }
this.simplex.dual[] one of { [0.0, 0.0, -1.0], [0.0, 0.0, 0.0] }
this.simplex.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-6.0, 9.9999999E7, 1.0, -6.0] }
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb[] == [0.0, 0.0, 0.0]
this.simplex.Lb[] elements == 0.0
this.simplex.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
arg0.toString one of { "x1", "x2", "x3" }
return == true
size(this.variables[]) == 6
this.b[] < this.simplex.Ub[] (elementwise)
===========================================================================
model.Model.isInt(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
model.Model.isInteger():::ENTER
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A[] == this.simplex.A[]
this.b[] == this.simplex.b[]
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I[] == this.simplex.I[]
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
this.A[] contains no nulls and has only one value, of length 3
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo one of { -2300.4, -2300.0, -2289.6 }
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
===========================================================================
model.Model.isInteger():::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.A == orig(this.A)
this.A == orig(this.simplex.A)
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.B.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.N.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.A.getClass().getName())
this.A[] == this.simplex.A[]
this.A[] == orig(this.A[])
this.A[] == orig(this.simplex.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.b == orig(this.simplex.b)
this.b[] == this.simplex.b[]
this.b[] == orig(this.b[])
this.b[] == orig(this.simplex.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.I == orig(this.simplex.I)
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I.getClass().getName() == orig(this.I.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.In.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.Ib.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.I.getClass().getName())
this.I[] == this.simplex.I[]
this.I[] == orig(this.I[])
this.I[] == orig(this.simplex.I[])
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.simplex.B == orig(this.simplex.B)
this.simplex.B[] == orig(this.simplex.B[])
this.simplex.N == orig(this.simplex.N)
this.simplex.N[] == orig(this.simplex.N[])
this.simplex.xb == orig(this.simplex.xb)
this.simplex.xb[] == orig(this.simplex.xb[])
this.simplex.xn == orig(this.simplex.xn)
this.simplex.xn[] == orig(this.simplex.xn[])
this.simplex.cb == orig(this.simplex.cb)
this.simplex.cb[] == orig(this.simplex.cb[])
this.simplex.cn == orig(this.simplex.cn)
this.simplex.cn[] == orig(this.simplex.cn[])
this.simplex.In == orig(this.simplex.In)
this.simplex.In[] == orig(this.simplex.In[])
this.simplex.Ib == orig(this.simplex.Ib)
this.simplex.Ib[] == orig(this.simplex.Ib[])
this.simplex.c == orig(this.simplex.c)
this.simplex.c[] == orig(this.simplex.c[])
this.simplex.status == orig(this.simplex.status)
this.simplex.dual == orig(this.simplex.dual)
this.simplex.dual[] == orig(this.simplex.dual[])
this.simplex.rq == orig(this.simplex.rq)
this.simplex.rq[] == orig(this.simplex.rq[])
this.simplex.Ub == orig(this.simplex.Ub)
this.simplex.Ub[] == orig(this.simplex.Ub[])
this.simplex.Lb == orig(this.simplex.Lb)
this.simplex.Lb[] == orig(this.simplex.Lb[])
this.simplex.Un == orig(this.simplex.Un)
this.simplex.Un == orig(this.simplex.U)
this.simplex.Un[] == orig(this.simplex.Un[])
this.simplex.Un[] == orig(this.simplex.U[])
this.simplex.Ln == orig(this.simplex.Ln)
this.simplex.Ln == orig(this.simplex.L)
this.simplex.Ln[] == orig(this.simplex.Ln[])
this.simplex.Ln[] == orig(this.simplex.L[])
this.simplex.m == orig(this.simplex.m)
this.simplex.m == orig(size(this.A[]))
this.simplex.m == orig(size(this.b[]))
this.simplex.m == orig(size(this.simplex.B[]))
this.simplex.m == orig(size(this.simplex.N[]))
this.simplex.m == orig(size(this.simplex.xb[]))
this.simplex.m == orig(size(this.simplex.xn[]))-1
this.simplex.m == orig(size(this.simplex.cb[]))
this.simplex.m == orig(size(this.simplex.cn[]))-1
this.simplex.m == orig(size(this.simplex.b[]))
this.simplex.m == orig(size(this.simplex.In[]))-1
this.simplex.m == orig(size(this.simplex.Ib[]))
this.simplex.m == orig(size(this.simplex.A[]))
this.simplex.m == orig(size(this.simplex.dual[]))
this.simplex.m == orig(size(this.simplex.rq[]))-1
this.simplex.m == orig(size(this.simplex.Ub[]))
this.simplex.m == orig(size(this.simplex.Lb[]))
this.simplex.m == orig(size(this.simplex.Un[]))-1
this.simplex.m == orig(size(this.simplex.Ln[]))-1
this.simplex.m == orig(size(this.simplex.U[]))-1
this.simplex.m == orig(size(this.simplex.L[]))-1
this.simplex.n == orig(this.simplex.n)
this.simplex.n == orig(size(this.U[]))
this.simplex.n == orig(size(this.L[]))
this.simplex.n == orig(size(this.c[]))
this.simplex.n == orig(size(this.I[]))
this.simplex.n == orig(size(this.simplex.c[]))
this.simplex.n == orig(size(this.simplex.I[]))
this.simplex.initialTime == orig(this.simplex.initialTime)
this.simplex.nart == orig(this.simplex.nart)
this.print == orig(this.simplex.printSolution)
this.print == orig(this.print)
size(this.simplex.xn[]) == orig(size(this.simplex.cn[]))
size(this.simplex.xn[]) == orig(size(this.simplex.In[]))
size(this.simplex.xn[]) == orig(size(this.simplex.rq[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Un[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Ln[]))
size(this.simplex.xn[]) == orig(size(this.simplex.U[]))
size(this.simplex.xn[]) == orig(size(this.simplex.L[]))
(this.id.toString == "")  <==>  (return == false)
(this.id.toString == "")  <==>  (this.fo == -2300.4)
(this.id.toString == "")  <==>  (this.ofle has only one value)
(this.id.toString == "")  <==>  (this.simplex.Ib[].toString == [S_R1, S_R2, x3])
(this.id.toString == "")  <==>  (this.simplex.In[].toString == [x2, a0, S_R3, x1])
(this.id.toString == "")  <==>  (this.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0])
(this.id.toString == "")  <==>  (this.simplex.cb[] == [-0.0, -0.0, -4.0])
(this.id.toString == "")  <==>  (this.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0])
(this.id.toString == "")  <==>  (this.simplex.dual[] == [0.0, 0.0, -1.0])
(this.id.toString == "")  <==>  (this.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0])
(this.id.toString == "")  <==>  (this.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432])
(this.id.toString == "")  ==>  (orig(this) has only one value)
(this.id.toString == "")  ==>  (size(this.variables[]) == 6)
(this.id.toString == "")  ==>  (this.A has only one value)
(this.id.toString == "")  ==>  (this.I has only one value)
(this.id.toString == "")  ==>  (this.L has only one value)
(this.id.toString == "")  ==>  (this.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0])
(this.id.toString == "")  ==>  (this.U has only one value)
(this.id.toString == "")  ==>  (this.U[] == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308])
(this.id.toString == "")  ==>  (this.U[] elements one of { 100.0, 200.0, 1.7976931348623157E308 })
(this.id.toString == "")  ==>  (this.b has only one value)
(this.id.toString == "")  ==>  (this.c has only one value)
(this.id.toString == "")  ==>  (this.constraints has only one value)
(this.id.toString == "")  ==>  (this.id has only one value)
(this.id.toString == "")  ==>  (this.ofle.coeffs has only one value)
(this.id.toString == "")  ==>  (this.ofle.coeffs[] contains no nulls and has only one value, of length 3)
(this.id.toString == "")  ==>  (this.ofle.coeffs[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double])
(this.id.toString == "")  ==>  (this.ofle.coeffs[].getClass().getName() elements == java.lang.Double.class)
(this.id.toString == "")  ==>  (this.ofle.varNames has only one value)
(this.id.toString == "")  ==>  (this.ofle.varNames[] contains no nulls and has only one value, of length 3)
(this.id.toString == "")  ==>  (this.ofle.varNames[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String])
(this.id.toString == "")  ==>  (this.ofle.varNames[].getClass().getName() elements == java.lang.String.class)
(this.id.toString == "")  ==>  (this.simplex has only one value)
(this.id.toString == "")  ==>  (this.simplex.B has only one value)
(this.id.toString == "")  ==>  (this.simplex.B[] contains no nulls and has only one value, of length 3)
(this.id.toString == "")  ==>  (this.simplex.B[this.simplex.m-1] has only one value)
(this.id.toString == "")  ==>  (this.simplex.B[this.simplex.nart-1] has only one value)
(this.id.toString == "")  ==>  (this.simplex.B[this.simplex.nart] has only one value)
(this.id.toString == "")  ==>  (this.simplex.Ib has only one value)
(this.id.toString == "")  ==>  (this.simplex.Ib[] contains no nulls and has only one value, of length 3)
(this.id.toString == "")  ==>  (this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" })
(this.id.toString == "")  ==>  (this.simplex.Ib[this.simplex.m-1] has only one value)
(this.id.toString == "")  ==>  (this.simplex.Ib[this.simplex.nart-1] has only one value)
(this.id.toString == "")  ==>  (this.simplex.In has only one value)
(this.id.toString == "")  ==>  (this.simplex.In[] contains no nulls and has only one value, of length 4)
(this.id.toString == "")  ==>  (this.simplex.In[this.simplex.m-1] has only one value)
(this.id.toString == "")  ==>  (this.simplex.In[this.simplex.m] has only one value)
(this.id.toString == "")  ==>  (this.simplex.In[this.simplex.nart-1] has only one value)
(this.id.toString == "")  ==>  (this.simplex.In[this.simplex.nart] has only one value)
(this.id.toString == "")  ==>  (this.simplex.Lb has only one value)
(this.id.toString == "")  ==>  (this.simplex.Lb[] == [0.0, 0.0, 0.0])
(this.id.toString == "")  ==>  (this.simplex.Lb[] elements == 0.0)
(this.id.toString == "")  ==>  (this.simplex.Ln has only one value)
(this.id.toString == "")  ==>  (this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0])
(this.id.toString == "")  ==>  (this.simplex.N has only one value)
(this.id.toString == "")  ==>  (this.simplex.N[] contains no nulls and has only one value, of length 3)
(this.id.toString == "")  ==>  (this.simplex.N[this.simplex.m-1] has only one value)
(this.id.toString == "")  ==>  (this.simplex.N[this.simplex.nart-1] has only one value)
(this.id.toString == "")  ==>  (this.simplex.N[this.simplex.nart] has only one value)
(this.id.toString == "")  ==>  (this.simplex.Ub has only one value)
(this.id.toString == "")  ==>  (this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308])
(this.id.toString == "")  ==>  (this.simplex.Ub[] elements == 1.7976931348623157E308)
(this.id.toString == "")  ==>  (this.simplex.Un has only one value)
(this.id.toString == "")  ==>  (this.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 })
(this.id.toString == "")  ==>  (this.simplex.c has only one value)
(this.id.toString == "")  ==>  (this.simplex.cb has only one value)
(this.id.toString == "")  ==>  (this.simplex.cb[] elements one of { -4.0, -0.0 })
(this.id.toString == "")  ==>  (this.simplex.cn has only one value)
(this.id.toString == "")  ==>  (this.simplex.dual has only one value)
(this.id.toString == "")  ==>  (this.simplex.dual[] elements one of { -1.0, 0.0 })
(this.id.toString == "")  ==>  (this.simplex.rq has only one value)
(this.id.toString == "")  ==>  (this.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 })
(this.id.toString == "")  ==>  (this.simplex.xb has only one value)
(this.id.toString == "")  ==>  (this.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 })
(this.id.toString == "")  ==>  (this.simplex.xn has only one value)
(this.id.toString == "")  ==>  (this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0])
(this.id.toString == "")  ==>  (this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 })
(this.id.toString == "")  ==>  (this.variables has only one value)
(this.id.toString == "")  ==>  (this.variables[] contains no nulls and has only one value, of length 6)
(this.id.toString == "")  ==>  (this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable])
(this.id.toString one of { "l", "r" })  <==>  (return == true)
(this.id.toString one of { "l", "r" })  <==>  (this.fo one of { -2300.0, -2289.6 })
(this.id.toString one of { "l", "r" })  <==>  (this.ofle == null)
(this.id.toString one of { "l", "r" })  <==>  (this.simplex.Ib[].toString one of { [S_R1, S_R2, S_R3], [S_R1, S_R2, x2] })
(this.id.toString one of { "l", "r" })  <==>  (this.simplex.In[].toString one of { [x2, a0, x3, x1], [x3, a0, S_R3, x1] })
(this.id.toString one of { "l", "r" })  <==>  (this.simplex.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] })
(this.id.toString one of { "l", "r" })  <==>  (this.simplex.cb[] one of { [-0.0, -0.0, -8.0], [0.0, 0.0, 0.0] })
(this.id.toString one of { "l", "r" })  <==>  (this.simplex.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] })
(this.id.toString one of { "l", "r" })  <==>  (this.simplex.dual[] one of { [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] })
(this.id.toString one of { "l", "r" })  <==>  (this.simplex.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [12.0, 9.9999999E7, 4.0, -3.0] })
(this.id.toString one of { "l", "r" })  <==>  (this.simplex.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2193.0, 200.3, 0.39999999999997726] })
(this.id.toString one of { "l", "r" })  ==>  (size(this.variables[]) one of { 0, 6 })
(this.id.toString one of { "l", "r" })  ==>  (this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] })
(this.id.toString one of { "l", "r" })  ==>  (this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] })
(this.id.toString one of { "l", "r" })  ==>  (this.simplex.Lb[] elements one of { 0.0, 76.0 })
(this.id.toString one of { "l", "r" })  ==>  (this.simplex.Lb[] one of { [0.0, 0.0, 0.0], [0.0, 0.0, 76.0] })
(this.id.toString one of { "l", "r" })  ==>  (this.simplex.Ln[] one of { [1.0, 0.0, 0.0, 1.0], [76.0, 0.0, 0.0, 1.0] })
(this.id.toString one of { "l", "r" })  ==>  (this.simplex.Ub[] elements one of { 200.0, 1.7976931348623157E308 })
(this.id.toString one of { "l", "r" })  ==>  (this.simplex.Ub[] one of { [1.7976931348623157E308, 1.7976931348623157E308, 200.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] })
(this.id.toString one of { "l", "r" })  ==>  (this.simplex.cb[] elements one of { -8.0, 0.0 })
(this.id.toString one of { "l", "r" })  ==>  (this.simplex.dual[] elements one of { -4.0, 0.0 })
(this.id.toString one of { "l", "r" })  ==>  (this.simplex.xn[] one of { [1.0, 0.0, 0.0, 100.0], [200.0, 0.0, 0.0, 100.0] })
(this.id.toString one of { "l", "r" })  ==>  (this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] })
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
this.A[] contains no nulls and has only one value, of length 3
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo one of { -2300.4, -2300.0, -2289.6 }
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
===========================================================================
model.Model.isInteger():::EXIT;condition="return == true"
this.id.toString one of { "l", "r" }
this.fo one of { -2300.0, -2289.6 }
this.ofle == null
this.simplex.xb[] one of { [2174.6, 201.10000000000002, 198.2], [2193.0, 200.3, 0.39999999999997726] }
this.simplex.cb[] elements one of { -8.0, 0.0 }
this.simplex.cb[] one of { [-0.0, -0.0, -8.0], [0.0, 0.0, 0.0] }
this.simplex.cn[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [-4.0, 9.9999999E7, -0.0, -7.0] }
this.simplex.In[].toString one of { [x2, a0, x3, x1], [x3, a0, S_R3, x1] }
this.simplex.Ib[].toString one of { [S_R1, S_R2, S_R3], [S_R1, S_R2, x2] }
this.simplex.dual[] elements one of { -4.0, 0.0 }
this.simplex.dual[] one of { [-0.0, -0.0, -4.0], [0.0, 0.0, 0.0] }
this.simplex.rq[] one of { [-8.0, 9.9999999E7, -4.0, -7.0], [12.0, 9.9999999E7, 4.0, -3.0] }
this.simplex.Un[] one of { [200.0, 1.7976931348623157E308, 0.0, 100.0], [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 100.0] }
return == true
===========================================================================
model.Model.isInteger():::EXIT;condition="not(return == true)"
this.U has only one value
this.U[] == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.L has only one value
this.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.id has only one value
this.id.toString == ""
this.A has only one value
this.c has only one value
this.b has only one value
this.fo == -2300.4
this.I has only one value
this.constraints has only one value
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.simplex.xn has only one value
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb has only one value
this.simplex.cb[] == [-0.0, -0.0, -4.0]
this.simplex.cb[] elements one of { -4.0, -0.0 }
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, S_R3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.simplex.c has only one value
this.simplex.dual has only one value
this.simplex.dual[] == [0.0, 0.0, -1.0]
this.simplex.dual[] elements one of { -1.0, 0.0 }
this.simplex.rq has only one value
this.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.simplex.Ub has only one value
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb has only one value
this.simplex.Lb[] == [0.0, 0.0, 0.0]
this.simplex.Lb[] elements == 0.0
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.simplex.Ln has only one value
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
return == false
orig(this) has only one value
size(this.variables[]) == 6
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.m-1] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.m-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
===========================================================================
model.Model.isSparse():::ENTER
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
this.A[] contains no nulls and has only one value, of length 3
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
this.simplex == null
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.isSparse():::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.A == orig(this.A)
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A[] == orig(this.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.print == orig(this.print)
size(this.U[]) == orig(size(this.L[]))
size(this.U[]) == orig(size(this.c[]))
size(this.A[]) == orig(size(this.b[]))
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
this.A[] contains no nulls and has only one value, of length 3
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
this.simplex == null
return == true
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.isSparse():::EXIT;condition="return == true"
===========================================================================
model.Model.posVarByName(java.lang.String):::ENTER
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A[] == this.simplex.A[]
this.b[] == this.simplex.b[]
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I[] == this.simplex.I[]
this.simplex.cb[] == this.simplex.dual[]
this.simplex.cb[] == this.simplex.Lb[]
this.simplex.cn[] == this.simplex.rq[]
this.I[this.simplex.m-1] == this.simplex.In[this.simplex.m-1]
this.I[this.simplex.n-1] == this.simplex.Ib[this.simplex.m-1]
this has only one value
this.U has only one value
this.U[] == [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.L has only one value
this.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.id has only one value
this.id.toString == "l"
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.b[] sorted by <
this.fo == -2300.0
this.I has only one value
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle == null
this.simplex has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2193.0, 200.3, 0.39999999999997726]
this.simplex.xb[] elements one of { 0.39999999999997726, 200.3, 2193.0 }
this.simplex.xn has only one value
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb has only one value
this.simplex.cb[] == [0.0, 0.0, 0.0]
this.simplex.cb[] elements == 0.0
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -4.0, -7.0]
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, x3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, S_R3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "S_R3" }
this.simplex.c has only one value
this.simplex.dual has only one value
this.simplex.rq has only one value
this.simplex.Ub has only one value
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb has only one value
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 0.0, 100.0]
this.simplex.Ln has only one value
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
this.U[] elements > this.fo
this.L[] elements > this.fo
this.c[] elements > this.fo
this.b[] elements > this.fo
this.b[] elements > this.epsilon
this.b[] < this.simplex.Ub[] (elementwise)
this.simplex.xn[] elements > this.fo
this.simplex.cn[] elements > this.fo
this.simplex.c[] elements > this.fo
this.simplex.Un[] elements > this.fo
this.simplex.Ln[] elements > this.fo
===========================================================================
model.Model.posVarByName(java.lang.String):::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.A == orig(this.A)
this.A == orig(this.simplex.A)
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.B.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.N.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.A.getClass().getName())
this.A[] == this.simplex.A[]
this.A[] == orig(this.A[])
this.A[] == orig(this.simplex.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.b == orig(this.simplex.b)
this.b[] == this.simplex.b[]
this.b[] == orig(this.b[])
this.b[] == orig(this.simplex.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.I == orig(this.simplex.I)
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I.getClass().getName() == orig(this.I.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.In.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.Ib.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.I.getClass().getName())
this.I[] == this.simplex.I[]
this.I[] == orig(this.I[])
this.I[] == orig(this.simplex.I[])
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.simplex.B == orig(this.simplex.B)
this.simplex.B[] == orig(this.simplex.B[])
this.simplex.N == orig(this.simplex.N)
this.simplex.N[] == orig(this.simplex.N[])
this.simplex.xb == orig(this.simplex.xb)
this.simplex.xb[] == orig(this.simplex.xb[])
this.simplex.xn == orig(this.simplex.xn)
this.simplex.xn[] == orig(this.simplex.xn[])
this.simplex.cb == orig(this.simplex.cb)
this.simplex.cb[] == this.simplex.dual[]
this.simplex.cb[] == this.simplex.Lb[]
this.simplex.cb[] == orig(this.simplex.cb[])
this.simplex.cb[] == orig(this.simplex.dual[])
this.simplex.cb[] == orig(this.simplex.Lb[])
this.simplex.cn == orig(this.simplex.cn)
this.simplex.cn[] == this.simplex.rq[]
this.simplex.cn[] == orig(this.simplex.cn[])
this.simplex.cn[] == orig(this.simplex.rq[])
this.simplex.In == orig(this.simplex.In)
this.simplex.In[] == orig(this.simplex.In[])
this.simplex.Ib == orig(this.simplex.Ib)
this.simplex.Ib[] == orig(this.simplex.Ib[])
this.simplex.c == orig(this.simplex.c)
this.simplex.c[] == orig(this.simplex.c[])
this.simplex.status == orig(this.simplex.status)
this.simplex.dual == orig(this.simplex.dual)
this.simplex.rq == orig(this.simplex.rq)
this.simplex.Ub == orig(this.simplex.Ub)
this.simplex.Ub[] == orig(this.simplex.Ub[])
this.simplex.Lb == orig(this.simplex.Lb)
this.simplex.Un == orig(this.simplex.Un)
this.simplex.Un == orig(this.simplex.U)
this.simplex.Un[] == orig(this.simplex.Un[])
this.simplex.Un[] == orig(this.simplex.U[])
this.simplex.Ln == orig(this.simplex.Ln)
this.simplex.Ln == orig(this.simplex.L)
this.simplex.Ln[] == orig(this.simplex.Ln[])
this.simplex.Ln[] == orig(this.simplex.L[])
this.simplex.m == orig(this.simplex.m)
this.simplex.m == orig(size(this.A[]))
this.simplex.m == orig(size(this.b[]))
this.simplex.m == orig(size(this.simplex.B[]))
this.simplex.m == orig(size(this.simplex.N[]))
this.simplex.m == orig(size(this.simplex.xb[]))
this.simplex.m == orig(size(this.simplex.xn[]))-1
this.simplex.m == orig(size(this.simplex.cb[]))
this.simplex.m == orig(size(this.simplex.cn[]))-1
this.simplex.m == orig(size(this.simplex.b[]))
this.simplex.m == orig(size(this.simplex.In[]))-1
this.simplex.m == orig(size(this.simplex.Ib[]))
this.simplex.m == orig(size(this.simplex.A[]))
this.simplex.m == orig(size(this.simplex.dual[]))
this.simplex.m == orig(size(this.simplex.rq[]))-1
this.simplex.m == orig(size(this.simplex.Ub[]))
this.simplex.m == orig(size(this.simplex.Lb[]))
this.simplex.m == orig(size(this.simplex.Un[]))-1
this.simplex.m == orig(size(this.simplex.Ln[]))-1
this.simplex.m == orig(size(this.simplex.U[]))-1
this.simplex.m == orig(size(this.simplex.L[]))-1
this.simplex.n == orig(this.simplex.n)
this.simplex.n == orig(size(this.U[]))
this.simplex.n == orig(size(this.L[]))
this.simplex.n == orig(size(this.c[]))
this.simplex.n == orig(size(this.I[]))
this.simplex.n == orig(size(this.simplex.c[]))
this.simplex.n == orig(size(this.simplex.I[]))
this.simplex.initialTime == orig(this.simplex.initialTime)
this.simplex.nart == orig(this.simplex.nart)
this.print == orig(this.simplex.printSolution)
this.print == orig(this.print)
arg0.toString == orig(arg0.toString)
size(this.simplex.xn[]) == orig(size(this.simplex.cn[]))
size(this.simplex.xn[]) == orig(size(this.simplex.In[]))
size(this.simplex.xn[]) == orig(size(this.simplex.rq[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Un[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Ln[]))
size(this.simplex.xn[]) == orig(size(this.simplex.U[]))
size(this.simplex.xn[]) == orig(size(this.simplex.L[]))
this.I[this.simplex.m-1] == this.simplex.In[this.simplex.m-1]
this.I[this.simplex.m-1] == this.simplex.In[orig(this.simplex.m)-1]
this.I[this.simplex.m-1] == orig(this.simplex.In[post(this.simplex.m)-1])
this.I[this.simplex.m-1] == orig(this.simplex.In[this.simplex.m-1])
this.I[this.simplex.n-1] == this.simplex.Ib[this.simplex.m-1]
this.I[this.simplex.n-1] == this.simplex.Ib[orig(this.simplex.m)-1]
this.I[this.simplex.n-1] == orig(this.simplex.Ib[post(this.simplex.m)-1])
this.I[this.simplex.n-1] == orig(this.simplex.Ib[this.simplex.m-1])
this.U has only one value
this.U[] == [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.L has only one value
this.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.id has only one value
this.id.toString == "l"
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.b[] sorted by <
this.fo == -2300.0
this.I has only one value
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle == null
this.simplex has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2193.0, 200.3, 0.39999999999997726]
this.simplex.xb[] elements one of { 0.39999999999997726, 200.3, 2193.0 }
this.simplex.xn has only one value
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb has only one value
this.simplex.cb[] == [0.0, 0.0, 0.0]
this.simplex.cb[] elements == 0.0
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -4.0, -7.0]
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, x3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, S_R3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "S_R3" }
this.simplex.c has only one value
this.simplex.dual has only one value
this.simplex.rq has only one value
this.simplex.Ub has only one value
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb has only one value
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 0.0, 100.0]
this.simplex.Ln has only one value
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
this.U[] elements > this.fo
this.L[] elements > this.fo
this.c[] elements > this.fo
this.b[] elements > this.fo
this.b[] elements > this.epsilon
this.b[] < this.simplex.Ub[] (elementwise)
this.simplex.xn[] elements > this.fo
this.simplex.cn[] elements > this.fo
this.simplex.c[] elements > this.fo
this.simplex.Un[] elements > this.fo
this.simplex.Ln[] elements > this.fo
return <= size(this.U[])-1
===========================================================================
model.Model.preSolve():::ENTER
this has only one value
this.U has only one value
this.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.L has only one value
this.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 75.1 }
this.id == null
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex == null
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.preSolve():::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.A == orig(this.A)
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A[] == orig(this.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.U has only one value
this.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.L has only one value
this.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 75.1 }
this.id == null
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex == null
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.preSolveBoundsOnIntegers():::ENTER
this has only one value
this.U has only one value
this.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.L has only one value
this.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 75.1 }
this.id == null
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex == null
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.preSolveBoundsOnIntegers():::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.A == orig(this.A)
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A[] == orig(this.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.U has only one value
this.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.L has only one value
this.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 75.1 }
this.id == null
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex == null
return == true
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.preSolveBoundsOnIntegers():::EXIT;condition="return == true"
===========================================================================
model.Model.preSolveEmptyRow():::ENTER
this has only one value
this.U has only one value
this.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.L has only one value
this.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 75.1 }
this.id == null
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex == null
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.preSolveEmptyRow():::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.A == orig(this.A)
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A[] == orig(this.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.U has only one value
this.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.L has only one value
this.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 75.1 }
this.id == null
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle has only one value
this.simplex == null
return == true
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.preSolveEmptyRow():::EXIT;condition="return == true"
===========================================================================
model.Model.restoreSolutions():::ENTER
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A[] == this.simplex.A[]
this.b[] == this.simplex.b[]
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I[] == this.simplex.I[]
this.simplex.cb[] == this.simplex.dual[]
this.simplex.cb[] == this.simplex.Lb[]
this.simplex.cn[] == this.simplex.rq[]
this.I[this.simplex.m-1] == this.simplex.In[this.simplex.m-1]
this.I[this.simplex.n-1] == this.simplex.Ib[this.simplex.m-1]
this has only one value
this.U has only one value
this.U[] == [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.L has only one value
this.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.id has only one value
this.id.toString == "l"
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == -2300.0
this.I has only one value
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle == null
this.simplex has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2193.0, 200.3, 0.39999999999997726]
this.simplex.xb[] elements one of { 0.39999999999997726, 200.3, 2193.0 }
this.simplex.xn has only one value
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb has only one value
this.simplex.cb[] == [0.0, 0.0, 0.0]
this.simplex.cb[] elements == 0.0
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -4.0, -7.0]
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, x3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, S_R3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "S_R3" }
this.simplex.c has only one value
this.simplex.dual has only one value
this.simplex.rq has only one value
this.simplex.Ub has only one value
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb has only one value
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 0.0, 100.0]
this.simplex.Ln has only one value
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
===========================================================================
model.Model.restoreSolutions():::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.A == orig(this.A)
this.A == orig(this.simplex.A)
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.B.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.N.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.A.getClass().getName())
this.A[] == this.simplex.A[]
this.A[] == orig(this.A[])
this.A[] == orig(this.simplex.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.b == orig(this.simplex.b)
this.b[] == this.simplex.b[]
this.b[] == orig(this.b[])
this.b[] == orig(this.simplex.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.I == orig(this.simplex.I)
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I.getClass().getName() == orig(this.I.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.In.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.Ib.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.I.getClass().getName())
this.I[] == this.simplex.I[]
this.I[] == orig(this.I[])
this.I[] == orig(this.simplex.I[])
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.simplex.B == orig(this.simplex.B)
this.simplex.B[] == orig(this.simplex.B[])
this.simplex.N == orig(this.simplex.N)
this.simplex.N[] == orig(this.simplex.N[])
this.simplex.xb == orig(this.simplex.xb)
this.simplex.xb[] == orig(this.simplex.xb[])
this.simplex.xn == orig(this.simplex.xn)
this.simplex.xn[] == orig(this.simplex.xn[])
this.simplex.cb == orig(this.simplex.cb)
this.simplex.cb[] == this.simplex.dual[]
this.simplex.cb[] == this.simplex.Lb[]
this.simplex.cb[] == orig(this.simplex.cb[])
this.simplex.cb[] == orig(this.simplex.dual[])
this.simplex.cb[] == orig(this.simplex.Lb[])
this.simplex.cn == orig(this.simplex.cn)
this.simplex.cn[] == this.simplex.rq[]
this.simplex.cn[] == orig(this.simplex.cn[])
this.simplex.cn[] == orig(this.simplex.rq[])
this.simplex.In == orig(this.simplex.In)
this.simplex.In[] == orig(this.simplex.In[])
this.simplex.Ib == orig(this.simplex.Ib)
this.simplex.Ib[] == orig(this.simplex.Ib[])
this.simplex.c == orig(this.simplex.c)
this.simplex.c[] == orig(this.simplex.c[])
this.simplex.status == orig(this.simplex.status)
this.simplex.dual == orig(this.simplex.dual)
this.simplex.rq == orig(this.simplex.rq)
this.simplex.Ub == orig(this.simplex.Ub)
this.simplex.Ub[] == orig(this.simplex.Ub[])
this.simplex.Lb == orig(this.simplex.Lb)
this.simplex.Un == orig(this.simplex.Un)
this.simplex.Un == orig(this.simplex.U)
this.simplex.Un[] == orig(this.simplex.Un[])
this.simplex.Un[] == orig(this.simplex.U[])
this.simplex.Ln == orig(this.simplex.Ln)
this.simplex.Ln == orig(this.simplex.L)
this.simplex.Ln[] == orig(this.simplex.Ln[])
this.simplex.Ln[] == orig(this.simplex.L[])
this.simplex.m == orig(this.simplex.m)
this.simplex.m == orig(size(this.A[]))
this.simplex.m == orig(size(this.b[]))
this.simplex.m == orig(size(this.simplex.B[]))
this.simplex.m == orig(size(this.simplex.N[]))
this.simplex.m == orig(size(this.simplex.xb[]))
this.simplex.m == orig(size(this.simplex.xn[]))-1
this.simplex.m == orig(size(this.simplex.cb[]))
this.simplex.m == orig(size(this.simplex.cn[]))-1
this.simplex.m == orig(size(this.simplex.b[]))
this.simplex.m == orig(size(this.simplex.In[]))-1
this.simplex.m == orig(size(this.simplex.Ib[]))
this.simplex.m == orig(size(this.simplex.A[]))
this.simplex.m == orig(size(this.simplex.dual[]))
this.simplex.m == orig(size(this.simplex.rq[]))-1
this.simplex.m == orig(size(this.simplex.Ub[]))
this.simplex.m == orig(size(this.simplex.Lb[]))
this.simplex.m == orig(size(this.simplex.Un[]))-1
this.simplex.m == orig(size(this.simplex.Ln[]))-1
this.simplex.m == orig(size(this.simplex.U[]))-1
this.simplex.m == orig(size(this.simplex.L[]))-1
this.simplex.n == orig(this.simplex.n)
this.simplex.n == orig(size(this.U[]))
this.simplex.n == orig(size(this.L[]))
this.simplex.n == orig(size(this.c[]))
this.simplex.n == orig(size(this.I[]))
this.simplex.n == orig(size(this.simplex.c[]))
this.simplex.n == orig(size(this.simplex.I[]))
this.simplex.initialTime == orig(this.simplex.initialTime)
this.simplex.nart == orig(this.simplex.nart)
this.print == orig(this.simplex.printSolution)
this.print == orig(this.print)
size(this.simplex.xn[]) == orig(size(this.simplex.cn[]))
size(this.simplex.xn[]) == orig(size(this.simplex.In[]))
size(this.simplex.xn[]) == orig(size(this.simplex.rq[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Un[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Ln[]))
size(this.simplex.xn[]) == orig(size(this.simplex.U[]))
size(this.simplex.xn[]) == orig(size(this.simplex.L[]))
this.I[this.simplex.m-1] == this.simplex.In[this.simplex.m-1]
this.I[this.simplex.m-1] == this.simplex.In[orig(this.simplex.m)-1]
this.I[this.simplex.m-1] == orig(this.simplex.In[post(this.simplex.m)-1])
this.I[this.simplex.m-1] == orig(this.simplex.In[this.simplex.m-1])
this.I[this.simplex.n-1] == this.simplex.Ib[this.simplex.m-1]
this.I[this.simplex.n-1] == this.simplex.Ib[orig(this.simplex.m)-1]
this.I[this.simplex.n-1] == orig(this.simplex.Ib[post(this.simplex.m)-1])
this.I[this.simplex.n-1] == orig(this.simplex.Ib[this.simplex.m-1])
this.U has only one value
this.U[] == [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.L has only one value
this.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.id has only one value
this.id.toString == "l"
this.A has only one value
this.A[] contains no nulls and has only one value, of length 3
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b has only one value
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == -2300.0
this.I has only one value
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle == null
this.simplex has only one value
this.simplex.B has only one value
this.simplex.B[] contains no nulls and has only one value, of length 3
this.simplex.N has only one value
this.simplex.N[] contains no nulls and has only one value, of length 3
this.simplex.xb has only one value
this.simplex.xb[] == [2193.0, 200.3, 0.39999999999997726]
this.simplex.xb[] elements one of { 0.39999999999997726, 200.3, 2193.0 }
this.simplex.xn has only one value
this.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.simplex.cb has only one value
this.simplex.cb[] == [0.0, 0.0, 0.0]
this.simplex.cb[] elements == 0.0
this.simplex.cn has only one value
this.simplex.cn[] == [-8.0, 9.9999999E7, -4.0, -7.0]
this.simplex.In has only one value
this.simplex.In[] contains no nulls and has only one value, of length 4
this.simplex.In[].toString == [x2, a0, x3, x1]
this.simplex.Ib has only one value
this.simplex.Ib[] contains no nulls and has only one value, of length 3
this.simplex.Ib[].toString == [S_R1, S_R2, S_R3]
this.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "S_R3" }
this.simplex.c has only one value
this.simplex.dual has only one value
this.simplex.rq has only one value
this.simplex.Ub has only one value
this.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.simplex.Ub[] elements == 1.7976931348623157E308
this.simplex.Lb has only one value
this.simplex.Un has only one value
this.simplex.Un[] == [200.0, 1.7976931348623157E308, 0.0, 100.0]
this.simplex.Ln has only one value
this.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.simplex.B[this.simplex.m-1] has only one value
this.simplex.B[this.simplex.nart] has only one value
this.simplex.B[this.simplex.nart-1] has only one value
this.simplex.N[this.simplex.m-1] has only one value
this.simplex.N[this.simplex.nart] has only one value
this.simplex.N[this.simplex.nart-1] has only one value
this.simplex.In[this.simplex.m] has only one value
this.simplex.In[this.simplex.nart] has only one value
this.simplex.In[this.simplex.nart-1] has only one value
this.simplex.Ib[this.simplex.nart-1] has only one value
===========================================================================
model.Model.setA(double[][]):::ENTER
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
this.id == null
this.A == null
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b == null
this.fo == 0.0
this.I == null
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
this.ofle == null
this.simplex == null
arg0.getClass().getName() == double[][].class
arg0[] contains no nulls and has only one value, of length 3
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
size(arg0[]) == 3
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.setA(double[][]):::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.A == orig(arg0)
this.A.getClass().getName() == orig(arg0.getClass().getName())
this.A[] == arg0[]
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.print == orig(this.print)
arg0[] == orig(arg0[])
size(this.U[]) == orig(size(this.L[]))
size(this.U[]) == orig(size(this.c[]))
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
this.id == null
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b == null
this.fo == 0.0
this.I == null
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
this.ofle == null
this.simplex == null
arg0[] contains no nulls and has only one value, of length 3
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.setB(double[]):::ENTER
size(this.A[]) == size(arg0[])
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
this.id == null
this.A[] contains no nulls and has only one value, of length 3
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b == null
this.fo == 0.0
this.I == null
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
this.ofle == null
this.simplex == null
arg0[] == [7.0, 500.3, 500.4]
arg0[] elements one of { 7.0, 500.3, 500.4 }
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.setB(double[]):::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.A == orig(this.A)
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A[] == orig(this.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(arg0)
this.b[] == arg0[]
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.print == orig(this.print)
arg0[] == orig(arg0[])
size(this.U[]) == orig(size(this.L[]))
size(this.U[]) == orig(size(this.c[]))
size(this.A[]) == orig(size(arg0[]))
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
this.id == null
this.A[] contains no nulls and has only one value, of length 3
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.fo == 0.0
this.I == null
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
this.ofle == null
this.simplex == null
arg0[] == [7.0, 500.3, 500.4]
arg0[] elements one of { 7.0, 500.3, 500.4 }
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.setC(double[]):::ENTER
this.U == this.L
this.U == this.c
this.U == this.b
this.U == null
this.id == null
this.A == null
this.fo == 0.0
this.I == null
this.constraints[].getClass().getName() one of { [], [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr] }
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
this.ofle == null
this.simplex == null
arg0[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
arg0[] elements >= 0.0
size(this.constraints[]) one of { 0, 3 }
size(this.variables[]) one of { 0, 6 }
size(arg0[]) == 6
this.fo in arg0[]
===========================================================================
model.Model.setC(double[]):::EXIT
this.U == this.L
this.U == this.b
this.U == orig(this.U)
this.U == orig(this.L)
this.U == orig(this.c)
this.U == orig(this.b)
this.id == orig(this.id)
this.A == orig(this.A)
this.c == orig(arg0)
this.c[] == arg0[]
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.print == orig(this.print)
arg0[] == orig(arg0[])
this.U == null
this.id == null
this.A == null
this.fo == 0.0
this.I == null
this.constraints[].getClass().getName() one of { [], [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr] }
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
this.ofle == null
this.simplex == null
arg0[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
arg0[] elements >= 0.0
size(this.constraints[]) one of { 0, 3 }
size(this.variables[]) one of { 0, 6 }
this.fo in arg0[]
===========================================================================
model.Model.setConstraints(java.util.ArrayList):::ENTER
this.U == this.L
this.U == this.b
this.U == null
this.id == null
this.A == null
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.fo == 0.0
this.I == null
this.constraints[] == []
this.constraints[].getClass().getName() == []
this.variables[] == []
this.variables[].getClass().getName() == []
this.ofle == null
this.simplex == null
arg0[] contains no nulls and has only one value, of length 3
arg0[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
arg0[].getClass().getName() elements == model.QBnBconstr.class
size(arg0[]) == 3
this.fo in this.c[]
===========================================================================
model.Model.setConstraints(java.util.ArrayList):::EXIT
this.U == this.L
this.U == this.b
this.U == orig(this.U)
this.U == orig(this.L)
this.U == orig(this.b)
this.id == orig(this.id)
this.A == orig(this.A)
this.c == orig(this.c)
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.integer == orig(this.integer)
this.constraints == orig(arg0)
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.print == orig(this.print)
arg0[] == orig(arg0[])
this.U == null
this.id == null
this.A == null
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.fo == 0.0
this.I == null
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[] == []
this.variables[].getClass().getName() == []
this.ofle == null
this.simplex == null
arg0[] contains no nulls and has only one value, of length 3
arg0[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
arg0[].getClass().getName() elements == model.QBnBconstr.class
size(this.constraints[]) == 3
this.fo in this.c[]
===========================================================================
model.Model.setFo(double):::ENTER
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A[] == this.simplex.A[]
this.b[] == this.simplex.b[]
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I[] == this.simplex.I[]
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
this.A[] contains no nulls and has only one value, of length 3
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
arg0 one of { -2300.4, -2300.0, -2289.6 }
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
this.fo in this.L[]
this.fo in this.c[]
this.fo in this.simplex.xn[]
this.fo in this.simplex.cb[]
this.fo in this.simplex.c[]
this.fo in this.simplex.dual[]
this.fo in this.simplex.Lb[]
this.fo in this.simplex.Ln[]
===========================================================================
model.Model.setFo(double):::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.A == orig(this.A)
this.A == orig(this.simplex.A)
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.B.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.N.getClass().getName())
this.A.getClass().getName() == orig(this.simplex.A.getClass().getName())
this.A[] == this.simplex.A[]
this.A[] == orig(this.A[])
this.A[] == orig(this.simplex.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.b == orig(this.simplex.b)
this.b[] == this.simplex.b[]
this.b[] == orig(this.b[])
this.b[] == orig(this.simplex.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(arg0)
this.type == orig(this.type)
this.I == orig(this.I)
this.I == orig(this.simplex.I)
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I.getClass().getName() == orig(this.I.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.In.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.Ib.getClass().getName())
this.I.getClass().getName() == orig(this.simplex.I.getClass().getName())
this.I[] == this.simplex.I[]
this.I[] == orig(this.I[])
this.I[] == orig(this.simplex.I[])
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.simplex.B == orig(this.simplex.B)
this.simplex.B[] == orig(this.simplex.B[])
this.simplex.N == orig(this.simplex.N)
this.simplex.N[] == orig(this.simplex.N[])
this.simplex.xb == orig(this.simplex.xb)
this.simplex.xb[] == orig(this.simplex.xb[])
this.simplex.xn == orig(this.simplex.xn)
this.simplex.xn[] == orig(this.simplex.xn[])
this.simplex.cb == orig(this.simplex.cb)
this.simplex.cb[] == orig(this.simplex.cb[])
this.simplex.cn == orig(this.simplex.cn)
this.simplex.cn[] == orig(this.simplex.cn[])
this.simplex.In == orig(this.simplex.In)
this.simplex.In[] == orig(this.simplex.In[])
this.simplex.Ib == orig(this.simplex.Ib)
this.simplex.Ib[] == orig(this.simplex.Ib[])
this.simplex.c == orig(this.simplex.c)
this.simplex.c[] == orig(this.simplex.c[])
this.simplex.status == orig(this.simplex.status)
this.simplex.dual == orig(this.simplex.dual)
this.simplex.dual[] == orig(this.simplex.dual[])
this.simplex.rq == orig(this.simplex.rq)
this.simplex.rq[] == orig(this.simplex.rq[])
this.simplex.Ub == orig(this.simplex.Ub)
this.simplex.Ub[] == orig(this.simplex.Ub[])
this.simplex.Lb == orig(this.simplex.Lb)
this.simplex.Lb[] == orig(this.simplex.Lb[])
this.simplex.Un == orig(this.simplex.Un)
this.simplex.Un == orig(this.simplex.U)
this.simplex.Un[] == orig(this.simplex.Un[])
this.simplex.Un[] == orig(this.simplex.U[])
this.simplex.Ln == orig(this.simplex.Ln)
this.simplex.Ln == orig(this.simplex.L)
this.simplex.Ln[] == orig(this.simplex.Ln[])
this.simplex.Ln[] == orig(this.simplex.L[])
this.simplex.m == orig(this.simplex.m)
this.simplex.m == orig(size(this.A[]))
this.simplex.m == orig(size(this.b[]))
this.simplex.m == orig(size(this.simplex.B[]))
this.simplex.m == orig(size(this.simplex.N[]))
this.simplex.m == orig(size(this.simplex.xb[]))
this.simplex.m == orig(size(this.simplex.xn[]))-1
this.simplex.m == orig(size(this.simplex.cb[]))
this.simplex.m == orig(size(this.simplex.cn[]))-1
this.simplex.m == orig(size(this.simplex.b[]))
this.simplex.m == orig(size(this.simplex.In[]))-1
this.simplex.m == orig(size(this.simplex.Ib[]))
this.simplex.m == orig(size(this.simplex.A[]))
this.simplex.m == orig(size(this.simplex.dual[]))
this.simplex.m == orig(size(this.simplex.rq[]))-1
this.simplex.m == orig(size(this.simplex.Ub[]))
this.simplex.m == orig(size(this.simplex.Lb[]))
this.simplex.m == orig(size(this.simplex.Un[]))-1
this.simplex.m == orig(size(this.simplex.Ln[]))-1
this.simplex.m == orig(size(this.simplex.U[]))-1
this.simplex.m == orig(size(this.simplex.L[]))-1
this.simplex.n == orig(this.simplex.n)
this.simplex.n == orig(size(this.U[]))
this.simplex.n == orig(size(this.L[]))
this.simplex.n == orig(size(this.c[]))
this.simplex.n == orig(size(this.I[]))
this.simplex.n == orig(size(this.simplex.c[]))
this.simplex.n == orig(size(this.simplex.I[]))
this.simplex.initialTime == orig(this.simplex.initialTime)
this.simplex.nart == orig(this.simplex.nart)
this.print == orig(this.simplex.printSolution)
this.print == orig(this.print)
size(this.simplex.xn[]) == orig(size(this.simplex.cn[]))
size(this.simplex.xn[]) == orig(size(this.simplex.In[]))
size(this.simplex.xn[]) == orig(size(this.simplex.rq[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Un[]))
size(this.simplex.xn[]) == orig(size(this.simplex.Ln[]))
size(this.simplex.xn[]) == orig(size(this.simplex.U[]))
size(this.simplex.xn[]) == orig(size(this.simplex.L[]))
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
this.A[] contains no nulls and has only one value, of length 3
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo one of { -2300.4, -2300.0, -2289.6 }
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
orig(this.fo) in this.L[]
orig(this.fo) in this.c[]
orig(this.fo) in this.simplex.xn[]
orig(this.fo) in this.simplex.cb[]
orig(this.fo) in this.simplex.c[]
orig(this.fo) in this.simplex.dual[]
orig(this.fo) in this.simplex.Lb[]
orig(this.fo) in this.simplex.Ln[]
===========================================================================
model.Model.setId(java.lang.String):::ENTER
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
this.id == null
this.A[] contains no nulls and has only one value, of length 3
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
this.simplex == null
arg0.toString one of { "", "l", "r" }
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.setId(java.lang.String):::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(arg0)
this.A == orig(this.A)
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A[] == orig(this.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.print == orig(this.print)
arg0.toString == orig(arg0.toString)
size(this.U[]) == orig(size(this.L[]))
size(this.U[]) == orig(size(this.c[]))
size(this.A[]) == orig(size(this.b[]))
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
this.A[] contains no nulls and has only one value, of length 3
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
this.simplex == null
arg0.toString one of { "", "l", "r" }
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.setL(double[]):::ENTER
this.L == this.b
size(this.U[]) == size(arg0[])
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L == null
this.id == null
this.A == null
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.fo == 0.0
this.I == null
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
this.ofle == null
this.simplex == null
arg0[] elements one of { 0.0, 1.0, 76.0 }
arg0[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
this.fo in this.c[]
this.fo in arg0[]
===========================================================================
model.Model.setL(double[]):::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(arg0)
this.L[] == arg0[]
this.id == orig(this.id)
this.A == orig(this.A)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.L)
this.b == orig(this.b)
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.print == orig(this.print)
arg0[] == orig(arg0[])
size(this.U[]) == orig(size(this.c[]))
size(this.U[]) == orig(size(arg0[]))
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.id == null
this.A == null
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b == null
this.fo == 0.0
this.I == null
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
this.ofle == null
this.simplex == null
arg0[] elements one of { 0.0, 1.0, 76.0 }
arg0[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
this.fo in this.c[]
this.fo in arg0[]
===========================================================================
model.Model.setPrint(boolean):::ENTER
this.print == arg0
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
this.id == null
this.A[] contains no nulls and has only one value, of length 3
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
this.ofle == null
this.simplex == null
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.setPrint(boolean):::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.A == orig(this.A)
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A[] == orig(this.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.print == orig(this.print)
this.print == orig(arg0)
size(this.U[]) == orig(size(this.L[]))
size(this.U[]) == orig(size(this.c[]))
size(this.A[]) == orig(size(this.b[]))
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
this.id == null
this.A[] contains no nulls and has only one value, of length 3
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
this.ofle == null
this.simplex == null
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.setU(double[]):::ENTER
this.U == this.L
this.U == this.b
size(this.c[]) == size(arg0[])
this.U == null
this.id == null
this.A == null
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.fo == 0.0
this.I == null
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
this.ofle == null
this.simplex == null
arg0[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
this.fo in this.c[]
===========================================================================
model.Model.setU(double[]):::EXIT
this.U == orig(arg0)
this.U[] == arg0[]
this.L == this.b
this.L == orig(this.U)
this.L == orig(this.L)
this.L == orig(this.b)
this.id == orig(this.id)
this.A == orig(this.A)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.print == orig(this.print)
arg0[] == orig(arg0[])
size(this.U[]) == orig(size(this.c[]))
this.L == null
this.id == null
this.A == null
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.fo == 0.0
this.I == null
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
this.ofle == null
this.simplex == null
arg0[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
this.fo in this.c[]
===========================================================================
model.Model.setVariables(java.util.ArrayList):::ENTER
this.U == this.L
this.U == this.c
this.U == this.b
this has only one value
this.U == null
this.id == null
this.A == null
this.fo == 0.0
this.I == null
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] == []
this.variables[].getClass().getName() == []
this.ofle == null
this.simplex == null
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 6
arg0[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
arg0[].getClass().getName() elements == model.QBnBVariable.class
size(this.constraints[]) == 3
size(arg0[]) == 6
===========================================================================
model.Model.setVariables(java.util.ArrayList):::EXIT
this.U == this.L
this.U == this.c
this.U == this.b
this.U == orig(this.U)
this.U == orig(this.L)
this.U == orig(this.c)
this.U == orig(this.b)
this.id == orig(this.id)
this.A == orig(this.A)
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(arg0)
this.ofle == orig(this.ofle)
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
arg0[] == orig(arg0[])
this.U == null
this.id == null
this.A == null
this.fo == 0.0
this.I == null
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle == null
this.simplex == null
arg0[] contains no nulls and has only one value, of length 6
arg0[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
arg0[].getClass().getName() elements == model.QBnBVariable.class
size(this.constraints[]) == 3
size(this.variables[]) == 6
===========================================================================
model.Model.solveLP(int):::ENTER
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
this.A[] contains no nulls and has only one value, of length 3
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
this.simplex == null
arg0 == 1
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.solveLP(int):::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.A == orig(this.A)
this.A.getClass().getName() == this.simplex.N.getClass().getName()
this.A.getClass().getName() == this.simplex.A.getClass().getName()
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A[] == this.simplex.A[]
this.A[] == orig(this.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.b[] == this.simplex.b[]
this.b[] == orig(this.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.type == orig(this.type)
this.I.getClass().getName() == this.simplex.Ib.getClass().getName()
this.I.getClass().getName() == this.simplex.I.getClass().getName()
this.I[] == this.simplex.I[]
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex.m == orig(size(this.A[]))
this.simplex.m == orig(size(this.b[]))
this.simplex.n == orig(size(this.U[]))
this.simplex.n == orig(size(this.L[]))
this.simplex.n == orig(size(this.c[]))
this.print == orig(this.print)
this.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] elements one of { 0.0, 1.0, 76.0 }
this.L[] one of { [1.0, 76.0, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 1.0, 0.0, 0.0, 0.0] }
this.A[] contains no nulls and has only one value, of length 3
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo one of { -2300.4, -2300.0, -2289.6 }
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
orig(this.fo) in this.L[]
orig(this.fo) in this.c[]
orig(this.fo) in this.simplex.xn[]
orig(this.fo) in this.simplex.cb[]
orig(this.fo) in this.simplex.c[]
orig(this.fo) in this.simplex.dual[]
orig(this.fo) in this.simplex.Lb[]
orig(this.fo) in this.simplex.Ln[]
===========================================================================
model.Model.update():::ENTER
this has only one value
this.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 75.1 }
this.id == null
this.A[] contains no nulls and has only one value, of length 3
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.simplex == null
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.update():::EXIT
this.id == orig(this.id)
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.print == orig(this.print)
this.U[] one of { [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] one of { [1.0, 75.1, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 0.0, 0.0, 0.0, 0.0] }
this.id == null
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.simplex == null
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.fo in this.L[]
this.fo in this.c[]
this.b[] == orig(this.b[]) (elementwise)
this.fo in orig(this.L[])
===========================================================================
model.Model.updateBounds():::ENTER
this has only one value
this.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 75.1 }
this.id == null
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.simplex == null
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.updateBounds():::EXIT
this.id == orig(this.id)
this.A == orig(this.A)
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A[] == orig(this.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.print == orig(this.print)
size(this.A[]) == orig(size(this.b[]))
this.U[] one of { [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.L[] one of { [1.0, 75.1, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 0.0, 0.0, 0.0, 0.0] }
this.id == null
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.simplex == null
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.fo in this.L[]
this.fo in this.c[]
this.fo in orig(this.L[])
===========================================================================
model.Model.updateConstraintsE():::ENTER
this has only one value
this.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 75.1 }
this.id == null
this.A[] contains no nulls and has only one value, of length 3
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.simplex == null
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.updateConstraintsE():::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.print == orig(this.print)
this.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.L[] elements one of { 0.0, 1.0, 75.1 }
this.id == null
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.simplex == null
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.fo in this.L[]
this.fo in this.c[]
this.b[] == orig(this.b[]) (elementwise)
===========================================================================
model.Model.varNames():::ENTER
this.U == this.L
this.U == this.b
this has only one value
this.U == null
this.id == null
this.A == null
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.fo == 0.0
this.I == null
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle == null
this.simplex == null
size(this.constraints[]) == 3
size(this.variables[]) == 6
this.fo in this.c[]
===========================================================================
model.Model.varNames():::EXIT
this.U == this.L
this.U == this.b
this.U == orig(this.U)
this.U == orig(this.L)
this.U == orig(this.b)
this.id == orig(this.id)
this.A == orig(this.A)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.print == orig(this.print)
size(this.c[]) == size(return[])
size(return[]) == orig(size(this.c[]))
this.U == null
this.id == null
this.A == null
this.c has only one value
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.fo == 0.0
this.I == null
this.constraints has only one value
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables has only one value
this.variables[] contains no nulls and has only one value, of length 6
this.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.ofle == null
this.simplex == null
return.getClass().getName() == java.lang.String[].class
return[] contains no nulls and has only one value, of length 6
return[].toString == [x1, x2, x3, S_R1, S_R2, S_R3]
size(this.constraints[]) == 3
size(this.variables[]) == 6
size(return[]) == 6
this.fo in this.c[]
===========================================================================
model.Model.variableNames():::ENTER
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
this.simplex == null
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.Model.variableNames():::EXIT
this.U == orig(this.U)
this.U[] == orig(this.U[])
this.L == orig(this.L)
this.L[] == orig(this.L[])
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.A == orig(this.A)
this.A.getClass().getName() == orig(this.A.getClass().getName())
this.A[] == orig(this.A[])
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.debugMode == orig(this.debugMode)
this.x == orig(this.x)
this.feasible == orig(this.feasible)
this.fo == orig(this.fo)
this.type == orig(this.type)
this.I == orig(this.I)
this.integer == orig(this.integer)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.variables == orig(this.variables)
this.variables[] == orig(this.variables[])
this.ofle == orig(this.ofle)
this.ofle.coeffs == orig(this.ofle.coeffs)
this.ofle.coeffs[] == orig(this.ofle.coeffs[])
this.ofle.varNames == orig(this.ofle.varNames)
this.ofle.varNames[] == orig(this.ofle.varNames[])
this.epsilon == orig(this.epsilon)
this.simplex == orig(this.simplex)
this.print == orig(this.print)
size(this.U[]) == orig(size(this.L[]))
size(this.A[]) == orig(size(this.b[]))
this.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.b[] == [7.0, 500.3, 500.4]
this.b[] elements one of { 7.0, 500.3, 500.4 }
this.fo == 0.0
this.I == null
this.constraints[] contains no nulls and has only one value, of length 3
this.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.variables[].getClass().getName() one of { [], [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable] }
this.simplex == null
return != null
return[] contains no nulls and has only one value, of length 6
return[] elements != null
return[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
return[].getClass().getName() elements == java.lang.String.class
size(this.constraints[]) == 3
size(this.variables[]) one of { 0, 6 }
size(return[]) == 6
this.fo in this.L[]
this.fo in this.c[]
===========================================================================
model.QBnBEnv:::OBJECT
this.m.A == this.m.simplex.A
this.m.A.getClass().getName() == this.m.simplex.B.getClass().getName()
this.m.b == this.m.simplex.b
this.m.I == this.m.simplex.I
this.m.I.getClass().getName() == this.m.simplex.In.getClass().getName()
this.m.I.getClass().getName() == this.m.simplex.Ib.getClass().getName()
this.m.I.getClass().getName() == this.m.simplex.I.getClass().getName()
this.m.I[] == this.m.simplex.I[]
this.m.simplex.B.getClass().getName() == this.m.simplex.N.getClass().getName()
this.m.simplex.B.getClass().getName() == this.m.simplex.A.getClass().getName()
this.m.simplex.Un == this.m.simplex.U
this.m.simplex.Un[] == this.m.simplex.U[]
this.m.simplex.Ln == this.m.simplex.L
this.m.simplex.Ln[] == this.m.simplex.L[]
this.m.simplex.m == size(this.m.simplex.B[])
this.m.simplex.m == size(this.m.simplex.N[])
this.m.simplex.m == size(this.m.simplex.xb[])
this.m.simplex.m == size(this.m.simplex.xn[])-1
this.m.simplex.m == size(this.m.simplex.cb[])
this.m.simplex.m == size(this.m.simplex.cn[])-1
this.m.simplex.m == size(this.m.simplex.b[])
this.m.simplex.m == size(this.m.simplex.In[])-1
this.m.simplex.m == size(this.m.simplex.Ib[])
this.m.simplex.m == size(this.m.simplex.A[])
this.m.simplex.m == size(this.m.simplex.dual[])
this.m.simplex.m == size(this.m.simplex.rq[])-1
this.m.simplex.m == size(this.m.simplex.Ub[])
this.m.simplex.m == size(this.m.simplex.Lb[])
this.m.simplex.m == size(this.m.simplex.Un[])-1
this.m.simplex.m == size(this.m.simplex.Ln[])-1
this.m.simplex.m == size(this.m.simplex.U[])-1
this.m.simplex.m == size(this.m.simplex.L[])-1
this.m.simplex.n == size(this.m.U[])
this.m.simplex.n == size(this.m.I[])
this.m.simplex.n == size(this.m.simplex.c[])
this.m.simplex.n == size(this.m.simplex.I[])
this.m.simplex.printSolution == this.m.print
size(this.m.U[]) == size(this.m.L[])
size(this.m.U[]) == size(this.m.c[])
size(this.m.A[]) == size(this.m.b[])
size(this.m.simplex.xn[]) == size(this.m.simplex.cn[])
size(this.m.simplex.xn[]) == size(this.m.simplex.In[])
size(this.m.simplex.xn[]) == size(this.m.simplex.rq[])
size(this.m.simplex.xn[]) == size(this.m.simplex.Un[])
size(this.m.simplex.xn[]) == size(this.m.simplex.Ln[])
size(this.m.simplex.xn[]) == size(this.m.simplex.U[])
size(this.m.simplex.xn[]) == size(this.m.simplex.L[])
this has only one value
this.m has only one value
this.m != null
this.m.U != null
this.m.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.m.U[] elements >= 0.0
this.m.L != null
this.m.L[] one of { [1.0, 75.1, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 0.0, 0.0, 0.0, 0.0] }
this.m.L[] elements >= 0.0
this.m.id.toString == ""
this.m.A != null
this.m.A.getClass().getName() == double[][].class
this.m.A[] elements != null
this.m.c has only one value
this.m.c != null
this.m.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.m.c[] elements >= 0.0
this.m.b != null
this.m.b[] == [7.0, 500.3, 500.4]
this.m.b[] elements one of { 7.0, 500.3, 500.4 }
this.m.b[] sorted by <
this.m.debugMode == false
this.m.x == null
this.m.feasible == false
this.m.fo one of { -2300.4, 0.0 }
this.m.type == null
this.m.I.getClass().getName() == java.lang.String[].class
this.m.I[] contains no nulls and has only one value, of length 6
this.m.I[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.m.I[].getClass().getName() elements == java.lang.String.class
this.m.I[].toString == [x1, x2, x3, S_R1, S_R2, S_R3]
this.m.integer == false
this.m.constraints has only one value
this.m.constraints != null
this.m.constraints[] contains no nulls and has only one value, of length 3
this.m.constraints[] elements != null
this.m.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.m.constraints[].getClass().getName() elements == model.QBnBconstr.class
this.m.variables has only one value
this.m.variables != null
this.m.variables[] contains no nulls and has only one value, of length 6
this.m.variables[] elements != null
this.m.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.m.variables[].getClass().getName() elements == model.QBnBVariable.class
this.m.ofle has only one value
this.m.ofle != null
this.m.ofle.coeffs has only one value
this.m.ofle.coeffs != null
this.m.ofle.coeffs[] contains no nulls and has only one value, of length 3
this.m.ofle.coeffs[] elements != null
this.m.ofle.coeffs[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
this.m.ofle.coeffs[].getClass().getName() elements == java.lang.Double.class
this.m.ofle.varNames has only one value
this.m.ofle.varNames != null
this.m.ofle.varNames[] contains no nulls and has only one value, of length 3
this.m.ofle.varNames[] elements != null
this.m.ofle.varNames[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.m.ofle.varNames[].getClass().getName() elements == java.lang.String.class
this.m.epsilon == 1.0E-6
this.m.simplex.B has only one value
this.m.simplex.B.getClass().getName() == double[][].class
this.m.simplex.B[] contains no nulls and has only one value, of length 3
this.m.simplex.N has only one value
this.m.simplex.N[] contains no nulls and has only one value, of length 3
this.m.simplex.xb has only one value
this.m.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.m.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.m.simplex.xn has only one value
this.m.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.m.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.m.simplex.cb has only one value
this.m.simplex.cb[] == [-0.0, -0.0, -4.0]
this.m.simplex.cb[] elements one of { -4.0, -0.0 }
this.m.simplex.cn has only one value
this.m.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.m.simplex.b has only one value
this.m.simplex.b[] == [7.0, 500.3, 500.4]
this.m.simplex.b[] elements one of { 7.0, 500.3, 500.4 }
this.m.simplex.In has only one value
this.m.simplex.In[] contains no nulls and has only one value, of length 4
this.m.simplex.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.m.simplex.In[].getClass().getName() elements == java.lang.String.class
this.m.simplex.In[].toString == [x2, a0, S_R3, x1]
this.m.simplex.Ib has only one value
this.m.simplex.Ib[] contains no nulls and has only one value, of length 3
this.m.simplex.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.m.simplex.Ib[].getClass().getName() elements == java.lang.String.class
this.m.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.m.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.m.simplex.c has only one value
this.m.simplex.c[] == [-7.0, -8.0, -4.0, -0.0, -0.0, -0.0]
this.m.simplex.status == 0
this.m.simplex.A has only one value
this.m.simplex.A[] contains no nulls and has only one value, of length 3
this.m.simplex.dual has only one value
this.m.simplex.dual[] == [0.0, 0.0, -1.0]
this.m.simplex.dual[] elements one of { -1.0, 0.0 }
this.m.simplex.rq has only one value
this.m.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.m.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.m.simplex.Ub has only one value
this.m.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.m.simplex.Ub[] elements == 1.7976931348623157E308
this.m.simplex.Lb has only one value
this.m.simplex.Lb[] == [0.0, 0.0, 0.0]
this.m.simplex.Lb[] elements == 0.0
this.m.simplex.Un has only one value
this.m.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.m.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.m.simplex.Ln has only one value
this.m.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
this.m.simplex.Ln[] elements one of { 0.0, 1.0, 76.0 }
this.m.simplex.n == 6
this.m.simplex.initialTime == 1.743919623013E12
this.m.simplex.nart == 1
this.m.simplex.printSolution == false
this.m.simplex.I has only one value
this.m.simplex.I[].toString == [x1, x2, x3, S_R1, S_R2, S_R3]
this.m.print == false
this.bestSolution one of { 0.0, 2300.0 }
this.debugMode == false
size(this.m.U[]) == 6
size(this.m.A[]) == 3
size(this.m.constraints[]) == 3
size(this.m.variables[]) == 6
size(this.m.ofle.coeffs[]) == 3
size(this.m.ofle.varNames[]) == 3
size(this.m.simplex.xn[]) == 4
this.m.A[this.m.simplex.m-1] has only one value
this.m.A[this.m.simplex.nart] has only one value
this.m.A[this.m.simplex.nart-1] has only one value
this.m.I[this.m.simplex.m] has only one value
this.m.I[this.m.simplex.m-1] has only one value
this.m.I[this.m.simplex.n-1] has only one value
this.m.I[this.m.simplex.nart] has only one value
this.m.I[this.m.simplex.nart-1] has only one value
this.m.simplex.B[this.m.simplex.m-1] has only one value
this.m.simplex.B[this.m.simplex.nart] has only one value
this.m.simplex.B[this.m.simplex.nart-1] has only one value
this.m.simplex.N[this.m.simplex.m-1] has only one value
this.m.simplex.N[this.m.simplex.nart] has only one value
this.m.simplex.N[this.m.simplex.nart-1] has only one value
this.m.simplex.In[this.m.simplex.m] has only one value
this.m.simplex.In[this.m.simplex.m-1] has only one value
this.m.simplex.In[this.m.simplex.nart] has only one value
this.m.simplex.In[this.m.simplex.nart-1] has only one value
this.m.simplex.Ib[this.m.simplex.m-1] has only one value
this.m.simplex.Ib[this.m.simplex.nart] has only one value
this.m.simplex.Ib[this.m.simplex.nart-1] has only one value
this.m.U[] >= this.m.L[] (elementwise)
this.m.U[] elements > this.m.fo
this.m.L[] elements >= this.m.fo
this.m.A[] == this.m.simplex.A[] (elementwise)
this.m.c[] elements >= this.m.fo
this.m.c[] + this.m.simplex.c[] == 0
this.m.b[] elements > this.m.fo
this.m.b[] elements > this.m.epsilon
this.m.b[] == this.m.simplex.b[] (elementwise)
this.m.fo < this.m.epsilon
this.m.fo <= this.bestSolution
this.m.simplex.Ib[this.m.simplex.nart] in this.m.I[]
this.m.epsilon != this.bestSolution
===========================================================================
model.QBnBEnv.QBnBEnv(model.Model):::ENTER
arg0 has only one value
arg0.U has only one value
arg0.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
arg0.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
arg0.L has only one value
arg0.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
arg0.L[] elements one of { 0.0, 1.0, 75.1 }
arg0.id == null
arg0.A has only one value
arg0.A.getClass().getName() == double[][].class
arg0.A[] contains no nulls and has only one value, of length 3
arg0.c has only one value
arg0.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
arg0.c[] elements >= 0.0
arg0.b has only one value
arg0.b[] == [7.0, 500.3, 500.4]
arg0.b[] elements one of { 7.0, 500.3, 500.4 }
arg0.debugMode == false
arg0.x == null
arg0.feasible == false
arg0.fo == 0.0
arg0.type == null
arg0.I == null
arg0.integer == false
arg0.constraints has only one value
arg0.constraints[] contains no nulls and has only one value, of length 3
arg0.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
arg0.constraints[].getClass().getName() elements == model.QBnBconstr.class
arg0.variables has only one value
arg0.variables[] contains no nulls and has only one value, of length 6
arg0.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
arg0.variables[].getClass().getName() elements == model.QBnBVariable.class
arg0.ofle has only one value
arg0.ofle.coeffs has only one value
arg0.ofle.coeffs[] contains no nulls and has only one value, of length 3
arg0.ofle.coeffs[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0.ofle.coeffs[].getClass().getName() elements == java.lang.Double.class
arg0.ofle.varNames has only one value
arg0.ofle.varNames[] contains no nulls and has only one value, of length 3
arg0.ofle.varNames[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0.ofle.varNames[].getClass().getName() elements == java.lang.String.class
arg0.epsilon == 1.0E-6
arg0.simplex == null
arg0.print == false
size(arg0.U[]) == 6
size(arg0.A[]) == 3
size(arg0.constraints[]) == 3
size(arg0.variables[]) == 6
size(arg0.ofle.coeffs[]) == 3
size(arg0.ofle.varNames[]) == 3
===========================================================================
model.QBnBEnv.QBnBEnv(model.Model):::EXIT
this.m == orig(arg0)
this.m.U == arg0.U
this.m.U[] == arg0.U[]
this.m.L == arg0.L
this.m.L[] == arg0.L[]
this.m.A == arg0.A
this.m.A.getClass().getName() == arg0.A.getClass().getName()
this.m.A[] == arg0.A[]
this.m.c == arg0.c
this.m.c[] == arg0.c[]
this.m.b == arg0.b
this.m.b[] == arg0.b[]
this.m.fo == this.bestSolution
this.m.constraints == arg0.constraints
this.m.variables == arg0.variables
this.m.ofle == arg0.ofle
this.m.ofle.coeffs == arg0.ofle.coeffs
this.m.ofle.varNames == arg0.ofle.varNames
this.m.epsilon == arg0.epsilon
arg0.U == orig(arg0.U)
arg0.U[] == orig(arg0.U[])
arg0.L == orig(arg0.L)
arg0.L[] == orig(arg0.L[])
arg0.id == orig(arg0.id)
arg0.A == orig(arg0.A)
arg0.A.getClass().getName() == orig(arg0.A.getClass().getName())
arg0.A[] == orig(arg0.A[])
arg0.c == orig(arg0.c)
arg0.c[] == orig(arg0.c[])
arg0.b == orig(arg0.b)
arg0.b[] == orig(arg0.b[])
arg0.debugMode == orig(arg0.debugMode)
arg0.x == orig(arg0.x)
arg0.feasible == orig(arg0.feasible)
arg0.fo == orig(arg0.fo)
arg0.type == orig(arg0.type)
arg0.I == orig(arg0.I)
arg0.integer == orig(arg0.integer)
arg0.constraints == orig(arg0.constraints)
arg0.constraints[] == orig(arg0.constraints[])
arg0.variables == orig(arg0.variables)
arg0.variables[] == orig(arg0.variables[])
arg0.ofle == orig(arg0.ofle)
arg0.ofle.coeffs == orig(arg0.ofle.coeffs)
arg0.ofle.coeffs[] == orig(arg0.ofle.coeffs[])
arg0.ofle.varNames == orig(arg0.ofle.varNames)
arg0.ofle.varNames[] == orig(arg0.ofle.varNames[])
arg0.epsilon == orig(arg0.epsilon)
arg0.simplex == orig(arg0.simplex)
arg0.print == orig(arg0.print)
this.m.id == null
this.m.I == null
this.m.simplex == null
this.bestSolution == 0.0
this.print == false
arg0.U has only one value
arg0.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
arg0.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
arg0.L has only one value
arg0.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
arg0.L[] elements one of { 0.0, 1.0, 75.1 }
arg0.id == null
arg0.A has only one value
arg0.A.getClass().getName() == double[][].class
arg0.A[] contains no nulls and has only one value, of length 3
arg0.c has only one value
arg0.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
arg0.c[] elements >= 0.0
arg0.b has only one value
arg0.b[] == [7.0, 500.3, 500.4]
arg0.b[] elements one of { 7.0, 500.3, 500.4 }
arg0.debugMode == false
arg0.x == null
arg0.feasible == false
arg0.fo == 0.0
arg0.type == null
arg0.I == null
arg0.integer == false
arg0.constraints has only one value
arg0.constraints[] contains no nulls and has only one value, of length 3
arg0.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
arg0.constraints[].getClass().getName() elements == model.QBnBconstr.class
arg0.variables has only one value
arg0.variables[] contains no nulls and has only one value, of length 6
arg0.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
arg0.variables[].getClass().getName() elements == model.QBnBVariable.class
arg0.ofle has only one value
arg0.ofle.coeffs has only one value
arg0.ofle.coeffs[] contains no nulls and has only one value, of length 3
arg0.ofle.coeffs[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0.ofle.coeffs[].getClass().getName() elements == java.lang.Double.class
arg0.ofle.varNames has only one value
arg0.ofle.varNames[] contains no nulls and has only one value, of length 3
arg0.ofle.varNames[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0.ofle.varNames[].getClass().getName() elements == java.lang.String.class
arg0.epsilon == 1.0E-6
arg0.simplex == null
arg0.print == false
size(arg0.U[]) == 6
size(arg0.A[]) == 3
size(arg0.constraints[]) == 3
size(arg0.variables[]) == 6
size(arg0.ofle.coeffs[]) == 3
size(arg0.ofle.varNames[]) == 3
this.bestSolution in arg0.L[]
this.bestSolution in arg0.c[]
===========================================================================
model.QBnBEnv.isMIP():::ENTER
this.m.fo == this.bestSolution
this.m.U has only one value
this.m.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.m.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.m.L has only one value
this.m.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.m.L[] elements one of { 0.0, 1.0, 75.1 }
this.m.id == null
this.m.A has only one value
this.m.A[] contains no nulls and has only one value, of length 3
this.m.b has only one value
this.m.I == null
this.m.simplex == null
this.bestSolution == 0.0
this.print == true
this.bestSolution in this.m.L[]
this.bestSolution in this.m.c[]
===========================================================================
model.QBnBEnv.isMIP():::EXIT
this.m == orig(this.m)
this.m.U == orig(this.m.U)
this.m.U[] == orig(this.m.U[])
this.m.L == orig(this.m.L)
this.m.L[] == orig(this.m.L[])
this.m.id == orig(this.m.id)
this.m.A == orig(this.m.A)
this.m.A.getClass().getName() == orig(this.m.A.getClass().getName())
this.m.A[] == orig(this.m.A[])
this.m.c == orig(this.m.c)
this.m.c[] == orig(this.m.c[])
this.m.b == orig(this.m.b)
this.m.b[] == orig(this.m.b[])
this.m.debugMode == orig(this.m.debugMode)
this.m.x == orig(this.m.x)
this.m.feasible == orig(this.m.feasible)
this.m.fo == this.bestSolution
this.m.type == orig(this.m.type)
this.m.I == orig(this.m.I)
this.m.integer == orig(this.m.integer)
this.m.constraints == orig(this.m.constraints)
this.m.constraints[] == orig(this.m.constraints[])
this.m.variables == orig(this.m.variables)
this.m.variables[] == orig(this.m.variables[])
this.m.ofle == orig(this.m.ofle)
this.m.ofle.coeffs == orig(this.m.ofle.coeffs)
this.m.ofle.coeffs[] == orig(this.m.ofle.coeffs[])
this.m.ofle.varNames == orig(this.m.ofle.varNames)
this.m.ofle.varNames[] == orig(this.m.ofle.varNames[])
this.m.epsilon == orig(this.m.epsilon)
this.m.simplex == orig(this.m.simplex)
this.bestSolution == orig(this.m.fo)
this.bestSolution == orig(this.bestSolution)
this.print == orig(this.print)
this.debugMode == orig(this.debugMode)
this.m.U has only one value
this.m.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.m.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.m.L has only one value
this.m.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.m.L[] elements one of { 0.0, 1.0, 75.1 }
this.m.id == null
this.m.A has only one value
this.m.A[] contains no nulls and has only one value, of length 3
this.m.b has only one value
this.m.I == null
this.m.simplex == null
this.bestSolution == 0.0
this.print == true
return == true
this.bestSolution in this.m.L[]
this.bestSolution in this.m.c[]
===========================================================================
model.QBnBEnv.isMIP():::EXIT;condition="return == true"
===========================================================================
model.QBnBEnv.maximize():::ENTER
this.m.fo == this.bestSolution
this.m.U has only one value
this.m.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.m.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.m.L has only one value
this.m.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.m.L[] elements one of { 0.0, 1.0, 75.1 }
this.m.id == null
this.m.A has only one value
this.m.A[] contains no nulls and has only one value, of length 3
this.m.b has only one value
this.m.I == null
this.m.simplex == null
this.bestSolution == 0.0
this.print == true
this.bestSolution in this.m.L[]
this.bestSolution in this.m.c[]
===========================================================================
model.QBnBEnv.maximize():::EXIT
this.m == orig(this.m)
this.m.A.getClass().getName() == this.m.simplex.N.getClass().getName()
this.m.A.getClass().getName() == this.m.simplex.A.getClass().getName()
this.m.A.getClass().getName() == orig(this.m.A.getClass().getName())
this.m.A[] == this.m.simplex.A[]
this.m.c == orig(this.m.c)
this.m.c[] == orig(this.m.c[])
this.m.b[] == this.m.simplex.b[]
this.m.b[] == orig(this.m.b[])
this.m.debugMode == orig(this.m.debugMode)
this.m.x == orig(this.m.x)
this.m.feasible == orig(this.m.feasible)
this.m.type == orig(this.m.type)
this.m.integer == orig(this.m.integer)
this.m.constraints == orig(this.m.constraints)
this.m.constraints[] == orig(this.m.constraints[])
this.m.variables == orig(this.m.variables)
this.m.variables[] == orig(this.m.variables[])
this.m.ofle == orig(this.m.ofle)
this.m.ofle.coeffs == orig(this.m.ofle.coeffs)
this.m.ofle.coeffs[] == orig(this.m.ofle.coeffs[])
this.m.ofle.varNames == orig(this.m.ofle.varNames)
this.m.ofle.varNames[] == orig(this.m.ofle.varNames[])
this.m.epsilon == orig(this.m.epsilon)
this.m.simplex.m == size(this.m.b[])
this.m.simplex.m == orig(size(this.m.A[]))
this.m.simplex.m == orig(size(this.m.b[]))
this.m.simplex.n == size(this.m.L[])
this.m.simplex.n == size(this.m.c[])
this.m.simplex.n == orig(size(this.m.U[]))
this.m.simplex.n == orig(size(this.m.L[]))
this.m.simplex.n == orig(size(this.m.c[]))
this.m.print == orig(this.m.print)
this.print == orig(this.print)
this.debugMode == orig(this.debugMode)
this.m.U has only one value
this.m.U[] == [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.m.L has only one value
this.m.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.m.L[] elements one of { 0.0, 1.0, 76.0 }
this.m.id has only one value
this.m.A has only one value
this.m.A[] contains no nulls and has only one value, of length 3
this.m.b has only one value
this.m.fo == -2300.4
this.m.I has only one value
this.m.simplex has only one value
this.bestSolution == 2300.0
this.print == true
orig(this.m.A[post(this.m.simplex.m)-1]) has only one value
orig(this.m.A[post(this.m.simplex.nart)]) has only one value
orig(this.m.A[post(this.m.simplex.nart)-1]) has only one value
orig(this.bestSolution) in this.m.U[]
orig(this.bestSolution) in this.m.L[]
orig(this.bestSolution) in this.m.c[]
orig(this.bestSolution) in this.m.simplex.xn[]
orig(this.bestSolution) in this.m.simplex.cb[]
orig(this.bestSolution) in this.m.simplex.cn[]
orig(this.bestSolution) in this.m.simplex.c[]
orig(this.bestSolution) in this.m.simplex.dual[]
orig(this.bestSolution) in this.m.simplex.Lb[]
this.m.simplex.Lb[] elements == orig(this.bestSolution)
orig(this.bestSolution) in this.m.simplex.Ln[]
===========================================================================
model.QBnBEnv.preSolve():::ENTER
this.m.fo == this.bestSolution
this.m.U has only one value
this.m.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.m.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.m.L has only one value
this.m.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.m.L[] elements one of { 0.0, 1.0, 75.1 }
this.m.id == null
this.m.A has only one value
this.m.A[] contains no nulls and has only one value, of length 3
this.m.b has only one value
this.m.I == null
this.m.simplex == null
this.bestSolution == 0.0
this.print == true
this.bestSolution in this.m.L[]
this.bestSolution in this.m.c[]
===========================================================================
model.QBnBEnv.preSolve():::EXIT
this.m == orig(this.m)
this.m.id == orig(this.m.id)
this.m.A.getClass().getName() == orig(this.m.A.getClass().getName())
this.m.c == orig(this.m.c)
this.m.c[] == orig(this.m.c[])
this.m.b[] == orig(this.m.b[])
this.m.debugMode == orig(this.m.debugMode)
this.m.x == orig(this.m.x)
this.m.feasible == orig(this.m.feasible)
this.m.fo == this.bestSolution
this.m.type == orig(this.m.type)
this.m.I == orig(this.m.I)
this.m.integer == orig(this.m.integer)
this.m.constraints == orig(this.m.constraints)
this.m.constraints[] == orig(this.m.constraints[])
this.m.variables == orig(this.m.variables)
this.m.variables[] == orig(this.m.variables[])
this.m.ofle == orig(this.m.ofle)
this.m.ofle.coeffs == orig(this.m.ofle.coeffs)
this.m.ofle.coeffs[] == orig(this.m.ofle.coeffs[])
this.m.ofle.varNames == orig(this.m.ofle.varNames)
this.m.ofle.varNames[] == orig(this.m.ofle.varNames[])
this.m.epsilon == orig(this.m.epsilon)
this.m.simplex == orig(this.m.simplex)
this.bestSolution == orig(this.m.fo)
this.bestSolution == orig(this.bestSolution)
this.print == orig(this.print)
this.debugMode == orig(this.debugMode)
this.m.U has only one value
this.m.U[] == [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.m.U[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.m.L has only one value
this.m.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.m.L[] elements one of { 0.0, 1.0, 76.0 }
this.m.id == null
this.m.A has only one value
this.m.A[] contains no nulls and has only one value, of length 3
this.m.b has only one value
this.m.I == null
this.m.simplex == null
this.bestSolution == 0.0
this.print == true
this.bestSolution in this.m.L[]
this.bestSolution in this.m.c[]
this.bestSolution in orig(this.m.L[])
===========================================================================
model.QBnBEnv.print(boolean):::ENTER
this.m.fo == this.bestSolution
this.m.U has only one value
this.m.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.m.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.m.L has only one value
this.m.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.m.L[] elements one of { 0.0, 1.0, 75.1 }
this.m.id == null
this.m.A has only one value
this.m.A[] contains no nulls and has only one value, of length 3
this.m.b has only one value
this.m.I == null
this.m.simplex == null
this.bestSolution == 0.0
this.print == false
arg0 == true
this.bestSolution in this.m.L[]
this.bestSolution in this.m.c[]
===========================================================================
model.QBnBEnv.print(boolean):::EXIT
this.m == orig(this.m)
this.m.U == orig(this.m.U)
this.m.U[] == orig(this.m.U[])
this.m.L == orig(this.m.L)
this.m.L[] == orig(this.m.L[])
this.m.id == orig(this.m.id)
this.m.A == orig(this.m.A)
this.m.A.getClass().getName() == orig(this.m.A.getClass().getName())
this.m.A[] == orig(this.m.A[])
this.m.c == orig(this.m.c)
this.m.c[] == orig(this.m.c[])
this.m.b == orig(this.m.b)
this.m.b[] == orig(this.m.b[])
this.m.debugMode == orig(this.m.debugMode)
this.m.x == orig(this.m.x)
this.m.feasible == orig(this.m.feasible)
this.m.fo == this.bestSolution
this.m.type == orig(this.m.type)
this.m.I == orig(this.m.I)
this.m.integer == orig(this.m.integer)
this.m.constraints == orig(this.m.constraints)
this.m.constraints[] == orig(this.m.constraints[])
this.m.variables == orig(this.m.variables)
this.m.variables[] == orig(this.m.variables[])
this.m.ofle == orig(this.m.ofle)
this.m.ofle.coeffs == orig(this.m.ofle.coeffs)
this.m.ofle.coeffs[] == orig(this.m.ofle.coeffs[])
this.m.ofle.varNames == orig(this.m.ofle.varNames)
this.m.ofle.varNames[] == orig(this.m.ofle.varNames[])
this.m.epsilon == orig(this.m.epsilon)
this.m.simplex == orig(this.m.simplex)
this.bestSolution == orig(this.m.fo)
this.bestSolution == orig(this.bestSolution)
this.print == orig(arg0)
this.debugMode == orig(this.debugMode)
this.m.U has only one value
this.m.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.m.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.m.L has only one value
this.m.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.m.L[] elements one of { 0.0, 1.0, 75.1 }
this.m.id == null
this.m.A has only one value
this.m.A[] contains no nulls and has only one value, of length 3
this.m.b has only one value
this.m.I == null
this.m.simplex == null
this.bestSolution == 0.0
this.print == true
this.bestSolution in this.m.L[]
this.bestSolution in this.m.c[]
===========================================================================
model.QBnBEnv.printInitial():::ENTER
this.m.fo == this.bestSolution
this.m.U has only one value
this.m.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.m.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.m.L has only one value
this.m.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.m.L[] elements one of { 0.0, 1.0, 75.1 }
this.m.id == null
this.m.A has only one value
this.m.A[] contains no nulls and has only one value, of length 3
this.m.b has only one value
this.m.I == null
this.m.simplex == null
this.bestSolution == 0.0
this.print == true
this.bestSolution in this.m.L[]
this.bestSolution in this.m.c[]
===========================================================================
model.QBnBEnv.printInitial():::EXIT
this.m == orig(this.m)
this.m.U == orig(this.m.U)
this.m.U[] == orig(this.m.U[])
this.m.L == orig(this.m.L)
this.m.L[] == orig(this.m.L[])
this.m.id == orig(this.m.id)
this.m.A == orig(this.m.A)
this.m.A.getClass().getName() == orig(this.m.A.getClass().getName())
this.m.A[] == orig(this.m.A[])
this.m.c == orig(this.m.c)
this.m.c[] == orig(this.m.c[])
this.m.b == orig(this.m.b)
this.m.b[] == orig(this.m.b[])
this.m.debugMode == orig(this.m.debugMode)
this.m.x == orig(this.m.x)
this.m.feasible == orig(this.m.feasible)
this.m.fo == this.bestSolution
this.m.type == orig(this.m.type)
this.m.I == orig(this.m.I)
this.m.integer == orig(this.m.integer)
this.m.constraints == orig(this.m.constraints)
this.m.constraints[] == orig(this.m.constraints[])
this.m.variables == orig(this.m.variables)
this.m.variables[] == orig(this.m.variables[])
this.m.ofle == orig(this.m.ofle)
this.m.ofle.coeffs == orig(this.m.ofle.coeffs)
this.m.ofle.coeffs[] == orig(this.m.ofle.coeffs[])
this.m.ofle.varNames == orig(this.m.ofle.varNames)
this.m.ofle.varNames[] == orig(this.m.ofle.varNames[])
this.m.epsilon == orig(this.m.epsilon)
this.m.simplex == orig(this.m.simplex)
this.bestSolution == orig(this.m.fo)
this.bestSolution == orig(this.bestSolution)
this.print == orig(this.print)
this.debugMode == orig(this.debugMode)
this.m.U has only one value
this.m.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.m.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.m.L has only one value
this.m.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.m.L[] elements one of { 0.0, 1.0, 75.1 }
this.m.id == null
this.m.A has only one value
this.m.A[] contains no nulls and has only one value, of length 3
this.m.b has only one value
this.m.I == null
this.m.simplex == null
this.bestSolution == 0.0
this.print == true
this.bestSolution in this.m.L[]
this.bestSolution in this.m.c[]
===========================================================================
model.QBnBEnv.setBestSolution(double):::ENTER
this.m.A.getClass().getName() == this.m.simplex.N.getClass().getName()
this.m.A.getClass().getName() == this.m.simplex.A.getClass().getName()
this.m.A[] == this.m.simplex.A[]
this.m.b[] == this.m.simplex.b[]
this.m.simplex.m == size(this.m.b[])
this.m.simplex.n == size(this.m.L[])
this.m.simplex.n == size(this.m.c[])
this.m.U has only one value
this.m.U[] == [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.m.L has only one value
this.m.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.m.L[] elements one of { 0.0, 1.0, 76.0 }
this.m.id has only one value
this.m.A has only one value
this.m.A[] contains no nulls and has only one value, of length 3
this.m.b has only one value
this.m.fo == -2300.4
this.m.I has only one value
this.m.simplex has only one value
this.bestSolution == 0.0
this.print == true
arg0 == 2300.0
this.bestSolution in this.m.U[]
this.bestSolution in this.m.L[]
this.bestSolution in this.m.c[]
this.bestSolution in this.m.simplex.xn[]
this.bestSolution in this.m.simplex.cb[]
this.bestSolution in this.m.simplex.cn[]
this.bestSolution in this.m.simplex.c[]
this.bestSolution in this.m.simplex.dual[]
this.bestSolution in this.m.simplex.Lb[]
this.m.simplex.Lb[] elements == this.bestSolution
this.bestSolution in this.m.simplex.Ln[]
===========================================================================
model.QBnBEnv.setBestSolution(double):::EXIT
this.m == orig(this.m)
this.m.U == orig(this.m.U)
this.m.U[] == orig(this.m.U[])
this.m.L == orig(this.m.L)
this.m.L[] == orig(this.m.L[])
this.m.id == orig(this.m.id)
this.m.id.toString == orig(this.m.id.toString)
this.m.A == orig(this.m.A)
this.m.A == orig(this.m.simplex.A)
this.m.A.getClass().getName() == this.m.simplex.N.getClass().getName()
this.m.A.getClass().getName() == this.m.simplex.A.getClass().getName()
this.m.A.getClass().getName() == orig(this.m.A.getClass().getName())
this.m.A.getClass().getName() == orig(this.m.simplex.B.getClass().getName())
this.m.A.getClass().getName() == orig(this.m.simplex.N.getClass().getName())
this.m.A.getClass().getName() == orig(this.m.simplex.A.getClass().getName())
this.m.A[] == this.m.simplex.A[]
this.m.A[] == orig(this.m.A[])
this.m.A[] == orig(this.m.simplex.A[])
this.m.c == orig(this.m.c)
this.m.c[] == orig(this.m.c[])
this.m.b == orig(this.m.b)
this.m.b == orig(this.m.simplex.b)
this.m.b[] == this.m.simplex.b[]
this.m.b[] == orig(this.m.b[])
this.m.b[] == orig(this.m.simplex.b[])
this.m.debugMode == orig(this.m.debugMode)
this.m.x == orig(this.m.x)
this.m.feasible == orig(this.m.feasible)
this.m.fo == orig(this.m.fo)
this.m.type == orig(this.m.type)
this.m.I == orig(this.m.I)
this.m.I == orig(this.m.simplex.I)
this.m.I.getClass().getName() == orig(this.m.I.getClass().getName())
this.m.I.getClass().getName() == orig(this.m.simplex.In.getClass().getName())
this.m.I.getClass().getName() == orig(this.m.simplex.Ib.getClass().getName())
this.m.I.getClass().getName() == orig(this.m.simplex.I.getClass().getName())
this.m.I[] == orig(this.m.I[])
this.m.I[] == orig(this.m.simplex.I[])
this.m.integer == orig(this.m.integer)
this.m.constraints == orig(this.m.constraints)
this.m.constraints[] == orig(this.m.constraints[])
this.m.variables == orig(this.m.variables)
this.m.variables[] == orig(this.m.variables[])
this.m.ofle == orig(this.m.ofle)
this.m.ofle.coeffs == orig(this.m.ofle.coeffs)
this.m.ofle.coeffs[] == orig(this.m.ofle.coeffs[])
this.m.ofle.varNames == orig(this.m.ofle.varNames)
this.m.ofle.varNames[] == orig(this.m.ofle.varNames[])
this.m.epsilon == orig(this.m.epsilon)
this.m.simplex == orig(this.m.simplex)
this.m.simplex.B == orig(this.m.simplex.B)
this.m.simplex.B[] == orig(this.m.simplex.B[])
this.m.simplex.N == orig(this.m.simplex.N)
this.m.simplex.N[] == orig(this.m.simplex.N[])
this.m.simplex.xb == orig(this.m.simplex.xb)
this.m.simplex.xb[] == orig(this.m.simplex.xb[])
this.m.simplex.xn == orig(this.m.simplex.xn)
this.m.simplex.xn[] == orig(this.m.simplex.xn[])
this.m.simplex.cb == orig(this.m.simplex.cb)
this.m.simplex.cb[] == orig(this.m.simplex.cb[])
this.m.simplex.cn == orig(this.m.simplex.cn)
this.m.simplex.cn[] == orig(this.m.simplex.cn[])
this.m.simplex.In == orig(this.m.simplex.In)
this.m.simplex.In[] == orig(this.m.simplex.In[])
this.m.simplex.Ib == orig(this.m.simplex.Ib)
this.m.simplex.Ib[] == orig(this.m.simplex.Ib[])
this.m.simplex.c == orig(this.m.simplex.c)
this.m.simplex.c[] == orig(this.m.simplex.c[])
this.m.simplex.status == orig(this.m.simplex.status)
this.m.simplex.dual == orig(this.m.simplex.dual)
this.m.simplex.dual[] == orig(this.m.simplex.dual[])
this.m.simplex.rq == orig(this.m.simplex.rq)
this.m.simplex.rq[] == orig(this.m.simplex.rq[])
this.m.simplex.Ub == orig(this.m.simplex.Ub)
this.m.simplex.Ub[] == orig(this.m.simplex.Ub[])
this.m.simplex.Lb == orig(this.m.simplex.Lb)
this.m.simplex.Lb[] == orig(this.m.simplex.Lb[])
this.m.simplex.Un == orig(this.m.simplex.Un)
this.m.simplex.Un == orig(this.m.simplex.U)
this.m.simplex.Un[] == orig(this.m.simplex.Un[])
this.m.simplex.Un[] == orig(this.m.simplex.U[])
this.m.simplex.Ln == orig(this.m.simplex.Ln)
this.m.simplex.Ln == orig(this.m.simplex.L)
this.m.simplex.Ln[] == orig(this.m.simplex.Ln[])
this.m.simplex.Ln[] == orig(this.m.simplex.L[])
this.m.simplex.m == orig(this.m.simplex.m)
this.m.simplex.m == size(this.m.b[])
this.m.simplex.m == orig(size(this.m.A[]))
this.m.simplex.m == orig(size(this.m.b[]))
this.m.simplex.m == orig(size(this.m.simplex.B[]))
this.m.simplex.m == orig(size(this.m.simplex.N[]))
this.m.simplex.m == orig(size(this.m.simplex.xb[]))
this.m.simplex.m == orig(size(this.m.simplex.xn[]))-1
this.m.simplex.m == orig(size(this.m.simplex.cb[]))
this.m.simplex.m == orig(size(this.m.simplex.cn[]))-1
this.m.simplex.m == orig(size(this.m.simplex.b[]))
this.m.simplex.m == orig(size(this.m.simplex.In[]))-1
this.m.simplex.m == orig(size(this.m.simplex.Ib[]))
this.m.simplex.m == orig(size(this.m.simplex.A[]))
this.m.simplex.m == orig(size(this.m.simplex.dual[]))
this.m.simplex.m == orig(size(this.m.simplex.rq[]))-1
this.m.simplex.m == orig(size(this.m.simplex.Ub[]))
this.m.simplex.m == orig(size(this.m.simplex.Lb[]))
this.m.simplex.m == orig(size(this.m.simplex.Un[]))-1
this.m.simplex.m == orig(size(this.m.simplex.Ln[]))-1
this.m.simplex.m == orig(size(this.m.simplex.U[]))-1
this.m.simplex.m == orig(size(this.m.simplex.L[]))-1
this.m.simplex.n == orig(this.m.simplex.n)
this.m.simplex.n == size(this.m.L[])
this.m.simplex.n == size(this.m.c[])
this.m.simplex.n == orig(size(this.m.U[]))
this.m.simplex.n == orig(size(this.m.L[]))
this.m.simplex.n == orig(size(this.m.c[]))
this.m.simplex.n == orig(size(this.m.I[]))
this.m.simplex.n == orig(size(this.m.simplex.c[]))
this.m.simplex.n == orig(size(this.m.simplex.I[]))
this.m.simplex.initialTime == orig(this.m.simplex.initialTime)
this.m.simplex.nart == orig(this.m.simplex.nart)
this.m.print == orig(this.m.simplex.printSolution)
this.m.print == orig(this.m.print)
this.bestSolution == orig(arg0)
this.print == orig(this.print)
this.debugMode == orig(this.debugMode)
size(this.m.simplex.xn[]) == orig(size(this.m.simplex.cn[]))
size(this.m.simplex.xn[]) == orig(size(this.m.simplex.In[]))
size(this.m.simplex.xn[]) == orig(size(this.m.simplex.rq[]))
size(this.m.simplex.xn[]) == orig(size(this.m.simplex.Un[]))
size(this.m.simplex.xn[]) == orig(size(this.m.simplex.Ln[]))
size(this.m.simplex.xn[]) == orig(size(this.m.simplex.U[]))
size(this.m.simplex.xn[]) == orig(size(this.m.simplex.L[]))
this.m.U has only one value
this.m.U[] == [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.m.L has only one value
this.m.L[] == [1.0, 76.0, 0.0, 0.0, 0.0, 0.0]
this.m.L[] elements one of { 0.0, 1.0, 76.0 }
this.m.id has only one value
this.m.A has only one value
this.m.A[] contains no nulls and has only one value, of length 3
this.m.b has only one value
this.m.fo == -2300.4
this.m.I has only one value
this.m.simplex has only one value
this.bestSolution == 2300.0
this.print == true
orig(this.bestSolution) in this.m.U[]
orig(this.bestSolution) in this.m.L[]
orig(this.bestSolution) in this.m.c[]
orig(this.bestSolution) in this.m.simplex.xn[]
orig(this.bestSolution) in this.m.simplex.cb[]
orig(this.bestSolution) in this.m.simplex.cn[]
orig(this.bestSolution) in this.m.simplex.c[]
orig(this.bestSolution) in this.m.simplex.dual[]
orig(this.bestSolution) in this.m.simplex.Lb[]
this.m.simplex.Lb[] elements == orig(this.bestSolution)
orig(this.bestSolution) in this.m.simplex.Ln[]
===========================================================================
model.QBnBEnv.setDebugMode(boolean):::ENTER
this.m.fo == this.bestSolution
this.debugMode == arg0
this.m.U has only one value
this.m.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.m.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.m.L has only one value
this.m.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.m.L[] elements one of { 0.0, 1.0, 75.1 }
this.m.id == null
this.m.A has only one value
this.m.A[] contains no nulls and has only one value, of length 3
this.m.b has only one value
this.m.I == null
this.m.simplex == null
this.bestSolution == 0.0
this.print == true
this.bestSolution in this.m.L[]
this.bestSolution in this.m.c[]
===========================================================================
model.QBnBEnv.setDebugMode(boolean):::EXIT
this.m == orig(this.m)
this.m.U == orig(this.m.U)
this.m.U[] == orig(this.m.U[])
this.m.L == orig(this.m.L)
this.m.L[] == orig(this.m.L[])
this.m.id == orig(this.m.id)
this.m.A == orig(this.m.A)
this.m.A.getClass().getName() == orig(this.m.A.getClass().getName())
this.m.A[] == orig(this.m.A[])
this.m.c == orig(this.m.c)
this.m.c[] == orig(this.m.c[])
this.m.b == orig(this.m.b)
this.m.b[] == orig(this.m.b[])
this.m.debugMode == orig(this.m.debugMode)
this.m.x == orig(this.m.x)
this.m.feasible == orig(this.m.feasible)
this.m.fo == this.bestSolution
this.m.type == orig(this.m.type)
this.m.I == orig(this.m.I)
this.m.integer == orig(this.m.integer)
this.m.constraints == orig(this.m.constraints)
this.m.constraints[] == orig(this.m.constraints[])
this.m.variables == orig(this.m.variables)
this.m.variables[] == orig(this.m.variables[])
this.m.ofle == orig(this.m.ofle)
this.m.ofle.coeffs == orig(this.m.ofle.coeffs)
this.m.ofle.coeffs[] == orig(this.m.ofle.coeffs[])
this.m.ofle.varNames == orig(this.m.ofle.varNames)
this.m.ofle.varNames[] == orig(this.m.ofle.varNames[])
this.m.epsilon == orig(this.m.epsilon)
this.m.simplex == orig(this.m.simplex)
this.bestSolution == orig(this.m.fo)
this.bestSolution == orig(this.bestSolution)
this.print == orig(this.print)
this.debugMode == orig(this.debugMode)
this.debugMode == orig(arg0)
this.m.U has only one value
this.m.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.m.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.m.L has only one value
this.m.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.m.L[] elements one of { 0.0, 1.0, 75.1 }
this.m.id == null
this.m.A has only one value
this.m.A[] contains no nulls and has only one value, of length 3
this.m.b has only one value
this.m.I == null
this.m.simplex == null
this.bestSolution == 0.0
this.print == true
this.bestSolution in this.m.L[]
this.bestSolution in this.m.c[]
===========================================================================
model.QBnBLinExp:::OBJECT
this.coeffs != null
this.coeffs[] elements != null
this.coeffs[].getClass().getName() elements == java.lang.Double.class
this.varNames != null
this.varNames[] elements != null
this.varNames[].getClass().getName() elements == java.lang.String.class
===========================================================================
model.QBnBLinExp.QBnBLinExp():::EXIT
this.coeffs[] == []
this.coeffs[].getClass().getName() == []
this.varNames[] == []
this.varNames[].getClass().getName() == []
===========================================================================
model.QBnBLinExp.addTerm(double, model.QBnBVariable):::ENTER
arg1 != null
arg1.name != null
arg1.lb one of { 0.0, 1.0, 75.1 }
arg1.ub one of { 100.9, 200.4, 1.7976931348623157E308 }
arg1.type one of { 0, 1 }
arg1.value == 0.0
===========================================================================
model.QBnBLinExp.addTerm(double, model.QBnBVariable):::EXIT
this.coeffs == orig(this.coeffs)
this.varNames == orig(this.varNames)
arg1.name == orig(arg1.name)
arg1.name.toString == orig(arg1.name.toString)
arg1.lb == orig(arg1.lb)
arg1.ub == orig(arg1.ub)
arg1.type == orig(arg1.type)
arg1.value == orig(arg1.value)
arg1.slack == orig(arg1.slack)
size(this.coeffs[])-1 == orig(size(this.coeffs[]))
size(this.varNames[])-1 == orig(size(this.varNames[]))
arg1.name != null
arg1.lb one of { 0.0, 1.0, 75.1 }
arg1.ub one of { 100.9, 200.4, 1.7976931348623157E308 }
arg1.type one of { 0, 1 }
arg1.value == 0.0
size(this.coeffs[]) >= 1
size(this.varNames[]) >= 1
===========================================================================
model.QBnBLinExp.getCoeffs():::ENTER
this.coeffs[].getClass().getName() one of { [java.lang.Double, java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double] }
this.varNames[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
size(this.coeffs[]) one of { 3, 4 }
size(this.varNames[]) one of { 3, 4 }
===========================================================================
model.QBnBLinExp.getCoeffs():::EXIT
this.coeffs == return
this.coeffs[] == orig(this.coeffs[])
this.varNames == orig(this.varNames)
this.varNames[] == orig(this.varNames[])
return == orig(this.coeffs)
this.coeffs[].getClass().getName() one of { [java.lang.Double, java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double] }
this.varNames[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
return != null
return[] elements != null
return[].getClass().getName() elements == java.lang.Double.class
return[].getClass().getName() one of { [java.lang.Double, java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double] }
size(this.coeffs[]) one of { 3, 4 }
size(this.varNames[]) one of { 3, 4 }
size(return[]) one of { 3, 4 }
===========================================================================
model.QBnBLinExp.getVarNames():::ENTER
this.coeffs[].getClass().getName() one of { [java.lang.Double, java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double] }
this.varNames[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
size(this.coeffs[]) one of { 3, 4 }
size(this.varNames[]) one of { 3, 4 }
===========================================================================
model.QBnBLinExp.getVarNames():::EXIT
this.coeffs == orig(this.coeffs)
this.coeffs[] == orig(this.coeffs[])
this.varNames == return
this.varNames[] == orig(this.varNames[])
return == orig(this.varNames)
this.coeffs[].getClass().getName() one of { [java.lang.Double, java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double] }
this.varNames[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
return != null
return[] elements != null
return[].getClass().getName() elements == java.lang.String.class
return[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
size(this.coeffs[]) one of { 3, 4 }
size(this.varNames[]) one of { 3, 4 }
size(return[]) one of { 3, 4 }
===========================================================================
model.QBnBVariable:::OBJECT
this.lb >= 0.0
this.ub >= 0.0
this.type one of { 0, 1 }
this.value >= 0.0
this.lb <= this.ub
this.ub >= this.value
===========================================================================
model.QBnBVariable.QBnBVariable(double, double, int, java.lang.String):::ENTER
arg0 one of { 0.0, 1.0, 75.1 }
arg1 one of { 100.9, 200.4, 1.7976931348623157E308 }
arg2 one of { 0, 1 }
===========================================================================
model.QBnBVariable.QBnBVariable(double, double, int, java.lang.String):::EXIT
this.name == orig(arg3)
this.lb == orig(arg0)
this.ub == orig(arg1)
this.type == orig(arg2)
arg3.toString == orig(arg3.toString)
this.lb one of { 0.0, 1.0, 75.1 }
this.ub one of { 100.9, 200.4, 1.7976931348623157E308 }
this.value == 0.0
this.slack == false
===========================================================================
model.QBnBVariable.getLb():::ENTER
this.name != null
this.value == 0.0
this.lb < this.ub
this.lb >= this.value
this.ub > this.value
===========================================================================
model.QBnBVariable.getLb():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.lb == return
this.ub == orig(this.ub)
this.type == orig(this.type)
this.value == orig(this.value)
this.slack == orig(this.slack)
return == orig(this.lb)
this.name != null
this.value == 0.0
return >= 0.0
this.ub > this.value
this.ub > return
this.value <= return
===========================================================================
model.QBnBVariable.getName():::ENTER
this.name != null
this.lb < this.ub
===========================================================================
model.QBnBVariable.getName():::EXIT
this.name == return
this.name.toString == orig(this.name.toString)
this.lb == orig(this.lb)
this.ub == orig(this.ub)
this.type == orig(this.type)
this.value == orig(this.value)
this.slack == orig(this.slack)
return == orig(this.name)
return != null
this.lb < this.ub
===========================================================================
model.QBnBVariable.getType():::ENTER
this.name != null
this.value == 0.0
this.lb < this.ub
this.lb >= this.value
this.ub > this.value
===========================================================================
model.QBnBVariable.getType():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.lb == orig(this.lb)
this.ub == orig(this.ub)
this.type == return
this.value == orig(this.value)
this.slack == orig(this.slack)
return == orig(this.type)
this.name != null
this.value == 0.0
return one of { 0, 1 }
this.lb < this.ub
this.lb >= this.value
this.ub > this.value
===========================================================================
model.QBnBVariable.getUb():::ENTER
this.name != null
this.value == 0.0
this.lb < this.ub
this.lb >= this.value
this.ub > this.value
===========================================================================
model.QBnBVariable.getUb():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.lb == orig(this.lb)
this.ub == return
this.type == orig(this.type)
this.value == orig(this.value)
this.slack == orig(this.slack)
return == orig(this.ub)
this.name != null
this.value == 0.0
this.lb >= this.value
this.lb < return
this.value < return
===========================================================================
model.QBnBVariable.getValue():::ENTER
this.name.toString one of { "x1", "x2", "x3" }
this.lb one of { 0.0, 1.0, 76.0 }
this.ub one of { 100.0, 200.0, 1.7976931348623157E308 }
this.type == 1
this.value one of { 0.0, 100.0, 200.0 }
this.slack == false
===========================================================================
model.QBnBVariable.getValue():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.lb == orig(this.lb)
this.ub == orig(this.ub)
this.type == orig(this.type)
this.value == return
this.slack == orig(this.slack)
return == orig(this.value)
this.name.toString one of { "x1", "x2", "x3" }
this.lb one of { 0.0, 1.0, 76.0 }
this.ub one of { 100.0, 200.0, 1.7976931348623157E308 }
this.type == 1
this.slack == false
return one of { 0.0, 100.0, 200.0 }
===========================================================================
model.QBnBVariable.setLb(double):::ENTER
this.name.toString one of { "x1", "x2", "x3" }
this.lb one of { 0.0, 1.0, 75.1 }
this.ub one of { 100.9, 200.4, 1.7976931348623157E308 }
this.type == 1
this.value == 0.0
this.slack == false
arg0 one of { 0.0, 1.0, 76.0 }
===========================================================================
model.QBnBVariable.setLb(double):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.lb == orig(arg0)
this.ub == orig(this.ub)
this.type == orig(this.type)
this.value == orig(this.value)
this.slack == orig(this.slack)
this.name.toString one of { "x1", "x2", "x3" }
this.lb one of { 0.0, 1.0, 76.0 }
this.ub one of { 100.9, 200.4, 1.7976931348623157E308 }
this.type == 1
this.value == 0.0
this.slack == false
===========================================================================
model.QBnBVariable.setSlack(boolean):::ENTER
this.lb == this.value
this.name.toString one of { "S_R1", "S_R2", "S_R3" }
this.lb == 0.0
this.ub one of { 0.0, 1.7976931348623157E308 }
this.type == 0
this.slack == false
===========================================================================
model.QBnBVariable.setSlack(boolean):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.lb == this.value
this.lb == orig(this.lb)
this.lb == orig(this.value)
this.ub == orig(this.ub)
this.type == orig(this.type)
this.slack == orig(arg0)
this.name.toString one of { "S_R1", "S_R2", "S_R3" }
this.lb == 0.0
this.ub one of { 0.0, 1.7976931348623157E308 }
this.type == 0
===========================================================================
model.QBnBVariable.setUb(double):::ENTER
this.name.toString one of { "x1", "x2", "x3" }
this.lb one of { 0.0, 1.0, 76.0 }
this.ub one of { 100.9, 200.4, 1.7976931348623157E308 }
this.type == 1
this.value == 0.0
this.slack == false
arg0 one of { 100.0, 200.0, 1.7976931348623157E308 }
===========================================================================
model.QBnBVariable.setUb(double):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.lb == orig(this.lb)
this.ub == orig(arg0)
this.type == orig(this.type)
this.value == orig(this.value)
this.slack == orig(this.slack)
this.name.toString one of { "x1", "x2", "x3" }
this.lb one of { 0.0, 1.0, 76.0 }
this.ub one of { 100.0, 200.0, 1.7976931348623157E308 }
this.type == 1
this.value == 0.0
this.slack == false
===========================================================================
model.QBnBVariable.setValue(double):::ENTER
this.lb one of { 0.0, 1.0, 76.0 }
this.ub one of { 100.0, 200.0, 1.7976931348623157E308 }
this.value == 0.0
===========================================================================
model.QBnBVariable.setValue(double):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.lb == orig(this.lb)
this.ub == orig(this.ub)
this.type == orig(this.type)
this.value == orig(arg0)
this.slack == orig(this.slack)
this.lb one of { 0.0, 1.0, 76.0 }
this.ub one of { 100.0, 200.0, 1.7976931348623157E308 }
===========================================================================
model.QBnBconstr:::OBJECT
this.model.A == this.model.simplex.A
this.model.A.getClass().getName() == this.model.simplex.B.getClass().getName()
this.model.b == this.model.simplex.b
this.model.I == this.model.simplex.I
this.model.I.getClass().getName() == this.model.simplex.In.getClass().getName()
this.model.I.getClass().getName() == this.model.simplex.Ib.getClass().getName()
this.model.I.getClass().getName() == this.model.simplex.I.getClass().getName()
this.model.I[] == this.model.simplex.I[]
this.model.simplex.B.getClass().getName() == this.model.simplex.N.getClass().getName()
this.model.simplex.B.getClass().getName() == this.model.simplex.A.getClass().getName()
this.model.simplex.Un == this.model.simplex.U
this.model.simplex.Un[] == this.model.simplex.U[]
this.model.simplex.Ln == this.model.simplex.L
this.model.simplex.Ln[] == this.model.simplex.L[]
this.model.simplex.m == size(this.model.simplex.B[])
this.model.simplex.m == size(this.model.simplex.N[])
this.model.simplex.m == size(this.model.simplex.xb[])
this.model.simplex.m == size(this.model.simplex.xn[])-1
this.model.simplex.m == size(this.model.simplex.cb[])
this.model.simplex.m == size(this.model.simplex.cn[])-1
this.model.simplex.m == size(this.model.simplex.b[])
this.model.simplex.m == size(this.model.simplex.In[])-1
this.model.simplex.m == size(this.model.simplex.Ib[])
this.model.simplex.m == size(this.model.simplex.A[])
this.model.simplex.m == size(this.model.simplex.dual[])
this.model.simplex.m == size(this.model.simplex.rq[])-1
this.model.simplex.m == size(this.model.simplex.Ub[])
this.model.simplex.m == size(this.model.simplex.Lb[])
this.model.simplex.m == size(this.model.simplex.Un[])-1
this.model.simplex.m == size(this.model.simplex.Ln[])-1
this.model.simplex.m == size(this.model.simplex.U[])-1
this.model.simplex.m == size(this.model.simplex.L[])-1
this.model.simplex.n == size(this.model.U[])
this.model.simplex.n == size(this.model.c[])
this.model.simplex.n == size(this.model.I[])
this.model.simplex.n == size(this.model.simplex.c[])
this.model.simplex.n == size(this.model.simplex.I[])
this.model.simplex.printSolution == this.model.print
size(this.model.U[]) == size(this.model.L[])
size(this.model.U[]) == size(this.model.c[])
size(this.model.A[]) == size(this.model.b[])
size(this.model.simplex.xn[]) == size(this.model.simplex.cn[])
size(this.model.simplex.xn[]) == size(this.model.simplex.In[])
size(this.model.simplex.xn[]) == size(this.model.simplex.rq[])
size(this.model.simplex.xn[]) == size(this.model.simplex.Un[])
size(this.model.simplex.xn[]) == size(this.model.simplex.Ln[])
size(this.model.simplex.xn[]) == size(this.model.simplex.U[])
size(this.model.simplex.xn[]) == size(this.model.simplex.L[])
this.name != null
this.name.toString one of { "R1", "R2", "R3" }
this.le != null
this.le.coeffs != null
this.le.coeffs[] elements != null
this.le.coeffs[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
this.le.coeffs[].getClass().getName() elements == java.lang.Double.class
this.le.varNames != null
this.le.varNames[] elements != null
this.le.varNames[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.le.varNames[].getClass().getName() elements == java.lang.String.class
this.type == 0
this.rs one of { 7.0, 500.3, 500.4 }
this.slack == 0.0
this.model has only one value
this.model != null
this.model.U[] one of { [100.0, 200.0, 0.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.0, 200.0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308], [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308] }
this.model.U[] elements >= 0.0
this.model.L[] one of { [1.0, 75.1, 0.0, 0.0, 0.0, 0.0], [1.0, 76.0, 0.0, 0.0, 0.0, 0.0] }
this.model.L[] elements >= 0.0
this.model.id.toString == ""
this.model.A.getClass().getName() == double[][].class
this.model.A[] elements != null
this.model.c[] == [7.0, 8.0, 4.0, 0.0, 0.0, 0.0]
this.model.c[] elements >= 0.0
this.model.b[] elements >= 0.0
this.model.debugMode == false
this.model.x == null
this.model.feasible == false
this.model.fo one of { -2300.4, 0.0 }
this.model.type == null
this.model.I.getClass().getName() == java.lang.String[].class
this.model.I[] contains no nulls and has only one value, of length 6
this.model.I[] elements != null
this.model.I[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.model.I[].getClass().getName() elements == java.lang.String.class
this.model.I[].toString == [x1, x2, x3, S_R1, S_R2, S_R3]
this.model.integer == false
this.model.constraints has only one value
this.model.constraints != null
this.model.constraints[] elements != null
this.model.constraints[].getClass().getName() elements == model.QBnBconstr.class
this.model.constraints[].getClass().getName() one of { [], [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr] }
this.model.variables has only one value
this.model.variables != null
this.model.variables[] elements != null
this.model.variables[].getClass().getName() elements == model.QBnBVariable.class
this.model.ofle.coeffs has only one value
this.model.ofle.coeffs != null
this.model.ofle.coeffs[] contains no nulls and has only one value, of length 3
this.model.ofle.coeffs[] elements != null
this.model.ofle.coeffs[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
this.model.ofle.coeffs[].getClass().getName() elements == java.lang.Double.class
this.model.ofle.varNames has only one value
this.model.ofle.varNames != null
this.model.ofle.varNames[] contains no nulls and has only one value, of length 3
this.model.ofle.varNames[] elements != null
this.model.ofle.varNames[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.model.ofle.varNames[].getClass().getName() elements == java.lang.String.class
this.model.epsilon == 1.0E-6
this.model.simplex.B has only one value
this.model.simplex.B != null
this.model.simplex.B.getClass().getName() == double[][].class
this.model.simplex.B[] contains no nulls and has only one value, of length 3
this.model.simplex.B[] elements != null
this.model.simplex.N has only one value
this.model.simplex.N != null
this.model.simplex.N[] contains no nulls and has only one value, of length 3
this.model.simplex.N[] elements != null
this.model.simplex.xb has only one value
this.model.simplex.xb != null
this.model.simplex.xb[] == [2192.6, 200.20000000000005, 0.09999999999999432]
this.model.simplex.xb[] elements one of { 0.09999999999999432, 200.20000000000005, 2192.6 }
this.model.simplex.xb[] sorted by >
this.model.simplex.xn has only one value
this.model.simplex.xn != null
this.model.simplex.xn[] == [200.0, 0.0, 0.0, 100.0]
this.model.simplex.xn[] elements one of { 0.0, 100.0, 200.0 }
this.model.simplex.cb has only one value
this.model.simplex.cb != null
this.model.simplex.cb[] == [-0.0, -0.0, -4.0]
this.model.simplex.cb[] elements one of { -4.0, -0.0 }
this.model.simplex.cb[] sorted by >=
this.model.simplex.cn has only one value
this.model.simplex.cn != null
this.model.simplex.cn[] == [-8.0, 9.9999999E7, -0.0, -7.0]
this.model.simplex.b has only one value
this.model.simplex.b != null
this.model.simplex.b[] == [7.0, 500.3, 500.4]
this.model.simplex.b[] elements one of { 7.0, 500.3, 500.4 }
this.model.simplex.b[] sorted by <
this.model.simplex.In has only one value
this.model.simplex.In != null
this.model.simplex.In[] contains no nulls and has only one value, of length 4
this.model.simplex.In[] elements != null
this.model.simplex.In[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.model.simplex.In[].getClass().getName() elements == java.lang.String.class
this.model.simplex.In[].toString == [x2, a0, S_R3, x1]
this.model.simplex.Ib has only one value
this.model.simplex.Ib != null
this.model.simplex.Ib[] contains no nulls and has only one value, of length 3
this.model.simplex.Ib[] elements != null
this.model.simplex.Ib[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.model.simplex.Ib[].getClass().getName() elements == java.lang.String.class
this.model.simplex.Ib[].toString == [S_R1, S_R2, x3]
this.model.simplex.Ib[].toString elements one of { "S_R1", "S_R2", "x3" }
this.model.simplex.c has only one value
this.model.simplex.c != null
this.model.simplex.c[] == [-7.0, -8.0, -4.0, -0.0, -0.0, -0.0]
this.model.simplex.status == 0
this.model.simplex.A has only one value
this.model.simplex.A != null
this.model.simplex.A[] contains no nulls and has only one value, of length 3
this.model.simplex.A[] elements != null
this.model.simplex.dual has only one value
this.model.simplex.dual != null
this.model.simplex.dual[] == [0.0, 0.0, -1.0]
this.model.simplex.dual[] elements one of { -1.0, 0.0 }
this.model.simplex.dual[] sorted by >=
this.model.simplex.rq has only one value
this.model.simplex.rq != null
this.model.simplex.rq[] == [-6.0, 9.9999999E7, 1.0, -6.0]
this.model.simplex.rq[] elements one of { -6.0, 1.0, 9.9999999E7 }
this.model.simplex.Ub has only one value
this.model.simplex.Ub != null
this.model.simplex.Ub[] == [1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.model.simplex.Ub[] elements == 1.7976931348623157E308
this.model.simplex.Lb has only one value
this.model.simplex.Lb != null
this.model.simplex.Lb[] == [0.0, 0.0, 0.0]
this.model.simplex.Lb[] elements == 0.0
this.model.simplex.Un has only one value
this.model.simplex.Un != null
this.model.simplex.Un[] == [200.0, 1.7976931348623157E308, 1.7976931348623157E308, 100.0]
this.model.simplex.Un[] elements one of { 100.0, 200.0, 1.7976931348623157E308 }
this.model.simplex.Ln has only one value
this.model.simplex.Ln != null
this.model.simplex.Ln[] == [76.0, 0.0, 0.0, 1.0]
this.model.simplex.Ln[] elements one of { 0.0, 1.0, 76.0 }
this.model.simplex.n == 6
this.model.simplex.initialTime == 1.743919623013E12
this.model.simplex.nart == 1
this.model.simplex.printSolution == false
this.model.simplex.I has only one value
this.model.simplex.I != null
this.model.simplex.I[].toString == [x1, x2, x3, S_R1, S_R2, S_R3]
this.model.print == false
size(this.le.coeffs[]) == 4
size(this.le.varNames[]) == 4
size(this.model.U[]) == 6
size(this.model.A[]) == 3
size(this.model.c[]) == 6
size(this.model.constraints[]) one of { 0, 3 }
size(this.model.constraints[])-1 != 0
size(this.model.variables[]) one of { 4, 5, 6 }
size(this.model.ofle.coeffs[]) == 3
size(this.model.ofle.varNames[]) == 3
size(this.model.simplex.xn[]) == 4
this.model.A[this.model.simplex.m-1] has only one value
this.model.A[this.model.simplex.nart] has only one value
this.model.A[this.model.simplex.nart-1] has only one value
this.model.I[this.model.simplex.m] has only one value
this.model.I[this.model.simplex.m-1] has only one value
this.model.I[this.model.simplex.n-1] has only one value
this.model.I[this.model.simplex.nart] has only one value
this.model.I[this.model.simplex.nart-1] has only one value
this.model.simplex.B[this.model.simplex.m-1] has only one value
this.model.simplex.B[this.model.simplex.nart] has only one value
this.model.simplex.B[this.model.simplex.nart-1] has only one value
this.model.simplex.N[this.model.simplex.m-1] has only one value
this.model.simplex.N[this.model.simplex.nart] has only one value
this.model.simplex.N[this.model.simplex.nart-1] has only one value
this.model.simplex.In[this.model.simplex.m] has only one value
this.model.simplex.In[this.model.simplex.m-1] has only one value
this.model.simplex.In[this.model.simplex.nart] has only one value
this.model.simplex.In[this.model.simplex.nart-1] has only one value
this.model.simplex.Ib[this.model.simplex.m-1] has only one value
this.model.simplex.Ib[this.model.simplex.nart] has only one value
this.model.simplex.Ib[this.model.simplex.nart-1] has only one value
this.rs > this.model.fo
this.rs > this.model.epsilon
this.model.simplex.cb[] elements < this.rs
this.rs in this.model.simplex.b[]
this.model.simplex.c[] elements < this.rs
this.model.simplex.dual[] elements < this.rs
this.model.U[] >= this.model.L[] (elementwise)
this.model.U[] > this.model.b[] (lexically)
this.model.U[] >= this.model.b[] (lexically)
this.model.U[] elements > this.model.fo
this.model.U[] > this.model.simplex.c[] (elementwise)
this.model.L[] elements >= this.model.fo
this.model.L[] >= this.model.simplex.c[] (elementwise)
this.model.A.getClass().getName() != this.model.I.getClass().getName()
this.model.A[] == this.model.simplex.A[] (elementwise)
this.model.c[] elements >= this.model.fo
this.model.c[] + this.model.simplex.c[] == 0
this.model.c[] >= this.model.simplex.c[] (elementwise)
this.model.b[] elements >= this.model.fo
this.model.b[] > this.model.simplex.cb[] (elementwise)
this.model.b[] == this.model.simplex.b[] (elementwise)
this.model.b[] > this.model.simplex.dual[] (elementwise)
this.model.b[] < this.model.simplex.Ub[] (elementwise)
this.model.b[] > this.model.simplex.Lb[] (elementwise)
this.model.fo < this.model.epsilon
this.model.simplex.xb[] elements > this.model.fo
this.model.simplex.xn[] elements > this.model.fo
this.model.simplex.cb[] elements > this.model.fo
this.model.simplex.cn[] elements > this.model.fo
this.model.simplex.b[] elements > this.model.fo
this.model.simplex.c[] elements > this.model.fo
this.model.simplex.dual[] elements > this.model.fo
this.model.simplex.rq[] elements > this.model.fo
this.model.simplex.Un[] elements > this.model.fo
this.model.simplex.Ln[] elements > this.model.fo
this.model.I.getClass().getName() != this.model.simplex.B.getClass().getName()
this.model.simplex.Ib[this.model.simplex.nart] in this.model.I[]
this.model.simplex.xb[] elements > this.model.epsilon
this.model.simplex.cb[] elements < this.model.epsilon
this.model.simplex.b[] elements > this.model.epsilon
this.model.simplex.c[] elements < this.model.epsilon
this.model.simplex.dual[] elements < this.model.epsilon
this.model.simplex.Un[] elements > this.model.epsilon
this.model.simplex.xb[] > this.model.simplex.cb[] (elementwise)
this.model.simplex.xb[] > this.model.simplex.dual[] (elementwise)
this.model.simplex.xb[] < this.model.simplex.Ub[] (elementwise)
this.model.simplex.xb[] > this.model.simplex.Lb[] (elementwise)
this.model.simplex.xn[] <= this.model.simplex.Un[] (elementwise)
this.model.simplex.xn[] >= this.model.simplex.Ln[] (elementwise)
this.model.simplex.cb[] < this.model.simplex.b[] (elementwise)
this.model.simplex.cb[] <= this.model.simplex.dual[] (elementwise)
this.model.simplex.cb[] < this.model.simplex.Ub[] (elementwise)
this.model.simplex.cb[] <= this.model.simplex.Lb[] (elementwise)
this.model.simplex.cn[] <= this.model.simplex.rq[] (elementwise)
this.model.simplex.cn[] < this.model.simplex.Un[] (elementwise)
this.model.simplex.b[] > this.model.simplex.dual[] (elementwise)
this.model.simplex.b[] < this.model.simplex.Ub[] (elementwise)
this.model.simplex.b[] > this.model.simplex.Lb[] (elementwise)
this.model.simplex.dual[] < this.model.simplex.Ub[] (elementwise)
this.model.simplex.dual[] <= this.model.simplex.Lb[] (elementwise)
this.model.simplex.rq[] < this.model.simplex.Un[] (elementwise)
this.model.simplex.Ub[] > this.model.simplex.Lb[] (elementwise)
this.model.simplex.Un[] > this.model.simplex.Ln[] (elementwise)
===========================================================================
model.QBnBconstr.QBnBconstr(model.QBnBLinExp, int, double, java.lang.String, model.Model):::ENTER
arg0.coeffs[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0.coeffs[].getClass().getName() elements == java.lang.Double.class
arg0.varNames[] contains no nulls and has only one value, of length 3
arg0.varNames[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0.varNames[].getClass().getName() elements == java.lang.String.class
arg1 one of { 1, 2 }
arg2 one of { 7.0, 500.3, 500.4 }
arg3.toString one of { "R1", "R2", "R3" }
arg4 has only one value
arg4.U == null
arg4.L == null
arg4.id == null
arg4.A == null
arg4.c == null
arg4.b == null
arg4.debugMode == false
arg4.x == null
arg4.feasible == false
arg4.fo == 0.0
arg4.type == null
arg4.I == null
arg4.integer == false
arg4.constraints has only one value
arg4.constraints[] == []
arg4.constraints[].getClass().getName() == []
arg4.variables has only one value
arg4.variables[].getClass().getName() elements == model.QBnBVariable.class
arg4.ofle == null
arg4.epsilon == 1.0E-6
arg4.simplex == null
arg4.print == false
size(arg0.coeffs[]) == 3
size(arg0.varNames[]) == 3
size(arg4.variables[]) one of { 3, 4, 5 }
===========================================================================
model.QBnBconstr.QBnBconstr(model.QBnBLinExp, int, double, java.lang.String, model.Model):::EXIT
this.name == orig(arg3)
this.le == orig(arg0)
this.le.coeffs == arg0.coeffs
this.le.varNames == arg0.varNames
this.rs == orig(arg2)
this.model == orig(arg4)
this.model.U == this.model.L
this.model.U == this.model.c
this.model.U == this.model.b
this.model.constraints == arg4.constraints
this.model.variables == arg4.variables
this.model.epsilon == arg4.epsilon
arg0.coeffs == orig(arg0.coeffs)
arg0.varNames == orig(arg0.varNames)
arg3.toString == orig(arg3.toString)
arg4.U == orig(arg4.U)
arg4.L == orig(arg4.L)
arg4.id == orig(arg4.id)
arg4.A == orig(arg4.A)
arg4.c == orig(arg4.c)
arg4.b == orig(arg4.b)
arg4.debugMode == orig(arg4.debugMode)
arg4.x == orig(arg4.x)
arg4.feasible == orig(arg4.feasible)
arg4.fo == orig(arg4.fo)
arg4.type == orig(arg4.type)
arg4.I == orig(arg4.I)
arg4.integer == orig(arg4.integer)
arg4.constraints == orig(arg4.constraints)
arg4.constraints[] == orig(arg4.constraints[])
arg4.variables == orig(arg4.variables)
arg4.ofle == orig(arg4.ofle)
arg4.epsilon == orig(arg4.epsilon)
arg4.simplex == orig(arg4.simplex)
arg4.print == orig(arg4.print)
size(arg0.coeffs[])-1 == orig(size(arg0.coeffs[]))
size(arg0.varNames[])-1 == orig(size(arg0.varNames[]))
size(arg4.variables[])-1 == orig(size(arg4.variables[]))
this.model.U == null
this.model.id == null
this.model.A == null
this.model.fo == 0.0
this.model.I == null
this.model.constraints[] == []
this.model.constraints[].getClass().getName() == []
this.model.ofle == null
this.model.simplex == null
arg0.coeffs[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
arg0.coeffs[].getClass().getName() elements == java.lang.Double.class
arg0.varNames[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
arg0.varNames[].getClass().getName() elements == java.lang.String.class
arg3.toString one of { "R1", "R2", "R3" }
arg4.U == null
arg4.L == null
arg4.id == null
arg4.A == null
arg4.c == null
arg4.b == null
arg4.debugMode == false
arg4.x == null
arg4.feasible == false
arg4.fo == 0.0
arg4.type == null
arg4.I == null
arg4.integer == false
arg4.constraints has only one value
arg4.constraints[] == []
arg4.constraints[].getClass().getName() == []
arg4.variables has only one value
arg4.variables[].getClass().getName() elements == model.QBnBVariable.class
arg4.ofle == null
arg4.epsilon == 1.0E-6
arg4.simplex == null
arg4.print == false
size(arg0.coeffs[]) == 4
size(arg0.varNames[]) == 4
size(arg4.variables[]) one of { 4, 5, 6 }
===========================================================================
model.QBnBconstr.getLe():::ENTER
this.model.constraints[] contains no nulls and has only one value, of length 3
this.model.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.model.variables[] contains no nulls and has only one value, of length 6
this.model.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
size(this.model.constraints[]) == 3
size(this.model.variables[]) == 6
===========================================================================
model.QBnBconstr.getLe():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.le == return
this.le.coeffs == return.coeffs
this.le.coeffs[] == orig(this.le.coeffs[])
this.le.varNames == return.varNames
this.le.varNames[] == orig(this.le.varNames[])
this.type == orig(this.type)
this.rs == orig(this.rs)
this.slack == orig(this.slack)
this.model == orig(this.model)
this.model.U == orig(this.model.U)
this.model.U[] == orig(this.model.U[])
this.model.L == orig(this.model.L)
this.model.L[] == orig(this.model.L[])
this.model.id == orig(this.model.id)
this.model.id.toString == orig(this.model.id.toString)
this.model.A == orig(this.model.A)
this.model.A.getClass().getName() == orig(this.model.A.getClass().getName())
this.model.A[] == orig(this.model.A[])
this.model.c == orig(this.model.c)
this.model.c[] == orig(this.model.c[])
this.model.b == orig(this.model.b)
this.model.b[] == orig(this.model.b[])
this.model.debugMode == orig(this.model.debugMode)
this.model.x == orig(this.model.x)
this.model.feasible == orig(this.model.feasible)
this.model.fo == orig(this.model.fo)
this.model.type == orig(this.model.type)
this.model.I == orig(this.model.I)
this.model.I.getClass().getName() == orig(this.model.I.getClass().getName())
this.model.I.getClass().getName() == orig(this.model.simplex.In.getClass().getName())
this.model.I.getClass().getName() == orig(this.model.simplex.Ib.getClass().getName())
this.model.I.getClass().getName() == orig(this.model.simplex.I.getClass().getName())
this.model.I[] == orig(this.model.I[])
this.model.I[] == orig(this.model.simplex.I[])
this.model.integer == orig(this.model.integer)
this.model.constraints == orig(this.model.constraints)
this.model.constraints[] == orig(this.model.constraints[])
this.model.variables == orig(this.model.variables)
this.model.variables[] == orig(this.model.variables[])
this.model.ofle == orig(this.model.ofle)
this.model.ofle.coeffs == orig(this.model.ofle.coeffs)
this.model.ofle.coeffs[] == orig(this.model.ofle.coeffs[])
this.model.ofle.varNames == orig(this.model.ofle.varNames)
this.model.ofle.varNames[] == orig(this.model.ofle.varNames[])
this.model.epsilon == orig(this.model.epsilon)
this.model.simplex == orig(this.model.simplex)
this.model.simplex.B == orig(this.model.simplex.B)
this.model.simplex.B.getClass().getName() == orig(this.model.simplex.B.getClass().getName())
this.model.simplex.B.getClass().getName() == orig(this.model.simplex.N.getClass().getName())
this.model.simplex.B.getClass().getName() == orig(this.model.simplex.A.getClass().getName())
this.model.simplex.B[] == orig(this.model.simplex.B[])
this.model.simplex.N == orig(this.model.simplex.N)
this.model.simplex.N[] == orig(this.model.simplex.N[])
this.model.simplex.xb == orig(this.model.simplex.xb)
this.model.simplex.xb[] == orig(this.model.simplex.xb[])
this.model.simplex.xn == orig(this.model.simplex.xn)
this.model.simplex.xn[] == orig(this.model.simplex.xn[])
this.model.simplex.cb == orig(this.model.simplex.cb)
this.model.simplex.cb[] == orig(this.model.simplex.cb[])
this.model.simplex.cn == orig(this.model.simplex.cn)
this.model.simplex.cn[] == orig(this.model.simplex.cn[])
this.model.simplex.b == orig(this.model.simplex.b)
this.model.simplex.b[] == orig(this.model.simplex.b[])
this.model.simplex.In == orig(this.model.simplex.In)
this.model.simplex.In[] == orig(this.model.simplex.In[])
this.model.simplex.Ib == orig(this.model.simplex.Ib)
this.model.simplex.Ib[] == orig(this.model.simplex.Ib[])
this.model.simplex.c == orig(this.model.simplex.c)
this.model.simplex.c[] == orig(this.model.simplex.c[])
this.model.simplex.status == orig(this.model.simplex.status)
this.model.simplex.A == orig(this.model.simplex.A)
this.model.simplex.A[] == orig(this.model.simplex.A[])
this.model.simplex.dual == orig(this.model.simplex.dual)
this.model.simplex.dual[] == orig(this.model.simplex.dual[])
this.model.simplex.rq == orig(this.model.simplex.rq)
this.model.simplex.rq[] == orig(this.model.simplex.rq[])
this.model.simplex.Ub == orig(this.model.simplex.Ub)
this.model.simplex.Ub[] == orig(this.model.simplex.Ub[])
this.model.simplex.Lb == orig(this.model.simplex.Lb)
this.model.simplex.Lb[] == orig(this.model.simplex.Lb[])
this.model.simplex.Un == orig(this.model.simplex.Un)
this.model.simplex.Un == orig(this.model.simplex.U)
this.model.simplex.Un[] == orig(this.model.simplex.Un[])
this.model.simplex.Un[] == orig(this.model.simplex.U[])
this.model.simplex.Ln == orig(this.model.simplex.Ln)
this.model.simplex.Ln == orig(this.model.simplex.L)
this.model.simplex.Ln[] == orig(this.model.simplex.Ln[])
this.model.simplex.Ln[] == orig(this.model.simplex.L[])
this.model.simplex.m == orig(this.model.simplex.m)
this.model.simplex.m == orig(size(this.model.simplex.B[]))
this.model.simplex.m == orig(size(this.model.simplex.N[]))
this.model.simplex.m == orig(size(this.model.simplex.xb[]))
this.model.simplex.m == orig(size(this.model.simplex.xn[]))-1
this.model.simplex.m == orig(size(this.model.simplex.cb[]))
this.model.simplex.m == orig(size(this.model.simplex.cn[]))-1
this.model.simplex.m == orig(size(this.model.simplex.b[]))
this.model.simplex.m == orig(size(this.model.simplex.In[]))-1
this.model.simplex.m == orig(size(this.model.simplex.Ib[]))
this.model.simplex.m == orig(size(this.model.simplex.A[]))
this.model.simplex.m == orig(size(this.model.simplex.dual[]))
this.model.simplex.m == orig(size(this.model.simplex.rq[]))-1
this.model.simplex.m == orig(size(this.model.simplex.Ub[]))
this.model.simplex.m == orig(size(this.model.simplex.Lb[]))
this.model.simplex.m == orig(size(this.model.simplex.Un[]))-1
this.model.simplex.m == orig(size(this.model.simplex.Ln[]))-1
this.model.simplex.m == orig(size(this.model.simplex.U[]))-1
this.model.simplex.m == orig(size(this.model.simplex.L[]))-1
this.model.simplex.n == orig(this.model.simplex.n)
this.model.simplex.n == orig(size(this.model.I[]))
this.model.simplex.n == orig(size(this.model.simplex.c[]))
this.model.simplex.n == orig(size(this.model.simplex.I[]))
this.model.simplex.initialTime == orig(this.model.simplex.initialTime)
this.model.simplex.nart == orig(this.model.simplex.nart)
this.model.simplex.printSolution == orig(this.model.simplex.printSolution)
this.model.simplex.I == orig(this.model.simplex.I)
this.model.print == orig(this.model.print)
return == orig(this.le)
return.coeffs == orig(this.le.coeffs)
return.varNames == orig(this.le.varNames)
size(this.model.U[]) == orig(size(this.model.L[]))
size(this.model.A[]) == orig(size(this.model.b[]))
size(this.model.simplex.xn[]) == orig(size(this.model.simplex.cn[]))
size(this.model.simplex.xn[]) == orig(size(this.model.simplex.In[]))
size(this.model.simplex.xn[]) == orig(size(this.model.simplex.rq[]))
size(this.model.simplex.xn[]) == orig(size(this.model.simplex.Un[]))
size(this.model.simplex.xn[]) == orig(size(this.model.simplex.Ln[]))
size(this.model.simplex.xn[]) == orig(size(this.model.simplex.U[]))
size(this.model.simplex.xn[]) == orig(size(this.model.simplex.L[]))
this.model.constraints[] contains no nulls and has only one value, of length 3
this.model.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.model.variables[] contains no nulls and has only one value, of length 6
this.model.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
return != null
return.coeffs != null
return.coeffs[] elements != null
return.coeffs[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
return.coeffs[].getClass().getName() elements == java.lang.Double.class
return.varNames != null
return.varNames[] elements != null
return.varNames[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
return.varNames[].getClass().getName() elements == java.lang.String.class
size(this.model.constraints[]) == 3
size(this.model.variables[]) == 6
size(return.coeffs[]) == 4
size(return.varNames[]) == 4
===========================================================================
model.QBnBconstr.getRs():::ENTER
this.model.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.model.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.model.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.model.L[] elements one of { 0.0, 1.0, 75.1 }
this.model.id == null
this.model.b[] elements one of { 0.0, 7.0, 500.3 }
this.model.b[] one of { [0.0, 0.0, 0.0], [7.0, 0.0, 0.0], [7.0, 500.3, 0.0] }
this.model.fo == 0.0
this.model.I == null
this.model.constraints[] contains no nulls and has only one value, of length 3
this.model.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.model.variables[] contains no nulls and has only one value, of length 6
this.model.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.model.simplex == null
size(this.model.constraints[]) == 3
size(this.model.variables[]) == 6
this.model.fo in this.model.L[]
this.model.fo in this.model.c[]
this.model.fo in this.model.b[]
===========================================================================
model.QBnBconstr.getRs():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.le == orig(this.le)
this.le.coeffs == orig(this.le.coeffs)
this.le.coeffs[] == orig(this.le.coeffs[])
this.le.varNames == orig(this.le.varNames)
this.le.varNames[] == orig(this.le.varNames[])
this.type == orig(this.type)
this.rs == return
this.slack == orig(this.slack)
this.model == orig(this.model)
this.model.U == orig(this.model.U)
this.model.U[] == orig(this.model.U[])
this.model.L == orig(this.model.L)
this.model.L[] == orig(this.model.L[])
this.model.id == orig(this.model.id)
this.model.A == orig(this.model.A)
this.model.A.getClass().getName() == orig(this.model.A.getClass().getName())
this.model.A[] == orig(this.model.A[])
this.model.c == orig(this.model.c)
this.model.c[] == orig(this.model.c[])
this.model.b == orig(this.model.b)
this.model.b[] == orig(this.model.b[])
this.model.debugMode == orig(this.model.debugMode)
this.model.x == orig(this.model.x)
this.model.feasible == orig(this.model.feasible)
this.model.fo == orig(this.model.fo)
this.model.type == orig(this.model.type)
this.model.I == orig(this.model.I)
this.model.integer == orig(this.model.integer)
this.model.constraints == orig(this.model.constraints)
this.model.constraints[] == orig(this.model.constraints[])
this.model.variables == orig(this.model.variables)
this.model.variables[] == orig(this.model.variables[])
this.model.ofle == orig(this.model.ofle)
this.model.ofle.coeffs == orig(this.model.ofle.coeffs)
this.model.ofle.coeffs[] == orig(this.model.ofle.coeffs[])
this.model.ofle.varNames == orig(this.model.ofle.varNames)
this.model.ofle.varNames[] == orig(this.model.ofle.varNames[])
this.model.epsilon == orig(this.model.epsilon)
this.model.simplex == orig(this.model.simplex)
this.model.print == orig(this.model.print)
return == orig(this.rs)
size(this.model.U[]) == orig(size(this.model.L[]))
size(this.model.U[]) == orig(size(this.model.c[]))
size(this.model.A[]) == orig(size(this.model.b[]))
this.model.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.model.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.model.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.model.L[] elements one of { 0.0, 1.0, 75.1 }
this.model.id == null
this.model.b[] elements one of { 0.0, 7.0, 500.3 }
this.model.b[] one of { [0.0, 0.0, 0.0], [7.0, 0.0, 0.0], [7.0, 500.3, 0.0] }
this.model.fo == 0.0
this.model.I == null
this.model.constraints[] contains no nulls and has only one value, of length 3
this.model.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.model.variables[] contains no nulls and has only one value, of length 6
this.model.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.model.simplex == null
return one of { 7.0, 500.3, 500.4 }
size(this.model.constraints[]) == 3
size(this.model.variables[]) == 6
this.model.fo in this.model.L[]
this.model.fo in this.model.c[]
this.model.fo in this.model.b[]
===========================================================================
model.QBnBconstr.getType():::ENTER
this.model.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.model.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.model.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.model.L[] elements one of { 0.0, 1.0, 75.1 }
this.model.id == null
this.model.b[] elements one of { 0.0, 7.0, 500.3 }
this.model.b[] one of { [0.0, 0.0, 0.0], [7.0, 0.0, 0.0], [7.0, 500.3, 0.0] }
this.model.fo == 0.0
this.model.I == null
this.model.constraints[] contains no nulls and has only one value, of length 3
this.model.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.model.variables[] contains no nulls and has only one value, of length 6
this.model.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.model.simplex == null
size(this.model.constraints[]) == 3
size(this.model.variables[]) == 6
this.model.fo in this.model.L[]
this.model.fo in this.model.c[]
this.model.fo in this.model.b[]
===========================================================================
model.QBnBconstr.getType():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.le == orig(this.le)
this.le.coeffs == orig(this.le.coeffs)
this.le.coeffs[] == orig(this.le.coeffs[])
this.le.varNames == orig(this.le.varNames)
this.le.varNames[] == orig(this.le.varNames[])
this.type == return
this.rs == orig(this.rs)
this.slack == orig(this.slack)
this.model == orig(this.model)
this.model.U == orig(this.model.U)
this.model.U[] == orig(this.model.U[])
this.model.L == orig(this.model.L)
this.model.L[] == orig(this.model.L[])
this.model.id == orig(this.model.id)
this.model.A == orig(this.model.A)
this.model.A.getClass().getName() == orig(this.model.A.getClass().getName())
this.model.A[] == orig(this.model.A[])
this.model.c == orig(this.model.c)
this.model.c[] == orig(this.model.c[])
this.model.b == orig(this.model.b)
this.model.b[] == orig(this.model.b[])
this.model.debugMode == orig(this.model.debugMode)
this.model.x == orig(this.model.x)
this.model.feasible == orig(this.model.feasible)
this.model.fo == orig(this.model.fo)
this.model.type == orig(this.model.type)
this.model.I == orig(this.model.I)
this.model.integer == orig(this.model.integer)
this.model.constraints == orig(this.model.constraints)
this.model.constraints[] == orig(this.model.constraints[])
this.model.variables == orig(this.model.variables)
this.model.variables[] == orig(this.model.variables[])
this.model.ofle == orig(this.model.ofle)
this.model.ofle.coeffs == orig(this.model.ofle.coeffs)
this.model.ofle.coeffs[] == orig(this.model.ofle.coeffs[])
this.model.ofle.varNames == orig(this.model.ofle.varNames)
this.model.ofle.varNames[] == orig(this.model.ofle.varNames[])
this.model.epsilon == orig(this.model.epsilon)
this.model.simplex == orig(this.model.simplex)
this.model.print == orig(this.model.print)
return == orig(this.type)
size(this.model.U[]) == orig(size(this.model.L[]))
size(this.model.U[]) == orig(size(this.model.c[]))
size(this.model.A[]) == orig(size(this.model.b[]))
this.model.U[] == [100.9, 200.4, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308]
this.model.U[] elements one of { 100.9, 200.4, 1.7976931348623157E308 }
this.model.L[] == [1.0, 75.1, 0.0, 0.0, 0.0, 0.0]
this.model.L[] elements one of { 0.0, 1.0, 75.1 }
this.model.id == null
this.model.b[] elements one of { 0.0, 7.0, 500.3 }
this.model.b[] one of { [0.0, 0.0, 0.0], [7.0, 0.0, 0.0], [7.0, 500.3, 0.0] }
this.model.fo == 0.0
this.model.I == null
this.model.constraints[] contains no nulls and has only one value, of length 3
this.model.constraints[].getClass().getName() == [model.QBnBconstr, model.QBnBconstr, model.QBnBconstr]
this.model.variables[] contains no nulls and has only one value, of length 6
this.model.variables[].getClass().getName() == [model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable, model.QBnBVariable]
this.model.simplex == null
return == 0
size(this.model.constraints[]) == 3
size(this.model.variables[]) == 6
this.model.fo in this.model.L[]
this.model.fo in this.model.c[]
this.model.fo in this.model.b[]
===========================================================================
tests.Test.main(java.lang.String[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.lang.String[].class
arg0[] == []
arg0[].toString == []
===========================================================================
tests.Test.main(java.lang.String[]):::EXIT
arg0[] == orig(arg0[])
arg0[] == []
arg0[].toString == []
Exiting Daikon.
