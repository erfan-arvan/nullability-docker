Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

===========================================================================
es.uc3m.eda.list.arraylist.AList:::OBJECT
this.array != null
this.array.getClass().getName() == java.lang.Object[].class
this.array[] elements != null
this.array[].getClass().getName() elements == es.uc3m.recordplayer.logic.Song.class
===========================================================================
es.uc3m.eda.list.arraylist.AList.AList():::EXIT
this.array[] == []
this.array[].getClass().getName() == []
===========================================================================
es.uc3m.eda.list.arraylist.AList.addLast(java.lang.Object):::ENTER
arg0 != null
arg0.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
size(this.array[]) one of { 0, 1, 2 }
this.array.getClass().getName() != arg0.getClass().getName()
===========================================================================
es.uc3m.eda.list.arraylist.AList.addLast(java.lang.Object):::EXIT
this.array.getClass().getName() == orig(this.array.getClass().getName())
size(this.array[])-1 == orig(size(this.array[]))
size(this.array[]) one of { 1, 2, 3 }
this.array.getClass().getName() != orig(arg0.getClass().getName())
orig(arg0) in this.array[]
orig(arg0.getClass().getName()) in this.array[].getClass().getName()
===========================================================================
es.uc3m.eda.list.arraylist.AList.createIterator():::ENTER
size(this.array[]) one of { 1, 2, 3 }
===========================================================================
es.uc3m.eda.list.arraylist.AList.createIterator():::EXIT
this.array == return.list.array
this.array == orig(this.array)
this.array.getClass().getName() == return.list.array.getClass().getName()
this.array.getClass().getName() == orig(this.array.getClass().getName())
this.array[] == orig(this.array[])
return.list == orig(this)
return != null
return.list != null
return.list.array[] elements != null
return.list.array[].getClass().getName() elements == es.uc3m.recordplayer.logic.Song.class
return.currentIndex == 0
size(this.array[]) one of { 1, 2, 3 }
size(return.list.array[]) one of { 1, 2, 3 }
===========================================================================
es.uc3m.eda.list.arraylist.AList.insertAt(int, java.lang.Object):::ENTER
arg0 == size(this.array[])
arg1 != null
arg1.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
size(this.array[]) one of { 0, 1, 2 }
this.array.getClass().getName() != arg1.getClass().getName()
===========================================================================
es.uc3m.eda.list.arraylist.AList.insertAt(int, java.lang.Object):::EXIT37
===========================================================================
es.uc3m.eda.list.arraylist.AList.insertAt(int, java.lang.Object):::EXIT
this.array.getClass().getName() == orig(this.array.getClass().getName())
orig(arg0) == size(this.array[])-1
orig(arg1) == this.array[orig(arg0)]
size(this.array[]) one of { 1, 2, 3 }
this.array.getClass().getName() != orig(arg1.getClass().getName())
orig(arg1.getClass().getName()) in this.array[].getClass().getName()
===========================================================================
es.uc3m.eda.list.arraylist.AListIterator:::OBJECT
this.list != null
this.list.array != null
this.list.array.getClass().getName() == java.lang.Object[].class
this.list.array[] elements != null
this.list.array[].getClass().getName() elements == es.uc3m.recordplayer.logic.Song.class
this.currentIndex >= 0
size(this.list.array[]) one of { 1, 2, 3 }
this.currentIndex <= size(this.list.array[])
===========================================================================
es.uc3m.eda.list.arraylist.AListIterator.AListIterator(es.uc3m.eda.list.arraylist.AList):::ENTER
arg0 != null
arg0.array != null
arg0.array.getClass().getName() == java.lang.Object[].class
arg0.array[] elements != null
arg0.array[].getClass().getName() elements == es.uc3m.recordplayer.logic.Song.class
size(arg0.array[]) one of { 1, 2, 3 }
===========================================================================
es.uc3m.eda.list.arraylist.AListIterator.AListIterator(es.uc3m.eda.list.arraylist.AList):::EXIT
this.list == orig(arg0)
this.list.array == arg0.array
this.list.array.getClass().getName() == arg0.array.getClass().getName()
this.list.array[] == arg0.array[]
arg0.array == orig(arg0.array)
arg0.array.getClass().getName() == orig(arg0.array.getClass().getName())
arg0.array[] == orig(arg0.array[])
this.currentIndex == 0
arg0.array != null
arg0.array.getClass().getName() == java.lang.Object[].class
arg0.array[] elements != null
arg0.array[].getClass().getName() elements == es.uc3m.recordplayer.logic.Song.class
size(arg0.array[]) one of { 1, 2, 3 }
this.currentIndex <= size(arg0.array[])-1
===========================================================================
es.uc3m.eda.list.arraylist.AListIterator.getCurrentElem():::ENTER
this.currentIndex one of { 0, 1, 2 }
this.currentIndex <= size(this.list.array[])-1
===========================================================================
es.uc3m.eda.list.arraylist.AListIterator.getCurrentElem():::EXIT27
===========================================================================
es.uc3m.eda.list.arraylist.AListIterator.getCurrentElem():::EXIT
this.list == orig(this.list)
this.list.array == orig(this.list.array)
this.list.array.getClass().getName() == orig(this.list.array.getClass().getName())
this.list.array[] == orig(this.list.array[])
this.currentIndex == orig(this.currentIndex)
return == this.list.array[this.currentIndex]
return == this.list.array[orig(this.currentIndex)]
return == orig(this.list.array[post(this.currentIndex)])
return == orig(this.list.array[this.currentIndex])
this.currentIndex one of { 0, 1, 2 }
return.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
this.list.array.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.list.array[].getClass().getName()
this.currentIndex <= size(this.list.array[])-1
===========================================================================
es.uc3m.eda.list.arraylist.AListIterator.isValid():::ENTER
===========================================================================
es.uc3m.eda.list.arraylist.AListIterator.isValid():::EXIT
this.list == orig(this.list)
this.list.array == orig(this.list.array)
this.list.array.getClass().getName() == orig(this.list.array.getClass().getName())
this.list.array[] == orig(this.list.array[])
this.currentIndex == orig(this.currentIndex)
(return == false)  <==>  (this.currentIndex == size(this.list.array[]))
(return == false)  ==>  (this.currentIndex one of { 1, 2, 3 })
(return == true)  <==>  (this.currentIndex <= size(this.list.array[])-1)
(return == true)  ==>  (this.currentIndex one of { 0, 1, 2 })
===========================================================================
es.uc3m.eda.list.arraylist.AListIterator.isValid():::EXIT;condition="return == true"
this.currentIndex one of { 0, 1, 2 }
return == true
this.currentIndex <= size(this.list.array[])-1
===========================================================================
es.uc3m.eda.list.arraylist.AListIterator.isValid():::EXIT;condition="not(return == true)"
this.currentIndex == size(this.list.array[])
this.currentIndex == orig(size(this.list.array[]))
this.currentIndex one of { 1, 2, 3 }
return == false
===========================================================================
es.uc3m.eda.list.arraylist.AListIterator.moveNext():::ENTER
this.currentIndex one of { 0, 1, 2 }
this.currentIndex <= size(this.list.array[])-1
===========================================================================
es.uc3m.eda.list.arraylist.AListIterator.moveNext():::EXIT
this.list == orig(this.list)
this.list.array == orig(this.list.array)
this.list.array.getClass().getName() == orig(this.list.array.getClass().getName())
this.list.array[] == orig(this.list.array[])
this.list.array[this.currentIndex-1] == this.list.array[orig(this.currentIndex)]
this.list.array[this.currentIndex-1] == orig(this.list.array[this.currentIndex])
this.currentIndex one of { 1, 2, 3 }
this.currentIndex > orig(this.currentIndex)
orig(this.currentIndex) <= size(this.list.array[])-1
===========================================================================
es.uc3m.eda.list.singlelink.SList:::OBJECT
this.firstNode.nextNode.elem.getClass().getName() == this.firstNode.elem.getClass().getName()
this.firstNode.nextNode.elem != null
this.firstNode.elem != null
===========================================================================
es.uc3m.eda.list.singlelink.SList.SList():::EXIT
this.firstNode == null
===========================================================================
es.uc3m.eda.list.singlelink.SList.addLast(java.lang.Object):::ENTER
this.firstNode.nextNode.elem.getClass().getName() == arg0.getClass().getName()
this.firstNode.elem.getClass().getName() == arg0.getClass().getName()
arg0 != null
===========================================================================
es.uc3m.eda.list.singlelink.SList.addLast(java.lang.Object):::EXIT
this.firstNode.nextNode.elem == orig(this.firstNode.nextNode.elem)
this.firstNode.nextNode.elem.getClass().getName() == orig(this.firstNode.nextNode.elem.getClass().getName())
this.firstNode.nextNode.elem.getClass().getName() == orig(this.firstNode.elem.getClass().getName())
this.firstNode.nextNode.elem.getClass().getName() == orig(arg0.getClass().getName())
this.firstNode.elem == orig(this.firstNode.elem)
this.firstNode.elem.getClass().getName() == orig(arg0.getClass().getName())
this.firstNode != null
===========================================================================
es.uc3m.eda.list.singlelink.SList.createIterator():::ENTER
===========================================================================
es.uc3m.eda.list.singlelink.SList.createIterator():::EXIT
this.firstNode == return.currentNode
this.firstNode == orig(this.firstNode)
this.firstNode.nextNode == return.currentNode.nextNode
this.firstNode.nextNode == orig(this.firstNode.nextNode)
this.firstNode.nextNode.nextNode == orig(this.firstNode.nextNode.nextNode)
this.firstNode.nextNode.elem == orig(this.firstNode.nextNode.elem)
this.firstNode.elem == return.currentNode.elem
this.firstNode.elem == orig(this.firstNode.elem)
this.firstNode.elem.getClass().getName() == return.currentNode.elem.getClass().getName()
this.firstNode.elem.getClass().getName() == orig(this.firstNode.nextNode.elem.getClass().getName())
this.firstNode.elem.getClass().getName() == orig(this.firstNode.elem.getClass().getName())
this.firstNode.elem.getClass().getName() != return.list.getClass().getName()
===========================================================================
es.uc3m.eda.list.singlelink.SList.getAt(int):::ENTER
this has only one value
this.firstNode has only one value
this.firstNode.nextNode has only one value
this.firstNode.nextNode.nextNode has only one value
this.firstNode.nextNode.elem has only one value
this.firstNode.elem has only one value
this.firstNode.elem.getClass().getName() == es.uc3m.recordplayer.logic.Record.class
===========================================================================
es.uc3m.eda.list.singlelink.SList.getAt(int):::EXIT171
===========================================================================
es.uc3m.eda.list.singlelink.SList.getAt(int):::EXIT
this.firstNode == orig(this.firstNode)
this.firstNode.nextNode == orig(this.firstNode.nextNode)
this.firstNode.nextNode.nextNode == orig(this.firstNode.nextNode.nextNode)
this.firstNode.nextNode.elem == orig(this.firstNode.nextNode.elem)
this.firstNode.nextNode.elem.getClass().getName() == return.getClass().getName()
this.firstNode.elem == orig(this.firstNode.elem)
this.firstNode.elem.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.firstNode.nextNode.elem.getClass().getName())
return.getClass().getName() == orig(this.firstNode.elem.getClass().getName())
this.firstNode has only one value
this.firstNode.nextNode has only one value
this.firstNode.nextNode.nextNode has only one value
this.firstNode.nextNode.elem has only one value
this.firstNode.elem has only one value
return.getClass().getName() == es.uc3m.recordplayer.logic.Record.class
===========================================================================
es.uc3m.eda.list.singlelink.SList.getFirstNode():::ENTER
===========================================================================
es.uc3m.eda.list.singlelink.SList.getFirstNode():::EXIT
this.firstNode == return
this.firstNode.nextNode == return.nextNode
this.firstNode.nextNode.nextNode == return.nextNode.nextNode
this.firstNode.nextNode.elem == return.nextNode.elem
this.firstNode.nextNode.elem.getClass().getName() == return.elem.getClass().getName()
this.firstNode.elem == return.elem
this.firstNode.elem.getClass().getName() == return.elem.getClass().getName()
return == orig(this.firstNode)
return.nextNode == orig(this.firstNode.nextNode)
return.nextNode.nextNode == orig(this.firstNode.nextNode.nextNode)
return.nextNode.elem == orig(this.firstNode.nextNode.elem)
return.nextNode.elem.getClass().getName() == return.elem.getClass().getName()
return.elem == orig(this.firstNode.elem)
return.elem.getClass().getName() == orig(this.firstNode.nextNode.elem.getClass().getName())
return.elem.getClass().getName() == orig(this.firstNode.elem.getClass().getName())
===========================================================================
es.uc3m.eda.list.singlelink.SList.getSize():::ENTER
this has only one value
this.firstNode has only one value
this.firstNode.nextNode has only one value
this.firstNode.nextNode.nextNode has only one value
this.firstNode.nextNode.elem has only one value
this.firstNode.elem has only one value
this.firstNode.elem.getClass().getName() == es.uc3m.recordplayer.logic.Record.class
===========================================================================
es.uc3m.eda.list.singlelink.SList.getSize():::EXIT
this.firstNode == orig(this.firstNode)
this.firstNode.nextNode == orig(this.firstNode.nextNode)
this.firstNode.nextNode.nextNode == orig(this.firstNode.nextNode.nextNode)
this.firstNode.nextNode.elem == orig(this.firstNode.nextNode.elem)
this.firstNode.elem == orig(this.firstNode.elem)
this.firstNode.elem.getClass().getName() == orig(this.firstNode.nextNode.elem.getClass().getName())
this.firstNode.elem.getClass().getName() == orig(this.firstNode.elem.getClass().getName())
this.firstNode has only one value
this.firstNode.nextNode has only one value
this.firstNode.nextNode.nextNode has only one value
this.firstNode.nextNode.elem has only one value
this.firstNode.elem has only one value
this.firstNode.elem.getClass().getName() == es.uc3m.recordplayer.logic.Record.class
return == 7
===========================================================================
es.uc3m.eda.list.singlelink.SListIterator:::OBJECT
this.currentNode.nextNode.elem.getClass().getName() == this.currentNode.elem.getClass().getName()
this.list != null
this.currentNode.nextNode.elem != null
this.currentNode.elem != null
this.list.getClass().getName() != this.currentNode.nextNode.elem.getClass().getName()
this.list.getClass().getName() != this.currentNode.elem.getClass().getName()
===========================================================================
es.uc3m.eda.list.singlelink.SListIterator.SListIterator(es.uc3m.eda.list.singlelink.ISList):::ENTER
===========================================================================
es.uc3m.eda.list.singlelink.SListIterator.SListIterator(es.uc3m.eda.list.singlelink.ISList):::EXIT
this.list == orig(arg0)
this.list.getClass().getName() == orig(arg0.getClass().getName())
===========================================================================
es.uc3m.eda.list.singlelink.SListIterator.getCurrentElem():::ENTER
this.currentNode != null
===========================================================================
es.uc3m.eda.list.singlelink.SListIterator.getCurrentElem():::EXIT28
===========================================================================
es.uc3m.eda.list.singlelink.SListIterator.getCurrentElem():::EXIT
this.list == orig(this.list)
this.list.getClass().getName() == orig(this.list.getClass().getName())
this.currentNode == orig(this.currentNode)
this.currentNode.nextNode == orig(this.currentNode.nextNode)
this.currentNode.nextNode.nextNode == orig(this.currentNode.nextNode.nextNode)
this.currentNode.nextNode.elem == orig(this.currentNode.nextNode.elem)
this.currentNode.nextNode.elem.getClass().getName() == return.getClass().getName()
this.currentNode.nextNode.elem.getClass().getName() == orig(this.currentNode.nextNode.elem.getClass().getName())
this.currentNode.elem == return
this.currentNode.elem.getClass().getName() == return.getClass().getName()
return == orig(this.currentNode.elem)
return.getClass().getName() == orig(this.currentNode.elem.getClass().getName())
this.currentNode != null
return != null
this.list.getClass().getName() != return.getClass().getName()
===========================================================================
es.uc3m.eda.list.singlelink.SListIterator.isValid():::ENTER
===========================================================================
es.uc3m.eda.list.singlelink.SListIterator.isValid():::EXIT
this.list == orig(this.list)
this.list.getClass().getName() == orig(this.list.getClass().getName())
this.currentNode == orig(this.currentNode)
this.currentNode.nextNode == orig(this.currentNode.nextNode)
this.currentNode.nextNode.nextNode == orig(this.currentNode.nextNode.nextNode)
this.currentNode.nextNode.elem == orig(this.currentNode.nextNode.elem)
this.currentNode.nextNode.elem.getClass().getName() == orig(this.currentNode.nextNode.elem.getClass().getName())
this.currentNode.elem == orig(this.currentNode.elem)
this.currentNode.elem.getClass().getName() == orig(this.currentNode.elem.getClass().getName())
(this.currentNode != null)  <==>  (return == true)
(this.currentNode != null)  ==>  (this.currentNode.elem != null)
(this.currentNode != null)  ==>  (this.currentNode.nextNode.elem != null)
(this.currentNode != null)  ==>  (this.currentNode.nextNode.elem.getClass().getName() == this.currentNode.elem.getClass().getName())
(this.currentNode != null)  ==>  (this.list.getClass().getName() != this.currentNode.elem.getClass().getName())
(this.currentNode != null)  ==>  (this.list.getClass().getName() != this.currentNode.nextNode.elem.getClass().getName())
(this.currentNode == null)  <==>  (return == false)
===========================================================================
es.uc3m.eda.list.singlelink.SListIterator.isValid():::EXIT;condition="return == true"
this.currentNode != null
return == true
===========================================================================
es.uc3m.eda.list.singlelink.SListIterator.isValid():::EXIT;condition="not(return == true)"
this.currentNode == null
return == false
===========================================================================
es.uc3m.eda.list.singlelink.SListIterator.moveNext():::ENTER
this.currentNode != null
===========================================================================
es.uc3m.eda.list.singlelink.SListIterator.moveNext():::EXIT
this.list == orig(this.list)
this.list.getClass().getName() == orig(this.list.getClass().getName())
this.currentNode.nextNode.elem.getClass().getName() == orig(this.currentNode.elem.getClass().getName())
this.currentNode.elem.getClass().getName() == orig(this.currentNode.nextNode.elem.getClass().getName())
this.currentNode.elem.getClass().getName() == orig(this.currentNode.elem.getClass().getName())
this.list.getClass().getName() != orig(this.currentNode.elem.getClass().getName())
===========================================================================
es.uc3m.eda.list.singlelink.SNode:::OBJECT
this.nextNode.nextNode.elem.getClass().getName() == this.nextNode.elem.getClass().getName()
this.nextNode.nextNode.elem.getClass().getName() == this.elem.getClass().getName()
this.nextNode.elem.getClass().getName() == this.elem.getClass().getName()
this.nextNode.nextNode.elem != null
this.nextNode.elem != null
this.elem != null
===========================================================================
es.uc3m.eda.list.singlelink.SNode.SNode(java.lang.Object):::ENTER
arg0 != null
===========================================================================
es.uc3m.eda.list.singlelink.SNode.SNode(java.lang.Object):::EXIT
this.elem == orig(arg0)
this.elem.getClass().getName() == orig(arg0.getClass().getName())
this.nextNode == null
===========================================================================
es.uc3m.eda.list.singlelink.SNode.getElement():::ENTER
===========================================================================
es.uc3m.eda.list.singlelink.SNode.getElement():::EXIT
this.nextNode == orig(this.nextNode)
this.nextNode.nextNode == orig(this.nextNode.nextNode)
this.nextNode.nextNode.nextNode == orig(this.nextNode.nextNode.nextNode)
this.nextNode.nextNode.elem == orig(this.nextNode.nextNode.elem)
this.nextNode.nextNode.elem.getClass().getName() == return.getClass().getName()
this.nextNode.nextNode.elem.getClass().getName() == orig(this.nextNode.nextNode.elem.getClass().getName())
this.nextNode.elem == orig(this.nextNode.elem)
this.nextNode.elem.getClass().getName() == return.getClass().getName()
this.nextNode.elem.getClass().getName() == orig(this.nextNode.elem.getClass().getName())
this.elem == return
this.elem.getClass().getName() == return.getClass().getName()
return == orig(this.elem)
return.getClass().getName() == orig(this.elem.getClass().getName())
return != null
===========================================================================
es.uc3m.eda.list.singlelink.SQueue:::OBJECT
this.frontNode == null
this.tailNode == null
===========================================================================
es.uc3m.eda.list.singlelink.SQueue.SQueue():::EXIT
===========================================================================
es.uc3m.eda.list.singlelink.SStack:::OBJECT
this.topNode.nextNode.elem.getClass().getName() == this.topNode.elem.getClass().getName()
this.topNode.nextNode.elem != null
this.topNode.nextNode.elem.getClass().getName() == es.uc3m.recordplayer.logic.Record.class
this.topNode.elem != null
this.topNode.elem.getClass().getName() == es.uc3m.recordplayer.logic.Record.class
===========================================================================
es.uc3m.eda.list.singlelink.SStack.SStack():::EXIT
this.topNode == null
===========================================================================
es.uc3m.eda.list.singlelink.SStack.isEmpty():::ENTER
===========================================================================
es.uc3m.eda.list.singlelink.SStack.isEmpty():::EXIT
this.topNode == orig(this.topNode)
this.topNode.nextNode == orig(this.topNode.nextNode)
this.topNode.nextNode.nextNode == orig(this.topNode.nextNode.nextNode)
this.topNode.nextNode.elem == orig(this.topNode.nextNode.elem)
this.topNode.nextNode.elem.getClass().getName() == orig(this.topNode.nextNode.elem.getClass().getName())
this.topNode.elem == orig(this.topNode.elem)
this.topNode.elem.getClass().getName() == orig(this.topNode.elem.getClass().getName())
(this.topNode != null)  <==>  (return == false)
(this.topNode != null)  ==>  (this.topNode.elem != null)
(this.topNode != null)  ==>  (this.topNode.elem.getClass().getName() == es.uc3m.recordplayer.logic.Record.class)
(this.topNode != null)  ==>  (this.topNode.nextNode.elem != null)
(this.topNode != null)  ==>  (this.topNode.nextNode.elem.getClass().getName() == es.uc3m.recordplayer.logic.Record.class)
(this.topNode != null)  ==>  (this.topNode.nextNode.elem.getClass().getName() == this.topNode.elem.getClass().getName())
(this.topNode == null)  <==>  (return == true)
===========================================================================
es.uc3m.eda.list.singlelink.SStack.isEmpty():::EXIT;condition="return == true"
this.topNode == null
return == true
===========================================================================
es.uc3m.eda.list.singlelink.SStack.isEmpty():::EXIT;condition="not(return == true)"
this.topNode != null
return == false
===========================================================================
es.uc3m.eda.list.singlelink.SStack.pop():::ENTER
this.topNode != null
===========================================================================
es.uc3m.eda.list.singlelink.SStack.pop():::EXIT27
===========================================================================
es.uc3m.eda.list.singlelink.SStack.pop():::EXIT
this.topNode.nextNode.elem.getClass().getName() == return.getClass().getName()
this.topNode.elem.getClass().getName() == return.getClass().getName()
this.topNode.elem.getClass().getName() == orig(this.topNode.nextNode.elem.getClass().getName())
return.getClass().getName() == orig(this.topNode.elem.getClass().getName())
return != null
return.getClass().getName() == es.uc3m.recordplayer.logic.Record.class
===========================================================================
es.uc3m.eda.list.singlelink.SStack.push(java.lang.Object):::ENTER
this.topNode.nextNode.elem.getClass().getName() == arg0.getClass().getName()
this.topNode.elem.getClass().getName() == arg0.getClass().getName()
arg0 != null
arg0.getClass().getName() == es.uc3m.recordplayer.logic.Record.class
===========================================================================
es.uc3m.eda.list.singlelink.SStack.push(java.lang.Object):::EXIT
this.topNode.nextNode.elem.getClass().getName() == orig(this.topNode.nextNode.elem.getClass().getName())
this.topNode.nextNode.elem.getClass().getName() == orig(this.topNode.elem.getClass().getName())
this.topNode.nextNode.elem.getClass().getName() == orig(arg0.getClass().getName())
this.topNode.elem == orig(arg0)
this.topNode.elem.getClass().getName() == orig(arg0.getClass().getName())
this.topNode != null
===========================================================================
es.uc3m.eda.list.singlelink.SStack.top():::ENTER
this.topNode != null
===========================================================================
es.uc3m.eda.list.singlelink.SStack.top():::EXIT35
===========================================================================
es.uc3m.eda.list.singlelink.SStack.top():::EXIT
this.topNode == orig(this.topNode)
this.topNode.nextNode == orig(this.topNode.nextNode)
this.topNode.nextNode.nextNode == orig(this.topNode.nextNode.nextNode)
this.topNode.nextNode.elem == orig(this.topNode.nextNode.elem)
this.topNode.nextNode.elem.getClass().getName() == return.getClass().getName()
this.topNode.nextNode.elem.getClass().getName() == orig(this.topNode.nextNode.elem.getClass().getName())
this.topNode.elem == return
this.topNode.elem.getClass().getName() == return.getClass().getName()
return == orig(this.topNode.elem)
return.getClass().getName() == orig(this.topNode.elem.getClass().getName())
this.topNode != null
return != null
return.getClass().getName() == es.uc3m.recordplayer.logic.Record.class
===========================================================================
es.uc3m.eda.tree.BSTNode:::OBJECT
this == this.leftChild.parent
this == this.rightChild.parent
this.key == this.leftChild.parent.key
this.key == this.rightChild.parent.key
this.key.getClass().getName() == this.parent.key.getClass().getName()
this.key.getClass().getName() == this.parent.parent.key.getClass().getName()
this.key.getClass().getName() == this.parent.leftChild.key.getClass().getName()
this.key.getClass().getName() == this.parent.rightChild.key.getClass().getName()
this.key.getClass().getName() == this.leftChild.key.getClass().getName()
this.key.getClass().getName() == this.leftChild.leftChild.key.getClass().getName()
this.key.getClass().getName() == this.leftChild.rightChild.key.getClass().getName()
this.key.getClass().getName() == this.rightChild.key.getClass().getName()
this.key.getClass().getName() == this.rightChild.leftChild.key.getClass().getName()
this.key.getClass().getName() == this.rightChild.rightChild.key.getClass().getName()
this.element == this.leftChild.parent.element
this.element == this.rightChild.parent.element
this.element.getClass().getName() == this.parent.element.getClass().getName()
this.element.getClass().getName() == this.parent.parent.element.getClass().getName()
this.element.getClass().getName() == this.parent.leftChild.element.getClass().getName()
this.element.getClass().getName() == this.parent.rightChild.element.getClass().getName()
this.element.getClass().getName() == this.leftChild.element.getClass().getName()
this.element.getClass().getName() == this.leftChild.leftChild.element.getClass().getName()
this.element.getClass().getName() == this.leftChild.rightChild.element.getClass().getName()
this.element.getClass().getName() == this.rightChild.element.getClass().getName()
this.element.getClass().getName() == this.rightChild.leftChild.element.getClass().getName()
this.element.getClass().getName() == this.rightChild.rightChild.element.getClass().getName()
this.parent == this.parent.leftChild.parent
this.parent == this.parent.rightChild.parent
this.parent == this.leftChild.parent.parent
this.parent == this.rightChild.parent.parent
this.parent.key.getClass().getName() == this.parent.parent.key.getClass().getName()
this.parent.key.getClass().getName() == this.parent.leftChild.key.getClass().getName()
this.parent.key.getClass().getName() == this.parent.rightChild.key.getClass().getName()
this.parent.key.getClass().getName() == this.leftChild.key.getClass().getName()
this.parent.key.getClass().getName() == this.leftChild.leftChild.key.getClass().getName()
this.parent.key.getClass().getName() == this.leftChild.rightChild.key.getClass().getName()
this.parent.key.getClass().getName() == this.rightChild.key.getClass().getName()
this.parent.key.getClass().getName() == this.rightChild.leftChild.key.getClass().getName()
this.parent.key.getClass().getName() == this.rightChild.rightChild.key.getClass().getName()
this.parent.element.getClass().getName() == this.parent.parent.element.getClass().getName()
this.parent.element.getClass().getName() == this.parent.leftChild.element.getClass().getName()
this.parent.element.getClass().getName() == this.parent.rightChild.element.getClass().getName()
this.parent.element.getClass().getName() == this.leftChild.element.getClass().getName()
this.parent.element.getClass().getName() == this.leftChild.leftChild.element.getClass().getName()
this.parent.element.getClass().getName() == this.leftChild.rightChild.element.getClass().getName()
this.parent.element.getClass().getName() == this.rightChild.element.getClass().getName()
this.parent.element.getClass().getName() == this.rightChild.leftChild.element.getClass().getName()
this.parent.element.getClass().getName() == this.rightChild.rightChild.element.getClass().getName()
this.parent.parent.key.getClass().getName() == this.parent.leftChild.key.getClass().getName()
this.parent.parent.key.getClass().getName() == this.parent.rightChild.key.getClass().getName()
this.parent.parent.key.getClass().getName() == this.leftChild.key.getClass().getName()
this.parent.parent.key.getClass().getName() == this.leftChild.leftChild.key.getClass().getName()
this.parent.parent.key.getClass().getName() == this.leftChild.rightChild.key.getClass().getName()
this.parent.parent.key.getClass().getName() == this.rightChild.key.getClass().getName()
this.parent.parent.key.getClass().getName() == this.rightChild.leftChild.key.getClass().getName()
this.parent.parent.key.getClass().getName() == this.rightChild.rightChild.key.getClass().getName()
this.parent.parent.element.getClass().getName() == this.parent.leftChild.element.getClass().getName()
this.parent.parent.element.getClass().getName() == this.parent.rightChild.element.getClass().getName()
this.parent.parent.element.getClass().getName() == this.leftChild.element.getClass().getName()
this.parent.parent.element.getClass().getName() == this.leftChild.leftChild.element.getClass().getName()
this.parent.parent.element.getClass().getName() == this.leftChild.rightChild.element.getClass().getName()
this.parent.parent.element.getClass().getName() == this.rightChild.element.getClass().getName()
this.parent.parent.element.getClass().getName() == this.rightChild.leftChild.element.getClass().getName()
this.parent.parent.element.getClass().getName() == this.rightChild.rightChild.element.getClass().getName()
this.parent.leftChild.key.getClass().getName() == this.parent.rightChild.key.getClass().getName()
this.parent.leftChild.key.getClass().getName() == this.leftChild.key.getClass().getName()
this.parent.leftChild.key.getClass().getName() == this.leftChild.leftChild.key.getClass().getName()
this.parent.leftChild.key.getClass().getName() == this.leftChild.rightChild.key.getClass().getName()
this.parent.leftChild.key.getClass().getName() == this.rightChild.key.getClass().getName()
this.parent.leftChild.key.getClass().getName() == this.rightChild.leftChild.key.getClass().getName()
this.parent.leftChild.key.getClass().getName() == this.rightChild.rightChild.key.getClass().getName()
this.parent.leftChild.element.getClass().getName() == this.parent.rightChild.element.getClass().getName()
this.parent.leftChild.element.getClass().getName() == this.leftChild.element.getClass().getName()
this.parent.leftChild.element.getClass().getName() == this.leftChild.leftChild.element.getClass().getName()
this.parent.leftChild.element.getClass().getName() == this.leftChild.rightChild.element.getClass().getName()
this.parent.leftChild.element.getClass().getName() == this.rightChild.element.getClass().getName()
this.parent.leftChild.element.getClass().getName() == this.rightChild.leftChild.element.getClass().getName()
this.parent.leftChild.element.getClass().getName() == this.rightChild.rightChild.element.getClass().getName()
this.parent.leftChild.parent == this.parent.rightChild.parent
this.parent.leftChild.parent == this.leftChild.parent.parent
this.parent.leftChild.parent == this.rightChild.parent.parent
this.parent.leftChild.rightChild == this.rightChild.leftChild.parent
this.parent.rightChild.key.getClass().getName() == this.leftChild.key.getClass().getName()
this.parent.rightChild.key.getClass().getName() == this.leftChild.leftChild.key.getClass().getName()
this.parent.rightChild.key.getClass().getName() == this.leftChild.rightChild.key.getClass().getName()
this.parent.rightChild.key.getClass().getName() == this.rightChild.key.getClass().getName()
this.parent.rightChild.key.getClass().getName() == this.rightChild.leftChild.key.getClass().getName()
this.parent.rightChild.key.getClass().getName() == this.rightChild.rightChild.key.getClass().getName()
this.parent.rightChild.element.getClass().getName() == this.leftChild.element.getClass().getName()
this.parent.rightChild.element.getClass().getName() == this.leftChild.leftChild.element.getClass().getName()
this.parent.rightChild.element.getClass().getName() == this.leftChild.rightChild.element.getClass().getName()
this.parent.rightChild.element.getClass().getName() == this.rightChild.element.getClass().getName()
this.parent.rightChild.element.getClass().getName() == this.rightChild.leftChild.element.getClass().getName()
this.parent.rightChild.element.getClass().getName() == this.rightChild.rightChild.element.getClass().getName()
this.parent.rightChild.parent == this.leftChild.parent.parent
this.parent.rightChild.parent == this.rightChild.parent.parent
this.leftChild == this.leftChild.parent.leftChild
this.leftChild == this.leftChild.leftChild.parent
this.leftChild == this.leftChild.rightChild.parent
this.leftChild == this.rightChild.parent.leftChild
this.leftChild.key.getClass().getName() == this.leftChild.parent.key.getClass().getName()
this.leftChild.key.getClass().getName() == this.leftChild.leftChild.key.getClass().getName()
this.leftChild.key.getClass().getName() == this.leftChild.rightChild.key.getClass().getName()
this.leftChild.key.getClass().getName() == this.rightChild.key.getClass().getName()
this.leftChild.key.getClass().getName() == this.rightChild.leftChild.key.getClass().getName()
this.leftChild.key.getClass().getName() == this.rightChild.rightChild.key.getClass().getName()
this.leftChild.element.getClass().getName() == this.leftChild.parent.element.getClass().getName()
this.leftChild.element.getClass().getName() == this.leftChild.leftChild.element.getClass().getName()
this.leftChild.element.getClass().getName() == this.leftChild.rightChild.element.getClass().getName()
this.leftChild.element.getClass().getName() == this.rightChild.element.getClass().getName()
this.leftChild.element.getClass().getName() == this.rightChild.leftChild.element.getClass().getName()
this.leftChild.element.getClass().getName() == this.rightChild.rightChild.element.getClass().getName()
this.leftChild.parent == this.rightChild.parent
this.leftChild.parent.key == this.rightChild.parent.key
this.leftChild.parent.element == this.rightChild.parent.element
this.leftChild.parent.parent == this.rightChild.parent.parent
this.leftChild.parent.leftChild == this.leftChild.leftChild.parent
this.leftChild.parent.leftChild == this.leftChild.rightChild.parent
this.leftChild.parent.leftChild == this.rightChild.parent.leftChild
this.leftChild.parent.rightChild == this.rightChild
this.leftChild.parent.rightChild == this.rightChild.parent.rightChild
this.leftChild.parent.rightChild == this.rightChild.leftChild.parent
this.leftChild.parent.rightChild == this.rightChild.rightChild.parent
this.leftChild.leftChild.key.getClass().getName() == this.leftChild.rightChild.key.getClass().getName()
this.leftChild.leftChild.key.getClass().getName() == this.rightChild.key.getClass().getName()
this.leftChild.leftChild.key.getClass().getName() == this.rightChild.leftChild.key.getClass().getName()
this.leftChild.leftChild.key.getClass().getName() == this.rightChild.rightChild.key.getClass().getName()
this.leftChild.leftChild.element.getClass().getName() == this.leftChild.rightChild.element.getClass().getName()
this.leftChild.leftChild.element.getClass().getName() == this.rightChild.element.getClass().getName()
this.leftChild.leftChild.element.getClass().getName() == this.rightChild.leftChild.element.getClass().getName()
this.leftChild.leftChild.element.getClass().getName() == this.rightChild.rightChild.element.getClass().getName()
this.leftChild.leftChild.parent == this.leftChild.rightChild.parent
this.leftChild.leftChild.parent == this.rightChild.parent.leftChild
this.leftChild.rightChild.key.getClass().getName() == this.rightChild.key.getClass().getName()
this.leftChild.rightChild.key.getClass().getName() == this.rightChild.leftChild.key.getClass().getName()
this.leftChild.rightChild.key.getClass().getName() == this.rightChild.rightChild.key.getClass().getName()
this.leftChild.rightChild.element.getClass().getName() == this.rightChild.element.getClass().getName()
this.leftChild.rightChild.element.getClass().getName() == this.rightChild.leftChild.element.getClass().getName()
this.leftChild.rightChild.element.getClass().getName() == this.rightChild.rightChild.element.getClass().getName()
this.leftChild.rightChild.parent == this.rightChild.parent.leftChild
this.rightChild == this.rightChild.parent.rightChild
this.rightChild == this.rightChild.leftChild.parent
this.rightChild == this.rightChild.rightChild.parent
this.rightChild.key.getClass().getName() == this.rightChild.parent.key.getClass().getName()
this.rightChild.key.getClass().getName() == this.rightChild.leftChild.key.getClass().getName()
this.rightChild.key.getClass().getName() == this.rightChild.rightChild.key.getClass().getName()
this.rightChild.element.getClass().getName() == this.rightChild.parent.element.getClass().getName()
this.rightChild.element.getClass().getName() == this.rightChild.leftChild.element.getClass().getName()
this.rightChild.element.getClass().getName() == this.rightChild.rightChild.element.getClass().getName()
this.rightChild.parent.rightChild == this.rightChild.leftChild.parent
this.rightChild.parent.rightChild == this.rightChild.rightChild.parent
this.rightChild.leftChild.key.getClass().getName() == this.rightChild.rightChild.key.getClass().getName()
this.rightChild.leftChild.element.getClass().getName() == this.rightChild.rightChild.element.getClass().getName()
this.rightChild.leftChild.parent == this.rightChild.rightChild.parent
this.key != null
this.element != null
this.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
this.parent.key != null
this.parent.element != null
this.parent.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
this.parent.parent.key != null
this.parent.parent.element != null
this.parent.parent.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
this.parent.leftChild.key != null
this.parent.leftChild.element != null
this.parent.leftChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
this.parent.leftChild.parent != null
this.parent.rightChild.key != null
this.parent.rightChild.element != null
this.parent.rightChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
this.parent.rightChild.parent != null
this.leftChild.key != null
this.leftChild.element != null
this.leftChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
this.leftChild.parent != null
this.leftChild.parent.key != null
this.leftChild.parent.element != null
this.leftChild.parent.leftChild != null
this.leftChild.leftChild.key != null
this.leftChild.leftChild.key.getClass().getName() == java.lang.String.class
this.leftChild.leftChild.element != null
this.leftChild.leftChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
this.leftChild.leftChild.parent != null
this.leftChild.rightChild.key != null
this.leftChild.rightChild.element != null
this.leftChild.rightChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
this.leftChild.rightChild.parent != null
this.rightChild.key != null
this.rightChild.element != null
this.rightChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
this.rightChild.parent != null
this.rightChild.parent.key != null
this.rightChild.parent.element != null
this.rightChild.parent.rightChild != null
this.rightChild.leftChild.key != null
this.rightChild.leftChild.element != null
this.rightChild.leftChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
this.rightChild.leftChild.parent != null
this.rightChild.rightChild.key != null
this.rightChild.rightChild.element != null
this.rightChild.rightChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
this.rightChild.rightChild.parent != null
this.key.getClass().getName() != this.element.getClass().getName()
this.key.getClass().getName() != this.parent.element.getClass().getName()
this.key.getClass().getName() != this.parent.parent.element.getClass().getName()
this.key.getClass().getName() != this.parent.leftChild.element.getClass().getName()
this.key.getClass().getName() != this.parent.rightChild.element.getClass().getName()
this.key.getClass().getName() != this.leftChild.element.getClass().getName()
this.key.getClass().getName() != this.leftChild.leftChild.element.getClass().getName()
this.key.getClass().getName() != this.leftChild.rightChild.element.getClass().getName()
this.key.getClass().getName() != this.rightChild.element.getClass().getName()
this.key.getClass().getName() != this.rightChild.leftChild.element.getClass().getName()
this.key.getClass().getName() != this.rightChild.rightChild.element.getClass().getName()
this.element.getClass().getName() != this.parent.key.getClass().getName()
this.element.getClass().getName() != this.parent.parent.key.getClass().getName()
this.element.getClass().getName() != this.parent.leftChild.key.getClass().getName()
this.element.getClass().getName() != this.parent.rightChild.key.getClass().getName()
this.element.getClass().getName() != this.leftChild.key.getClass().getName()
this.element.getClass().getName() != this.leftChild.leftChild.key.getClass().getName()
this.element.getClass().getName() != this.leftChild.rightChild.key.getClass().getName()
this.element.getClass().getName() != this.rightChild.key.getClass().getName()
this.element.getClass().getName() != this.rightChild.leftChild.key.getClass().getName()
this.element.getClass().getName() != this.rightChild.rightChild.key.getClass().getName()
this.parent.key.getClass().getName() != this.parent.element.getClass().getName()
this.parent.key.getClass().getName() != this.parent.parent.element.getClass().getName()
this.parent.key.getClass().getName() != this.parent.leftChild.element.getClass().getName()
this.parent.key.getClass().getName() != this.parent.rightChild.element.getClass().getName()
this.parent.key.getClass().getName() != this.leftChild.element.getClass().getName()
this.parent.key.getClass().getName() != this.leftChild.leftChild.element.getClass().getName()
this.parent.key.getClass().getName() != this.leftChild.rightChild.element.getClass().getName()
this.parent.key.getClass().getName() != this.rightChild.element.getClass().getName()
this.parent.key.getClass().getName() != this.rightChild.leftChild.element.getClass().getName()
this.parent.key.getClass().getName() != this.rightChild.rightChild.element.getClass().getName()
this.parent.element.getClass().getName() != this.parent.parent.key.getClass().getName()
this.parent.element.getClass().getName() != this.parent.leftChild.key.getClass().getName()
this.parent.element.getClass().getName() != this.parent.rightChild.key.getClass().getName()
this.parent.element.getClass().getName() != this.leftChild.key.getClass().getName()
this.parent.element.getClass().getName() != this.leftChild.leftChild.key.getClass().getName()
this.parent.element.getClass().getName() != this.leftChild.rightChild.key.getClass().getName()
this.parent.element.getClass().getName() != this.rightChild.key.getClass().getName()
this.parent.element.getClass().getName() != this.rightChild.leftChild.key.getClass().getName()
this.parent.element.getClass().getName() != this.rightChild.rightChild.key.getClass().getName()
this.parent.parent.key.getClass().getName() != this.parent.parent.element.getClass().getName()
this.parent.parent.key.getClass().getName() != this.parent.leftChild.element.getClass().getName()
this.parent.parent.key.getClass().getName() != this.parent.rightChild.element.getClass().getName()
this.parent.parent.key.getClass().getName() != this.leftChild.element.getClass().getName()
this.parent.parent.key.getClass().getName() != this.leftChild.leftChild.element.getClass().getName()
this.parent.parent.key.getClass().getName() != this.leftChild.rightChild.element.getClass().getName()
this.parent.parent.key.getClass().getName() != this.rightChild.element.getClass().getName()
this.parent.parent.key.getClass().getName() != this.rightChild.leftChild.element.getClass().getName()
this.parent.parent.key.getClass().getName() != this.rightChild.rightChild.element.getClass().getName()
this.parent.parent.element.getClass().getName() != this.parent.leftChild.key.getClass().getName()
this.parent.parent.element.getClass().getName() != this.parent.rightChild.key.getClass().getName()
this.parent.parent.element.getClass().getName() != this.leftChild.key.getClass().getName()
this.parent.parent.element.getClass().getName() != this.leftChild.leftChild.key.getClass().getName()
this.parent.parent.element.getClass().getName() != this.leftChild.rightChild.key.getClass().getName()
this.parent.parent.element.getClass().getName() != this.rightChild.key.getClass().getName()
this.parent.parent.element.getClass().getName() != this.rightChild.leftChild.key.getClass().getName()
this.parent.parent.element.getClass().getName() != this.rightChild.rightChild.key.getClass().getName()
this.parent.leftChild.key.getClass().getName() != this.parent.leftChild.element.getClass().getName()
this.parent.leftChild.key.getClass().getName() != this.parent.rightChild.element.getClass().getName()
this.parent.leftChild.key.getClass().getName() != this.leftChild.element.getClass().getName()
this.parent.leftChild.key.getClass().getName() != this.leftChild.leftChild.element.getClass().getName()
this.parent.leftChild.key.getClass().getName() != this.leftChild.rightChild.element.getClass().getName()
this.parent.leftChild.key.getClass().getName() != this.rightChild.element.getClass().getName()
this.parent.leftChild.key.getClass().getName() != this.rightChild.leftChild.element.getClass().getName()
this.parent.leftChild.key.getClass().getName() != this.rightChild.rightChild.element.getClass().getName()
this.parent.leftChild.element.getClass().getName() != this.parent.rightChild.key.getClass().getName()
this.parent.leftChild.element.getClass().getName() != this.leftChild.key.getClass().getName()
this.parent.leftChild.element.getClass().getName() != this.leftChild.leftChild.key.getClass().getName()
this.parent.leftChild.element.getClass().getName() != this.leftChild.rightChild.key.getClass().getName()
this.parent.leftChild.element.getClass().getName() != this.rightChild.key.getClass().getName()
this.parent.leftChild.element.getClass().getName() != this.rightChild.leftChild.key.getClass().getName()
this.parent.leftChild.element.getClass().getName() != this.rightChild.rightChild.key.getClass().getName()
this.parent.rightChild.key.getClass().getName() != this.parent.rightChild.element.getClass().getName()
this.parent.rightChild.key.getClass().getName() != this.leftChild.element.getClass().getName()
this.parent.rightChild.key.getClass().getName() != this.leftChild.leftChild.element.getClass().getName()
this.parent.rightChild.key.getClass().getName() != this.leftChild.rightChild.element.getClass().getName()
this.parent.rightChild.key.getClass().getName() != this.rightChild.element.getClass().getName()
this.parent.rightChild.key.getClass().getName() != this.rightChild.leftChild.element.getClass().getName()
this.parent.rightChild.key.getClass().getName() != this.rightChild.rightChild.element.getClass().getName()
this.parent.rightChild.element.getClass().getName() != this.leftChild.key.getClass().getName()
this.parent.rightChild.element.getClass().getName() != this.leftChild.leftChild.key.getClass().getName()
this.parent.rightChild.element.getClass().getName() != this.leftChild.rightChild.key.getClass().getName()
this.parent.rightChild.element.getClass().getName() != this.rightChild.key.getClass().getName()
this.parent.rightChild.element.getClass().getName() != this.rightChild.leftChild.key.getClass().getName()
this.parent.rightChild.element.getClass().getName() != this.rightChild.rightChild.key.getClass().getName()
this.leftChild.key.getClass().getName() != this.leftChild.element.getClass().getName()
this.leftChild.key.getClass().getName() != this.leftChild.leftChild.element.getClass().getName()
this.leftChild.key.getClass().getName() != this.leftChild.rightChild.element.getClass().getName()
this.leftChild.key.getClass().getName() != this.rightChild.element.getClass().getName()
this.leftChild.key.getClass().getName() != this.rightChild.leftChild.element.getClass().getName()
this.leftChild.key.getClass().getName() != this.rightChild.rightChild.element.getClass().getName()
this.leftChild.element.getClass().getName() != this.leftChild.leftChild.key.getClass().getName()
this.leftChild.element.getClass().getName() != this.leftChild.rightChild.key.getClass().getName()
this.leftChild.element.getClass().getName() != this.rightChild.key.getClass().getName()
this.leftChild.element.getClass().getName() != this.rightChild.leftChild.key.getClass().getName()
this.leftChild.element.getClass().getName() != this.rightChild.rightChild.key.getClass().getName()
this.leftChild.leftChild.key.getClass().getName() != this.leftChild.leftChild.element.getClass().getName()
this.leftChild.leftChild.key.getClass().getName() != this.leftChild.rightChild.element.getClass().getName()
this.leftChild.leftChild.key.getClass().getName() != this.rightChild.element.getClass().getName()
this.leftChild.leftChild.key.getClass().getName() != this.rightChild.leftChild.element.getClass().getName()
this.leftChild.leftChild.key.getClass().getName() != this.rightChild.rightChild.element.getClass().getName()
this.leftChild.leftChild.element.getClass().getName() != this.leftChild.rightChild.key.getClass().getName()
this.leftChild.leftChild.element.getClass().getName() != this.rightChild.key.getClass().getName()
this.leftChild.leftChild.element.getClass().getName() != this.rightChild.leftChild.key.getClass().getName()
this.leftChild.leftChild.element.getClass().getName() != this.rightChild.rightChild.key.getClass().getName()
this.leftChild.rightChild.key.getClass().getName() != this.leftChild.rightChild.element.getClass().getName()
this.leftChild.rightChild.key.getClass().getName() != this.rightChild.element.getClass().getName()
this.leftChild.rightChild.key.getClass().getName() != this.rightChild.leftChild.element.getClass().getName()
this.leftChild.rightChild.key.getClass().getName() != this.rightChild.rightChild.element.getClass().getName()
this.leftChild.rightChild.element.getClass().getName() != this.rightChild.key.getClass().getName()
this.leftChild.rightChild.element.getClass().getName() != this.rightChild.leftChild.key.getClass().getName()
this.leftChild.rightChild.element.getClass().getName() != this.rightChild.rightChild.key.getClass().getName()
this.rightChild.key.getClass().getName() != this.rightChild.element.getClass().getName()
this.rightChild.key.getClass().getName() != this.rightChild.leftChild.element.getClass().getName()
this.rightChild.key.getClass().getName() != this.rightChild.rightChild.element.getClass().getName()
this.rightChild.element.getClass().getName() != this.rightChild.leftChild.key.getClass().getName()
this.rightChild.element.getClass().getName() != this.rightChild.rightChild.key.getClass().getName()
this.rightChild.leftChild.key.getClass().getName() != this.rightChild.leftChild.element.getClass().getName()
this.rightChild.leftChild.key.getClass().getName() != this.rightChild.rightChild.element.getClass().getName()
this.rightChild.leftChild.element.getClass().getName() != this.rightChild.rightChild.key.getClass().getName()
this.rightChild.rightChild.key.getClass().getName() != this.rightChild.rightChild.element.getClass().getName()
===========================================================================
es.uc3m.eda.tree.BSTNode.BSTNode(java.lang.Comparable, java.lang.Object):::ENTER
arg0 != null
arg1 != null
arg1.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.getClass().getName() != arg1.getClass().getName()
===========================================================================
es.uc3m.eda.tree.BSTNode.BSTNode(java.lang.Comparable, java.lang.Object):::EXIT
this.key == orig(arg0)
this.key.getClass().getName() == orig(arg0.getClass().getName())
this.element == orig(arg1)
this.element.getClass().getName() == orig(arg1.getClass().getName())
this.parent == null
this.leftChild == null
this.rightChild == null
===========================================================================
es.uc3m.eda.tree.BSTNode.getElement():::ENTER
===========================================================================
es.uc3m.eda.tree.BSTNode.getElement():::EXIT
this.key == orig(this.key)
this.key.getClass().getName() == orig(this.key.getClass().getName())
this.element == return
this.element.getClass().getName() == return.getClass().getName()
this.parent == orig(this.parent)
this.parent.key == orig(this.parent.key)
this.parent.key.getClass().getName() == orig(this.parent.key.getClass().getName())
this.parent.element == orig(this.parent.element)
this.parent.element.getClass().getName() == return.getClass().getName()
this.parent.element.getClass().getName() == orig(this.parent.element.getClass().getName())
this.parent.parent == orig(this.parent.parent)
this.parent.parent.key == orig(this.parent.parent.key)
this.parent.parent.key.getClass().getName() == orig(this.parent.parent.key.getClass().getName())
this.parent.parent.element == orig(this.parent.parent.element)
this.parent.parent.element.getClass().getName() == return.getClass().getName()
this.parent.parent.element.getClass().getName() == orig(this.parent.parent.element.getClass().getName())
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.leftChild == orig(this.parent.parent.leftChild)
this.parent.parent.rightChild == orig(this.parent.parent.rightChild)
this.parent.leftChild == orig(this.parent.leftChild)
this.parent.leftChild.key == orig(this.parent.leftChild.key)
this.parent.leftChild.key.getClass().getName() == orig(this.parent.leftChild.key.getClass().getName())
this.parent.leftChild.element == orig(this.parent.leftChild.element)
this.parent.leftChild.element.getClass().getName() == return.getClass().getName()
this.parent.leftChild.element.getClass().getName() == orig(this.parent.leftChild.element.getClass().getName())
this.parent.leftChild.parent == orig(this.parent.leftChild.parent)
this.parent.leftChild.leftChild == orig(this.parent.leftChild.leftChild)
this.parent.leftChild.rightChild == orig(this.parent.leftChild.rightChild)
this.parent.rightChild == orig(this.parent.rightChild)
this.parent.rightChild.key == orig(this.parent.rightChild.key)
this.parent.rightChild.key.getClass().getName() == orig(this.parent.rightChild.key.getClass().getName())
this.parent.rightChild.element == orig(this.parent.rightChild.element)
this.parent.rightChild.element.getClass().getName() == return.getClass().getName()
this.parent.rightChild.element.getClass().getName() == orig(this.parent.rightChild.element.getClass().getName())
this.parent.rightChild.parent == orig(this.parent.rightChild.parent)
this.parent.rightChild.leftChild == orig(this.parent.rightChild.leftChild)
this.parent.rightChild.rightChild == orig(this.parent.rightChild.rightChild)
this.leftChild == orig(this.leftChild)
this.leftChild.key == orig(this.leftChild.key)
this.leftChild.key.getClass().getName() == orig(this.leftChild.key.getClass().getName())
this.leftChild.key.getClass().getName() == orig(this.leftChild.parent.key.getClass().getName())
this.leftChild.element == orig(this.leftChild.element)
this.leftChild.element.getClass().getName() == return.getClass().getName()
this.leftChild.element.getClass().getName() == orig(this.leftChild.element.getClass().getName())
this.leftChild.element.getClass().getName() == orig(this.leftChild.parent.element.getClass().getName())
this.leftChild.parent == orig(this)
this.leftChild.parent == orig(this.leftChild.parent)
this.leftChild.parent.key == orig(this.leftChild.parent.key)
this.leftChild.parent.element == return
this.leftChild.parent.element == orig(this.leftChild.parent.element)
this.leftChild.parent.parent == orig(this.leftChild.parent.parent)
this.leftChild.parent.leftChild == orig(this.leftChild.parent.leftChild)
this.leftChild.parent.rightChild == orig(this.leftChild.parent.rightChild)
this.leftChild.leftChild == orig(this.leftChild.leftChild)
this.leftChild.leftChild.key == orig(this.leftChild.leftChild.key)
this.leftChild.leftChild.key.getClass().getName() == orig(this.leftChild.leftChild.key.getClass().getName())
this.leftChild.leftChild.element == orig(this.leftChild.leftChild.element)
this.leftChild.leftChild.element.getClass().getName() == return.getClass().getName()
this.leftChild.leftChild.element.getClass().getName() == orig(this.leftChild.leftChild.element.getClass().getName())
this.leftChild.leftChild.parent == orig(this.leftChild.leftChild.parent)
this.leftChild.leftChild.leftChild == orig(this.leftChild.leftChild.leftChild)
this.leftChild.leftChild.rightChild == orig(this.leftChild.leftChild.rightChild)
this.leftChild.rightChild == orig(this.leftChild.rightChild)
this.leftChild.rightChild.key == orig(this.leftChild.rightChild.key)
this.leftChild.rightChild.key.getClass().getName() == orig(this.leftChild.rightChild.key.getClass().getName())
this.leftChild.rightChild.element == orig(this.leftChild.rightChild.element)
this.leftChild.rightChild.element.getClass().getName() == return.getClass().getName()
this.leftChild.rightChild.element.getClass().getName() == orig(this.leftChild.rightChild.element.getClass().getName())
this.leftChild.rightChild.parent == orig(this.leftChild.rightChild.parent)
this.leftChild.rightChild.leftChild == orig(this.leftChild.rightChild.leftChild)
this.leftChild.rightChild.rightChild == orig(this.leftChild.rightChild.rightChild)
this.rightChild == orig(this.rightChild)
this.rightChild.key == orig(this.rightChild.key)
this.rightChild.key.getClass().getName() == orig(this.rightChild.key.getClass().getName())
this.rightChild.key.getClass().getName() == orig(this.rightChild.parent.key.getClass().getName())
this.rightChild.element == orig(this.rightChild.element)
this.rightChild.element.getClass().getName() == return.getClass().getName()
this.rightChild.element.getClass().getName() == orig(this.rightChild.element.getClass().getName())
this.rightChild.element.getClass().getName() == orig(this.rightChild.parent.element.getClass().getName())
this.rightChild.parent == orig(this)
this.rightChild.parent == orig(this.rightChild.parent)
this.rightChild.parent.key == orig(this.rightChild.parent.key)
this.rightChild.parent.element == return
this.rightChild.parent.element == orig(this.rightChild.parent.element)
this.rightChild.parent.parent == orig(this.rightChild.parent.parent)
this.rightChild.parent.leftChild == orig(this.rightChild.parent.leftChild)
this.rightChild.parent.rightChild == orig(this.rightChild.parent.rightChild)
this.rightChild.leftChild == orig(this.rightChild.leftChild)
this.rightChild.leftChild.key == orig(this.rightChild.leftChild.key)
this.rightChild.leftChild.key.getClass().getName() == orig(this.rightChild.leftChild.key.getClass().getName())
this.rightChild.leftChild.element == orig(this.rightChild.leftChild.element)
this.rightChild.leftChild.element.getClass().getName() == return.getClass().getName()
this.rightChild.leftChild.element.getClass().getName() == orig(this.rightChild.leftChild.element.getClass().getName())
this.rightChild.leftChild.parent == orig(this.rightChild.leftChild.parent)
this.rightChild.leftChild.leftChild == orig(this.rightChild.leftChild.leftChild)
this.rightChild.leftChild.rightChild == orig(this.rightChild.leftChild.rightChild)
this.rightChild.rightChild == orig(this.rightChild.rightChild)
this.rightChild.rightChild.key == orig(this.rightChild.rightChild.key)
this.rightChild.rightChild.key.getClass().getName() == orig(this.rightChild.rightChild.key.getClass().getName())
this.rightChild.rightChild.element == orig(this.rightChild.rightChild.element)
this.rightChild.rightChild.element.getClass().getName() == return.getClass().getName()
this.rightChild.rightChild.element.getClass().getName() == orig(this.rightChild.rightChild.element.getClass().getName())
this.rightChild.rightChild.parent == orig(this.rightChild.rightChild.parent)
this.rightChild.rightChild.leftChild == orig(this.rightChild.rightChild.leftChild)
this.rightChild.rightChild.rightChild == orig(this.rightChild.rightChild.rightChild)
return == orig(this.element)
return.getClass().getName() == orig(this.element.getClass().getName())
return != null
return.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
this.key.getClass().getName() != return.getClass().getName()
this.parent.key.getClass().getName() != return.getClass().getName()
this.parent.parent.key.getClass().getName() != return.getClass().getName()
this.parent.leftChild.key.getClass().getName() != return.getClass().getName()
this.parent.rightChild.key.getClass().getName() != return.getClass().getName()
this.leftChild.key.getClass().getName() != return.getClass().getName()
this.leftChild.leftChild.key.getClass().getName() != return.getClass().getName()
this.leftChild.rightChild.key.getClass().getName() != return.getClass().getName()
this.rightChild.key.getClass().getName() != return.getClass().getName()
this.rightChild.rightChild.key.getClass().getName() != return.getClass().getName()
===========================================================================
es.uc3m.eda.tree.BSTNode.getKey():::ENTER
===========================================================================
es.uc3m.eda.tree.BSTNode.getKey():::EXIT
this.key == return
this.key.getClass().getName() == return.getClass().getName()
this.element == orig(this.element)
this.element.getClass().getName() == orig(this.element.getClass().getName())
this.parent == orig(this.parent)
this.parent.key == orig(this.parent.key)
this.parent.key.getClass().getName() == return.getClass().getName()
this.parent.key.getClass().getName() == orig(this.parent.key.getClass().getName())
this.parent.element == orig(this.parent.element)
this.parent.element.getClass().getName() == orig(this.parent.element.getClass().getName())
this.parent.parent == orig(this.parent.parent)
this.parent.parent.key == orig(this.parent.parent.key)
this.parent.parent.key.getClass().getName() == return.getClass().getName()
this.parent.parent.key.getClass().getName() == orig(this.parent.parent.key.getClass().getName())
this.parent.parent.element == orig(this.parent.parent.element)
this.parent.parent.element.getClass().getName() == orig(this.parent.parent.element.getClass().getName())
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.leftChild == orig(this.parent.parent.leftChild)
this.parent.parent.rightChild == orig(this.parent.parent.rightChild)
this.parent.leftChild == orig(this.parent.leftChild)
this.parent.leftChild.key == orig(this.parent.leftChild.key)
this.parent.leftChild.key.getClass().getName() == return.getClass().getName()
this.parent.leftChild.key.getClass().getName() == orig(this.parent.leftChild.key.getClass().getName())
this.parent.leftChild.element == orig(this.parent.leftChild.element)
this.parent.leftChild.element.getClass().getName() == orig(this.parent.leftChild.element.getClass().getName())
this.parent.leftChild.parent == orig(this.parent.leftChild.parent)
this.parent.leftChild.leftChild == orig(this.parent.leftChild.leftChild)
this.parent.leftChild.rightChild == orig(this.parent.leftChild.rightChild)
this.parent.rightChild == orig(this.parent.rightChild)
this.parent.rightChild.key == orig(this.parent.rightChild.key)
this.parent.rightChild.key.getClass().getName() == return.getClass().getName()
this.parent.rightChild.key.getClass().getName() == orig(this.parent.rightChild.key.getClass().getName())
this.parent.rightChild.element == orig(this.parent.rightChild.element)
this.parent.rightChild.element.getClass().getName() == orig(this.parent.rightChild.element.getClass().getName())
this.parent.rightChild.parent == orig(this.parent.rightChild.parent)
this.parent.rightChild.leftChild == orig(this.parent.rightChild.leftChild)
this.parent.rightChild.rightChild == orig(this.parent.rightChild.rightChild)
this.leftChild == orig(this.leftChild)
this.leftChild.key == orig(this.leftChild.key)
this.leftChild.key.getClass().getName() == return.getClass().getName()
this.leftChild.key.getClass().getName() == orig(this.leftChild.key.getClass().getName())
this.leftChild.key.getClass().getName() == orig(this.leftChild.parent.key.getClass().getName())
this.leftChild.element == orig(this.leftChild.element)
this.leftChild.element.getClass().getName() == orig(this.leftChild.element.getClass().getName())
this.leftChild.element.getClass().getName() == orig(this.leftChild.parent.element.getClass().getName())
this.leftChild.parent == orig(this)
this.leftChild.parent == orig(this.leftChild.parent)
this.leftChild.parent.key == return
this.leftChild.parent.key == orig(this.leftChild.parent.key)
this.leftChild.parent.element == orig(this.leftChild.parent.element)
this.leftChild.parent.parent == orig(this.leftChild.parent.parent)
this.leftChild.parent.leftChild == orig(this.leftChild.parent.leftChild)
this.leftChild.parent.rightChild == orig(this.leftChild.parent.rightChild)
this.leftChild.leftChild == orig(this.leftChild.leftChild)
this.leftChild.leftChild.key == orig(this.leftChild.leftChild.key)
this.leftChild.leftChild.key.getClass().getName() == return.getClass().getName()
this.leftChild.leftChild.key.getClass().getName() == orig(this.leftChild.leftChild.key.getClass().getName())
this.leftChild.leftChild.element == orig(this.leftChild.leftChild.element)
this.leftChild.leftChild.element.getClass().getName() == orig(this.leftChild.leftChild.element.getClass().getName())
this.leftChild.leftChild.parent == orig(this.leftChild.leftChild.parent)
this.leftChild.leftChild.leftChild == orig(this.leftChild.leftChild.leftChild)
this.leftChild.leftChild.rightChild == orig(this.leftChild.leftChild.rightChild)
this.leftChild.rightChild == orig(this.leftChild.rightChild)
this.leftChild.rightChild.key == orig(this.leftChild.rightChild.key)
this.leftChild.rightChild.key.getClass().getName() == return.getClass().getName()
this.leftChild.rightChild.key.getClass().getName() == orig(this.leftChild.rightChild.key.getClass().getName())
this.leftChild.rightChild.element == orig(this.leftChild.rightChild.element)
this.leftChild.rightChild.element.getClass().getName() == orig(this.leftChild.rightChild.element.getClass().getName())
this.leftChild.rightChild.parent == orig(this.leftChild.rightChild.parent)
this.leftChild.rightChild.leftChild == orig(this.leftChild.rightChild.leftChild)
this.leftChild.rightChild.rightChild == orig(this.leftChild.rightChild.rightChild)
this.rightChild == orig(this.rightChild)
this.rightChild.key == orig(this.rightChild.key)
this.rightChild.key.getClass().getName() == return.getClass().getName()
this.rightChild.key.getClass().getName() == orig(this.rightChild.key.getClass().getName())
this.rightChild.key.getClass().getName() == orig(this.rightChild.parent.key.getClass().getName())
this.rightChild.element == orig(this.rightChild.element)
this.rightChild.element.getClass().getName() == orig(this.rightChild.element.getClass().getName())
this.rightChild.element.getClass().getName() == orig(this.rightChild.parent.element.getClass().getName())
this.rightChild.parent == orig(this)
this.rightChild.parent == orig(this.rightChild.parent)
this.rightChild.parent.key == return
this.rightChild.parent.key == orig(this.rightChild.parent.key)
this.rightChild.parent.element == orig(this.rightChild.parent.element)
this.rightChild.parent.parent == orig(this.rightChild.parent.parent)
this.rightChild.parent.leftChild == orig(this.rightChild.parent.leftChild)
this.rightChild.parent.rightChild == orig(this.rightChild.parent.rightChild)
this.rightChild.leftChild == orig(this.rightChild.leftChild)
this.rightChild.leftChild.key == orig(this.rightChild.leftChild.key)
this.rightChild.leftChild.key.getClass().getName() == return.getClass().getName()
this.rightChild.leftChild.key.getClass().getName() == orig(this.rightChild.leftChild.key.getClass().getName())
this.rightChild.leftChild.element == orig(this.rightChild.leftChild.element)
this.rightChild.leftChild.element.getClass().getName() == orig(this.rightChild.leftChild.element.getClass().getName())
this.rightChild.leftChild.parent == orig(this.rightChild.leftChild.parent)
this.rightChild.leftChild.leftChild == orig(this.rightChild.leftChild.leftChild)
this.rightChild.leftChild.rightChild == orig(this.rightChild.leftChild.rightChild)
this.rightChild.rightChild == orig(this.rightChild.rightChild)
this.rightChild.rightChild.key == orig(this.rightChild.rightChild.key)
this.rightChild.rightChild.key.getClass().getName() == return.getClass().getName()
this.rightChild.rightChild.key.getClass().getName() == orig(this.rightChild.rightChild.key.getClass().getName())
this.rightChild.rightChild.element == orig(this.rightChild.rightChild.element)
this.rightChild.rightChild.element.getClass().getName() == orig(this.rightChild.rightChild.element.getClass().getName())
this.rightChild.rightChild.parent == orig(this.rightChild.rightChild.parent)
this.rightChild.rightChild.leftChild == orig(this.rightChild.rightChild.leftChild)
this.rightChild.rightChild.rightChild == orig(this.rightChild.rightChild.rightChild)
return == orig(this.key)
return.getClass().getName() == orig(this.key.getClass().getName())
return != null
this.element.getClass().getName() != return.getClass().getName()
this.parent.element.getClass().getName() != return.getClass().getName()
this.parent.parent.element.getClass().getName() != return.getClass().getName()
this.parent.leftChild.element.getClass().getName() != return.getClass().getName()
this.parent.rightChild.element.getClass().getName() != return.getClass().getName()
this.leftChild.element.getClass().getName() != return.getClass().getName()
this.leftChild.leftChild.element.getClass().getName() != return.getClass().getName()
this.leftChild.rightChild.element.getClass().getName() != return.getClass().getName()
this.rightChild.element.getClass().getName() != return.getClass().getName()
this.rightChild.leftChild.element.getClass().getName() != return.getClass().getName()
this.rightChild.rightChild.element.getClass().getName() != return.getClass().getName()
===========================================================================
es.uc3m.eda.tree.BSTNode.getLeftChild():::ENTER
===========================================================================
es.uc3m.eda.tree.BSTNode.getLeftChild():::EXIT
this.key == return.parent.key
this.key == orig(this.key)
this.key.getClass().getName() == return.key.getClass().getName()
this.key.getClass().getName() == return.leftChild.key.getClass().getName()
this.key.getClass().getName() == return.rightChild.key.getClass().getName()
this.key.getClass().getName() == orig(this.key.getClass().getName())
this.element == return.parent.element
this.element == orig(this.element)
this.element.getClass().getName() == return.element.getClass().getName()
this.element.getClass().getName() == return.leftChild.element.getClass().getName()
this.element.getClass().getName() == return.rightChild.element.getClass().getName()
this.element.getClass().getName() == orig(this.element.getClass().getName())
this.parent == return.parent.parent
this.parent == orig(this.parent)
this.parent.key == orig(this.parent.key)
this.parent.key.getClass().getName() == return.key.getClass().getName()
this.parent.key.getClass().getName() == return.leftChild.key.getClass().getName()
this.parent.key.getClass().getName() == return.rightChild.key.getClass().getName()
this.parent.key.getClass().getName() == orig(this.parent.key.getClass().getName())
this.parent.element == orig(this.parent.element)
this.parent.element.getClass().getName() == return.element.getClass().getName()
this.parent.element.getClass().getName() == return.leftChild.element.getClass().getName()
this.parent.element.getClass().getName() == return.rightChild.element.getClass().getName()
this.parent.element.getClass().getName() == orig(this.parent.element.getClass().getName())
this.parent.parent == orig(this.parent.parent)
this.parent.parent.key == orig(this.parent.parent.key)
this.parent.parent.key.getClass().getName() == return.key.getClass().getName()
this.parent.parent.key.getClass().getName() == return.leftChild.key.getClass().getName()
this.parent.parent.key.getClass().getName() == return.rightChild.key.getClass().getName()
this.parent.parent.key.getClass().getName() == orig(this.parent.parent.key.getClass().getName())
this.parent.parent.element == orig(this.parent.parent.element)
this.parent.parent.element.getClass().getName() == return.element.getClass().getName()
this.parent.parent.element.getClass().getName() == return.leftChild.element.getClass().getName()
this.parent.parent.element.getClass().getName() == return.rightChild.element.getClass().getName()
this.parent.parent.element.getClass().getName() == orig(this.parent.parent.element.getClass().getName())
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.leftChild == orig(this.parent.parent.leftChild)
this.parent.parent.rightChild == orig(this.parent.parent.rightChild)
this.parent.leftChild == orig(this.parent.leftChild)
this.parent.leftChild.key == orig(this.parent.leftChild.key)
this.parent.leftChild.key.getClass().getName() == return.key.getClass().getName()
this.parent.leftChild.key.getClass().getName() == return.leftChild.key.getClass().getName()
this.parent.leftChild.key.getClass().getName() == return.rightChild.key.getClass().getName()
this.parent.leftChild.key.getClass().getName() == orig(this.parent.leftChild.key.getClass().getName())
this.parent.leftChild.element == orig(this.parent.leftChild.element)
this.parent.leftChild.element.getClass().getName() == return.element.getClass().getName()
this.parent.leftChild.element.getClass().getName() == return.leftChild.element.getClass().getName()
this.parent.leftChild.element.getClass().getName() == return.rightChild.element.getClass().getName()
this.parent.leftChild.element.getClass().getName() == orig(this.parent.leftChild.element.getClass().getName())
this.parent.leftChild.parent == return.parent.parent
this.parent.leftChild.parent == orig(this.parent.leftChild.parent)
this.parent.leftChild.leftChild == orig(this.parent.leftChild.leftChild)
this.parent.leftChild.rightChild == orig(this.parent.leftChild.rightChild)
this.parent.rightChild == orig(this.parent.rightChild)
this.parent.rightChild.key == orig(this.parent.rightChild.key)
this.parent.rightChild.key.getClass().getName() == return.key.getClass().getName()
this.parent.rightChild.key.getClass().getName() == return.leftChild.key.getClass().getName()
this.parent.rightChild.key.getClass().getName() == return.rightChild.key.getClass().getName()
this.parent.rightChild.key.getClass().getName() == orig(this.parent.rightChild.key.getClass().getName())
this.parent.rightChild.element == orig(this.parent.rightChild.element)
this.parent.rightChild.element.getClass().getName() == return.element.getClass().getName()
this.parent.rightChild.element.getClass().getName() == return.leftChild.element.getClass().getName()
this.parent.rightChild.element.getClass().getName() == return.rightChild.element.getClass().getName()
this.parent.rightChild.element.getClass().getName() == orig(this.parent.rightChild.element.getClass().getName())
this.parent.rightChild.parent == return.parent.parent
this.parent.rightChild.parent == orig(this.parent.rightChild.parent)
this.parent.rightChild.leftChild == orig(this.parent.rightChild.leftChild)
this.parent.rightChild.rightChild == orig(this.parent.rightChild.rightChild)
this.leftChild == return
this.leftChild.key == return.key
this.leftChild.key.getClass().getName() == return.key.getClass().getName()
this.leftChild.element == return.element
this.leftChild.element.getClass().getName() == return.element.getClass().getName()
this.leftChild.parent == return.parent
this.leftChild.parent.key == return.parent.key
this.leftChild.parent.key.getClass().getName() == return.key.getClass().getName()
this.leftChild.parent.element == return.parent.element
this.leftChild.parent.element.getClass().getName() == return.element.getClass().getName()
this.leftChild.parent.parent == return.parent.parent
this.leftChild.parent.leftChild == return.parent.leftChild
this.leftChild.parent.rightChild == return.parent.rightChild
this.leftChild.leftChild == return.leftChild
this.leftChild.leftChild.key == return.leftChild.key
this.leftChild.leftChild.key.getClass().getName() == return.leftChild.key.getClass().getName()
this.leftChild.leftChild.element == return.leftChild.element
this.leftChild.leftChild.element.getClass().getName() == return.leftChild.element.getClass().getName()
this.leftChild.leftChild.parent == return.leftChild.parent
this.leftChild.leftChild.leftChild == return.leftChild.leftChild
this.leftChild.leftChild.rightChild == return.leftChild.rightChild
this.leftChild.rightChild == return.rightChild
this.leftChild.rightChild.key == return.rightChild.key
this.leftChild.rightChild.key.getClass().getName() == return.rightChild.key.getClass().getName()
this.leftChild.rightChild.element == return.rightChild.element
this.leftChild.rightChild.element.getClass().getName() == return.rightChild.element.getClass().getName()
this.leftChild.rightChild.parent == return.rightChild.parent
this.leftChild.rightChild.leftChild == return.rightChild.leftChild
this.leftChild.rightChild.rightChild == return.rightChild.rightChild
this.rightChild == return.parent.rightChild
this.rightChild == orig(this.rightChild)
this.rightChild.key == orig(this.rightChild.key)
this.rightChild.key.getClass().getName() == return.key.getClass().getName()
this.rightChild.key.getClass().getName() == return.leftChild.key.getClass().getName()
this.rightChild.key.getClass().getName() == return.rightChild.key.getClass().getName()
this.rightChild.key.getClass().getName() == orig(this.rightChild.key.getClass().getName())
this.rightChild.key.getClass().getName() == orig(this.rightChild.parent.key.getClass().getName())
this.rightChild.element == orig(this.rightChild.element)
this.rightChild.element.getClass().getName() == return.element.getClass().getName()
this.rightChild.element.getClass().getName() == return.leftChild.element.getClass().getName()
this.rightChild.element.getClass().getName() == return.rightChild.element.getClass().getName()
this.rightChild.element.getClass().getName() == orig(this.rightChild.element.getClass().getName())
this.rightChild.element.getClass().getName() == orig(this.rightChild.parent.element.getClass().getName())
this.rightChild.parent == return.parent
this.rightChild.parent == orig(this)
this.rightChild.parent == orig(this.rightChild.parent)
this.rightChild.parent.key == return.parent.key
this.rightChild.parent.key == orig(this.rightChild.parent.key)
this.rightChild.parent.element == return.parent.element
this.rightChild.parent.element == orig(this.rightChild.parent.element)
this.rightChild.parent.parent == return.parent.parent
this.rightChild.parent.parent == orig(this.rightChild.parent.parent)
this.rightChild.parent.leftChild == return
this.rightChild.parent.leftChild == return.parent.leftChild
this.rightChild.parent.leftChild == return.leftChild.parent
this.rightChild.parent.leftChild == return.rightChild.parent
this.rightChild.parent.leftChild == orig(this.rightChild.parent.leftChild)
this.rightChild.parent.rightChild == return.parent.rightChild
this.rightChild.parent.rightChild == orig(this.rightChild.parent.rightChild)
this.rightChild.leftChild == orig(this.rightChild.leftChild)
this.rightChild.leftChild.key == orig(this.rightChild.leftChild.key)
this.rightChild.leftChild.key.getClass().getName() == return.key.getClass().getName()
this.rightChild.leftChild.key.getClass().getName() == return.leftChild.key.getClass().getName()
this.rightChild.leftChild.key.getClass().getName() == return.rightChild.key.getClass().getName()
this.rightChild.leftChild.key.getClass().getName() == orig(this.rightChild.leftChild.key.getClass().getName())
this.rightChild.leftChild.element == orig(this.rightChild.leftChild.element)
this.rightChild.leftChild.element.getClass().getName() == return.element.getClass().getName()
this.rightChild.leftChild.element.getClass().getName() == return.leftChild.element.getClass().getName()
this.rightChild.leftChild.element.getClass().getName() == return.rightChild.element.getClass().getName()
this.rightChild.leftChild.element.getClass().getName() == orig(this.rightChild.leftChild.element.getClass().getName())
this.rightChild.leftChild.parent == return.parent.rightChild
this.rightChild.leftChild.parent == orig(this.rightChild.leftChild.parent)
this.rightChild.leftChild.leftChild == orig(this.rightChild.leftChild.leftChild)
this.rightChild.leftChild.rightChild == orig(this.rightChild.leftChild.rightChild)
this.rightChild.rightChild == orig(this.rightChild.rightChild)
this.rightChild.rightChild.key == orig(this.rightChild.rightChild.key)
this.rightChild.rightChild.key.getClass().getName() == return.key.getClass().getName()
this.rightChild.rightChild.key.getClass().getName() == return.leftChild.key.getClass().getName()
this.rightChild.rightChild.key.getClass().getName() == return.rightChild.key.getClass().getName()
this.rightChild.rightChild.key.getClass().getName() == orig(this.rightChild.rightChild.key.getClass().getName())
this.rightChild.rightChild.element == orig(this.rightChild.rightChild.element)
this.rightChild.rightChild.element.getClass().getName() == return.element.getClass().getName()
this.rightChild.rightChild.element.getClass().getName() == return.leftChild.element.getClass().getName()
this.rightChild.rightChild.element.getClass().getName() == return.rightChild.element.getClass().getName()
this.rightChild.rightChild.element.getClass().getName() == orig(this.rightChild.rightChild.element.getClass().getName())
this.rightChild.rightChild.parent == return.parent.rightChild
this.rightChild.rightChild.parent == orig(this.rightChild.rightChild.parent)
this.rightChild.rightChild.leftChild == orig(this.rightChild.rightChild.leftChild)
this.rightChild.rightChild.rightChild == orig(this.rightChild.rightChild.rightChild)
return == return.parent.leftChild
return == return.leftChild.parent
return == return.rightChild.parent
return == orig(this.leftChild)
return.key == orig(this.leftChild.key)
return.key.getClass().getName() == return.parent.key.getClass().getName()
return.key.getClass().getName() == return.leftChild.key.getClass().getName()
return.key.getClass().getName() == return.rightChild.key.getClass().getName()
return.key.getClass().getName() == orig(this.leftChild.key.getClass().getName())
return.key.getClass().getName() == orig(this.leftChild.parent.key.getClass().getName())
return.element == orig(this.leftChild.element)
return.element.getClass().getName() == return.parent.element.getClass().getName()
return.element.getClass().getName() == return.leftChild.element.getClass().getName()
return.element.getClass().getName() == return.rightChild.element.getClass().getName()
return.element.getClass().getName() == orig(this.leftChild.element.getClass().getName())
return.element.getClass().getName() == orig(this.leftChild.parent.element.getClass().getName())
return.parent == orig(this)
return.parent == orig(this.leftChild.parent)
return.parent.key == orig(this.leftChild.parent.key)
return.parent.element == orig(this.leftChild.parent.element)
return.parent.parent == orig(this.leftChild.parent.parent)
return.parent.leftChild == return.leftChild.parent
return.parent.leftChild == return.rightChild.parent
return.parent.leftChild == orig(this.leftChild.parent.leftChild)
return.parent.rightChild == orig(this.leftChild.parent.rightChild)
return.leftChild == orig(this.leftChild.leftChild)
return.leftChild.key == orig(this.leftChild.leftChild.key)
return.leftChild.key.getClass().getName() == return.rightChild.key.getClass().getName()
return.leftChild.key.getClass().getName() == orig(this.leftChild.leftChild.key.getClass().getName())
return.leftChild.element == orig(this.leftChild.leftChild.element)
return.leftChild.element.getClass().getName() == return.rightChild.element.getClass().getName()
return.leftChild.element.getClass().getName() == orig(this.leftChild.leftChild.element.getClass().getName())
return.leftChild.parent == return.rightChild.parent
return.leftChild.parent == orig(this.leftChild.leftChild.parent)
return.leftChild.leftChild == orig(this.leftChild.leftChild.leftChild)
return.leftChild.rightChild == orig(this.leftChild.leftChild.rightChild)
return.rightChild == orig(this.leftChild.rightChild)
return.rightChild.key == orig(this.leftChild.rightChild.key)
return.rightChild.key.getClass().getName() == orig(this.leftChild.rightChild.key.getClass().getName())
return.rightChild.element == orig(this.leftChild.rightChild.element)
return.rightChild.element.getClass().getName() == orig(this.leftChild.rightChild.element.getClass().getName())
return.rightChild.parent == orig(this.leftChild.rightChild.parent)
return.rightChild.leftChild == orig(this.leftChild.rightChild.leftChild)
return.rightChild.rightChild == orig(this.leftChild.rightChild.rightChild)
return.key != null
return.element != null
return.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
return.parent != null
return.parent.key != null
return.parent.element != null
return.parent.leftChild != null
return.leftChild.key != null
return.leftChild.key.getClass().getName() == java.lang.String.class
return.leftChild.element != null
return.leftChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
return.leftChild.parent != null
return.rightChild.key != null
return.rightChild.element != null
return.rightChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
return.rightChild.parent != null
this.key.getClass().getName() != return.element.getClass().getName()
this.key.getClass().getName() != return.leftChild.element.getClass().getName()
this.key.getClass().getName() != return.rightChild.element.getClass().getName()
this.element.getClass().getName() != return.key.getClass().getName()
this.element.getClass().getName() != return.leftChild.key.getClass().getName()
this.element.getClass().getName() != return.rightChild.key.getClass().getName()
this.parent.key.getClass().getName() != return.element.getClass().getName()
this.parent.key.getClass().getName() != return.leftChild.element.getClass().getName()
this.parent.key.getClass().getName() != return.rightChild.element.getClass().getName()
this.parent.element.getClass().getName() != return.key.getClass().getName()
this.parent.element.getClass().getName() != return.leftChild.key.getClass().getName()
this.parent.element.getClass().getName() != return.rightChild.key.getClass().getName()
this.parent.parent.key.getClass().getName() != return.element.getClass().getName()
this.parent.parent.key.getClass().getName() != return.leftChild.element.getClass().getName()
this.parent.parent.key.getClass().getName() != return.rightChild.element.getClass().getName()
this.parent.parent.element.getClass().getName() != return.key.getClass().getName()
this.parent.parent.element.getClass().getName() != return.leftChild.key.getClass().getName()
this.parent.parent.element.getClass().getName() != return.rightChild.key.getClass().getName()
this.parent.leftChild.key.getClass().getName() != return.element.getClass().getName()
this.parent.leftChild.key.getClass().getName() != return.leftChild.element.getClass().getName()
this.parent.leftChild.key.getClass().getName() != return.rightChild.element.getClass().getName()
this.parent.leftChild.element.getClass().getName() != return.key.getClass().getName()
this.parent.leftChild.element.getClass().getName() != return.leftChild.key.getClass().getName()
this.parent.leftChild.element.getClass().getName() != return.rightChild.key.getClass().getName()
this.parent.rightChild.key.getClass().getName() != return.element.getClass().getName()
this.parent.rightChild.key.getClass().getName() != return.leftChild.element.getClass().getName()
this.parent.rightChild.key.getClass().getName() != return.rightChild.element.getClass().getName()
this.parent.rightChild.element.getClass().getName() != return.key.getClass().getName()
this.parent.rightChild.element.getClass().getName() != return.leftChild.key.getClass().getName()
this.parent.rightChild.element.getClass().getName() != return.rightChild.key.getClass().getName()
this.rightChild.key.getClass().getName() != return.element.getClass().getName()
this.rightChild.key.getClass().getName() != return.leftChild.element.getClass().getName()
this.rightChild.key.getClass().getName() != return.rightChild.element.getClass().getName()
this.rightChild.element.getClass().getName() != return.key.getClass().getName()
this.rightChild.element.getClass().getName() != return.leftChild.key.getClass().getName()
this.rightChild.element.getClass().getName() != return.rightChild.key.getClass().getName()
this.rightChild.rightChild.key.getClass().getName() != return.element.getClass().getName()
this.rightChild.rightChild.key.getClass().getName() != return.leftChild.element.getClass().getName()
this.rightChild.rightChild.key.getClass().getName() != return.rightChild.element.getClass().getName()
this.rightChild.rightChild.element.getClass().getName() != return.key.getClass().getName()
this.rightChild.rightChild.element.getClass().getName() != return.leftChild.key.getClass().getName()
this.rightChild.rightChild.element.getClass().getName() != return.rightChild.key.getClass().getName()
return.key.getClass().getName() != return.element.getClass().getName()
return.key.getClass().getName() != return.leftChild.element.getClass().getName()
return.key.getClass().getName() != return.rightChild.element.getClass().getName()
return.element.getClass().getName() != return.leftChild.key.getClass().getName()
return.element.getClass().getName() != return.rightChild.key.getClass().getName()
return.leftChild.key.getClass().getName() != return.leftChild.element.getClass().getName()
return.leftChild.key.getClass().getName() != return.rightChild.element.getClass().getName()
return.leftChild.element.getClass().getName() != return.rightChild.key.getClass().getName()
return.rightChild.key.getClass().getName() != return.rightChild.element.getClass().getName()
===========================================================================
es.uc3m.eda.tree.BSTNode.getRightChild():::ENTER
===========================================================================
es.uc3m.eda.tree.BSTNode.getRightChild():::EXIT
this.key == return.parent.key
this.key == orig(this.key)
this.key.getClass().getName() == return.key.getClass().getName()
this.key.getClass().getName() == return.leftChild.key.getClass().getName()
this.key.getClass().getName() == return.rightChild.key.getClass().getName()
this.key.getClass().getName() == orig(this.key.getClass().getName())
this.element == return.parent.element
this.element == orig(this.element)
this.element.getClass().getName() == return.element.getClass().getName()
this.element.getClass().getName() == return.leftChild.element.getClass().getName()
this.element.getClass().getName() == return.rightChild.element.getClass().getName()
this.element.getClass().getName() == orig(this.element.getClass().getName())
this.parent == return.parent.parent
this.parent == orig(this.parent)
this.parent.key == orig(this.parent.key)
this.parent.key.getClass().getName() == return.key.getClass().getName()
this.parent.key.getClass().getName() == return.leftChild.key.getClass().getName()
this.parent.key.getClass().getName() == return.rightChild.key.getClass().getName()
this.parent.key.getClass().getName() == orig(this.parent.key.getClass().getName())
this.parent.element == orig(this.parent.element)
this.parent.element.getClass().getName() == return.element.getClass().getName()
this.parent.element.getClass().getName() == return.leftChild.element.getClass().getName()
this.parent.element.getClass().getName() == return.rightChild.element.getClass().getName()
this.parent.element.getClass().getName() == orig(this.parent.element.getClass().getName())
this.parent.parent == orig(this.parent.parent)
this.parent.parent.key == orig(this.parent.parent.key)
this.parent.parent.key.getClass().getName() == return.key.getClass().getName()
this.parent.parent.key.getClass().getName() == return.leftChild.key.getClass().getName()
this.parent.parent.key.getClass().getName() == return.rightChild.key.getClass().getName()
this.parent.parent.key.getClass().getName() == orig(this.parent.parent.key.getClass().getName())
this.parent.parent.element == orig(this.parent.parent.element)
this.parent.parent.element.getClass().getName() == return.element.getClass().getName()
this.parent.parent.element.getClass().getName() == return.leftChild.element.getClass().getName()
this.parent.parent.element.getClass().getName() == return.rightChild.element.getClass().getName()
this.parent.parent.element.getClass().getName() == orig(this.parent.parent.element.getClass().getName())
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.leftChild == orig(this.parent.parent.leftChild)
this.parent.parent.rightChild == orig(this.parent.parent.rightChild)
this.parent.leftChild == orig(this.parent.leftChild)
this.parent.leftChild.key == orig(this.parent.leftChild.key)
this.parent.leftChild.key.getClass().getName() == return.key.getClass().getName()
this.parent.leftChild.key.getClass().getName() == return.leftChild.key.getClass().getName()
this.parent.leftChild.key.getClass().getName() == return.rightChild.key.getClass().getName()
this.parent.leftChild.key.getClass().getName() == orig(this.parent.leftChild.key.getClass().getName())
this.parent.leftChild.element == orig(this.parent.leftChild.element)
this.parent.leftChild.element.getClass().getName() == return.element.getClass().getName()
this.parent.leftChild.element.getClass().getName() == return.leftChild.element.getClass().getName()
this.parent.leftChild.element.getClass().getName() == return.rightChild.element.getClass().getName()
this.parent.leftChild.element.getClass().getName() == orig(this.parent.leftChild.element.getClass().getName())
this.parent.leftChild.parent == return.parent.parent
this.parent.leftChild.parent == orig(this.parent.leftChild.parent)
this.parent.leftChild.leftChild == orig(this.parent.leftChild.leftChild)
this.parent.leftChild.rightChild == return.leftChild.parent
this.parent.leftChild.rightChild == orig(this.parent.leftChild.rightChild)
this.parent.rightChild == orig(this.parent.rightChild)
this.parent.rightChild.key == orig(this.parent.rightChild.key)
this.parent.rightChild.key.getClass().getName() == return.key.getClass().getName()
this.parent.rightChild.key.getClass().getName() == return.leftChild.key.getClass().getName()
this.parent.rightChild.key.getClass().getName() == return.rightChild.key.getClass().getName()
this.parent.rightChild.key.getClass().getName() == orig(this.parent.rightChild.key.getClass().getName())
this.parent.rightChild.element == orig(this.parent.rightChild.element)
this.parent.rightChild.element.getClass().getName() == return.element.getClass().getName()
this.parent.rightChild.element.getClass().getName() == return.leftChild.element.getClass().getName()
this.parent.rightChild.element.getClass().getName() == return.rightChild.element.getClass().getName()
this.parent.rightChild.element.getClass().getName() == orig(this.parent.rightChild.element.getClass().getName())
this.parent.rightChild.parent == return.parent.parent
this.parent.rightChild.parent == orig(this.parent.rightChild.parent)
this.parent.rightChild.leftChild == orig(this.parent.rightChild.leftChild)
this.parent.rightChild.rightChild == orig(this.parent.rightChild.rightChild)
this.leftChild == return.parent.leftChild
this.leftChild == orig(this.leftChild)
this.leftChild.key == orig(this.leftChild.key)
this.leftChild.key.getClass().getName() == return.key.getClass().getName()
this.leftChild.key.getClass().getName() == return.leftChild.key.getClass().getName()
this.leftChild.key.getClass().getName() == return.rightChild.key.getClass().getName()
this.leftChild.key.getClass().getName() == orig(this.leftChild.key.getClass().getName())
this.leftChild.key.getClass().getName() == orig(this.leftChild.parent.key.getClass().getName())
this.leftChild.element == orig(this.leftChild.element)
this.leftChild.element.getClass().getName() == return.element.getClass().getName()
this.leftChild.element.getClass().getName() == return.leftChild.element.getClass().getName()
this.leftChild.element.getClass().getName() == return.rightChild.element.getClass().getName()
this.leftChild.element.getClass().getName() == orig(this.leftChild.element.getClass().getName())
this.leftChild.element.getClass().getName() == orig(this.leftChild.parent.element.getClass().getName())
this.leftChild.parent == return.parent
this.leftChild.parent == orig(this)
this.leftChild.parent == orig(this.leftChild.parent)
this.leftChild.parent.key == return.parent.key
this.leftChild.parent.key == orig(this.leftChild.parent.key)
this.leftChild.parent.element == return.parent.element
this.leftChild.parent.element == orig(this.leftChild.parent.element)
this.leftChild.parent.parent == return.parent.parent
this.leftChild.parent.parent == orig(this.leftChild.parent.parent)
this.leftChild.parent.leftChild == return.parent.leftChild
this.leftChild.parent.leftChild == orig(this.leftChild.parent.leftChild)
this.leftChild.parent.rightChild == return
this.leftChild.parent.rightChild == return.parent.rightChild
this.leftChild.parent.rightChild == return.leftChild.parent
this.leftChild.parent.rightChild == return.rightChild.parent
this.leftChild.parent.rightChild == orig(this.leftChild.parent.rightChild)
this.leftChild.leftChild == orig(this.leftChild.leftChild)
this.leftChild.leftChild.key == orig(this.leftChild.leftChild.key)
this.leftChild.leftChild.key.getClass().getName() == return.key.getClass().getName()
this.leftChild.leftChild.key.getClass().getName() == return.leftChild.key.getClass().getName()
this.leftChild.leftChild.key.getClass().getName() == return.rightChild.key.getClass().getName()
this.leftChild.leftChild.key.getClass().getName() == orig(this.leftChild.leftChild.key.getClass().getName())
this.leftChild.leftChild.element == orig(this.leftChild.leftChild.element)
this.leftChild.leftChild.element.getClass().getName() == return.element.getClass().getName()
this.leftChild.leftChild.element.getClass().getName() == return.leftChild.element.getClass().getName()
this.leftChild.leftChild.element.getClass().getName() == return.rightChild.element.getClass().getName()
this.leftChild.leftChild.element.getClass().getName() == orig(this.leftChild.leftChild.element.getClass().getName())
this.leftChild.leftChild.parent == return.parent.leftChild
this.leftChild.leftChild.parent == orig(this.leftChild.leftChild.parent)
this.leftChild.leftChild.leftChild == orig(this.leftChild.leftChild.leftChild)
this.leftChild.leftChild.rightChild == orig(this.leftChild.leftChild.rightChild)
this.leftChild.rightChild == orig(this.leftChild.rightChild)
this.leftChild.rightChild.key == orig(this.leftChild.rightChild.key)
this.leftChild.rightChild.key.getClass().getName() == return.key.getClass().getName()
this.leftChild.rightChild.key.getClass().getName() == return.leftChild.key.getClass().getName()
this.leftChild.rightChild.key.getClass().getName() == return.rightChild.key.getClass().getName()
this.leftChild.rightChild.key.getClass().getName() == orig(this.leftChild.rightChild.key.getClass().getName())
this.leftChild.rightChild.element == orig(this.leftChild.rightChild.element)
this.leftChild.rightChild.element.getClass().getName() == return.element.getClass().getName()
this.leftChild.rightChild.element.getClass().getName() == return.leftChild.element.getClass().getName()
this.leftChild.rightChild.element.getClass().getName() == return.rightChild.element.getClass().getName()
this.leftChild.rightChild.element.getClass().getName() == orig(this.leftChild.rightChild.element.getClass().getName())
this.leftChild.rightChild.parent == return.parent.leftChild
this.leftChild.rightChild.parent == orig(this.leftChild.rightChild.parent)
this.leftChild.rightChild.leftChild == orig(this.leftChild.rightChild.leftChild)
this.leftChild.rightChild.rightChild == orig(this.leftChild.rightChild.rightChild)
this.rightChild == return
this.rightChild.key == return.key
this.rightChild.key.getClass().getName() == return.key.getClass().getName()
this.rightChild.element == return.element
this.rightChild.element.getClass().getName() == return.element.getClass().getName()
this.rightChild.parent == return.parent
this.rightChild.parent.key == return.parent.key
this.rightChild.parent.key.getClass().getName() == return.key.getClass().getName()
this.rightChild.parent.element == return.parent.element
this.rightChild.parent.element.getClass().getName() == return.element.getClass().getName()
this.rightChild.parent.parent == return.parent.parent
this.rightChild.parent.leftChild == return.parent.leftChild
this.rightChild.parent.rightChild == return.parent.rightChild
this.rightChild.leftChild == return.leftChild
this.rightChild.leftChild.key == return.leftChild.key
this.rightChild.leftChild.key.getClass().getName() == return.leftChild.key.getClass().getName()
this.rightChild.leftChild.element == return.leftChild.element
this.rightChild.leftChild.element.getClass().getName() == return.leftChild.element.getClass().getName()
this.rightChild.leftChild.parent == return.leftChild.parent
this.rightChild.leftChild.leftChild == return.leftChild.leftChild
this.rightChild.leftChild.rightChild == return.leftChild.rightChild
this.rightChild.rightChild == return.rightChild
this.rightChild.rightChild.key == return.rightChild.key
this.rightChild.rightChild.key.getClass().getName() == return.rightChild.key.getClass().getName()
this.rightChild.rightChild.element == return.rightChild.element
this.rightChild.rightChild.element.getClass().getName() == return.rightChild.element.getClass().getName()
this.rightChild.rightChild.parent == return.rightChild.parent
this.rightChild.rightChild.leftChild == return.rightChild.leftChild
this.rightChild.rightChild.rightChild == return.rightChild.rightChild
return == return.parent.rightChild
return == return.leftChild.parent
return == return.rightChild.parent
return == orig(this.rightChild)
return.key == orig(this.rightChild.key)
return.key.getClass().getName() == return.parent.key.getClass().getName()
return.key.getClass().getName() == return.leftChild.key.getClass().getName()
return.key.getClass().getName() == return.rightChild.key.getClass().getName()
return.key.getClass().getName() == orig(this.rightChild.key.getClass().getName())
return.key.getClass().getName() == orig(this.rightChild.parent.key.getClass().getName())
return.element == orig(this.rightChild.element)
return.element.getClass().getName() == return.parent.element.getClass().getName()
return.element.getClass().getName() == return.leftChild.element.getClass().getName()
return.element.getClass().getName() == return.rightChild.element.getClass().getName()
return.element.getClass().getName() == orig(this.rightChild.element.getClass().getName())
return.element.getClass().getName() == orig(this.rightChild.parent.element.getClass().getName())
return.parent == orig(this)
return.parent == orig(this.rightChild.parent)
return.parent.key == orig(this.rightChild.parent.key)
return.parent.element == orig(this.rightChild.parent.element)
return.parent.parent == orig(this.rightChild.parent.parent)
return.parent.leftChild == orig(this.rightChild.parent.leftChild)
return.parent.rightChild == return.leftChild.parent
return.parent.rightChild == return.rightChild.parent
return.parent.rightChild == orig(this.rightChild.parent.rightChild)
return.leftChild == orig(this.rightChild.leftChild)
return.leftChild.key == orig(this.rightChild.leftChild.key)
return.leftChild.key.getClass().getName() == return.rightChild.key.getClass().getName()
return.leftChild.key.getClass().getName() == orig(this.rightChild.leftChild.key.getClass().getName())
return.leftChild.element == orig(this.rightChild.leftChild.element)
return.leftChild.element.getClass().getName() == return.rightChild.element.getClass().getName()
return.leftChild.element.getClass().getName() == orig(this.rightChild.leftChild.element.getClass().getName())
return.leftChild.parent == return.rightChild.parent
return.leftChild.parent == orig(this.rightChild.leftChild.parent)
return.leftChild.leftChild == orig(this.rightChild.leftChild.leftChild)
return.leftChild.rightChild == orig(this.rightChild.leftChild.rightChild)
return.rightChild == orig(this.rightChild.rightChild)
return.rightChild.key == orig(this.rightChild.rightChild.key)
return.rightChild.key.getClass().getName() == orig(this.rightChild.rightChild.key.getClass().getName())
return.rightChild.element == orig(this.rightChild.rightChild.element)
return.rightChild.element.getClass().getName() == orig(this.rightChild.rightChild.element.getClass().getName())
return.rightChild.parent == orig(this.rightChild.rightChild.parent)
return.rightChild.leftChild == orig(this.rightChild.rightChild.leftChild)
return.rightChild.rightChild == orig(this.rightChild.rightChild.rightChild)
return.key != null
return.element != null
return.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
return.parent != null
return.parent.key != null
return.parent.element != null
return.parent.rightChild != null
return.leftChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
return.rightChild.key != null
return.rightChild.element != null
return.rightChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
return.rightChild.parent != null
this.key.getClass().getName() != return.element.getClass().getName()
this.key.getClass().getName() != return.leftChild.element.getClass().getName()
this.key.getClass().getName() != return.rightChild.element.getClass().getName()
this.element.getClass().getName() != return.key.getClass().getName()
this.element.getClass().getName() != return.leftChild.key.getClass().getName()
this.element.getClass().getName() != return.rightChild.key.getClass().getName()
this.parent.key.getClass().getName() != return.element.getClass().getName()
this.parent.key.getClass().getName() != return.leftChild.element.getClass().getName()
this.parent.key.getClass().getName() != return.rightChild.element.getClass().getName()
this.parent.element.getClass().getName() != return.key.getClass().getName()
this.parent.element.getClass().getName() != return.leftChild.key.getClass().getName()
this.parent.element.getClass().getName() != return.rightChild.key.getClass().getName()
this.parent.parent.key.getClass().getName() != return.element.getClass().getName()
this.parent.parent.key.getClass().getName() != return.rightChild.element.getClass().getName()
this.parent.parent.element.getClass().getName() != return.key.getClass().getName()
this.parent.parent.element.getClass().getName() != return.rightChild.key.getClass().getName()
this.parent.leftChild.key.getClass().getName() != return.element.getClass().getName()
this.parent.leftChild.key.getClass().getName() != return.rightChild.element.getClass().getName()
this.parent.leftChild.element.getClass().getName() != return.key.getClass().getName()
this.parent.leftChild.element.getClass().getName() != return.rightChild.key.getClass().getName()
this.parent.rightChild.key.getClass().getName() != return.element.getClass().getName()
this.parent.rightChild.key.getClass().getName() != return.leftChild.element.getClass().getName()
this.parent.rightChild.key.getClass().getName() != return.rightChild.element.getClass().getName()
this.parent.rightChild.element.getClass().getName() != return.key.getClass().getName()
this.parent.rightChild.element.getClass().getName() != return.leftChild.key.getClass().getName()
this.parent.rightChild.element.getClass().getName() != return.rightChild.key.getClass().getName()
this.leftChild.key.getClass().getName() != return.element.getClass().getName()
this.leftChild.key.getClass().getName() != return.rightChild.element.getClass().getName()
this.leftChild.element.getClass().getName() != return.key.getClass().getName()
this.leftChild.element.getClass().getName() != return.rightChild.key.getClass().getName()
this.leftChild.leftChild.key.getClass().getName() != return.element.getClass().getName()
this.leftChild.leftChild.element.getClass().getName() != return.key.getClass().getName()
this.leftChild.rightChild.key.getClass().getName() != return.element.getClass().getName()
this.leftChild.rightChild.element.getClass().getName() != return.key.getClass().getName()
return.key.getClass().getName() != return.element.getClass().getName()
return.key.getClass().getName() != return.leftChild.element.getClass().getName()
return.key.getClass().getName() != return.rightChild.element.getClass().getName()
return.element.getClass().getName() != return.leftChild.key.getClass().getName()
return.element.getClass().getName() != return.rightChild.key.getClass().getName()
return.leftChild.key.getClass().getName() != return.leftChild.element.getClass().getName()
return.rightChild.key.getClass().getName() != return.rightChild.element.getClass().getName()
===========================================================================
es.uc3m.eda.tree.BSTNode.hasLeftChild():::ENTER
===========================================================================
es.uc3m.eda.tree.BSTNode.hasLeftChild():::EXIT49
this.key == orig(this.leftChild.parent.key)
this.key.getClass().getName() == this.leftChild.parent.key.getClass().getName()
this.key.getClass().getName() == orig(this.leftChild.key.getClass().getName())
this.key.getClass().getName() == orig(this.leftChild.parent.key.getClass().getName())
this.element == orig(this.leftChild.parent.element)
this.element.getClass().getName() == this.leftChild.parent.element.getClass().getName()
this.element.getClass().getName() == orig(this.leftChild.element.getClass().getName())
this.element.getClass().getName() == orig(this.leftChild.parent.element.getClass().getName())
this.parent == orig(this.leftChild.parent.parent)
this.parent.leftChild.rightChild == this.rightChild.rightChild.parent
this.leftChild == orig(this.leftChild.parent.leftChild)
this.rightChild == orig(this.leftChild.parent.rightChild)
this.parent.leftChild.key.getClass().getName() == java.lang.String.class
this.rightChild.leftChild.key.getClass().getName() == java.lang.String.class
this.rightChild.rightChild.leftChild == null
return == true
===========================================================================
es.uc3m.eda.tree.BSTNode.hasLeftChild():::EXIT49;condition="return == true"
===========================================================================
es.uc3m.eda.tree.BSTNode.hasLeftChild():::EXIT51
this.leftChild == null
this.rightChild.parent.leftChild == null
this.rightChild.leftChild.element has only one value
this.rightChild.leftChild.leftChild == null
return == false
===========================================================================
es.uc3m.eda.tree.BSTNode.hasLeftChild():::EXIT51;condition="not(return == true)"
===========================================================================
es.uc3m.eda.tree.BSTNode.hasLeftChild():::EXIT
this.key == orig(this.key)
this.key.getClass().getName() == orig(this.key.getClass().getName())
this.element == orig(this.element)
this.element.getClass().getName() == orig(this.element.getClass().getName())
this.parent == orig(this.parent)
this.parent.key == orig(this.parent.key)
this.parent.key.getClass().getName() == orig(this.parent.key.getClass().getName())
this.parent.element == orig(this.parent.element)
this.parent.element.getClass().getName() == orig(this.parent.element.getClass().getName())
this.parent.parent == orig(this.parent.parent)
this.parent.parent.key == orig(this.parent.parent.key)
this.parent.parent.key.getClass().getName() == orig(this.parent.parent.key.getClass().getName())
this.parent.parent.element == orig(this.parent.parent.element)
this.parent.parent.element.getClass().getName() == orig(this.parent.parent.element.getClass().getName())
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.leftChild == orig(this.parent.parent.leftChild)
this.parent.parent.rightChild == orig(this.parent.parent.rightChild)
this.parent.leftChild == orig(this.parent.leftChild)
this.parent.leftChild.key == orig(this.parent.leftChild.key)
this.parent.leftChild.key.getClass().getName() == orig(this.parent.leftChild.key.getClass().getName())
this.parent.leftChild.element == orig(this.parent.leftChild.element)
this.parent.leftChild.element.getClass().getName() == orig(this.parent.leftChild.element.getClass().getName())
this.parent.leftChild.parent == orig(this.parent.leftChild.parent)
this.parent.leftChild.leftChild == orig(this.parent.leftChild.leftChild)
this.parent.leftChild.rightChild == orig(this.parent.leftChild.rightChild)
this.parent.rightChild == orig(this.parent.rightChild)
this.parent.rightChild.key == orig(this.parent.rightChild.key)
this.parent.rightChild.key.getClass().getName() == orig(this.parent.rightChild.key.getClass().getName())
this.parent.rightChild.element == orig(this.parent.rightChild.element)
this.parent.rightChild.element.getClass().getName() == orig(this.parent.rightChild.element.getClass().getName())
this.parent.rightChild.parent == orig(this.parent.rightChild.parent)
this.parent.rightChild.leftChild == orig(this.parent.rightChild.leftChild)
this.parent.rightChild.rightChild == orig(this.parent.rightChild.rightChild)
this.leftChild == orig(this.leftChild)
this.leftChild.key == orig(this.leftChild.key)
this.leftChild.key.getClass().getName() == orig(this.leftChild.key.getClass().getName())
this.leftChild.key.getClass().getName() == orig(this.leftChild.parent.key.getClass().getName())
this.leftChild.element == orig(this.leftChild.element)
this.leftChild.element.getClass().getName() == orig(this.leftChild.element.getClass().getName())
this.leftChild.element.getClass().getName() == orig(this.leftChild.parent.element.getClass().getName())
this.leftChild.parent == orig(this)
this.leftChild.parent == orig(this.leftChild.parent)
this.leftChild.parent.key == orig(this.leftChild.parent.key)
this.leftChild.parent.element == orig(this.leftChild.parent.element)
this.leftChild.parent.parent == orig(this.leftChild.parent.parent)
this.leftChild.parent.leftChild == orig(this.leftChild.parent.leftChild)
this.leftChild.parent.rightChild == orig(this.leftChild.parent.rightChild)
this.leftChild.leftChild == orig(this.leftChild.leftChild)
this.leftChild.leftChild.key == orig(this.leftChild.leftChild.key)
this.leftChild.leftChild.key.getClass().getName() == orig(this.leftChild.leftChild.key.getClass().getName())
this.leftChild.leftChild.element == orig(this.leftChild.leftChild.element)
this.leftChild.leftChild.element.getClass().getName() == orig(this.leftChild.leftChild.element.getClass().getName())
this.leftChild.leftChild.parent == orig(this.leftChild.leftChild.parent)
this.leftChild.leftChild.leftChild == orig(this.leftChild.leftChild.leftChild)
this.leftChild.leftChild.rightChild == orig(this.leftChild.leftChild.rightChild)
this.leftChild.rightChild == orig(this.leftChild.rightChild)
this.leftChild.rightChild.key == orig(this.leftChild.rightChild.key)
this.leftChild.rightChild.key.getClass().getName() == orig(this.leftChild.rightChild.key.getClass().getName())
this.leftChild.rightChild.element == orig(this.leftChild.rightChild.element)
this.leftChild.rightChild.element.getClass().getName() == orig(this.leftChild.rightChild.element.getClass().getName())
this.leftChild.rightChild.parent == orig(this.leftChild.rightChild.parent)
this.leftChild.rightChild.leftChild == orig(this.leftChild.rightChild.leftChild)
this.leftChild.rightChild.rightChild == orig(this.leftChild.rightChild.rightChild)
this.rightChild == orig(this.rightChild)
this.rightChild.key == orig(this.rightChild.key)
this.rightChild.key.getClass().getName() == orig(this.rightChild.key.getClass().getName())
this.rightChild.key.getClass().getName() == orig(this.rightChild.parent.key.getClass().getName())
this.rightChild.element == orig(this.rightChild.element)
this.rightChild.element.getClass().getName() == orig(this.rightChild.element.getClass().getName())
this.rightChild.element.getClass().getName() == orig(this.rightChild.parent.element.getClass().getName())
this.rightChild.parent == orig(this)
this.rightChild.parent == orig(this.rightChild.parent)
this.rightChild.parent.key == orig(this.rightChild.parent.key)
this.rightChild.parent.element == orig(this.rightChild.parent.element)
this.rightChild.parent.parent == orig(this.rightChild.parent.parent)
this.rightChild.parent.leftChild == orig(this.rightChild.parent.leftChild)
this.rightChild.parent.rightChild == orig(this.rightChild.parent.rightChild)
this.rightChild.leftChild == orig(this.rightChild.leftChild)
this.rightChild.leftChild.key == orig(this.rightChild.leftChild.key)
this.rightChild.leftChild.key.getClass().getName() == orig(this.rightChild.leftChild.key.getClass().getName())
this.rightChild.leftChild.element == orig(this.rightChild.leftChild.element)
this.rightChild.leftChild.element.getClass().getName() == orig(this.rightChild.leftChild.element.getClass().getName())
this.rightChild.leftChild.parent == orig(this.rightChild.leftChild.parent)
this.rightChild.leftChild.leftChild == orig(this.rightChild.leftChild.leftChild)
this.rightChild.leftChild.rightChild == orig(this.rightChild.leftChild.rightChild)
this.rightChild.rightChild == orig(this.rightChild.rightChild)
this.rightChild.rightChild.key == orig(this.rightChild.rightChild.key)
this.rightChild.rightChild.key.getClass().getName() == orig(this.rightChild.rightChild.key.getClass().getName())
this.rightChild.rightChild.element == orig(this.rightChild.rightChild.element)
this.rightChild.rightChild.element.getClass().getName() == orig(this.rightChild.rightChild.element.getClass().getName())
this.rightChild.rightChild.parent == orig(this.rightChild.rightChild.parent)
this.rightChild.rightChild.leftChild == orig(this.rightChild.rightChild.leftChild)
this.rightChild.rightChild.rightChild == orig(this.rightChild.rightChild.rightChild)
(this.leftChild == null)  <==>  (return == false)
(this.leftChild == null)  <==>  (this.rightChild.parent.leftChild == null)
(this.leftChild == null)  ==>  (this.rightChild.leftChild.element has only one value)
(this.leftChild == null)  ==>  (this.rightChild.leftChild.leftChild == null)
===========================================================================
es.uc3m.eda.tree.BSTNode.hasLeftChild():::EXIT;condition="return == true"
this.key == orig(this.leftChild.parent.key)
this.key.getClass().getName() == this.leftChild.parent.key.getClass().getName()
this.key.getClass().getName() == orig(this.leftChild.key.getClass().getName())
this.key.getClass().getName() == orig(this.leftChild.parent.key.getClass().getName())
this.element == orig(this.leftChild.parent.element)
this.element.getClass().getName() == this.leftChild.parent.element.getClass().getName()
this.element.getClass().getName() == orig(this.leftChild.element.getClass().getName())
this.element.getClass().getName() == orig(this.leftChild.parent.element.getClass().getName())
this.parent == orig(this.leftChild.parent.parent)
this.parent.leftChild.rightChild == this.rightChild.rightChild.parent
this.leftChild == orig(this.leftChild.parent.leftChild)
this.rightChild == orig(this.leftChild.parent.rightChild)
this.parent.leftChild.key.getClass().getName() == java.lang.String.class
this.rightChild.leftChild.key.getClass().getName() == java.lang.String.class
this.rightChild.rightChild.leftChild == null
return == true
===========================================================================
es.uc3m.eda.tree.BSTNode.hasLeftChild():::EXIT;condition="not(return == true)"
this.leftChild == null
this.rightChild.parent.leftChild == null
this.rightChild.leftChild.element has only one value
this.rightChild.leftChild.leftChild == null
return == false
===========================================================================
es.uc3m.eda.tree.BSTNode.hasRightChild():::ENTER
===========================================================================
es.uc3m.eda.tree.BSTNode.hasRightChild():::EXIT57
this.key == orig(this.rightChild.parent.key)
this.key.getClass().getName() == this.rightChild.parent.key.getClass().getName()
this.key.getClass().getName() == orig(this.rightChild.key.getClass().getName())
this.key.getClass().getName() == orig(this.rightChild.parent.key.getClass().getName())
this.element == orig(this.rightChild.parent.element)
this.element.getClass().getName() == this.rightChild.parent.element.getClass().getName()
this.element.getClass().getName() == orig(this.rightChild.element.getClass().getName())
this.element.getClass().getName() == orig(this.rightChild.parent.element.getClass().getName())
this.parent == orig(this.rightChild.parent.parent)
this.parent.leftChild.leftChild == this.leftChild.leftChild.parent
this.parent.leftChild.leftChild == this.leftChild.rightChild.parent
this.leftChild == orig(this.rightChild.parent.leftChild)
this.rightChild == orig(this.rightChild.parent.rightChild)
this.rightChild != null
return == true
===========================================================================
es.uc3m.eda.tree.BSTNode.hasRightChild():::EXIT57;condition="return == true"
===========================================================================
es.uc3m.eda.tree.BSTNode.hasRightChild():::EXIT59
this.key.getClass().getName() == orig(this.parent.key.getClass().getName())
this.key.getClass().getName() == orig(this.parent.parent.key.getClass().getName())
this.element.getClass().getName() == orig(this.parent.element.getClass().getName())
this.element.getClass().getName() == orig(this.parent.parent.element.getClass().getName())
this.parent.parent.leftChild == this.leftChild.parent.parent
this.parent.rightChild.leftChild == this.leftChild.rightChild.parent
this.parent != null
this.parent.parent != null
this.parent.parent.parent != null
this.parent.leftChild.key.getClass().getName() == java.lang.String.class
this.leftChild.key.getClass().getName() == java.lang.String.class
this.leftChild.parent.rightChild == null
this.leftChild.rightChild.key has only one value
this.leftChild.rightChild.key.getClass().getName() == java.lang.String.class
this.leftChild.rightChild.element has only one value
this.leftChild.rightChild.parent has only one value
this.leftChild.rightChild.leftChild == null
this.leftChild.rightChild.rightChild == null
this.rightChild == null
return == false
===========================================================================
es.uc3m.eda.tree.BSTNode.hasRightChild():::EXIT59;condition="not(return == true)"
===========================================================================
es.uc3m.eda.tree.BSTNode.hasRightChild():::EXIT
this.key == orig(this.key)
this.key.getClass().getName() == orig(this.key.getClass().getName())
this.element == orig(this.element)
this.element.getClass().getName() == orig(this.element.getClass().getName())
this.parent == orig(this.parent)
this.parent.key == orig(this.parent.key)
this.parent.key.getClass().getName() == orig(this.parent.key.getClass().getName())
this.parent.element == orig(this.parent.element)
this.parent.element.getClass().getName() == orig(this.parent.element.getClass().getName())
this.parent.parent == orig(this.parent.parent)
this.parent.parent.key == orig(this.parent.parent.key)
this.parent.parent.key.getClass().getName() == orig(this.parent.parent.key.getClass().getName())
this.parent.parent.element == orig(this.parent.parent.element)
this.parent.parent.element.getClass().getName() == orig(this.parent.parent.element.getClass().getName())
this.parent.parent.parent == orig(this.parent.parent.parent)
this.parent.parent.leftChild == orig(this.parent.parent.leftChild)
this.parent.parent.rightChild == orig(this.parent.parent.rightChild)
this.parent.leftChild == orig(this.parent.leftChild)
this.parent.leftChild.key == orig(this.parent.leftChild.key)
this.parent.leftChild.key.getClass().getName() == orig(this.parent.leftChild.key.getClass().getName())
this.parent.leftChild.element == orig(this.parent.leftChild.element)
this.parent.leftChild.element.getClass().getName() == orig(this.parent.leftChild.element.getClass().getName())
this.parent.leftChild.parent == orig(this.parent.leftChild.parent)
this.parent.leftChild.leftChild == orig(this.parent.leftChild.leftChild)
this.parent.leftChild.rightChild == orig(this.parent.leftChild.rightChild)
this.parent.rightChild == orig(this.parent.rightChild)
this.parent.rightChild.key == orig(this.parent.rightChild.key)
this.parent.rightChild.key.getClass().getName() == orig(this.parent.rightChild.key.getClass().getName())
this.parent.rightChild.element == orig(this.parent.rightChild.element)
this.parent.rightChild.element.getClass().getName() == orig(this.parent.rightChild.element.getClass().getName())
this.parent.rightChild.parent == orig(this.parent.rightChild.parent)
this.parent.rightChild.leftChild == orig(this.parent.rightChild.leftChild)
this.parent.rightChild.rightChild == orig(this.parent.rightChild.rightChild)
this.leftChild == orig(this.leftChild)
this.leftChild.key == orig(this.leftChild.key)
this.leftChild.key.getClass().getName() == orig(this.leftChild.key.getClass().getName())
this.leftChild.key.getClass().getName() == orig(this.leftChild.parent.key.getClass().getName())
this.leftChild.element == orig(this.leftChild.element)
this.leftChild.element.getClass().getName() == orig(this.leftChild.element.getClass().getName())
this.leftChild.element.getClass().getName() == orig(this.leftChild.parent.element.getClass().getName())
this.leftChild.parent == orig(this)
this.leftChild.parent == orig(this.leftChild.parent)
this.leftChild.parent.key == orig(this.leftChild.parent.key)
this.leftChild.parent.element == orig(this.leftChild.parent.element)
this.leftChild.parent.parent == orig(this.leftChild.parent.parent)
this.leftChild.parent.leftChild == orig(this.leftChild.parent.leftChild)
this.leftChild.parent.rightChild == orig(this.leftChild.parent.rightChild)
this.leftChild.leftChild == orig(this.leftChild.leftChild)
this.leftChild.leftChild.key == orig(this.leftChild.leftChild.key)
this.leftChild.leftChild.key.getClass().getName() == orig(this.leftChild.leftChild.key.getClass().getName())
this.leftChild.leftChild.element == orig(this.leftChild.leftChild.element)
this.leftChild.leftChild.element.getClass().getName() == orig(this.leftChild.leftChild.element.getClass().getName())
this.leftChild.leftChild.parent == orig(this.leftChild.leftChild.parent)
this.leftChild.leftChild.leftChild == orig(this.leftChild.leftChild.leftChild)
this.leftChild.leftChild.rightChild == orig(this.leftChild.leftChild.rightChild)
this.leftChild.rightChild == orig(this.leftChild.rightChild)
this.leftChild.rightChild.key == orig(this.leftChild.rightChild.key)
this.leftChild.rightChild.key.getClass().getName() == orig(this.leftChild.rightChild.key.getClass().getName())
this.leftChild.rightChild.element == orig(this.leftChild.rightChild.element)
this.leftChild.rightChild.element.getClass().getName() == orig(this.leftChild.rightChild.element.getClass().getName())
this.leftChild.rightChild.parent == orig(this.leftChild.rightChild.parent)
this.leftChild.rightChild.leftChild == orig(this.leftChild.rightChild.leftChild)
this.leftChild.rightChild.rightChild == orig(this.leftChild.rightChild.rightChild)
this.rightChild == orig(this.rightChild)
this.rightChild.key == orig(this.rightChild.key)
this.rightChild.key.getClass().getName() == orig(this.rightChild.key.getClass().getName())
this.rightChild.key.getClass().getName() == orig(this.rightChild.parent.key.getClass().getName())
this.rightChild.element == orig(this.rightChild.element)
this.rightChild.element.getClass().getName() == orig(this.rightChild.element.getClass().getName())
this.rightChild.element.getClass().getName() == orig(this.rightChild.parent.element.getClass().getName())
this.rightChild.parent == orig(this)
this.rightChild.parent == orig(this.rightChild.parent)
this.rightChild.parent.key == orig(this.rightChild.parent.key)
this.rightChild.parent.element == orig(this.rightChild.parent.element)
this.rightChild.parent.parent == orig(this.rightChild.parent.parent)
this.rightChild.parent.leftChild == orig(this.rightChild.parent.leftChild)
this.rightChild.parent.rightChild == orig(this.rightChild.parent.rightChild)
this.rightChild.leftChild == orig(this.rightChild.leftChild)
this.rightChild.leftChild.key == orig(this.rightChild.leftChild.key)
this.rightChild.leftChild.key.getClass().getName() == orig(this.rightChild.leftChild.key.getClass().getName())
this.rightChild.leftChild.element == orig(this.rightChild.leftChild.element)
this.rightChild.leftChild.element.getClass().getName() == orig(this.rightChild.leftChild.element.getClass().getName())
this.rightChild.leftChild.parent == orig(this.rightChild.leftChild.parent)
this.rightChild.leftChild.leftChild == orig(this.rightChild.leftChild.leftChild)
this.rightChild.leftChild.rightChild == orig(this.rightChild.leftChild.rightChild)
this.rightChild.rightChild == orig(this.rightChild.rightChild)
this.rightChild.rightChild.key == orig(this.rightChild.rightChild.key)
this.rightChild.rightChild.key.getClass().getName() == orig(this.rightChild.rightChild.key.getClass().getName())
this.rightChild.rightChild.element == orig(this.rightChild.rightChild.element)
this.rightChild.rightChild.element.getClass().getName() == orig(this.rightChild.rightChild.element.getClass().getName())
this.rightChild.rightChild.parent == orig(this.rightChild.rightChild.parent)
this.rightChild.rightChild.leftChild == orig(this.rightChild.rightChild.leftChild)
this.rightChild.rightChild.rightChild == orig(this.rightChild.rightChild.rightChild)
(this.leftChild.parent.rightChild == null)  <==>  (return == false)
(this.leftChild.parent.rightChild == null)  <==>  (this.rightChild == null)
(this.leftChild.parent.rightChild == null)  ==>  (this.leftChild.key.getClass().getName() == java.lang.String.class)
(this.leftChild.parent.rightChild == null)  ==>  (this.leftChild.rightChild.element has only one value)
(this.leftChild.parent.rightChild == null)  ==>  (this.leftChild.rightChild.key has only one value)
(this.leftChild.parent.rightChild == null)  ==>  (this.leftChild.rightChild.key.getClass().getName() == java.lang.String.class)
(this.leftChild.parent.rightChild == null)  ==>  (this.leftChild.rightChild.leftChild == null)
(this.leftChild.parent.rightChild == null)  ==>  (this.leftChild.rightChild.parent has only one value)
(this.leftChild.parent.rightChild == null)  ==>  (this.leftChild.rightChild.rightChild == null)
(this.leftChild.parent.rightChild == null)  ==>  (this.parent != null)
(this.leftChild.parent.rightChild == null)  ==>  (this.parent.leftChild.key.getClass().getName() == java.lang.String.class)
(this.leftChild.parent.rightChild == null)  ==>  (this.parent.parent != null)
(this.leftChild.parent.rightChild == null)  ==>  (this.parent.parent.leftChild == this.leftChild.parent.parent)
(this.leftChild.parent.rightChild == null)  ==>  (this.parent.parent.parent != null)
(this.leftChild.parent.rightChild == null)  ==>  (this.parent.rightChild.leftChild == this.leftChild.rightChild.parent)
===========================================================================
es.uc3m.eda.tree.BSTNode.hasRightChild():::EXIT;condition="return == true"
this.key == orig(this.rightChild.parent.key)
this.key.getClass().getName() == this.rightChild.parent.key.getClass().getName()
this.key.getClass().getName() == orig(this.rightChild.key.getClass().getName())
this.key.getClass().getName() == orig(this.rightChild.parent.key.getClass().getName())
this.element == orig(this.rightChild.parent.element)
this.element.getClass().getName() == this.rightChild.parent.element.getClass().getName()
this.element.getClass().getName() == orig(this.rightChild.element.getClass().getName())
this.element.getClass().getName() == orig(this.rightChild.parent.element.getClass().getName())
this.parent == orig(this.rightChild.parent.parent)
this.parent.leftChild.leftChild == this.leftChild.leftChild.parent
this.parent.leftChild.leftChild == this.leftChild.rightChild.parent
this.leftChild == orig(this.rightChild.parent.leftChild)
this.rightChild == orig(this.rightChild.parent.rightChild)
this.rightChild != null
return == true
===========================================================================
es.uc3m.eda.tree.BSTNode.hasRightChild():::EXIT;condition="not(return == true)"
this.key.getClass().getName() == orig(this.parent.key.getClass().getName())
this.key.getClass().getName() == orig(this.parent.parent.key.getClass().getName())
this.element.getClass().getName() == orig(this.parent.element.getClass().getName())
this.element.getClass().getName() == orig(this.parent.parent.element.getClass().getName())
this.parent.parent.leftChild == this.leftChild.parent.parent
this.parent.rightChild.leftChild == this.leftChild.rightChild.parent
this.parent != null
this.parent.parent != null
this.parent.parent.parent != null
this.parent.leftChild.key.getClass().getName() == java.lang.String.class
this.leftChild.key.getClass().getName() == java.lang.String.class
this.leftChild.parent.rightChild == null
this.leftChild.rightChild.key has only one value
this.leftChild.rightChild.key.getClass().getName() == java.lang.String.class
this.leftChild.rightChild.element has only one value
this.leftChild.rightChild.parent has only one value
this.leftChild.rightChild.leftChild == null
this.leftChild.rightChild.rightChild == null
this.rightChild == null
return == false
===========================================================================
es.uc3m.eda.tree.BSTree:::OBJECT
this.root == this.root.leftChild.parent
this.root == this.root.rightChild.parent
this.root.key.getClass().getName() == this.root.leftChild.key.getClass().getName()
this.root.key.getClass().getName() == this.root.rightChild.key.getClass().getName()
this.root.element.getClass().getName() == this.root.leftChild.element.getClass().getName()
this.root.element.getClass().getName() == this.root.rightChild.element.getClass().getName()
this.root.leftChild.key.getClass().getName() == this.root.rightChild.key.getClass().getName()
this.root.leftChild.element.getClass().getName() == this.root.rightChild.element.getClass().getName()
this.root.leftChild.parent == this.root.rightChild.parent
this.root.key != null
this.root.element has only one value
this.root.element != null
this.root.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
this.root.parent == null
this.root.leftChild.key has only one value
this.root.leftChild.key != null
this.root.leftChild.key.getClass().getName() == java.lang.String.class
this.root.leftChild.element has only one value
this.root.leftChild.element != null
this.root.leftChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
this.root.leftChild.parent has only one value
this.root.leftChild.parent != null
this.root.rightChild.key != null
this.root.rightChild.element has only one value
this.root.rightChild.element != null
this.root.rightChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
this.root.rightChild.parent != null
this.root.rightChild.leftChild == null
this.root.key.getClass().getName() != this.root.element.getClass().getName()
this.root.key.getClass().getName() != this.root.leftChild.element.getClass().getName()
this.root.key.getClass().getName() != this.root.rightChild.element.getClass().getName()
this.root.element.getClass().getName() != this.root.leftChild.key.getClass().getName()
this.root.element.getClass().getName() != this.root.rightChild.key.getClass().getName()
this.root.leftChild.key.getClass().getName() != this.root.leftChild.element.getClass().getName()
this.root.leftChild.key.getClass().getName() != this.root.rightChild.element.getClass().getName()
this.root.leftChild.element.getClass().getName() != this.root.rightChild.key.getClass().getName()
this.root.rightChild.key.getClass().getName() != this.root.rightChild.element.getClass().getName()
===========================================================================
es.uc3m.eda.tree.BSTree.BSTree():::EXIT
this.root == null
===========================================================================
es.uc3m.eda.tree.BSTree.getRoot():::ENTER
this.root.leftChild.leftChild has only one value
this.root.leftChild.rightChild has only one value
===========================================================================
es.uc3m.eda.tree.BSTree.getRoot():::EXIT
this.root == return
this.root.key == return.key
this.root.key.getClass().getName() == return.key.getClass().getName()
this.root.element == return.element
this.root.element.getClass().getName() == return.element.getClass().getName()
this.root.parent == orig(this.root.parent)
this.root.leftChild == return.leftChild
this.root.leftChild.key == return.leftChild.key
this.root.leftChild.key.getClass().getName() == return.leftChild.key.getClass().getName()
this.root.leftChild.element == return.leftChild.element
this.root.leftChild.element.getClass().getName() == return.leftChild.element.getClass().getName()
this.root.leftChild.parent == return.leftChild.parent
this.root.leftChild.leftChild == return.leftChild.leftChild
this.root.leftChild.rightChild == return.leftChild.rightChild
this.root.rightChild == return.rightChild
this.root.rightChild.key == return.rightChild.key
this.root.rightChild.key.getClass().getName() == return.key.getClass().getName()
this.root.rightChild.element == return.rightChild.element
this.root.rightChild.element.getClass().getName() == return.element.getClass().getName()
this.root.rightChild.parent == return
this.root.rightChild.leftChild == orig(this.root.rightChild.leftChild)
this.root.rightChild.rightChild == return.rightChild.rightChild
return == return.leftChild.parent
return == return.rightChild.parent
return == orig(this.root)
return == orig(this.root.rightChild.parent)
return.key == orig(this.root.key)
return.key.getClass().getName() == return.leftChild.key.getClass().getName()
return.key.getClass().getName() == return.rightChild.key.getClass().getName()
return.key.getClass().getName() == orig(this.root.key.getClass().getName())
return.key.getClass().getName() == orig(this.root.rightChild.key.getClass().getName())
return.element == orig(this.root.element)
return.element.getClass().getName() == return.leftChild.element.getClass().getName()
return.element.getClass().getName() == return.rightChild.element.getClass().getName()
return.element.getClass().getName() == orig(this.root.element.getClass().getName())
return.element.getClass().getName() == orig(this.root.rightChild.element.getClass().getName())
return.leftChild == orig(this.root.leftChild)
return.leftChild.key == orig(this.root.leftChild.key)
return.leftChild.key.getClass().getName() == orig(this.root.leftChild.key.getClass().getName())
return.leftChild.element == orig(this.root.leftChild.element)
return.leftChild.element.getClass().getName() == orig(this.root.leftChild.element.getClass().getName())
return.leftChild.parent == orig(this.root.leftChild.parent)
return.leftChild.leftChild == orig(this.root.leftChild.leftChild)
return.leftChild.rightChild == orig(this.root.leftChild.rightChild)
return.rightChild == orig(this.root.rightChild)
return.rightChild.key == orig(this.root.rightChild.key)
return.rightChild.element == orig(this.root.rightChild.element)
return.rightChild.rightChild == orig(this.root.rightChild.rightChild)
return.element has only one value
return.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
return.parent == null
return.leftChild.key has only one value
return.leftChild.key.getClass().getName() == java.lang.String.class
return.leftChild.element has only one value
return.leftChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
return.leftChild.parent has only one value
return.leftChild.leftChild has only one value
return.leftChild.rightChild has only one value
return.rightChild.element has only one value
return.rightChild.leftChild == null
===========================================================================
es.uc3m.eda.tree.BSTree.insert(es.uc3m.eda.tree.BSTNode, es.uc3m.eda.tree.BSTNode):::ENTER
this.root.key.getClass().getName() == arg0.key.getClass().getName()
this.root.key.getClass().getName() == arg1.key.getClass().getName()
this.root.key.getClass().getName() == arg1.parent.key.getClass().getName()
this.root.key.getClass().getName() == arg1.leftChild.key.getClass().getName()
this.root.key.getClass().getName() == arg1.rightChild.key.getClass().getName()
this.root.element.getClass().getName() == arg0.element.getClass().getName()
this.root.element.getClass().getName() == arg1.element.getClass().getName()
this.root.element.getClass().getName() == arg1.parent.element.getClass().getName()
this.root.element.getClass().getName() == arg1.leftChild.element.getClass().getName()
this.root.element.getClass().getName() == arg1.rightChild.element.getClass().getName()
this.root.leftChild.key.getClass().getName() == arg1.parent.key.getClass().getName()
this.root.leftChild.key.getClass().getName() == arg1.leftChild.key.getClass().getName()
this.root.leftChild.key.getClass().getName() == arg1.rightChild.key.getClass().getName()
this.root.leftChild.element.getClass().getName() == arg1.parent.element.getClass().getName()
this.root.leftChild.element.getClass().getName() == arg1.leftChild.element.getClass().getName()
this.root.leftChild.element.getClass().getName() == arg1.rightChild.element.getClass().getName()
this.root.rightChild.key.getClass().getName() == arg1.parent.key.getClass().getName()
this.root.rightChild.key.getClass().getName() == arg1.leftChild.key.getClass().getName()
this.root.rightChild.key.getClass().getName() == arg1.rightChild.key.getClass().getName()
this.root.rightChild.element.getClass().getName() == arg1.parent.element.getClass().getName()
this.root.rightChild.element.getClass().getName() == arg1.leftChild.element.getClass().getName()
this.root.rightChild.element.getClass().getName() == arg1.rightChild.element.getClass().getName()
arg1 == arg1.leftChild.parent
arg1 == arg1.rightChild.parent
arg1.parent.key.getClass().getName() == arg1.leftChild.key.getClass().getName()
arg1.parent.key.getClass().getName() == arg1.rightChild.key.getClass().getName()
arg1.parent.element.getClass().getName() == arg1.leftChild.element.getClass().getName()
arg1.parent.element.getClass().getName() == arg1.rightChild.element.getClass().getName()
arg1.leftChild.key.getClass().getName() == arg1.rightChild.key.getClass().getName()
arg1.leftChild.element.getClass().getName() == arg1.rightChild.element.getClass().getName()
arg1.leftChild.parent == arg1.rightChild.parent
this.root != null
arg0 != null
arg0.key != null
arg0.element != null
arg0.parent == null
arg0.leftChild == null
arg0.rightChild == null
arg1 != null
arg1.key != null
arg1.element != null
arg1.parent.key != null
arg1.parent.element != null
arg1.parent.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg1.leftChild.key != null
arg1.leftChild.element != null
arg1.leftChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg1.leftChild.parent != null
arg1.rightChild.key != null
arg1.rightChild.element != null
arg1.rightChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg1.rightChild.parent != null
this.root.key.getClass().getName() != arg1.parent.element.getClass().getName()
this.root.key.getClass().getName() != arg1.leftChild.element.getClass().getName()
this.root.key.getClass().getName() != arg1.rightChild.element.getClass().getName()
this.root.element.getClass().getName() != arg1.parent.key.getClass().getName()
this.root.element.getClass().getName() != arg1.leftChild.key.getClass().getName()
this.root.element.getClass().getName() != arg1.rightChild.key.getClass().getName()
this.root.leftChild.key.getClass().getName() != arg1.parent.element.getClass().getName()
this.root.leftChild.key.getClass().getName() != arg1.leftChild.element.getClass().getName()
this.root.leftChild.key.getClass().getName() != arg1.rightChild.element.getClass().getName()
this.root.leftChild.element.getClass().getName() != arg1.parent.key.getClass().getName()
this.root.leftChild.element.getClass().getName() != arg1.leftChild.key.getClass().getName()
this.root.leftChild.element.getClass().getName() != arg1.rightChild.key.getClass().getName()
this.root.rightChild.key.getClass().getName() != arg1.parent.element.getClass().getName()
this.root.rightChild.key.getClass().getName() != arg1.leftChild.element.getClass().getName()
this.root.rightChild.key.getClass().getName() != arg1.rightChild.element.getClass().getName()
this.root.rightChild.element.getClass().getName() != arg1.parent.key.getClass().getName()
this.root.rightChild.element.getClass().getName() != arg1.leftChild.key.getClass().getName()
this.root.rightChild.element.getClass().getName() != arg1.rightChild.key.getClass().getName()
arg1.parent.key.getClass().getName() != arg1.parent.element.getClass().getName()
arg1.parent.key.getClass().getName() != arg1.leftChild.element.getClass().getName()
arg1.parent.key.getClass().getName() != arg1.rightChild.element.getClass().getName()
arg1.parent.element.getClass().getName() != arg1.leftChild.key.getClass().getName()
arg1.parent.element.getClass().getName() != arg1.rightChild.key.getClass().getName()
arg1.leftChild.key.getClass().getName() != arg1.leftChild.element.getClass().getName()
arg1.leftChild.key.getClass().getName() != arg1.rightChild.element.getClass().getName()
arg1.leftChild.element.getClass().getName() != arg1.rightChild.key.getClass().getName()
arg1.rightChild.key.getClass().getName() != arg1.rightChild.element.getClass().getName()
===========================================================================
es.uc3m.eda.tree.BSTree.insert(es.uc3m.eda.tree.BSTNode, es.uc3m.eda.tree.BSTNode):::EXIT44
this.root.leftChild.rightChild == orig(this.root.leftChild.rightChild)
this.root.rightChild == orig(this.root.rightChild)
this.root.rightChild.rightChild == orig(this.root.rightChild.rightChild)
arg0.key == arg1.leftChild.key
arg0.element == arg1.leftChild.element
arg0.parent == arg1.leftChild.parent
arg0.parent == arg1.rightChild.parent
arg0.parent == orig(arg1)
arg0.parent.key == arg1.key
arg0.parent.element == arg1.element
arg0.parent.parent == arg1.parent
arg0.parent.leftChild == arg1.leftChild
arg0.parent.rightChild == arg1.rightChild
arg1.leftChild == orig(arg0)
arg1.leftChild.leftChild == arg1.leftChild.rightChild
arg1.leftChild.leftChild == arg1.rightChild.leftChild
arg1.leftChild.leftChild == orig(arg0.parent)
arg1.leftChild.leftChild == orig(arg1.leftChild)
arg1.rightChild == orig(arg1.rightChild)
arg1.rightChild.leftChild == orig(arg1.rightChild.leftChild)
arg1.rightChild.rightChild == orig(arg1.rightChild.rightChild)
arg1.leftChild.leftChild == null
arg1.rightChild.leftChild == null
===========================================================================
es.uc3m.eda.tree.BSTree.insert(es.uc3m.eda.tree.BSTNode, es.uc3m.eda.tree.BSTNode):::EXIT52
this.root.leftChild == orig(this.root.leftChild)
this.root.leftChild.leftChild == orig(this.root.leftChild.leftChild)
arg0.key == arg1.rightChild.key
arg0.element == arg1.rightChild.element
arg0.parent == arg1.leftChild.parent
arg0.parent == arg1.rightChild.parent
arg0.parent == orig(arg1)
arg0.parent.key == arg1.key
arg0.parent.element == arg1.element
arg0.parent.parent == arg1.parent
arg0.parent.leftChild == arg1.leftChild
arg0.parent.rightChild == arg1.rightChild
arg1.leftChild == orig(arg1.leftChild)
arg1.leftChild.leftChild == arg1.rightChild.leftChild
arg1.leftChild.leftChild == orig(arg1.leftChild.leftChild)
arg1.leftChild.rightChild == orig(arg1.leftChild.rightChild)
arg1.rightChild == orig(arg0)
arg1.rightChild.leftChild == arg1.rightChild.rightChild
arg1.rightChild.leftChild == orig(arg0.parent)
arg1.rightChild.leftChild == orig(arg1.rightChild)
this.root.leftChild.leftChild has only one value
this.root.leftChild.rightChild has only one value
arg1.leftChild.key.getClass().getName() == java.lang.String.class
arg1.leftChild.leftChild == null
arg1.rightChild != null
arg1.rightChild.leftChild == null
===========================================================================
es.uc3m.eda.tree.BSTree.insert(es.uc3m.eda.tree.BSTNode, es.uc3m.eda.tree.BSTNode):::EXIT57
this.root.leftChild == orig(this.root.leftChild)
this.root.rightChild == orig(this.root.rightChild)
arg1.leftChild == orig(arg1.leftChild)
arg1.rightChild == orig(arg1.rightChild)
this.root.leftChild.leftChild has only one value
this.root.leftChild.leftChild != null
this.root.rightChild.rightChild != null
arg0.parent.parent != null
===========================================================================
es.uc3m.eda.tree.BSTree.insert(es.uc3m.eda.tree.BSTNode, es.uc3m.eda.tree.BSTNode):::EXIT
this.root == orig(this.root)
this.root == orig(this.root.leftChild.parent)
this.root == orig(this.root.rightChild.parent)
this.root.key == orig(this.root.key)
this.root.key.getClass().getName() == arg0.key.getClass().getName()
this.root.element == orig(this.root.element)
this.root.element.getClass().getName() == arg0.element.getClass().getName()
this.root.parent == orig(this.root.parent)
this.root.leftChild.key == orig(this.root.leftChild.key)
this.root.leftChild.key.getClass().getName() == arg0.key.getClass().getName()
this.root.leftChild.key.getClass().getName() == arg1.parent.key.getClass().getName()
this.root.leftChild.key.getClass().getName() == arg1.leftChild.key.getClass().getName()
this.root.leftChild.key.getClass().getName() == arg1.rightChild.key.getClass().getName()
this.root.leftChild.key.getClass().getName() == orig(this.root.leftChild.key.getClass().getName())
this.root.leftChild.key.getClass().getName() == orig(this.root.rightChild.key.getClass().getName())
this.root.leftChild.key.getClass().getName() == orig(arg1.leftChild.key.getClass().getName())
this.root.leftChild.key.getClass().getName() == orig(arg1.rightChild.key.getClass().getName())
this.root.leftChild.element == orig(this.root.leftChild.element)
this.root.leftChild.element.getClass().getName() == arg0.element.getClass().getName()
this.root.leftChild.element.getClass().getName() == arg1.parent.element.getClass().getName()
this.root.leftChild.element.getClass().getName() == arg1.leftChild.element.getClass().getName()
this.root.leftChild.element.getClass().getName() == arg1.rightChild.element.getClass().getName()
this.root.leftChild.element.getClass().getName() == orig(this.root.leftChild.element.getClass().getName())
this.root.leftChild.element.getClass().getName() == orig(this.root.rightChild.element.getClass().getName())
this.root.leftChild.element.getClass().getName() == orig(arg1.leftChild.element.getClass().getName())
this.root.leftChild.element.getClass().getName() == orig(arg1.rightChild.element.getClass().getName())
this.root.leftChild.parent == orig(this.root.leftChild.parent)
this.root.leftChild.parent == orig(this.root.rightChild.parent)
this.root.rightChild.key == orig(this.root.rightChild.key)
this.root.rightChild.key.getClass().getName() == arg0.key.getClass().getName()
this.root.rightChild.element == orig(this.root.rightChild.element)
this.root.rightChild.element.getClass().getName() == arg0.element.getClass().getName()
this.root.rightChild.leftChild == orig(this.root.rightChild.leftChild)
arg0.key == orig(arg0.key)
arg0.key.getClass().getName() == arg0.parent.key.getClass().getName()
arg0.key.getClass().getName() == arg1.key.getClass().getName()
arg0.key.getClass().getName() == arg1.parent.key.getClass().getName()
arg0.key.getClass().getName() == arg1.leftChild.key.getClass().getName()
arg0.key.getClass().getName() == arg1.rightChild.key.getClass().getName()
arg0.key.getClass().getName() == orig(this.root.key.getClass().getName())
arg0.key.getClass().getName() == orig(this.root.leftChild.key.getClass().getName())
arg0.key.getClass().getName() == orig(this.root.rightChild.key.getClass().getName())
arg0.key.getClass().getName() == orig(arg0.key.getClass().getName())
arg0.key.getClass().getName() == orig(arg1.key.getClass().getName())
arg0.key.getClass().getName() == orig(arg1.leftChild.key.getClass().getName())
arg0.key.getClass().getName() == orig(arg1.rightChild.key.getClass().getName())
arg0.element == orig(arg0.element)
arg0.element.getClass().getName() == arg0.parent.element.getClass().getName()
arg0.element.getClass().getName() == arg1.element.getClass().getName()
arg0.element.getClass().getName() == arg1.parent.element.getClass().getName()
arg0.element.getClass().getName() == arg1.leftChild.element.getClass().getName()
arg0.element.getClass().getName() == arg1.rightChild.element.getClass().getName()
arg0.element.getClass().getName() == orig(this.root.element.getClass().getName())
arg0.element.getClass().getName() == orig(this.root.leftChild.element.getClass().getName())
arg0.element.getClass().getName() == orig(this.root.rightChild.element.getClass().getName())
arg0.element.getClass().getName() == orig(arg0.element.getClass().getName())
arg0.element.getClass().getName() == orig(arg1.element.getClass().getName())
arg0.element.getClass().getName() == orig(arg1.leftChild.element.getClass().getName())
arg0.element.getClass().getName() == orig(arg1.rightChild.element.getClass().getName())
arg0.leftChild == orig(arg0.leftChild)
arg0.rightChild == orig(arg0.rightChild)
arg1.key == orig(arg1.key)
arg1.element == orig(arg1.element)
arg1.parent == orig(arg1.parent)
arg1.parent.key == orig(arg1.parent.key)
arg1.parent.key.getClass().getName() == arg1.leftChild.key.getClass().getName()
arg1.parent.key.getClass().getName() == arg1.rightChild.key.getClass().getName()
arg1.parent.key.getClass().getName() == orig(this.root.leftChild.key.getClass().getName())
arg1.parent.key.getClass().getName() == orig(this.root.rightChild.key.getClass().getName())
arg1.parent.key.getClass().getName() == orig(arg1.parent.key.getClass().getName())
arg1.parent.key.getClass().getName() == orig(arg1.leftChild.key.getClass().getName())
arg1.parent.key.getClass().getName() == orig(arg1.rightChild.key.getClass().getName())
arg1.parent.element == orig(arg1.parent.element)
arg1.parent.element.getClass().getName() == arg1.leftChild.element.getClass().getName()
arg1.parent.element.getClass().getName() == arg1.rightChild.element.getClass().getName()
arg1.parent.element.getClass().getName() == orig(this.root.leftChild.element.getClass().getName())
arg1.parent.element.getClass().getName() == orig(this.root.rightChild.element.getClass().getName())
arg1.parent.element.getClass().getName() == orig(arg1.parent.element.getClass().getName())
arg1.parent.element.getClass().getName() == orig(arg1.leftChild.element.getClass().getName())
arg1.parent.element.getClass().getName() == orig(arg1.rightChild.element.getClass().getName())
arg1.parent.parent == orig(arg1.parent.parent)
arg1.parent.leftChild == orig(arg1.parent.leftChild)
arg1.parent.rightChild == orig(arg1.parent.rightChild)
arg1.leftChild.key == orig(arg1.leftChild.key)
arg1.leftChild.key.getClass().getName() == arg1.rightChild.key.getClass().getName()
arg1.leftChild.key.getClass().getName() == orig(this.root.leftChild.key.getClass().getName())
arg1.leftChild.key.getClass().getName() == orig(this.root.rightChild.key.getClass().getName())
arg1.leftChild.key.getClass().getName() == orig(arg1.leftChild.key.getClass().getName())
arg1.leftChild.key.getClass().getName() == orig(arg1.rightChild.key.getClass().getName())
arg1.leftChild.element == orig(arg1.leftChild.element)
arg1.leftChild.element.getClass().getName() == arg1.rightChild.element.getClass().getName()
arg1.leftChild.element.getClass().getName() == orig(this.root.leftChild.element.getClass().getName())
arg1.leftChild.element.getClass().getName() == orig(this.root.rightChild.element.getClass().getName())
arg1.leftChild.element.getClass().getName() == orig(arg1.leftChild.element.getClass().getName())
arg1.leftChild.element.getClass().getName() == orig(arg1.rightChild.element.getClass().getName())
arg1.leftChild.parent == arg1.rightChild.parent
arg1.leftChild.parent == orig(arg1)
arg1.leftChild.parent == orig(arg1.leftChild.parent)
arg1.leftChild.parent == orig(arg1.rightChild.parent)
arg1.rightChild.key == orig(arg1.rightChild.key)
arg1.rightChild.key.getClass().getName() == orig(this.root.leftChild.key.getClass().getName())
arg1.rightChild.key.getClass().getName() == orig(this.root.rightChild.key.getClass().getName())
arg1.rightChild.key.getClass().getName() == orig(arg1.leftChild.key.getClass().getName())
arg1.rightChild.key.getClass().getName() == orig(arg1.rightChild.key.getClass().getName())
arg1.rightChild.element == orig(arg1.rightChild.element)
arg1.rightChild.element.getClass().getName() == orig(this.root.leftChild.element.getClass().getName())
arg1.rightChild.element.getClass().getName() == orig(this.root.rightChild.element.getClass().getName())
arg1.rightChild.element.getClass().getName() == orig(arg1.leftChild.element.getClass().getName())
arg1.rightChild.element.getClass().getName() == orig(arg1.rightChild.element.getClass().getName())
arg1.rightChild.parent == orig(arg1)
arg1.rightChild.parent == orig(arg1.leftChild.parent)
arg1.rightChild.parent == orig(arg1.rightChild.parent)
this.root != null
this.root.rightChild != null
arg0.key != null
arg0.element != null
arg0.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.parent != null
arg0.parent.key != null
arg0.parent.element != null
arg0.leftChild == null
arg0.rightChild == null
arg1.key != null
arg1.element != null
arg1.parent.key != null
arg1.parent.element != null
arg1.parent.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg1.leftChild.key != null
arg1.leftChild.element != null
arg1.leftChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg1.leftChild.parent != null
arg1.rightChild.key != null
arg1.rightChild.element != null
arg1.rightChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg1.rightChild.parent != null
this.root.leftChild.key.getClass().getName() != arg0.element.getClass().getName()
this.root.leftChild.key.getClass().getName() != arg1.parent.element.getClass().getName()
this.root.leftChild.key.getClass().getName() != arg1.leftChild.element.getClass().getName()
this.root.leftChild.key.getClass().getName() != arg1.rightChild.element.getClass().getName()
this.root.leftChild.key.getClass().getName() != orig(this.root.leftChild.element.getClass().getName())
this.root.leftChild.key.getClass().getName() != orig(this.root.rightChild.element.getClass().getName())
this.root.leftChild.key.getClass().getName() != orig(arg1.leftChild.element.getClass().getName())
this.root.leftChild.key.getClass().getName() != orig(arg1.rightChild.element.getClass().getName())
this.root.leftChild.element.getClass().getName() != arg0.key.getClass().getName()
this.root.leftChild.element.getClass().getName() != arg1.parent.key.getClass().getName()
this.root.leftChild.element.getClass().getName() != arg1.leftChild.key.getClass().getName()
this.root.leftChild.element.getClass().getName() != arg1.rightChild.key.getClass().getName()
this.root.leftChild.element.getClass().getName() != orig(this.root.leftChild.key.getClass().getName())
this.root.leftChild.element.getClass().getName() != orig(this.root.rightChild.key.getClass().getName())
this.root.leftChild.element.getClass().getName() != orig(arg1.leftChild.key.getClass().getName())
this.root.leftChild.element.getClass().getName() != orig(arg1.rightChild.key.getClass().getName())
arg0.key.getClass().getName() != arg0.element.getClass().getName()
arg0.key.getClass().getName() != arg1.parent.element.getClass().getName()
arg0.key.getClass().getName() != arg1.leftChild.element.getClass().getName()
arg0.key.getClass().getName() != arg1.rightChild.element.getClass().getName()
arg0.key.getClass().getName() != orig(this.root.leftChild.element.getClass().getName())
arg0.key.getClass().getName() != orig(this.root.rightChild.element.getClass().getName())
arg0.key.getClass().getName() != orig(arg1.leftChild.element.getClass().getName())
arg0.key.getClass().getName() != orig(arg1.rightChild.element.getClass().getName())
arg0.element.getClass().getName() != arg1.parent.key.getClass().getName()
arg0.element.getClass().getName() != arg1.leftChild.key.getClass().getName()
arg0.element.getClass().getName() != arg1.rightChild.key.getClass().getName()
arg0.element.getClass().getName() != orig(this.root.leftChild.key.getClass().getName())
arg0.element.getClass().getName() != orig(this.root.rightChild.key.getClass().getName())
arg0.element.getClass().getName() != orig(arg1.leftChild.key.getClass().getName())
arg0.element.getClass().getName() != orig(arg1.rightChild.key.getClass().getName())
arg1.parent.key.getClass().getName() != arg1.parent.element.getClass().getName()
arg1.parent.key.getClass().getName() != arg1.leftChild.element.getClass().getName()
arg1.parent.key.getClass().getName() != arg1.rightChild.element.getClass().getName()
arg1.parent.key.getClass().getName() != orig(this.root.leftChild.element.getClass().getName())
arg1.parent.key.getClass().getName() != orig(this.root.rightChild.element.getClass().getName())
arg1.parent.key.getClass().getName() != orig(arg1.leftChild.element.getClass().getName())
arg1.parent.key.getClass().getName() != orig(arg1.rightChild.element.getClass().getName())
arg1.parent.element.getClass().getName() != arg1.leftChild.key.getClass().getName()
arg1.parent.element.getClass().getName() != arg1.rightChild.key.getClass().getName()
arg1.parent.element.getClass().getName() != orig(this.root.leftChild.key.getClass().getName())
arg1.parent.element.getClass().getName() != orig(this.root.rightChild.key.getClass().getName())
arg1.parent.element.getClass().getName() != orig(arg1.leftChild.key.getClass().getName())
arg1.parent.element.getClass().getName() != orig(arg1.rightChild.key.getClass().getName())
arg1.leftChild.key.getClass().getName() != arg1.leftChild.element.getClass().getName()
arg1.leftChild.key.getClass().getName() != arg1.rightChild.element.getClass().getName()
arg1.leftChild.key.getClass().getName() != orig(this.root.leftChild.element.getClass().getName())
arg1.leftChild.key.getClass().getName() != orig(this.root.rightChild.element.getClass().getName())
arg1.leftChild.key.getClass().getName() != orig(arg1.leftChild.element.getClass().getName())
arg1.leftChild.key.getClass().getName() != orig(arg1.rightChild.element.getClass().getName())
arg1.leftChild.element.getClass().getName() != arg1.rightChild.key.getClass().getName()
arg1.leftChild.element.getClass().getName() != orig(this.root.leftChild.key.getClass().getName())
arg1.leftChild.element.getClass().getName() != orig(this.root.rightChild.key.getClass().getName())
arg1.leftChild.element.getClass().getName() != orig(arg1.leftChild.key.getClass().getName())
arg1.leftChild.element.getClass().getName() != orig(arg1.rightChild.key.getClass().getName())
arg1.rightChild.key.getClass().getName() != arg1.rightChild.element.getClass().getName()
arg1.rightChild.key.getClass().getName() != orig(this.root.leftChild.element.getClass().getName())
arg1.rightChild.key.getClass().getName() != orig(this.root.rightChild.element.getClass().getName())
arg1.rightChild.key.getClass().getName() != orig(arg1.leftChild.element.getClass().getName())
arg1.rightChild.key.getClass().getName() != orig(arg1.rightChild.element.getClass().getName())
arg1.rightChild.element.getClass().getName() != orig(this.root.leftChild.key.getClass().getName())
arg1.rightChild.element.getClass().getName() != orig(this.root.rightChild.key.getClass().getName())
arg1.rightChild.element.getClass().getName() != orig(arg1.leftChild.key.getClass().getName())
arg1.rightChild.element.getClass().getName() != orig(arg1.rightChild.key.getClass().getName())
===========================================================================
es.uc3m.eda.tree.BSTree.insert(java.lang.Comparable, java.lang.Object):::ENTER
this.root.key.getClass().getName() == arg0.getClass().getName()
this.root.element.getClass().getName() == arg1.getClass().getName()
this.root.leftChild.key.getClass().getName() == arg0.getClass().getName()
this.root.leftChild.element.getClass().getName() == arg1.getClass().getName()
this.root.rightChild.key.getClass().getName() == arg0.getClass().getName()
this.root.rightChild.element.getClass().getName() == arg1.getClass().getName()
arg0 != null
arg1 != null
arg1.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
this.root.key.getClass().getName() != arg1.getClass().getName()
this.root.element.getClass().getName() != arg0.getClass().getName()
this.root.leftChild.key.getClass().getName() != arg1.getClass().getName()
this.root.leftChild.element.getClass().getName() != arg0.getClass().getName()
this.root.rightChild.key.getClass().getName() != arg1.getClass().getName()
this.root.rightChild.element.getClass().getName() != arg0.getClass().getName()
arg0.getClass().getName() != arg1.getClass().getName()
===========================================================================
es.uc3m.eda.tree.BSTree.insert(java.lang.Comparable, java.lang.Object):::EXIT28
this.root.key == orig(arg0)
this.root.element == orig(arg1)
this.root.leftChild == this.root.rightChild
this.root.leftChild == orig(this.root)
this.root.leftChild == null
orig(arg1) has only one value
===========================================================================
es.uc3m.eda.tree.BSTree.insert(java.lang.Comparable, java.lang.Object):::EXIT31
this.root == orig(this.root)
orig(this.root.key.getClass().getName()) == orig(arg0.getClass().getName())
orig(this.root.element.getClass().getName()) == orig(arg1.getClass().getName())
this.root.rightChild != null
===========================================================================
es.uc3m.eda.tree.BSTree.insert(java.lang.Comparable, java.lang.Object):::EXIT
this.root == orig(this.root.leftChild.parent)
this.root == orig(this.root.rightChild.parent)
this.root.key == orig(this.root.key)
this.root.key.getClass().getName() == orig(arg0.getClass().getName())
this.root.element == orig(this.root.element)
this.root.element.getClass().getName() == orig(arg1.getClass().getName())
this.root.parent == orig(this.root.parent)
this.root.leftChild.key == orig(this.root.leftChild.key)
this.root.leftChild.key.getClass().getName() == orig(this.root.leftChild.key.getClass().getName())
this.root.leftChild.key.getClass().getName() == orig(this.root.rightChild.key.getClass().getName())
this.root.leftChild.key.getClass().getName() == orig(arg0.getClass().getName())
this.root.leftChild.element == orig(this.root.leftChild.element)
this.root.leftChild.element.getClass().getName() == orig(this.root.leftChild.element.getClass().getName())
this.root.leftChild.element.getClass().getName() == orig(this.root.rightChild.element.getClass().getName())
this.root.leftChild.element.getClass().getName() == orig(arg1.getClass().getName())
this.root.leftChild.parent == orig(this.root)
this.root.leftChild.parent == orig(this.root.leftChild.parent)
this.root.leftChild.parent == orig(this.root.rightChild.parent)
this.root.rightChild.key == orig(this.root.rightChild.key)
this.root.rightChild.key.getClass().getName() == orig(this.root.key.getClass().getName())
this.root.rightChild.key.getClass().getName() == orig(this.root.leftChild.key.getClass().getName())
this.root.rightChild.key.getClass().getName() == orig(this.root.rightChild.key.getClass().getName())
this.root.rightChild.key.getClass().getName() == orig(arg0.getClass().getName())
this.root.rightChild.element == orig(this.root.rightChild.element)
this.root.rightChild.element.getClass().getName() == orig(this.root.element.getClass().getName())
this.root.rightChild.element.getClass().getName() == orig(this.root.leftChild.element.getClass().getName())
this.root.rightChild.element.getClass().getName() == orig(this.root.rightChild.element.getClass().getName())
this.root.rightChild.element.getClass().getName() == orig(arg1.getClass().getName())
this.root.rightChild.parent == orig(this.root)
this.root.rightChild.parent == orig(this.root.leftChild.parent)
this.root.rightChild.parent == orig(this.root.rightChild.parent)
this.root.rightChild.leftChild == orig(this.root.rightChild.leftChild)
(this.root.rightChild != null)  <==>  (orig(this.root) != null)
(this.root.rightChild != null)  ==>  (orig(this.root) == orig(this.root.leftChild.parent))
(this.root.rightChild != null)  ==>  (orig(this.root) == orig(this.root.rightChild.parent))
(this.root.rightChild != null)  ==>  (orig(this.root.element) != null)
(this.root.rightChild != null)  ==>  (orig(this.root.element) has only one value)
(this.root.rightChild != null)  ==>  (orig(this.root.key) != null)
(this.root.rightChild != null)  ==>  (orig(this.root.leftChild.element) != null)
(this.root.rightChild != null)  ==>  (orig(this.root.leftChild.element) has only one value)
(this.root.rightChild != null)  ==>  (orig(this.root.leftChild.element.getClass().getName()) != orig(arg0.getClass().getName()))
(this.root.rightChild != null)  ==>  (orig(this.root.leftChild.element.getClass().getName()) != orig(this.root.rightChild.key.getClass().getName()))
(this.root.rightChild != null)  ==>  (orig(this.root.leftChild.element.getClass().getName()) == es.uc3m.recordplayer.logic.Song.class)
(this.root.rightChild != null)  ==>  (orig(this.root.leftChild.element.getClass().getName()) == orig(arg1.getClass().getName()))
(this.root.rightChild != null)  ==>  (orig(this.root.leftChild.element.getClass().getName()) == orig(this.root.rightChild.element.getClass().getName()))
(this.root.rightChild != null)  ==>  (orig(this.root.leftChild.key) != null)
(this.root.rightChild != null)  ==>  (orig(this.root.leftChild.key) has only one value)
(this.root.rightChild != null)  ==>  (orig(this.root.leftChild.key.getClass().getName()) != orig(arg1.getClass().getName()))
(this.root.rightChild != null)  ==>  (orig(this.root.leftChild.key.getClass().getName()) != orig(this.root.leftChild.element.getClass().getName()))
(this.root.rightChild != null)  ==>  (orig(this.root.leftChild.key.getClass().getName()) != orig(this.root.rightChild.element.getClass().getName()))
(this.root.rightChild != null)  ==>  (orig(this.root.leftChild.key.getClass().getName()) == java.lang.String.class)
(this.root.rightChild != null)  ==>  (orig(this.root.leftChild.key.getClass().getName()) == orig(arg0.getClass().getName()))
(this.root.rightChild != null)  ==>  (orig(this.root.leftChild.key.getClass().getName()) == orig(this.root.rightChild.key.getClass().getName()))
(this.root.rightChild != null)  ==>  (orig(this.root.leftChild.parent) != null)
(this.root.rightChild != null)  ==>  (orig(this.root.leftChild.parent) == orig(this.root.rightChild.parent))
(this.root.rightChild != null)  ==>  (orig(this.root.leftChild.parent) has only one value)
(this.root.rightChild != null)  ==>  (orig(this.root.parent) == null)
(this.root.rightChild != null)  ==>  (orig(this.root.rightChild.element) != null)
(this.root.rightChild != null)  ==>  (orig(this.root.rightChild.element) has only one value)
(this.root.rightChild != null)  ==>  (orig(this.root.rightChild.element.getClass().getName()) != orig(arg0.getClass().getName()))
(this.root.rightChild != null)  ==>  (orig(this.root.rightChild.element.getClass().getName()) == es.uc3m.recordplayer.logic.Song.class)
(this.root.rightChild != null)  ==>  (orig(this.root.rightChild.element.getClass().getName()) == orig(arg1.getClass().getName()))
(this.root.rightChild != null)  ==>  (orig(this.root.rightChild.key) != null)
(this.root.rightChild != null)  ==>  (orig(this.root.rightChild.key.getClass().getName()) != orig(arg1.getClass().getName()))
(this.root.rightChild != null)  ==>  (orig(this.root.rightChild.key.getClass().getName()) != orig(this.root.rightChild.element.getClass().getName()))
(this.root.rightChild != null)  ==>  (orig(this.root.rightChild.key.getClass().getName()) == orig(arg0.getClass().getName()))
(this.root.rightChild != null)  ==>  (orig(this.root.rightChild.leftChild) == null)
(this.root.rightChild != null)  ==>  (orig(this.root.rightChild.parent) != null)
(this.root.rightChild != null)  ==>  (this.root == orig(this.root))
(this.root.rightChild != null)  ==>  (this.root == orig(this.root.leftChild.parent))
(this.root.rightChild != null)  ==>  (this.root == orig(this.root.rightChild.parent))
(this.root.rightChild != null)  ==>  (this.root == this.root.leftChild.parent)
(this.root.rightChild != null)  ==>  (this.root == this.root.rightChild.parent)
(this.root.rightChild != null)  ==>  (this.root.element == orig(this.root.element))
(this.root.rightChild != null)  ==>  (this.root.key == orig(this.root.key))
(this.root.rightChild != null)  ==>  (this.root.leftChild.element != null)
(this.root.rightChild != null)  ==>  (this.root.leftChild.element == orig(this.root.leftChild.element))
(this.root.rightChild != null)  ==>  (this.root.leftChild.element has only one value)
(this.root.rightChild != null)  ==>  (this.root.leftChild.element.getClass().getName() != orig(arg0.getClass().getName()))
(this.root.rightChild != null)  ==>  (this.root.leftChild.element.getClass().getName() != orig(this.root.leftChild.key.getClass().getName()))
(this.root.rightChild != null)  ==>  (this.root.leftChild.element.getClass().getName() != orig(this.root.rightChild.key.getClass().getName()))
(this.root.rightChild != null)  ==>  (this.root.leftChild.element.getClass().getName() != this.root.rightChild.key.getClass().getName())
(this.root.rightChild != null)  ==>  (this.root.leftChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class)
(this.root.rightChild != null)  ==>  (this.root.leftChild.element.getClass().getName() == orig(arg1.getClass().getName()))
(this.root.rightChild != null)  ==>  (this.root.leftChild.element.getClass().getName() == orig(this.root.leftChild.element.getClass().getName()))
(this.root.rightChild != null)  ==>  (this.root.leftChild.element.getClass().getName() == orig(this.root.rightChild.element.getClass().getName()))
(this.root.rightChild != null)  ==>  (this.root.leftChild.element.getClass().getName() == this.root.rightChild.element.getClass().getName())
(this.root.rightChild != null)  ==>  (this.root.leftChild.key != null)
(this.root.rightChild != null)  ==>  (this.root.leftChild.key == orig(this.root.leftChild.key))
(this.root.rightChild != null)  ==>  (this.root.leftChild.key has only one value)
(this.root.rightChild != null)  ==>  (this.root.leftChild.key.getClass().getName() != orig(arg1.getClass().getName()))
(this.root.rightChild != null)  ==>  (this.root.leftChild.key.getClass().getName() != orig(this.root.leftChild.element.getClass().getName()))
(this.root.rightChild != null)  ==>  (this.root.leftChild.key.getClass().getName() != orig(this.root.rightChild.element.getClass().getName()))
(this.root.rightChild != null)  ==>  (this.root.leftChild.key.getClass().getName() != this.root.leftChild.element.getClass().getName())
(this.root.rightChild != null)  ==>  (this.root.leftChild.key.getClass().getName() != this.root.rightChild.element.getClass().getName())
(this.root.rightChild != null)  ==>  (this.root.leftChild.key.getClass().getName() == java.lang.String.class)
(this.root.rightChild != null)  ==>  (this.root.leftChild.key.getClass().getName() == orig(arg0.getClass().getName()))
(this.root.rightChild != null)  ==>  (this.root.leftChild.key.getClass().getName() == orig(this.root.leftChild.key.getClass().getName()))
(this.root.rightChild != null)  ==>  (this.root.leftChild.key.getClass().getName() == orig(this.root.rightChild.key.getClass().getName()))
(this.root.rightChild != null)  ==>  (this.root.leftChild.key.getClass().getName() == this.root.rightChild.key.getClass().getName())
(this.root.rightChild != null)  ==>  (this.root.leftChild.parent != null)
(this.root.rightChild != null)  ==>  (this.root.leftChild.parent == orig(this.root))
(this.root.rightChild != null)  ==>  (this.root.leftChild.parent == orig(this.root.leftChild.parent))
(this.root.rightChild != null)  ==>  (this.root.leftChild.parent == orig(this.root.rightChild.parent))
(this.root.rightChild != null)  ==>  (this.root.leftChild.parent == this.root.rightChild.parent)
(this.root.rightChild != null)  ==>  (this.root.leftChild.parent has only one value)
(this.root.rightChild != null)  ==>  (this.root.parent == orig(this.root.parent))
(this.root.rightChild != null)  ==>  (this.root.rightChild.element != null)
(this.root.rightChild != null)  ==>  (this.root.rightChild.element == orig(this.root.rightChild.element))
(this.root.rightChild != null)  ==>  (this.root.rightChild.element has only one value)
(this.root.rightChild != null)  ==>  (this.root.rightChild.element.getClass().getName() != orig(arg0.getClass().getName()))
(this.root.rightChild != null)  ==>  (this.root.rightChild.element.getClass().getName() != orig(this.root.leftChild.key.getClass().getName()))
(this.root.rightChild != null)  ==>  (this.root.rightChild.element.getClass().getName() != orig(this.root.rightChild.key.getClass().getName()))
(this.root.rightChild != null)  ==>  (this.root.rightChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class)
(this.root.rightChild != null)  ==>  (this.root.rightChild.element.getClass().getName() == orig(arg1.getClass().getName()))
(this.root.rightChild != null)  ==>  (this.root.rightChild.element.getClass().getName() == orig(this.root.leftChild.element.getClass().getName()))
(this.root.rightChild != null)  ==>  (this.root.rightChild.element.getClass().getName() == orig(this.root.rightChild.element.getClass().getName()))
(this.root.rightChild != null)  ==>  (this.root.rightChild.key != null)
(this.root.rightChild != null)  ==>  (this.root.rightChild.key == orig(this.root.rightChild.key))
(this.root.rightChild != null)  ==>  (this.root.rightChild.key.getClass().getName() != orig(arg1.getClass().getName()))
(this.root.rightChild != null)  ==>  (this.root.rightChild.key.getClass().getName() != orig(this.root.leftChild.element.getClass().getName()))
(this.root.rightChild != null)  ==>  (this.root.rightChild.key.getClass().getName() != orig(this.root.rightChild.element.getClass().getName()))
(this.root.rightChild != null)  ==>  (this.root.rightChild.key.getClass().getName() != this.root.rightChild.element.getClass().getName())
(this.root.rightChild != null)  ==>  (this.root.rightChild.key.getClass().getName() == orig(arg0.getClass().getName()))
(this.root.rightChild != null)  ==>  (this.root.rightChild.key.getClass().getName() == orig(this.root.leftChild.key.getClass().getName()))
(this.root.rightChild != null)  ==>  (this.root.rightChild.key.getClass().getName() == orig(this.root.rightChild.key.getClass().getName()))
(this.root.rightChild != null)  ==>  (this.root.rightChild.leftChild == null)
(this.root.rightChild != null)  ==>  (this.root.rightChild.leftChild == orig(this.root.rightChild.leftChild))
(this.root.rightChild != null)  ==>  (this.root.rightChild.parent != null)
(this.root.rightChild != null)  ==>  (this.root.rightChild.parent == orig(this.root.leftChild.parent))
(this.root.rightChild != null)  ==>  (this.root.rightChild.parent == orig(this.root.rightChild.parent))
(this.root.rightChild == null)  <==>  (orig(this.root) == null)
(this.root.rightChild == null)  ==>  (orig(arg1) has only one value)
(this.root.rightChild == null)  ==>  (this.root.element == orig(arg1))
(this.root.rightChild == null)  ==>  (this.root.key == orig(arg0))
(this.root.rightChild == null)  ==>  (this.root.leftChild == null)
(this.root.rightChild == null)  ==>  (this.root.leftChild == orig(this.root))
(this.root.rightChild == null)  ==>  (this.root.leftChild == this.root.rightChild)
this.root != null
this.root.leftChild.key.getClass().getName() != orig(this.root.leftChild.element.getClass().getName())
this.root.leftChild.key.getClass().getName() != orig(this.root.rightChild.element.getClass().getName())
this.root.leftChild.key.getClass().getName() != orig(arg1.getClass().getName())
this.root.leftChild.element.getClass().getName() != orig(this.root.leftChild.key.getClass().getName())
this.root.leftChild.element.getClass().getName() != orig(this.root.rightChild.key.getClass().getName())
this.root.leftChild.element.getClass().getName() != orig(arg0.getClass().getName())
this.root.rightChild.key.getClass().getName() != orig(this.root.leftChild.element.getClass().getName())
this.root.rightChild.key.getClass().getName() != orig(this.root.rightChild.element.getClass().getName())
this.root.rightChild.key.getClass().getName() != orig(arg1.getClass().getName())
this.root.rightChild.element.getClass().getName() != orig(this.root.leftChild.key.getClass().getName())
this.root.rightChild.element.getClass().getName() != orig(this.root.rightChild.key.getClass().getName())
this.root.rightChild.element.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
es.uc3m.recordplayer.logic.Axle:::OBJECT
this.waitingRecords.getClass().getName() == es.uc3m.eda.list.singlelink.SQueue.class
this.pinned == false
this.turntable == null
this.size == 0
===========================================================================
es.uc3m.recordplayer.logic.Axle.Axle():::EXIT
===========================================================================
es.uc3m.recordplayer.logic.Axle.isPinned():::ENTER
this has only one value
this.waitingRecords has only one value
===========================================================================
es.uc3m.recordplayer.logic.Axle.isPinned():::EXIT
this.waitingRecords == orig(this.waitingRecords)
this.waitingRecords.getClass().getName() == orig(this.waitingRecords.getClass().getName())
this.pinned == return
this.turntable == orig(this.turntable)
this.size == orig(this.size)
return == orig(this.pinned)
this.waitingRecords has only one value
return == false
===========================================================================
es.uc3m.recordplayer.logic.Axle.isPinned():::EXIT;condition="not(return == true)"
===========================================================================
es.uc3m.recordplayer.logic.Genre:::OBJECT
===========================================================================
es.uc3m.recordplayer.logic.Genre.Genre(java.lang.String, int):::ENTER
===========================================================================
es.uc3m.recordplayer.logic.Genre.Genre(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
===========================================================================
es.uc3m.recordplayer.logic.Performer:::OBJECT
this.name != null
this.type != null
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE has only one value
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE != null
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE has only one value
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE != null
es.uc3m.recordplayer.logic.PerformerType.GROUP has only one value
es.uc3m.recordplayer.logic.PerformerType.GROUP != null
es.uc3m.recordplayer.logic.PerformerType.OTHERS has only one value
es.uc3m.recordplayer.logic.PerformerType.OTHERS != null
es.uc3m.recordplayer.logic.PerformerType.$VALUES has only one value
es.uc3m.recordplayer.logic.PerformerType.$VALUES != null
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() == es.uc3m.recordplayer.logic.PerformerType[].class
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] contains no nulls and has only one value, of length 4
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] elements != null
es.uc3m.recordplayer.logic.PerformerType.$VALUES[].getClass().getName() == [es.uc3m.recordplayer.logic.PerformerType, es.uc3m.recordplayer.logic.PerformerType, es.uc3m.recordplayer.logic.PerformerType, es.uc3m.recordplayer.logic.PerformerType]
es.uc3m.recordplayer.logic.PerformerType.$VALUES[].getClass().getName() elements == es.uc3m.recordplayer.logic.PerformerType.class
size(es.uc3m.recordplayer.logic.PerformerType.$VALUES[]) == 4
===========================================================================
es.uc3m.recordplayer.logic.Performer.Performer(java.lang.String, es.uc3m.recordplayer.logic.PerformerType):::ENTER
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE has only one value
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE has only one value
es.uc3m.recordplayer.logic.PerformerType.GROUP has only one value
es.uc3m.recordplayer.logic.PerformerType.OTHERS has only one value
es.uc3m.recordplayer.logic.PerformerType.$VALUES has only one value
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() == es.uc3m.recordplayer.logic.PerformerType[].class
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] contains no nulls and has only one value, of length 4
es.uc3m.recordplayer.logic.PerformerType.$VALUES[].getClass().getName() == [es.uc3m.recordplayer.logic.PerformerType, es.uc3m.recordplayer.logic.PerformerType, es.uc3m.recordplayer.logic.PerformerType, es.uc3m.recordplayer.logic.PerformerType]
es.uc3m.recordplayer.logic.PerformerType.$VALUES[].getClass().getName() elements == es.uc3m.recordplayer.logic.PerformerType.class
size(es.uc3m.recordplayer.logic.PerformerType.$VALUES[]) == 4
===========================================================================
es.uc3m.recordplayer.logic.Performer.Performer(java.lang.String, es.uc3m.recordplayer.logic.PerformerType):::EXIT
this.name == orig(arg0)
this.type == orig(arg1)
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE)
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE)
es.uc3m.recordplayer.logic.PerformerType.GROUP == orig(es.uc3m.recordplayer.logic.PerformerType.GROUP)
es.uc3m.recordplayer.logic.PerformerType.OTHERS == orig(es.uc3m.recordplayer.logic.PerformerType.OTHERS)
es.uc3m.recordplayer.logic.PerformerType.$VALUES == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES)
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES[])
arg0.toString == orig(arg0.toString)
===========================================================================
es.uc3m.recordplayer.logic.Performer.getName():::ENTER
===========================================================================
es.uc3m.recordplayer.logic.Performer.getName():::EXIT
this.name == return
this.name.toString == orig(this.name.toString)
this.type == orig(this.type)
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE)
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE)
es.uc3m.recordplayer.logic.PerformerType.GROUP == orig(es.uc3m.recordplayer.logic.PerformerType.GROUP)
es.uc3m.recordplayer.logic.PerformerType.OTHERS == orig(es.uc3m.recordplayer.logic.PerformerType.OTHERS)
es.uc3m.recordplayer.logic.PerformerType.$VALUES == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES)
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES[])
return == orig(this.name)
return != null
===========================================================================
es.uc3m.recordplayer.logic.Performer.toString():::ENTER
===========================================================================
es.uc3m.recordplayer.logic.Performer.toString():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.type == orig(this.type)
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE)
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE)
es.uc3m.recordplayer.logic.PerformerType.GROUP == orig(es.uc3m.recordplayer.logic.PerformerType.GROUP)
es.uc3m.recordplayer.logic.PerformerType.OTHERS == orig(es.uc3m.recordplayer.logic.PerformerType.OTHERS)
es.uc3m.recordplayer.logic.PerformerType.$VALUES == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES)
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES[])
return != null
===========================================================================
es.uc3m.recordplayer.logic.PerformerType:::OBJECT
===========================================================================
es.uc3m.recordplayer.logic.PerformerType.PerformerType(java.lang.String, int):::ENTER
===========================================================================
es.uc3m.recordplayer.logic.PerformerType.PerformerType(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
===========================================================================
es.uc3m.recordplayer.logic.Player:::OBJECT
this has only one value
this.turntable has only one value
this.turntable.getClass().getName() == es.uc3m.recordplayer.logic.Turntable.class
this.axle has only one value
this.axle.getClass().getName() == es.uc3m.recordplayer.logic.Axle.class
this.stylus has only one value
this.stylus.getClass().getName() == es.uc3m.recordplayer.logic.Stylus.class
===========================================================================
es.uc3m.recordplayer.logic.Player.Player():::EXIT
===========================================================================
es.uc3m.recordplayer.logic.Player.isAxlePinned():::ENTER
===========================================================================
es.uc3m.recordplayer.logic.Player.isAxlePinned():::EXIT
this.turntable == orig(this.turntable)
this.turntable.getClass().getName() == orig(this.turntable.getClass().getName())
this.axle == orig(this.axle)
this.axle.getClass().getName() == orig(this.axle.getClass().getName())
this.stylus == orig(this.stylus)
this.stylus.getClass().getName() == orig(this.stylus.getClass().getName())
return == false
===========================================================================
es.uc3m.recordplayer.logic.Player.isAxlePinned():::EXIT;condition="not(return == true)"
===========================================================================
es.uc3m.recordplayer.logic.Record:::OBJECT
this.sides.getClass().getName() == es.uc3m.recordplayer.logic.Side[].class
this.sides[] elements != null
this.sides[].getClass().getName() == [es.uc3m.recordplayer.logic.Side, es.uc3m.recordplayer.logic.Side]
this.sides[].getClass().getName() elements == es.uc3m.recordplayer.logic.Side.class
this.sides[].songs elements != null
this.sides[].songs.array elements != null
this.sides[].songs.array.getClass().getName() == [java.lang.Object[], java.lang.Object[]]
this.sides[].songs.array.getClass().getName() elements == java.lang.Object[].class
this.sides[].totalDuration == [-1.0, -1.0]
this.sides[].totalDuration elements == -1.0
this.sides[].record elements != null
this.sides[].record elements are equal
this.sides[].record.sides elements != null
this.sides[].record.sides elements are equal
this.sides[].record.sides.getClass().getName() == [es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[]]
this.sides[].record.sides.getClass().getName() elements == es.uc3m.recordplayer.logic.Side[].class
this.sides[].record.recordPerformer elements != null
this.sides[].record.recordPerformer elements are equal
this.sides[].record.title elements != null
this.sides[].record.title elements are equal
this.sides[].record.editionYear elements are equal
this.sides[].record.recordSpeed elements != null
this.sides[].record.recordSpeed elements are equal
this.sides[].sideIndex == [0, 1]
this.sides[].sideIndex elements one of { 0, 1 }
this.sides[].sideIndex sorted by <
this.recordPerformer.name != null
this.recordPerformer.type != null
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE has only one value
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE != null
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE has only one value
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE != null
es.uc3m.recordplayer.logic.PerformerType.GROUP has only one value
es.uc3m.recordplayer.logic.PerformerType.GROUP != null
es.uc3m.recordplayer.logic.PerformerType.OTHERS has only one value
es.uc3m.recordplayer.logic.PerformerType.OTHERS != null
es.uc3m.recordplayer.logic.PerformerType.$VALUES has only one value
es.uc3m.recordplayer.logic.PerformerType.$VALUES != null
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() == es.uc3m.recordplayer.logic.PerformerType[].class
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] contains no nulls and has only one value, of length 4
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] elements != null
es.uc3m.recordplayer.logic.PerformerType.$VALUES[].getClass().getName() == [es.uc3m.recordplayer.logic.PerformerType, es.uc3m.recordplayer.logic.PerformerType, es.uc3m.recordplayer.logic.PerformerType, es.uc3m.recordplayer.logic.PerformerType]
es.uc3m.recordplayer.logic.PerformerType.$VALUES[].getClass().getName() elements == es.uc3m.recordplayer.logic.PerformerType.class
this.editionYear >= 0
es.uc3m.recordplayer.logic.Rpm.SPEED33 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED33 != null
es.uc3m.recordplayer.logic.Rpm.SPEED45 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED45 != null
es.uc3m.recordplayer.logic.Rpm.SPEED72 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED72 != null
es.uc3m.recordplayer.logic.Rpm.$VALUES has only one value
es.uc3m.recordplayer.logic.Rpm.$VALUES != null
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == es.uc3m.recordplayer.logic.Rpm[].class
es.uc3m.recordplayer.logic.Rpm.$VALUES[] contains no nulls and has only one value, of length 3
es.uc3m.recordplayer.logic.Rpm.$VALUES[] elements != null
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() == [es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm]
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() elements == es.uc3m.recordplayer.logic.Rpm.class
size(this.sides[]) == 2
size(es.uc3m.recordplayer.logic.PerformerType.$VALUES[]) == 4
size(es.uc3m.recordplayer.logic.Rpm.$VALUES[]) == 3
===========================================================================
es.uc3m.recordplayer.logic.Record.Record():::EXIT
this.sides == null
this.recordPerformer == null
this.title == null
this.editionYear == 0
this.recordSpeed == null
===========================================================================
es.uc3m.recordplayer.logic.Record.Record(es.uc3m.recordplayer.logic.Performer, java.lang.String, int, es.uc3m.recordplayer.logic.Rpm):::ENTER
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE has only one value
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE has only one value
es.uc3m.recordplayer.logic.PerformerType.GROUP has only one value
es.uc3m.recordplayer.logic.PerformerType.OTHERS has only one value
es.uc3m.recordplayer.logic.PerformerType.$VALUES has only one value
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() == es.uc3m.recordplayer.logic.PerformerType[].class
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] contains no nulls and has only one value, of length 4
es.uc3m.recordplayer.logic.PerformerType.$VALUES[].getClass().getName() == [es.uc3m.recordplayer.logic.PerformerType, es.uc3m.recordplayer.logic.PerformerType, es.uc3m.recordplayer.logic.PerformerType, es.uc3m.recordplayer.logic.PerformerType]
es.uc3m.recordplayer.logic.PerformerType.$VALUES[].getClass().getName() elements == es.uc3m.recordplayer.logic.PerformerType.class
es.uc3m.recordplayer.logic.Rpm.SPEED33 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED45 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED72 has only one value
es.uc3m.recordplayer.logic.Rpm.$VALUES has only one value
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == es.uc3m.recordplayer.logic.Rpm[].class
es.uc3m.recordplayer.logic.Rpm.$VALUES[] contains no nulls and has only one value, of length 3
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() == [es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm]
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() elements == es.uc3m.recordplayer.logic.Rpm.class
size(es.uc3m.recordplayer.logic.PerformerType.$VALUES[]) == 4
size(es.uc3m.recordplayer.logic.Rpm.$VALUES[]) == 3
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.Record.Record(es.uc3m.recordplayer.logic.Performer, java.lang.String, int, es.uc3m.recordplayer.logic.Rpm):::EXIT
this.recordPerformer == orig(arg0)
this.recordPerformer.name == arg0.name
this.recordPerformer.type == arg0.type
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE)
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE)
es.uc3m.recordplayer.logic.PerformerType.GROUP == orig(es.uc3m.recordplayer.logic.PerformerType.GROUP)
es.uc3m.recordplayer.logic.PerformerType.OTHERS == orig(es.uc3m.recordplayer.logic.PerformerType.OTHERS)
es.uc3m.recordplayer.logic.PerformerType.$VALUES == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES)
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES[])
this.title == orig(arg1)
this.editionYear == orig(arg2)
this.recordSpeed == orig(arg3)
es.uc3m.recordplayer.logic.Rpm.SPEED33 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED33)
es.uc3m.recordplayer.logic.Rpm.SPEED45 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED45)
es.uc3m.recordplayer.logic.Rpm.SPEED72 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED72)
es.uc3m.recordplayer.logic.Rpm.$VALUES == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES)
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.Rpm.$VALUES[] == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES[])
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.type == orig(arg0.type)
arg1.toString == orig(arg1.toString)
this.sides in this.sides[].record.sides
this.sides[].record.sides elements == this.sides
this.sides.getClass().getName() in this.sides[].record.sides.getClass().getName()
this.sides.getClass().getName() != es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName()
this.sides.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
this.recordPerformer in this.sides[].record.recordPerformer
this.sides[].record.recordPerformer elements == this.recordPerformer
this.sides[].record.title elements == this.title
this.title in this.sides[].record.title
this.editionYear in this.sides[].record.editionYear
this.sides[].record.editionYear elements == this.editionYear
this.recordSpeed in this.sides[].record.recordSpeed
this.sides[].record.recordSpeed elements == this.recordSpeed
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.Record.addTrack(int, java.lang.String, es.uc3m.recordplayer.logic.Genre, int, float, boolean, boolean, boolean):::ENTER
this.sides != null
this.recordPerformer != null
this.title != null
this.recordSpeed != null
arg0 one of { 0, 1 }
arg1 != null
arg2 != null
es.uc3m.recordplayer.logic.Genre.CLASSICAL has only one value
es.uc3m.recordplayer.logic.Genre.CLASSICAL != null
es.uc3m.recordplayer.logic.Genre.POP has only one value
es.uc3m.recordplayer.logic.Genre.POP != null
es.uc3m.recordplayer.logic.Genre.ROCK has only one value
es.uc3m.recordplayer.logic.Genre.ROCK != null
es.uc3m.recordplayer.logic.Genre.JAZZ has only one value
es.uc3m.recordplayer.logic.Genre.JAZZ != null
es.uc3m.recordplayer.logic.Genre.DANCE has only one value
es.uc3m.recordplayer.logic.Genre.DANCE != null
es.uc3m.recordplayer.logic.Genre.OTHERS has only one value
es.uc3m.recordplayer.logic.Genre.OTHERS != null
es.uc3m.recordplayer.logic.Genre.$VALUES has only one value
es.uc3m.recordplayer.logic.Genre.$VALUES != null
es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName() == es.uc3m.recordplayer.logic.Genre[].class
es.uc3m.recordplayer.logic.Genre.$VALUES[] contains no nulls and has only one value, of length 6
es.uc3m.recordplayer.logic.Genre.$VALUES[] elements != null
es.uc3m.recordplayer.logic.Genre.$VALUES[].getClass().getName() == [es.uc3m.recordplayer.logic.Genre, es.uc3m.recordplayer.logic.Genre, es.uc3m.recordplayer.logic.Genre, es.uc3m.recordplayer.logic.Genre, es.uc3m.recordplayer.logic.Genre, es.uc3m.recordplayer.logic.Genre]
es.uc3m.recordplayer.logic.Genre.$VALUES[].getClass().getName() elements == es.uc3m.recordplayer.logic.Genre.class
arg7 == true
size(es.uc3m.recordplayer.logic.Genre.$VALUES[]) == 6
this in this.sides[].record
this.sides[].record elements == this
this.sides.getClass().getName() in this.sides[].record.sides.getClass().getName()
this.sides.getClass().getName() != es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName()
this.sides.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
this.sides.getClass().getName() != es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName()
this.recordPerformer in this.sides[].record.recordPerformer
this.sides[].record.recordPerformer elements == this.recordPerformer
this.sides[].record.title elements == this.title
this.title in this.sides[].record.title
this.editionYear in this.sides[].record.editionYear
this.sides[].record.editionYear elements == this.editionYear
this.recordSpeed in this.sides[].record.recordSpeed
this.sides[].record.recordSpeed elements == this.recordSpeed
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() != es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName()
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() != es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName()
arg0 <= size(this.sides[])-1
===========================================================================
es.uc3m.recordplayer.logic.Record.addTrack(int, java.lang.String, es.uc3m.recordplayer.logic.Genre, int, float, boolean, boolean, boolean):::EXIT
this.sides == orig(this.sides)
this.sides.getClass().getName() == orig(this.sides.getClass().getName())
this.sides[] == orig(this.sides[])
this.sides[].songs == orig(this.sides[].songs)
this.sides[].totalDuration == orig(this.sides[].totalDuration)
this.sides[].record == orig(this.sides[].record)
this.sides[].record.sides == orig(this.sides[].record.sides)
this.sides[].record.recordPerformer == orig(this.sides[].record.recordPerformer)
this.sides[].record.title == orig(this.sides[].record.title)
this.sides[].record.editionYear == orig(this.sides[].record.editionYear)
this.sides[].record.recordSpeed == orig(this.sides[].record.recordSpeed)
this.sides[].sideIndex == orig(this.sides[].sideIndex)
this.recordPerformer == orig(this.recordPerformer)
this.recordPerformer.name == orig(this.recordPerformer.name)
this.recordPerformer.name.toString == orig(this.recordPerformer.name.toString)
this.recordPerformer.type == orig(this.recordPerformer.type)
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE)
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE)
es.uc3m.recordplayer.logic.PerformerType.GROUP == orig(es.uc3m.recordplayer.logic.PerformerType.GROUP)
es.uc3m.recordplayer.logic.PerformerType.OTHERS == orig(es.uc3m.recordplayer.logic.PerformerType.OTHERS)
es.uc3m.recordplayer.logic.PerformerType.$VALUES == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES)
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES[])
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.editionYear == orig(this.editionYear)
this.recordSpeed == orig(this.recordSpeed)
es.uc3m.recordplayer.logic.Rpm.SPEED33 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED33)
es.uc3m.recordplayer.logic.Rpm.SPEED45 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED45)
es.uc3m.recordplayer.logic.Rpm.SPEED72 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED72)
es.uc3m.recordplayer.logic.Rpm.$VALUES == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES)
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.Rpm.$VALUES[] == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES[])
arg1.toString == orig(arg1.toString)
es.uc3m.recordplayer.logic.Genre.CLASSICAL == orig(es.uc3m.recordplayer.logic.Genre.CLASSICAL)
es.uc3m.recordplayer.logic.Genre.POP == orig(es.uc3m.recordplayer.logic.Genre.POP)
es.uc3m.recordplayer.logic.Genre.ROCK == orig(es.uc3m.recordplayer.logic.Genre.ROCK)
es.uc3m.recordplayer.logic.Genre.JAZZ == orig(es.uc3m.recordplayer.logic.Genre.JAZZ)
es.uc3m.recordplayer.logic.Genre.DANCE == orig(es.uc3m.recordplayer.logic.Genre.DANCE)
es.uc3m.recordplayer.logic.Genre.OTHERS == orig(es.uc3m.recordplayer.logic.Genre.OTHERS)
es.uc3m.recordplayer.logic.Genre.$VALUES == orig(es.uc3m.recordplayer.logic.Genre.$VALUES)
es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.Genre.$VALUES[] == orig(es.uc3m.recordplayer.logic.Genre.$VALUES[])
this.sides != null
this.recordPerformer != null
this.title != null
this.recordSpeed != null
es.uc3m.recordplayer.logic.Genre.CLASSICAL has only one value
es.uc3m.recordplayer.logic.Genre.CLASSICAL != null
es.uc3m.recordplayer.logic.Genre.POP has only one value
es.uc3m.recordplayer.logic.Genre.POP != null
es.uc3m.recordplayer.logic.Genre.ROCK has only one value
es.uc3m.recordplayer.logic.Genre.ROCK != null
es.uc3m.recordplayer.logic.Genre.JAZZ has only one value
es.uc3m.recordplayer.logic.Genre.JAZZ != null
es.uc3m.recordplayer.logic.Genre.DANCE has only one value
es.uc3m.recordplayer.logic.Genre.DANCE != null
es.uc3m.recordplayer.logic.Genre.OTHERS has only one value
es.uc3m.recordplayer.logic.Genre.OTHERS != null
es.uc3m.recordplayer.logic.Genre.$VALUES has only one value
es.uc3m.recordplayer.logic.Genre.$VALUES != null
es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName() == es.uc3m.recordplayer.logic.Genre[].class
es.uc3m.recordplayer.logic.Genre.$VALUES[] contains no nulls and has only one value, of length 6
es.uc3m.recordplayer.logic.Genre.$VALUES[] elements != null
es.uc3m.recordplayer.logic.Genre.$VALUES[].getClass().getName() == [es.uc3m.recordplayer.logic.Genre, es.uc3m.recordplayer.logic.Genre, es.uc3m.recordplayer.logic.Genre, es.uc3m.recordplayer.logic.Genre, es.uc3m.recordplayer.logic.Genre, es.uc3m.recordplayer.logic.Genre]
es.uc3m.recordplayer.logic.Genre.$VALUES[].getClass().getName() elements == es.uc3m.recordplayer.logic.Genre.class
size(es.uc3m.recordplayer.logic.Genre.$VALUES[]) == 6
this.sides.getClass().getName() in this.sides[].record.sides.getClass().getName()
this.sides.getClass().getName() != es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName()
this.sides.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
this.sides.getClass().getName() != es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName()
orig(this) in this.sides[].record
this.sides[].record elements == orig(this)
this.recordPerformer in this.sides[].record.recordPerformer
this.sides[].record.recordPerformer elements == this.recordPerformer
this.sides[].record.title elements == this.title
this.title in this.sides[].record.title
this.editionYear in this.sides[].record.editionYear
this.sides[].record.editionYear elements == this.editionYear
this.recordSpeed in this.sides[].record.recordSpeed
this.sides[].record.recordSpeed elements == this.recordSpeed
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() != es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName()
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() != es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName()
orig(arg0) <= size(this.sides[])-1
===========================================================================
es.uc3m.recordplayer.logic.Record.getEditionYear():::ENTER
this.recordPerformer.type == es.uc3m.recordplayer.logic.PerformerType.GROUP
this.sides != null
this.sides[].record.recordPerformer contains no nulls and has only one value, of length 2
this.sides[].record.recordPerformer elements has only one value
this.sides[].record.title.toString elements one of { "Mecano", "Perdido en mi habitaci\ufffdn" }
this.sides[].record.title.toString one of { [Mecano, Mecano], [Perdido en mi habitaci�n, Perdido en mi habitaci�n] }
this.sides[].record.editionYear elements one of { 1981, 1982 }
this.sides[].record.editionYear one of { [1981, 1981], [1982, 1982] }
this.recordPerformer has only one value
this.recordPerformer != null
this.recordPerformer.name has only one value
this.recordPerformer.name.toString == "Mecano"
this.title != null
this.title.toString one of { "Mecano", "Perdido en mi habitaci\ufffdn" }
this.editionYear one of { 1981, 1982 }
this.recordSpeed != null
this in this.sides[].record
this.sides[].record elements == this
this.sides in this.sides[].record.sides
this.sides[].record.sides elements == this.sides
this.sides.getClass().getName() in this.sides[].record.sides.getClass().getName()
this.sides.getClass().getName() != es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName()
this.sides.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
this.recordPerformer in this.sides[].record.recordPerformer
this.sides[].record.recordPerformer elements == this.recordPerformer
this.sides[].record.title elements == this.title
this.title in this.sides[].record.title
this.editionYear in this.sides[].record.editionYear
this.sides[].record.editionYear elements == this.editionYear
this.recordSpeed in this.sides[].record.recordSpeed
this.sides[].record.recordSpeed elements == this.recordSpeed
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.Record.getEditionYear():::EXIT
this.sides == orig(this.sides)
this.sides.getClass().getName() == orig(this.sides.getClass().getName())
this.sides[] == orig(this.sides[])
this.sides[].songs == orig(this.sides[].songs)
this.sides[].songs.array == orig(this.sides[].songs.array)
this.sides[].totalDuration == orig(this.sides[].totalDuration)
this.sides[].record == orig(this.sides[].record)
this.sides[].record.sides == orig(this.sides[].record.sides)
this.sides[].record.recordPerformer == orig(this.sides[].record.recordPerformer)
this.sides[].record.title == orig(this.sides[].record.title)
this.sides[].record.editionYear == orig(this.sides[].record.editionYear)
this.sides[].record.recordSpeed == orig(this.sides[].record.recordSpeed)
this.sides[].sideIndex == orig(this.sides[].sideIndex)
this.recordPerformer == orig(this.recordPerformer)
this.recordPerformer.name == orig(this.recordPerformer.name)
this.recordPerformer.name.toString == orig(this.recordPerformer.name.toString)
this.recordPerformer.type == es.uc3m.recordplayer.logic.PerformerType.GROUP
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE)
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE)
es.uc3m.recordplayer.logic.PerformerType.GROUP == orig(this.recordPerformer.type)
es.uc3m.recordplayer.logic.PerformerType.GROUP == orig(es.uc3m.recordplayer.logic.PerformerType.GROUP)
es.uc3m.recordplayer.logic.PerformerType.OTHERS == orig(es.uc3m.recordplayer.logic.PerformerType.OTHERS)
es.uc3m.recordplayer.logic.PerformerType.$VALUES == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES)
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES[])
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.editionYear == return
this.recordSpeed == orig(this.recordSpeed)
es.uc3m.recordplayer.logic.Rpm.SPEED33 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED33)
es.uc3m.recordplayer.logic.Rpm.SPEED45 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED45)
es.uc3m.recordplayer.logic.Rpm.SPEED72 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED72)
es.uc3m.recordplayer.logic.Rpm.$VALUES == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES)
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.Rpm.$VALUES[] == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES[])
return == orig(this.editionYear)
this.sides != null
this.sides[].record.recordPerformer contains no nulls and has only one value, of length 2
this.sides[].record.recordPerformer elements has only one value
this.sides[].record.title.toString elements one of { "Mecano", "Perdido en mi habitaci\ufffdn" }
this.sides[].record.title.toString one of { [Mecano, Mecano], [Perdido en mi habitaci�n, Perdido en mi habitaci�n] }
this.sides[].record.editionYear elements one of { 1981, 1982 }
this.sides[].record.editionYear one of { [1981, 1981], [1982, 1982] }
this.recordPerformer has only one value
this.recordPerformer != null
this.recordPerformer.name has only one value
this.recordPerformer.name.toString == "Mecano"
this.title != null
this.title.toString one of { "Mecano", "Perdido en mi habitaci\ufffdn" }
this.recordSpeed != null
return one of { 1981, 1982 }
this.sides in this.sides[].record.sides
this.sides[].record.sides elements == this.sides
this.sides.getClass().getName() in this.sides[].record.sides.getClass().getName()
this.sides.getClass().getName() != es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName()
this.sides.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
orig(this) in this.sides[].record
this.sides[].record elements == orig(this)
this.recordPerformer in this.sides[].record.recordPerformer
this.sides[].record.recordPerformer elements == this.recordPerformer
this.sides[].record.title elements == this.title
this.title in this.sides[].record.title
return in this.sides[].record.editionYear
this.sides[].record.editionYear elements == return
this.recordSpeed in this.sides[].record.recordSpeed
this.sides[].record.recordSpeed elements == this.recordSpeed
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.Record.getRecordPerformer():::ENTER
this.sides != null
this.recordPerformer != null
this.title != null
this.recordSpeed != null
this in this.sides[].record
this.sides[].record elements == this
this.sides in this.sides[].record.sides
this.sides[].record.sides elements == this.sides
this.sides.getClass().getName() in this.sides[].record.sides.getClass().getName()
this.sides.getClass().getName() != es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName()
this.sides.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
this.recordPerformer in this.sides[].record.recordPerformer
this.sides[].record.recordPerformer elements == this.recordPerformer
this.sides[].record.title elements == this.title
this.title in this.sides[].record.title
this.editionYear in this.sides[].record.editionYear
this.sides[].record.editionYear elements == this.editionYear
this.recordSpeed in this.sides[].record.recordSpeed
this.sides[].record.recordSpeed elements == this.recordSpeed
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.Record.getRecordPerformer():::EXIT
this.sides == orig(this.sides)
this.sides.getClass().getName() == orig(this.sides.getClass().getName())
this.sides[] == orig(this.sides[])
this.sides[].songs == orig(this.sides[].songs)
this.sides[].songs.array == orig(this.sides[].songs.array)
this.sides[].totalDuration == orig(this.sides[].totalDuration)
this.sides[].record == orig(this.sides[].record)
this.sides[].record.sides == orig(this.sides[].record.sides)
this.sides[].record.recordPerformer == orig(this.sides[].record.recordPerformer)
this.sides[].record.title == orig(this.sides[].record.title)
this.sides[].record.editionYear == orig(this.sides[].record.editionYear)
this.sides[].record.recordSpeed == orig(this.sides[].record.recordSpeed)
this.sides[].sideIndex == orig(this.sides[].sideIndex)
this.recordPerformer == return
this.recordPerformer.name == return.name
this.recordPerformer.name.toString == orig(this.recordPerformer.name.toString)
this.recordPerformer.type == return.type
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE)
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE)
es.uc3m.recordplayer.logic.PerformerType.GROUP == orig(es.uc3m.recordplayer.logic.PerformerType.GROUP)
es.uc3m.recordplayer.logic.PerformerType.OTHERS == orig(es.uc3m.recordplayer.logic.PerformerType.OTHERS)
es.uc3m.recordplayer.logic.PerformerType.$VALUES == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES)
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES[])
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.editionYear == orig(this.editionYear)
this.recordSpeed == orig(this.recordSpeed)
es.uc3m.recordplayer.logic.Rpm.SPEED33 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED33)
es.uc3m.recordplayer.logic.Rpm.SPEED45 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED45)
es.uc3m.recordplayer.logic.Rpm.SPEED72 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED72)
es.uc3m.recordplayer.logic.Rpm.$VALUES == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES)
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.Rpm.$VALUES[] == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES[])
return == orig(this.recordPerformer)
return.name == orig(this.recordPerformer.name)
return.type == orig(this.recordPerformer.type)
this.sides != null
this.title != null
this.recordSpeed != null
return != null
return.name != null
return.type != null
this.sides in this.sides[].record.sides
this.sides[].record.sides elements == this.sides
this.sides.getClass().getName() in this.sides[].record.sides.getClass().getName()
this.sides.getClass().getName() != es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName()
this.sides.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
orig(this) in this.sides[].record
this.sides[].record elements == orig(this)
return in this.sides[].record.recordPerformer
this.sides[].record.recordPerformer elements == return
this.sides[].record.title elements == this.title
this.title in this.sides[].record.title
this.editionYear in this.sides[].record.editionYear
this.sides[].record.editionYear elements == this.editionYear
this.recordSpeed in this.sides[].record.recordSpeed
this.sides[].record.recordSpeed elements == this.recordSpeed
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.Record.getSide(int):::ENTER
this.sides != null
this.recordPerformer != null
this.title != null
this.recordSpeed != null
arg0 one of { 0, 1 }
this in this.sides[].record
this.sides[].record elements == this
this.sides.getClass().getName() in this.sides[].record.sides.getClass().getName()
this.sides.getClass().getName() != es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName()
this.sides.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
this.recordPerformer in this.sides[].record.recordPerformer
this.sides[].record.recordPerformer elements == this.recordPerformer
this.sides[].record.title elements == this.title
this.title in this.sides[].record.title
this.editionYear in this.sides[].record.editionYear
this.sides[].record.editionYear elements == this.editionYear
this.recordSpeed in this.sides[].record.recordSpeed
this.sides[].record.recordSpeed elements == this.recordSpeed
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
arg0 <= size(this.sides[])-1
===========================================================================
es.uc3m.recordplayer.logic.Record.getSide(int):::EXIT
this.sides == return.record.sides
this.sides == orig(this.sides)
this.sides.getClass().getName() == return.record.sides.getClass().getName()
this.sides.getClass().getName() == orig(this.sides.getClass().getName())
this.sides[] == return.record.sides[]
this.sides[] == orig(this.sides[])
this.sides[].songs == orig(this.sides[].songs)
this.sides[].songs.array == orig(this.sides[].songs.array)
this.sides[].totalDuration == orig(this.sides[].totalDuration)
this.sides[].record == orig(this.sides[].record)
this.sides[].record.sides == orig(this.sides[].record.sides)
this.sides[].record.recordPerformer == orig(this.sides[].record.recordPerformer)
this.sides[].record.title == orig(this.sides[].record.title)
this.sides[].record.editionYear == orig(this.sides[].record.editionYear)
this.sides[].record.recordSpeed == orig(this.sides[].record.recordSpeed)
this.sides[].sideIndex == orig(this.sides[].sideIndex)
this.recordPerformer == return.record.recordPerformer
this.recordPerformer == orig(this.recordPerformer)
this.recordPerformer.name == orig(this.recordPerformer.name)
this.recordPerformer.name.toString == orig(this.recordPerformer.name.toString)
this.recordPerformer.type == orig(this.recordPerformer.type)
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE)
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE)
es.uc3m.recordplayer.logic.PerformerType.GROUP == orig(es.uc3m.recordplayer.logic.PerformerType.GROUP)
es.uc3m.recordplayer.logic.PerformerType.OTHERS == orig(es.uc3m.recordplayer.logic.PerformerType.OTHERS)
es.uc3m.recordplayer.logic.PerformerType.$VALUES == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES)
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES[])
this.title == return.record.title
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.editionYear == return.record.editionYear
this.editionYear == orig(this.editionYear)
this.recordSpeed == return.record.recordSpeed
this.recordSpeed == orig(this.recordSpeed)
es.uc3m.recordplayer.logic.Rpm.SPEED33 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED33)
es.uc3m.recordplayer.logic.Rpm.SPEED45 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED45)
es.uc3m.recordplayer.logic.Rpm.SPEED72 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED72)
es.uc3m.recordplayer.logic.Rpm.$VALUES == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES)
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.Rpm.$VALUES[] == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES[])
return == this.sides[orig(arg0)]
return == orig(this.sides[post(arg0)])
return == return.record.sides[orig(arg0)]
return == orig(this.sides[arg0])
return.record == orig(this)
this.sides != null
this.recordPerformer != null
this.title != null
this.recordSpeed != null
return.songs != null
return.songs.array != null
return.songs.array.getClass().getName() == java.lang.Object[].class
return.songs.array[] elements != null
return.songs.array[].getClass().getName() elements == es.uc3m.recordplayer.logic.Song.class
return.totalDuration == -1.0
return.record != null
return.record.sides[].songs elements != null
return.record.sides[].totalDuration == [-1.0, -1.0]
return.record.sides[].totalDuration elements == -1.0
return.record.sides[].record elements != null
return.record.sides[].record elements are equal
return.record.sides[].sideIndex == [0, 1]
return.record.sides[].sideIndex elements one of { 0, 1 }
return.record.sides[].sideIndex sorted by <
return.sideIndex one of { 0, 1 }
size(return.songs.array[]) one of { 1, 2, 3 }
this.sides.getClass().getName() in this.sides[].record.sides.getClass().getName()
this.sides.getClass().getName() != es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName()
this.sides.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
this.sides.getClass().getName() != return.songs.array.getClass().getName()
return.songs in this.sides[].songs
return.songs.array in this.sides[].songs.array
return.songs.array.getClass().getName() in this.sides[].songs.array.getClass().getName()
return.totalDuration in this.sides[].totalDuration
this.sides[].totalDuration elements == return.totalDuration
return.record in this.sides[].record
this.sides[].record elements == return.record
orig(this) in this.sides[].record
this.sides[].record elements == orig(this)
this.recordPerformer in this.sides[].record.recordPerformer
this.sides[].record.recordPerformer elements == this.recordPerformer
this.sides[].record.title elements == this.title
this.title in this.sides[].record.title
this.editionYear in this.sides[].record.editionYear
this.sides[].record.editionYear elements == this.editionYear
this.recordSpeed in this.sides[].record.recordSpeed
this.sides[].record.recordSpeed elements == this.recordSpeed
return.sideIndex in this.sides[].sideIndex
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() != return.songs.array.getClass().getName()
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() != return.songs.array.getClass().getName()
return.songs in return.record.sides[].songs
return.record.sides[].totalDuration elements == return.totalDuration
return.totalDuration in return.record.sides[].totalDuration
return.record in return.record.sides[].record
return.record.sides[].record elements == return.record
orig(this) in return.record.sides[].record
return.record.sides[].record elements == orig(this)
return.sideIndex in return.record.sides[].sideIndex
orig(arg0) <= size(this.sides[])-1
===========================================================================
es.uc3m.recordplayer.logic.Record.getTitle():::ENTER
this.sides != null
this.recordPerformer != null
this.title != null
this.recordSpeed != null
this in this.sides[].record
this.sides[].record elements == this
this.sides in this.sides[].record.sides
this.sides[].record.sides elements == this.sides
this.sides.getClass().getName() in this.sides[].record.sides.getClass().getName()
this.sides.getClass().getName() != es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName()
this.sides.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
this.recordPerformer in this.sides[].record.recordPerformer
this.sides[].record.recordPerformer elements == this.recordPerformer
this.sides[].record.title elements == this.title
this.title in this.sides[].record.title
this.editionYear in this.sides[].record.editionYear
this.sides[].record.editionYear elements == this.editionYear
this.recordSpeed in this.sides[].record.recordSpeed
this.sides[].record.recordSpeed elements == this.recordSpeed
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.Record.getTitle():::EXIT
this.sides == orig(this.sides)
this.sides.getClass().getName() == orig(this.sides.getClass().getName())
this.sides[] == orig(this.sides[])
this.sides[].songs == orig(this.sides[].songs)
this.sides[].songs.array == orig(this.sides[].songs.array)
this.sides[].totalDuration == orig(this.sides[].totalDuration)
this.sides[].record == orig(this.sides[].record)
this.sides[].record.sides == orig(this.sides[].record.sides)
this.sides[].record.recordPerformer == orig(this.sides[].record.recordPerformer)
this.sides[].record.title == orig(this.sides[].record.title)
this.sides[].record.editionYear == orig(this.sides[].record.editionYear)
this.sides[].record.recordSpeed == orig(this.sides[].record.recordSpeed)
this.sides[].sideIndex == orig(this.sides[].sideIndex)
this.recordPerformer == orig(this.recordPerformer)
this.recordPerformer.name == orig(this.recordPerformer.name)
this.recordPerformer.name.toString == orig(this.recordPerformer.name.toString)
this.recordPerformer.type == orig(this.recordPerformer.type)
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE)
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE)
es.uc3m.recordplayer.logic.PerformerType.GROUP == orig(es.uc3m.recordplayer.logic.PerformerType.GROUP)
es.uc3m.recordplayer.logic.PerformerType.OTHERS == orig(es.uc3m.recordplayer.logic.PerformerType.OTHERS)
es.uc3m.recordplayer.logic.PerformerType.$VALUES == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES)
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES[])
this.title == return
this.title.toString == orig(this.title.toString)
this.editionYear == orig(this.editionYear)
this.recordSpeed == orig(this.recordSpeed)
es.uc3m.recordplayer.logic.Rpm.SPEED33 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED33)
es.uc3m.recordplayer.logic.Rpm.SPEED45 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED45)
es.uc3m.recordplayer.logic.Rpm.SPEED72 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED72)
es.uc3m.recordplayer.logic.Rpm.$VALUES == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES)
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.Rpm.$VALUES[] == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES[])
return == orig(this.title)
this.sides != null
this.recordPerformer != null
this.recordSpeed != null
return != null
this.sides in this.sides[].record.sides
this.sides[].record.sides elements == this.sides
this.sides.getClass().getName() in this.sides[].record.sides.getClass().getName()
this.sides.getClass().getName() != es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName()
this.sides.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
orig(this) in this.sides[].record
this.sides[].record elements == orig(this)
this.recordPerformer in this.sides[].record.recordPerformer
this.sides[].record.recordPerformer elements == this.recordPerformer
return in this.sides[].record.title
this.sides[].record.title elements == return
this.editionYear in this.sides[].record.editionYear
this.sides[].record.editionYear elements == this.editionYear
this.recordSpeed in this.sides[].record.recordSpeed
this.sides[].record.recordSpeed elements == this.recordSpeed
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.Record.toString():::ENTER
===========================================================================
es.uc3m.recordplayer.logic.Record.toString():::EXIT
this.sides == orig(this.sides)
this.sides.getClass().getName() == orig(this.sides.getClass().getName())
this.sides[] == orig(this.sides[])
this.sides[].songs == orig(this.sides[].songs)
this.sides[].songs.array == orig(this.sides[].songs.array)
this.sides[].totalDuration == orig(this.sides[].totalDuration)
this.sides[].record == orig(this.sides[].record)
this.sides[].record.sides == orig(this.sides[].record.sides)
this.sides[].record.recordPerformer == orig(this.sides[].record.recordPerformer)
this.sides[].record.title == orig(this.sides[].record.title)
this.sides[].record.editionYear == orig(this.sides[].record.editionYear)
this.sides[].record.recordSpeed == orig(this.sides[].record.recordSpeed)
this.sides[].sideIndex == orig(this.sides[].sideIndex)
this.recordPerformer == orig(this.recordPerformer)
this.recordPerformer.name == orig(this.recordPerformer.name)
this.recordPerformer.name.toString == orig(this.recordPerformer.name.toString)
this.recordPerformer.type == orig(this.recordPerformer.type)
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE)
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE)
es.uc3m.recordplayer.logic.PerformerType.GROUP == orig(es.uc3m.recordplayer.logic.PerformerType.GROUP)
es.uc3m.recordplayer.logic.PerformerType.OTHERS == orig(es.uc3m.recordplayer.logic.PerformerType.OTHERS)
es.uc3m.recordplayer.logic.PerformerType.$VALUES == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES)
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES[])
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.editionYear == orig(this.editionYear)
this.recordSpeed == orig(this.recordSpeed)
es.uc3m.recordplayer.logic.Rpm.SPEED33 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED33)
es.uc3m.recordplayer.logic.Rpm.SPEED45 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED45)
es.uc3m.recordplayer.logic.Rpm.SPEED72 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED72)
es.uc3m.recordplayer.logic.Rpm.$VALUES == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES)
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.Rpm.$VALUES[] == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES[])
===========================================================================
es.uc3m.recordplayer.logic.RecordCollection:::OBJECT
this.firstNode.nextNode.elem.getClass().getName() == this.firstNode.elem.getClass().getName()
this has only one value
this.firstNode.nextNode has only one value
this.firstNode.nextNode.nextNode has only one value
this.firstNode.nextNode.elem has only one value
this.firstNode.elem has only one value
this.firstNode.elem.getClass().getName() == es.uc3m.recordplayer.logic.Record.class
===========================================================================
es.uc3m.recordplayer.logic.RecordCollection.RecordCollection():::EXIT
this.firstNode == null
===========================================================================
es.uc3m.recordplayer.logic.RecordCollection.getSideByTrackTitle(java.lang.String):::ENTER
this.firstNode has only one value
arg0 has only one value
arg0.toString == "Sad But True"
===========================================================================
es.uc3m.recordplayer.logic.RecordCollection.getSideByTrackTitle(java.lang.String):::EXIT109
===========================================================================
es.uc3m.recordplayer.logic.RecordCollection.getSideByTrackTitle(java.lang.String):::EXIT
this.firstNode == orig(this.firstNode)
this.firstNode.nextNode == orig(this.firstNode.nextNode)
this.firstNode.nextNode.nextNode == orig(this.firstNode.nextNode.nextNode)
this.firstNode.nextNode.elem == orig(this.firstNode.nextNode.elem)
this.firstNode.elem == orig(this.firstNode.elem)
this.firstNode.elem.getClass().getName() == orig(this.firstNode.nextNode.elem.getClass().getName())
this.firstNode.elem.getClass().getName() == orig(this.firstNode.elem.getClass().getName())
arg0.toString == orig(arg0.toString)
this.firstNode has only one value
arg0.toString == "Sad But True"
return has only one value
return.songs has only one value
return.songs.array has only one value
return.songs.array.getClass().getName() == java.lang.Object[].class
return.songs.array[] contains no nulls and has only one value, of length 2
return.songs.array[].getClass().getName() == [es.uc3m.recordplayer.logic.Song, es.uc3m.recordplayer.logic.Song]
return.songs.array[].getClass().getName() elements == es.uc3m.recordplayer.logic.Song.class
return.totalDuration == -1.0
return.record has only one value
return.record.sides has only one value
return.record.sides.getClass().getName() == es.uc3m.recordplayer.logic.Side[].class
return.record.sides[] contains no nulls and has only one value, of length 2
return.record.sides[].getClass().getName() == [es.uc3m.recordplayer.logic.Side, es.uc3m.recordplayer.logic.Side]
return.record.sides[].getClass().getName() elements == es.uc3m.recordplayer.logic.Side.class
return.record.sides[].songs contains no nulls and has only one value, of length 2
return.record.sides[].totalDuration == [-1.0, -1.0]
return.record.sides[].totalDuration elements == -1.0
return.record.sides[].record contains no nulls and has only one value, of length 2
return.record.sides[].record elements has only one value
return.record.sides[].sideIndex == [0, 1]
return.record.sides[].sideIndex elements one of { 0, 1 }
return.record.recordPerformer has only one value
return.record.title has only one value
return.record.title.toString == "Metallica(Black Album)"
return.record.editionYear == 1991
return.record.recordSpeed has only one value
return.sideIndex == 0
size(return.songs.array[]) == 2
size(return.record.sides[]) == 2
return in return.record.sides[]
return.songs in return.record.sides[].songs
return.record.sides[].totalDuration elements == return.totalDuration
return.totalDuration in return.record.sides[].totalDuration
return.record in return.record.sides[].record
return.record.sides[].record elements == return.record
return.sideIndex in return.record.sides[].sideIndex
===========================================================================
es.uc3m.recordplayer.logic.RecordShelf:::OBJECT
this.slots.getClass().getName() == this.labels.getClass().getName()
size(this.slots[]) == size(this.labels[])
this has only one value
this.slots has only one value
this.slots != null
this.slots.getClass().getName() == es.uc3m.recordplayer.logic.Record[].class
this.labels has only one value
this.labels != null
size(this.slots[]) == 16
===========================================================================
es.uc3m.recordplayer.logic.RecordShelf.RecordShelf(int):::ENTER
arg0 == 16
===========================================================================
es.uc3m.recordplayer.logic.RecordShelf.RecordShelf(int):::EXIT
orig(arg0) == size(this.slots[])
orig(arg0) == size(this.labels[])
this.slots[] contains only nulls and has only one value, of length 16
this.slots[] elements == null
this.slots[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.slots[].getClass().getName() elements == null
this.slots[].sides.getClass().getName() == [daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject]
this.slots[].sides.getClass().getName() elements == daikon.chicory.NonsensicalObject.class
this.labels[] contains only nulls and has only one value, of length 16
this.labels[] elements == null
this.labels[].sides.getClass().getName() == [daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject]
this.labels[].sides.getClass().getName() elements == daikon.chicory.NonsensicalObject.class
this.slots[] elements == this.slots[orig(arg0)-1]
this.labels[] elements == this.labels[orig(arg0)-1]
===========================================================================
es.uc3m.recordplayer.logic.RecordShelf.getLabelOfSlot(int):::ENTER
this.slots[] contains only nulls and has only one value, of length 16
this.slots[] elements == null
this.slots[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.slots[].getClass().getName() elements == null
this.slots[].sides.getClass().getName() == [daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject]
this.slots[].sides.getClass().getName() elements == daikon.chicory.NonsensicalObject.class
this.labels[].getClass().getName() == [es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, null, null, null, null, null, null, null, null, null]
this.labels[].sides.getClass().getName() == [es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject]
arg0 >= 0
this.labels[arg0] != null
this.slots[] elements == this.slots[arg0]
arg0 < size(this.slots[])-1
===========================================================================
es.uc3m.recordplayer.logic.RecordShelf.getLabelOfSlot(int):::EXIT
this.slots == orig(this.slots)
this.slots.getClass().getName() == orig(this.slots.getClass().getName())
this.slots.getClass().getName() == orig(this.labels.getClass().getName())
this.slots[] == orig(this.slots[])
this.labels == orig(this.labels)
this.labels[] == orig(this.labels[])
return == this.labels[orig(arg0)]
return == orig(this.labels[post(arg0)])
return == orig(this.labels[arg0])
size(this.slots[]) == orig(size(this.labels[]))
this.slots[] contains only nulls and has only one value, of length 16
this.slots[] elements == null
this.slots[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.slots[].getClass().getName() elements == null
this.slots[].sides.getClass().getName() == [daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject]
this.slots[].sides.getClass().getName() elements == daikon.chicory.NonsensicalObject.class
this.labels[].getClass().getName() == [es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, null, null, null, null, null, null, null, null, null]
this.labels[].sides.getClass().getName() == [es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject]
return != null
return.sides != null
return.sides.getClass().getName() == es.uc3m.recordplayer.logic.Side[].class
return.sides[] elements != null
return.sides[].getClass().getName() == [es.uc3m.recordplayer.logic.Side, es.uc3m.recordplayer.logic.Side]
return.sides[].getClass().getName() elements == es.uc3m.recordplayer.logic.Side.class
return.sides[].songs elements != null
return.sides[].totalDuration == [-1.0, -1.0]
return.sides[].totalDuration elements == -1.0
return.sides[].record elements != null
return.sides[].record elements are equal
return.sides[].sideIndex == [0, 1]
return.sides[].sideIndex elements one of { 0, 1 }
return.sides[].sideIndex sorted by <
return.recordPerformer != null
return.recordPerformer.name != null
return.recordPerformer.type != null
return.title != null
return.recordSpeed != null
es.uc3m.recordplayer.logic.Rpm.SPEED33 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED33 != null
es.uc3m.recordplayer.logic.Rpm.SPEED45 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED45 != null
es.uc3m.recordplayer.logic.Rpm.SPEED72 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED72 != null
es.uc3m.recordplayer.logic.Rpm.$VALUES has only one value
es.uc3m.recordplayer.logic.Rpm.$VALUES != null
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == es.uc3m.recordplayer.logic.Rpm[].class
es.uc3m.recordplayer.logic.Rpm.$VALUES[] contains no nulls and has only one value, of length 3
es.uc3m.recordplayer.logic.Rpm.$VALUES[] elements != null
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() == [es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm]
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() elements == es.uc3m.recordplayer.logic.Rpm.class
size(return.sides[]) == 2
size(es.uc3m.recordplayer.logic.Rpm.$VALUES[]) == 3
this.slots.getClass().getName() != return.sides.getClass().getName()
this.slots.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
this.slots[] elements == this.slots[orig(arg0)]
return.sides.getClass().getName() in this.labels[].sides.getClass().getName()
return in return.sides[].record
return.sides[].record elements == return
return.sides.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
orig(arg0) < size(this.slots[])-1
===========================================================================
es.uc3m.recordplayer.logic.RecordShelf.getRecordFromSlot(int):::ENTER
arg0 <= size(this.slots[])-1
===========================================================================
es.uc3m.recordplayer.logic.RecordShelf.getRecordFromSlot(int):::EXIT38
this.slots[] == orig(this.slots[])
this.slots[orig(arg0)] == this.slots[orig(arg0)-1]
this.slots[orig(arg0)] == orig(this.slots[post(arg0)-1])
this.slots[orig(arg0)] == orig(this.slots[arg0-1])
this.slots[] contains only nulls and has only one value, of length 16
this.slots[] elements == null
this.slots[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.slots[].getClass().getName() elements == null
this.slots[].sides.getClass().getName() == [daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject]
this.slots[].sides.getClass().getName() elements == daikon.chicory.NonsensicalObject.class
this.labels[].getClass().getName() == [es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, null, null, null, null, null, null, null, null, null]
this.labels[].sides.getClass().getName() == [es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject]
return == null
this.slots[] elements == this.slots[orig(arg0)]
===========================================================================
es.uc3m.recordplayer.logic.RecordShelf.getRecordFromSlot(int):::EXIT43
this.labels[orig(arg0)] == null
orig(arg0) < size(this.slots[])-1
===========================================================================
es.uc3m.recordplayer.logic.RecordShelf.getRecordFromSlot(int):::EXIT
this.slots == orig(this.slots)
this.slots.getClass().getName() == orig(this.slots.getClass().getName())
this.slots.getClass().getName() == orig(this.labels.getClass().getName())
this.labels == orig(this.labels)
this.labels[] == orig(this.labels[])
size(this.slots[]) == orig(size(this.slots[]))
size(this.slots[]) == orig(size(this.labels[]))
(return == null)  ==>  (orig(this.slots[]) contains only nulls and has only one value, of length 16)
(return == null)  ==>  (orig(this.slots[]) elements == null)
(return == null)  ==>  (orig(this.slots[]) elements == orig(this.slots[arg0-1]))
(return == null)  ==>  (orig(this.slots[]) elements == orig(this.slots[arg0]))
(return == null)  ==>  (orig(this.slots[]) elements == orig(this.slots[post(arg0)-1]))
(return == null)  ==>  (orig(this.slots[]) elements == this.slots[arg0-1])
(return == null)  ==>  (orig(this.slots[]) elements == this.slots[orig(arg0)-1])
(return == null)  ==>  (orig(this.slots[]) elements == this.slots[orig(arg0)])
(return == null)  ==>  (orig(this.slots[].getClass().getName()) == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null])
(return == null)  ==>  (orig(this.slots[].getClass().getName()) elements == null)
(return == null)  ==>  (orig(this.slots[].sides.getClass().getName()) == [daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject])
(return == null)  ==>  (orig(this.slots[].sides.getClass().getName()) elements == daikon.chicory.NonsensicalObject.class)
(return == null)  ==>  (this.labels[].getClass().getName() == [es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, null, null, null, null, null, null, null, null, null])
(return == null)  ==>  (this.labels[].sides.getClass().getName() == [es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject])
(return == null)  ==>  (this.slots[] contains only nulls and has only one value, of length 16)
(return == null)  ==>  (this.slots[] elements == null)
(return == null)  ==>  (this.slots[] elements == orig(this.slots[arg0-1]))
(return == null)  ==>  (this.slots[] elements == orig(this.slots[arg0]))
(return == null)  ==>  (this.slots[] elements == orig(this.slots[post(arg0)-1]))
(return == null)  ==>  (this.slots[] elements == this.slots[arg0-1])
(return == null)  ==>  (this.slots[] elements == this.slots[orig(arg0)-1])
(return == null)  ==>  (this.slots[] elements == this.slots[orig(arg0)])
(return == null)  ==>  (this.slots[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null])
(return == null)  ==>  (this.slots[].getClass().getName() elements == null)
(return == null)  ==>  (this.slots[].sides.getClass().getName() == [daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject])
(return == null)  ==>  (this.slots[].sides.getClass().getName() elements == daikon.chicory.NonsensicalObject.class)
(return == null)  ==>  (this.slots[arg0-1] == this.slots[orig(arg0)])
(return == null)  ==>  (this.slots[orig(arg0)] == orig(this.slots[arg0-1]))
(return == null)  ==>  (this.slots[orig(arg0)] == orig(this.slots[post(arg0)-1]))
(return == null)  ==>  (this.slots[orig(arg0)] == this.slots[orig(arg0)-1])
return.sides.getClass().getName() == es.uc3m.recordplayer.logic.Side[].class
return.sides[].getClass().getName() == [es.uc3m.recordplayer.logic.Side, es.uc3m.recordplayer.logic.Side]
return.sides[].getClass().getName() elements == es.uc3m.recordplayer.logic.Side.class
return.sides[].totalDuration == [-1.0, -1.0]
return.sides[].totalDuration elements == -1.0
return.sides[].record elements are equal
return.sides[].sideIndex == [0, 1]
return.sides[].sideIndex elements one of { 0, 1 }
return.sides[].sideIndex sorted by <
es.uc3m.recordplayer.logic.Rpm.SPEED33 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED33 != null
es.uc3m.recordplayer.logic.Rpm.SPEED45 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED45 != null
es.uc3m.recordplayer.logic.Rpm.SPEED72 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED72 != null
es.uc3m.recordplayer.logic.Rpm.$VALUES has only one value
es.uc3m.recordplayer.logic.Rpm.$VALUES != null
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == es.uc3m.recordplayer.logic.Rpm[].class
es.uc3m.recordplayer.logic.Rpm.$VALUES[] contains no nulls and has only one value, of length 3
es.uc3m.recordplayer.logic.Rpm.$VALUES[] elements != null
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() == [es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm]
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() elements == es.uc3m.recordplayer.logic.Rpm.class
size(return.sides[]) == 2
size(es.uc3m.recordplayer.logic.Rpm.$VALUES[]) == 3
this.slots[orig(arg0)] == null
this.slots.getClass().getName() != return.sides.getClass().getName()
this.slots.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
return in return.sides[].record
return.sides[].record elements == return
return.sides.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
return.sides.getClass().getName() in orig(this.slots[].sides.getClass().getName())
this.slots[orig(arg0)] in orig(this.slots[])
orig(arg0) <= size(this.slots[])-1
===========================================================================
es.uc3m.recordplayer.logic.RecordShelf.getSize():::ENTER
===========================================================================
es.uc3m.recordplayer.logic.RecordShelf.getSize():::EXIT
this.slots == orig(this.slots)
this.slots.getClass().getName() == orig(this.slots.getClass().getName())
this.slots.getClass().getName() == orig(this.labels.getClass().getName())
this.slots[] == orig(this.slots[])
this.labels == orig(this.labels)
this.labels[] == orig(this.labels[])
return == size(this.slots[])
return == size(this.labels[])
return == orig(size(this.slots[]))
return == orig(size(this.labels[]))
return == 16
this.slots[return-1] == null
this.labels[return-1] == null
===========================================================================
es.uc3m.recordplayer.logic.RecordShelf.isEmptySlot(int):::ENTER
arg0 >= 0
arg0 <= size(this.slots[])-1
===========================================================================
es.uc3m.recordplayer.logic.RecordShelf.isEmptySlot(int):::EXIT
this.slots == orig(this.slots)
this.slots.getClass().getName() == orig(this.slots.getClass().getName())
this.slots.getClass().getName() == orig(this.labels.getClass().getName())
this.slots[] == orig(this.slots[])
this.labels == orig(this.labels)
this.labels[] == orig(this.labels[])
size(this.slots[]) == orig(size(this.labels[]))
(return == false)  ==>  (orig(arg0) < size(this.slots[])-1)
(return == false)  ==>  (this.labels[orig(arg0)] == null)
(return == true)  <==>  (this.slots[orig(arg0)] == null)
(return == true)  ==>  (this.labels[].getClass().getName() one of { [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, null, null, null, null, null, null, null, null, null] })
(return == true)  ==>  (this.labels[].sides.getClass().getName() one of { [daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject], [es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject] })
orig(arg0) <= size(this.slots[])-1
===========================================================================
es.uc3m.recordplayer.logic.RecordShelf.isEmptySlot(int):::EXIT;condition="return == true"
this.labels[].getClass().getName() one of { [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, es.uc3m.recordplayer.logic.Record, null, null, null, null, null, null, null, null, null] }
this.labels[].sides.getClass().getName() one of { [daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject], [es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], es.uc3m.recordplayer.logic.Side[], daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject] }
return == true
this.slots[orig(arg0)] == null
===========================================================================
es.uc3m.recordplayer.logic.RecordShelf.isEmptySlot(int):::EXIT;condition="not(return == true)"
return == false
this.labels[orig(arg0)] == null
orig(arg0) < size(this.slots[])-1
===========================================================================
es.uc3m.recordplayer.logic.RecordShelf.putRecordOnSlot(es.uc3m.recordplayer.logic.Record, int):::ENTER
this.labels[] contains only nulls and has only one value, of length 16
this.labels[] elements == null
this.labels[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.labels[].getClass().getName() elements == null
this.labels[].sides.getClass().getName() == [daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject]
this.labels[].sides.getClass().getName() elements == daikon.chicory.NonsensicalObject.class
arg0.sides.getClass().getName() == es.uc3m.recordplayer.logic.Side[].class
arg0.sides[].getClass().getName() == [es.uc3m.recordplayer.logic.Side, es.uc3m.recordplayer.logic.Side]
arg0.sides[].getClass().getName() elements == es.uc3m.recordplayer.logic.Side.class
arg0.sides[].totalDuration == [-1.0, -1.0]
arg0.sides[].totalDuration elements == -1.0
arg0.sides[].record elements are equal
arg0.sides[].sideIndex == [0, 1]
arg0.sides[].sideIndex elements one of { 0, 1 }
arg0.sides[].sideIndex sorted by <
es.uc3m.recordplayer.logic.Rpm.SPEED33 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED45 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED72 has only one value
es.uc3m.recordplayer.logic.Rpm.$VALUES has only one value
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == es.uc3m.recordplayer.logic.Rpm[].class
es.uc3m.recordplayer.logic.Rpm.$VALUES[] contains no nulls and has only one value, of length 3
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() == [es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm]
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() elements == es.uc3m.recordplayer.logic.Rpm.class
size(arg0.sides[]) == 2
size(es.uc3m.recordplayer.logic.Rpm.$VALUES[]) == 3
this.slots[arg1] == null
this.slots.getClass().getName() != arg0.sides.getClass().getName()
this.slots.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
this.labels[] elements == this.labels[arg1]
arg0 in arg0.sides[].record
arg0.sides[].record elements == arg0
arg0.sides.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
arg1 < size(this.slots[])-1
===========================================================================
es.uc3m.recordplayer.logic.RecordShelf.putRecordOnSlot(es.uc3m.recordplayer.logic.Record, int):::EXIT
this.slots == orig(this.slots)
this.slots.getClass().getName() == orig(this.slots.getClass().getName())
this.slots.getClass().getName() == orig(this.labels.getClass().getName())
this.labels == orig(this.labels)
this.labels[] == orig(this.labels[])
arg0.sides == orig(arg0.sides)
arg0.sides.getClass().getName() == orig(arg0.sides.getClass().getName())
arg0.sides[] == orig(arg0.sides[])
arg0.sides[].songs == orig(arg0.sides[].songs)
arg0.sides[].totalDuration == orig(arg0.sides[].totalDuration)
arg0.sides[].record == orig(arg0.sides[].record)
arg0.sides[].sideIndex == orig(arg0.sides[].sideIndex)
arg0.recordPerformer == orig(arg0.recordPerformer)
arg0.recordPerformer.name == orig(arg0.recordPerformer.name)
arg0.recordPerformer.name.toString == orig(arg0.recordPerformer.name.toString)
arg0.recordPerformer.type == orig(arg0.recordPerformer.type)
arg0.title == orig(arg0.title)
arg0.title.toString == orig(arg0.title.toString)
arg0.editionYear == orig(arg0.editionYear)
arg0.recordSpeed == orig(arg0.recordSpeed)
es.uc3m.recordplayer.logic.Rpm.SPEED33 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED33)
es.uc3m.recordplayer.logic.Rpm.SPEED45 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED45)
es.uc3m.recordplayer.logic.Rpm.SPEED72 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED72)
es.uc3m.recordplayer.logic.Rpm.$VALUES == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES)
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.Rpm.$VALUES[] == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES[])
orig(arg0) == this.slots[orig(arg1)]
size(this.slots[]) == orig(size(this.slots[]))
size(this.slots[]) == orig(size(this.labels[]))
this.labels[] contains only nulls and has only one value, of length 16
this.labels[] elements == null
this.labels[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.labels[].getClass().getName() elements == null
this.labels[].sides.getClass().getName() == [daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject, daikon.chicory.NonsensicalObject]
this.labels[].sides.getClass().getName() elements == daikon.chicory.NonsensicalObject.class
arg0.sides.getClass().getName() == es.uc3m.recordplayer.logic.Side[].class
arg0.sides[].getClass().getName() == [es.uc3m.recordplayer.logic.Side, es.uc3m.recordplayer.logic.Side]
arg0.sides[].getClass().getName() elements == es.uc3m.recordplayer.logic.Side.class
arg0.sides[].totalDuration == [-1.0, -1.0]
arg0.sides[].totalDuration elements == -1.0
arg0.sides[].record elements are equal
arg0.sides[].sideIndex == [0, 1]
arg0.sides[].sideIndex elements one of { 0, 1 }
arg0.sides[].sideIndex sorted by <
es.uc3m.recordplayer.logic.Rpm.SPEED33 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED45 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED72 has only one value
es.uc3m.recordplayer.logic.Rpm.$VALUES has only one value
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == es.uc3m.recordplayer.logic.Rpm[].class
es.uc3m.recordplayer.logic.Rpm.$VALUES[] contains no nulls and has only one value, of length 3
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() == [es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm]
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() elements == es.uc3m.recordplayer.logic.Rpm.class
size(arg0.sides[]) == 2
size(es.uc3m.recordplayer.logic.Rpm.$VALUES[]) == 3
this.slots.getClass().getName() != arg0.sides.getClass().getName()
this.slots.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
orig(this.slots[arg1]) in this.slots[]
arg0.sides.getClass().getName() in this.slots[].sides.getClass().getName()
this.labels[] elements == this.labels[orig(arg1)]
arg0.sides.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
arg0.sides[].record elements == orig(arg0)
orig(arg0) in arg0.sides[].record
orig(arg1) < size(this.slots[])-1
===========================================================================
es.uc3m.recordplayer.logic.RecordShelf.setLabelOfSlot(es.uc3m.recordplayer.logic.Record, int):::ENTER
arg0.sides != null
arg0.sides.getClass().getName() == es.uc3m.recordplayer.logic.Side[].class
arg0.sides[] elements != null
arg0.sides[].getClass().getName() == [es.uc3m.recordplayer.logic.Side, es.uc3m.recordplayer.logic.Side]
arg0.sides[].getClass().getName() elements == es.uc3m.recordplayer.logic.Side.class
arg0.sides[].songs elements != null
arg0.sides[].totalDuration == [-1.0, -1.0]
arg0.sides[].totalDuration elements == -1.0
arg0.sides[].record elements != null
arg0.sides[].record elements are equal
arg0.sides[].sideIndex == [0, 1]
arg0.sides[].sideIndex elements one of { 0, 1 }
arg0.sides[].sideIndex sorted by <
arg0.recordPerformer != null
arg0.recordPerformer.name != null
arg0.recordPerformer.type != null
arg0.title != null
arg0.recordSpeed != null
es.uc3m.recordplayer.logic.Rpm.SPEED33 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED33 != null
es.uc3m.recordplayer.logic.Rpm.SPEED45 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED45 != null
es.uc3m.recordplayer.logic.Rpm.SPEED72 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED72 != null
es.uc3m.recordplayer.logic.Rpm.$VALUES has only one value
es.uc3m.recordplayer.logic.Rpm.$VALUES != null
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == es.uc3m.recordplayer.logic.Rpm[].class
es.uc3m.recordplayer.logic.Rpm.$VALUES[] contains no nulls and has only one value, of length 3
es.uc3m.recordplayer.logic.Rpm.$VALUES[] elements != null
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() == [es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm]
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() elements == es.uc3m.recordplayer.logic.Rpm.class
size(arg0.sides[]) == 2
size(es.uc3m.recordplayer.logic.Rpm.$VALUES[]) == 3
this.slots[arg1] == null
this.slots.getClass().getName() != arg0.sides.getClass().getName()
this.slots.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
arg0 in arg0.sides[].record
arg0.sides[].record elements == arg0
arg0.sides.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
arg1 <= size(this.slots[])-1
===========================================================================
es.uc3m.recordplayer.logic.RecordShelf.setLabelOfSlot(es.uc3m.recordplayer.logic.Record, int):::EXIT
this.slots == orig(this.slots)
this.slots.getClass().getName() == orig(this.slots.getClass().getName())
this.slots.getClass().getName() == orig(this.labels.getClass().getName())
this.slots[] == orig(this.slots[])
this.labels == orig(this.labels)
arg0.sides == orig(arg0.sides)
arg0.sides.getClass().getName() == orig(arg0.sides.getClass().getName())
arg0.sides[] == orig(arg0.sides[])
arg0.sides[].songs == orig(arg0.sides[].songs)
arg0.sides[].totalDuration == orig(arg0.sides[].totalDuration)
arg0.sides[].record == orig(arg0.sides[].record)
arg0.sides[].sideIndex == orig(arg0.sides[].sideIndex)
arg0.recordPerformer == orig(arg0.recordPerformer)
arg0.recordPerformer.name == orig(arg0.recordPerformer.name)
arg0.recordPerformer.name.toString == orig(arg0.recordPerformer.name.toString)
arg0.recordPerformer.type == orig(arg0.recordPerformer.type)
arg0.title == orig(arg0.title)
arg0.title.toString == orig(arg0.title.toString)
arg0.editionYear == orig(arg0.editionYear)
arg0.recordSpeed == orig(arg0.recordSpeed)
es.uc3m.recordplayer.logic.Rpm.SPEED33 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED33)
es.uc3m.recordplayer.logic.Rpm.SPEED45 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED45)
es.uc3m.recordplayer.logic.Rpm.SPEED72 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED72)
es.uc3m.recordplayer.logic.Rpm.$VALUES == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES)
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.Rpm.$VALUES[] == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES[])
orig(arg0) == this.labels[orig(arg1)]
size(this.slots[]) == orig(size(this.labels[]))
arg0.sides != null
arg0.sides.getClass().getName() == es.uc3m.recordplayer.logic.Side[].class
arg0.sides[] elements != null
arg0.sides[].getClass().getName() == [es.uc3m.recordplayer.logic.Side, es.uc3m.recordplayer.logic.Side]
arg0.sides[].getClass().getName() elements == es.uc3m.recordplayer.logic.Side.class
arg0.sides[].songs elements != null
arg0.sides[].totalDuration == [-1.0, -1.0]
arg0.sides[].totalDuration elements == -1.0
arg0.sides[].record elements != null
arg0.sides[].record elements are equal
arg0.sides[].sideIndex == [0, 1]
arg0.sides[].sideIndex elements one of { 0, 1 }
arg0.sides[].sideIndex sorted by <
arg0.recordPerformer != null
arg0.recordPerformer.name != null
arg0.recordPerformer.type != null
arg0.title != null
arg0.recordSpeed != null
es.uc3m.recordplayer.logic.Rpm.SPEED33 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED33 != null
es.uc3m.recordplayer.logic.Rpm.SPEED45 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED45 != null
es.uc3m.recordplayer.logic.Rpm.SPEED72 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED72 != null
es.uc3m.recordplayer.logic.Rpm.$VALUES has only one value
es.uc3m.recordplayer.logic.Rpm.$VALUES != null
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == es.uc3m.recordplayer.logic.Rpm[].class
es.uc3m.recordplayer.logic.Rpm.$VALUES[] contains no nulls and has only one value, of length 3
es.uc3m.recordplayer.logic.Rpm.$VALUES[] elements != null
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() == [es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm]
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() elements == es.uc3m.recordplayer.logic.Rpm.class
size(arg0.sides[]) == 2
size(es.uc3m.recordplayer.logic.Rpm.$VALUES[]) == 3
this.slots[orig(arg1)] == null
this.slots.getClass().getName() != arg0.sides.getClass().getName()
this.slots.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
arg0.sides.getClass().getName() in this.labels[].sides.getClass().getName()
arg0.sides.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
arg0.sides[].record elements == orig(arg0)
orig(arg0) in arg0.sides[].record
orig(arg1) <= size(this.slots[])-1
===========================================================================
es.uc3m.recordplayer.logic.RecordStack:::OBJECT
this.topNode == null
===========================================================================
es.uc3m.recordplayer.logic.RecordStack.RecordStack():::EXIT
===========================================================================
es.uc3m.recordplayer.logic.Rpm:::OBJECT
===========================================================================
es.uc3m.recordplayer.logic.Rpm.Rpm(java.lang.String, int):::ENTER
arg0.toString one of { "SPEED33", "SPEED45", "SPEED72" }
arg1 one of { 0, 1, 2 }
===========================================================================
es.uc3m.recordplayer.logic.Rpm.Rpm(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString one of { "SPEED33", "SPEED45", "SPEED72" }
===========================================================================
es.uc3m.recordplayer.logic.Side:::OBJECT
this.songs != null
this.songs.array != null
this.songs.array.getClass().getName() == java.lang.Object[].class
this.songs.array[] elements != null
this.songs.array[].getClass().getName() elements == es.uc3m.recordplayer.logic.Song.class
this.totalDuration == -1.0
this.record != null
this.record.sides != null
this.record.sides.getClass().getName() == es.uc3m.recordplayer.logic.Side[].class
this.record.sides[].songs elements != null
this.record.sides[].totalDuration == [-1.0, -1.0]
this.record.sides[].totalDuration elements == -1.0
this.record.sides[].record elements != null
this.record.sides[].record elements are equal
this.record.sides[].sideIndex == [0, 1]
this.record.sides[].sideIndex elements one of { 0, 1 }
this.record.sides[].sideIndex sorted by <
this.record.recordPerformer.name != null
this.record.recordPerformer.type != null
this.record.editionYear >= 0
es.uc3m.recordplayer.logic.Rpm.SPEED33 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED33 != null
es.uc3m.recordplayer.logic.Rpm.SPEED45 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED45 != null
es.uc3m.recordplayer.logic.Rpm.SPEED72 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED72 != null
es.uc3m.recordplayer.logic.Rpm.$VALUES has only one value
es.uc3m.recordplayer.logic.Rpm.$VALUES != null
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == es.uc3m.recordplayer.logic.Rpm[].class
es.uc3m.recordplayer.logic.Rpm.$VALUES[] contains no nulls and has only one value, of length 3
es.uc3m.recordplayer.logic.Rpm.$VALUES[] elements != null
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() == [es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm]
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() elements == es.uc3m.recordplayer.logic.Rpm.class
this.sideIndex one of { 0, 1 }
size(this.record.sides[]) == 2
size(es.uc3m.recordplayer.logic.Rpm.$VALUES[]) == 3
this.songs in this.record.sides[].songs
this.songs.array.getClass().getName() != this.record.sides.getClass().getName()
this.songs.array.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
this.record.sides[].totalDuration elements == this.totalDuration
this.totalDuration in this.record.sides[].totalDuration
this.record in this.record.sides[].record
this.record.sides[].record elements == this.record
this.record.sides.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
this.sideIndex in this.record.sides[].sideIndex
===========================================================================
es.uc3m.recordplayer.logic.Side.Side(es.uc3m.recordplayer.logic.Record, int):::ENTER
arg0 != null
arg0.sides != null
arg0.sides.getClass().getName() == es.uc3m.recordplayer.logic.Side[].class
arg0.sides[].getClass().getName() one of { [null, null], [es.uc3m.recordplayer.logic.Side, null] }
arg0.recordPerformer == null
arg0.title == null
arg0.editionYear == 0
arg0.recordSpeed == null
es.uc3m.recordplayer.logic.Rpm.SPEED33 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED33 != null
es.uc3m.recordplayer.logic.Rpm.SPEED45 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED45 != null
es.uc3m.recordplayer.logic.Rpm.SPEED72 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED72 != null
es.uc3m.recordplayer.logic.Rpm.$VALUES has only one value
es.uc3m.recordplayer.logic.Rpm.$VALUES != null
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == es.uc3m.recordplayer.logic.Rpm[].class
es.uc3m.recordplayer.logic.Rpm.$VALUES[] contains no nulls and has only one value, of length 3
es.uc3m.recordplayer.logic.Rpm.$VALUES[] elements != null
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() == [es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm]
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() elements == es.uc3m.recordplayer.logic.Rpm.class
arg1 one of { 0, 1 }
size(arg0.sides[]) == 2
size(es.uc3m.recordplayer.logic.Rpm.$VALUES[]) == 3
arg0.sides.getClass().getName() != es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.Side.Side(es.uc3m.recordplayer.logic.Record, int):::EXIT
this.record == orig(arg0)
this.record.sides == arg0.sides
this.record.sides.getClass().getName() == arg0.sides.getClass().getName()
es.uc3m.recordplayer.logic.Rpm.SPEED33 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED33)
es.uc3m.recordplayer.logic.Rpm.SPEED45 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED45)
es.uc3m.recordplayer.logic.Rpm.SPEED72 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED72)
es.uc3m.recordplayer.logic.Rpm.$VALUES == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES)
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.Rpm.$VALUES[] == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES[])
this.sideIndex == orig(arg1)
arg0.sides == orig(arg0.sides)
arg0.sides.getClass().getName() == orig(arg0.sides.getClass().getName())
arg0.sides[] == orig(arg0.sides[])
arg0.recordPerformer == orig(arg0.recordPerformer)
arg0.title == orig(arg0.title)
arg0.editionYear == orig(arg0.editionYear)
arg0.recordSpeed == orig(arg0.recordSpeed)
this.songs.array[] == []
this.songs.array[].getClass().getName() == []
this.record.sides[].getClass().getName() one of { [null, null], [es.uc3m.recordplayer.logic.Side, null] }
this.record.recordPerformer == null
this.record.title == null
this.record.editionYear == 0
this.record.recordSpeed == null
arg0.sides != null
arg0.sides.getClass().getName() == es.uc3m.recordplayer.logic.Side[].class
arg0.sides[].getClass().getName() one of { [null, null], [es.uc3m.recordplayer.logic.Side, null] }
arg0.recordPerformer == null
arg0.title == null
arg0.editionYear == 0
arg0.recordSpeed == null
size(arg0.sides[]) == 2
this.songs.array.getClass().getName() != arg0.sides.getClass().getName()
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() != arg0.sides.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.Side.getRecord():::ENTER
this.record.recordSpeed == es.uc3m.recordplayer.logic.Rpm.SPEED33
this has only one value
this.songs has only one value
this.songs.array has only one value
this.songs.array[] contains no nulls and has only one value, of length 2
this.songs.array[].getClass().getName() == [es.uc3m.recordplayer.logic.Song, es.uc3m.recordplayer.logic.Song]
this.record has only one value
this.record.sides has only one value
this.record.sides[] contains no nulls and has only one value, of length 2
this.record.sides[].getClass().getName() == [es.uc3m.recordplayer.logic.Side, es.uc3m.recordplayer.logic.Side]
this.record.sides[].getClass().getName() elements == es.uc3m.recordplayer.logic.Side.class
this.record.sides[].songs contains no nulls and has only one value, of length 2
this.record.sides[].record contains no nulls and has only one value, of length 2
this.record.sides[].record elements has only one value
this.record.recordPerformer has only one value
this.record.recordPerformer.name has only one value
this.record.recordPerformer.name.toString == "Metallica"
this.record.recordPerformer.type has only one value
this.record.title has only one value
this.record.title.toString == "Metallica(Black Album)"
this.record.editionYear == 1991
this.sideIndex == 0
size(this.songs.array[]) == 2
this in this.record.sides[]
===========================================================================
es.uc3m.recordplayer.logic.Side.getRecord():::EXIT
this.songs == orig(this.songs)
this.songs.array == orig(this.songs.array)
this.songs.array.getClass().getName() == orig(this.songs.array.getClass().getName())
this.songs.array[] == orig(this.songs.array[])
this.totalDuration == orig(this.totalDuration)
this.record == return
this.record.sides == return.sides
this.record.sides.getClass().getName() == return.sides.getClass().getName()
this.record.sides[] == orig(this.record.sides[])
this.record.sides[].songs == orig(this.record.sides[].songs)
this.record.sides[].totalDuration == orig(this.record.sides[].totalDuration)
this.record.sides[].record == orig(this.record.sides[].record)
this.record.sides[].sideIndex == orig(this.record.sides[].sideIndex)
this.record.recordPerformer == return.recordPerformer
this.record.recordPerformer.name == return.recordPerformer.name
this.record.recordPerformer.name.toString == orig(this.record.recordPerformer.name.toString)
this.record.recordPerformer.type == return.recordPerformer.type
this.record.title == return.title
this.record.title.toString == orig(this.record.title.toString)
this.record.editionYear == return.editionYear
this.record.recordSpeed == es.uc3m.recordplayer.logic.Rpm.SPEED33
es.uc3m.recordplayer.logic.Rpm.SPEED33 == return.recordSpeed
es.uc3m.recordplayer.logic.Rpm.SPEED33 == orig(this.record.recordSpeed)
es.uc3m.recordplayer.logic.Rpm.SPEED33 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED33)
es.uc3m.recordplayer.logic.Rpm.SPEED45 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED45)
es.uc3m.recordplayer.logic.Rpm.SPEED72 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED72)
es.uc3m.recordplayer.logic.Rpm.$VALUES == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES)
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.Rpm.$VALUES[] == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES[])
this.sideIndex == orig(this.sideIndex)
return == orig(this.record)
return.sides == orig(this.record.sides)
return.sides.getClass().getName() == orig(this.record.sides.getClass().getName())
return.recordPerformer == orig(this.record.recordPerformer)
return.recordPerformer.name == orig(this.record.recordPerformer.name)
return.recordPerformer.type == orig(this.record.recordPerformer.type)
return.title == orig(this.record.title)
return.editionYear == orig(this.record.editionYear)
this.songs has only one value
this.songs.array has only one value
this.songs.array[] contains no nulls and has only one value, of length 2
this.songs.array[].getClass().getName() == [es.uc3m.recordplayer.logic.Song, es.uc3m.recordplayer.logic.Song]
this.record.sides[] contains no nulls and has only one value, of length 2
this.record.sides[].getClass().getName() == [es.uc3m.recordplayer.logic.Side, es.uc3m.recordplayer.logic.Side]
this.record.sides[].getClass().getName() elements == es.uc3m.recordplayer.logic.Side.class
this.record.sides[].songs contains no nulls and has only one value, of length 2
this.record.sides[].record contains no nulls and has only one value, of length 2
this.record.sides[].record elements has only one value
this.record.recordPerformer.name.toString == "Metallica"
this.record.title.toString == "Metallica(Black Album)"
this.sideIndex == 0
return has only one value
return.sides has only one value
return.sides.getClass().getName() == es.uc3m.recordplayer.logic.Side[].class
return.sides[] contains no nulls and has only one value, of length 2
return.sides[].getClass().getName() == [es.uc3m.recordplayer.logic.Side, es.uc3m.recordplayer.logic.Side]
return.sides[].getClass().getName() elements == es.uc3m.recordplayer.logic.Side.class
return.sides[].songs contains no nulls and has only one value, of length 2
return.sides[].totalDuration == [-1.0, -1.0]
return.sides[].totalDuration elements == -1.0
return.sides[].record contains no nulls and has only one value, of length 2
return.sides[].record elements has only one value
return.sides[].sideIndex == [0, 1]
return.sides[].sideIndex elements one of { 0, 1 }
return.recordPerformer has only one value
return.recordPerformer.name has only one value
return.recordPerformer.name.toString == "Metallica"
return.recordPerformer.type has only one value
return.title has only one value
return.title.toString == "Metallica(Black Album)"
return.editionYear == 1991
size(this.songs.array[]) == 2
size(return.sides[]) == 2
this.songs in return.sides[].songs
return.sides[].totalDuration elements == this.totalDuration
this.totalDuration in return.sides[].totalDuration
orig(this) in this.record.sides[]
return in this.record.sides[].record
this.record.sides[].record elements == return
this.sideIndex in return.sides[].sideIndex
return in return.sides[].record
return.sides[].record elements == return
orig(this) in return.sides[]
===========================================================================
es.uc3m.recordplayer.logic.Side.getSideTracklist():::ENTER
this.record.sides[] elements != null
this.record.sides[].getClass().getName() == [es.uc3m.recordplayer.logic.Side, es.uc3m.recordplayer.logic.Side]
this.record.sides[].getClass().getName() elements == es.uc3m.recordplayer.logic.Side.class
this.record.recordPerformer != null
this.record.title != null
this.record.recordSpeed != null
this in this.record.sides[]
===========================================================================
es.uc3m.recordplayer.logic.Side.getSideTracklist():::EXIT
this.songs == return
this.songs.array == return.array
this.songs.array.getClass().getName() == return.array.getClass().getName()
this.songs.array[] == orig(this.songs.array[])
this.totalDuration == orig(this.totalDuration)
this.record == orig(this.record)
this.record.sides == orig(this.record.sides)
this.record.sides.getClass().getName() == orig(this.record.sides.getClass().getName())
this.record.sides[] == orig(this.record.sides[])
this.record.sides[].songs == orig(this.record.sides[].songs)
this.record.sides[].totalDuration == orig(this.record.sides[].totalDuration)
this.record.sides[].record == orig(this.record.sides[].record)
this.record.sides[].sideIndex == orig(this.record.sides[].sideIndex)
this.record.recordPerformer == orig(this.record.recordPerformer)
this.record.recordPerformer.name == orig(this.record.recordPerformer.name)
this.record.recordPerformer.name.toString == orig(this.record.recordPerformer.name.toString)
this.record.recordPerformer.type == orig(this.record.recordPerformer.type)
this.record.title == orig(this.record.title)
this.record.title.toString == orig(this.record.title.toString)
this.record.editionYear == orig(this.record.editionYear)
this.record.recordSpeed == orig(this.record.recordSpeed)
es.uc3m.recordplayer.logic.Rpm.SPEED33 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED33)
es.uc3m.recordplayer.logic.Rpm.SPEED45 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED45)
es.uc3m.recordplayer.logic.Rpm.SPEED72 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED72)
es.uc3m.recordplayer.logic.Rpm.$VALUES == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES)
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.Rpm.$VALUES[] == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES[])
this.sideIndex == orig(this.sideIndex)
return == orig(this.songs)
return.array == orig(this.songs.array)
return.array.getClass().getName() == orig(this.songs.array.getClass().getName())
this.record.sides[] elements != null
this.record.sides[].getClass().getName() == [es.uc3m.recordplayer.logic.Side, es.uc3m.recordplayer.logic.Side]
this.record.sides[].getClass().getName() elements == es.uc3m.recordplayer.logic.Side.class
this.record.recordPerformer != null
this.record.title != null
this.record.recordSpeed != null
return != null
return.array != null
return.array.getClass().getName() == java.lang.Object[].class
return.array[] elements != null
return.array[].getClass().getName() elements == es.uc3m.recordplayer.logic.Song.class
this.record.sides.getClass().getName() != return.array.getClass().getName()
orig(this) in this.record.sides[]
return in this.record.sides[].songs
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() != return.array.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.Song:::OBJECT
this.title != null
this.genre != null
es.uc3m.recordplayer.logic.Genre.CLASSICAL has only one value
es.uc3m.recordplayer.logic.Genre.CLASSICAL != null
es.uc3m.recordplayer.logic.Genre.POP has only one value
es.uc3m.recordplayer.logic.Genre.POP != null
es.uc3m.recordplayer.logic.Genre.ROCK has only one value
es.uc3m.recordplayer.logic.Genre.ROCK != null
es.uc3m.recordplayer.logic.Genre.JAZZ has only one value
es.uc3m.recordplayer.logic.Genre.JAZZ != null
es.uc3m.recordplayer.logic.Genre.DANCE has only one value
es.uc3m.recordplayer.logic.Genre.DANCE != null
es.uc3m.recordplayer.logic.Genre.OTHERS has only one value
es.uc3m.recordplayer.logic.Genre.OTHERS != null
es.uc3m.recordplayer.logic.Genre.$VALUES has only one value
es.uc3m.recordplayer.logic.Genre.$VALUES != null
es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName() == es.uc3m.recordplayer.logic.Genre[].class
es.uc3m.recordplayer.logic.Genre.$VALUES[] contains no nulls and has only one value, of length 6
es.uc3m.recordplayer.logic.Genre.$VALUES[] elements != null
es.uc3m.recordplayer.logic.Genre.$VALUES[].getClass().getName() == [es.uc3m.recordplayer.logic.Genre, es.uc3m.recordplayer.logic.Genre, es.uc3m.recordplayer.logic.Genre, es.uc3m.recordplayer.logic.Genre, es.uc3m.recordplayer.logic.Genre, es.uc3m.recordplayer.logic.Genre]
es.uc3m.recordplayer.logic.Genre.$VALUES[].getClass().getName() elements == es.uc3m.recordplayer.logic.Genre.class
this.artist != null
this.artist.name != null
this.artist.type != null
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE has only one value
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE != null
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE has only one value
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE != null
es.uc3m.recordplayer.logic.PerformerType.GROUP has only one value
es.uc3m.recordplayer.logic.PerformerType.GROUP != null
es.uc3m.recordplayer.logic.PerformerType.OTHERS has only one value
es.uc3m.recordplayer.logic.PerformerType.OTHERS != null
es.uc3m.recordplayer.logic.PerformerType.$VALUES has only one value
es.uc3m.recordplayer.logic.PerformerType.$VALUES != null
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() == es.uc3m.recordplayer.logic.PerformerType[].class
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] contains no nulls and has only one value, of length 4
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] elements != null
es.uc3m.recordplayer.logic.PerformerType.$VALUES[].getClass().getName() == [es.uc3m.recordplayer.logic.PerformerType, es.uc3m.recordplayer.logic.PerformerType, es.uc3m.recordplayer.logic.PerformerType, es.uc3m.recordplayer.logic.PerformerType]
es.uc3m.recordplayer.logic.PerformerType.$VALUES[].getClass().getName() elements == es.uc3m.recordplayer.logic.PerformerType.class
this.startPoint == 0.0
this.isStudio == true
size(es.uc3m.recordplayer.logic.Genre.$VALUES[]) == 6
size(es.uc3m.recordplayer.logic.PerformerType.$VALUES[]) == 4
===========================================================================
es.uc3m.recordplayer.logic.Song.Song(java.lang.String, es.uc3m.recordplayer.logic.Genre, es.uc3m.recordplayer.logic.Performer, int, float, boolean, boolean, boolean):::ENTER
arg0 != null
arg1 != null
es.uc3m.recordplayer.logic.Genre.CLASSICAL has only one value
es.uc3m.recordplayer.logic.Genre.CLASSICAL != null
es.uc3m.recordplayer.logic.Genre.POP has only one value
es.uc3m.recordplayer.logic.Genre.POP != null
es.uc3m.recordplayer.logic.Genre.ROCK has only one value
es.uc3m.recordplayer.logic.Genre.ROCK != null
es.uc3m.recordplayer.logic.Genre.JAZZ has only one value
es.uc3m.recordplayer.logic.Genre.JAZZ != null
es.uc3m.recordplayer.logic.Genre.DANCE has only one value
es.uc3m.recordplayer.logic.Genre.DANCE != null
es.uc3m.recordplayer.logic.Genre.OTHERS has only one value
es.uc3m.recordplayer.logic.Genre.OTHERS != null
es.uc3m.recordplayer.logic.Genre.$VALUES has only one value
es.uc3m.recordplayer.logic.Genre.$VALUES != null
es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName() == es.uc3m.recordplayer.logic.Genre[].class
es.uc3m.recordplayer.logic.Genre.$VALUES[] contains no nulls and has only one value, of length 6
es.uc3m.recordplayer.logic.Genre.$VALUES[] elements != null
es.uc3m.recordplayer.logic.Genre.$VALUES[].getClass().getName() == [es.uc3m.recordplayer.logic.Genre, es.uc3m.recordplayer.logic.Genre, es.uc3m.recordplayer.logic.Genre, es.uc3m.recordplayer.logic.Genre, es.uc3m.recordplayer.logic.Genre, es.uc3m.recordplayer.logic.Genre]
es.uc3m.recordplayer.logic.Genre.$VALUES[].getClass().getName() elements == es.uc3m.recordplayer.logic.Genre.class
arg2 != null
arg2.name != null
arg2.type != null
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE has only one value
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE != null
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE has only one value
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE != null
es.uc3m.recordplayer.logic.PerformerType.GROUP has only one value
es.uc3m.recordplayer.logic.PerformerType.GROUP != null
es.uc3m.recordplayer.logic.PerformerType.OTHERS has only one value
es.uc3m.recordplayer.logic.PerformerType.OTHERS != null
es.uc3m.recordplayer.logic.PerformerType.$VALUES has only one value
es.uc3m.recordplayer.logic.PerformerType.$VALUES != null
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() == es.uc3m.recordplayer.logic.PerformerType[].class
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] contains no nulls and has only one value, of length 4
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] elements != null
es.uc3m.recordplayer.logic.PerformerType.$VALUES[].getClass().getName() == [es.uc3m.recordplayer.logic.PerformerType, es.uc3m.recordplayer.logic.PerformerType, es.uc3m.recordplayer.logic.PerformerType, es.uc3m.recordplayer.logic.PerformerType]
es.uc3m.recordplayer.logic.PerformerType.$VALUES[].getClass().getName() elements == es.uc3m.recordplayer.logic.PerformerType.class
arg7 == true
size(es.uc3m.recordplayer.logic.Genre.$VALUES[]) == 6
size(es.uc3m.recordplayer.logic.PerformerType.$VALUES[]) == 4
es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName() != es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.Song.Song(java.lang.String, es.uc3m.recordplayer.logic.Genre, es.uc3m.recordplayer.logic.Performer, int, float, boolean, boolean, boolean):::EXIT
this.title == orig(arg0)
this.genre == orig(arg1)
es.uc3m.recordplayer.logic.Genre.CLASSICAL == orig(es.uc3m.recordplayer.logic.Genre.CLASSICAL)
es.uc3m.recordplayer.logic.Genre.POP == orig(es.uc3m.recordplayer.logic.Genre.POP)
es.uc3m.recordplayer.logic.Genre.ROCK == orig(es.uc3m.recordplayer.logic.Genre.ROCK)
es.uc3m.recordplayer.logic.Genre.JAZZ == orig(es.uc3m.recordplayer.logic.Genre.JAZZ)
es.uc3m.recordplayer.logic.Genre.DANCE == orig(es.uc3m.recordplayer.logic.Genre.DANCE)
es.uc3m.recordplayer.logic.Genre.OTHERS == orig(es.uc3m.recordplayer.logic.Genre.OTHERS)
es.uc3m.recordplayer.logic.Genre.$VALUES == orig(es.uc3m.recordplayer.logic.Genre.$VALUES)
es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.Genre.$VALUES[] == orig(es.uc3m.recordplayer.logic.Genre.$VALUES[])
this.artist == orig(arg2)
this.artist.name == arg2.name
this.artist.type == arg2.type
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE)
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE)
es.uc3m.recordplayer.logic.PerformerType.GROUP == orig(es.uc3m.recordplayer.logic.PerformerType.GROUP)
es.uc3m.recordplayer.logic.PerformerType.OTHERS == orig(es.uc3m.recordplayer.logic.PerformerType.OTHERS)
es.uc3m.recordplayer.logic.PerformerType.$VALUES == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES)
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES[])
this.year == orig(arg3)
this.duration == orig(arg4)
this.isComposed == orig(arg5)
this.isRecorded == orig(arg6)
this.isStudio == orig(arg7)
arg0.toString == orig(arg0.toString)
arg2.name == orig(arg2.name)
arg2.name.toString == orig(arg2.name.toString)
arg2.type == orig(arg2.type)
arg2.name != null
arg2.type != null
es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName() != es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.Song.getArtist():::ENTER
es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName() != es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.Song.getArtist():::EXIT
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.genre == orig(this.genre)
es.uc3m.recordplayer.logic.Genre.CLASSICAL == orig(es.uc3m.recordplayer.logic.Genre.CLASSICAL)
es.uc3m.recordplayer.logic.Genre.POP == orig(es.uc3m.recordplayer.logic.Genre.POP)
es.uc3m.recordplayer.logic.Genre.ROCK == orig(es.uc3m.recordplayer.logic.Genre.ROCK)
es.uc3m.recordplayer.logic.Genre.JAZZ == orig(es.uc3m.recordplayer.logic.Genre.JAZZ)
es.uc3m.recordplayer.logic.Genre.DANCE == orig(es.uc3m.recordplayer.logic.Genre.DANCE)
es.uc3m.recordplayer.logic.Genre.OTHERS == orig(es.uc3m.recordplayer.logic.Genre.OTHERS)
es.uc3m.recordplayer.logic.Genre.$VALUES == orig(es.uc3m.recordplayer.logic.Genre.$VALUES)
es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.Genre.$VALUES[] == orig(es.uc3m.recordplayer.logic.Genre.$VALUES[])
this.artist == return
this.artist.name == return.name
this.artist.name.toString == orig(this.artist.name.toString)
this.artist.type == return.type
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE)
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE)
es.uc3m.recordplayer.logic.PerformerType.GROUP == orig(es.uc3m.recordplayer.logic.PerformerType.GROUP)
es.uc3m.recordplayer.logic.PerformerType.OTHERS == orig(es.uc3m.recordplayer.logic.PerformerType.OTHERS)
es.uc3m.recordplayer.logic.PerformerType.$VALUES == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES)
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES[])
this.year == orig(this.year)
this.duration == orig(this.duration)
this.startPoint == orig(this.startPoint)
this.isComposed == orig(this.isComposed)
this.isRecorded == orig(this.isRecorded)
this.isStudio == orig(this.isStudio)
return == orig(this.artist)
return.name == orig(this.artist.name)
return.type == orig(this.artist.type)
return != null
return.name != null
return.type != null
es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName() != es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.Song.getTitle():::ENTER
es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName() != es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.Song.getTitle():::EXIT
this.title == return
this.title.toString == orig(this.title.toString)
this.genre == orig(this.genre)
es.uc3m.recordplayer.logic.Genre.CLASSICAL == orig(es.uc3m.recordplayer.logic.Genre.CLASSICAL)
es.uc3m.recordplayer.logic.Genre.POP == orig(es.uc3m.recordplayer.logic.Genre.POP)
es.uc3m.recordplayer.logic.Genre.ROCK == orig(es.uc3m.recordplayer.logic.Genre.ROCK)
es.uc3m.recordplayer.logic.Genre.JAZZ == orig(es.uc3m.recordplayer.logic.Genre.JAZZ)
es.uc3m.recordplayer.logic.Genre.DANCE == orig(es.uc3m.recordplayer.logic.Genre.DANCE)
es.uc3m.recordplayer.logic.Genre.OTHERS == orig(es.uc3m.recordplayer.logic.Genre.OTHERS)
es.uc3m.recordplayer.logic.Genre.$VALUES == orig(es.uc3m.recordplayer.logic.Genre.$VALUES)
es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.Genre.$VALUES[] == orig(es.uc3m.recordplayer.logic.Genre.$VALUES[])
this.artist == orig(this.artist)
this.artist.name == orig(this.artist.name)
this.artist.name.toString == orig(this.artist.name.toString)
this.artist.type == orig(this.artist.type)
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE)
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE)
es.uc3m.recordplayer.logic.PerformerType.GROUP == orig(es.uc3m.recordplayer.logic.PerformerType.GROUP)
es.uc3m.recordplayer.logic.PerformerType.OTHERS == orig(es.uc3m.recordplayer.logic.PerformerType.OTHERS)
es.uc3m.recordplayer.logic.PerformerType.$VALUES == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES)
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES[])
this.year == orig(this.year)
this.duration == orig(this.duration)
this.startPoint == orig(this.startPoint)
this.isComposed == orig(this.isComposed)
this.isRecorded == orig(this.isRecorded)
this.isStudio == orig(this.isStudio)
return == orig(this.title)
return != null
es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName() != es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.Song.getYear():::ENTER
es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName() != es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.Song.getYear():::EXIT
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.genre == orig(this.genre)
es.uc3m.recordplayer.logic.Genre.CLASSICAL == orig(es.uc3m.recordplayer.logic.Genre.CLASSICAL)
es.uc3m.recordplayer.logic.Genre.POP == orig(es.uc3m.recordplayer.logic.Genre.POP)
es.uc3m.recordplayer.logic.Genre.ROCK == orig(es.uc3m.recordplayer.logic.Genre.ROCK)
es.uc3m.recordplayer.logic.Genre.JAZZ == orig(es.uc3m.recordplayer.logic.Genre.JAZZ)
es.uc3m.recordplayer.logic.Genre.DANCE == orig(es.uc3m.recordplayer.logic.Genre.DANCE)
es.uc3m.recordplayer.logic.Genre.OTHERS == orig(es.uc3m.recordplayer.logic.Genre.OTHERS)
es.uc3m.recordplayer.logic.Genre.$VALUES == orig(es.uc3m.recordplayer.logic.Genre.$VALUES)
es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.Genre.$VALUES[] == orig(es.uc3m.recordplayer.logic.Genre.$VALUES[])
this.artist == orig(this.artist)
this.artist.name == orig(this.artist.name)
this.artist.name.toString == orig(this.artist.name.toString)
this.artist.type == orig(this.artist.type)
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE)
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE)
es.uc3m.recordplayer.logic.PerformerType.GROUP == orig(es.uc3m.recordplayer.logic.PerformerType.GROUP)
es.uc3m.recordplayer.logic.PerformerType.OTHERS == orig(es.uc3m.recordplayer.logic.PerformerType.OTHERS)
es.uc3m.recordplayer.logic.PerformerType.$VALUES == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES)
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES[])
this.year == return
this.duration == orig(this.duration)
this.startPoint == orig(this.startPoint)
this.isComposed == orig(this.isComposed)
this.isRecorded == orig(this.isRecorded)
this.isStudio == orig(this.isStudio)
return == orig(this.year)
es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName() != es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.Song.toString():::ENTER
===========================================================================
es.uc3m.recordplayer.logic.Song.toString():::EXIT
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.genre == orig(this.genre)
es.uc3m.recordplayer.logic.Genre.CLASSICAL == orig(es.uc3m.recordplayer.logic.Genre.CLASSICAL)
es.uc3m.recordplayer.logic.Genre.POP == orig(es.uc3m.recordplayer.logic.Genre.POP)
es.uc3m.recordplayer.logic.Genre.ROCK == orig(es.uc3m.recordplayer.logic.Genre.ROCK)
es.uc3m.recordplayer.logic.Genre.JAZZ == orig(es.uc3m.recordplayer.logic.Genre.JAZZ)
es.uc3m.recordplayer.logic.Genre.DANCE == orig(es.uc3m.recordplayer.logic.Genre.DANCE)
es.uc3m.recordplayer.logic.Genre.OTHERS == orig(es.uc3m.recordplayer.logic.Genre.OTHERS)
es.uc3m.recordplayer.logic.Genre.$VALUES == orig(es.uc3m.recordplayer.logic.Genre.$VALUES)
es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.Genre.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.Genre.$VALUES[] == orig(es.uc3m.recordplayer.logic.Genre.$VALUES[])
this.artist == orig(this.artist)
this.artist.name == orig(this.artist.name)
this.artist.name.toString == orig(this.artist.name.toString)
this.artist.type == orig(this.artist.type)
es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOLOIST_MALE)
es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE == orig(es.uc3m.recordplayer.logic.PerformerType.SOILOIST_FEMALE)
es.uc3m.recordplayer.logic.PerformerType.GROUP == orig(es.uc3m.recordplayer.logic.PerformerType.GROUP)
es.uc3m.recordplayer.logic.PerformerType.OTHERS == orig(es.uc3m.recordplayer.logic.PerformerType.OTHERS)
es.uc3m.recordplayer.logic.PerformerType.$VALUES == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES)
es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.PerformerType.$VALUES[] == orig(es.uc3m.recordplayer.logic.PerformerType.$VALUES[])
this.year == orig(this.year)
this.duration == orig(this.duration)
this.startPoint == orig(this.startPoint)
this.isComposed == orig(this.isComposed)
this.isRecorded == orig(this.isRecorded)
this.isStudio == orig(this.isStudio)
return != null
===========================================================================
es.uc3m.recordplayer.logic.Stylus:::OBJECT
this has only one value
this.position == -1.0
this.isDropped == true
this.isParked == true
===========================================================================
es.uc3m.recordplayer.logic.Stylus.Stylus():::EXIT
===========================================================================
es.uc3m.recordplayer.logic.TrackCollection:::OBJECT
this.firstNode.nextNode.elem.getClass().getName() == this.firstNode.elem.getClass().getName()
this.firstNode.elem.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
===========================================================================
es.uc3m.recordplayer.logic.TrackCollection.TrackCollection():::EXIT
this.firstNode == null
===========================================================================
es.uc3m.recordplayer.logic.TrackCollection.TrackCollection(es.uc3m.recordplayer.logic.RecordCollection):::ENTER
arg0 has only one value
arg0.firstNode has only one value
arg0.firstNode.nextNode has only one value
arg0.firstNode.elem has only one value
arg0.firstNode.elem.getClass().getName() == es.uc3m.recordplayer.logic.Record.class
===========================================================================
es.uc3m.recordplayer.logic.TrackCollection.TrackCollection(es.uc3m.recordplayer.logic.RecordCollection):::EXIT
arg0.firstNode == orig(arg0.firstNode)
arg0.firstNode.nextNode == orig(arg0.firstNode.nextNode)
arg0.firstNode.elem == orig(arg0.firstNode.elem)
arg0.firstNode.elem.getClass().getName() == orig(arg0.firstNode.elem.getClass().getName())
this.firstNode has only one value
this.firstNode.nextNode has only one value
this.firstNode.nextNode.nextNode has only one value
this.firstNode.nextNode.elem has only one value
this.firstNode.elem has only one value
arg0.firstNode has only one value
arg0.firstNode.nextNode has only one value
arg0.firstNode.elem has only one value
arg0.firstNode.elem.getClass().getName() == es.uc3m.recordplayer.logic.Record.class
===========================================================================
es.uc3m.recordplayer.logic.TrackCollection.getTrackCollectionByPerformer(java.lang.String):::ENTER
this has only one value
this.firstNode has only one value
this.firstNode.nextNode has only one value
this.firstNode.nextNode.nextNode has only one value
this.firstNode.nextNode.elem has only one value
this.firstNode.elem has only one value
arg0 has only one value
arg0.toString == "Mecano"
===========================================================================
es.uc3m.recordplayer.logic.TrackCollection.getTrackCollectionByPerformer(java.lang.String):::EXIT
this.firstNode == orig(this.firstNode)
this.firstNode.nextNode == orig(this.firstNode.nextNode)
this.firstNode.nextNode.nextNode == orig(this.firstNode.nextNode.nextNode)
this.firstNode.nextNode.elem == orig(this.firstNode.nextNode.elem)
this.firstNode.elem == orig(this.firstNode.elem)
this.firstNode.elem.getClass().getName() == return.firstNode.elem.getClass().getName()
this.firstNode.elem.getClass().getName() == orig(this.firstNode.nextNode.elem.getClass().getName())
this.firstNode.elem.getClass().getName() == orig(this.firstNode.elem.getClass().getName())
arg0.toString == orig(arg0.toString)
this.firstNode has only one value
this.firstNode.nextNode has only one value
this.firstNode.nextNode.nextNode has only one value
this.firstNode.nextNode.elem has only one value
this.firstNode.elem has only one value
arg0.toString == "Mecano"
return has only one value
return.firstNode has only one value
return.firstNode.nextNode has only one value
return.firstNode.elem has only one value
===========================================================================
es.uc3m.recordplayer.logic.TrackCollection.showTrackCollection():::ENTER
===========================================================================
es.uc3m.recordplayer.logic.TrackCollection.showTrackCollection():::EXIT
this.firstNode == orig(this.firstNode)
this.firstNode.nextNode == orig(this.firstNode.nextNode)
this.firstNode.nextNode.nextNode == orig(this.firstNode.nextNode.nextNode)
this.firstNode.nextNode.elem == orig(this.firstNode.nextNode.elem)
this.firstNode.elem == orig(this.firstNode.elem)
this.firstNode.elem.getClass().getName() == orig(this.firstNode.nextNode.elem.getClass().getName())
this.firstNode.elem.getClass().getName() == orig(this.firstNode.elem.getClass().getName())
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByTitle:::OBJECT
this.root == this.root.leftChild.parent
this.root == this.root.rightChild.parent
this.root.key.getClass().getName() == this.root.leftChild.key.getClass().getName()
this.root.key.getClass().getName() == this.root.rightChild.key.getClass().getName()
this.root.element.getClass().getName() == this.root.leftChild.element.getClass().getName()
this.root.element.getClass().getName() == this.root.rightChild.element.getClass().getName()
this has only one value
this.root has only one value
this.root != null
this.root.key has only one value
this.root.key != null
this.root.key.getClass().getName() == java.lang.String.class
this.root.element has only one value
this.root.element != null
this.root.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
this.root.parent == null
this.root.leftChild has only one value
this.root.leftChild != null
this.root.leftChild.key has only one value
this.root.leftChild.key != null
this.root.leftChild.element has only one value
this.root.leftChild.element != null
this.root.leftChild.leftChild has only one value
this.root.leftChild.leftChild != null
this.root.leftChild.rightChild has only one value
this.root.leftChild.rightChild != null
this.root.rightChild has only one value
this.root.rightChild != null
this.root.rightChild.key has only one value
this.root.rightChild.key != null
this.root.rightChild.element has only one value
this.root.rightChild.element != null
this.root.rightChild.leftChild == null
this.root.rightChild.rightChild has only one value
this.root.rightChild.rightChild != null
this.root.key.getClass().getName() != this.root.element.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByTitle.TrackTreeByTitle(es.uc3m.recordplayer.logic.TrackCollection):::ENTER
arg0 has only one value
arg0.firstNode has only one value
arg0.firstNode.nextNode has only one value
arg0.firstNode.elem has only one value
arg0.firstNode.elem.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByTitle.TrackTreeByTitle(es.uc3m.recordplayer.logic.TrackCollection):::EXIT
this.root.element == arg0.firstNode.elem
this.root.element == orig(arg0.firstNode.elem)
this.root.element.getClass().getName() == arg0.firstNode.elem.getClass().getName()
this.root.element.getClass().getName() == orig(arg0.firstNode.elem.getClass().getName())
arg0.firstNode == orig(arg0.firstNode)
arg0.firstNode.nextNode == orig(arg0.firstNode.nextNode)
arg0.firstNode has only one value
arg0.firstNode.nextNode has only one value
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByTitle.containsTrackByTitle(es.uc3m.eda.tree.BSTNode, java.lang.String):::ENTER
this.root.key.getClass().getName() == arg0.key.getClass().getName()
this.root.key.getClass().getName() == arg0.parent.key.getClass().getName()
this.root.key.getClass().getName() == arg0.leftChild.key.getClass().getName()
this.root.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
this.root.element.getClass().getName() == arg0.element.getClass().getName()
this.root.element.getClass().getName() == arg0.parent.element.getClass().getName()
this.root.element.getClass().getName() == arg0.leftChild.element.getClass().getName()
this.root.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0 == arg0.parent.leftChild
arg0 == arg0.leftChild.parent
arg0 == arg0.rightChild.parent
arg0.parent.key.getClass().getName() == java.lang.String.class
arg0.parent.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg1 has only one value
arg1.toString == "For you Blue"
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByTitle.containsTrackByTitle(es.uc3m.eda.tree.BSTNode, java.lang.String):::EXIT40
this.root.key == arg0.parent.key
this.root.element == arg0.parent.element
this.root.leftChild == arg0.parent.leftChild
this.root.rightChild == arg0.parent.rightChild
arg0.parent.key has only one value
arg0.parent.element has only one value
arg0.parent.parent == null
arg0.parent.leftChild has only one value
arg0.parent.rightChild has only one value
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByTitle.containsTrackByTitle(es.uc3m.eda.tree.BSTNode, java.lang.String):::EXIT40;condition="return == true"
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByTitle.containsTrackByTitle(es.uc3m.eda.tree.BSTNode, java.lang.String):::EXIT43
this.root == arg0.parent.parent
this.root == orig(arg0.parent.parent)
this.root.leftChild == arg0.parent
this.root.leftChild.key == arg0.parent.key
this.root.leftChild.element == arg0.parent.element
this.root.leftChild.leftChild == orig(arg0)
this.root.leftChild.rightChild == arg0.parent.rightChild
arg0.key.getClass().getName() == orig(arg0.parent.key.getClass().getName())
arg0.element.getClass().getName() == orig(arg0.parent.element.getClass().getName())
arg0.parent == orig(this.root.leftChild)
arg0.parent.key == orig(this.root.leftChild.key)
arg0.parent.element == orig(this.root.leftChild.element)
arg0.parent.rightChild == orig(this.root.leftChild.rightChild)
arg0.leftChild.leftChild == arg0.rightChild.rightChild
arg0.leftChild.leftChild == orig(arg0.rightChild.rightChild)
orig(this.root.leftChild.leftChild) == orig(arg0)
orig(arg0) == orig(arg0.parent.leftChild)
arg0.key has only one value
arg0.element has only one value
arg0.parent has only one value
arg0.parent.key has only one value
arg0.parent.element has only one value
arg0.parent.rightChild has only one value
arg0.leftChild has only one value
arg0.leftChild.key has only one value
arg0.leftChild.element has only one value
arg0.leftChild.leftChild == null
arg0.leftChild.rightChild has only one value
arg0.rightChild has only one value
arg0.rightChild.key has only one value
arg0.rightChild.element has only one value
arg0.rightChild.leftChild has only one value
orig(arg0) has only one value
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByTitle.containsTrackByTitle(es.uc3m.eda.tree.BSTNode, java.lang.String):::EXIT43;condition="return == true"
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByTitle.containsTrackByTitle(es.uc3m.eda.tree.BSTNode, java.lang.String):::EXIT
this.root == orig(this.root)
this.root == orig(this.root.leftChild.parent)
this.root == orig(this.root.rightChild.parent)
this.root.key == orig(this.root.key)
this.root.key.getClass().getName() == arg0.key.getClass().getName()
this.root.element == orig(this.root.element)
this.root.element.getClass().getName() == arg0.element.getClass().getName()
this.root.parent == orig(this.root.parent)
this.root.leftChild == orig(this.root.leftChild)
this.root.leftChild.key == orig(this.root.leftChild.key)
this.root.leftChild.key.getClass().getName() == arg0.key.getClass().getName()
this.root.leftChild.element == orig(this.root.leftChild.element)
this.root.leftChild.element.getClass().getName() == arg0.element.getClass().getName()
this.root.leftChild.leftChild == orig(this.root.leftChild.leftChild)
this.root.leftChild.rightChild == orig(this.root.leftChild.rightChild)
this.root.rightChild == orig(this.root.rightChild)
this.root.rightChild.key == orig(this.root.rightChild.key)
this.root.rightChild.key.getClass().getName() == arg0.key.getClass().getName()
this.root.rightChild.element == orig(this.root.rightChild.element)
this.root.rightChild.element.getClass().getName() == arg0.element.getClass().getName()
this.root.rightChild.leftChild == orig(this.root.rightChild.leftChild)
this.root.rightChild.rightChild == orig(this.root.rightChild.rightChild)
arg0.key == orig(arg0.key)
arg0.key.getClass().getName() == arg0.parent.key.getClass().getName()
arg0.key.getClass().getName() == arg0.leftChild.key.getClass().getName()
arg0.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.key.getClass().getName() == orig(this.root.key.getClass().getName())
arg0.key.getClass().getName() == orig(this.root.leftChild.key.getClass().getName())
arg0.key.getClass().getName() == orig(this.root.rightChild.key.getClass().getName())
arg0.key.getClass().getName() == orig(arg0.key.getClass().getName())
arg0.key.getClass().getName() == orig(arg0.leftChild.key.getClass().getName())
arg0.key.getClass().getName() == orig(arg0.rightChild.key.getClass().getName())
arg0.element == orig(arg0.element)
arg0.element.getClass().getName() == arg0.parent.element.getClass().getName()
arg0.element.getClass().getName() == arg0.leftChild.element.getClass().getName()
arg0.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.element.getClass().getName() == orig(this.root.element.getClass().getName())
arg0.element.getClass().getName() == orig(this.root.leftChild.element.getClass().getName())
arg0.element.getClass().getName() == orig(this.root.rightChild.element.getClass().getName())
arg0.element.getClass().getName() == orig(arg0.element.getClass().getName())
arg0.element.getClass().getName() == orig(arg0.leftChild.element.getClass().getName())
arg0.element.getClass().getName() == orig(arg0.rightChild.element.getClass().getName())
arg0.parent == orig(arg0.parent)
arg0.parent.key == orig(arg0.parent.key)
arg0.parent.key.getClass().getName() == orig(arg0.parent.key.getClass().getName())
arg0.parent.element == orig(arg0.parent.element)
arg0.parent.element.getClass().getName() == orig(arg0.parent.element.getClass().getName())
arg0.parent.parent == orig(arg0.parent.parent)
arg0.parent.leftChild == orig(arg0)
arg0.parent.leftChild == orig(arg0.parent.leftChild)
arg0.parent.rightChild == orig(arg0.parent.rightChild)
arg0.leftChild == orig(arg0.leftChild)
arg0.leftChild.key == orig(arg0.leftChild.key)
arg0.leftChild.element == orig(arg0.leftChild.element)
arg0.leftChild.parent == orig(arg0)
arg0.leftChild.leftChild == orig(arg0.leftChild.leftChild)
arg0.leftChild.rightChild == orig(arg0.leftChild.rightChild)
arg0.rightChild == orig(arg0.rightChild)
arg0.rightChild.key == orig(arg0.rightChild.key)
arg0.rightChild.element == orig(arg0.rightChild.element)
arg0.rightChild.parent == orig(arg0)
arg0.rightChild.leftChild == orig(arg0.rightChild.leftChild)
arg0.rightChild.rightChild == orig(arg0.rightChild.rightChild)
arg1.toString == orig(arg1.toString)
arg0.key.getClass().getName() == java.lang.String.class
arg0.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.parent.key.getClass().getName() == java.lang.String.class
arg0.parent.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg1.toString == "For you Blue"
return == true
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByTitle.containsTrackByTitle(es.uc3m.eda.tree.BSTNode, java.lang.String):::EXIT;condition="return == true"
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByTitle.containsTrackByTitle(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "For you Blue"
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByTitle.containsTrackByTitle(java.lang.String):::EXIT
this.root == orig(this.root)
this.root == orig(this.root.leftChild.parent)
this.root == orig(this.root.rightChild.parent)
this.root.key == orig(this.root.key)
this.root.key.getClass().getName() == orig(this.root.key.getClass().getName())
this.root.key.getClass().getName() == orig(this.root.leftChild.key.getClass().getName())
this.root.key.getClass().getName() == orig(this.root.rightChild.key.getClass().getName())
this.root.element == orig(this.root.element)
this.root.element.getClass().getName() == orig(this.root.element.getClass().getName())
this.root.element.getClass().getName() == orig(this.root.leftChild.element.getClass().getName())
this.root.element.getClass().getName() == orig(this.root.rightChild.element.getClass().getName())
this.root.parent == orig(this.root.parent)
this.root.leftChild == orig(this.root.leftChild)
this.root.leftChild.key == orig(this.root.leftChild.key)
this.root.leftChild.element == orig(this.root.leftChild.element)
this.root.leftChild.leftChild == orig(this.root.leftChild.leftChild)
this.root.leftChild.rightChild == orig(this.root.leftChild.rightChild)
this.root.rightChild == orig(this.root.rightChild)
this.root.rightChild.key == orig(this.root.rightChild.key)
this.root.rightChild.element == orig(this.root.rightChild.element)
this.root.rightChild.leftChild == orig(this.root.rightChild.leftChild)
this.root.rightChild.rightChild == orig(this.root.rightChild.rightChild)
arg0.toString == orig(arg0.toString)
arg0.toString == "For you Blue"
return == true
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByTitle.containsTrackByTitle(java.lang.String):::EXIT;condition="return == true"
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByTitle.showTrackTreeByTitleInOrder():::ENTER
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByTitle.showTrackTreeByTitleInOrder():::EXIT
this.root == orig(this.root)
this.root == orig(this.root.leftChild.parent)
this.root == orig(this.root.rightChild.parent)
this.root.key == orig(this.root.key)
this.root.key.getClass().getName() == orig(this.root.key.getClass().getName())
this.root.key.getClass().getName() == orig(this.root.leftChild.key.getClass().getName())
this.root.key.getClass().getName() == orig(this.root.rightChild.key.getClass().getName())
this.root.element == orig(this.root.element)
this.root.element.getClass().getName() == orig(this.root.element.getClass().getName())
this.root.element.getClass().getName() == orig(this.root.leftChild.element.getClass().getName())
this.root.element.getClass().getName() == orig(this.root.rightChild.element.getClass().getName())
this.root.parent == orig(this.root.parent)
this.root.leftChild == orig(this.root.leftChild)
this.root.leftChild.key == orig(this.root.leftChild.key)
this.root.leftChild.element == orig(this.root.leftChild.element)
this.root.leftChild.leftChild == orig(this.root.leftChild.leftChild)
this.root.leftChild.rightChild == orig(this.root.leftChild.rightChild)
this.root.rightChild == orig(this.root.rightChild)
this.root.rightChild.key == orig(this.root.rightChild.key)
this.root.rightChild.element == orig(this.root.rightChild.element)
this.root.rightChild.leftChild == orig(this.root.rightChild.leftChild)
this.root.rightChild.rightChild == orig(this.root.rightChild.rightChild)
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByTitle.showTrackTreeByTitleInOrder(es.uc3m.eda.tree.BSTNode):::ENTER
this.root.key.getClass().getName() == arg0.key.getClass().getName()
this.root.key.getClass().getName() == arg0.parent.key.getClass().getName()
this.root.key.getClass().getName() == arg0.leftChild.key.getClass().getName()
this.root.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
this.root.element.getClass().getName() == arg0.element.getClass().getName()
this.root.element.getClass().getName() == arg0.parent.element.getClass().getName()
this.root.element.getClass().getName() == arg0.leftChild.element.getClass().getName()
this.root.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0 == arg0.leftChild.parent
arg0 == arg0.rightChild.parent
arg0.key.getClass().getName() == arg0.parent.key.getClass().getName()
arg0.key.getClass().getName() == arg0.leftChild.key.getClass().getName()
arg0.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.element.getClass().getName() == arg0.parent.element.getClass().getName()
arg0.element.getClass().getName() == arg0.leftChild.element.getClass().getName()
arg0.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.parent.key.getClass().getName() == arg0.leftChild.key.getClass().getName()
arg0.parent.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.parent.element.getClass().getName() == arg0.leftChild.element.getClass().getName()
arg0.parent.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.leftChild.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.leftChild.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.leftChild.parent == arg0.rightChild.parent
arg0.key != null
arg0.key.getClass().getName() == java.lang.String.class
arg0.element != null
arg0.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.parent.key != null
arg0.parent.key.getClass().getName() == java.lang.String.class
arg0.parent.element != null
arg0.parent.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.leftChild.key.getClass().getName() == java.lang.String.class
arg0.leftChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.rightChild.key.getClass().getName() == java.lang.String.class
arg0.rightChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
this.root.key.getClass().getName() != arg0.element.getClass().getName()
this.root.key.getClass().getName() != arg0.parent.element.getClass().getName()
this.root.key.getClass().getName() != arg0.leftChild.element.getClass().getName()
this.root.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
this.root.element.getClass().getName() != arg0.key.getClass().getName()
this.root.element.getClass().getName() != arg0.parent.key.getClass().getName()
this.root.element.getClass().getName() != arg0.leftChild.key.getClass().getName()
this.root.element.getClass().getName() != arg0.rightChild.key.getClass().getName()
arg0.key.getClass().getName() != arg0.element.getClass().getName()
arg0.key.getClass().getName() != arg0.parent.element.getClass().getName()
arg0.key.getClass().getName() != arg0.leftChild.element.getClass().getName()
arg0.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
arg0.element.getClass().getName() != arg0.parent.key.getClass().getName()
arg0.element.getClass().getName() != arg0.leftChild.key.getClass().getName()
arg0.element.getClass().getName() != arg0.rightChild.key.getClass().getName()
arg0.parent.key.getClass().getName() != arg0.parent.element.getClass().getName()
arg0.parent.key.getClass().getName() != arg0.leftChild.element.getClass().getName()
arg0.parent.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
arg0.parent.element.getClass().getName() != arg0.leftChild.key.getClass().getName()
arg0.parent.element.getClass().getName() != arg0.rightChild.key.getClass().getName()
arg0.leftChild.key.getClass().getName() != arg0.leftChild.element.getClass().getName()
arg0.rightChild.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByTitle.showTrackTreeByTitleInOrder(es.uc3m.eda.tree.BSTNode):::EXIT
this.root == orig(this.root)
this.root == orig(this.root.leftChild.parent)
this.root == orig(this.root.rightChild.parent)
this.root.key == orig(this.root.key)
this.root.key.getClass().getName() == arg0.key.getClass().getName()
this.root.key.getClass().getName() == arg0.parent.key.getClass().getName()
this.root.key.getClass().getName() == arg0.leftChild.key.getClass().getName()
this.root.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
this.root.key.getClass().getName() == orig(this.root.key.getClass().getName())
this.root.key.getClass().getName() == orig(this.root.leftChild.key.getClass().getName())
this.root.key.getClass().getName() == orig(this.root.rightChild.key.getClass().getName())
this.root.element == orig(this.root.element)
this.root.element.getClass().getName() == arg0.element.getClass().getName()
this.root.element.getClass().getName() == arg0.parent.element.getClass().getName()
this.root.element.getClass().getName() == arg0.leftChild.element.getClass().getName()
this.root.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
this.root.element.getClass().getName() == orig(this.root.element.getClass().getName())
this.root.element.getClass().getName() == orig(this.root.leftChild.element.getClass().getName())
this.root.element.getClass().getName() == orig(this.root.rightChild.element.getClass().getName())
this.root.parent == orig(this.root.parent)
this.root.leftChild == orig(this.root.leftChild)
this.root.leftChild.key == orig(this.root.leftChild.key)
this.root.leftChild.element == orig(this.root.leftChild.element)
this.root.leftChild.leftChild == orig(this.root.leftChild.leftChild)
this.root.leftChild.rightChild == orig(this.root.leftChild.rightChild)
this.root.rightChild == orig(this.root.rightChild)
this.root.rightChild.key == orig(this.root.rightChild.key)
this.root.rightChild.element == orig(this.root.rightChild.element)
this.root.rightChild.leftChild == orig(this.root.rightChild.leftChild)
this.root.rightChild.rightChild == orig(this.root.rightChild.rightChild)
arg0.key == orig(arg0.key)
arg0.key.getClass().getName() == arg0.parent.key.getClass().getName()
arg0.key.getClass().getName() == arg0.leftChild.key.getClass().getName()
arg0.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.key.getClass().getName() == orig(arg0.key.getClass().getName())
arg0.element == orig(arg0.element)
arg0.element.getClass().getName() == arg0.parent.element.getClass().getName()
arg0.element.getClass().getName() == arg0.leftChild.element.getClass().getName()
arg0.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.element.getClass().getName() == orig(arg0.element.getClass().getName())
arg0.parent == orig(arg0.parent)
arg0.parent.key == orig(arg0.parent.key)
arg0.parent.key.getClass().getName() == arg0.leftChild.key.getClass().getName()
arg0.parent.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.parent.key.getClass().getName() == orig(arg0.parent.key.getClass().getName())
arg0.parent.element == orig(arg0.parent.element)
arg0.parent.element.getClass().getName() == arg0.leftChild.element.getClass().getName()
arg0.parent.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.parent.element.getClass().getName() == orig(arg0.parent.element.getClass().getName())
arg0.parent.parent == orig(arg0.parent.parent)
arg0.parent.leftChild == orig(arg0.parent.leftChild)
arg0.parent.rightChild == orig(arg0.parent.rightChild)
arg0.leftChild == orig(arg0.leftChild)
arg0.leftChild.key == orig(arg0.leftChild.key)
arg0.leftChild.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.leftChild.key.getClass().getName() == orig(arg0.leftChild.key.getClass().getName())
arg0.leftChild.element == orig(arg0.leftChild.element)
arg0.leftChild.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.leftChild.element.getClass().getName() == orig(arg0.leftChild.element.getClass().getName())
arg0.leftChild.parent == arg0.rightChild.parent
arg0.leftChild.parent == orig(arg0)
arg0.leftChild.parent == orig(arg0.leftChild.parent)
arg0.leftChild.leftChild == orig(arg0.leftChild.leftChild)
arg0.leftChild.rightChild == orig(arg0.leftChild.rightChild)
arg0.rightChild == orig(arg0.rightChild)
arg0.rightChild.key == orig(arg0.rightChild.key)
arg0.rightChild.key.getClass().getName() == orig(arg0.rightChild.key.getClass().getName())
arg0.rightChild.element == orig(arg0.rightChild.element)
arg0.rightChild.element.getClass().getName() == orig(arg0.rightChild.element.getClass().getName())
arg0.rightChild.parent == orig(arg0)
arg0.rightChild.parent == orig(arg0.rightChild.parent)
arg0.rightChild.leftChild == orig(arg0.rightChild.leftChild)
arg0.rightChild.rightChild == orig(arg0.rightChild.rightChild)
arg0.key != null
arg0.key.getClass().getName() == java.lang.String.class
arg0.element != null
arg0.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.parent.key != null
arg0.parent.key.getClass().getName() == java.lang.String.class
arg0.parent.element != null
arg0.parent.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.leftChild.key.getClass().getName() == java.lang.String.class
arg0.leftChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.rightChild.key.getClass().getName() == java.lang.String.class
arg0.rightChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
this.root.key.getClass().getName() != arg0.element.getClass().getName()
this.root.key.getClass().getName() != arg0.parent.element.getClass().getName()
this.root.key.getClass().getName() != arg0.leftChild.element.getClass().getName()
this.root.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
this.root.element.getClass().getName() != arg0.key.getClass().getName()
this.root.element.getClass().getName() != arg0.parent.key.getClass().getName()
this.root.element.getClass().getName() != arg0.leftChild.key.getClass().getName()
this.root.element.getClass().getName() != arg0.rightChild.key.getClass().getName()
arg0.key.getClass().getName() != arg0.element.getClass().getName()
arg0.key.getClass().getName() != arg0.parent.element.getClass().getName()
arg0.key.getClass().getName() != arg0.leftChild.element.getClass().getName()
arg0.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
arg0.element.getClass().getName() != arg0.parent.key.getClass().getName()
arg0.element.getClass().getName() != arg0.leftChild.key.getClass().getName()
arg0.element.getClass().getName() != arg0.rightChild.key.getClass().getName()
arg0.parent.key.getClass().getName() != arg0.parent.element.getClass().getName()
arg0.parent.key.getClass().getName() != arg0.leftChild.element.getClass().getName()
arg0.parent.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
arg0.parent.element.getClass().getName() != arg0.leftChild.key.getClass().getName()
arg0.parent.element.getClass().getName() != arg0.rightChild.key.getClass().getName()
arg0.leftChild.key.getClass().getName() != arg0.leftChild.element.getClass().getName()
arg0.rightChild.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByTitle.tracksByYearsRange(es.uc3m.eda.tree.BSTNode, int, int, es.uc3m.recordplayer.logic.TrackCollection):::ENTER
this.root.key.getClass().getName() == arg0.key.getClass().getName()
this.root.key.getClass().getName() == arg0.parent.key.getClass().getName()
this.root.key.getClass().getName() == arg0.leftChild.key.getClass().getName()
this.root.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
this.root.element.getClass().getName() == arg0.element.getClass().getName()
this.root.element.getClass().getName() == arg0.parent.element.getClass().getName()
this.root.element.getClass().getName() == arg0.leftChild.element.getClass().getName()
this.root.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
this.root.element.getClass().getName() == arg3.firstNode.elem.getClass().getName()
arg0 == arg0.leftChild.parent
arg0 == arg0.rightChild.parent
arg0.parent.key.getClass().getName() == arg0.leftChild.key.getClass().getName()
arg0.parent.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.parent.element.getClass().getName() == arg0.leftChild.element.getClass().getName()
arg0.parent.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.parent.element.getClass().getName() == arg3.firstNode.elem.getClass().getName()
arg0.leftChild.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.leftChild.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.leftChild.element.getClass().getName() == arg3.firstNode.elem.getClass().getName()
arg0.leftChild.parent == arg0.rightChild.parent
arg0.rightChild.element.getClass().getName() == arg3.firstNode.elem.getClass().getName()
arg0 != null
arg0.key != null
arg0.element != null
arg0.parent.key != null
arg0.parent.key.getClass().getName() == java.lang.String.class
arg0.parent.element != null
arg0.parent.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.leftChild.key.getClass().getName() == java.lang.String.class
arg0.leftChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.rightChild.key.getClass().getName() == java.lang.String.class
arg0.rightChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg1 == 1980
arg2 == 1991
arg3 has only one value
arg3 != null
arg3.firstNode.elem has only one value
arg3.firstNode.elem != null
arg3.firstNode.elem.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
this.root.key.getClass().getName() != arg0.parent.element.getClass().getName()
this.root.key.getClass().getName() != arg0.leftChild.element.getClass().getName()
this.root.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
this.root.key.getClass().getName() != arg3.firstNode.elem.getClass().getName()
this.root.element.getClass().getName() != arg0.parent.key.getClass().getName()
this.root.element.getClass().getName() != arg0.leftChild.key.getClass().getName()
this.root.element.getClass().getName() != arg0.rightChild.key.getClass().getName()
arg0.parent.key.getClass().getName() != arg0.parent.element.getClass().getName()
arg0.parent.key.getClass().getName() != arg0.leftChild.element.getClass().getName()
arg0.parent.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
arg0.parent.key.getClass().getName() != arg3.firstNode.elem.getClass().getName()
arg0.parent.element.getClass().getName() != arg0.leftChild.key.getClass().getName()
arg0.parent.element.getClass().getName() != arg0.rightChild.key.getClass().getName()
arg0.leftChild.key.getClass().getName() != arg0.leftChild.element.getClass().getName()
arg0.rightChild.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByTitle.tracksByYearsRange(es.uc3m.eda.tree.BSTNode, int, int, es.uc3m.recordplayer.logic.TrackCollection):::EXIT
this.root == orig(this.root)
this.root == orig(this.root.leftChild.parent)
this.root == orig(this.root.rightChild.parent)
this.root.key == orig(this.root.key)
this.root.key.getClass().getName() == arg0.key.getClass().getName()
this.root.element == orig(this.root.element)
this.root.element.getClass().getName() == arg0.element.getClass().getName()
this.root.parent == orig(this.root.parent)
this.root.leftChild == orig(this.root.leftChild)
this.root.leftChild.key == orig(this.root.leftChild.key)
this.root.leftChild.key.getClass().getName() == arg0.key.getClass().getName()
this.root.leftChild.element == orig(this.root.leftChild.element)
this.root.leftChild.element.getClass().getName() == arg0.element.getClass().getName()
this.root.leftChild.leftChild == orig(this.root.leftChild.leftChild)
this.root.leftChild.rightChild == orig(this.root.leftChild.rightChild)
this.root.rightChild == orig(this.root.rightChild)
this.root.rightChild.key == orig(this.root.rightChild.key)
this.root.rightChild.key.getClass().getName() == arg0.key.getClass().getName()
this.root.rightChild.element == orig(this.root.rightChild.element)
this.root.rightChild.element.getClass().getName() == arg0.element.getClass().getName()
this.root.rightChild.leftChild == orig(this.root.rightChild.leftChild)
this.root.rightChild.rightChild == orig(this.root.rightChild.rightChild)
arg0.key == orig(arg0.key)
arg0.key.getClass().getName() == arg0.parent.key.getClass().getName()
arg0.key.getClass().getName() == arg0.leftChild.key.getClass().getName()
arg0.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.key.getClass().getName() == orig(this.root.key.getClass().getName())
arg0.key.getClass().getName() == orig(this.root.leftChild.key.getClass().getName())
arg0.key.getClass().getName() == orig(this.root.rightChild.key.getClass().getName())
arg0.key.getClass().getName() == orig(arg0.key.getClass().getName())
arg0.element == orig(arg0.element)
arg0.element.getClass().getName() == arg0.parent.element.getClass().getName()
arg0.element.getClass().getName() == arg0.leftChild.element.getClass().getName()
arg0.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.element.getClass().getName() == arg3.firstNode.elem.getClass().getName()
arg0.element.getClass().getName() == orig(this.root.element.getClass().getName())
arg0.element.getClass().getName() == orig(this.root.leftChild.element.getClass().getName())
arg0.element.getClass().getName() == orig(this.root.rightChild.element.getClass().getName())
arg0.element.getClass().getName() == orig(arg0.element.getClass().getName())
arg0.element.getClass().getName() == orig(arg3.firstNode.elem.getClass().getName())
arg0.parent == orig(arg0.parent)
arg0.parent.key == orig(arg0.parent.key)
arg0.parent.key.getClass().getName() == arg0.leftChild.key.getClass().getName()
arg0.parent.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.parent.key.getClass().getName() == orig(arg0.parent.key.getClass().getName())
arg0.parent.element == orig(arg0.parent.element)
arg0.parent.element.getClass().getName() == arg0.leftChild.element.getClass().getName()
arg0.parent.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.parent.element.getClass().getName() == orig(arg0.parent.element.getClass().getName())
arg0.parent.element.getClass().getName() == orig(arg3.firstNode.elem.getClass().getName())
arg0.parent.parent == orig(arg0.parent.parent)
arg0.parent.leftChild == orig(arg0.parent.leftChild)
arg0.parent.rightChild == orig(arg0.parent.rightChild)
arg0.leftChild == orig(arg0.leftChild)
arg0.leftChild.key == orig(arg0.leftChild.key)
arg0.leftChild.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.leftChild.key.getClass().getName() == orig(arg0.leftChild.key.getClass().getName())
arg0.leftChild.element == orig(arg0.leftChild.element)
arg0.leftChild.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.leftChild.element.getClass().getName() == orig(arg0.leftChild.element.getClass().getName())
arg0.leftChild.element.getClass().getName() == orig(arg3.firstNode.elem.getClass().getName())
arg0.leftChild.parent == arg0.rightChild.parent
arg0.leftChild.parent == orig(arg0)
arg0.leftChild.parent == orig(arg0.leftChild.parent)
arg0.leftChild.leftChild == orig(arg0.leftChild.leftChild)
arg0.leftChild.rightChild == orig(arg0.leftChild.rightChild)
arg0.rightChild == orig(arg0.rightChild)
arg0.rightChild.key == orig(arg0.rightChild.key)
arg0.rightChild.key.getClass().getName() == orig(arg0.rightChild.key.getClass().getName())
arg0.rightChild.element == orig(arg0.rightChild.element)
arg0.rightChild.element.getClass().getName() == orig(arg0.rightChild.element.getClass().getName())
arg0.rightChild.element.getClass().getName() == orig(arg3.firstNode.elem.getClass().getName())
arg0.rightChild.parent == orig(arg0)
arg0.rightChild.parent == orig(arg0.rightChild.parent)
arg0.rightChild.leftChild == orig(arg0.rightChild.leftChild)
arg0.rightChild.rightChild == orig(arg0.rightChild.rightChild)
arg3.firstNode.elem == orig(arg3.firstNode.elem)
arg0.key != null
arg0.key.getClass().getName() == java.lang.String.class
arg0.element != null
arg0.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.parent.key != null
arg0.parent.key.getClass().getName() == java.lang.String.class
arg0.parent.element != null
arg0.parent.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.leftChild.key.getClass().getName() == java.lang.String.class
arg0.leftChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.rightChild.key.getClass().getName() == java.lang.String.class
arg0.rightChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg3.firstNode has only one value
arg3.firstNode != null
arg3.firstNode.elem has only one value
arg3.firstNode.elem != null
arg0.key.getClass().getName() != arg0.element.getClass().getName()
arg0.key.getClass().getName() != arg0.parent.element.getClass().getName()
arg0.key.getClass().getName() != arg0.leftChild.element.getClass().getName()
arg0.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
arg0.key.getClass().getName() != orig(arg3.firstNode.elem.getClass().getName())
arg0.element.getClass().getName() != arg0.parent.key.getClass().getName()
arg0.element.getClass().getName() != arg0.leftChild.key.getClass().getName()
arg0.element.getClass().getName() != arg0.rightChild.key.getClass().getName()
arg0.parent.key.getClass().getName() != arg0.parent.element.getClass().getName()
arg0.parent.key.getClass().getName() != arg0.leftChild.element.getClass().getName()
arg0.parent.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
arg0.parent.key.getClass().getName() != orig(arg3.firstNode.elem.getClass().getName())
arg0.parent.element.getClass().getName() != arg0.leftChild.key.getClass().getName()
arg0.parent.element.getClass().getName() != arg0.rightChild.key.getClass().getName()
arg0.leftChild.key.getClass().getName() != arg0.leftChild.element.getClass().getName()
arg0.rightChild.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByTitle.tracksByYearsRange(int, int):::ENTER
arg0 == 1980
arg1 == 1991
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByTitle.tracksByYearsRange(int, int):::EXIT
this.root == orig(this.root)
this.root == orig(this.root.leftChild.parent)
this.root == orig(this.root.rightChild.parent)
this.root.key == orig(this.root.key)
this.root.key.getClass().getName() == orig(this.root.key.getClass().getName())
this.root.key.getClass().getName() == orig(this.root.leftChild.key.getClass().getName())
this.root.key.getClass().getName() == orig(this.root.rightChild.key.getClass().getName())
this.root.element == orig(this.root.element)
this.root.element.getClass().getName() == return.firstNode.elem.getClass().getName()
this.root.element.getClass().getName() == orig(this.root.element.getClass().getName())
this.root.element.getClass().getName() == orig(this.root.leftChild.element.getClass().getName())
this.root.element.getClass().getName() == orig(this.root.rightChild.element.getClass().getName())
this.root.parent == orig(this.root.parent)
this.root.leftChild == orig(this.root.leftChild)
this.root.leftChild.key == orig(this.root.leftChild.key)
this.root.leftChild.element == orig(this.root.leftChild.element)
this.root.leftChild.leftChild == orig(this.root.leftChild.leftChild)
this.root.leftChild.rightChild == orig(this.root.leftChild.rightChild)
this.root.rightChild == orig(this.root.rightChild)
this.root.rightChild.key == orig(this.root.rightChild.key)
this.root.rightChild.element == orig(this.root.rightChild.element)
this.root.rightChild.leftChild == orig(this.root.rightChild.leftChild)
this.root.rightChild.rightChild == orig(this.root.rightChild.rightChild)
return has only one value
return.firstNode has only one value
return.firstNode.nextNode has only one value
return.firstNode.elem has only one value
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByYear:::OBJECT
this.root == this.root.rightChild.parent
this.root.key.getClass().getName() == this.root.rightChild.key.getClass().getName()
this.root.element.getClass().getName() == this.root.rightChild.element.getClass().getName()
this has only one value
this.root has only one value
this.root != null
this.root.key has only one value
this.root.key != null
this.root.key.getClass().getName() == java.lang.Integer.class
this.root.element has only one value
this.root.element != null
this.root.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
this.root.parent == null
this.root.leftChild == null
this.root.rightChild has only one value
this.root.rightChild != null
this.root.rightChild.key has only one value
this.root.rightChild.key != null
this.root.rightChild.element has only one value
this.root.rightChild.element != null
this.root.rightChild.leftChild == null
this.root.rightChild.rightChild has only one value
this.root.rightChild.rightChild != null
this.root.key.getClass().getName() != this.root.element.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByYear.TrackTreeByYear(es.uc3m.recordplayer.logic.TrackCollection):::ENTER
arg0 has only one value
arg0.firstNode has only one value
arg0.firstNode.nextNode has only one value
arg0.firstNode.elem has only one value
arg0.firstNode.elem.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByYear.TrackTreeByYear(es.uc3m.recordplayer.logic.TrackCollection):::EXIT
this.root.element == arg0.firstNode.elem
this.root.element == orig(arg0.firstNode.elem)
this.root.element.getClass().getName() == arg0.firstNode.elem.getClass().getName()
this.root.element.getClass().getName() == orig(arg0.firstNode.elem.getClass().getName())
arg0.firstNode == orig(arg0.firstNode)
arg0.firstNode.nextNode == orig(arg0.firstNode.nextNode)
arg0.firstNode has only one value
arg0.firstNode.nextNode has only one value
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByYear.containsKey(es.uc3m.eda.tree.BSTNode, java.lang.String):::ENTER
this.root == arg0.rightChild.parent
this.root.key == arg0.key
this.root.key.getClass().getName() == arg0.key.getClass().getName()
this.root.element == arg0.element
this.root.element.getClass().getName() == arg0.element.getClass().getName()
this.root.rightChild == arg0.rightChild
this.root.rightChild.key == arg0.rightChild.key
this.root.rightChild.element == arg0.rightChild.element
this.root.rightChild.rightChild == arg0.rightChild.rightChild
arg0 == arg0.rightChild.parent
arg0.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.key has only one value
arg0.key.getClass().getName() == java.lang.Integer.class
arg0.element has only one value
arg0.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.parent == null
arg0.leftChild == null
arg0.rightChild has only one value
arg0.rightChild.key has only one value
arg0.rightChild.element has only one value
arg0.rightChild.parent has only one value
arg0.rightChild.leftChild == null
arg0.rightChild.rightChild has only one value
arg1 has only one value
arg1.toString == "For you Blue"
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByYear.containsKey(es.uc3m.eda.tree.BSTNode, java.lang.String):::EXIT38
orig(arg0) == null
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByYear.containsKey(es.uc3m.eda.tree.BSTNode, java.lang.String):::EXIT38;condition="not(return == true)"
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByYear.containsKey(es.uc3m.eda.tree.BSTNode, java.lang.String):::EXIT40
this.root == orig(arg0)
this.root == orig(arg0.rightChild.parent)
this.root.rightChild.key.getClass().getName() == arg0.key.getClass().getName()
this.root.rightChild.element.getClass().getName() == arg0.element.getClass().getName()
arg0.key == orig(this.root.key)
arg0.key.getClass().getName() == orig(this.root.key.getClass().getName())
arg0.key.getClass().getName() == orig(this.root.rightChild.key.getClass().getName())
arg0.element == orig(this.root.element)
arg0.element.getClass().getName() == orig(this.root.element.getClass().getName())
arg0.element.getClass().getName() == orig(this.root.rightChild.element.getClass().getName())
arg0.rightChild == orig(this.root.rightChild)
arg0.rightChild.key == orig(this.root.rightChild.key)
arg0.rightChild.element == orig(this.root.rightChild.element)
arg0.rightChild.rightChild == orig(this.root.rightChild.rightChild)
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByYear.containsKey(es.uc3m.eda.tree.BSTNode, java.lang.String):::EXIT40;condition="not(return == true)"
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByYear.containsKey(es.uc3m.eda.tree.BSTNode, java.lang.String):::EXIT
this.root == arg0.rightChild.parent
this.root == orig(this.root)
this.root == orig(this.root.rightChild.parent)
this.root.key == arg0.key
this.root.key == orig(this.root.key)
this.root.key.getClass().getName() == arg0.key.getClass().getName()
this.root.key.getClass().getName() == orig(this.root.key.getClass().getName())
this.root.key.getClass().getName() == orig(this.root.rightChild.key.getClass().getName())
this.root.element == arg0.element
this.root.element == orig(this.root.element)
this.root.element.getClass().getName() == arg0.element.getClass().getName()
this.root.element.getClass().getName() == orig(this.root.element.getClass().getName())
this.root.element.getClass().getName() == orig(this.root.rightChild.element.getClass().getName())
this.root.parent == orig(this.root.parent)
this.root.leftChild == orig(this.root.leftChild)
this.root.rightChild == arg0.rightChild
this.root.rightChild == orig(this.root.rightChild)
this.root.rightChild.key == arg0.rightChild.key
this.root.rightChild.key == orig(this.root.rightChild.key)
this.root.rightChild.element == arg0.rightChild.element
this.root.rightChild.element == orig(this.root.rightChild.element)
this.root.rightChild.leftChild == orig(this.root.rightChild.leftChild)
this.root.rightChild.rightChild == arg0.rightChild.rightChild
this.root.rightChild.rightChild == orig(this.root.rightChild.rightChild)
arg0.key == orig(arg0.key)
arg0.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.key.getClass().getName() == orig(arg0.key.getClass().getName())
arg0.key.getClass().getName() == orig(arg0.rightChild.key.getClass().getName())
arg0.element == orig(arg0.element)
arg0.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.element.getClass().getName() == orig(arg0.element.getClass().getName())
arg0.element.getClass().getName() == orig(arg0.rightChild.element.getClass().getName())
arg0.parent == orig(arg0.parent)
arg0.leftChild == orig(arg0.leftChild)
arg0.rightChild == orig(arg0.rightChild)
arg0.rightChild.key == orig(arg0.rightChild.key)
arg0.rightChild.element == orig(arg0.rightChild.element)
arg0.rightChild.parent == orig(arg0)
arg0.rightChild.parent == orig(arg0.rightChild.parent)
arg0.rightChild.leftChild == orig(arg0.rightChild.leftChild)
arg0.rightChild.rightChild == orig(arg0.rightChild.rightChild)
arg1.toString == orig(arg1.toString)
arg0.key has only one value
arg0.key.getClass().getName() == java.lang.Integer.class
arg0.element has only one value
arg0.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.parent == null
arg0.leftChild == null
arg0.rightChild has only one value
arg0.rightChild.key has only one value
arg0.rightChild.element has only one value
arg0.rightChild.parent has only one value
arg0.rightChild.leftChild == null
arg0.rightChild.rightChild has only one value
arg1.toString == "For you Blue"
return == false
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByYear.containsKey(es.uc3m.eda.tree.BSTNode, java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByYear.containsTrackByTitle(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "For you Blue"
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByYear.containsTrackByTitle(java.lang.String):::EXIT
this.root == orig(this.root)
this.root == orig(this.root.rightChild.parent)
this.root.key == orig(this.root.key)
this.root.key.getClass().getName() == orig(this.root.key.getClass().getName())
this.root.key.getClass().getName() == orig(this.root.rightChild.key.getClass().getName())
this.root.element == orig(this.root.element)
this.root.element.getClass().getName() == orig(this.root.element.getClass().getName())
this.root.element.getClass().getName() == orig(this.root.rightChild.element.getClass().getName())
this.root.parent == orig(this.root.parent)
this.root.leftChild == orig(this.root.leftChild)
this.root.rightChild == orig(this.root.rightChild)
this.root.rightChild.key == orig(this.root.rightChild.key)
this.root.rightChild.element == orig(this.root.rightChild.element)
this.root.rightChild.leftChild == orig(this.root.rightChild.leftChild)
this.root.rightChild.rightChild == orig(this.root.rightChild.rightChild)
arg0.toString == orig(arg0.toString)
arg0.toString == "For you Blue"
return == false
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByYear.containsTrackByTitle(java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByYear.getYearRange(es.uc3m.eda.tree.BSTNode, int, int, es.uc3m.recordplayer.logic.TrackCollection):::ENTER
this.root.key.getClass().getName() == arg0.key.getClass().getName()
this.root.key.getClass().getName() == arg0.parent.key.getClass().getName()
this.root.key.getClass().getName() == arg0.leftChild.key.getClass().getName()
this.root.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
this.root.element.getClass().getName() == arg0.element.getClass().getName()
this.root.element.getClass().getName() == arg0.parent.element.getClass().getName()
this.root.element.getClass().getName() == arg0.leftChild.element.getClass().getName()
this.root.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
this.root.element.getClass().getName() == arg3.firstNode.elem.getClass().getName()
arg0 == arg0.leftChild.parent
arg0 == arg0.rightChild.parent
arg0.parent.key.getClass().getName() == arg0.leftChild.key.getClass().getName()
arg0.parent.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.parent.element.getClass().getName() == arg0.leftChild.element.getClass().getName()
arg0.parent.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.parent.element.getClass().getName() == arg3.firstNode.elem.getClass().getName()
arg0.parent.rightChild == arg0.leftChild.parent
arg0.leftChild.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.leftChild.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.leftChild.element.getClass().getName() == arg3.firstNode.elem.getClass().getName()
arg0.leftChild.parent == arg0.rightChild.parent
arg0.rightChild.element.getClass().getName() == arg3.firstNode.elem.getClass().getName()
arg0 != null
arg0.key != null
arg0.element != null
arg0.parent.key != null
arg0.parent.key.getClass().getName() == java.lang.Integer.class
arg0.parent.element != null
arg0.parent.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.parent.rightChild != null
arg0.leftChild.key has only one value
arg0.leftChild.key.getClass().getName() == java.lang.Integer.class
arg0.leftChild.element has only one value
arg0.leftChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.leftChild.parent has only one value
arg0.leftChild.leftChild == null
arg0.leftChild.rightChild has only one value
arg0.rightChild.key != null
arg0.rightChild.key.getClass().getName() == java.lang.Integer.class
arg0.rightChild.element != null
arg0.rightChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.rightChild.parent != null
arg1 == 1980
arg2 == 1991
arg3 has only one value
arg3 != null
arg3.firstNode.elem has only one value
arg3.firstNode.elem != null
arg3.firstNode.elem.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
this.root.key.getClass().getName() != arg0.parent.element.getClass().getName()
this.root.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
this.root.key.getClass().getName() != arg3.firstNode.elem.getClass().getName()
this.root.element.getClass().getName() != arg0.parent.key.getClass().getName()
this.root.element.getClass().getName() != arg0.rightChild.key.getClass().getName()
arg0.parent.key.getClass().getName() != arg0.parent.element.getClass().getName()
arg0.parent.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
arg0.parent.key.getClass().getName() != arg3.firstNode.elem.getClass().getName()
arg0.parent.element.getClass().getName() != arg0.rightChild.key.getClass().getName()
arg0.rightChild.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
arg0.rightChild.key.getClass().getName() != arg3.firstNode.elem.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByYear.getYearRange(es.uc3m.eda.tree.BSTNode, int, int, es.uc3m.recordplayer.logic.TrackCollection):::EXIT
this.root == orig(this.root)
this.root == orig(this.root.rightChild.parent)
this.root.key == orig(this.root.key)
this.root.key.getClass().getName() == arg0.key.getClass().getName()
this.root.element == orig(this.root.element)
this.root.element.getClass().getName() == arg0.element.getClass().getName()
this.root.parent == orig(this.root.parent)
this.root.leftChild == orig(this.root.leftChild)
this.root.rightChild == orig(this.root.rightChild)
this.root.rightChild.key == orig(this.root.rightChild.key)
this.root.rightChild.key.getClass().getName() == arg0.key.getClass().getName()
this.root.rightChild.element == orig(this.root.rightChild.element)
this.root.rightChild.element.getClass().getName() == arg0.element.getClass().getName()
this.root.rightChild.leftChild == orig(this.root.rightChild.leftChild)
this.root.rightChild.rightChild == orig(this.root.rightChild.rightChild)
arg0.key == orig(arg0.key)
arg0.key.getClass().getName() == arg0.parent.key.getClass().getName()
arg0.key.getClass().getName() == arg0.leftChild.key.getClass().getName()
arg0.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.key.getClass().getName() == orig(this.root.key.getClass().getName())
arg0.key.getClass().getName() == orig(this.root.rightChild.key.getClass().getName())
arg0.key.getClass().getName() == orig(arg0.key.getClass().getName())
arg0.element == orig(arg0.element)
arg0.element.getClass().getName() == arg0.parent.element.getClass().getName()
arg0.element.getClass().getName() == arg0.leftChild.element.getClass().getName()
arg0.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.element.getClass().getName() == arg3.firstNode.elem.getClass().getName()
arg0.element.getClass().getName() == orig(this.root.element.getClass().getName())
arg0.element.getClass().getName() == orig(this.root.rightChild.element.getClass().getName())
arg0.element.getClass().getName() == orig(arg0.element.getClass().getName())
arg0.element.getClass().getName() == orig(arg3.firstNode.elem.getClass().getName())
arg0.parent == orig(arg0.parent)
arg0.parent.key == orig(arg0.parent.key)
arg0.parent.key.getClass().getName() == arg0.leftChild.key.getClass().getName()
arg0.parent.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.parent.key.getClass().getName() == orig(arg0.parent.key.getClass().getName())
arg0.parent.element == orig(arg0.parent.element)
arg0.parent.element.getClass().getName() == arg0.leftChild.element.getClass().getName()
arg0.parent.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.parent.element.getClass().getName() == orig(arg0.parent.element.getClass().getName())
arg0.parent.element.getClass().getName() == orig(arg3.firstNode.elem.getClass().getName())
arg0.parent.parent == orig(arg0.parent.parent)
arg0.parent.leftChild == orig(arg0.parent.leftChild)
arg0.parent.rightChild == arg0.leftChild.parent
arg0.parent.rightChild == orig(arg0.parent.rightChild)
arg0.leftChild == orig(arg0.leftChild)
arg0.leftChild.key == orig(arg0.leftChild.key)
arg0.leftChild.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.leftChild.element == orig(arg0.leftChild.element)
arg0.leftChild.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.leftChild.element.getClass().getName() == orig(arg3.firstNode.elem.getClass().getName())
arg0.leftChild.parent == arg0.rightChild.parent
arg0.leftChild.parent == orig(arg0)
arg0.leftChild.parent == orig(arg0.leftChild.parent)
arg0.leftChild.leftChild == orig(arg0.leftChild.leftChild)
arg0.leftChild.rightChild == orig(arg0.leftChild.rightChild)
arg0.rightChild == orig(arg0.rightChild)
arg0.rightChild.key == orig(arg0.rightChild.key)
arg0.rightChild.key.getClass().getName() == orig(arg0.rightChild.key.getClass().getName())
arg0.rightChild.element == orig(arg0.rightChild.element)
arg0.rightChild.element.getClass().getName() == orig(arg0.rightChild.element.getClass().getName())
arg0.rightChild.element.getClass().getName() == orig(arg3.firstNode.elem.getClass().getName())
arg0.rightChild.parent == orig(arg0)
arg0.rightChild.parent == orig(arg0.rightChild.parent)
arg0.rightChild.leftChild == orig(arg0.rightChild.leftChild)
arg0.rightChild.rightChild == orig(arg0.rightChild.rightChild)
arg3.firstNode.elem == orig(arg3.firstNode.elem)
arg0.key != null
arg0.key.getClass().getName() == java.lang.Integer.class
arg0.element != null
arg0.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.parent.key != null
arg0.parent.key.getClass().getName() == java.lang.Integer.class
arg0.parent.element != null
arg0.parent.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.parent.rightChild != null
arg0.leftChild.key has only one value
arg0.leftChild.key.getClass().getName() == java.lang.Integer.class
arg0.leftChild.element has only one value
arg0.leftChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.leftChild.parent has only one value
arg0.leftChild.leftChild == null
arg0.leftChild.rightChild has only one value
arg0.rightChild.key != null
arg0.rightChild.key.getClass().getName() == java.lang.Integer.class
arg0.rightChild.element != null
arg0.rightChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.rightChild.parent != null
arg3.firstNode has only one value
arg3.firstNode != null
arg3.firstNode.nextNode has only one value
arg3.firstNode.nextNode != null
arg3.firstNode.elem has only one value
arg3.firstNode.elem != null
arg0.key.getClass().getName() != arg0.element.getClass().getName()
arg0.key.getClass().getName() != arg0.parent.element.getClass().getName()
arg0.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
arg0.key.getClass().getName() != orig(arg3.firstNode.elem.getClass().getName())
arg0.element.getClass().getName() != arg0.parent.key.getClass().getName()
arg0.element.getClass().getName() != arg0.rightChild.key.getClass().getName()
arg0.parent.key.getClass().getName() != arg0.parent.element.getClass().getName()
arg0.parent.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
arg0.parent.key.getClass().getName() != orig(arg3.firstNode.elem.getClass().getName())
arg0.parent.element.getClass().getName() != arg0.rightChild.key.getClass().getName()
arg0.rightChild.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
arg0.rightChild.key.getClass().getName() != orig(arg3.firstNode.elem.getClass().getName())
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByYear.showTrackTreeByYearInOrder():::ENTER
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByYear.showTrackTreeByYearInOrder():::EXIT
this.root == orig(this.root)
this.root == orig(this.root.rightChild.parent)
this.root.key == orig(this.root.key)
this.root.key.getClass().getName() == orig(this.root.key.getClass().getName())
this.root.key.getClass().getName() == orig(this.root.rightChild.key.getClass().getName())
this.root.element == orig(this.root.element)
this.root.element.getClass().getName() == orig(this.root.element.getClass().getName())
this.root.element.getClass().getName() == orig(this.root.rightChild.element.getClass().getName())
this.root.parent == orig(this.root.parent)
this.root.leftChild == orig(this.root.leftChild)
this.root.rightChild == orig(this.root.rightChild)
this.root.rightChild.key == orig(this.root.rightChild.key)
this.root.rightChild.element == orig(this.root.rightChild.element)
this.root.rightChild.leftChild == orig(this.root.rightChild.leftChild)
this.root.rightChild.rightChild == orig(this.root.rightChild.rightChild)
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByYear.showTrackTreeByYearInOrder(es.uc3m.eda.tree.BSTNode):::ENTER
this.root.key.getClass().getName() == arg0.key.getClass().getName()
this.root.key.getClass().getName() == arg0.parent.key.getClass().getName()
this.root.key.getClass().getName() == arg0.leftChild.key.getClass().getName()
this.root.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
this.root.element.getClass().getName() == arg0.element.getClass().getName()
this.root.element.getClass().getName() == arg0.parent.element.getClass().getName()
this.root.element.getClass().getName() == arg0.leftChild.element.getClass().getName()
this.root.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0 == arg0.leftChild.parent
arg0 == arg0.rightChild.parent
arg0.key.getClass().getName() == arg0.parent.key.getClass().getName()
arg0.key.getClass().getName() == arg0.leftChild.key.getClass().getName()
arg0.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.element.getClass().getName() == arg0.parent.element.getClass().getName()
arg0.element.getClass().getName() == arg0.leftChild.element.getClass().getName()
arg0.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.parent.key.getClass().getName() == arg0.leftChild.key.getClass().getName()
arg0.parent.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.parent.element.getClass().getName() == arg0.leftChild.element.getClass().getName()
arg0.parent.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.parent.rightChild == arg0.leftChild.parent
arg0.leftChild.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.leftChild.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.leftChild.parent == arg0.rightChild.parent
arg0.key != null
arg0.key.getClass().getName() == java.lang.Integer.class
arg0.element != null
arg0.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.parent.key != null
arg0.parent.key.getClass().getName() == java.lang.Integer.class
arg0.parent.element != null
arg0.parent.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.parent.rightChild != null
arg0.leftChild.key has only one value
arg0.leftChild.key.getClass().getName() == java.lang.Integer.class
arg0.leftChild.element has only one value
arg0.leftChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.leftChild.parent has only one value
arg0.leftChild.leftChild == null
arg0.leftChild.rightChild has only one value
arg0.rightChild.key != null
arg0.rightChild.key.getClass().getName() == java.lang.Integer.class
arg0.rightChild.element != null
arg0.rightChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.rightChild.parent != null
this.root.key.getClass().getName() != arg0.element.getClass().getName()
this.root.key.getClass().getName() != arg0.parent.element.getClass().getName()
this.root.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
this.root.element.getClass().getName() != arg0.key.getClass().getName()
this.root.element.getClass().getName() != arg0.parent.key.getClass().getName()
this.root.element.getClass().getName() != arg0.rightChild.key.getClass().getName()
arg0.key.getClass().getName() != arg0.element.getClass().getName()
arg0.key.getClass().getName() != arg0.parent.element.getClass().getName()
arg0.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
arg0.element.getClass().getName() != arg0.parent.key.getClass().getName()
arg0.element.getClass().getName() != arg0.rightChild.key.getClass().getName()
arg0.parent.key.getClass().getName() != arg0.parent.element.getClass().getName()
arg0.parent.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
arg0.parent.element.getClass().getName() != arg0.rightChild.key.getClass().getName()
arg0.rightChild.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByYear.showTrackTreeByYearInOrder(es.uc3m.eda.tree.BSTNode):::EXIT
this.root == orig(this.root)
this.root == orig(this.root.rightChild.parent)
this.root.key == orig(this.root.key)
this.root.key.getClass().getName() == arg0.key.getClass().getName()
this.root.key.getClass().getName() == arg0.parent.key.getClass().getName()
this.root.key.getClass().getName() == arg0.leftChild.key.getClass().getName()
this.root.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
this.root.key.getClass().getName() == orig(this.root.key.getClass().getName())
this.root.key.getClass().getName() == orig(this.root.rightChild.key.getClass().getName())
this.root.element == orig(this.root.element)
this.root.element.getClass().getName() == arg0.element.getClass().getName()
this.root.element.getClass().getName() == arg0.parent.element.getClass().getName()
this.root.element.getClass().getName() == arg0.leftChild.element.getClass().getName()
this.root.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
this.root.element.getClass().getName() == orig(this.root.element.getClass().getName())
this.root.element.getClass().getName() == orig(this.root.rightChild.element.getClass().getName())
this.root.parent == orig(this.root.parent)
this.root.leftChild == orig(this.root.leftChild)
this.root.rightChild == orig(this.root.rightChild)
this.root.rightChild.key == orig(this.root.rightChild.key)
this.root.rightChild.element == orig(this.root.rightChild.element)
this.root.rightChild.leftChild == orig(this.root.rightChild.leftChild)
this.root.rightChild.rightChild == orig(this.root.rightChild.rightChild)
arg0.key == orig(arg0.key)
arg0.key.getClass().getName() == arg0.parent.key.getClass().getName()
arg0.key.getClass().getName() == arg0.leftChild.key.getClass().getName()
arg0.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.key.getClass().getName() == orig(arg0.key.getClass().getName())
arg0.element == orig(arg0.element)
arg0.element.getClass().getName() == arg0.parent.element.getClass().getName()
arg0.element.getClass().getName() == arg0.leftChild.element.getClass().getName()
arg0.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.element.getClass().getName() == orig(arg0.element.getClass().getName())
arg0.parent == orig(arg0.parent)
arg0.parent.key == orig(arg0.parent.key)
arg0.parent.key.getClass().getName() == arg0.leftChild.key.getClass().getName()
arg0.parent.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.parent.key.getClass().getName() == orig(arg0.parent.key.getClass().getName())
arg0.parent.element == orig(arg0.parent.element)
arg0.parent.element.getClass().getName() == arg0.leftChild.element.getClass().getName()
arg0.parent.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.parent.element.getClass().getName() == orig(arg0.parent.element.getClass().getName())
arg0.parent.parent == orig(arg0.parent.parent)
arg0.parent.leftChild == orig(arg0.parent.leftChild)
arg0.parent.rightChild == arg0.leftChild.parent
arg0.parent.rightChild == orig(arg0.parent.rightChild)
arg0.leftChild == orig(arg0.leftChild)
arg0.leftChild.key == orig(arg0.leftChild.key)
arg0.leftChild.key.getClass().getName() == arg0.rightChild.key.getClass().getName()
arg0.leftChild.element == orig(arg0.leftChild.element)
arg0.leftChild.element.getClass().getName() == arg0.rightChild.element.getClass().getName()
arg0.leftChild.parent == arg0.rightChild.parent
arg0.leftChild.parent == orig(arg0)
arg0.leftChild.parent == orig(arg0.leftChild.parent)
arg0.leftChild.leftChild == orig(arg0.leftChild.leftChild)
arg0.leftChild.rightChild == orig(arg0.leftChild.rightChild)
arg0.rightChild == orig(arg0.rightChild)
arg0.rightChild.key == orig(arg0.rightChild.key)
arg0.rightChild.key.getClass().getName() == orig(arg0.rightChild.key.getClass().getName())
arg0.rightChild.element == orig(arg0.rightChild.element)
arg0.rightChild.element.getClass().getName() == orig(arg0.rightChild.element.getClass().getName())
arg0.rightChild.parent == orig(arg0)
arg0.rightChild.parent == orig(arg0.rightChild.parent)
arg0.rightChild.leftChild == orig(arg0.rightChild.leftChild)
arg0.rightChild.rightChild == orig(arg0.rightChild.rightChild)
arg0.key != null
arg0.key.getClass().getName() == java.lang.Integer.class
arg0.element != null
arg0.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.parent.key != null
arg0.parent.key.getClass().getName() == java.lang.Integer.class
arg0.parent.element != null
arg0.parent.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.parent.rightChild != null
arg0.leftChild.key has only one value
arg0.leftChild.key.getClass().getName() == java.lang.Integer.class
arg0.leftChild.element has only one value
arg0.leftChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.leftChild.parent has only one value
arg0.leftChild.leftChild == null
arg0.leftChild.rightChild has only one value
arg0.rightChild.key != null
arg0.rightChild.key.getClass().getName() == java.lang.Integer.class
arg0.rightChild.element != null
arg0.rightChild.element.getClass().getName() == es.uc3m.recordplayer.logic.Song.class
arg0.rightChild.parent != null
this.root.key.getClass().getName() != arg0.element.getClass().getName()
this.root.key.getClass().getName() != arg0.parent.element.getClass().getName()
this.root.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
this.root.element.getClass().getName() != arg0.key.getClass().getName()
this.root.element.getClass().getName() != arg0.parent.key.getClass().getName()
this.root.element.getClass().getName() != arg0.rightChild.key.getClass().getName()
arg0.key.getClass().getName() != arg0.element.getClass().getName()
arg0.key.getClass().getName() != arg0.parent.element.getClass().getName()
arg0.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
arg0.element.getClass().getName() != arg0.parent.key.getClass().getName()
arg0.element.getClass().getName() != arg0.rightChild.key.getClass().getName()
arg0.parent.key.getClass().getName() != arg0.parent.element.getClass().getName()
arg0.parent.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
arg0.parent.element.getClass().getName() != arg0.rightChild.key.getClass().getName()
arg0.rightChild.key.getClass().getName() != arg0.rightChild.element.getClass().getName()
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByYear.tracksByYearsRange(int, int):::ENTER
arg0 == 1980
arg1 == 1991
===========================================================================
es.uc3m.recordplayer.logic.TrackTreeByYear.tracksByYearsRange(int, int):::EXIT
this.root == orig(this.root)
this.root == orig(this.root.rightChild.parent)
this.root.key == orig(this.root.key)
this.root.key.getClass().getName() == orig(this.root.key.getClass().getName())
this.root.key.getClass().getName() == orig(this.root.rightChild.key.getClass().getName())
this.root.element == orig(this.root.element)
this.root.element.getClass().getName() == return.firstNode.elem.getClass().getName()
this.root.element.getClass().getName() == orig(this.root.element.getClass().getName())
this.root.element.getClass().getName() == orig(this.root.rightChild.element.getClass().getName())
this.root.parent == orig(this.root.parent)
this.root.leftChild == orig(this.root.leftChild)
this.root.rightChild == orig(this.root.rightChild)
this.root.rightChild.key == orig(this.root.rightChild.key)
this.root.rightChild.element == orig(this.root.rightChild.element)
this.root.rightChild.leftChild == orig(this.root.rightChild.leftChild)
this.root.rightChild.rightChild == orig(this.root.rightChild.rightChild)
return has only one value
return.firstNode has only one value
return.firstNode.nextNode has only one value
return.firstNode.elem has only one value
===========================================================================
es.uc3m.recordplayer.logic.Turntable:::OBJECT
this has only one value
this.axle has only one value
this.axle.getClass().getName() == es.uc3m.recordplayer.logic.Axle.class
this.playingRecords has only one value
this.playingRecords.getClass().getName() == es.uc3m.eda.list.singlelink.SStack.class
this.playing == false
this.rpm == null
===========================================================================
es.uc3m.recordplayer.logic.Turntable.Turntable():::EXIT
===========================================================================
es.uc3m.recordplayer.test.Test:::OBJECT
this.stackOne.getClass().getName() == this.stackTwo.getClass().getName()
this has only one value
this.recordCollection has only one value
this.recordCollection != null
this.recordCollection.firstNode.nextNode has only one value
this.recordCollection.firstNode.nextNode != null
this.recordCollection.firstNode.elem has only one value
this.recordCollection.firstNode.elem != null
this.recordCollection.firstNode.elem.getClass().getName() == es.uc3m.recordplayer.logic.Record.class
this.stackOne has only one value
this.stackOne != null
this.stackOne.getClass().getName() == es.uc3m.recordplayer.logic.RecordStack.class
this.stackTwo has only one value
this.stackTwo != null
this.recordShelf has only one value
this.recordShelf != null
this.recordShelf.getClass().getName() == es.uc3m.recordplayer.logic.RecordShelf.class
this.player has only one value
this.player != null
this.player.getClass().getName() == es.uc3m.recordplayer.logic.Player.class
this.recordCollection.firstNode.elem.getClass().getName() != this.stackOne.getClass().getName()
this.recordCollection.firstNode.elem.getClass().getName() != this.recordShelf.getClass().getName()
this.recordCollection.firstNode.elem.getClass().getName() != this.player.getClass().getName()
this.stackOne.getClass().getName() != this.recordShelf.getClass().getName()
this.stackOne.getClass().getName() != this.player.getClass().getName()
this.recordShelf.getClass().getName() != this.player.getClass().getName()
===========================================================================
es.uc3m.recordplayer.test.Test.Test():::EXIT
this.recordCollection.firstNode == null
===========================================================================
es.uc3m.recordplayer.test.Test.fillRecordShelf():::ENTER
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.fillRecordShelf():::EXIT
this.recordCollection == orig(this.recordCollection)
this.recordCollection.firstNode == orig(this.recordCollection.firstNode)
this.recordCollection.firstNode.nextNode == orig(this.recordCollection.firstNode.nextNode)
this.recordCollection.firstNode.elem == orig(this.recordCollection.firstNode.elem)
this.recordCollection.firstNode.elem.getClass().getName() == orig(this.recordCollection.firstNode.elem.getClass().getName())
this.stackOne == orig(this.stackOne)
this.stackOne.getClass().getName() == orig(this.stackOne.getClass().getName())
this.stackOne.getClass().getName() == orig(this.stackTwo.getClass().getName())
this.stackTwo == orig(this.stackTwo)
this.recordShelf == orig(this.recordShelf)
this.recordShelf.getClass().getName() == orig(this.recordShelf.getClass().getName())
this.player == orig(this.player)
this.player.getClass().getName() == orig(this.player.getClass().getName())
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.findRecord(es.uc3m.recordplayer.logic.Record):::ENTER
arg0.recordSpeed == es.uc3m.recordplayer.logic.Rpm.SPEED33
this.recordCollection.firstNode has only one value
arg0.sides has only one value
arg0.sides.getClass().getName() == es.uc3m.recordplayer.logic.Side[].class
arg0.sides[] contains no nulls and has only one value, of length 2
arg0.sides[].getClass().getName() == [es.uc3m.recordplayer.logic.Side, es.uc3m.recordplayer.logic.Side]
arg0.sides[].getClass().getName() elements == es.uc3m.recordplayer.logic.Side.class
arg0.sides[].songs contains no nulls and has only one value, of length 2
arg0.sides[].totalDuration == [-1.0, -1.0]
arg0.sides[].totalDuration elements == -1.0
arg0.sides[].record contains no nulls and has only one value, of length 2
arg0.sides[].record elements has only one value
arg0.sides[].sideIndex == [0, 1]
arg0.sides[].sideIndex elements one of { 0, 1 }
arg0.recordPerformer has only one value
arg0.recordPerformer.name has only one value
arg0.recordPerformer.name.toString == "Metallica"
arg0.recordPerformer.type has only one value
arg0.title has only one value
arg0.title.toString == "Metallica(Black Album)"
arg0.editionYear == 1991
arg0.recordSpeed has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED33 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED45 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED72 has only one value
es.uc3m.recordplayer.logic.Rpm.$VALUES has only one value
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == es.uc3m.recordplayer.logic.Rpm[].class
es.uc3m.recordplayer.logic.Rpm.$VALUES[] contains no nulls and has only one value, of length 3
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() == [es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm]
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() elements == es.uc3m.recordplayer.logic.Rpm.class
size(arg0.sides[]) == 2
size(es.uc3m.recordplayer.logic.Rpm.$VALUES[]) == 3
arg0 in arg0.sides[].record
arg0.sides[].record elements == arg0
===========================================================================
es.uc3m.recordplayer.test.Test.findRecord(es.uc3m.recordplayer.logic.Record):::EXIT232
===========================================================================
es.uc3m.recordplayer.test.Test.findRecord(es.uc3m.recordplayer.logic.Record):::EXIT
this.recordCollection == orig(this.recordCollection)
this.recordCollection.firstNode == orig(this.recordCollection.firstNode)
this.recordCollection.firstNode.nextNode == orig(this.recordCollection.firstNode.nextNode)
this.recordCollection.firstNode.elem == orig(this.recordCollection.firstNode.elem)
this.recordCollection.firstNode.elem.getClass().getName() == orig(this.recordCollection.firstNode.elem.getClass().getName())
this.stackOne == orig(this.stackOne)
this.stackOne.getClass().getName() == orig(this.stackOne.getClass().getName())
this.stackOne.getClass().getName() == orig(this.stackTwo.getClass().getName())
this.stackTwo == orig(this.stackTwo)
this.recordShelf == orig(this.recordShelf)
this.recordShelf.getClass().getName() == orig(this.recordShelf.getClass().getName())
this.player == orig(this.player)
this.player.getClass().getName() == orig(this.player.getClass().getName())
arg0.sides == orig(arg0.sides)
arg0.sides.getClass().getName() == orig(arg0.sides.getClass().getName())
arg0.sides[] == orig(arg0.sides[])
arg0.sides[].songs == orig(arg0.sides[].songs)
arg0.sides[].totalDuration == orig(arg0.sides[].totalDuration)
arg0.sides[].record == orig(arg0.sides[].record)
arg0.sides[].sideIndex == orig(arg0.sides[].sideIndex)
arg0.recordPerformer == orig(arg0.recordPerformer)
arg0.recordPerformer.name == orig(arg0.recordPerformer.name)
arg0.recordPerformer.name.toString == orig(arg0.recordPerformer.name.toString)
arg0.recordPerformer.type == orig(arg0.recordPerformer.type)
arg0.title == orig(arg0.title)
arg0.title.toString == orig(arg0.title.toString)
arg0.editionYear == orig(arg0.editionYear)
arg0.recordSpeed == es.uc3m.recordplayer.logic.Rpm.SPEED33
arg0.recordSpeed == orig(arg0.recordSpeed)
es.uc3m.recordplayer.logic.Rpm.SPEED33 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED33)
es.uc3m.recordplayer.logic.Rpm.SPEED45 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED45)
es.uc3m.recordplayer.logic.Rpm.SPEED72 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED72)
es.uc3m.recordplayer.logic.Rpm.$VALUES == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES)
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.Rpm.$VALUES[] == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES[])
this.recordCollection.firstNode has only one value
arg0.sides has only one value
arg0.sides.getClass().getName() == es.uc3m.recordplayer.logic.Side[].class
arg0.sides[] contains no nulls and has only one value, of length 2
arg0.sides[].getClass().getName() == [es.uc3m.recordplayer.logic.Side, es.uc3m.recordplayer.logic.Side]
arg0.sides[].getClass().getName() elements == es.uc3m.recordplayer.logic.Side.class
arg0.sides[].songs contains no nulls and has only one value, of length 2
arg0.sides[].totalDuration == [-1.0, -1.0]
arg0.sides[].totalDuration elements == -1.0
arg0.sides[].record contains no nulls and has only one value, of length 2
arg0.sides[].record elements has only one value
arg0.sides[].sideIndex == [0, 1]
arg0.sides[].sideIndex elements one of { 0, 1 }
arg0.recordPerformer has only one value
arg0.recordPerformer.name has only one value
arg0.recordPerformer.name.toString == "Metallica"
arg0.recordPerformer.type has only one value
arg0.title has only one value
arg0.title.toString == "Metallica(Black Album)"
arg0.editionYear == 1991
arg0.recordSpeed has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED33 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED45 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED72 has only one value
es.uc3m.recordplayer.logic.Rpm.$VALUES has only one value
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == es.uc3m.recordplayer.logic.Rpm[].class
es.uc3m.recordplayer.logic.Rpm.$VALUES[] contains no nulls and has only one value, of length 3
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() == [es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm]
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() elements == es.uc3m.recordplayer.logic.Rpm.class
return == null
size(arg0.sides[]) == 2
size(es.uc3m.recordplayer.logic.Rpm.$VALUES[]) == 3
arg0.sides[].record elements == orig(arg0)
orig(arg0) in arg0.sides[].record
===========================================================================
es.uc3m.recordplayer.test.Test.initializeLabelByRecord():::ENTER
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.initializeLabelByRecord():::EXIT
this.recordCollection == orig(this.recordCollection)
this.recordCollection.firstNode == orig(this.recordCollection.firstNode)
this.recordCollection.firstNode.nextNode == orig(this.recordCollection.firstNode.nextNode)
this.recordCollection.firstNode.elem == orig(this.recordCollection.firstNode.elem)
this.recordCollection.firstNode.elem.getClass().getName() == orig(this.recordCollection.firstNode.elem.getClass().getName())
this.stackOne == orig(this.stackOne)
this.stackOne.getClass().getName() == orig(this.stackOne.getClass().getName())
this.stackOne.getClass().getName() == orig(this.stackTwo.getClass().getName())
this.stackTwo == orig(this.stackTwo)
this.recordShelf == orig(this.recordShelf)
this.recordShelf.getClass().getName() == orig(this.recordShelf.getClass().getName())
this.player == orig(this.player)
this.player.getClass().getName() == orig(this.player.getClass().getName())
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.initializeRecords():::ENTER
this.recordCollection.firstNode == null
===========================================================================
es.uc3m.recordplayer.test.Test.initializeRecords():::EXIT
this.recordCollection == orig(this.recordCollection)
this.stackOne == orig(this.stackOne)
this.stackOne.getClass().getName() == orig(this.stackOne.getClass().getName())
this.stackOne.getClass().getName() == orig(this.stackTwo.getClass().getName())
this.stackTwo == orig(this.stackTwo)
this.recordShelf == orig(this.recordShelf)
this.recordShelf.getClass().getName() == orig(this.recordShelf.getClass().getName())
this.player == orig(this.player)
this.player.getClass().getName() == orig(this.player.getClass().getName())
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.initializeStacks():::ENTER
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.initializeStacks():::EXIT
this.recordCollection == orig(this.recordCollection)
this.recordCollection.firstNode == orig(this.recordCollection.firstNode)
this.recordCollection.firstNode.nextNode == orig(this.recordCollection.firstNode.nextNode)
this.recordCollection.firstNode.elem == orig(this.recordCollection.firstNode.elem)
this.recordCollection.firstNode.elem.getClass().getName() == orig(this.recordCollection.firstNode.elem.getClass().getName())
this.stackOne == orig(this.stackOne)
this.stackOne.getClass().getName() == orig(this.stackOne.getClass().getName())
this.stackOne.getClass().getName() == orig(this.stackTwo.getClass().getName())
this.stackTwo == orig(this.stackTwo)
this.recordShelf == orig(this.recordShelf)
this.recordShelf.getClass().getName() == orig(this.recordShelf.getClass().getName())
this.player == orig(this.player)
this.player.getClass().getName() == orig(this.player.getClass().getName())
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.isFoundStack(java.lang.String):::ENTER
this.recordCollection.firstNode has only one value
arg0 has only one value
arg0.toString == "Metallica(Black Album)"
===========================================================================
es.uc3m.recordplayer.test.Test.isFoundStack(java.lang.String):::EXIT121
===========================================================================
es.uc3m.recordplayer.test.Test.isFoundStack(java.lang.String):::EXIT121;condition="not(return == true)"
===========================================================================
es.uc3m.recordplayer.test.Test.isFoundStack(java.lang.String):::EXIT
this.recordCollection == orig(this.recordCollection)
this.recordCollection.firstNode == orig(this.recordCollection.firstNode)
this.recordCollection.firstNode.nextNode == orig(this.recordCollection.firstNode.nextNode)
this.recordCollection.firstNode.elem == orig(this.recordCollection.firstNode.elem)
this.recordCollection.firstNode.elem.getClass().getName() == orig(this.recordCollection.firstNode.elem.getClass().getName())
this.stackOne == orig(this.stackOne)
this.stackOne.getClass().getName() == orig(this.stackOne.getClass().getName())
this.stackOne.getClass().getName() == orig(this.stackTwo.getClass().getName())
this.stackTwo == orig(this.stackTwo)
this.recordShelf == orig(this.recordShelf)
this.recordShelf.getClass().getName() == orig(this.recordShelf.getClass().getName())
this.player == orig(this.player)
this.player.getClass().getName() == orig(this.player.getClass().getName())
arg0.toString == orig(arg0.toString)
this.recordCollection.firstNode has only one value
arg0.toString == "Metallica(Black Album)"
return == false
===========================================================================
es.uc3m.recordplayer.test.Test.isFoundStack(java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
es.uc3m.recordplayer.test.Test.main(java.lang.String[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.lang.String[].class
arg0[] == []
arg0[].toString == []
===========================================================================
es.uc3m.recordplayer.test.Test.main(java.lang.String[]):::EXIT
arg0[] == orig(arg0[])
arg0[] == []
arg0[].toString == []
===========================================================================
es.uc3m.recordplayer.test.Test.placeRecordInSlot(es.uc3m.recordplayer.logic.Record):::ENTER
arg0.recordSpeed == es.uc3m.recordplayer.logic.Rpm.SPEED33
this.recordCollection.firstNode has only one value
arg0 has only one value
arg0.sides has only one value
arg0.sides.getClass().getName() == es.uc3m.recordplayer.logic.Side[].class
arg0.sides[] contains no nulls and has only one value, of length 2
arg0.sides[].getClass().getName() == [es.uc3m.recordplayer.logic.Side, es.uc3m.recordplayer.logic.Side]
arg0.sides[].getClass().getName() elements == es.uc3m.recordplayer.logic.Side.class
arg0.sides[].songs contains no nulls and has only one value, of length 2
arg0.sides[].totalDuration == [-1.0, -1.0]
arg0.sides[].totalDuration elements == -1.0
arg0.sides[].record contains no nulls and has only one value, of length 2
arg0.sides[].record elements has only one value
arg0.sides[].sideIndex == [0, 1]
arg0.sides[].sideIndex elements one of { 0, 1 }
arg0.recordPerformer has only one value
arg0.recordPerformer.name has only one value
arg0.recordPerformer.name.toString == "Metallica"
arg0.recordPerformer.type has only one value
arg0.title has only one value
arg0.title.toString == "Metallica(Black Album)"
arg0.editionYear == 1991
es.uc3m.recordplayer.logic.Rpm.SPEED33 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED45 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED72 has only one value
es.uc3m.recordplayer.logic.Rpm.$VALUES has only one value
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == es.uc3m.recordplayer.logic.Rpm[].class
es.uc3m.recordplayer.logic.Rpm.$VALUES[] contains no nulls and has only one value, of length 3
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() == [es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm]
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() elements == es.uc3m.recordplayer.logic.Rpm.class
size(arg0.sides[]) == 2
size(es.uc3m.recordplayer.logic.Rpm.$VALUES[]) == 3
arg0 in arg0.sides[].record
arg0.sides[].record elements == arg0
===========================================================================
es.uc3m.recordplayer.test.Test.placeRecordInSlot(es.uc3m.recordplayer.logic.Record):::EXIT249
===========================================================================
es.uc3m.recordplayer.test.Test.placeRecordInSlot(es.uc3m.recordplayer.logic.Record):::EXIT
this.recordCollection == orig(this.recordCollection)
this.recordCollection.firstNode == orig(this.recordCollection.firstNode)
this.recordCollection.firstNode.nextNode == orig(this.recordCollection.firstNode.nextNode)
this.recordCollection.firstNode.elem == orig(this.recordCollection.firstNode.elem)
this.recordCollection.firstNode.elem.getClass().getName() == orig(this.recordCollection.firstNode.elem.getClass().getName())
this.stackOne == orig(this.stackOne)
this.stackOne.getClass().getName() == orig(this.stackOne.getClass().getName())
this.stackOne.getClass().getName() == orig(this.stackTwo.getClass().getName())
this.stackTwo == orig(this.stackTwo)
this.recordShelf == orig(this.recordShelf)
this.recordShelf.getClass().getName() == orig(this.recordShelf.getClass().getName())
this.player == orig(this.player)
this.player.getClass().getName() == orig(this.player.getClass().getName())
arg0.sides == orig(arg0.sides)
arg0.sides.getClass().getName() == orig(arg0.sides.getClass().getName())
arg0.sides[] == orig(arg0.sides[])
arg0.sides[].songs == orig(arg0.sides[].songs)
arg0.sides[].totalDuration == orig(arg0.sides[].totalDuration)
arg0.sides[].record == orig(arg0.sides[].record)
arg0.sides[].sideIndex == orig(arg0.sides[].sideIndex)
arg0.recordPerformer == orig(arg0.recordPerformer)
arg0.recordPerformer.name == orig(arg0.recordPerformer.name)
arg0.recordPerformer.name.toString == orig(arg0.recordPerformer.name.toString)
arg0.recordPerformer.type == orig(arg0.recordPerformer.type)
arg0.title == orig(arg0.title)
arg0.title.toString == orig(arg0.title.toString)
arg0.editionYear == orig(arg0.editionYear)
arg0.recordSpeed == es.uc3m.recordplayer.logic.Rpm.SPEED33
es.uc3m.recordplayer.logic.Rpm.SPEED33 == orig(arg0.recordSpeed)
es.uc3m.recordplayer.logic.Rpm.SPEED33 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED33)
es.uc3m.recordplayer.logic.Rpm.SPEED45 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED45)
es.uc3m.recordplayer.logic.Rpm.SPEED72 == orig(es.uc3m.recordplayer.logic.Rpm.SPEED72)
es.uc3m.recordplayer.logic.Rpm.$VALUES == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES)
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName())
es.uc3m.recordplayer.logic.Rpm.$VALUES[] == orig(es.uc3m.recordplayer.logic.Rpm.$VALUES[])
this.recordCollection.firstNode has only one value
arg0.sides has only one value
arg0.sides.getClass().getName() == es.uc3m.recordplayer.logic.Side[].class
arg0.sides[] contains no nulls and has only one value, of length 2
arg0.sides[].getClass().getName() == [es.uc3m.recordplayer.logic.Side, es.uc3m.recordplayer.logic.Side]
arg0.sides[].getClass().getName() elements == es.uc3m.recordplayer.logic.Side.class
arg0.sides[].songs contains no nulls and has only one value, of length 2
arg0.sides[].totalDuration == [-1.0, -1.0]
arg0.sides[].totalDuration elements == -1.0
arg0.sides[].record contains no nulls and has only one value, of length 2
arg0.sides[].record elements has only one value
arg0.sides[].sideIndex == [0, 1]
arg0.sides[].sideIndex elements one of { 0, 1 }
arg0.recordPerformer has only one value
arg0.recordPerformer.name has only one value
arg0.recordPerformer.name.toString == "Metallica"
arg0.recordPerformer.type has only one value
arg0.title has only one value
arg0.title.toString == "Metallica(Black Album)"
arg0.editionYear == 1991
es.uc3m.recordplayer.logic.Rpm.SPEED33 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED45 has only one value
es.uc3m.recordplayer.logic.Rpm.SPEED72 has only one value
es.uc3m.recordplayer.logic.Rpm.$VALUES has only one value
es.uc3m.recordplayer.logic.Rpm.$VALUES.getClass().getName() == es.uc3m.recordplayer.logic.Rpm[].class
es.uc3m.recordplayer.logic.Rpm.$VALUES[] contains no nulls and has only one value, of length 3
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() == [es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm, es.uc3m.recordplayer.logic.Rpm]
es.uc3m.recordplayer.logic.Rpm.$VALUES[].getClass().getName() elements == es.uc3m.recordplayer.logic.Rpm.class
size(arg0.sides[]) == 2
size(es.uc3m.recordplayer.logic.Rpm.$VALUES[]) == 3
arg0.sides[].record elements == orig(arg0)
orig(arg0) in arg0.sides[].record
===========================================================================
es.uc3m.recordplayer.test.Test.playTrack(java.lang.String):::ENTER
this.recordCollection.firstNode has only one value
arg0 has only one value
arg0.toString == "Sad But True"
===========================================================================
es.uc3m.recordplayer.test.Test.playTrack(java.lang.String):::EXIT
this.recordCollection == orig(this.recordCollection)
this.recordCollection.firstNode == orig(this.recordCollection.firstNode)
this.recordCollection.firstNode.nextNode == orig(this.recordCollection.firstNode.nextNode)
this.recordCollection.firstNode.elem == orig(this.recordCollection.firstNode.elem)
this.recordCollection.firstNode.elem.getClass().getName() == orig(this.recordCollection.firstNode.elem.getClass().getName())
this.stackOne == orig(this.stackOne)
this.stackOne.getClass().getName() == orig(this.stackOne.getClass().getName())
this.stackOne.getClass().getName() == orig(this.stackTwo.getClass().getName())
this.stackTwo == orig(this.stackTwo)
this.recordShelf == orig(this.recordShelf)
this.recordShelf.getClass().getName() == orig(this.recordShelf.getClass().getName())
this.player == orig(this.player)
this.player.getClass().getName() == orig(this.player.getClass().getName())
arg0.toString == orig(arg0.toString)
this.recordCollection.firstNode has only one value
arg0.toString == "Sad But True"
===========================================================================
es.uc3m.recordplayer.test.Test.removeRecordsFromPlayer():::ENTER
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.removeRecordsFromPlayer():::EXIT
this.recordCollection == orig(this.recordCollection)
this.recordCollection.firstNode == orig(this.recordCollection.firstNode)
this.recordCollection.firstNode.nextNode == orig(this.recordCollection.firstNode.nextNode)
this.recordCollection.firstNode.elem == orig(this.recordCollection.firstNode.elem)
this.recordCollection.firstNode.elem.getClass().getName() == orig(this.recordCollection.firstNode.elem.getClass().getName())
this.stackOne == orig(this.stackOne)
this.stackOne.getClass().getName() == orig(this.stackOne.getClass().getName())
this.stackOne.getClass().getName() == orig(this.stackTwo.getClass().getName())
this.stackTwo == orig(this.stackTwo)
this.recordShelf == orig(this.recordShelf)
this.recordShelf.getClass().getName() == orig(this.recordShelf.getClass().getName())
this.player == orig(this.player)
this.player.getClass().getName() == orig(this.player.getClass().getName())
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.sortLabels():::ENTER
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.sortLabels():::EXIT
this.recordCollection == orig(this.recordCollection)
this.recordCollection.firstNode == orig(this.recordCollection.firstNode)
this.recordCollection.firstNode.nextNode == orig(this.recordCollection.firstNode.nextNode)
this.recordCollection.firstNode.elem == orig(this.recordCollection.firstNode.elem)
this.recordCollection.firstNode.elem.getClass().getName() == orig(this.recordCollection.firstNode.elem.getClass().getName())
this.stackOne == orig(this.stackOne)
this.stackOne.getClass().getName() == orig(this.stackOne.getClass().getName())
this.stackOne.getClass().getName() == orig(this.stackTwo.getClass().getName())
this.stackTwo == orig(this.stackTwo)
this.recordShelf == orig(this.recordShelf)
this.recordShelf.getClass().getName() == orig(this.recordShelf.getClass().getName())
this.player == orig(this.player)
this.player.getClass().getName() == orig(this.player.getClass().getName())
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.sortRecordByLabel():::ENTER
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.sortRecordByLabel():::EXIT
this.recordCollection == orig(this.recordCollection)
this.recordCollection.firstNode == orig(this.recordCollection.firstNode)
this.recordCollection.firstNode.nextNode == orig(this.recordCollection.firstNode.nextNode)
this.recordCollection.firstNode.elem == orig(this.recordCollection.firstNode.elem)
this.recordCollection.firstNode.elem.getClass().getName() == orig(this.recordCollection.firstNode.elem.getClass().getName())
this.stackOne == orig(this.stackOne)
this.stackOne.getClass().getName() == orig(this.stackOne.getClass().getName())
this.stackOne.getClass().getName() == orig(this.stackTwo.getClass().getName())
this.stackTwo == orig(this.stackTwo)
this.recordShelf == orig(this.recordShelf)
this.recordShelf.getClass().getName() == orig(this.recordShelf.getClass().getName())
this.player == orig(this.player)
this.player.getClass().getName() == orig(this.player.getClass().getName())
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.test1():::ENTER
this.recordCollection.firstNode == null
===========================================================================
es.uc3m.recordplayer.test.Test.test1():::EXIT
this.recordCollection == orig(this.recordCollection)
this.stackOne == orig(this.stackOne)
this.stackOne.getClass().getName() == orig(this.stackOne.getClass().getName())
this.stackOne.getClass().getName() == orig(this.stackTwo.getClass().getName())
this.stackTwo == orig(this.stackTwo)
this.recordShelf == orig(this.recordShelf)
this.recordShelf.getClass().getName() == orig(this.recordShelf.getClass().getName())
this.player == orig(this.player)
this.player.getClass().getName() == orig(this.player.getClass().getName())
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.test2():::ENTER
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.test2():::EXIT
this.recordCollection == orig(this.recordCollection)
this.recordCollection.firstNode == orig(this.recordCollection.firstNode)
this.recordCollection.firstNode.nextNode == orig(this.recordCollection.firstNode.nextNode)
this.recordCollection.firstNode.elem == orig(this.recordCollection.firstNode.elem)
this.recordCollection.firstNode.elem.getClass().getName() == orig(this.recordCollection.firstNode.elem.getClass().getName())
this.stackOne == orig(this.stackOne)
this.stackOne.getClass().getName() == orig(this.stackOne.getClass().getName())
this.stackOne.getClass().getName() == orig(this.stackTwo.getClass().getName())
this.stackTwo == orig(this.stackTwo)
this.recordShelf == orig(this.recordShelf)
this.recordShelf.getClass().getName() == orig(this.recordShelf.getClass().getName())
this.player == orig(this.player)
this.player.getClass().getName() == orig(this.player.getClass().getName())
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.test3():::ENTER
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.test3():::EXIT
this.recordCollection == orig(this.recordCollection)
this.recordCollection.firstNode == orig(this.recordCollection.firstNode)
this.recordCollection.firstNode.nextNode == orig(this.recordCollection.firstNode.nextNode)
this.recordCollection.firstNode.elem == orig(this.recordCollection.firstNode.elem)
this.recordCollection.firstNode.elem.getClass().getName() == orig(this.recordCollection.firstNode.elem.getClass().getName())
this.stackOne == orig(this.stackOne)
this.stackOne.getClass().getName() == orig(this.stackOne.getClass().getName())
this.stackOne.getClass().getName() == orig(this.stackTwo.getClass().getName())
this.stackTwo == orig(this.stackTwo)
this.recordShelf == orig(this.recordShelf)
this.recordShelf.getClass().getName() == orig(this.recordShelf.getClass().getName())
this.player == orig(this.player)
this.player.getClass().getName() == orig(this.player.getClass().getName())
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.test4():::ENTER
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.test4():::EXIT
this.recordCollection == orig(this.recordCollection)
this.recordCollection.firstNode == orig(this.recordCollection.firstNode)
this.recordCollection.firstNode.nextNode == orig(this.recordCollection.firstNode.nextNode)
this.recordCollection.firstNode.elem == orig(this.recordCollection.firstNode.elem)
this.recordCollection.firstNode.elem.getClass().getName() == orig(this.recordCollection.firstNode.elem.getClass().getName())
this.stackOne == orig(this.stackOne)
this.stackOne.getClass().getName() == orig(this.stackOne.getClass().getName())
this.stackOne.getClass().getName() == orig(this.stackTwo.getClass().getName())
this.stackTwo == orig(this.stackTwo)
this.recordShelf == orig(this.recordShelf)
this.recordShelf.getClass().getName() == orig(this.recordShelf.getClass().getName())
this.player == orig(this.player)
this.player.getClass().getName() == orig(this.player.getClass().getName())
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.testQueries():::ENTER
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.testQueries():::EXIT
this.recordCollection == orig(this.recordCollection)
this.recordCollection.firstNode == orig(this.recordCollection.firstNode)
this.recordCollection.firstNode.nextNode == orig(this.recordCollection.firstNode.nextNode)
this.recordCollection.firstNode.elem == orig(this.recordCollection.firstNode.elem)
this.recordCollection.firstNode.elem.getClass().getName() == orig(this.recordCollection.firstNode.elem.getClass().getName())
this.stackOne == orig(this.stackOne)
this.stackOne.getClass().getName() == orig(this.stackOne.getClass().getName())
this.stackOne.getClass().getName() == orig(this.stackTwo.getClass().getName())
this.stackTwo == orig(this.stackTwo)
this.recordShelf == orig(this.recordShelf)
this.recordShelf.getClass().getName() == orig(this.recordShelf.getClass().getName())
this.player == orig(this.player)
this.player.getClass().getName() == orig(this.player.getClass().getName())
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.testShelf():::ENTER
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.testShelf():::EXIT
this.recordCollection == orig(this.recordCollection)
this.recordCollection.firstNode == orig(this.recordCollection.firstNode)
this.recordCollection.firstNode.nextNode == orig(this.recordCollection.firstNode.nextNode)
this.recordCollection.firstNode.elem == orig(this.recordCollection.firstNode.elem)
this.recordCollection.firstNode.elem.getClass().getName() == orig(this.recordCollection.firstNode.elem.getClass().getName())
this.stackOne == orig(this.stackOne)
this.stackOne.getClass().getName() == orig(this.stackOne.getClass().getName())
this.stackOne.getClass().getName() == orig(this.stackTwo.getClass().getName())
this.stackTwo == orig(this.stackTwo)
this.recordShelf == orig(this.recordShelf)
this.recordShelf.getClass().getName() == orig(this.recordShelf.getClass().getName())
this.player == orig(this.player)
this.player.getClass().getName() == orig(this.player.getClass().getName())
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.testStacks():::ENTER
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.testStacks():::EXIT
this.recordCollection == orig(this.recordCollection)
this.recordCollection.firstNode == orig(this.recordCollection.firstNode)
this.recordCollection.firstNode.nextNode == orig(this.recordCollection.firstNode.nextNode)
this.recordCollection.firstNode.elem == orig(this.recordCollection.firstNode.elem)
this.recordCollection.firstNode.elem.getClass().getName() == orig(this.recordCollection.firstNode.elem.getClass().getName())
this.stackOne == orig(this.stackOne)
this.stackOne.getClass().getName() == orig(this.stackOne.getClass().getName())
this.stackOne.getClass().getName() == orig(this.stackTwo.getClass().getName())
this.stackTwo == orig(this.stackTwo)
this.recordShelf == orig(this.recordShelf)
this.recordShelf.getClass().getName() == orig(this.recordShelf.getClass().getName())
this.player == orig(this.player)
this.player.getClass().getName() == orig(this.player.getClass().getName())
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.trackCollectionTest():::ENTER
this.recordCollection.firstNode has only one value
===========================================================================
es.uc3m.recordplayer.test.Test.trackCollectionTest():::EXIT
this.recordCollection == orig(this.recordCollection)
this.recordCollection.firstNode == orig(this.recordCollection.firstNode)
this.recordCollection.firstNode.nextNode == orig(this.recordCollection.firstNode.nextNode)
this.recordCollection.firstNode.elem == orig(this.recordCollection.firstNode.elem)
this.recordCollection.firstNode.elem.getClass().getName() == orig(this.recordCollection.firstNode.elem.getClass().getName())
this.stackOne == orig(this.stackOne)
this.stackOne.getClass().getName() == orig(this.stackOne.getClass().getName())
this.stackOne.getClass().getName() == orig(this.stackTwo.getClass().getName())
this.stackTwo == orig(this.stackTwo)
this.recordShelf == orig(this.recordShelf)
this.recordShelf.getClass().getName() == orig(this.recordShelf.getClass().getName())
this.player == orig(this.player)
this.player.getClass().getName() == orig(this.player.getClass().getName())
this.recordCollection.firstNode has only one value
Exiting Daikon.
