Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

===========================================================================
PlanningProblemTest:::OBJECT
this has only one value
this.fName == null
===========================================================================
PlanningProblemTest.PlanningProblemTest():::EXIT
===========================================================================
PlanningProblemTest.main(java.lang.String[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.lang.String[].class
arg0[] == []
arg0[].toString == []
===========================================================================
PlanningProblemTest.main(java.lang.String[]):::EXIT
arg0[] == orig(arg0[])
arg0[] == []
arg0[].toString == []
===========================================================================
PlanningProblemTest.testSingleStep():::ENTER
===========================================================================
PlanningProblemTest.testSingleStep():::EXIT
this.fName == orig(this.fName)
===========================================================================
cz.matfyz.sykora.planning.Action:::CLASS
cz.matfyz.sykora.planning.Action.$assertionsDisabled == false
===========================================================================
cz.matfyz.sykora.planning.Action:::OBJECT
this.actionName != null
this.actionName.toString one of { "kup", "no-op", "prodej" }
this.preconditions != null
this.preconditions.predicates != null
this.preconditions.predicates[] elements != null
this.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
this.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
this.preconditionsFulfillers.predicates != null
this.preconditionsFulfillers.predicates[] elements != null
this.preconditionsFulfillers.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
this.negativeEffects != null
this.negativeEffects.predicates != null
this.negativeEffects.predicates[] elements != null
this.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
this.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
this.positiveEffects != null
this.positiveEffects.predicates != null
this.positiveEffects.predicates[] elements != null
this.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
this.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(this.preconditions.predicates[]) one of { 1, 2 }
size(this.preconditionsFulfillers.predicates[]) one of { 0, 1, 2 }
size(this.negativeEffects.predicates[]) one of { 0, 1 }
size(this.positiveEffects.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.Action.Action(java.lang.String, cz.matfyz.sykora.planning.predicate.PredicateSet, cz.matfyz.sykora.planning.predicate.PredicateSet, cz.matfyz.sykora.planning.predicate.PredicateSet):::ENTER
arg0 != null
arg0.toString one of { "kup", "no-op", "prodej" }
arg1 != null
arg1.predicates != null
arg1.predicates[] elements != null
arg1.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg2 != null
arg2.predicates != null
arg2.predicates[] elements != null
arg2.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg2.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
arg3 != null
arg3.predicates != null
arg3.predicates[] elements != null
arg3.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg3.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(arg1.predicates[]) one of { 1, 2 }
size(arg2.predicates[]) one of { 0, 1 }
size(arg3.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.Action.Action(java.lang.String, cz.matfyz.sykora.planning.predicate.PredicateSet, cz.matfyz.sykora.planning.predicate.PredicateSet, cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT
this.actionName == orig(arg0)
this.preconditions == orig(arg1)
this.preconditions.predicates == arg1.predicates
this.negativeEffects == orig(arg2)
this.negativeEffects.predicates == arg2.predicates
this.positiveEffects == orig(arg3)
this.positiveEffects.predicates == arg3.predicates
arg0.toString == orig(arg0.toString)
arg1.predicates == orig(arg1.predicates)
arg1.predicates[] == orig(arg1.predicates[])
arg2.predicates == orig(arg2.predicates)
arg2.predicates[] == orig(arg2.predicates[])
arg3.predicates == orig(arg3.predicates)
arg3.predicates[] == orig(arg3.predicates[])
this.preconditionsFulfillers == null
arg0.toString one of { "kup", "no-op", "prodej" }
arg1.predicates != null
arg1.predicates[] elements != null
arg1.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg2.predicates != null
arg2.predicates[] elements != null
arg2.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg2.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
arg3.predicates != null
arg3.predicates[] elements != null
arg3.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg3.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(arg1.predicates[]) one of { 1, 2 }
size(arg2.predicates[]) one of { 0, 1 }
size(arg3.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.Action.compareTo(cz.matfyz.sykora.planning.Action):::ENTER
this.preconditionsFulfillers == null
arg0 != null
arg0.actionName != null
arg0.actionName.toString one of { "kup", "no-op", "prodej" }
arg0.preconditions != null
arg0.preconditions.predicates != null
arg0.preconditions.predicates[] elements != null
arg0.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.preconditionsFulfillers == null
arg0.negativeEffects != null
arg0.negativeEffects.predicates != null
arg0.negativeEffects.predicates[] elements != null
arg0.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.positiveEffects != null
arg0.positiveEffects.predicates != null
arg0.positiveEffects.predicates[] elements != null
arg0.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg0.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(arg0.preconditions.predicates[]) one of { 1, 2 }
size(arg0.negativeEffects.predicates[]) one of { 0, 1 }
size(arg0.positiveEffects.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.Action.compareTo(cz.matfyz.sykora.planning.Action):::EXIT78
return != 0
===========================================================================
cz.matfyz.sykora.planning.Action.compareTo(cz.matfyz.sykora.planning.Action):::EXIT81
this.actionName == arg0.actionName
this.actionName == orig(arg0.actionName)
this.actionName.toString one of { "kup", "no-op" }
arg0.actionName.toString one of { "kup", "no-op" }
return != 0
===========================================================================
cz.matfyz.sykora.planning.Action.compareTo(cz.matfyz.sykora.planning.Action):::EXIT88
this.actionName == arg0.actionName
this.actionName == orig(arg0.actionName)
this.preconditions == arg0.preconditions
this.preconditions == orig(arg0.preconditions)
this.preconditions.predicates == arg0.preconditions.predicates
this.preconditions.predicates == orig(arg0.preconditions.predicates)
this.negativeEffects == arg0.negativeEffects
this.negativeEffects == orig(arg0.negativeEffects)
this.negativeEffects.predicates == arg0.negativeEffects.predicates
this.negativeEffects.predicates == orig(arg0.negativeEffects.predicates)
this.positiveEffects == arg0.positiveEffects
this.positiveEffects == orig(arg0.positiveEffects)
this.positiveEffects.predicates == arg0.positiveEffects.predicates
this.positiveEffects.predicates == orig(arg0.positiveEffects.predicates)
orig(this) == orig(arg0)
return == 0
===========================================================================
cz.matfyz.sykora.planning.Action.compareTo(cz.matfyz.sykora.planning.Action):::EXIT
this.actionName == orig(this.actionName)
this.actionName.toString == orig(this.actionName.toString)
this.preconditions == orig(this.preconditions)
this.preconditions.predicates == orig(this.preconditions.predicates)
this.preconditions.predicates[] == orig(this.preconditions.predicates[])
this.preconditionsFulfillers == orig(this.preconditionsFulfillers)
this.negativeEffects == orig(this.negativeEffects)
this.negativeEffects.predicates == orig(this.negativeEffects.predicates)
this.negativeEffects.predicates[] == orig(this.negativeEffects.predicates[])
this.positiveEffects == orig(this.positiveEffects)
this.positiveEffects.predicates == orig(this.positiveEffects.predicates)
this.positiveEffects.predicates[] == orig(this.positiveEffects.predicates[])
cz.matfyz.sykora.planning.Action.$assertionsDisabled == orig(cz.matfyz.sykora.planning.Action.$assertionsDisabled)
arg0.actionName == orig(arg0.actionName)
arg0.actionName.toString == orig(arg0.actionName.toString)
arg0.preconditions == orig(arg0.preconditions)
arg0.preconditions.predicates == orig(arg0.preconditions.predicates)
arg0.preconditions.predicates[] == orig(arg0.preconditions.predicates[])
arg0.preconditionsFulfillers == orig(arg0.preconditionsFulfillers)
arg0.negativeEffects == orig(arg0.negativeEffects)
arg0.negativeEffects.predicates == orig(arg0.negativeEffects.predicates)
arg0.negativeEffects.predicates[] == orig(arg0.negativeEffects.predicates[])
arg0.positiveEffects == orig(arg0.positiveEffects)
arg0.positiveEffects.predicates == orig(arg0.positiveEffects.predicates)
arg0.positiveEffects.predicates[] == orig(arg0.positiveEffects.predicates[])
this.preconditionsFulfillers == null
arg0.actionName != null
arg0.actionName.toString one of { "kup", "no-op", "prodej" }
arg0.preconditions != null
arg0.preconditions.predicates != null
arg0.preconditions.predicates[] elements != null
arg0.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.preconditionsFulfillers == null
arg0.negativeEffects != null
arg0.negativeEffects.predicates != null
arg0.negativeEffects.predicates[] elements != null
arg0.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.positiveEffects != null
arg0.positiveEffects.predicates != null
arg0.positiveEffects.predicates[] elements != null
arg0.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg0.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(arg0.preconditions.predicates[]) one of { 1, 2 }
size(arg0.negativeEffects.predicates[]) one of { 0, 1 }
size(arg0.positiveEffects.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.Action.equals(java.lang.Object):::ENTER
this.preconditionsFulfillers == null
arg0 != null
arg0.getClass().getName() == cz.matfyz.sykora.planning.Action.class
===========================================================================
cz.matfyz.sykora.planning.Action.equals(java.lang.Object):::EXIT103
return == false
===========================================================================
cz.matfyz.sykora.planning.Action.equals(java.lang.Object):::EXIT103;condition="not(return == true)"
===========================================================================
cz.matfyz.sykora.planning.Action.equals(java.lang.Object):::EXIT108
this.actionName.toString one of { "kup", "no-op" }
return == false
===========================================================================
cz.matfyz.sykora.planning.Action.equals(java.lang.Object):::EXIT108;condition="not(return == true)"
===========================================================================
cz.matfyz.sykora.planning.Action.equals(java.lang.Object):::EXIT119
orig(this) == orig(arg0)
return == true
===========================================================================
cz.matfyz.sykora.planning.Action.equals(java.lang.Object):::EXIT119;condition="return == true"
===========================================================================
cz.matfyz.sykora.planning.Action.equals(java.lang.Object):::EXIT
this.actionName == orig(this.actionName)
this.actionName.toString == orig(this.actionName.toString)
this.preconditions == orig(this.preconditions)
this.preconditions.predicates == orig(this.preconditions.predicates)
this.preconditions.predicates[] == orig(this.preconditions.predicates[])
this.preconditionsFulfillers == orig(this.preconditionsFulfillers)
this.negativeEffects == orig(this.negativeEffects)
this.negativeEffects.predicates == orig(this.negativeEffects.predicates)
this.negativeEffects.predicates[] == orig(this.negativeEffects.predicates[])
this.positiveEffects == orig(this.positiveEffects)
this.positiveEffects.predicates == orig(this.positiveEffects.predicates)
this.positiveEffects.predicates[] == orig(this.positiveEffects.predicates[])
cz.matfyz.sykora.planning.Action.$assertionsDisabled == orig(cz.matfyz.sykora.planning.Action.$assertionsDisabled)
(return == true)  ==>  (orig(this) == orig(arg0))
this.preconditionsFulfillers == null
===========================================================================
cz.matfyz.sykora.planning.Action.equals(java.lang.Object):::EXIT;condition="return == true"
orig(this) == orig(arg0)
return == true
===========================================================================
cz.matfyz.sykora.planning.Action.equals(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
cz.matfyz.sykora.planning.Action.findPossibleInstances(cz.matfyz.sykora.planning.graph.PredicateLayer, int, int, java.util.Set, java.util.Map):::ENTER
this.actionName.toString one of { "kup", "prodej" }
this.preconditions.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
this.preconditionsFulfillers != null
this.negativeEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg0 != null
arg0.mutexes != null
arg0.isMutexHelperPair != null
arg0.predicates != null
arg0.predicates[] elements != null
arg0.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg1 == 0
arg2 one of { 0, 1, 2 }
arg3 != null
arg3.getClass().getName() == java.util.TreeSet.class
arg4 != null
arg4.getClass().getName() == java.util.TreeMap.class
size(this.preconditions.predicates[]) == 2
size(this.negativeEffects.predicates[]) == 1
size(arg0.predicates[]) one of { 3, 4 }
arg1 <= arg2
arg3.getClass().getName() != arg4.getClass().getName()
===========================================================================
cz.matfyz.sykora.planning.Action.findPossibleInstances(cz.matfyz.sykora.planning.graph.PredicateLayer, int, int, java.util.Set, java.util.Map):::EXIT183
arg0.isMutexHelperPair.first == orig(arg0.isMutexHelperPair.first)
arg0.isMutexHelperPair.second == orig(arg0.isMutexHelperPair.second)
this.preconditionsFulfillers.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
orig(arg2) == 2
size(this.preconditionsFulfillers.predicates[]) == 2
===========================================================================
cz.matfyz.sykora.planning.Action.findPossibleInstances(cz.matfyz.sykora.planning.graph.PredicateLayer, int, int, java.util.Set, java.util.Map):::EXIT207
this.preconditionsFulfillers.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
orig(arg2) one of { 0, 1 }
size(this.preconditionsFulfillers.predicates[]) one of { 0, 1 }
===========================================================================
cz.matfyz.sykora.planning.Action.findPossibleInstances(cz.matfyz.sykora.planning.graph.PredicateLayer, int, int, java.util.Set, java.util.Map):::EXIT
this.actionName == orig(this.actionName)
this.actionName.toString == orig(this.actionName.toString)
this.preconditions == orig(this.preconditions)
this.preconditions.predicates == orig(this.preconditions.predicates)
this.preconditions.predicates[] == orig(this.preconditions.predicates[])
this.preconditionsFulfillers == orig(this.preconditionsFulfillers)
this.preconditionsFulfillers.predicates == orig(this.preconditionsFulfillers.predicates)
this.preconditionsFulfillers.predicates[] == orig(this.preconditionsFulfillers.predicates[])
this.negativeEffects == orig(this.negativeEffects)
this.negativeEffects.predicates == orig(this.negativeEffects.predicates)
this.negativeEffects.predicates[] == orig(this.negativeEffects.predicates[])
this.positiveEffects == orig(this.positiveEffects)
this.positiveEffects.predicates == orig(this.positiveEffects.predicates)
this.positiveEffects.predicates[] == orig(this.positiveEffects.predicates[])
cz.matfyz.sykora.planning.Action.$assertionsDisabled == orig(cz.matfyz.sykora.planning.Action.$assertionsDisabled)
arg0.mutexes == orig(arg0.mutexes)
arg0.isMutexHelperPair == orig(arg0.isMutexHelperPair)
arg0.predicates == orig(arg0.predicates)
arg0.predicates[] == orig(arg0.predicates[])
(this.preconditionsFulfillers.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate])  <==>  (arg1 == 0)
(this.preconditionsFulfillers.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate])  <==>  (arg1 == orig(arg1))
(this.preconditionsFulfillers.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate])  <==>  (orig(arg2) == 2)
(this.preconditionsFulfillers.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate])  <==>  (size(this.preconditionsFulfillers.predicates[]) == 2)
(this.preconditionsFulfillers.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate])  ==>  (arg0.isMutexHelperPair.first == orig(arg0.isMutexHelperPair.first))
(this.preconditionsFulfillers.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate])  ==>  (arg0.isMutexHelperPair.second == orig(arg0.isMutexHelperPair.second))
(this.preconditionsFulfillers.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] })  <==>  (arg1 > orig(arg1))
(this.preconditionsFulfillers.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] })  <==>  (arg1 > orig(arg2))
(this.preconditionsFulfillers.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] })  <==>  (arg1 one of { 3, 4 })
(this.preconditionsFulfillers.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] })  <==>  (orig(arg2) one of { 0, 1 })
(this.preconditionsFulfillers.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] })  <==>  (size(this.preconditionsFulfillers.predicates[]) one of { 0, 1 })
this.actionName.toString one of { "kup", "prodej" }
this.preconditions.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
this.preconditionsFulfillers != null
this.negativeEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg0.mutexes != null
arg0.isMutexHelperPair != null
arg0.predicates != null
arg0.predicates[] elements != null
arg0.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
size(this.preconditions.predicates[]) == 2
size(this.negativeEffects.predicates[]) == 1
size(arg0.predicates[]) one of { 3, 4 }
===========================================================================
cz.matfyz.sykora.planning.Action.findPossibleInstances(cz.matfyz.sykora.planning.graph.PredicateLayer, java.util.Set, java.util.Map):::ENTER
this.actionName.toString one of { "kup", "prodej" }
this.preconditions.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
this.preconditionsFulfillers.predicates[] == []
this.preconditionsFulfillers.predicates[].getClass().getName() == []
this.negativeEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg0.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg1.getClass().getName() == java.util.TreeSet.class
arg2.getClass().getName() == java.util.TreeMap.class
size(this.preconditions.predicates[]) == 2
size(this.negativeEffects.predicates[]) == 1
size(arg0.predicates[]) one of { 3, 4 }
===========================================================================
cz.matfyz.sykora.planning.Action.findPossibleInstances(cz.matfyz.sykora.planning.graph.PredicateLayer, java.util.Set, java.util.Map):::EXIT
this.actionName == orig(this.actionName)
this.actionName.toString == orig(this.actionName.toString)
this.preconditions == orig(this.preconditions)
this.preconditions.predicates == orig(this.preconditions.predicates)
this.preconditions.predicates[] == orig(this.preconditions.predicates[])
this.preconditionsFulfillers.predicates[] == orig(this.preconditionsFulfillers.predicates[])
this.preconditionsFulfillers.predicates[].getClass().getName() == orig(this.preconditionsFulfillers.predicates[].getClass().getName())
this.negativeEffects == orig(this.negativeEffects)
this.negativeEffects.predicates == orig(this.negativeEffects.predicates)
this.negativeEffects.predicates[] == orig(this.negativeEffects.predicates[])
this.positiveEffects == orig(this.positiveEffects)
this.positiveEffects.predicates == orig(this.positiveEffects.predicates)
this.positiveEffects.predicates[] == orig(this.positiveEffects.predicates[])
cz.matfyz.sykora.planning.Action.$assertionsDisabled == orig(cz.matfyz.sykora.planning.Action.$assertionsDisabled)
arg0.mutexes == orig(arg0.mutexes)
arg0.isMutexHelperPair == orig(arg0.isMutexHelperPair)
arg0.predicates == orig(arg0.predicates)
arg0.predicates[] == orig(arg0.predicates[])
this.actionName.toString one of { "kup", "prodej" }
this.preconditions.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
this.preconditionsFulfillers.predicates[] == []
this.preconditionsFulfillers.predicates[].getClass().getName() == []
this.negativeEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg0.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
size(this.preconditions.predicates[]) == 2
size(this.negativeEffects.predicates[]) == 1
size(arg0.predicates[]) one of { 3, 4 }
this.preconditionsFulfillers.predicates[] is the reverse of orig(this.preconditionsFulfillers.predicates[])
===========================================================================
cz.matfyz.sykora.planning.Action.getActionName():::ENTER
this.preconditionsFulfillers.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
size(this.preconditionsFulfillers.predicates[]) == 2
===========================================================================
cz.matfyz.sykora.planning.Action.getActionName():::EXIT
this.actionName == return
this.actionName.toString == orig(this.actionName.toString)
this.preconditions == orig(this.preconditions)
this.preconditions.predicates == orig(this.preconditions.predicates)
this.preconditions.predicates[] == orig(this.preconditions.predicates[])
this.preconditionsFulfillers == orig(this.preconditionsFulfillers)
this.preconditionsFulfillers.predicates == orig(this.preconditionsFulfillers.predicates)
this.preconditionsFulfillers.predicates[] == orig(this.preconditionsFulfillers.predicates[])
this.negativeEffects == orig(this.negativeEffects)
this.negativeEffects.predicates == orig(this.negativeEffects.predicates)
this.negativeEffects.predicates[] == orig(this.negativeEffects.predicates[])
this.positiveEffects == orig(this.positiveEffects)
this.positiveEffects.predicates == orig(this.positiveEffects.predicates)
this.positiveEffects.predicates[] == orig(this.positiveEffects.predicates[])
cz.matfyz.sykora.planning.Action.$assertionsDisabled == orig(cz.matfyz.sykora.planning.Action.$assertionsDisabled)
return == orig(this.actionName)
this.preconditionsFulfillers.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
return != null
return.toString one of { "kup", "no-op", "prodej" }
size(this.preconditionsFulfillers.predicates[]) == 2
===========================================================================
cz.matfyz.sykora.planning.Action.getNegativeEffects():::ENTER
this.preconditionsFulfillers == null
===========================================================================
cz.matfyz.sykora.planning.Action.getNegativeEffects():::EXIT
this.actionName == orig(this.actionName)
this.actionName.toString == orig(this.actionName.toString)
this.preconditions == orig(this.preconditions)
this.preconditions.predicates == orig(this.preconditions.predicates)
this.preconditions.predicates[] == orig(this.preconditions.predicates[])
this.preconditionsFulfillers == orig(this.preconditionsFulfillers)
this.negativeEffects == return
this.negativeEffects.predicates == return.predicates
this.negativeEffects.predicates[] == orig(this.negativeEffects.predicates[])
this.positiveEffects == orig(this.positiveEffects)
this.positiveEffects.predicates == orig(this.positiveEffects.predicates)
this.positiveEffects.predicates[] == orig(this.positiveEffects.predicates[])
cz.matfyz.sykora.planning.Action.$assertionsDisabled == orig(cz.matfyz.sykora.planning.Action.$assertionsDisabled)
return == orig(this.negativeEffects)
return.predicates == orig(this.negativeEffects.predicates)
this.preconditionsFulfillers == null
return != null
return.predicates != null
return.predicates[] elements != null
return.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
return.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
size(return.predicates[]) one of { 0, 1 }
===========================================================================
cz.matfyz.sykora.planning.Action.getPositiveEffects():::ENTER
this.preconditionsFulfillers == null
===========================================================================
cz.matfyz.sykora.planning.Action.getPositiveEffects():::EXIT
this.actionName == orig(this.actionName)
this.actionName.toString == orig(this.actionName.toString)
this.preconditions == orig(this.preconditions)
this.preconditions.predicates == orig(this.preconditions.predicates)
this.preconditions.predicates[] == orig(this.preconditions.predicates[])
this.preconditionsFulfillers == orig(this.preconditionsFulfillers)
this.negativeEffects == orig(this.negativeEffects)
this.negativeEffects.predicates == orig(this.negativeEffects.predicates)
this.negativeEffects.predicates[] == orig(this.negativeEffects.predicates[])
this.positiveEffects == return
this.positiveEffects.predicates == return.predicates
this.positiveEffects.predicates[] == orig(this.positiveEffects.predicates[])
cz.matfyz.sykora.planning.Action.$assertionsDisabled == orig(cz.matfyz.sykora.planning.Action.$assertionsDisabled)
return == orig(this.positiveEffects)
return.predicates == orig(this.positiveEffects.predicates)
this.preconditionsFulfillers == null
return != null
return.predicates != null
return.predicates[] elements != null
return.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
return.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(return.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.Action.getPreconditions():::ENTER
this.preconditionsFulfillers == null
===========================================================================
cz.matfyz.sykora.planning.Action.getPreconditions():::EXIT
this.actionName == orig(this.actionName)
this.actionName.toString == orig(this.actionName.toString)
this.preconditions == return
this.preconditions.predicates == return.predicates
this.preconditions.predicates[] == orig(this.preconditions.predicates[])
this.preconditionsFulfillers == orig(this.preconditionsFulfillers)
this.negativeEffects == orig(this.negativeEffects)
this.negativeEffects.predicates == orig(this.negativeEffects.predicates)
this.negativeEffects.predicates[] == orig(this.negativeEffects.predicates[])
this.positiveEffects == orig(this.positiveEffects)
this.positiveEffects.predicates == orig(this.positiveEffects.predicates)
this.positiveEffects.predicates[] == orig(this.positiveEffects.predicates[])
cz.matfyz.sykora.planning.Action.$assertionsDisabled == orig(cz.matfyz.sykora.planning.Action.$assertionsDisabled)
return == orig(this.preconditions)
return.predicates == orig(this.preconditions.predicates)
this.preconditionsFulfillers == null
return != null
return.predicates != null
return.predicates[] elements != null
return.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
return.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
size(return.predicates[]) one of { 1, 2 }
===========================================================================
cz.matfyz.sykora.planning.Action.groundedClone():::ENTER
this.actionName.toString one of { "kup", "prodej" }
this.preconditions.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
this.preconditionsFulfillers.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
this.negativeEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
size(this.preconditions.predicates[]) == 2
size(this.preconditionsFulfillers.predicates[]) == 2
size(this.negativeEffects.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.Action.groundedClone():::EXIT
this.actionName == return.actionName
this.actionName == orig(this.actionName)
this.actionName.toString == orig(this.actionName.toString)
this.preconditions == orig(this.preconditions)
this.preconditions.predicates == orig(this.preconditions.predicates)
this.preconditions.predicates[] == orig(this.preconditions.predicates[])
this.preconditionsFulfillers == orig(this.preconditionsFulfillers)
this.preconditionsFulfillers.predicates == orig(this.preconditionsFulfillers.predicates)
this.preconditionsFulfillers.predicates[] == orig(this.preconditionsFulfillers.predicates[])
this.negativeEffects == orig(this.negativeEffects)
this.negativeEffects.predicates == orig(this.negativeEffects.predicates)
this.negativeEffects.predicates[] == orig(this.negativeEffects.predicates[])
this.positiveEffects == orig(this.positiveEffects)
this.positiveEffects.predicates == orig(this.positiveEffects.predicates)
this.positiveEffects.predicates[] == orig(this.positiveEffects.predicates[])
cz.matfyz.sykora.planning.Action.$assertionsDisabled == orig(cz.matfyz.sykora.planning.Action.$assertionsDisabled)
this.actionName.toString one of { "kup", "prodej" }
this.preconditions.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
this.preconditionsFulfillers.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
this.negativeEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
return.actionName.toString one of { "kup", "prodej" }
return.preconditions.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
return.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
return.preconditionsFulfillers == null
return.negativeEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
return.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
return.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
return.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(this.preconditions.predicates[]) == 2
size(this.preconditionsFulfillers.predicates[]) == 2
size(this.negativeEffects.predicates[]) == 1
size(return.preconditions.predicates[]) == 2
size(return.negativeEffects.predicates[]) == 1
size(return.positiveEffects.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.Action.noOpAction(cz.matfyz.sykora.planning.predicate.Predicate):::ENTER
arg0.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg0.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg0.predicateName.toString one of { "mam", "zbozi" }
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == false
size(arg0.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.Action.noOpAction(cz.matfyz.sykora.planning.predicate.Predicate):::EXIT
cz.matfyz.sykora.planning.Action.$assertionsDisabled == orig(cz.matfyz.sykora.planning.Action.$assertionsDisabled)
arg0.parameters == orig(arg0.parameters)
arg0.parameters.getClass().getName() == orig(arg0.parameters.getClass().getName())
arg0.parameters[] == orig(arg0.parameters[])
arg0.parameters[].boundValue == orig(arg0.parameters[].boundValue)
arg0.parameters[].dependentBindings == orig(arg0.parameters[].dependentBindings)
arg0.parameters[].distinctBindings == orig(arg0.parameters[].distinctBindings)
arg0.predicateName == orig(arg0.predicateName)
arg0.predicateName.toString == orig(arg0.predicateName.toString)
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
arg0.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg0.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg0.predicateName.toString one of { "mam", "zbozi" }
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == false
return.actionName has only one value
return.actionName.toString == "no-op"
return.preconditions.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
return.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
return.preconditionsFulfillers == null
return.negativeEffects.predicates[] == []
return.negativeEffects.predicates[].getClass().getName() == []
return.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
return.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(arg0.parameters[]) == 1
size(return.preconditions.predicates[]) == 1
size(return.positiveEffects.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.Action.parse(java.lang.String):::ENTER
arg0.toString one of { "kup :: mam(penize),zbozi(X) => not mam(penize),mam(X).", "prodej :: mam(X),zbozi(X) => not mam(X),mam(penize)." }
===========================================================================
cz.matfyz.sykora.planning.Action.parse(java.lang.String):::EXIT380
===========================================================================
cz.matfyz.sykora.planning.Action.parse(java.lang.String):::EXIT
cz.matfyz.sykora.planning.Action.$assertionsDisabled == orig(cz.matfyz.sykora.planning.Action.$assertionsDisabled)
arg0.toString == orig(arg0.toString)
arg0.toString one of { "kup :: mam(penize),zbozi(X) => not mam(penize),mam(X).", "prodej :: mam(X),zbozi(X) => not mam(X),mam(penize)." }
return.actionName.toString one of { "kup", "prodej" }
return.preconditions.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
return.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
return.preconditionsFulfillers == null
return.negativeEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
return.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
return.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
return.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(return.preconditions.predicates[]) == 2
size(return.negativeEffects.predicates[]) == 1
size(return.positiveEffects.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.Action.toString():::ENTER
this.preconditionsFulfillers == null
===========================================================================
cz.matfyz.sykora.planning.Action.toString():::EXIT
this.actionName == orig(this.actionName)
this.actionName.toString == orig(this.actionName.toString)
this.preconditions == orig(this.preconditions)
this.preconditions.predicates == orig(this.preconditions.predicates)
this.preconditions.predicates[] == orig(this.preconditions.predicates[])
this.preconditionsFulfillers == orig(this.preconditionsFulfillers)
this.negativeEffects == orig(this.negativeEffects)
this.negativeEffects.predicates == orig(this.negativeEffects.predicates)
this.negativeEffects.predicates[] == orig(this.negativeEffects.predicates[])
this.positiveEffects == orig(this.positiveEffects)
this.positiveEffects.predicates == orig(this.positiveEffects.predicates)
this.positiveEffects.predicates[] == orig(this.positiveEffects.predicates[])
cz.matfyz.sykora.planning.Action.$assertionsDisabled == orig(cz.matfyz.sykora.planning.Action.$assertionsDisabled)
this.preconditionsFulfillers == null
return.toString one of { "kup :: mam(penize), zbozi(brambory) => mam(brambory), not mam(penize).", "no-op :: zbozi(brambory) => zbozi(brambory).", "prodej :: mam(orezavatko), zbozi(orezavatko) => mam(penize), not mam(orezavatko)." }
===========================================================================
cz.matfyz.sykora.planning.ActionList:::OBJECT
===========================================================================
cz.matfyz.sykora.planning.ActionList.ActionList():::EXIT
===========================================================================
cz.matfyz.sykora.planning.ActionList.getPreconditions():::ENTER
this has only one value
===========================================================================
cz.matfyz.sykora.planning.ActionList.getPreconditions():::EXIT
return has only one value
return.predicates has only one value
return.predicates[] contains no nulls and has only one value, of length 2
return.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
return.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(return.predicates[]) == 2
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem$BiLayer:::OBJECT
this.actions.isMutexHelperPair.first == this.actions.isMutexHelperPair.second
this.actions.actions != null
this.actions.actions[] elements != null
this.actions.actions[].getClass().getName() elements == cz.matfyz.sykora.planning.Action.class
this.actions.actions[].getClass().getName() one of { [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action], [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action] }
this.actions.mutexes != null
this.actions.isMutexHelperPair != null
this.actions.isMutexHelperPair.first != null
this.predicates != null
this.predicates.mutexes != null
this.predicates.isMutexHelperPair != null
this.predicates.predicates != null
this.predicates.predicates[] elements != null
this.predicates.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
this.support.getClass().getName() == java.util.TreeMap.class
this.noGoods == null
cz.matfyz.sykora.planning.PlanningProblem.this has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING != null
cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING.toString == "goal"
cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING != null
cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING.toString == "goals"
cz.matfyz.sykora.planning.PlanningProblem.this.goals has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.goals != null
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates != null
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[] contains no nulls and has only one value, of length 1
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[] elements has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[] elements != null
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
cz.matfyz.sykora.planning.PlanningProblem.this.fixedPoint == null
cz.matfyz.sykora.planning.PlanningProblem.this.verboseOutput == true
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions != null
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[] contains no nulls and has only one value, of length 2
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[] elements != null
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[].getClass().getName() elements == cz.matfyz.sykora.planning.Action.class
cz.matfyz.sykora.planning.PlanningProblem.this.layers has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.layers != null
cz.matfyz.sykora.planning.PlanningProblem.this.layers[] elements != null
cz.matfyz.sykora.planning.PlanningProblem.this.layers[].getClass().getName() elements == cz.matfyz.sykora.planning.PlanningProblem.BiLayer.class
cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled == false
size(this.actions.actions[]) one of { 4, 7 }
size(this.predicates.predicates[]) one of { 3, 4, 5 }
size(cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[]) == 1
size(cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[]) == 2
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem$BiLayer.BiLayer(cz.matfyz.sykora.planning.PlanningProblem, cz.matfyz.sykora.planning.graph.ActionLayer, cz.matfyz.sykora.planning.graph.PredicateLayer, java.util.Map):::ENTER
arg1.isMutexHelperPair.first == arg1.isMutexHelperPair.second
cz.matfyz.sykora.planning.PlanningProblem.this has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING.toString == "goal"
cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING.toString == "goals"
cz.matfyz.sykora.planning.PlanningProblem.this.goals has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[] contains no nulls and has only one value, of length 1
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[] elements has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
cz.matfyz.sykora.planning.PlanningProblem.this.goalsFulfiled == false
cz.matfyz.sykora.planning.PlanningProblem.this.fixedPoint == null
cz.matfyz.sykora.planning.PlanningProblem.this.verboseOutput == true
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[] contains no nulls and has only one value, of length 2
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[].getClass().getName() elements == cz.matfyz.sykora.planning.Action.class
cz.matfyz.sykora.planning.PlanningProblem.this.layers has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.layers[].getClass().getName() elements == cz.matfyz.sykora.planning.PlanningProblem.BiLayer.class
cz.matfyz.sykora.planning.PlanningProblem.this.layers[].getClass().getName() one of { [cz.matfyz.sykora.planning.PlanningProblem.BiLayer], [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer] }
cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled == false
arg1.actions[].getClass().getName() elements == cz.matfyz.sykora.planning.Action.class
arg1.actions[].getClass().getName() one of { [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action], [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action] }
arg2.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg2.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg3.getClass().getName() == java.util.TreeMap.class
size(cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[]) == 1
size(cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[]) == 2
size(cz.matfyz.sykora.planning.PlanningProblem.this.layers[]) one of { 1, 2 }
size(arg1.actions[]) one of { 4, 7 }
size(arg2.predicates[]) one of { 4, 5 }
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem$BiLayer.BiLayer(cz.matfyz.sykora.planning.PlanningProblem, cz.matfyz.sykora.planning.graph.ActionLayer, cz.matfyz.sykora.planning.graph.PredicateLayer, java.util.Map):::EXIT
this.actions == orig(arg1)
this.actions.actions == arg1.actions
this.actions.mutexes == arg1.mutexes
this.actions.isMutexHelperPair == arg1.isMutexHelperPair
this.actions.isMutexHelperPair.first == arg1.isMutexHelperPair.first
this.actions.isMutexHelperPair.second == arg1.isMutexHelperPair.first
this.predicates == orig(arg2)
this.predicates.mutexes == arg2.mutexes
this.predicates.isMutexHelperPair == arg2.isMutexHelperPair
this.predicates.isMutexHelperPair.first == arg2.isMutexHelperPair.first
this.predicates.isMutexHelperPair.second == arg2.isMutexHelperPair.second
this.predicates.predicates == arg2.predicates
this.support == orig(arg3)
this.support.getClass().getName() == orig(arg3.getClass().getName())
cz.matfyz.sykora.planning.PlanningProblem.this == orig(cz.matfyz.sykora.planning.PlanningProblem.this)
cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING == orig(cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING)
cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING.toString == orig(cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING.toString)
cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING == orig(cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING)
cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING.toString == orig(cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING.toString)
cz.matfyz.sykora.planning.PlanningProblem.this.goals == orig(cz.matfyz.sykora.planning.PlanningProblem.this.goals)
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates == orig(cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates)
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[] == orig(cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[])
cz.matfyz.sykora.planning.PlanningProblem.this.goalsFulfiled == orig(cz.matfyz.sykora.planning.PlanningProblem.this.goalsFulfiled)
cz.matfyz.sykora.planning.PlanningProblem.this.fixedPoint == orig(cz.matfyz.sykora.planning.PlanningProblem.this.fixedPoint)
cz.matfyz.sykora.planning.PlanningProblem.this.verboseOutput == orig(cz.matfyz.sykora.planning.PlanningProblem.this.verboseOutput)
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions == orig(cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions)
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[] == orig(cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[])
cz.matfyz.sykora.planning.PlanningProblem.this.layers == orig(cz.matfyz.sykora.planning.PlanningProblem.this.layers)
cz.matfyz.sykora.planning.PlanningProblem.this.layers[] == orig(cz.matfyz.sykora.planning.PlanningProblem.this.layers[])
cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled == orig(cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled)
arg1.actions == orig(arg1.actions)
arg1.actions[] == orig(arg1.actions[])
arg1.mutexes == orig(arg1.mutexes)
arg1.isMutexHelperPair == orig(arg1.isMutexHelperPair)
arg1.isMutexHelperPair.first == arg1.isMutexHelperPair.second
arg1.isMutexHelperPair.first == orig(arg1.isMutexHelperPair.first)
arg1.isMutexHelperPair.first == orig(arg1.isMutexHelperPair.second)
arg2.mutexes == orig(arg2.mutexes)
arg2.isMutexHelperPair == orig(arg2.isMutexHelperPair)
arg2.isMutexHelperPair.first == orig(arg2.isMutexHelperPair.first)
arg2.isMutexHelperPair.second == orig(arg2.isMutexHelperPair.second)
arg2.predicates == orig(arg2.predicates)
arg2.predicates[] == orig(arg2.predicates[])
this.predicates.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
cz.matfyz.sykora.planning.PlanningProblem.this.goalsFulfiled == false
cz.matfyz.sykora.planning.PlanningProblem.this.layers[].getClass().getName() one of { [cz.matfyz.sykora.planning.PlanningProblem.BiLayer], [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer] }
arg1.actions[].getClass().getName() elements == cz.matfyz.sykora.planning.Action.class
arg1.actions[].getClass().getName() one of { [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action], [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action] }
arg2.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg2.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
size(this.predicates.predicates[]) one of { 4, 5 }
size(cz.matfyz.sykora.planning.PlanningProblem.this.layers[]) one of { 1, 2 }
size(arg1.actions[]) one of { 4, 7 }
size(arg2.predicates[]) one of { 4, 5 }
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem$BiLayer.BiLayer(cz.matfyz.sykora.planning.PlanningProblem, cz.matfyz.sykora.planning.predicate.PredicateSet):::ENTER
cz.matfyz.sykora.planning.PlanningProblem.this has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING.toString == "goal"
cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING.toString == "goals"
cz.matfyz.sykora.planning.PlanningProblem.this.goals has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[] contains no nulls and has only one value, of length 1
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[] elements has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
cz.matfyz.sykora.planning.PlanningProblem.this.goalsFulfiled == false
cz.matfyz.sykora.planning.PlanningProblem.this.fixedPoint == null
cz.matfyz.sykora.planning.PlanningProblem.this.verboseOutput == true
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[] contains no nulls and has only one value, of length 2
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[].getClass().getName() elements == cz.matfyz.sykora.planning.Action.class
cz.matfyz.sykora.planning.PlanningProblem.this.layers has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.layers[] == []
cz.matfyz.sykora.planning.PlanningProblem.this.layers[].getClass().getName() == []
cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled == false
arg1 has only one value
arg1.predicates has only one value
arg1.predicates[] contains no nulls and has only one value, of length 3
arg1.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
arg1.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[]) == 1
size(cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[]) == 2
size(arg1.predicates[]) == 3
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem$BiLayer.BiLayer(cz.matfyz.sykora.planning.PlanningProblem, cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT
this.predicates.isMutexHelperPair.first == this.predicates.isMutexHelperPair.second
cz.matfyz.sykora.planning.PlanningProblem.this == orig(cz.matfyz.sykora.planning.PlanningProblem.this)
cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING == orig(cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING)
cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING.toString == orig(cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING.toString)
cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING == orig(cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING)
cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING.toString == orig(cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING.toString)
cz.matfyz.sykora.planning.PlanningProblem.this.goals == orig(cz.matfyz.sykora.planning.PlanningProblem.this.goals)
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates == orig(cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates)
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[] == orig(cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[])
cz.matfyz.sykora.planning.PlanningProblem.this.goalsFulfiled == orig(cz.matfyz.sykora.planning.PlanningProblem.this.goalsFulfiled)
cz.matfyz.sykora.planning.PlanningProblem.this.fixedPoint == orig(cz.matfyz.sykora.planning.PlanningProblem.this.fixedPoint)
cz.matfyz.sykora.planning.PlanningProblem.this.verboseOutput == orig(cz.matfyz.sykora.planning.PlanningProblem.this.verboseOutput)
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions == orig(cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions)
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[] == orig(cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[])
cz.matfyz.sykora.planning.PlanningProblem.this.layers == orig(cz.matfyz.sykora.planning.PlanningProblem.this.layers)
cz.matfyz.sykora.planning.PlanningProblem.this.layers[] == orig(cz.matfyz.sykora.planning.PlanningProblem.this.layers[])
cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled == orig(cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled)
arg1.predicates == orig(arg1.predicates)
arg1.predicates[] == orig(arg1.predicates[])
this.actions == null
this.predicates has only one value
this.predicates.mutexes has only one value
this.predicates.isMutexHelperPair has only one value
this.predicates.isMutexHelperPair.first == null
this.predicates.predicates has only one value
this.predicates.predicates[] contains no nulls and has only one value, of length 3
this.predicates.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
this.support == null
cz.matfyz.sykora.planning.PlanningProblem.this.goalsFulfiled == false
cz.matfyz.sykora.planning.PlanningProblem.this.layers[] == []
cz.matfyz.sykora.planning.PlanningProblem.this.layers[].getClass().getName() == []
arg1.predicates has only one value
arg1.predicates[] contains no nulls and has only one value, of length 3
arg1.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
arg1.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(this.predicates.predicates[]) == 3
size(arg1.predicates[]) == 3
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem$BiLayer.getActions():::ENTER
this.predicates.isMutexHelperPair.first == this.predicates.isMutexHelperPair.second
this has only one value
this.actions has only one value
this.actions.actions has only one value
this.actions.actions[] contains no nulls and has only one value, of length 4
this.actions.actions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
this.actions.mutexes has only one value
this.actions.isMutexHelperPair has only one value
this.actions.isMutexHelperPair.first has only one value
this.predicates has only one value
this.predicates.mutexes has only one value
this.predicates.isMutexHelperPair has only one value
this.predicates.isMutexHelperPair.first has only one value
this.predicates.predicates has only one value
this.predicates.predicates[] contains no nulls and has only one value, of length 4
this.predicates.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
this.support has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.goalsFulfiled == true
cz.matfyz.sykora.planning.PlanningProblem.this.layers[] contains no nulls and has only one value, of length 3
cz.matfyz.sykora.planning.PlanningProblem.this.layers[].getClass().getName() == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer]
size(this.actions.actions[]) == 4
size(this.predicates.predicates[]) == 4
size(cz.matfyz.sykora.planning.PlanningProblem.this.layers[]) == 3
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem$BiLayer.getActions():::EXIT
this.actions == return
this.actions.actions == return.actions
this.actions.actions[] == orig(this.actions.actions[])
this.actions.mutexes == return.mutexes
this.actions.isMutexHelperPair == return.isMutexHelperPair
this.actions.isMutexHelperPair.first == return.isMutexHelperPair.first
this.actions.isMutexHelperPair.second == return.isMutexHelperPair.first
this.predicates == orig(this.predicates)
this.predicates.mutexes == orig(this.predicates.mutexes)
this.predicates.isMutexHelperPair == orig(this.predicates.isMutexHelperPair)
this.predicates.isMutexHelperPair.first == this.predicates.isMutexHelperPair.second
this.predicates.isMutexHelperPair.first == orig(this.predicates.isMutexHelperPair.first)
this.predicates.isMutexHelperPair.first == orig(this.predicates.isMutexHelperPair.second)
this.predicates.predicates == orig(this.predicates.predicates)
this.predicates.predicates[] == orig(this.predicates.predicates[])
this.support == orig(this.support)
this.support.getClass().getName() == orig(this.support.getClass().getName())
this.noGoods == orig(this.noGoods)
cz.matfyz.sykora.planning.PlanningProblem.this == orig(cz.matfyz.sykora.planning.PlanningProblem.this)
cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING == orig(cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING)
cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING.toString == orig(cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING.toString)
cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING == orig(cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING)
cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING.toString == orig(cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING.toString)
cz.matfyz.sykora.planning.PlanningProblem.this.goals == orig(cz.matfyz.sykora.planning.PlanningProblem.this.goals)
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates == orig(cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates)
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[] == orig(cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[])
cz.matfyz.sykora.planning.PlanningProblem.this.goalsFulfiled == orig(cz.matfyz.sykora.planning.PlanningProblem.this.goalsFulfiled)
cz.matfyz.sykora.planning.PlanningProblem.this.fixedPoint == orig(cz.matfyz.sykora.planning.PlanningProblem.this.fixedPoint)
cz.matfyz.sykora.planning.PlanningProblem.this.verboseOutput == orig(cz.matfyz.sykora.planning.PlanningProblem.this.verboseOutput)
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions == orig(cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions)
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[] == orig(cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[])
cz.matfyz.sykora.planning.PlanningProblem.this.layers == orig(cz.matfyz.sykora.planning.PlanningProblem.this.layers)
cz.matfyz.sykora.planning.PlanningProblem.this.layers[] == orig(cz.matfyz.sykora.planning.PlanningProblem.this.layers[])
cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled == orig(cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled)
return == orig(this.actions)
return.actions == orig(this.actions.actions)
return.mutexes == orig(this.actions.mutexes)
return.isMutexHelperPair == orig(this.actions.isMutexHelperPair)
return.isMutexHelperPair.first == return.isMutexHelperPair.second
return.isMutexHelperPair.first == orig(this.actions.isMutexHelperPair.first)
return.isMutexHelperPair.first == orig(this.actions.isMutexHelperPair.second)
this.actions.actions[] contains no nulls and has only one value, of length 4
this.actions.actions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
this.predicates has only one value
this.predicates.mutexes has only one value
this.predicates.isMutexHelperPair has only one value
this.predicates.isMutexHelperPair.first has only one value
this.predicates.predicates has only one value
this.predicates.predicates[] contains no nulls and has only one value, of length 4
this.predicates.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
this.support has only one value
cz.matfyz.sykora.planning.PlanningProblem.this.goalsFulfiled == true
cz.matfyz.sykora.planning.PlanningProblem.this.layers[] contains no nulls and has only one value, of length 3
cz.matfyz.sykora.planning.PlanningProblem.this.layers[].getClass().getName() == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer]
return has only one value
return.actions has only one value
return.actions[] contains no nulls and has only one value, of length 4
return.actions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
return.actions[].getClass().getName() elements == cz.matfyz.sykora.planning.Action.class
return.mutexes has only one value
return.isMutexHelperPair has only one value
return.isMutexHelperPair.first has only one value
size(this.actions.actions[]) == 4
size(this.predicates.predicates[]) == 4
size(cz.matfyz.sykora.planning.PlanningProblem.this.layers[]) == 3
size(return.actions[]) == 4
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem$BiLayer.getPredicates():::ENTER
size(cz.matfyz.sykora.planning.PlanningProblem.this.layers[]) one of { 1, 2, 3 }
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem$BiLayer.getPredicates():::EXIT
this.actions == orig(this.actions)
this.actions.actions == orig(this.actions.actions)
this.actions.actions[] == orig(this.actions.actions[])
this.actions.mutexes == orig(this.actions.mutexes)
this.actions.isMutexHelperPair == orig(this.actions.isMutexHelperPair)
this.actions.isMutexHelperPair.first == orig(this.actions.isMutexHelperPair.first)
this.actions.isMutexHelperPair.first == orig(this.actions.isMutexHelperPair.second)
this.predicates == return
this.predicates.mutexes == return.mutexes
this.predicates.isMutexHelperPair == return.isMutexHelperPair
this.predicates.isMutexHelperPair.first == return.isMutexHelperPair.first
this.predicates.isMutexHelperPair.second == return.isMutexHelperPair.second
this.predicates.predicates == return.predicates
this.predicates.predicates[] == orig(this.predicates.predicates[])
this.support == orig(this.support)
this.support.getClass().getName() == orig(this.support.getClass().getName())
this.noGoods == orig(this.noGoods)
cz.matfyz.sykora.planning.PlanningProblem.this == orig(cz.matfyz.sykora.planning.PlanningProblem.this)
cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING == orig(cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING)
cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING.toString == orig(cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING.toString)
cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING == orig(cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING)
cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING.toString == orig(cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING.toString)
cz.matfyz.sykora.planning.PlanningProblem.this.goals == orig(cz.matfyz.sykora.planning.PlanningProblem.this.goals)
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates == orig(cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates)
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[] == orig(cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[])
cz.matfyz.sykora.planning.PlanningProblem.this.goalsFulfiled == orig(cz.matfyz.sykora.planning.PlanningProblem.this.goalsFulfiled)
cz.matfyz.sykora.planning.PlanningProblem.this.fixedPoint == orig(cz.matfyz.sykora.planning.PlanningProblem.this.fixedPoint)
cz.matfyz.sykora.planning.PlanningProblem.this.verboseOutput == orig(cz.matfyz.sykora.planning.PlanningProblem.this.verboseOutput)
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions == orig(cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions)
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[] == orig(cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[])
cz.matfyz.sykora.planning.PlanningProblem.this.layers == orig(cz.matfyz.sykora.planning.PlanningProblem.this.layers)
cz.matfyz.sykora.planning.PlanningProblem.this.layers[] == orig(cz.matfyz.sykora.planning.PlanningProblem.this.layers[])
cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled == orig(cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled)
return == orig(this.predicates)
return.mutexes == orig(this.predicates.mutexes)
return.isMutexHelperPair == orig(this.predicates.isMutexHelperPair)
return.isMutexHelperPair.first == orig(this.predicates.isMutexHelperPair.first)
return.isMutexHelperPair.second == orig(this.predicates.isMutexHelperPair.second)
return.predicates == orig(this.predicates.predicates)
return.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(cz.matfyz.sykora.planning.PlanningProblem.this.layers[]) one of { 1, 2, 3 }
size(return.predicates[]) one of { 3, 4, 5 }
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem$BiLayer.getSupport():::ENTER
this.predicates.isMutexHelperPair.first == this.predicates.isMutexHelperPair.second
this.predicates.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
cz.matfyz.sykora.planning.PlanningProblem.this.goalsFulfiled == true
cz.matfyz.sykora.planning.PlanningProblem.this.layers[] contains no nulls and has only one value, of length 3
cz.matfyz.sykora.planning.PlanningProblem.this.layers[].getClass().getName() == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer]
size(this.predicates.predicates[]) one of { 4, 5 }
size(cz.matfyz.sykora.planning.PlanningProblem.this.layers[]) == 3
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem$BiLayer.getSupport():::EXIT
this.actions == orig(this.actions)
this.actions.actions == orig(this.actions.actions)
this.actions.actions[] == orig(this.actions.actions[])
this.actions.mutexes == orig(this.actions.mutexes)
this.actions.isMutexHelperPair == orig(this.actions.isMutexHelperPair)
this.actions.isMutexHelperPair.first == orig(this.actions.isMutexHelperPair.first)
this.actions.isMutexHelperPair.first == orig(this.actions.isMutexHelperPair.second)
this.predicates == orig(this.predicates)
this.predicates.mutexes == orig(this.predicates.mutexes)
this.predicates.isMutexHelperPair == orig(this.predicates.isMutexHelperPair)
this.predicates.isMutexHelperPair.first == this.predicates.isMutexHelperPair.second
this.predicates.isMutexHelperPair.first == orig(this.predicates.isMutexHelperPair.first)
this.predicates.isMutexHelperPair.first == orig(this.predicates.isMutexHelperPair.second)
this.predicates.predicates == orig(this.predicates.predicates)
this.predicates.predicates[] == orig(this.predicates.predicates[])
this.support == return
this.support.getClass().getName() == return.getClass().getName()
this.noGoods == orig(this.noGoods)
cz.matfyz.sykora.planning.PlanningProblem.this == orig(cz.matfyz.sykora.planning.PlanningProblem.this)
cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING == orig(cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING)
cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING.toString == orig(cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING.toString)
cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING == orig(cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING)
cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING.toString == orig(cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING.toString)
cz.matfyz.sykora.planning.PlanningProblem.this.goals == orig(cz.matfyz.sykora.planning.PlanningProblem.this.goals)
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates == orig(cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates)
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[] == orig(cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[])
cz.matfyz.sykora.planning.PlanningProblem.this.goalsFulfiled == orig(cz.matfyz.sykora.planning.PlanningProblem.this.goalsFulfiled)
cz.matfyz.sykora.planning.PlanningProblem.this.fixedPoint == orig(cz.matfyz.sykora.planning.PlanningProblem.this.fixedPoint)
cz.matfyz.sykora.planning.PlanningProblem.this.verboseOutput == orig(cz.matfyz.sykora.planning.PlanningProblem.this.verboseOutput)
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions == orig(cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions)
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[] == orig(cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[])
cz.matfyz.sykora.planning.PlanningProblem.this.layers == orig(cz.matfyz.sykora.planning.PlanningProblem.this.layers)
cz.matfyz.sykora.planning.PlanningProblem.this.layers[] == orig(cz.matfyz.sykora.planning.PlanningProblem.this.layers[])
cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled == orig(cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled)
return == orig(this.support)
return.getClass().getName() == orig(this.support.getClass().getName())
this.predicates.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
cz.matfyz.sykora.planning.PlanningProblem.this.goalsFulfiled == true
cz.matfyz.sykora.planning.PlanningProblem.this.layers[] contains no nulls and has only one value, of length 3
cz.matfyz.sykora.planning.PlanningProblem.this.layers[].getClass().getName() == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer]
return.getClass().getName() == java.util.TreeMap.class
size(this.predicates.predicates[]) one of { 4, 5 }
size(cz.matfyz.sykora.planning.PlanningProblem.this.layers[]) == 3
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem$BiLayer.isNoGood(cz.matfyz.sykora.planning.predicate.PredicateSet):::ENTER
this.predicates.isMutexHelperPair.first == this.predicates.isMutexHelperPair.second
this.predicates.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
cz.matfyz.sykora.planning.PlanningProblem.this.goalsFulfiled == true
cz.matfyz.sykora.planning.PlanningProblem.this.layers[] contains no nulls and has only one value, of length 3
cz.matfyz.sykora.planning.PlanningProblem.this.layers[].getClass().getName() == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer]
arg0.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
size(this.predicates.predicates[]) one of { 4, 5 }
size(cz.matfyz.sykora.planning.PlanningProblem.this.layers[]) == 3
size(arg0.predicates[]) one of { 1, 2 }
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem$BiLayer.isNoGood(cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT218
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem$BiLayer.isNoGood(cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT218;condition="not(return == true)"
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem$BiLayer.isNoGood(cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT
this.actions == orig(this.actions)
this.actions.actions == orig(this.actions.actions)
this.actions.actions[] == orig(this.actions.actions[])
this.actions.mutexes == orig(this.actions.mutexes)
this.actions.isMutexHelperPair == orig(this.actions.isMutexHelperPair)
this.actions.isMutexHelperPair.first == orig(this.actions.isMutexHelperPair.first)
this.actions.isMutexHelperPair.first == orig(this.actions.isMutexHelperPair.second)
this.predicates == orig(this.predicates)
this.predicates.mutexes == orig(this.predicates.mutexes)
this.predicates.isMutexHelperPair == orig(this.predicates.isMutexHelperPair)
this.predicates.isMutexHelperPair.first == this.predicates.isMutexHelperPair.second
this.predicates.isMutexHelperPair.first == orig(this.predicates.isMutexHelperPair.first)
this.predicates.isMutexHelperPair.first == orig(this.predicates.isMutexHelperPair.second)
this.predicates.predicates == orig(this.predicates.predicates)
this.predicates.predicates[] == orig(this.predicates.predicates[])
this.support == orig(this.support)
this.support.getClass().getName() == orig(this.support.getClass().getName())
this.noGoods == orig(this.noGoods)
cz.matfyz.sykora.planning.PlanningProblem.this == orig(cz.matfyz.sykora.planning.PlanningProblem.this)
cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING == orig(cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING)
cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING.toString == orig(cz.matfyz.sykora.planning.PlanningProblem.this.GOAL_STRING.toString)
cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING == orig(cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING)
cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING.toString == orig(cz.matfyz.sykora.planning.PlanningProblem.this.GOALS_STRING.toString)
cz.matfyz.sykora.planning.PlanningProblem.this.goals == orig(cz.matfyz.sykora.planning.PlanningProblem.this.goals)
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates == orig(cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates)
cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[] == orig(cz.matfyz.sykora.planning.PlanningProblem.this.goals.predicates[])
cz.matfyz.sykora.planning.PlanningProblem.this.goalsFulfiled == orig(cz.matfyz.sykora.planning.PlanningProblem.this.goalsFulfiled)
cz.matfyz.sykora.planning.PlanningProblem.this.fixedPoint == orig(cz.matfyz.sykora.planning.PlanningProblem.this.fixedPoint)
cz.matfyz.sykora.planning.PlanningProblem.this.verboseOutput == orig(cz.matfyz.sykora.planning.PlanningProblem.this.verboseOutput)
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions == orig(cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions)
cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[] == orig(cz.matfyz.sykora.planning.PlanningProblem.this.possibleActions[])
cz.matfyz.sykora.planning.PlanningProblem.this.layers == orig(cz.matfyz.sykora.planning.PlanningProblem.this.layers)
cz.matfyz.sykora.planning.PlanningProblem.this.layers[] == orig(cz.matfyz.sykora.planning.PlanningProblem.this.layers[])
cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled == orig(cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled)
arg0.predicates == orig(arg0.predicates)
arg0.predicates[] == orig(arg0.predicates[])
this.predicates.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
cz.matfyz.sykora.planning.PlanningProblem.this.goalsFulfiled == true
cz.matfyz.sykora.planning.PlanningProblem.this.layers[] contains no nulls and has only one value, of length 3
cz.matfyz.sykora.planning.PlanningProblem.this.layers[].getClass().getName() == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer]
arg0.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
return == false
size(this.predicates.predicates[]) one of { 4, 5 }
size(cz.matfyz.sykora.planning.PlanningProblem.this.layers[]) == 3
size(arg0.predicates[]) one of { 1, 2 }
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem$BiLayer.isNoGood(cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT;condition="not(return == true)"
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem:::OBJECT
this has only one value
this.GOAL_STRING has only one value
this.GOAL_STRING != null
this.GOAL_STRING.toString == "goal"
this.GOALS_STRING has only one value
this.GOALS_STRING != null
this.GOALS_STRING.toString == "goals"
this.goals.predicates has only one value
this.goals.predicates != null
this.goals.predicates[] elements has only one value
this.goals.predicates[] elements != null
this.goals.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
this.goals.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
this.fixedPoint == null
cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled == false
this.verboseOutput == true
this.possibleActions[] elements != null
this.possibleActions[].getClass().getName() elements == cz.matfyz.sykora.planning.Action.class
this.possibleActions[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action] }
this.layers[] elements != null
this.layers[].getClass().getName() elements == cz.matfyz.sykora.planning.PlanningProblem.BiLayer.class
size(this.goals.predicates[]) one of { 0, 1 }
size(this.possibleActions[]) one of { 0, 2 }
size(this.possibleActions[])-1 != 0
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.PlanningProblem(boolean):::ENTER
arg0 == true
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.PlanningProblem(boolean):::EXIT
this.verboseOutput == orig(arg0)
this.goals has only one value
this.goals.predicates[] == []
this.goals.predicates[].getClass().getName() == []
this.goalsFulfiled == false
this.possibleActions has only one value
this.possibleActions[] == []
this.possibleActions[].getClass().getName() == []
this.layers has only one value
this.layers[] == []
this.layers[].getClass().getName() == []
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.buildNextLayer():::ENTER
this.goals has only one value
this.goals.predicates[] contains no nulls and has only one value, of length 1
this.goals.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
this.goalsFulfiled == false
this.possibleActions has only one value
this.possibleActions[] contains no nulls and has only one value, of length 2
this.possibleActions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
this.layers has only one value
this.layers[].getClass().getName() one of { [cz.matfyz.sykora.planning.PlanningProblem.BiLayer], [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer] }
size(this.goals.predicates[]) == 1
size(this.possibleActions[]) == 2
size(this.layers[]) one of { 1, 2 }
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.buildNextLayer():::EXIT
this.GOAL_STRING == orig(this.GOAL_STRING)
this.GOAL_STRING.toString == orig(this.GOAL_STRING.toString)
this.GOALS_STRING == orig(this.GOALS_STRING)
this.GOALS_STRING.toString == orig(this.GOALS_STRING.toString)
this.goals == orig(this.goals)
this.goals.predicates == orig(this.goals.predicates)
this.goals.predicates[] == orig(this.goals.predicates[])
this.goalsFulfiled == orig(this.goalsFulfiled)
this.fixedPoint == orig(this.fixedPoint)
cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled == orig(cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled)
this.verboseOutput == orig(this.verboseOutput)
this.possibleActions == orig(this.possibleActions)
this.possibleActions[] == orig(this.possibleActions[])
this.layers == orig(this.layers)
this.layers[] == orig(this.layers[])
this.goals has only one value
this.goals.predicates[] contains no nulls and has only one value, of length 1
this.goals.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
this.goalsFulfiled == false
this.possibleActions has only one value
this.possibleActions[] contains no nulls and has only one value, of length 2
this.possibleActions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
this.layers has only one value
this.layers[].getClass().getName() one of { [cz.matfyz.sykora.planning.PlanningProblem.BiLayer], [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer] }
return.actions.actions[].getClass().getName() elements == cz.matfyz.sykora.planning.Action.class
return.actions.actions[].getClass().getName() one of { [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action], [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action] }
return.predicates.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
return.predicates.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
return.support.getClass().getName() == java.util.TreeMap.class
return.noGoods == null
size(this.goals.predicates[]) == 1
size(this.possibleActions[]) == 2
size(this.layers[]) one of { 1, 2 }
size(return.actions.actions[]) one of { 4, 7 }
size(return.predicates.predicates[]) one of { 4, 5 }
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.findPredicateAction(cz.matfyz.sykora.planning.PlanningProblem$BiLayer, cz.matfyz.sykora.planning.predicate.PredicateSet, int, java.util.Set, cz.matfyz.sykora.planning.ActionList, int):::ENTER
this.goals has only one value
this.goals.predicates[] contains no nulls and has only one value, of length 1
this.goals.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
this.goalsFulfiled == true
this.possibleActions has only one value
this.possibleActions[] contains no nulls and has only one value, of length 2
this.possibleActions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
this.layers has only one value
this.layers[] contains no nulls and has only one value, of length 3
this.layers[].getClass().getName() == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer]
arg0.actions.actions[].getClass().getName() elements == cz.matfyz.sykora.planning.Action.class
arg0.actions.actions[].getClass().getName() one of { [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action], [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action] }
arg0.predicates.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.predicates.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.support.getClass().getName() == java.util.TreeMap.class
arg0.noGoods == null
arg1.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg2 one of { 0, 1, 2 }
arg3.getClass().getName() == java.util.TreeSet.class
arg5 one of { 1, 2 }
size(this.goals.predicates[]) == 1
size(this.possibleActions[]) == 2
size(this.layers[]) == 3
size(arg0.actions.actions[]) one of { 4, 7 }
size(arg0.predicates.predicates[]) one of { 4, 5 }
size(arg1.predicates[]) one of { 1, 2 }
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.findPredicateAction(cz.matfyz.sykora.planning.PlanningProblem$BiLayer, cz.matfyz.sykora.planning.predicate.PredicateSet, int, java.util.Set, cz.matfyz.sykora.planning.ActionList, int):::EXIT327
return == orig(arg4)
arg0.actions has only one value
arg0.actions.actions has only one value
arg0.actions.actions[] contains no nulls and has only one value, of length 4
arg0.actions.actions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
arg0.actions.mutexes has only one value
arg0.actions.isMutexHelperPair has only one value
arg0.predicates has only one value
arg0.predicates.mutexes has only one value
arg0.predicates.isMutexHelperPair has only one value
arg0.predicates.predicates has only one value
arg0.predicates.predicates[] contains no nulls and has only one value, of length 4
arg0.predicates.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
arg0.support has only one value
arg1.predicates has only one value
arg1.predicates[] contains no nulls and has only one value, of length 2
arg1.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
orig(arg0) has only one value
orig(arg1) has only one value
orig(arg2) == 2
orig(arg3) has only one value
orig(arg5) == 1
size(arg0.actions.actions[]) == 4
size(arg0.predicates.predicates[]) == 4
size(arg1.predicates[]) == 2
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.findPredicateAction(cz.matfyz.sykora.planning.PlanningProblem$BiLayer, cz.matfyz.sykora.planning.predicate.PredicateSet, int, java.util.Set, cz.matfyz.sykora.planning.ActionList, int):::EXIT334
this.goals == orig(arg1)
this.goals.predicates == arg1.predicates
arg1.predicates == orig(this.goals.predicates)
arg0.actions has only one value
arg0.actions.actions has only one value
arg0.actions.actions[] contains no nulls and has only one value, of length 7
arg0.actions.actions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
arg0.actions.mutexes has only one value
arg0.actions.isMutexHelperPair has only one value
arg0.predicates has only one value
arg0.predicates.mutexes has only one value
arg0.predicates.isMutexHelperPair has only one value
arg0.predicates.predicates has only one value
arg0.predicates.predicates[] contains no nulls and has only one value, of length 5
arg0.predicates.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
arg0.support has only one value
arg1.predicates has only one value
arg1.predicates[] contains no nulls and has only one value, of length 1
arg1.predicates[] elements has only one value
arg1.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
orig(arg0) has only one value
orig(arg2) == 1
orig(arg3) has only one value
orig(arg4) has only one value
orig(arg5) == 2
size(arg0.actions.actions[]) == 7
size(arg0.predicates.predicates[]) == 5
size(arg1.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.findPredicateAction(cz.matfyz.sykora.planning.PlanningProblem$BiLayer, cz.matfyz.sykora.planning.predicate.PredicateSet, int, java.util.Set, cz.matfyz.sykora.planning.ActionList, int):::EXIT358
orig(arg2) one of { 0, 1 }
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.findPredicateAction(cz.matfyz.sykora.planning.PlanningProblem$BiLayer, cz.matfyz.sykora.planning.predicate.PredicateSet, int, java.util.Set, cz.matfyz.sykora.planning.ActionList, int):::EXIT
this.GOAL_STRING == orig(this.GOAL_STRING)
this.GOAL_STRING.toString == orig(this.GOAL_STRING.toString)
this.GOALS_STRING == orig(this.GOALS_STRING)
this.GOALS_STRING.toString == orig(this.GOALS_STRING.toString)
this.goals == orig(this.goals)
this.goals.predicates == orig(this.goals.predicates)
this.goals.predicates[] == orig(this.goals.predicates[])
this.goalsFulfiled == orig(this.goalsFulfiled)
this.fixedPoint == orig(this.fixedPoint)
cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled == orig(cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled)
this.verboseOutput == orig(this.verboseOutput)
this.possibleActions == orig(this.possibleActions)
this.possibleActions[] == orig(this.possibleActions[])
this.layers == orig(this.layers)
this.layers[] == orig(this.layers[])
arg0.actions == orig(arg0.actions)
arg0.actions.actions == orig(arg0.actions.actions)
arg0.actions.actions[] == orig(arg0.actions.actions[])
arg0.actions.mutexes == orig(arg0.actions.mutexes)
arg0.actions.isMutexHelperPair == orig(arg0.actions.isMutexHelperPair)
arg0.predicates == orig(arg0.predicates)
arg0.predicates.mutexes == orig(arg0.predicates.mutexes)
arg0.predicates.isMutexHelperPair == orig(arg0.predicates.isMutexHelperPair)
arg0.predicates.predicates == orig(arg0.predicates.predicates)
arg0.predicates.predicates[] == orig(arg0.predicates.predicates[])
arg0.support == orig(arg0.support)
arg0.support.getClass().getName() == orig(arg0.support.getClass().getName())
arg0.noGoods == orig(arg0.noGoods)
arg1.predicates == orig(arg1.predicates)
arg1.predicates[] == orig(arg1.predicates[])
this.goals has only one value
this.goals.predicates[] contains no nulls and has only one value, of length 1
this.goals.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
this.goalsFulfiled == true
this.possibleActions has only one value
this.possibleActions[] contains no nulls and has only one value, of length 2
this.possibleActions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
this.layers has only one value
this.layers[] contains no nulls and has only one value, of length 3
this.layers[].getClass().getName() == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer]
arg0.actions.actions[].getClass().getName() elements == cz.matfyz.sykora.planning.Action.class
arg0.actions.actions[].getClass().getName() one of { [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action], [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action] }
arg0.predicates.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.predicates.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.support.getClass().getName() == java.util.TreeMap.class
arg0.noGoods == null
arg1.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
return has only one value
size(this.goals.predicates[]) == 1
size(this.possibleActions[]) == 2
size(this.layers[]) == 3
size(arg0.actions.actions[]) one of { 4, 7 }
size(arg0.predicates.predicates[]) one of { 4, 5 }
size(arg1.predicates[]) one of { 1, 2 }
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.findSerialPlan():::ENTER
this.goals has only one value
this.goals.predicates[] contains no nulls and has only one value, of length 1
this.goals.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
this.goalsFulfiled == true
this.possibleActions has only one value
this.possibleActions[] contains no nulls and has only one value, of length 2
this.possibleActions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
this.layers has only one value
this.layers[] contains no nulls and has only one value, of length 3
this.layers[].getClass().getName() == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer]
size(this.goals.predicates[]) == 1
size(this.possibleActions[]) == 2
size(this.layers[]) == 3
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.findSerialPlan():::EXIT292
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.findSerialPlan():::EXIT
this.GOAL_STRING == orig(this.GOAL_STRING)
this.GOAL_STRING.toString == orig(this.GOAL_STRING.toString)
this.GOALS_STRING == orig(this.GOALS_STRING)
this.GOALS_STRING.toString == orig(this.GOALS_STRING.toString)
this.goals == orig(this.goals)
this.goals.predicates == orig(this.goals.predicates)
this.goals.predicates[] == orig(this.goals.predicates[])
this.goalsFulfiled == orig(this.goalsFulfiled)
this.fixedPoint == orig(this.fixedPoint)
cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled == orig(cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled)
this.verboseOutput == orig(this.verboseOutput)
this.possibleActions == orig(this.possibleActions)
this.possibleActions[] == orig(this.possibleActions[])
this.layers == orig(this.layers)
this.layers[] == orig(this.layers[])
this.goals has only one value
this.goals.predicates[] contains no nulls and has only one value, of length 1
this.goals.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
this.goalsFulfiled == true
this.possibleActions has only one value
this.possibleActions[] contains no nulls and has only one value, of length 2
this.possibleActions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
this.layers has only one value
this.layers[] contains no nulls and has only one value, of length 3
this.layers[].getClass().getName() == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer]
return has only one value
size(this.goals.predicates[]) == 1
size(this.possibleActions[]) == 2
size(this.layers[]) == 3
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.findSerialPlanActions(int, cz.matfyz.sykora.planning.predicate.PredicateSet):::ENTER
this.goals has only one value
this.goals.predicates[] contains no nulls and has only one value, of length 1
this.goals.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
this.goalsFulfiled == true
this.possibleActions has only one value
this.possibleActions[] contains no nulls and has only one value, of length 2
this.possibleActions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
this.layers has only one value
this.layers[] contains no nulls and has only one value, of length 3
this.layers[].getClass().getName() == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer]
arg0 one of { 1, 2 }
arg1.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
size(this.goals.predicates[]) == 1
size(this.possibleActions[]) == 2
size(this.layers[]) == 3
size(arg1.predicates[]) one of { 1, 2 }
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.findSerialPlanActions(int, cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT397
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.findSerialPlanActions(int, cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT
this.GOAL_STRING == orig(this.GOAL_STRING)
this.GOAL_STRING.toString == orig(this.GOAL_STRING.toString)
this.GOALS_STRING == orig(this.GOALS_STRING)
this.GOALS_STRING.toString == orig(this.GOALS_STRING.toString)
this.goals == orig(this.goals)
this.goals.predicates == orig(this.goals.predicates)
this.goals.predicates[] == orig(this.goals.predicates[])
this.goalsFulfiled == orig(this.goalsFulfiled)
this.fixedPoint == orig(this.fixedPoint)
cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled == orig(cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled)
this.verboseOutput == orig(this.verboseOutput)
this.possibleActions == orig(this.possibleActions)
this.possibleActions[] == orig(this.possibleActions[])
this.layers == orig(this.layers)
this.layers[] == orig(this.layers[])
arg1.predicates == orig(arg1.predicates)
arg1.predicates[] == orig(arg1.predicates[])
this.goals has only one value
this.goals.predicates[] contains no nulls and has only one value, of length 1
this.goals.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
this.goalsFulfiled == true
this.possibleActions has only one value
this.possibleActions[] contains no nulls and has only one value, of length 2
this.possibleActions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
this.layers has only one value
this.layers[] contains no nulls and has only one value, of length 3
this.layers[].getClass().getName() == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer]
arg1.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
return has only one value
size(this.goals.predicates[]) == 1
size(this.possibleActions[]) == 2
size(this.layers[]) == 3
size(arg1.predicates[]) one of { 1, 2 }
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.getLastLayers():::ENTER
this.goals has only one value
this.goals.predicates[] contains no nulls and has only one value, of length 1
this.goals.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
this.goalsFulfiled == false
this.possibleActions has only one value
this.possibleActions[] contains no nulls and has only one value, of length 2
this.possibleActions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
this.layers has only one value
size(this.goals.predicates[]) == 1
size(this.possibleActions[]) == 2
size(this.layers[]) one of { 1, 2, 3 }
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.getLastLayers():::EXIT
this.GOAL_STRING == orig(this.GOAL_STRING)
this.GOAL_STRING.toString == orig(this.GOAL_STRING.toString)
this.GOALS_STRING == orig(this.GOALS_STRING)
this.GOALS_STRING.toString == orig(this.GOALS_STRING.toString)
this.goals == orig(this.goals)
this.goals.predicates == orig(this.goals.predicates)
this.goals.predicates[] == orig(this.goals.predicates[])
this.goalsFulfiled == orig(this.goalsFulfiled)
this.fixedPoint == orig(this.fixedPoint)
cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled == orig(cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled)
this.verboseOutput == orig(this.verboseOutput)
this.possibleActions == orig(this.possibleActions)
this.possibleActions[] == orig(this.possibleActions[])
this.layers == orig(this.layers)
this.layers[] == orig(this.layers[])
this.goals has only one value
this.goals.predicates[] contains no nulls and has only one value, of length 1
this.goals.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
this.goalsFulfiled == false
this.possibleActions has only one value
this.possibleActions[] contains no nulls and has only one value, of length 2
this.possibleActions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
this.layers has only one value
return.actions.actions[].getClass().getName() elements == cz.matfyz.sykora.planning.Action.class
return.actions.actions[].getClass().getName() one of { [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action], [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action] }
return.predicates.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
return.support.getClass().getName() == java.util.TreeMap.class
return.noGoods == null
size(this.goals.predicates[]) == 1
size(this.possibleActions[]) == 2
size(this.layers[]) one of { 1, 2, 3 }
size(return.actions.actions[]) one of { 4, 7 }
size(return.predicates.predicates[]) one of { 3, 4, 5 }
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.getLastPredicateLayer():::ENTER
this.goals has only one value
this.goals.predicates[] contains no nulls and has only one value, of length 1
this.goals.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
this.goalsFulfiled == false
this.possibleActions has only one value
this.possibleActions[] contains no nulls and has only one value, of length 2
this.possibleActions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
this.layers has only one value
size(this.goals.predicates[]) == 1
size(this.possibleActions[]) == 2
size(this.layers[]) one of { 1, 2, 3 }
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.getLastPredicateLayer():::EXIT
this.GOAL_STRING == orig(this.GOAL_STRING)
this.GOAL_STRING.toString == orig(this.GOAL_STRING.toString)
this.GOALS_STRING == orig(this.GOALS_STRING)
this.GOALS_STRING.toString == orig(this.GOALS_STRING.toString)
this.goals == orig(this.goals)
this.goals.predicates == orig(this.goals.predicates)
this.goals.predicates[] == orig(this.goals.predicates[])
this.goalsFulfiled == orig(this.goalsFulfiled)
this.fixedPoint == orig(this.fixedPoint)
cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled == orig(cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled)
this.verboseOutput == orig(this.verboseOutput)
this.possibleActions == orig(this.possibleActions)
this.possibleActions[] == orig(this.possibleActions[])
this.layers == orig(this.layers)
this.layers[] == orig(this.layers[])
this.goals has only one value
this.goals.predicates[] contains no nulls and has only one value, of length 1
this.goals.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
this.goalsFulfiled == false
this.possibleActions has only one value
this.possibleActions[] contains no nulls and has only one value, of length 2
this.possibleActions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
this.layers has only one value
return.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(this.goals.predicates[]) == 1
size(this.possibleActions[]) == 2
size(this.layers[]) one of { 1, 2, 3 }
size(return.predicates[]) one of { 3, 4, 5 }
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.initialize():::ENTER
this.goals == null
this.goalsFulfiled == false
this.possibleActions == null
this.layers == null
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.initialize():::EXIT
this.GOAL_STRING == orig(this.GOAL_STRING)
this.GOAL_STRING.toString == orig(this.GOAL_STRING.toString)
this.GOALS_STRING == orig(this.GOALS_STRING)
this.GOALS_STRING.toString == orig(this.GOALS_STRING.toString)
this.goalsFulfiled == orig(this.goalsFulfiled)
this.fixedPoint == orig(this.fixedPoint)
cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled == orig(cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled)
this.verboseOutput == orig(this.verboseOutput)
this.goals has only one value
this.goals.predicates[] == []
this.goals.predicates[].getClass().getName() == []
this.goalsFulfiled == false
this.possibleActions has only one value
this.possibleActions[] == []
this.possibleActions[].getClass().getName() == []
this.layers has only one value
this.layers[] == []
this.layers[].getClass().getName() == []
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.initialize(java.lang.Iterable, cz.matfyz.sykora.planning.predicate.PredicateSet, cz.matfyz.sykora.planning.predicate.PredicateSet):::ENTER
this.goals has only one value
this.goals.predicates[] == []
this.goals.predicates[].getClass().getName() == []
this.goalsFulfiled == false
this.possibleActions has only one value
this.possibleActions[] == []
this.possibleActions[].getClass().getName() == []
this.layers has only one value
this.layers[] == []
this.layers[].getClass().getName() == []
arg0 has only one value
arg0.getClass().getName() == cz.matfyz.sykora.planning.ActionList.class
arg1 has only one value
arg1.predicates has only one value
arg1.predicates[] contains no nulls and has only one value, of length 3
arg1.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
arg1.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg2 has only one value
arg2.predicates has only one value
arg2.predicates[] contains no nulls and has only one value, of length 1
arg2.predicates[] elements has only one value
arg2.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg2.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(arg1.predicates[]) == 3
size(arg2.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.initialize(java.lang.Iterable, cz.matfyz.sykora.planning.predicate.PredicateSet, cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT
this.GOAL_STRING == orig(this.GOAL_STRING)
this.GOAL_STRING.toString == orig(this.GOAL_STRING.toString)
this.GOALS_STRING == orig(this.GOALS_STRING)
this.GOALS_STRING.toString == orig(this.GOALS_STRING.toString)
this.goals == orig(this.goals)
this.goals.predicates == orig(this.goals.predicates)
this.goalsFulfiled == orig(this.goalsFulfiled)
this.fixedPoint == orig(this.fixedPoint)
cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled == orig(cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled)
this.verboseOutput == orig(this.verboseOutput)
this.possibleActions == orig(this.possibleActions)
this.layers == orig(this.layers)
arg1.predicates == orig(arg1.predicates)
arg1.predicates[] == orig(arg1.predicates[])
arg2.predicates == orig(arg2.predicates)
arg2.predicates[] == orig(arg2.predicates[])
size(this.goals.predicates[])-1 == orig(size(this.goals.predicates[]))
size(this.layers[])-1 == orig(size(this.layers[]))
this.goals has only one value
this.goals.predicates[] contains no nulls and has only one value, of length 1
this.goals.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
this.goalsFulfiled == false
this.possibleActions has only one value
this.possibleActions[] contains no nulls and has only one value, of length 2
this.possibleActions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
this.layers has only one value
this.layers[] contains no nulls and has only one value, of length 1
this.layers[] elements has only one value
this.layers[].getClass().getName() == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer]
arg1.predicates has only one value
arg1.predicates[] contains no nulls and has only one value, of length 3
arg1.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
arg1.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg2.predicates has only one value
arg2.predicates[] contains no nulls and has only one value, of length 1
arg2.predicates[] elements has only one value
arg2.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg2.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(this.goals.predicates[]) == 1
size(this.possibleActions[]) == 2
size(this.layers[]) == 1
size(arg1.predicates[]) == 3
size(arg2.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.isGoalsFulfilled():::ENTER
this.goals has only one value
this.goals.predicates[] contains no nulls and has only one value, of length 1
this.goals.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
this.possibleActions has only one value
this.possibleActions[] contains no nulls and has only one value, of length 2
this.possibleActions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
this.layers has only one value
this.layers[].getClass().getName() one of { [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer], [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer] }
size(this.goals.predicates[]) == 1
size(this.possibleActions[]) == 2
size(this.layers[]) one of { 2, 3 }
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.isGoalsFulfilled():::EXIT
this.GOAL_STRING == orig(this.GOAL_STRING)
this.GOAL_STRING.toString == orig(this.GOAL_STRING.toString)
this.GOALS_STRING == orig(this.GOALS_STRING)
this.GOALS_STRING.toString == orig(this.GOALS_STRING.toString)
this.goals == orig(this.goals)
this.goals.predicates == orig(this.goals.predicates)
this.goals.predicates[] == orig(this.goals.predicates[])
this.goalsFulfiled == return
this.fixedPoint == orig(this.fixedPoint)
cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled == orig(cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled)
this.verboseOutput == orig(this.verboseOutput)
this.possibleActions == orig(this.possibleActions)
this.possibleActions[] == orig(this.possibleActions[])
this.layers == orig(this.layers)
this.layers[] == orig(this.layers[])
return == orig(this.goalsFulfiled)
(this.layers[] contains no nulls and has only one value, of length 2)  <==>  (return == false)
(this.layers[] contains no nulls and has only one value, of length 2)  <==>  (size(this.layers[]) == 2)
(this.layers[] contains no nulls and has only one value, of length 2)  <==>  (this.layers[].getClass().getName() == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer])
(this.layers[] contains no nulls and has only one value, of length 3)  <==>  (return == true)
(this.layers[] contains no nulls and has only one value, of length 3)  <==>  (size(this.layers[]) == 3)
(this.layers[] contains no nulls and has only one value, of length 3)  <==>  (this.layers[].getClass().getName() == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer])
this.goals has only one value
this.goals.predicates[] contains no nulls and has only one value, of length 1
this.goals.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
this.possibleActions has only one value
this.possibleActions[] contains no nulls and has only one value, of length 2
this.possibleActions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
this.layers has only one value
this.layers[].getClass().getName() one of { [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer], [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer] }
size(this.goals.predicates[]) == 1
size(this.possibleActions[]) == 2
size(this.layers[]) one of { 2, 3 }
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.isGoalsFulfilled():::EXIT;condition="return == true"
this.layers[] contains no nulls and has only one value, of length 3
this.layers[].getClass().getName() == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer]
return == true
size(this.layers[]) == 3
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.isGoalsFulfilled():::EXIT;condition="not(return == true)"
this.layers[] contains no nulls and has only one value, of length 2
this.layers[].getClass().getName() == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer]
return == false
size(this.layers[]) == 2
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.singleStep():::ENTER
this.goals has only one value
this.goals.predicates[] contains no nulls and has only one value, of length 1
this.goals.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
this.goalsFulfiled == false
this.possibleActions has only one value
this.possibleActions[] contains no nulls and has only one value, of length 2
this.possibleActions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
this.layers has only one value
this.layers[].getClass().getName() one of { [cz.matfyz.sykora.planning.PlanningProblem.BiLayer], [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer] }
size(this.goals.predicates[]) == 1
size(this.possibleActions[]) == 2
size(this.layers[]) one of { 1, 2 }
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.singleStep():::EXIT594
this.goalsFulfiled == true
this.layers[] contains no nulls and has only one value, of length 3
this.layers[].getClass().getName() == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer]
orig(this.layers[]) contains no nulls and has only one value, of length 2
orig(this.layers[].getClass().getName()) == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer]
size(this.layers[]) == 3
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.singleStep():::EXIT594;condition="return == true"
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.singleStep():::EXIT598
this.goalsFulfiled == orig(this.goalsFulfiled)
this.goalsFulfiled == false
this.layers[] contains no nulls and has only one value, of length 2
this.layers[].getClass().getName() == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer]
orig(this.layers[]) contains no nulls and has only one value, of length 1
orig(this.layers[]) elements has only one value
orig(this.layers[].getClass().getName()) == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer]
size(this.layers[]) == 2
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.singleStep():::EXIT598;condition="return == true"
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.singleStep():::EXIT
this.GOAL_STRING == orig(this.GOAL_STRING)
this.GOAL_STRING.toString == orig(this.GOAL_STRING.toString)
this.GOALS_STRING == orig(this.GOALS_STRING)
this.GOALS_STRING.toString == orig(this.GOALS_STRING.toString)
this.goals == orig(this.goals)
this.goals.predicates == orig(this.goals.predicates)
this.goals.predicates[] == orig(this.goals.predicates[])
this.fixedPoint == orig(this.fixedPoint)
cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled == orig(cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled)
this.verboseOutput == orig(this.verboseOutput)
this.possibleActions == orig(this.possibleActions)
this.possibleActions[] == orig(this.possibleActions[])
this.layers == orig(this.layers)
size(this.layers[])-1 == orig(size(this.layers[]))
this.goals has only one value
this.goals.predicates[] contains no nulls and has only one value, of length 1
this.goals.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
this.possibleActions has only one value
this.possibleActions[] contains no nulls and has only one value, of length 2
this.possibleActions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
this.layers has only one value
this.layers[].getClass().getName() one of { [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer], [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer] }
return == true
size(this.goals.predicates[]) == 1
size(this.possibleActions[]) == 2
size(this.layers[]) one of { 2, 3 }
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.singleStep():::EXIT;condition="return == true"
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.verifyGoals():::ENTER
this.goals has only one value
this.goals.predicates[] contains no nulls and has only one value, of length 1
this.goals.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
this.goalsFulfiled == false
this.possibleActions has only one value
this.possibleActions[] contains no nulls and has only one value, of length 2
this.possibleActions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
this.layers has only one value
this.layers[].getClass().getName() one of { [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer], [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer] }
size(this.goals.predicates[]) == 1
size(this.possibleActions[]) == 2
size(this.layers[]) one of { 2, 3 }
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.verifyGoals():::EXIT
this.GOAL_STRING == orig(this.GOAL_STRING)
this.GOAL_STRING.toString == orig(this.GOAL_STRING.toString)
this.GOALS_STRING == orig(this.GOALS_STRING)
this.GOALS_STRING.toString == orig(this.GOALS_STRING.toString)
this.goals == orig(this.goals)
this.goals.predicates == orig(this.goals.predicates)
this.goals.predicates[] == orig(this.goals.predicates[])
this.goalsFulfiled == orig(this.goalsFulfiled)
this.fixedPoint == orig(this.fixedPoint)
cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled == orig(cz.matfyz.sykora.planning.PlanningProblem.$assertionsDisabled)
this.verboseOutput == orig(this.verboseOutput)
this.possibleActions == orig(this.possibleActions)
this.possibleActions[] == orig(this.possibleActions[])
this.layers == orig(this.layers)
this.layers[] == orig(this.layers[])
(this.layers[] contains no nulls and has only one value, of length 2)  <==>  (return == false)
(this.layers[] contains no nulls and has only one value, of length 2)  <==>  (size(this.layers[]) == 2)
(this.layers[] contains no nulls and has only one value, of length 2)  <==>  (this.layers[].getClass().getName() == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer])
(this.layers[] contains no nulls and has only one value, of length 3)  <==>  (return == true)
(this.layers[] contains no nulls and has only one value, of length 3)  <==>  (size(this.layers[]) == 3)
(this.layers[] contains no nulls and has only one value, of length 3)  <==>  (this.layers[].getClass().getName() == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer])
this.goals has only one value
this.goals.predicates[] contains no nulls and has only one value, of length 1
this.goals.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
this.goalsFulfiled == false
this.possibleActions has only one value
this.possibleActions[] contains no nulls and has only one value, of length 2
this.possibleActions[].getClass().getName() == [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action]
this.layers has only one value
this.layers[].getClass().getName() one of { [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer], [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer] }
size(this.goals.predicates[]) == 1
size(this.possibleActions[]) == 2
size(this.layers[]) one of { 2, 3 }
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.verifyGoals():::EXIT;condition="return == true"
this.layers[] contains no nulls and has only one value, of length 3
this.layers[].getClass().getName() == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer]
return == true
size(this.layers[]) == 3
===========================================================================
cz.matfyz.sykora.planning.PlanningProblem.verifyGoals():::EXIT;condition="not(return == true)"
this.layers[] contains no nulls and has only one value, of length 2
this.layers[].getClass().getName() == [cz.matfyz.sykora.planning.PlanningProblem.BiLayer, cz.matfyz.sykora.planning.PlanningProblem.BiLayer]
return == false
size(this.layers[]) == 2
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer$ActionPair:::OBJECT
this.first.actionName != null
this.first.actionName.toString one of { "kup", "no-op", "prodej" }
this.first.preconditions != null
this.first.preconditions.predicates != null
this.first.preconditions.predicates[] elements != null
this.first.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
this.first.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
this.first.preconditionsFulfillers == null
this.first.negativeEffects != null
this.first.negativeEffects.predicates != null
this.first.negativeEffects.predicates[] elements != null
this.first.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
this.first.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
this.first.positiveEffects != null
this.first.positiveEffects.predicates != null
this.first.positiveEffects.predicates[] elements != null
this.first.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
this.first.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
cz.matfyz.sykora.planning.Action.$assertionsDisabled == false
this.second.actionName != null
this.second.actionName.toString one of { "kup", "no-op", "prodej" }
this.second.preconditions != null
this.second.preconditions.predicates != null
this.second.preconditions.predicates[] elements != null
this.second.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
this.second.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
this.second.preconditionsFulfillers == null
this.second.negativeEffects != null
this.second.negativeEffects.predicates != null
this.second.negativeEffects.predicates[] elements != null
this.second.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
this.second.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
this.second.positiveEffects != null
this.second.positiveEffects.predicates != null
this.second.positiveEffects.predicates[] elements != null
this.second.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
this.second.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(this.first.preconditions.predicates[]) one of { 1, 2 }
size(this.first.negativeEffects.predicates[]) one of { 0, 1 }
size(this.first.positiveEffects.predicates[]) == 1
size(this.second.preconditions.predicates[]) one of { 1, 2 }
size(this.second.negativeEffects.predicates[]) one of { 0, 1 }
size(this.second.positiveEffects.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer$ActionPair.ActionPair(cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action):::ENTER
arg0.actionName.toString one of { "kup", "no-op", "prodej" }
arg0.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.preconditionsFulfillers == null
arg0.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg0.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
cz.matfyz.sykora.planning.Action.$assertionsDisabled == false
arg1.actionName.toString one of { "kup", "no-op" }
arg1.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg1.preconditionsFulfillers == null
arg1.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
arg1.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg1.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(arg0.preconditions.predicates[]) one of { 1, 2 }
size(arg0.negativeEffects.predicates[]) one of { 0, 1 }
size(arg0.positiveEffects.predicates[]) == 1
size(arg1.preconditions.predicates[]) one of { 1, 2 }
size(arg1.negativeEffects.predicates[]) one of { 0, 1 }
size(arg1.positiveEffects.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer$ActionPair.ActionPair(cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action):::EXIT
this.first == orig(arg0)
this.first.actionName == arg0.actionName
this.first.preconditions == arg0.preconditions
this.first.preconditions.predicates == arg0.preconditions.predicates
this.first.negativeEffects == arg0.negativeEffects
this.first.negativeEffects.predicates == arg0.negativeEffects.predicates
this.first.positiveEffects == arg0.positiveEffects
this.first.positiveEffects.predicates == arg0.positiveEffects.predicates
cz.matfyz.sykora.planning.Action.$assertionsDisabled == orig(cz.matfyz.sykora.planning.Action.$assertionsDisabled)
this.second == orig(arg1)
this.second.actionName == arg1.actionName
this.second.preconditions == arg1.preconditions
this.second.preconditions.predicates == arg1.preconditions.predicates
this.second.negativeEffects == arg1.negativeEffects
this.second.negativeEffects.predicates == arg1.negativeEffects.predicates
this.second.positiveEffects == arg1.positiveEffects
this.second.positiveEffects.predicates == arg1.positiveEffects.predicates
arg0.actionName == orig(arg0.actionName)
arg0.actionName.toString == orig(arg0.actionName.toString)
arg0.preconditions == orig(arg0.preconditions)
arg0.preconditions.predicates == orig(arg0.preconditions.predicates)
arg0.preconditions.predicates[] == orig(arg0.preconditions.predicates[])
arg0.preconditionsFulfillers == orig(arg0.preconditionsFulfillers)
arg0.negativeEffects == orig(arg0.negativeEffects)
arg0.negativeEffects.predicates == orig(arg0.negativeEffects.predicates)
arg0.negativeEffects.predicates[] == orig(arg0.negativeEffects.predicates[])
arg0.positiveEffects == orig(arg0.positiveEffects)
arg0.positiveEffects.predicates == orig(arg0.positiveEffects.predicates)
arg0.positiveEffects.predicates[] == orig(arg0.positiveEffects.predicates[])
arg1.actionName == orig(arg1.actionName)
arg1.actionName.toString == orig(arg1.actionName.toString)
arg1.preconditions == orig(arg1.preconditions)
arg1.preconditions.predicates == orig(arg1.preconditions.predicates)
arg1.preconditions.predicates[] == orig(arg1.preconditions.predicates[])
arg1.preconditionsFulfillers == orig(arg1.preconditionsFulfillers)
arg1.negativeEffects == orig(arg1.negativeEffects)
arg1.negativeEffects.predicates == orig(arg1.negativeEffects.predicates)
arg1.negativeEffects.predicates[] == orig(arg1.negativeEffects.predicates[])
arg1.positiveEffects == orig(arg1.positiveEffects)
arg1.positiveEffects.predicates == orig(arg1.positiveEffects.predicates)
arg1.positiveEffects.predicates[] == orig(arg1.positiveEffects.predicates[])
this.second.actionName.toString one of { "kup", "no-op" }
arg0.actionName.toString one of { "kup", "no-op", "prodej" }
arg0.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.preconditionsFulfillers == null
arg0.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg0.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.actionName.toString one of { "kup", "no-op" }
arg1.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg1.preconditionsFulfillers == null
arg1.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
arg1.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg1.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(arg0.preconditions.predicates[]) one of { 1, 2 }
size(arg0.negativeEffects.predicates[]) one of { 0, 1 }
size(arg0.positiveEffects.predicates[]) == 1
size(arg1.preconditions.predicates[]) one of { 1, 2 }
size(arg1.negativeEffects.predicates[]) one of { 0, 1 }
size(arg1.positiveEffects.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer$ActionPair.compareTo(cz.matfyz.sykora.planning.graph.ActionLayer$ActionPair):::ENTER
this.first != null
this.second != null
arg0 != null
arg0.first != null
arg0.first.actionName != null
arg0.first.actionName.toString one of { "kup", "no-op", "prodej" }
arg0.first.preconditions != null
arg0.first.preconditionsFulfillers == null
arg0.first.negativeEffects != null
arg0.first.positiveEffects != null
arg0.second != null
arg0.second.actionName != null
arg0.second.actionName.toString one of { "kup", "no-op" }
arg0.second.preconditions != null
arg0.second.preconditionsFulfillers == null
arg0.second.negativeEffects != null
arg0.second.positiveEffects != null
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer$ActionPair.compareTo(cz.matfyz.sykora.planning.graph.ActionLayer$ActionPair):::EXIT64
return != 0
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer$ActionPair.compareTo(cz.matfyz.sykora.planning.graph.ActionLayer$ActionPair):::EXIT65
this.first == arg0.first
this.first == orig(arg0.first)
this.first.actionName == arg0.first.actionName
this.first.actionName == orig(arg0.first.actionName)
this.first.preconditions == arg0.first.preconditions
this.first.preconditions == orig(arg0.first.preconditions)
this.first.negativeEffects == arg0.first.negativeEffects
this.first.negativeEffects == orig(arg0.first.negativeEffects)
this.first.positiveEffects == arg0.first.positiveEffects
this.first.positiveEffects == orig(arg0.first.positiveEffects)
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer$ActionPair.compareTo(cz.matfyz.sykora.planning.graph.ActionLayer$ActionPair):::EXIT
this.first == orig(this.first)
this.first.actionName == orig(this.first.actionName)
this.first.actionName.toString == orig(this.first.actionName.toString)
this.first.preconditions == orig(this.first.preconditions)
this.first.preconditions.predicates == orig(this.first.preconditions.predicates)
this.first.preconditions.predicates[] == orig(this.first.preconditions.predicates[])
this.first.preconditionsFulfillers == orig(this.first.preconditionsFulfillers)
this.first.negativeEffects == orig(this.first.negativeEffects)
this.first.negativeEffects.predicates == orig(this.first.negativeEffects.predicates)
this.first.negativeEffects.predicates[] == orig(this.first.negativeEffects.predicates[])
this.first.positiveEffects == orig(this.first.positiveEffects)
this.first.positiveEffects.predicates == orig(this.first.positiveEffects.predicates)
this.first.positiveEffects.predicates[] == orig(this.first.positiveEffects.predicates[])
cz.matfyz.sykora.planning.Action.$assertionsDisabled == orig(cz.matfyz.sykora.planning.Action.$assertionsDisabled)
this.second == orig(this.second)
this.second.actionName == orig(this.second.actionName)
this.second.actionName.toString == orig(this.second.actionName.toString)
this.second.preconditions == orig(this.second.preconditions)
this.second.preconditions.predicates == orig(this.second.preconditions.predicates)
this.second.preconditions.predicates[] == orig(this.second.preconditions.predicates[])
this.second.preconditionsFulfillers == orig(this.second.preconditionsFulfillers)
this.second.negativeEffects == orig(this.second.negativeEffects)
this.second.negativeEffects.predicates == orig(this.second.negativeEffects.predicates)
this.second.negativeEffects.predicates[] == orig(this.second.negativeEffects.predicates[])
this.second.positiveEffects == orig(this.second.positiveEffects)
this.second.positiveEffects.predicates == orig(this.second.positiveEffects.predicates)
this.second.positiveEffects.predicates[] == orig(this.second.positiveEffects.predicates[])
arg0.first == orig(arg0.first)
arg0.first.actionName == orig(arg0.first.actionName)
arg0.first.actionName.toString == orig(arg0.first.actionName.toString)
arg0.first.preconditions == orig(arg0.first.preconditions)
arg0.first.preconditionsFulfillers == orig(arg0.first.preconditionsFulfillers)
arg0.first.negativeEffects == orig(arg0.first.negativeEffects)
arg0.first.positiveEffects == orig(arg0.first.positiveEffects)
arg0.second == orig(arg0.second)
arg0.second.actionName == orig(arg0.second.actionName)
arg0.second.actionName.toString == orig(arg0.second.actionName.toString)
arg0.second.preconditions == orig(arg0.second.preconditions)
arg0.second.preconditionsFulfillers == orig(arg0.second.preconditionsFulfillers)
arg0.second.negativeEffects == orig(arg0.second.negativeEffects)
arg0.second.positiveEffects == orig(arg0.second.positiveEffects)
this.first != null
this.second != null
arg0.first != null
arg0.first.actionName != null
arg0.first.actionName.toString one of { "kup", "no-op", "prodej" }
arg0.first.preconditions != null
arg0.first.preconditionsFulfillers == null
arg0.first.negativeEffects != null
arg0.first.positiveEffects != null
arg0.second != null
arg0.second.actionName != null
arg0.second.actionName.toString one of { "kup", "no-op" }
arg0.second.preconditions != null
arg0.second.preconditionsFulfillers == null
arg0.second.negativeEffects != null
arg0.second.positiveEffects != null
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer$ActionPair.getFirst():::ENTER
this.first != null
this.second != null
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer$ActionPair.getFirst():::EXIT
this.first == return
this.first.actionName == return.actionName
this.first.actionName.toString == orig(this.first.actionName.toString)
this.first.preconditions == return.preconditions
this.first.preconditions.predicates == return.preconditions.predicates
this.first.preconditions.predicates[] == orig(this.first.preconditions.predicates[])
this.first.preconditionsFulfillers == orig(this.first.preconditionsFulfillers)
this.first.negativeEffects == return.negativeEffects
this.first.negativeEffects.predicates == return.negativeEffects.predicates
this.first.negativeEffects.predicates[] == orig(this.first.negativeEffects.predicates[])
this.first.positiveEffects == return.positiveEffects
this.first.positiveEffects.predicates == return.positiveEffects.predicates
this.first.positiveEffects.predicates[] == orig(this.first.positiveEffects.predicates[])
cz.matfyz.sykora.planning.Action.$assertionsDisabled == orig(cz.matfyz.sykora.planning.Action.$assertionsDisabled)
this.second == orig(this.second)
this.second.actionName == orig(this.second.actionName)
this.second.actionName.toString == orig(this.second.actionName.toString)
this.second.preconditions == orig(this.second.preconditions)
this.second.preconditions.predicates == orig(this.second.preconditions.predicates)
this.second.preconditions.predicates[] == orig(this.second.preconditions.predicates[])
this.second.preconditionsFulfillers == orig(this.second.preconditionsFulfillers)
this.second.negativeEffects == orig(this.second.negativeEffects)
this.second.negativeEffects.predicates == orig(this.second.negativeEffects.predicates)
this.second.negativeEffects.predicates[] == orig(this.second.negativeEffects.predicates[])
this.second.positiveEffects == orig(this.second.positiveEffects)
this.second.positiveEffects.predicates == orig(this.second.positiveEffects.predicates)
this.second.positiveEffects.predicates[] == orig(this.second.positiveEffects.predicates[])
return == orig(this.first)
return.actionName == orig(this.first.actionName)
return.preconditions == orig(this.first.preconditions)
return.preconditions.predicates == orig(this.first.preconditions.predicates)
return.negativeEffects == orig(this.first.negativeEffects)
return.negativeEffects.predicates == orig(this.first.negativeEffects.predicates)
return.positiveEffects == orig(this.first.positiveEffects)
return.positiveEffects.predicates == orig(this.first.positiveEffects.predicates)
this.second != null
return != null
return.actionName != null
return.actionName.toString one of { "kup", "no-op", "prodej" }
return.preconditions != null
return.preconditions.predicates != null
return.preconditions.predicates[] elements != null
return.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
return.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
return.preconditionsFulfillers == null
return.negativeEffects != null
return.negativeEffects.predicates != null
return.negativeEffects.predicates[] elements != null
return.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
return.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
return.positiveEffects != null
return.positiveEffects.predicates != null
return.positiveEffects.predicates[] elements != null
return.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
return.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(return.preconditions.predicates[]) one of { 1, 2 }
size(return.negativeEffects.predicates[]) one of { 0, 1 }
size(return.positiveEffects.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer$ActionPair.getSecond():::ENTER
this.first != null
this.second != null
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer$ActionPair.getSecond():::EXIT
this.first == orig(this.first)
this.first.actionName == orig(this.first.actionName)
this.first.actionName.toString == orig(this.first.actionName.toString)
this.first.preconditions == orig(this.first.preconditions)
this.first.preconditions.predicates == orig(this.first.preconditions.predicates)
this.first.preconditions.predicates[] == orig(this.first.preconditions.predicates[])
this.first.preconditionsFulfillers == orig(this.first.preconditionsFulfillers)
this.first.negativeEffects == orig(this.first.negativeEffects)
this.first.negativeEffects.predicates == orig(this.first.negativeEffects.predicates)
this.first.negativeEffects.predicates[] == orig(this.first.negativeEffects.predicates[])
this.first.positiveEffects == orig(this.first.positiveEffects)
this.first.positiveEffects.predicates == orig(this.first.positiveEffects.predicates)
this.first.positiveEffects.predicates[] == orig(this.first.positiveEffects.predicates[])
cz.matfyz.sykora.planning.Action.$assertionsDisabled == orig(cz.matfyz.sykora.planning.Action.$assertionsDisabled)
this.second == return
this.second.actionName == return.actionName
this.second.actionName.toString == orig(this.second.actionName.toString)
this.second.preconditions == return.preconditions
this.second.preconditions.predicates == return.preconditions.predicates
this.second.preconditions.predicates[] == orig(this.second.preconditions.predicates[])
this.second.preconditionsFulfillers == orig(this.second.preconditionsFulfillers)
this.second.negativeEffects == return.negativeEffects
this.second.negativeEffects.predicates == return.negativeEffects.predicates
this.second.negativeEffects.predicates[] == orig(this.second.negativeEffects.predicates[])
this.second.positiveEffects == return.positiveEffects
this.second.positiveEffects.predicates == return.positiveEffects.predicates
this.second.positiveEffects.predicates[] == orig(this.second.positiveEffects.predicates[])
return == orig(this.second)
return.actionName == orig(this.second.actionName)
return.preconditions == orig(this.second.preconditions)
return.preconditions.predicates == orig(this.second.preconditions.predicates)
return.negativeEffects == orig(this.second.negativeEffects)
return.negativeEffects.predicates == orig(this.second.negativeEffects.predicates)
return.positiveEffects == orig(this.second.positiveEffects)
return.positiveEffects.predicates == orig(this.second.positiveEffects.predicates)
this.first != null
return != null
return.actionName != null
return.actionName.toString one of { "kup", "no-op", "prodej" }
return.preconditions != null
return.preconditions.predicates != null
return.preconditions.predicates[] elements != null
return.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
return.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
return.preconditionsFulfillers == null
return.negativeEffects != null
return.negativeEffects.predicates != null
return.negativeEffects.predicates[] elements != null
return.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
return.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
return.positiveEffects != null
return.positiveEffects.predicates != null
return.positiveEffects.predicates[] elements != null
return.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
return.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(return.preconditions.predicates[]) one of { 1, 2 }
size(return.negativeEffects.predicates[]) one of { 0, 1 }
size(return.positiveEffects.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer$ActionPair.reset(cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action):::ENTER
arg0 != null
arg0.actionName != null
arg0.actionName.toString one of { "kup", "no-op", "prodej" }
arg0.preconditions != null
arg0.preconditions.predicates != null
arg0.preconditions.predicates[] elements != null
arg0.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.preconditionsFulfillers == null
arg0.negativeEffects != null
arg0.negativeEffects.predicates != null
arg0.negativeEffects.predicates[] elements != null
arg0.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.positiveEffects != null
arg0.positiveEffects.predicates != null
arg0.positiveEffects.predicates[] elements != null
arg0.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg0.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1 != null
arg1.actionName != null
arg1.actionName.toString one of { "kup", "no-op", "prodej" }
arg1.preconditions != null
arg1.preconditions.predicates != null
arg1.preconditions.predicates[] elements != null
arg1.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg1.preconditionsFulfillers == null
arg1.negativeEffects != null
arg1.negativeEffects.predicates != null
arg1.negativeEffects.predicates[] elements != null
arg1.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
arg1.positiveEffects != null
arg1.positiveEffects.predicates != null
arg1.positiveEffects.predicates[] elements != null
arg1.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg1.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(arg0.preconditions.predicates[]) one of { 1, 2 }
size(arg0.negativeEffects.predicates[]) one of { 0, 1 }
size(arg0.positiveEffects.predicates[]) == 1
size(arg1.preconditions.predicates[]) one of { 1, 2 }
size(arg1.negativeEffects.predicates[]) one of { 0, 1 }
size(arg1.positiveEffects.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer$ActionPair.reset(cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action):::EXIT
this.first == orig(arg0)
this.first.actionName == arg0.actionName
this.first.preconditions == arg0.preconditions
this.first.preconditions.predicates == arg0.preconditions.predicates
this.first.preconditionsFulfillers == orig(this.first.preconditionsFulfillers)
this.first.negativeEffects == arg0.negativeEffects
this.first.negativeEffects.predicates == arg0.negativeEffects.predicates
this.first.positiveEffects == arg0.positiveEffects
this.first.positiveEffects.predicates == arg0.positiveEffects.predicates
this.first.positiveEffects.predicates[].getClass().getName() == orig(this.first.positiveEffects.predicates[].getClass().getName())
cz.matfyz.sykora.planning.Action.$assertionsDisabled == orig(cz.matfyz.sykora.planning.Action.$assertionsDisabled)
this.second == orig(arg1)
this.second.actionName == arg1.actionName
this.second.preconditions == arg1.preconditions
this.second.preconditions.predicates == arg1.preconditions.predicates
this.second.preconditionsFulfillers == orig(this.second.preconditionsFulfillers)
this.second.negativeEffects == arg1.negativeEffects
this.second.negativeEffects.predicates == arg1.negativeEffects.predicates
this.second.positiveEffects == arg1.positiveEffects
this.second.positiveEffects.predicates == arg1.positiveEffects.predicates
this.second.positiveEffects.predicates[].getClass().getName() == orig(this.second.positiveEffects.predicates[].getClass().getName())
arg0.actionName == orig(arg0.actionName)
arg0.actionName.toString == orig(arg0.actionName.toString)
arg0.preconditions == orig(arg0.preconditions)
arg0.preconditions.predicates == orig(arg0.preconditions.predicates)
arg0.preconditions.predicates[] == orig(arg0.preconditions.predicates[])
arg0.preconditionsFulfillers == orig(arg0.preconditionsFulfillers)
arg0.negativeEffects == orig(arg0.negativeEffects)
arg0.negativeEffects.predicates == orig(arg0.negativeEffects.predicates)
arg0.negativeEffects.predicates[] == orig(arg0.negativeEffects.predicates[])
arg0.positiveEffects == orig(arg0.positiveEffects)
arg0.positiveEffects.predicates == orig(arg0.positiveEffects.predicates)
arg0.positiveEffects.predicates[] == orig(arg0.positiveEffects.predicates[])
arg1.actionName == orig(arg1.actionName)
arg1.actionName.toString == orig(arg1.actionName.toString)
arg1.preconditions == orig(arg1.preconditions)
arg1.preconditions.predicates == orig(arg1.preconditions.predicates)
arg1.preconditions.predicates[] == orig(arg1.preconditions.predicates[])
arg1.preconditionsFulfillers == orig(arg1.preconditionsFulfillers)
arg1.negativeEffects == orig(arg1.negativeEffects)
arg1.negativeEffects.predicates == orig(arg1.negativeEffects.predicates)
arg1.negativeEffects.predicates[] == orig(arg1.negativeEffects.predicates[])
arg1.positiveEffects == orig(arg1.positiveEffects)
arg1.positiveEffects.predicates == orig(arg1.positiveEffects.predicates)
arg1.positiveEffects.predicates[] == orig(arg1.positiveEffects.predicates[])
size(this.first.positiveEffects.predicates[]) == orig(size(this.first.positiveEffects.predicates[]))
size(this.second.positiveEffects.predicates[]) == orig(size(this.second.positiveEffects.predicates[]))
this.first != null
this.second != null
arg0.actionName != null
arg0.actionName.toString one of { "kup", "no-op", "prodej" }
arg0.preconditions != null
arg0.preconditions.predicates != null
arg0.preconditions.predicates[] elements != null
arg0.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.preconditionsFulfillers == null
arg0.negativeEffects != null
arg0.negativeEffects.predicates != null
arg0.negativeEffects.predicates[] elements != null
arg0.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.positiveEffects != null
arg0.positiveEffects.predicates != null
arg0.positiveEffects.predicates[] elements != null
arg0.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg0.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.actionName != null
arg1.actionName.toString one of { "kup", "no-op", "prodej" }
arg1.preconditions != null
arg1.preconditions.predicates != null
arg1.preconditions.predicates[] elements != null
arg1.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg1.preconditionsFulfillers == null
arg1.negativeEffects != null
arg1.negativeEffects.predicates != null
arg1.negativeEffects.predicates[] elements != null
arg1.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
arg1.positiveEffects != null
arg1.positiveEffects.predicates != null
arg1.positiveEffects.predicates[] elements != null
arg1.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg1.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(arg0.preconditions.predicates[]) one of { 1, 2 }
size(arg0.negativeEffects.predicates[]) one of { 0, 1 }
size(arg0.positiveEffects.predicates[]) == 1
size(arg1.preconditions.predicates[]) one of { 1, 2 }
size(arg1.negativeEffects.predicates[]) one of { 0, 1 }
size(arg1.positiveEffects.predicates[]) == 1
this.first.positiveEffects.predicates[].getClass().getName() == orig(this.first.positiveEffects.predicates[].getClass().getName()) (elementwise)
this.second.positiveEffects.predicates[].getClass().getName() == orig(this.second.positiveEffects.predicates[].getClass().getName()) (elementwise)
size(this.first.preconditions.predicates[]) >= orig(size(this.first.preconditions.predicates[]))-1
size(this.first.preconditions.predicates[])-1 <= orig(size(this.first.preconditions.predicates[]))
size(this.first.negativeEffects.predicates[]) >= orig(size(this.first.negativeEffects.predicates[]))-1
size(this.first.negativeEffects.predicates[])-1 <= orig(size(this.first.negativeEffects.predicates[]))
size(this.second.preconditions.predicates[]) >= orig(size(this.second.preconditions.predicates[]))-1
size(this.second.preconditions.predicates[])-1 <= orig(size(this.second.preconditions.predicates[]))
size(this.second.negativeEffects.predicates[]) >= orig(size(this.second.negativeEffects.predicates[]))-1
size(this.second.negativeEffects.predicates[])-1 <= orig(size(this.second.negativeEffects.predicates[]))
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer:::OBJECT
this.actions[] elements != null
this.actions[].getClass().getName() elements == cz.matfyz.sykora.planning.Action.class
this.isMutexHelperPair != null
this.isMutexHelperPair.first.actionName != null
this.isMutexHelperPair.first.actionName.toString one of { "kup", "no-op", "prodej" }
this.isMutexHelperPair.first.preconditions != null
this.isMutexHelperPair.first.preconditionsFulfillers == null
this.isMutexHelperPair.first.negativeEffects != null
this.isMutexHelperPair.first.positiveEffects != null
cz.matfyz.sykora.planning.Action.$assertionsDisabled == false
this.isMutexHelperPair.second.actionName != null
this.isMutexHelperPair.second.actionName.toString one of { "kup", "no-op", "prodej" }
this.isMutexHelperPair.second.preconditions != null
this.isMutexHelperPair.second.preconditionsFulfillers == null
this.isMutexHelperPair.second.negativeEffects != null
this.isMutexHelperPair.second.positiveEffects != null
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer.ActionLayer(java.lang.Iterable):::ENTER
arg0.getClass().getName() == java.util.TreeSet.class
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer.ActionLayer(java.lang.Iterable):::EXIT
this.actions[].getClass().getName() one of { [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action], [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action] }
this.isMutexHelperPair.first == null
this.isMutexHelperPair.second == null
size(this.actions[]) one of { 4, 7 }
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer.addAction(cz.matfyz.sykora.planning.Action):::ENTER
this.isMutexHelperPair.first == null
this.isMutexHelperPair.second == null
arg0.actionName.toString one of { "kup", "no-op", "prodej" }
arg0.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.preconditionsFulfillers == null
arg0.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg0.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(arg0.preconditions.predicates[]) one of { 1, 2 }
size(arg0.negativeEffects.predicates[]) one of { 0, 1 }
size(arg0.positiveEffects.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer.addAction(cz.matfyz.sykora.planning.Action):::EXIT
this.actions == orig(this.actions)
this.mutexes == orig(this.mutexes)
this.isMutexHelperPair == orig(this.isMutexHelperPair)
this.isMutexHelperPair.first == orig(this.isMutexHelperPair.first)
cz.matfyz.sykora.planning.Action.$assertionsDisabled == orig(cz.matfyz.sykora.planning.Action.$assertionsDisabled)
this.isMutexHelperPair.second == orig(this.isMutexHelperPair.second)
arg0.actionName == orig(arg0.actionName)
arg0.actionName.toString == orig(arg0.actionName.toString)
arg0.preconditions == orig(arg0.preconditions)
arg0.preconditions.predicates == orig(arg0.preconditions.predicates)
arg0.preconditions.predicates[] == orig(arg0.preconditions.predicates[])
arg0.preconditionsFulfillers == orig(arg0.preconditionsFulfillers)
arg0.negativeEffects == orig(arg0.negativeEffects)
arg0.negativeEffects.predicates == orig(arg0.negativeEffects.predicates)
arg0.negativeEffects.predicates[] == orig(arg0.negativeEffects.predicates[])
arg0.positiveEffects == orig(arg0.positiveEffects)
arg0.positiveEffects.predicates == orig(arg0.positiveEffects.predicates)
arg0.positiveEffects.predicates[] == orig(arg0.positiveEffects.predicates[])
size(this.actions[])-1 == orig(size(this.actions[]))
this.isMutexHelperPair.first == null
this.isMutexHelperPair.second == null
arg0.actionName.toString one of { "kup", "no-op", "prodej" }
arg0.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.preconditionsFulfillers == null
arg0.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg0.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(arg0.preconditions.predicates[]) one of { 1, 2 }
size(arg0.negativeEffects.predicates[]) one of { 0, 1 }
size(arg0.positiveEffects.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer.addMutex(cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action):::ENTER
this.actions[].getClass().getName() one of { [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action], [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action] }
this.isMutexHelperPair.first.actionName.toString one of { "kup", "no-op" }
this.isMutexHelperPair.second.actionName.toString one of { "kup", "prodej" }
arg0.actionName.toString one of { "kup", "no-op", "prodej" }
arg0.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.preconditionsFulfillers == null
arg0.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg0.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.actionName.toString one of { "kup", "no-op" }
arg1.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg1.preconditionsFulfillers == null
arg1.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
arg1.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg1.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(this.actions[]) one of { 4, 7 }
size(arg0.preconditions.predicates[]) one of { 1, 2 }
size(arg0.negativeEffects.predicates[]) one of { 0, 1 }
size(arg0.positiveEffects.predicates[]) == 1
size(arg1.preconditions.predicates[]) one of { 1, 2 }
size(arg1.negativeEffects.predicates[]) one of { 0, 1 }
size(arg1.positiveEffects.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer.addMutex(cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action):::EXIT
this.actions == orig(this.actions)
this.actions[] == orig(this.actions[])
this.mutexes == orig(this.mutexes)
this.isMutexHelperPair == orig(this.isMutexHelperPair)
this.isMutexHelperPair.first == orig(this.isMutexHelperPair.first)
this.isMutexHelperPair.first.actionName == orig(this.isMutexHelperPair.first.actionName)
this.isMutexHelperPair.first.actionName.toString == orig(this.isMutexHelperPair.first.actionName.toString)
this.isMutexHelperPair.first.preconditions == orig(this.isMutexHelperPair.first.preconditions)
this.isMutexHelperPair.first.preconditionsFulfillers == orig(this.isMutexHelperPair.first.preconditionsFulfillers)
this.isMutexHelperPair.first.negativeEffects == orig(this.isMutexHelperPair.first.negativeEffects)
this.isMutexHelperPair.first.positiveEffects == orig(this.isMutexHelperPair.first.positiveEffects)
cz.matfyz.sykora.planning.Action.$assertionsDisabled == orig(cz.matfyz.sykora.planning.Action.$assertionsDisabled)
this.isMutexHelperPair.second == orig(this.isMutexHelperPair.second)
this.isMutexHelperPair.second.actionName == orig(this.isMutexHelperPair.second.actionName)
this.isMutexHelperPair.second.actionName.toString == orig(this.isMutexHelperPair.second.actionName.toString)
this.isMutexHelperPair.second.preconditions == orig(this.isMutexHelperPair.second.preconditions)
this.isMutexHelperPair.second.preconditionsFulfillers == orig(this.isMutexHelperPair.second.preconditionsFulfillers)
this.isMutexHelperPair.second.negativeEffects == orig(this.isMutexHelperPair.second.negativeEffects)
this.isMutexHelperPair.second.positiveEffects == orig(this.isMutexHelperPair.second.positiveEffects)
arg0.actionName == orig(arg0.actionName)
arg0.actionName.toString == orig(arg0.actionName.toString)
arg0.preconditions == orig(arg0.preconditions)
arg0.preconditions.predicates == orig(arg0.preconditions.predicates)
arg0.preconditions.predicates[] == orig(arg0.preconditions.predicates[])
arg0.preconditionsFulfillers == orig(arg0.preconditionsFulfillers)
arg0.negativeEffects == orig(arg0.negativeEffects)
arg0.negativeEffects.predicates == orig(arg0.negativeEffects.predicates)
arg0.negativeEffects.predicates[] == orig(arg0.negativeEffects.predicates[])
arg0.positiveEffects == orig(arg0.positiveEffects)
arg0.positiveEffects.predicates == orig(arg0.positiveEffects.predicates)
arg0.positiveEffects.predicates[] == orig(arg0.positiveEffects.predicates[])
arg1.actionName == orig(arg1.actionName)
arg1.actionName.toString == orig(arg1.actionName.toString)
arg1.preconditions == orig(arg1.preconditions)
arg1.preconditions.predicates == orig(arg1.preconditions.predicates)
arg1.preconditions.predicates[] == orig(arg1.preconditions.predicates[])
arg1.preconditionsFulfillers == orig(arg1.preconditionsFulfillers)
arg1.negativeEffects == orig(arg1.negativeEffects)
arg1.negativeEffects.predicates == orig(arg1.negativeEffects.predicates)
arg1.negativeEffects.predicates[] == orig(arg1.negativeEffects.predicates[])
arg1.positiveEffects == orig(arg1.positiveEffects)
arg1.positiveEffects.predicates == orig(arg1.positiveEffects.predicates)
arg1.positiveEffects.predicates[] == orig(arg1.positiveEffects.predicates[])
this.actions[].getClass().getName() one of { [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action], [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action] }
this.isMutexHelperPair.first.actionName.toString one of { "kup", "no-op" }
this.isMutexHelperPair.second.actionName.toString one of { "kup", "prodej" }
arg0.actionName.toString one of { "kup", "no-op", "prodej" }
arg0.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.preconditionsFulfillers == null
arg0.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg0.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.actionName.toString one of { "kup", "no-op" }
arg1.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg1.preconditionsFulfillers == null
arg1.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
arg1.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg1.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(this.actions[]) one of { 4, 7 }
size(arg0.preconditions.predicates[]) one of { 1, 2 }
size(arg0.negativeEffects.predicates[]) one of { 0, 1 }
size(arg0.positiveEffects.predicates[]) == 1
size(arg1.preconditions.predicates[]) one of { 1, 2 }
size(arg1.negativeEffects.predicates[]) one of { 0, 1 }
size(arg1.positiveEffects.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer.buildPredicateLayer(java.util.Map):::ENTER
this.actions[].getClass().getName() one of { [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action], [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action] }
this.isMutexHelperPair.first.actionName has only one value
this.isMutexHelperPair.first.actionName.toString == "no-op"
this.isMutexHelperPair.second.actionName has only one value
this.isMutexHelperPair.second.actionName.toString == "prodej"
arg0.getClass().getName() == java.util.TreeMap.class
size(this.actions[]) one of { 4, 7 }
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer.buildPredicateLayer(java.util.Map):::EXIT
this.actions == orig(this.actions)
this.actions[] == orig(this.actions[])
this.mutexes == orig(this.mutexes)
this.isMutexHelperPair == orig(this.isMutexHelperPair)
this.isMutexHelperPair.first.actionName == orig(this.isMutexHelperPair.first.actionName)
this.isMutexHelperPair.first.actionName.toString == orig(this.isMutexHelperPair.first.actionName.toString)
this.isMutexHelperPair.first.preconditionsFulfillers == orig(this.isMutexHelperPair.first.preconditionsFulfillers)
cz.matfyz.sykora.planning.Action.$assertionsDisabled == orig(cz.matfyz.sykora.planning.Action.$assertionsDisabled)
this.isMutexHelperPair.second.preconditionsFulfillers == orig(this.isMutexHelperPair.second.preconditionsFulfillers)
this.actions[].getClass().getName() one of { [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action], [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action] }
this.isMutexHelperPair.first.actionName has only one value
this.isMutexHelperPair.first.actionName.toString == "no-op"
this.isMutexHelperPair.second.actionName has only one value
this.isMutexHelperPair.second.actionName.toString == "no-op"
return.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
return.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
size(this.actions[]) one of { 4, 7 }
size(return.predicates[]) one of { 4, 5 }
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer.findMutexActions():::ENTER
this.actions[].getClass().getName() one of { [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action], [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action] }
this.isMutexHelperPair.first == null
this.isMutexHelperPair.second == null
size(this.actions[]) one of { 4, 7 }
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer.findMutexActions():::EXIT
this.actions == orig(this.actions)
this.actions[] == orig(this.actions[])
this.mutexes == orig(this.mutexes)
this.isMutexHelperPair == orig(this.isMutexHelperPair)
cz.matfyz.sykora.planning.Action.$assertionsDisabled == orig(cz.matfyz.sykora.planning.Action.$assertionsDisabled)
this.actions[].getClass().getName() one of { [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action], [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action] }
this.isMutexHelperPair.first.actionName has only one value
this.isMutexHelperPair.first.actionName.toString == "no-op"
this.isMutexHelperPair.second.actionName has only one value
this.isMutexHelperPair.second.actionName.toString == "prodej"
size(this.actions[]) one of { 4, 7 }
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer.initialize():::ENTER
this.actions == null
this.mutexes == null
this.isMutexHelperPair.first == null
this.isMutexHelperPair.second == null
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer.initialize():::EXIT
this.isMutexHelperPair == orig(this.isMutexHelperPair)
this.isMutexHelperPair.first == orig(this.isMutexHelperPair.first)
cz.matfyz.sykora.planning.Action.$assertionsDisabled == orig(cz.matfyz.sykora.planning.Action.$assertionsDisabled)
this.isMutexHelperPair.second == orig(this.isMutexHelperPair.second)
this.actions[] == []
this.actions[].getClass().getName() == []
this.isMutexHelperPair.first == null
this.isMutexHelperPair.second == null
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer.isMutex(cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action):::ENTER
this.actions != null
this.actions[].getClass().getName() one of { [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action], [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action] }
this.mutexes != null
arg0 != null
arg0.actionName != null
arg0.actionName.toString one of { "kup", "no-op", "prodej" }
arg0.preconditions != null
arg0.preconditions.predicates != null
arg0.preconditions.predicates[] elements != null
arg0.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.preconditionsFulfillers == null
arg0.negativeEffects != null
arg0.negativeEffects.predicates != null
arg0.negativeEffects.predicates[] elements != null
arg0.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.positiveEffects != null
arg0.positiveEffects.predicates != null
arg0.positiveEffects.predicates[] elements != null
arg0.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg0.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1 != null
arg1.actionName != null
arg1.actionName.toString one of { "kup", "no-op", "prodej" }
arg1.preconditions != null
arg1.preconditions.predicates != null
arg1.preconditions.predicates[] elements != null
arg1.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg1.preconditionsFulfillers == null
arg1.negativeEffects != null
arg1.negativeEffects.predicates != null
arg1.negativeEffects.predicates[] elements != null
arg1.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
arg1.positiveEffects != null
arg1.positiveEffects.predicates != null
arg1.positiveEffects.predicates[] elements != null
arg1.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg1.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(this.actions[]) one of { 4, 7 }
size(arg0.preconditions.predicates[]) one of { 1, 2 }
size(arg0.negativeEffects.predicates[]) one of { 0, 1 }
size(arg0.positiveEffects.predicates[]) == 1
size(arg1.preconditions.predicates[]) one of { 1, 2 }
size(arg1.negativeEffects.predicates[]) one of { 0, 1 }
size(arg1.positiveEffects.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer.isMutex(cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action):::EXIT268
this.isMutexHelperPair.second.actionName.toString one of { "kup", "no-op" }
arg1.actionName.toString one of { "kup", "no-op" }
return == true
orig(this.isMutexHelperPair.second.actionName.toString) one of { "kup", "no-op" }
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer.isMutex(cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action):::EXIT268;condition="return == true"
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer.isMutex(cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action):::EXIT270
(return == false)  ==>  (arg0.actionName.toString one of { "kup", "no-op", "prodej" })
(return == false)  ==>  (orig(this.isMutexHelperPair.second.actionName.toString) one of { "kup", "no-op", "prodej" })
(return == false)  ==>  (this.isMutexHelperPair.second.actionName.toString one of { "kup", "no-op", "prodej" })
(return == true)  ==>  (arg0.actionName.toString one of { "kup", "no-op" })
(return == true)  ==>  (orig(this.isMutexHelperPair.first) != null)
(return == true)  ==>  (orig(this.isMutexHelperPair.second) != null)
(return == true)  ==>  (orig(this.isMutexHelperPair.second.actionName.toString) one of { "kup", "no-op" })
(return == true)  ==>  (this.isMutexHelperPair.first.actionName.toString != orig(this.isMutexHelperPair.first.actionName.toString))
(return == true)  ==>  (this.isMutexHelperPair.second.actionName.toString one of { "kup", "no-op" })
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer.isMutex(cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action):::EXIT270;condition="return == true"
arg0.actionName.toString one of { "kup", "no-op" }
this.isMutexHelperPair.first.actionName.toString != orig(this.isMutexHelperPair.first.actionName.toString)
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer.isMutex(cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action):::EXIT270;condition="not(return == true)"
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer.isMutex(cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action):::EXIT
this.actions == orig(this.actions)
this.actions[] == orig(this.actions[])
this.mutexes == orig(this.mutexes)
this.isMutexHelperPair == orig(this.isMutexHelperPair)
this.isMutexHelperPair.first.preconditionsFulfillers == orig(this.isMutexHelperPair.first.preconditionsFulfillers)
cz.matfyz.sykora.planning.Action.$assertionsDisabled == orig(cz.matfyz.sykora.planning.Action.$assertionsDisabled)
this.isMutexHelperPair.second.preconditionsFulfillers == orig(this.isMutexHelperPair.second.preconditionsFulfillers)
arg0.actionName == orig(arg0.actionName)
arg0.actionName.toString == orig(arg0.actionName.toString)
arg0.preconditions == orig(arg0.preconditions)
arg0.preconditions.predicates == orig(arg0.preconditions.predicates)
arg0.preconditions.predicates[] == orig(arg0.preconditions.predicates[])
arg0.preconditionsFulfillers == orig(arg0.preconditionsFulfillers)
arg0.negativeEffects == orig(arg0.negativeEffects)
arg0.negativeEffects.predicates == orig(arg0.negativeEffects.predicates)
arg0.negativeEffects.predicates[] == orig(arg0.negativeEffects.predicates[])
arg0.positiveEffects == orig(arg0.positiveEffects)
arg0.positiveEffects.predicates == orig(arg0.positiveEffects.predicates)
arg0.positiveEffects.predicates[] == orig(arg0.positiveEffects.predicates[])
arg1.actionName == orig(arg1.actionName)
arg1.actionName.toString == orig(arg1.actionName.toString)
arg1.preconditions == orig(arg1.preconditions)
arg1.preconditions.predicates == orig(arg1.preconditions.predicates)
arg1.preconditions.predicates[] == orig(arg1.preconditions.predicates[])
arg1.preconditionsFulfillers == orig(arg1.preconditionsFulfillers)
arg1.negativeEffects == orig(arg1.negativeEffects)
arg1.negativeEffects.predicates == orig(arg1.negativeEffects.predicates)
arg1.negativeEffects.predicates[] == orig(arg1.negativeEffects.predicates[])
arg1.positiveEffects == orig(arg1.positiveEffects)
arg1.positiveEffects.predicates == orig(arg1.positiveEffects.predicates)
arg1.positiveEffects.predicates[] == orig(arg1.positiveEffects.predicates[])
(return == false)  ==>  (orig(this.isMutexHelperPair.second.actionName.toString) one of { "kup", "no-op", "prodej" })
(return == false)  ==>  (this.isMutexHelperPair.second.actionName.toString one of { "kup", "no-op", "prodej" })
(return == true)  ==>  (orig(this.isMutexHelperPair.first) != null)
(return == true)  ==>  (orig(this.isMutexHelperPair.second) != null)
(return == true)  ==>  (orig(this.isMutexHelperPair.second.actionName.toString) one of { "kup", "no-op" })
(return == true)  ==>  (this.isMutexHelperPair.second.actionName.toString one of { "kup", "no-op" })
this.actions != null
this.actions[].getClass().getName() one of { [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action], [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action] }
this.mutexes != null
this.isMutexHelperPair.first != null
this.isMutexHelperPair.second != null
arg0.actionName != null
arg0.actionName.toString one of { "kup", "no-op", "prodej" }
arg0.preconditions != null
arg0.preconditions.predicates != null
arg0.preconditions.predicates[] elements != null
arg0.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.preconditionsFulfillers == null
arg0.negativeEffects != null
arg0.negativeEffects.predicates != null
arg0.negativeEffects.predicates[] elements != null
arg0.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.positiveEffects != null
arg0.positiveEffects.predicates != null
arg0.positiveEffects.predicates[] elements != null
arg0.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg0.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.actionName != null
arg1.actionName.toString one of { "kup", "no-op", "prodej" }
arg1.preconditions != null
arg1.preconditions.predicates != null
arg1.preconditions.predicates[] elements != null
arg1.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.preconditions.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg1.preconditionsFulfillers == null
arg1.negativeEffects != null
arg1.negativeEffects.predicates != null
arg1.negativeEffects.predicates[] elements != null
arg1.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg1.negativeEffects.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
arg1.positiveEffects != null
arg1.positiveEffects.predicates != null
arg1.positiveEffects.predicates[] elements != null
arg1.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
arg1.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(this.actions[]) one of { 4, 7 }
size(arg0.preconditions.predicates[]) one of { 1, 2 }
size(arg0.negativeEffects.predicates[]) one of { 0, 1 }
size(arg0.positiveEffects.predicates[]) == 1
size(arg1.preconditions.predicates[]) one of { 1, 2 }
size(arg1.negativeEffects.predicates[]) one of { 0, 1 }
size(arg1.positiveEffects.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer.isMutex(cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action):::EXIT;condition="return == true"
this.isMutexHelperPair.second.actionName.toString one of { "kup", "no-op" }
return == true
orig(this.isMutexHelperPair.first) != null
orig(this.isMutexHelperPair.second) != null
orig(this.isMutexHelperPair.second.actionName.toString) one of { "kup", "no-op" }
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer.isMutex(cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action):::EXIT;condition="not(return == true)"
return == false
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer.iterator():::ENTER
this.actions != null
this.actions[].getClass().getName() one of { [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action], [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action] }
this.mutexes != null
this.isMutexHelperPair.first.actionName.toString one of { "no-op", "prodej" }
this.isMutexHelperPair.second.actionName.toString one of { "kup", "prodej" }
size(this.actions[]) one of { 4, 7 }
===========================================================================
cz.matfyz.sykora.planning.graph.ActionLayer.iterator():::EXIT
this.actions == orig(this.actions)
this.actions[] == orig(this.actions[])
this.mutexes == orig(this.mutexes)
this.isMutexHelperPair == orig(this.isMutexHelperPair)
this.isMutexHelperPair.first == orig(this.isMutexHelperPair.first)
this.isMutexHelperPair.first.actionName == orig(this.isMutexHelperPair.first.actionName)
this.isMutexHelperPair.first.actionName.toString == orig(this.isMutexHelperPair.first.actionName.toString)
this.isMutexHelperPair.first.preconditions == orig(this.isMutexHelperPair.first.preconditions)
this.isMutexHelperPair.first.preconditionsFulfillers == orig(this.isMutexHelperPair.first.preconditionsFulfillers)
this.isMutexHelperPair.first.negativeEffects == orig(this.isMutexHelperPair.first.negativeEffects)
this.isMutexHelperPair.first.positiveEffects == orig(this.isMutexHelperPair.first.positiveEffects)
cz.matfyz.sykora.planning.Action.$assertionsDisabled == orig(cz.matfyz.sykora.planning.Action.$assertionsDisabled)
this.isMutexHelperPair.second == orig(this.isMutexHelperPair.second)
this.isMutexHelperPair.second.actionName == orig(this.isMutexHelperPair.second.actionName)
this.isMutexHelperPair.second.actionName.toString == orig(this.isMutexHelperPair.second.actionName.toString)
this.isMutexHelperPair.second.preconditions == orig(this.isMutexHelperPair.second.preconditions)
this.isMutexHelperPair.second.preconditionsFulfillers == orig(this.isMutexHelperPair.second.preconditionsFulfillers)
this.isMutexHelperPair.second.negativeEffects == orig(this.isMutexHelperPair.second.negativeEffects)
this.isMutexHelperPair.second.positiveEffects == orig(this.isMutexHelperPair.second.positiveEffects)
this.actions != null
this.actions[].getClass().getName() one of { [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action], [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action] }
this.mutexes != null
this.isMutexHelperPair.first.actionName.toString one of { "no-op", "prodej" }
this.isMutexHelperPair.second.actionName.toString one of { "kup", "prodej" }
return != null
return.getClass().getName() == java.util.ArrayList$Itr.class
size(this.actions[]) one of { 4, 7 }
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer$PredicatePair:::OBJECT
this.first.parameters.getClass().getName() == this.second.parameters.getClass().getName()
this.first.parameters != null
this.first.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
this.first.parameters[] elements != null
this.first.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
this.first.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
this.first.parameters[].boundValue elements != null
this.first.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
this.first.parameters[].dependentBindings elements != null
this.first.parameters[].distinctBindings elements != null
this.first.predicateName != null
this.first.predicateName.toString one of { "mam", "zbozi" }
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == false
this.second.parameters != null
this.second.parameters[] elements != null
this.second.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
this.second.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
this.second.parameters[].dependentBindings elements != null
this.second.parameters[].distinctBindings elements != null
this.second.predicateName != null
this.second.predicateName.toString one of { "mam", "zbozi" }
size(this.first.parameters[]) == 1
size(this.second.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer$PredicatePair.PredicatePair(cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate):::ENTER
arg0.parameters.getClass().getName() == arg1.parameters.getClass().getName()
arg0.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg0.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" }
arg0.parameters[].boundValue.toString one of { [brambory], [orezavatko] }
arg0.predicateName.toString == "mam"
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == false
arg1.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg1.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg1.parameters[].boundValue.toString elements one of { "orezavatko", "penize" }
arg1.parameters[].boundValue.toString one of { [orezavatko], [penize] }
arg1.predicateName.toString == "mam"
size(arg0.parameters[]) == 1
size(arg1.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer$PredicatePair.PredicatePair(cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate):::EXIT
this.first == orig(arg0)
this.first.parameters == arg0.parameters
this.first.parameters.getClass().getName() == arg0.parameters.getClass().getName()
this.first.predicateName == arg0.predicateName
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
this.second == orig(arg1)
this.second.parameters == arg1.parameters
this.second.parameters.getClass().getName() == arg0.parameters.getClass().getName()
this.second.predicateName == arg1.predicateName
arg0.parameters == orig(arg0.parameters)
arg0.parameters.getClass().getName() == arg1.parameters.getClass().getName()
arg0.parameters.getClass().getName() == orig(arg0.parameters.getClass().getName())
arg0.parameters.getClass().getName() == orig(arg1.parameters.getClass().getName())
arg0.parameters[] == orig(arg0.parameters[])
arg0.parameters[].boundValue == orig(arg0.parameters[].boundValue)
arg0.parameters[].dependentBindings == orig(arg0.parameters[].dependentBindings)
arg0.parameters[].distinctBindings == orig(arg0.parameters[].distinctBindings)
arg0.predicateName == orig(arg0.predicateName)
arg0.predicateName.toString == orig(arg0.predicateName.toString)
arg1.parameters == orig(arg1.parameters)
arg1.parameters[] == orig(arg1.parameters[])
arg1.parameters[].boundValue == orig(arg1.parameters[].boundValue)
arg1.parameters[].dependentBindings == orig(arg1.parameters[].dependentBindings)
arg1.parameters[].distinctBindings == orig(arg1.parameters[].distinctBindings)
arg1.predicateName == orig(arg1.predicateName)
arg1.predicateName.toString == orig(arg1.predicateName.toString)
this.first.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" }
this.first.parameters[].boundValue.toString one of { [brambory], [orezavatko] }
this.first.predicateName.toString == "mam"
this.second.parameters[].boundValue.toString elements one of { "orezavatko", "penize" }
this.second.parameters[].boundValue.toString one of { [orezavatko], [penize] }
this.second.predicateName.toString == "mam"
arg0.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg0.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" }
arg0.parameters[].boundValue.toString one of { [brambory], [orezavatko] }
arg0.predicateName.toString == "mam"
arg1.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg1.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg1.parameters[].boundValue.toString elements one of { "orezavatko", "penize" }
arg1.parameters[].boundValue.toString one of { [orezavatko], [penize] }
arg1.predicateName.toString == "mam"
size(arg0.parameters[]) == 1
size(arg1.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer$PredicatePair.compareTo(cz.matfyz.sykora.planning.graph.PredicateLayer$PredicatePair):::ENTER
this.first.parameters.getClass().getName() == arg0.first.parameters.getClass().getName()
this.first.parameters.getClass().getName() == arg0.second.parameters.getClass().getName()
this.first != null
this.second != null
this.second.parameters[].boundValue elements != null
this.second.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg0 != null
arg0.first != null
arg0.first.parameters != null
arg0.first.parameters[] elements != null
arg0.first.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.first.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.first.parameters[].boundValue elements != null
arg0.first.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" }
arg0.first.parameters[].boundValue.toString one of { [brambory], [orezavatko] }
arg0.first.parameters[].dependentBindings elements != null
arg0.first.parameters[].distinctBindings elements != null
arg0.first.predicateName != null
arg0.first.predicateName.toString == "mam"
arg0.second != null
arg0.second.parameters != null
arg0.second.parameters[] elements != null
arg0.second.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.second.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.second.parameters[].boundValue elements != null
arg0.second.parameters[].boundValue.toString elements one of { "orezavatko", "penize" }
arg0.second.parameters[].boundValue.toString one of { [orezavatko], [penize] }
arg0.second.parameters[].dependentBindings elements != null
arg0.second.parameters[].distinctBindings elements != null
arg0.second.predicateName != null
arg0.second.predicateName.toString == "mam"
size(arg0.first.parameters[]) == 1
size(arg0.second.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer$PredicatePair.compareTo(cz.matfyz.sykora.planning.graph.PredicateLayer$PredicatePair):::EXIT72
return one of { 1, 13, 14 }
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer$PredicatePair.compareTo(cz.matfyz.sykora.planning.graph.PredicateLayer$PredicatePair):::EXIT73
this.first.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" }
this.first.parameters[].boundValue.toString one of { [brambory], [orezavatko] }
this.first.predicateName.toString == "mam"
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer$PredicatePair.compareTo(cz.matfyz.sykora.planning.graph.PredicateLayer$PredicatePair):::EXIT
this.first == orig(this.first)
this.first.parameters == orig(this.first.parameters)
this.first.parameters.getClass().getName() == arg0.first.parameters.getClass().getName()
this.first.parameters.getClass().getName() == arg0.second.parameters.getClass().getName()
this.first.parameters.getClass().getName() == orig(this.first.parameters.getClass().getName())
this.first.parameters.getClass().getName() == orig(this.second.parameters.getClass().getName())
this.first.parameters.getClass().getName() == orig(arg0.first.parameters.getClass().getName())
this.first.parameters.getClass().getName() == orig(arg0.second.parameters.getClass().getName())
this.first.parameters[] == orig(this.first.parameters[])
this.first.parameters[].boundValue == orig(this.first.parameters[].boundValue)
this.first.parameters[].dependentBindings == orig(this.first.parameters[].dependentBindings)
this.first.parameters[].distinctBindings == orig(this.first.parameters[].distinctBindings)
this.first.predicateName == orig(this.first.predicateName)
this.first.predicateName.toString == orig(this.first.predicateName.toString)
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
this.second == orig(this.second)
this.second.parameters == orig(this.second.parameters)
this.second.parameters[] == orig(this.second.parameters[])
this.second.parameters[].boundValue == orig(this.second.parameters[].boundValue)
this.second.parameters[].dependentBindings == orig(this.second.parameters[].dependentBindings)
this.second.parameters[].distinctBindings == orig(this.second.parameters[].distinctBindings)
this.second.predicateName == orig(this.second.predicateName)
this.second.predicateName.toString == orig(this.second.predicateName.toString)
arg0.first == orig(arg0.first)
arg0.first.parameters == orig(arg0.first.parameters)
arg0.first.parameters[] == orig(arg0.first.parameters[])
arg0.first.parameters[].boundValue == orig(arg0.first.parameters[].boundValue)
arg0.first.parameters[].dependentBindings == orig(arg0.first.parameters[].dependentBindings)
arg0.first.parameters[].distinctBindings == orig(arg0.first.parameters[].distinctBindings)
arg0.first.predicateName == orig(arg0.first.predicateName)
arg0.first.predicateName.toString == orig(arg0.first.predicateName.toString)
arg0.second == orig(arg0.second)
arg0.second.parameters == orig(arg0.second.parameters)
arg0.second.parameters[] == orig(arg0.second.parameters[])
arg0.second.parameters[].boundValue == orig(arg0.second.parameters[].boundValue)
arg0.second.parameters[].dependentBindings == orig(arg0.second.parameters[].dependentBindings)
arg0.second.parameters[].distinctBindings == orig(arg0.second.parameters[].distinctBindings)
arg0.second.predicateName == orig(arg0.second.predicateName)
arg0.second.predicateName.toString == orig(arg0.second.predicateName.toString)
this.first != null
this.second != null
this.second.parameters[].boundValue elements != null
this.second.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg0.first != null
arg0.first.parameters != null
arg0.first.parameters[] elements != null
arg0.first.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.first.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.first.parameters[].boundValue elements != null
arg0.first.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" }
arg0.first.parameters[].boundValue.toString one of { [brambory], [orezavatko] }
arg0.first.parameters[].dependentBindings elements != null
arg0.first.parameters[].distinctBindings elements != null
arg0.first.predicateName != null
arg0.first.predicateName.toString == "mam"
arg0.second != null
arg0.second.parameters != null
arg0.second.parameters[] elements != null
arg0.second.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.second.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.second.parameters[].boundValue elements != null
arg0.second.parameters[].boundValue.toString elements one of { "orezavatko", "penize" }
arg0.second.parameters[].boundValue.toString one of { [orezavatko], [penize] }
arg0.second.parameters[].dependentBindings elements != null
arg0.second.parameters[].distinctBindings elements != null
arg0.second.predicateName != null
arg0.second.predicateName.toString == "mam"
size(arg0.first.parameters[]) == 1
size(arg0.second.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer$PredicatePair.getFirst():::ENTER
this.first != null
this.first.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" }
this.first.parameters[].boundValue.toString one of { [brambory], [orezavatko] }
this.first.predicateName.toString == "mam"
this.second != null
this.second.parameters[].boundValue elements != null
this.second.parameters[].boundValue.toString elements one of { "orezavatko", "penize" }
this.second.parameters[].boundValue.toString one of { [orezavatko], [penize] }
this.second.predicateName.toString == "mam"
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer$PredicatePair.getFirst():::EXIT
this.first == return
this.first.parameters == return.parameters
this.first.parameters.getClass().getName() == return.parameters.getClass().getName()
this.first.parameters[] == orig(this.first.parameters[])
this.first.parameters[].boundValue == orig(this.first.parameters[].boundValue)
this.first.parameters[].dependentBindings == orig(this.first.parameters[].dependentBindings)
this.first.parameters[].distinctBindings == orig(this.first.parameters[].distinctBindings)
this.first.predicateName == return.predicateName
this.first.predicateName.toString == orig(this.first.predicateName.toString)
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
this.second == orig(this.second)
this.second.parameters == orig(this.second.parameters)
this.second.parameters.getClass().getName() == return.parameters.getClass().getName()
this.second.parameters[] == orig(this.second.parameters[])
this.second.parameters[].boundValue == orig(this.second.parameters[].boundValue)
this.second.parameters[].dependentBindings == orig(this.second.parameters[].dependentBindings)
this.second.parameters[].distinctBindings == orig(this.second.parameters[].distinctBindings)
this.second.predicateName == orig(this.second.predicateName)
this.second.predicateName.toString == orig(this.second.predicateName.toString)
return == orig(this.first)
return.parameters == orig(this.first.parameters)
return.parameters.getClass().getName() == orig(this.first.parameters.getClass().getName())
return.parameters.getClass().getName() == orig(this.second.parameters.getClass().getName())
return.predicateName == orig(this.first.predicateName)
this.first.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" }
this.first.parameters[].boundValue.toString one of { [brambory], [orezavatko] }
this.first.predicateName.toString == "mam"
this.second != null
this.second.parameters[].boundValue elements != null
this.second.parameters[].boundValue.toString elements one of { "orezavatko", "penize" }
this.second.parameters[].boundValue.toString one of { [orezavatko], [penize] }
this.second.predicateName.toString == "mam"
return != null
return.parameters != null
return.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
return.parameters[] elements != null
return.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
return.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
return.parameters[].boundValue elements != null
return.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" }
return.parameters[].boundValue.toString one of { [brambory], [orezavatko] }
return.parameters[].dependentBindings elements != null
return.parameters[].distinctBindings elements != null
return.predicateName != null
return.predicateName.toString == "mam"
size(return.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer$PredicatePair.getSecond():::ENTER
this.first != null
this.first.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" }
this.first.parameters[].boundValue.toString one of { [brambory], [orezavatko] }
this.first.predicateName.toString == "mam"
this.second != null
this.second.parameters[].boundValue elements != null
this.second.parameters[].boundValue.toString elements one of { "orezavatko", "penize" }
this.second.parameters[].boundValue.toString one of { [orezavatko], [penize] }
this.second.predicateName.toString == "mam"
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer$PredicatePair.getSecond():::EXIT
this.first == orig(this.first)
this.first.parameters == orig(this.first.parameters)
this.first.parameters.getClass().getName() == return.parameters.getClass().getName()
this.first.parameters[] == orig(this.first.parameters[])
this.first.parameters[].boundValue == orig(this.first.parameters[].boundValue)
this.first.parameters[].dependentBindings == orig(this.first.parameters[].dependentBindings)
this.first.parameters[].distinctBindings == orig(this.first.parameters[].distinctBindings)
this.first.predicateName == orig(this.first.predicateName)
this.first.predicateName.toString == orig(this.first.predicateName.toString)
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
this.second == return
this.second.parameters == return.parameters
this.second.parameters.getClass().getName() == return.parameters.getClass().getName()
this.second.parameters[] == orig(this.second.parameters[])
this.second.parameters[].boundValue == orig(this.second.parameters[].boundValue)
this.second.parameters[].dependentBindings == orig(this.second.parameters[].dependentBindings)
this.second.parameters[].distinctBindings == orig(this.second.parameters[].distinctBindings)
this.second.predicateName == return.predicateName
this.second.predicateName.toString == orig(this.second.predicateName.toString)
return == orig(this.second)
return.parameters == orig(this.second.parameters)
return.parameters.getClass().getName() == orig(this.first.parameters.getClass().getName())
return.parameters.getClass().getName() == orig(this.second.parameters.getClass().getName())
return.predicateName == orig(this.second.predicateName)
this.first != null
this.first.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" }
this.first.parameters[].boundValue.toString one of { [brambory], [orezavatko] }
this.first.predicateName.toString == "mam"
this.second.parameters[].boundValue elements != null
this.second.parameters[].boundValue.toString elements one of { "orezavatko", "penize" }
this.second.parameters[].boundValue.toString one of { [orezavatko], [penize] }
this.second.predicateName.toString == "mam"
return != null
return.parameters != null
return.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
return.parameters[] elements != null
return.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
return.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
return.parameters[].boundValue elements != null
return.parameters[].boundValue.toString elements one of { "orezavatko", "penize" }
return.parameters[].boundValue.toString one of { [orezavatko], [penize] }
return.parameters[].dependentBindings elements != null
return.parameters[].distinctBindings elements != null
return.predicateName != null
return.predicateName.toString == "mam"
size(return.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer$PredicatePair.reset(cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate):::ENTER
this.first.parameters.getClass().getName() == arg0.parameters.getClass().getName()
arg0.parameters.getClass().getName() == arg1.parameters.getClass().getName()
arg0 != null
arg0.parameters != null
arg0.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg0.parameters[] elements != null
arg0.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.parameters[].boundValue elements != null
arg0.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg0.parameters[].dependentBindings elements != null
arg0.parameters[].distinctBindings elements != null
arg0.predicateName != null
arg0.predicateName.toString one of { "mam", "zbozi" }
arg1 != null
arg1.parameters != null
arg1.parameters[] elements != null
arg1.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg1.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg1.parameters[].boundValue elements != null
arg1.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg1.parameters[].dependentBindings elements != null
arg1.parameters[].distinctBindings elements != null
arg1.predicateName != null
arg1.predicateName.toString one of { "mam", "zbozi" }
size(arg0.parameters[]) == 1
size(arg1.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer$PredicatePair.reset(cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate):::EXIT
this.first == orig(arg0)
this.first.parameters == arg0.parameters
this.first.parameters.getClass().getName() == arg0.parameters.getClass().getName()
this.first.parameters[].getClass().getName() == orig(this.first.parameters[].getClass().getName())
this.first.predicateName == arg0.predicateName
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
this.second == orig(arg1)
this.second.parameters == arg1.parameters
this.second.parameters.getClass().getName() == arg0.parameters.getClass().getName()
this.second.parameters[].getClass().getName() == orig(this.second.parameters[].getClass().getName())
this.second.predicateName == arg1.predicateName
arg0.parameters == orig(arg0.parameters)
arg0.parameters.getClass().getName() == arg1.parameters.getClass().getName()
arg0.parameters.getClass().getName() == orig(this.first.parameters.getClass().getName())
arg0.parameters.getClass().getName() == orig(arg0.parameters.getClass().getName())
arg0.parameters.getClass().getName() == orig(arg1.parameters.getClass().getName())
arg0.parameters[] == orig(arg0.parameters[])
arg0.parameters[].boundValue == orig(arg0.parameters[].boundValue)
arg0.parameters[].dependentBindings == orig(arg0.parameters[].dependentBindings)
arg0.parameters[].distinctBindings == orig(arg0.parameters[].distinctBindings)
arg0.predicateName == orig(arg0.predicateName)
arg0.predicateName.toString == orig(arg0.predicateName.toString)
arg1.parameters == orig(arg1.parameters)
arg1.parameters[] == orig(arg1.parameters[])
arg1.parameters[].boundValue == orig(arg1.parameters[].boundValue)
arg1.parameters[].dependentBindings == orig(arg1.parameters[].dependentBindings)
arg1.parameters[].distinctBindings == orig(arg1.parameters[].distinctBindings)
arg1.predicateName == orig(arg1.predicateName)
arg1.predicateName.toString == orig(arg1.predicateName.toString)
size(this.first.parameters[]) == orig(size(this.first.parameters[]))
size(this.second.parameters[]) == orig(size(this.second.parameters[]))
this.first != null
this.second != null
this.second.parameters[].boundValue elements != null
this.second.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg0.parameters != null
arg0.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg0.parameters[] elements != null
arg0.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.parameters[].boundValue elements != null
arg0.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg0.parameters[].dependentBindings elements != null
arg0.parameters[].distinctBindings elements != null
arg0.predicateName != null
arg0.predicateName.toString one of { "mam", "zbozi" }
arg1.parameters != null
arg1.parameters[] elements != null
arg1.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg1.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg1.parameters[].boundValue elements != null
arg1.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg1.parameters[].dependentBindings elements != null
arg1.parameters[].distinctBindings elements != null
arg1.predicateName != null
arg1.predicateName.toString one of { "mam", "zbozi" }
size(arg0.parameters[]) == 1
size(arg1.parameters[]) == 1
this.first.parameters[].getClass().getName() == orig(this.first.parameters[].getClass().getName()) (elementwise)
this.second.parameters[].getClass().getName() == orig(this.second.parameters[].getClass().getName()) (elementwise)
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer:::OBJECT
this.isMutexHelperPair != null
this.isMutexHelperPair.first.parameters != null
this.isMutexHelperPair.first.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
this.isMutexHelperPair.first.parameters[] elements != null
this.isMutexHelperPair.first.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
this.isMutexHelperPair.first.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
this.isMutexHelperPair.first.parameters[].boundValue elements != null
this.isMutexHelperPair.first.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
this.isMutexHelperPair.first.parameters[].dependentBindings elements != null
this.isMutexHelperPair.first.parameters[].distinctBindings elements != null
this.isMutexHelperPair.first.predicateName != null
this.isMutexHelperPair.first.predicateName.toString one of { "mam", "zbozi" }
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == false
this.isMutexHelperPair.second.parameters != null
this.isMutexHelperPair.second.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
this.isMutexHelperPair.second.parameters[] elements != null
this.isMutexHelperPair.second.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
this.isMutexHelperPair.second.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
this.isMutexHelperPair.second.parameters[].dependentBindings elements != null
this.isMutexHelperPair.second.parameters[].distinctBindings elements != null
this.isMutexHelperPair.second.predicateName != null
this.isMutexHelperPair.second.predicateName.toString one of { "mam", "zbozi" }
this.predicates != null
this.predicates[] elements != null
this.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(this.isMutexHelperPair.first.parameters[]) == 1
size(this.isMutexHelperPair.second.parameters[]) == 1
size(this.predicates[])-1 != 0
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.PredicateLayer():::EXIT
this.isMutexHelperPair.first == null
this.isMutexHelperPair.second == null
this.predicates[] == []
this.predicates[].getClass().getName() == []
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.addMutex(cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate):::ENTER
this.isMutexHelperPair.first.predicateName.toString == "mam"
this.isMutexHelperPair.second.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
this.isMutexHelperPair.second.predicateName.toString == "mam"
this.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg0.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg0.predicateName.toString == "mam"
arg1.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg1.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg1.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg1.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg1.predicateName.toString == "mam"
size(this.predicates[]) one of { 4, 5 }
size(arg0.parameters[]) == 1
size(arg1.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.addMutex(cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate):::EXIT166
this.isMutexHelperPair.first.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" }
this.isMutexHelperPair.first.parameters[].boundValue.toString one of { [brambory], [orezavatko] }
this.isMutexHelperPair.second.parameters[].boundValue.toString elements one of { "orezavatko", "penize" }
this.isMutexHelperPair.second.parameters[].boundValue.toString one of { [orezavatko], [penize] }
arg0.parameters[].boundValue.toString elements one of { "orezavatko", "penize" }
arg0.parameters[].boundValue.toString one of { [orezavatko], [penize] }
arg1.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" }
arg1.parameters[].boundValue.toString one of { [brambory], [orezavatko] }
orig(this.isMutexHelperPair.first.parameters[].boundValue.toString) elements one of { "brambory", "penize" }
orig(this.isMutexHelperPair.first.parameters[].boundValue.toString) one of { [brambory], [penize] }
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.addMutex(cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate):::EXIT168
this.isMutexHelperPair.second.parameters == orig(this.isMutexHelperPair.second.parameters)
this.isMutexHelperPair.second.parameters[].boundValue.toString == orig(this.isMutexHelperPair.second.parameters[].boundValue.toString)
this.isMutexHelperPair.second.predicateName == orig(this.isMutexHelperPair.second.predicateName)
this.isMutexHelperPair.first.parameters[].boundValue.toString elements one of { "orezavatko", "penize" }
this.isMutexHelperPair.first.parameters[].boundValue.toString one of { [orezavatko], [penize] }
this.isMutexHelperPair.second.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" }
this.isMutexHelperPair.second.parameters[].boundValue.toString one of { [brambory], [orezavatko] }
arg0.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" }
arg0.parameters[].boundValue.toString one of { [brambory], [orezavatko] }
arg1.parameters[].boundValue.toString elements one of { "orezavatko", "penize" }
arg1.parameters[].boundValue.toString one of { [orezavatko], [penize] }
orig(this.isMutexHelperPair.first.parameters[].boundValue.toString) elements one of { "brambory", "orezavatko" }
orig(this.isMutexHelperPair.first.parameters[].boundValue.toString) one of { [brambory], [orezavatko] }
orig(this.isMutexHelperPair.first.predicateName) has only one value
orig(this.isMutexHelperPair.second.parameters[].boundValue.toString) elements one of { "brambory", "orezavatko" }
orig(this.isMutexHelperPair.second.parameters[].boundValue.toString) one of { [brambory], [orezavatko] }
orig(this.isMutexHelperPair.second.predicateName) has only one value
this.isMutexHelperPair.second.parameters[] == orig(this.isMutexHelperPair.second.parameters[]) (elementwise)
this.isMutexHelperPair.second.parameters[] is the reverse of orig(this.isMutexHelperPair.second.parameters[])
this.isMutexHelperPair.second.parameters[].boundValue == orig(this.isMutexHelperPair.second.parameters[].boundValue) (elementwise)
this.isMutexHelperPair.second.parameters[].boundValue is the reverse of orig(this.isMutexHelperPair.second.parameters[].boundValue)
this.isMutexHelperPair.second.parameters[].boundValue.toString == orig(this.isMutexHelperPair.second.parameters[].boundValue.toString) (elementwise)
this.isMutexHelperPair.second.parameters[].dependentBindings == orig(this.isMutexHelperPair.second.parameters[].dependentBindings) (elementwise)
this.isMutexHelperPair.second.parameters[].dependentBindings is the reverse of orig(this.isMutexHelperPair.second.parameters[].dependentBindings)
this.isMutexHelperPair.second.parameters[].distinctBindings == orig(this.isMutexHelperPair.second.parameters[].distinctBindings) (elementwise)
this.isMutexHelperPair.second.parameters[].distinctBindings is the reverse of orig(this.isMutexHelperPair.second.parameters[].distinctBindings)
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.addMutex(cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate):::EXIT
this.mutexes == orig(this.mutexes)
this.isMutexHelperPair == orig(this.isMutexHelperPair)
this.isMutexHelperPair.first.parameters.getClass().getName() == orig(this.isMutexHelperPair.first.parameters.getClass().getName())
this.isMutexHelperPair.first.parameters[].getClass().getName() == orig(this.isMutexHelperPair.first.parameters[].getClass().getName())
this.isMutexHelperPair.first.predicateName.toString == orig(this.isMutexHelperPair.first.predicateName.toString)
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
this.isMutexHelperPair.second.parameters.getClass().getName() == orig(this.isMutexHelperPair.second.parameters.getClass().getName())
this.isMutexHelperPair.second.parameters[].getClass().getName() == orig(this.isMutexHelperPair.second.parameters[].getClass().getName())
this.isMutexHelperPair.second.predicateName.toString == orig(this.isMutexHelperPair.second.predicateName.toString)
this.predicates == orig(this.predicates)
this.predicates[] == orig(this.predicates[])
arg0.parameters == orig(arg0.parameters)
arg0.parameters.getClass().getName() == orig(arg0.parameters.getClass().getName())
arg0.parameters[] == orig(arg0.parameters[])
arg0.parameters[].boundValue == orig(arg0.parameters[].boundValue)
arg0.parameters[].dependentBindings == orig(arg0.parameters[].dependentBindings)
arg0.parameters[].distinctBindings == orig(arg0.parameters[].distinctBindings)
arg0.predicateName == orig(arg0.predicateName)
arg0.predicateName.toString == orig(arg0.predicateName.toString)
arg1.parameters == orig(arg1.parameters)
arg1.parameters.getClass().getName() == orig(arg1.parameters.getClass().getName())
arg1.parameters[] == orig(arg1.parameters[])
arg1.parameters[].boundValue == orig(arg1.parameters[].boundValue)
arg1.parameters[].dependentBindings == orig(arg1.parameters[].dependentBindings)
arg1.parameters[].distinctBindings == orig(arg1.parameters[].distinctBindings)
arg1.predicateName == orig(arg1.predicateName)
arg1.predicateName.toString == orig(arg1.predicateName.toString)
size(this.isMutexHelperPair.first.parameters[]) == orig(size(this.isMutexHelperPair.first.parameters[]))
size(this.isMutexHelperPair.second.parameters[]) == orig(size(this.isMutexHelperPair.second.parameters[]))
this.isMutexHelperPair.first.predicateName.toString == "mam"
this.isMutexHelperPair.second.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
this.isMutexHelperPair.second.predicateName.toString == "mam"
this.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg0.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg0.predicateName.toString == "mam"
arg1.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg1.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg1.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg1.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg1.predicateName.toString == "mam"
size(this.predicates[]) one of { 4, 5 }
size(arg0.parameters[]) == 1
size(arg1.parameters[]) == 1
this.isMutexHelperPair.first.parameters[].getClass().getName() == orig(this.isMutexHelperPair.first.parameters[].getClass().getName()) (elementwise)
this.isMutexHelperPair.second.parameters[].getClass().getName() == orig(this.isMutexHelperPair.second.parameters[].getClass().getName()) (elementwise)
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.buildActionLayer(java.lang.Iterable):::ENTER
this.isMutexHelperPair.first.parameters has only one value
this.isMutexHelperPair.first.parameters[] contains no nulls and has only one value, of length 1
this.isMutexHelperPair.first.parameters[] elements has only one value
this.isMutexHelperPair.first.parameters[].boundValue contains no nulls and has only one value, of length 1
this.isMutexHelperPair.first.parameters[].boundValue elements has only one value
this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko]
this.isMutexHelperPair.first.parameters[].boundValue.toString elements == "orezavatko"
this.isMutexHelperPair.first.parameters[].dependentBindings contains no nulls and has only one value, of length 1
this.isMutexHelperPair.first.parameters[].dependentBindings elements has only one value
this.isMutexHelperPair.first.parameters[].distinctBindings contains no nulls and has only one value, of length 1
this.isMutexHelperPair.first.parameters[].distinctBindings elements has only one value
this.isMutexHelperPair.first.predicateName has only one value
this.isMutexHelperPair.first.predicateName.toString == "mam"
this.isMutexHelperPair.second.parameters has only one value
this.isMutexHelperPair.second.parameters[] contains no nulls and has only one value, of length 1
this.isMutexHelperPair.second.parameters[] elements has only one value
this.isMutexHelperPair.second.parameters[].boundValue contains no nulls and has only one value, of length 1
this.isMutexHelperPair.second.parameters[].boundValue elements has only one value
this.isMutexHelperPair.second.parameters[].boundValue.toString == [penize]
this.isMutexHelperPair.second.parameters[].boundValue.toString elements == "penize"
this.isMutexHelperPair.second.parameters[].dependentBindings contains no nulls and has only one value, of length 1
this.isMutexHelperPair.second.parameters[].dependentBindings elements has only one value
this.isMutexHelperPair.second.parameters[].distinctBindings contains no nulls and has only one value, of length 1
this.isMutexHelperPair.second.parameters[].distinctBindings elements has only one value
this.isMutexHelperPair.second.predicateName has only one value
this.isMutexHelperPair.second.predicateName.toString == "mam"
this.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0 has only one value
arg0.getClass().getName() == java.util.ArrayList.class
size(this.predicates[]) one of { 3, 4 }
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.buildActionLayer(java.lang.Iterable):::EXIT
this.mutexes == orig(this.mutexes)
this.isMutexHelperPair == orig(this.isMutexHelperPair)
this.isMutexHelperPair.first.parameters == orig(this.isMutexHelperPair.first.parameters)
this.isMutexHelperPair.first.parameters.getClass().getName() == orig(this.isMutexHelperPair.first.parameters.getClass().getName())
this.isMutexHelperPair.first.parameters[].getClass().getName() == orig(this.isMutexHelperPair.first.parameters[].getClass().getName())
this.isMutexHelperPair.first.parameters[].boundValue.toString == orig(this.isMutexHelperPair.first.parameters[].boundValue.toString)
this.isMutexHelperPair.first.predicateName == orig(this.isMutexHelperPair.first.predicateName)
this.isMutexHelperPair.first.predicateName.toString == orig(this.isMutexHelperPair.first.predicateName.toString)
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
this.isMutexHelperPair.second.parameters.getClass().getName() == orig(this.isMutexHelperPair.second.parameters.getClass().getName())
this.isMutexHelperPair.second.parameters[].getClass().getName() == orig(this.isMutexHelperPair.second.parameters[].getClass().getName())
this.predicates == orig(this.predicates)
this.predicates[] == orig(this.predicates[])
size(this.isMutexHelperPair.second.parameters[]) == orig(size(this.isMutexHelperPair.second.parameters[]))
this.isMutexHelperPair.first.parameters[].boundValue contains no nulls and has only one value, of length 1
this.isMutexHelperPair.first.parameters[].boundValue elements has only one value
this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko]
this.isMutexHelperPair.first.parameters[].boundValue.toString elements == "orezavatko"
this.isMutexHelperPair.first.predicateName has only one value
this.isMutexHelperPair.first.predicateName.toString == "mam"
this.isMutexHelperPair.second has only one value
this.isMutexHelperPair.second.parameters has only one value
this.isMutexHelperPair.second.parameters[] contains no nulls and has only one value, of length 1
this.isMutexHelperPair.second.parameters[] elements has only one value
this.isMutexHelperPair.second.parameters[].boundValue == [null]
this.isMutexHelperPair.second.parameters[].boundValue elements == null
this.isMutexHelperPair.second.parameters[].boundValue.toString == [null]
this.isMutexHelperPair.second.parameters[].boundValue.toString elements == null
this.isMutexHelperPair.second.parameters[].dependentBindings contains no nulls and has only one value, of length 1
this.isMutexHelperPair.second.parameters[].dependentBindings elements has only one value
this.isMutexHelperPair.second.parameters[].distinctBindings contains no nulls and has only one value, of length 1
this.isMutexHelperPair.second.parameters[].distinctBindings elements has only one value
this.isMutexHelperPair.second.predicateName has only one value
this.isMutexHelperPair.second.predicateName.toString == "zbozi"
this.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
return.actions[].getClass().getName() elements == cz.matfyz.sykora.planning.Action.class
return.actions[].getClass().getName() one of { [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action], [cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action, cz.matfyz.sykora.planning.Action] }
size(this.predicates[]) one of { 3, 4 }
size(return.actions[]) one of { 4, 7 }
this.isMutexHelperPair.first.parameters[] == orig(this.isMutexHelperPair.first.parameters[]) (elementwise)
this.isMutexHelperPair.first.parameters[] is the reverse of orig(this.isMutexHelperPair.first.parameters[])
this.isMutexHelperPair.first.parameters[].getClass().getName() == orig(this.isMutexHelperPair.first.parameters[].getClass().getName()) (elementwise)
this.isMutexHelperPair.first.parameters[].boundValue == orig(this.isMutexHelperPair.first.parameters[].boundValue) (elementwise)
this.isMutexHelperPair.first.parameters[].boundValue is the reverse of orig(this.isMutexHelperPair.first.parameters[].boundValue)
this.isMutexHelperPair.first.parameters[].boundValue.toString == orig(this.isMutexHelperPair.first.parameters[].boundValue.toString) (elementwise)
this.isMutexHelperPair.first.parameters[].dependentBindings == orig(this.isMutexHelperPair.first.parameters[].dependentBindings) (elementwise)
this.isMutexHelperPair.first.parameters[].dependentBindings is the reverse of orig(this.isMutexHelperPair.first.parameters[].dependentBindings)
this.isMutexHelperPair.first.parameters[].distinctBindings == orig(this.isMutexHelperPair.first.parameters[].distinctBindings) (elementwise)
this.isMutexHelperPair.first.parameters[].distinctBindings is the reverse of orig(this.isMutexHelperPair.first.parameters[].distinctBindings)
this.isMutexHelperPair.second.parameters[].getClass().getName() == orig(this.isMutexHelperPair.second.parameters[].getClass().getName()) (elementwise)
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.contains(cz.matfyz.sykora.planning.predicate.PredicateSet):::ENTER
this.isMutexHelperPair.first.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" }
this.isMutexHelperPair.first.parameters[].boundValue.toString one of { [brambory], [orezavatko] }
this.isMutexHelperPair.first.predicateName.toString == "mam"
this.isMutexHelperPair.second.parameters[].boundValue.toString elements one of { null, "brambory", "penize" }
this.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
size(this.predicates[]) one of { 4, 5 }
size(arg0.predicates[]) one of { 1, 2 }
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.contains(cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT224
this.isMutexHelperPair.first == orig(this.isMutexHelperPair.first)
this.isMutexHelperPair.first.parameters == orig(this.isMutexHelperPair.first.parameters)
this.isMutexHelperPair.first.parameters[] == orig(this.isMutexHelperPair.first.parameters[])
this.isMutexHelperPair.first.parameters[].boundValue == orig(this.isMutexHelperPair.first.parameters[].boundValue)
this.isMutexHelperPair.first.parameters[].dependentBindings == orig(this.isMutexHelperPair.first.parameters[].dependentBindings)
this.isMutexHelperPair.first.parameters[].distinctBindings == orig(this.isMutexHelperPair.first.parameters[].distinctBindings)
this.isMutexHelperPair.first.predicateName == orig(this.isMutexHelperPair.first.predicateName)
this.isMutexHelperPair.first.predicateName.toString == orig(this.isMutexHelperPair.first.predicateName.toString)
this.isMutexHelperPair.second == orig(this.isMutexHelperPair.second)
this.isMutexHelperPair.second.parameters == orig(this.isMutexHelperPair.second.parameters)
this.isMutexHelperPair.second.parameters[] == orig(this.isMutexHelperPair.second.parameters[])
this.isMutexHelperPair.second.parameters[].boundValue == orig(this.isMutexHelperPair.second.parameters[].boundValue)
this.isMutexHelperPair.second.parameters[].dependentBindings == orig(this.isMutexHelperPair.second.parameters[].dependentBindings)
this.isMutexHelperPair.second.parameters[].distinctBindings == orig(this.isMutexHelperPair.second.parameters[].distinctBindings)
this.isMutexHelperPair.second.predicateName == orig(this.isMutexHelperPair.second.predicateName)
this.mutexes has only one value
this.isMutexHelperPair has only one value
this.isMutexHelperPair.first has only one value
this.isMutexHelperPair.first.parameters has only one value
this.isMutexHelperPair.first.parameters[] contains no nulls and has only one value, of length 1
this.isMutexHelperPair.first.parameters[] elements has only one value
this.isMutexHelperPair.first.parameters[].boundValue contains no nulls and has only one value, of length 1
this.isMutexHelperPair.first.parameters[].boundValue elements has only one value
this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko]
this.isMutexHelperPair.first.parameters[].boundValue.toString elements == "orezavatko"
this.isMutexHelperPair.first.parameters[].dependentBindings contains no nulls and has only one value, of length 1
this.isMutexHelperPair.first.parameters[].dependentBindings elements has only one value
this.isMutexHelperPair.first.parameters[].distinctBindings contains no nulls and has only one value, of length 1
this.isMutexHelperPair.first.parameters[].distinctBindings elements has only one value
this.isMutexHelperPair.first.predicateName has only one value
this.isMutexHelperPair.first.predicateName.toString == "mam"
this.isMutexHelperPair.second has only one value
this.isMutexHelperPair.second.parameters has only one value
this.isMutexHelperPair.second.parameters[] contains no nulls and has only one value, of length 1
this.isMutexHelperPair.second.parameters[] elements has only one value
this.isMutexHelperPair.second.parameters[].boundValue contains no nulls and has only one value, of length 1
this.isMutexHelperPair.second.parameters[].boundValue elements has only one value
this.isMutexHelperPair.second.parameters[].boundValue.toString == [penize]
this.isMutexHelperPair.second.parameters[].boundValue.toString elements == "penize"
this.isMutexHelperPair.second.parameters[].dependentBindings contains no nulls and has only one value, of length 1
this.isMutexHelperPair.second.parameters[].dependentBindings elements has only one value
this.isMutexHelperPair.second.parameters[].distinctBindings contains no nulls and has only one value, of length 1
this.isMutexHelperPair.second.parameters[].distinctBindings elements has only one value
this.isMutexHelperPair.second.predicateName has only one value
this.isMutexHelperPair.second.predicateName.toString == "mam"
this.predicates has only one value
this.predicates[] contains no nulls and has only one value, of length 4
this.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
arg0.predicates has only one value
arg0.predicates[] contains no nulls and has only one value, of length 1
arg0.predicates[] elements has only one value
arg0.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
return == false
orig(this) has only one value
orig(arg0) has only one value
size(this.predicates[]) == 4
size(arg0.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.contains(cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT224;condition="not(return == true)"
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.contains(cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT229
this.isMutexHelperPair.first.parameters[].boundValue.toString == [brambory]
this.isMutexHelperPair.first.parameters[].boundValue.toString elements == "brambory"
this.isMutexHelperPair.second.parameters[].boundValue.toString == [brambory]
this.isMutexHelperPair.second.parameters[].boundValue.toString elements == "brambory"
return == true
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.contains(cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT229;condition="return == true"
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.contains(cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT
this.mutexes == orig(this.mutexes)
this.isMutexHelperPair == orig(this.isMutexHelperPair)
this.isMutexHelperPair.first.parameters.getClass().getName() == orig(this.isMutexHelperPair.first.parameters.getClass().getName())
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
this.isMutexHelperPair.second.parameters.getClass().getName() == orig(this.isMutexHelperPair.second.parameters.getClass().getName())
this.isMutexHelperPair.second.predicateName.toString == orig(this.isMutexHelperPair.second.predicateName.toString)
this.predicates == orig(this.predicates)
this.predicates[] == orig(this.predicates[])
arg0.predicates == orig(arg0.predicates)
arg0.predicates[] == orig(arg0.predicates[])
size(this.isMutexHelperPair.first.parameters[]) == orig(size(this.isMutexHelperPair.first.parameters[]))
size(this.isMutexHelperPair.second.parameters[]) == orig(size(this.isMutexHelperPair.second.parameters[]))
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [brambory])  <==>  (return == true)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [brambory])  <==>  (this.isMutexHelperPair.first.parameters[].boundValue.toString elements == "brambory")
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [brambory])  <==>  (this.isMutexHelperPair.second.parameters[].boundValue.toString == [brambory])
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [brambory])  <==>  (this.isMutexHelperPair.second.parameters[].boundValue.toString elements == "brambory")
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [brambory])  ==>  (arg0.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] })
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [brambory])  ==>  (orig(this.isMutexHelperPair.first.parameters[].boundValue.toString) elements one of { "brambory", "orezavatko" })
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [brambory])  ==>  (orig(this.isMutexHelperPair.first.parameters[].boundValue.toString) one of { [brambory], [orezavatko] })
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [brambory])  ==>  (orig(this.isMutexHelperPair.second.parameters[].boundValue.toString) elements one of { null, "brambory", "penize" })
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [brambory])  ==>  (size(arg0.predicates[]) one of { 1, 2 })
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [brambory])  ==>  (size(this.predicates[]) one of { 4, 5 })
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [brambory])  ==>  (this.isMutexHelperPair.first.predicateName.toString one of { "mam", "zbozi" })
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [brambory])  ==>  (this.isMutexHelperPair.second.predicateName.toString one of { "mam", "zbozi" })
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [brambory])  ==>  (this.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] })
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  <==>  (return == false)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  <==>  (this.isMutexHelperPair.first.parameters[].boundValue.toString elements == "orezavatko")
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  <==>  (this.isMutexHelperPair.second.parameters[].boundValue.toString == [penize])
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  <==>  (this.isMutexHelperPair.second.parameters[].boundValue.toString elements == "penize")
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (arg0.predicates has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (arg0.predicates[] contains no nulls and has only one value, of length 1)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (arg0.predicates[] elements has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (arg0.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate])
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(arg0) has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this) has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.first) has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.first.parameters) has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.first.parameters[]) contains no nulls and has only one value, of length 1)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.first.parameters[]) elements has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.first.parameters[].boundValue) contains no nulls and has only one value, of length 1)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.first.parameters[].boundValue) elements has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.first.parameters[].boundValue.toString) == [orezavatko])
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.first.parameters[].boundValue.toString) elements == "orezavatko")
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.first.parameters[].dependentBindings) contains no nulls and has only one value, of length 1)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.first.parameters[].dependentBindings) elements has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.first.parameters[].distinctBindings) contains no nulls and has only one value, of length 1)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.first.parameters[].distinctBindings) elements has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.first.predicateName) has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.second) has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.second.parameters) has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.second.parameters[]) contains no nulls and has only one value, of length 1)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.second.parameters[]) elements has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.second.parameters[].boundValue) contains no nulls and has only one value, of length 1)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.second.parameters[].boundValue) elements has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.second.parameters[].boundValue.toString) == [penize])
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.second.parameters[].boundValue.toString) elements == "penize")
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.second.parameters[].dependentBindings) contains no nulls and has only one value, of length 1)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.second.parameters[].dependentBindings) elements has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.second.parameters[].distinctBindings) contains no nulls and has only one value, of length 1)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.second.parameters[].distinctBindings) elements has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (orig(this.isMutexHelperPair.second.predicateName) has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (size(arg0.predicates[]) == 1)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (size(this.predicates[]) == 4)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.first == orig(this.isMutexHelperPair.first))
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.first has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.first.parameters == orig(this.isMutexHelperPair.first.parameters))
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.first.parameters has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.first.parameters[] == orig(this.isMutexHelperPair.first.parameters[]))
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.first.parameters[] contains no nulls and has only one value, of length 1)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.first.parameters[] elements has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.first.parameters[].boundValue == orig(this.isMutexHelperPair.first.parameters[].boundValue))
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.first.parameters[].boundValue contains no nulls and has only one value, of length 1)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.first.parameters[].boundValue elements has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.first.parameters[].dependentBindings == orig(this.isMutexHelperPair.first.parameters[].dependentBindings))
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.first.parameters[].dependentBindings contains no nulls and has only one value, of length 1)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.first.parameters[].dependentBindings elements has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.first.parameters[].distinctBindings == orig(this.isMutexHelperPair.first.parameters[].distinctBindings))
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.first.parameters[].distinctBindings contains no nulls and has only one value, of length 1)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.first.parameters[].distinctBindings elements has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.first.predicateName == orig(this.isMutexHelperPair.first.predicateName))
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.first.predicateName has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.first.predicateName.toString == "mam")
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.first.predicateName.toString == orig(this.isMutexHelperPair.first.predicateName.toString))
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.second == orig(this.isMutexHelperPair.second))
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.second has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.second.parameters == orig(this.isMutexHelperPair.second.parameters))
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.second.parameters has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.second.parameters[] == orig(this.isMutexHelperPair.second.parameters[]))
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.second.parameters[] contains no nulls and has only one value, of length 1)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.second.parameters[] elements has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.second.parameters[].boundValue == orig(this.isMutexHelperPair.second.parameters[].boundValue))
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.second.parameters[].boundValue contains no nulls and has only one value, of length 1)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.second.parameters[].boundValue elements has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.second.parameters[].dependentBindings == orig(this.isMutexHelperPair.second.parameters[].dependentBindings))
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.second.parameters[].dependentBindings contains no nulls and has only one value, of length 1)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.second.parameters[].dependentBindings elements has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.second.parameters[].distinctBindings == orig(this.isMutexHelperPair.second.parameters[].distinctBindings))
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.second.parameters[].distinctBindings contains no nulls and has only one value, of length 1)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.second.parameters[].distinctBindings elements has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.second.predicateName == orig(this.isMutexHelperPair.second.predicateName))
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.second.predicateName has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.isMutexHelperPair.second.predicateName.toString == "mam")
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.mutexes has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.predicates has only one value)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.predicates[] contains no nulls and has only one value, of length 4)
(this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko])  ==>  (this.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate])
this.isMutexHelperPair.first.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" }
this.isMutexHelperPair.first.parameters[].boundValue.toString one of { [brambory], [orezavatko] }
this.isMutexHelperPair.second.parameters[].boundValue.toString elements one of { "brambory", "penize" }
this.isMutexHelperPair.second.parameters[].boundValue.toString one of { [brambory], [penize] }
this.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
size(this.predicates[]) one of { 4, 5 }
size(arg0.predicates[]) one of { 1, 2 }
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.contains(cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT;condition="return == true"
this.isMutexHelperPair.first.parameters[].boundValue.toString == [brambory]
this.isMutexHelperPair.first.parameters[].boundValue.toString elements == "brambory"
this.isMutexHelperPair.second.parameters[].boundValue.toString == [brambory]
this.isMutexHelperPair.second.parameters[].boundValue.toString elements == "brambory"
return == true
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.contains(cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT;condition="not(return == true)"
this.isMutexHelperPair.first == orig(this.isMutexHelperPair.first)
this.isMutexHelperPair.first.parameters == orig(this.isMutexHelperPair.first.parameters)
this.isMutexHelperPair.first.parameters[] == orig(this.isMutexHelperPair.first.parameters[])
this.isMutexHelperPair.first.parameters[].boundValue == orig(this.isMutexHelperPair.first.parameters[].boundValue)
this.isMutexHelperPair.first.parameters[].dependentBindings == orig(this.isMutexHelperPair.first.parameters[].dependentBindings)
this.isMutexHelperPair.first.parameters[].distinctBindings == orig(this.isMutexHelperPair.first.parameters[].distinctBindings)
this.isMutexHelperPair.first.predicateName == orig(this.isMutexHelperPair.first.predicateName)
this.isMutexHelperPair.first.predicateName.toString == orig(this.isMutexHelperPair.first.predicateName.toString)
this.isMutexHelperPair.second == orig(this.isMutexHelperPair.second)
this.isMutexHelperPair.second.parameters == orig(this.isMutexHelperPair.second.parameters)
this.isMutexHelperPair.second.parameters[] == orig(this.isMutexHelperPair.second.parameters[])
this.isMutexHelperPair.second.parameters[].boundValue == orig(this.isMutexHelperPair.second.parameters[].boundValue)
this.isMutexHelperPair.second.parameters[].dependentBindings == orig(this.isMutexHelperPair.second.parameters[].dependentBindings)
this.isMutexHelperPair.second.parameters[].distinctBindings == orig(this.isMutexHelperPair.second.parameters[].distinctBindings)
this.isMutexHelperPair.second.predicateName == orig(this.isMutexHelperPair.second.predicateName)
this.mutexes has only one value
this.isMutexHelperPair has only one value
this.isMutexHelperPair.first has only one value
this.isMutexHelperPair.first.parameters has only one value
this.isMutexHelperPair.first.parameters[] contains no nulls and has only one value, of length 1
this.isMutexHelperPair.first.parameters[] elements has only one value
this.isMutexHelperPair.first.parameters[].boundValue contains no nulls and has only one value, of length 1
this.isMutexHelperPair.first.parameters[].boundValue elements has only one value
this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko]
this.isMutexHelperPair.first.parameters[].boundValue.toString elements == "orezavatko"
this.isMutexHelperPair.first.parameters[].dependentBindings contains no nulls and has only one value, of length 1
this.isMutexHelperPair.first.parameters[].dependentBindings elements has only one value
this.isMutexHelperPair.first.parameters[].distinctBindings contains no nulls and has only one value, of length 1
this.isMutexHelperPair.first.parameters[].distinctBindings elements has only one value
this.isMutexHelperPair.first.predicateName has only one value
this.isMutexHelperPair.first.predicateName.toString == "mam"
this.isMutexHelperPair.second has only one value
this.isMutexHelperPair.second.parameters has only one value
this.isMutexHelperPair.second.parameters[] contains no nulls and has only one value, of length 1
this.isMutexHelperPair.second.parameters[] elements has only one value
this.isMutexHelperPair.second.parameters[].boundValue contains no nulls and has only one value, of length 1
this.isMutexHelperPair.second.parameters[].boundValue elements has only one value
this.isMutexHelperPair.second.parameters[].boundValue.toString == [penize]
this.isMutexHelperPair.second.parameters[].boundValue.toString elements == "penize"
this.isMutexHelperPair.second.parameters[].dependentBindings contains no nulls and has only one value, of length 1
this.isMutexHelperPair.second.parameters[].dependentBindings elements has only one value
this.isMutexHelperPair.second.parameters[].distinctBindings contains no nulls and has only one value, of length 1
this.isMutexHelperPair.second.parameters[].distinctBindings elements has only one value
this.isMutexHelperPair.second.predicateName has only one value
this.isMutexHelperPair.second.predicateName.toString == "mam"
this.predicates has only one value
this.predicates[] contains no nulls and has only one value, of length 4
this.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
arg0.predicates has only one value
arg0.predicates[] contains no nulls and has only one value, of length 1
arg0.predicates[] elements has only one value
arg0.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
return == false
orig(this) has only one value
orig(arg0) has only one value
size(this.predicates[]) == 4
size(arg0.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.equals(java.lang.Object):::ENTER
this.isMutexHelperPair.first.parameters[].boundValue contains no nulls and has only one value, of length 1
this.isMutexHelperPair.first.parameters[].boundValue elements has only one value
this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko]
this.isMutexHelperPair.first.parameters[].boundValue.toString elements == "orezavatko"
this.isMutexHelperPair.first.predicateName has only one value
this.isMutexHelperPair.first.predicateName.toString == "mam"
this.isMutexHelperPair.second has only one value
this.isMutexHelperPair.second.parameters has only one value
this.isMutexHelperPair.second.parameters[] contains no nulls and has only one value, of length 1
this.isMutexHelperPair.second.parameters[] elements has only one value
this.isMutexHelperPair.second.parameters[].boundValue == [null]
this.isMutexHelperPair.second.parameters[].boundValue elements == null
this.isMutexHelperPair.second.parameters[].boundValue.toString == [null]
this.isMutexHelperPair.second.parameters[].boundValue.toString elements == null
this.isMutexHelperPair.second.parameters[].dependentBindings contains no nulls and has only one value, of length 1
this.isMutexHelperPair.second.parameters[].dependentBindings elements has only one value
this.isMutexHelperPair.second.parameters[].distinctBindings contains no nulls and has only one value, of length 1
this.isMutexHelperPair.second.parameters[].distinctBindings elements has only one value
this.isMutexHelperPair.second.predicateName has only one value
this.isMutexHelperPair.second.predicateName.toString == "zbozi"
this.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.getClass().getName() == cz.matfyz.sykora.planning.graph.PredicateLayer.class
size(this.predicates[]) one of { 3, 4 }
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.equals(java.lang.Object):::EXIT247
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.equals(java.lang.Object):::EXIT247;condition="not(return == true)"
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.equals(java.lang.Object):::EXIT
this.mutexes == orig(this.mutexes)
this.isMutexHelperPair == orig(this.isMutexHelperPair)
this.isMutexHelperPair.first == orig(this.isMutexHelperPair.first)
this.isMutexHelperPair.first.parameters == orig(this.isMutexHelperPair.first.parameters)
this.isMutexHelperPair.first.parameters.getClass().getName() == orig(this.isMutexHelperPair.first.parameters.getClass().getName())
this.isMutexHelperPair.first.parameters[] == orig(this.isMutexHelperPair.first.parameters[])
this.isMutexHelperPair.first.parameters[].boundValue == orig(this.isMutexHelperPair.first.parameters[].boundValue)
this.isMutexHelperPair.first.parameters[].dependentBindings == orig(this.isMutexHelperPair.first.parameters[].dependentBindings)
this.isMutexHelperPair.first.parameters[].distinctBindings == orig(this.isMutexHelperPair.first.parameters[].distinctBindings)
this.isMutexHelperPair.first.predicateName == orig(this.isMutexHelperPair.first.predicateName)
this.isMutexHelperPair.first.predicateName.toString == orig(this.isMutexHelperPair.first.predicateName.toString)
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
this.isMutexHelperPair.second == orig(this.isMutexHelperPair.second)
this.isMutexHelperPair.second.parameters == orig(this.isMutexHelperPair.second.parameters)
this.isMutexHelperPair.second.parameters.getClass().getName() == orig(this.isMutexHelperPair.second.parameters.getClass().getName())
this.isMutexHelperPair.second.parameters[] == orig(this.isMutexHelperPair.second.parameters[])
this.isMutexHelperPair.second.parameters[].boundValue == orig(this.isMutexHelperPair.second.parameters[].boundValue)
this.isMutexHelperPair.second.parameters[].dependentBindings == orig(this.isMutexHelperPair.second.parameters[].dependentBindings)
this.isMutexHelperPair.second.parameters[].distinctBindings == orig(this.isMutexHelperPair.second.parameters[].distinctBindings)
this.isMutexHelperPair.second.predicateName == orig(this.isMutexHelperPair.second.predicateName)
this.isMutexHelperPair.second.predicateName.toString == orig(this.isMutexHelperPair.second.predicateName.toString)
this.predicates == orig(this.predicates)
this.predicates[] == orig(this.predicates[])
this.isMutexHelperPair.first.parameters[].boundValue contains no nulls and has only one value, of length 1
this.isMutexHelperPair.first.parameters[].boundValue elements has only one value
this.isMutexHelperPair.first.parameters[].boundValue.toString == [orezavatko]
this.isMutexHelperPair.first.parameters[].boundValue.toString elements == "orezavatko"
this.isMutexHelperPair.first.predicateName has only one value
this.isMutexHelperPair.first.predicateName.toString == "mam"
this.isMutexHelperPair.second has only one value
this.isMutexHelperPair.second.parameters has only one value
this.isMutexHelperPair.second.parameters[] contains no nulls and has only one value, of length 1
this.isMutexHelperPair.second.parameters[] elements has only one value
this.isMutexHelperPair.second.parameters[].boundValue == [null]
this.isMutexHelperPair.second.parameters[].boundValue elements == null
this.isMutexHelperPair.second.parameters[].boundValue.toString == [null]
this.isMutexHelperPair.second.parameters[].boundValue.toString elements == null
this.isMutexHelperPair.second.parameters[].dependentBindings contains no nulls and has only one value, of length 1
this.isMutexHelperPair.second.parameters[].dependentBindings elements has only one value
this.isMutexHelperPair.second.parameters[].distinctBindings contains no nulls and has only one value, of length 1
this.isMutexHelperPair.second.parameters[].distinctBindings elements has only one value
this.isMutexHelperPair.second.predicateName has only one value
this.isMutexHelperPair.second.predicateName.toString == "zbozi"
this.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
return == false
size(this.predicates[]) one of { 3, 4 }
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.equals(java.lang.Object):::EXIT;condition="not(return == true)"
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.initialize():::ENTER
this.mutexes == null
this.isMutexHelperPair.first == null
this.isMutexHelperPair.second == null
this.predicates[] == []
this.predicates[].getClass().getName() == []
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.initialize():::EXIT
this.isMutexHelperPair == orig(this.isMutexHelperPair)
this.isMutexHelperPair.first == orig(this.isMutexHelperPair.first)
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
this.isMutexHelperPair.second == orig(this.isMutexHelperPair.second)
this.predicates == orig(this.predicates)
this.predicates[] == orig(this.predicates[])
this.isMutexHelperPair.first == null
this.isMutexHelperPair.second == null
this.predicates[] == []
this.predicates[].getClass().getName() == []
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.isMutex(cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate):::ENTER
this.mutexes != null
arg0 != null
arg0.parameters != null
arg0.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg0.parameters[] elements != null
arg0.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.parameters[].boundValue elements != null
arg0.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg0.parameters[].dependentBindings elements != null
arg0.parameters[].distinctBindings elements != null
arg0.predicateName != null
arg0.predicateName.toString one of { "mam", "zbozi" }
arg1 != null
arg1.parameters != null
arg1.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg1.parameters[] elements != null
arg1.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg1.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg1.parameters[].boundValue elements != null
arg1.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg1.parameters[].dependentBindings elements != null
arg1.parameters[].distinctBindings elements != null
arg1.predicateName != null
arg1.predicateName.toString one of { "mam", "zbozi" }
size(this.predicates[]) one of { 3, 4, 5 }
size(arg0.parameters[]) == 1
size(arg1.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.isMutex(cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate):::EXIT293
(return == false)  ==>  (arg0.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" })
(return == false)  ==>  (arg0.predicateName.toString one of { "mam", "zbozi" })
(return == false)  ==>  (arg1.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" })
(return == false)  ==>  (arg1.predicateName.toString one of { "mam", "zbozi" })
(return == false)  ==>  (orig(this.isMutexHelperPair.first.parameters[].boundValue.toString) elements one of { "brambory", "orezavatko", "penize" })
(return == false)  ==>  (orig(this.isMutexHelperPair.first.predicateName.toString) one of { "mam", "zbozi" })
(return == false)  ==>  (orig(this.isMutexHelperPair.second.predicateName.toString) one of { "mam", "zbozi" })
(return == false)  ==>  (size(this.predicates[]) one of { 3, 4, 5 })
(return == false)  ==>  (this.isMutexHelperPair.first.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" })
(return == false)  ==>  (this.isMutexHelperPair.first.predicateName.toString one of { "mam", "zbozi" })
(return == false)  ==>  (this.isMutexHelperPair.second.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" })
(return == false)  ==>  (this.isMutexHelperPair.second.predicateName.toString one of { "mam", "zbozi" })
(return == true)  ==>  (arg0.parameters[].boundValue.toString elements one of { "orezavatko", "penize" })
(return == true)  ==>  (arg0.parameters[].boundValue.toString one of { [orezavatko], [penize] })
(return == true)  ==>  (arg0.predicateName.toString == "mam")
(return == true)  ==>  (arg1.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" })
(return == true)  ==>  (arg1.parameters[].boundValue.toString one of { [brambory], [orezavatko] })
(return == true)  ==>  (arg1.predicateName.toString == "mam")
(return == true)  ==>  (orig(this.isMutexHelperPair.first.parameters[].boundValue.toString) elements one of { "brambory", "penize" })
(return == true)  ==>  (orig(this.isMutexHelperPair.first.parameters[].boundValue.toString) one of { [brambory], [penize] })
(return == true)  ==>  (orig(this.isMutexHelperPair.first.predicateName.toString) == "mam")
(return == true)  ==>  (orig(this.isMutexHelperPair.second.parameters[].boundValue.toString) elements one of { "brambory", "orezavatko", "penize" })
(return == true)  ==>  (orig(this.isMutexHelperPair.second.predicateName.toString) == "mam")
(return == true)  ==>  (size(this.predicates[]) one of { 4, 5 })
(return == true)  ==>  (this.isMutexHelperPair.first.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" })
(return == true)  ==>  (this.isMutexHelperPair.first.parameters[].boundValue.toString one of { [brambory], [orezavatko] })
(return == true)  ==>  (this.isMutexHelperPair.first.predicateName.toString == "mam")
(return == true)  ==>  (this.isMutexHelperPair.first.predicateName.toString == orig(this.isMutexHelperPair.first.predicateName.toString))
(return == true)  ==>  (this.isMutexHelperPair.second.parameters[].boundValue.toString elements one of { "orezavatko", "penize" })
(return == true)  ==>  (this.isMutexHelperPair.second.parameters[].boundValue.toString one of { [orezavatko], [penize] })
(return == true)  ==>  (this.isMutexHelperPair.second.predicateName.toString == "mam")
(return == true)  ==>  (this.isMutexHelperPair.second.predicateName.toString == orig(this.isMutexHelperPair.second.predicateName.toString))
(return == true)  ==>  (this.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] })
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.isMutex(cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate):::EXIT293;condition="return == true"
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.isMutex(cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate):::EXIT293;condition="not(return == true)"
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.isMutex(cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate):::EXIT
this.mutexes == orig(this.mutexes)
this.isMutexHelperPair == orig(this.isMutexHelperPair)
this.isMutexHelperPair.first.parameters.getClass().getName() == orig(this.isMutexHelperPair.first.parameters.getClass().getName())
this.isMutexHelperPair.first.parameters[].getClass().getName() == orig(this.isMutexHelperPair.first.parameters[].getClass().getName())
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
this.isMutexHelperPair.second.parameters.getClass().getName() == orig(this.isMutexHelperPair.second.parameters.getClass().getName())
this.isMutexHelperPair.second.parameters[].getClass().getName() == orig(this.isMutexHelperPair.second.parameters[].getClass().getName())
this.predicates == orig(this.predicates)
this.predicates[] == orig(this.predicates[])
arg0.parameters == orig(arg0.parameters)
arg0.parameters.getClass().getName() == orig(arg0.parameters.getClass().getName())
arg0.parameters[] == orig(arg0.parameters[])
arg0.parameters[].boundValue == orig(arg0.parameters[].boundValue)
arg0.parameters[].dependentBindings == orig(arg0.parameters[].dependentBindings)
arg0.parameters[].distinctBindings == orig(arg0.parameters[].distinctBindings)
arg0.predicateName == orig(arg0.predicateName)
arg0.predicateName.toString == orig(arg0.predicateName.toString)
arg1.parameters == orig(arg1.parameters)
arg1.parameters.getClass().getName() == orig(arg1.parameters.getClass().getName())
arg1.parameters[] == orig(arg1.parameters[])
arg1.parameters[].boundValue == orig(arg1.parameters[].boundValue)
arg1.parameters[].dependentBindings == orig(arg1.parameters[].dependentBindings)
arg1.parameters[].distinctBindings == orig(arg1.parameters[].distinctBindings)
arg1.predicateName == orig(arg1.predicateName)
arg1.predicateName.toString == orig(arg1.predicateName.toString)
size(this.isMutexHelperPair.first.parameters[]) == orig(size(this.isMutexHelperPair.first.parameters[]))
size(this.isMutexHelperPair.second.parameters[]) == orig(size(this.isMutexHelperPair.second.parameters[]))
(return == false)  ==>  (arg0.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" })
(return == false)  ==>  (arg0.predicateName.toString one of { "mam", "zbozi" })
(return == false)  ==>  (arg1.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" })
(return == false)  ==>  (arg1.predicateName.toString one of { "mam", "zbozi" })
(return == false)  ==>  (orig(this.isMutexHelperPair.first.parameters[].boundValue.toString) elements one of { "brambory", "orezavatko", "penize" })
(return == false)  ==>  (orig(this.isMutexHelperPair.first.predicateName.toString) one of { "mam", "zbozi" })
(return == false)  ==>  (orig(this.isMutexHelperPair.second.predicateName.toString) one of { "mam", "zbozi" })
(return == false)  ==>  (size(this.predicates[]) one of { 3, 4, 5 })
(return == false)  ==>  (this.isMutexHelperPair.first.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" })
(return == false)  ==>  (this.isMutexHelperPair.first.predicateName.toString one of { "mam", "zbozi" })
(return == false)  ==>  (this.isMutexHelperPair.second.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" })
(return == false)  ==>  (this.isMutexHelperPair.second.predicateName.toString one of { "mam", "zbozi" })
(return == true)  ==>  (arg0.parameters[].boundValue.toString elements one of { "orezavatko", "penize" })
(return == true)  ==>  (arg0.parameters[].boundValue.toString one of { [orezavatko], [penize] })
(return == true)  ==>  (arg0.predicateName.toString == "mam")
(return == true)  ==>  (arg1.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" })
(return == true)  ==>  (arg1.parameters[].boundValue.toString one of { [brambory], [orezavatko] })
(return == true)  ==>  (arg1.predicateName.toString == "mam")
(return == true)  ==>  (orig(this.isMutexHelperPair.first.parameters[].boundValue.toString) elements one of { "brambory", "penize" })
(return == true)  ==>  (orig(this.isMutexHelperPair.first.parameters[].boundValue.toString) one of { [brambory], [penize] })
(return == true)  ==>  (orig(this.isMutexHelperPair.first.predicateName.toString) == "mam")
(return == true)  ==>  (orig(this.isMutexHelperPair.second.parameters[].boundValue.toString) elements one of { "brambory", "orezavatko", "penize" })
(return == true)  ==>  (orig(this.isMutexHelperPair.second.predicateName.toString) == "mam")
(return == true)  ==>  (size(this.predicates[]) one of { 4, 5 })
(return == true)  ==>  (this.isMutexHelperPair.first.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" })
(return == true)  ==>  (this.isMutexHelperPair.first.parameters[].boundValue.toString one of { [brambory], [orezavatko] })
(return == true)  ==>  (this.isMutexHelperPair.first.predicateName.toString == "mam")
(return == true)  ==>  (this.isMutexHelperPair.first.predicateName.toString == orig(this.isMutexHelperPair.first.predicateName.toString))
(return == true)  ==>  (this.isMutexHelperPair.second.parameters[].boundValue.toString elements one of { "orezavatko", "penize" })
(return == true)  ==>  (this.isMutexHelperPair.second.parameters[].boundValue.toString one of { [orezavatko], [penize] })
(return == true)  ==>  (this.isMutexHelperPair.second.predicateName.toString == "mam")
(return == true)  ==>  (this.isMutexHelperPair.second.predicateName.toString == orig(this.isMutexHelperPair.second.predicateName.toString))
(return == true)  ==>  (this.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] })
this.mutexes != null
this.isMutexHelperPair.first != null
this.isMutexHelperPair.second != null
this.isMutexHelperPair.second.parameters[].boundValue elements != null
this.isMutexHelperPair.second.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg0.parameters != null
arg0.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg0.parameters[] elements != null
arg0.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.parameters[].boundValue elements != null
arg0.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg0.parameters[].dependentBindings elements != null
arg0.parameters[].distinctBindings elements != null
arg0.predicateName != null
arg0.predicateName.toString one of { "mam", "zbozi" }
arg1.parameters != null
arg1.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg1.parameters[] elements != null
arg1.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg1.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg1.parameters[].boundValue elements != null
arg1.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg1.parameters[].dependentBindings elements != null
arg1.parameters[].distinctBindings elements != null
arg1.predicateName != null
arg1.predicateName.toString one of { "mam", "zbozi" }
size(this.predicates[]) one of { 3, 4, 5 }
size(arg0.parameters[]) == 1
size(arg1.parameters[]) == 1
this.isMutexHelperPair.first.parameters[].getClass().getName() == orig(this.isMutexHelperPair.first.parameters[].getClass().getName()) (elementwise)
this.isMutexHelperPair.second.parameters[].getClass().getName() == orig(this.isMutexHelperPair.second.parameters[].getClass().getName()) (elementwise)
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.isMutex(cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate):::EXIT;condition="return == true"
this.isMutexHelperPair.first.predicateName.toString == orig(this.isMutexHelperPair.first.predicateName.toString)
this.isMutexHelperPair.second.predicateName.toString == orig(this.isMutexHelperPair.second.predicateName.toString)
this.isMutexHelperPair.first.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" }
this.isMutexHelperPair.first.parameters[].boundValue.toString one of { [brambory], [orezavatko] }
this.isMutexHelperPair.first.predicateName.toString == "mam"
this.isMutexHelperPair.second.parameters[].boundValue.toString elements one of { "orezavatko", "penize" }
this.isMutexHelperPair.second.parameters[].boundValue.toString one of { [orezavatko], [penize] }
this.isMutexHelperPair.second.predicateName.toString == "mam"
this.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.parameters[].boundValue.toString elements one of { "orezavatko", "penize" }
arg0.parameters[].boundValue.toString one of { [orezavatko], [penize] }
arg0.predicateName.toString == "mam"
arg1.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" }
arg1.parameters[].boundValue.toString one of { [brambory], [orezavatko] }
arg1.predicateName.toString == "mam"
return == true
orig(this.isMutexHelperPair.first.parameters[].boundValue.toString) elements one of { "brambory", "penize" }
orig(this.isMutexHelperPair.first.parameters[].boundValue.toString) one of { [brambory], [penize] }
orig(this.isMutexHelperPair.second.parameters[].boundValue.toString) elements one of { "brambory", "orezavatko", "penize" }
size(this.predicates[]) one of { 4, 5 }
===========================================================================
cz.matfyz.sykora.planning.graph.PredicateLayer.isMutex(cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate):::EXIT;condition="not(return == true)"
return == false
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate:::CLASS
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == false
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate:::OBJECT
this.parameters != null
this.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
this.parameters[] elements != null
this.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
this.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
this.parameters[].dependentBindings elements != null
this.parameters[].distinctBindings elements != null
this.predicateName != null
this.predicateName.toString one of { "mam", "zbozi" }
size(this.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.Predicate(java.lang.String, cz.matfyz.sykora.planning.predicate.ValueBinding[]):::ENTER
arg0 != null
arg0.toString one of { "mam", "zbozi" }
arg1 != null
arg1.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg1[] elements != null
arg1[].dependentBindings elements != null
arg1[].distinctBindings elements != null
size(arg1[]) == 1
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.Predicate(java.lang.String, cz.matfyz.sykora.planning.predicate.ValueBinding[]):::EXIT
arg0.toString == orig(arg0.toString)
arg1[] == orig(arg1[])
arg1[].boundValue == orig(arg1[].boundValue)
arg1[].dependentBindings == orig(arg1[].dependentBindings)
arg1[].distinctBindings == orig(arg1[].distinctBindings)
arg0.toString one of { "mam", "zbozi" }
arg1[] elements != null
arg1[].dependentBindings elements != null
arg1[].distinctBindings elements != null
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.compareTo(cz.matfyz.sykora.planning.predicate.Predicate):::ENTER
this.parameters[].boundValue elements != null
this.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg0 != null
arg0.parameters != null
arg0.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg0.parameters[] elements != null
arg0.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.parameters[].boundValue elements != null
arg0.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg0.parameters[].dependentBindings elements != null
arg0.parameters[].distinctBindings elements != null
arg0.predicateName != null
arg0.predicateName.toString one of { "mam", "zbozi" }
size(arg0.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.compareTo(cz.matfyz.sykora.planning.predicate.Predicate):::EXIT74
return one of { -13, 13 }
return != 0
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.compareTo(cz.matfyz.sykora.planning.predicate.Predicate):::EXIT90
return != 0
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.compareTo(cz.matfyz.sykora.planning.predicate.Predicate):::EXIT93
return == 0
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.compareTo(cz.matfyz.sykora.planning.predicate.Predicate):::EXIT
this.parameters == orig(this.parameters)
this.parameters.getClass().getName() == orig(this.parameters.getClass().getName())
this.parameters[] == orig(this.parameters[])
this.parameters[].boundValue == orig(this.parameters[].boundValue)
this.parameters[].dependentBindings == orig(this.parameters[].dependentBindings)
this.parameters[].distinctBindings == orig(this.parameters[].distinctBindings)
this.predicateName == orig(this.predicateName)
this.predicateName.toString == orig(this.predicateName.toString)
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
arg0.parameters == orig(arg0.parameters)
arg0.parameters.getClass().getName() == orig(arg0.parameters.getClass().getName())
arg0.parameters[] == orig(arg0.parameters[])
arg0.parameters[].boundValue == orig(arg0.parameters[].boundValue)
arg0.parameters[].dependentBindings == orig(arg0.parameters[].dependentBindings)
arg0.parameters[].distinctBindings == orig(arg0.parameters[].distinctBindings)
arg0.predicateName == orig(arg0.predicateName)
arg0.predicateName.toString == orig(arg0.predicateName.toString)
this.parameters[].boundValue elements != null
this.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg0.parameters != null
arg0.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg0.parameters[] elements != null
arg0.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.parameters[].boundValue elements != null
arg0.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg0.parameters[].dependentBindings elements != null
arg0.parameters[].distinctBindings elements != null
arg0.predicateName != null
arg0.predicateName.toString one of { "mam", "zbozi" }
size(arg0.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.equals(java.lang.Object):::ENTER
this.parameters[].boundValue elements != null
this.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg0 != null
arg0.getClass().getName() == cz.matfyz.sykora.planning.predicate.Predicate.class
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.equals(java.lang.Object):::EXIT108
return == false
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.equals(java.lang.Object):::EXIT108;condition="not(return == true)"
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.equals(java.lang.Object):::EXIT113
return == false
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.equals(java.lang.Object):::EXIT113;condition="not(return == true)"
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.equals(java.lang.Object):::EXIT115
return == true
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.equals(java.lang.Object):::EXIT115;condition="return == true"
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.equals(java.lang.Object):::EXIT
this.parameters == orig(this.parameters)
this.parameters.getClass().getName() == orig(this.parameters.getClass().getName())
this.parameters[] == orig(this.parameters[])
this.parameters[].boundValue == orig(this.parameters[].boundValue)
this.parameters[].dependentBindings == orig(this.parameters[].dependentBindings)
this.parameters[].distinctBindings == orig(this.parameters[].distinctBindings)
this.predicateName == orig(this.predicateName)
this.predicateName.toString == orig(this.predicateName.toString)
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
this.parameters[].boundValue elements != null
this.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.equals(java.lang.Object):::EXIT;condition="return == true"
return == true
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.equals(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.getParameter(int):::ENTER
arg0 == 0
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.getParameter(int):::EXIT
this.parameters == orig(this.parameters)
this.parameters.getClass().getName() == orig(this.parameters.getClass().getName())
this.parameters[] == orig(this.parameters[])
this.parameters[].boundValue == orig(this.parameters[].boundValue)
this.parameters[].dependentBindings == orig(this.parameters[].dependentBindings)
this.parameters[].distinctBindings == orig(this.parameters[].distinctBindings)
this.predicateName == orig(this.predicateName)
this.predicateName.toString == orig(this.predicateName.toString)
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
return != null
return.boundValue.toString one of { "brambory", "orezavatko", "penize" }
return.dependentBindings != null
return.dependentBindings[] elements != null
return.dependentBindings[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
return.dependentBindings[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
return.distinctBindings != null
return.distinctBindings[] == []
return.distinctBindings[].getClass().getName() == []
cz.matfyz.sykora.planning.predicate.ValueBinding.$assertionsDisabled == false
size(return.dependentBindings[]) == 1
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.getParameterCount():::ENTER
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.getParameterCount():::EXIT
this.parameters == orig(this.parameters)
this.parameters.getClass().getName() == orig(this.parameters.getClass().getName())
this.parameters[] == orig(this.parameters[])
this.parameters[].boundValue == orig(this.parameters[].boundValue)
this.parameters[].dependentBindings == orig(this.parameters[].dependentBindings)
this.parameters[].distinctBindings == orig(this.parameters[].distinctBindings)
this.predicateName == orig(this.predicateName)
this.predicateName.toString == orig(this.predicateName.toString)
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
return == 1
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.getPredicateName():::ENTER
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.getPredicateName():::EXIT
this.parameters == orig(this.parameters)
this.parameters.getClass().getName() == orig(this.parameters.getClass().getName())
this.parameters[] == orig(this.parameters[])
this.parameters[].boundValue == orig(this.parameters[].boundValue)
this.parameters[].dependentBindings == orig(this.parameters[].dependentBindings)
this.parameters[].distinctBindings == orig(this.parameters[].distinctBindings)
this.predicateName == orig(this.predicateName)
this.predicateName.toString == orig(this.predicateName.toString)
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
return != null
return.toString one of { "mam", "zbozi" }
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.groundedClone():::ENTER
this.parameters[].boundValue elements != null
this.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.groundedClone():::EXIT
this.parameters == orig(this.parameters)
this.parameters.getClass().getName() == orig(this.parameters.getClass().getName())
this.parameters[] == orig(this.parameters[])
this.parameters[].boundValue == orig(this.parameters[].boundValue)
this.parameters[].dependentBindings == orig(this.parameters[].dependentBindings)
this.parameters[].distinctBindings == orig(this.parameters[].distinctBindings)
this.predicateName == orig(this.predicateName)
this.predicateName.toString == orig(this.predicateName.toString)
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
this.parameters[].boundValue elements != null
this.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
return != null
return.parameters != null
return.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
return.parameters[] elements != null
return.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
return.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
return.parameters[].boundValue elements != null
return.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
return.parameters[].dependentBindings elements != null
return.parameters[].distinctBindings elements != null
return.predicateName != null
return.predicateName.toString one of { "mam", "zbozi" }
size(return.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.isGrounded():::ENTER
this.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.isGrounded():::EXIT193
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.isGrounded():::EXIT193;condition="return == true"
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.isGrounded():::EXIT
this.parameters == orig(this.parameters)
this.parameters.getClass().getName() == orig(this.parameters.getClass().getName())
this.parameters[] == orig(this.parameters[])
this.parameters[].boundValue == orig(this.parameters[].boundValue)
this.parameters[].dependentBindings == orig(this.parameters[].dependentBindings)
this.parameters[].distinctBindings == orig(this.parameters[].distinctBindings)
this.predicateName == orig(this.predicateName)
this.predicateName.toString == orig(this.predicateName.toString)
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
this.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
return == true
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.isGrounded():::EXIT;condition="return == true"
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.parse(java.lang.String):::ENTER
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.parse(java.lang.String):::EXIT278
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.parse(java.lang.String):::EXIT
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
arg0.toString == orig(arg0.toString)
return.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
return.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
return.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
return.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" }
return.parameters[].boundValue.toString one of { [brambory], [orezavatko] }
return.predicateName.toString one of { "mam", "zbozi" }
size(return.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.toString():::ENTER
this.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.toString():::EXIT
this.parameters == orig(this.parameters)
this.parameters.getClass().getName() == orig(this.parameters.getClass().getName())
this.parameters[] == orig(this.parameters[])
this.parameters[].boundValue == orig(this.parameters[].boundValue)
this.parameters[].dependentBindings == orig(this.parameters[].dependentBindings)
this.parameters[].distinctBindings == orig(this.parameters[].distinctBindings)
this.predicateName == orig(this.predicateName)
this.predicateName.toString == orig(this.predicateName.toString)
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
this.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.unifyWith(cz.matfyz.sykora.planning.predicate.Predicate, java.util.List):::ENTER
this.parameters[].boundValue.toString elements one of { null, "orezavatko", "penize" }
arg0 != null
arg0.parameters != null
arg0.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg0.parameters[] elements != null
arg0.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.parameters[].boundValue elements != null
arg0.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg0.parameters[].dependentBindings elements != null
arg0.parameters[].distinctBindings elements != null
arg0.predicateName != null
arg0.predicateName.toString one of { "mam", "zbozi" }
arg1 != null
arg1[] == []
arg1[].getClass().getName() == []
arg1.getClass().getName() == java.util.ArrayList.class
size(arg0.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.unifyWith(cz.matfyz.sykora.planning.predicate.Predicate, java.util.List):::EXIT236
this.parameters[].boundValue == orig(this.parameters[].boundValue)
arg1[] == orig(arg1[])
this.parameters[].boundValue.toString elements one of { null, "orezavatko", "penize" }
arg1[] == []
arg1[].getClass().getName() == []
return == false
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.unifyWith(cz.matfyz.sykora.planning.predicate.Predicate, java.util.List):::EXIT236;condition="not(return == true)"
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.unifyWith(cz.matfyz.sykora.planning.predicate.Predicate, java.util.List):::EXIT248
this.parameters[].boundValue == orig(this.parameters[].boundValue)
arg1[] == orig(arg1[])
this.parameters[].boundValue.toString elements one of { "orezavatko", "penize" }
this.parameters[].boundValue.toString one of { [orezavatko], [penize] }
arg0.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" }
arg0.parameters[].boundValue.toString one of { [brambory], [orezavatko] }
arg1[] == []
arg1[].getClass().getName() == []
return == false
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.unifyWith(cz.matfyz.sykora.planning.predicate.Predicate, java.util.List):::EXIT248;condition="not(return == true)"
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.unifyWith(cz.matfyz.sykora.planning.predicate.Predicate, java.util.List):::EXIT263
this.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
return == true
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.unifyWith(cz.matfyz.sykora.planning.predicate.Predicate, java.util.List):::EXIT263;condition="return == true"
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.unifyWith(cz.matfyz.sykora.planning.predicate.Predicate, java.util.List):::EXIT
this.parameters == orig(this.parameters)
this.parameters.getClass().getName() == orig(this.parameters.getClass().getName())
this.parameters[] == orig(this.parameters[])
this.parameters[].dependentBindings == orig(this.parameters[].dependentBindings)
this.parameters[].distinctBindings == orig(this.parameters[].distinctBindings)
this.predicateName == orig(this.predicateName)
this.predicateName.toString == orig(this.predicateName.toString)
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
arg0.parameters == orig(arg0.parameters)
arg0.parameters.getClass().getName() == orig(arg0.parameters.getClass().getName())
arg0.parameters[] == orig(arg0.parameters[])
arg0.parameters[].boundValue == orig(arg0.parameters[].boundValue)
arg0.parameters[].dependentBindings == orig(arg0.parameters[].dependentBindings)
arg0.parameters[].distinctBindings == orig(arg0.parameters[].distinctBindings)
arg0.predicateName == orig(arg0.predicateName)
arg0.predicateName.toString == orig(arg0.predicateName.toString)
(return == false)  ==>  (arg1[] == [])
(return == false)  ==>  (arg1[] == orig(arg1[]))
(return == false)  ==>  (arg1[].getClass().getName() == [])
(return == false)  ==>  (this.parameters[].boundValue == orig(this.parameters[].boundValue))
(return == false)  ==>  (this.parameters[].boundValue.toString elements one of { null, "orezavatko", "penize" })
(return == true)  ==>  (arg1[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class)
(return == true)  ==>  (arg1[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.ValueBinding] })
(return == true)  ==>  (size(arg1[]) one of { 0, 1 })
(return == true)  ==>  (this.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" })
arg0.parameters != null
arg0.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg0.parameters[] elements != null
arg0.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.parameters[].boundValue elements != null
arg0.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg0.parameters[].dependentBindings elements != null
arg0.parameters[].distinctBindings elements != null
arg0.predicateName != null
arg0.predicateName.toString one of { "mam", "zbozi" }
arg1[] elements != null
arg1[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg1[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.ValueBinding] }
size(arg0.parameters[]) == 1
this.parameters[].boundValue.toString >= orig(this.parameters[].boundValue.toString) (lexically)
size(arg1[])-1 <= orig(size(arg1[]))
size(arg1[])-1 >= orig(size(arg1[]))-1
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.unifyWith(cz.matfyz.sykora.planning.predicate.Predicate, java.util.List):::EXIT;condition="return == true"
this.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
return == true
===========================================================================
cz.matfyz.sykora.planning.predicate.Predicate.unifyWith(cz.matfyz.sykora.planning.predicate.Predicate, java.util.List):::EXIT;condition="not(return == true)"
this.parameters[].boundValue == orig(this.parameters[].boundValue)
arg1[] == orig(arg1[])
this.parameters[].boundValue.toString elements one of { null, "orezavatko", "penize" }
arg1[] == []
arg1[].getClass().getName() == []
return == false
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type:::CLASS
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() == cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type[].class
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] contains no nulls and has only one value, of length 7
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type]
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type.class
size(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[]) == 7
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type:::OBJECT
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.Type(java.lang.String, int):::ENTER
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.Type(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.values():::ENTER
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.values():::EXIT
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() == return.getClass().getName()
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName())
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[])
return has only one value
return[] contains no nulls and has only one value, of length 7
size(return[]) == 7
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER in return[]
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS in return[]
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS in return[]
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA in return[]
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT in return[]
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT in return[]
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW in return[]
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser$Token:::OBJECT
this.tokenType != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() == cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type[].class
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] contains no nulls and has only one value, of length 7
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] elements != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type]
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type.class
size(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[]) == 7
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser$Token.Token(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type):::ENTER
arg0 != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() == cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type[].class
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] contains no nulls and has only one value, of length 7
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] elements != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type]
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type.class
size(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[]) == 7
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser$Token.Token(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type):::EXIT
this.tokenType == orig(arg0)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName())
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[])
this.tokenText == null
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser$Token.Token(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type, java.lang.String):::ENTER
arg0 == cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() == cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type[].class
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] contains no nulls and has only one value, of length 7
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] elements != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type]
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type.class
arg1 != null
size(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[]) == 7
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser$Token.Token(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type, java.lang.String):::EXIT
this.tokenText == orig(arg1)
this.tokenType == cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER == orig(arg0)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName())
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[])
arg1.toString == orig(arg1.toString)
this.tokenText != null
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser$Token.getTokenText():::ENTER
this.tokenType == cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER
this.tokenText != null
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser$Token.getTokenText():::EXIT
this.tokenText == return
this.tokenText.toString == orig(this.tokenText.toString)
this.tokenType == cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER == orig(this.tokenType)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName())
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[])
return == orig(this.tokenText)
return != null
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser$Token.getTokenType():::ENTER
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser$Token.getTokenType():::EXIT
this.tokenText == orig(this.tokenText)
this.tokenText.toString == orig(this.tokenText.toString)
this.tokenType == return
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName())
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[])
return == orig(this.tokenType)
return != null
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser:::CLASS
cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled == false
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser:::OBJECT
this.pushed.tokenType == cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER
this.inputReader != null
this.inputReader.getClass().getName() == java.io.StringReader.class
this.pushed.tokenText != null
this.pushed.tokenText.toString one of { "mam", "zbozi" }
this.pushed.tokenType has only one value
this.pushed.tokenType != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES has only one value
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() == cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type[].class
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] contains no nulls and has only one value, of length 7
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] elements != null
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type, cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type]
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.PredicateParser.Token.Type.class
this.pushedChar != 0
this.pushedChar >= -1
size(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[]) == 7
this.inputReader.getClass().getName() != cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName()
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.PredicateParser(java.io.Reader):::ENTER
arg0.getClass().getName() == java.io.StringReader.class
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.PredicateParser(java.io.Reader):::EXIT
this.inputReader == orig(arg0)
this.inputReader.getClass().getName() == orig(arg0.getClass().getName())
this.pushed == null
this.pushedChar == -1
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.PredicateParser(java.lang.String):::ENTER
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.PredicateParser(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
this.pushed == null
this.pushedChar == -1
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.getChar():::ENTER
this.pushed == null
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.getChar():::EXIT290
this.pushedChar == orig(this.pushedChar)
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.getChar():::EXIT294
this.pushedChar < orig(this.pushedChar)
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.getChar():::EXIT
this.inputReader == orig(this.inputReader)
this.inputReader.getClass().getName() == orig(this.inputReader.getClass().getName())
this.pushed == orig(this.pushed)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName())
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[])
cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled)
(orig(this.pushedChar) == -1)  <==>  (this.pushedChar == orig(this.pushedChar))
this.pushed == null
this.pushedChar == -1
this.pushedChar <= orig(this.pushedChar)
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.nextToken():::ENTER
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.nextToken():::EXIT313
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[])
this.pushedChar == orig(this.pushedChar)
this.pushedChar == 40
return.tokenText.toString one of { "mam", "zbozi" }
return.tokenType has only one value
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.nextToken():::EXIT340
this.pushed == orig(this.pushed)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[])
this.pushedChar == -1
return.tokenText == null
return.tokenType has only one value
orig(this.pushedChar) == 40
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.nextToken():::EXIT342
this.pushed == orig(this.pushed)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[])
this.pushedChar == -1
return.tokenText == null
return.tokenType has only one value
orig(this.pushedChar) == 41
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.nextToken():::EXIT344
this.pushed == orig(this.pushed)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[])
this.pushedChar == orig(this.pushedChar)
this.pushedChar == -1
return.tokenText == null
return.tokenType has only one value
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.nextToken():::EXIT346
this.pushed == orig(this.pushed)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[])
this.pushedChar == orig(this.pushedChar)
this.pushedChar == -1
return.tokenText == null
return.tokenType has only one value
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.nextToken():::EXIT353
this.pushed == orig(this.pushed)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[])
this.pushedChar == -1
return.tokenText == null
return.tokenType has only one value
orig(this.pushedChar) == 32
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.nextToken():::EXIT361
this.pushed == orig(this.pushed)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[])
this.pushedChar == orig(this.pushedChar)
this.pushedChar == -1
return.tokenText == null
return.tokenType has only one value
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.nextToken():::EXIT377
this.pushed == orig(this.pushed)
this.pushedChar one of { 32, 40, 41 }
return.tokenText != null
return.tokenType has only one value
orig(this.pushedChar) one of { -1, 32 }
this.pushedChar > orig(this.pushedChar)
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.nextToken():::EXIT
this.inputReader == orig(this.inputReader)
this.inputReader.getClass().getName() == orig(this.inputReader.getClass().getName())
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER == orig(this.pushed.tokenType)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName())
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[].getClass().getName() == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[].getClass().getName())
cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled)
this.pushed == null
return != null
return.tokenType != null
this.inputReader.getClass().getName() != orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName())
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[]) (elementwise)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[].getClass().getName() == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[].getClass().getName()) (elementwise)
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.parseAction():::ENTER
this.pushed == null
this.pushedChar == -1
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.parseAction():::EXIT
this.inputReader == orig(this.inputReader)
this.inputReader.getClass().getName() == orig(this.inputReader.getClass().getName())
this.pushed == orig(this.pushed)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName())
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[].getClass().getName() == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[].getClass().getName())
this.pushedChar == orig(this.pushedChar)
cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled)
this.pushed == null
this.pushedChar == -1
return.actionName.toString one of { "kup", "prodej" }
return.preconditions.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
return.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
return.preconditionsFulfillers == null
return.negativeEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
return.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
return.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
return.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
cz.matfyz.sykora.planning.Action.$assertionsDisabled == false
size(return.preconditions.predicates[]) == 2
size(return.negativeEffects.predicates[]) == 1
size(return.positiveEffects.predicates[]) == 1
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[]) (elementwise)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[].getClass().getName() == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[].getClass().getName()) (elementwise)
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.parseAction(java.lang.String, java.util.Hashtable):::ENTER
this.pushed == null
this.pushedChar == 32
arg0.toString one of { "kup", "prodej" }
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.parseAction(java.lang.String, java.util.Hashtable):::EXIT
this.inputReader == orig(this.inputReader)
this.inputReader.getClass().getName() == orig(this.inputReader.getClass().getName())
this.pushed == orig(this.pushed)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName())
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[])
cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled)
arg0.toString == orig(arg0.toString)
return.actionName == orig(arg0)
this.pushed == null
this.pushedChar == -1
arg0.toString one of { "kup", "prodej" }
return.actionName.toString one of { "kup", "prodej" }
return.preconditions.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
return.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
return.preconditionsFulfillers == null
return.negativeEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
return.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
return.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
return.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
cz.matfyz.sykora.planning.Action.$assertionsDisabled == false
size(return.preconditions.predicates[]) == 2
size(return.negativeEffects.predicates[]) == 1
size(return.positiveEffects.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.parseAction(java.util.Hashtable):::ENTER
this.pushed == null
this.pushedChar == -1
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.parseAction(java.util.Hashtable):::EXIT462
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.parseAction(java.util.Hashtable):::EXIT
this.inputReader == orig(this.inputReader)
this.inputReader.getClass().getName() == orig(this.inputReader.getClass().getName())
this.pushed == orig(this.pushed)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName())
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[].getClass().getName() == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[].getClass().getName())
this.pushedChar == orig(this.pushedChar)
cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled)
this.pushed == null
this.pushedChar == -1
return.actionName.toString one of { "kup", "prodej" }
return.preconditions.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
return.preconditions.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
return.preconditionsFulfillers == null
return.negativeEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
return.negativeEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
return.positiveEffects.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
return.positiveEffects.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
cz.matfyz.sykora.planning.Action.$assertionsDisabled == false
size(return.preconditions.predicates[]) == 2
size(return.negativeEffects.predicates[]) == 1
size(return.positiveEffects.predicates[]) == 1
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[]) (elementwise)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[].getClass().getName() == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[].getClass().getName()) (elementwise)
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.parsePredicate():::ENTER
this.pushed == null
this.pushedChar == -1
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.parsePredicate():::EXIT
this.inputReader == orig(this.inputReader)
this.inputReader.getClass().getName() == orig(this.inputReader.getClass().getName())
this.pushed == orig(this.pushed)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName())
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[])
this.pushedChar == orig(this.pushedChar)
cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled)
this.pushed == null
this.pushedChar == -1
return.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
return.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
return.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
return.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" }
return.parameters[].boundValue.toString one of { [brambory], [orezavatko] }
return.predicateName.toString one of { "mam", "zbozi" }
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == false
size(return.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.parsePredicate(boolean):::ENTER
this.pushed == null
this.pushedChar == -1
arg0 == false
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.parsePredicate(boolean):::EXIT
this.inputReader == orig(this.inputReader)
this.inputReader.getClass().getName() == orig(this.inputReader.getClass().getName())
this.pushed == orig(this.pushed)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName())
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[])
this.pushedChar == orig(this.pushedChar)
cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled)
this.pushed == null
this.pushedChar == -1
return.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
return.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
return.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
return.parameters[].boundValue.toString elements one of { "brambory", "orezavatko" }
return.parameters[].boundValue.toString one of { [brambory], [orezavatko] }
return.predicateName.toString one of { "mam", "zbozi" }
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == false
size(return.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.parsePredicate(java.lang.String, java.util.Hashtable, boolean):::ENTER
this.pushed == null
this.pushedChar == 40
arg0 != null
arg0.toString one of { "mam", "zbozi" }
arg1 != null
arg2 == false
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.parsePredicate(java.lang.String, java.util.Hashtable, boolean):::EXIT685
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.parsePredicate(java.lang.String, java.util.Hashtable, boolean):::EXIT
this.inputReader == orig(this.inputReader)
this.inputReader.getClass().getName() == orig(this.inputReader.getClass().getName())
this.pushed == orig(this.pushed)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName())
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[])
cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled)
arg0.toString == orig(arg0.toString)
return.predicateName == orig(arg0)
this.pushed == null
this.pushedChar == -1
arg0.toString one of { "mam", "zbozi" }
return != null
return.parameters != null
return.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
return.parameters[] elements != null
return.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
return.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
return.parameters[].dependentBindings elements != null
return.parameters[].distinctBindings elements != null
return.predicateName != null
return.predicateName.toString one of { "mam", "zbozi" }
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == false
size(return.parameters[]) == 1
this.inputReader.getClass().getName() != return.parameters.getClass().getName()
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() != return.parameters.getClass().getName()
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.parsePredicate(java.util.Hashtable, boolean):::ENTER
this.pushedChar one of { -1, 32, 40 }
arg0 != null
arg1 == false
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.parsePredicate(java.util.Hashtable, boolean):::EXIT609
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.parsePredicate(java.util.Hashtable, boolean):::EXIT
this.inputReader == orig(this.inputReader)
this.inputReader.getClass().getName() == orig(this.inputReader.getClass().getName())
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER == orig(this.pushed.tokenType)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName())
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[])
cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled)
this.pushed == null
this.pushedChar == -1
return != null
return.parameters != null
return.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
return.parameters[] elements != null
return.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
return.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
return.parameters[].dependentBindings elements != null
return.parameters[].distinctBindings elements != null
return.predicateName != null
return.predicateName.toString one of { "mam", "zbozi" }
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == false
size(return.parameters[]) == 1
this.inputReader.getClass().getName() != return.parameters.getClass().getName()
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() != return.parameters.getClass().getName()
this.pushedChar <= orig(this.pushedChar)
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.pushChar(int):::ENTER
this.pushed == null
this.pushedChar == -1
this.pushedChar < arg0
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.pushChar(int):::EXIT
this.inputReader == orig(this.inputReader)
this.inputReader.getClass().getName() == orig(this.inputReader.getClass().getName())
this.pushed == orig(this.pushed)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName())
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[])
this.pushedChar == orig(arg0)
cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled)
this.pushed == null
this.pushedChar > orig(this.pushedChar)
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.pushToken(cz.matfyz.sykora.planning.predicate.PredicateParser$Token):::ENTER
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER == arg0.tokenType
this.pushed == null
this.pushedChar == 40
arg0.tokenText.toString one of { "mam", "zbozi" }
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.pushToken(cz.matfyz.sykora.planning.predicate.PredicateParser$Token):::EXIT
this.inputReader == orig(this.inputReader)
this.inputReader.getClass().getName() == orig(this.inputReader.getClass().getName())
this.pushed == orig(arg0)
this.pushed.tokenText == arg0.tokenText
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER == arg0.tokenType
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER == orig(arg0.tokenType)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName())
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[])
this.pushedChar == orig(this.pushedChar)
cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled)
arg0.tokenText == orig(arg0.tokenText)
arg0.tokenText.toString == orig(arg0.tokenText.toString)
this.pushedChar == 40
arg0.tokenText.toString one of { "mam", "zbozi" }
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.skipWhiteSpace():::ENTER
this.pushed == null
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateParser.skipWhiteSpace():::EXIT
this.inputReader == orig(this.inputReader)
this.inputReader.getClass().getName() == orig(this.inputReader.getClass().getName())
this.pushed == orig(this.pushed)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.IDENTIFIER)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.LEFT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.RIGHT_PARENTHESIS)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.COMMA)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.DOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.QUADDOT)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.ARROW)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES)
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName() == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES.getClass().getName())
cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[] == orig(cz.matfyz.sykora.planning.predicate.PredicateParser$Token$Type.$VALUES[])
cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.PredicateParser.$assertionsDisabled)
this.pushed == null
this.pushedChar >= orig(this.pushedChar)
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet:::OBJECT
this.predicates[] elements != null
this.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.PredicateSet():::EXIT
this.predicates != null
this.predicates[] == []
this.predicates[].getClass().getName() == []
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.add(cz.matfyz.sykora.planning.predicate.Predicate):::ENTER
this.predicates != null
arg0 != null
arg0.parameters != null
arg0.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg0.parameters[] elements != null
arg0.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.parameters[].dependentBindings elements != null
arg0.parameters[].distinctBindings elements != null
arg0.predicateName != null
arg0.predicateName.toString one of { "mam", "zbozi" }
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == false
size(arg0.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.add(cz.matfyz.sykora.planning.predicate.Predicate):::EXIT
this.predicates == orig(this.predicates)
arg0.parameters == orig(arg0.parameters)
arg0.parameters.getClass().getName() == orig(arg0.parameters.getClass().getName())
arg0.parameters[] == orig(arg0.parameters[])
arg0.parameters[].boundValue == orig(arg0.parameters[].boundValue)
arg0.parameters[].dependentBindings == orig(arg0.parameters[].dependentBindings)
arg0.parameters[].distinctBindings == orig(arg0.parameters[].distinctBindings)
arg0.predicateName == orig(arg0.predicateName)
arg0.predicateName.toString == orig(arg0.predicateName.toString)
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
size(this.predicates[])-1 == orig(size(this.predicates[]))
this.predicates != null
arg0.parameters != null
arg0.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg0.parameters[] elements != null
arg0.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.parameters[].dependentBindings elements != null
arg0.parameters[].distinctBindings elements != null
arg0.predicateName != null
arg0.predicateName.toString one of { "mam", "zbozi" }
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == false
size(arg0.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.add(java.lang.Iterable):::ENTER
this.predicates[] == []
this.predicates[].getClass().getName() == []
arg0.getClass().getName() == cz.matfyz.sykora.planning.predicate.PredicateSet.class
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.add(java.lang.Iterable):::EXIT
this.predicates == orig(this.predicates)
this.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
size(this.predicates[]) one of { 1, 3 }
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.clear():::ENTER
this has only one value
this.predicates has only one value
this.predicates[] == []
this.predicates[].getClass().getName() == []
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.clear():::EXIT
this.predicates == orig(this.predicates)
this.predicates[] == orig(this.predicates[])
this.predicates has only one value
this.predicates[] == []
this.predicates[].getClass().getName() == []
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.compareTo(cz.matfyz.sykora.planning.predicate.PredicateSet):::ENTER
this.predicates != null
arg0 != null
arg0.predicates != null
arg0.predicates[] elements != null
arg0.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(this.predicates[]) one of { 0, 1, 2 }
size(arg0.predicates[]) one of { 0, 1, 2 }
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.compareTo(cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT86
this.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
return != 0
size(this.predicates[]) one of { 1, 2 }
size(arg0.predicates[]) one of { 1, 2 }
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.compareTo(cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT92
return == 0
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.compareTo(cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT
this.predicates == orig(this.predicates)
this.predicates[] == orig(this.predicates[])
arg0.predicates == orig(arg0.predicates)
arg0.predicates[] == orig(arg0.predicates[])
this.predicates != null
arg0.predicates != null
arg0.predicates[] elements != null
arg0.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
size(this.predicates[]) one of { 0, 1, 2 }
size(arg0.predicates[]) one of { 0, 1, 2 }
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.contains(cz.matfyz.sykora.planning.predicate.Predicate):::ENTER
arg0.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg0.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.parameters[].boundValue.toString elements one of { "brambory", "penize" }
arg0.parameters[].boundValue.toString one of { [brambory], [penize] }
arg0.predicateName.toString one of { "mam", "zbozi" }
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == false
size(arg0.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.contains(cz.matfyz.sykora.planning.predicate.Predicate):::EXIT
this.predicates == orig(this.predicates)
this.predicates[] == orig(this.predicates[])
arg0.parameters == orig(arg0.parameters)
arg0.parameters.getClass().getName() == orig(arg0.parameters.getClass().getName())
arg0.parameters[] == orig(arg0.parameters[])
arg0.parameters[].boundValue == orig(arg0.parameters[].boundValue)
arg0.parameters[].dependentBindings == orig(arg0.parameters[].dependentBindings)
arg0.parameters[].distinctBindings == orig(arg0.parameters[].distinctBindings)
arg0.predicateName == orig(arg0.predicateName)
arg0.predicateName.toString == orig(arg0.predicateName.toString)
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
(return == false)  ==>  (size(this.predicates[]) one of { 0, 1, 4 })
(return == true)  ==>  (size(this.predicates[]) one of { 4, 5 })
(return == true)  ==>  (this.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] })
arg0.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg0.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.parameters[].boundValue.toString elements one of { "brambory", "penize" }
arg0.parameters[].boundValue.toString one of { [brambory], [penize] }
arg0.predicateName.toString one of { "mam", "zbozi" }
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == false
size(arg0.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.contains(cz.matfyz.sykora.planning.predicate.Predicate):::EXIT;condition="return == true"
this.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
return == true
size(this.predicates[]) one of { 4, 5 }
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.contains(cz.matfyz.sykora.planning.predicate.Predicate):::EXIT;condition="not(return == true)"
return == false
size(this.predicates[]) one of { 0, 1, 4 }
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.contains(cz.matfyz.sykora.planning.predicate.PredicateSet):::ENTER
this.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
size(this.predicates[]) one of { 4, 5 }
size(arg0.predicates[]) one of { 1, 2 }
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.contains(cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT115
this.predicates has only one value
this.predicates[] contains no nulls and has only one value, of length 4
this.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
arg0.predicates has only one value
arg0.predicates[] contains no nulls and has only one value, of length 1
arg0.predicates[] elements has only one value
arg0.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
return == false
orig(this) has only one value
orig(arg0) has only one value
size(this.predicates[]) == 4
size(arg0.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.contains(cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT115;condition="not(return == true)"
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.contains(cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT116
return == true
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.contains(cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT116;condition="return == true"
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.contains(cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT
this.predicates == orig(this.predicates)
this.predicates[] == orig(this.predicates[])
arg0.predicates == orig(arg0.predicates)
arg0.predicates[] == orig(arg0.predicates[])
(return == false)  ==>  (arg0.predicates has only one value)
(return == false)  ==>  (arg0.predicates[] contains no nulls and has only one value, of length 1)
(return == false)  ==>  (arg0.predicates[] elements has only one value)
(return == false)  ==>  (arg0.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate])
(return == false)  ==>  (orig(arg0) has only one value)
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (size(arg0.predicates[]) == 1)
(return == false)  ==>  (size(this.predicates[]) == 4)
(return == false)  ==>  (this.predicates has only one value)
(return == false)  ==>  (this.predicates[] contains no nulls and has only one value, of length 4)
(return == false)  ==>  (this.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate])
(return == true)  ==>  (arg0.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] })
(return == true)  ==>  (size(arg0.predicates[]) one of { 1, 2 })
(return == true)  ==>  (size(this.predicates[]) one of { 4, 5 })
(return == true)  ==>  (this.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] })
this.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.predicates[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.Predicate.class
arg0.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
size(this.predicates[]) one of { 4, 5 }
size(arg0.predicates[]) one of { 1, 2 }
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.contains(cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT;condition="return == true"
return == true
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.contains(cz.matfyz.sykora.planning.predicate.PredicateSet):::EXIT;condition="not(return == true)"
this.predicates has only one value
this.predicates[] contains no nulls and has only one value, of length 4
this.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate]
arg0.predicates has only one value
arg0.predicates[] contains no nulls and has only one value, of length 1
arg0.predicates[] elements has only one value
arg0.predicates[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.Predicate]
return == false
orig(this) has only one value
orig(arg0) has only one value
size(this.predicates[]) == 4
size(arg0.predicates[]) == 1
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.getPredicate(int):::ENTER
this.predicates != null
arg0 >= 0
size(this.predicates[]) >= 1
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.getPredicate(int):::EXIT
this.predicates == orig(this.predicates)
this.predicates[] == orig(this.predicates[])
this.predicates != null
return != null
return.parameters != null
return.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
return.parameters[] elements != null
return.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
return.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
return.parameters[].dependentBindings elements != null
return.parameters[].distinctBindings elements != null
return.predicateName != null
return.predicateName.toString one of { "mam", "zbozi" }
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == false
size(this.predicates[]) >= 1
size(return.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.getPredicateCount():::ENTER
this.predicates != null
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.getPredicateCount():::EXIT
this.predicates == orig(this.predicates)
this.predicates[] == orig(this.predicates[])
this.predicates != null
return >= 0
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.initialize():::ENTER
this.predicates == null
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.initialize():::EXIT
this.predicates != null
this.predicates[] == []
this.predicates[].getClass().getName() == []
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.iterator():::ENTER
this.predicates != null
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.iterator():::EXIT
this.predicates == orig(this.predicates)
this.predicates[] == orig(this.predicates[])
this.predicates != null
return != null
return.getClass().getName() == java.util.ArrayList$Itr.class
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.remove(cz.matfyz.sykora.planning.predicate.Predicate):::ENTER
this.predicates[].getClass().getName() one of { [cz.matfyz.sykora.planning.predicate.Predicate], [cz.matfyz.sykora.planning.predicate.Predicate, cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg0.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg0.predicateName.toString one of { "mam", "zbozi" }
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == false
size(this.predicates[]) one of { 1, 2 }
size(arg0.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.predicate.PredicateSet.remove(cz.matfyz.sykora.planning.predicate.Predicate):::EXIT
this.predicates == orig(this.predicates)
arg0.parameters == orig(arg0.parameters)
arg0.parameters.getClass().getName() == orig(arg0.parameters.getClass().getName())
arg0.parameters[] == orig(arg0.parameters[])
arg0.parameters[].boundValue == orig(arg0.parameters[].boundValue)
arg0.parameters[].dependentBindings == orig(arg0.parameters[].dependentBindings)
arg0.parameters[].distinctBindings == orig(arg0.parameters[].distinctBindings)
arg0.predicateName == orig(arg0.predicateName)
arg0.predicateName.toString == orig(arg0.predicateName.toString)
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled)
size(this.predicates[]) == orig(size(this.predicates[]))-1
this.predicates[].getClass().getName() one of { [], [cz.matfyz.sykora.planning.predicate.Predicate] }
arg0.parameters.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding[].class
arg0.parameters[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.parameters[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.parameters[].boundValue.toString elements one of { "brambory", "orezavatko", "penize" }
arg0.predicateName.toString one of { "mam", "zbozi" }
cz.matfyz.sykora.planning.predicate.Predicate.$assertionsDisabled == false
size(arg0.parameters[]) == 1
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding:::CLASS
cz.matfyz.sykora.planning.predicate.ValueBinding.$assertionsDisabled == false
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding:::OBJECT
this.boundValue.toString one of { "brambory", "orezavatko", "penize" }
this.dependentBindings[] elements != null
this.dependentBindings[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
this.dependentBindings[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
this.distinctBindings[] == []
this.distinctBindings[].getClass().getName() == []
size(this.dependentBindings[]) == 1
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.ValueBinding():::EXIT
this.boundValue == null
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.ValueBinding(java.lang.String):::ENTER
arg0 != null
arg0.toString one of { "brambory", "orezavatko", "penize" }
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.ValueBinding(java.lang.String):::EXIT
this.boundValue == orig(arg0)
arg0.toString == orig(arg0.toString)
this.boundValue != null
this.dependentBindings != null
this.distinctBindings != null
arg0.toString one of { "brambory", "orezavatko", "penize" }
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.bind(cz.matfyz.sykora.planning.predicate.ValueBinding):::ENTER
this.boundValue == null
arg0.boundValue.toString one of { "brambory", "orezavatko", "penize" }
arg0.dependentBindings[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.dependentBindings[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.distinctBindings[] == []
arg0.distinctBindings[].getClass().getName() == []
size(arg0.dependentBindings[]) == 1
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.bind(cz.matfyz.sykora.planning.predicate.ValueBinding):::EXIT134
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.bind(cz.matfyz.sykora.planning.predicate.ValueBinding):::EXIT134;condition="return == true"
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.bind(cz.matfyz.sykora.planning.predicate.ValueBinding):::EXIT
this.boundValue == arg0.boundValue
this.boundValue == orig(arg0.boundValue)
this.dependentBindings == orig(this.dependentBindings)
this.dependentBindings[] == orig(this.dependentBindings[])
this.distinctBindings == orig(this.distinctBindings)
this.distinctBindings[] == orig(this.distinctBindings[])
cz.matfyz.sykora.planning.predicate.ValueBinding.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.ValueBinding.$assertionsDisabled)
arg0.boundValue.toString == orig(arg0.boundValue.toString)
arg0.dependentBindings == orig(arg0.dependentBindings)
arg0.dependentBindings[] == orig(arg0.dependentBindings[])
arg0.distinctBindings == orig(arg0.distinctBindings)
arg0.distinctBindings[] == orig(arg0.distinctBindings[])
arg0.boundValue.toString one of { "brambory", "orezavatko", "penize" }
arg0.dependentBindings[].getClass().getName() == [cz.matfyz.sykora.planning.predicate.ValueBinding]
arg0.dependentBindings[].getClass().getName() elements == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.distinctBindings[] == []
arg0.distinctBindings[].getClass().getName() == []
return == true
size(arg0.dependentBindings[]) == 1
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.bind(cz.matfyz.sykora.planning.predicate.ValueBinding):::EXIT;condition="return == true"
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.bind(java.lang.String):::ENTER
this.boundValue == null
arg0.toString one of { "brambory", "orezavatko", "penize" }
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.bind(java.lang.String):::EXIT113
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.bind(java.lang.String):::EXIT113;condition="return == true"
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.bind(java.lang.String):::EXIT
this.boundValue == orig(arg0)
this.dependentBindings == orig(this.dependentBindings)
this.dependentBindings[] == orig(this.dependentBindings[])
this.distinctBindings == orig(this.distinctBindings)
this.distinctBindings[] == orig(this.distinctBindings[])
cz.matfyz.sykora.planning.predicate.ValueBinding.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.ValueBinding.$assertionsDisabled)
arg0.toString == orig(arg0.toString)
arg0.toString one of { "brambory", "orezavatko", "penize" }
return == true
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.bind(java.lang.String):::EXIT;condition="return == true"
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.clear():::ENTER
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.clear():::EXIT156
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.clear():::EXIT
this.dependentBindings == orig(this.dependentBindings)
this.dependentBindings[] == orig(this.dependentBindings[])
this.distinctBindings == orig(this.distinctBindings)
this.distinctBindings[] == orig(this.distinctBindings[])
cz.matfyz.sykora.planning.predicate.ValueBinding.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.ValueBinding.$assertionsDisabled)
this.boundValue == null
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.equals(java.lang.Object):::ENTER
this.boundValue != null
this.dependentBindings != null
this.distinctBindings != null
arg0 != null
arg0.getClass().getName() == cz.matfyz.sykora.planning.predicate.ValueBinding.class
arg0.getClass().getName() in this.dependentBindings[].getClass().getName()
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.equals(java.lang.Object):::EXIT176
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.equals(java.lang.Object):::EXIT176;condition="return == true"
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.equals(java.lang.Object):::EXIT176;condition="not(return == true)"
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.equals(java.lang.Object):::EXIT
this.boundValue == orig(this.boundValue)
this.boundValue.toString == orig(this.boundValue.toString)
this.dependentBindings == orig(this.dependentBindings)
this.dependentBindings[] == orig(this.dependentBindings[])
this.distinctBindings == orig(this.distinctBindings)
this.distinctBindings[] == orig(this.distinctBindings[])
cz.matfyz.sykora.planning.predicate.ValueBinding.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.ValueBinding.$assertionsDisabled)
this.boundValue != null
this.dependentBindings != null
this.distinctBindings != null
orig(arg0.getClass().getName()) in this.dependentBindings[].getClass().getName()
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.equals(java.lang.Object):::EXIT;condition="return == true"
return == true
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.equals(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.getValue():::ENTER
this.boundValue != null
this.dependentBindings != null
this.distinctBindings != null
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.getValue():::EXIT
this.boundValue == return
this.boundValue.toString == orig(this.boundValue.toString)
this.dependentBindings == orig(this.dependentBindings)
this.dependentBindings[] == orig(this.dependentBindings[])
this.distinctBindings == orig(this.distinctBindings)
this.distinctBindings[] == orig(this.distinctBindings[])
cz.matfyz.sykora.planning.predicate.ValueBinding.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.ValueBinding.$assertionsDisabled)
return == orig(this.boundValue)
this.dependentBindings != null
this.distinctBindings != null
return != null
return.toString one of { "brambory", "orezavatko", "penize" }
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.initialize():::ENTER
this.boundValue == null
this.dependentBindings == null
this.distinctBindings == null
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.initialize():::EXIT
this.boundValue == orig(this.boundValue)
cz.matfyz.sykora.planning.predicate.ValueBinding.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.ValueBinding.$assertionsDisabled)
this.boundValue == null
this.dependentBindings != null
this.distinctBindings != null
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.isBound():::ENTER
this.dependentBindings != null
this.distinctBindings != null
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.isBound():::EXIT
this.boundValue == orig(this.boundValue)
this.boundValue.toString == orig(this.boundValue.toString)
this.dependentBindings == orig(this.dependentBindings)
this.dependentBindings[] == orig(this.dependentBindings[])
this.distinctBindings == orig(this.distinctBindings)
this.distinctBindings[] == orig(this.distinctBindings[])
cz.matfyz.sykora.planning.predicate.ValueBinding.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.ValueBinding.$assertionsDisabled)
(this.boundValue != null)  <==>  (return == true)
(this.boundValue != null)  ==>  (this.boundValue.toString one of { "brambory", "orezavatko", "penize" })
(this.boundValue == null)  <==>  (return == false)
this.dependentBindings != null
this.distinctBindings != null
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.isBound():::EXIT;condition="return == true"
this.boundValue != null
return == true
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.isBound():::EXIT;condition="not(return == true)"
this.boundValue == null
return == false
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.setValue(java.lang.String):::ENTER
this.dependentBindings != null
this.distinctBindings != null
arg0.toString one of { "brambory", "orezavatko", "penize" }
===========================================================================
cz.matfyz.sykora.planning.predicate.ValueBinding.setValue(java.lang.String):::EXIT
this.boundValue == orig(arg0)
this.boundValue.toString == orig(this.boundValue.toString)
this.dependentBindings == orig(this.dependentBindings)
this.dependentBindings[] == orig(this.dependentBindings[])
this.distinctBindings == orig(this.distinctBindings)
this.distinctBindings[] == orig(this.distinctBindings[])
cz.matfyz.sykora.planning.predicate.ValueBinding.$assertionsDisabled == orig(cz.matfyz.sykora.planning.predicate.ValueBinding.$assertionsDisabled)
arg0.toString == orig(arg0.toString)
this.dependentBindings != null
this.distinctBindings != null
arg0.toString one of { "brambory", "orezavatko", "penize" }
===========================================================================
junit.framework.Assert:::OBJECT
this has only one value
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.TestCase:::OBJECT
this has only one value
this.getClass().getName() == PlanningProblemTest.class
this.fName == null
===========================================================================
junit.framework.TestCase.TestCase():::EXIT
Exiting Daikon.
