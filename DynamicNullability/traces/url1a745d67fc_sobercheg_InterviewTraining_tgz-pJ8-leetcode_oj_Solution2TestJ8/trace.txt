Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

===========================================================================
leetcode.oj.Solution$ListNode:::OBJECT
this.val >= 1
===========================================================================
leetcode.oj.Solution$ListNode.ListNode(int):::ENTER
arg0 >= 1
===========================================================================
leetcode.oj.Solution$ListNode.ListNode(int):::EXIT
this.val == orig(arg0)
this.next == null
===========================================================================
leetcode.oj.Solution$ListNode.ListNode(int, leetcode.oj.Solution$ListNode):::ENTER
arg0 one of { 1, 3, 4 }
arg1.val one of { 2, 4, 5 }
arg1.next.val == 5
arg1.next.next == null
===========================================================================
leetcode.oj.Solution$ListNode.ListNode(int, leetcode.oj.Solution$ListNode):::EXIT
this.val == orig(arg0)
this.next == orig(arg1)
this.next.val == arg1.val
this.next.next == arg1.next
this.next.next.val == arg1.next.val
arg1.val == orig(arg1.val)
arg1.next == orig(arg1.next)
arg1.next.val == orig(arg1.next.val)
arg1.next.next == orig(arg1.next.next)
this.val one of { 1, 3, 4 }
this.next.next.next == null
arg1.val one of { 2, 4, 5 }
arg1.next.val == 5
arg1.next.next == null
===========================================================================
leetcode.oj.Solution$ListNode.build(int[]):::ENTER
arg0 != null
arg0[] elements >= 1
size(arg0[]) >= 1
===========================================================================
leetcode.oj.Solution$ListNode.build(int[]):::EXIT
arg0[] == orig(arg0[])
arg0[] elements >= 1
return != null
return.val one of { 1, 2, 5 }
return.val in arg0[]
return.next.val in arg0[]
===========================================================================
leetcode.oj.Solution$ListNode.equals(java.lang.Object):::ENTER
arg0 != null
arg0.getClass().getName() == leetcode.oj.Solution$ListNode.class
===========================================================================
leetcode.oj.Solution$ListNode.equals(java.lang.Object):::EXIT98
===========================================================================
leetcode.oj.Solution$ListNode.equals(java.lang.Object):::EXIT98;condition="return == true"
===========================================================================
leetcode.oj.Solution$ListNode.equals(java.lang.Object):::EXIT
this.val == orig(this.val)
this.next == orig(this.next)
this.next.val == orig(this.next.val)
this.next.next == orig(this.next.next)
this.next.next.val == orig(this.next.next.val)
this.next.next.next == orig(this.next.next.next)
return == true
===========================================================================
leetcode.oj.Solution$ListNode.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
leetcode.oj.Solution$TreeNode:::OBJECT
this.left.right.right == null
this.right.left.val >= 2
this.right.left.left == null
this.right.left.right == null
this.val != this.left.left.val
this.val != this.left.right.val
this.val != this.right.val
this.val != this.right.left.val
this.val != this.right.right.val
this.left.val != this.left.left.val
this.left.val != this.left.right.val
this.left.val != this.right.left.val
this.left.left.val != this.left.right.val
this.left.left.val != this.right.val
this.left.right.val != this.right.val
this.left.right.val <= this.right.left.val
this.right.val != this.right.left.val
this.right.val != this.right.right.val
===========================================================================
leetcode.oj.Solution$TreeNode.TreeNode(int):::ENTER
===========================================================================
leetcode.oj.Solution$TreeNode.TreeNode(int):::EXIT
this.val == orig(arg0)
this.left == null
this.right == null
===========================================================================
leetcode.oj.Solution$TreeNode.TreeNode(int, leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode):::ENTER
arg1.right.right == null
arg2.left.left == null
arg2.left.right == null
arg0 != arg1.left.val
arg0 != arg1.right.val
arg0 != arg2.val
arg0 != arg2.left.val
arg0 != arg2.right.val
arg1.val != arg1.left.val
arg1.val != arg1.right.val
arg1.val != arg2.left.val
arg1.left.val != arg1.right.val
arg1.left.val != arg2.val
arg1.right.val != arg2.val
arg2.val != arg2.left.val
arg2.val != arg2.right.val
===========================================================================
leetcode.oj.Solution$TreeNode.TreeNode(int, leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode):::EXIT
this.val == orig(arg0)
this.left == orig(arg1)
this.left.val == arg1.val
this.left.left == arg1.left
this.left.left.val == arg1.left.val
this.left.left.left == arg1.left.left
this.left.left.right == arg1.left.right
this.left.right == arg1.right
this.left.right.val == arg1.right.val
this.left.right.left == arg1.right.left
this.right == orig(arg2)
this.right.val == arg2.val
this.right.left == arg2.left
this.right.left.val == arg2.left.val
this.right.right == arg2.right
this.right.right.val == arg2.right.val
this.right.right.left == arg2.right.left
this.right.right.right == arg2.right.right
arg1.val == orig(arg1.val)
arg1.left == orig(arg1.left)
arg1.left.val == orig(arg1.left.val)
arg1.left.left == orig(arg1.left.left)
arg1.left.right == orig(arg1.left.right)
arg1.right == orig(arg1.right)
arg1.right.val == orig(arg1.right.val)
arg1.right.left == orig(arg1.right.left)
arg1.right.right == orig(arg1.right.right)
arg2.val == orig(arg2.val)
arg2.left == orig(arg2.left)
arg2.left.val == orig(arg2.left.val)
arg2.left.left == orig(arg2.left.left)
arg2.left.right == orig(arg2.left.right)
arg2.right == orig(arg2.right)
arg2.right.val == orig(arg2.right.val)
arg2.right.left == orig(arg2.right.left)
arg2.right.right == orig(arg2.right.right)
arg1.right.right == null
arg2.left.left == null
arg2.left.right == null
this.val != arg1.left.val
this.val != arg1.right.val
this.val != arg2.val
this.val != arg2.left.val
this.val != arg2.right.val
arg1.val != arg1.left.val
arg1.val != arg1.right.val
arg1.val != arg2.left.val
arg1.left.val != arg1.right.val
arg1.left.val != arg2.val
arg1.right.val != arg2.val
arg2.val != arg2.left.val
arg2.val != arg2.right.val
===========================================================================
leetcode.oj.Solution$TreeNode.equals(java.lang.Object):::ENTER
this.val >= 1
this.left.val >= 1
this.left.left.val one of { 1, 3, 4 }
this.left.right.val one of { 2, 5, 6 }
this.left.right.left == null
this.right.left.val one of { 2, 4, 8 }
this.right.right.left == null
arg0 != null
arg0.getClass().getName() == leetcode.oj.Solution$TreeNode.class
this.val != this.left.val
this.val < this.right.val
this.val - this.right.right.val + 2 == 0
this.left.val < this.right.val
this.right.val - this.right.right.val + 1 == 0
===========================================================================
leetcode.oj.Solution$TreeNode.equals(java.lang.Object):::EXIT47
===========================================================================
leetcode.oj.Solution$TreeNode.equals(java.lang.Object):::EXIT47;condition="return == true"
===========================================================================
leetcode.oj.Solution$TreeNode.equals(java.lang.Object):::EXIT
this.val == orig(this.val)
this.left == orig(this.left)
this.left.val == orig(this.left.val)
this.left.left == orig(this.left.left)
this.left.left.val == orig(this.left.left.val)
this.left.left.left == orig(this.left.left.left)
this.left.left.right == orig(this.left.left.right)
this.left.right == orig(this.left.right)
this.left.right.val == orig(this.left.right.val)
this.left.right.left == orig(this.left.right.left)
this.left.right.right == orig(this.left.right.right)
this.right == orig(this.right)
this.right.val == orig(this.right.val)
this.right.left == orig(this.right.left)
this.right.left.val == orig(this.right.left.val)
this.right.left.left == orig(this.right.left.left)
this.right.left.right == orig(this.right.left.right)
this.right.right == orig(this.right.right)
this.right.right.val == orig(this.right.right.val)
this.right.right.left == orig(this.right.right.left)
this.right.right.right == orig(this.right.right.right)
this.val >= 1
this.left.val >= 1
this.left.left.val one of { 1, 3, 4 }
this.left.right.val one of { 2, 5, 6 }
this.left.right.left == null
this.right.left.val one of { 2, 4, 8 }
this.right.right.left == null
return == true
this.val != this.left.val
this.val < this.right.val
this.val - this.right.right.val + 2 == 0
this.left.val < this.right.val
this.right.val - this.right.right.val + 1 == 0
===========================================================================
leetcode.oj.Solution$TreeNode.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
leetcode.oj.Solution2$Input:::CLASS
leetcode.oj.Solution2$Input.INVALID has only one value
leetcode.oj.Solution2$Input.INVALID != null
leetcode.oj.Solution2$Input.SPACE has only one value
leetcode.oj.Solution2$Input.SPACE != null
leetcode.oj.Solution2$Input.SIGN has only one value
leetcode.oj.Solution2$Input.SIGN != null
leetcode.oj.Solution2$Input.EXPONENT has only one value
leetcode.oj.Solution2$Input.EXPONENT != null
leetcode.oj.Solution2$Input.DIGIT has only one value
leetcode.oj.Solution2$Input.DIGIT != null
leetcode.oj.Solution2$Input.DOT has only one value
leetcode.oj.Solution2$Input.DOT != null
leetcode.oj.Solution2$Input.INVALID.value == 0
leetcode.oj.Solution2$Input.$VALUES has only one value
leetcode.oj.Solution2$Input.$VALUES != null
leetcode.oj.Solution2$Input.$VALUES.getClass().getName() == leetcode.oj.Solution2$Input[].class
leetcode.oj.Solution2$Input.$VALUES[] contains no nulls and has only one value, of length 6
leetcode.oj.Solution2$Input.$VALUES[] elements != null
leetcode.oj.Solution2$Input.$VALUES[].getClass().getName() == [leetcode.oj.Solution2.Input, leetcode.oj.Solution2.Input, leetcode.oj.Solution2.Input, leetcode.oj.Solution2.Input, leetcode.oj.Solution2.Input, leetcode.oj.Solution2.Input]
leetcode.oj.Solution2$Input.$VALUES[].getClass().getName() elements == leetcode.oj.Solution2.Input.class
leetcode.oj.Solution2$Input.$VALUES[].value == [0, 1, 2, 3, 4, 5]
leetcode.oj.Solution2$Input.$VALUES[].value elements >= 0
leetcode.oj.Solution2$Input.$VALUES[].value sorted by <
leetcode.oj.Solution2$Input.SPACE.value == 1
leetcode.oj.Solution2$Input.SIGN.value == 2
leetcode.oj.Solution2$Input.EXPONENT.value == 3
leetcode.oj.Solution2$Input.DIGIT.value == 4
leetcode.oj.Solution2$Input.DOT.value == 5
size(leetcode.oj.Solution2$Input.$VALUES[]) == 6
===========================================================================
leetcode.oj.Solution2$Input:::OBJECT
===========================================================================
leetcode.oj.Solution2$Input.Input(java.lang.String, int, int):::ENTER
===========================================================================
leetcode.oj.Solution2$Input.Input(java.lang.String, int, int):::EXIT
this.value == orig(arg2)
arg0.toString == orig(arg0.toString)
===========================================================================
leetcode.oj.Solution2$Input.of(char):::ENTER
===========================================================================
leetcode.oj.Solution2$Input.of(char):::EXIT151
leetcode.oj.Solution2$Input.SPACE == return
return.value == 1
orig(arg0) == 32
===========================================================================
leetcode.oj.Solution2$Input.of(char):::EXIT152
leetcode.oj.Solution2$Input.SIGN == return
return.value == 2
orig(arg0) == 45
===========================================================================
leetcode.oj.Solution2$Input.of(char):::EXIT153
leetcode.oj.Solution2$Input.EXPONENT == return
return.value == 3
orig(arg0) == 101
===========================================================================
leetcode.oj.Solution2$Input.of(char):::EXIT154
leetcode.oj.Solution2$Input.DIGIT == return
return.value == 4
orig(arg0) one of { 49, 50, 51 }
===========================================================================
leetcode.oj.Solution2$Input.of(char):::EXIT155
leetcode.oj.Solution2$Input.DOT == return
return.value == 5
orig(arg0) == 46
===========================================================================
leetcode.oj.Solution2$Input.of(char):::EXIT156
leetcode.oj.Solution2$Input.INVALID == return
return.value == 0
orig(arg0) == 97
===========================================================================
leetcode.oj.Solution2$Input.of(char):::EXIT
leetcode.oj.Solution2$Input.INVALID == orig(leetcode.oj.Solution2$Input.INVALID)
leetcode.oj.Solution2$Input.SPACE == orig(leetcode.oj.Solution2$Input.SPACE)
leetcode.oj.Solution2$Input.SIGN == orig(leetcode.oj.Solution2$Input.SIGN)
leetcode.oj.Solution2$Input.EXPONENT == orig(leetcode.oj.Solution2$Input.EXPONENT)
leetcode.oj.Solution2$Input.DIGIT == orig(leetcode.oj.Solution2$Input.DIGIT)
leetcode.oj.Solution2$Input.DOT == orig(leetcode.oj.Solution2$Input.DOT)
leetcode.oj.Solution2$Input.INVALID.value == orig(leetcode.oj.Solution2$Input.INVALID.value)
leetcode.oj.Solution2$Input.$VALUES == orig(leetcode.oj.Solution2$Input.$VALUES)
leetcode.oj.Solution2$Input.$VALUES.getClass().getName() == orig(leetcode.oj.Solution2$Input.$VALUES.getClass().getName())
leetcode.oj.Solution2$Input.$VALUES[] == orig(leetcode.oj.Solution2$Input.$VALUES[])
leetcode.oj.Solution2$Input.$VALUES[].value == orig(leetcode.oj.Solution2$Input.$VALUES[].value)
leetcode.oj.Solution2$Input.SPACE.value == orig(leetcode.oj.Solution2$Input.SPACE.value)
leetcode.oj.Solution2$Input.SIGN.value == orig(leetcode.oj.Solution2$Input.SIGN.value)
leetcode.oj.Solution2$Input.EXPONENT.value == orig(leetcode.oj.Solution2$Input.EXPONENT.value)
leetcode.oj.Solution2$Input.DIGIT.value == orig(leetcode.oj.Solution2$Input.DIGIT.value)
leetcode.oj.Solution2$Input.DOT.value == orig(leetcode.oj.Solution2$Input.DOT.value)
return != null
===========================================================================
leetcode.oj.Solution2$RandomListNode:::OBJECT
this.next == null
this.random == null
===========================================================================
leetcode.oj.Solution2$RandomListNode.RandomListNode(int):::ENTER
===========================================================================
leetcode.oj.Solution2$RandomListNode.RandomListNode(int):::EXIT
this.label == orig(arg0)
===========================================================================
leetcode.oj.Solution2$State:::OBJECT
===========================================================================
leetcode.oj.Solution2$State.State(java.lang.String, int, int):::ENTER
===========================================================================
leetcode.oj.Solution2$State.State(java.lang.String, int, int):::EXIT
this.value == orig(arg2)
arg0.toString == orig(arg0.toString)
===========================================================================
leetcode.oj.Solution2$Transition:::OBJECT
this.state != null
leetcode.oj.Solution2$State.START_SPACE has only one value
leetcode.oj.Solution2$State.START_SPACE != null
leetcode.oj.Solution2$State.START_DIGIT has only one value
leetcode.oj.Solution2$State.START_DIGIT != null
leetcode.oj.Solution2$State.SIGN_READ has only one value
leetcode.oj.Solution2$State.SIGN_READ != null
leetcode.oj.Solution2$State.DOT_READ has only one value
leetcode.oj.Solution2$State.DOT_READ != null
leetcode.oj.Solution2$State.DIGIT_AFTER_DOT has only one value
leetcode.oj.Solution2$State.DIGIT_AFTER_DOT != null
leetcode.oj.Solution2$State.EXPONENT has only one value
leetcode.oj.Solution2$State.EXPONENT != null
leetcode.oj.Solution2$State.EXPONENT_SIGN has only one value
leetcode.oj.Solution2$State.EXPONENT_SIGN != null
leetcode.oj.Solution2$State.EXPONENT_DIGIT has only one value
leetcode.oj.Solution2$State.EXPONENT_DIGIT != null
leetcode.oj.Solution2$State.END_SPACE has only one value
leetcode.oj.Solution2$State.END_SPACE != null
leetcode.oj.Solution2$State.START_SPACE.value == 0
leetcode.oj.Solution2$State.$VALUES has only one value
leetcode.oj.Solution2$State.$VALUES != null
leetcode.oj.Solution2$State.$VALUES.getClass().getName() == leetcode.oj.Solution2$State[].class
leetcode.oj.Solution2$State.$VALUES[] contains no nulls and has only one value, of length 9
leetcode.oj.Solution2$State.$VALUES[] elements != null
leetcode.oj.Solution2$State.$VALUES[].getClass().getName() == [leetcode.oj.Solution2.State, leetcode.oj.Solution2.State, leetcode.oj.Solution2.State, leetcode.oj.Solution2.State, leetcode.oj.Solution2.State, leetcode.oj.Solution2.State, leetcode.oj.Solution2.State, leetcode.oj.Solution2.State, leetcode.oj.Solution2.State]
leetcode.oj.Solution2$State.$VALUES[].getClass().getName() elements == leetcode.oj.Solution2.State.class
leetcode.oj.Solution2$State.$VALUES[].value == [0, 1, 2, 3, 4, 5, 6, 7, 8]
leetcode.oj.Solution2$State.$VALUES[].value elements >= 0
leetcode.oj.Solution2$State.$VALUES[].value sorted by <
leetcode.oj.Solution2$State.START_DIGIT.value == 1
leetcode.oj.Solution2$State.SIGN_READ.value == 2
leetcode.oj.Solution2$State.DOT_READ.value == 3
leetcode.oj.Solution2$State.DIGIT_AFTER_DOT.value == 4
leetcode.oj.Solution2$State.EXPONENT.value == 5
leetcode.oj.Solution2$State.EXPONENT_SIGN.value == 6
leetcode.oj.Solution2$State.EXPONENT_DIGIT.value == 7
leetcode.oj.Solution2$State.END_SPACE.value == 8
this.state.value >= 0
this.input != null
leetcode.oj.Solution2$Input.INVALID has only one value
leetcode.oj.Solution2$Input.INVALID != null
leetcode.oj.Solution2$Input.SPACE has only one value
leetcode.oj.Solution2$Input.SPACE != null
leetcode.oj.Solution2$Input.SIGN has only one value
leetcode.oj.Solution2$Input.SIGN != null
leetcode.oj.Solution2$Input.EXPONENT has only one value
leetcode.oj.Solution2$Input.EXPONENT != null
leetcode.oj.Solution2$Input.DIGIT has only one value
leetcode.oj.Solution2$Input.DIGIT != null
leetcode.oj.Solution2$Input.DOT has only one value
leetcode.oj.Solution2$Input.DOT != null
leetcode.oj.Solution2$Input.INVALID.value == 0
leetcode.oj.Solution2$Input.$VALUES has only one value
leetcode.oj.Solution2$Input.$VALUES != null
leetcode.oj.Solution2$Input.$VALUES.getClass().getName() == leetcode.oj.Solution2$Input[].class
leetcode.oj.Solution2$Input.$VALUES[] contains no nulls and has only one value, of length 6
leetcode.oj.Solution2$Input.$VALUES[] elements != null
leetcode.oj.Solution2$Input.$VALUES[].getClass().getName() == [leetcode.oj.Solution2.Input, leetcode.oj.Solution2.Input, leetcode.oj.Solution2.Input, leetcode.oj.Solution2.Input, leetcode.oj.Solution2.Input, leetcode.oj.Solution2.Input]
leetcode.oj.Solution2$Input.$VALUES[].getClass().getName() elements == leetcode.oj.Solution2.Input.class
leetcode.oj.Solution2$Input.$VALUES[].value == [0, 1, 2, 3, 4, 5]
leetcode.oj.Solution2$Input.$VALUES[].value elements >= 0
leetcode.oj.Solution2$Input.$VALUES[].value sorted by <
leetcode.oj.Solution2$Input.SPACE.value == 1
leetcode.oj.Solution2$Input.SIGN.value == 2
leetcode.oj.Solution2$Input.EXPONENT.value == 3
leetcode.oj.Solution2$Input.DIGIT.value == 4
leetcode.oj.Solution2$Input.DOT.value == 5
size(leetcode.oj.Solution2$State.$VALUES[]) == 9
size(leetcode.oj.Solution2$Input.$VALUES[]) == 6
leetcode.oj.Solution2$State.$VALUES.getClass().getName() != leetcode.oj.Solution2$Input.$VALUES.getClass().getName()
===========================================================================
leetcode.oj.Solution2$Transition.Transition(leetcode.oj.Solution2$State, leetcode.oj.Solution2$Input):::ENTER
arg0 != null
leetcode.oj.Solution2$State.START_SPACE has only one value
leetcode.oj.Solution2$State.START_SPACE != null
leetcode.oj.Solution2$State.START_DIGIT has only one value
leetcode.oj.Solution2$State.START_DIGIT != null
leetcode.oj.Solution2$State.SIGN_READ has only one value
leetcode.oj.Solution2$State.SIGN_READ != null
leetcode.oj.Solution2$State.DOT_READ has only one value
leetcode.oj.Solution2$State.DOT_READ != null
leetcode.oj.Solution2$State.DIGIT_AFTER_DOT has only one value
leetcode.oj.Solution2$State.DIGIT_AFTER_DOT != null
leetcode.oj.Solution2$State.EXPONENT has only one value
leetcode.oj.Solution2$State.EXPONENT != null
leetcode.oj.Solution2$State.EXPONENT_SIGN has only one value
leetcode.oj.Solution2$State.EXPONENT_SIGN != null
leetcode.oj.Solution2$State.EXPONENT_DIGIT has only one value
leetcode.oj.Solution2$State.EXPONENT_DIGIT != null
leetcode.oj.Solution2$State.END_SPACE has only one value
leetcode.oj.Solution2$State.END_SPACE != null
leetcode.oj.Solution2$State.START_SPACE.value == 0
leetcode.oj.Solution2$State.$VALUES has only one value
leetcode.oj.Solution2$State.$VALUES != null
leetcode.oj.Solution2$State.$VALUES.getClass().getName() == leetcode.oj.Solution2$State[].class
leetcode.oj.Solution2$State.$VALUES[] contains no nulls and has only one value, of length 9
leetcode.oj.Solution2$State.$VALUES[] elements != null
leetcode.oj.Solution2$State.$VALUES[].getClass().getName() == [leetcode.oj.Solution2.State, leetcode.oj.Solution2.State, leetcode.oj.Solution2.State, leetcode.oj.Solution2.State, leetcode.oj.Solution2.State, leetcode.oj.Solution2.State, leetcode.oj.Solution2.State, leetcode.oj.Solution2.State, leetcode.oj.Solution2.State]
leetcode.oj.Solution2$State.$VALUES[].getClass().getName() elements == leetcode.oj.Solution2.State.class
leetcode.oj.Solution2$State.$VALUES[].value == [0, 1, 2, 3, 4, 5, 6, 7, 8]
leetcode.oj.Solution2$State.$VALUES[].value elements >= 0
leetcode.oj.Solution2$State.$VALUES[].value sorted by <
leetcode.oj.Solution2$State.START_DIGIT.value == 1
leetcode.oj.Solution2$State.SIGN_READ.value == 2
leetcode.oj.Solution2$State.DOT_READ.value == 3
leetcode.oj.Solution2$State.DIGIT_AFTER_DOT.value == 4
leetcode.oj.Solution2$State.EXPONENT.value == 5
leetcode.oj.Solution2$State.EXPONENT_SIGN.value == 6
leetcode.oj.Solution2$State.EXPONENT_DIGIT.value == 7
leetcode.oj.Solution2$State.END_SPACE.value == 8
arg0.value >= 0
arg1 != null
leetcode.oj.Solution2$Input.INVALID has only one value
leetcode.oj.Solution2$Input.INVALID != null
leetcode.oj.Solution2$Input.SPACE has only one value
leetcode.oj.Solution2$Input.SPACE != null
leetcode.oj.Solution2$Input.SIGN has only one value
leetcode.oj.Solution2$Input.SIGN != null
leetcode.oj.Solution2$Input.EXPONENT has only one value
leetcode.oj.Solution2$Input.EXPONENT != null
leetcode.oj.Solution2$Input.DIGIT has only one value
leetcode.oj.Solution2$Input.DIGIT != null
leetcode.oj.Solution2$Input.DOT has only one value
leetcode.oj.Solution2$Input.DOT != null
leetcode.oj.Solution2$Input.INVALID.value == 0
leetcode.oj.Solution2$Input.$VALUES has only one value
leetcode.oj.Solution2$Input.$VALUES != null
leetcode.oj.Solution2$Input.$VALUES.getClass().getName() == leetcode.oj.Solution2$Input[].class
leetcode.oj.Solution2$Input.$VALUES[] contains no nulls and has only one value, of length 6
leetcode.oj.Solution2$Input.$VALUES[] elements != null
leetcode.oj.Solution2$Input.$VALUES[].getClass().getName() == [leetcode.oj.Solution2.Input, leetcode.oj.Solution2.Input, leetcode.oj.Solution2.Input, leetcode.oj.Solution2.Input, leetcode.oj.Solution2.Input, leetcode.oj.Solution2.Input]
leetcode.oj.Solution2$Input.$VALUES[].getClass().getName() elements == leetcode.oj.Solution2.Input.class
leetcode.oj.Solution2$Input.$VALUES[].value == [0, 1, 2, 3, 4, 5]
leetcode.oj.Solution2$Input.$VALUES[].value elements >= 0
leetcode.oj.Solution2$Input.$VALUES[].value sorted by <
leetcode.oj.Solution2$Input.SPACE.value == 1
leetcode.oj.Solution2$Input.SIGN.value == 2
leetcode.oj.Solution2$Input.EXPONENT.value == 3
leetcode.oj.Solution2$Input.DIGIT.value == 4
leetcode.oj.Solution2$Input.DOT.value == 5
size(leetcode.oj.Solution2$State.$VALUES[]) == 9
size(leetcode.oj.Solution2$Input.$VALUES[]) == 6
leetcode.oj.Solution2$State.$VALUES.getClass().getName() != leetcode.oj.Solution2$Input.$VALUES.getClass().getName()
===========================================================================
leetcode.oj.Solution2$Transition.Transition(leetcode.oj.Solution2$State, leetcode.oj.Solution2$Input):::EXIT
this.state == orig(arg0)
leetcode.oj.Solution2$State.START_SPACE == orig(leetcode.oj.Solution2$State.START_SPACE)
leetcode.oj.Solution2$State.START_DIGIT == orig(leetcode.oj.Solution2$State.START_DIGIT)
leetcode.oj.Solution2$State.SIGN_READ == orig(leetcode.oj.Solution2$State.SIGN_READ)
leetcode.oj.Solution2$State.DOT_READ == orig(leetcode.oj.Solution2$State.DOT_READ)
leetcode.oj.Solution2$State.DIGIT_AFTER_DOT == orig(leetcode.oj.Solution2$State.DIGIT_AFTER_DOT)
leetcode.oj.Solution2$State.EXPONENT == orig(leetcode.oj.Solution2$State.EXPONENT)
leetcode.oj.Solution2$State.EXPONENT_SIGN == orig(leetcode.oj.Solution2$State.EXPONENT_SIGN)
leetcode.oj.Solution2$State.EXPONENT_DIGIT == orig(leetcode.oj.Solution2$State.EXPONENT_DIGIT)
leetcode.oj.Solution2$State.END_SPACE == orig(leetcode.oj.Solution2$State.END_SPACE)
leetcode.oj.Solution2$State.START_SPACE.value == orig(leetcode.oj.Solution2$State.START_SPACE.value)
leetcode.oj.Solution2$State.$VALUES == orig(leetcode.oj.Solution2$State.$VALUES)
leetcode.oj.Solution2$State.$VALUES.getClass().getName() == orig(leetcode.oj.Solution2$State.$VALUES.getClass().getName())
leetcode.oj.Solution2$State.$VALUES[] == orig(leetcode.oj.Solution2$State.$VALUES[])
leetcode.oj.Solution2$State.$VALUES[].value == orig(leetcode.oj.Solution2$State.$VALUES[].value)
leetcode.oj.Solution2$State.START_DIGIT.value == orig(leetcode.oj.Solution2$State.START_DIGIT.value)
leetcode.oj.Solution2$State.SIGN_READ.value == orig(leetcode.oj.Solution2$State.SIGN_READ.value)
leetcode.oj.Solution2$State.DOT_READ.value == orig(leetcode.oj.Solution2$State.DOT_READ.value)
leetcode.oj.Solution2$State.DIGIT_AFTER_DOT.value == orig(leetcode.oj.Solution2$State.DIGIT_AFTER_DOT.value)
leetcode.oj.Solution2$State.EXPONENT.value == orig(leetcode.oj.Solution2$State.EXPONENT.value)
leetcode.oj.Solution2$State.EXPONENT_SIGN.value == orig(leetcode.oj.Solution2$State.EXPONENT_SIGN.value)
leetcode.oj.Solution2$State.EXPONENT_DIGIT.value == orig(leetcode.oj.Solution2$State.EXPONENT_DIGIT.value)
leetcode.oj.Solution2$State.END_SPACE.value == orig(leetcode.oj.Solution2$State.END_SPACE.value)
this.state.value == arg0.value
this.input == orig(arg1)
leetcode.oj.Solution2$Input.INVALID == orig(leetcode.oj.Solution2$Input.INVALID)
leetcode.oj.Solution2$Input.SPACE == orig(leetcode.oj.Solution2$Input.SPACE)
leetcode.oj.Solution2$Input.SIGN == orig(leetcode.oj.Solution2$Input.SIGN)
leetcode.oj.Solution2$Input.EXPONENT == orig(leetcode.oj.Solution2$Input.EXPONENT)
leetcode.oj.Solution2$Input.DIGIT == orig(leetcode.oj.Solution2$Input.DIGIT)
leetcode.oj.Solution2$Input.DOT == orig(leetcode.oj.Solution2$Input.DOT)
leetcode.oj.Solution2$Input.INVALID.value == orig(leetcode.oj.Solution2$Input.INVALID.value)
leetcode.oj.Solution2$Input.$VALUES == orig(leetcode.oj.Solution2$Input.$VALUES)
leetcode.oj.Solution2$Input.$VALUES.getClass().getName() == orig(leetcode.oj.Solution2$Input.$VALUES.getClass().getName())
leetcode.oj.Solution2$Input.$VALUES[] == orig(leetcode.oj.Solution2$Input.$VALUES[])
leetcode.oj.Solution2$Input.$VALUES[].value == orig(leetcode.oj.Solution2$Input.$VALUES[].value)
leetcode.oj.Solution2$Input.SPACE.value == orig(leetcode.oj.Solution2$Input.SPACE.value)
leetcode.oj.Solution2$Input.SIGN.value == orig(leetcode.oj.Solution2$Input.SIGN.value)
leetcode.oj.Solution2$Input.EXPONENT.value == orig(leetcode.oj.Solution2$Input.EXPONENT.value)
leetcode.oj.Solution2$Input.DIGIT.value == orig(leetcode.oj.Solution2$Input.DIGIT.value)
leetcode.oj.Solution2$Input.DOT.value == orig(leetcode.oj.Solution2$Input.DOT.value)
this.input.value == arg1.value
arg0.value == orig(arg0.value)
arg1.value == orig(arg1.value)
arg0.value >= 0
===========================================================================
leetcode.oj.Solution2$Transition.equals(java.lang.Object):::ENTER
arg0 != null
arg0.getClass().getName() == leetcode.oj.Solution2$Transition.class
leetcode.oj.Solution2$State.$VALUES.getClass().getName() != arg0.getClass().getName()
leetcode.oj.Solution2$Input.$VALUES.getClass().getName() != arg0.getClass().getName()
===========================================================================
leetcode.oj.Solution2$Transition.equals(java.lang.Object):::EXIT177
===========================================================================
leetcode.oj.Solution2$Transition.equals(java.lang.Object):::EXIT177;condition="return == true"
===========================================================================
leetcode.oj.Solution2$Transition.equals(java.lang.Object):::EXIT
this.state == orig(this.state)
leetcode.oj.Solution2$State.START_SPACE == orig(leetcode.oj.Solution2$State.START_SPACE)
leetcode.oj.Solution2$State.START_DIGIT == orig(leetcode.oj.Solution2$State.START_DIGIT)
leetcode.oj.Solution2$State.SIGN_READ == orig(leetcode.oj.Solution2$State.SIGN_READ)
leetcode.oj.Solution2$State.DOT_READ == orig(leetcode.oj.Solution2$State.DOT_READ)
leetcode.oj.Solution2$State.DIGIT_AFTER_DOT == orig(leetcode.oj.Solution2$State.DIGIT_AFTER_DOT)
leetcode.oj.Solution2$State.EXPONENT == orig(leetcode.oj.Solution2$State.EXPONENT)
leetcode.oj.Solution2$State.EXPONENT_SIGN == orig(leetcode.oj.Solution2$State.EXPONENT_SIGN)
leetcode.oj.Solution2$State.EXPONENT_DIGIT == orig(leetcode.oj.Solution2$State.EXPONENT_DIGIT)
leetcode.oj.Solution2$State.END_SPACE == orig(leetcode.oj.Solution2$State.END_SPACE)
leetcode.oj.Solution2$State.START_SPACE.value == orig(leetcode.oj.Solution2$State.START_SPACE.value)
leetcode.oj.Solution2$State.$VALUES == orig(leetcode.oj.Solution2$State.$VALUES)
leetcode.oj.Solution2$State.$VALUES.getClass().getName() == orig(leetcode.oj.Solution2$State.$VALUES.getClass().getName())
leetcode.oj.Solution2$State.$VALUES[] == orig(leetcode.oj.Solution2$State.$VALUES[])
leetcode.oj.Solution2$State.$VALUES[].value == orig(leetcode.oj.Solution2$State.$VALUES[].value)
leetcode.oj.Solution2$State.START_DIGIT.value == orig(leetcode.oj.Solution2$State.START_DIGIT.value)
leetcode.oj.Solution2$State.SIGN_READ.value == orig(leetcode.oj.Solution2$State.SIGN_READ.value)
leetcode.oj.Solution2$State.DOT_READ.value == orig(leetcode.oj.Solution2$State.DOT_READ.value)
leetcode.oj.Solution2$State.DIGIT_AFTER_DOT.value == orig(leetcode.oj.Solution2$State.DIGIT_AFTER_DOT.value)
leetcode.oj.Solution2$State.EXPONENT.value == orig(leetcode.oj.Solution2$State.EXPONENT.value)
leetcode.oj.Solution2$State.EXPONENT_SIGN.value == orig(leetcode.oj.Solution2$State.EXPONENT_SIGN.value)
leetcode.oj.Solution2$State.EXPONENT_DIGIT.value == orig(leetcode.oj.Solution2$State.EXPONENT_DIGIT.value)
leetcode.oj.Solution2$State.END_SPACE.value == orig(leetcode.oj.Solution2$State.END_SPACE.value)
this.state.value == orig(this.state.value)
this.input == orig(this.input)
leetcode.oj.Solution2$Input.INVALID == orig(leetcode.oj.Solution2$Input.INVALID)
leetcode.oj.Solution2$Input.SPACE == orig(leetcode.oj.Solution2$Input.SPACE)
leetcode.oj.Solution2$Input.SIGN == orig(leetcode.oj.Solution2$Input.SIGN)
leetcode.oj.Solution2$Input.EXPONENT == orig(leetcode.oj.Solution2$Input.EXPONENT)
leetcode.oj.Solution2$Input.DIGIT == orig(leetcode.oj.Solution2$Input.DIGIT)
leetcode.oj.Solution2$Input.DOT == orig(leetcode.oj.Solution2$Input.DOT)
leetcode.oj.Solution2$Input.INVALID.value == orig(leetcode.oj.Solution2$Input.INVALID.value)
leetcode.oj.Solution2$Input.$VALUES == orig(leetcode.oj.Solution2$Input.$VALUES)
leetcode.oj.Solution2$Input.$VALUES.getClass().getName() == orig(leetcode.oj.Solution2$Input.$VALUES.getClass().getName())
leetcode.oj.Solution2$Input.$VALUES[] == orig(leetcode.oj.Solution2$Input.$VALUES[])
leetcode.oj.Solution2$Input.$VALUES[].value == orig(leetcode.oj.Solution2$Input.$VALUES[].value)
leetcode.oj.Solution2$Input.SPACE.value == orig(leetcode.oj.Solution2$Input.SPACE.value)
leetcode.oj.Solution2$Input.SIGN.value == orig(leetcode.oj.Solution2$Input.SIGN.value)
leetcode.oj.Solution2$Input.EXPONENT.value == orig(leetcode.oj.Solution2$Input.EXPONENT.value)
leetcode.oj.Solution2$Input.DIGIT.value == orig(leetcode.oj.Solution2$Input.DIGIT.value)
leetcode.oj.Solution2$Input.DOT.value == orig(leetcode.oj.Solution2$Input.DOT.value)
this.input.value == orig(this.input.value)
return == true
leetcode.oj.Solution2$State.$VALUES.getClass().getName() != orig(arg0.getClass().getName())
leetcode.oj.Solution2$Input.$VALUES.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
leetcode.oj.Solution2$Transition.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
leetcode.oj.Solution2$Transition.hashCode():::ENTER
===========================================================================
leetcode.oj.Solution2$Transition.hashCode():::EXIT
this.state == orig(this.state)
leetcode.oj.Solution2$State.START_SPACE == orig(leetcode.oj.Solution2$State.START_SPACE)
leetcode.oj.Solution2$State.START_DIGIT == orig(leetcode.oj.Solution2$State.START_DIGIT)
leetcode.oj.Solution2$State.SIGN_READ == orig(leetcode.oj.Solution2$State.SIGN_READ)
leetcode.oj.Solution2$State.DOT_READ == orig(leetcode.oj.Solution2$State.DOT_READ)
leetcode.oj.Solution2$State.DIGIT_AFTER_DOT == orig(leetcode.oj.Solution2$State.DIGIT_AFTER_DOT)
leetcode.oj.Solution2$State.EXPONENT == orig(leetcode.oj.Solution2$State.EXPONENT)
leetcode.oj.Solution2$State.EXPONENT_SIGN == orig(leetcode.oj.Solution2$State.EXPONENT_SIGN)
leetcode.oj.Solution2$State.EXPONENT_DIGIT == orig(leetcode.oj.Solution2$State.EXPONENT_DIGIT)
leetcode.oj.Solution2$State.END_SPACE == orig(leetcode.oj.Solution2$State.END_SPACE)
leetcode.oj.Solution2$State.START_SPACE.value == orig(leetcode.oj.Solution2$State.START_SPACE.value)
leetcode.oj.Solution2$State.$VALUES == orig(leetcode.oj.Solution2$State.$VALUES)
leetcode.oj.Solution2$State.$VALUES.getClass().getName() == orig(leetcode.oj.Solution2$State.$VALUES.getClass().getName())
leetcode.oj.Solution2$State.$VALUES[] == orig(leetcode.oj.Solution2$State.$VALUES[])
leetcode.oj.Solution2$State.$VALUES[].value == orig(leetcode.oj.Solution2$State.$VALUES[].value)
leetcode.oj.Solution2$State.START_DIGIT.value == orig(leetcode.oj.Solution2$State.START_DIGIT.value)
leetcode.oj.Solution2$State.SIGN_READ.value == orig(leetcode.oj.Solution2$State.SIGN_READ.value)
leetcode.oj.Solution2$State.DOT_READ.value == orig(leetcode.oj.Solution2$State.DOT_READ.value)
leetcode.oj.Solution2$State.DIGIT_AFTER_DOT.value == orig(leetcode.oj.Solution2$State.DIGIT_AFTER_DOT.value)
leetcode.oj.Solution2$State.EXPONENT.value == orig(leetcode.oj.Solution2$State.EXPONENT.value)
leetcode.oj.Solution2$State.EXPONENT_SIGN.value == orig(leetcode.oj.Solution2$State.EXPONENT_SIGN.value)
leetcode.oj.Solution2$State.EXPONENT_DIGIT.value == orig(leetcode.oj.Solution2$State.EXPONENT_DIGIT.value)
leetcode.oj.Solution2$State.END_SPACE.value == orig(leetcode.oj.Solution2$State.END_SPACE.value)
this.state.value == orig(this.state.value)
this.input == orig(this.input)
leetcode.oj.Solution2$Input.INVALID == orig(leetcode.oj.Solution2$Input.INVALID)
leetcode.oj.Solution2$Input.SPACE == orig(leetcode.oj.Solution2$Input.SPACE)
leetcode.oj.Solution2$Input.SIGN == orig(leetcode.oj.Solution2$Input.SIGN)
leetcode.oj.Solution2$Input.EXPONENT == orig(leetcode.oj.Solution2$Input.EXPONENT)
leetcode.oj.Solution2$Input.DIGIT == orig(leetcode.oj.Solution2$Input.DIGIT)
leetcode.oj.Solution2$Input.DOT == orig(leetcode.oj.Solution2$Input.DOT)
leetcode.oj.Solution2$Input.INVALID.value == orig(leetcode.oj.Solution2$Input.INVALID.value)
leetcode.oj.Solution2$Input.$VALUES == orig(leetcode.oj.Solution2$Input.$VALUES)
leetcode.oj.Solution2$Input.$VALUES.getClass().getName() == orig(leetcode.oj.Solution2$Input.$VALUES.getClass().getName())
leetcode.oj.Solution2$Input.$VALUES[] == orig(leetcode.oj.Solution2$Input.$VALUES[])
leetcode.oj.Solution2$Input.$VALUES[].value == orig(leetcode.oj.Solution2$Input.$VALUES[].value)
leetcode.oj.Solution2$Input.SPACE.value == orig(leetcode.oj.Solution2$Input.SPACE.value)
leetcode.oj.Solution2$Input.SIGN.value == orig(leetcode.oj.Solution2$Input.SIGN.value)
leetcode.oj.Solution2$Input.EXPONENT.value == orig(leetcode.oj.Solution2$Input.EXPONENT.value)
leetcode.oj.Solution2$Input.DIGIT.value == orig(leetcode.oj.Solution2$Input.DIGIT.value)
leetcode.oj.Solution2$Input.DOT.value == orig(leetcode.oj.Solution2$Input.DOT.value)
this.input.value == orig(this.input.value)
return != 0
===========================================================================
leetcode.oj.Solution2$TreeLinkNode:::OBJECT
this.left.left.right == null
this.left.left.next == null
this.left.right.val one of { 4, 5 }
this.left.right.right == null
this.left.right.next == null
this.left.next == null
this.right.left.val one of { -6, 4, 6 }
this.right.left.right == null
this.right.left.next == null
this.right.right.left == null
this.right.right.next == null
this.right.next == null
this.next == null
===========================================================================
leetcode.oj.Solution2$TreeLinkNode.TreeLinkNode(int):::ENTER
===========================================================================
leetcode.oj.Solution2$TreeLinkNode.TreeLinkNode(int):::EXIT
this.val == orig(arg0)
this.left == null
this.right == null
===========================================================================
leetcode.oj.Solution2$TreeLinkNode.TreeLinkNode(int, leetcode.oj.Solution2$TreeLinkNode, leetcode.oj.Solution2$TreeLinkNode):::ENTER
arg1.left.right == null
arg1.left.next == null
arg1.right.val one of { 4, 5 }
arg1.right.right == null
arg1.right.next == null
arg1.next == null
arg2.left.val one of { -6, 4, 6 }
arg2.left.right == null
arg2.left.next == null
arg2.right.left == null
arg2.right.next == null
arg2.next == null
===========================================================================
leetcode.oj.Solution2$TreeLinkNode.TreeLinkNode(int, leetcode.oj.Solution2$TreeLinkNode, leetcode.oj.Solution2$TreeLinkNode):::EXIT
this.val == orig(arg0)
this.left == orig(arg1)
this.left.val == arg1.val
this.left.left == arg1.left
this.left.left.val == arg1.left.val
this.left.left.left == arg1.left.left
this.left.right == arg1.right
this.left.right.val == arg1.right.val
this.left.right.left == arg1.right.left
this.right == orig(arg2)
this.right.val == arg2.val
this.right.left == arg2.left
this.right.left.val == arg2.left.val
this.right.left.left == arg2.left.left
this.right.right == arg2.right
this.right.right.val == arg2.right.val
this.right.right.right == arg2.right.right
arg1.val == orig(arg1.val)
arg1.left == orig(arg1.left)
arg1.left.val == orig(arg1.left.val)
arg1.left.left == orig(arg1.left.left)
arg1.left.right == orig(arg1.left.right)
arg1.left.next == orig(arg1.left.next)
arg1.right == orig(arg1.right)
arg1.right.val == orig(arg1.right.val)
arg1.right.left == orig(arg1.right.left)
arg1.right.right == orig(arg1.right.right)
arg1.right.next == orig(arg1.right.next)
arg1.next == orig(arg1.next)
arg2.val == orig(arg2.val)
arg2.left == orig(arg2.left)
arg2.left.val == orig(arg2.left.val)
arg2.left.left == orig(arg2.left.left)
arg2.left.right == orig(arg2.left.right)
arg2.left.next == orig(arg2.left.next)
arg2.right == orig(arg2.right)
arg2.right.val == orig(arg2.right.val)
arg2.right.left == orig(arg2.right.left)
arg2.right.right == orig(arg2.right.right)
arg2.right.next == orig(arg2.right.next)
arg2.next == orig(arg2.next)
arg1.left.right == null
arg1.left.next == null
arg1.right.val one of { 4, 5 }
arg1.right.right == null
arg1.right.next == null
arg1.next == null
arg2.left.val one of { -6, 4, 6 }
arg2.left.right == null
arg2.left.next == null
arg2.right.left == null
arg2.right.next == null
arg2.next == null
===========================================================================
leetcode.oj.Solution2$UndirectedGraphNode:::OBJECT
this.label one of { 0, 1, 2 }
this.neighbors[] == []
this.neighbors[].getClass().getName() == []
===========================================================================
leetcode.oj.Solution2$UndirectedGraphNode.UndirectedGraphNode(int):::ENTER
arg0 one of { 0, 1, 2 }
===========================================================================
leetcode.oj.Solution2$UndirectedGraphNode.UndirectedGraphNode(int):::EXIT
this.label == orig(arg0)
===========================================================================
leetcode.oj.Solution2:::OBJECT
this has only one value
===========================================================================
leetcode.oj.Solution2.Solution2():::EXIT
===========================================================================
leetcode.oj.Solution2.addBinary(java.lang.String, java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "11"
arg1 has only one value
arg1.toString == "1"
===========================================================================
leetcode.oj.Solution2.addBinary(java.lang.String, java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "11"
return has only one value
return.toString == "100"
===========================================================================
leetcode.oj.Solution2.backtrackRestore(java.lang.String, int, java.util.ArrayList, java.util.ArrayList, int):::ENTER
arg0 != null
arg1 one of { 1, 2, 3 }
arg2 != null
arg2[] elements has only one value
arg2[] elements != null
arg2[].getClass().getName() elements == java.lang.String.class
arg2[].getClass().getName() one of { [], [java.lang.String] }
arg3 != null
arg3[] elements != null
arg3[].getClass().getName() elements == java.lang.String.class
arg4 >= 0
size(arg2[]) one of { 0, 1 }
===========================================================================
leetcode.oj.Solution2.backtrackRestore(java.lang.String, int, java.util.ArrayList, java.util.ArrayList, int):::EXIT
arg0.toString == orig(arg0.toString)
arg3[] == orig(arg3[])
arg2[] elements != null
arg2[].getClass().getName() elements == java.lang.String.class
arg3[] elements != null
arg3[].getClass().getName() elements == java.lang.String.class
size(arg2[])-1 >= orig(size(arg2[]))-1
===========================================================================
leetcode.oj.Solution2.buildInPreTree(int[], int[], int[], int, int):::ENTER
arg0 has only one value
arg0 != null
arg0[] == [1, 2, 3, 5, 6, 7, 4]
arg0[] elements >= 1
arg1 has only one value
arg1 != null
arg1[] == [3, 2, 5, 7, 6, 1, 4]
arg1[] elements >= 1
arg2 has only one value
arg2 != null
arg3 >= 0
size(arg0[]) == 7
size(arg1[]) == 7
size(arg2[]) == 1
arg2[] elements <= size(arg0[])
arg3 <= size(arg1[])
arg4 <= size(arg1[])-1
===========================================================================
leetcode.oj.Solution2.buildInPreTree(int[], int[], int[], int, int):::EXIT1136
arg2[] == orig(arg2[])
return == null
orig(arg3) - orig(arg4) - 1 == 0
===========================================================================
leetcode.oj.Solution2.buildInPreTree(int[], int[], int[], int, int):::EXIT1151
arg2[] elements one of { 3, 6, 7 }
arg2[] one of { [3], [6], [7] }
arg1[orig(arg3)] in arg0[]
arg1[orig(arg4)] in arg0[]
arg2[] > orig(arg2[]) (elementwise)
return.val <= arg1[orig(arg3)]
return.val <= arg1[orig(arg4)]
orig(arg2[]) elements <= size(arg0[])-1
orig(arg3) <= orig(arg4)
orig(arg3) <= size(arg1[])-1
===========================================================================
leetcode.oj.Solution2.buildInPreTree(int[], int[], int[], int, int):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
(return == null)  ==>  (arg2[] == orig(arg2[]))
(return == null)  ==>  (orig(arg3) - orig(arg4) - 1 == 0)
arg0[] == [1, 2, 3, 5, 6, 7, 4]
arg0[] elements >= 1
arg1[] == [3, 2, 5, 7, 6, 1, 4]
arg1[] elements >= 1
return.left.val one of { 2, 3, 7 }
return.right.val one of { 4, 5, 6 }
return.val in arg0[]
return.left.val in arg0[]
return.right.val in arg0[]
return.val in arg1[]
return.left.val in arg1[]
return.right.val in arg1[]
arg2[] >= orig(arg2[]) (elementwise)
arg2[] elements <= orig(size(arg0[]))
orig(arg4) <= size(arg1[])-1
===========================================================================
leetcode.oj.Solution2.buildTree(int[], int[]):::ENTER
arg0 has only one value
arg0[] == [1, 2, 3, 5, 6, 7, 4]
arg1 has only one value
arg1[] == [3, 2, 5, 7, 6, 1, 4]
size(arg0[]) == 7
size(arg1[]) == 7
===========================================================================
leetcode.oj.Solution2.buildTree(int[], int[]):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg0[] == [1, 2, 3, 5, 6, 7, 4]
arg1[] == [3, 2, 5, 7, 6, 1, 4]
return has only one value
return.val == 1
return.left has only one value
return.left.val == 2
return.left.left has only one value
return.left.right has only one value
return.right has only one value
return.right.val == 4
return.right.left == null
return.right.right == null
return.val in arg0[]
return.left.val in arg0[]
return.right.val in arg0[]
return.val in arg1[]
return.left.val in arg1[]
return.right.val in arg1[]
===========================================================================
leetcode.oj.Solution2.buildTreePost(int[], int, int, int[], int[]):::ENTER
size(arg0[]) == size(arg3[])
arg0 != null
arg0[] one of { [2, 1, 3], [4, 3, 5, 2, 6, 1, 8, 7] }
arg0[] elements >= 1
arg1 >= 0
arg3 != null
arg3[] one of { [2, 3, 1], [4, 5, 3, 6, 2, 8, 7, 1] }
arg3[] elements >= 1
arg4 != null
arg4[] elements >= -1
size(arg0[]) one of { 3, 8 }
size(arg4[]) == 1
arg1 <= size(arg0[])
arg4[] elements <= arg2
arg2 <= size(arg0[])-1
arg4[] elements <= size(arg0[])-1
===========================================================================
leetcode.oj.Solution2.buildTreePost(int[], int, int, int[], int[]):::EXIT2236
arg4[] == orig(arg4[])
return == null
orig(arg1) - orig(arg2) - 1 == 0
===========================================================================
leetcode.oj.Solution2.buildTreePost(int[], int, int, int[], int[]):::EXIT2245
return.right.val == arg0[orig(arg2)]
arg3[orig(arg1)] in arg0[]
arg3[orig(arg2)] in arg0[]
arg0[orig(arg1)] in arg3[]
arg0[orig(arg2)] in arg3[]
arg4[] elements < orig(arg2)
arg4[] < orig(arg4[]) (elementwise)
return.val <= arg0[orig(arg1)]
return.val <= arg0[orig(arg2)]
return.val >= arg3[orig(arg2)]
orig(arg1) <= orig(arg2)
orig(arg1) <= size(arg0[])-1
arg0[orig(arg1)] >= arg3[orig(arg1)]
arg0[orig(arg1)] >= arg3[orig(arg2)]
arg0[orig(arg2)] >= arg3[orig(arg1)]
arg0[orig(arg2)] >= arg3[orig(arg2)]
arg3[orig(arg1)] >= arg3[orig(arg2)]
return.left.val + arg0[orig(arg2)] - 2 * arg3[orig(arg1)] - 1 == 0
===========================================================================
leetcode.oj.Solution2.buildTreePost(int[], int, int, int[], int[]):::EXIT
arg0[] == orig(arg0[])
arg3[] == orig(arg3[])
(return == null)  ==>  (arg4[] == orig(arg4[]))
(return == null)  ==>  (orig(arg1) - orig(arg2) - 1 == 0)
(return == null)  ==>  (orig(arg4[]) elements < orig(arg1))
(return == null)  ==>  (orig(arg4[]) elements < size(arg0[])-1)
arg0[] one of { [2, 1, 3], [4, 3, 5, 2, 6, 1, 8, 7] }
arg0[] elements >= 1
arg3[] one of { [2, 3, 1], [4, 5, 3, 6, 2, 8, 7, 1] }
arg3[] elements >= 1
return.right.right == null
return.val in arg0[]
return.left.val in arg0[]
return.right.val in arg0[]
return.val in arg3[]
return.left.val in arg3[]
return.right.val in arg3[]
arg4[] elements < orig(arg1)
arg4[] elements <= orig(arg2)
arg4[] <= orig(arg4[]) (elementwise)
arg4[] elements < size(arg0[])-1
return.val - return.left.val + 1 == 0
orig(arg2) <= size(arg0[])-1
orig(arg4[]) elements <= size(arg0[])-1
===========================================================================
leetcode.oj.Solution2.buildTreePost(int[], int[]):::ENTER
arg0[] one of { [2, 1, 3], [4, 3, 5, 2, 6, 1, 8, 7] }
arg1[] one of { [2, 3, 1], [4, 5, 3, 6, 2, 8, 7, 1] }
size(arg0[]) one of { 3, 8 }
size(arg1[]) one of { 3, 8 }
===========================================================================
leetcode.oj.Solution2.buildTreePost(int[], int[]):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg0[] one of { [2, 1, 3], [4, 3, 5, 2, 6, 1, 8, 7] }
arg1[] one of { [2, 3, 1], [4, 5, 3, 6, 2, 8, 7, 1] }
return.val == 1
return.left.val == 2
return.right.val one of { 3, 7 }
return.right.right == null
return.val in arg0[]
return.left.val in arg0[]
return.right.val in arg0[]
return.val in arg1[]
return.left.val in arg1[]
return.right.val in arg1[]
===========================================================================
leetcode.oj.Solution2.buildTrees(int, int):::ENTER
arg0 >= 0
arg1 <= 2
arg1 >= -1
===========================================================================
leetcode.oj.Solution2.buildTrees(int, int):::EXIT1068
return[] == [null]
return[] elements == null
return[].getClass().getName() == [null]
return[].getClass().getName() elements == null
size(return[]) == 1
orig(arg0) - orig(arg1) - 1 == 0
===========================================================================
leetcode.oj.Solution2.buildTrees(int, int):::EXIT1085
return[].getClass().getName() elements == leetcode.oj.Solution.TreeNode.class
orig(arg0) one of { 0, 1, 2 }
orig(arg1) one of { 0, 1, 2 }
orig(arg0) <= orig(arg1)
===========================================================================
leetcode.oj.Solution2.buildTrees(int, int):::EXIT
(return[] elements == null)  <==>  (return[].getClass().getName() elements == null)
(return[] elements == null)  ==>  (orig(arg0) - orig(arg1) - 1 == 0)
(return[] elements == null)  ==>  (orig(arg1) >= -1)
(return[] elements == null)  ==>  (return[] == [null])
(return[] elements == null)  ==>  (return[].getClass().getName() == [null])
(return[] elements == null)  ==>  (size(return[]) == 1)
return != null
size(return[]) one of { 1, 2, 5 }
===========================================================================
leetcode.oj.Solution2.climbStairs(int):::ENTER
arg0 one of { 3, 4 }
===========================================================================
leetcode.oj.Solution2.climbStairs(int):::EXIT
return one of { 3, 5 }
===========================================================================
leetcode.oj.Solution2.climbStairs(int, int[]):::ENTER
arg1[arg0] == arg1[arg0-1]
arg1[] elements == 0
arg1[] one of { [0, 0, 0, 0], [0, 0, 0, 0, 0] }
size(arg1[]) one of { 4, 5 }
arg0 <= size(arg1[])-1
arg0 > arg1[arg0]
arg1[] elements == arg1[arg0]
size(arg1[])-1 > arg1[arg0]
===========================================================================
leetcode.oj.Solution2.climbStairs(int, int[]):::EXIT355
arg1[] == orig(arg1[])
return == orig(arg0)
orig(arg1[post(arg0)-1]) == arg1[return]
arg1[return] == arg1[return-1]
arg1[return] == arg1[orig(arg0)-1]
arg1[return] == orig(arg1[post(return)-1])
arg1[return] == orig(arg1[arg0-1])
arg1[] elements == 0
arg1[] one of { [0, 0, 0, 0], [0, 0, 0, 0, 0] }
return one of { 1, 2 }
arg1[] elements == arg1[return]
===========================================================================
leetcode.oj.Solution2.climbStairs(int, int[]):::EXIT359
return == arg1[orig(arg0)]
arg1[] one of { [0, 0, 0, 3], [0, 0, 0, 3, 0], [0, 0, 0, 3, 5] }
return one of { 3, 5 }
orig(arg0) one of { 3, 4 }
===========================================================================
leetcode.oj.Solution2.climbStairs(int, int[]):::EXIT
orig(arg1[post(arg0)-1]) == orig(arg1[arg0])
orig(arg1[post(return)-1]) == orig(arg1[arg0])
arg1[] elements one of { 0, 3, 5 }
arg1[return-1] one of { 0, 5 }
arg1[orig(arg0)-1] one of { 0, 3 }
arg1[] elements <= return
arg1[] >= orig(arg1[]) (elementwise)
arg1[] elements <= orig(size(arg1[]))
arg1[] elements <= arg1[orig(arg0)]
arg1[] elements >= orig(arg1[arg0])
orig(arg1[arg0]) in arg1[]
return >= orig(arg0)
return <= orig(size(arg1[]))
arg1[return-1] % return == 0
return >= arg1[return-1]
arg1[orig(arg0)] % return == 0
return >= arg1[orig(arg0)]
return > arg1[orig(arg0)-1]
return > orig(arg1[arg0])
orig(arg0) <= size(arg1[])-1
orig(arg0) != arg1[return-1]
orig(arg0) > arg1[orig(arg0)-1]
size(arg1[])-1 != arg1[return-1]
size(arg1[])-1 > arg1[orig(arg0)-1]
size(arg1[])-1 > orig(arg1[arg0])
orig(size(arg1[])) >= arg1[return-1]
orig(size(arg1[])) >= arg1[orig(arg0)]
arg1[return-1] <= arg1[orig(arg0)]
arg1[return-1] >= arg1[orig(arg0)-1]
arg1[orig(arg0)] >= arg1[orig(arg0)-1]
===========================================================================
leetcode.oj.Solution2.cloneGraph(leetcode.oj.Solution2$UndirectedGraphNode):::ENTER
arg0.label == 0
arg0.neighbors[].getClass().getName() == [leetcode.oj.Solution2.UndirectedGraphNode, leetcode.oj.Solution2.UndirectedGraphNode]
arg0.neighbors[].getClass().getName() elements == leetcode.oj.Solution2.UndirectedGraphNode.class
size(arg0.neighbors[]) == 2
===========================================================================
leetcode.oj.Solution2.cloneGraph(leetcode.oj.Solution2$UndirectedGraphNode):::EXIT2986
===========================================================================
leetcode.oj.Solution2.cloneGraph(leetcode.oj.Solution2$UndirectedGraphNode):::EXIT
arg0.label == return.label
arg0.label == orig(arg0.label)
arg0.neighbors == orig(arg0.neighbors)
arg0.neighbors[] == orig(arg0.neighbors[])
arg0.label == 0
arg0.neighbors[].getClass().getName() == [leetcode.oj.Solution2.UndirectedGraphNode, leetcode.oj.Solution2.UndirectedGraphNode]
arg0.neighbors[].getClass().getName() elements == leetcode.oj.Solution2.UndirectedGraphNode.class
return.neighbors[].getClass().getName() == [leetcode.oj.Solution2.UndirectedGraphNode, leetcode.oj.Solution2.UndirectedGraphNode]
return.neighbors[].getClass().getName() elements == leetcode.oj.Solution2.UndirectedGraphNode.class
size(arg0.neighbors[]) == 2
size(return.neighbors[]) == 2
===========================================================================
leetcode.oj.Solution2.combine(int, int):::ENTER
arg0 == 4
arg1 == 2
===========================================================================
leetcode.oj.Solution2.combine(int, int):::EXIT
return has only one value
return[] contains no nulls and has only one value, of length 6
return[].getClass().getName() == [java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList]
return[].getClass().getName() elements == java.util.ArrayList.class
size(return[]) == 6
===========================================================================
leetcode.oj.Solution2.combine(int, int, int, int, java.util.ArrayList):::ENTER
arg0 == 4
arg1 == 2
arg2 one of { 0, 1, 2 }
arg4 has only one value
arg4[].getClass().getName() elements == java.lang.Integer.class
size(arg4[]) one of { 0, 1, 2 }
arg0 >= arg3
arg1 >= arg2
===========================================================================
leetcode.oj.Solution2.combine(int, int, int, int, java.util.ArrayList):::EXIT719
orig(arg1) == orig(arg2)
arg4[].getClass().getName() == [java.lang.Integer, java.lang.Integer]
return[].getClass().getName() == [java.util.ArrayList]
orig(arg3) one of { 2, 3, 4 }
size(return[]) == 1
orig(size(arg4[])) == 2
===========================================================================
leetcode.oj.Solution2.combine(int, int, int, int, java.util.ArrayList):::EXIT727
arg4[].getClass().getName() one of { [], [java.lang.Integer] }
orig(arg2) one of { 0, 1 }
orig(size(arg4[])) one of { 0, 1 }
===========================================================================
leetcode.oj.Solution2.combine(int, int, int, int, java.util.ArrayList):::EXIT
arg4[] == orig(arg4[])
(arg4[].getClass().getName() == [java.lang.Integer, java.lang.Integer])  <==>  (orig(arg1) == orig(arg2))
(arg4[].getClass().getName() == [java.lang.Integer, java.lang.Integer])  <==>  (orig(arg2) == 2)
(arg4[].getClass().getName() == [java.lang.Integer, java.lang.Integer])  <==>  (orig(size(arg4[])) == 2)
(arg4[].getClass().getName() == [java.lang.Integer, java.lang.Integer])  ==>  (orig(arg3) one of { 2, 3, 4 })
(arg4[].getClass().getName() == [java.lang.Integer, java.lang.Integer])  ==>  (return[].getClass().getName() == [java.util.ArrayList])
(arg4[].getClass().getName() == [java.lang.Integer, java.lang.Integer])  ==>  (size(return[]) == 1)
(arg4[].getClass().getName() one of { [], [java.lang.Integer] })  <==>  (orig(arg2) one of { 0, 1 })
(arg4[].getClass().getName() one of { [], [java.lang.Integer] })  <==>  (orig(size(arg4[])) one of { 0, 1 })
arg4[].getClass().getName() elements == java.lang.Integer.class
return[].getClass().getName() elements == java.util.ArrayList.class
===========================================================================
leetcode.oj.Solution2.connect(leetcode.oj.Solution2$TreeLinkNode):::ENTER
arg0 has only one value
arg0.val == 1
arg0.left has only one value
arg0.left.val == 2
arg0.left.left has only one value
arg0.left.right has only one value
arg0.left.next == null
arg0.right has only one value
arg0.right.val == 3
arg0.right.left has only one value
arg0.right.right has only one value
arg0.right.next == null
arg0.next == null
===========================================================================
leetcode.oj.Solution2.connect(leetcode.oj.Solution2$TreeLinkNode):::EXIT2683
===========================================================================
leetcode.oj.Solution2.connect(leetcode.oj.Solution2$TreeLinkNode):::EXIT
arg0.val == orig(arg0.val)
arg0.left == orig(arg0.left)
arg0.left.val == orig(arg0.left.val)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.left.next == arg0.right
arg0.right == orig(arg0.right)
arg0.right.val == orig(arg0.right.val)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
arg0.right.next == orig(arg0.right.next)
arg0.next == orig(arg0.next)
arg0.val == 1
arg0.left has only one value
arg0.left.val == 2
arg0.left.left has only one value
arg0.left.right has only one value
arg0.right has only one value
arg0.right.val == 3
arg0.right.left has only one value
arg0.right.right has only one value
arg0.right.next == null
arg0.next == null
===========================================================================
leetcode.oj.Solution2.connect(leetcode.oj.Solution2$TreeLinkNode, leetcode.oj.Solution2$TreeLinkNode):::ENTER
arg0.left.val == 4
arg0.left.left == null
arg0.left.right == null
arg0.left.next == null
arg0.right.val == 5
arg0.right.left == null
arg0.right.right == null
arg0.right.next == null
arg0.next == null
arg1.left.val == 6
arg1.left.left == null
arg1.left.right == null
arg1.left.next == null
arg1.right.val == 7
arg1.right.left == null
arg1.right.right == null
arg1.right.next == null
arg1.next == null
===========================================================================
leetcode.oj.Solution2.connect(leetcode.oj.Solution2$TreeLinkNode, leetcode.oj.Solution2$TreeLinkNode):::EXIT2686
orig(arg0) == null
orig(arg1) == null
===========================================================================
leetcode.oj.Solution2.connect(leetcode.oj.Solution2$TreeLinkNode, leetcode.oj.Solution2$TreeLinkNode):::EXIT2691
===========================================================================
leetcode.oj.Solution2.connect(leetcode.oj.Solution2$TreeLinkNode, leetcode.oj.Solution2$TreeLinkNode):::EXIT
arg0.val == orig(arg0.val)
arg0.left == orig(arg0.left)
arg0.left.val == orig(arg0.left.val)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.left.next == arg0.right
arg0.right == orig(arg0.right)
arg0.right.val == orig(arg0.right.val)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
arg0.right.next == arg1.left
arg0.next == orig(arg1)
arg0.next.val == arg1.val
arg0.next.left == arg1.left
arg0.next.right == arg1.right
arg1.val == orig(arg1.val)
arg1.left == orig(arg1.left)
arg1.left.val == orig(arg1.left.val)
arg1.left.left == orig(arg1.left.left)
arg1.left.right == orig(arg1.left.right)
arg1.left.next == arg1.right
arg1.right == orig(arg1.right)
arg1.right.val == orig(arg1.right.val)
arg1.right.left == orig(arg1.right.left)
arg1.right.right == orig(arg1.right.right)
arg1.right.next == orig(arg1.right.next)
arg1.next == orig(arg1.next)
(orig(arg0) == null)  <==>  (orig(arg1) == null)
arg0.left.val == 4
arg0.left.left == null
arg0.left.right == null
arg0.left.next has only one value
arg0.right.val == 5
arg0.right.left == null
arg0.right.right == null
arg0.right.next has only one value
arg0.next.next == null
arg1.left.val == 6
arg1.left.left == null
arg1.left.right == null
arg1.left.next has only one value
arg1.right.val == 7
arg1.right.left == null
arg1.right.right == null
arg1.right.next == null
arg1.next == null
===========================================================================
leetcode.oj.Solution2.connectII(leetcode.oj.Solution2$TreeLinkNode):::ENTER
arg0.left.next == arg0.right.next
arg0.left.next == null
arg0.right.next == null
===========================================================================
leetcode.oj.Solution2.connectII(leetcode.oj.Solution2$TreeLinkNode):::EXIT2721
orig(arg0) == null
===========================================================================
leetcode.oj.Solution2.connectII(leetcode.oj.Solution2$TreeLinkNode):::EXIT2743
orig(arg0) != null
===========================================================================
leetcode.oj.Solution2.connectII(leetcode.oj.Solution2$TreeLinkNode):::EXIT
arg0.val == orig(arg0.val)
arg0.left == orig(arg0.left)
arg0.left.val == orig(arg0.left.val)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.right == orig(arg0.right)
arg0.right.val == orig(arg0.right.val)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
arg0.next == orig(arg0.next)
arg0.next.val == orig(arg0.next.val)
arg0.next.left == orig(arg0.next.left)
arg0.next.right == orig(arg0.next.right)
arg0.next.next == orig(arg0.next.next)
(orig(arg0) != null)  ==>  (orig(arg0.left.next) == null)
(orig(arg0) != null)  ==>  (orig(arg0.left.next) == orig(arg0.right.next))
(orig(arg0) != null)  ==>  (orig(arg0.right.next) == null)
===========================================================================
leetcode.oj.Solution2.copyRandomList(leetcode.oj.Solution2$RandomListNode):::ENTER
arg0 == arg0.random.random
arg0.label == arg0.random.label
arg0.next == arg0.random.next
arg0.random == arg0.random.random
arg0.label one of { -1, 1 }
arg0.next.label one of { 1, 2 }
arg0.next.random == null
arg0.random.label == 1
arg0.random.next has only one value
arg0.random.random has only one value
===========================================================================
leetcode.oj.Solution2.copyRandomList(leetcode.oj.Solution2$RandomListNode):::EXIT
arg0.label == arg0.random.label
arg0.label == return.label
arg0.label == orig(arg0.label)
arg0.next == arg0.random.next
arg0.next == orig(arg0.next)
arg0.next.label == return.next.label
arg0.next.label == orig(arg0.next.label)
arg0.next.next == orig(arg0.next.next)
arg0.next.random == orig(arg0.next.random)
arg0.random == arg0.random.random
arg0.random == orig(arg0.random)
arg0.random.label == return.random.label
arg0.random.label == orig(arg0.random.label)
arg0.random.next == orig(arg0.random.next)
arg0.random.random == orig(arg0)
arg0.random.random == orig(arg0.random.random)
return == return.random.random
return.next == return.random.next
return.random == return.random.random
arg0.label one of { -1, 1 }
arg0.next.label one of { 1, 2 }
arg0.next.random == null
arg0.random.label == 1
arg0.random.next has only one value
arg0.random.random has only one value
return.next.random == null
return.random.next has only one value
return.random.random has only one value
===========================================================================
leetcode.oj.Solution2.copyRandomListGood(leetcode.oj.Solution2$RandomListNode):::ENTER
arg0 == arg0.random.random
arg0.label == arg0.random.label
arg0.next == arg0.random.next
arg0.random == arg0.random.random
arg0.label one of { -1, 1 }
arg0.next.label one of { 1, 2 }
arg0.next.random == null
arg0.random.label == 1
arg0.random.next has only one value
arg0.random.random has only one value
===========================================================================
leetcode.oj.Solution2.copyRandomListGood(leetcode.oj.Solution2$RandomListNode):::EXIT2523
===========================================================================
leetcode.oj.Solution2.copyRandomListGood(leetcode.oj.Solution2$RandomListNode):::EXIT
arg0.label == arg0.random.label
arg0.label == return.label
arg0.label == orig(arg0.label)
arg0.next == arg0.random.next
arg0.next == orig(arg0.next)
arg0.next.label == return.next.label
arg0.next.label == orig(arg0.next.label)
arg0.next.next == orig(arg0.next.next)
arg0.next.random == orig(arg0.next.random)
arg0.random == arg0.random.random
arg0.random == orig(arg0.random)
arg0.random.label == return.random.label
arg0.random.label == orig(arg0.random.label)
arg0.random.next == orig(arg0.random.next)
arg0.random.random == orig(arg0)
arg0.random.random == orig(arg0.random.random)
return == return.random.random
return.next == return.random.next
return.random == return.random.random
arg0.label one of { -1, 1 }
arg0.next.label one of { 1, 2 }
arg0.next.random == null
arg0.random.label == 1
arg0.random.next has only one value
arg0.random.random has only one value
return.next.random == null
return.random.next has only one value
return.random.random has only one value
===========================================================================
leetcode.oj.Solution2.crossingArea(int[], int, int, int):::ENTER
arg0 != null
arg0[] elements >= 0
arg1 >= 0
arg3 >= 0
arg1 < arg2
arg1 <= arg3
arg1 < size(arg0[])-1
arg2 > arg3
arg2 <= size(arg0[])-1
arg3 < size(arg0[])-1
size(arg0[]) != arg0[arg2]
===========================================================================
leetcode.oj.Solution2.crossingArea(int[], int, int, int):::EXIT
arg0[] == orig(arg0[])
arg0[] elements >= 0
return >= 0
return >= arg0[orig(arg3)]
orig(arg1) < size(arg0[])-1
orig(arg2) <= size(arg0[])-1
orig(arg3) < size(arg0[])-1
orig(size(arg0[])) != arg0[orig(arg2)]
===========================================================================
leetcode.oj.Solution2.deleteDuplicates(leetcode.oj.Solution$ListNode):::ENTER
arg0.val == 1
arg0.next.val one of { 1, 2 }
===========================================================================
leetcode.oj.Solution2.deleteDuplicates(leetcode.oj.Solution$ListNode):::EXIT869
arg0.next == orig(arg0.next)
arg0.next == null
return has only one value
===========================================================================
leetcode.oj.Solution2.deleteDuplicates(leetcode.oj.Solution$ListNode):::EXIT881
===========================================================================
leetcode.oj.Solution2.deleteDuplicates(leetcode.oj.Solution$ListNode):::EXIT
arg0.val == return.val
arg0.val == orig(arg0.val)
arg0.next == return.next
arg0.next.val == return.next.val
arg0.next.next == return.next.next
return == orig(arg0)
(arg0.next == null)  <==>  (orig(arg0.next) == null)
(arg0.next == null)  ==>  (arg0.next == orig(arg0.next))
(arg0.next == null)  ==>  (return has only one value)
arg0.val == 1
arg0.next.val == 2
===========================================================================
leetcode.oj.Solution2.deleteDuplicatesII(leetcode.oj.Solution$ListNode):::ENTER
arg0.val == 1
arg0.next.val one of { 1, 2 }
===========================================================================
leetcode.oj.Solution2.deleteDuplicatesII(leetcode.oj.Solution$ListNode):::EXIT893
arg0.val == return.val
arg0.next == return.next
return == orig(arg0)
arg0.next == null
return has only one value
===========================================================================
leetcode.oj.Solution2.deleteDuplicatesII(leetcode.oj.Solution$ListNode):::EXIT926
===========================================================================
leetcode.oj.Solution2.deleteDuplicatesII(leetcode.oj.Solution$ListNode):::EXIT
arg0.val == orig(arg0.val)
arg0.next == orig(arg0.next)
arg0.next.val == orig(arg0.next.val)
(arg0.next == null)  <==>  (return.next == null)
(arg0.next == null)  ==>  (arg0.next == return.next)
(arg0.next == null)  ==>  (arg0.val == return.val)
(arg0.next == null)  ==>  (orig(arg0) has only one value)
(arg0.next == null)  ==>  (return == orig(arg0))
(arg0.next == null)  ==>  (return has only one value)
(arg0.next == null)  ==>  (return.val == 1)
arg0.val == 1
arg0.next.val one of { 1, 2 }
return.val one of { 1, 2 }
return.next.val one of { 2, 3 }
===========================================================================
leetcode.oj.Solution2.detectCycle(leetcode.oj.Solution$ListNode):::ENTER
arg0.val == 1
arg0.next.val == 2
===========================================================================
leetcode.oj.Solution2.detectCycle(leetcode.oj.Solution$ListNode):::EXIT2011
arg0.next has only one value
arg0.next.next has only one value
return == null
orig(arg0) has only one value
===========================================================================
leetcode.oj.Solution2.detectCycle(leetcode.oj.Solution$ListNode):::EXIT2018
arg0.next.next == return
return == orig(arg0.next.next)
arg0.next has only one value
return has only one value
orig(arg0) has only one value
===========================================================================
leetcode.oj.Solution2.detectCycle(leetcode.oj.Solution$ListNode):::EXIT
arg0.val == orig(arg0.val)
arg0.next == orig(arg0.next)
arg0.next.val == orig(arg0.next.val)
arg0.next.next == orig(arg0.next.next)
arg0.val == 1
arg0.next.val == 2
return.val == 3
return.next has only one value
return.next.val == 4
return.next.next has only one value
===========================================================================
leetcode.oj.Solution2.dfs(char[][], int, int):::ENTER
arg0.getClass().getName() == char[][].class
arg1 one of { 0, 3, 14 }
size(arg0[]) one of { 4, 15 }
===========================================================================
leetcode.oj.Solution2.dfs(char[][], int, int):::EXIT
arg0[] == orig(arg0[])
===========================================================================
leetcode.oj.Solution2.exist(char[][], java.lang.String):::ENTER
arg0.getClass().getName() == char[][].class
size(arg0[]) one of { 1, 3 }
===========================================================================
leetcode.oj.Solution2.exist(char[][], java.lang.String):::EXIT668
arg1.toString one of { "a", "abcced", "see" }
return == true
===========================================================================
leetcode.oj.Solution2.exist(char[][], java.lang.String):::EXIT668;condition="return == true"
===========================================================================
leetcode.oj.Solution2.exist(char[][], java.lang.String):::EXIT671
arg0[] contains no nulls and has only one value, of length 3
arg1.toString == "abcb"
return == false
orig(arg0) has only one value
orig(arg1) has only one value
orig(size(arg0[])) == 3
===========================================================================
leetcode.oj.Solution2.exist(char[][], java.lang.String):::EXIT671;condition="not(return == true)"
===========================================================================
leetcode.oj.Solution2.exist(char[][], java.lang.String):::EXIT
arg0[] == orig(arg0[])
arg1.toString == orig(arg1.toString)
(arg1.toString == "abcb")  <==>  (return == false)
(arg1.toString == "abcb")  ==>  (arg0[] contains no nulls and has only one value, of length 3)
(arg1.toString == "abcb")  ==>  (orig(arg0) has only one value)
(arg1.toString == "abcb")  ==>  (orig(arg1) has only one value)
(arg1.toString == "abcb")  ==>  (orig(size(arg0[])) == 3)
(arg1.toString one of { "a", "abcced", "see" })  <==>  (return == true)
(arg1.toString one of { "a", "abcced", "see" })  ==>  (orig(size(arg0[])) one of { 1, 3 })
===========================================================================
leetcode.oj.Solution2.exist(char[][], java.lang.String):::EXIT;condition="return == true"
arg1.toString one of { "a", "abcced", "see" }
return == true
===========================================================================
leetcode.oj.Solution2.exist(char[][], java.lang.String):::EXIT;condition="not(return == true)"
arg0[] contains no nulls and has only one value, of length 3
arg1.toString == "abcb"
return == false
orig(arg0) has only one value
orig(arg1) has only one value
orig(size(arg0[])) == 3
===========================================================================
leetcode.oj.Solution2.exist(char[][], java.lang.String, int, boolean[][], int, int):::ENTER
size(arg0[]) == size(arg3[])
arg0 != null
arg0.getClass().getName() == char[][].class
arg0[] elements != null
arg1 != null
arg2 >= 0
arg3 != null
arg3.getClass().getName() == boolean[][].class
arg3[] elements != null
size(arg0[]) one of { 1, 3 }
arg0.getClass().getName() != arg3.getClass().getName()
arg4 <= size(arg0[])
===========================================================================
leetcode.oj.Solution2.exist(char[][], java.lang.String, int, boolean[][], int, int):::EXIT676
orig(arg4) == orig(size(arg0[]))
orig(arg4) == orig(size(arg3[]))
arg1.toString one of { "a", "abcced", "see" }
return == true
orig(arg2) one of { 1, 3, 6 }
orig(arg4) one of { 1, 3 }
orig(arg5) one of { 0, 1, 2 }
===========================================================================
leetcode.oj.Solution2.exist(char[][], java.lang.String, int, boolean[][], int, int):::EXIT676;condition="return == true"
===========================================================================
leetcode.oj.Solution2.exist(char[][], java.lang.String, int, boolean[][], int, int):::EXIT679
arg0[] contains no nulls and has only one value, of length 3
arg1.toString one of { "abcb", "abcced", "see" }
return == false
orig(arg0) has only one value
orig(size(arg0[])) == 3
===========================================================================
leetcode.oj.Solution2.exist(char[][], java.lang.String, int, boolean[][], int, int):::EXIT679;condition="not(return == true)"
===========================================================================
leetcode.oj.Solution2.exist(char[][], java.lang.String, int, boolean[][], int, int):::EXIT682
arg0[] contains no nulls and has only one value, of length 3
arg1.toString one of { "abcb", "abcced", "see" }
return == false
orig(arg0) has only one value
orig(arg4) one of { 0, 1, 2 }
orig(arg5) >= 0
orig(size(arg0[])) == 3
orig(arg4) <= size(arg0[])-1
===========================================================================
leetcode.oj.Solution2.exist(char[][], java.lang.String, int, boolean[][], int, int):::EXIT682;condition="not(return == true)"
===========================================================================
leetcode.oj.Solution2.exist(char[][], java.lang.String, int, boolean[][], int, int):::EXIT692
(return == false)  ==>  (arg0[] contains no nulls and has only one value, of length 3)
(return == false)  ==>  (arg1.toString one of { "abcb", "see" })
(return == false)  ==>  (orig(arg0) has only one value)
(return == false)  ==>  (orig(arg2) one of { 0, 1, 2 })
(return == false)  ==>  (orig(arg5) one of { 0, 1, 2 })
(return == false)  ==>  (orig(size(arg0[])) == 3)
(return == true)  ==>  (arg1.toString one of { "a", "abcced", "see" })
(return == true)  ==>  (orig(size(arg0[])) one of { 1, 3 })
orig(arg4) one of { 0, 1, 2 }
orig(arg5) >= 0
orig(arg4) <= size(arg0[])-1
===========================================================================
leetcode.oj.Solution2.exist(char[][], java.lang.String, int, boolean[][], int, int):::EXIT692;condition="return == true"
===========================================================================
leetcode.oj.Solution2.exist(char[][], java.lang.String, int, boolean[][], int, int):::EXIT692;condition="not(return == true)"
arg1.toString one of { "abcb", "see" }
orig(arg2) one of { 0, 1, 2 }
orig(arg5) one of { 0, 1, 2 }
===========================================================================
leetcode.oj.Solution2.exist(char[][], java.lang.String, int, boolean[][], int, int):::EXIT
arg0[] == orig(arg0[])
arg1.toString == orig(arg1.toString)
arg3[] == orig(arg3[])
(return == false)  ==>  (arg0[] contains no nulls and has only one value, of length 3)
(return == false)  ==>  (arg1.toString one of { "abcb", "abcced", "see" })
(return == false)  ==>  (orig(arg0) has only one value)
(return == false)  ==>  (orig(arg4) >= -1)
(return == false)  ==>  (orig(size(arg0[])) == 3)
(return == true)  ==>  (arg1.toString one of { "a", "abcced", "see" })
(return == true)  ==>  (orig(arg4) >= 0)
(return == true)  ==>  (orig(arg5) >= 0)
(return == true)  ==>  (orig(size(arg0[])) one of { 1, 3 })
arg0[] elements != null
arg3[] elements != null
===========================================================================
leetcode.oj.Solution2.exist(char[][], java.lang.String, int, boolean[][], int, int):::EXIT;condition="return == true"
arg1.toString one of { "a", "abcced", "see" }
return == true
orig(arg4) >= 0
orig(arg5) >= 0
===========================================================================
leetcode.oj.Solution2.exist(char[][], java.lang.String, int, boolean[][], int, int):::EXIT;condition="not(return == true)"
arg0[] contains no nulls and has only one value, of length 3
arg1.toString one of { "abcb", "abcced", "see" }
return == false
orig(arg0) has only one value
orig(size(arg0[])) == 3
===========================================================================
leetcode.oj.Solution2.flatten(leetcode.oj.Solution$TreeNode):::ENTER
arg0 has only one value
arg0.val == 1
arg0.left has only one value
arg0.left.val == 2
arg0.left.left has only one value
arg0.left.right has only one value
arg0.right has only one value
arg0.right.val == 5
arg0.right.left == null
arg0.right.right has only one value
===========================================================================
leetcode.oj.Solution2.flatten(leetcode.oj.Solution$TreeNode):::EXIT2367
===========================================================================
leetcode.oj.Solution2.flatten(leetcode.oj.Solution$TreeNode):::EXIT
arg0.val == orig(arg0.val)
arg0.right.left == orig(arg0.right.left)
arg0.val == 1
arg0.left == null
arg0.right has only one value
arg0.right.val == 2
arg0.right.left == null
arg0.right.right has only one value
===========================================================================
leetcode.oj.Solution2.fullJustify(java.lang.String[], int):::ENTER
arg0.getClass().getName() == java.lang.String[].class
size(arg0[]) one of { 1, 7 }
===========================================================================
leetcode.oj.Solution2.fullJustify(java.lang.String[], int):::EXIT325
arg0[] contains no nulls and has only one value, of length 1
arg0[] elements has only one value
arg0[].toString == [a]
arg0[].toString elements == "a"
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [java.lang.String]
orig(arg0) has only one value
orig(arg1) == 1
size(return[]) == 1
orig(size(arg0[])) == 1
===========================================================================
leetcode.oj.Solution2.fullJustify(java.lang.String[], int):::EXIT341
orig(arg1) one of { 6, 16, 30 }
===========================================================================
leetcode.oj.Solution2.fullJustify(java.lang.String[], int):::EXIT
arg0[] == orig(arg0[])
return[].getClass().getName() elements == java.lang.String.class
===========================================================================
leetcode.oj.Solution2.generate(int):::ENTER
arg0 == 5
===========================================================================
leetcode.oj.Solution2.generate(int):::EXIT2777
===========================================================================
leetcode.oj.Solution2.generate(int):::EXIT
return has only one value
return[] contains no nulls and has only one value, of length 5
return[].getClass().getName() == [java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList]
return[].getClass().getName() elements == java.util.ArrayList.class
size(return[]) == 5
===========================================================================
leetcode.oj.Solution2.generateTrees(int):::ENTER
arg0 one of { 1, 3 }
===========================================================================
leetcode.oj.Solution2.generateTrees(int):::EXIT
return[].getClass().getName() elements == leetcode.oj.Solution.TreeNode.class
return[].getClass().getName() one of { [leetcode.oj.Solution.TreeNode], [leetcode.oj.Solution.TreeNode, leetcode.oj.Solution.TreeNode, leetcode.oj.Solution.TreeNode, leetcode.oj.Solution.TreeNode, leetcode.oj.Solution.TreeNode] }
size(return[]) one of { 1, 5 }
===========================================================================
leetcode.oj.Solution2.getIndex(int[], int):::ENTER
arg0[] one of { [2, 1, 3], [4, 3, 5, 2, 6, 1, 8, 7] }
arg0[] elements >= 1
size(arg0[]) one of { 3, 8 }
arg1 in arg0[]
===========================================================================
leetcode.oj.Solution2.getIndex(int[], int):::EXIT2250
===========================================================================
leetcode.oj.Solution2.getIndex(int[], int):::EXIT
arg0[] == orig(arg0[])
orig(arg1) == arg0[return]
orig(arg1) == orig(arg0[post(return)])
arg0[] one of { [2, 1, 3], [4, 3, 5, 2, 6, 1, 8, 7] }
arg0[] elements >= 1
return <= size(arg0[])-1
===========================================================================
leetcode.oj.Solution2.getRow(int):::ENTER
===========================================================================
leetcode.oj.Solution2.getRow(int):::EXIT
return[].getClass().getName() elements == java.lang.Integer.class
===========================================================================
leetcode.oj.Solution2.grayCode(int):::ENTER
arg0 one of { 1, 2 }
===========================================================================
leetcode.oj.Solution2.grayCode(int):::EXIT1596
return[] contains no nulls and has only one value, of length 2
return[].getClass().getName() == [java.lang.Integer, java.lang.Integer]
orig(arg0) == 1
size(return[]) == 2
===========================================================================
leetcode.oj.Solution2.grayCode(int):::EXIT1604
return has only one value
return[] contains no nulls and has only one value, of length 4
return[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
orig(arg0) == 2
size(return[]) == 4
===========================================================================
leetcode.oj.Solution2.grayCode(int):::EXIT
return[].getClass().getName() elements == java.lang.Integer.class
return[].getClass().getName() one of { [java.lang.Integer, java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] }
size(return[]) one of { 2, 4 }
===========================================================================
leetcode.oj.Solution2.hasCycle(leetcode.oj.Solution$ListNode):::ENTER
arg0.val == 1
arg0.next.val == 2
===========================================================================
leetcode.oj.Solution2.hasCycle(leetcode.oj.Solution$ListNode):::EXIT1987
arg0.next.next == orig(arg0)
orig(arg0) == orig(arg0.next.next)
arg0.next has only one value
return == true
orig(arg0) has only one value
===========================================================================
leetcode.oj.Solution2.hasCycle(leetcode.oj.Solution$ListNode):::EXIT1987;condition="return == true"
===========================================================================
leetcode.oj.Solution2.hasCycle(leetcode.oj.Solution$ListNode):::EXIT1991
arg0.next has only one value
arg0.next.next has only one value
return == false
orig(arg0) has only one value
===========================================================================
leetcode.oj.Solution2.hasCycle(leetcode.oj.Solution$ListNode):::EXIT1991;condition="not(return == true)"
===========================================================================
leetcode.oj.Solution2.hasCycle(leetcode.oj.Solution$ListNode):::EXIT
arg0.val == orig(arg0.val)
arg0.next == orig(arg0.next)
arg0.next.val == orig(arg0.next.val)
arg0.next.next == orig(arg0.next.next)
(return == true)  ==>  (arg0.next.next == orig(arg0))
arg0.val == 1
arg0.next.val == 2
===========================================================================
leetcode.oj.Solution2.hasCycle(leetcode.oj.Solution$ListNode):::EXIT;condition="return == true"
arg0.next.next == orig(arg0)
orig(arg0) == orig(arg0.next.next)
arg0.next has only one value
return == true
orig(arg0) has only one value
===========================================================================
leetcode.oj.Solution2.hasCycle(leetcode.oj.Solution$ListNode):::EXIT;condition="not(return == true)"
arg0.next has only one value
arg0.next.next has only one value
return == false
orig(arg0) has only one value
===========================================================================
leetcode.oj.Solution2.hasPathSum(leetcode.oj.Solution$TreeNode, int):::ENTER
arg0.val one of { 1, 5 }
arg0.left.val one of { 2, 4 }
arg0.left.right == null
arg0.right.val one of { 4, 8 }
===========================================================================
leetcode.oj.Solution2.hasPathSum(leetcode.oj.Solution$TreeNode, int):::EXIT2092
(arg0.left.val == 2)  <==>  (arg0.left.left == null)
(arg0.left.val == 2)  <==>  (orig(arg1) one of { 1, 11 })
(arg0.left.val == 2)  <==>  (return == false)
(arg0.left.val == 2)  ==>  (arg0.right.left == null)
(arg0.left.val == 2)  ==>  (arg0.right.right == null)
(arg0.left.val == 2)  ==>  (arg0.right.val == 4)
(arg0.left.val == 2)  ==>  (arg0.val one of { 1, 5 })
(arg0.left.val == 4)  <==>  (arg0.left.left has only one value)
(arg0.left.val == 4)  <==>  (orig(arg1) one of { 9, 22 })
(arg0.left.val == 4)  <==>  (return == true)
(arg0.left.val == 4)  ==>  (arg0.right.val one of { 4, 8 })
(arg0.left.val == 4)  ==>  (arg0.val == 5)
===========================================================================
leetcode.oj.Solution2.hasPathSum(leetcode.oj.Solution$TreeNode, int):::EXIT2092;condition="return == true"
===========================================================================
leetcode.oj.Solution2.hasPathSum(leetcode.oj.Solution$TreeNode, int):::EXIT2092;condition="not(return == true)"
===========================================================================
leetcode.oj.Solution2.hasPathSum(leetcode.oj.Solution$TreeNode, int):::EXIT
arg0.val == orig(arg0.val)
arg0.left == orig(arg0.left)
arg0.left.val == orig(arg0.left.val)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.right == orig(arg0.right)
arg0.right.val == orig(arg0.right.val)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
(arg0.left.val == 2)  <==>  (arg0.left.left == null)
(arg0.left.val == 2)  <==>  (orig(arg1) one of { 1, 11 })
(arg0.left.val == 2)  <==>  (return == false)
(arg0.left.val == 2)  ==>  (arg0.right.left == null)
(arg0.left.val == 2)  ==>  (arg0.right.right == null)
(arg0.left.val == 2)  ==>  (arg0.right.val == 4)
(arg0.left.val == 2)  ==>  (arg0.val one of { 1, 5 })
(arg0.left.val == 4)  <==>  (arg0.left.left has only one value)
(arg0.left.val == 4)  <==>  (orig(arg1) one of { 9, 22 })
(arg0.left.val == 4)  <==>  (return == true)
(arg0.left.val == 4)  ==>  (arg0.right.val one of { 4, 8 })
(arg0.left.val == 4)  ==>  (arg0.val == 5)
arg0.val one of { 1, 5 }
arg0.left.val one of { 2, 4 }
arg0.left.right == null
arg0.right.val one of { 4, 8 }
===========================================================================
leetcode.oj.Solution2.hasPathSum(leetcode.oj.Solution$TreeNode, int):::EXIT;condition="return == true"
arg0.val == 5
arg0.left.val == 4
arg0.left.left has only one value
return == true
orig(arg1) one of { 9, 22 }
===========================================================================
leetcode.oj.Solution2.hasPathSum(leetcode.oj.Solution$TreeNode, int):::EXIT;condition="not(return == true)"
arg0.left.val == 2
arg0.left.left == null
arg0.right.val == 4
arg0.right.left == null
arg0.right.right == null
return == false
orig(arg1) one of { 1, 11 }
===========================================================================
leetcode.oj.Solution2.hasPathSumRecursive(leetcode.oj.Solution$TreeNode, int):::ENTER
arg0.right.val one of { 2, 4, 8 }
===========================================================================
leetcode.oj.Solution2.hasPathSumRecursive(leetcode.oj.Solution$TreeNode, int):::EXIT2097
(return == true)  <==>  (orig(arg1) == 0)
orig(arg0) == null
===========================================================================
leetcode.oj.Solution2.hasPathSumRecursive(leetcode.oj.Solution$TreeNode, int):::EXIT2097;condition="return == true"
orig(arg1) == 0
===========================================================================
leetcode.oj.Solution2.hasPathSumRecursive(leetcode.oj.Solution$TreeNode, int):::EXIT2097;condition="not(return == true)"
===========================================================================
leetcode.oj.Solution2.hasPathSumRecursive(leetcode.oj.Solution$TreeNode, int):::EXIT2099
(return == true)  ==>  (arg0.val one of { 2, 4, 5 })
(return == true)  ==>  (orig(arg1) one of { 2, 4, 9 })
arg0.left == null
arg0.right.val == 4
arg0.right.left == null
arg0.right.right == null
===========================================================================
leetcode.oj.Solution2.hasPathSumRecursive(leetcode.oj.Solution$TreeNode, int):::EXIT2099;condition="return == true"
arg0.val one of { 2, 4, 5 }
orig(arg1) one of { 2, 4, 9 }
===========================================================================
leetcode.oj.Solution2.hasPathSumRecursive(leetcode.oj.Solution$TreeNode, int):::EXIT2099;condition="not(return == true)"
===========================================================================
leetcode.oj.Solution2.hasPathSumRecursive(leetcode.oj.Solution$TreeNode, int):::EXIT2101
(arg0.val == 1)  <==>  (arg0.left.left == null)
(arg0.val == 1)  <==>  (arg0.left.right == null)
(arg0.val == 1)  <==>  (arg0.left.val == 2)
(arg0.val == 1)  <==>  (arg0.val == orig(arg1))
(arg0.val == 1)  <==>  (orig(arg1) == 1)
(arg0.val == 1)  <==>  (return == false)
(arg0.val == 4)  <==>  (arg0.left.left has only one value)
(arg0.val == 4)  <==>  (arg0.left.right has only one value)
(arg0.val == 4)  <==>  (arg0.left.val == 11)
(arg0.val == 4)  <==>  (orig(arg1) == 17)
(arg0.val == 4)  <==>  (return == true)
arg0.val one of { 1, 4 }
arg0.left.val one of { 2, 11 }
arg0.right == null
orig(arg1) one of { 1, 17 }
===========================================================================
leetcode.oj.Solution2.hasPathSumRecursive(leetcode.oj.Solution$TreeNode, int):::EXIT2101;condition="return == true"
arg0.val == 4
arg0.left has only one value
arg0.left.val == 11
arg0.left.left has only one value
arg0.left.right has only one value
orig(arg0) has only one value
orig(arg1) == 17
===========================================================================
leetcode.oj.Solution2.hasPathSumRecursive(leetcode.oj.Solution$TreeNode, int):::EXIT2101;condition="not(return == true)"
arg0.val == orig(arg1)
arg0.val == 1
arg0.left has only one value
orig(arg0) has only one value
===========================================================================
leetcode.oj.Solution2.hasPathSumRecursive(leetcode.oj.Solution$TreeNode, int):::EXIT2102
arg0.val one of { 5, 11 }
arg0.left.val one of { 4, 7 }
arg0.left.right == null
arg0.right.val one of { 2, 8 }
return == true
orig(arg1) one of { 13, 22 }
===========================================================================
leetcode.oj.Solution2.hasPathSumRecursive(leetcode.oj.Solution$TreeNode, int):::EXIT2102;condition="return == true"
===========================================================================
leetcode.oj.Solution2.hasPathSumRecursive(leetcode.oj.Solution$TreeNode, int):::EXIT
arg0.val == orig(arg0.val)
arg0.left == orig(arg0.left)
arg0.left.val == orig(arg0.left.val)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.right == orig(arg0.right)
arg0.right.val == orig(arg0.right.val)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
(arg0.left.val == 2)  <==>  (return == false)
(arg0.left.val == 2)  ==>  (arg0.left.left == null)
(arg0.left.val == 2)  ==>  (arg0.left.right == null)
(arg0.left.val == 2)  ==>  (arg0.right.left == null)
(arg0.left.val == 2)  ==>  (arg0.right.right == null)
(arg0.left.val == 2)  ==>  (arg0.right.val == 4)
(arg0.left.val one of { 4, 7, 11 })  <==>  (return == true)
(arg0.left.val one of { 4, 7, 11 })  ==>  (arg0.right.val one of { 2, 4, 8 })
arg0.right.val one of { 2, 4, 8 }
===========================================================================
leetcode.oj.Solution2.hasPathSumRecursive(leetcode.oj.Solution$TreeNode, int):::EXIT;condition="return == true"
arg0.left.val one of { 4, 7, 11 }
return == true
===========================================================================
leetcode.oj.Solution2.hasPathSumRecursive(leetcode.oj.Solution$TreeNode, int):::EXIT;condition="not(return == true)"
arg0.left.val == 2
arg0.left.left == null
arg0.left.right == null
arg0.right.val == 4
arg0.right.left == null
arg0.right.right == null
return == false
===========================================================================
leetcode.oj.Solution2.inOrder(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode[], leetcode.oj.Solution$TreeNode[], leetcode.oj.Solution$TreeNode[]):::ENTER
arg1.getClass().getName() == arg2.getClass().getName()
arg1.getClass().getName() == arg3.getClass().getName()
arg0.right.val one of { -49, 1, 3 }
arg0.right.left == null
arg0.right.right == null
arg1 != null
arg1.getClass().getName() == leetcode.oj.Solution$TreeNode[].class
arg1[].left.right == [null]
arg1[].left.right elements == null
arg1[].right.val elements one of { -49, 1, 3 }
arg1[].right.val one of { [-49], [1], [3] }
arg1[].right.left == [null]
arg1[].right.left elements == null
arg1[].right.right == [null]
arg1[].right.right elements == null
arg2 != null
arg2[].left.val == [-98]
arg2[].left.val elements == -98
arg2[].left.left contains no nulls and has only one value, of length 1
arg2[].left.left elements has only one value
arg2[].left.right == [null]
arg2[].left.right elements == null
arg2[].right == [null]
arg2[].right elements == null
arg3 != null
arg3[] == [null]
arg3[] elements == null
size(arg1[]) == 1
size(arg2[]) == 1
size(arg3[]) == 1
arg0.val != arg0.left.val
arg0.val in arg1[].right.val
arg1[].right.val elements == arg0.val
arg0.left in arg1[].left.right
arg1[].left.right elements == arg0.left
arg0.left in arg1[].right.left
arg1[].right.left elements == arg0.left
arg0.left in arg1[].right.right
arg1[].right.right elements == arg0.left
arg0.left in arg2[].left.right
arg2[].left.right elements == arg0.left
arg0.left in arg2[].right
arg2[].right elements == arg0.left
arg0.left.val in arg1[].val
arg0.left.val in arg1[].left.val
arg0.left.val in arg1[].right.val
arg0.left.val in arg2[].val
arg0.left.val in arg2[].left.val
arg0.left.left in arg1[].left
arg0.left.left in arg1[].left.left
arg0.left.left in arg1[].left.right
arg0.left.left in arg1[].right
arg0.left.left in arg1[].right.left
arg0.left.left in arg1[].right.right
arg0.left.left in arg2[].left
arg0.left.left in arg2[].left.left
arg0.left.left in arg2[].left.right
arg0.left.left in arg2[].right
arg0.left.right in arg1[].left
arg0.left.right in arg1[].left.left
arg0.left.right in arg1[].left.right
arg0.left.right in arg1[].right
arg0.left.right in arg1[].right.left
arg0.left.right in arg1[].right.right
arg0.left.right in arg2[].left
arg0.left.right in arg2[].left.left
arg0.left.right in arg2[].left.right
arg0.left.right in arg2[].right
arg0.right in arg1[].left.right
arg1[].left.right elements == arg0.right
arg0.right in arg1[].right.left
arg1[].right.left elements == arg0.right
arg0.right in arg1[].right.right
arg1[].right.right elements == arg0.right
arg0.right in arg2[].left.right
arg2[].left.right elements == arg0.right
arg0.right in arg2[].right
arg2[].right elements == arg0.right
arg0.right.val in arg1[].val
arg0.right.val in arg1[].left.val
arg0.right.val in arg1[].right.val
arg0.right.val in arg2[].val
===========================================================================
leetcode.oj.Solution2.inOrder(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode[], leetcode.oj.Solution$TreeNode[], leetcode.oj.Solution$TreeNode[]):::EXIT2547
arg1[] == orig(arg1[])
arg1[].val == orig(arg1[].val)
arg1[].left == orig(arg1[].left)
arg1[].left.val == orig(arg1[].left.val)
arg1[].left.left == orig(arg1[].left.left)
arg1[].left.right == orig(arg1[].left.right)
arg1[].right == orig(arg1[].right)
arg1[].right.val == orig(arg1[].right.val)
arg1[].right.left == orig(arg1[].right.left)
arg1[].right.right == orig(arg1[].right.right)
arg2[] == orig(arg2[])
arg2[].val == orig(arg2[].val)
arg2[].left == orig(arg2[].left)
arg2[].left.val == orig(arg2[].left.val)
arg2[].left.left == orig(arg2[].left.left)
arg2[].left.right == orig(arg2[].left.right)
arg2[].right == orig(arg2[].right)
arg3[] == orig(arg3[])
arg3[] == [null]
arg3[] elements == null
orig(arg0) == null
arg1[].left.right elements == orig(arg0)
orig(arg0) in arg1[].left.right
arg1[].right.left elements == orig(arg0)
orig(arg0) in arg1[].right.left
arg1[].right.right elements == orig(arg0)
orig(arg0) in arg1[].right.right
arg2[].left.right elements == orig(arg0)
orig(arg0) in arg2[].left.right
arg2[].right elements == orig(arg0)
orig(arg0) in arg2[].right
arg3[] elements == orig(arg0)
orig(arg0) in arg3[]
===========================================================================
leetcode.oj.Solution2.inOrder(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode[], leetcode.oj.Solution$TreeNode[], leetcode.oj.Solution$TreeNode[]):::EXIT2554
arg0.left.val one of { -85, 41 }
arg0.right == null
arg1[].val elements one of { -85, 1 }
arg1[].val one of { [-85], [1] }
arg1[].left.val elements one of { -73, 2 }
arg1[].left.val one of { [-73], [2] }
arg1[].right.val elements one of { -49, 3 }
arg1[].right.val one of { [-49], [3] }
arg2[].val elements one of { -73, 2 }
arg2[].val one of { [-73], [2] }
orig(arg1[].val) elements one of { -85, 1 }
orig(arg1[].val) one of { [-85], [1] }
orig(arg1[].left.val) elements one of { -73, 2 }
orig(arg1[].left.val) one of { [-73], [2] }
orig(arg1[].right.val) elements one of { -49, 3 }
orig(arg1[].right.val) one of { [-49], [3] }
orig(arg2[].val) elements one of { -73, 2 }
orig(arg2[].val) one of { [-73], [2] }
arg0.right in arg1[].left.right
arg1[].left.right elements == arg0.right
arg0.right in arg1[].right.left
arg1[].right.left elements == arg0.right
arg0.right in arg1[].right.right
arg1[].right.right elements == arg0.right
arg0.right in arg2[].left.right
arg2[].left.right elements == arg0.right
arg0.right in arg2[].right
arg2[].right elements == arg0.right
arg0.right in arg3[].left.right
arg3[].left.right elements == arg0.right
arg0.right in arg3[].right.left
arg3[].right.left elements == arg0.right
arg0.right in arg3[].right.right
arg3[].right.right elements == arg0.right
arg0.right in orig(arg3[])
orig(arg3[]) elements == arg0.right
arg1[].val == orig(arg1[].val) (elementwise)
arg1[].val is the reverse of orig(arg1[].val)
arg1[].left == orig(arg1[].left) (elementwise)
arg1[].left is the reverse of orig(arg1[].left)
arg1[].right == orig(arg1[].right) (elementwise)
arg1[].right is the reverse of orig(arg1[].right)
orig(arg0) in orig(arg1[].right)
orig(arg1[].right) elements == orig(arg0)
===========================================================================
leetcode.oj.Solution2.inOrder(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode[], leetcode.oj.Solution$TreeNode[], leetcode.oj.Solution$TreeNode[]):::EXIT2559
arg0.left.right == null
arg1[].right.val elements one of { -49, 3 }
arg1[].right.val one of { [-49], [3] }
orig(arg1[].val) == [2]
orig(arg1[].val) elements == 2
orig(arg1[].left) contains no nulls and has only one value, of length 1
orig(arg1[].left) elements has only one value
orig(arg1[].left.val) == [3]
orig(arg1[].left.val) elements == 3
orig(arg1[].left.left) == [null]
orig(arg1[].left.left) elements == null
orig(arg1[].right) contains no nulls and has only one value, of length 1
orig(arg1[].right) elements has only one value
orig(arg1[].right.val) == [1]
orig(arg1[].right.val) elements == 1
orig(arg2[].val) == [3]
orig(arg2[].val) elements == 3
orig(arg2[].left) == [null]
orig(arg2[].left) elements == null
arg0.val in arg3[].val
arg3[].val elements == arg0.val
arg0.left in arg3[].left
arg3[].left elements == arg0.left
arg0.left in orig(arg1[].left.left)
orig(arg1[].left.left) elements == arg0.left
arg0.left in orig(arg2[].left)
orig(arg2[].left) elements == arg0.left
arg0.left.val in arg1[].left.val
arg1[].left.val elements == arg0.left.val
arg0.left.val in arg2[].val
arg2[].val elements == arg0.left.val
arg0.left.val in arg3[].left.val
arg3[].left.val elements == arg0.left.val
arg0.left.left in arg1[].left.left
arg1[].left.left elements == arg0.left.left
arg0.left.left in arg2[].left
arg2[].left elements == arg0.left.left
arg0.left.left in arg3[].left.left
arg3[].left.left elements == arg0.left.left
arg0.left.right in arg1[].left.right
arg1[].left.right elements == arg0.left.right
arg0.left.right in arg1[].right.left
arg1[].right.left elements == arg0.left.right
arg0.left.right in arg1[].right.right
arg1[].right.right elements == arg0.left.right
arg0.left.right in arg2[].left.right
arg2[].left.right elements == arg0.left.right
arg0.left.right in arg2[].right
arg2[].right elements == arg0.left.right
arg0.left.right in arg3[].left.right
arg3[].left.right elements == arg0.left.right
arg0.left.right in arg3[].right.left
arg3[].right.left elements == arg0.left.right
arg0.left.right in arg3[].right.right
arg3[].right.right elements == arg0.left.right
arg0.left.right in orig(arg1[])
orig(arg1[]) elements == arg0.left.right
arg0.left.right in orig(arg2[])
orig(arg2[]) elements == arg0.left.right
arg0.left.right in orig(arg3[])
orig(arg3[]) elements == arg0.left.right
arg0.right in arg3[].right
arg3[].right elements == arg0.right
arg0.right in orig(arg1[].left.left)
orig(arg1[].left.left) elements == arg0.right
arg0.right in orig(arg2[].left)
orig(arg2[].left) elements == arg0.right
orig(arg0) in orig(arg1[].right)
orig(arg1[].right) elements == orig(arg0)
===========================================================================
leetcode.oj.Solution2.inOrder(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode[], leetcode.oj.Solution$TreeNode[], leetcode.oj.Solution$TreeNode[]):::EXIT
arg0.val == orig(arg0.val)
arg0.left == orig(arg0.left)
arg0.left.val == orig(arg0.left.val)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.right == orig(arg0.right)
arg0.right.val == orig(arg0.right.val)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
arg0.right.val one of { -49, 1, 3 }
arg0.right.left == null
arg0.right.right == null
arg1[].left.right == [null]
arg1[].left.right elements == null
arg1[].right.val elements one of { -49, 1, 3 }
arg1[].right.val one of { [-49], [1], [3] }
arg1[].right.left == [null]
arg1[].right.left elements == null
arg1[].right.right == [null]
arg1[].right.right elements == null
arg2[].left.val == [-98]
arg2[].left.val elements == -98
arg2[].left.left contains no nulls and has only one value, of length 1
arg2[].left.left elements has only one value
arg2[].left.right == [null]
arg2[].left.right elements == null
arg2[].right == [null]
arg2[].right elements == null
arg3[].val elements one of { -85, 1 }
arg3[].val one of { [-85], [1] }
arg3[].left.val elements one of { -73, 2 }
arg3[].left.val one of { [-73], [2] }
arg3[].left.right == [null]
arg3[].left.right elements == null
arg3[].right.val elements one of { -49, 3 }
arg3[].right.val one of { [-49], [3] }
arg3[].right.left == [null]
arg3[].right.left elements == null
arg3[].right.right == [null]
arg3[].right.right elements == null
arg0.val != arg0.left.val
arg1[].val elements <= arg0.val
arg0.val in orig(arg1[].right.val)
orig(arg1[].right.val) elements == arg0.val
arg0.left in orig(arg1[].left.right)
orig(arg1[].left.right) elements == arg0.left
arg0.left in orig(arg1[].right.left)
orig(arg1[].right.left) elements == arg0.left
arg0.left in orig(arg1[].right.right)
orig(arg1[].right.right) elements == arg0.left
arg0.left in orig(arg2[].left.right)
orig(arg2[].left.right) elements == arg0.left
arg0.left in orig(arg2[].right)
orig(arg2[].right) elements == arg0.left
arg0.left.val in orig(arg1[].val)
arg0.left.val in orig(arg1[].left.val)
arg0.left.val in orig(arg1[].right.val)
arg0.left.val in orig(arg2[].val)
arg0.left.val in orig(arg2[].left.val)
arg0.left.left in orig(arg1[].left)
arg0.left.left in orig(arg1[].left.left)
arg0.left.left in orig(arg1[].left.right)
arg0.left.left in orig(arg1[].right)
arg0.left.left in orig(arg1[].right.left)
arg0.left.left in orig(arg1[].right.right)
arg0.left.left in orig(arg2[].left)
arg0.left.left in orig(arg2[].left.left)
arg0.left.left in orig(arg2[].left.right)
arg0.left.left in orig(arg2[].right)
arg0.left.right in orig(arg1[].left)
arg0.left.right in orig(arg1[].left.left)
arg0.left.right in orig(arg1[].left.right)
arg0.left.right in orig(arg1[].right)
arg0.left.right in orig(arg1[].right.left)
arg0.left.right in orig(arg1[].right.right)
arg0.left.right in orig(arg2[].left)
arg0.left.right in orig(arg2[].left.left)
arg0.left.right in orig(arg2[].left.right)
arg0.left.right in orig(arg2[].right)
arg0.right in orig(arg1[].left.right)
orig(arg1[].left.right) elements == arg0.right
arg0.right in orig(arg1[].right.left)
orig(arg1[].right.left) elements == arg0.right
arg0.right in orig(arg1[].right.right)
orig(arg1[].right.right) elements == arg0.right
arg0.right in orig(arg2[].left.right)
orig(arg2[].left.right) elements == arg0.right
arg0.right in orig(arg2[].right)
orig(arg2[].right) elements == arg0.right
arg0.right.val in arg1[].right.val
arg1[].right.val elements == arg0.right.val
arg0.right.val in arg3[].right.val
arg3[].right.val elements == arg0.right.val
arg0.right.val in orig(arg1[].val)
arg0.right.val in orig(arg1[].left.val)
arg0.right.val in orig(arg1[].right.val)
arg0.right.val in orig(arg2[].val)
arg1[].val <= orig(arg1[].val) (elementwise)
arg1[].left.val == orig(arg1[].left.val) (elementwise)
arg1[].left.val is the reverse of orig(arg1[].left.val)
arg1[].left.left == orig(arg1[].left.left) (elementwise)
arg1[].left.left is the reverse of orig(arg1[].left.left)
arg1[].left.right == orig(arg1[].left.right) (elementwise)
arg1[].left.right is the reverse of orig(arg1[].left.right)
arg1[].right.val == orig(arg1[].right.val) (elementwise)
arg1[].right.val is the reverse of orig(arg1[].right.val)
arg1[].right.left == orig(arg1[].right.left) (elementwise)
arg1[].right.left is the reverse of orig(arg1[].right.left)
arg1[].right.right == orig(arg1[].right.right) (elementwise)
arg1[].right.right is the reverse of orig(arg1[].right.right)
arg2[].val == orig(arg2[].val) (elementwise)
arg2[].val is the reverse of orig(arg2[].val)
arg2[].left == orig(arg2[].left) (elementwise)
arg2[].left is the reverse of orig(arg2[].left)
arg2[].left.val == orig(arg2[].left.val) (elementwise)
arg2[].left.val is the reverse of orig(arg2[].left.val)
arg2[].left.left == orig(arg2[].left.left) (elementwise)
arg2[].left.left is the reverse of orig(arg2[].left.left)
arg2[].left.right == orig(arg2[].left.right) (elementwise)
arg2[].left.right is the reverse of orig(arg2[].left.right)
arg2[].right == orig(arg2[].right) (elementwise)
arg2[].right is the reverse of orig(arg2[].right)
===========================================================================
leetcode.oj.Solution2.inorderTraversal(leetcode.oj.Solution$TreeNode):::ENTER
arg0.val == 1
arg0.left.val == 2
arg0.left.left has only one value
arg0.left.right has only one value
arg0.right.val == 2
arg0.right.left has only one value
arg0.right.right == null
===========================================================================
leetcode.oj.Solution2.inorderTraversal(leetcode.oj.Solution$TreeNode):::EXIT1020
===========================================================================
leetcode.oj.Solution2.inorderTraversal(leetcode.oj.Solution$TreeNode):::EXIT
arg0.val == orig(arg0.val)
arg0.left == orig(arg0.left)
arg0.left.val == orig(arg0.left.val)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.right == orig(arg0.right)
arg0.right.val == orig(arg0.right.val)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
arg0.val == 1
arg0.left.val == 2
arg0.left.left has only one value
arg0.left.right has only one value
arg0.right.val == 2
arg0.right.left has only one value
arg0.right.right == null
return[].getClass().getName() elements == java.lang.Integer.class
return[].getClass().getName() one of { [java.lang.Integer, java.lang.Integer, java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] }
size(return[]) one of { 3, 6 }
===========================================================================
leetcode.oj.Solution2.isAlphanumeric(char):::ENTER
===========================================================================
leetcode.oj.Solution2.isAlphanumeric(char):::EXIT
(return == false)  <==>  (orig(arg0) one of { 32, 44, 58 })
===========================================================================
leetcode.oj.Solution2.isAlphanumeric(char):::EXIT;condition="return == true"
return == true
===========================================================================
leetcode.oj.Solution2.isAlphanumeric(char):::EXIT;condition="not(return == true)"
return == false
orig(arg0) one of { 32, 44, 58 }
===========================================================================
leetcode.oj.Solution2.isBalanced(leetcode.oj.Solution$TreeNode):::ENTER
arg0.val one of { 1, 2, 3 }
arg0.left.val == 2
arg0.left.right == null
arg0.right.val == 3
arg0.right.left == null
arg0.right.right == null
===========================================================================
leetcode.oj.Solution2.isBalanced(leetcode.oj.Solution$TreeNode):::EXIT1965
return == true
orig(arg0) == null
===========================================================================
leetcode.oj.Solution2.isBalanced(leetcode.oj.Solution$TreeNode):::EXIT1965;condition="return == true"
===========================================================================
leetcode.oj.Solution2.isBalanced(leetcode.oj.Solution$TreeNode):::EXIT1970
arg0.left.left == null
return == true
===========================================================================
leetcode.oj.Solution2.isBalanced(leetcode.oj.Solution$TreeNode):::EXIT1970;condition="return == true"
===========================================================================
leetcode.oj.Solution2.isBalanced(leetcode.oj.Solution$TreeNode):::EXIT1971
arg0.val == 1
arg0.left has only one value
arg0.left.left has only one value
arg0.right == null
return == false
orig(arg0) has only one value
===========================================================================
leetcode.oj.Solution2.isBalanced(leetcode.oj.Solution$TreeNode):::EXIT1971;condition="not(return == true)"
===========================================================================
leetcode.oj.Solution2.isBalanced(leetcode.oj.Solution$TreeNode):::EXIT
arg0.val == orig(arg0.val)
arg0.left == orig(arg0.left)
arg0.left.val == orig(arg0.left.val)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.right == orig(arg0.right)
arg0.right.val == orig(arg0.right.val)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
(arg0.left.left == null)  <==>  (return == true)
(arg0.left.left == null)  ==>  (arg0.right.left == null)
(arg0.left.left == null)  ==>  (arg0.right.right == null)
(arg0.left.left == null)  ==>  (arg0.val one of { 1, 2, 3 })
(arg0.left.left has only one value)  <==>  (return == false)
(arg0.left.left has only one value)  ==>  (arg0.left has only one value)
(arg0.left.left has only one value)  ==>  (arg0.right == null)
(arg0.left.left has only one value)  ==>  (arg0.val == 1)
(arg0.left.left has only one value)  ==>  (orig(arg0) has only one value)
arg0.val one of { 1, 2, 3 }
arg0.left.val == 2
arg0.left.right == null
arg0.right.val == 3
arg0.right.left == null
arg0.right.right == null
===========================================================================
leetcode.oj.Solution2.isBalanced(leetcode.oj.Solution$TreeNode):::EXIT;condition="return == true"
arg0.left.left == null
return == true
===========================================================================
leetcode.oj.Solution2.isBalanced(leetcode.oj.Solution$TreeNode):::EXIT;condition="not(return == true)"
arg0.val == 1
arg0.left has only one value
arg0.left.left has only one value
arg0.right == null
return == false
orig(arg0) has only one value
===========================================================================
leetcode.oj.Solution2.isEqualSet(java.lang.String, java.lang.String):::ENTER
arg0 != null
arg1 != null
===========================================================================
leetcode.oj.Solution2.isEqualSet(java.lang.String, java.lang.String):::EXIT1537
return == false
===========================================================================
leetcode.oj.Solution2.isEqualSet(java.lang.String, java.lang.String):::EXIT1537;condition="not(return == true)"
===========================================================================
leetcode.oj.Solution2.isEqualSet(java.lang.String, java.lang.String):::EXIT1540
return == true
===========================================================================
leetcode.oj.Solution2.isEqualSet(java.lang.String, java.lang.String):::EXIT1540;condition="return == true"
===========================================================================
leetcode.oj.Solution2.isEqualSet(java.lang.String, java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
===========================================================================
leetcode.oj.Solution2.isEqualSet(java.lang.String, java.lang.String):::EXIT;condition="return == true"
return == true
===========================================================================
leetcode.oj.Solution2.isEqualSet(java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
leetcode.oj.Solution2.isInterleave(java.lang.String, java.lang.String, java.lang.String):::ENTER
arg0.toString one of { "aabcc", "abc" }
arg1.toString one of { "cde", "dbbca", "def" }
===========================================================================
leetcode.oj.Solution2.isInterleave(java.lang.String, java.lang.String, java.lang.String):::EXIT1332
(arg2.toString one of { "aadbbbaccc", "cbadec", "zzzzzz" })  <==>  (return == false)
(arg2.toString one of { "aadbbbaccc", "cbadec", "zzzzzz" })  ==>  (arg1.toString one of { "cde", "dbbca", "def" })
(arg2.toString one of { "aadbbcbcac", "abcdec", "acbdec" })  <==>  (return == true)
(arg2.toString one of { "aadbbcbcac", "abcdec", "acbdec" })  ==>  (arg1.toString one of { "cde", "dbbca" })
===========================================================================
leetcode.oj.Solution2.isInterleave(java.lang.String, java.lang.String, java.lang.String):::EXIT1332;condition="return == true"
===========================================================================
leetcode.oj.Solution2.isInterleave(java.lang.String, java.lang.String, java.lang.String):::EXIT1332;condition="not(return == true)"
===========================================================================
leetcode.oj.Solution2.isInterleave(java.lang.String, java.lang.String, java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
arg2.toString == orig(arg2.toString)
(arg2.toString one of { "aadbbbaccc", "cbadec", "zzzzzz" })  <==>  (return == false)
(arg2.toString one of { "aadbbbaccc", "cbadec", "zzzzzz" })  ==>  (arg1.toString one of { "cde", "dbbca", "def" })
(arg2.toString one of { "aadbbcbcac", "abcdec", "acbdec" })  <==>  (return == true)
(arg2.toString one of { "aadbbcbcac", "abcdec", "acbdec" })  ==>  (arg1.toString one of { "cde", "dbbca" })
arg0.toString one of { "aabcc", "abc" }
arg1.toString one of { "cde", "dbbca", "def" }
===========================================================================
leetcode.oj.Solution2.isInterleave(java.lang.String, java.lang.String, java.lang.String):::EXIT;condition="return == true"
arg1.toString one of { "cde", "dbbca" }
arg2.toString one of { "aadbbcbcac", "abcdec", "acbdec" }
return == true
===========================================================================
leetcode.oj.Solution2.isInterleave(java.lang.String, java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
arg2.toString one of { "aadbbbaccc", "cbadec", "zzzzzz" }
return == false
===========================================================================
leetcode.oj.Solution2.isNumber(java.lang.String):::ENTER
===========================================================================
leetcode.oj.Solution2.isNumber(java.lang.String):::EXIT224
arg0.toString one of { "-1.2e-23e", "a" }
return == false
===========================================================================
leetcode.oj.Solution2.isNumber(java.lang.String):::EXIT224;condition="not(return == true)"
===========================================================================
leetcode.oj.Solution2.isNumber(java.lang.String):::EXIT227
(return == false)  ==>  (arg0.toString == " -.")
(return == false)  ==>  (orig(arg0) has only one value)
===========================================================================
leetcode.oj.Solution2.isNumber(java.lang.String):::EXIT227;condition="return == true"
===========================================================================
leetcode.oj.Solution2.isNumber(java.lang.String):::EXIT227;condition="not(return == true)"
arg0.toString == " -."
orig(arg0) has only one value
===========================================================================
leetcode.oj.Solution2.isNumber(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
(return == false)  ==>  (arg0.toString one of { " -.", "-1.2e-23e", "a" })
===========================================================================
leetcode.oj.Solution2.isNumber(java.lang.String):::EXIT;condition="return == true"
return == true
===========================================================================
leetcode.oj.Solution2.isNumber(java.lang.String):::EXIT;condition="not(return == true)"
arg0.toString one of { " -.", "-1.2e-23e", "a" }
return == false
===========================================================================
leetcode.oj.Solution2.isPalindrome(java.lang.String):::ENTER
===========================================================================
leetcode.oj.Solution2.isPalindrome(java.lang.String):::EXIT2840
arg0.toString == "race a car"
return == false
orig(arg0) has only one value
===========================================================================
leetcode.oj.Solution2.isPalindrome(java.lang.String):::EXIT2840;condition="not(return == true)"
===========================================================================
leetcode.oj.Solution2.isPalindrome(java.lang.String):::EXIT2843
arg0.toString one of { "", " ", "A man, a plan, a canal: Panama" }
return == true
===========================================================================
leetcode.oj.Solution2.isPalindrome(java.lang.String):::EXIT2843;condition="return == true"
===========================================================================
leetcode.oj.Solution2.isPalindrome(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
(arg0.toString == "race a car")  <==>  (return == false)
(arg0.toString == "race a car")  ==>  (orig(arg0) has only one value)
(arg0.toString one of { "", " ", "A man, a plan, a canal: Panama" })  <==>  (return == true)
===========================================================================
leetcode.oj.Solution2.isPalindrome(java.lang.String):::EXIT;condition="return == true"
arg0.toString one of { "", " ", "A man, a plan, a canal: Panama" }
return == true
===========================================================================
leetcode.oj.Solution2.isPalindrome(java.lang.String):::EXIT;condition="not(return == true)"
arg0.toString == "race a car"
return == false
orig(arg0) has only one value
===========================================================================
leetcode.oj.Solution2.isSameTree(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode):::ENTER
arg0.val == arg1.val
arg0.left.val == arg1.left.val
arg0.val one of { 1, 2 }
arg0.left.val == 2
arg0.left.left == null
arg0.left.right == null
arg0.right == null
arg1.val one of { 1, 2, 3 }
arg1.left.left == null
arg1.left.right == null
arg1.right.val == 3
arg1.right.left == null
arg1.right.right == null
===========================================================================
leetcode.oj.Solution2.isSameTree(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode):::EXIT1116
return == true
orig(arg0) == null
orig(arg1) == null
===========================================================================
leetcode.oj.Solution2.isSameTree(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode):::EXIT1116;condition="return == true"
===========================================================================
leetcode.oj.Solution2.isSameTree(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode):::EXIT1117
arg1.val == 3
arg1.left == null
arg1.right == null
return == false
orig(arg0) == null
orig(arg1) has only one value
===========================================================================
leetcode.oj.Solution2.isSameTree(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode):::EXIT1117;condition="not(return == true)"
===========================================================================
leetcode.oj.Solution2.isSameTree(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode):::EXIT1120
arg0.val == orig(arg1.val)
(arg0.left has only one value)  <==>  (arg1.left has only one value)
(arg0.left has only one value)  <==>  (arg1.right has only one value)
(arg0.left has only one value)  <==>  (return == false)
(arg0.left has only one value)  ==>  (arg0.val == 1)
(arg0.left has only one value)  ==>  (arg1.right.left == null)
(arg0.left has only one value)  ==>  (arg1.right.right == null)
(arg0.left has only one value)  ==>  (orig(arg0) has only one value)
(arg0.left has only one value)  ==>  (orig(arg1) has only one value)
===========================================================================
leetcode.oj.Solution2.isSameTree(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode):::EXIT1120;condition="return == true"
===========================================================================
leetcode.oj.Solution2.isSameTree(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode):::EXIT1120;condition="not(return == true)"
arg1.left has only one value
arg1.right has only one value
orig(arg0) has only one value
orig(arg1) has only one value
===========================================================================
leetcode.oj.Solution2.isSameTree(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode):::EXIT
arg0.val == arg1.val
arg0.val == orig(arg0.val)
arg0.left == orig(arg0.left)
arg0.left.val == arg1.left.val
arg0.left.val == orig(arg0.left.val)
arg0.left.val == orig(arg1.left.val)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.right == orig(arg0.right)
arg1.val == orig(arg1.val)
arg1.left == orig(arg1.left)
arg1.left.left == orig(arg1.left.left)
arg1.left.right == orig(arg1.left.right)
arg1.right == orig(arg1.right)
arg1.right.val == orig(arg1.right.val)
arg1.right.left == orig(arg1.right.left)
arg1.right.right == orig(arg1.right.right)
(arg0.left has only one value)  <==>  (return == false)
(arg0.left has only one value)  ==>  (arg0.val == 1)
(arg0.left has only one value)  ==>  (arg1.right.left == null)
(arg0.left has only one value)  ==>  (arg1.right.right == null)
(arg0.left has only one value)  ==>  (arg1.val one of { 1, 3 })
arg0.val one of { 1, 2 }
arg0.left.val == 2
arg0.left.left == null
arg0.left.right == null
arg0.right == null
arg1.val one of { 1, 2, 3 }
arg1.left.left == null
arg1.left.right == null
arg1.right.val == 3
arg1.right.left == null
arg1.right.right == null
===========================================================================
leetcode.oj.Solution2.isSameTree(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode):::EXIT;condition="return == true"
arg0.val == orig(arg1.val)
arg1.right == null
return == true
===========================================================================
leetcode.oj.Solution2.isSameTree(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode):::EXIT;condition="not(return == true)"
arg0.val == 1
arg0.left has only one value
arg1.val one of { 1, 3 }
return == false
===========================================================================
leetcode.oj.Solution2.isScramble(java.lang.String, java.lang.String):::ENTER
arg0 != null
arg1 != null
===========================================================================
leetcode.oj.Solution2.isScramble(java.lang.String, java.lang.String):::EXIT1511
return == true
===========================================================================
leetcode.oj.Solution2.isScramble(java.lang.String, java.lang.String):::EXIT1511;condition="return == true"
===========================================================================
leetcode.oj.Solution2.isScramble(java.lang.String, java.lang.String):::EXIT1518
return == true
===========================================================================
leetcode.oj.Solution2.isScramble(java.lang.String, java.lang.String):::EXIT1518;condition="return == true"
===========================================================================
leetcode.oj.Solution2.isScramble(java.lang.String, java.lang.String):::EXIT1525
return == true
===========================================================================
leetcode.oj.Solution2.isScramble(java.lang.String, java.lang.String):::EXIT1525;condition="return == true"
===========================================================================
leetcode.oj.Solution2.isScramble(java.lang.String, java.lang.String):::EXIT1527
arg0.toString one of { "abcd", "abcdefghijklmnopq", "pcighfdjnbwfkohtklrecxnooxyipj" }
arg1.toString one of { "cadb", "efghijklmnopqcadb", "npodkfchrfpxliocgtnykhxwjbojie" }
return == false
===========================================================================
leetcode.oj.Solution2.isScramble(java.lang.String, java.lang.String):::EXIT1527;condition="not(return == true)"
===========================================================================
leetcode.oj.Solution2.isScramble(java.lang.String, java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
(return == false)  ==>  (arg0.toString one of { "abcd", "abcdefghijklmnopq", "pcighfdjnbwfkohtklrecxnooxyipj" })
(return == false)  ==>  (arg1.toString one of { "cadb", "efghijklmnopqcadb", "npodkfchrfpxliocgtnykhxwjbojie" })
===========================================================================
leetcode.oj.Solution2.isScramble(java.lang.String, java.lang.String):::EXIT;condition="return == true"
return == true
===========================================================================
leetcode.oj.Solution2.isScramble(java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
arg0.toString one of { "abcd", "abcdefghijklmnopq", "pcighfdjnbwfkohtklrecxnooxyipj" }
arg1.toString one of { "cadb", "efghijklmnopqcadb", "npodkfchrfpxliocgtnykhxwjbojie" }
return == false
===========================================================================
leetcode.oj.Solution2.isSymmetric(leetcode.oj.Solution$TreeNode):::ENTER
arg0.left.val == arg0.right.val
arg0.val == 1
arg0.left.val == 2
arg0.left.left == null
===========================================================================
leetcode.oj.Solution2.isSymmetric(leetcode.oj.Solution$TreeNode):::EXIT1178
return == true
orig(arg0) == null
===========================================================================
leetcode.oj.Solution2.isSymmetric(leetcode.oj.Solution$TreeNode):::EXIT1178;condition="return == true"
===========================================================================
leetcode.oj.Solution2.isSymmetric(leetcode.oj.Solution$TreeNode):::EXIT1180
(arg0.left has only one value)  <==>  (arg0.right has only one value)
(arg0.left has only one value)  <==>  (arg0.right.left == null)
(arg0.left has only one value)  <==>  (arg0.right.right has only one value)
(arg0.left has only one value)  <==>  (return == false)
(arg0.left has only one value)  ==>  (orig(arg0) has only one value)
===========================================================================
leetcode.oj.Solution2.isSymmetric(leetcode.oj.Solution$TreeNode):::EXIT1180;condition="return == true"
===========================================================================
leetcode.oj.Solution2.isSymmetric(leetcode.oj.Solution$TreeNode):::EXIT1180;condition="not(return == true)"
===========================================================================
leetcode.oj.Solution2.isSymmetric(leetcode.oj.Solution$TreeNode):::EXIT
arg0.val == orig(arg0.val)
arg0.left == orig(arg0.left)
arg0.left.val == arg0.right.val
arg0.left.val == orig(arg0.left.val)
arg0.left.val == orig(arg0.right.val)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.right == orig(arg0.right)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
(arg0.left has only one value)  <==>  (arg0.right has only one value)
(arg0.left has only one value)  <==>  (arg0.right.left == null)
(arg0.left has only one value)  <==>  (arg0.right.right has only one value)
(arg0.left has only one value)  <==>  (return == false)
(arg0.left has only one value)  ==>  (orig(arg0) has only one value)
(orig(arg0) == null)  ==>  (return == true)
arg0.val == 1
arg0.left.val == 2
arg0.left.left == null
===========================================================================
leetcode.oj.Solution2.isSymmetric(leetcode.oj.Solution$TreeNode):::EXIT;condition="return == true"
arg0.left.right has only one value
arg0.right.left has only one value
arg0.right.right == null
return == true
===========================================================================
leetcode.oj.Solution2.isSymmetric(leetcode.oj.Solution$TreeNode):::EXIT;condition="not(return == true)"
arg0.left has only one value
arg0.left.right has only one value
arg0.right has only one value
arg0.right.left == null
arg0.right.right has only one value
return == false
orig(arg0) has only one value
===========================================================================
leetcode.oj.Solution2.isSymmetricIterative(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode):::ENTER
arg0.val == arg1.val
arg0.right.val == arg1.left.val
arg0.val == 2
arg0.left == null
arg0.right.val == 3
arg0.right.left == null
arg0.right.right == null
arg1.left.val == 3
arg1.left.left == null
arg1.left.right == null
arg1.right.val == 3
arg1.right.left == null
arg1.right.right == null
===========================================================================
leetcode.oj.Solution2.isSymmetricIterative(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode):::EXIT1191
return == true
orig(arg0) == null
orig(arg1) == null
===========================================================================
leetcode.oj.Solution2.isSymmetricIterative(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode):::EXIT1191;condition="return == true"
===========================================================================
leetcode.oj.Solution2.isSymmetricIterative(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode):::EXIT1206
arg0.right has only one value
arg1.left == null
arg1.right has only one value
return == false
orig(arg0) has only one value
orig(arg1) has only one value
===========================================================================
leetcode.oj.Solution2.isSymmetricIterative(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode):::EXIT1206;condition="not(return == true)"
===========================================================================
leetcode.oj.Solution2.isSymmetricIterative(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode):::EXIT1217
arg0.right.val == orig(arg1.left.val)
arg0.right has only one value
arg1.left has only one value
arg1.right == null
return == true
orig(arg0) has only one value
orig(arg1) has only one value
===========================================================================
leetcode.oj.Solution2.isSymmetricIterative(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode):::EXIT1217;condition="return == true"
===========================================================================
leetcode.oj.Solution2.isSymmetricIterative(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode):::EXIT
arg0.val == arg1.val
arg0.val == orig(arg0.val)
arg0.val == orig(arg1.val)
arg0.left == orig(arg0.left)
arg0.right == orig(arg0.right)
arg0.right.val == arg1.left.val
arg0.right.val == orig(arg0.right.val)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
arg1.left == orig(arg1.left)
arg1.left.val == orig(arg1.left.val)
arg1.left.left == orig(arg1.left.left)
arg1.left.right == orig(arg1.left.right)
arg1.right == orig(arg1.right)
arg1.right.val == orig(arg1.right.val)
arg1.right.left == orig(arg1.right.left)
arg1.right.right == orig(arg1.right.right)
(arg1.left == null)  <==>  (arg1.right has only one value)
(arg1.left == null)  <==>  (orig(arg0) has only one value)
(arg1.left == null)  <==>  (orig(arg1) has only one value)
(arg1.left == null)  <==>  (return == false)
(arg1.left == null)  ==>  (arg1.right.left == null)
(arg1.left == null)  ==>  (arg1.right.right == null)
(arg1.left has only one value)  <==>  (arg1.right == null)
(arg1.left has only one value)  <==>  (return == true)
(arg1.left has only one value)  ==>  (arg1.left.left == null)
(arg1.left has only one value)  ==>  (arg1.left.right == null)
arg0.val == 2
arg0.left == null
arg0.right.val == 3
arg0.right.left == null
arg0.right.right == null
arg1.left.val == 3
arg1.left.left == null
arg1.left.right == null
arg1.right.val == 3
arg1.right.left == null
arg1.right.right == null
===========================================================================
leetcode.oj.Solution2.isSymmetricIterative(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode):::EXIT;condition="return == true"
arg0.right.val == orig(arg1.left.val)
arg0.right has only one value
arg1.left has only one value
arg1.right == null
return == true
===========================================================================
leetcode.oj.Solution2.isSymmetricIterative(leetcode.oj.Solution$TreeNode, leetcode.oj.Solution$TreeNode):::EXIT;condition="not(return == true)"
arg0.right has only one value
arg1.left == null
arg1.right has only one value
return == false
orig(arg0) has only one value
orig(arg1) has only one value
===========================================================================
leetcode.oj.Solution2.isValidBST(leetcode.oj.Solution$TreeNode):::ENTER
arg0.val == 2
arg0.left.val one of { 1, 2 }
arg0.left.left == null
arg0.left.right == null
arg0.right.val == 3
arg0.right.left == null
arg0.right.right == null
===========================================================================
leetcode.oj.Solution2.isValidBST(leetcode.oj.Solution$TreeNode):::EXIT
arg0.val == orig(arg0.val)
arg0.left == orig(arg0.left)
arg0.left.val == orig(arg0.left.val)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.right == orig(arg0.right)
arg0.right.val == orig(arg0.right.val)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
(arg0.left.val == 1)  <==>  (return == true)
(arg0.left.val == 2)  <==>  (arg0.val == arg0.left.val)
(arg0.left.val == 2)  <==>  (return == false)
arg0.val == 2
arg0.left.val one of { 1, 2 }
arg0.left.left == null
arg0.left.right == null
arg0.right.val == 3
arg0.right.left == null
arg0.right.right == null
===========================================================================
leetcode.oj.Solution2.isValidBST(leetcode.oj.Solution$TreeNode):::EXIT;condition="return == true"
arg0.left has only one value
arg0.left.val == 1
arg0.right has only one value
return == true
orig(arg0) has only one value
===========================================================================
leetcode.oj.Solution2.isValidBST(leetcode.oj.Solution$TreeNode):::EXIT;condition="not(return == true)"
arg0.val == arg0.left.val
arg0.val == orig(arg0.left.val)
arg0.left has only one value
arg0.right has only one value
return == false
orig(arg0) has only one value
===========================================================================
leetcode.oj.Solution2.isValidBST(leetcode.oj.Solution$TreeNode, int, int):::ENTER
arg0.val one of { 1, 2, 3 }
arg0.left.val one of { 1, 2 }
arg0.left.left == null
arg0.left.right == null
arg0.right.val == 3
arg0.right.left == null
arg0.right.right == null
arg1 < arg2
===========================================================================
leetcode.oj.Solution2.isValidBST(leetcode.oj.Solution$TreeNode, int, int):::EXIT1104
return == true
orig(arg0) == null
===========================================================================
leetcode.oj.Solution2.isValidBST(leetcode.oj.Solution$TreeNode, int, int):::EXIT1104;condition="return == true"
===========================================================================
leetcode.oj.Solution2.isValidBST(leetcode.oj.Solution$TreeNode, int, int):::EXIT1105
arg0.val == orig(arg2)
arg0.val == 2
arg0.left == null
arg0.right == null
return == false
orig(arg0) has only one value
orig(arg1) == -2147483648
===========================================================================
leetcode.oj.Solution2.isValidBST(leetcode.oj.Solution$TreeNode, int, int):::EXIT1105;condition="not(return == true)"
===========================================================================
leetcode.oj.Solution2.isValidBST(leetcode.oj.Solution$TreeNode, int, int):::EXIT1106
(arg0.left has only one value)  <==>  (arg0.left.val == 2)
(arg0.left has only one value)  <==>  (arg0.right has only one value)
(arg0.left has only one value)  <==>  (arg0.val == arg0.left.val)
(arg0.left has only one value)  <==>  (return == false)
(arg0.left has only one value)  ==>  (arg0.val == 2)
(arg0.left has only one value)  ==>  (orig(arg0) has only one value)
(arg0.left has only one value)  ==>  (orig(arg1) == -2147483648)
(arg0.left has only one value)  ==>  (orig(arg2) == 2147483647)
orig(arg1) one of { -2147483648, 2 }
orig(arg2) one of { 2, 2147483647 }
===========================================================================
leetcode.oj.Solution2.isValidBST(leetcode.oj.Solution$TreeNode, int, int):::EXIT1106;condition="return == true"
===========================================================================
leetcode.oj.Solution2.isValidBST(leetcode.oj.Solution$TreeNode, int, int):::EXIT1106;condition="not(return == true)"
arg0.val == orig(arg0.left.val)
arg0.left has only one value
arg0.right has only one value
orig(arg0) has only one value
orig(arg2) == 2147483647
===========================================================================
leetcode.oj.Solution2.isValidBST(leetcode.oj.Solution$TreeNode, int, int):::EXIT
arg0.val == orig(arg0.val)
arg0.left == orig(arg0.left)
arg0.left.val == orig(arg0.left.val)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.right == orig(arg0.right)
arg0.right.val == orig(arg0.right.val)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
(arg0.left.val == 1)  <==>  (return == true)
(arg0.left.val == 1)  ==>  (arg0.val one of { 1, 2, 3 })
(arg0.left.val == 2)  <==>  (arg0.val == arg0.left.val)
(arg0.left.val == 2)  <==>  (return == false)
(arg0.left.val == 2)  ==>  (arg0.val == 2)
(arg0.left.val == 2)  ==>  (orig(arg1) == -2147483648)
(arg0.left.val == 2)  ==>  (orig(arg2) one of { 2, 2147483647 })
arg0.val one of { 1, 2, 3 }
arg0.left.val one of { 1, 2 }
arg0.left.left == null
arg0.left.right == null
arg0.right.val == 3
arg0.right.left == null
arg0.right.right == null
===========================================================================
leetcode.oj.Solution2.isValidBST(leetcode.oj.Solution$TreeNode, int, int):::EXIT;condition="return == true"
arg0.left.val == 1
return == true
===========================================================================
leetcode.oj.Solution2.isValidBST(leetcode.oj.Solution$TreeNode, int, int):::EXIT;condition="not(return == true)"
arg0.val == arg0.left.val
arg0.val == 2
arg0.left.val == 2
return == false
orig(arg1) == -2147483648
orig(arg2) one of { 2, 2147483647 }
===========================================================================
leetcode.oj.Solution2.largestRectangleArea(int[]):::ENTER
arg0[] elements >= 0
===========================================================================
leetcode.oj.Solution2.largestRectangleArea(int[]):::EXIT946
===========================================================================
leetcode.oj.Solution2.largestRectangleArea(int[]):::EXIT
arg0[] == orig(arg0[])
arg0[] elements >= 0
arg0[] elements <= return
return != size(arg0[])-1
===========================================================================
leetcode.oj.Solution2.largestRectangleArea(int[], int, int):::ENTER
arg0 != null
arg0[] elements >= 0
arg1 >= 0
arg2 >= 0
arg1 <= arg2
arg1 <= size(arg0[])-1
arg2 <= size(arg0[])-1
===========================================================================
leetcode.oj.Solution2.largestRectangleArea(int[], int, int):::EXIT950
return == arg0[orig(arg1)]
return == arg0[orig(arg2)]
return == orig(arg0[post(arg1)])
return == orig(arg0[post(arg2)])
return == orig(arg0[arg1])
return == orig(arg0[arg2])
orig(arg1) == orig(arg2)
===========================================================================
leetcode.oj.Solution2.largestRectangleArea(int[], int, int):::EXIT955
return >= arg0[orig(arg2)-1]
orig(arg1) < orig(arg2)
orig(arg1) < size(arg0[])-1
orig(size(arg0[])) != arg0[orig(arg2)]
===========================================================================
leetcode.oj.Solution2.largestRectangleArea(int[], int, int):::EXIT
arg0[] == orig(arg0[])
(orig(arg1) < orig(arg2))  ==>  (orig(arg1) < size(arg0[])-1)
(orig(arg1) < orig(arg2))  ==>  (orig(size(arg0[])) != arg0[orig(arg2)])
(orig(arg1) < orig(arg2))  ==>  (return >= arg0[arg2-1])
(orig(arg1) < orig(arg2))  ==>  (return >= arg0[orig(arg2)-1])
(orig(arg1) < orig(arg2))  ==>  (return >= orig(arg0[arg2-1]))
(orig(arg1) < orig(arg2))  ==>  (return >= orig(arg0[post(arg2)-1]))
(orig(arg1) == orig(arg2))  ==>  (return == arg0[orig(arg1)])
(orig(arg1) == orig(arg2))  ==>  (return == arg0[orig(arg2)])
arg0[] elements >= 0
return >= 0
return >= arg0[orig(arg1)]
return >= arg0[orig(arg2)]
orig(arg1) <= size(arg0[])-1
orig(arg2) <= size(arg0[])-1
===========================================================================
leetcode.oj.Solution2.levelOrder(leetcode.oj.Solution$TreeNode):::ENTER
arg0 has only one value
arg0.val == 3
arg0.left has only one value
arg0.left.val == 9
arg0.left.left == null
arg0.left.right == null
arg0.right has only one value
arg0.right.val == 20
arg0.right.left has only one value
arg0.right.right has only one value
===========================================================================
leetcode.oj.Solution2.levelOrder(leetcode.oj.Solution$TreeNode):::EXIT1459
===========================================================================
leetcode.oj.Solution2.levelOrder(leetcode.oj.Solution$TreeNode):::EXIT
arg0.val == orig(arg0.val)
arg0.left == orig(arg0.left)
arg0.left.val == orig(arg0.left.val)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.right == orig(arg0.right)
arg0.right.val == orig(arg0.right.val)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
arg0.val == 3
arg0.left has only one value
arg0.left.val == 9
arg0.left.left == null
arg0.left.right == null
arg0.right has only one value
arg0.right.val == 20
arg0.right.left has only one value
arg0.right.right has only one value
return has only one value
return[] contains no nulls and has only one value, of length 3
return[].getClass().getName() == [java.util.ArrayList, java.util.ArrayList, java.util.ArrayList]
return[].getClass().getName() elements == java.util.ArrayList.class
size(return[]) == 3
===========================================================================
leetcode.oj.Solution2.levelOrderBottom(leetcode.oj.Solution$TreeNode):::ENTER
arg0 has only one value
arg0.val == 1
arg0.left has only one value
arg0.left.val == 2
arg0.left.left has only one value
arg0.left.right == null
arg0.right has only one value
arg0.right.val == 4
arg0.right.left == null
arg0.right.right == null
===========================================================================
leetcode.oj.Solution2.levelOrderBottom(leetcode.oj.Solution$TreeNode):::EXIT1879
===========================================================================
leetcode.oj.Solution2.levelOrderBottom(leetcode.oj.Solution$TreeNode):::EXIT
arg0.val == orig(arg0.val)
arg0.left == orig(arg0.left)
arg0.left.val == orig(arg0.left.val)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.right == orig(arg0.right)
arg0.right.val == orig(arg0.right.val)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
arg0.val == 1
arg0.left has only one value
arg0.left.val == 2
arg0.left.left has only one value
arg0.left.right == null
arg0.right has only one value
arg0.right.val == 4
arg0.right.left == null
arg0.right.right == null
return has only one value
return[] contains no nulls and has only one value, of length 3
return[].getClass().getName() == [java.util.ArrayList, java.util.ArrayList, java.util.ArrayList]
return[].getClass().getName() elements == java.util.ArrayList.class
size(return[]) == 3
===========================================================================
leetcode.oj.Solution2.longestConsecutive(int[]):::ENTER
===========================================================================
leetcode.oj.Solution2.longestConsecutive(int[]):::EXIT2070
===========================================================================
leetcode.oj.Solution2.longestConsecutive(int[]):::EXIT
arg0[] == orig(arg0[])
===========================================================================
leetcode.oj.Solution2.maxDepth(leetcode.oj.Solution$TreeNode):::ENTER
arg0.left.val one of { 2, 3 }
arg0.left.right == null
arg0.right.val one of { 2, 4 }
arg0.right.left == null
arg0.right.right == null
===========================================================================
leetcode.oj.Solution2.maxDepth(leetcode.oj.Solution$TreeNode):::EXIT1804
return == 0
orig(arg0) == null
===========================================================================
leetcode.oj.Solution2.maxDepth(leetcode.oj.Solution$TreeNode):::EXIT1805
return one of { 1, 2, 3 }
===========================================================================
leetcode.oj.Solution2.maxDepth(leetcode.oj.Solution$TreeNode):::EXIT
arg0.val == orig(arg0.val)
arg0.left == orig(arg0.left)
arg0.left.val == orig(arg0.left.val)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.right == orig(arg0.right)
arg0.right.val == orig(arg0.right.val)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
(return == 0)  <==>  (orig(arg0) == null)
(return one of { 1, 2, 3 })  ==>  (arg0.left.right == null)
(return one of { 1, 2, 3 })  ==>  (arg0.left.val one of { 2, 3 })
(return one of { 1, 2, 3 })  ==>  (arg0.right.left == null)
(return one of { 1, 2, 3 })  ==>  (arg0.right.right == null)
(return one of { 1, 2, 3 })  ==>  (arg0.right.val one of { 2, 4 })
arg0.left.val one of { 2, 3 }
arg0.left.right == null
arg0.right.val one of { 2, 4 }
arg0.right.left == null
arg0.right.right == null
return >= 0
===========================================================================
leetcode.oj.Solution2.maxPathSum(leetcode.oj.Solution$TreeNode):::ENTER
arg0.val one of { -3, -2, 1 }
arg0.left.val one of { 1, 2 }
arg0.left.left == null
arg0.left.right == null
arg0.right.val == 3
arg0.right.left == null
arg0.right.right == null
===========================================================================
leetcode.oj.Solution2.maxPathSum(leetcode.oj.Solution$TreeNode):::EXIT
arg0.val == orig(arg0.val)
arg0.left == orig(arg0.left)
arg0.left.val == orig(arg0.left.val)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.right == orig(arg0.right)
arg0.right.val == orig(arg0.right.val)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
arg0.val one of { -3, -2, 1 }
arg0.left.val one of { 1, 2 }
arg0.left.left == null
arg0.left.right == null
arg0.right.val == 3
arg0.right.left == null
arg0.right.right == null
return one of { -3, 1, 6 }
===========================================================================
leetcode.oj.Solution2.maxPathSum(leetcode.oj.Solution$TreeNode, int[]):::ENTER
arg0.left.val one of { 1, 2 }
arg0.left.left == null
arg0.left.right == null
arg0.right.val == 3
arg0.right.left == null
arg0.right.right == null
arg1 != null
arg1[] elements one of { -2147483648, 1, 2 }
arg1[] one of { [-2147483648], [1], [2] }
size(arg1[]) == 1
===========================================================================
leetcode.oj.Solution2.maxPathSum(leetcode.oj.Solution$TreeNode, int[]):::EXIT2393
arg1[] == orig(arg1[])
arg1[] elements one of { -2147483648, 1, 2 }
arg1[] one of { [-2147483648], [1], [2] }
return == 0
orig(arg0) == null
===========================================================================
leetcode.oj.Solution2.maxPathSum(leetcode.oj.Solution$TreeNode, int[]):::EXIT2397
orig(arg1[]) elements one of { -2147483648, 2 }
orig(arg1[]) one of { [-2147483648], [2] }
===========================================================================
leetcode.oj.Solution2.maxPathSum(leetcode.oj.Solution$TreeNode, int[]):::EXIT
arg0.val == orig(arg0.val)
arg0.left == orig(arg0.left)
arg0.left.val == orig(arg0.left.val)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.right == orig(arg0.right)
arg0.right.val == orig(arg0.right.val)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
(return == 0)  <==>  (orig(arg0) == null)
(return == 0)  ==>  (arg1[] == orig(arg1[]))
(return == 0)  ==>  (arg1[] elements one of { -2147483648, 1, 2 })
(return == 0)  ==>  (arg1[] one of { [-2147483648], [1], [2] })
(return == 0)  ==>  (orig(arg1[]) elements one of { -2147483648, 1, 2 })
(return == 0)  ==>  (orig(arg1[]) one of { [-2147483648], [1], [2] })
arg0.left.val one of { 1, 2 }
arg0.left.left == null
arg0.left.right == null
arg0.right.val == 3
arg0.right.left == null
arg0.right.right == null
arg1[] >= orig(arg1[]) (elementwise)
===========================================================================
leetcode.oj.Solution2.maximalRectangle(char[][]):::ENTER
arg0 has only one value
arg0.getClass().getName() == char[][].class
arg0[] contains no nulls and has only one value, of length 5
size(arg0[]) == 5
===========================================================================
leetcode.oj.Solution2.maximalRectangle(char[][]):::EXIT1242
===========================================================================
leetcode.oj.Solution2.maximalRectangle(char[][]):::EXIT
arg0[] == orig(arg0[])
arg0[] contains no nulls and has only one value, of length 5
return == 6
===========================================================================
leetcode.oj.Solution2.merge(int[], int, int[], int):::ENTER
arg1 == arg3
arg1 == size(arg0[])-1
arg1 == size(arg2[])
arg0[] elements one of { 0, 1, 2 }
arg0[] one of { [1, 0], [2, 0] }
arg2[] elements one of { 1, 2 }
arg2[] one of { [1], [2] }
size(arg0[]) == 2
arg0[arg1] == 0
arg0[arg1-1] one of { 1, 2 }
arg2[] elements == arg2[arg1-1]
===========================================================================
leetcode.oj.Solution2.merge(int[], int, int[], int):::EXIT1571
===========================================================================
leetcode.oj.Solution2.merge(int[], int, int[], int):::EXIT
arg2[] == orig(arg2[])
orig(arg1) == size(arg0[])-1
arg0[] == [1, 2]
arg0[] elements one of { 1, 2 }
arg2[] elements one of { 1, 2 }
arg2[] one of { [1], [2] }
arg0[orig(arg1)] == 2
arg0[orig(arg1)-1] == 1
arg2[orig(arg1)-1] in arg0[]
orig(arg0[arg1-1]) in arg0[]
arg2[] elements == arg2[orig(arg1)-1]
===========================================================================
leetcode.oj.Solution2.mergeTwoLists(leetcode.oj.Solution$ListNode, leetcode.oj.Solution$ListNode):::ENTER
arg0.val one of { 1, 2 }
arg0.next.val == 3
arg0.next.next has only one value
arg1.val one of { 1, 2 }
arg1.next.val == 4
arg1.next.next has only one value
===========================================================================
leetcode.oj.Solution2.mergeTwoLists(leetcode.oj.Solution$ListNode, leetcode.oj.Solution$ListNode):::EXIT42
return == orig(arg1)
return has only one value
return.next == null
orig(arg0) == null
===========================================================================
leetcode.oj.Solution2.mergeTwoLists(leetcode.oj.Solution$ListNode, leetcode.oj.Solution$ListNode):::EXIT70
===========================================================================
leetcode.oj.Solution2.mergeTwoLists(leetcode.oj.Solution$ListNode, leetcode.oj.Solution$ListNode):::EXIT
return.val == 1
return.next.val == 2
===========================================================================
leetcode.oj.Solution2.minDepth(leetcode.oj.Solution$TreeNode):::ENTER
arg0.val == 1
arg0.left.val == 2
arg0.left.left has only one value
arg0.left.right == null
arg0.right.val one of { 2, 4 }
arg0.right.left == null
arg0.right.right == null
===========================================================================
leetcode.oj.Solution2.minDepth(leetcode.oj.Solution$TreeNode):::EXIT1817
===========================================================================
leetcode.oj.Solution2.minDepth(leetcode.oj.Solution$TreeNode):::EXIT
arg0.val == orig(arg0.val)
arg0.left == orig(arg0.left)
arg0.left.val == orig(arg0.left.val)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.right == orig(arg0.right)
arg0.right.val == orig(arg0.right.val)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
arg0.val == 1
arg0.left.val == 2
arg0.left.left has only one value
arg0.left.right == null
arg0.right.val one of { 2, 4 }
arg0.right.left == null
arg0.right.right == null
return == 2
===========================================================================
leetcode.oj.Solution2.minDepth(leetcode.oj.Solution$TreeNode, int):::ENTER
arg0.val >= 1
arg0.left.val one of { 2, 3 }
arg0.left.right == null
arg0.right.val one of { 2, 4 }
arg0.right.left == null
arg0.right.right == null
arg1 >= 1
===========================================================================
leetcode.oj.Solution2.minDepth(leetcode.oj.Solution$TreeNode, int):::EXIT1821
orig(arg0) == null
orig(arg1) one of { 2, 3, 4 }
return < orig(arg1)
===========================================================================
leetcode.oj.Solution2.minDepth(leetcode.oj.Solution$TreeNode, int):::EXIT1825
arg0.left == null
arg0.right.val == 2
return one of { 2, 3 }
orig(arg1) one of { 1, 2, 3 }
===========================================================================
leetcode.oj.Solution2.minDepth(leetcode.oj.Solution$TreeNode, int):::EXIT1826
arg0.val == 2
arg0.left has only one value
arg0.left.val == 3
arg0.left.left == null
arg0.right == null
return == 3
orig(arg0) has only one value
orig(arg1) == 2
===========================================================================
leetcode.oj.Solution2.minDepth(leetcode.oj.Solution$TreeNode, int):::EXIT1827
arg0.val == 1
arg0.left has only one value
arg0.left.val == 2
arg0.left.left has only one value
arg0.right has only one value
arg0.right.val == 4
return == 2
orig(arg0) has only one value
orig(arg1) == 1
===========================================================================
leetcode.oj.Solution2.minDepth(leetcode.oj.Solution$TreeNode, int):::EXIT
arg0.val == orig(arg0.val)
arg0.left == orig(arg0.left)
arg0.left.val == orig(arg0.left.val)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.right == orig(arg0.right)
arg0.right.val == orig(arg0.right.val)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
arg0.val >= 1
arg0.left.val one of { 2, 3 }
arg0.left.right == null
arg0.right.val one of { 2, 4 }
arg0.right.left == null
arg0.right.right == null
return one of { 1, 2, 3 }
===========================================================================
leetcode.oj.Solution2.minDistance(java.lang.String, java.lang.String):::ENTER
arg0.toString one of { "a", "bugaga" }
arg1.toString one of { "", "bgzgz" }
===========================================================================
leetcode.oj.Solution2.minDistance(java.lang.String, java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
arg0.toString one of { "a", "bugaga" }
arg1.toString one of { "", "bgzgz" }
return one of { 1, 3 }
===========================================================================
leetcode.oj.Solution2.minPathSum(int[][]):::ENTER
arg0.getClass().getName() == int[][].class
size(arg0[]) one of { 1, 3 }
===========================================================================
leetcode.oj.Solution2.minPathSum(int[][]):::EXIT
arg0[] == orig(arg0[])
return one of { 1, 18 }
===========================================================================
leetcode.oj.Solution2.minWindow(java.lang.String, java.lang.String):::ENTER
===========================================================================
leetcode.oj.Solution2.minWindow(java.lang.String, java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
===========================================================================
leetcode.oj.Solution2.minimumTotal(java.util.ArrayList):::ENTER
arg0[].getClass().getName() elements == java.util.ArrayList.class
size(arg0[]) one of { 2, 3, 4 }
===========================================================================
leetcode.oj.Solution2.minimumTotal(java.util.ArrayList):::EXIT
arg0[] == orig(arg0[])
arg0[].getClass().getName() elements == java.util.ArrayList.class
return one of { -1, 1, 11 }
===========================================================================
leetcode.oj.Solution2.minimumTotalBottomUp(java.util.ArrayList):::ENTER
arg0[].getClass().getName() elements == java.util.ArrayList.class
size(arg0[]) one of { 2, 3, 4 }
===========================================================================
leetcode.oj.Solution2.minimumTotalBottomUp(java.util.ArrayList):::EXIT
arg0[] == orig(arg0[])
arg0[].getClass().getName() elements == java.util.ArrayList.class
return one of { -1, 1, 11 }
===========================================================================
leetcode.oj.Solution2.numDecodings(java.lang.String):::ENTER
===========================================================================
leetcode.oj.Solution2.numDecodings(java.lang.String):::EXIT1626
===========================================================================
leetcode.oj.Solution2.numDecodings(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
return >= 0
===========================================================================
leetcode.oj.Solution2.numDecodings(java.lang.String, java.util.Map):::ENTER
arg0 != null
arg1 != null
arg1.getClass().getName() == java.util.HashMap.class
===========================================================================
leetcode.oj.Solution2.numDecodings(java.lang.String, java.util.Map):::EXIT1630
orig(arg1) has only one value
===========================================================================
leetcode.oj.Solution2.numDecodings(java.lang.String, java.util.Map):::EXIT1631
arg0.toString == ""
return == 1
orig(arg0) has only one value
orig(arg1) has only one value
===========================================================================
leetcode.oj.Solution2.numDecodings(java.lang.String, java.util.Map):::EXIT1632
return == 0
===========================================================================
leetcode.oj.Solution2.numDecodings(java.lang.String, java.util.Map):::EXIT1633
arg0.toString one of { "2", "3" }
return == 1
===========================================================================
leetcode.oj.Solution2.numDecodings(java.lang.String, java.util.Map):::EXIT1640
===========================================================================
leetcode.oj.Solution2.numDecodings(java.lang.String, java.util.Map):::EXIT
arg0.toString == orig(arg0.toString)
return >= 0
===========================================================================
leetcode.oj.Solution2.numTrees(int):::ENTER
arg0 >= 0
===========================================================================
leetcode.oj.Solution2.numTrees(int):::EXIT1037
return == 1
orig(arg0) one of { 0, 1 }
===========================================================================
leetcode.oj.Solution2.numTrees(int):::EXIT1042
return one of { 2, 5 }
orig(arg0) one of { 2, 3 }
===========================================================================
leetcode.oj.Solution2.numTrees(int):::EXIT
(return == 1)  <==>  (orig(arg0) one of { 0, 1 })
(return one of { 2, 5 })  <==>  (orig(arg0) one of { 2, 3 })
return one of { 1, 2, 5 }
===========================================================================
leetcode.oj.Solution2.partition(leetcode.oj.Solution$ListNode, int):::ENTER
arg0.val == 1
arg0.next.val == 4
arg1 one of { 0, 3, 6 }
===========================================================================
leetcode.oj.Solution2.partition(leetcode.oj.Solution$ListNode, int):::EXIT1284
arg0.next == orig(arg0.next)
arg0.next.val == orig(arg0.next.val)
arg0.next.next == orig(arg0.next.next)
arg0.next has only one value
arg0.next.val == 4
arg0.next.next has only one value
return has only one value
orig(arg1) == 6
===========================================================================
leetcode.oj.Solution2.partition(leetcode.oj.Solution$ListNode, int):::EXIT1285
arg0.next == orig(arg0.next)
arg0.next.val == orig(arg0.next.val)
arg0.next.next == orig(arg0.next.next)
arg0.next has only one value
arg0.next.val == 4
arg0.next.next has only one value
return has only one value
orig(arg1) == 0
===========================================================================
leetcode.oj.Solution2.partition(leetcode.oj.Solution$ListNode, int):::EXIT1287
arg0.next has only one value
arg0.next.val == 2
arg0.next.next has only one value
return has only one value
orig(arg0.next) has only one value
orig(arg0.next.next) has only one value
orig(arg1) == 3
===========================================================================
leetcode.oj.Solution2.partition(leetcode.oj.Solution$ListNode, int):::EXIT
arg0.val == return.val
arg0.val == orig(arg0.val)
arg0.next == return.next
arg0.next.val == return.next.val
arg0.next.next == return.next.next
return == orig(arg0)
arg0.val == 1
arg0.next.val one of { 2, 4 }
===========================================================================
leetcode.oj.Solution2.pathSum(leetcode.oj.Solution$TreeNode, int):::ENTER
arg0 has only one value
arg0.val == 5
arg0.left has only one value
arg0.left.val == 4
arg0.left.left has only one value
arg0.left.right == null
arg0.right has only one value
arg0.right.val == 8
arg0.right.left has only one value
arg0.right.right has only one value
arg1 == 22
===========================================================================
leetcode.oj.Solution2.pathSum(leetcode.oj.Solution$TreeNode, int):::EXIT2198
===========================================================================
leetcode.oj.Solution2.pathSum(leetcode.oj.Solution$TreeNode, int):::EXIT
arg0.val == orig(arg0.val)
arg0.left == orig(arg0.left)
arg0.left.val == orig(arg0.left.val)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.right == orig(arg0.right)
arg0.right.val == orig(arg0.right.val)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
arg0.val == 5
arg0.left has only one value
arg0.left.val == 4
arg0.left.left has only one value
arg0.left.right == null
arg0.right has only one value
arg0.right.val == 8
arg0.right.left has only one value
arg0.right.right has only one value
return has only one value
return[] contains no nulls and has only one value, of length 2
return[].getClass().getName() == [java.util.ArrayList, java.util.ArrayList]
return[].getClass().getName() elements == java.util.ArrayList.class
size(return[]) == 2
===========================================================================
leetcode.oj.Solution2.pathSum(leetcode.oj.Solution$TreeNode, int, java.util.ArrayList, java.util.ArrayList):::ENTER
arg0.right.val is a power of 2
arg2 has only one value
arg2 != null
arg2[] elements != null
arg2[].getClass().getName() elements == java.lang.Integer.class
arg3 has only one value
arg3 != null
arg3[] elements != null
arg3[].getClass().getName() elements == java.util.ArrayList.class
size(arg3[]) one of { 0, 1, 2 }
===========================================================================
leetcode.oj.Solution2.pathSum(leetcode.oj.Solution$TreeNode, int, java.util.ArrayList, java.util.ArrayList):::EXIT2205
arg2[].getClass().getName() one of { [java.lang.Integer, java.lang.Integer, java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] }
orig(arg0) == null
orig(size(arg2[])) one of { 3, 4 }
===========================================================================
leetcode.oj.Solution2.pathSum(leetcode.oj.Solution$TreeNode, int, java.util.ArrayList, java.util.ArrayList):::EXIT2217
===========================================================================
leetcode.oj.Solution2.pathSum(leetcode.oj.Solution$TreeNode, int, java.util.ArrayList, java.util.ArrayList):::EXIT
arg0.val == orig(arg0.val)
arg0.left == orig(arg0.left)
arg0.left.val == orig(arg0.left.val)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.right == orig(arg0.right)
arg0.right.val == orig(arg0.right.val)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
arg2[] == orig(arg2[])
(orig(arg0) == null)  ==>  (arg2[].getClass().getName() one of { [java.lang.Integer, java.lang.Integer, java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] })
(orig(arg0) == null)  ==>  (orig(size(arg2[])) one of { 3, 4 })
arg0.right.val is a power of 2
arg2[] elements != null
arg2[].getClass().getName() elements == java.lang.Integer.class
arg3[] elements != null
arg3[].getClass().getName() elements == java.util.ArrayList.class
size(arg3[])-1 >= orig(size(arg3[]))-1
===========================================================================
leetcode.oj.Solution2.plusOne(int[]):::ENTER
arg0 has only one value
arg0[] == [9, 9]
arg0[] elements == 9
size(arg0[]) == 2
===========================================================================
leetcode.oj.Solution2.plusOne(int[]):::EXIT254
===========================================================================
leetcode.oj.Solution2.plusOne(int[]):::EXIT
arg0[] == [0, 0]
arg0[] elements == 0
return has only one value
return[] == [1, 0, 0]
return[] elements one of { 0, 1 }
size(return[]) == 3
===========================================================================
leetcode.oj.Solution2.recoverTree(leetcode.oj.Solution$TreeNode):::ENTER
arg0.left.right == null
arg0.right.val one of { 1, 3 }
arg0.right.left == null
arg0.right.right == null
===========================================================================
leetcode.oj.Solution2.recoverTree(leetcode.oj.Solution$TreeNode):::EXIT2544
===========================================================================
leetcode.oj.Solution2.recoverTree(leetcode.oj.Solution$TreeNode):::EXIT
arg0.left == orig(arg0.left)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.right == orig(arg0.right)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
arg0.val one of { 1, 2, 68 }
arg0.left.val one of { 0, 1, 41 }
arg0.left.right == null
arg0.right.val == 3
arg0.right.left == null
arg0.right.right == null
===========================================================================
leetcode.oj.Solution2.removeDuplicates(int[]):::ENTER
arg0[] elements one of { 1, 2, 3 }
===========================================================================
leetcode.oj.Solution2.removeDuplicates(int[]):::EXIT
arg0[] elements one of { 1, 2, 3 }
orig(arg0[post(return)-1]) in arg0[]
arg0[return-1] in orig(arg0[])
===========================================================================
leetcode.oj.Solution2.reorderList(leetcode.oj.Solution$ListNode):::ENTER
arg0.val == 1
arg0.next.val == 2
===========================================================================
leetcode.oj.Solution2.reorderList(leetcode.oj.Solution$ListNode):::EXIT1349
===========================================================================
leetcode.oj.Solution2.reorderList(leetcode.oj.Solution$ListNode):::EXIT
arg0.val == orig(arg0.val)
arg0.val == 1
arg0.next.val one of { 2, 9 }
===========================================================================
leetcode.oj.Solution2.reorderListNoStack(leetcode.oj.Solution$ListNode):::ENTER
arg0.val == 1
arg0.next.val == 2
===========================================================================
leetcode.oj.Solution2.reorderListNoStack(leetcode.oj.Solution$ListNode):::EXIT
arg0.val == orig(arg0.val)
arg0.val == 1
arg0.next.val one of { 2, 9 }
===========================================================================
leetcode.oj.Solution2.restoreIp(java.lang.String, java.util.ArrayList, java.util.ArrayList, int):::ENTER
arg0 != null
arg1 != null
arg1[] elements has only one value
arg1[] elements != null
arg1[].getClass().getName() elements == java.lang.String.class
arg1[].getClass().getName() one of { [], [java.lang.String] }
arg2 != null
arg2[] elements != null
arg2[].getClass().getName() elements == java.lang.String.class
size(arg1[]) one of { 0, 1 }
===========================================================================
leetcode.oj.Solution2.restoreIp(java.lang.String, java.util.ArrayList, java.util.ArrayList, int):::EXIT1723
arg2[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
orig(arg3) == 4
orig(size(arg2[])) == 4
size(arg1[])-1 <= orig(size(arg1[]))
===========================================================================
leetcode.oj.Solution2.restoreIp(java.lang.String, java.util.ArrayList, java.util.ArrayList, int):::EXIT1755
===========================================================================
leetcode.oj.Solution2.restoreIp(java.lang.String, java.util.ArrayList, java.util.ArrayList, int):::EXIT
arg0.toString == orig(arg0.toString)
arg2[] == orig(arg2[])
arg1[] elements != null
arg1[].getClass().getName() elements == java.lang.String.class
arg2[] elements != null
arg2[].getClass().getName() elements == java.lang.String.class
size(arg1[])-1 >= orig(size(arg1[]))-1
===========================================================================
leetcode.oj.Solution2.restoreIpAddresses(java.lang.String):::ENTER
arg0.toString one of { "0000", "25525511135" }
===========================================================================
leetcode.oj.Solution2.restoreIpAddresses(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString one of { "0000", "25525511135" }
return[].getClass().getName() elements == java.lang.String.class
return[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String] }
size(return[]) one of { 1, 2 }
===========================================================================
leetcode.oj.Solution2.reverseBetween(leetcode.oj.Solution$ListNode, int, int):::ENTER
arg0.val == 1
arg0.next.val == 2
arg1 one of { 1, 2, 3 }
arg2 one of { 4, 5 }
===========================================================================
leetcode.oj.Solution2.reverseBetween(leetcode.oj.Solution$ListNode, int, int):::EXIT2166
arg0.next == null
return has only one value
return.val == 5
return.next has only one value
return.next.val == 4
return.next.next has only one value
orig(arg0) has only one value
orig(arg0.next) has only one value
orig(arg1) == 1
orig(arg2) == 5
===========================================================================
leetcode.oj.Solution2.reverseBetween(leetcode.oj.Solution$ListNode, int, int):::EXIT2169
arg0.val == return.val
arg0.next == return.next
return == orig(arg0)
orig(arg1) one of { 2, 3 }
===========================================================================
leetcode.oj.Solution2.reverseBetween(leetcode.oj.Solution$ListNode, int, int):::EXIT
arg0.val == orig(arg0.val)
arg0.next.val == return.next.val
arg0.next.next == return.next.next
arg0.val == 1
arg0.next.val one of { 2, 4, 5 }
return.val one of { 1, 5 }
return.next.val one of { 2, 4, 5 }
===========================================================================
leetcode.oj.Solution2.search(int[], int):::ENTER
arg0[] one of { [1], [1, 2, 1, 1, 1], [1, 2, 3, 4, 1] }
arg0[] elements >= 1
size(arg0[]) one of { 1, 5 }
===========================================================================
leetcode.oj.Solution2.search(int[], int):::EXIT842
arg0[] one of { [1, 2, 1, 1, 1], [1, 2, 3, 4, 1] }
return == true
orig(arg1) one of { 1, 2, 4 }
orig(size(arg0[])) == 5
orig(arg1) in arg0[]
===========================================================================
leetcode.oj.Solution2.search(int[], int):::EXIT842;condition="return == true"
===========================================================================
leetcode.oj.Solution2.search(int[], int):::EXIT857
arg0[] elements one of { 1, 2 }
arg0[] one of { [1], [1, 2, 1, 1, 1] }
return == false
orig(arg1) one of { 0, 3 }
===========================================================================
leetcode.oj.Solution2.search(int[], int):::EXIT857;condition="not(return == true)"
===========================================================================
leetcode.oj.Solution2.search(int[], int):::EXIT
arg0[] == orig(arg0[])
(return == false)  <==>  (orig(arg1) one of { 0, 3 })
(return == false)  ==>  (arg0[] elements one of { 1, 2 })
(return == false)  ==>  (arg0[] one of { [1], [1, 2, 1, 1, 1] })
(return == false)  ==>  (orig(size(arg0[])) one of { 1, 5 })
(return == true)  <==>  (orig(arg1) one of { 1, 2, 4 })
(return == true)  ==>  (arg0[] one of { [1, 2, 1, 1, 1], [1, 2, 3, 4, 1] })
(return == true)  ==>  (orig(arg1) in arg0[])
(return == true)  ==>  (orig(size(arg0[])) == 5)
arg0[] one of { [1], [1, 2, 1, 1, 1], [1, 2, 3, 4, 1] }
arg0[] elements >= 1
===========================================================================
leetcode.oj.Solution2.search(int[], int):::EXIT;condition="return == true"
arg0[] one of { [1, 2, 1, 1, 1], [1, 2, 3, 4, 1] }
return == true
orig(arg1) one of { 1, 2, 4 }
orig(size(arg0[])) == 5
orig(arg1) in arg0[]
===========================================================================
leetcode.oj.Solution2.search(int[], int):::EXIT;condition="not(return == true)"
arg0[] elements one of { 1, 2 }
arg0[] one of { [1], [1, 2, 1, 1, 1] }
return == false
orig(arg1) one of { 0, 3 }
===========================================================================
leetcode.oj.Solution2.searchMatrix(int[][], int):::ENTER
arg0.getClass().getName() == int[][].class
size(arg0[]) one of { 1, 3 }
===========================================================================
leetcode.oj.Solution2.searchMatrix(int[][], int):::EXIT
arg0[] == orig(arg0[])
(return == true)  ==>  (orig(arg1) one of { 1, 3, 11 })
===========================================================================
leetcode.oj.Solution2.searchMatrix(int[][], int):::EXIT;condition="return == true"
return == true
orig(arg1) one of { 1, 3, 11 }
===========================================================================
leetcode.oj.Solution2.searchMatrix(int[][], int):::EXIT;condition="not(return == true)"
return == false
===========================================================================
leetcode.oj.Solution2.setZeroes(int[][]):::ENTER
arg0.getClass().getName() == int[][].class
size(arg0[]) one of { 2, 3, 5 }
===========================================================================
leetcode.oj.Solution2.setZeroes(int[][]):::EXIT
arg0[] == orig(arg0[])
===========================================================================
leetcode.oj.Solution2.simplifyPath(java.lang.String):::ENTER
arg0.toString one of { "/a/./b/../../c/", "/home/" }
===========================================================================
leetcode.oj.Solution2.simplifyPath(java.lang.String):::EXIT387
===========================================================================
leetcode.oj.Solution2.simplifyPath(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString one of { "/a/./b/../../c/", "/home/" }
return.toString one of { "/c", "/home" }
===========================================================================
leetcode.oj.Solution2.singleNumber(int[]):::ENTER
arg0[] elements one of { 1, 2, 3 }
arg0[] one of { [1, 3, 2, 3, 1], [2], [2, 1, 1] }
size(arg0[]) one of { 1, 3, 5 }
===========================================================================
leetcode.oj.Solution2.singleNumber(int[]):::EXIT
arg0[] == orig(arg0[])
arg0[] elements one of { 1, 2, 3 }
arg0[] one of { [1, 3, 2, 3, 1], [2], [2, 1, 1] }
return == 2
return in arg0[]
===========================================================================
leetcode.oj.Solution2.singleNumberII(int[]):::ENTER
arg0[] one of { [1, 2, 1, 1, 4, 4, 4], [1, 3, 3, 1, 2, 3, 1], [2] }
arg0[] elements >= 1
size(arg0[]) one of { 1, 7 }
===========================================================================
leetcode.oj.Solution2.singleNumberII(int[]):::EXIT
arg0[] == orig(arg0[])
arg0[] one of { [1, 2, 1, 1, 4, 4, 4], [1, 3, 3, 1, 2, 3, 1], [2] }
arg0[] elements >= 1
return == 2
return in arg0[]
===========================================================================
leetcode.oj.Solution2.solve(char[][]):::ENTER
arg0.getClass().getName() == char[][].class
size(arg0[]) one of { 4, 15 }
===========================================================================
leetcode.oj.Solution2.solve(char[][]):::EXIT2898
===========================================================================
leetcode.oj.Solution2.solve(char[][]):::EXIT
arg0[] == orig(arg0[])
===========================================================================
leetcode.oj.Solution2.sortColors(int[]):::ENTER
arg0[] elements one of { 0, 1, 2 }
arg0[] one of { [1, 0, 2, 0, 1, 1, 0, 2, 0], [2, 1] }
size(arg0[]) one of { 2, 9 }
===========================================================================
leetcode.oj.Solution2.sortColors(int[]):::EXIT
arg0[] elements one of { 0, 1, 2 }
arg0[] one of { [0, 0, 0, 0, 1, 1, 1, 2, 2], [1, 2] }
===========================================================================
leetcode.oj.Solution2.sortedArrayToBST(int[]):::ENTER
arg0 has only one value
arg0[] == [1, 2, 3, 4, 5]
size(arg0[]) == 5
===========================================================================
leetcode.oj.Solution2.sortedArrayToBST(int[]):::EXIT
arg0[] == orig(arg0[])
arg0[] == [1, 2, 3, 4, 5]
return has only one value
return.val == 3
return.left has only one value
return.left.val == 1
return.left.left == null
return.left.right has only one value
return.right has only one value
return.right.val == 4
return.right.left == null
return.right.right has only one value
return.val in arg0[]
return.left.val in arg0[]
return.right.val in arg0[]
===========================================================================
leetcode.oj.Solution2.sortedArrayToBST(int[], int, int):::ENTER
arg0 has only one value
arg0[] == [1, 2, 3, 4, 5]
arg0[] elements >= 1
arg0[] sorted by <
arg1 >= 0
size(arg0[]) == 5
arg1 <= size(arg0[])
arg2 <= size(arg0[])-1
===========================================================================
leetcode.oj.Solution2.sortedArrayToBST(int[], int, int):::EXIT1949
return == null
orig(arg1) - orig(arg2) - 1 == 0
===========================================================================
leetcode.oj.Solution2.sortedArrayToBST(int[], int, int):::EXIT1954
return.left.val == arg0[orig(arg1)]
orig(arg2) one of { 1, 4 }
arg0[orig(arg2)] one of { 2, 5 }
arg0[orig(arg2)-1] one of { 1, 4 }
return.val % arg0[orig(arg1)] == 0
===========================================================================
leetcode.oj.Solution2.sortedArrayToBST(int[], int, int):::EXIT
arg0[] == orig(arg0[])
(return == null)  ==>  (orig(arg1) - orig(arg2) - 1 == 0)
arg0[] == [1, 2, 3, 4, 5]
arg0[] elements >= 1
arg0[] sorted by <
return.left.val == 1
return.left.left == null
return.left.right has only one value
return.right.val one of { 2, 4, 5 }
return.right.left == null
return.val in arg0[]
return.left.val in arg0[]
return.right.val in arg0[]
orig(arg2) <= size(arg0[])-1
===========================================================================
leetcode.oj.Solution2.sortedListToBST(leetcode.oj.Solution$ListNode):::ENTER
arg0.val == 1
arg0.next.val == 2
===========================================================================
leetcode.oj.Solution2.sortedListToBST(leetcode.oj.Solution$ListNode):::EXIT2117
===========================================================================
leetcode.oj.Solution2.sortedListToBST(leetcode.oj.Solution$ListNode):::EXIT
arg0.val == return.left.val
arg0.val == orig(arg0.val)
arg0.next == orig(arg0.next)
arg0.next.val == orig(arg0.next.val)
arg0.next.next == orig(arg0.next.next)
arg0.val == 1
arg0.next.val == 2
return.val one of { 1, 2, 3 }
return.left.val == 1
return.left.left == null
return.right.val one of { 3, 5 }
return.right.right == null
===========================================================================
leetcode.oj.Solution2.sortedListToBST(leetcode.oj.Solution$ListNode[], int, int):::ENTER
arg0 != null
arg0.getClass().getName() == leetcode.oj.Solution$ListNode[].class
arg0[].val elements >= 1
arg1 >= 0
arg2 >= -1
size(arg0[]) == 1
===========================================================================
leetcode.oj.Solution2.sortedListToBST(leetcode.oj.Solution$ListNode[], int, int):::EXIT2121
arg0[] == orig(arg0[])
arg0[].val == orig(arg0[].val)
arg0[].next == orig(arg0[].next)
arg0[].next.val == orig(arg0[].next.val)
arg0[].next.next == orig(arg0[].next.next)
return == null
orig(arg1) >= orig(arg2)
===========================================================================
leetcode.oj.Solution2.sortedListToBST(leetcode.oj.Solution$ListNode[], int, int):::EXIT2129
arg0[].val elements one of { 2, 3, 5 }
arg0[].val one of { [2], [3], [5] }
arg0[].next.val elements one of { 3, 4 }
arg0[].next.val one of { [3], [4] }
orig(arg0[].next.val) elements one of { 2, 3, 5 }
orig(arg0[].next.val) one of { [2], [3], [5] }
orig(arg1) <= orig(arg2)
===========================================================================
leetcode.oj.Solution2.sortedListToBST(leetcode.oj.Solution$ListNode[], int, int):::EXIT
(return == null)  ==>  (arg0[] == orig(arg0[]))
(return == null)  ==>  (arg0[].next == orig(arg0[].next))
(return == null)  ==>  (arg0[].next.next == orig(arg0[].next.next))
(return == null)  ==>  (arg0[].next.val == orig(arg0[].next.val))
(return == null)  ==>  (arg0[].val == orig(arg0[].val))
(return == null)  ==>  (arg0[].val elements >= 1)
(return == null)  ==>  (orig(arg1) >= orig(arg2))
(return == null)  ==>  (orig(arg2) >= -1)
arg0[].val elements >= 1
return.val >= 1
return.left.val one of { 1, 4 }
return.left.left == null
return.right.val one of { 2, 3, 5 }
return.right.right == null
arg0[].val >= orig(arg0[].val) (elementwise)
arg0[].next.val >= orig(arg0[].next.val) (elementwise)
===========================================================================
leetcode.oj.Solution2.subsets(int[]):::ENTER
arg0[] one of { [0], [1, 2, 3] }
size(arg0[]) one of { 1, 3 }
===========================================================================
leetcode.oj.Solution2.subsets(int[]):::EXIT
arg0[] == orig(arg0[])
arg0[] one of { [0], [1, 2, 3] }
return[].getClass().getName() elements == java.util.ArrayList.class
return[].getClass().getName() one of { [java.util.ArrayList, java.util.ArrayList], [java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList] }
size(return[]) one of { 2, 8 }
===========================================================================
leetcode.oj.Solution2.subsetsBits(int[]):::ENTER
arg0[] one of { [0], [1, 2, 3] }
size(arg0[]) one of { 1, 3 }
===========================================================================
leetcode.oj.Solution2.subsetsBits(int[]):::EXIT
arg0[] == orig(arg0[])
arg0[] one of { [0], [1, 2, 3] }
return[].getClass().getName() elements == java.util.ArrayList.class
return[].getClass().getName() one of { [java.util.ArrayList, java.util.ArrayList], [java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList] }
size(return[]) one of { 2, 8 }
===========================================================================
leetcode.oj.Solution2.subsetsWithDup(int[]):::ENTER
arg0[] elements one of { 1, 2 }
arg0[] one of { [1, 1], [1, 2, 2] }
size(arg0[]) one of { 2, 3 }
===========================================================================
leetcode.oj.Solution2.subsetsWithDup(int[]):::EXIT1701
===========================================================================
leetcode.oj.Solution2.subsetsWithDup(int[]):::EXIT
arg0[] == orig(arg0[])
arg0[] elements one of { 1, 2 }
arg0[] one of { [1, 1], [1, 2, 2] }
return[].getClass().getName() elements == java.util.ArrayList.class
return[].getClass().getName() one of { [java.util.ArrayList, java.util.ArrayList, java.util.ArrayList], [java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList] }
size(return[]) one of { 3, 6 }
===========================================================================
leetcode.oj.Solution2.sumNumbers(leetcode.oj.Solution$TreeNode):::ENTER
arg0 has only one value
arg0.val == 1
arg0.left has only one value
arg0.left.val == 2
arg0.left.left == null
arg0.left.right == null
arg0.right has only one value
arg0.right.val == 3
arg0.right.left == null
arg0.right.right == null
===========================================================================
leetcode.oj.Solution2.sumNumbers(leetcode.oj.Solution$TreeNode):::EXIT2424
===========================================================================
leetcode.oj.Solution2.sumNumbers(leetcode.oj.Solution$TreeNode):::EXIT
arg0.val == orig(arg0.val)
arg0.left == orig(arg0.left)
arg0.left.val == orig(arg0.left.val)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.right == orig(arg0.right)
arg0.right.val == orig(arg0.right.val)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
arg0.val == 1
arg0.left has only one value
arg0.left.val == 2
arg0.left.left == null
arg0.left.right == null
arg0.right has only one value
arg0.right.val == 3
arg0.right.left == null
arg0.right.right == null
return == 25
===========================================================================
leetcode.oj.Solution2.sumNumbersInternal(leetcode.oj.Solution$TreeNode, int, int[]):::ENTER
arg0.val one of { 1, 2, 3 }
arg0.left.val == 2
arg0.left.left == null
arg0.left.right == null
arg0.right.val == 3
arg0.right.left == null
arg0.right.right == null
arg1 one of { 0, 1 }
arg2 has only one value
arg2[] elements one of { 0, 12 }
arg2[] one of { [0], [12] }
size(arg2[]) == 1
===========================================================================
leetcode.oj.Solution2.sumNumbersInternal(leetcode.oj.Solution$TreeNode, int, int[]):::EXIT2430
arg0.val one of { 2, 3 }
arg0.left == null
arg0.right == null
orig(arg1) == 1
===========================================================================
leetcode.oj.Solution2.sumNumbersInternal(leetcode.oj.Solution$TreeNode, int, int[]):::EXIT2436
arg0.val == 1
arg0.left has only one value
arg0.right has only one value
arg2[] == [25]
arg2[] elements == 25
orig(arg0) has only one value
orig(arg1) == 0
orig(arg2[]) == [0]
orig(arg2[]) elements == 0
orig(arg1) in orig(arg2[])
orig(arg2[]) elements == orig(arg1)
===========================================================================
leetcode.oj.Solution2.sumNumbersInternal(leetcode.oj.Solution$TreeNode, int, int[]):::EXIT
arg0.val == orig(arg0.val)
arg0.left == orig(arg0.left)
arg0.left.val == orig(arg0.left.val)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.right == orig(arg0.right)
arg0.right.val == orig(arg0.right.val)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
(arg0.val == 1)  <==>  (arg0.left has only one value)
(arg0.val == 1)  <==>  (arg0.right has only one value)
(arg0.val == 1)  <==>  (arg0.val == arg1)
(arg0.val == 1)  <==>  (orig(arg1) == 0)
(arg0.val == 1)  ==>  (arg0.left.left == null)
(arg0.val == 1)  ==>  (arg0.left.right == null)
(arg0.val == 1)  ==>  (arg0.right.left == null)
(arg0.val == 1)  ==>  (arg0.right.right == null)
(arg0.val == 1)  ==>  (arg2[] == [25])
(arg0.val == 1)  ==>  (arg2[] elements == 25)
(arg0.val == 1)  ==>  (orig(arg0) has only one value)
(arg0.val == 1)  ==>  (orig(arg1) in orig(arg2[]))
(arg0.val == 1)  ==>  (orig(arg2[]) == [0])
(arg0.val == 1)  ==>  (orig(arg2[]) elements == 0)
(arg0.val == 1)  ==>  (orig(arg2[]) elements == orig(arg1))
(arg0.val one of { 2, 3 })  <==>  (arg0.left == null)
(arg0.val one of { 2, 3 })  <==>  (arg0.right == null)
(arg0.val one of { 2, 3 })  <==>  (arg1 == orig(arg1))
(arg0.val one of { 2, 3 })  <==>  (orig(arg1) == 1)
(arg0.val one of { 2, 3 })  ==>  (arg2[] elements one of { 12, 25 })
(arg0.val one of { 2, 3 })  ==>  (arg2[] one of { [12], [25] })
(arg0.val one of { 2, 3 })  ==>  (orig(arg2[]) elements one of { 0, 12 })
(arg0.val one of { 2, 3 })  ==>  (orig(arg2[]) one of { [0], [12] })
arg0.val one of { 1, 2, 3 }
arg0.left.val == 2
arg0.left.left == null
arg0.left.right == null
arg0.right.val == 3
arg0.right.left == null
arg0.right.right == null
arg2[] elements one of { 12, 25 }
arg2[] one of { [12], [25] }
===========================================================================
leetcode.oj.Solution2.swap(int[], int, int):::ENTER
arg0[] elements one of { 0, 1, 2 }
size(arg0[]) one of { 2, 9 }
arg0[arg1] one of { 1, 2 }
arg0[arg2-1] one of { 1, 2 }
arg1 <= arg2
arg1 < size(arg0[])-1
arg2 <= size(arg0[])-1
arg0[arg1] >= arg0[arg2]
arg0[arg1] >= arg0[arg2-1]
arg0[arg2] != arg0[arg2-1]
===========================================================================
leetcode.oj.Solution2.swap(int[], int, int):::EXIT
arg0[orig(arg1)] == orig(arg0[post(arg2)])
arg0[orig(arg1)] == orig(arg0[arg2])
arg0[orig(arg2)] == orig(arg0[post(arg1)])
arg0[orig(arg2)] == orig(arg0[arg1])
arg0[] elements one of { 0, 1, 2 }
arg0[orig(arg2)] one of { 1, 2 }
arg0[] <= orig(arg0[]) (lexically)
orig(arg0[arg2-1]) in arg0[]
arg0[orig(arg2)-1] in orig(arg0[])
orig(arg1) < size(arg0[])-1
orig(arg2) <= size(arg0[])-1
arg0[orig(arg1)] <= arg0[orig(arg2)]
arg0[orig(arg1)] != orig(arg0[arg2-1])
arg0[orig(arg2)] >= arg0[orig(arg2)-1]
arg0[orig(arg2)] >= orig(arg0[arg2-1])
arg0[orig(arg2)-1] <= orig(arg0[arg2-1])
===========================================================================
leetcode.oj.Solution2.wordBreak(java.lang.String, java.util.Set):::ENTER
arg1.getClass().getName() == java.util.HashSet.class
===========================================================================
leetcode.oj.Solution2.wordBreak(java.lang.String, java.util.Set):::EXIT2282
(arg0.toString one of { "a", "catsanddog", "leetcode" })  <==>  (return == true)
(arg0.toString one of { "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab", "buka" })  <==>  (return == false)
===========================================================================
leetcode.oj.Solution2.wordBreak(java.lang.String, java.util.Set):::EXIT2282;condition="return == true"
===========================================================================
leetcode.oj.Solution2.wordBreak(java.lang.String, java.util.Set):::EXIT2282;condition="not(return == true)"
===========================================================================
leetcode.oj.Solution2.wordBreak(java.lang.String, java.util.Set):::EXIT
arg0.toString == orig(arg0.toString)
(arg0.toString one of { "a", "catsanddog", "leetcode" })  <==>  (return == true)
(arg0.toString one of { "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab", "buka" })  <==>  (return == false)
===========================================================================
leetcode.oj.Solution2.wordBreak(java.lang.String, java.util.Set):::EXIT;condition="return == true"
arg0.toString one of { "a", "catsanddog", "leetcode" }
return == true
===========================================================================
leetcode.oj.Solution2.wordBreak(java.lang.String, java.util.Set):::EXIT;condition="not(return == true)"
arg0.toString one of { "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab", "buka" }
return == false
===========================================================================
leetcode.oj.Solution2.wordBreakII(java.lang.String, java.util.Set):::ENTER
arg0.toString one of { "a", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab", "catsanddog" }
arg1.getClass().getName() == java.util.HashSet.class
===========================================================================
leetcode.oj.Solution2.wordBreakII(java.lang.String, java.util.Set):::EXIT2299
arg0.toString == "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab"
return has only one value
return[] == []
return[].getClass().getName() == []
orig(arg0) has only one value
orig(arg1) has only one value
===========================================================================
leetcode.oj.Solution2.wordBreakII(java.lang.String, java.util.Set):::EXIT2320
arg0.toString one of { "a", "catsanddog" }
return[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String] }
size(return[]) one of { 1, 2 }
===========================================================================
leetcode.oj.Solution2.wordBreakII(java.lang.String, java.util.Set):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString one of { "a", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab", "catsanddog" }
return[].getClass().getName() elements == java.lang.String.class
size(return[]) one of { 0, 1, 2 }
===========================================================================
leetcode.oj.Solution2.zigzagLevelOrder(leetcode.oj.Solution$TreeNode):::ENTER
arg0 has only one value
arg0.val == 1
arg0.left has only one value
arg0.left.val == 2
arg0.left.left has only one value
arg0.left.right has only one value
arg0.right has only one value
arg0.right.val == 4
arg0.right.left == null
arg0.right.right == null
===========================================================================
leetcode.oj.Solution2.zigzagLevelOrder(leetcode.oj.Solution$TreeNode):::EXIT1937
===========================================================================
leetcode.oj.Solution2.zigzagLevelOrder(leetcode.oj.Solution$TreeNode):::EXIT
arg0.val == orig(arg0.val)
arg0.left == orig(arg0.left)
arg0.left.val == orig(arg0.left.val)
arg0.left.left == orig(arg0.left.left)
arg0.left.right == orig(arg0.left.right)
arg0.right == orig(arg0.right)
arg0.right.val == orig(arg0.right.val)
arg0.right.left == orig(arg0.right.left)
arg0.right.right == orig(arg0.right.right)
arg0.val == 1
arg0.left has only one value
arg0.left.val == 2
arg0.left.left has only one value
arg0.left.right has only one value
arg0.right has only one value
arg0.right.val == 4
arg0.right.left == null
arg0.right.right == null
return has only one value
return[] contains no nulls and has only one value, of length 3
return[].getClass().getName() == [java.util.ArrayList, java.util.ArrayList, java.util.ArrayList]
return[].getClass().getName() elements == java.util.ArrayList.class
size(return[]) == 3
===========================================================================
leetcode.oj.Solution2Test:::OBJECT
this has only one value
this.solution has only one value
this.solution != null
===========================================================================
leetcode.oj.Solution2Test.Solution2Test():::EXIT
===========================================================================
leetcode.oj.Solution2Test.main(java.lang.String[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.lang.String[].class
arg0[] == []
arg0[].toString == []
===========================================================================
leetcode.oj.Solution2Test.main(java.lang.String[]):::EXIT
arg0[] == orig(arg0[])
arg0[] == []
arg0[].toString == []
===========================================================================
leetcode.oj.Solution2Test.testAddBinary():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testAddBinary():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testBuildTree():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testBuildTree():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testBuildTreePost():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testBuildTreePost():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testClimbStairs():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testClimbStairs():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testCloneGraph():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testCloneGraph():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testCombine():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testCombine():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testConnect():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testConnect():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testConnectII():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testConnectII():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testCopyRandomList():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testCopyRandomList():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testDeleteDuplicates():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testDeleteDuplicates():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testDeleteDuplicatesII():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testDeleteDuplicatesII():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testDetectCycle():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testDetectCycle():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testExist():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testExist():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testFlatten():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testFlatten():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testFullJustify():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testFullJustify():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testGenerate():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testGenerate():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testGenerateTrees():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testGenerateTrees():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testGetRow():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testGetRow():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testGrayCode():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testGrayCode():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testHasCycle():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testHasCycle():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testHasPathSum():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testHasPathSum():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testInorderTraversal():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testInorderTraversal():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testIsBalanced():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testIsBalanced():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testIsInterleave():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testIsInterleave():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testIsNumber():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testIsNumber():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testIsPalindrome():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testIsPalindrome():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testIsSameTree():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testIsSameTree():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testIsScramble():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testIsScramble():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testIsSymmetric():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testIsSymmetric():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testIsValidBST():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testIsValidBST():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testLargestRectangleArea():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testLargestRectangleArea():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testLevelOrder():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testLevelOrder():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testLevelOrderBottom():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testLevelOrderBottom():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testLongestConsecutive():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testLongestConsecutive():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testMaxDepth():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testMaxDepth():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testMaxPathSum():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testMaxPathSum():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testMaximalRectangle():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testMaximalRectangle():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testMerge():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testMerge():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testMergeTwoLists():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testMergeTwoLists():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testMinDepth():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testMinDepth():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testMinDistance():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testMinDistance():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testMinPathSum():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testMinPathSum():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testMinWindow():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testMinWindow():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testMinimumTotal():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testMinimumTotal():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testNumDecoings():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testNumDecoings():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testNumTrees():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testNumTrees():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testPartition():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testPartition():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testPathSum():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testPathSum():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testPlusOne():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testPlusOne():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testRecoverTree():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testRecoverTree():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testRemoveDuplicates():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testRemoveDuplicates():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testReorderList():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testReorderList():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testRestoreIp():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testRestoreIp():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testReverseBetween():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testReverseBetween():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testSearch():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testSearch():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testSearchMatrix():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testSearchMatrix():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testSetZeros():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testSetZeros():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testSimplifyPath():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testSimplifyPath():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testSingleNumber():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testSingleNumber():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testSingleNumberII():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testSingleNumberII():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testSolve():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testSolve():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testSortColors():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testSortColors():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testSortedArrayToBST():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testSortedArrayToBST():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testSortedListToBST():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testSortedListToBST():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testSubsets():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testSubsets():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testSubsetsWithDup():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testSubsetsWithDup():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testSumNumbers():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testSumNumbers():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testWordBreak():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testWordBreak():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testWordBreakII():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testWordBreakII():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.Solution2Test.testZigzagLevelOrder():::ENTER
===========================================================================
leetcode.oj.Solution2Test.testZigzagLevelOrder():::EXIT
this.solution == orig(this.solution)
===========================================================================
leetcode.oj.TestUtils.arrayListOf():::EXIT
return[] == []
return[].getClass().getName() == []
===========================================================================
leetcode.oj.TestUtils.arrayListOf(java.lang.Object, java.lang.Object[]):::ENTER
arg0 != null
arg1 != null
arg1[] elements != null
arg0.getClass().getName() != arg1.getClass().getName()
===========================================================================
leetcode.oj.TestUtils.arrayListOf(java.lang.Object, java.lang.Object[]):::EXIT
arg1[] == orig(arg1[])
arg1[] elements != null
return != null
return[] elements != null
size(return[]) >= 1
===========================================================================
leetcode.oj.TestUtils.arrayListOf(java.util.ArrayList):::ENTER
arg0[].getClass().getName() elements == java.lang.Integer.class
size(arg0[]) one of { 0, 1, 4 }
===========================================================================
leetcode.oj.TestUtils.arrayListOf(java.util.ArrayList):::EXIT
arg0[] == orig(arg0[])
arg0[].getClass().getName() elements == java.lang.Integer.class
return[].getClass().getName() == [java.util.ArrayList]
return[].getClass().getName() elements == java.util.ArrayList.class
size(return[]) == 1
===========================================================================
leetcode.oj.TestUtils.arrayListOf(java.util.ArrayList, java.util.ArrayList):::ENTER
arg0[].getClass().getName() elements == java.lang.Integer.class
arg1[].getClass().getName() elements == java.lang.Integer.class
size(arg0[]) one of { 0, 1, 4 }
size(arg1[]) one of { 1, 2, 4 }
===========================================================================
leetcode.oj.TestUtils.arrayListOf(java.util.ArrayList, java.util.ArrayList):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg0[].getClass().getName() elements == java.lang.Integer.class
arg1[].getClass().getName() elements == java.lang.Integer.class
return[].getClass().getName() == [java.util.ArrayList, java.util.ArrayList]
return[].getClass().getName() elements == java.util.ArrayList.class
size(return[]) == 2
===========================================================================
leetcode.oj.TestUtils.arrayListOf(java.util.ArrayList, java.util.ArrayList, java.util.ArrayList):::ENTER
arg0[].getClass().getName() elements == java.lang.Integer.class
arg0[].getClass().getName() one of { [], [java.lang.Integer] }
arg1[].getClass().getName() elements == java.lang.Integer.class
arg1[].getClass().getName() one of { [java.lang.Integer], [java.lang.Integer, java.lang.Integer] }
arg2[].getClass().getName() elements == java.lang.Integer.class
size(arg0[]) one of { 0, 1 }
size(arg1[]) one of { 1, 2 }
size(arg2[]) one of { 1, 2, 3 }
===========================================================================
leetcode.oj.TestUtils.arrayListOf(java.util.ArrayList, java.util.ArrayList, java.util.ArrayList):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg2[] == orig(arg2[])
arg0[].getClass().getName() elements == java.lang.Integer.class
arg0[].getClass().getName() one of { [], [java.lang.Integer] }
arg1[].getClass().getName() elements == java.lang.Integer.class
arg1[].getClass().getName() one of { [java.lang.Integer], [java.lang.Integer, java.lang.Integer] }
arg2[].getClass().getName() elements == java.lang.Integer.class
return[].getClass().getName() == [java.util.ArrayList, java.util.ArrayList, java.util.ArrayList]
return[].getClass().getName() elements == java.util.ArrayList.class
size(return[]) == 3
===========================================================================
leetcode.oj.TestUtils.arrayListOf(java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList):::ENTER
arg0[].getClass().getName() elements == java.lang.Integer.class
arg0[].getClass().getName() one of { [], [java.lang.Integer] }
arg1[].getClass().getName() elements == java.lang.Integer.class
arg1[].getClass().getName() one of { [java.lang.Integer], [java.lang.Integer, java.lang.Integer] }
arg2[].getClass().getName() elements == java.lang.Integer.class
arg2[].getClass().getName() one of { [java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer] }
arg3[].getClass().getName() elements == java.lang.Integer.class
arg3[].getClass().getName() one of { [java.lang.Integer, java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] }
size(arg0[]) one of { 0, 1 }
size(arg1[]) one of { 1, 2 }
size(arg2[]) one of { 1, 3 }
size(arg3[]) one of { 2, 4 }
===========================================================================
leetcode.oj.TestUtils.arrayListOf(java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg2[] == orig(arg2[])
arg3[] == orig(arg3[])
arg0[].getClass().getName() elements == java.lang.Integer.class
arg0[].getClass().getName() one of { [], [java.lang.Integer] }
arg1[].getClass().getName() elements == java.lang.Integer.class
arg1[].getClass().getName() one of { [java.lang.Integer], [java.lang.Integer, java.lang.Integer] }
arg2[].getClass().getName() elements == java.lang.Integer.class
arg2[].getClass().getName() one of { [java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer] }
arg3[].getClass().getName() elements == java.lang.Integer.class
arg3[].getClass().getName() one of { [java.lang.Integer, java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] }
return[].getClass().getName() == [java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList]
return[].getClass().getName() elements == java.util.ArrayList.class
size(return[]) == 4
===========================================================================
leetcode.oj.TestUtils.arrayListOf(java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList):::ENTER
arg0[] elements has only one value
arg0[].getClass().getName() elements == java.lang.Integer.class
arg0[].getClass().getName() one of { [], [java.lang.Integer] }
arg1[] elements has only one value
arg1[].getClass().getName() elements == java.lang.Integer.class
arg1[].getClass().getName() one of { [java.lang.Integer], [java.lang.Integer, java.lang.Integer] }
arg2[].getClass().getName() elements == java.lang.Integer.class
arg2[].getClass().getName() one of { [java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer] }
arg3[].getClass().getName() elements == java.lang.Integer.class
arg3[].getClass().getName() one of { [java.lang.Integer, java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] }
arg4[].getClass().getName() elements == java.lang.Integer.class
arg4[].getClass().getName() one of { [java.lang.Integer, java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] }
size(arg0[]) one of { 0, 1 }
size(arg1[]) one of { 1, 2 }
size(arg2[]) one of { 1, 3 }
size(arg3[]) one of { 2, 4 }
size(arg4[]) one of { 2, 5 }
===========================================================================
leetcode.oj.TestUtils.arrayListOf(java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg2[] == orig(arg2[])
arg3[] == orig(arg3[])
arg4[] == orig(arg4[])
arg0[] elements has only one value
arg0[].getClass().getName() elements == java.lang.Integer.class
arg0[].getClass().getName() one of { [], [java.lang.Integer] }
arg1[] elements has only one value
arg1[].getClass().getName() elements == java.lang.Integer.class
arg1[].getClass().getName() one of { [java.lang.Integer], [java.lang.Integer, java.lang.Integer] }
arg2[].getClass().getName() elements == java.lang.Integer.class
arg2[].getClass().getName() one of { [java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer] }
arg3[].getClass().getName() elements == java.lang.Integer.class
arg3[].getClass().getName() one of { [java.lang.Integer, java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] }
arg4[].getClass().getName() elements == java.lang.Integer.class
arg4[].getClass().getName() one of { [java.lang.Integer, java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] }
return[].getClass().getName() == [java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList]
return[].getClass().getName() elements == java.util.ArrayList.class
size(return[]) == 5
===========================================================================
leetcode.oj.TestUtils.arrayListOf(java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList):::ENTER
arg0 has only one value
arg0[] == []
arg0[].getClass().getName() == []
arg1 has only one value
arg1[] contains no nulls and has only one value, of length 1
arg1[] elements has only one value
arg1[].getClass().getName() == [java.lang.Integer]
arg1[].getClass().getName() elements == java.lang.Integer.class
arg2 has only one value
arg2[] contains no nulls and has only one value, of length 1
arg2[] elements has only one value
arg2[].getClass().getName() == [java.lang.Integer]
arg2[].getClass().getName() elements == java.lang.Integer.class
arg3 has only one value
arg3[] contains no nulls and has only one value, of length 2
arg3[].getClass().getName() == [java.lang.Integer, java.lang.Integer]
arg3[].getClass().getName() elements == java.lang.Integer.class
arg4 has only one value
arg4[] contains no nulls and has only one value, of length 2
arg4[] elements has only one value
arg4[].getClass().getName() == [java.lang.Integer, java.lang.Integer]
arg4[].getClass().getName() elements == java.lang.Integer.class
arg5 has only one value
arg5[] contains no nulls and has only one value, of length 3
arg5[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
arg5[].getClass().getName() elements == java.lang.Integer.class
size(arg1[]) == 1
size(arg2[]) == 1
size(arg3[]) == 2
size(arg4[]) == 2
size(arg5[]) == 3
===========================================================================
leetcode.oj.TestUtils.arrayListOf(java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg2[] == orig(arg2[])
arg3[] == orig(arg3[])
arg4[] == orig(arg4[])
arg5[] == orig(arg5[])
arg0[] == []
arg0[].getClass().getName() == []
arg1[] contains no nulls and has only one value, of length 1
arg1[] elements has only one value
arg1[].getClass().getName() == [java.lang.Integer]
arg1[].getClass().getName() elements == java.lang.Integer.class
arg2[] contains no nulls and has only one value, of length 1
arg2[] elements has only one value
arg2[].getClass().getName() == [java.lang.Integer]
arg2[].getClass().getName() elements == java.lang.Integer.class
arg3[] contains no nulls and has only one value, of length 2
arg3[].getClass().getName() == [java.lang.Integer, java.lang.Integer]
arg3[].getClass().getName() elements == java.lang.Integer.class
arg4[] contains no nulls and has only one value, of length 2
arg4[] elements has only one value
arg4[].getClass().getName() == [java.lang.Integer, java.lang.Integer]
arg4[].getClass().getName() elements == java.lang.Integer.class
arg5[] contains no nulls and has only one value, of length 3
arg5[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer]
arg5[].getClass().getName() elements == java.lang.Integer.class
return has only one value
return[] contains no nulls and has only one value, of length 6
return[].getClass().getName() == [java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList]
return[].getClass().getName() elements == java.util.ArrayList.class
size(return[]) == 6
===========================================================================
leetcode.oj.TestUtils.assertArrayEquals(char[][], char[][]):::ENTER
arg0.getClass().getName() == arg1.getClass().getName()
arg0.getClass().getName() == char[][].class
size(arg0[]) one of { 4, 15 }
size(arg1[]) one of { 4, 15 }
===========================================================================
leetcode.oj.TestUtils.assertArrayEquals(char[][], char[][]):::EXIT42
===========================================================================
leetcode.oj.TestUtils.assertArrayEquals(char[][], char[][]):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
===========================================================================
leetcode.oj.TestUtils.assertArrayEquals(int[][], int[][]):::ENTER
arg0.getClass().getName() == arg1.getClass().getName()
arg0.getClass().getName() == int[][].class
size(arg0[]) one of { 2, 3, 5 }
size(arg1[]) one of { 2, 3, 5 }
===========================================================================
leetcode.oj.TestUtils.assertArrayEquals(int[][], int[][]):::EXIT49
===========================================================================
leetcode.oj.TestUtils.assertArrayEquals(int[][], int[][]):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
===========================================================================
leetcode.oj.TestUtils.assertEquals(int[], int[]):::ENTER
arg0[] elements one of { 0, 1, 2 }
arg0[] one of { [0, 0, 0, 0, 1, 1, 1, 2, 2], [1, 0, 0], [1, 2] }
arg1[] elements one of { 0, 1, 2 }
arg1[] one of { [0, 0, 0, 0, 1, 1, 1, 2, 2], [1, 0, 0], [1, 2] }
size(arg0[]) one of { 2, 3, 9 }
size(arg1[]) one of { 2, 3, 9 }
===========================================================================
leetcode.oj.TestUtils.assertEquals(int[], int[]):::EXIT20
===========================================================================
leetcode.oj.TestUtils.assertEquals(int[], int[]):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg0[] elements one of { 0, 1, 2 }
arg0[] one of { [0, 0, 0, 0, 1, 1, 1, 2, 2], [1, 0, 0], [1, 2] }
arg1[] elements one of { 0, 1, 2 }
arg1[] one of { [0, 0, 0, 0, 1, 1, 1, 2, 2], [1, 0, 0], [1, 2] }
===========================================================================
leetcode.oj.TestUtils.assertEquals(int[], int[], int):::ENTER
arg2 == size(arg0[])
arg0[arg2-1] == arg1[arg2-1]
arg0[] elements >= 0
arg1[] elements >= 0
arg0[] <= arg1[] (lexically)
arg0[] elements <= arg2
arg0[] elements <= size(arg1[])
arg1[] elements <= arg2
arg1[] elements <= size(arg1[])
arg2 <= size(arg1[])
arg2 >= arg0[arg2-1]
size(arg0[])-1 <= size(arg1[])-1
size(arg1[]) >= arg0[arg2-1]
size(arg1[])-1 != arg0[arg2-1]
===========================================================================
leetcode.oj.TestUtils.assertEquals(int[], int[], int):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg0[orig(arg2)-1] == arg1[orig(arg2)-1]
arg0[orig(arg2)-1] == orig(arg1[post(arg2)-1])
arg0[orig(arg2)-1] == orig(arg1[arg2-1])
arg0[] elements >= 0
arg1[] elements >= 0
arg0[] <= arg1[] (lexically)
arg0[] elements <= orig(arg2)
arg0[] elements <= orig(size(arg1[]))
arg1[] elements <= orig(arg2)
arg1[] elements <= orig(size(arg1[]))
orig(arg2) >= arg0[orig(arg2)-1]
size(arg0[])-1 <= size(arg1[])-1
size(arg1[])-1 != arg0[orig(arg2)-1]
orig(size(arg1[])) >= arg0[orig(arg2)-1]
===========================================================================
leetcode.oj.TestUtils.assertEquals(java.lang.Object, java.lang.Object):::ENTER
===========================================================================
leetcode.oj.TestUtils.assertEquals(java.lang.Object, java.lang.Object):::EXIT12
orig(arg0) == orig(arg1)
orig(arg0) == null
===========================================================================
leetcode.oj.TestUtils.assertEquals(java.lang.Object, java.lang.Object):::EXIT15
orig(arg0) != null
orig(arg1) != null
===========================================================================
leetcode.oj.TestUtils.assertEquals(java.lang.Object, java.lang.Object):::EXIT
(orig(arg0) != null)  <==>  (orig(arg1) != null)
(orig(arg0) == null)  <==>  (orig(arg1) == null)
(orig(arg0) == null)  ==>  (orig(arg0) == orig(arg1))
===========================================================================
leetcode.oj.TestUtils.checkNulls(java.lang.Object, java.lang.Object):::ENTER
===========================================================================
leetcode.oj.TestUtils.checkNulls(java.lang.Object, java.lang.Object):::EXIT52
orig(arg0) == orig(arg1)
return == true
orig(arg0) == null
===========================================================================
leetcode.oj.TestUtils.checkNulls(java.lang.Object, java.lang.Object):::EXIT52;condition="return == true"
===========================================================================
leetcode.oj.TestUtils.checkNulls(java.lang.Object, java.lang.Object):::EXIT55
return == false
orig(arg0) != null
orig(arg1) != null
===========================================================================
leetcode.oj.TestUtils.checkNulls(java.lang.Object, java.lang.Object):::EXIT55;condition="not(return == true)"
===========================================================================
leetcode.oj.TestUtils.checkNulls(java.lang.Object, java.lang.Object):::EXIT
(return == false)  <==>  (orig(arg0) != null)
(return == false)  <==>  (orig(arg1) != null)
(return == true)  <==>  (orig(arg0) == null)
(return == true)  <==>  (orig(arg1) == null)
(return == true)  ==>  (orig(arg0) == orig(arg1))
===========================================================================
leetcode.oj.TestUtils.checkNulls(java.lang.Object, java.lang.Object):::EXIT;condition="return == true"
orig(arg0) == orig(arg1)
return == true
orig(arg0) == null
===========================================================================
leetcode.oj.TestUtils.checkNulls(java.lang.Object, java.lang.Object):::EXIT;condition="not(return == true)"
return == false
orig(arg0) != null
orig(arg1) != null
Exiting Daikon.
