Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 8 times.  Unmatched entries are ignored!
Unterminated calls:
  book.ProductService.submitOrderCancel(java.lang.String, constants.BookSide, java.lang.String) : 1 invocation
  book.ProductBook.cancelOrder(constants.BookSide, java.lang.String) : 1 invocation
  book.ProductBookSide.submitOrderCancel(java.lang.String) : 1 invocation
  book.ProductBook.checkTooLateToCancel(java.lang.String) : 1 invocation
  book.ProductService.createProduct(java.lang.String) : 1 invocation
  exceptions.ExceptionHandler.checkString(java.lang.String, java.lang.String) : 1 invocation
  book.ProductService.submitOrder(tradable.Order) : 1 invocation
  book.ProductService.submitQuote(tradable.Quote) : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
book.ProductBook:::OBJECT
this == this.buyBook.theBook
this.product == this.buyBook.theBook.product
this.buyBook == this.buyBook.theBook.buyBook
this.buyBook.side == constants.BookSide.BUY
constants.BookSide.SELL == this.sellBook.side
this.buyBook.trader.getClass().getName() == this.sellBook.trader.getClass().getName()
this.buyBook.theBook == this.sellBook.theBook
this.buyBook.theBook.product == this.sellBook.theBook.product
this.buyBook.theBook.buyBook == this.sellBook.theBook.buyBook
this.buyBook.theBook.sellBook == this.sellBook
this.buyBook.theBook.sellBook == this.sellBook.theBook.sellBook
this.buyBook.theBook.lastCurrentMarket == this.sellBook.theBook.lastCurrentMarket
this.buyBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.buyBook.theBook.userQuotes == this.sellBook.theBook.userQuotes
this.buyBook.theBook.userQuotes == this.userQuotes
this.buyBook.theBook.oldEntries == this.sellBook.theBook.oldEntries
this.buyBook.theBook.oldEntries == this.oldEntries
this has only one value
this.product.toString == "GOOG"
this.buyBook.bookEntries has only one value
this.buyBook.bookEntries != null
constants.BookSide.BUY has only one value
constants.BookSide.BUY != null
constants.BookSide.SELL has only one value
constants.BookSide.SELL != null
this.buyBook.side.bookside has only one value
this.buyBook.side.bookside != null
this.buyBook.side.bookside.toString == "BUY"
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES != null
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[] elements != null
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside elements != null
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
this.buyBook.trader has only one value
this.buyBook.trader != null
this.buyBook.trader.getClass().getName() == book.TradeProcessorPriceTimeImpl.class
this.buyBook.theBook has only one value
this.buyBook.theBook != null
this.buyBook.theBook.product has only one value
this.buyBook.theBook.product != null
this.buyBook.theBook.product.toString == "GOOG"
this.buyBook.theBook.buyBook has only one value
this.buyBook.theBook.buyBook != null
this.buyBook.theBook.sellBook has only one value
this.buyBook.theBook.sellBook != null
this.buyBook.theBook.lastCurrentMarket != null
this.buyBook.theBook.userQuotes has only one value
this.buyBook.theBook.userQuotes != null
this.buyBook.theBook.oldEntries has only one value
this.buyBook.theBook.oldEntries != null
this.sellBook.bookEntries has only one value
this.sellBook.bookEntries != null
this.sellBook.side.bookside has only one value
this.sellBook.side.bookside != null
this.sellBook.side.bookside.toString == "SELL"
this.sellBook.trader has only one value
this.sellBook.trader != null
this.sellBook.theBook.product.toString == "GOOG"
this.userQuotes has only one value
this.userQuotes != null
this.oldEntries has only one value
this.oldEntries != null
size(constants.BookSide.$VALUES[]) == 2
constants.BookSide.$VALUES.getClass().getName() != this.buyBook.trader.getClass().getName()
===========================================================================
book.ProductBook.ProductBook(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "GOOG"
===========================================================================
book.ProductBook.ProductBook(java.lang.String):::EXIT
this.product == this.sellBook.theBook.product
this.product == orig(arg0)
this.buyBook == this.sellBook.theBook.buyBook
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
arg0.toString == orig(arg0.toString)
this.product has only one value
this.buyBook has only one value
this.buyBook.theBook.lastCurrentMarket.toString == ""
this.sellBook has only one value
this.sellBook.theBook.lastCurrentMarket.toString == ""
this.lastCurrentMarket has only one value
this.lastCurrentMarket.toString == ""
arg0.toString == "GOOG"
===========================================================================
book.ProductBook.addOldEntry(tradable.Tradable):::ENTER
this.product == this.sellBook.theBook.product
this.buyBook == this.sellBook.theBook.buyBook
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.product has only one value
this.product != null
this.buyBook has only one value
this.buyBook != null
this.sellBook has only one value
this.sellBook != null
this.lastCurrentMarket != null
arg0 != null
constants.BookSide.$VALUES.getClass().getName() != arg0.getClass().getName()
this.buyBook.trader.getClass().getName() != arg0.getClass().getName()
===========================================================================
book.ProductBook.addOldEntry(tradable.Tradable):::EXIT
this.product == this.sellBook.theBook.product
this.product == orig(this.product)
this.product == orig(this.buyBook.theBook.product)
this.product == orig(this.sellBook.theBook.product)
this.product.toString == orig(this.product.toString)
this.buyBook == this.sellBook.theBook.buyBook
this.buyBook == orig(this.buyBook)
this.buyBook == orig(this.buyBook.theBook.buyBook)
this.buyBook == orig(this.sellBook.theBook.buyBook)
this.buyBook.bookEntries == orig(this.buyBook.bookEntries)
constants.BookSide.BUY == orig(this.buyBook.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.sellBook.side)
this.buyBook.side.bookside == orig(this.buyBook.side.bookside)
this.buyBook.side.bookside.toString == orig(this.buyBook.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.buyBook.trader == orig(this.buyBook.trader)
this.buyBook.trader.getClass().getName() == orig(this.buyBook.trader.getClass().getName())
this.buyBook.trader.getClass().getName() == orig(this.sellBook.trader.getClass().getName())
this.buyBook.theBook == orig(this)
this.buyBook.theBook == orig(this.buyBook.theBook)
this.buyBook.theBook == orig(this.sellBook.theBook)
this.buyBook.theBook.product.toString == orig(this.buyBook.theBook.product.toString)
this.buyBook.theBook.lastCurrentMarket.toString == orig(this.buyBook.theBook.lastCurrentMarket.toString)
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook == orig(this.buyBook.theBook.sellBook)
this.sellBook == orig(this.sellBook)
this.sellBook == orig(this.sellBook.theBook.sellBook)
this.sellBook.bookEntries == orig(this.sellBook.bookEntries)
this.sellBook.side.bookside == orig(this.sellBook.side.bookside)
this.sellBook.side.bookside.toString == orig(this.sellBook.side.bookside.toString)
this.sellBook.trader == orig(this.sellBook.trader)
this.sellBook.theBook.product.toString == orig(this.sellBook.theBook.product.toString)
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.lastCurrentMarket.toString == orig(this.sellBook.theBook.lastCurrentMarket.toString)
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.lastCurrentMarket == orig(this.buyBook.theBook.lastCurrentMarket)
this.lastCurrentMarket == orig(this.sellBook.theBook.lastCurrentMarket)
this.lastCurrentMarket == orig(this.lastCurrentMarket)
this.lastCurrentMarket.toString == orig(this.lastCurrentMarket.toString)
this.userQuotes == orig(this.buyBook.theBook.userQuotes)
this.userQuotes == orig(this.sellBook.theBook.userQuotes)
this.userQuotes == orig(this.userQuotes)
this.oldEntries == orig(this.buyBook.theBook.oldEntries)
this.oldEntries == orig(this.sellBook.theBook.oldEntries)
this.oldEntries == orig(this.oldEntries)
this.product has only one value
this.product != null
this.buyBook has only one value
this.buyBook != null
this.sellBook has only one value
this.sellBook != null
this.lastCurrentMarket != null
constants.BookSide.$VALUES.getClass().getName() != orig(arg0.getClass().getName())
this.buyBook.trader.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
book.ProductBook.addToBook(constants.BookSide, tradable.Tradable):::ENTER
this.product == this.sellBook.theBook.product
this.buyBook == this.sellBook.theBook.buyBook
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.product has only one value
this.product != null
this.buyBook has only one value
this.buyBook != null
this.sellBook has only one value
this.sellBook != null
this.lastCurrentMarket != null
arg0 != null
constants.BookSide.BUY.bookside has only one value
constants.BookSide.BUY.bookside != null
constants.BookSide.BUY.bookside.toString == "BUY"
constants.BookSide.SELL.bookside has only one value
constants.BookSide.SELL.bookside != null
constants.BookSide.SELL.bookside.toString == "SELL"
arg0.bookside != null
arg0.bookside.toString one of { "BUY", "SELL" }
arg1 != null
constants.BookSide.$VALUES.getClass().getName() != arg1.getClass().getName()
this.buyBook.trader.getClass().getName() != arg1.getClass().getName()
===========================================================================
book.ProductBook.addToBook(constants.BookSide, tradable.Tradable):::EXIT
this.product == this.sellBook.theBook.product
this.product == orig(this.product)
this.product == orig(this.buyBook.theBook.product)
this.product == orig(this.sellBook.theBook.product)
this.product.toString == orig(this.product.toString)
this.buyBook == this.sellBook.theBook.buyBook
this.buyBook == orig(this.buyBook)
this.buyBook == orig(this.buyBook.theBook.buyBook)
this.buyBook == orig(this.sellBook.theBook.buyBook)
this.buyBook.bookEntries == orig(this.buyBook.bookEntries)
constants.BookSide.BUY == orig(this.buyBook.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.sellBook.side)
this.buyBook.side.bookside == orig(this.buyBook.side.bookside)
this.buyBook.side.bookside.toString == orig(this.buyBook.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.buyBook.trader == orig(this.buyBook.trader)
this.buyBook.trader.getClass().getName() == orig(this.buyBook.trader.getClass().getName())
this.buyBook.trader.getClass().getName() == orig(this.sellBook.trader.getClass().getName())
this.buyBook.theBook == orig(this)
this.buyBook.theBook == orig(this.buyBook.theBook)
this.buyBook.theBook == orig(this.sellBook.theBook)
this.buyBook.theBook.product.toString == orig(this.buyBook.theBook.product.toString)
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook == orig(this.buyBook.theBook.sellBook)
this.sellBook == orig(this.sellBook)
this.sellBook == orig(this.sellBook.theBook.sellBook)
this.sellBook.bookEntries == orig(this.sellBook.bookEntries)
this.sellBook.side.bookside == orig(this.sellBook.side.bookside)
this.sellBook.side.bookside.toString == orig(this.sellBook.side.bookside.toString)
this.sellBook.trader == orig(this.sellBook.trader)
this.sellBook.theBook.product.toString == orig(this.sellBook.theBook.product.toString)
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.userQuotes == orig(this.buyBook.theBook.userQuotes)
this.userQuotes == orig(this.sellBook.theBook.userQuotes)
this.userQuotes == orig(this.userQuotes)
this.oldEntries == orig(this.buyBook.theBook.oldEntries)
this.oldEntries == orig(this.sellBook.theBook.oldEntries)
this.oldEntries == orig(this.oldEntries)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
arg0.bookside == orig(arg0.bookside)
arg0.bookside.toString == orig(arg0.bookside.toString)
this.product has only one value
this.product != null
this.buyBook has only one value
this.buyBook != null
this.sellBook has only one value
this.sellBook != null
this.lastCurrentMarket != null
constants.BookSide.BUY.bookside has only one value
constants.BookSide.BUY.bookside != null
constants.BookSide.BUY.bookside.toString == "BUY"
constants.BookSide.SELL.bookside has only one value
constants.BookSide.SELL.bookside != null
constants.BookSide.SELL.bookside.toString == "SELL"
arg0.bookside != null
arg0.bookside.toString one of { "BUY", "SELL" }
constants.BookSide.$VALUES.getClass().getName() != orig(arg1.getClass().getName())
this.buyBook.trader.getClass().getName() != orig(arg1.getClass().getName())
this.buyBook.theBook.lastCurrentMarket.toString <= orig(this.buyBook.theBook.lastCurrentMarket.toString)
this.sellBook.theBook.lastCurrentMarket.toString <= orig(this.sellBook.theBook.lastCurrentMarket.toString)
this.lastCurrentMarket.toString <= orig(this.lastCurrentMarket.toString)
===========================================================================
book.ProductBook.addToBook(tradable.Order):::ENTER
this.product == this.sellBook.theBook.product
this.product == arg0.product
this.buyBook == this.sellBook.theBook.buyBook
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
arg0.originalVolume == arg0.remainingVolume
this.product has only one value
this.product != null
this.buyBook has only one value
this.buyBook != null
this.sellBook has only one value
this.sellBook != null
this.lastCurrentMarket != null
arg0 != null
arg0.product.toString == "GOOG"
arg0.price != null
arg0.cancelledVolume == 0
arg0.user != null
arg0.user.toString one of { "ANN", "REX" }
arg0.side != null
arg0.side.bookside != null
arg0.side.bookside.toString one of { "BUY", "SELL" }
arg0.isQuote == false
arg0.id != null
===========================================================================
book.ProductBook.addToBook(tradable.Order):::EXIT
this.product == this.sellBook.theBook.product
this.product == arg0.product
this.product == orig(this.product)
this.product == orig(this.buyBook.theBook.product)
this.product == orig(this.sellBook.theBook.product)
this.product == orig(arg0.product)
this.product.toString == orig(this.product.toString)
this.buyBook == this.sellBook.theBook.buyBook
this.buyBook == orig(this.buyBook)
this.buyBook == orig(this.buyBook.theBook.buyBook)
this.buyBook == orig(this.sellBook.theBook.buyBook)
this.buyBook.bookEntries == orig(this.buyBook.bookEntries)
constants.BookSide.BUY == orig(this.buyBook.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.sellBook.side)
this.buyBook.side.bookside == orig(this.buyBook.side.bookside)
this.buyBook.side.bookside.toString == orig(this.buyBook.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.buyBook.trader == orig(this.buyBook.trader)
this.buyBook.trader.getClass().getName() == orig(this.buyBook.trader.getClass().getName())
this.buyBook.trader.getClass().getName() == orig(this.sellBook.trader.getClass().getName())
this.buyBook.theBook == orig(this)
this.buyBook.theBook == orig(this.buyBook.theBook)
this.buyBook.theBook == orig(this.sellBook.theBook)
this.buyBook.theBook.product.toString == orig(this.buyBook.theBook.product.toString)
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook == orig(this.buyBook.theBook.sellBook)
this.sellBook == orig(this.sellBook)
this.sellBook == orig(this.sellBook.theBook.sellBook)
this.sellBook.bookEntries == orig(this.sellBook.bookEntries)
this.sellBook.side.bookside == orig(this.sellBook.side.bookside)
this.sellBook.side.bookside.toString == orig(this.sellBook.side.bookside.toString)
this.sellBook.trader == orig(this.sellBook.trader)
this.sellBook.theBook.product.toString == orig(this.sellBook.theBook.product.toString)
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.userQuotes == orig(this.buyBook.theBook.userQuotes)
this.userQuotes == orig(this.sellBook.theBook.userQuotes)
this.userQuotes == orig(this.userQuotes)
this.oldEntries == orig(this.buyBook.theBook.oldEntries)
this.oldEntries == orig(this.sellBook.theBook.oldEntries)
this.oldEntries == orig(this.oldEntries)
arg0.product.toString == orig(arg0.product.toString)
arg0.price == orig(arg0.price)
arg0.price.VALUE == orig(arg0.price.VALUE)
arg0.price.MKT == orig(arg0.price.MKT)
arg0.originalVolume == orig(arg0.originalVolume)
arg0.originalVolume == orig(arg0.remainingVolume)
arg0.cancelledVolume == orig(arg0.cancelledVolume)
arg0.user == orig(arg0.user)
arg0.user.toString == orig(arg0.user.toString)
arg0.side == orig(arg0.side)
arg0.side.bookside == orig(arg0.side.bookside)
arg0.side.bookside.toString == orig(arg0.side.bookside.toString)
arg0.isQuote == orig(arg0.isQuote)
arg0.id == orig(arg0.id)
arg0.id.toString == orig(arg0.id.toString)
this.product has only one value
this.product != null
this.buyBook has only one value
this.buyBook != null
this.sellBook has only one value
this.sellBook != null
this.lastCurrentMarket != null
arg0.product.toString == "GOOG"
arg0.price != null
arg0.cancelledVolume == 0
arg0.user != null
arg0.user.toString one of { "ANN", "REX" }
arg0.side != null
arg0.side.bookside != null
arg0.side.bookside.toString one of { "BUY", "SELL" }
arg0.isQuote == false
arg0.id != null
arg0.originalVolume >= arg0.remainingVolume
===========================================================================
book.ProductBook.addToBook(tradable.Quote):::ENTER
this.product == this.sellBook.theBook.product
this.product == arg0.product
this.product == arg0.buyQuoteSide.product
this.product == arg0.sellQuoteSide.product
this.buyBook == this.sellBook.theBook.buyBook
constants.BookSide.BUY == arg0.buyQuoteSide.side
constants.BookSide.SELL == arg0.sellQuoteSide.side
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
arg0.user == arg0.buyQuoteSide.user
arg0.user == arg0.sellQuoteSide.user
arg0.buyQuoteSide.originalVolume == arg0.buyQuoteSide.remainingVolume
arg0.sellQuoteSide.originalVolume == arg0.sellQuoteSide.remainingVolume
this.product has only one value
this.buyBook has only one value
this.buyBook.theBook.lastCurrentMarket.toString one of { "", "$0.000$0.000" }
this.sellBook has only one value
this.sellBook.theBook.lastCurrentMarket.toString one of { "", "$0.000$0.000" }
this.lastCurrentMarket.toString one of { "", "$0.000$0.000" }
arg0.user.toString one of { "ANN", "REX" }
arg0.product.toString == "GOOG"
arg0.buyQuoteSide.product.toString == "GOOG"
arg0.buyQuoteSide.price has only one value
arg0.buyQuoteSide.originalVolume == 120
arg0.buyQuoteSide.cancelledVolume == 0
arg0.buyQuoteSide.user.toString one of { "ANN", "REX" }
arg0.buyQuoteSide.isQuote == true
arg0.buyQuoteSide.id.toString one of { "ANNGOOG$641.103488477967697024", "REXGOOG$641.103488477938292211" }
arg0.sellQuoteSide.product.toString == "GOOG"
arg0.sellQuoteSide.price has only one value
arg0.sellQuoteSide.originalVolume == 150
arg0.sellQuoteSide.cancelledVolume == 0
arg0.sellQuoteSide.user.toString one of { "ANN", "REX" }
arg0.sellQuoteSide.isQuote == true
arg0.sellQuoteSide.id.toString one of { "ANNGOOG$641.153488477968558282", "REXGOOG$641.153488477941813196" }
===========================================================================
book.ProductBook.addToBook(tradable.Quote):::EXIT
this.product == this.sellBook.theBook.product
this.product == arg0.product
this.product == arg0.buyQuoteSide.product
this.product == arg0.sellQuoteSide.product
this.product == orig(this.product)
this.product == orig(this.buyBook.theBook.product)
this.product == orig(this.sellBook.theBook.product)
this.product == orig(arg0.product)
this.product == orig(arg0.buyQuoteSide.product)
this.product == orig(arg0.sellQuoteSide.product)
this.product.toString == orig(this.product.toString)
this.buyBook == this.sellBook.theBook.buyBook
this.buyBook == orig(this.buyBook)
this.buyBook == orig(this.buyBook.theBook.buyBook)
this.buyBook == orig(this.sellBook.theBook.buyBook)
this.buyBook.bookEntries == orig(this.buyBook.bookEntries)
constants.BookSide.BUY == arg0.buyQuoteSide.side
constants.BookSide.BUY == orig(this.buyBook.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.BUY == orig(arg0.buyQuoteSide.side)
constants.BookSide.SELL == arg0.sellQuoteSide.side
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.sellBook.side)
constants.BookSide.SELL == orig(arg0.sellQuoteSide.side)
this.buyBook.side.bookside == orig(this.buyBook.side.bookside)
this.buyBook.side.bookside.toString == orig(this.buyBook.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.buyBook.trader == orig(this.buyBook.trader)
this.buyBook.trader.getClass().getName() == orig(this.buyBook.trader.getClass().getName())
this.buyBook.trader.getClass().getName() == orig(this.sellBook.trader.getClass().getName())
this.buyBook.theBook == orig(this)
this.buyBook.theBook == orig(this.buyBook.theBook)
this.buyBook.theBook == orig(this.sellBook.theBook)
this.buyBook.theBook.product.toString == orig(this.buyBook.theBook.product.toString)
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook == orig(this.buyBook.theBook.sellBook)
this.sellBook == orig(this.sellBook)
this.sellBook == orig(this.sellBook.theBook.sellBook)
this.sellBook.bookEntries == orig(this.sellBook.bookEntries)
this.sellBook.side.bookside == orig(this.sellBook.side.bookside)
this.sellBook.side.bookside.toString == orig(this.sellBook.side.bookside.toString)
this.sellBook.trader == orig(this.sellBook.trader)
this.sellBook.theBook.product.toString == orig(this.sellBook.theBook.product.toString)
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.userQuotes == orig(this.buyBook.theBook.userQuotes)
this.userQuotes == orig(this.sellBook.theBook.userQuotes)
this.userQuotes == orig(this.userQuotes)
this.oldEntries == orig(this.buyBook.theBook.oldEntries)
this.oldEntries == orig(this.sellBook.theBook.oldEntries)
this.oldEntries == orig(this.oldEntries)
arg0.user == arg0.buyQuoteSide.user
arg0.user == arg0.sellQuoteSide.user
arg0.user == orig(arg0.user)
arg0.user == orig(arg0.buyQuoteSide.user)
arg0.user == orig(arg0.sellQuoteSide.user)
arg0.user.toString == orig(arg0.user.toString)
arg0.product.toString == orig(arg0.product.toString)
arg0.buyQuoteSide == orig(arg0.buyQuoteSide)
arg0.buyQuoteSide.product.toString == orig(arg0.buyQuoteSide.product.toString)
arg0.buyQuoteSide.price == orig(arg0.buyQuoteSide.price)
arg0.buyQuoteSide.originalVolume == arg0.buyQuoteSide.remainingVolume
arg0.buyQuoteSide.originalVolume == orig(arg0.buyQuoteSide.originalVolume)
arg0.buyQuoteSide.originalVolume == orig(arg0.buyQuoteSide.remainingVolume)
arg0.buyQuoteSide.cancelledVolume == orig(arg0.buyQuoteSide.cancelledVolume)
arg0.buyQuoteSide.user.toString == orig(arg0.buyQuoteSide.user.toString)
arg0.buyQuoteSide.isQuote == orig(arg0.buyQuoteSide.isQuote)
arg0.buyQuoteSide.id == orig(arg0.buyQuoteSide.id)
arg0.buyQuoteSide.id.toString == orig(arg0.buyQuoteSide.id.toString)
arg0.sellQuoteSide == orig(arg0.sellQuoteSide)
arg0.sellQuoteSide.product.toString == orig(arg0.sellQuoteSide.product.toString)
arg0.sellQuoteSide.price == orig(arg0.sellQuoteSide.price)
arg0.sellQuoteSide.originalVolume == arg0.sellQuoteSide.remainingVolume
arg0.sellQuoteSide.originalVolume == orig(arg0.sellQuoteSide.originalVolume)
arg0.sellQuoteSide.originalVolume == orig(arg0.sellQuoteSide.remainingVolume)
arg0.sellQuoteSide.cancelledVolume == orig(arg0.sellQuoteSide.cancelledVolume)
arg0.sellQuoteSide.user.toString == orig(arg0.sellQuoteSide.user.toString)
arg0.sellQuoteSide.isQuote == orig(arg0.sellQuoteSide.isQuote)
arg0.sellQuoteSide.id == orig(arg0.sellQuoteSide.id)
arg0.sellQuoteSide.id.toString == orig(arg0.sellQuoteSide.id.toString)
this.product has only one value
this.buyBook has only one value
this.buyBook.theBook.lastCurrentMarket.toString == "$641.10120$641.15150"
this.sellBook has only one value
this.sellBook.theBook.lastCurrentMarket.toString == "$641.10120$641.15150"
this.lastCurrentMarket.toString == "$641.10120$641.15150"
arg0.user.toString one of { "ANN", "REX" }
arg0.product.toString == "GOOG"
arg0.buyQuoteSide.product.toString == "GOOG"
arg0.buyQuoteSide.price has only one value
arg0.buyQuoteSide.originalVolume == 120
arg0.buyQuoteSide.cancelledVolume == 0
arg0.buyQuoteSide.user.toString one of { "ANN", "REX" }
arg0.buyQuoteSide.isQuote == true
arg0.buyQuoteSide.id.toString one of { "ANNGOOG$641.103488477967697024", "REXGOOG$641.103488477938292211" }
arg0.sellQuoteSide.product.toString == "GOOG"
arg0.sellQuoteSide.price has only one value
arg0.sellQuoteSide.originalVolume == 150
arg0.sellQuoteSide.cancelledVolume == 0
arg0.sellQuoteSide.user.toString one of { "ANN", "REX" }
arg0.sellQuoteSide.isQuote == true
arg0.sellQuoteSide.id.toString one of { "ANNGOOG$641.153488477968558282", "REXGOOG$641.153488477941813196" }
===========================================================================
book.ProductBook.cancelQuote(java.lang.String):::ENTER
this.product == this.sellBook.theBook.product
this.buyBook == this.sellBook.theBook.buyBook
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.product has only one value
this.buyBook has only one value
this.buyBook.theBook.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.10120$641.15150" }
this.sellBook has only one value
this.sellBook.theBook.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.10120$641.15150" }
this.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.10120$641.15150" }
arg0 has only one value
arg0.toString == "REX"
===========================================================================
book.ProductBook.cancelQuote(java.lang.String):::EXIT
this.product == this.sellBook.theBook.product
this.product == orig(this.product)
this.product == orig(this.buyBook.theBook.product)
this.product == orig(this.sellBook.theBook.product)
this.product.toString == orig(this.product.toString)
this.buyBook == this.sellBook.theBook.buyBook
this.buyBook == orig(this.buyBook)
this.buyBook == orig(this.buyBook.theBook.buyBook)
this.buyBook == orig(this.sellBook.theBook.buyBook)
this.buyBook.bookEntries == orig(this.buyBook.bookEntries)
constants.BookSide.BUY == orig(this.buyBook.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.sellBook.side)
this.buyBook.side.bookside == orig(this.buyBook.side.bookside)
this.buyBook.side.bookside.toString == orig(this.buyBook.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.buyBook.trader == orig(this.buyBook.trader)
this.buyBook.trader.getClass().getName() == orig(this.buyBook.trader.getClass().getName())
this.buyBook.trader.getClass().getName() == orig(this.sellBook.trader.getClass().getName())
this.buyBook.theBook == orig(this)
this.buyBook.theBook == orig(this.buyBook.theBook)
this.buyBook.theBook == orig(this.sellBook.theBook)
this.buyBook.theBook.product.toString == orig(this.buyBook.theBook.product.toString)
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook == orig(this.buyBook.theBook.sellBook)
this.sellBook == orig(this.sellBook)
this.sellBook == orig(this.sellBook.theBook.sellBook)
this.sellBook.bookEntries == orig(this.sellBook.bookEntries)
this.sellBook.side.bookside == orig(this.sellBook.side.bookside)
this.sellBook.side.bookside.toString == orig(this.sellBook.side.bookside.toString)
this.sellBook.trader == orig(this.sellBook.trader)
this.sellBook.theBook.product.toString == orig(this.sellBook.theBook.product.toString)
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.userQuotes == orig(this.buyBook.theBook.userQuotes)
this.userQuotes == orig(this.sellBook.theBook.userQuotes)
this.userQuotes == orig(this.userQuotes)
this.oldEntries == orig(this.buyBook.theBook.oldEntries)
this.oldEntries == orig(this.sellBook.theBook.oldEntries)
this.oldEntries == orig(this.oldEntries)
arg0.toString == orig(arg0.toString)
this.product has only one value
this.buyBook has only one value
this.buyBook.theBook.lastCurrentMarket.toString == "$0.000$0.000"
this.sellBook has only one value
this.sellBook.theBook.lastCurrentMarket.toString == "$0.000$0.000"
this.lastCurrentMarket.toString == "$0.000$0.000"
arg0.toString == "REX"
===========================================================================
book.ProductBook.check(price.Price):::ENTER
this.product == this.sellBook.theBook.product
this.buyBook == this.sellBook.theBook.buyBook
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.product has only one value
this.product != null
this.buyBook has only one value
this.buyBook != null
this.sellBook has only one value
this.sellBook != null
this.lastCurrentMarket != null
arg0.MKT == false
===========================================================================
book.ProductBook.check(price.Price):::EXIT451
return has only one value
return.VALUE == 0
orig(arg0) == null
===========================================================================
book.ProductBook.check(price.Price):::EXIT453
arg0.VALUE == orig(arg0.VALUE)
arg0.MKT == orig(arg0.MKT)
return == orig(arg0)
arg0.MKT == false
===========================================================================
book.ProductBook.check(price.Price):::EXIT
this.product == this.sellBook.theBook.product
this.product == orig(this.product)
this.product == orig(this.buyBook.theBook.product)
this.product == orig(this.sellBook.theBook.product)
this.product.toString == orig(this.product.toString)
this.buyBook == this.sellBook.theBook.buyBook
this.buyBook == orig(this.buyBook)
this.buyBook == orig(this.buyBook.theBook.buyBook)
this.buyBook == orig(this.sellBook.theBook.buyBook)
this.buyBook.bookEntries == orig(this.buyBook.bookEntries)
constants.BookSide.BUY == orig(this.buyBook.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.sellBook.side)
this.buyBook.side.bookside == orig(this.buyBook.side.bookside)
this.buyBook.side.bookside.toString == orig(this.buyBook.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.buyBook.trader == orig(this.buyBook.trader)
this.buyBook.trader.getClass().getName() == orig(this.buyBook.trader.getClass().getName())
this.buyBook.trader.getClass().getName() == orig(this.sellBook.trader.getClass().getName())
this.buyBook.theBook == orig(this)
this.buyBook.theBook == orig(this.buyBook.theBook)
this.buyBook.theBook == orig(this.sellBook.theBook)
this.buyBook.theBook.product.toString == orig(this.buyBook.theBook.product.toString)
this.buyBook.theBook.lastCurrentMarket.toString == orig(this.buyBook.theBook.lastCurrentMarket.toString)
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook == orig(this.buyBook.theBook.sellBook)
this.sellBook == orig(this.sellBook)
this.sellBook == orig(this.sellBook.theBook.sellBook)
this.sellBook.bookEntries == orig(this.sellBook.bookEntries)
this.sellBook.side.bookside == orig(this.sellBook.side.bookside)
this.sellBook.side.bookside.toString == orig(this.sellBook.side.bookside.toString)
this.sellBook.trader == orig(this.sellBook.trader)
this.sellBook.theBook.product.toString == orig(this.sellBook.theBook.product.toString)
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.lastCurrentMarket.toString == orig(this.sellBook.theBook.lastCurrentMarket.toString)
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.lastCurrentMarket == orig(this.buyBook.theBook.lastCurrentMarket)
this.lastCurrentMarket == orig(this.sellBook.theBook.lastCurrentMarket)
this.lastCurrentMarket == orig(this.lastCurrentMarket)
this.lastCurrentMarket.toString == orig(this.lastCurrentMarket.toString)
this.userQuotes == orig(this.buyBook.theBook.userQuotes)
this.userQuotes == orig(this.sellBook.theBook.userQuotes)
this.userQuotes == orig(this.userQuotes)
this.oldEntries == orig(this.buyBook.theBook.oldEntries)
this.oldEntries == orig(this.sellBook.theBook.oldEntries)
this.oldEntries == orig(this.oldEntries)
return.VALUE == orig(arg0.VALUE)
return.MKT == orig(arg0.MKT)
(return.VALUE == 0)  <==>  (orig(arg0) == null)
(return.VALUE == 0)  ==>  (return has only one value)
this.product has only one value
this.product != null
this.buyBook has only one value
this.buyBook != null
this.sellBook has only one value
this.sellBook != null
this.lastCurrentMarket != null
return != null
return.VALUE >= 0
return.MKT == false
===========================================================================
book.ProductBook.closeMarket():::ENTER
this.product == this.sellBook.theBook.product
this.buyBook == this.sellBook.theBook.buyBook
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.product has only one value
this.buyBook has only one value
this.buyBook.theBook.lastCurrentMarket.toString one of { "$641.10100$0.000", "$641.14555$0.000" }
this.sellBook has only one value
this.sellBook.theBook.lastCurrentMarket.toString one of { "$641.10100$0.000", "$641.14555$0.000" }
this.lastCurrentMarket.toString one of { "$641.10100$0.000", "$641.14555$0.000" }
===========================================================================
book.ProductBook.closeMarket():::EXIT
this.product == this.sellBook.theBook.product
this.product == orig(this.product)
this.product == orig(this.buyBook.theBook.product)
this.product == orig(this.sellBook.theBook.product)
this.product.toString == orig(this.product.toString)
this.buyBook == this.sellBook.theBook.buyBook
this.buyBook == orig(this.buyBook)
this.buyBook == orig(this.buyBook.theBook.buyBook)
this.buyBook == orig(this.sellBook.theBook.buyBook)
this.buyBook.bookEntries == orig(this.buyBook.bookEntries)
constants.BookSide.BUY == orig(this.buyBook.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.sellBook.side)
this.buyBook.side.bookside == orig(this.buyBook.side.bookside)
this.buyBook.side.bookside.toString == orig(this.buyBook.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.buyBook.trader == orig(this.buyBook.trader)
this.buyBook.trader.getClass().getName() == orig(this.buyBook.trader.getClass().getName())
this.buyBook.trader.getClass().getName() == orig(this.sellBook.trader.getClass().getName())
this.buyBook.theBook == orig(this)
this.buyBook.theBook == orig(this.buyBook.theBook)
this.buyBook.theBook == orig(this.sellBook.theBook)
this.buyBook.theBook.product.toString == orig(this.buyBook.theBook.product.toString)
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook == orig(this.buyBook.theBook.sellBook)
this.sellBook == orig(this.sellBook)
this.sellBook == orig(this.sellBook.theBook.sellBook)
this.sellBook.bookEntries == orig(this.sellBook.bookEntries)
this.sellBook.side.bookside == orig(this.sellBook.side.bookside)
this.sellBook.side.bookside.toString == orig(this.sellBook.side.bookside.toString)
this.sellBook.trader == orig(this.sellBook.trader)
this.sellBook.theBook.product.toString == orig(this.sellBook.theBook.product.toString)
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.userQuotes == orig(this.buyBook.theBook.userQuotes)
this.userQuotes == orig(this.sellBook.theBook.userQuotes)
this.userQuotes == orig(this.userQuotes)
this.oldEntries == orig(this.buyBook.theBook.oldEntries)
this.oldEntries == orig(this.sellBook.theBook.oldEntries)
this.oldEntries == orig(this.oldEntries)
this.product has only one value
this.buyBook has only one value
this.buyBook.theBook.lastCurrentMarket.toString == "$0.000$0.000"
this.sellBook has only one value
this.sellBook.theBook.lastCurrentMarket.toString == "$0.000$0.000"
this.lastCurrentMarket.toString == "$0.000$0.000"
===========================================================================
book.ProductBook.determineLastSalePrice(java.util.HashMap):::ENTER
this.product == this.sellBook.theBook.product
this.buyBook == this.sellBook.theBook.buyBook
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.product has only one value
this.buyBook has only one value
this.sellBook has only one value
===========================================================================
book.ProductBook.determineLastSalePrice(java.util.HashMap):::EXIT413
this.buyBook.theBook.lastCurrentMarket.toString == "$641.14555$0.000"
this.sellBook.theBook.lastCurrentMarket.toString == "$641.14555$0.000"
this.lastCurrentMarket has only one value
this.lastCurrentMarket.toString == "$641.14555$0.000"
return has only one value
return.VALUE == 64115
orig(arg0) has only one value
===========================================================================
book.ProductBook.determineLastSalePrice(java.util.HashMap):::EXIT417
this.buyBook.theBook.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.10100$0.000", "$641.14555$641.1545" }
this.sellBook.theBook.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.10100$0.000", "$641.14555$641.1545" }
this.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.10100$0.000", "$641.14555$641.1545" }
===========================================================================
book.ProductBook.determineLastSalePrice(java.util.HashMap):::EXIT
this.product == this.sellBook.theBook.product
this.product == orig(this.product)
this.product == orig(this.buyBook.theBook.product)
this.product == orig(this.sellBook.theBook.product)
this.product.toString == orig(this.product.toString)
this.buyBook == this.sellBook.theBook.buyBook
this.buyBook == orig(this.buyBook)
this.buyBook == orig(this.buyBook.theBook.buyBook)
this.buyBook == orig(this.sellBook.theBook.buyBook)
this.buyBook.bookEntries == orig(this.buyBook.bookEntries)
constants.BookSide.BUY == orig(this.buyBook.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.sellBook.side)
this.buyBook.side.bookside == orig(this.buyBook.side.bookside)
this.buyBook.side.bookside.toString == orig(this.buyBook.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.buyBook.trader == orig(this.buyBook.trader)
this.buyBook.trader.getClass().getName() == orig(this.buyBook.trader.getClass().getName())
this.buyBook.trader.getClass().getName() == orig(this.sellBook.trader.getClass().getName())
this.buyBook.theBook == orig(this)
this.buyBook.theBook == orig(this.buyBook.theBook)
this.buyBook.theBook == orig(this.sellBook.theBook)
this.buyBook.theBook.product.toString == orig(this.buyBook.theBook.product.toString)
this.buyBook.theBook.lastCurrentMarket.toString == orig(this.buyBook.theBook.lastCurrentMarket.toString)
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook == orig(this.buyBook.theBook.sellBook)
this.sellBook == orig(this.sellBook)
this.sellBook == orig(this.sellBook.theBook.sellBook)
this.sellBook.bookEntries == orig(this.sellBook.bookEntries)
this.sellBook.side.bookside == orig(this.sellBook.side.bookside)
this.sellBook.side.bookside.toString == orig(this.sellBook.side.bookside.toString)
this.sellBook.trader == orig(this.sellBook.trader)
this.sellBook.theBook.product.toString == orig(this.sellBook.theBook.product.toString)
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.lastCurrentMarket.toString == orig(this.sellBook.theBook.lastCurrentMarket.toString)
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.lastCurrentMarket == orig(this.buyBook.theBook.lastCurrentMarket)
this.lastCurrentMarket == orig(this.sellBook.theBook.lastCurrentMarket)
this.lastCurrentMarket == orig(this.lastCurrentMarket)
this.lastCurrentMarket.toString == orig(this.lastCurrentMarket.toString)
this.userQuotes == orig(this.buyBook.theBook.userQuotes)
this.userQuotes == orig(this.sellBook.theBook.userQuotes)
this.userQuotes == orig(this.userQuotes)
this.oldEntries == orig(this.buyBook.theBook.oldEntries)
this.oldEntries == orig(this.sellBook.theBook.oldEntries)
this.oldEntries == orig(this.oldEntries)
(this.buyBook.theBook.lastCurrentMarket.toString == "$641.14555$0.000")  <==>  (this.lastCurrentMarket.toString == "$641.14555$0.000")
(this.buyBook.theBook.lastCurrentMarket.toString == "$641.14555$0.000")  <==>  (this.sellBook.theBook.lastCurrentMarket.toString == "$641.14555$0.000")
(this.buyBook.theBook.lastCurrentMarket.toString == "$641.14555$0.000")  ==>  (orig(arg0) has only one value)
(this.buyBook.theBook.lastCurrentMarket.toString == "$641.14555$0.000")  ==>  (return has only one value)
(this.buyBook.theBook.lastCurrentMarket.toString == "$641.14555$0.000")  ==>  (return.VALUE == 64115)
(this.buyBook.theBook.lastCurrentMarket.toString == "$641.14555$0.000")  ==>  (this.lastCurrentMarket has only one value)
(this.buyBook.theBook.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.10100$0.000", "$641.14555$641.1545" })  <==>  (this.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.10100$0.000", "$641.14555$641.1545" })
(this.buyBook.theBook.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.10100$0.000", "$641.14555$641.1545" })  <==>  (this.sellBook.theBook.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.10100$0.000", "$641.14555$641.1545" })
(this.buyBook.theBook.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.10100$0.000", "$641.14555$641.1545" })  ==>  (return.VALUE one of { 64110, 64115, 64130 })
this.product has only one value
this.buyBook has only one value
this.sellBook has only one value
return.VALUE one of { 64110, 64115, 64130 }
return.MKT == false
===========================================================================
book.ProductBook.determineLastSaleQuantity(java.util.HashMap):::ENTER
this.product == this.sellBook.theBook.product
this.buyBook == this.sellBook.theBook.buyBook
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.product has only one value
this.buyBook has only one value
this.buyBook.theBook.lastCurrentMarket.toString == "$641.14555$641.1545"
this.sellBook has only one value
this.sellBook.theBook.lastCurrentMarket.toString == "$641.14555$641.1545"
this.lastCurrentMarket has only one value
this.lastCurrentMarket.toString == "$641.14555$641.1545"
arg0 has only one value
===========================================================================
book.ProductBook.determineLastSaleQuantity(java.util.HashMap):::EXIT437
===========================================================================
book.ProductBook.determineLastSaleQuantity(java.util.HashMap):::EXIT
this.product == this.sellBook.theBook.product
this.product == orig(this.product)
this.product == orig(this.buyBook.theBook.product)
this.product == orig(this.sellBook.theBook.product)
this.product.toString == orig(this.product.toString)
this.buyBook == this.sellBook.theBook.buyBook
this.buyBook == orig(this.buyBook)
this.buyBook == orig(this.buyBook.theBook.buyBook)
this.buyBook == orig(this.sellBook.theBook.buyBook)
this.buyBook.bookEntries == orig(this.buyBook.bookEntries)
constants.BookSide.BUY == orig(this.buyBook.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.sellBook.side)
this.buyBook.side.bookside == orig(this.buyBook.side.bookside)
this.buyBook.side.bookside.toString == orig(this.buyBook.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.buyBook.trader == orig(this.buyBook.trader)
this.buyBook.trader.getClass().getName() == orig(this.buyBook.trader.getClass().getName())
this.buyBook.trader.getClass().getName() == orig(this.sellBook.trader.getClass().getName())
this.buyBook.theBook == orig(this)
this.buyBook.theBook == orig(this.buyBook.theBook)
this.buyBook.theBook == orig(this.sellBook.theBook)
this.buyBook.theBook.product.toString == orig(this.buyBook.theBook.product.toString)
this.buyBook.theBook.lastCurrentMarket.toString == orig(this.buyBook.theBook.lastCurrentMarket.toString)
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook == orig(this.buyBook.theBook.sellBook)
this.sellBook == orig(this.sellBook)
this.sellBook == orig(this.sellBook.theBook.sellBook)
this.sellBook.bookEntries == orig(this.sellBook.bookEntries)
this.sellBook.side.bookside == orig(this.sellBook.side.bookside)
this.sellBook.side.bookside.toString == orig(this.sellBook.side.bookside.toString)
this.sellBook.trader == orig(this.sellBook.trader)
this.sellBook.theBook.product.toString == orig(this.sellBook.theBook.product.toString)
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.lastCurrentMarket.toString == orig(this.sellBook.theBook.lastCurrentMarket.toString)
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.lastCurrentMarket == orig(this.buyBook.theBook.lastCurrentMarket)
this.lastCurrentMarket == orig(this.sellBook.theBook.lastCurrentMarket)
this.lastCurrentMarket == orig(this.lastCurrentMarket)
this.lastCurrentMarket.toString == orig(this.lastCurrentMarket.toString)
this.userQuotes == orig(this.buyBook.theBook.userQuotes)
this.userQuotes == orig(this.sellBook.theBook.userQuotes)
this.userQuotes == orig(this.userQuotes)
this.oldEntries == orig(this.buyBook.theBook.oldEntries)
this.oldEntries == orig(this.sellBook.theBook.oldEntries)
this.oldEntries == orig(this.oldEntries)
this.product has only one value
this.buyBook has only one value
this.buyBook.theBook.lastCurrentMarket.toString == "$641.14555$641.1545"
this.sellBook has only one value
this.sellBook.theBook.lastCurrentMarket.toString == "$641.14555$641.1545"
this.lastCurrentMarket has only one value
this.lastCurrentMarket.toString == "$641.14555$641.1545"
return == 105
===========================================================================
book.ProductBook.getBookDepth():::ENTER
this.product == this.sellBook.theBook.product
this.buyBook == this.sellBook.theBook.buyBook
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.product has only one value
this.buyBook has only one value
this.sellBook has only one value
===========================================================================
book.ProductBook.getBookDepth():::EXIT
this.product == this.sellBook.theBook.product
this.product == orig(this.product)
this.product == orig(this.buyBook.theBook.product)
this.product == orig(this.sellBook.theBook.product)
this.product.toString == orig(this.product.toString)
this.buyBook == this.sellBook.theBook.buyBook
this.buyBook == orig(this.buyBook)
this.buyBook == orig(this.buyBook.theBook.buyBook)
this.buyBook == orig(this.sellBook.theBook.buyBook)
this.buyBook.bookEntries == orig(this.buyBook.bookEntries)
constants.BookSide.BUY == orig(this.buyBook.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.sellBook.side)
this.buyBook.side.bookside == orig(this.buyBook.side.bookside)
this.buyBook.side.bookside.toString == orig(this.buyBook.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.buyBook.trader == orig(this.buyBook.trader)
this.buyBook.trader.getClass().getName() == orig(this.buyBook.trader.getClass().getName())
this.buyBook.trader.getClass().getName() == orig(this.sellBook.trader.getClass().getName())
this.buyBook.theBook == orig(this)
this.buyBook.theBook == orig(this.buyBook.theBook)
this.buyBook.theBook == orig(this.sellBook.theBook)
this.buyBook.theBook.product.toString == orig(this.buyBook.theBook.product.toString)
this.buyBook.theBook.lastCurrentMarket.toString == orig(this.buyBook.theBook.lastCurrentMarket.toString)
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook == orig(this.buyBook.theBook.sellBook)
this.sellBook == orig(this.sellBook)
this.sellBook == orig(this.sellBook.theBook.sellBook)
this.sellBook.bookEntries == orig(this.sellBook.bookEntries)
this.sellBook.side.bookside == orig(this.sellBook.side.bookside)
this.sellBook.side.bookside.toString == orig(this.sellBook.side.bookside.toString)
this.sellBook.trader == orig(this.sellBook.trader)
this.sellBook.theBook.product.toString == orig(this.sellBook.theBook.product.toString)
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.lastCurrentMarket.toString == orig(this.sellBook.theBook.lastCurrentMarket.toString)
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.lastCurrentMarket == orig(this.buyBook.theBook.lastCurrentMarket)
this.lastCurrentMarket == orig(this.sellBook.theBook.lastCurrentMarket)
this.lastCurrentMarket == orig(this.lastCurrentMarket)
this.lastCurrentMarket.toString == orig(this.lastCurrentMarket.toString)
this.userQuotes == orig(this.buyBook.theBook.userQuotes)
this.userQuotes == orig(this.sellBook.theBook.userQuotes)
this.userQuotes == orig(this.userQuotes)
this.oldEntries == orig(this.buyBook.theBook.oldEntries)
this.oldEntries == orig(this.sellBook.theBook.oldEntries)
this.oldEntries == orig(this.oldEntries)
this.product has only one value
this.buyBook has only one value
this.sellBook has only one value
return.getClass().getName() == java.lang.String[][].class
size(return[]) == 2
constants.BookSide.$VALUES.getClass().getName() != return.getClass().getName()
this.buyBook.trader.getClass().getName() != return.getClass().getName()
===========================================================================
book.ProductBook.getMarketData():::ENTER
this.product == this.sellBook.theBook.product
this.buyBook == this.sellBook.theBook.buyBook
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.product has only one value
this.buyBook has only one value
this.buyBook.theBook.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.10120$641.15150" }
this.sellBook has only one value
this.sellBook.theBook.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.10120$641.15150" }
this.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.10120$641.15150" }
===========================================================================
book.ProductBook.getMarketData():::EXIT177
===========================================================================
book.ProductBook.getMarketData():::EXIT
this.product == this.sellBook.theBook.product
this.product == return.product
this.product == orig(this.product)
this.product == orig(this.buyBook.theBook.product)
this.product == orig(this.sellBook.theBook.product)
this.product.toString == orig(this.product.toString)
this.buyBook == this.sellBook.theBook.buyBook
this.buyBook == orig(this.buyBook)
this.buyBook == orig(this.buyBook.theBook.buyBook)
this.buyBook == orig(this.sellBook.theBook.buyBook)
this.buyBook.bookEntries == orig(this.buyBook.bookEntries)
constants.BookSide.BUY == orig(this.buyBook.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.sellBook.side)
this.buyBook.side.bookside == orig(this.buyBook.side.bookside)
this.buyBook.side.bookside.toString == orig(this.buyBook.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.buyBook.trader == orig(this.buyBook.trader)
this.buyBook.trader.getClass().getName() == orig(this.buyBook.trader.getClass().getName())
this.buyBook.trader.getClass().getName() == orig(this.sellBook.trader.getClass().getName())
this.buyBook.theBook == orig(this)
this.buyBook.theBook == orig(this.buyBook.theBook)
this.buyBook.theBook == orig(this.sellBook.theBook)
this.buyBook.theBook.product.toString == orig(this.buyBook.theBook.product.toString)
this.buyBook.theBook.lastCurrentMarket.toString == orig(this.buyBook.theBook.lastCurrentMarket.toString)
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook == orig(this.buyBook.theBook.sellBook)
this.sellBook == orig(this.sellBook)
this.sellBook == orig(this.sellBook.theBook.sellBook)
this.sellBook.bookEntries == orig(this.sellBook.bookEntries)
this.sellBook.side.bookside == orig(this.sellBook.side.bookside)
this.sellBook.side.bookside.toString == orig(this.sellBook.side.bookside.toString)
this.sellBook.trader == orig(this.sellBook.trader)
this.sellBook.theBook.product.toString == orig(this.sellBook.theBook.product.toString)
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.lastCurrentMarket.toString == orig(this.sellBook.theBook.lastCurrentMarket.toString)
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.lastCurrentMarket == orig(this.buyBook.theBook.lastCurrentMarket)
this.lastCurrentMarket == orig(this.sellBook.theBook.lastCurrentMarket)
this.lastCurrentMarket == orig(this.lastCurrentMarket)
this.lastCurrentMarket.toString == orig(this.lastCurrentMarket.toString)
this.userQuotes == orig(this.buyBook.theBook.userQuotes)
this.userQuotes == orig(this.sellBook.theBook.userQuotes)
this.userQuotes == orig(this.userQuotes)
this.oldEntries == orig(this.buyBook.theBook.oldEntries)
this.oldEntries == orig(this.sellBook.theBook.oldEntries)
this.oldEntries == orig(this.oldEntries)
return.buyPrice.MKT == return.sellPrice.MKT
this.product has only one value
this.buyBook has only one value
this.buyBook.theBook.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.10120$641.15150" }
this.sellBook has only one value
this.sellBook.theBook.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.10120$641.15150" }
this.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.10120$641.15150" }
return.product.toString == "GOOG"
return.buyPrice.VALUE one of { 0, 64110 }
return.buyPrice.MKT == false
return.buyVolume one of { 0, 120 }
return.sellPrice.VALUE one of { 0, 64115 }
return.sellVolume one of { 0, 150 }
===========================================================================
book.ProductBook.getOrdersWithRemainingQty(java.lang.String):::ENTER
this.product == this.sellBook.theBook.product
this.buyBook == this.sellBook.theBook.buyBook
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.product has only one value
this.buyBook has only one value
this.buyBook.theBook.lastCurrentMarket.toString == "$641.14555$0.000"
this.sellBook has only one value
this.sellBook.theBook.lastCurrentMarket.toString == "$641.14555$0.000"
this.lastCurrentMarket has only one value
this.lastCurrentMarket.toString == "$641.14555$0.000"
arg0 has only one value
arg0.toString == "REX"
===========================================================================
book.ProductBook.getOrdersWithRemainingQty(java.lang.String):::EXIT
this.product == this.sellBook.theBook.product
this.product == orig(this.product)
this.product == orig(this.buyBook.theBook.product)
this.product == orig(this.sellBook.theBook.product)
this.product.toString == orig(this.product.toString)
this.buyBook == this.sellBook.theBook.buyBook
this.buyBook == orig(this.buyBook)
this.buyBook == orig(this.buyBook.theBook.buyBook)
this.buyBook == orig(this.sellBook.theBook.buyBook)
this.buyBook.bookEntries == orig(this.buyBook.bookEntries)
constants.BookSide.BUY == orig(this.buyBook.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.sellBook.side)
this.buyBook.side.bookside == orig(this.buyBook.side.bookside)
this.buyBook.side.bookside.toString == orig(this.buyBook.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.buyBook.trader == orig(this.buyBook.trader)
this.buyBook.trader.getClass().getName() == orig(this.buyBook.trader.getClass().getName())
this.buyBook.trader.getClass().getName() == orig(this.sellBook.trader.getClass().getName())
this.buyBook.theBook == orig(this)
this.buyBook.theBook == orig(this.buyBook.theBook)
this.buyBook.theBook == orig(this.sellBook.theBook)
this.buyBook.theBook.product.toString == orig(this.buyBook.theBook.product.toString)
this.buyBook.theBook.lastCurrentMarket.toString == orig(this.buyBook.theBook.lastCurrentMarket.toString)
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook == orig(this.buyBook.theBook.sellBook)
this.sellBook == orig(this.sellBook)
this.sellBook == orig(this.sellBook.theBook.sellBook)
this.sellBook.bookEntries == orig(this.sellBook.bookEntries)
this.sellBook.side.bookside == orig(this.sellBook.side.bookside)
this.sellBook.side.bookside.toString == orig(this.sellBook.side.bookside.toString)
this.sellBook.trader == orig(this.sellBook.trader)
this.sellBook.theBook.product.toString == orig(this.sellBook.theBook.product.toString)
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.lastCurrentMarket.toString == orig(this.sellBook.theBook.lastCurrentMarket.toString)
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.lastCurrentMarket == orig(this.buyBook.theBook.lastCurrentMarket)
this.lastCurrentMarket == orig(this.sellBook.theBook.lastCurrentMarket)
this.lastCurrentMarket == orig(this.lastCurrentMarket)
this.lastCurrentMarket.toString == orig(this.lastCurrentMarket.toString)
this.userQuotes == orig(this.buyBook.theBook.userQuotes)
this.userQuotes == orig(this.sellBook.theBook.userQuotes)
this.userQuotes == orig(this.userQuotes)
this.oldEntries == orig(this.buyBook.theBook.oldEntries)
this.oldEntries == orig(this.sellBook.theBook.oldEntries)
this.oldEntries == orig(this.oldEntries)
arg0.toString == orig(arg0.toString)
this.product has only one value
this.buyBook has only one value
this.buyBook.theBook.lastCurrentMarket.toString == "$641.14555$0.000"
this.sellBook has only one value
this.sellBook.theBook.lastCurrentMarket.toString == "$641.14555$0.000"
this.lastCurrentMarket has only one value
this.lastCurrentMarket.toString == "$641.14555$0.000"
arg0.toString == "REX"
return has only one value
return[] contains no nulls and has only one value, of length 5
return[].getClass().getName() == [tradable.TradableDTO, tradable.TradableDTO, tradable.TradableDTO, tradable.TradableDTO, tradable.TradableDTO]
return[].getClass().getName() elements == tradable.TradableDTO.class
size(return[]) == 5
===========================================================================
book.ProductBook.openMarket():::ENTER
this.product == this.sellBook.theBook.product
this.buyBook == this.sellBook.theBook.buyBook
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.product has only one value
this.buyBook has only one value
this.buyBook.theBook.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.15105$641.15150" }
this.sellBook has only one value
this.sellBook.theBook.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.15105$641.15150" }
this.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.15105$641.15150" }
===========================================================================
book.ProductBook.openMarket():::EXIT
this.product == this.sellBook.theBook.product
this.product == orig(this.product)
this.product == orig(this.buyBook.theBook.product)
this.product == orig(this.sellBook.theBook.product)
this.product.toString == orig(this.product.toString)
this.buyBook == this.sellBook.theBook.buyBook
this.buyBook == orig(this.buyBook)
this.buyBook == orig(this.buyBook.theBook.buyBook)
this.buyBook == orig(this.sellBook.theBook.buyBook)
this.buyBook.bookEntries == orig(this.buyBook.bookEntries)
constants.BookSide.BUY == orig(this.buyBook.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.sellBook.side)
this.buyBook.side.bookside == orig(this.buyBook.side.bookside)
this.buyBook.side.bookside.toString == orig(this.buyBook.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.buyBook.trader == orig(this.buyBook.trader)
this.buyBook.trader.getClass().getName() == orig(this.buyBook.trader.getClass().getName())
this.buyBook.trader.getClass().getName() == orig(this.sellBook.trader.getClass().getName())
this.buyBook.theBook == orig(this)
this.buyBook.theBook == orig(this.buyBook.theBook)
this.buyBook.theBook == orig(this.sellBook.theBook)
this.buyBook.theBook.product.toString == orig(this.buyBook.theBook.product.toString)
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook == orig(this.buyBook.theBook.sellBook)
this.sellBook == orig(this.sellBook)
this.sellBook == orig(this.sellBook.theBook.sellBook)
this.sellBook.bookEntries == orig(this.sellBook.bookEntries)
this.sellBook.side.bookside == orig(this.sellBook.side.bookside)
this.sellBook.side.bookside.toString == orig(this.sellBook.side.bookside.toString)
this.sellBook.trader == orig(this.sellBook.trader)
this.sellBook.theBook.product.toString == orig(this.sellBook.theBook.product.toString)
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.userQuotes == orig(this.buyBook.theBook.userQuotes)
this.userQuotes == orig(this.sellBook.theBook.userQuotes)
this.userQuotes == orig(this.userQuotes)
this.oldEntries == orig(this.buyBook.theBook.oldEntries)
this.oldEntries == orig(this.sellBook.theBook.oldEntries)
this.oldEntries == orig(this.oldEntries)
this.product has only one value
this.buyBook has only one value
this.buyBook.theBook.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.14555$641.1545" }
this.sellBook has only one value
this.sellBook.theBook.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.14555$641.1545" }
this.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.14555$641.1545" }
===========================================================================
book.ProductBook.setProduct(java.lang.String):::ENTER
this.product == null
this.buyBook == null
this.sellBook == null
this.lastCurrentMarket == null
arg0 has only one value
arg0.toString == "GOOG"
===========================================================================
book.ProductBook.setProduct(java.lang.String):::EXIT
this.product == orig(arg0)
this.buyBook == orig(this.buyBook)
arg0.toString == orig(arg0.toString)
this.product has only one value
this.buyBook == null
this.sellBook == null
this.lastCurrentMarket == null
arg0.toString == "GOOG"
===========================================================================
book.ProductBook.updateCurrentMarket():::ENTER
this.product == this.sellBook.theBook.product
this.buyBook == this.sellBook.theBook.buyBook
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.product has only one value
this.product != null
this.buyBook has only one value
this.buyBook != null
this.sellBook has only one value
this.sellBook != null
this.lastCurrentMarket != null
===========================================================================
book.ProductBook.updateCurrentMarket():::EXIT
this.product == this.sellBook.theBook.product
this.product == orig(this.product)
this.product == orig(this.buyBook.theBook.product)
this.product == orig(this.sellBook.theBook.product)
this.product.toString == orig(this.product.toString)
this.buyBook == this.sellBook.theBook.buyBook
this.buyBook == orig(this.buyBook)
this.buyBook == orig(this.buyBook.theBook.buyBook)
this.buyBook == orig(this.sellBook.theBook.buyBook)
this.buyBook.bookEntries == orig(this.buyBook.bookEntries)
constants.BookSide.BUY == orig(this.buyBook.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.sellBook.side)
this.buyBook.side.bookside == orig(this.buyBook.side.bookside)
this.buyBook.side.bookside.toString == orig(this.buyBook.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.buyBook.trader == orig(this.buyBook.trader)
this.buyBook.trader.getClass().getName() == orig(this.buyBook.trader.getClass().getName())
this.buyBook.trader.getClass().getName() == orig(this.sellBook.trader.getClass().getName())
this.buyBook.theBook == orig(this)
this.buyBook.theBook == orig(this.buyBook.theBook)
this.buyBook.theBook == orig(this.sellBook.theBook)
this.buyBook.theBook.product.toString == orig(this.buyBook.theBook.product.toString)
this.sellBook == this.sellBook.theBook.sellBook
this.sellBook == orig(this.buyBook.theBook.sellBook)
this.sellBook == orig(this.sellBook)
this.sellBook == orig(this.sellBook.theBook.sellBook)
this.sellBook.bookEntries == orig(this.sellBook.bookEntries)
this.sellBook.side.bookside == orig(this.sellBook.side.bookside)
this.sellBook.side.bookside.toString == orig(this.sellBook.side.bookside.toString)
this.sellBook.trader == orig(this.sellBook.trader)
this.sellBook.theBook.product.toString == orig(this.sellBook.theBook.product.toString)
this.sellBook.theBook.lastCurrentMarket == this.lastCurrentMarket
this.sellBook.theBook.userQuotes == this.userQuotes
this.sellBook.theBook.oldEntries == this.oldEntries
this.userQuotes == orig(this.buyBook.theBook.userQuotes)
this.userQuotes == orig(this.sellBook.theBook.userQuotes)
this.userQuotes == orig(this.userQuotes)
this.oldEntries == orig(this.buyBook.theBook.oldEntries)
this.oldEntries == orig(this.sellBook.theBook.oldEntries)
this.oldEntries == orig(this.oldEntries)
this.product has only one value
this.product != null
this.buyBook has only one value
this.buyBook != null
this.sellBook has only one value
this.sellBook != null
this.lastCurrentMarket != null
===========================================================================
book.ProductBookSide:::OBJECT
constants.BookSide.BUY == this.theBook.buyBook.side
this.trader.getClass().getName() == this.theBook.buyBook.trader.getClass().getName()
this.trader.getClass().getName() == this.theBook.sellBook.trader.getClass().getName()
this.theBook == this.theBook.buyBook.theBook
this.theBook == this.theBook.sellBook.theBook
this.theBook.buyBook.trader.getClass().getName() == this.theBook.sellBook.trader.getClass().getName()
this.theBook.buyBook.theBook == this.theBook.sellBook.theBook
this.bookEntries != null
constants.BookSide.BUY has only one value
constants.BookSide.BUY != null
constants.BookSide.SELL has only one value
constants.BookSide.SELL != null
constants.BookSide.BUY.bookside has only one value
constants.BookSide.BUY.bookside != null
constants.BookSide.BUY.bookside.toString == "BUY"
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES != null
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[] elements != null
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside elements != null
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
constants.BookSide.SELL.bookside has only one value
constants.BookSide.SELL.bookside != null
constants.BookSide.SELL.bookside.toString == "SELL"
this.side.bookside != null
this.side.bookside.toString one of { "BUY", "SELL" }
this.trader.getClass().getName() == book.TradeProcessorPriceTimeImpl.class
this.theBook.product has only one value
this.theBook.product != null
this.theBook.product.toString == "GOOG"
this.theBook.buyBook.bookEntries has only one value
this.theBook.buyBook.bookEntries != null
this.theBook.buyBook.side has only one value
this.theBook.buyBook.side != null
this.theBook.buyBook.trader has only one value
this.theBook.buyBook.trader != null
this.theBook.buyBook.trader.getClass().getName() == book.TradeProcessorPriceTimeImpl.class
this.theBook.buyBook.theBook has only one value
this.theBook.buyBook.theBook != null
this.theBook.sellBook.bookEntries has only one value
this.theBook.sellBook.bookEntries != null
this.theBook.sellBook.side has only one value
this.theBook.sellBook.side != null
this.theBook.sellBook.trader has only one value
this.theBook.sellBook.trader != null
this.theBook.sellBook.trader.getClass().getName() == book.TradeProcessorPriceTimeImpl.class
this.theBook.sellBook.theBook has only one value
this.theBook.sellBook.theBook != null
this.theBook.userQuotes has only one value
this.theBook.userQuotes != null
this.theBook.oldEntries has only one value
this.theBook.oldEntries != null
size(constants.BookSide.$VALUES[]) == 2
constants.BookSide.$VALUES.getClass().getName() != this.trader.getClass().getName()
constants.BookSide.$VALUES.getClass().getName() != this.theBook.buyBook.trader.getClass().getName()
constants.BookSide.$VALUES.getClass().getName() != this.theBook.sellBook.trader.getClass().getName()
===========================================================================
book.ProductBookSide.ProductBookSide(book.ProductBook, constants.BookSide):::ENTER
arg0 == arg0.buyBook.theBook
arg0.buyBook.side == constants.BookSide.BUY
arg0 has only one value
arg0.product has only one value
arg0.product.toString == "GOOG"
arg0.buyBook.bookEntries has only one value
arg0.buyBook.side has only one value
arg0.buyBook.trader has only one value
arg0.buyBook.trader.getClass().getName() == book.TradeProcessorPriceTimeImpl.class
arg0.buyBook.theBook has only one value
arg0.sellBook == null
arg0.lastCurrentMarket == null
arg0.userQuotes has only one value
arg0.oldEntries has only one value
constants.BookSide.BUY has only one value
constants.BookSide.SELL has only one value
constants.BookSide.BUY.bookside has only one value
constants.BookSide.BUY.bookside.toString == "BUY"
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
constants.BookSide.SELL.bookside has only one value
constants.BookSide.SELL.bookside.toString == "SELL"
arg1.bookside.toString one of { "BUY", "SELL" }
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
book.ProductBookSide.ProductBookSide(book.ProductBook, constants.BookSide):::EXIT
this.side == orig(arg1)
constants.BookSide.BUY == arg0.buyBook.side
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == arg1.bookside
this.trader.getClass().getName() == arg0.buyBook.trader.getClass().getName()
this.theBook == arg0.buyBook.theBook
this.theBook == orig(arg0)
this.theBook.product == arg0.product
this.theBook.buyBook == arg0.buyBook
this.theBook.buyBook.bookEntries == arg0.buyBook.bookEntries
this.theBook.buyBook.side == arg0.buyBook.side
this.theBook.buyBook.trader == arg0.buyBook.trader
this.theBook.buyBook.trader.getClass().getName() == arg0.buyBook.trader.getClass().getName()
this.theBook.buyBook.theBook == arg0.buyBook.theBook
this.theBook.userQuotes == arg0.userQuotes
this.theBook.oldEntries == arg0.oldEntries
arg0.product == orig(arg0.product)
arg0.product.toString == orig(arg0.product.toString)
arg0.buyBook == orig(arg0.buyBook)
arg0.buyBook.bookEntries == orig(arg0.buyBook.bookEntries)
arg0.buyBook.side == orig(arg0.buyBook.side)
arg0.buyBook.trader == orig(arg0.buyBook.trader)
arg0.buyBook.trader.getClass().getName() == orig(arg0.buyBook.trader.getClass().getName())
arg0.buyBook.theBook == orig(arg0.buyBook.theBook)
arg0.sellBook == orig(arg0.sellBook)
arg0.lastCurrentMarket == orig(arg0.lastCurrentMarket)
arg0.userQuotes == orig(arg0.userQuotes)
arg0.oldEntries == orig(arg0.oldEntries)
arg1.bookside == orig(arg1.bookside)
arg1.bookside.toString == orig(arg1.bookside.toString)
this.theBook has only one value
this.theBook.sellBook == null
this.theBook.lastCurrentMarket == null
arg0.product has only one value
arg0.product.toString == "GOOG"
arg0.buyBook.bookEntries has only one value
arg0.buyBook.side has only one value
arg0.buyBook.trader has only one value
arg0.buyBook.trader.getClass().getName() == book.TradeProcessorPriceTimeImpl.class
arg0.buyBook.theBook has only one value
arg0.sellBook == null
arg0.lastCurrentMarket == null
arg0.userQuotes has only one value
arg0.oldEntries has only one value
arg1.bookside.toString one of { "BUY", "SELL" }
===========================================================================
book.ProductBookSide.addOldEntry(tradable.Tradable):::ENTER
constants.BookSide.SELL == this.theBook.sellBook.side
this.side != null
this.trader != null
this.theBook has only one value
this.theBook != null
this.theBook.buyBook has only one value
this.theBook.buyBook != null
this.theBook.sellBook has only one value
this.theBook.sellBook != null
this.theBook.lastCurrentMarket != null
arg0 != null
constants.BookSide.$VALUES.getClass().getName() != arg0.getClass().getName()
this.trader.getClass().getName() != arg0.getClass().getName()
===========================================================================
book.ProductBookSide.addOldEntry(tradable.Tradable):::EXIT
this.bookEntries == orig(this.bookEntries)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.BUY == orig(this.theBook.buyBook.side)
constants.BookSide.SELL == this.theBook.sellBook.side
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.theBook.sellBook.side)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.trader == orig(this.trader)
this.trader.getClass().getName() == orig(this.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.buyBook.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.sellBook.trader.getClass().getName())
this.theBook == orig(this.theBook)
this.theBook == orig(this.theBook.buyBook.theBook)
this.theBook == orig(this.theBook.sellBook.theBook)
this.theBook.product == orig(this.theBook.product)
this.theBook.product.toString == orig(this.theBook.product.toString)
this.theBook.buyBook == orig(this.theBook.buyBook)
this.theBook.buyBook.bookEntries == orig(this.theBook.buyBook.bookEntries)
this.theBook.buyBook.trader == orig(this.theBook.buyBook.trader)
this.theBook.sellBook == orig(this.theBook.sellBook)
this.theBook.sellBook.bookEntries == orig(this.theBook.sellBook.bookEntries)
this.theBook.sellBook.trader == orig(this.theBook.sellBook.trader)
this.theBook.lastCurrentMarket == orig(this.theBook.lastCurrentMarket)
this.theBook.lastCurrentMarket.toString == orig(this.theBook.lastCurrentMarket.toString)
this.theBook.userQuotes == orig(this.theBook.userQuotes)
this.theBook.oldEntries == orig(this.theBook.oldEntries)
this.side != null
this.trader != null
this.theBook has only one value
this.theBook != null
this.theBook.buyBook has only one value
this.theBook.buyBook != null
this.theBook.sellBook has only one value
this.theBook.sellBook != null
this.theBook.lastCurrentMarket != null
constants.BookSide.$VALUES.getClass().getName() != orig(arg0.getClass().getName())
this.trader.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
book.ProductBookSide.addToBook(tradable.Tradable):::ENTER
constants.BookSide.SELL == this.theBook.sellBook.side
this.side != null
this.trader != null
this.theBook has only one value
this.theBook != null
this.theBook.buyBook has only one value
this.theBook.buyBook != null
this.theBook.sellBook has only one value
this.theBook.sellBook != null
this.theBook.lastCurrentMarket != null
arg0 != null
constants.BookSide.$VALUES.getClass().getName() != arg0.getClass().getName()
this.trader.getClass().getName() != arg0.getClass().getName()
===========================================================================
book.ProductBookSide.addToBook(tradable.Tradable):::EXIT
this.bookEntries == orig(this.bookEntries)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.BUY == orig(this.theBook.buyBook.side)
constants.BookSide.SELL == this.theBook.sellBook.side
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.theBook.sellBook.side)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.trader == orig(this.trader)
this.trader.getClass().getName() == orig(this.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.buyBook.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.sellBook.trader.getClass().getName())
this.theBook == orig(this.theBook)
this.theBook == orig(this.theBook.buyBook.theBook)
this.theBook == orig(this.theBook.sellBook.theBook)
this.theBook.product == orig(this.theBook.product)
this.theBook.product.toString == orig(this.theBook.product.toString)
this.theBook.buyBook == orig(this.theBook.buyBook)
this.theBook.buyBook.bookEntries == orig(this.theBook.buyBook.bookEntries)
this.theBook.buyBook.trader == orig(this.theBook.buyBook.trader)
this.theBook.sellBook == orig(this.theBook.sellBook)
this.theBook.sellBook.bookEntries == orig(this.theBook.sellBook.bookEntries)
this.theBook.sellBook.trader == orig(this.theBook.sellBook.trader)
this.theBook.lastCurrentMarket == orig(this.theBook.lastCurrentMarket)
this.theBook.lastCurrentMarket.toString == orig(this.theBook.lastCurrentMarket.toString)
this.theBook.userQuotes == orig(this.theBook.userQuotes)
this.theBook.oldEntries == orig(this.theBook.oldEntries)
this.side != null
this.trader != null
this.theBook has only one value
this.theBook != null
this.theBook.buyBook has only one value
this.theBook.buyBook != null
this.theBook.sellBook has only one value
this.theBook.sellBook != null
this.theBook.lastCurrentMarket != null
constants.BookSide.$VALUES.getClass().getName() != orig(arg0.getClass().getName())
this.trader.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
book.ProductBookSide.cancelAll():::ENTER
constants.BookSide.SELL == this.theBook.sellBook.side
this.theBook has only one value
this.theBook.buyBook has only one value
this.theBook.sellBook has only one value
this.theBook.lastCurrentMarket.toString one of { "$641.10100$0.000", "$641.14555$0.000" }
===========================================================================
book.ProductBookSide.cancelAll():::EXIT
this.bookEntries == orig(this.bookEntries)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.BUY == orig(this.theBook.buyBook.side)
constants.BookSide.SELL == this.theBook.sellBook.side
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.theBook.sellBook.side)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.trader == orig(this.trader)
this.trader.getClass().getName() == orig(this.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.buyBook.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.sellBook.trader.getClass().getName())
this.theBook == orig(this.theBook)
this.theBook == orig(this.theBook.buyBook.theBook)
this.theBook == orig(this.theBook.sellBook.theBook)
this.theBook.product == orig(this.theBook.product)
this.theBook.product.toString == orig(this.theBook.product.toString)
this.theBook.buyBook == orig(this.theBook.buyBook)
this.theBook.buyBook.bookEntries == orig(this.theBook.buyBook.bookEntries)
this.theBook.buyBook.trader == orig(this.theBook.buyBook.trader)
this.theBook.sellBook == orig(this.theBook.sellBook)
this.theBook.sellBook.bookEntries == orig(this.theBook.sellBook.bookEntries)
this.theBook.sellBook.trader == orig(this.theBook.sellBook.trader)
this.theBook.lastCurrentMarket == orig(this.theBook.lastCurrentMarket)
this.theBook.lastCurrentMarket.toString == orig(this.theBook.lastCurrentMarket.toString)
this.theBook.userQuotes == orig(this.theBook.userQuotes)
this.theBook.oldEntries == orig(this.theBook.oldEntries)
this.theBook has only one value
this.theBook.buyBook has only one value
this.theBook.sellBook has only one value
this.theBook.lastCurrentMarket.toString one of { "$641.10100$0.000", "$641.14555$0.000" }
===========================================================================
book.ProductBookSide.clearIfEmpty(price.Price):::ENTER
constants.BookSide.SELL == this.theBook.sellBook.side
this.theBook has only one value
this.theBook.buyBook has only one value
this.theBook.sellBook has only one value
this.theBook.lastCurrentMarket.toString one of { "$641.14555$641.1545", "$641.15105$641.15150", "$641.30369$0.000" }
arg0.MKT == false
===========================================================================
book.ProductBookSide.clearIfEmpty(price.Price):::EXIT
this.bookEntries == orig(this.bookEntries)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.BUY == orig(this.theBook.buyBook.side)
constants.BookSide.SELL == this.theBook.sellBook.side
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.theBook.sellBook.side)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.trader == orig(this.trader)
this.trader.getClass().getName() == orig(this.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.buyBook.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.sellBook.trader.getClass().getName())
this.theBook == orig(this.theBook)
this.theBook == orig(this.theBook.buyBook.theBook)
this.theBook == orig(this.theBook.sellBook.theBook)
this.theBook.product == orig(this.theBook.product)
this.theBook.product.toString == orig(this.theBook.product.toString)
this.theBook.buyBook == orig(this.theBook.buyBook)
this.theBook.buyBook.bookEntries == orig(this.theBook.buyBook.bookEntries)
this.theBook.buyBook.trader == orig(this.theBook.buyBook.trader)
this.theBook.sellBook == orig(this.theBook.sellBook)
this.theBook.sellBook.bookEntries == orig(this.theBook.sellBook.bookEntries)
this.theBook.sellBook.trader == orig(this.theBook.sellBook.trader)
this.theBook.lastCurrentMarket == orig(this.theBook.lastCurrentMarket)
this.theBook.lastCurrentMarket.toString == orig(this.theBook.lastCurrentMarket.toString)
this.theBook.userQuotes == orig(this.theBook.userQuotes)
this.theBook.oldEntries == orig(this.theBook.oldEntries)
arg0.VALUE == orig(arg0.VALUE)
arg0.MKT == orig(arg0.MKT)
this.theBook has only one value
this.theBook.buyBook has only one value
this.theBook.sellBook has only one value
this.theBook.lastCurrentMarket.toString one of { "$641.14555$641.1545", "$641.15105$641.15150", "$641.30369$0.000" }
arg0.MKT == false
===========================================================================
book.ProductBookSide.getBookDepth():::ENTER
constants.BookSide.SELL == this.theBook.sellBook.side
this.side != null
this.trader != null
this.theBook has only one value
this.theBook != null
this.theBook.buyBook has only one value
this.theBook.buyBook != null
this.theBook.sellBook has only one value
this.theBook.sellBook != null
this.theBook.lastCurrentMarket != null
===========================================================================
book.ProductBookSide.getBookDepth():::EXIT177
this.theBook.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.14555$0.000" }
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].toString == [<Empty>]
return[].toString elements == "<Empty>"
size(return[]) == 1
===========================================================================
book.ProductBookSide.getBookDepth():::EXIT199
===========================================================================
book.ProductBookSide.getBookDepth():::EXIT
this.bookEntries == orig(this.bookEntries)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.BUY == orig(this.theBook.buyBook.side)
constants.BookSide.SELL == this.theBook.sellBook.side
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.theBook.sellBook.side)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.trader == orig(this.trader)
this.trader.getClass().getName() == orig(this.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.buyBook.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.sellBook.trader.getClass().getName())
this.theBook == orig(this.theBook)
this.theBook == orig(this.theBook.buyBook.theBook)
this.theBook == orig(this.theBook.sellBook.theBook)
this.theBook.product == orig(this.theBook.product)
this.theBook.product.toString == orig(this.theBook.product.toString)
this.theBook.buyBook == orig(this.theBook.buyBook)
this.theBook.buyBook.bookEntries == orig(this.theBook.buyBook.bookEntries)
this.theBook.buyBook.trader == orig(this.theBook.buyBook.trader)
this.theBook.sellBook == orig(this.theBook.sellBook)
this.theBook.sellBook.bookEntries == orig(this.theBook.sellBook.bookEntries)
this.theBook.sellBook.trader == orig(this.theBook.sellBook.trader)
this.theBook.lastCurrentMarket == orig(this.theBook.lastCurrentMarket)
this.theBook.lastCurrentMarket.toString == orig(this.theBook.lastCurrentMarket.toString)
this.theBook.userQuotes == orig(this.theBook.userQuotes)
this.theBook.oldEntries == orig(this.theBook.oldEntries)
this.side != null
this.trader != null
this.theBook has only one value
this.theBook != null
this.theBook.buyBook has only one value
this.theBook.buyBook != null
this.theBook.sellBook has only one value
this.theBook.sellBook != null
this.theBook.lastCurrentMarket != null
return != null
return.getClass().getName() == java.lang.String[].class
return[] elements != null
size(return[]) one of { 1, 5, 6 }
constants.BookSide.$VALUES.getClass().getName() != return.getClass().getName()
this.trader.getClass().getName() != return.getClass().getName()
===========================================================================
book.ProductBookSide.getEntriesAtPrice(price.Price):::ENTER
constants.BookSide.SELL == this.theBook.sellBook.side
this.side != null
this.trader != null
this.theBook has only one value
this.theBook != null
this.theBook.buyBook has only one value
this.theBook.buyBook != null
this.theBook.sellBook has only one value
this.theBook.sellBook != null
this.theBook.lastCurrentMarket != null
arg0 != null
arg0.MKT == false
===========================================================================
book.ProductBookSide.getEntriesAtPrice(price.Price):::EXIT212
return == null
===========================================================================
book.ProductBookSide.getEntriesAtPrice(price.Price):::EXIT214
return != null
===========================================================================
book.ProductBookSide.getEntriesAtPrice(price.Price):::EXIT
this.bookEntries == orig(this.bookEntries)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.BUY == orig(this.theBook.buyBook.side)
constants.BookSide.SELL == this.theBook.sellBook.side
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.theBook.sellBook.side)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.trader == orig(this.trader)
this.trader.getClass().getName() == orig(this.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.buyBook.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.sellBook.trader.getClass().getName())
this.theBook == orig(this.theBook)
this.theBook == orig(this.theBook.buyBook.theBook)
this.theBook == orig(this.theBook.sellBook.theBook)
this.theBook.product == orig(this.theBook.product)
this.theBook.product.toString == orig(this.theBook.product.toString)
this.theBook.buyBook == orig(this.theBook.buyBook)
this.theBook.buyBook.bookEntries == orig(this.theBook.buyBook.bookEntries)
this.theBook.buyBook.trader == orig(this.theBook.buyBook.trader)
this.theBook.sellBook == orig(this.theBook.sellBook)
this.theBook.sellBook.bookEntries == orig(this.theBook.sellBook.bookEntries)
this.theBook.sellBook.trader == orig(this.theBook.sellBook.trader)
this.theBook.lastCurrentMarket == orig(this.theBook.lastCurrentMarket)
this.theBook.lastCurrentMarket.toString == orig(this.theBook.lastCurrentMarket.toString)
this.theBook.userQuotes == orig(this.theBook.userQuotes)
this.theBook.oldEntries == orig(this.theBook.oldEntries)
arg0.VALUE == orig(arg0.VALUE)
arg0.MKT == orig(arg0.MKT)
(return != null)  ==>  (return[] elements != null)
(return != null)  ==>  (size(return[]) one of { 0, 1, 2 })
this.side != null
this.trader != null
this.theBook has only one value
this.theBook != null
this.theBook.buyBook has only one value
this.theBook.buyBook != null
this.theBook.sellBook has only one value
this.theBook.sellBook != null
this.theBook.lastCurrentMarket != null
arg0.MKT == false
return[] elements != null
size(return[]) one of { 0, 1, 2 }
===========================================================================
book.ProductBookSide.getEntriesAtTopOfBook():::ENTER
constants.BookSide.SELL == this.theBook.sellBook.side
this.theBook has only one value
this.theBook.buyBook has only one value
this.theBook.sellBook has only one value
===========================================================================
book.ProductBookSide.getEntriesAtTopOfBook():::EXIT160
===========================================================================
book.ProductBookSide.getEntriesAtTopOfBook():::EXIT
this.bookEntries == orig(this.bookEntries)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.BUY == orig(this.theBook.buyBook.side)
constants.BookSide.SELL == this.theBook.sellBook.side
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.theBook.sellBook.side)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.trader == orig(this.trader)
this.trader.getClass().getName() == orig(this.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.buyBook.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.sellBook.trader.getClass().getName())
this.theBook == orig(this.theBook)
this.theBook == orig(this.theBook.buyBook.theBook)
this.theBook == orig(this.theBook.sellBook.theBook)
this.theBook.product == orig(this.theBook.product)
this.theBook.product.toString == orig(this.theBook.product.toString)
this.theBook.buyBook == orig(this.theBook.buyBook)
this.theBook.buyBook.bookEntries == orig(this.theBook.buyBook.bookEntries)
this.theBook.buyBook.trader == orig(this.theBook.buyBook.trader)
this.theBook.sellBook == orig(this.theBook.sellBook)
this.theBook.sellBook.bookEntries == orig(this.theBook.sellBook.bookEntries)
this.theBook.sellBook.trader == orig(this.theBook.sellBook.trader)
this.theBook.lastCurrentMarket == orig(this.theBook.lastCurrentMarket)
this.theBook.lastCurrentMarket.toString == orig(this.theBook.lastCurrentMarket.toString)
this.theBook.userQuotes == orig(this.theBook.userQuotes)
this.theBook.oldEntries == orig(this.theBook.oldEntries)
this.theBook has only one value
this.theBook.buyBook has only one value
this.theBook.sellBook has only one value
return[].getClass().getName() one of { [tradable.Order], [tradable.QuoteSide] }
size(return[]) == 1
===========================================================================
book.ProductBookSide.getOrdersWithRemainingQty(java.lang.String):::ENTER
constants.BookSide.SELL == this.theBook.sellBook.side
this.theBook has only one value
this.theBook.buyBook has only one value
this.theBook.sellBook has only one value
this.theBook.lastCurrentMarket has only one value
this.theBook.lastCurrentMarket.toString == "$641.14555$0.000"
arg0 has only one value
arg0.toString == "REX"
===========================================================================
book.ProductBookSide.getOrdersWithRemainingQty(java.lang.String):::EXIT
this.bookEntries == orig(this.bookEntries)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.BUY == orig(this.theBook.buyBook.side)
constants.BookSide.SELL == this.theBook.sellBook.side
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.theBook.sellBook.side)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.trader == orig(this.trader)
this.trader.getClass().getName() == orig(this.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.buyBook.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.sellBook.trader.getClass().getName())
this.theBook == orig(this.theBook)
this.theBook == orig(this.theBook.buyBook.theBook)
this.theBook == orig(this.theBook.sellBook.theBook)
this.theBook.product == orig(this.theBook.product)
this.theBook.product.toString == orig(this.theBook.product.toString)
this.theBook.buyBook == orig(this.theBook.buyBook)
this.theBook.buyBook.bookEntries == orig(this.theBook.buyBook.bookEntries)
this.theBook.buyBook.trader == orig(this.theBook.buyBook.trader)
this.theBook.sellBook == orig(this.theBook.sellBook)
this.theBook.sellBook.bookEntries == orig(this.theBook.sellBook.bookEntries)
this.theBook.sellBook.trader == orig(this.theBook.sellBook.trader)
this.theBook.lastCurrentMarket == orig(this.theBook.lastCurrentMarket)
this.theBook.lastCurrentMarket.toString == orig(this.theBook.lastCurrentMarket.toString)
this.theBook.userQuotes == orig(this.theBook.userQuotes)
this.theBook.oldEntries == orig(this.theBook.oldEntries)
arg0.toString == orig(arg0.toString)
this.theBook has only one value
this.theBook.buyBook has only one value
this.theBook.sellBook has only one value
this.theBook.lastCurrentMarket has only one value
this.theBook.lastCurrentMarket.toString == "$641.14555$0.000"
arg0.toString == "REX"
return[].getClass().getName() elements == tradable.TradableDTO.class
return[].getClass().getName() one of { [], [tradable.TradableDTO, tradable.TradableDTO, tradable.TradableDTO, tradable.TradableDTO, tradable.TradableDTO] }
size(return[]) one of { 0, 5 }
===========================================================================
book.ProductBookSide.getSide():::ENTER
constants.BookSide.SELL == this.theBook.sellBook.side
this.side != null
this.trader != null
this.theBook has only one value
this.theBook != null
this.theBook.buyBook has only one value
this.theBook.buyBook != null
this.theBook.sellBook has only one value
this.theBook.sellBook != null
this.theBook.lastCurrentMarket != null
===========================================================================
book.ProductBookSide.getSide():::EXIT
this.bookEntries == orig(this.bookEntries)
this.side == return
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.BUY == orig(this.theBook.buyBook.side)
constants.BookSide.SELL == this.theBook.sellBook.side
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.theBook.sellBook.side)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == return.bookside
this.side.bookside.toString == orig(this.side.bookside.toString)
this.trader == orig(this.trader)
this.trader.getClass().getName() == orig(this.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.buyBook.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.sellBook.trader.getClass().getName())
this.theBook == orig(this.theBook)
this.theBook == orig(this.theBook.buyBook.theBook)
this.theBook == orig(this.theBook.sellBook.theBook)
this.theBook.product == orig(this.theBook.product)
this.theBook.product.toString == orig(this.theBook.product.toString)
this.theBook.buyBook == orig(this.theBook.buyBook)
this.theBook.buyBook.bookEntries == orig(this.theBook.buyBook.bookEntries)
this.theBook.buyBook.trader == orig(this.theBook.buyBook.trader)
this.theBook.sellBook == orig(this.theBook.sellBook)
this.theBook.sellBook.bookEntries == orig(this.theBook.sellBook.bookEntries)
this.theBook.sellBook.trader == orig(this.theBook.sellBook.trader)
this.theBook.lastCurrentMarket == orig(this.theBook.lastCurrentMarket)
this.theBook.lastCurrentMarket.toString == orig(this.theBook.lastCurrentMarket.toString)
this.theBook.userQuotes == orig(this.theBook.userQuotes)
this.theBook.oldEntries == orig(this.theBook.oldEntries)
return == orig(this.side)
return.bookside == orig(this.side.bookside)
this.trader != null
this.theBook has only one value
this.theBook != null
this.theBook.buyBook has only one value
this.theBook.buyBook != null
this.theBook.sellBook has only one value
this.theBook.sellBook != null
this.theBook.lastCurrentMarket != null
return != null
return.bookside != null
return.bookside.toString one of { "BUY", "SELL" }
===========================================================================
book.ProductBookSide.isEmpty():::ENTER
constants.BookSide.SELL == this.theBook.sellBook.side
this.side != null
this.trader != null
this.theBook has only one value
this.theBook != null
this.theBook.buyBook has only one value
this.theBook.buyBook != null
this.theBook.sellBook has only one value
this.theBook.sellBook != null
this.theBook.lastCurrentMarket != null
===========================================================================
book.ProductBookSide.isEmpty():::EXIT318
return == true
===========================================================================
book.ProductBookSide.isEmpty():::EXIT318;condition="return == true"
===========================================================================
book.ProductBookSide.isEmpty():::EXIT320
return == false
===========================================================================
book.ProductBookSide.isEmpty():::EXIT320;condition="not(return == true)"
===========================================================================
book.ProductBookSide.isEmpty():::EXIT
this.bookEntries == orig(this.bookEntries)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.BUY == orig(this.theBook.buyBook.side)
constants.BookSide.SELL == this.theBook.sellBook.side
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.theBook.sellBook.side)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.trader == orig(this.trader)
this.trader.getClass().getName() == orig(this.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.buyBook.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.sellBook.trader.getClass().getName())
this.theBook == orig(this.theBook)
this.theBook == orig(this.theBook.buyBook.theBook)
this.theBook == orig(this.theBook.sellBook.theBook)
this.theBook.product == orig(this.theBook.product)
this.theBook.product.toString == orig(this.theBook.product.toString)
this.theBook.buyBook == orig(this.theBook.buyBook)
this.theBook.buyBook.bookEntries == orig(this.theBook.buyBook.bookEntries)
this.theBook.buyBook.trader == orig(this.theBook.buyBook.trader)
this.theBook.sellBook == orig(this.theBook.sellBook)
this.theBook.sellBook.bookEntries == orig(this.theBook.sellBook.bookEntries)
this.theBook.sellBook.trader == orig(this.theBook.sellBook.trader)
this.theBook.lastCurrentMarket == orig(this.theBook.lastCurrentMarket)
this.theBook.lastCurrentMarket.toString == orig(this.theBook.lastCurrentMarket.toString)
this.theBook.userQuotes == orig(this.theBook.userQuotes)
this.theBook.oldEntries == orig(this.theBook.oldEntries)
this.side != null
this.trader != null
this.theBook has only one value
this.theBook != null
this.theBook.buyBook has only one value
this.theBook.buyBook != null
this.theBook.sellBook has only one value
this.theBook.sellBook != null
this.theBook.lastCurrentMarket != null
===========================================================================
book.ProductBookSide.isEmpty():::EXIT;condition="return == true"
return == true
===========================================================================
book.ProductBookSide.isEmpty():::EXIT;condition="not(return == true)"
return == false
===========================================================================
book.ProductBookSide.mergeFills(java.util.HashMap, java.util.HashMap):::ENTER
constants.BookSide.SELL == this.theBook.sellBook.side
this.theBook has only one value
this.theBook.buyBook has only one value
this.theBook.sellBook has only one value
===========================================================================
book.ProductBookSide.mergeFills(java.util.HashMap, java.util.HashMap):::EXIT517
===========================================================================
book.ProductBookSide.mergeFills(java.util.HashMap, java.util.HashMap):::EXIT529
this.bookEntries == this.theBook.sellBook.bookEntries
this.bookEntries == orig(this.theBook.sellBook.bookEntries)
this.side == constants.BookSide.SELL
constants.BookSide.SELL == orig(this.side)
this.trader == this.theBook.sellBook.trader
this.trader == orig(this.theBook.sellBook.trader)
this.theBook.sellBook == orig(this)
this.bookEntries has only one value
this.side.bookside has only one value
this.side.bookside.toString == "SELL"
this.trader has only one value
this.theBook.lastCurrentMarket has only one value
this.theBook.lastCurrentMarket.toString == "$641.14555$641.1545"
orig(this) has only one value
===========================================================================
book.ProductBookSide.mergeFills(java.util.HashMap, java.util.HashMap):::EXIT
this.bookEntries == orig(this.bookEntries)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.BUY == orig(this.theBook.buyBook.side)
constants.BookSide.SELL == this.theBook.sellBook.side
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.theBook.sellBook.side)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.trader == orig(this.trader)
this.trader.getClass().getName() == orig(this.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.buyBook.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.sellBook.trader.getClass().getName())
this.theBook == orig(this.theBook)
this.theBook == orig(this.theBook.buyBook.theBook)
this.theBook == orig(this.theBook.sellBook.theBook)
this.theBook.product == orig(this.theBook.product)
this.theBook.product.toString == orig(this.theBook.product.toString)
this.theBook.buyBook == orig(this.theBook.buyBook)
this.theBook.buyBook.bookEntries == orig(this.theBook.buyBook.bookEntries)
this.theBook.buyBook.trader == orig(this.theBook.buyBook.trader)
this.theBook.sellBook == orig(this.theBook.sellBook)
this.theBook.sellBook.bookEntries == orig(this.theBook.sellBook.bookEntries)
this.theBook.sellBook.trader == orig(this.theBook.sellBook.trader)
this.theBook.lastCurrentMarket == orig(this.theBook.lastCurrentMarket)
this.theBook.lastCurrentMarket.toString == orig(this.theBook.lastCurrentMarket.toString)
this.theBook.userQuotes == orig(this.theBook.userQuotes)
this.theBook.oldEntries == orig(this.theBook.oldEntries)
this.theBook has only one value
this.theBook.buyBook has only one value
this.theBook.sellBook has only one value
===========================================================================
book.ProductBookSide.removeQuote(java.lang.String):::ENTER
constants.BookSide.SELL == this.theBook.sellBook.side
this.theBook has only one value
this.theBook.buyBook has only one value
this.theBook.sellBook has only one value
this.theBook.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.10120$641.15150", "$641.14555$0.000" }
arg0.toString one of { "ANN", "REX" }
===========================================================================
book.ProductBookSide.removeQuote(java.lang.String):::EXIT381
return.product == orig(this.theBook.product)
this.theBook.lastCurrentMarket.toString one of { "$641.10120$641.15150", "$641.14555$0.000" }
===========================================================================
book.ProductBookSide.removeQuote(java.lang.String):::EXIT387
this.theBook.lastCurrentMarket has only one value
this.theBook.lastCurrentMarket.toString == "$0.000$0.000"
arg0.toString == "REX"
return == null
orig(arg0) has only one value
===========================================================================
book.ProductBookSide.removeQuote(java.lang.String):::EXIT
this.bookEntries == orig(this.bookEntries)
this.side == return.side
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.BUY == orig(this.theBook.buyBook.side)
constants.BookSide.SELL == this.theBook.sellBook.side
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.theBook.sellBook.side)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == return.side.bookside
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.trader == orig(this.trader)
this.trader.getClass().getName() == orig(this.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.buyBook.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.sellBook.trader.getClass().getName())
this.theBook == orig(this.theBook)
this.theBook == orig(this.theBook.buyBook.theBook)
this.theBook == orig(this.theBook.sellBook.theBook)
this.theBook.product == return.product
this.theBook.product == orig(this.theBook.product)
this.theBook.product.toString == orig(this.theBook.product.toString)
this.theBook.buyBook == orig(this.theBook.buyBook)
this.theBook.buyBook.bookEntries == orig(this.theBook.buyBook.bookEntries)
this.theBook.buyBook.trader == orig(this.theBook.buyBook.trader)
this.theBook.sellBook == orig(this.theBook.sellBook)
this.theBook.sellBook.bookEntries == orig(this.theBook.sellBook.bookEntries)
this.theBook.sellBook.trader == orig(this.theBook.sellBook.trader)
this.theBook.lastCurrentMarket == orig(this.theBook.lastCurrentMarket)
this.theBook.lastCurrentMarket.toString == orig(this.theBook.lastCurrentMarket.toString)
this.theBook.userQuotes == orig(this.theBook.userQuotes)
this.theBook.oldEntries == orig(this.theBook.oldEntries)
arg0.toString == orig(arg0.toString)
return.originalVolume == return.remainingVolume
return.user == orig(arg0)
(this.theBook.lastCurrentMarket.toString == "$0.000$0.000")  <==>  (return == null)
(this.theBook.lastCurrentMarket.toString == "$0.000$0.000")  ==>  (arg0.toString == "REX")
(this.theBook.lastCurrentMarket.toString == "$0.000$0.000")  ==>  (orig(arg0) has only one value)
(this.theBook.lastCurrentMarket.toString == "$0.000$0.000")  ==>  (this.theBook.lastCurrentMarket has only one value)
(this.theBook.lastCurrentMarket.toString one of { "$641.10120$641.15150", "$641.14555$0.000" })  ==>  (arg0.toString one of { "ANN", "REX" })
(this.theBook.lastCurrentMarket.toString one of { "$641.10120$641.15150", "$641.14555$0.000" })  ==>  (return.id.toString one of { "ANNGOOG$641.103488477974939686", "REXGOOG$641.103488477951429799", "REXGOOG$641.153488477952694597" })
(this.theBook.lastCurrentMarket.toString one of { "$641.10120$641.15150", "$641.14555$0.000" })  ==>  (return.originalVolume one of { 120, 150 })
(this.theBook.lastCurrentMarket.toString one of { "$641.10120$641.15150", "$641.14555$0.000" })  ==>  (return.price.VALUE one of { 64110, 64115 })
(this.theBook.lastCurrentMarket.toString one of { "$641.10120$641.15150", "$641.14555$0.000" })  ==>  (return.product has only one value)
(this.theBook.lastCurrentMarket.toString one of { "$641.10120$641.15150", "$641.14555$0.000" })  ==>  (return.product.toString == "GOOG")
(this.theBook.lastCurrentMarket.toString one of { "$641.10120$641.15150", "$641.14555$0.000" })  ==>  (return.side.bookside.toString one of { "BUY", "SELL" })
(this.theBook.lastCurrentMarket.toString one of { "$641.10120$641.15150", "$641.14555$0.000" })  ==>  (return.user == orig(arg0))
(this.theBook.lastCurrentMarket.toString one of { "$641.10120$641.15150", "$641.14555$0.000" })  ==>  (return.user.toString one of { "ANN", "REX" })
(this.theBook.lastCurrentMarket.toString one of { "$641.10120$641.15150", "$641.14555$0.000" })  ==>  (this.side == return.side)
(this.theBook.lastCurrentMarket.toString one of { "$641.10120$641.15150", "$641.14555$0.000" })  ==>  (this.side.bookside == return.side.bookside)
(this.theBook.lastCurrentMarket.toString one of { "$641.10120$641.15150", "$641.14555$0.000" })  ==>  (this.theBook.product == return.product)
this.theBook has only one value
this.theBook.buyBook has only one value
this.theBook.sellBook has only one value
this.theBook.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.10120$641.15150", "$641.14555$0.000" }
arg0.toString one of { "ANN", "REX" }
return.product has only one value
return.product.toString == "GOOG"
return.price.VALUE one of { 64110, 64115 }
return.price.MKT == false
return.originalVolume one of { 120, 150 }
return.cancelledVolume == 0
return.user.toString one of { "ANN", "REX" }
return.side.bookside.toString one of { "BUY", "SELL" }
return.isQuote == true
return.id.toString one of { "ANNGOOG$641.103488477974939686", "REXGOOG$641.103488477951429799", "REXGOOG$641.153488477952694597" }
===========================================================================
book.ProductBookSide.removeTradable(tradable.Tradable):::ENTER
this == this.theBook.buyBook
this.bookEntries == this.theBook.buyBook.bookEntries
this.side == constants.BookSide.BUY
constants.BookSide.SELL == this.theBook.sellBook.side
this.trader == this.theBook.buyBook.trader
this has only one value
this.bookEntries has only one value
this.side.bookside has only one value
this.side.bookside.toString == "BUY"
this.trader has only one value
this.theBook has only one value
this.theBook.buyBook has only one value
this.theBook.sellBook has only one value
this.theBook.lastCurrentMarket has only one value
this.theBook.lastCurrentMarket.toString == "$641.15105$641.15150"
arg0 has only one value
arg0.getClass().getName() == tradable.Order.class
===========================================================================
book.ProductBookSide.removeTradable(tradable.Tradable):::EXIT
this.bookEntries == this.theBook.buyBook.bookEntries
this.bookEntries == orig(this.bookEntries)
this.bookEntries == orig(this.theBook.buyBook.bookEntries)
this.side == constants.BookSide.BUY
constants.BookSide.BUY == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.BUY == orig(this.theBook.buyBook.side)
constants.BookSide.SELL == this.theBook.sellBook.side
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.theBook.sellBook.side)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.trader == this.theBook.buyBook.trader
this.trader == orig(this.trader)
this.trader == orig(this.theBook.buyBook.trader)
this.trader.getClass().getName() == orig(this.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.buyBook.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.sellBook.trader.getClass().getName())
this.theBook == orig(this.theBook)
this.theBook == orig(this.theBook.buyBook.theBook)
this.theBook == orig(this.theBook.sellBook.theBook)
this.theBook.product == orig(this.theBook.product)
this.theBook.product.toString == orig(this.theBook.product.toString)
this.theBook.buyBook == orig(this)
this.theBook.buyBook == orig(this.theBook.buyBook)
this.theBook.sellBook == orig(this.theBook.sellBook)
this.theBook.sellBook.bookEntries == orig(this.theBook.sellBook.bookEntries)
this.theBook.sellBook.trader == orig(this.theBook.sellBook.trader)
this.theBook.lastCurrentMarket == orig(this.theBook.lastCurrentMarket)
this.theBook.lastCurrentMarket.toString == orig(this.theBook.lastCurrentMarket.toString)
this.theBook.userQuotes == orig(this.theBook.userQuotes)
this.theBook.oldEntries == orig(this.theBook.oldEntries)
this.bookEntries has only one value
this.side.bookside has only one value
this.side.bookside.toString == "BUY"
this.trader has only one value
this.theBook has only one value
this.theBook.buyBook has only one value
this.theBook.sellBook has only one value
this.theBook.lastCurrentMarket has only one value
this.theBook.lastCurrentMarket.toString == "$641.15105$641.15150"
===========================================================================
book.ProductBookSide.setBookSide(constants.BookSide):::ENTER
this.side == null
this.theBook has only one value
this.theBook.sellBook == null
this.theBook.lastCurrentMarket == null
arg0.bookside.toString one of { "BUY", "SELL" }
===========================================================================
book.ProductBookSide.setBookSide(constants.BookSide):::EXIT
this.bookEntries == orig(this.bookEntries)
this.side == orig(arg0)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == arg0.bookside
this.trader == orig(this.trader)
this.trader.getClass().getName() == orig(this.trader.getClass().getName())
this.theBook == orig(this.theBook)
this.theBook.product == orig(this.theBook.product)
this.theBook.product.toString == orig(this.theBook.product.toString)
this.theBook.buyBook == orig(this.theBook.buyBook)
this.theBook.buyBook.bookEntries == orig(this.theBook.buyBook.bookEntries)
this.theBook.buyBook.side == orig(this.theBook.buyBook.side)
this.theBook.buyBook.trader == orig(this.theBook.buyBook.trader)
this.theBook.buyBook.trader.getClass().getName() == orig(this.theBook.buyBook.trader.getClass().getName())
this.theBook.buyBook.theBook == orig(this.theBook.buyBook.theBook)
this.theBook.sellBook == orig(this.theBook.sellBook)
this.theBook.lastCurrentMarket == orig(this.theBook.lastCurrentMarket)
this.theBook.userQuotes == orig(this.theBook.userQuotes)
this.theBook.oldEntries == orig(this.theBook.oldEntries)
arg0.bookside == orig(arg0.bookside)
arg0.bookside.toString == orig(arg0.bookside.toString)
this.theBook has only one value
this.theBook.sellBook == null
this.theBook.lastCurrentMarket == null
arg0.bookside.toString one of { "BUY", "SELL" }
===========================================================================
book.ProductBookSide.setProductBook(book.ProductBook):::ENTER
constants.BookSide.BUY == arg0.buyBook.side
this.trader.getClass().getName() == arg0.buyBook.trader.getClass().getName()
arg0 == arg0.buyBook.theBook
this.side == null
this.theBook == null
arg0 has only one value
arg0.product has only one value
arg0.product.toString == "GOOG"
arg0.buyBook.bookEntries has only one value
arg0.buyBook.side has only one value
arg0.buyBook.trader has only one value
arg0.buyBook.trader.getClass().getName() == book.TradeProcessorPriceTimeImpl.class
arg0.buyBook.theBook has only one value
arg0.sellBook == null
arg0.lastCurrentMarket == null
arg0.userQuotes has only one value
arg0.oldEntries has only one value
===========================================================================
book.ProductBookSide.setProductBook(book.ProductBook):::EXIT
this.bookEntries == orig(this.bookEntries)
this.side == orig(this.side)
constants.BookSide.BUY == arg0.buyBook.side
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.trader == orig(this.trader)
this.trader.getClass().getName() == arg0.buyBook.trader.getClass().getName()
this.trader.getClass().getName() == orig(this.trader.getClass().getName())
this.theBook == arg0.buyBook.theBook
this.theBook == orig(arg0)
this.theBook.product == arg0.product
this.theBook.buyBook == arg0.buyBook
this.theBook.buyBook.bookEntries == arg0.buyBook.bookEntries
this.theBook.buyBook.side == arg0.buyBook.side
this.theBook.buyBook.trader == arg0.buyBook.trader
this.theBook.buyBook.trader.getClass().getName() == arg0.buyBook.trader.getClass().getName()
this.theBook.buyBook.theBook == arg0.buyBook.theBook
this.theBook.userQuotes == arg0.userQuotes
this.theBook.oldEntries == arg0.oldEntries
arg0.product == orig(arg0.product)
arg0.product.toString == orig(arg0.product.toString)
arg0.buyBook == orig(arg0.buyBook)
arg0.buyBook.bookEntries == orig(arg0.buyBook.bookEntries)
arg0.buyBook.side == orig(arg0.buyBook.side)
arg0.buyBook.trader == orig(arg0.buyBook.trader)
arg0.buyBook.trader.getClass().getName() == orig(arg0.buyBook.trader.getClass().getName())
arg0.buyBook.theBook == orig(arg0.buyBook.theBook)
arg0.sellBook == orig(arg0.sellBook)
arg0.lastCurrentMarket == orig(arg0.lastCurrentMarket)
arg0.userQuotes == orig(arg0.userQuotes)
arg0.oldEntries == orig(arg0.oldEntries)
this.side == null
this.theBook has only one value
this.theBook.sellBook == null
this.theBook.lastCurrentMarket == null
arg0.product has only one value
arg0.product.toString == "GOOG"
arg0.buyBook.bookEntries has only one value
arg0.buyBook.side has only one value
arg0.buyBook.trader has only one value
arg0.buyBook.trader.getClass().getName() == book.TradeProcessorPriceTimeImpl.class
arg0.buyBook.theBook has only one value
arg0.sellBook == null
arg0.lastCurrentMarket == null
arg0.userQuotes has only one value
arg0.oldEntries has only one value
===========================================================================
book.ProductBookSide.setTrader():::ENTER
this.side == null
this.trader == null
this.theBook == null
===========================================================================
book.ProductBookSide.setTrader():::EXIT
this.bookEntries == orig(this.bookEntries)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.theBook == orig(this.theBook)
this.side == null
this.theBook == null
===========================================================================
book.ProductBookSide.submitOrderCancel(java.lang.String):::ENTER
this == this.theBook.buyBook
this.bookEntries == this.theBook.buyBook.bookEntries
this.side == constants.BookSide.BUY
constants.BookSide.SELL == this.theBook.sellBook.side
this.trader == this.theBook.buyBook.trader
this has only one value
this.bookEntries has only one value
this.side.bookside has only one value
this.side.bookside.toString == "BUY"
this.trader has only one value
this.theBook has only one value
this.theBook.buyBook has only one value
this.theBook.sellBook has only one value
this.theBook.lastCurrentMarket.toString one of { "$641.10100$0.000", "$641.14555$0.000" }
===========================================================================
book.ProductBookSide.submitOrderCancel(java.lang.String):::EXIT412
===========================================================================
book.ProductBookSide.submitOrderCancel(java.lang.String):::EXIT
this.bookEntries == this.theBook.buyBook.bookEntries
this.bookEntries == orig(this.bookEntries)
this.bookEntries == orig(this.theBook.buyBook.bookEntries)
this.side == constants.BookSide.BUY
constants.BookSide.BUY == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.BUY == orig(this.theBook.buyBook.side)
constants.BookSide.SELL == this.theBook.sellBook.side
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.theBook.sellBook.side)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.trader == this.theBook.buyBook.trader
this.trader == orig(this.trader)
this.trader == orig(this.theBook.buyBook.trader)
this.trader.getClass().getName() == orig(this.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.buyBook.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.sellBook.trader.getClass().getName())
this.theBook == orig(this.theBook)
this.theBook == orig(this.theBook.buyBook.theBook)
this.theBook == orig(this.theBook.sellBook.theBook)
this.theBook.product == orig(this.theBook.product)
this.theBook.product.toString == orig(this.theBook.product.toString)
this.theBook.buyBook == orig(this)
this.theBook.buyBook == orig(this.theBook.buyBook)
this.theBook.sellBook == orig(this.theBook.sellBook)
this.theBook.sellBook.bookEntries == orig(this.theBook.sellBook.bookEntries)
this.theBook.sellBook.trader == orig(this.theBook.sellBook.trader)
this.theBook.lastCurrentMarket == orig(this.theBook.lastCurrentMarket)
this.theBook.lastCurrentMarket.toString == orig(this.theBook.lastCurrentMarket.toString)
this.theBook.userQuotes == orig(this.theBook.userQuotes)
this.theBook.oldEntries == orig(this.theBook.oldEntries)
arg0.toString == orig(arg0.toString)
this.bookEntries has only one value
this.side.bookside has only one value
this.side.bookside.toString == "BUY"
this.trader has only one value
this.theBook has only one value
this.theBook.buyBook has only one value
this.theBook.sellBook has only one value
this.theBook.lastCurrentMarket.toString one of { "$641.10100$0.000", "$641.14555$0.000" }
===========================================================================
book.ProductBookSide.submitQuoteCancel(java.lang.String):::ENTER
constants.BookSide.SELL == this.theBook.sellBook.side
this.theBook has only one value
this.theBook.buyBook has only one value
this.theBook.sellBook has only one value
this.theBook.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.10120$641.15150", "$641.14555$0.000" }
arg0.toString one of { "ANN", "REX" }
===========================================================================
book.ProductBookSide.submitQuoteCancel(java.lang.String):::EXIT
this.bookEntries == orig(this.bookEntries)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.BUY == orig(this.theBook.buyBook.side)
constants.BookSide.SELL == this.theBook.sellBook.side
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.theBook.sellBook.side)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.trader == orig(this.trader)
this.trader.getClass().getName() == orig(this.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.buyBook.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.sellBook.trader.getClass().getName())
this.theBook == orig(this.theBook)
this.theBook == orig(this.theBook.buyBook.theBook)
this.theBook == orig(this.theBook.sellBook.theBook)
this.theBook.product == orig(this.theBook.product)
this.theBook.product.toString == orig(this.theBook.product.toString)
this.theBook.buyBook == orig(this.theBook.buyBook)
this.theBook.buyBook.bookEntries == orig(this.theBook.buyBook.bookEntries)
this.theBook.buyBook.trader == orig(this.theBook.buyBook.trader)
this.theBook.sellBook == orig(this.theBook.sellBook)
this.theBook.sellBook.bookEntries == orig(this.theBook.sellBook.bookEntries)
this.theBook.sellBook.trader == orig(this.theBook.sellBook.trader)
this.theBook.lastCurrentMarket == orig(this.theBook.lastCurrentMarket)
this.theBook.lastCurrentMarket.toString == orig(this.theBook.lastCurrentMarket.toString)
this.theBook.userQuotes == orig(this.theBook.userQuotes)
this.theBook.oldEntries == orig(this.theBook.oldEntries)
arg0.toString == orig(arg0.toString)
this.theBook has only one value
this.theBook.buyBook has only one value
this.theBook.sellBook has only one value
this.theBook.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.10120$641.15150", "$641.14555$0.000" }
arg0.toString one of { "ANN", "REX" }
===========================================================================
book.ProductBookSide.topOfBookPrice():::ENTER
constants.BookSide.SELL == this.theBook.sellBook.side
this.side != null
this.trader != null
this.theBook has only one value
this.theBook != null
this.theBook.buyBook has only one value
this.theBook.buyBook != null
this.theBook.sellBook has only one value
this.theBook.sellBook != null
this.theBook.lastCurrentMarket != null
===========================================================================
book.ProductBookSide.topOfBookPrice():::EXIT275
return != null
===========================================================================
book.ProductBookSide.topOfBookPrice():::EXIT277
return == null
===========================================================================
book.ProductBookSide.topOfBookPrice():::EXIT
this.bookEntries == orig(this.bookEntries)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.BUY == orig(this.theBook.buyBook.side)
constants.BookSide.SELL == this.theBook.sellBook.side
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.theBook.sellBook.side)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.trader == orig(this.trader)
this.trader.getClass().getName() == orig(this.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.buyBook.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.sellBook.trader.getClass().getName())
this.theBook == orig(this.theBook)
this.theBook == orig(this.theBook.buyBook.theBook)
this.theBook == orig(this.theBook.sellBook.theBook)
this.theBook.product == orig(this.theBook.product)
this.theBook.product.toString == orig(this.theBook.product.toString)
this.theBook.buyBook == orig(this.theBook.buyBook)
this.theBook.buyBook.bookEntries == orig(this.theBook.buyBook.bookEntries)
this.theBook.buyBook.trader == orig(this.theBook.buyBook.trader)
this.theBook.sellBook == orig(this.theBook.sellBook)
this.theBook.sellBook.bookEntries == orig(this.theBook.sellBook.bookEntries)
this.theBook.sellBook.trader == orig(this.theBook.sellBook.trader)
this.theBook.lastCurrentMarket == orig(this.theBook.lastCurrentMarket)
this.theBook.lastCurrentMarket.toString == orig(this.theBook.lastCurrentMarket.toString)
this.theBook.userQuotes == orig(this.theBook.userQuotes)
this.theBook.oldEntries == orig(this.theBook.oldEntries)
this.side != null
this.trader != null
this.theBook has only one value
this.theBook != null
this.theBook.buyBook has only one value
this.theBook.buyBook != null
this.theBook.sellBook has only one value
this.theBook.sellBook != null
this.theBook.lastCurrentMarket != null
return.MKT == false
===========================================================================
book.ProductBookSide.topOfBookVolume():::ENTER
constants.BookSide.SELL == this.theBook.sellBook.side
this.side != null
this.trader != null
this.theBook has only one value
this.theBook != null
this.theBook.buyBook has only one value
this.theBook.buyBook != null
this.theBook.sellBook has only one value
this.theBook.sellBook != null
this.theBook.lastCurrentMarket != null
===========================================================================
book.ProductBookSide.topOfBookVolume():::EXIT303
===========================================================================
book.ProductBookSide.topOfBookVolume():::EXIT307
return == 0
===========================================================================
book.ProductBookSide.topOfBookVolume():::EXIT
this.bookEntries == orig(this.bookEntries)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.BUY == orig(this.theBook.buyBook.side)
constants.BookSide.SELL == this.theBook.sellBook.side
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.theBook.sellBook.side)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.trader == orig(this.trader)
this.trader.getClass().getName() == orig(this.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.buyBook.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.sellBook.trader.getClass().getName())
this.theBook == orig(this.theBook)
this.theBook == orig(this.theBook.buyBook.theBook)
this.theBook == orig(this.theBook.sellBook.theBook)
this.theBook.product == orig(this.theBook.product)
this.theBook.product.toString == orig(this.theBook.product.toString)
this.theBook.buyBook == orig(this.theBook.buyBook)
this.theBook.buyBook.bookEntries == orig(this.theBook.buyBook.bookEntries)
this.theBook.buyBook.trader == orig(this.theBook.buyBook.trader)
this.theBook.sellBook == orig(this.theBook.sellBook)
this.theBook.sellBook.bookEntries == orig(this.theBook.sellBook.bookEntries)
this.theBook.sellBook.trader == orig(this.theBook.sellBook.trader)
this.theBook.lastCurrentMarket == orig(this.theBook.lastCurrentMarket)
this.theBook.lastCurrentMarket.toString == orig(this.theBook.lastCurrentMarket.toString)
this.theBook.userQuotes == orig(this.theBook.userQuotes)
this.theBook.oldEntries == orig(this.theBook.oldEntries)
this.side != null
this.trader != null
this.theBook has only one value
this.theBook != null
this.theBook.buyBook has only one value
this.theBook.buyBook != null
this.theBook.sellBook has only one value
this.theBook.sellBook != null
this.theBook.lastCurrentMarket != null
return >= 0
===========================================================================
book.ProductBookSide.tryBuyAgainstSellSideTrade(tradable.Tradable):::ENTER
this == this.theBook.sellBook
this.bookEntries == this.theBook.sellBook.bookEntries
this.side == constants.BookSide.SELL
constants.BookSide.SELL == this.theBook.sellBook.side
this.trader == this.theBook.sellBook.trader
this has only one value
this.bookEntries has only one value
this.side.bookside has only one value
this.side.bookside.toString == "SELL"
this.trader has only one value
this.theBook has only one value
this.theBook.buyBook has only one value
this.theBook.sellBook has only one value
this.theBook.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.14555$641.1545", "$641.15105$641.15150" }
arg0.getClass().getName() == tradable.Order.class
===========================================================================
book.ProductBookSide.tryBuyAgainstSellSideTrade(tradable.Tradable):::EXIT
this.bookEntries == this.theBook.sellBook.bookEntries
this.bookEntries == orig(this.bookEntries)
this.bookEntries == orig(this.theBook.sellBook.bookEntries)
this.side == constants.BookSide.SELL
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.BUY == orig(this.theBook.buyBook.side)
constants.BookSide.SELL == this.theBook.sellBook.side
constants.BookSide.SELL == orig(this.side)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.theBook.sellBook.side)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.trader == this.theBook.sellBook.trader
this.trader == orig(this.trader)
this.trader == orig(this.theBook.sellBook.trader)
this.trader.getClass().getName() == orig(this.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.buyBook.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.sellBook.trader.getClass().getName())
this.theBook == orig(this.theBook)
this.theBook == orig(this.theBook.buyBook.theBook)
this.theBook == orig(this.theBook.sellBook.theBook)
this.theBook.product == orig(this.theBook.product)
this.theBook.product.toString == orig(this.theBook.product.toString)
this.theBook.buyBook == orig(this.theBook.buyBook)
this.theBook.buyBook.bookEntries == orig(this.theBook.buyBook.bookEntries)
this.theBook.buyBook.trader == orig(this.theBook.buyBook.trader)
this.theBook.sellBook == orig(this)
this.theBook.sellBook == orig(this.theBook.sellBook)
this.theBook.lastCurrentMarket == orig(this.theBook.lastCurrentMarket)
this.theBook.lastCurrentMarket.toString == orig(this.theBook.lastCurrentMarket.toString)
this.theBook.userQuotes == orig(this.theBook.userQuotes)
this.theBook.oldEntries == orig(this.theBook.oldEntries)
this.bookEntries has only one value
this.side.bookside has only one value
this.side.bookside.toString == "SELL"
this.trader has only one value
this.theBook has only one value
this.theBook.buyBook has only one value
this.theBook.sellBook has only one value
this.theBook.lastCurrentMarket.toString one of { "$0.000$0.000", "$641.14555$641.1545", "$641.15105$641.15150" }
===========================================================================
book.ProductBookSide.trySellAgainstBuySideTrade(tradable.Tradable):::ENTER
this == this.theBook.buyBook
this.bookEntries == this.theBook.buyBook.bookEntries
this.side == constants.BookSide.BUY
constants.BookSide.SELL == this.theBook.sellBook.side
this.trader == this.theBook.buyBook.trader
this has only one value
this.bookEntries has only one value
this.side.bookside has only one value
this.side.bookside.toString == "BUY"
this.trader has only one value
this.theBook has only one value
this.theBook.buyBook has only one value
this.theBook.sellBook has only one value
this.theBook.lastCurrentMarket.toString one of { "$641.10151$0.000", "$641.30369$0.000" }
arg0.getClass().getName() == tradable.Order.class
===========================================================================
book.ProductBookSide.trySellAgainstBuySideTrade(tradable.Tradable):::EXIT
this.bookEntries == this.theBook.buyBook.bookEntries
this.bookEntries == orig(this.bookEntries)
this.bookEntries == orig(this.theBook.buyBook.bookEntries)
this.side == constants.BookSide.BUY
constants.BookSide.BUY == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.BUY == orig(this.theBook.buyBook.side)
constants.BookSide.SELL == this.theBook.sellBook.side
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.theBook.sellBook.side)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.trader == this.theBook.buyBook.trader
this.trader == orig(this.trader)
this.trader == orig(this.theBook.buyBook.trader)
this.trader.getClass().getName() == orig(this.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.buyBook.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.sellBook.trader.getClass().getName())
this.theBook == orig(this.theBook)
this.theBook == orig(this.theBook.buyBook.theBook)
this.theBook == orig(this.theBook.sellBook.theBook)
this.theBook.product == orig(this.theBook.product)
this.theBook.product.toString == orig(this.theBook.product.toString)
this.theBook.buyBook == orig(this)
this.theBook.buyBook == orig(this.theBook.buyBook)
this.theBook.sellBook == orig(this.theBook.sellBook)
this.theBook.sellBook.bookEntries == orig(this.theBook.sellBook.bookEntries)
this.theBook.sellBook.trader == orig(this.theBook.sellBook.trader)
this.theBook.lastCurrentMarket == orig(this.theBook.lastCurrentMarket)
this.theBook.lastCurrentMarket.toString == orig(this.theBook.lastCurrentMarket.toString)
this.theBook.userQuotes == orig(this.theBook.userQuotes)
this.theBook.oldEntries == orig(this.theBook.oldEntries)
this.bookEntries has only one value
this.side.bookside has only one value
this.side.bookside.toString == "BUY"
this.trader has only one value
this.theBook has only one value
this.theBook.buyBook has only one value
this.theBook.sellBook has only one value
this.theBook.lastCurrentMarket.toString one of { "$641.10151$0.000", "$641.30369$0.000" }
===========================================================================
book.ProductBookSide.tryTrade(tradable.Tradable):::ENTER
constants.BookSide.SELL == this.theBook.sellBook.side
this.theBook has only one value
this.theBook.buyBook has only one value
this.theBook.sellBook has only one value
arg0.getClass().getName() == tradable.Order.class
constants.BookSide.$VALUES.getClass().getName() != arg0.getClass().getName()
this.trader.getClass().getName() != arg0.getClass().getName()
===========================================================================
book.ProductBookSide.tryTrade(tradable.Tradable):::EXIT
this.bookEntries == orig(this.bookEntries)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.BUY == orig(this.theBook.buyBook.side)
constants.BookSide.SELL == this.theBook.sellBook.side
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.theBook.sellBook.side)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.trader == orig(this.trader)
this.trader.getClass().getName() == orig(this.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.buyBook.trader.getClass().getName())
this.trader.getClass().getName() == orig(this.theBook.sellBook.trader.getClass().getName())
this.theBook == orig(this.theBook)
this.theBook == orig(this.theBook.buyBook.theBook)
this.theBook == orig(this.theBook.sellBook.theBook)
this.theBook.product == orig(this.theBook.product)
this.theBook.product.toString == orig(this.theBook.product.toString)
this.theBook.buyBook == orig(this.theBook.buyBook)
this.theBook.buyBook.bookEntries == orig(this.theBook.buyBook.bookEntries)
this.theBook.buyBook.trader == orig(this.theBook.buyBook.trader)
this.theBook.sellBook == orig(this.theBook.sellBook)
this.theBook.sellBook.bookEntries == orig(this.theBook.sellBook.bookEntries)
this.theBook.sellBook.trader == orig(this.theBook.sellBook.trader)
this.theBook.lastCurrentMarket == orig(this.theBook.lastCurrentMarket)
this.theBook.lastCurrentMarket.toString == orig(this.theBook.lastCurrentMarket.toString)
this.theBook.userQuotes == orig(this.theBook.userQuotes)
this.theBook.oldEntries == orig(this.theBook.oldEntries)
this.theBook has only one value
this.theBook.buyBook has only one value
this.theBook.sellBook has only one value
constants.BookSide.$VALUES.getClass().getName() != orig(arg0.getClass().getName())
this.trader.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
book.ProductService:::CLASS
book.ProductService.allBooks has only one value
book.ProductService.allBooks != null
book.ProductService.state != null
constants.MarketState.CLOSED has only one value
constants.MarketState.CLOSED != null
constants.MarketState.OPEN has only one value
constants.MarketState.OPEN != null
constants.MarketState.PREOPEN has only one value
constants.MarketState.PREOPEN != null
constants.MarketState.CLOSED.marketstate has only one value
constants.MarketState.CLOSED.marketstate != null
constants.MarketState.CLOSED.marketstate.toString == "CLOSED"
constants.MarketState.$VALUES has only one value
constants.MarketState.$VALUES != null
constants.MarketState.$VALUES.getClass().getName() == constants.MarketState[].class
constants.MarketState.$VALUES[] contains no nulls and has only one value, of length 3
constants.MarketState.$VALUES[] elements != null
constants.MarketState.$VALUES[].getClass().getName() == [constants.MarketState, constants.MarketState, constants.MarketState]
constants.MarketState.$VALUES[].getClass().getName() elements == constants.MarketState.class
constants.MarketState.$VALUES[].marketstate contains no nulls and has only one value, of length 3
constants.MarketState.$VALUES[].marketstate elements != null
constants.MarketState.$VALUES[].marketstate.toString == [CLOSED, OPEN, PREOPEN]
constants.MarketState.$VALUES[].marketstate.toString elements one of { "CLOSED", "OPEN", "PREOPEN" }
constants.MarketState.OPEN.marketstate has only one value
constants.MarketState.OPEN.marketstate != null
constants.MarketState.OPEN.marketstate.toString == "OPEN"
constants.MarketState.PREOPEN.marketstate has only one value
constants.MarketState.PREOPEN.marketstate != null
constants.MarketState.PREOPEN.marketstate.toString == "PREOPEN"
book.ProductService.state.marketstate != null
book.ProductService.state.marketstate.toString one of { "CLOSED", "OPEN", "PREOPEN" }
size(constants.MarketState.$VALUES[]) == 3
===========================================================================
book.ProductService:::OBJECT
this has only one value
===========================================================================
book.ProductService.ProductService():::EXIT
book.ProductService.state == constants.MarketState.CLOSED
constants.MarketState.CLOSED.marketstate == book.ProductService.state.marketstate
book.ProductService.state has only one value
book.ProductService.state.marketstate.toString == "CLOSED"
book.ProductService.instance == null
===========================================================================
book.ProductService.check(constants.MarketState):::ENTER
this == book.ProductService.instance
book.ProductService.instance has only one value
arg0.marketstate.toString one of { "CLOSED", "OPEN", "PREOPEN" }
===========================================================================
book.ProductService.check(constants.MarketState):::EXIT
book.ProductService.allBooks == orig(book.ProductService.allBooks)
book.ProductService.state == orig(book.ProductService.state)
constants.MarketState.CLOSED == orig(constants.MarketState.CLOSED)
constants.MarketState.OPEN == orig(constants.MarketState.OPEN)
constants.MarketState.PREOPEN == orig(constants.MarketState.PREOPEN)
constants.MarketState.CLOSED.marketstate == orig(constants.MarketState.CLOSED.marketstate)
constants.MarketState.CLOSED.marketstate.toString == orig(constants.MarketState.CLOSED.marketstate.toString)
constants.MarketState.$VALUES == orig(constants.MarketState.$VALUES)
constants.MarketState.$VALUES.getClass().getName() == orig(constants.MarketState.$VALUES.getClass().getName())
constants.MarketState.$VALUES[] == orig(constants.MarketState.$VALUES[])
constants.MarketState.$VALUES[].marketstate == orig(constants.MarketState.$VALUES[].marketstate)
constants.MarketState.OPEN.marketstate == orig(constants.MarketState.OPEN.marketstate)
constants.MarketState.OPEN.marketstate.toString == orig(constants.MarketState.OPEN.marketstate.toString)
constants.MarketState.PREOPEN.marketstate == orig(constants.MarketState.PREOPEN.marketstate)
constants.MarketState.PREOPEN.marketstate.toString == orig(constants.MarketState.PREOPEN.marketstate.toString)
book.ProductService.state.marketstate == orig(book.ProductService.state.marketstate)
book.ProductService.state.marketstate.toString == orig(book.ProductService.state.marketstate.toString)
book.ProductService.instance == orig(this)
book.ProductService.instance == orig(book.ProductService.instance)
arg0.marketstate == orig(arg0.marketstate)
arg0.marketstate.toString == orig(arg0.marketstate.toString)
book.ProductService.instance has only one value
arg0.marketstate.toString one of { "CLOSED", "OPEN", "PREOPEN" }
===========================================================================
book.ProductService.createProduct(java.lang.String):::ENTER
this == book.ProductService.instance
book.ProductService.state == constants.MarketState.CLOSED
constants.MarketState.CLOSED.marketstate == book.ProductService.state.marketstate
book.ProductService.state has only one value
book.ProductService.state.marketstate.toString == "CLOSED"
book.ProductService.instance has only one value
arg0 has only one value
arg0.toString == "GOOG"
===========================================================================
book.ProductService.createProduct(java.lang.String):::EXIT
book.ProductService.allBooks == orig(book.ProductService.allBooks)
book.ProductService.state == constants.MarketState.CLOSED
book.ProductService.state == orig(book.ProductService.state)
book.ProductService.state == orig(constants.MarketState.CLOSED)
constants.MarketState.OPEN == orig(constants.MarketState.OPEN)
constants.MarketState.PREOPEN == orig(constants.MarketState.PREOPEN)
constants.MarketState.CLOSED.marketstate == book.ProductService.state.marketstate
constants.MarketState.CLOSED.marketstate == orig(constants.MarketState.CLOSED.marketstate)
constants.MarketState.CLOSED.marketstate == orig(book.ProductService.state.marketstate)
constants.MarketState.CLOSED.marketstate.toString == orig(constants.MarketState.CLOSED.marketstate.toString)
constants.MarketState.$VALUES == orig(constants.MarketState.$VALUES)
constants.MarketState.$VALUES.getClass().getName() == orig(constants.MarketState.$VALUES.getClass().getName())
constants.MarketState.$VALUES[] == orig(constants.MarketState.$VALUES[])
constants.MarketState.$VALUES[].marketstate == orig(constants.MarketState.$VALUES[].marketstate)
constants.MarketState.OPEN.marketstate == orig(constants.MarketState.OPEN.marketstate)
constants.MarketState.OPEN.marketstate.toString == orig(constants.MarketState.OPEN.marketstate.toString)
constants.MarketState.PREOPEN.marketstate == orig(constants.MarketState.PREOPEN.marketstate)
constants.MarketState.PREOPEN.marketstate.toString == orig(constants.MarketState.PREOPEN.marketstate.toString)
book.ProductService.state.marketstate.toString == orig(book.ProductService.state.marketstate.toString)
book.ProductService.instance == orig(this)
book.ProductService.instance == orig(book.ProductService.instance)
arg0.toString == orig(arg0.toString)
book.ProductService.state has only one value
book.ProductService.state.marketstate.toString == "CLOSED"
book.ProductService.instance has only one value
arg0.toString == "GOOG"
===========================================================================
book.ProductService.getBookDepth(java.lang.String):::ENTER
this == book.ProductService.instance
book.ProductService.instance has only one value
arg0 has only one value
arg0.toString == "GOOG"
===========================================================================
book.ProductService.getBookDepth(java.lang.String):::EXIT
book.ProductService.allBooks == orig(book.ProductService.allBooks)
book.ProductService.state == orig(book.ProductService.state)
constants.MarketState.CLOSED == orig(constants.MarketState.CLOSED)
constants.MarketState.OPEN == orig(constants.MarketState.OPEN)
constants.MarketState.PREOPEN == orig(constants.MarketState.PREOPEN)
constants.MarketState.CLOSED.marketstate == orig(constants.MarketState.CLOSED.marketstate)
constants.MarketState.CLOSED.marketstate.toString == orig(constants.MarketState.CLOSED.marketstate.toString)
constants.MarketState.$VALUES == orig(constants.MarketState.$VALUES)
constants.MarketState.$VALUES.getClass().getName() == orig(constants.MarketState.$VALUES.getClass().getName())
constants.MarketState.$VALUES[] == orig(constants.MarketState.$VALUES[])
constants.MarketState.$VALUES[].marketstate == orig(constants.MarketState.$VALUES[].marketstate)
constants.MarketState.OPEN.marketstate == orig(constants.MarketState.OPEN.marketstate)
constants.MarketState.OPEN.marketstate.toString == orig(constants.MarketState.OPEN.marketstate.toString)
constants.MarketState.PREOPEN.marketstate == orig(constants.MarketState.PREOPEN.marketstate)
constants.MarketState.PREOPEN.marketstate.toString == orig(constants.MarketState.PREOPEN.marketstate.toString)
book.ProductService.state.marketstate == orig(book.ProductService.state.marketstate)
book.ProductService.state.marketstate.toString == orig(book.ProductService.state.marketstate.toString)
book.ProductService.instance == orig(this)
book.ProductService.instance == orig(book.ProductService.instance)
arg0.toString == orig(arg0.toString)
book.ProductService.instance has only one value
arg0.toString == "GOOG"
return.getClass().getName() == java.lang.String[][].class
size(return[]) == 2
constants.MarketState.$VALUES.getClass().getName() != return.getClass().getName()
===========================================================================
book.ProductService.getInstance():::ENTER
===========================================================================
book.ProductService.getInstance():::EXIT
book.ProductService.allBooks == orig(book.ProductService.allBooks)
book.ProductService.state == orig(book.ProductService.state)
constants.MarketState.CLOSED == orig(constants.MarketState.CLOSED)
constants.MarketState.OPEN == orig(constants.MarketState.OPEN)
constants.MarketState.PREOPEN == orig(constants.MarketState.PREOPEN)
constants.MarketState.CLOSED.marketstate == orig(constants.MarketState.CLOSED.marketstate)
constants.MarketState.CLOSED.marketstate.toString == orig(constants.MarketState.CLOSED.marketstate.toString)
constants.MarketState.$VALUES == orig(constants.MarketState.$VALUES)
constants.MarketState.$VALUES.getClass().getName() == orig(constants.MarketState.$VALUES.getClass().getName())
constants.MarketState.$VALUES[] == orig(constants.MarketState.$VALUES[])
constants.MarketState.$VALUES[].marketstate == orig(constants.MarketState.$VALUES[].marketstate)
constants.MarketState.OPEN.marketstate == orig(constants.MarketState.OPEN.marketstate)
constants.MarketState.OPEN.marketstate.toString == orig(constants.MarketState.OPEN.marketstate.toString)
constants.MarketState.PREOPEN.marketstate == orig(constants.MarketState.PREOPEN.marketstate)
constants.MarketState.PREOPEN.marketstate.toString == orig(constants.MarketState.PREOPEN.marketstate.toString)
book.ProductService.state.marketstate == orig(book.ProductService.state.marketstate)
book.ProductService.state.marketstate.toString == orig(book.ProductService.state.marketstate.toString)
book.ProductService.instance == return
book.ProductService.instance has only one value
book.ProductService.instance != null
===========================================================================
book.ProductService.getMarketData(java.lang.String):::ENTER
this == book.ProductService.instance
book.ProductService.state == constants.MarketState.PREOPEN
constants.MarketState.PREOPEN.marketstate == book.ProductService.state.marketstate
book.ProductService.state has only one value
book.ProductService.state.marketstate.toString == "PREOPEN"
book.ProductService.instance has only one value
arg0 has only one value
arg0.toString == "GOOG"
===========================================================================
book.ProductService.getMarketData(java.lang.String):::EXIT
book.ProductService.allBooks == orig(book.ProductService.allBooks)
book.ProductService.state == constants.MarketState.PREOPEN
book.ProductService.state == orig(book.ProductService.state)
book.ProductService.state == orig(constants.MarketState.PREOPEN)
constants.MarketState.CLOSED == orig(constants.MarketState.CLOSED)
constants.MarketState.OPEN == orig(constants.MarketState.OPEN)
constants.MarketState.CLOSED.marketstate == orig(constants.MarketState.CLOSED.marketstate)
constants.MarketState.CLOSED.marketstate.toString == orig(constants.MarketState.CLOSED.marketstate.toString)
constants.MarketState.$VALUES == orig(constants.MarketState.$VALUES)
constants.MarketState.$VALUES.getClass().getName() == orig(constants.MarketState.$VALUES.getClass().getName())
constants.MarketState.$VALUES[] == orig(constants.MarketState.$VALUES[])
constants.MarketState.$VALUES[].marketstate == orig(constants.MarketState.$VALUES[].marketstate)
constants.MarketState.OPEN.marketstate == orig(constants.MarketState.OPEN.marketstate)
constants.MarketState.OPEN.marketstate.toString == orig(constants.MarketState.OPEN.marketstate.toString)
constants.MarketState.PREOPEN.marketstate == book.ProductService.state.marketstate
constants.MarketState.PREOPEN.marketstate == orig(constants.MarketState.PREOPEN.marketstate)
constants.MarketState.PREOPEN.marketstate == orig(book.ProductService.state.marketstate)
constants.MarketState.PREOPEN.marketstate.toString == orig(constants.MarketState.PREOPEN.marketstate.toString)
book.ProductService.state.marketstate.toString == orig(book.ProductService.state.marketstate.toString)
book.ProductService.instance == orig(this)
book.ProductService.instance == orig(book.ProductService.instance)
arg0.toString == orig(arg0.toString)
return.product == orig(arg0)
return.buyPrice.MKT == return.sellPrice.MKT
book.ProductService.state has only one value
book.ProductService.state.marketstate.toString == "PREOPEN"
book.ProductService.instance has only one value
arg0.toString == "GOOG"
return.product has only one value
return.product.toString == "GOOG"
return.buyPrice.VALUE one of { 0, 64110 }
return.buyPrice.MKT == false
return.buyVolume one of { 0, 120 }
return.sellPrice.VALUE one of { 0, 64115 }
return.sellVolume one of { 0, 150 }
===========================================================================
book.ProductService.getMarketState():::ENTER
this == book.ProductService.instance
book.ProductService.instance has only one value
book.ProductService.instance != null
===========================================================================
book.ProductService.getMarketState():::EXIT
book.ProductService.allBooks == orig(book.ProductService.allBooks)
book.ProductService.state == return
book.ProductService.state == orig(book.ProductService.state)
constants.MarketState.CLOSED == orig(constants.MarketState.CLOSED)
constants.MarketState.OPEN == orig(constants.MarketState.OPEN)
constants.MarketState.PREOPEN == orig(constants.MarketState.PREOPEN)
constants.MarketState.CLOSED.marketstate == orig(constants.MarketState.CLOSED.marketstate)
constants.MarketState.CLOSED.marketstate.toString == orig(constants.MarketState.CLOSED.marketstate.toString)
constants.MarketState.$VALUES == orig(constants.MarketState.$VALUES)
constants.MarketState.$VALUES.getClass().getName() == orig(constants.MarketState.$VALUES.getClass().getName())
constants.MarketState.$VALUES[] == orig(constants.MarketState.$VALUES[])
constants.MarketState.$VALUES[].marketstate == orig(constants.MarketState.$VALUES[].marketstate)
constants.MarketState.OPEN.marketstate == orig(constants.MarketState.OPEN.marketstate)
constants.MarketState.OPEN.marketstate.toString == orig(constants.MarketState.OPEN.marketstate.toString)
constants.MarketState.PREOPEN.marketstate == orig(constants.MarketState.PREOPEN.marketstate)
constants.MarketState.PREOPEN.marketstate.toString == orig(constants.MarketState.PREOPEN.marketstate.toString)
book.ProductService.state.marketstate == orig(book.ProductService.state.marketstate)
book.ProductService.state.marketstate.toString == orig(book.ProductService.state.marketstate.toString)
book.ProductService.instance == orig(this)
book.ProductService.instance == orig(book.ProductService.instance)
book.ProductService.instance has only one value
book.ProductService.instance != null
return.marketstate != null
return.marketstate.toString one of { "CLOSED", "OPEN", "PREOPEN" }
===========================================================================
book.ProductService.getOrdersWithRemainingQty(java.lang.String, java.lang.String):::ENTER
this == book.ProductService.instance
book.ProductService.state == constants.MarketState.OPEN
constants.MarketState.OPEN.marketstate == book.ProductService.state.marketstate
book.ProductService.state has only one value
book.ProductService.state.marketstate.toString == "OPEN"
book.ProductService.instance has only one value
arg0 has only one value
arg0.toString == "REX"
arg1 has only one value
arg1.toString == "GOOG"
===========================================================================
book.ProductService.getOrdersWithRemainingQty(java.lang.String, java.lang.String):::EXIT
book.ProductService.allBooks == orig(book.ProductService.allBooks)
book.ProductService.state == constants.MarketState.OPEN
book.ProductService.state == orig(book.ProductService.state)
book.ProductService.state == orig(constants.MarketState.OPEN)
constants.MarketState.CLOSED == orig(constants.MarketState.CLOSED)
constants.MarketState.PREOPEN == orig(constants.MarketState.PREOPEN)
constants.MarketState.CLOSED.marketstate == orig(constants.MarketState.CLOSED.marketstate)
constants.MarketState.CLOSED.marketstate.toString == orig(constants.MarketState.CLOSED.marketstate.toString)
constants.MarketState.$VALUES == orig(constants.MarketState.$VALUES)
constants.MarketState.$VALUES.getClass().getName() == orig(constants.MarketState.$VALUES.getClass().getName())
constants.MarketState.$VALUES[] == orig(constants.MarketState.$VALUES[])
constants.MarketState.$VALUES[].marketstate == orig(constants.MarketState.$VALUES[].marketstate)
constants.MarketState.OPEN.marketstate == book.ProductService.state.marketstate
constants.MarketState.OPEN.marketstate == orig(constants.MarketState.OPEN.marketstate)
constants.MarketState.OPEN.marketstate == orig(book.ProductService.state.marketstate)
constants.MarketState.OPEN.marketstate.toString == orig(constants.MarketState.OPEN.marketstate.toString)
constants.MarketState.PREOPEN.marketstate == orig(constants.MarketState.PREOPEN.marketstate)
constants.MarketState.PREOPEN.marketstate.toString == orig(constants.MarketState.PREOPEN.marketstate.toString)
book.ProductService.state.marketstate.toString == orig(book.ProductService.state.marketstate.toString)
book.ProductService.instance == orig(this)
book.ProductService.instance == orig(book.ProductService.instance)
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
book.ProductService.state has only one value
book.ProductService.state.marketstate.toString == "OPEN"
book.ProductService.instance has only one value
arg0.toString == "REX"
arg1.toString == "GOOG"
return has only one value
return[] contains no nulls and has only one value, of length 5
return[].getClass().getName() == [tradable.TradableDTO, tradable.TradableDTO, tradable.TradableDTO, tradable.TradableDTO, tradable.TradableDTO]
return[].getClass().getName() elements == tradable.TradableDTO.class
size(return[]) == 5
===========================================================================
book.ProductService.getProductList():::ENTER
this == book.ProductService.instance
book.ProductService.state == constants.MarketState.CLOSED
constants.MarketState.CLOSED.marketstate == book.ProductService.state.marketstate
book.ProductService.state has only one value
book.ProductService.state.marketstate.toString == "CLOSED"
book.ProductService.instance has only one value
===========================================================================
book.ProductService.getProductList():::EXIT
book.ProductService.allBooks == orig(book.ProductService.allBooks)
book.ProductService.state == constants.MarketState.CLOSED
book.ProductService.state == orig(book.ProductService.state)
book.ProductService.state == orig(constants.MarketState.CLOSED)
constants.MarketState.OPEN == orig(constants.MarketState.OPEN)
constants.MarketState.PREOPEN == orig(constants.MarketState.PREOPEN)
constants.MarketState.CLOSED.marketstate == book.ProductService.state.marketstate
constants.MarketState.CLOSED.marketstate == orig(constants.MarketState.CLOSED.marketstate)
constants.MarketState.CLOSED.marketstate == orig(book.ProductService.state.marketstate)
constants.MarketState.CLOSED.marketstate.toString == orig(constants.MarketState.CLOSED.marketstate.toString)
constants.MarketState.$VALUES == orig(constants.MarketState.$VALUES)
constants.MarketState.$VALUES.getClass().getName() == orig(constants.MarketState.$VALUES.getClass().getName())
constants.MarketState.$VALUES[] == orig(constants.MarketState.$VALUES[])
constants.MarketState.$VALUES[].marketstate == orig(constants.MarketState.$VALUES[].marketstate)
constants.MarketState.OPEN.marketstate == orig(constants.MarketState.OPEN.marketstate)
constants.MarketState.OPEN.marketstate.toString == orig(constants.MarketState.OPEN.marketstate.toString)
constants.MarketState.PREOPEN.marketstate == orig(constants.MarketState.PREOPEN.marketstate)
constants.MarketState.PREOPEN.marketstate.toString == orig(constants.MarketState.PREOPEN.marketstate.toString)
book.ProductService.state.marketstate.toString == orig(book.ProductService.state.marketstate.toString)
book.ProductService.instance == orig(this)
book.ProductService.instance == orig(book.ProductService.instance)
book.ProductService.state has only one value
book.ProductService.state.marketstate.toString == "CLOSED"
book.ProductService.instance has only one value
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [java.lang.String]
return[].getClass().getName() elements == java.lang.String.class
size(return[]) == 1
===========================================================================
book.ProductService.setMarketState(constants.MarketState):::ENTER
this == book.ProductService.instance
book.ProductService.instance has only one value
arg0.marketstate.toString one of { "CLOSED", "OPEN", "PREOPEN" }
===========================================================================
book.ProductService.setMarketState(constants.MarketState):::EXIT
book.ProductService.allBooks == orig(book.ProductService.allBooks)
book.ProductService.state == orig(arg0)
constants.MarketState.CLOSED == orig(constants.MarketState.CLOSED)
constants.MarketState.OPEN == orig(constants.MarketState.OPEN)
constants.MarketState.PREOPEN == orig(constants.MarketState.PREOPEN)
constants.MarketState.CLOSED.marketstate == orig(constants.MarketState.CLOSED.marketstate)
constants.MarketState.CLOSED.marketstate.toString == orig(constants.MarketState.CLOSED.marketstate.toString)
constants.MarketState.$VALUES == orig(constants.MarketState.$VALUES)
constants.MarketState.$VALUES.getClass().getName() == orig(constants.MarketState.$VALUES.getClass().getName())
constants.MarketState.$VALUES[] == orig(constants.MarketState.$VALUES[])
constants.MarketState.$VALUES[].marketstate == orig(constants.MarketState.$VALUES[].marketstate)
constants.MarketState.OPEN.marketstate == orig(constants.MarketState.OPEN.marketstate)
constants.MarketState.OPEN.marketstate.toString == orig(constants.MarketState.OPEN.marketstate.toString)
constants.MarketState.PREOPEN.marketstate == orig(constants.MarketState.PREOPEN.marketstate)
constants.MarketState.PREOPEN.marketstate.toString == orig(constants.MarketState.PREOPEN.marketstate.toString)
book.ProductService.instance == orig(this)
book.ProductService.instance == orig(book.ProductService.instance)
arg0.marketstate == orig(arg0.marketstate)
arg0.marketstate.toString == orig(arg0.marketstate.toString)
book.ProductService.instance has only one value
arg0.marketstate.toString one of { "CLOSED", "OPEN", "PREOPEN" }
book.ProductService.state.marketstate.toString != orig(book.ProductService.state.marketstate.toString)
===========================================================================
book.ProductService.submitOrder(tradable.Order):::ENTER
this == book.ProductService.instance
arg0.originalVolume == arg0.remainingVolume
book.ProductService.state.marketstate.toString one of { "OPEN", "PREOPEN" }
book.ProductService.instance has only one value
book.ProductService.instance != null
arg0 != null
arg0.product has only one value
arg0.product != null
arg0.product.toString == "GOOG"
arg0.price != null
arg0.cancelledVolume == 0
arg0.user != null
arg0.user.toString one of { "ANN", "REX" }
arg0.side != null
constants.BookSide.BUY has only one value
constants.BookSide.BUY != null
constants.BookSide.SELL has only one value
constants.BookSide.SELL != null
arg0.side.bookside != null
arg0.side.bookside.toString one of { "BUY", "SELL" }
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES != null
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[] elements != null
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside elements != null
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
arg0.isQuote == false
arg0.id != null
size(constants.BookSide.$VALUES[]) == 2
constants.MarketState.$VALUES.getClass().getName() != constants.BookSide.$VALUES.getClass().getName()
===========================================================================
book.ProductService.submitOrder(tradable.Order):::EXIT
book.ProductService.allBooks == orig(book.ProductService.allBooks)
book.ProductService.state == orig(book.ProductService.state)
constants.MarketState.CLOSED == orig(constants.MarketState.CLOSED)
constants.MarketState.OPEN == orig(constants.MarketState.OPEN)
constants.MarketState.PREOPEN == orig(constants.MarketState.PREOPEN)
constants.MarketState.CLOSED.marketstate == orig(constants.MarketState.CLOSED.marketstate)
constants.MarketState.CLOSED.marketstate.toString == orig(constants.MarketState.CLOSED.marketstate.toString)
constants.MarketState.$VALUES == orig(constants.MarketState.$VALUES)
constants.MarketState.$VALUES.getClass().getName() == orig(constants.MarketState.$VALUES.getClass().getName())
constants.MarketState.$VALUES[] == orig(constants.MarketState.$VALUES[])
constants.MarketState.$VALUES[].marketstate == orig(constants.MarketState.$VALUES[].marketstate)
constants.MarketState.OPEN.marketstate == orig(constants.MarketState.OPEN.marketstate)
constants.MarketState.OPEN.marketstate.toString == orig(constants.MarketState.OPEN.marketstate.toString)
constants.MarketState.PREOPEN.marketstate == orig(constants.MarketState.PREOPEN.marketstate)
constants.MarketState.PREOPEN.marketstate.toString == orig(constants.MarketState.PREOPEN.marketstate.toString)
book.ProductService.state.marketstate == orig(book.ProductService.state.marketstate)
book.ProductService.state.marketstate.toString == orig(book.ProductService.state.marketstate.toString)
book.ProductService.instance == orig(this)
book.ProductService.instance == orig(book.ProductService.instance)
arg0.product == orig(arg0.product)
arg0.product.toString == orig(arg0.product.toString)
arg0.price == orig(arg0.price)
arg0.price.VALUE == orig(arg0.price.VALUE)
arg0.price.MKT == orig(arg0.price.MKT)
arg0.originalVolume == orig(arg0.originalVolume)
arg0.originalVolume == orig(arg0.remainingVolume)
arg0.cancelledVolume == orig(arg0.cancelledVolume)
arg0.user == orig(arg0.user)
arg0.user.toString == orig(arg0.user.toString)
arg0.side == orig(arg0.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
arg0.side.bookside == orig(arg0.side.bookside)
arg0.side.bookside.toString == orig(arg0.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
arg0.isQuote == orig(arg0.isQuote)
arg0.id == return
arg0.id.toString == orig(arg0.id.toString)
return == orig(arg0.id)
book.ProductService.state.marketstate.toString one of { "OPEN", "PREOPEN" }
book.ProductService.instance has only one value
book.ProductService.instance != null
arg0.product has only one value
arg0.product != null
arg0.product.toString == "GOOG"
arg0.price != null
arg0.cancelledVolume == 0
arg0.user != null
arg0.user.toString one of { "ANN", "REX" }
arg0.side != null
constants.BookSide.BUY has only one value
constants.BookSide.BUY != null
constants.BookSide.SELL has only one value
constants.BookSide.SELL != null
arg0.side.bookside != null
arg0.side.bookside.toString one of { "BUY", "SELL" }
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES != null
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[] elements != null
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside elements != null
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
arg0.isQuote == false
return != null
size(constants.BookSide.$VALUES[]) == 2
constants.MarketState.$VALUES.getClass().getName() != constants.BookSide.$VALUES.getClass().getName()
arg0.originalVolume >= arg0.remainingVolume
===========================================================================
book.ProductService.submitQuote(tradable.Quote):::ENTER
this == book.ProductService.instance
book.ProductService.state == constants.MarketState.PREOPEN
constants.MarketState.PREOPEN.marketstate == book.ProductService.state.marketstate
arg0.user == arg0.buyQuoteSide.user
arg0.user == arg0.sellQuoteSide.user
arg0.product == arg0.buyQuoteSide.product
arg0.product == arg0.sellQuoteSide.product
arg0.buyQuoteSide.originalVolume == arg0.buyQuoteSide.remainingVolume
arg0.sellQuoteSide.originalVolume == arg0.sellQuoteSide.remainingVolume
book.ProductService.state has only one value
book.ProductService.state.marketstate.toString == "PREOPEN"
book.ProductService.instance has only one value
arg0.user.toString one of { "ANN", "REX" }
arg0.product has only one value
arg0.product.toString == "GOOG"
arg0.buyQuoteSide.product.toString == "GOOG"
arg0.buyQuoteSide.price has only one value
arg0.buyQuoteSide.originalVolume == 120
arg0.buyQuoteSide.cancelledVolume == 0
arg0.buyQuoteSide.user.toString one of { "ANN", "REX" }
arg0.buyQuoteSide.side has only one value
arg0.buyQuoteSide.isQuote == true
arg0.buyQuoteSide.id.toString one of { "ANNGOOG$641.103488477967697024", "REXGOOG$641.103488477938292211" }
arg0.sellQuoteSide.product.toString == "GOOG"
arg0.sellQuoteSide.price has only one value
arg0.sellQuoteSide.originalVolume == 150
arg0.sellQuoteSide.cancelledVolume == 0
arg0.sellQuoteSide.user.toString one of { "ANN", "REX" }
arg0.sellQuoteSide.side has only one value
arg0.sellQuoteSide.isQuote == true
arg0.sellQuoteSide.id.toString one of { "ANNGOOG$641.153488477968558282", "REXGOOG$641.153488477941813196" }
===========================================================================
book.ProductService.submitQuote(tradable.Quote):::EXIT
book.ProductService.allBooks == orig(book.ProductService.allBooks)
book.ProductService.state == constants.MarketState.PREOPEN
book.ProductService.state == orig(book.ProductService.state)
book.ProductService.state == orig(constants.MarketState.PREOPEN)
constants.MarketState.CLOSED == orig(constants.MarketState.CLOSED)
constants.MarketState.OPEN == orig(constants.MarketState.OPEN)
constants.MarketState.CLOSED.marketstate == orig(constants.MarketState.CLOSED.marketstate)
constants.MarketState.CLOSED.marketstate.toString == orig(constants.MarketState.CLOSED.marketstate.toString)
constants.MarketState.$VALUES == orig(constants.MarketState.$VALUES)
constants.MarketState.$VALUES.getClass().getName() == orig(constants.MarketState.$VALUES.getClass().getName())
constants.MarketState.$VALUES[] == orig(constants.MarketState.$VALUES[])
constants.MarketState.$VALUES[].marketstate == orig(constants.MarketState.$VALUES[].marketstate)
constants.MarketState.OPEN.marketstate == orig(constants.MarketState.OPEN.marketstate)
constants.MarketState.OPEN.marketstate.toString == orig(constants.MarketState.OPEN.marketstate.toString)
constants.MarketState.PREOPEN.marketstate == book.ProductService.state.marketstate
constants.MarketState.PREOPEN.marketstate == orig(constants.MarketState.PREOPEN.marketstate)
constants.MarketState.PREOPEN.marketstate == orig(book.ProductService.state.marketstate)
constants.MarketState.PREOPEN.marketstate.toString == orig(constants.MarketState.PREOPEN.marketstate.toString)
book.ProductService.state.marketstate.toString == orig(book.ProductService.state.marketstate.toString)
book.ProductService.instance == orig(this)
book.ProductService.instance == orig(book.ProductService.instance)
arg0.user == arg0.buyQuoteSide.user
arg0.user == arg0.sellQuoteSide.user
arg0.user == orig(arg0.user)
arg0.user == orig(arg0.buyQuoteSide.user)
arg0.user == orig(arg0.sellQuoteSide.user)
arg0.user.toString == orig(arg0.user.toString)
arg0.product == arg0.buyQuoteSide.product
arg0.product == arg0.sellQuoteSide.product
arg0.product == orig(arg0.product)
arg0.product == orig(arg0.buyQuoteSide.product)
arg0.product == orig(arg0.sellQuoteSide.product)
arg0.product.toString == orig(arg0.product.toString)
arg0.buyQuoteSide == orig(arg0.buyQuoteSide)
arg0.buyQuoteSide.product.toString == orig(arg0.buyQuoteSide.product.toString)
arg0.buyQuoteSide.price == orig(arg0.buyQuoteSide.price)
arg0.buyQuoteSide.originalVolume == arg0.buyQuoteSide.remainingVolume
arg0.buyQuoteSide.originalVolume == orig(arg0.buyQuoteSide.originalVolume)
arg0.buyQuoteSide.originalVolume == orig(arg0.buyQuoteSide.remainingVolume)
arg0.buyQuoteSide.cancelledVolume == orig(arg0.buyQuoteSide.cancelledVolume)
arg0.buyQuoteSide.user.toString == orig(arg0.buyQuoteSide.user.toString)
arg0.buyQuoteSide.side == orig(arg0.buyQuoteSide.side)
arg0.buyQuoteSide.isQuote == orig(arg0.buyQuoteSide.isQuote)
arg0.buyQuoteSide.id == orig(arg0.buyQuoteSide.id)
arg0.buyQuoteSide.id.toString == orig(arg0.buyQuoteSide.id.toString)
arg0.sellQuoteSide == orig(arg0.sellQuoteSide)
arg0.sellQuoteSide.product.toString == orig(arg0.sellQuoteSide.product.toString)
arg0.sellQuoteSide.price == orig(arg0.sellQuoteSide.price)
arg0.sellQuoteSide.originalVolume == arg0.sellQuoteSide.remainingVolume
arg0.sellQuoteSide.originalVolume == orig(arg0.sellQuoteSide.originalVolume)
arg0.sellQuoteSide.originalVolume == orig(arg0.sellQuoteSide.remainingVolume)
arg0.sellQuoteSide.cancelledVolume == orig(arg0.sellQuoteSide.cancelledVolume)
arg0.sellQuoteSide.user.toString == orig(arg0.sellQuoteSide.user.toString)
arg0.sellQuoteSide.side == orig(arg0.sellQuoteSide.side)
arg0.sellQuoteSide.isQuote == orig(arg0.sellQuoteSide.isQuote)
arg0.sellQuoteSide.id == orig(arg0.sellQuoteSide.id)
arg0.sellQuoteSide.id.toString == orig(arg0.sellQuoteSide.id.toString)
book.ProductService.state has only one value
book.ProductService.state.marketstate.toString == "PREOPEN"
book.ProductService.instance has only one value
arg0.user.toString one of { "ANN", "REX" }
arg0.product has only one value
arg0.product.toString == "GOOG"
arg0.buyQuoteSide.product.toString == "GOOG"
arg0.buyQuoteSide.price has only one value
arg0.buyQuoteSide.originalVolume == 120
arg0.buyQuoteSide.cancelledVolume == 0
arg0.buyQuoteSide.user.toString one of { "ANN", "REX" }
arg0.buyQuoteSide.side has only one value
arg0.buyQuoteSide.isQuote == true
arg0.buyQuoteSide.id.toString one of { "ANNGOOG$641.103488477967697024", "REXGOOG$641.103488477938292211" }
arg0.sellQuoteSide.product.toString == "GOOG"
arg0.sellQuoteSide.price has only one value
arg0.sellQuoteSide.originalVolume == 150
arg0.sellQuoteSide.cancelledVolume == 0
arg0.sellQuoteSide.user.toString one of { "ANN", "REX" }
arg0.sellQuoteSide.side has only one value
arg0.sellQuoteSide.isQuote == true
arg0.sellQuoteSide.id.toString one of { "ANNGOOG$641.153488477968558282", "REXGOOG$641.153488477941813196" }
===========================================================================
book.ProductService.submitQuoteCancel(java.lang.String, java.lang.String):::ENTER
this == book.ProductService.instance
book.ProductService.state.marketstate.toString one of { "OPEN", "PREOPEN" }
book.ProductService.instance has only one value
arg0 has only one value
arg0.toString == "REX"
arg1 has only one value
arg1.toString == "GOOG"
===========================================================================
book.ProductService.submitQuoteCancel(java.lang.String, java.lang.String):::EXIT
book.ProductService.allBooks == orig(book.ProductService.allBooks)
book.ProductService.state == orig(book.ProductService.state)
constants.MarketState.CLOSED == orig(constants.MarketState.CLOSED)
constants.MarketState.OPEN == orig(constants.MarketState.OPEN)
constants.MarketState.PREOPEN == orig(constants.MarketState.PREOPEN)
constants.MarketState.CLOSED.marketstate == orig(constants.MarketState.CLOSED.marketstate)
constants.MarketState.CLOSED.marketstate.toString == orig(constants.MarketState.CLOSED.marketstate.toString)
constants.MarketState.$VALUES == orig(constants.MarketState.$VALUES)
constants.MarketState.$VALUES.getClass().getName() == orig(constants.MarketState.$VALUES.getClass().getName())
constants.MarketState.$VALUES[] == orig(constants.MarketState.$VALUES[])
constants.MarketState.$VALUES[].marketstate == orig(constants.MarketState.$VALUES[].marketstate)
constants.MarketState.OPEN.marketstate == orig(constants.MarketState.OPEN.marketstate)
constants.MarketState.OPEN.marketstate.toString == orig(constants.MarketState.OPEN.marketstate.toString)
constants.MarketState.PREOPEN.marketstate == orig(constants.MarketState.PREOPEN.marketstate)
constants.MarketState.PREOPEN.marketstate.toString == orig(constants.MarketState.PREOPEN.marketstate.toString)
book.ProductService.state.marketstate == orig(book.ProductService.state.marketstate)
book.ProductService.state.marketstate.toString == orig(book.ProductService.state.marketstate.toString)
book.ProductService.instance == orig(this)
book.ProductService.instance == orig(book.ProductService.instance)
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
book.ProductService.state.marketstate.toString one of { "OPEN", "PREOPEN" }
book.ProductService.instance has only one value
arg0.toString == "REX"
arg1.toString == "GOOG"
===========================================================================
book.TradeProcessorFactory.makeTradeProcessor(book.ProductBookSide):::ENTER
arg0.side == null
constants.BookSide.BUY has only one value
constants.BookSide.SELL has only one value
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
arg0.trader == null
arg0.theBook == null
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
book.TradeProcessorFactory.makeTradeProcessor(book.ProductBookSide):::EXIT27
===========================================================================
book.TradeProcessorFactory.makeTradeProcessor(book.ProductBookSide):::EXIT
arg0.bookEntries == orig(arg0.bookEntries)
arg0.side == orig(arg0.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
arg0.trader == orig(arg0.trader)
arg0.theBook == orig(arg0.theBook)
arg0.side == null
constants.BookSide.BUY has only one value
constants.BookSide.SELL has only one value
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
arg0.trader == null
arg0.theBook == null
return.getClass().getName() == book.TradeProcessorPriceTimeImpl.class
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
book.TradeProcessorPriceTimeImpl:::OBJECT
this.fillMessages != null
this.bookSide.bookEntries != null
constants.BookSide.BUY has only one value
constants.BookSide.BUY != null
constants.BookSide.SELL has only one value
constants.BookSide.SELL != null
this.bookSide.side.bookside != null
this.bookSide.side.bookside.toString one of { "BUY", "SELL" }
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES != null
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[] elements != null
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside elements != null
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
this.bookSide.trader.getClass().getName() == book.TradeProcessorPriceTimeImpl.class
this.bookSide.theBook.product has only one value
this.bookSide.theBook.product != null
this.bookSide.theBook.product.toString == "GOOG"
this.bookSide.theBook.buyBook has only one value
this.bookSide.theBook.buyBook != null
this.bookSide.theBook.sellBook has only one value
this.bookSide.theBook.sellBook != null
this.bookSide.theBook.lastCurrentMarket != null
this.bookSide.theBook.userQuotes has only one value
this.bookSide.theBook.userQuotes != null
this.bookSide.theBook.oldEntries has only one value
this.bookSide.theBook.oldEntries != null
size(constants.BookSide.$VALUES[]) == 2
constants.BookSide.$VALUES.getClass().getName() != this.bookSide.trader.getClass().getName()
===========================================================================
book.TradeProcessorPriceTimeImpl.TradeProcessorPriceTimeImpl(book.ProductBookSide):::ENTER
arg0.side == null
constants.BookSide.BUY has only one value
constants.BookSide.SELL has only one value
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
arg0.trader == null
arg0.theBook == null
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
book.TradeProcessorPriceTimeImpl.TradeProcessorPriceTimeImpl(book.ProductBookSide):::EXIT
this.bookSide == orig(arg0)
this.bookSide.bookEntries == arg0.bookEntries
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
arg0.bookEntries == orig(arg0.bookEntries)
arg0.side == orig(arg0.side)
arg0.trader == orig(arg0.trader)
arg0.theBook == orig(arg0.theBook)
this.bookSide.side == null
this.bookSide.trader == null
this.bookSide.theBook == null
arg0.side == null
arg0.trader == null
arg0.theBook == null
===========================================================================
book.TradeProcessorPriceTimeImpl.addFillMessage(publishers.FillMessage):::ENTER
this.bookSide.theBook.product == arg0.product
this.bookSide != null
this.bookSide.side != null
this.bookSide.trader != null
this.bookSide.theBook has only one value
this.bookSide.theBook != null
arg0 != null
arg0.user != null
arg0.user.toString one of { "ANN", "REX" }
arg0.product.toString == "GOOG"
arg0.price != null
arg0.price.MKT == false
arg0.details != null
arg0.side != null
arg0.side.bookside != null
arg0.side.bookside.toString one of { "BUY", "SELL" }
arg0.id != null
===========================================================================
book.TradeProcessorPriceTimeImpl.addFillMessage(publishers.FillMessage):::EXIT
this.fillMessages == orig(this.fillMessages)
this.bookSide == orig(this.bookSide)
this.bookSide.bookEntries == orig(this.bookSide.bookEntries)
this.bookSide.side == orig(this.bookSide.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
this.bookSide.side.bookside == orig(this.bookSide.side.bookside)
this.bookSide.side.bookside.toString == orig(this.bookSide.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.bookSide.trader == orig(this.bookSide.trader)
this.bookSide.trader.getClass().getName() == orig(this.bookSide.trader.getClass().getName())
this.bookSide.theBook == orig(this.bookSide.theBook)
this.bookSide.theBook.product == arg0.product
this.bookSide.theBook.product.toString == orig(this.bookSide.theBook.product.toString)
this.bookSide.theBook.buyBook == orig(this.bookSide.theBook.buyBook)
this.bookSide.theBook.sellBook == orig(this.bookSide.theBook.sellBook)
this.bookSide.theBook.lastCurrentMarket == orig(this.bookSide.theBook.lastCurrentMarket)
this.bookSide.theBook.lastCurrentMarket.toString == orig(this.bookSide.theBook.lastCurrentMarket.toString)
this.bookSide.theBook.userQuotes == orig(this.bookSide.theBook.userQuotes)
this.bookSide.theBook.oldEntries == orig(this.bookSide.theBook.oldEntries)
arg0.user == orig(arg0.user)
arg0.user.toString == orig(arg0.user.toString)
arg0.product == orig(this.bookSide.theBook.product)
arg0.product == orig(arg0.product)
arg0.product.toString == orig(arg0.product.toString)
arg0.price == orig(arg0.price)
arg0.price.VALUE == orig(arg0.price.VALUE)
arg0.price.MKT == orig(arg0.price.MKT)
arg0.volume == orig(arg0.volume)
arg0.details == orig(arg0.details)
arg0.details.toString == orig(arg0.details.toString)
arg0.side == orig(arg0.side)
arg0.side.bookside == orig(arg0.side.bookside)
arg0.side.bookside.toString == orig(arg0.side.bookside.toString)
arg0.id == orig(arg0.id)
arg0.id.toString == orig(arg0.id.toString)
this.bookSide != null
this.bookSide.side != null
this.bookSide.trader != null
this.bookSide.theBook has only one value
this.bookSide.theBook != null
arg0.user != null
arg0.user.toString one of { "ANN", "REX" }
arg0.product has only one value
arg0.product != null
arg0.product.toString == "GOOG"
arg0.price != null
arg0.price.MKT == false
arg0.details != null
arg0.side != null
arg0.side.bookside != null
arg0.side.bookside.toString one of { "BUY", "SELL" }
arg0.id != null
===========================================================================
book.TradeProcessorPriceTimeImpl.doTrade(tradable.Tradable):::ENTER
this.bookSide.theBook has only one value
arg0.getClass().getName() == tradable.Order.class
constants.BookSide.$VALUES.getClass().getName() != arg0.getClass().getName()
this.bookSide.trader.getClass().getName() != arg0.getClass().getName()
===========================================================================
book.TradeProcessorPriceTimeImpl.doTrade(tradable.Tradable):::EXIT
this.fillMessages == return
this.bookSide == orig(this.bookSide)
this.bookSide.bookEntries == orig(this.bookSide.bookEntries)
this.bookSide.side == orig(this.bookSide.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
this.bookSide.side.bookside == orig(this.bookSide.side.bookside)
this.bookSide.side.bookside.toString == orig(this.bookSide.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.bookSide.trader == orig(this.bookSide.trader)
this.bookSide.trader.getClass().getName() == orig(this.bookSide.trader.getClass().getName())
this.bookSide.theBook == orig(this.bookSide.theBook)
this.bookSide.theBook.product == orig(this.bookSide.theBook.product)
this.bookSide.theBook.product.toString == orig(this.bookSide.theBook.product.toString)
this.bookSide.theBook.buyBook == orig(this.bookSide.theBook.buyBook)
this.bookSide.theBook.sellBook == orig(this.bookSide.theBook.sellBook)
this.bookSide.theBook.lastCurrentMarket == orig(this.bookSide.theBook.lastCurrentMarket)
this.bookSide.theBook.lastCurrentMarket.toString == orig(this.bookSide.theBook.lastCurrentMarket.toString)
this.bookSide.theBook.userQuotes == orig(this.bookSide.theBook.userQuotes)
this.bookSide.theBook.oldEntries == orig(this.bookSide.theBook.oldEntries)
this.bookSide.theBook has only one value
constants.BookSide.$VALUES.getClass().getName() != orig(arg0.getClass().getName())
this.bookSide.trader.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
book.TradeProcessorPriceTimeImpl.isNewFill(publishers.FillMessage):::ENTER
this.bookSide.theBook.product == arg0.product
this.bookSide != null
this.bookSide.side != null
this.bookSide.trader != null
this.bookSide.theBook has only one value
this.bookSide.theBook != null
arg0 != null
arg0.user != null
arg0.user.toString one of { "ANN", "REX" }
arg0.product.toString == "GOOG"
arg0.price != null
arg0.price.MKT == false
arg0.details != null
arg0.side != null
arg0.side.bookside != null
arg0.side.bookside.toString one of { "BUY", "SELL" }
arg0.id != null
===========================================================================
book.TradeProcessorPriceTimeImpl.isNewFill(publishers.FillMessage):::EXIT74
===========================================================================
book.TradeProcessorPriceTimeImpl.isNewFill(publishers.FillMessage):::EXIT74;condition="return == true"
===========================================================================
book.TradeProcessorPriceTimeImpl.isNewFill(publishers.FillMessage):::EXIT
this.fillMessages == orig(this.fillMessages)
this.bookSide == orig(this.bookSide)
this.bookSide.bookEntries == orig(this.bookSide.bookEntries)
this.bookSide.side == orig(this.bookSide.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
this.bookSide.side.bookside == orig(this.bookSide.side.bookside)
this.bookSide.side.bookside.toString == orig(this.bookSide.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.bookSide.trader == orig(this.bookSide.trader)
this.bookSide.trader.getClass().getName() == orig(this.bookSide.trader.getClass().getName())
this.bookSide.theBook == orig(this.bookSide.theBook)
this.bookSide.theBook.product == arg0.product
this.bookSide.theBook.product.toString == orig(this.bookSide.theBook.product.toString)
this.bookSide.theBook.buyBook == orig(this.bookSide.theBook.buyBook)
this.bookSide.theBook.sellBook == orig(this.bookSide.theBook.sellBook)
this.bookSide.theBook.lastCurrentMarket == orig(this.bookSide.theBook.lastCurrentMarket)
this.bookSide.theBook.lastCurrentMarket.toString == orig(this.bookSide.theBook.lastCurrentMarket.toString)
this.bookSide.theBook.userQuotes == orig(this.bookSide.theBook.userQuotes)
this.bookSide.theBook.oldEntries == orig(this.bookSide.theBook.oldEntries)
arg0.user == orig(arg0.user)
arg0.user.toString == orig(arg0.user.toString)
arg0.product == orig(this.bookSide.theBook.product)
arg0.product == orig(arg0.product)
arg0.product.toString == orig(arg0.product.toString)
arg0.price == orig(arg0.price)
arg0.price.VALUE == orig(arg0.price.VALUE)
arg0.price.MKT == orig(arg0.price.MKT)
arg0.volume == orig(arg0.volume)
arg0.details == orig(arg0.details)
arg0.details.toString == orig(arg0.details.toString)
arg0.side == orig(arg0.side)
arg0.side.bookside == orig(arg0.side.bookside)
arg0.side.bookside.toString == orig(arg0.side.bookside.toString)
arg0.id == orig(arg0.id)
arg0.id.toString == orig(arg0.id.toString)
this.bookSide != null
this.bookSide.side != null
this.bookSide.trader != null
this.bookSide.theBook has only one value
this.bookSide.theBook != null
arg0.user != null
arg0.user.toString one of { "ANN", "REX" }
arg0.product has only one value
arg0.product != null
arg0.product.toString == "GOOG"
arg0.price != null
arg0.price.MKT == false
arg0.details != null
arg0.side != null
arg0.side.bookside != null
arg0.side.bookside.toString one of { "BUY", "SELL" }
arg0.id != null
return == true
===========================================================================
book.TradeProcessorPriceTimeImpl.isNewFill(publishers.FillMessage):::EXIT;condition="return == true"
===========================================================================
book.TradeProcessorPriceTimeImpl.makeFillKey(publishers.FillMessage):::ENTER
this.bookSide.theBook.product == arg0.product
this.bookSide != null
this.bookSide.side != null
this.bookSide.trader != null
this.bookSide.theBook has only one value
this.bookSide.theBook != null
arg0 != null
arg0.user != null
arg0.user.toString one of { "ANN", "REX" }
arg0.product.toString == "GOOG"
arg0.price != null
arg0.price.MKT == false
arg0.details != null
arg0.side != null
arg0.side.bookside != null
arg0.side.bookside.toString one of { "BUY", "SELL" }
arg0.id != null
===========================================================================
book.TradeProcessorPriceTimeImpl.makeFillKey(publishers.FillMessage):::EXIT
this.fillMessages == orig(this.fillMessages)
this.bookSide == orig(this.bookSide)
this.bookSide.bookEntries == orig(this.bookSide.bookEntries)
this.bookSide.side == orig(this.bookSide.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
this.bookSide.side.bookside == orig(this.bookSide.side.bookside)
this.bookSide.side.bookside.toString == orig(this.bookSide.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.bookSide.trader == orig(this.bookSide.trader)
this.bookSide.trader.getClass().getName() == orig(this.bookSide.trader.getClass().getName())
this.bookSide.theBook == orig(this.bookSide.theBook)
this.bookSide.theBook.product == arg0.product
this.bookSide.theBook.product.toString == orig(this.bookSide.theBook.product.toString)
this.bookSide.theBook.buyBook == orig(this.bookSide.theBook.buyBook)
this.bookSide.theBook.sellBook == orig(this.bookSide.theBook.sellBook)
this.bookSide.theBook.lastCurrentMarket == orig(this.bookSide.theBook.lastCurrentMarket)
this.bookSide.theBook.lastCurrentMarket.toString == orig(this.bookSide.theBook.lastCurrentMarket.toString)
this.bookSide.theBook.userQuotes == orig(this.bookSide.theBook.userQuotes)
this.bookSide.theBook.oldEntries == orig(this.bookSide.theBook.oldEntries)
arg0.user == orig(arg0.user)
arg0.user.toString == orig(arg0.user.toString)
arg0.product == orig(this.bookSide.theBook.product)
arg0.product == orig(arg0.product)
arg0.product.toString == orig(arg0.product.toString)
arg0.price == orig(arg0.price)
arg0.price.VALUE == orig(arg0.price.VALUE)
arg0.price.MKT == orig(arg0.price.MKT)
arg0.volume == orig(arg0.volume)
arg0.details == orig(arg0.details)
arg0.details.toString == orig(arg0.details.toString)
arg0.side == orig(arg0.side)
arg0.side.bookside == orig(arg0.side.bookside)
arg0.side.bookside.toString == orig(arg0.side.bookside.toString)
arg0.id == orig(arg0.id)
arg0.id.toString == orig(arg0.id.toString)
this.bookSide != null
this.bookSide.side != null
this.bookSide.trader != null
this.bookSide.theBook has only one value
this.bookSide.theBook != null
arg0.user != null
arg0.user.toString one of { "ANN", "REX" }
arg0.product has only one value
arg0.product != null
arg0.product.toString == "GOOG"
arg0.price != null
arg0.price.MKT == false
arg0.details != null
arg0.side != null
arg0.side.bookside != null
arg0.side.bookside.toString one of { "BUY", "SELL" }
arg0.id != null
return != null
===========================================================================
book.TradeProcessorPriceTimeImpl.setProductBookSide(book.ProductBookSide):::ENTER
this.bookSide == null
arg0.side == null
arg0.trader == null
arg0.theBook == null
===========================================================================
book.TradeProcessorPriceTimeImpl.setProductBookSide(book.ProductBookSide):::EXIT
this.fillMessages == orig(this.fillMessages)
this.bookSide == orig(arg0)
this.bookSide.bookEntries == arg0.bookEntries
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
arg0.bookEntries == orig(arg0.bookEntries)
arg0.side == orig(arg0.side)
arg0.trader == orig(arg0.trader)
arg0.theBook == orig(arg0.theBook)
this.bookSide.side == null
this.bookSide.trader == null
this.bookSide.theBook == null
arg0.side == null
arg0.trader == null
arg0.theBook == null
===========================================================================
book.utils.NoSuchProductException:::OBJECT
===========================================================================
book.utils.NoSuchProductException.NoSuchProductException(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "NoSuchProductException: No product on the books."
===========================================================================
book.utils.NoSuchProductException.NoSuchProductException(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "NoSuchProductException: No product on the books."
===========================================================================
book.utils.OrderNotFoundException:::OBJECT
this has only one value
===========================================================================
book.utils.OrderNotFoundException.OrderNotFoundException(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "OrderNotFoundException: Requested order could not be found."
===========================================================================
book.utils.OrderNotFoundException.OrderNotFoundException(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "OrderNotFoundException: Requested order could not be found."
===========================================================================
constants.BookSide:::OBJECT
this.bookside.toString one of { "BUY", "SELL" }
===========================================================================
constants.BookSide.BookSide(java.lang.String, int, java.lang.String):::ENTER
arg0 == arg2
arg0.toString one of { "BUY", "SELL" }
arg1 one of { 0, 1 }
arg2.toString one of { "BUY", "SELL" }
===========================================================================
constants.BookSide.BookSide(java.lang.String, int, java.lang.String):::EXIT
this.bookside == orig(arg0)
this.bookside == orig(arg2)
arg0.toString == orig(arg0.toString)
arg2.toString == orig(arg2.toString)
arg0.toString one of { "BUY", "SELL" }
arg2.toString one of { "BUY", "SELL" }
===========================================================================
constants.MarketState:::CLASS
constants.MarketState.CLOSED has only one value
constants.MarketState.CLOSED != null
constants.MarketState.OPEN has only one value
constants.MarketState.OPEN != null
constants.MarketState.PREOPEN has only one value
constants.MarketState.PREOPEN != null
constants.MarketState.CLOSED.marketstate has only one value
constants.MarketState.CLOSED.marketstate != null
constants.MarketState.CLOSED.marketstate.toString == "CLOSED"
constants.MarketState.$VALUES has only one value
constants.MarketState.$VALUES != null
constants.MarketState.$VALUES.getClass().getName() == constants.MarketState[].class
constants.MarketState.$VALUES[] contains no nulls and has only one value, of length 3
constants.MarketState.$VALUES[] elements != null
constants.MarketState.$VALUES[].getClass().getName() == [constants.MarketState, constants.MarketState, constants.MarketState]
constants.MarketState.$VALUES[].getClass().getName() elements == constants.MarketState.class
constants.MarketState.$VALUES[].marketstate contains no nulls and has only one value, of length 3
constants.MarketState.$VALUES[].marketstate elements != null
constants.MarketState.$VALUES[].marketstate.toString == [CLOSED, OPEN, PREOPEN]
constants.MarketState.$VALUES[].marketstate.toString elements one of { "CLOSED", "OPEN", "PREOPEN" }
constants.MarketState.OPEN.marketstate has only one value
constants.MarketState.OPEN.marketstate != null
constants.MarketState.OPEN.marketstate.toString == "OPEN"
constants.MarketState.PREOPEN.marketstate has only one value
constants.MarketState.PREOPEN.marketstate != null
constants.MarketState.PREOPEN.marketstate.toString == "PREOPEN"
size(constants.MarketState.$VALUES[]) == 3
===========================================================================
constants.MarketState:::OBJECT
this.marketstate != null
this.marketstate.toString one of { "CLOSED", "OPEN", "PREOPEN" }
===========================================================================
constants.MarketState.MarketState(java.lang.String, int, java.lang.String):::ENTER
arg0 == arg2
arg0.toString one of { "CLOSED", "OPEN", "PREOPEN" }
arg1 one of { 0, 1, 2 }
arg2.toString one of { "CLOSED", "OPEN", "PREOPEN" }
===========================================================================
constants.MarketState.MarketState(java.lang.String, int, java.lang.String):::EXIT
this.marketstate == orig(arg0)
this.marketstate == orig(arg2)
arg0.toString == orig(arg0.toString)
arg2.toString == orig(arg2.toString)
arg0.toString one of { "CLOSED", "OPEN", "PREOPEN" }
arg2.toString one of { "CLOSED", "OPEN", "PREOPEN" }
===========================================================================
constants.MarketState.getMarketState():::ENTER
===========================================================================
constants.MarketState.getMarketState():::EXIT
constants.MarketState.CLOSED == orig(constants.MarketState.CLOSED)
constants.MarketState.OPEN == orig(constants.MarketState.OPEN)
constants.MarketState.PREOPEN == orig(constants.MarketState.PREOPEN)
constants.MarketState.CLOSED.marketstate == orig(constants.MarketState.CLOSED.marketstate)
constants.MarketState.CLOSED.marketstate.toString == orig(constants.MarketState.CLOSED.marketstate.toString)
constants.MarketState.$VALUES == orig(constants.MarketState.$VALUES)
constants.MarketState.$VALUES.getClass().getName() == orig(constants.MarketState.$VALUES.getClass().getName())
constants.MarketState.$VALUES[] == orig(constants.MarketState.$VALUES[])
constants.MarketState.$VALUES[].marketstate == orig(constants.MarketState.$VALUES[].marketstate)
constants.MarketState.OPEN.marketstate == orig(constants.MarketState.OPEN.marketstate)
constants.MarketState.OPEN.marketstate.toString == orig(constants.MarketState.OPEN.marketstate.toString)
constants.MarketState.PREOPEN.marketstate == orig(constants.MarketState.PREOPEN.marketstate)
constants.MarketState.PREOPEN.marketstate.toString == orig(constants.MarketState.PREOPEN.marketstate.toString)
this.marketstate == orig(this.marketstate)
this.marketstate.toString == orig(this.marketstate.toString)
return != null
return.toString one of { "CLOSED", "OPEN", "PREOPEN" }
===========================================================================
driver.Phase4$UserImpl:::OBJECT
this.uname != null
this.uname.toString one of { "ANN", "REX" }
===========================================================================
driver.Phase4$UserImpl.UserImpl(java.lang.String):::ENTER
arg0.toString one of { "ANN", "REX" }
===========================================================================
driver.Phase4$UserImpl.UserImpl(java.lang.String):::EXIT
this.uname == orig(arg0)
arg0.toString == orig(arg0.toString)
arg0.toString one of { "ANN", "REX" }
===========================================================================
driver.Phase4$UserImpl.acceptCurrentMarket(java.lang.String, price.Price, int, price.Price, int):::ENTER
arg1.MKT == arg3.MKT
arg0 has only one value
arg0 != null
arg0.toString == "GOOG"
arg1 != null
arg1.VALUE >= 0
arg1.MKT == false
arg2 >= 0
arg3 != null
arg3.VALUE one of { 0, 64115 }
arg4 one of { 0, 45, 150 }
===========================================================================
driver.Phase4$UserImpl.acceptCurrentMarket(java.lang.String, price.Price, int, price.Price, int):::EXIT
this.uname == orig(this.uname)
this.uname.toString == orig(this.uname.toString)
arg0.toString == orig(arg0.toString)
arg1.VALUE == orig(arg1.VALUE)
arg1.MKT == arg3.MKT
arg1.MKT == orig(arg1.MKT)
arg1.MKT == orig(arg3.MKT)
arg3.VALUE == orig(arg3.VALUE)
arg0.toString == "GOOG"
arg1.VALUE >= 0
arg1.MKT == false
arg3.VALUE one of { 0, 64115 }
===========================================================================
driver.Phase4$UserImpl.acceptLastSale(java.lang.String, price.Price, int):::ENTER
arg0 has only one value
arg0.toString == "GOOG"
arg1.VALUE one of { 64110, 64115, 64130 }
arg1.MKT == false
===========================================================================
driver.Phase4$UserImpl.acceptLastSale(java.lang.String, price.Price, int):::EXIT
this.uname == orig(this.uname)
this.uname.toString == orig(this.uname.toString)
arg0.toString == orig(arg0.toString)
arg1.VALUE == orig(arg1.VALUE)
arg1.MKT == orig(arg1.MKT)
arg0.toString == "GOOG"
arg1.VALUE one of { 64110, 64115, 64130 }
arg1.MKT == false
===========================================================================
driver.Phase4$UserImpl.acceptMarketMessage(java.lang.String):::ENTER
arg0 != null
arg0.toString one of { "CLOSED", "OPEN", "PREOPEN" }
===========================================================================
driver.Phase4$UserImpl.acceptMarketMessage(java.lang.String):::EXIT
this.uname == orig(this.uname)
this.uname.toString == orig(this.uname.toString)
arg0.toString == orig(arg0.toString)
arg0.toString one of { "CLOSED", "OPEN", "PREOPEN" }
===========================================================================
driver.Phase4$UserImpl.acceptMessage(publishers.CancelMessage):::ENTER
this.uname == arg0.user
arg0.user.toString one of { "ANN", "REX" }
arg0.product has only one value
arg0.product.toString == "GOOG"
constants.BookSide.BUY has only one value
constants.BookSide.SELL has only one value
arg0.side.bookside.toString one of { "BUY", "SELL" }
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
driver.Phase4$UserImpl.acceptMessage(publishers.CancelMessage):::EXIT
this.uname == arg0.user
this.uname == orig(this.uname)
this.uname == orig(arg0.user)
this.uname.toString == orig(this.uname.toString)
arg0.user.toString == orig(arg0.user.toString)
arg0.product == orig(arg0.product)
arg0.product.toString == orig(arg0.product.toString)
arg0.price == orig(arg0.price)
arg0.price.VALUE == orig(arg0.price.VALUE)
arg0.price.MKT == orig(arg0.price.MKT)
arg0.volume == orig(arg0.volume)
arg0.details == orig(arg0.details)
arg0.details.toString == orig(arg0.details.toString)
arg0.side == orig(arg0.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
arg0.side.bookside == orig(arg0.side.bookside)
arg0.side.bookside.toString == orig(arg0.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
arg0.id == orig(arg0.id)
arg0.id.toString == orig(arg0.id.toString)
arg0.user.toString one of { "ANN", "REX" }
arg0.product has only one value
arg0.product.toString == "GOOG"
constants.BookSide.BUY has only one value
constants.BookSide.SELL has only one value
arg0.side.bookside.toString one of { "BUY", "SELL" }
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
driver.Phase4$UserImpl.acceptMessage(publishers.FillMessage):::ENTER
this.uname == arg0.user
arg0 != null
arg0.user.toString one of { "ANN", "REX" }
arg0.product has only one value
arg0.product != null
arg0.product.toString == "GOOG"
arg0.price != null
arg0.price.MKT == false
arg0.details != null
arg0.side != null
constants.BookSide.BUY has only one value
constants.BookSide.BUY != null
constants.BookSide.SELL has only one value
constants.BookSide.SELL != null
arg0.side.bookside != null
arg0.side.bookside.toString one of { "BUY", "SELL" }
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES != null
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[] elements != null
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside elements != null
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
arg0.id != null
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
driver.Phase4$UserImpl.acceptMessage(publishers.FillMessage):::EXIT
this.uname == arg0.user
this.uname == orig(this.uname)
this.uname == orig(arg0.user)
this.uname.toString == orig(this.uname.toString)
arg0.user.toString == orig(arg0.user.toString)
arg0.product == orig(arg0.product)
arg0.product.toString == orig(arg0.product.toString)
arg0.price == orig(arg0.price)
arg0.price.VALUE == orig(arg0.price.VALUE)
arg0.price.MKT == orig(arg0.price.MKT)
arg0.volume == orig(arg0.volume)
arg0.details == orig(arg0.details)
arg0.details.toString == orig(arg0.details.toString)
arg0.side == orig(arg0.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
arg0.side.bookside == orig(arg0.side.bookside)
arg0.side.bookside.toString == orig(arg0.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
arg0.id == orig(arg0.id)
arg0.id.toString == orig(arg0.id.toString)
arg0.user.toString one of { "ANN", "REX" }
arg0.product has only one value
arg0.product != null
arg0.product.toString == "GOOG"
arg0.price != null
arg0.price.MKT == false
arg0.details != null
arg0.side != null
constants.BookSide.BUY has only one value
constants.BookSide.BUY != null
constants.BookSide.SELL has only one value
constants.BookSide.SELL != null
arg0.side.bookside != null
arg0.side.bookside.toString one of { "BUY", "SELL" }
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES != null
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[] elements != null
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside elements != null
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
arg0.id != null
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
driver.Phase4$UserImpl.acceptTicker(java.lang.String, price.Price, char):::ENTER
arg0 has only one value
arg0.toString == "GOOG"
arg1.VALUE one of { 64110, 64115, 64130 }
arg1.MKT == false
===========================================================================
driver.Phase4$UserImpl.acceptTicker(java.lang.String, price.Price, char):::EXIT
this.uname == orig(this.uname)
this.uname.toString == orig(this.uname.toString)
arg0.toString == orig(arg0.toString)
arg1.VALUE == orig(arg1.VALUE)
arg1.MKT == orig(arg1.MKT)
arg0.toString == "GOOG"
arg1.VALUE one of { 64110, 64115, 64130 }
arg1.MKT == false
===========================================================================
driver.Phase4$UserImpl.getUserName():::ENTER
===========================================================================
driver.Phase4$UserImpl.getUserName():::EXIT
this.uname == return
this.uname.toString == orig(this.uname.toString)
return == orig(this.uname)
return != null
return.toString one of { "ANN", "REX" }
===========================================================================
driver.Phase4:::CLASS
driver.Phase4.u1.getClass().getName() == driver.Phase4.u2.getClass().getName()
driver.Phase4.u1.getClass().getName() == driver.Phase4$UserImpl.class
===========================================================================
driver.Phase4.doBadTests(java.lang.String):::ENTER
driver.Phase4.u1 has only one value
driver.Phase4.u2 has only one value
arg0 has only one value
arg0.toString == "GOOG"
===========================================================================
driver.Phase4.doBadTests(java.lang.String):::EXIT
driver.Phase4.u1 == orig(driver.Phase4.u1)
driver.Phase4.u1.getClass().getName() == orig(driver.Phase4.u1.getClass().getName())
driver.Phase4.u1.getClass().getName() == orig(driver.Phase4.u2.getClass().getName())
driver.Phase4.u2 == orig(driver.Phase4.u2)
arg0.toString == orig(arg0.toString)
driver.Phase4.u1 has only one value
driver.Phase4.u2 has only one value
arg0.toString == "GOOG"
===========================================================================
driver.Phase4.doTradingScenarios(java.lang.String):::ENTER
driver.Phase4.u1 has only one value
driver.Phase4.u2 has only one value
arg0 has only one value
arg0.toString == "GOOG"
===========================================================================
driver.Phase4.doTradingScenarios(java.lang.String):::EXIT
driver.Phase4.u1 == orig(driver.Phase4.u1)
driver.Phase4.u1.getClass().getName() == orig(driver.Phase4.u1.getClass().getName())
driver.Phase4.u1.getClass().getName() == orig(driver.Phase4.u2.getClass().getName())
driver.Phase4.u2 == orig(driver.Phase4.u2)
arg0.toString == orig(arg0.toString)
driver.Phase4.u1 has only one value
driver.Phase4.u2 has only one value
arg0.toString == "GOOG"
===========================================================================
driver.Phase4.main(java.lang.String[]):::ENTER
driver.Phase4.u1 == driver.Phase4.u2
driver.Phase4.u1 == null
arg0 has only one value
arg0.getClass().getName() == java.lang.String[].class
arg0[] == []
arg0[].toString == []
===========================================================================
driver.Phase4.main(java.lang.String[]):::EXIT
arg0[] == orig(arg0[])
driver.Phase4.u1 has only one value
driver.Phase4.u2 has only one value
arg0[] == []
arg0[].toString == []
===========================================================================
driver.Phase4.makeTestUsers():::ENTER
driver.Phase4.u1 == driver.Phase4.u2
driver.Phase4.u1 == null
===========================================================================
driver.Phase4.makeTestUsers():::EXIT
driver.Phase4.u1 has only one value
driver.Phase4.u2 has only one value
===========================================================================
driver.Phase4.printOutBD(java.lang.String[][]):::ENTER
driver.Phase4.u1 has only one value
driver.Phase4.u2 has only one value
arg0.getClass().getName() == java.lang.String[][].class
size(arg0[]) == 2
driver.Phase4.u1.getClass().getName() != arg0.getClass().getName()
===========================================================================
driver.Phase4.printOutBD(java.lang.String[][]):::EXIT
driver.Phase4.u1 == orig(driver.Phase4.u1)
driver.Phase4.u1.getClass().getName() == orig(driver.Phase4.u1.getClass().getName())
driver.Phase4.u1.getClass().getName() == orig(driver.Phase4.u2.getClass().getName())
driver.Phase4.u2 == orig(driver.Phase4.u2)
arg0[] == orig(arg0[])
driver.Phase4.u1 has only one value
driver.Phase4.u2 has only one value
driver.Phase4.u1.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
exceptions.ExceptionHandler.checkIntNegative(int, java.lang.String):::ENTER
arg0 >= 0
arg1 != null
===========================================================================
exceptions.ExceptionHandler.checkIntNegative(int, java.lang.String):::EXIT
arg1.toString == orig(arg1.toString)
return == true
===========================================================================
exceptions.ExceptionHandler.checkIntNegative(int, java.lang.String):::EXIT;condition="return == true"
===========================================================================
exceptions.ExceptionHandler.checkIntZero(int, java.lang.String):::ENTER
arg1 != null
===========================================================================
exceptions.ExceptionHandler.checkIntZero(int, java.lang.String):::EXIT
arg1.toString == orig(arg1.toString)
return == true
===========================================================================
exceptions.ExceptionHandler.checkIntZero(int, java.lang.String):::EXIT;condition="return == true"
===========================================================================
exceptions.ExceptionHandler.checkObject(java.lang.Object, java.lang.String):::ENTER
arg0 != null
arg1 != null
===========================================================================
exceptions.ExceptionHandler.checkObject(java.lang.Object, java.lang.String):::EXIT
arg1.toString == orig(arg1.toString)
return == true
===========================================================================
exceptions.ExceptionHandler.checkObject(java.lang.Object, java.lang.String):::EXIT;condition="return == true"
===========================================================================
exceptions.ExceptionHandler.checkPriceInput(java.lang.String, java.lang.String):::ENTER
arg0 != null
arg1 has only one value
arg1 != null
arg1.toString == "Price.PriceFactory#makeLimitPrice."
===========================================================================
exceptions.ExceptionHandler.checkPriceInput(java.lang.String, java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
arg1.toString == "Price.PriceFactory#makeLimitPrice."
return == true
===========================================================================
exceptions.ExceptionHandler.checkPriceInput(java.lang.String, java.lang.String):::EXIT;condition="return == true"
===========================================================================
exceptions.ExceptionHandler.checkString(java.lang.String, java.lang.String):::ENTER
arg0 != null
arg1 != null
===========================================================================
exceptions.ExceptionHandler.checkString(java.lang.String, java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
return == true
===========================================================================
exceptions.ExceptionHandler.checkString(java.lang.String, java.lang.String):::EXIT;condition="return == true"
===========================================================================
exceptions.InvalidValueException:::OBJECT
this has only one value
===========================================================================
exceptions.InvalidValueException.InvalidValueException(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "InvalidValueException: NULL String passed into book.ProductService#createProduct."
===========================================================================
exceptions.InvalidValueException.InvalidValueException(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "InvalidValueException: NULL String passed into book.ProductService#createProduct."
===========================================================================
price.Price:::OBJECT
this.VALUE >= 0
===========================================================================
price.Price.Price():::EXIT
this.VALUE == 0
this.MKT == true
===========================================================================
price.Price.Price(long):::ENTER
===========================================================================
price.Price.Price(long):::EXIT
this.VALUE == orig(arg0)
this.MKT == false
===========================================================================
price.Price.compareTo(price.Price):::ENTER
this.MKT == arg0.MKT
this.MKT == false
arg0 != null
arg0.VALUE >= 0
===========================================================================
price.Price.compareTo(price.Price):::EXIT136
this.VALUE == arg0.VALUE
this.VALUE == orig(arg0.VALUE)
orig(this) == orig(arg0)
return == 0
===========================================================================
price.Price.compareTo(price.Price):::EXIT138
return == -1
this.VALUE < arg0.VALUE
===========================================================================
price.Price.compareTo(price.Price):::EXIT140
return == 1
this.VALUE > arg0.VALUE
===========================================================================
price.Price.compareTo(price.Price):::EXIT
this.VALUE == orig(this.VALUE)
this.MKT == arg0.MKT
this.MKT == orig(this.MKT)
this.MKT == orig(arg0.MKT)
arg0.VALUE == orig(arg0.VALUE)
this.MKT == false
arg0.VALUE >= 0
return one of { -1, 0, 1 }
===========================================================================
price.Price.equals(price.Price):::ENTER
this.MKT == arg0.MKT
this.VALUE one of { 64110, 64115, 64130 }
this.MKT == false
arg0.VALUE one of { 64115, 64130 }
===========================================================================
price.Price.equals(price.Price):::EXIT235
this.VALUE == arg0.VALUE
this.VALUE == orig(arg0.VALUE)
orig(this) == orig(arg0)
this.VALUE == 64115
return == true
orig(this) has only one value
orig(arg0) has only one value
===========================================================================
price.Price.equals(price.Price):::EXIT235;condition="return == true"
===========================================================================
price.Price.equals(price.Price):::EXIT237
this.VALUE one of { 64110, 64130 }
return == false
===========================================================================
price.Price.equals(price.Price):::EXIT237;condition="not(return == true)"
===========================================================================
price.Price.equals(price.Price):::EXIT
this.VALUE == orig(this.VALUE)
this.MKT == arg0.MKT
this.MKT == orig(this.MKT)
this.MKT == orig(arg0.MKT)
arg0.VALUE == orig(arg0.VALUE)
(this.VALUE == 64115)  <==>  (return == true)
(this.VALUE == 64115)  <==>  (this.VALUE == arg0.VALUE)
(this.VALUE == 64115)  ==>  (arg0.VALUE == 64115)
(this.VALUE == 64115)  ==>  (orig(arg0) has only one value)
(this.VALUE == 64115)  ==>  (orig(this) == orig(arg0))
(this.VALUE == 64115)  ==>  (orig(this) has only one value)
(this.VALUE one of { 64110, 64130 })  <==>  (return == false)
(this.VALUE one of { 64110, 64130 })  ==>  (arg0.VALUE one of { 64115, 64130 })
this.VALUE one of { 64110, 64115, 64130 }
this.MKT == false
arg0.VALUE one of { 64115, 64130 }
===========================================================================
price.Price.equals(price.Price):::EXIT;condition="return == true"
this.VALUE == arg0.VALUE
this.VALUE == orig(arg0.VALUE)
orig(this) == orig(arg0)
this.VALUE == 64115
return == true
orig(this) has only one value
orig(arg0) has only one value
===========================================================================
price.Price.equals(price.Price):::EXIT;condition="not(return == true)"
this.VALUE one of { 64110, 64130 }
return == false
===========================================================================
price.Price.getMarketPrice():::ENTER
===========================================================================
price.Price.getMarketPrice():::EXIT
this.VALUE == orig(this.VALUE)
this.MKT == return
return == orig(this.MKT)
(return == true)  ==>  (orig(this) has only one value)
(return == true)  ==>  (this.VALUE == 0)
===========================================================================
price.Price.getMarketPrice():::EXIT;condition="return == true"
this.VALUE == 0
return == true
orig(this) has only one value
===========================================================================
price.Price.getMarketPrice():::EXIT;condition="not(return == true)"
return == false
===========================================================================
price.Price.getValue():::ENTER
this.MKT == false
===========================================================================
price.Price.getValue():::EXIT
this.VALUE == return
this.MKT == orig(this.MKT)
return == orig(this.VALUE)
this.MKT == false
return >= 0
===========================================================================
price.Price.greaterOrEqual(price.Price):::ENTER
this.VALUE one of { 0, 64114, 64115 }
arg0.MKT == false
this.VALUE <= arg0.VALUE
===========================================================================
price.Price.greaterOrEqual(price.Price):::EXIT156
this.VALUE == 0
this.MKT == true
return == false
orig(this) has only one value
===========================================================================
price.Price.greaterOrEqual(price.Price):::EXIT156;condition="not(return == true)"
===========================================================================
price.Price.greaterOrEqual(price.Price):::EXIT158
this.VALUE == arg0.VALUE
this.VALUE == orig(arg0.VALUE)
this.MKT == arg0.MKT
this.MKT == orig(arg0.MKT)
orig(this) == orig(arg0)
this.VALUE == 64115
this.MKT == false
return == true
orig(this) has only one value
orig(arg0) has only one value
===========================================================================
price.Price.greaterOrEqual(price.Price):::EXIT158;condition="return == true"
===========================================================================
price.Price.greaterOrEqual(price.Price):::EXIT160
this.MKT == arg0.MKT
this.MKT == orig(arg0.MKT)
this.VALUE == 64114
this.MKT == false
arg0.VALUE == 64115
return == false
orig(this) has only one value
orig(arg0) has only one value
===========================================================================
price.Price.greaterOrEqual(price.Price):::EXIT160;condition="not(return == true)"
===========================================================================
price.Price.greaterOrEqual(price.Price):::EXIT
this.VALUE == orig(this.VALUE)
this.MKT == orig(this.MKT)
arg0.VALUE == orig(arg0.VALUE)
arg0.MKT == orig(arg0.MKT)
(this.VALUE == 64115)  <==>  (return == true)
(this.VALUE == 64115)  <==>  (this.VALUE == arg0.VALUE)
(this.VALUE == 64115)  ==>  (arg0.VALUE == 64115)
(this.VALUE == 64115)  ==>  (orig(arg0) has only one value)
(this.VALUE == 64115)  ==>  (orig(this) == orig(arg0))
(this.VALUE == 64115)  ==>  (orig(this) has only one value)
(this.VALUE == 64115)  ==>  (this.MKT == arg0.MKT)
(this.VALUE == 64115)  ==>  (this.MKT == false)
(this.VALUE one of { 0, 64114 })  <==>  (return == false)
(this.VALUE one of { 0, 64114 })  <==>  (this.VALUE < arg0.VALUE)
this.VALUE one of { 0, 64114, 64115 }
arg0.MKT == false
this.VALUE <= arg0.VALUE
===========================================================================
price.Price.greaterOrEqual(price.Price):::EXIT;condition="return == true"
this.VALUE == arg0.VALUE
this.VALUE == orig(arg0.VALUE)
this.MKT == arg0.MKT
this.MKT == orig(arg0.MKT)
orig(this) == orig(arg0)
this.VALUE == 64115
this.MKT == false
return == true
orig(this) has only one value
orig(arg0) has only one value
===========================================================================
price.Price.greaterOrEqual(price.Price):::EXIT;condition="not(return == true)"
this.VALUE one of { 0, 64114 }
return == false
this.VALUE < arg0.VALUE
===========================================================================
price.Price.greaterThan(price.Price):::ENTER
this.VALUE one of { 64110, 64130 }
this.MKT == false
arg0.VALUE one of { 64115, 64130 }
arg0.MKT == false
===========================================================================
price.Price.greaterThan(price.Price):::EXIT177
this.VALUE == 64130
arg0.VALUE == 64115
return == true
orig(this) has only one value
orig(arg0) has only one value
===========================================================================
price.Price.greaterThan(price.Price):::EXIT177;condition="return == true"
===========================================================================
price.Price.greaterThan(price.Price):::EXIT179
this.VALUE == 64110
arg0.VALUE == 64130
return == false
orig(this) has only one value
orig(arg0) has only one value
===========================================================================
price.Price.greaterThan(price.Price):::EXIT179;condition="not(return == true)"
===========================================================================
price.Price.greaterThan(price.Price):::EXIT
this.VALUE == orig(this.VALUE)
this.MKT == orig(this.MKT)
arg0.VALUE == orig(arg0.VALUE)
arg0.MKT == orig(arg0.MKT)
(this.VALUE == 64110)  <==>  (arg0.VALUE == 64130)
(this.VALUE == 64110)  <==>  (return == false)
(this.VALUE == 64130)  <==>  (arg0.VALUE == 64115)
(this.VALUE == 64130)  <==>  (return == true)
this.VALUE one of { 64110, 64130 }
this.MKT == false
arg0.VALUE one of { 64115, 64130 }
arg0.MKT == false
===========================================================================
price.Price.greaterThan(price.Price):::EXIT;condition="return == true"
this.VALUE == 64130
arg0.VALUE == 64115
return == true
orig(this) has only one value
orig(arg0) has only one value
===========================================================================
price.Price.greaterThan(price.Price):::EXIT;condition="not(return == true)"
this.VALUE == 64110
arg0.VALUE == 64130
return == false
orig(this) has only one value
orig(arg0) has only one value
===========================================================================
price.Price.isMarket():::ENTER
===========================================================================
price.Price.isMarket():::EXIT249
this.VALUE == 0
this.MKT == true
return == true
orig(this) has only one value
===========================================================================
price.Price.isMarket():::EXIT249;condition="return == true"
===========================================================================
price.Price.isMarket():::EXIT251
this.MKT == false
return == false
===========================================================================
price.Price.isMarket():::EXIT251;condition="not(return == true)"
===========================================================================
price.Price.isMarket():::EXIT
this.VALUE == orig(this.VALUE)
this.MKT == orig(this.MKT)
(this.MKT == false)  <==>  (return == false)
(this.MKT == true)  <==>  (return == true)
(this.MKT == true)  ==>  (orig(this) has only one value)
(this.MKT == true)  ==>  (this.VALUE == 0)
===========================================================================
price.Price.isMarket():::EXIT;condition="return == true"
this.VALUE == 0
this.MKT == true
return == true
orig(this) has only one value
===========================================================================
price.Price.isMarket():::EXIT;condition="not(return == true)"
this.MKT == false
return == false
===========================================================================
price.Price.lessOrEqual(price.Price):::ENTER
this.MKT == arg0.MKT
this.VALUE one of { 64110, 64115, 64130 }
this.MKT == false
arg0.VALUE one of { 0, 64110, 64130 }
this.VALUE >= arg0.VALUE
===========================================================================
price.Price.lessOrEqual(price.Price):::EXIT197
this.VALUE == arg0.VALUE
this.VALUE == orig(arg0.VALUE)
orig(this) == orig(arg0)
this.VALUE one of { 64110, 64130 }
return == true
===========================================================================
price.Price.lessOrEqual(price.Price):::EXIT197;condition="return == true"
===========================================================================
price.Price.lessOrEqual(price.Price):::EXIT199
this.VALUE one of { 64110, 64115 }
arg0.VALUE one of { 0, 64110 }
return == false
===========================================================================
price.Price.lessOrEqual(price.Price):::EXIT199;condition="not(return == true)"
===========================================================================
price.Price.lessOrEqual(price.Price):::EXIT
this.VALUE == orig(this.VALUE)
this.MKT == arg0.MKT
this.MKT == orig(this.MKT)
this.MKT == orig(arg0.MKT)
arg0.VALUE == orig(arg0.VALUE)
(return == false)  ==>  (arg0.VALUE one of { 0, 64110 })
(return == false)  ==>  (this.VALUE one of { 64110, 64115 })
(return == true)  <==>  (this.VALUE == arg0.VALUE)
(return == true)  ==>  (arg0.VALUE one of { 64110, 64130 })
(return == true)  ==>  (orig(this) == orig(arg0))
(return == true)  ==>  (this.VALUE one of { 64110, 64130 })
this.VALUE one of { 64110, 64115, 64130 }
this.MKT == false
arg0.VALUE one of { 0, 64110, 64130 }
this.VALUE >= arg0.VALUE
===========================================================================
price.Price.lessOrEqual(price.Price):::EXIT;condition="return == true"
this.VALUE == arg0.VALUE
this.VALUE == orig(arg0.VALUE)
orig(this) == orig(arg0)
this.VALUE one of { 64110, 64130 }
return == true
===========================================================================
price.Price.lessOrEqual(price.Price):::EXIT;condition="not(return == true)"
this.VALUE one of { 64110, 64115 }
arg0.VALUE one of { 0, 64110 }
return == false
===========================================================================
price.Price.lessThan(price.Price):::ENTER
this has only one value
this.VALUE == 64110
this.MKT == false
arg0 has only one value
arg0.VALUE == 64130
arg0.MKT == false
===========================================================================
price.Price.lessThan(price.Price):::EXIT216
===========================================================================
price.Price.lessThan(price.Price):::EXIT216;condition="return == true"
===========================================================================
price.Price.lessThan(price.Price):::EXIT
this.VALUE == orig(this.VALUE)
this.MKT == orig(this.MKT)
arg0.VALUE == orig(arg0.VALUE)
arg0.MKT == orig(arg0.MKT)
this.VALUE == 64110
this.MKT == false
arg0.VALUE == 64130
arg0.MKT == false
return == true
===========================================================================
price.Price.lessThan(price.Price):::EXIT;condition="return == true"
===========================================================================
price.Price.toString():::ENTER
===========================================================================
price.Price.toString():::EXIT281
this.VALUE == 0
this.MKT == true
return has only one value
return.toString == "MKT"
orig(this) has only one value
===========================================================================
price.Price.toString():::EXIT286
this.MKT == false
===========================================================================
price.Price.toString():::EXIT
this.VALUE == orig(this.VALUE)
this.MKT == orig(this.MKT)
(this.MKT == true)  ==>  (orig(this) has only one value)
(this.MKT == true)  ==>  (return has only one value)
(this.MKT == true)  ==>  (return.toString == "MKT")
(this.MKT == true)  ==>  (this.VALUE == 0)
return != null
===========================================================================
price.PriceFactory:::CLASS
price.PriceFactory.prices has only one value
price.PriceFactory.prices != null
===========================================================================
price.PriceFactory.makeLimitPrice(java.lang.String):::ENTER
arg0 != null
===========================================================================
price.PriceFactory.makeLimitPrice(java.lang.String):::EXIT
price.PriceFactory.prices == orig(price.PriceFactory.prices)
return != null
return.VALUE >= 0
return.MKT == false
===========================================================================
price.PriceFactory.makeLimitPrice(long):::ENTER
arg0 >= 0
===========================================================================
price.PriceFactory.makeLimitPrice(long):::EXIT139
===========================================================================
price.PriceFactory.makeLimitPrice(long):::EXIT143
===========================================================================
price.PriceFactory.makeLimitPrice(long):::EXIT
price.PriceFactory.prices == orig(price.PriceFactory.prices)
return.VALUE == orig(arg0)
return != null
return.VALUE >= 0
return.MKT == false
===========================================================================
price.PriceFactory.makeMarketPrice():::ENTER
===========================================================================
price.PriceFactory.makeMarketPrice():::EXIT162
===========================================================================
price.PriceFactory.makeMarketPrice():::EXIT167
===========================================================================
price.PriceFactory.makeMarketPrice():::EXIT
price.PriceFactory.prices == orig(price.PriceFactory.prices)
return has only one value
return != null
return.VALUE == 0
return.MKT == true
===========================================================================
publishers.CancelMessage:::OBJECT
this.user.toString one of { "ANN", "REX" }
this.product has only one value
this.product.toString == "GOOG"
constants.BookSide.BUY has only one value
constants.BookSide.SELL has only one value
constants.BookSide.BUY.bookside has only one value
constants.BookSide.BUY.bookside.toString == "BUY"
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
constants.BookSide.SELL.bookside has only one value
constants.BookSide.SELL.bookside.toString == "SELL"
this.side.bookside.toString one of { "BUY", "SELL" }
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
publishers.CancelMessage.CancelMessage(java.lang.String, java.lang.String, price.Price, int, java.lang.String, constants.BookSide, java.lang.String):::ENTER
arg0.toString one of { "ANN", "REX" }
arg1 has only one value
arg1.toString == "GOOG"
constants.BookSide.BUY has only one value
constants.BookSide.SELL has only one value
constants.BookSide.BUY.bookside has only one value
constants.BookSide.BUY.bookside.toString == "BUY"
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
constants.BookSide.SELL.bookside has only one value
constants.BookSide.SELL.bookside.toString == "SELL"
arg5.bookside.toString one of { "BUY", "SELL" }
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
publishers.CancelMessage.CancelMessage(java.lang.String, java.lang.String, price.Price, int, java.lang.String, constants.BookSide, java.lang.String):::EXIT
this.user == orig(arg0)
this.product == orig(arg1)
this.price == orig(arg2)
this.price.VALUE == arg2.VALUE
this.price.MKT == arg2.MKT
this.volume == orig(arg3)
this.details == orig(arg4)
this.side == orig(arg5)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == arg5.bookside
this.id == orig(arg6)
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
arg2.VALUE == orig(arg2.VALUE)
arg2.MKT == orig(arg2.MKT)
arg4.toString == orig(arg4.toString)
arg5.bookside == orig(arg5.bookside)
arg5.bookside.toString == orig(arg5.bookside.toString)
arg6.toString == orig(arg6.toString)
arg0.toString one of { "ANN", "REX" }
arg1.toString == "GOOG"
arg5.bookside.toString one of { "BUY", "SELL" }
===========================================================================
publishers.CurrentMarketPublisher:::CLASS
publishers.CurrentMarketPublisher.myPublisher.subscribers has only one value
publishers.CurrentMarketPublisher.myPublisher.subscribers != null
===========================================================================
publishers.CurrentMarketPublisher:::OBJECT
this has only one value
===========================================================================
publishers.CurrentMarketPublisher.CurrentMarketPublisher():::EXIT
publishers.CurrentMarketPublisher.myPublisher == null
publishers.CurrentMarketPublisher.instance == null
===========================================================================
publishers.CurrentMarketPublisher.checkPrice(price.Price):::ENTER
this == publishers.CurrentMarketPublisher.instance
publishers.CurrentMarketPublisher.myPublisher has only one value
publishers.CurrentMarketPublisher.myPublisher != null
publishers.CurrentMarketPublisher.instance has only one value
publishers.CurrentMarketPublisher.instance != null
arg0 != null
arg0.VALUE >= 0
arg0.MKT == false
===========================================================================
publishers.CurrentMarketPublisher.checkPrice(price.Price):::EXIT131
===========================================================================
publishers.CurrentMarketPublisher.checkPrice(price.Price):::EXIT
publishers.CurrentMarketPublisher.myPublisher == orig(publishers.CurrentMarketPublisher.myPublisher)
publishers.CurrentMarketPublisher.myPublisher.subscribers == orig(publishers.CurrentMarketPublisher.myPublisher.subscribers)
publishers.CurrentMarketPublisher.instance == orig(this)
publishers.CurrentMarketPublisher.instance == orig(publishers.CurrentMarketPublisher.instance)
arg0.VALUE == return.VALUE
arg0.VALUE == orig(arg0.VALUE)
arg0.MKT == return.MKT
arg0.MKT == orig(arg0.MKT)
return == orig(arg0)
publishers.CurrentMarketPublisher.myPublisher has only one value
publishers.CurrentMarketPublisher.myPublisher != null
publishers.CurrentMarketPublisher.instance has only one value
publishers.CurrentMarketPublisher.instance != null
arg0.VALUE >= 0
arg0.MKT == false
return != null
===========================================================================
publishers.CurrentMarketPublisher.getInstance():::ENTER
===========================================================================
publishers.CurrentMarketPublisher.getInstance():::EXIT
publishers.CurrentMarketPublisher.myPublisher.subscribers == orig(publishers.CurrentMarketPublisher.myPublisher.subscribers)
publishers.CurrentMarketPublisher.instance == return
publishers.CurrentMarketPublisher.myPublisher has only one value
publishers.CurrentMarketPublisher.myPublisher != null
publishers.CurrentMarketPublisher.instance has only one value
publishers.CurrentMarketPublisher.instance != null
===========================================================================
publishers.CurrentMarketPublisher.publishCurrentMarket(publishers.MarketDataDTO):::ENTER
this == publishers.CurrentMarketPublisher.instance
arg0.buyPrice.MKT == arg0.sellPrice.MKT
publishers.CurrentMarketPublisher.myPublisher has only one value
publishers.CurrentMarketPublisher.myPublisher != null
publishers.CurrentMarketPublisher.instance has only one value
publishers.CurrentMarketPublisher.instance != null
arg0 != null
arg0.product has only one value
arg0.product != null
arg0.product.toString == "GOOG"
arg0.buyPrice != null
arg0.buyPrice.VALUE >= 0
arg0.buyPrice.MKT == false
arg0.buyVolume >= 0
arg0.sellPrice != null
arg0.sellPrice.VALUE one of { 0, 64115 }
arg0.sellVolume one of { 0, 45, 150 }
===========================================================================
publishers.CurrentMarketPublisher.publishCurrentMarket(publishers.MarketDataDTO):::EXIT
publishers.CurrentMarketPublisher.myPublisher == orig(publishers.CurrentMarketPublisher.myPublisher)
publishers.CurrentMarketPublisher.myPublisher.subscribers == orig(publishers.CurrentMarketPublisher.myPublisher.subscribers)
publishers.CurrentMarketPublisher.instance == orig(this)
publishers.CurrentMarketPublisher.instance == orig(publishers.CurrentMarketPublisher.instance)
arg0.product == orig(arg0.product)
arg0.product.toString == orig(arg0.product.toString)
arg0.buyPrice == orig(arg0.buyPrice)
arg0.buyPrice.VALUE == orig(arg0.buyPrice.VALUE)
arg0.buyPrice.MKT == arg0.sellPrice.MKT
arg0.buyPrice.MKT == orig(arg0.buyPrice.MKT)
arg0.buyPrice.MKT == orig(arg0.sellPrice.MKT)
arg0.buyVolume == orig(arg0.buyVolume)
arg0.sellPrice == orig(arg0.sellPrice)
arg0.sellPrice.VALUE == orig(arg0.sellPrice.VALUE)
arg0.sellVolume == orig(arg0.sellVolume)
publishers.CurrentMarketPublisher.myPublisher has only one value
publishers.CurrentMarketPublisher.myPublisher != null
publishers.CurrentMarketPublisher.instance has only one value
publishers.CurrentMarketPublisher.instance != null
arg0.product has only one value
arg0.product != null
arg0.product.toString == "GOOG"
arg0.buyPrice != null
arg0.buyPrice.VALUE >= 0
arg0.buyPrice.MKT == false
arg0.buyVolume >= 0
arg0.sellPrice != null
arg0.sellPrice.VALUE one of { 0, 64115 }
arg0.sellVolume one of { 0, 45, 150 }
===========================================================================
publishers.CurrentMarketPublisher.subscribe(client.User, java.lang.String):::ENTER
this == publishers.CurrentMarketPublisher.instance
publishers.CurrentMarketPublisher.myPublisher has only one value
publishers.CurrentMarketPublisher.instance has only one value
arg0.getClass().getName() == driver.Phase4$UserImpl.class
arg1 has only one value
arg1.toString == "GOOG"
===========================================================================
publishers.CurrentMarketPublisher.subscribe(client.User, java.lang.String):::EXIT
publishers.CurrentMarketPublisher.myPublisher == orig(publishers.CurrentMarketPublisher.myPublisher)
publishers.CurrentMarketPublisher.myPublisher.subscribers == orig(publishers.CurrentMarketPublisher.myPublisher.subscribers)
publishers.CurrentMarketPublisher.instance == orig(this)
publishers.CurrentMarketPublisher.instance == orig(publishers.CurrentMarketPublisher.instance)
arg1.toString == orig(arg1.toString)
publishers.CurrentMarketPublisher.myPublisher has only one value
publishers.CurrentMarketPublisher.instance has only one value
arg1.toString == "GOOG"
===========================================================================
publishers.FillMessage:::OBJECT
this.user != null
this.user.toString one of { "ANN", "REX" }
this.product has only one value
this.product != null
this.product.toString == "GOOG"
this.price != null
this.price.MKT == false
this.details != null
this.side != null
constants.BookSide.BUY has only one value
constants.BookSide.BUY != null
constants.BookSide.SELL has only one value
constants.BookSide.SELL != null
constants.BookSide.BUY.bookside has only one value
constants.BookSide.BUY.bookside != null
constants.BookSide.BUY.bookside.toString == "BUY"
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES != null
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[] elements != null
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside elements != null
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
constants.BookSide.SELL.bookside has only one value
constants.BookSide.SELL.bookside != null
constants.BookSide.SELL.bookside.toString == "SELL"
this.side.bookside != null
this.side.bookside.toString one of { "BUY", "SELL" }
this.id != null
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
publishers.FillMessage.FillMessage(java.lang.String, java.lang.String, price.Price, int, java.lang.String, constants.BookSide, java.lang.String):::ENTER
arg0 != null
arg0.toString one of { "ANN", "REX" }
arg1 has only one value
arg1 != null
arg1.toString == "GOOG"
arg2 != null
arg2.MKT == false
arg4 != null
arg5 != null
constants.BookSide.BUY has only one value
constants.BookSide.BUY != null
constants.BookSide.SELL has only one value
constants.BookSide.SELL != null
constants.BookSide.BUY.bookside has only one value
constants.BookSide.BUY.bookside != null
constants.BookSide.BUY.bookside.toString == "BUY"
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES != null
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[] elements != null
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside elements != null
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
constants.BookSide.SELL.bookside has only one value
constants.BookSide.SELL.bookside != null
constants.BookSide.SELL.bookside.toString == "SELL"
arg5.bookside != null
arg5.bookside.toString one of { "BUY", "SELL" }
arg6 != null
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
publishers.FillMessage.FillMessage(java.lang.String, java.lang.String, price.Price, int, java.lang.String, constants.BookSide, java.lang.String):::EXIT
this.user == orig(arg0)
this.product == orig(arg1)
this.price == orig(arg2)
this.price.VALUE == arg2.VALUE
this.price.MKT == arg2.MKT
this.volume == orig(arg3)
this.details == orig(arg4)
this.side == orig(arg5)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == arg5.bookside
this.id == orig(arg6)
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
arg2.VALUE == orig(arg2.VALUE)
arg2.MKT == orig(arg2.MKT)
arg4.toString == orig(arg4.toString)
arg5.bookside == orig(arg5.bookside)
arg5.bookside.toString == orig(arg5.bookside.toString)
arg6.toString == orig(arg6.toString)
arg0.toString one of { "ANN", "REX" }
arg1.toString == "GOOG"
arg2.MKT == false
arg5.bookside != null
arg5.bookside.toString one of { "BUY", "SELL" }
===========================================================================
publishers.FillMessage.compareTo(publishers.FillMessage):::ENTER
this.product == arg0.product
this.price.MKT == arg0.price.MKT
arg0 != null
arg0.user != null
arg0.user.toString one of { "ANN", "REX" }
arg0.product.toString == "GOOG"
arg0.price != null
arg0.details != null
arg0.side != null
arg0.side.bookside != null
arg0.side.bookside.toString one of { "BUY", "SELL" }
arg0.id != null
===========================================================================
publishers.FillMessage.compareTo(publishers.FillMessage):::EXIT46
===========================================================================
publishers.FillMessage.compareTo(publishers.FillMessage):::EXIT
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.product == arg0.product
this.product == orig(this.product)
this.product == orig(arg0.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == arg0.price.MKT
this.price.MKT == orig(this.price.MKT)
this.price.MKT == orig(arg0.price.MKT)
this.volume == orig(this.volume)
this.details == orig(this.details)
this.details.toString == orig(this.details.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
arg0.user == orig(arg0.user)
arg0.user.toString == orig(arg0.user.toString)
arg0.product.toString == orig(arg0.product.toString)
arg0.price == orig(arg0.price)
arg0.price.VALUE == orig(arg0.price.VALUE)
arg0.volume == orig(arg0.volume)
arg0.details == orig(arg0.details)
arg0.details.toString == orig(arg0.details.toString)
arg0.side == orig(arg0.side)
arg0.side.bookside == orig(arg0.side.bookside)
arg0.side.bookside.toString == orig(arg0.side.bookside.toString)
arg0.id == orig(arg0.id)
arg0.id.toString == orig(arg0.id.toString)
arg0.user != null
arg0.user.toString one of { "ANN", "REX" }
arg0.product.toString == "GOOG"
arg0.price != null
arg0.details != null
arg0.side != null
arg0.side.bookside != null
arg0.side.bookside.toString one of { "BUY", "SELL" }
arg0.id != null
return one of { -1, 0, 1 }
===========================================================================
publishers.FillMessage.toString():::ENTER
===========================================================================
publishers.FillMessage.toString():::EXIT
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.volume == orig(this.volume)
this.details == orig(this.details)
this.details.toString == orig(this.details.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
return != null
===========================================================================
publishers.LastSalePublisher:::CLASS
publishers.LastSalePublisher.myPublisher.subscribers has only one value
publishers.LastSalePublisher.myPublisher.subscribers != null
===========================================================================
publishers.LastSalePublisher:::OBJECT
this has only one value
===========================================================================
publishers.LastSalePublisher.LastSalePublisher():::EXIT
publishers.LastSalePublisher.myPublisher == null
publishers.LastSalePublisher.instance == null
===========================================================================
publishers.LastSalePublisher.check(price.Price):::ENTER
this == publishers.LastSalePublisher.instance
publishers.LastSalePublisher.myPublisher has only one value
publishers.LastSalePublisher.instance has only one value
arg0.VALUE one of { 64110, 64115, 64130 }
arg0.MKT == false
===========================================================================
publishers.LastSalePublisher.check(price.Price):::EXIT126
===========================================================================
publishers.LastSalePublisher.check(price.Price):::EXIT
publishers.LastSalePublisher.myPublisher == orig(publishers.LastSalePublisher.myPublisher)
publishers.LastSalePublisher.myPublisher.subscribers == orig(publishers.LastSalePublisher.myPublisher.subscribers)
publishers.LastSalePublisher.instance == orig(this)
publishers.LastSalePublisher.instance == orig(publishers.LastSalePublisher.instance)
arg0.VALUE == return.VALUE
arg0.VALUE == orig(arg0.VALUE)
arg0.MKT == return.MKT
arg0.MKT == orig(arg0.MKT)
return == orig(arg0)
publishers.LastSalePublisher.myPublisher has only one value
publishers.LastSalePublisher.instance has only one value
arg0.VALUE one of { 64110, 64115, 64130 }
arg0.MKT == false
===========================================================================
publishers.LastSalePublisher.getInstance():::ENTER
===========================================================================
publishers.LastSalePublisher.getInstance():::EXIT
publishers.LastSalePublisher.myPublisher.subscribers == orig(publishers.LastSalePublisher.myPublisher.subscribers)
publishers.LastSalePublisher.instance == return
publishers.LastSalePublisher.myPublisher has only one value
publishers.LastSalePublisher.instance has only one value
===========================================================================
publishers.LastSalePublisher.publishLastSale(java.lang.String, price.Price, int):::ENTER
this == publishers.LastSalePublisher.instance
publishers.LastSalePublisher.myPublisher has only one value
publishers.LastSalePublisher.instance has only one value
arg0 has only one value
arg0.toString == "GOOG"
arg1.VALUE one of { 64110, 64115, 64130 }
arg1.MKT == false
===========================================================================
publishers.LastSalePublisher.publishLastSale(java.lang.String, price.Price, int):::EXIT
publishers.LastSalePublisher.myPublisher == orig(publishers.LastSalePublisher.myPublisher)
publishers.LastSalePublisher.myPublisher.subscribers == orig(publishers.LastSalePublisher.myPublisher.subscribers)
publishers.LastSalePublisher.instance == orig(this)
publishers.LastSalePublisher.instance == orig(publishers.LastSalePublisher.instance)
arg0.toString == orig(arg0.toString)
arg1.VALUE == orig(arg1.VALUE)
arg1.MKT == orig(arg1.MKT)
publishers.LastSalePublisher.myPublisher has only one value
publishers.LastSalePublisher.instance has only one value
arg0.toString == "GOOG"
arg1.VALUE one of { 64110, 64115, 64130 }
arg1.MKT == false
===========================================================================
publishers.LastSalePublisher.subscribe(client.User, java.lang.String):::ENTER
this == publishers.LastSalePublisher.instance
publishers.LastSalePublisher.myPublisher has only one value
publishers.LastSalePublisher.instance has only one value
arg0.getClass().getName() == driver.Phase4$UserImpl.class
arg1 has only one value
arg1.toString == "GOOG"
===========================================================================
publishers.LastSalePublisher.subscribe(client.User, java.lang.String):::EXIT
publishers.LastSalePublisher.myPublisher == orig(publishers.LastSalePublisher.myPublisher)
publishers.LastSalePublisher.myPublisher.subscribers == orig(publishers.LastSalePublisher.myPublisher.subscribers)
publishers.LastSalePublisher.instance == orig(this)
publishers.LastSalePublisher.instance == orig(publishers.LastSalePublisher.instance)
arg1.toString == orig(arg1.toString)
publishers.LastSalePublisher.myPublisher has only one value
publishers.LastSalePublisher.instance has only one value
arg1.toString == "GOOG"
===========================================================================
publishers.MarketDataDTO:::OBJECT
this.product has only one value
this.product != null
this.product.toString == "GOOG"
this.buyPrice != null
this.buyPrice.VALUE >= 0
this.buyPrice.MKT == false
this.buyVolume >= 0
this.sellPrice != null
this.sellPrice.VALUE one of { 0, 64115 }
this.sellPrice.MKT == false
this.sellVolume one of { 0, 45, 150 }
===========================================================================
publishers.MarketDataDTO.MarketDataDTO(java.lang.String, price.Price, int, price.Price, int):::ENTER
arg1.MKT == arg3.MKT
arg0 has only one value
arg0 != null
arg0.toString == "GOOG"
arg1 != null
arg1.VALUE >= 0
arg1.MKT == false
arg2 >= 0
arg3 != null
arg3.VALUE one of { 0, 64115 }
arg4 one of { 0, 45, 150 }
===========================================================================
publishers.MarketDataDTO.MarketDataDTO(java.lang.String, price.Price, int, price.Price, int):::EXIT
this.product == orig(arg0)
this.buyPrice == orig(arg1)
this.buyPrice.VALUE == arg1.VALUE
this.buyPrice.MKT == arg1.MKT
this.buyVolume == orig(arg2)
this.sellPrice == orig(arg3)
this.sellPrice.VALUE == arg3.VALUE
this.sellPrice.MKT == arg1.MKT
this.sellVolume == orig(arg4)
arg0.toString == orig(arg0.toString)
arg1.VALUE == orig(arg1.VALUE)
arg1.MKT == arg3.MKT
arg1.MKT == orig(arg1.MKT)
arg1.MKT == orig(arg3.MKT)
arg3.VALUE == orig(arg3.VALUE)
arg0.toString == "GOOG"
arg1.VALUE >= 0
arg1.MKT == false
arg3.VALUE one of { 0, 64115 }
===========================================================================
publishers.MarketDataDTO.toString():::ENTER
this.buyPrice.VALUE one of { 0, 64110 }
this.buyVolume one of { 0, 120 }
this.sellVolume one of { 0, 150 }
===========================================================================
publishers.MarketDataDTO.toString():::EXIT
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.buyPrice == orig(this.buyPrice)
this.buyPrice.VALUE == orig(this.buyPrice.VALUE)
this.buyPrice.MKT == orig(this.buyPrice.MKT)
this.buyVolume == orig(this.buyVolume)
this.sellPrice == orig(this.sellPrice)
this.sellPrice.VALUE == orig(this.sellPrice.VALUE)
this.sellPrice.MKT == orig(this.sellPrice.MKT)
this.sellVolume == orig(this.sellVolume)
this.buyPrice.VALUE one of { 0, 64110 }
this.buyVolume one of { 0, 120 }
this.sellVolume one of { 0, 150 }
return.toString one of { "Market Data: [Product]: GOOG, [BuyPrice]: $0.00 at 0, [SellPrice]: $0.00 at 0,", "Market Data: [Product]: GOOG, [BuyPrice]: $641.10 at 120, [SellPrice]: $641.15 at 150," }
===========================================================================
publishers.MarketMessage:::OBJECT
constants.MarketState.CLOSED has only one value
constants.MarketState.CLOSED != null
constants.MarketState.OPEN has only one value
constants.MarketState.OPEN != null
constants.MarketState.PREOPEN has only one value
constants.MarketState.PREOPEN != null
constants.MarketState.CLOSED.marketstate has only one value
constants.MarketState.CLOSED.marketstate != null
constants.MarketState.CLOSED.marketstate.toString == "CLOSED"
constants.MarketState.$VALUES has only one value
constants.MarketState.$VALUES != null
constants.MarketState.$VALUES.getClass().getName() == constants.MarketState[].class
constants.MarketState.$VALUES[] contains no nulls and has only one value, of length 3
constants.MarketState.$VALUES[] elements != null
constants.MarketState.$VALUES[].getClass().getName() == [constants.MarketState, constants.MarketState, constants.MarketState]
constants.MarketState.$VALUES[].getClass().getName() elements == constants.MarketState.class
constants.MarketState.$VALUES[].marketstate contains no nulls and has only one value, of length 3
constants.MarketState.$VALUES[].marketstate elements != null
constants.MarketState.$VALUES[].marketstate.toString == [CLOSED, OPEN, PREOPEN]
constants.MarketState.$VALUES[].marketstate.toString elements one of { "CLOSED", "OPEN", "PREOPEN" }
constants.MarketState.OPEN.marketstate has only one value
constants.MarketState.OPEN.marketstate != null
constants.MarketState.OPEN.marketstate.toString == "OPEN"
constants.MarketState.PREOPEN.marketstate has only one value
constants.MarketState.PREOPEN.marketstate != null
constants.MarketState.PREOPEN.marketstate.toString == "PREOPEN"
this.state.marketstate != null
this.state.marketstate.toString one of { "CLOSED", "OPEN", "PREOPEN" }
size(constants.MarketState.$VALUES[]) == 3
===========================================================================
publishers.MarketMessage.MarketMessage(constants.MarketState):::ENTER
constants.MarketState.CLOSED has only one value
constants.MarketState.OPEN has only one value
constants.MarketState.PREOPEN has only one value
constants.MarketState.CLOSED.marketstate has only one value
constants.MarketState.CLOSED.marketstate.toString == "CLOSED"
constants.MarketState.$VALUES has only one value
constants.MarketState.$VALUES.getClass().getName() == constants.MarketState[].class
constants.MarketState.$VALUES[] contains no nulls and has only one value, of length 3
constants.MarketState.$VALUES[].getClass().getName() == [constants.MarketState, constants.MarketState, constants.MarketState]
constants.MarketState.$VALUES[].getClass().getName() elements == constants.MarketState.class
constants.MarketState.$VALUES[].marketstate contains no nulls and has only one value, of length 3
constants.MarketState.$VALUES[].marketstate.toString == [CLOSED, OPEN, PREOPEN]
constants.MarketState.$VALUES[].marketstate.toString elements one of { "CLOSED", "OPEN", "PREOPEN" }
constants.MarketState.OPEN.marketstate has only one value
constants.MarketState.OPEN.marketstate.toString == "OPEN"
constants.MarketState.PREOPEN.marketstate has only one value
constants.MarketState.PREOPEN.marketstate.toString == "PREOPEN"
arg0.marketstate.toString one of { "CLOSED", "OPEN", "PREOPEN" }
size(constants.MarketState.$VALUES[]) == 3
===========================================================================
publishers.MarketMessage.MarketMessage(constants.MarketState):::EXIT
this.state == orig(arg0)
constants.MarketState.CLOSED == orig(constants.MarketState.CLOSED)
constants.MarketState.OPEN == orig(constants.MarketState.OPEN)
constants.MarketState.PREOPEN == orig(constants.MarketState.PREOPEN)
constants.MarketState.CLOSED.marketstate == orig(constants.MarketState.CLOSED.marketstate)
constants.MarketState.CLOSED.marketstate.toString == orig(constants.MarketState.CLOSED.marketstate.toString)
constants.MarketState.$VALUES == orig(constants.MarketState.$VALUES)
constants.MarketState.$VALUES.getClass().getName() == orig(constants.MarketState.$VALUES.getClass().getName())
constants.MarketState.$VALUES[] == orig(constants.MarketState.$VALUES[])
constants.MarketState.$VALUES[].marketstate == orig(constants.MarketState.$VALUES[].marketstate)
constants.MarketState.OPEN.marketstate == orig(constants.MarketState.OPEN.marketstate)
constants.MarketState.OPEN.marketstate.toString == orig(constants.MarketState.OPEN.marketstate.toString)
constants.MarketState.PREOPEN.marketstate == orig(constants.MarketState.PREOPEN.marketstate)
constants.MarketState.PREOPEN.marketstate.toString == orig(constants.MarketState.PREOPEN.marketstate.toString)
this.state.marketstate == arg0.marketstate
arg0.marketstate == orig(arg0.marketstate)
arg0.marketstate.toString == orig(arg0.marketstate.toString)
arg0.marketstate.toString one of { "CLOSED", "OPEN", "PREOPEN" }
===========================================================================
publishers.MarketMessage.setState(constants.MarketState):::ENTER
this.state == null
arg0.marketstate.toString one of { "CLOSED", "OPEN", "PREOPEN" }
===========================================================================
publishers.MarketMessage.setState(constants.MarketState):::EXIT
this.state == orig(arg0)
constants.MarketState.CLOSED == orig(constants.MarketState.CLOSED)
constants.MarketState.OPEN == orig(constants.MarketState.OPEN)
constants.MarketState.PREOPEN == orig(constants.MarketState.PREOPEN)
constants.MarketState.CLOSED.marketstate == orig(constants.MarketState.CLOSED.marketstate)
constants.MarketState.CLOSED.marketstate.toString == orig(constants.MarketState.CLOSED.marketstate.toString)
constants.MarketState.$VALUES == orig(constants.MarketState.$VALUES)
constants.MarketState.$VALUES.getClass().getName() == orig(constants.MarketState.$VALUES.getClass().getName())
constants.MarketState.$VALUES[] == orig(constants.MarketState.$VALUES[])
constants.MarketState.$VALUES[].marketstate == orig(constants.MarketState.$VALUES[].marketstate)
constants.MarketState.OPEN.marketstate == orig(constants.MarketState.OPEN.marketstate)
constants.MarketState.OPEN.marketstate.toString == orig(constants.MarketState.OPEN.marketstate.toString)
constants.MarketState.PREOPEN.marketstate == orig(constants.MarketState.PREOPEN.marketstate)
constants.MarketState.PREOPEN.marketstate.toString == orig(constants.MarketState.PREOPEN.marketstate.toString)
this.state.marketstate == arg0.marketstate
arg0.marketstate == orig(arg0.marketstate)
arg0.marketstate.toString == orig(arg0.marketstate.toString)
arg0.marketstate.toString one of { "CLOSED", "OPEN", "PREOPEN" }
===========================================================================
publishers.MarketMessage.toString():::ENTER
this.state != null
===========================================================================
publishers.MarketMessage.toString():::EXIT65
this.state has only one value
this.state.marketstate has only one value
this.state.marketstate.toString == "OPEN"
return has only one value
return.toString == "OPEN"
===========================================================================
publishers.MarketMessage.toString():::EXIT67
this.state has only one value
this.state.marketstate has only one value
this.state.marketstate.toString == "PREOPEN"
return has only one value
return.toString == "PREOPEN"
===========================================================================
publishers.MarketMessage.toString():::EXIT69
this.state has only one value
this.state.marketstate has only one value
this.state.marketstate.toString == "CLOSED"
return has only one value
return.toString == "CLOSED"
===========================================================================
publishers.MarketMessage.toString():::EXIT
this.state == orig(this.state)
constants.MarketState.CLOSED == orig(constants.MarketState.CLOSED)
constants.MarketState.OPEN == orig(constants.MarketState.OPEN)
constants.MarketState.PREOPEN == orig(constants.MarketState.PREOPEN)
constants.MarketState.CLOSED.marketstate == orig(constants.MarketState.CLOSED.marketstate)
constants.MarketState.CLOSED.marketstate.toString == orig(constants.MarketState.CLOSED.marketstate.toString)
constants.MarketState.$VALUES == orig(constants.MarketState.$VALUES)
constants.MarketState.$VALUES.getClass().getName() == orig(constants.MarketState.$VALUES.getClass().getName())
constants.MarketState.$VALUES[] == orig(constants.MarketState.$VALUES[])
constants.MarketState.$VALUES[].marketstate == orig(constants.MarketState.$VALUES[].marketstate)
constants.MarketState.OPEN.marketstate == orig(constants.MarketState.OPEN.marketstate)
constants.MarketState.OPEN.marketstate.toString == orig(constants.MarketState.OPEN.marketstate.toString)
constants.MarketState.PREOPEN.marketstate == orig(constants.MarketState.PREOPEN.marketstate)
constants.MarketState.PREOPEN.marketstate.toString == orig(constants.MarketState.PREOPEN.marketstate.toString)
this.state.marketstate == orig(this.state.marketstate)
this.state.marketstate.toString == orig(this.state.marketstate.toString)
this.state != null
return != null
return.toString one of { "CLOSED", "OPEN", "PREOPEN" }
===========================================================================
publishers.MessagePublisher:::CLASS
publishers.MessagePublisher.myPublisher.subscribers has only one value
publishers.MessagePublisher.myPublisher.subscribers != null
===========================================================================
publishers.MessagePublisher:::OBJECT
this has only one value
===========================================================================
publishers.MessagePublisher.MessagePublisher():::EXIT
publishers.MessagePublisher.myPublisher == null
publishers.MessagePublisher.instance == null
===========================================================================
publishers.MessagePublisher.getInstance():::ENTER
===========================================================================
publishers.MessagePublisher.getInstance():::EXIT
publishers.MessagePublisher.myPublisher.subscribers == orig(publishers.MessagePublisher.myPublisher.subscribers)
publishers.MessagePublisher.instance == return
publishers.MessagePublisher.myPublisher has only one value
publishers.MessagePublisher.myPublisher != null
publishers.MessagePublisher.instance has only one value
publishers.MessagePublisher.instance != null
===========================================================================
publishers.MessagePublisher.publishCancel(publishers.CancelMessage):::ENTER
this == publishers.MessagePublisher.instance
publishers.MessagePublisher.myPublisher has only one value
publishers.MessagePublisher.instance has only one value
arg0.user.toString one of { "ANN", "REX" }
arg0.product has only one value
arg0.product.toString == "GOOG"
constants.BookSide.BUY has only one value
constants.BookSide.SELL has only one value
arg0.side.bookside.toString one of { "BUY", "SELL" }
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
publishers.MessagePublisher.publishCancel(publishers.CancelMessage):::EXIT
publishers.MessagePublisher.myPublisher == orig(publishers.MessagePublisher.myPublisher)
publishers.MessagePublisher.myPublisher.subscribers == orig(publishers.MessagePublisher.myPublisher.subscribers)
publishers.MessagePublisher.instance == orig(this)
publishers.MessagePublisher.instance == orig(publishers.MessagePublisher.instance)
arg0.user == orig(arg0.user)
arg0.user.toString == orig(arg0.user.toString)
arg0.product == orig(arg0.product)
arg0.product.toString == orig(arg0.product.toString)
arg0.price == orig(arg0.price)
arg0.price.VALUE == orig(arg0.price.VALUE)
arg0.price.MKT == orig(arg0.price.MKT)
arg0.volume == orig(arg0.volume)
arg0.details == orig(arg0.details)
arg0.details.toString == orig(arg0.details.toString)
arg0.side == orig(arg0.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
arg0.side.bookside == orig(arg0.side.bookside)
arg0.side.bookside.toString == orig(arg0.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
arg0.id == orig(arg0.id)
arg0.id.toString == orig(arg0.id.toString)
publishers.MessagePublisher.myPublisher has only one value
publishers.MessagePublisher.instance has only one value
arg0.user.toString one of { "ANN", "REX" }
arg0.product has only one value
arg0.product.toString == "GOOG"
constants.BookSide.BUY has only one value
constants.BookSide.SELL has only one value
arg0.side.bookside.toString one of { "BUY", "SELL" }
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
publishers.MessagePublisher.publishFill(publishers.FillMessage):::ENTER
this == publishers.MessagePublisher.instance
publishers.MessagePublisher.myPublisher has only one value
publishers.MessagePublisher.myPublisher != null
publishers.MessagePublisher.instance has only one value
publishers.MessagePublisher.instance != null
arg0 != null
arg0.user != null
arg0.user.toString one of { "ANN", "REX" }
arg0.product has only one value
arg0.product != null
arg0.product.toString == "GOOG"
arg0.price != null
arg0.price.MKT == false
arg0.details != null
arg0.side != null
constants.BookSide.BUY has only one value
constants.BookSide.BUY != null
constants.BookSide.SELL has only one value
constants.BookSide.SELL != null
arg0.side.bookside != null
arg0.side.bookside.toString one of { "BUY", "SELL" }
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES != null
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[] elements != null
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside elements != null
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
arg0.id != null
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
publishers.MessagePublisher.publishFill(publishers.FillMessage):::EXIT
publishers.MessagePublisher.myPublisher == orig(publishers.MessagePublisher.myPublisher)
publishers.MessagePublisher.myPublisher.subscribers == orig(publishers.MessagePublisher.myPublisher.subscribers)
publishers.MessagePublisher.instance == orig(this)
publishers.MessagePublisher.instance == orig(publishers.MessagePublisher.instance)
arg0.user == orig(arg0.user)
arg0.user.toString == orig(arg0.user.toString)
arg0.product == orig(arg0.product)
arg0.product.toString == orig(arg0.product.toString)
arg0.price == orig(arg0.price)
arg0.price.VALUE == orig(arg0.price.VALUE)
arg0.price.MKT == orig(arg0.price.MKT)
arg0.volume == orig(arg0.volume)
arg0.details == orig(arg0.details)
arg0.details.toString == orig(arg0.details.toString)
arg0.side == orig(arg0.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
arg0.side.bookside == orig(arg0.side.bookside)
arg0.side.bookside.toString == orig(arg0.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
arg0.id == orig(arg0.id)
arg0.id.toString == orig(arg0.id.toString)
publishers.MessagePublisher.myPublisher has only one value
publishers.MessagePublisher.myPublisher != null
publishers.MessagePublisher.instance has only one value
publishers.MessagePublisher.instance != null
arg0.user != null
arg0.user.toString one of { "ANN", "REX" }
arg0.product has only one value
arg0.product != null
arg0.product.toString == "GOOG"
arg0.price != null
arg0.price.MKT == false
arg0.details != null
arg0.side != null
constants.BookSide.BUY has only one value
constants.BookSide.BUY != null
constants.BookSide.SELL has only one value
constants.BookSide.SELL != null
arg0.side.bookside != null
arg0.side.bookside.toString one of { "BUY", "SELL" }
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES != null
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[] elements != null
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside elements != null
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
arg0.id != null
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
publishers.MessagePublisher.publishMarketMessage(publishers.MarketMessage):::ENTER
this == publishers.MessagePublisher.instance
publishers.MessagePublisher.myPublisher has only one value
publishers.MessagePublisher.instance has only one value
constants.MarketState.CLOSED has only one value
constants.MarketState.OPEN has only one value
constants.MarketState.PREOPEN has only one value
arg0.state.marketstate.toString one of { "CLOSED", "OPEN", "PREOPEN" }
constants.MarketState.$VALUES has only one value
constants.MarketState.$VALUES.getClass().getName() == constants.MarketState[].class
constants.MarketState.$VALUES[] contains no nulls and has only one value, of length 3
constants.MarketState.$VALUES[].getClass().getName() == [constants.MarketState, constants.MarketState, constants.MarketState]
constants.MarketState.$VALUES[].getClass().getName() elements == constants.MarketState.class
constants.MarketState.$VALUES[].marketstate contains no nulls and has only one value, of length 3
constants.MarketState.$VALUES[].marketstate.toString == [CLOSED, OPEN, PREOPEN]
constants.MarketState.$VALUES[].marketstate.toString elements one of { "CLOSED", "OPEN", "PREOPEN" }
size(constants.MarketState.$VALUES[]) == 3
===========================================================================
publishers.MessagePublisher.publishMarketMessage(publishers.MarketMessage):::EXIT
publishers.MessagePublisher.myPublisher == orig(publishers.MessagePublisher.myPublisher)
publishers.MessagePublisher.myPublisher.subscribers == orig(publishers.MessagePublisher.myPublisher.subscribers)
publishers.MessagePublisher.instance == orig(this)
publishers.MessagePublisher.instance == orig(publishers.MessagePublisher.instance)
arg0.state == orig(arg0.state)
constants.MarketState.CLOSED == orig(constants.MarketState.CLOSED)
constants.MarketState.OPEN == orig(constants.MarketState.OPEN)
constants.MarketState.PREOPEN == orig(constants.MarketState.PREOPEN)
arg0.state.marketstate == orig(arg0.state.marketstate)
arg0.state.marketstate.toString == orig(arg0.state.marketstate.toString)
constants.MarketState.$VALUES == orig(constants.MarketState.$VALUES)
constants.MarketState.$VALUES.getClass().getName() == orig(constants.MarketState.$VALUES.getClass().getName())
constants.MarketState.$VALUES[] == orig(constants.MarketState.$VALUES[])
constants.MarketState.$VALUES[].marketstate == orig(constants.MarketState.$VALUES[].marketstate)
publishers.MessagePublisher.myPublisher has only one value
publishers.MessagePublisher.instance has only one value
constants.MarketState.CLOSED has only one value
constants.MarketState.OPEN has only one value
constants.MarketState.PREOPEN has only one value
arg0.state.marketstate.toString one of { "CLOSED", "OPEN", "PREOPEN" }
constants.MarketState.$VALUES has only one value
constants.MarketState.$VALUES.getClass().getName() == constants.MarketState[].class
constants.MarketState.$VALUES[] contains no nulls and has only one value, of length 3
constants.MarketState.$VALUES[].getClass().getName() == [constants.MarketState, constants.MarketState, constants.MarketState]
constants.MarketState.$VALUES[].getClass().getName() elements == constants.MarketState.class
constants.MarketState.$VALUES[].marketstate contains no nulls and has only one value, of length 3
constants.MarketState.$VALUES[].marketstate.toString == [CLOSED, OPEN, PREOPEN]
constants.MarketState.$VALUES[].marketstate.toString elements one of { "CLOSED", "OPEN", "PREOPEN" }
size(constants.MarketState.$VALUES[]) == 3
===========================================================================
publishers.MessagePublisher.subscribe(client.User, java.lang.String):::ENTER
this == publishers.MessagePublisher.instance
publishers.MessagePublisher.myPublisher has only one value
publishers.MessagePublisher.instance has only one value
arg0.getClass().getName() == driver.Phase4$UserImpl.class
arg1 has only one value
arg1.toString == "GOOG"
===========================================================================
publishers.MessagePublisher.subscribe(client.User, java.lang.String):::EXIT
publishers.MessagePublisher.myPublisher == orig(publishers.MessagePublisher.myPublisher)
publishers.MessagePublisher.myPublisher.subscribers == orig(publishers.MessagePublisher.myPublisher.subscribers)
publishers.MessagePublisher.instance == orig(this)
publishers.MessagePublisher.instance == orig(publishers.MessagePublisher.instance)
arg1.toString == orig(arg1.toString)
publishers.MessagePublisher.myPublisher has only one value
publishers.MessagePublisher.instance has only one value
arg1.toString == "GOOG"
===========================================================================
publishers.Messenger:::OBJECT
this.user.toString one of { "ANN", "REX" }
this.product.toString == "GOOG"
this.price.VALUE >= 0
this.volume >= 0
constants.BookSide.BUY has only one value
constants.BookSide.BUY != null
constants.BookSide.SELL has only one value
constants.BookSide.SELL != null
constants.BookSide.BUY.bookside has only one value
constants.BookSide.BUY.bookside != null
constants.BookSide.BUY.bookside.toString == "BUY"
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES != null
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[] elements != null
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside elements != null
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
constants.BookSide.SELL.bookside has only one value
constants.BookSide.SELL.bookside != null
constants.BookSide.SELL.bookside.toString == "SELL"
this.side.bookside != null
this.side.bookside.toString one of { "BUY", "SELL" }
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
publishers.Messenger.Messenger(java.lang.String, java.lang.String, price.Price, int, java.lang.String, constants.BookSide, java.lang.String):::ENTER
arg0 != null
arg0.toString one of { "ANN", "REX" }
arg1 has only one value
arg1 != null
arg1.toString == "GOOG"
arg2 != null
arg4 != null
arg5 != null
constants.BookSide.BUY has only one value
constants.BookSide.BUY != null
constants.BookSide.SELL has only one value
constants.BookSide.SELL != null
constants.BookSide.BUY.bookside has only one value
constants.BookSide.BUY.bookside != null
constants.BookSide.BUY.bookside.toString == "BUY"
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES != null
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[] elements != null
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside elements != null
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
constants.BookSide.SELL.bookside has only one value
constants.BookSide.SELL.bookside != null
constants.BookSide.SELL.bookside.toString == "SELL"
arg5.bookside != null
arg5.bookside.toString one of { "BUY", "SELL" }
arg6 != null
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
publishers.Messenger.Messenger(java.lang.String, java.lang.String, price.Price, int, java.lang.String, constants.BookSide, java.lang.String):::EXIT
this.user == orig(arg0)
this.product == orig(arg1)
this.price == orig(arg2)
this.price.VALUE == arg2.VALUE
this.price.MKT == arg2.MKT
this.volume == orig(arg3)
this.details == orig(arg4)
this.side == orig(arg5)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == arg5.bookside
this.id == orig(arg6)
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
arg2.VALUE == orig(arg2.VALUE)
arg2.MKT == orig(arg2.MKT)
arg4.toString == orig(arg4.toString)
arg5.bookside == orig(arg5.bookside)
arg5.bookside.toString == orig(arg5.bookside.toString)
arg6.toString == orig(arg6.toString)
this.user != null
this.product has only one value
this.product != null
this.price != null
this.details != null
this.side != null
this.id != null
arg0.toString one of { "ANN", "REX" }
arg1.toString == "GOOG"
arg5.bookside != null
arg5.bookside.toString one of { "BUY", "SELL" }
===========================================================================
publishers.Messenger.getDetails():::ENTER
this.user != null
this.product has only one value
this.product != null
this.price != null
this.price.MKT == false
this.details != null
this.side != null
this.id != null
===========================================================================
publishers.Messenger.getDetails():::EXIT
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.volume == orig(this.volume)
this.details == orig(this.details)
this.details.toString == orig(this.details.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.user != null
this.product has only one value
this.product != null
this.price != null
this.price.MKT == false
this.details != null
this.side != null
this.id != null
return != null
===========================================================================
publishers.Messenger.getId():::ENTER
this.user != null
this.product has only one value
this.product != null
this.price != null
this.price.MKT == false
this.details != null
this.side != null
this.id != null
===========================================================================
publishers.Messenger.getId():::EXIT
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.volume == orig(this.volume)
this.details == orig(this.details)
this.details.toString == orig(this.details.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.id == return
this.id.toString == orig(this.id.toString)
return == orig(this.id)
this.user != null
this.product has only one value
this.product != null
this.price != null
this.price.MKT == false
this.details != null
this.side != null
return != null
===========================================================================
publishers.Messenger.getPrice():::ENTER
this.user != null
this.product has only one value
this.product != null
this.price != null
this.price.MKT == false
this.details != null
this.side != null
this.id != null
===========================================================================
publishers.Messenger.getPrice():::EXIT140
===========================================================================
publishers.Messenger.getPrice():::EXIT
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == return
this.price.VALUE == return.VALUE
this.price.MKT == return.MKT
this.volume == orig(this.volume)
this.details == orig(this.details)
this.details.toString == orig(this.details.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
return == orig(this.price)
return.VALUE == orig(this.price.VALUE)
return.MKT == orig(this.price.MKT)
this.user != null
this.product has only one value
this.product != null
this.details != null
this.side != null
this.id != null
return != null
return.MKT == false
===========================================================================
publishers.Messenger.getPriceString():::ENTER
this.user != null
this.product has only one value
this.product != null
this.price != null
this.price.MKT == false
this.details != null
this.side != null
this.id != null
===========================================================================
publishers.Messenger.getPriceString():::EXIT
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.volume == orig(this.volume)
this.details == orig(this.details)
this.details.toString == orig(this.details.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.user != null
this.product has only one value
this.product != null
this.price != null
this.price.MKT == false
this.details != null
this.side != null
this.id != null
return != null
===========================================================================
publishers.Messenger.getProduct():::ENTER
this.user != null
this.product has only one value
this.product != null
this.price != null
this.details != null
this.side != null
this.id != null
===========================================================================
publishers.Messenger.getProduct():::EXIT
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.product == return
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.volume == orig(this.volume)
this.details == orig(this.details)
this.details.toString == orig(this.details.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
return == orig(this.product)
this.user != null
this.price != null
this.details != null
this.side != null
this.id != null
return has only one value
return != null
return.toString == "GOOG"
===========================================================================
publishers.Messenger.getSide():::ENTER
this.user != null
this.product has only one value
this.product != null
this.price != null
this.price.MKT == false
this.details != null
this.side != null
this.id != null
===========================================================================
publishers.Messenger.getSide():::EXIT
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.volume == orig(this.volume)
this.details == orig(this.details)
this.details.toString == orig(this.details.toString)
this.side == return
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == return.bookside
this.side.bookside.toString == orig(this.side.bookside.toString)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
return == orig(this.side)
return.bookside == orig(this.side.bookside)
this.user != null
this.product has only one value
this.product != null
this.price != null
this.price.MKT == false
this.details != null
this.id != null
return != null
return.bookside != null
return.bookside.toString one of { "BUY", "SELL" }
===========================================================================
publishers.Messenger.getUser():::ENTER
this.user != null
this.product has only one value
this.product != null
this.price != null
this.details != null
this.side != null
this.id != null
===========================================================================
publishers.Messenger.getUser():::EXIT
this.user == return
this.user.toString == orig(this.user.toString)
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.volume == orig(this.volume)
this.details == orig(this.details)
this.details.toString == orig(this.details.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
return == orig(this.user)
this.product has only one value
this.product != null
this.price != null
this.details != null
this.side != null
this.id != null
return != null
return.toString one of { "ANN", "REX" }
===========================================================================
publishers.Messenger.getVolume():::ENTER
this.user != null
this.product has only one value
this.product != null
this.price != null
this.price.MKT == false
this.details != null
this.side != null
this.id != null
===========================================================================
publishers.Messenger.getVolume():::EXIT
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.volume == return
this.details == orig(this.details)
this.details.toString == orig(this.details.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
return == orig(this.volume)
this.user != null
this.product has only one value
this.product != null
this.price != null
this.price.MKT == false
this.details != null
this.side != null
this.id != null
===========================================================================
publishers.Messenger.setDetails(java.lang.String):::ENTER
this.user != null
this.product has only one value
this.product != null
this.price != null
this.details == null
this.side == null
this.id == null
arg0 != null
===========================================================================
publishers.Messenger.setDetails(java.lang.String):::EXIT
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.volume == orig(this.volume)
this.details == orig(arg0)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.id == orig(this.id)
arg0.toString == orig(arg0.toString)
this.user != null
this.product has only one value
this.product != null
this.price != null
this.details != null
this.side == null
this.id == null
===========================================================================
publishers.Messenger.setId(java.lang.String):::ENTER
this.user != null
this.product has only one value
this.product != null
this.price != null
this.details != null
this.side != null
this.id == null
arg0 != null
===========================================================================
publishers.Messenger.setId(java.lang.String):::EXIT
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.volume == orig(this.volume)
this.details == orig(this.details)
this.details.toString == orig(this.details.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.id == orig(arg0)
arg0.toString == orig(arg0.toString)
this.user != null
this.product has only one value
this.product != null
this.price != null
this.details != null
this.side != null
this.id != null
===========================================================================
publishers.Messenger.setPrice(price.Price):::ENTER
this.user != null
this.product has only one value
this.product != null
this.price == null
this.volume == 0
this.details == null
this.side == null
this.id == null
arg0 != null
===========================================================================
publishers.Messenger.setPrice(price.Price):::EXIT
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(arg0)
this.price.VALUE == arg0.VALUE
this.price.MKT == arg0.MKT
this.volume == orig(this.volume)
this.details == orig(this.details)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.id == orig(this.id)
arg0.VALUE == orig(arg0.VALUE)
arg0.MKT == orig(arg0.MKT)
this.user != null
this.product has only one value
this.product != null
this.price != null
this.volume == 0
this.details == null
this.side == null
this.id == null
===========================================================================
publishers.Messenger.setProduct(java.lang.String):::ENTER
this.user != null
this.product == null
this.price == null
this.volume == 0
this.details == null
this.side == null
this.id == null
arg0 has only one value
arg0 != null
arg0.toString == "GOOG"
===========================================================================
publishers.Messenger.setProduct(java.lang.String):::EXIT
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.product == orig(arg0)
this.price == orig(this.price)
this.volume == orig(this.volume)
this.details == orig(this.details)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.id == orig(this.id)
arg0.toString == orig(arg0.toString)
this.user != null
this.product has only one value
this.product != null
this.price == null
this.volume == 0
this.details == null
this.side == null
this.id == null
arg0.toString == "GOOG"
===========================================================================
publishers.Messenger.setSide(constants.BookSide):::ENTER
this.user != null
this.product has only one value
this.product != null
this.price != null
this.details != null
this.side == null
this.id == null
arg0 != null
arg0.bookside != null
arg0.bookside.toString one of { "BUY", "SELL" }
===========================================================================
publishers.Messenger.setSide(constants.BookSide):::EXIT
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.volume == orig(this.volume)
this.details == orig(this.details)
this.details.toString == orig(this.details.toString)
this.side == orig(arg0)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == arg0.bookside
this.id == orig(this.id)
arg0.bookside == orig(arg0.bookside)
arg0.bookside.toString == orig(arg0.bookside.toString)
this.user != null
this.product has only one value
this.product != null
this.price != null
this.details != null
this.side != null
this.id == null
arg0.bookside != null
arg0.bookside.toString one of { "BUY", "SELL" }
===========================================================================
publishers.Messenger.setUser(java.lang.String):::ENTER
this.user == null
this.product == null
this.price == null
this.volume == 0
this.details == null
this.side == null
this.id == null
arg0 != null
arg0.toString one of { "ANN", "REX" }
===========================================================================
publishers.Messenger.setUser(java.lang.String):::EXIT
this.user == orig(arg0)
this.product == orig(this.product)
this.price == orig(this.price)
this.volume == orig(this.volume)
this.details == orig(this.details)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.id == orig(this.id)
arg0.toString == orig(arg0.toString)
this.user != null
this.product == null
this.price == null
this.volume == 0
this.details == null
this.side == null
this.id == null
arg0.toString one of { "ANN", "REX" }
===========================================================================
publishers.Messenger.setVolume(int):::ENTER
this.user != null
this.product has only one value
this.product != null
this.price != null
this.volume == 0
this.details == null
this.side == null
this.id == null
this.volume < arg0
===========================================================================
publishers.Messenger.setVolume(int):::EXIT
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.volume == orig(arg0)
this.details == orig(this.details)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.id == orig(this.id)
this.user != null
this.product has only one value
this.product != null
this.price != null
this.details == null
this.side == null
this.id == null
this.volume > orig(this.volume)
===========================================================================
publishers.Messenger.toString():::ENTER
this.product has only one value
===========================================================================
publishers.Messenger.toString():::EXIT
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.volume == orig(this.volume)
this.details == orig(this.details)
this.details.toString == orig(this.details.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.product has only one value
===========================================================================
publishers.PublisherImpl:::OBJECT
this.subscribers != null
===========================================================================
publishers.PublisherImpl.PublisherImpl():::EXIT
===========================================================================
publishers.PublisherImpl.getSubscribers():::ENTER
===========================================================================
publishers.PublisherImpl.getSubscribers():::EXIT
this.subscribers == return
return == orig(this.subscribers)
return != null
===========================================================================
publishers.PublisherImpl.subscribe(client.User, java.lang.String):::ENTER
arg0.getClass().getName() == driver.Phase4$UserImpl.class
arg1 has only one value
arg1.toString == "GOOG"
===========================================================================
publishers.PublisherImpl.subscribe(client.User, java.lang.String):::EXIT
this.subscribers == orig(this.subscribers)
arg1.toString == orig(arg1.toString)
arg1.toString == "GOOG"
===========================================================================
publishers.TickerPublisher:::CLASS
publishers.TickerPublisher.myPublisher.subscribers has only one value
publishers.TickerPublisher.myPublisher.subscribers != null
publishers.TickerPublisher.stocks has only one value
publishers.TickerPublisher.stocks != null
===========================================================================
publishers.TickerPublisher:::OBJECT
this has only one value
===========================================================================
publishers.TickerPublisher.TickerPublisher():::EXIT
publishers.TickerPublisher.myPublisher == null
publishers.TickerPublisher.instance == null
===========================================================================
publishers.TickerPublisher.checkPrice(price.Price):::ENTER
this == publishers.TickerPublisher.instance
publishers.TickerPublisher.myPublisher has only one value
publishers.TickerPublisher.instance has only one value
arg0.VALUE one of { 64110, 64115, 64130 }
arg0.MKT == false
===========================================================================
publishers.TickerPublisher.checkPrice(price.Price):::EXIT143
===========================================================================
publishers.TickerPublisher.checkPrice(price.Price):::EXIT
publishers.TickerPublisher.myPublisher == orig(publishers.TickerPublisher.myPublisher)
publishers.TickerPublisher.myPublisher.subscribers == orig(publishers.TickerPublisher.myPublisher.subscribers)
publishers.TickerPublisher.instance == orig(this)
publishers.TickerPublisher.instance == orig(publishers.TickerPublisher.instance)
publishers.TickerPublisher.stocks == orig(publishers.TickerPublisher.stocks)
arg0.VALUE == return.VALUE
arg0.VALUE == orig(arg0.VALUE)
arg0.MKT == return.MKT
arg0.MKT == orig(arg0.MKT)
return == orig(arg0)
publishers.TickerPublisher.myPublisher has only one value
publishers.TickerPublisher.instance has only one value
arg0.VALUE one of { 64110, 64115, 64130 }
arg0.MKT == false
===========================================================================
publishers.TickerPublisher.getInstance():::ENTER
===========================================================================
publishers.TickerPublisher.getInstance():::EXIT
publishers.TickerPublisher.myPublisher.subscribers == orig(publishers.TickerPublisher.myPublisher.subscribers)
publishers.TickerPublisher.instance == return
publishers.TickerPublisher.stocks == orig(publishers.TickerPublisher.stocks)
publishers.TickerPublisher.myPublisher has only one value
publishers.TickerPublisher.instance has only one value
===========================================================================
publishers.TickerPublisher.publishTicker(java.lang.String, price.Price):::ENTER
this == publishers.TickerPublisher.instance
publishers.TickerPublisher.myPublisher has only one value
publishers.TickerPublisher.instance has only one value
arg0 has only one value
arg0.toString == "GOOG"
arg1.VALUE one of { 64110, 64115, 64130 }
arg1.MKT == false
===========================================================================
publishers.TickerPublisher.publishTicker(java.lang.String, price.Price):::EXIT
publishers.TickerPublisher.myPublisher == orig(publishers.TickerPublisher.myPublisher)
publishers.TickerPublisher.myPublisher.subscribers == orig(publishers.TickerPublisher.myPublisher.subscribers)
publishers.TickerPublisher.instance == orig(this)
publishers.TickerPublisher.instance == orig(publishers.TickerPublisher.instance)
publishers.TickerPublisher.stocks == orig(publishers.TickerPublisher.stocks)
arg0.toString == orig(arg0.toString)
arg1.VALUE == orig(arg1.VALUE)
arg1.MKT == orig(arg1.MKT)
publishers.TickerPublisher.myPublisher has only one value
publishers.TickerPublisher.instance has only one value
arg0.toString == "GOOG"
arg1.VALUE one of { 64110, 64115, 64130 }
arg1.MKT == false
===========================================================================
publishers.TickerPublisher.subscribe(client.User, java.lang.String):::ENTER
this == publishers.TickerPublisher.instance
publishers.TickerPublisher.myPublisher has only one value
publishers.TickerPublisher.instance has only one value
arg0.getClass().getName() == driver.Phase4$UserImpl.class
arg1 has only one value
arg1.toString == "GOOG"
===========================================================================
publishers.TickerPublisher.subscribe(client.User, java.lang.String):::EXIT
publishers.TickerPublisher.myPublisher == orig(publishers.TickerPublisher.myPublisher)
publishers.TickerPublisher.myPublisher.subscribers == orig(publishers.TickerPublisher.myPublisher.subscribers)
publishers.TickerPublisher.instance == orig(this)
publishers.TickerPublisher.instance == orig(publishers.TickerPublisher.instance)
publishers.TickerPublisher.stocks == orig(publishers.TickerPublisher.stocks)
arg1.toString == orig(arg1.toString)
publishers.TickerPublisher.myPublisher has only one value
publishers.TickerPublisher.instance has only one value
arg1.toString == "GOOG"
===========================================================================
tradable.Order:::OBJECT
this.originalVolume == this.remainingVolume
this.product != null
this.product.toString one of { "GOOG", "X11" }
this.price != null
this.cancelledVolume == 0
this.user != null
this.user.toString one of { "ANN", "REX" }
this.side != null
constants.BookSide.BUY has only one value
constants.BookSide.BUY != null
constants.BookSide.SELL has only one value
constants.BookSide.SELL != null
constants.BookSide.BUY.bookside has only one value
constants.BookSide.BUY.bookside != null
constants.BookSide.BUY.bookside.toString == "BUY"
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES != null
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[] elements != null
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside elements != null
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
constants.BookSide.SELL.bookside has only one value
constants.BookSide.SELL.bookside != null
constants.BookSide.SELL.bookside.toString == "SELL"
this.side.bookside != null
this.side.bookside.toString one of { "BUY", "SELL" }
this.isQuote == false
this.id != null
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
tradable.Order.Order(java.lang.String, java.lang.String, price.Price, int, constants.BookSide):::ENTER
arg0 != null
arg0.toString one of { "ANN", "REX" }
arg1 != null
arg1.toString one of { "GOOG", "X11" }
arg2 != null
arg4 != null
constants.BookSide.BUY has only one value
constants.BookSide.BUY != null
constants.BookSide.SELL has only one value
constants.BookSide.SELL != null
constants.BookSide.BUY.bookside has only one value
constants.BookSide.BUY.bookside != null
constants.BookSide.BUY.bookside.toString == "BUY"
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES != null
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[] elements != null
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside elements != null
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
constants.BookSide.SELL.bookside has only one value
constants.BookSide.SELL.bookside != null
constants.BookSide.SELL.bookside.toString == "SELL"
arg4.bookside != null
arg4.bookside.toString one of { "BUY", "SELL" }
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
tradable.Order.Order(java.lang.String, java.lang.String, price.Price, int, constants.BookSide):::EXIT
this.product == orig(arg1)
this.price == orig(arg2)
this.price.VALUE == arg2.VALUE
this.price.MKT == arg2.MKT
this.originalVolume == orig(arg3)
this.user == orig(arg0)
this.side == orig(arg4)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == arg4.bookside
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
arg2.VALUE == orig(arg2.VALUE)
arg2.MKT == orig(arg2.MKT)
arg4.bookside == orig(arg4.bookside)
arg4.bookside.toString == orig(arg4.bookside.toString)
arg0.toString one of { "ANN", "REX" }
arg1.toString one of { "GOOG", "X11" }
arg4.bookside != null
arg4.bookside.toString one of { "BUY", "SELL" }
===========================================================================
tradable.Quote:::OBJECT
this.user == this.buyQuoteSide.user
this.user == this.sellQuoteSide.user
this.product == this.buyQuoteSide.product
this.product == this.sellQuoteSide.product
this.buyQuoteSide.product == this.sellQuoteSide.product
this.buyQuoteSide.price.MKT == this.sellQuoteSide.price.MKT
this.buyQuoteSide.originalVolume == this.buyQuoteSide.remainingVolume
this.buyQuoteSide.user == this.sellQuoteSide.user
this.buyQuoteSide.side == constants.BookSide.BUY
constants.BookSide.SELL == this.sellQuoteSide.side
this.buyQuoteSide.isQuote == this.sellQuoteSide.isQuote
this.sellQuoteSide.originalVolume == this.sellQuoteSide.remainingVolume
this.user.toString one of { "ANN", "REX" }
this.product.toString one of { "GOOG", "X11" }
this.buyQuoteSide.product != null
this.buyQuoteSide.product.toString one of { "GOOG", "X11" }
this.buyQuoteSide.price has only one value
this.buyQuoteSide.price != null
this.buyQuoteSide.price.VALUE == 64110
this.buyQuoteSide.price.MKT == false
this.buyQuoteSide.originalVolume == 120
this.buyQuoteSide.cancelledVolume == 0
this.buyQuoteSide.user != null
this.buyQuoteSide.user.toString one of { "ANN", "REX" }
this.buyQuoteSide.side has only one value
this.buyQuoteSide.side != null
constants.BookSide.BUY has only one value
constants.BookSide.BUY != null
constants.BookSide.SELL has only one value
constants.BookSide.SELL != null
this.buyQuoteSide.side.bookside has only one value
this.buyQuoteSide.side.bookside != null
this.buyQuoteSide.side.bookside.toString == "BUY"
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES != null
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[] elements != null
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside elements != null
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
this.buyQuoteSide.isQuote == true
this.buyQuoteSide.id != null
this.buyQuoteSide.id.toString one of { "ANNGOOG$641.103488477967697024", "REXGOOG$641.103488477938292211", "REXX11$641.103488478135569268" }
this.sellQuoteSide.product != null
this.sellQuoteSide.product.toString one of { "GOOG", "X11" }
this.sellQuoteSide.price has only one value
this.sellQuoteSide.price != null
this.sellQuoteSide.price.VALUE == 64115
this.sellQuoteSide.price.MKT == false
this.sellQuoteSide.originalVolume == 150
this.sellQuoteSide.cancelledVolume == 0
this.sellQuoteSide.user != null
this.sellQuoteSide.user.toString one of { "ANN", "REX" }
this.sellQuoteSide.side has only one value
this.sellQuoteSide.side != null
this.sellQuoteSide.side.bookside has only one value
this.sellQuoteSide.side.bookside != null
this.sellQuoteSide.side.bookside.toString == "SELL"
this.sellQuoteSide.isQuote == true
this.sellQuoteSide.id != null
this.sellQuoteSide.id.toString one of { "ANNGOOG$641.153488477968558282", "REXGOOG$641.153488477941813196", "REXX11$641.153488478136119651" }
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
tradable.Quote.Quote(java.lang.String, java.lang.String, price.Price, int, price.Price, int):::ENTER
arg2.MKT == arg4.MKT
arg0.toString one of { "ANN", "REX" }
arg1.toString one of { "GOOG", "X11" }
arg2 has only one value
arg2.VALUE == 64110
arg2.MKT == false
arg3 == 120
arg4 has only one value
arg4.VALUE == 64115
arg5 == 150
===========================================================================
tradable.Quote.Quote(java.lang.String, java.lang.String, price.Price, int, price.Price, int):::EXIT
this.user == orig(arg0)
this.product == orig(arg1)
this.buyQuoteSide.price == orig(arg2)
this.buyQuoteSide.price.VALUE == arg2.VALUE
this.buyQuoteSide.price.MKT == arg2.MKT
this.buyQuoteSide.originalVolume == orig(arg3)
this.buyQuoteSide.remainingVolume == orig(arg3)
this.sellQuoteSide.price == orig(arg4)
this.sellQuoteSide.price.VALUE == arg4.VALUE
this.sellQuoteSide.price.MKT == arg2.MKT
this.sellQuoteSide.originalVolume == orig(arg5)
this.sellQuoteSide.remainingVolume == orig(arg5)
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
arg2.VALUE == orig(arg2.VALUE)
arg2.MKT == arg4.MKT
arg2.MKT == orig(arg2.MKT)
arg2.MKT == orig(arg4.MKT)
arg4.VALUE == orig(arg4.VALUE)
arg0.toString one of { "ANN", "REX" }
arg1.toString one of { "GOOG", "X11" }
arg2.VALUE == 64110
arg2.MKT == false
arg4.VALUE == 64115
===========================================================================
tradable.Quote.getProduct():::ENTER
===========================================================================
tradable.Quote.getProduct():::EXIT
this.user == orig(this.user)
this.user == orig(this.buyQuoteSide.user)
this.user == orig(this.sellQuoteSide.user)
this.user.toString == orig(this.user.toString)
this.product == return
this.product.toString == orig(this.product.toString)
this.buyQuoteSide == orig(this.buyQuoteSide)
this.buyQuoteSide.product == return
this.buyQuoteSide.product.toString == orig(this.buyQuoteSide.product.toString)
this.buyQuoteSide.price == orig(this.buyQuoteSide.price)
this.buyQuoteSide.price.VALUE == orig(this.buyQuoteSide.price.VALUE)
this.buyQuoteSide.price.MKT == orig(this.buyQuoteSide.price.MKT)
this.buyQuoteSide.price.MKT == orig(this.sellQuoteSide.price.MKT)
this.buyQuoteSide.originalVolume == orig(this.buyQuoteSide.originalVolume)
this.buyQuoteSide.originalVolume == orig(this.buyQuoteSide.remainingVolume)
this.buyQuoteSide.cancelledVolume == orig(this.buyQuoteSide.cancelledVolume)
this.buyQuoteSide.user.toString == orig(this.buyQuoteSide.user.toString)
constants.BookSide.BUY == orig(this.buyQuoteSide.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.sellQuoteSide.side)
this.buyQuoteSide.side.bookside == orig(this.buyQuoteSide.side.bookside)
this.buyQuoteSide.side.bookside.toString == orig(this.buyQuoteSide.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.buyQuoteSide.isQuote == orig(this.buyQuoteSide.isQuote)
this.buyQuoteSide.isQuote == orig(this.sellQuoteSide.isQuote)
this.buyQuoteSide.id == orig(this.buyQuoteSide.id)
this.buyQuoteSide.id.toString == orig(this.buyQuoteSide.id.toString)
this.sellQuoteSide == orig(this.sellQuoteSide)
this.sellQuoteSide.product == return
this.sellQuoteSide.product.toString == orig(this.sellQuoteSide.product.toString)
this.sellQuoteSide.price == orig(this.sellQuoteSide.price)
this.sellQuoteSide.price.VALUE == orig(this.sellQuoteSide.price.VALUE)
this.sellQuoteSide.originalVolume == orig(this.sellQuoteSide.originalVolume)
this.sellQuoteSide.originalVolume == orig(this.sellQuoteSide.remainingVolume)
this.sellQuoteSide.cancelledVolume == orig(this.sellQuoteSide.cancelledVolume)
this.sellQuoteSide.user.toString == orig(this.sellQuoteSide.user.toString)
this.sellQuoteSide.side.bookside == orig(this.sellQuoteSide.side.bookside)
this.sellQuoteSide.side.bookside.toString == orig(this.sellQuoteSide.side.bookside.toString)
this.sellQuoteSide.id == orig(this.sellQuoteSide.id)
this.sellQuoteSide.id.toString == orig(this.sellQuoteSide.id.toString)
return == orig(this.product)
return == orig(this.buyQuoteSide.product)
return == orig(this.sellQuoteSide.product)
return.toString one of { "GOOG", "X11" }
===========================================================================
tradable.Quote.getQuoteSide(constants.BookSide):::ENTER
this.user != null
this.product has only one value
this.product != null
this.product.toString == "GOOG"
this.buyQuoteSide != null
this.buyQuoteSide.product.toString == "GOOG"
this.buyQuoteSide.id.toString one of { "ANNGOOG$641.103488477967697024", "REXGOOG$641.103488477938292211" }
this.sellQuoteSide != null
this.sellQuoteSide.product.toString == "GOOG"
this.sellQuoteSide.id.toString one of { "ANNGOOG$641.153488477968558282", "REXGOOG$641.153488477941813196" }
arg0 != null
constants.BookSide.BUY.bookside has only one value
constants.BookSide.BUY.bookside != null
constants.BookSide.BUY.bookside.toString == "BUY"
constants.BookSide.SELL.bookside has only one value
constants.BookSide.SELL.bookside != null
constants.BookSide.SELL.bookside.toString == "SELL"
arg0.bookside != null
arg0.bookside.toString one of { "BUY", "SELL" }
===========================================================================
tradable.Quote.getQuoteSide(constants.BookSide):::EXIT142
this.buyQuoteSide.price == return.price
this.buyQuoteSide.price.VALUE == return.price.VALUE
this.buyQuoteSide.originalVolume == return.originalVolume
this.buyQuoteSide.remainingVolume == return.originalVolume
constants.BookSide.BUY == return.side
constants.BookSide.BUY == orig(arg0)
this.buyQuoteSide.side.bookside == arg0.bookside
arg0.bookside == orig(this.buyQuoteSide.side.bookside)
return.price == orig(this.buyQuoteSide.price)
return.price.VALUE == orig(this.buyQuoteSide.price.VALUE)
return.originalVolume == orig(this.buyQuoteSide.originalVolume)
return.originalVolume == orig(this.buyQuoteSide.remainingVolume)
arg0.bookside has only one value
arg0.bookside.toString == "BUY"
return.price has only one value
return.price.VALUE == 64110
return.originalVolume == 120
return.side.bookside.toString == "BUY"
===========================================================================
tradable.Quote.getQuoteSide(constants.BookSide):::EXIT145
constants.BookSide.SELL == return.side
constants.BookSide.SELL == orig(arg0)
this.sellQuoteSide.price == return.price
this.sellQuoteSide.price.VALUE == return.price.VALUE
this.sellQuoteSide.originalVolume == return.originalVolume
this.sellQuoteSide.remainingVolume == return.originalVolume
this.sellQuoteSide.side.bookside == arg0.bookside
arg0.bookside == orig(this.sellQuoteSide.side.bookside)
return.price == orig(this.sellQuoteSide.price)
return.price.VALUE == orig(this.sellQuoteSide.price.VALUE)
return.originalVolume == orig(this.sellQuoteSide.originalVolume)
return.originalVolume == orig(this.sellQuoteSide.remainingVolume)
arg0.bookside has only one value
arg0.bookside.toString == "SELL"
return.price has only one value
return.price.VALUE == 64115
return.originalVolume == 150
return.side.bookside.toString == "SELL"
===========================================================================
tradable.Quote.getQuoteSide(constants.BookSide):::EXIT
this.user == return.user
this.user == orig(this.user)
this.user == orig(this.buyQuoteSide.user)
this.user == orig(this.sellQuoteSide.user)
this.user.toString == orig(this.user.toString)
this.product == return.product
this.product == orig(this.product)
this.product == orig(this.buyQuoteSide.product)
this.product == orig(this.sellQuoteSide.product)
this.product.toString == orig(this.product.toString)
this.buyQuoteSide == orig(this.buyQuoteSide)
this.buyQuoteSide.product.toString == orig(this.buyQuoteSide.product.toString)
this.buyQuoteSide.price == orig(this.buyQuoteSide.price)
this.buyQuoteSide.price.VALUE == orig(this.buyQuoteSide.price.VALUE)
this.buyQuoteSide.price.MKT == return.price.MKT
this.buyQuoteSide.originalVolume == orig(this.buyQuoteSide.originalVolume)
this.buyQuoteSide.originalVolume == orig(this.buyQuoteSide.remainingVolume)
this.buyQuoteSide.cancelledVolume == orig(this.buyQuoteSide.cancelledVolume)
this.buyQuoteSide.user.toString == orig(this.buyQuoteSide.user.toString)
constants.BookSide.BUY == orig(this.buyQuoteSide.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.sellQuoteSide.side)
this.buyQuoteSide.side.bookside == orig(this.buyQuoteSide.side.bookside)
this.buyQuoteSide.side.bookside.toString == orig(this.buyQuoteSide.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.buyQuoteSide.isQuote == return.isQuote
this.buyQuoteSide.id == orig(this.buyQuoteSide.id)
this.buyQuoteSide.id.toString == orig(this.buyQuoteSide.id.toString)
this.sellQuoteSide == orig(this.sellQuoteSide)
this.sellQuoteSide.product.toString == orig(this.sellQuoteSide.product.toString)
this.sellQuoteSide.price == orig(this.sellQuoteSide.price)
this.sellQuoteSide.price.VALUE == orig(this.sellQuoteSide.price.VALUE)
this.sellQuoteSide.price.MKT == return.price.MKT
this.sellQuoteSide.originalVolume == orig(this.sellQuoteSide.originalVolume)
this.sellQuoteSide.originalVolume == orig(this.sellQuoteSide.remainingVolume)
this.sellQuoteSide.cancelledVolume == orig(this.sellQuoteSide.cancelledVolume)
this.sellQuoteSide.user.toString == orig(this.sellQuoteSide.user.toString)
this.sellQuoteSide.side.bookside == orig(this.sellQuoteSide.side.bookside)
this.sellQuoteSide.side.bookside.toString == orig(this.sellQuoteSide.side.bookside.toString)
this.sellQuoteSide.isQuote == return.isQuote
this.sellQuoteSide.id == orig(this.sellQuoteSide.id)
this.sellQuoteSide.id.toString == orig(this.sellQuoteSide.id.toString)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
arg0.bookside == return.side.bookside
arg0.bookside == orig(arg0.bookside)
arg0.bookside.toString == orig(arg0.bookside.toString)
return.price.MKT == orig(this.buyQuoteSide.price.MKT)
return.price.MKT == orig(this.sellQuoteSide.price.MKT)
return.originalVolume == return.remainingVolume
return.side == orig(arg0)
return.isQuote == orig(this.buyQuoteSide.isQuote)
return.isQuote == orig(this.sellQuoteSide.isQuote)
(arg0.bookside.toString == "BUY")  <==>  (return.originalVolume == 120)
(arg0.bookside.toString == "BUY")  <==>  (return.price.VALUE == 64110)
(arg0.bookside.toString == "BUY")  <==>  (return.side.bookside.toString == "BUY")
(arg0.bookside.toString == "BUY")  <==>  (this.buyQuoteSide.originalVolume == return.originalVolume)
(arg0.bookside.toString == "BUY")  <==>  (this.buyQuoteSide.price.VALUE == return.price.VALUE)
(arg0.bookside.toString == "BUY")  ==>  (constants.BookSide.BUY == return.side)
(arg0.bookside.toString == "BUY")  ==>  (this.buyQuoteSide.price == return.price)
(arg0.bookside.toString == "BUY")  ==>  (this.buyQuoteSide.side.bookside == arg0.bookside)
(arg0.bookside.toString == "SELL")  <==>  (return.originalVolume == 150)
(arg0.bookside.toString == "SELL")  <==>  (return.price.VALUE == 64115)
(arg0.bookside.toString == "SELL")  <==>  (return.side.bookside.toString == "SELL")
(arg0.bookside.toString == "SELL")  <==>  (this.sellQuoteSide.originalVolume == return.originalVolume)
(arg0.bookside.toString == "SELL")  <==>  (this.sellQuoteSide.price.VALUE == return.price.VALUE)
(arg0.bookside.toString == "SELL")  ==>  (constants.BookSide.SELL == return.side)
(arg0.bookside.toString == "SELL")  ==>  (this.sellQuoteSide.price == return.price)
(arg0.bookside.toString == "SELL")  ==>  (this.sellQuoteSide.side.bookside == arg0.bookside)
this.user != null
this.product has only one value
this.product != null
this.product.toString == "GOOG"
this.buyQuoteSide != null
this.buyQuoteSide.product.toString == "GOOG"
this.buyQuoteSide.id.toString one of { "ANNGOOG$641.103488477967697024", "REXGOOG$641.103488477938292211" }
this.sellQuoteSide != null
this.sellQuoteSide.product.toString == "GOOG"
this.sellQuoteSide.id.toString one of { "ANNGOOG$641.153488477968558282", "REXGOOG$641.153488477941813196" }
constants.BookSide.BUY.bookside has only one value
constants.BookSide.BUY.bookside != null
constants.BookSide.BUY.bookside.toString == "BUY"
constants.BookSide.SELL.bookside has only one value
constants.BookSide.SELL.bookside != null
constants.BookSide.SELL.bookside.toString == "SELL"
arg0.bookside != null
arg0.bookside.toString one of { "BUY", "SELL" }
return != null
return.product.toString == "GOOG"
return.price != null
return.price.VALUE one of { 64110, 64115 }
return.price.MKT == false
return.originalVolume one of { 120, 150 }
return.cancelledVolume == 0
return.user.toString one of { "ANN", "REX" }
return.side != null
return.side.bookside.toString one of { "BUY", "SELL" }
return.isQuote == true
return.id != null
this.buyQuoteSide.price.VALUE <= return.price.VALUE
this.buyQuoteSide.originalVolume <= return.originalVolume
this.sellQuoteSide.price.VALUE >= return.price.VALUE
this.sellQuoteSide.originalVolume >= return.originalVolume
===========================================================================
tradable.Quote.getUserName():::ENTER
this.product has only one value
this.product.toString == "GOOG"
this.buyQuoteSide.product.toString == "GOOG"
this.buyQuoteSide.id.toString one of { "ANNGOOG$641.103488477967697024", "REXGOOG$641.103488477938292211" }
this.sellQuoteSide.product.toString == "GOOG"
this.sellQuoteSide.id.toString one of { "ANNGOOG$641.153488477968558282", "REXGOOG$641.153488477941813196" }
===========================================================================
tradable.Quote.getUserName():::EXIT
this.user == return
this.user.toString == orig(this.user.toString)
this.product == orig(this.product)
this.product == orig(this.buyQuoteSide.product)
this.product == orig(this.sellQuoteSide.product)
this.product.toString == orig(this.product.toString)
this.buyQuoteSide == orig(this.buyQuoteSide)
this.buyQuoteSide.product.toString == orig(this.buyQuoteSide.product.toString)
this.buyQuoteSide.price == orig(this.buyQuoteSide.price)
this.buyQuoteSide.price.VALUE == orig(this.buyQuoteSide.price.VALUE)
this.buyQuoteSide.price.MKT == orig(this.buyQuoteSide.price.MKT)
this.buyQuoteSide.price.MKT == orig(this.sellQuoteSide.price.MKT)
this.buyQuoteSide.originalVolume == orig(this.buyQuoteSide.originalVolume)
this.buyQuoteSide.originalVolume == orig(this.buyQuoteSide.remainingVolume)
this.buyQuoteSide.cancelledVolume == orig(this.buyQuoteSide.cancelledVolume)
this.buyQuoteSide.user == return
this.buyQuoteSide.user.toString == orig(this.buyQuoteSide.user.toString)
constants.BookSide.BUY == orig(this.buyQuoteSide.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.SELL == orig(this.sellQuoteSide.side)
this.buyQuoteSide.side.bookside == orig(this.buyQuoteSide.side.bookside)
this.buyQuoteSide.side.bookside.toString == orig(this.buyQuoteSide.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.buyQuoteSide.isQuote == orig(this.buyQuoteSide.isQuote)
this.buyQuoteSide.isQuote == orig(this.sellQuoteSide.isQuote)
this.buyQuoteSide.id == orig(this.buyQuoteSide.id)
this.buyQuoteSide.id.toString == orig(this.buyQuoteSide.id.toString)
this.sellQuoteSide == orig(this.sellQuoteSide)
this.sellQuoteSide.product.toString == orig(this.sellQuoteSide.product.toString)
this.sellQuoteSide.price == orig(this.sellQuoteSide.price)
this.sellQuoteSide.price.VALUE == orig(this.sellQuoteSide.price.VALUE)
this.sellQuoteSide.originalVolume == orig(this.sellQuoteSide.originalVolume)
this.sellQuoteSide.originalVolume == orig(this.sellQuoteSide.remainingVolume)
this.sellQuoteSide.cancelledVolume == orig(this.sellQuoteSide.cancelledVolume)
this.sellQuoteSide.user == return
this.sellQuoteSide.user.toString == orig(this.sellQuoteSide.user.toString)
this.sellQuoteSide.side.bookside == orig(this.sellQuoteSide.side.bookside)
this.sellQuoteSide.side.bookside.toString == orig(this.sellQuoteSide.side.bookside.toString)
this.sellQuoteSide.id == orig(this.sellQuoteSide.id)
this.sellQuoteSide.id.toString == orig(this.sellQuoteSide.id.toString)
return == orig(this.user)
return == orig(this.buyQuoteSide.user)
return == orig(this.sellQuoteSide.user)
this.product has only one value
this.product.toString == "GOOG"
this.buyQuoteSide.product.toString == "GOOG"
this.buyQuoteSide.id.toString one of { "ANNGOOG$641.103488477967697024", "REXGOOG$641.103488477938292211" }
this.sellQuoteSide.product.toString == "GOOG"
this.sellQuoteSide.id.toString one of { "ANNGOOG$641.153488477968558282", "REXGOOG$641.153488477941813196" }
return.toString one of { "ANN", "REX" }
===========================================================================
tradable.Quote.setBuyQuote(java.lang.String, java.lang.String, price.Price, int):::ENTER
this.user == arg0
this.product == arg1
this.buyQuoteSide == null
this.sellQuoteSide == null
arg0.toString one of { "ANN", "REX" }
arg1.toString one of { "GOOG", "X11" }
arg2 has only one value
arg2.VALUE == 64110
arg2.MKT == false
arg3 == 120
===========================================================================
tradable.Quote.setBuyQuote(java.lang.String, java.lang.String, price.Price, int):::EXIT
this.user == orig(this.user)
this.user == orig(arg0)
this.user.toString == orig(this.user.toString)
this.product == orig(this.product)
this.product == orig(arg1)
this.product.toString == orig(this.product.toString)
this.buyQuoteSide.price == orig(arg2)
this.buyQuoteSide.price.VALUE == arg2.VALUE
this.buyQuoteSide.price.MKT == arg2.MKT
this.buyQuoteSide.originalVolume == orig(arg3)
this.buyQuoteSide.remainingVolume == orig(arg3)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.sellQuoteSide == orig(this.sellQuoteSide)
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
arg2.VALUE == orig(arg2.VALUE)
arg2.MKT == orig(arg2.MKT)
this.sellQuoteSide == null
arg0.toString one of { "ANN", "REX" }
arg1.toString one of { "GOOG", "X11" }
arg2.VALUE == 64110
arg2.MKT == false
===========================================================================
tradable.Quote.setProduct(java.lang.String):::ENTER
this.product == null
this.buyQuoteSide == null
this.sellQuoteSide == null
arg0.toString one of { "GOOG", "X11" }
===========================================================================
tradable.Quote.setProduct(java.lang.String):::EXIT
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.product == orig(arg0)
this.buyQuoteSide == orig(this.buyQuoteSide)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.sellQuoteSide == orig(this.sellQuoteSide)
arg0.toString == orig(arg0.toString)
this.buyQuoteSide == null
this.sellQuoteSide == null
arg0.toString one of { "GOOG", "X11" }
===========================================================================
tradable.Quote.setSellQuote(java.lang.String, java.lang.String, price.Price, int):::ENTER
this.user == arg0
this.product == arg1
this.buyQuoteSide.price.MKT == arg2.MKT
this.sellQuoteSide == null
arg0.toString one of { "ANN", "REX" }
arg1.toString one of { "GOOG", "X11" }
arg2 has only one value
arg2.VALUE == 64115
arg3 == 150
===========================================================================
tradable.Quote.setSellQuote(java.lang.String, java.lang.String, price.Price, int):::EXIT
this.user == orig(this.user)
this.user == orig(this.buyQuoteSide.user)
this.user == orig(arg0)
this.user.toString == orig(this.user.toString)
this.product == orig(this.product)
this.product == orig(this.buyQuoteSide.product)
this.product == orig(arg1)
this.product.toString == orig(this.product.toString)
this.buyQuoteSide == orig(this.buyQuoteSide)
this.buyQuoteSide.product.toString == orig(this.buyQuoteSide.product.toString)
this.buyQuoteSide.price == orig(this.buyQuoteSide.price)
this.buyQuoteSide.price.VALUE == orig(this.buyQuoteSide.price.VALUE)
this.buyQuoteSide.price.MKT == arg2.MKT
this.buyQuoteSide.originalVolume == orig(this.buyQuoteSide.originalVolume)
this.buyQuoteSide.originalVolume == orig(this.buyQuoteSide.remainingVolume)
this.buyQuoteSide.cancelledVolume == orig(this.buyQuoteSide.cancelledVolume)
this.buyQuoteSide.user.toString == orig(this.buyQuoteSide.user.toString)
constants.BookSide.BUY == orig(this.buyQuoteSide.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
this.buyQuoteSide.side.bookside == orig(this.buyQuoteSide.side.bookside)
this.buyQuoteSide.side.bookside.toString == orig(this.buyQuoteSide.side.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.buyQuoteSide.isQuote == orig(this.buyQuoteSide.isQuote)
this.buyQuoteSide.id == orig(this.buyQuoteSide.id)
this.buyQuoteSide.id.toString == orig(this.buyQuoteSide.id.toString)
this.sellQuoteSide.price == orig(arg2)
this.sellQuoteSide.price.VALUE == arg2.VALUE
this.sellQuoteSide.price.MKT == arg2.MKT
this.sellQuoteSide.originalVolume == orig(arg3)
this.sellQuoteSide.remainingVolume == orig(arg3)
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
arg2.VALUE == orig(arg2.VALUE)
arg2.MKT == orig(this.buyQuoteSide.price.MKT)
arg2.MKT == orig(arg2.MKT)
arg0.toString one of { "ANN", "REX" }
arg1.toString one of { "GOOG", "X11" }
arg2.VALUE == 64115
arg2.MKT == false
===========================================================================
tradable.Quote.setUserName(java.lang.String):::ENTER
this.user == null
this.product == null
this.buyQuoteSide == null
this.sellQuoteSide == null
arg0.toString one of { "ANN", "REX" }
===========================================================================
tradable.Quote.setUserName(java.lang.String):::EXIT
this.user == orig(arg0)
this.product == orig(this.product)
this.buyQuoteSide == orig(this.buyQuoteSide)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.sellQuoteSide == orig(this.sellQuoteSide)
arg0.toString == orig(arg0.toString)
this.product == null
this.buyQuoteSide == null
this.sellQuoteSide == null
arg0.toString one of { "ANN", "REX" }
===========================================================================
tradable.QuoteSide:::OBJECT
this.originalVolume == this.remainingVolume
this.product != null
this.product.toString one of { "GOOG", "X11" }
this.price != null
this.price.VALUE one of { 64110, 64115 }
this.price.MKT == false
this.originalVolume one of { 120, 150 }
this.cancelledVolume == 0
this.user != null
this.user.toString one of { "ANN", "REX" }
this.side != null
constants.BookSide.BUY has only one value
constants.BookSide.BUY != null
constants.BookSide.SELL has only one value
constants.BookSide.SELL != null
constants.BookSide.BUY.bookside has only one value
constants.BookSide.BUY.bookside != null
constants.BookSide.BUY.bookside.toString == "BUY"
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES != null
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[] elements != null
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside elements != null
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
constants.BookSide.SELL.bookside has only one value
constants.BookSide.SELL.bookside != null
constants.BookSide.SELL.bookside.toString == "SELL"
this.side.bookside != null
this.side.bookside.toString one of { "BUY", "SELL" }
this.isQuote == true
this.id != null
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
tradable.QuoteSide.QuoteSide(java.lang.String, java.lang.String, price.Price, int, constants.BookSide):::ENTER
arg0.toString one of { "ANN", "REX" }
arg1.toString one of { "GOOG", "X11" }
arg2.VALUE one of { 64110, 64115 }
arg2.MKT == false
arg3 one of { 120, 150 }
constants.BookSide.BUY has only one value
constants.BookSide.SELL has only one value
constants.BookSide.BUY.bookside has only one value
constants.BookSide.BUY.bookside.toString == "BUY"
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
constants.BookSide.SELL.bookside has only one value
constants.BookSide.SELL.bookside.toString == "SELL"
arg4.bookside.toString one of { "BUY", "SELL" }
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
tradable.QuoteSide.QuoteSide(java.lang.String, java.lang.String, price.Price, int, constants.BookSide):::EXIT
this.product == orig(arg1)
this.price == orig(arg2)
this.price.VALUE == arg2.VALUE
this.price.MKT == arg2.MKT
this.originalVolume == orig(arg3)
this.user == orig(arg0)
this.side == orig(arg4)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == arg4.bookside
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
arg2.VALUE == orig(arg2.VALUE)
arg2.MKT == orig(arg2.MKT)
arg4.bookside == orig(arg4.bookside)
arg4.bookside.toString == orig(arg4.bookside.toString)
arg0.toString one of { "ANN", "REX" }
arg1.toString one of { "GOOG", "X11" }
arg2.VALUE one of { 64110, 64115 }
arg2.MKT == false
arg4.bookside.toString one of { "BUY", "SELL" }
===========================================================================
tradable.QuoteSide.QuoteSide(tradable.QuoteSide):::ENTER
arg0.originalVolume == arg0.remainingVolume
arg0 != null
arg0.product has only one value
arg0.product != null
arg0.product.toString == "GOOG"
arg0.price != null
arg0.price.VALUE one of { 64110, 64115 }
arg0.price.MKT == false
arg0.originalVolume one of { 120, 150 }
arg0.cancelledVolume == 0
arg0.user != null
arg0.user.toString one of { "ANN", "REX" }
arg0.side != null
constants.BookSide.BUY has only one value
constants.BookSide.BUY != null
constants.BookSide.SELL has only one value
constants.BookSide.SELL != null
arg0.side.bookside != null
arg0.side.bookside.toString one of { "BUY", "SELL" }
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES != null
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[] elements != null
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside elements != null
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
arg0.isQuote == true
arg0.id != null
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
tradable.QuoteSide.QuoteSide(tradable.QuoteSide):::EXIT
this.product == arg0.product
this.product == orig(arg0.product)
this.price == arg0.price
this.price == orig(arg0.price)
this.price.VALUE == arg0.price.VALUE
this.price.VALUE == orig(arg0.price.VALUE)
this.price.MKT == arg0.price.MKT
this.price.MKT == orig(arg0.price.MKT)
this.originalVolume == arg0.originalVolume
this.originalVolume == arg0.remainingVolume
this.originalVolume == orig(arg0.originalVolume)
this.originalVolume == orig(arg0.remainingVolume)
this.user == arg0.user
this.user == orig(arg0.user)
this.side == arg0.side
this.side == orig(arg0.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
this.side.bookside == arg0.side.bookside
this.side.bookside == orig(arg0.side.bookside)
this.isQuote == arg0.isQuote
this.isQuote == orig(arg0.isQuote)
arg0.product.toString == orig(arg0.product.toString)
arg0.cancelledVolume == orig(arg0.cancelledVolume)
arg0.user.toString == orig(arg0.user.toString)
arg0.side.bookside.toString == orig(arg0.side.bookside.toString)
arg0.id == orig(arg0.id)
arg0.id.toString == orig(arg0.id.toString)
this.product has only one value
this.product.toString == "GOOG"
arg0.product.toString == "GOOG"
arg0.cancelledVolume == 0
arg0.user.toString one of { "ANN", "REX" }
arg0.side.bookside.toString one of { "BUY", "SELL" }
arg0.id != null
===========================================================================
tradable.TradableDTO:::OBJECT
this.product has only one value
this.product != null
this.product.toString == "GOOG"
this.price != null
this.price.MKT == false
this.cancelledVolume == 0
this.user != null
this.user.toString one of { "ANN", "REX" }
this.side != null
constants.BookSide.BUY has only one value
constants.BookSide.BUY != null
constants.BookSide.SELL has only one value
constants.BookSide.SELL != null
constants.BookSide.BUY.bookside has only one value
constants.BookSide.BUY.bookside != null
constants.BookSide.BUY.bookside.toString == "BUY"
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES != null
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[] elements != null
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside elements != null
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
constants.BookSide.SELL.bookside has only one value
constants.BookSide.SELL.bookside != null
constants.BookSide.SELL.bookside.toString == "SELL"
this.side.bookside != null
this.side.bookside.toString one of { "BUY", "SELL" }
this.id != null
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
tradable.TradableDTO.TradableDTO(tradable.Tradable):::ENTER
arg0 != null
===========================================================================
tradable.TradableDTO.TradableDTO(tradable.Tradable):::EXIT
this.originalVolume == this.remainingVolume
constants.BookSide.$VALUES.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
tradable.TradableDTO.toString():::ENTER
this.user has only one value
this.user.toString == "REX"
this.side has only one value
this.side.bookside has only one value
this.side.bookside.toString == "BUY"
this.isQuote == false
===========================================================================
tradable.TradableDTO.toString():::EXIT
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.originalVolume == orig(this.originalVolume)
this.remainingVolume == orig(this.remainingVolume)
this.cancelledVolume == orig(this.cancelledVolume)
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.isQuote == orig(this.isQuote)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.user has only one value
this.user.toString == "REX"
this.side has only one value
this.side.bookside has only one value
this.side.bookside.toString == "BUY"
this.isQuote == false
===========================================================================
tradable.Trader:::OBJECT
this.product.toString one of { "GOOG", "X11" }
this.price.VALUE >= 0
this.originalVolume >= 0
this.remainingVolume >= 0
this.cancelledVolume >= 0
this.user.toString one of { "ANN", "REX" }
constants.BookSide.BUY has only one value
constants.BookSide.BUY != null
constants.BookSide.SELL has only one value
constants.BookSide.SELL != null
constants.BookSide.BUY.bookside has only one value
constants.BookSide.BUY.bookside != null
constants.BookSide.BUY.bookside.toString == "BUY"
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES != null
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[] elements != null
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside elements != null
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
constants.BookSide.SELL.bookside has only one value
constants.BookSide.SELL.bookside != null
constants.BookSide.SELL.bookside.toString == "SELL"
this.side.bookside != null
this.side.bookside.toString one of { "BUY", "SELL" }
size(constants.BookSide.$VALUES[]) == 2
this.originalVolume >= this.remainingVolume
this.originalVolume >= this.cancelledVolume
===========================================================================
tradable.Trader.Trader(java.lang.String, java.lang.String, price.Price, int, constants.BookSide, boolean):::ENTER
arg0 != null
arg0.toString one of { "ANN", "REX" }
arg1 != null
arg1.toString one of { "GOOG", "X11" }
arg2 != null
arg4 != null
constants.BookSide.BUY has only one value
constants.BookSide.BUY != null
constants.BookSide.SELL has only one value
constants.BookSide.SELL != null
constants.BookSide.BUY.bookside has only one value
constants.BookSide.BUY.bookside != null
constants.BookSide.BUY.bookside.toString == "BUY"
constants.BookSide.$VALUES has only one value
constants.BookSide.$VALUES != null
constants.BookSide.$VALUES.getClass().getName() == constants.BookSide[].class
constants.BookSide.$VALUES[] contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[] elements != null
constants.BookSide.$VALUES[].getClass().getName() == [constants.BookSide, constants.BookSide]
constants.BookSide.$VALUES[].getClass().getName() elements == constants.BookSide.class
constants.BookSide.$VALUES[].bookside contains no nulls and has only one value, of length 2
constants.BookSide.$VALUES[].bookside elements != null
constants.BookSide.$VALUES[].bookside.toString == [BUY, SELL]
constants.BookSide.$VALUES[].bookside.toString elements one of { "BUY", "SELL" }
constants.BookSide.SELL.bookside has only one value
constants.BookSide.SELL.bookside != null
constants.BookSide.SELL.bookside.toString == "SELL"
arg4.bookside != null
arg4.bookside.toString one of { "BUY", "SELL" }
size(constants.BookSide.$VALUES[]) == 2
===========================================================================
tradable.Trader.Trader(java.lang.String, java.lang.String, price.Price, int, constants.BookSide, boolean):::EXIT
this.product == orig(arg1)
this.price == orig(arg2)
this.price.VALUE == arg2.VALUE
this.price.MKT == arg2.MKT
this.originalVolume == this.remainingVolume
this.originalVolume == orig(arg3)
this.user == orig(arg0)
this.side == orig(arg4)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == arg4.bookside
this.isQuote == orig(arg5)
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
arg2.VALUE == orig(arg2.VALUE)
arg2.MKT == orig(arg2.MKT)
arg4.bookside == orig(arg4.bookside)
arg4.bookside.toString == orig(arg4.bookside.toString)
this.product != null
this.price != null
this.cancelledVolume == 0
this.user != null
this.side != null
this.id != null
arg0.toString one of { "ANN", "REX" }
arg1.toString one of { "GOOG", "X11" }
arg4.bookside != null
arg4.bookside.toString one of { "BUY", "SELL" }
this.originalVolume > this.cancelledVolume
===========================================================================
tradable.Trader.getCancelledVolume():::ENTER
this.originalVolume == this.remainingVolume
this.product has only one value
this.product != null
this.product.toString == "GOOG"
this.price != null
this.price.MKT == false
this.cancelledVolume == 0
this.user != null
this.side != null
this.id != null
this.originalVolume > this.cancelledVolume
===========================================================================
tradable.Trader.getCancelledVolume():::EXIT
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.originalVolume == this.remainingVolume
this.originalVolume == orig(this.originalVolume)
this.originalVolume == orig(this.remainingVolume)
this.cancelledVolume == return
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.isQuote == orig(this.isQuote)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
return == orig(this.cancelledVolume)
this.product has only one value
this.product != null
this.product.toString == "GOOG"
this.price != null
this.price.MKT == false
this.user != null
this.side != null
this.id != null
return == 0
this.originalVolume > return
===========================================================================
tradable.Trader.getId():::ENTER
this.product has only one value
this.product != null
this.product.toString == "GOOG"
this.price != null
this.cancelledVolume == 0
this.user != null
this.side != null
this.id != null
this.originalVolume > this.cancelledVolume
this.remainingVolume >= this.cancelledVolume
===========================================================================
tradable.Trader.getId():::EXIT
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.originalVolume == orig(this.originalVolume)
this.remainingVolume == orig(this.remainingVolume)
this.cancelledVolume == orig(this.cancelledVolume)
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.isQuote == orig(this.isQuote)
this.id == return
this.id.toString == orig(this.id.toString)
return == orig(this.id)
this.product has only one value
this.product != null
this.product.toString == "GOOG"
this.price != null
this.cancelledVolume == 0
this.user != null
this.side != null
return != null
this.originalVolume > this.cancelledVolume
this.remainingVolume >= this.cancelledVolume
===========================================================================
tradable.Trader.getOriginalVolume():::ENTER
this.product has only one value
this.product != null
this.product.toString == "GOOG"
this.price != null
this.cancelledVolume == 0
this.user != null
this.side != null
this.id != null
this.originalVolume > this.cancelledVolume
this.remainingVolume >= this.cancelledVolume
===========================================================================
tradable.Trader.getOriginalVolume():::EXIT
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.originalVolume == return
this.remainingVolume == orig(this.remainingVolume)
this.cancelledVolume == orig(this.cancelledVolume)
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.isQuote == orig(this.isQuote)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
return == orig(this.originalVolume)
this.product has only one value
this.product != null
this.product.toString == "GOOG"
this.price != null
this.cancelledVolume == 0
this.user != null
this.side != null
this.id != null
this.remainingVolume >= this.cancelledVolume
this.remainingVolume <= return
this.cancelledVolume < return
===========================================================================
tradable.Trader.getPrice():::ENTER
this.product has only one value
this.product != null
this.product.toString == "GOOG"
this.price != null
this.cancelledVolume == 0
this.user != null
this.side != null
this.id != null
this.originalVolume > this.cancelledVolume
this.remainingVolume >= this.cancelledVolume
===========================================================================
tradable.Trader.getPrice():::EXIT126
this.side == constants.BookSide.BUY
constants.BookSide.BUY == orig(this.side)
this.originalVolume one of { 456, 1750 }
this.user has only one value
this.user.toString == "REX"
this.side.bookside has only one value
this.side.bookside.toString == "BUY"
this.isQuote == false
this.id.toString one of { "REXGOOGMKT3488478036218018", "REXGOOGMKT3488478113476640" }
return has only one value
return.VALUE == 0
return.MKT == true
this.remainingVolume > this.cancelledVolume
===========================================================================
tradable.Trader.getPrice():::EXIT129
return.MKT == false
===========================================================================
tradable.Trader.getPrice():::EXIT
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == return
this.price.VALUE == return.VALUE
this.price.MKT == return.MKT
this.originalVolume == orig(this.originalVolume)
this.remainingVolume == orig(this.remainingVolume)
this.cancelledVolume == orig(this.cancelledVolume)
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.isQuote == orig(this.isQuote)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
return == orig(this.price)
return.VALUE == orig(this.price.VALUE)
return.MKT == orig(this.price.MKT)
(return.VALUE == 0)  <==>  (return.MKT == true)
(return.VALUE == 0)  ==>  (return has only one value)
(return.VALUE == 0)  ==>  (this.id.toString one of { "REXGOOGMKT3488478036218018", "REXGOOGMKT3488478113476640" })
(return.VALUE == 0)  ==>  (this.isQuote == false)
(return.VALUE == 0)  ==>  (this.originalVolume one of { 456, 1750 })
(return.VALUE == 0)  ==>  (this.remainingVolume > this.cancelledVolume)
(return.VALUE == 0)  ==>  (this.side == constants.BookSide.BUY)
(return.VALUE == 0)  ==>  (this.side has only one value)
(return.VALUE == 0)  ==>  (this.side.bookside has only one value)
(return.VALUE == 0)  ==>  (this.side.bookside.toString == "BUY")
(return.VALUE == 0)  ==>  (this.user has only one value)
(return.VALUE == 0)  ==>  (this.user.toString == "REX")
this.product has only one value
this.product != null
this.product.toString == "GOOG"
this.cancelledVolume == 0
this.user != null
this.side != null
this.id != null
return != null
return.VALUE >= 0
this.originalVolume > this.cancelledVolume
this.remainingVolume >= this.cancelledVolume
===========================================================================
tradable.Trader.getProduct():::ENTER
this.product != null
this.price != null
this.cancelledVolume == 0
this.user != null
this.side != null
this.id != null
this.originalVolume > this.cancelledVolume
this.remainingVolume > this.cancelledVolume
===========================================================================
tradable.Trader.getProduct():::EXIT
this.product == return
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.originalVolume == orig(this.originalVolume)
this.remainingVolume == orig(this.remainingVolume)
this.cancelledVolume == orig(this.cancelledVolume)
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.isQuote == orig(this.isQuote)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
return == orig(this.product)
this.price != null
this.cancelledVolume == 0
this.user != null
this.side != null
this.id != null
return != null
return.toString one of { "GOOG", "X11" }
this.originalVolume > this.cancelledVolume
this.remainingVolume > this.cancelledVolume
===========================================================================
tradable.Trader.getRemainingVolume():::ENTER
this.product has only one value
this.product != null
this.product.toString == "GOOG"
this.price != null
this.cancelledVolume == 0
this.user != null
this.side != null
this.id != null
this.originalVolume > this.cancelledVolume
this.remainingVolume >= this.cancelledVolume
===========================================================================
tradable.Trader.getRemainingVolume():::EXIT
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.originalVolume == orig(this.originalVolume)
this.remainingVolume == return
this.cancelledVolume == orig(this.cancelledVolume)
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.isQuote == orig(this.isQuote)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
return == orig(this.remainingVolume)
this.product has only one value
this.product != null
this.product.toString == "GOOG"
this.price != null
this.cancelledVolume == 0
this.user != null
this.side != null
this.id != null
return >= 0
this.originalVolume > this.cancelledVolume
this.originalVolume >= return
this.cancelledVolume <= return
===========================================================================
tradable.Trader.getSide():::ENTER
this.product has only one value
this.product != null
this.product.toString == "GOOG"
this.price != null
this.cancelledVolume == 0
this.user != null
this.side != null
this.id != null
this.originalVolume > this.cancelledVolume
this.remainingVolume > this.cancelledVolume
===========================================================================
tradable.Trader.getSide():::EXIT
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.originalVolume == orig(this.originalVolume)
this.remainingVolume == orig(this.remainingVolume)
this.cancelledVolume == orig(this.cancelledVolume)
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.side == return
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == return.bookside
this.side.bookside.toString == orig(this.side.bookside.toString)
this.isQuote == orig(this.isQuote)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
return == orig(this.side)
return.bookside == orig(this.side.bookside)
this.product has only one value
this.product != null
this.product.toString == "GOOG"
this.price != null
this.cancelledVolume == 0
this.user != null
this.id != null
return != null
return.bookside != null
return.bookside.toString one of { "BUY", "SELL" }
this.originalVolume > this.cancelledVolume
this.remainingVolume > this.cancelledVolume
===========================================================================
tradable.Trader.getUser():::ENTER
this.product has only one value
this.product != null
this.product.toString == "GOOG"
this.price != null
this.cancelledVolume == 0
this.user != null
this.side != null
this.id != null
this.originalVolume > this.cancelledVolume
this.remainingVolume > this.cancelledVolume
===========================================================================
tradable.Trader.getUser():::EXIT
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.originalVolume == orig(this.originalVolume)
this.remainingVolume == orig(this.remainingVolume)
this.cancelledVolume == orig(this.cancelledVolume)
this.user == return
this.user.toString == orig(this.user.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.isQuote == orig(this.isQuote)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
return == orig(this.user)
this.product has only one value
this.product != null
this.product.toString == "GOOG"
this.price != null
this.cancelledVolume == 0
this.side != null
this.id != null
return != null
return.toString one of { "ANN", "REX" }
this.originalVolume > this.cancelledVolume
this.remainingVolume > this.cancelledVolume
===========================================================================
tradable.Trader.isQuote():::ENTER
this.product has only one value
this.product != null
this.product.toString == "GOOG"
this.price != null
this.price.MKT == false
this.cancelledVolume == 0
this.user != null
this.side != null
this.id != null
this.originalVolume > this.cancelledVolume
this.remainingVolume > this.cancelledVolume
===========================================================================
tradable.Trader.isQuote():::EXIT
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.originalVolume == orig(this.originalVolume)
this.remainingVolume == orig(this.remainingVolume)
this.cancelledVolume == orig(this.cancelledVolume)
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.isQuote == return
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
return == orig(this.isQuote)
(return == false)  ==>  (this.side == constants.BookSide.BUY)
(return == false)  ==>  (this.side has only one value)
(return == false)  ==>  (this.side.bookside has only one value)
(return == false)  ==>  (this.side.bookside.toString == "BUY")
(return == false)  ==>  (this.user has only one value)
(return == false)  ==>  (this.user.toString == "REX")
(return == true)  ==>  (this.originalVolume == this.remainingVolume)
(return == true)  ==>  (this.originalVolume one of { 120, 150 })
(return == true)  ==>  (this.price.VALUE one of { 64110, 64115 })
(return == true)  ==>  (this.remainingVolume one of { 120, 150 })
(return == true)  ==>  (this.side.bookside.toString one of { "BUY", "SELL" })
(return == true)  ==>  (this.user.toString one of { "ANN", "REX" })
this.product has only one value
this.product != null
this.product.toString == "GOOG"
this.price != null
this.price.MKT == false
this.cancelledVolume == 0
this.user != null
this.side != null
this.id != null
this.originalVolume > this.cancelledVolume
this.remainingVolume > this.cancelledVolume
===========================================================================
tradable.Trader.isQuote():::EXIT;condition="return == true"
this.originalVolume == this.remainingVolume
this.originalVolume == orig(this.remainingVolume)
this.price.VALUE one of { 64110, 64115 }
this.originalVolume one of { 120, 150 }
return == true
===========================================================================
tradable.Trader.isQuote():::EXIT;condition="not(return == true)"
this.side == constants.BookSide.BUY
constants.BookSide.BUY == orig(this.side)
this.user has only one value
this.user.toString == "REX"
this.side.bookside has only one value
this.side.bookside.toString == "BUY"
return == false
===========================================================================
tradable.Trader.setCancelledVolume():::ENTER
this.originalVolume == this.remainingVolume
this.product != null
this.price != null
this.cancelledVolume == 0
this.user != null
this.side == null
this.isQuote == false
this.id != null
this.originalVolume > this.cancelledVolume
===========================================================================
tradable.Trader.setCancelledVolume():::EXIT
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.originalVolume == this.remainingVolume
this.originalVolume == orig(this.originalVolume)
this.originalVolume == orig(this.remainingVolume)
this.cancelledVolume == orig(this.cancelledVolume)
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.isQuote == orig(this.isQuote)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.product != null
this.price != null
this.cancelledVolume == 0
this.user != null
this.side == null
this.isQuote == false
this.id != null
this.originalVolume > this.cancelledVolume
===========================================================================
tradable.Trader.setCancelledVolume(int):::ENTER
this.remainingVolume == arg0
this.product has only one value
this.product != null
this.product.toString == "GOOG"
this.price != null
this.price.MKT == false
this.cancelledVolume == 0
this.user != null
this.side != null
this.isQuote == false
this.id != null
this.remainingVolume % this.originalVolume == 0
this.originalVolume > this.cancelledVolume
this.remainingVolume >= this.cancelledVolume
===========================================================================
tradable.Trader.setCancelledVolume(int):::EXIT
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.originalVolume == orig(this.originalVolume)
this.remainingVolume == this.cancelledVolume
this.remainingVolume == orig(this.remainingVolume)
this.remainingVolume == orig(arg0)
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.isQuote == orig(this.isQuote)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.product has only one value
this.product != null
this.product.toString == "GOOG"
this.price != null
this.price.MKT == false
this.user != null
this.side != null
this.isQuote == false
this.id != null
this.remainingVolume % this.originalVolume == 0
this.originalVolume > orig(this.cancelledVolume)
this.remainingVolume >= orig(this.cancelledVolume)
===========================================================================
tradable.Trader.setId(price.Price, java.lang.String, java.lang.String):::ENTER
this.originalVolume == this.remainingVolume
this.originalVolume == this.cancelledVolume
this.product == null
this.price == null
this.originalVolume == 0
this.user == null
this.side == null
this.isQuote == false
this.id == null
arg0 != null
arg1 != null
arg1.toString one of { "ANN", "REX" }
arg2 != null
arg2.toString one of { "GOOG", "X11" }
===========================================================================
tradable.Trader.setId(price.Price, java.lang.String, java.lang.String):::EXIT
this.product == orig(this.product)
this.price == orig(this.price)
this.originalVolume == this.remainingVolume
this.originalVolume == this.cancelledVolume
this.originalVolume == orig(this.originalVolume)
this.originalVolume == orig(this.remainingVolume)
this.originalVolume == orig(this.cancelledVolume)
this.user == orig(this.user)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.isQuote == orig(this.isQuote)
arg0.VALUE == orig(arg0.VALUE)
arg0.MKT == orig(arg0.MKT)
arg1.toString == orig(arg1.toString)
arg2.toString == orig(arg2.toString)
this.product == null
this.price == null
this.originalVolume == 0
this.user == null
this.side == null
this.isQuote == false
this.id != null
arg1.toString one of { "ANN", "REX" }
arg2.toString one of { "GOOG", "X11" }
===========================================================================
tradable.Trader.setOriginalVolume(int):::ENTER
this.originalVolume == this.remainingVolume
this.originalVolume == this.cancelledVolume
this.product != null
this.price != null
this.originalVolume == 0
this.user != null
this.side == null
this.isQuote == false
this.id != null
this.originalVolume < arg0
===========================================================================
tradable.Trader.setOriginalVolume(int):::EXIT
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.originalVolume == orig(arg0)
this.remainingVolume == this.cancelledVolume
this.remainingVolume == orig(this.originalVolume)
this.remainingVolume == orig(this.remainingVolume)
this.remainingVolume == orig(this.cancelledVolume)
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.isQuote == orig(this.isQuote)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.product != null
this.price != null
this.remainingVolume == 0
this.user != null
this.side == null
this.isQuote == false
this.id != null
this.originalVolume > this.remainingVolume
===========================================================================
tradable.Trader.setPrice(price.Price):::ENTER
this.originalVolume == this.remainingVolume
this.originalVolume == this.cancelledVolume
this.product == null
this.price == null
this.originalVolume == 0
this.user == null
this.side == null
this.isQuote == false
this.id != null
arg0 != null
===========================================================================
tradable.Trader.setPrice(price.Price):::EXIT
this.product == orig(this.product)
this.price == orig(arg0)
this.price.VALUE == arg0.VALUE
this.price.MKT == arg0.MKT
this.originalVolume == this.remainingVolume
this.originalVolume == this.cancelledVolume
this.originalVolume == orig(this.originalVolume)
this.originalVolume == orig(this.remainingVolume)
this.originalVolume == orig(this.cancelledVolume)
this.user == orig(this.user)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.isQuote == orig(this.isQuote)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
arg0.VALUE == orig(arg0.VALUE)
arg0.MKT == orig(arg0.MKT)
this.product == null
this.price != null
this.originalVolume == 0
this.user == null
this.side == null
this.isQuote == false
this.id != null
===========================================================================
tradable.Trader.setProduct(java.lang.String):::ENTER
this.originalVolume == this.remainingVolume
this.originalVolume == this.cancelledVolume
this.product == null
this.price != null
this.originalVolume == 0
this.user != null
this.side == null
this.isQuote == false
this.id != null
arg0 != null
arg0.toString one of { "GOOG", "X11" }
===========================================================================
tradable.Trader.setProduct(java.lang.String):::EXIT
this.product == orig(arg0)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.originalVolume == this.remainingVolume
this.originalVolume == this.cancelledVolume
this.originalVolume == orig(this.originalVolume)
this.originalVolume == orig(this.remainingVolume)
this.originalVolume == orig(this.cancelledVolume)
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.isQuote == orig(this.isQuote)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
arg0.toString == orig(arg0.toString)
this.product != null
this.price != null
this.originalVolume == 0
this.user != null
this.side == null
this.isQuote == false
this.id != null
arg0.toString one of { "GOOG", "X11" }
===========================================================================
tradable.Trader.setQuote(boolean):::ENTER
this.originalVolume == this.remainingVolume
this.product != null
this.price != null
this.cancelledVolume == 0
this.user != null
this.side != null
this.isQuote == false
this.id != null
this.originalVolume > this.cancelledVolume
===========================================================================
tradable.Trader.setQuote(boolean):::EXIT
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.originalVolume == this.remainingVolume
this.originalVolume == orig(this.originalVolume)
this.originalVolume == orig(this.remainingVolume)
this.cancelledVolume == orig(this.cancelledVolume)
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.isQuote == orig(arg0)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.product != null
this.price != null
this.cancelledVolume == 0
this.user != null
this.side != null
this.id != null
this.originalVolume > this.cancelledVolume
===========================================================================
tradable.Trader.setRemainingVolume(int):::ENTER
this.product != null
this.price != null
this.user != null
this.id != null
arg0 >= 0
this.cancelledVolume % this.originalVolume == 0
this.originalVolume >= arg0
this.remainingVolume >= this.cancelledVolume
===========================================================================
tradable.Trader.setRemainingVolume(int):::EXIT
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.originalVolume == orig(this.originalVolume)
this.remainingVolume == orig(arg0)
this.cancelledVolume == orig(this.cancelledVolume)
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == orig(this.side.bookside)
this.side.bookside.toString == orig(this.side.bookside.toString)
this.isQuote == orig(this.isQuote)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
this.product != null
this.price != null
this.user != null
this.id != null
this.cancelledVolume % this.originalVolume == 0
this.originalVolume >= orig(this.remainingVolume)
this.cancelledVolume <= orig(this.remainingVolume)
===========================================================================
tradable.Trader.setSide(constants.BookSide):::ENTER
this.originalVolume == this.remainingVolume
this.product != null
this.price != null
this.cancelledVolume == 0
this.user != null
this.side == null
this.isQuote == false
this.id != null
arg0 != null
arg0.bookside != null
arg0.bookside.toString one of { "BUY", "SELL" }
this.originalVolume > this.cancelledVolume
===========================================================================
tradable.Trader.setSide(constants.BookSide):::EXIT
this.product == orig(this.product)
this.product.toString == orig(this.product.toString)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.originalVolume == this.remainingVolume
this.originalVolume == orig(this.originalVolume)
this.originalVolume == orig(this.remainingVolume)
this.cancelledVolume == orig(this.cancelledVolume)
this.user == orig(this.user)
this.user.toString == orig(this.user.toString)
this.side == orig(arg0)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.side.bookside == arg0.bookside
this.isQuote == orig(this.isQuote)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
arg0.bookside == orig(arg0.bookside)
arg0.bookside.toString == orig(arg0.bookside.toString)
this.product != null
this.price != null
this.cancelledVolume == 0
this.user != null
this.side != null
this.isQuote == false
this.id != null
arg0.bookside != null
arg0.bookside.toString one of { "BUY", "SELL" }
this.originalVolume > this.cancelledVolume
===========================================================================
tradable.Trader.setUser(java.lang.String):::ENTER
this.originalVolume == this.remainingVolume
this.originalVolume == this.cancelledVolume
this.product == null
this.price != null
this.originalVolume == 0
this.user == null
this.side == null
this.isQuote == false
this.id != null
arg0 != null
arg0.toString one of { "ANN", "REX" }
===========================================================================
tradable.Trader.setUser(java.lang.String):::EXIT
this.product == orig(this.product)
this.price == orig(this.price)
this.price.VALUE == orig(this.price.VALUE)
this.price.MKT == orig(this.price.MKT)
this.originalVolume == this.remainingVolume
this.originalVolume == this.cancelledVolume
this.originalVolume == orig(this.originalVolume)
this.originalVolume == orig(this.remainingVolume)
this.originalVolume == orig(this.cancelledVolume)
this.user == orig(arg0)
this.side == orig(this.side)
constants.BookSide.BUY == orig(constants.BookSide.BUY)
constants.BookSide.SELL == orig(constants.BookSide.SELL)
constants.BookSide.BUY.bookside == orig(constants.BookSide.BUY.bookside)
constants.BookSide.BUY.bookside.toString == orig(constants.BookSide.BUY.bookside.toString)
constants.BookSide.$VALUES == orig(constants.BookSide.$VALUES)
constants.BookSide.$VALUES.getClass().getName() == orig(constants.BookSide.$VALUES.getClass().getName())
constants.BookSide.$VALUES[] == orig(constants.BookSide.$VALUES[])
constants.BookSide.$VALUES[].bookside == orig(constants.BookSide.$VALUES[].bookside)
constants.BookSide.SELL.bookside == orig(constants.BookSide.SELL.bookside)
constants.BookSide.SELL.bookside.toString == orig(constants.BookSide.SELL.bookside.toString)
this.isQuote == orig(this.isQuote)
this.id == orig(this.id)
this.id.toString == orig(this.id.toString)
arg0.toString == orig(arg0.toString)
this.product == null
this.price != null
this.originalVolume == 0
this.user != null
this.side == null
this.isQuote == false
this.id != null
arg0.toString one of { "ANN", "REX" }
Exiting Daikon.
